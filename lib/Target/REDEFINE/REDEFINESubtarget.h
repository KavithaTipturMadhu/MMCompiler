//===-- REDEFINESubtarget.h - REDEFINE subtarget information -----*- C++ -*--===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the REDEFINE specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef REDEFINESUBTARGET_H
#define REDEFINESUBTARGET_H

#include "llvm/ADT/Triple.h"
#include "llvm/Target/TargetSubtargetInfo.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "REDEFINEGenSubtargetInfo.inc"

namespace llvm {
class GlobalValue;
class StringRef;

/**
 * This class is not required rightaway since we have only one subtarget, but we may have more of them in the future. Hence, I am retaining these classes.
 */
class REDEFINESubtarget: public REDEFINEGenSubtargetInfo {
private:
	Triple TargetTriple;

protected:
	enum REDEFINEArchEnum {
		REDEFINE32
	};

	REDEFINEArchEnum REDEFINEArchVersion;

	int CECount;
	int CFCount;
	int CFSize;
	//DGM size in bytes for code and data segment only, excluding context frames
	int DGM;
	int L1;
	int M;
	int N;
  	bool runWCET;
	InstrItineraryData InstrItins;

public:
	REDEFINESubtarget(const std::string &TT, const std::string &CPU, const std::string &FS);

	bool isREDEFINE32() const {
		return REDEFINEArchVersion == REDEFINE32;
	}
	;

	// Automatically generated by tblgen.
	void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

	// Return true if GV can be accessed using LARL for reloc model RM
	// and code model CM.
	bool isPC32DBLSymbol(const GlobalValue *GV, Reloc::Model RM, CodeModel::Model CM) const;


	virtual bool enableMachineScheduler() const;
	
	  /// getInstrItins - Return the instruction itineraies based on subtarget.
	  const InstrItineraryData &getInstrItineraryData() const { return InstrItins; }

	
	bool isTargetELF() const {
		return false;
	}

	int getCeCount() const {
		return CECount;
	}

	int getCfCount() const {
		return CFCount;
	}

	int getCfSize() const {
		return CFSize;
	}

	int getDgm() const {
		return DGM;
	}

	int getL1() const {
		return L1;
	}

	int getM() const {
		return M;
	}

	int getN() const {
		return N;
	}
  	bool enableWCET()   const {
		 return runWCET;
	}
};
} // end namespace llvm

#endif
