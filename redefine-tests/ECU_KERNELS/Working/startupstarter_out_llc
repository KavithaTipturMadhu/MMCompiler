Args: /home/arka/Workspace/work/Git_Compiler_Repo/redefine-tests/ECU_KERNELS/../../..//MM_Compiler_latest/build/Release+Asserts/bin/llc --mattr=+has4ce --mtriple redefine -debug ./Compilation_Error/startupstarter_HyOpPass.ll -o ./Compilation_Error/startupstarter.as 

Features:+has4ce
CPU:REDEFINE

CGP: Found      local addrmode: [Base:%0]
CGP: Found      local addrmode: [Base:%1]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%4]
CGP: Found      local addrmode: [Base:%5]
CGP: Found      local addrmode: [Base:%6]
CGP: Found      local addrmode: [12 + Base:@redefine_in_a]
CGP: Found      local addrmode: [Base:@glob_sg_bit0]
CGP: Found      local addrmode: [16 + Base:@redefine_in_a]
CGP: Found      local addrmode: [Base:@glob_sg_bit1]
CGP: Found      local addrmode: [20 + Base:@redefine_in_a]
CGP: Found      local addrmode: [Base:@nh_fin_de_rampe]
CGP: Found      local addrmode: [Base:%7]
CGP: Found      local addrmode: [Base:%7]
CGP: Found      local addrmode: [Base:%0]
CGP: Found      local addrmode: [Base:%1]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%4]
CGP: Found      local addrmode: [Base:%5]
CGP: Found      local addrmode: [Base:%6]
CGP: Found      local addrmode: [12 + Base:@redefine_in_a]
CGP: Found      local addrmode: [Base:@glob_sg_bit0]
CGP: Found      local addrmode: [16 + Base:@redefine_in_a]
CGP: Found      local addrmode: [Base:@glob_sg_bit1]
CGP: Found      local addrmode: [20 + Base:@redefine_in_a]
CGP: Found      local addrmode: [Base:@nh_fin_de_rampe]
CGP: Found      local addrmode: [Base:%7]
CGP: Found      local addrmode: [Base:%7]
To merge:

redefine_start1.entry:
  %0 = bitcast float* @SG_RAMP_MAX to float*
  store float 0x3FE3333340000000, float* %0, align 4
  %1 = bitcast float* @SG_MAX to float*
  store float 0x3FECCCCCC0000000, float* %1, align 4
  %2 = bitcast i32* @NH_STARTER_SHUTOFF to i32*
  store i32 17000, i32* %2, align 4
  %3 = bitcast i32* @SG_MAX_RPM to i32*
  store i32 15000, i32* %3, align 4
  %4 = bitcast i32* @glob_sg_bit0 to i32*
  store i32 0, i32* %4, align 4
  %5 = bitcast i32* @glob_sg_bit1 to i32*
  store i32 0, i32* %5, align 4
  %6 = bitcast float* @nh_fin_de_rampe to float*
  store float 0.000000e+00, float* %6, align 4
  %7 = alloca i32*, align 4, !ConsumedBy !6
  %8 = load i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3), align 4
  store i32 %8, i32* @glob_sg_bit0, align 4
  %9 = load i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4), align 4
  store i32 %9, i32* @glob_sg_bit1, align 4
  %10 = load float* bitcast (i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 5) to float*), align 4
  store float %10, float* @nh_fin_de_rampe, align 4
  store i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 0), i32** %7
  %11 = load i32** %7
  br label %redefine_start1.return



Computing probabilities for redefine_start1.return
new hop:redefine_start1
new hyop#0:redefine_start1
new hop:redefine_start2
new hyop#1:redefine_start2
new hop:startup_starter3
new hyop#2:startup_starter3
problems setting inputs?
skipping abort
source hop:redefine_start1
frame size for hop redefine_start1:4
source hop:redefine_start2
source hop:startup_starter3
frame size for hop startup_starter3:28
max mem frame size:28
digraph{
redefine_start1[label="Name:redefine_start1,Dom:NULL, PostDom:NULL,Map:0:0, Context frame:0,SyncCount:1"];
redefine_start1->startup_starter3[label=localref];
redefine_start2[label="Name:redefine_start2,Dom:NULL, PostDom:NULL,Map:0:0, Context frame:0,SyncCount:0"];
startup_starter3[label="Name:startup_starter3,Dom:NULL, PostDom:NULL,Map:0:0, Context frame:0,SyncCount:0"];
startup_starter3->redefine_start2[label=localref];
}
Setting domf of node redefine_start1 to size 0
Setting domf of node redefine_start2 to size 0
Setting domf of node startup_starter3 to size 0
idom of node:redefine_start1
idom of node:startup_starter3

------
forwarding address to redefine_start1:

------
forwarding address to redefine_start2:

------
forwarding address to startup_starter3:

Dominant sequence computed:
redefine_start1->startup_starter3->redefine_start2->

Dominant sequence computed:
redefine_start1->startup_starter3->redefine_start2->
before merging, num of clusters:1
each cluster:
redefine_start1,startup_starter3,redefine_start2,
Minimizing ordering edges
setting context frame id of redefine_start1 to 0
setting context frame id of startup_starter3 to 1
setting context frame id of redefine_start2 to 2
Computing whether there is a control/scalar path between a pair of HyperOps communicating via memory and adding sync edges if there is no control path
adding a sync edge between redefine_start1 and startup_starter3
adding a sync edge between startup_starter3 and redefine_start2
If the producer and consumer are mapped to different CRs, treat them as localrefs only instead of scalars to avoid reconciles
problems setting inputs?
generated cfg:Setting domf of node redefine_start1 to size 0
Setting domf of node redefine_start2 to size 0
Setting domf of node startup_starter3 to size 0
idom of node:redefine_start1
idom of node:startup_starter3
Delivering reaching predicate with decrement count in case operands to be delivered are on the non taken path
before decrementing sync, graph:Decrementing sync count for nodes with sync edges coming from mutually exclusive paths
updating node with incoming sync edges redefine_start1
updating node with incoming sync edges redefine_start2
updating node with incoming sync edges startup_starter3
after minimizing cluster and converting scalar edges to local refs, graph:digraph{
redefine_start1[label="Name:redefine_start1,Dom:NULL, PostDom:startup_starter3,Map:0:0, Context frame:0,SyncCount:1"];
redefine_start1->startup_starter3[label=sync];
redefine_start1->startup_starter3[label=localref];
redefine_start2[label="Name:redefine_start2,Dom:startup_starter3, PostDom:NULL,Map:0:0, Context frame:2,SyncCount:1"];
startup_starter3[label="Name:startup_starter3,Dom:redefine_start1, PostDom:redefine_start2,Map:0:0, Context frame:1,SyncCount:1"];
startup_starter3->redefine_start2[label=localref];
startup_starter3->redefine_start2[label=sync];
}
num of clusters:1
num constraints:0
setting target resource 0
setting target resource 0
setting target resource 0
digraph{
redefine_start1[label="Name:redefine_start1,Dom:NULL, PostDom:startup_starter3,Map:0:0, Context frame:0,SyncCount:1"];
redefine_start1->startup_starter3[label=sync];
redefine_start1->startup_starter3[label=localref];
redefine_start2[label="Name:redefine_start2,Dom:startup_starter3, PostDom:NULL,Map:0:0, Context frame:2,SyncCount:1"];
startup_starter3[label="Name:startup_starter3,Dom:redefine_start1, PostDom:redefine_start2,Map:0:0, Context frame:1,SyncCount:1"];
startup_starter3->redefine_start2[label=localref];
startup_starter3->redefine_start2[label=sync];
}



=== redefine_start1
I was here to add @SG_RAMP_MAX = global float 0x3FE3333340000000, align 4
store visit is after?  store float 0x3FE3333340000000, float* %0, align 4
I was here to add float 0x3FE3333340000000
whats in dag after store?SelectionDAG has 6 nodes:
  0x3b75590: i32 = Constant<0>

    0x3b57b78: ch = EntryToken [ORD=2]

    0x3b75490: f32 = ConstantFP<6.000000e-01> [ORD=2]

    0x3b75390: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0 [ORD=1]

    0x3b75690: i32 = undef [ORD=2]

  0x3b75790: ch = store 0x3b57b78, 0x3b75490, 0x3b75390, 0x3b75690<ST4[%0]> [ORD=2]


I was here to add @SG_MAX = global float 0x3FECCCCCC0000000, align 4
store visit is after?  store float 0x3FECCCCCC0000000, float* %1, align 4
I was here to add float 0x3FECCCCCC0000000
whats in dag after store?SelectionDAG has 9 nodes:
  0x3b75590: i32 = Constant<0>

  0x3b75690: i32 = undef [ORD=2]

      0x3b57b78: ch = EntryToken [ORD=2]

      0x3b75490: f32 = ConstantFP<6.000000e-01> [ORD=2]

      0x3b75390: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0 [ORD=1]

      0x3b75690: <multiple use>
    0x3b75790: ch = store 0x3b57b78, 0x3b75490, 0x3b75390, 0x3b75690<ST4[%0]> [ORD=2]

    0x3b75990: f32 = ConstantFP<9.000000e-01> [ORD=4]

    0x3b75890: i32 = GlobalAddress<float* @SG_MAX> 0 [ORD=3]

    0x3b75690: <multiple use>
  0x3b75a90: ch = store 0x3b75790, 0x3b75990, 0x3b75890, 0x3b75690<ST4[%1]> [ORD=4]


I was here to add @NH_STARTER_SHUTOFF = global i32 17000, align 4
store visit is after?  store i32 17000, i32* %2, align 4
I was here to add i32 17000
whats in dag after store?SelectionDAG has 12 nodes:
  0x3b75590: i32 = Constant<0>

  0x3b75690: i32 = undef [ORD=2]

        0x3b57b78: ch = EntryToken [ORD=2]

        0x3b75490: f32 = ConstantFP<6.000000e-01> [ORD=2]

        0x3b75390: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0 [ORD=1]

        0x3b75690: <multiple use>
      0x3b75790: ch = store 0x3b57b78, 0x3b75490, 0x3b75390, 0x3b75690<ST4[%0]> [ORD=2]

      0x3b75990: f32 = ConstantFP<9.000000e-01> [ORD=4]

      0x3b75890: i32 = GlobalAddress<float* @SG_MAX> 0 [ORD=3]

      0x3b75690: <multiple use>
    0x3b75a90: ch = store 0x3b75790, 0x3b75990, 0x3b75890, 0x3b75690<ST4[%1]> [ORD=4]

    0x3b75c90: i32 = Constant<17000> [ORD=6]

    0x3b75b90: i32 = GlobalAddress<i32* @NH_STARTER_SHUTOFF> 0 [ORD=5]

    0x3b75690: <multiple use>
  0x3b75d90: ch = store 0x3b75a90, 0x3b75c90, 0x3b75b90, 0x3b75690<ST4[%2]> [ORD=6]


I was here to add @SG_MAX_RPM = global i32 15000, align 4
store visit is after?  store i32 15000, i32* %3, align 4
I was here to add i32 15000
whats in dag after store?SelectionDAG has 15 nodes:
  0x3b75590: i32 = Constant<0>

  0x3b75690: i32 = undef [ORD=2]

          0x3b57b78: ch = EntryToken [ORD=2]

          0x3b75490: f32 = ConstantFP<6.000000e-01> [ORD=2]

          0x3b75390: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0 [ORD=1]

          0x3b75690: <multiple use>
        0x3b75790: ch = store 0x3b57b78, 0x3b75490, 0x3b75390, 0x3b75690<ST4[%0]> [ORD=2]

        0x3b75990: f32 = ConstantFP<9.000000e-01> [ORD=4]

        0x3b75890: i32 = GlobalAddress<float* @SG_MAX> 0 [ORD=3]

        0x3b75690: <multiple use>
      0x3b75a90: ch = store 0x3b75790, 0x3b75990, 0x3b75890, 0x3b75690<ST4[%1]> [ORD=4]

      0x3b75c90: i32 = Constant<17000> [ORD=6]

      0x3b75b90: i32 = GlobalAddress<i32* @NH_STARTER_SHUTOFF> 0 [ORD=5]

      0x3b75690: <multiple use>
    0x3b75d90: ch = store 0x3b75a90, 0x3b75c90, 0x3b75b90, 0x3b75690<ST4[%2]> [ORD=6]

    0x3b75f90: i32 = Constant<15000> [ORD=8]

    0x3b75e90: i32 = GlobalAddress<i32* @SG_MAX_RPM> 0 [ORD=7]

    0x3b75690: <multiple use>
  0x3b76090: ch = store 0x3b75d90, 0x3b75f90, 0x3b75e90, 0x3b75690<ST4[%3]> [ORD=8]


I was here to add @glob_sg_bit0 = common global i32 0, align 4
store visit is after?  store i32 0, i32* %4, align 4
I was here to add i32 0
whats in dag after store?SelectionDAG has 17 nodes:
  0x3b75690: i32 = undef [ORD=2]

            0x3b57b78: ch = EntryToken [ORD=2]

            0x3b75490: f32 = ConstantFP<6.000000e-01> [ORD=2]

            0x3b75390: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0 [ORD=1]

            0x3b75690: <multiple use>
          0x3b75790: ch = store 0x3b57b78, 0x3b75490, 0x3b75390, 0x3b75690<ST4[%0]> [ORD=2]

          0x3b75990: f32 = ConstantFP<9.000000e-01> [ORD=4]

          0x3b75890: i32 = GlobalAddress<float* @SG_MAX> 0 [ORD=3]

          0x3b75690: <multiple use>
        0x3b75a90: ch = store 0x3b75790, 0x3b75990, 0x3b75890, 0x3b75690<ST4[%1]> [ORD=4]

        0x3b75c90: i32 = Constant<17000> [ORD=6]

        0x3b75b90: i32 = GlobalAddress<i32* @NH_STARTER_SHUTOFF> 0 [ORD=5]

        0x3b75690: <multiple use>
      0x3b75d90: ch = store 0x3b75a90, 0x3b75c90, 0x3b75b90, 0x3b75690<ST4[%2]> [ORD=6]

      0x3b75f90: i32 = Constant<15000> [ORD=8]

      0x3b75e90: i32 = GlobalAddress<i32* @SG_MAX_RPM> 0 [ORD=7]

      0x3b75690: <multiple use>
    0x3b76090: ch = store 0x3b75d90, 0x3b75f90, 0x3b75e90, 0x3b75690<ST4[%3]> [ORD=8]

    0x3b75590: i32 = Constant<0> [ORD=10]

    0x3b76190: i32 = GlobalAddress<i32* @glob_sg_bit0> 0 [ORD=9]

    0x3b75690: <multiple use>
  0x3b76fc0: ch = store 0x3b76090, 0x3b75590, 0x3b76190, 0x3b75690<ST4[%4]> [ORD=10]


I was here to add @glob_sg_bit1 = common global i32 0, align 4
store visit is after?  store i32 0, i32* %5, align 4
whats in dag after store?SelectionDAG has 19 nodes:
  0x3b75590: i32 = Constant<0> [ORD=10]

  0x3b75690: i32 = undef [ORD=2]

              0x3b57b78: ch = EntryToken [ORD=2]

              0x3b75490: f32 = ConstantFP<6.000000e-01> [ORD=2]

              0x3b75390: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0 [ORD=1]

              0x3b75690: <multiple use>
            0x3b75790: ch = store 0x3b57b78, 0x3b75490, 0x3b75390, 0x3b75690<ST4[%0]> [ORD=2]

            0x3b75990: f32 = ConstantFP<9.000000e-01> [ORD=4]

            0x3b75890: i32 = GlobalAddress<float* @SG_MAX> 0 [ORD=3]

            0x3b75690: <multiple use>
          0x3b75a90: ch = store 0x3b75790, 0x3b75990, 0x3b75890, 0x3b75690<ST4[%1]> [ORD=4]

          0x3b75c90: i32 = Constant<17000> [ORD=6]

          0x3b75b90: i32 = GlobalAddress<i32* @NH_STARTER_SHUTOFF> 0 [ORD=5]

          0x3b75690: <multiple use>
        0x3b75d90: ch = store 0x3b75a90, 0x3b75c90, 0x3b75b90, 0x3b75690<ST4[%2]> [ORD=6]

        0x3b75f90: i32 = Constant<15000> [ORD=8]

        0x3b75e90: i32 = GlobalAddress<i32* @SG_MAX_RPM> 0 [ORD=7]

        0x3b75690: <multiple use>
      0x3b76090: ch = store 0x3b75d90, 0x3b75f90, 0x3b75e90, 0x3b75690<ST4[%3]> [ORD=8]

      0x3b75590: <multiple use>
      0x3b76190: i32 = GlobalAddress<i32* @glob_sg_bit0> 0 [ORD=9]

      0x3b75690: <multiple use>
    0x3b76fc0: ch = store 0x3b76090, 0x3b75590, 0x3b76190, 0x3b75690<ST4[%4]> [ORD=10]

    0x3b75590: <multiple use>
    0x3b770c0: i32 = GlobalAddress<i32* @glob_sg_bit1> 0 [ORD=11]

    0x3b75690: <multiple use>
  0x3b771c0: ch = store 0x3b76fc0, 0x3b75590, 0x3b770c0, 0x3b75690<ST4[%5]> [ORD=12]


I was here to add @nh_fin_de_rampe = common global float 0.000000e+00, align 4
store visit is after?  store float 0.000000e+00, float* %6, align 4
I was here to add float 0.000000e+00
whats in dag after store?SelectionDAG has 22 nodes:
  0x3b75590: i32 = Constant<0> [ORD=10]

  0x3b75690: i32 = undef [ORD=2]

                0x3b57b78: ch = EntryToken [ORD=2]

                0x3b75490: f32 = ConstantFP<6.000000e-01> [ORD=2]

                0x3b75390: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0 [ORD=1]

                0x3b75690: <multiple use>
              0x3b75790: ch = store 0x3b57b78, 0x3b75490, 0x3b75390, 0x3b75690<ST4[%0]> [ORD=2]

              0x3b75990: f32 = ConstantFP<9.000000e-01> [ORD=4]

              0x3b75890: i32 = GlobalAddress<float* @SG_MAX> 0 [ORD=3]

              0x3b75690: <multiple use>
            0x3b75a90: ch = store 0x3b75790, 0x3b75990, 0x3b75890, 0x3b75690<ST4[%1]> [ORD=4]

            0x3b75c90: i32 = Constant<17000> [ORD=6]

            0x3b75b90: i32 = GlobalAddress<i32* @NH_STARTER_SHUTOFF> 0 [ORD=5]

            0x3b75690: <multiple use>
          0x3b75d90: ch = store 0x3b75a90, 0x3b75c90, 0x3b75b90, 0x3b75690<ST4[%2]> [ORD=6]

          0x3b75f90: i32 = Constant<15000> [ORD=8]

          0x3b75e90: i32 = GlobalAddress<i32* @SG_MAX_RPM> 0 [ORD=7]

          0x3b75690: <multiple use>
        0x3b76090: ch = store 0x3b75d90, 0x3b75f90, 0x3b75e90, 0x3b75690<ST4[%3]> [ORD=8]

        0x3b75590: <multiple use>
        0x3b76190: i32 = GlobalAddress<i32* @glob_sg_bit0> 0 [ORD=9]

        0x3b75690: <multiple use>
      0x3b76fc0: ch = store 0x3b76090, 0x3b75590, 0x3b76190, 0x3b75690<ST4[%4]> [ORD=10]

      0x3b75590: <multiple use>
      0x3b770c0: i32 = GlobalAddress<i32* @glob_sg_bit1> 0 [ORD=11]

      0x3b75690: <multiple use>
    0x3b771c0: ch = store 0x3b76fc0, 0x3b75590, 0x3b770c0, 0x3b75690<ST4[%5]> [ORD=12]

    0x3b773c0: f32 = ConstantFP<0.000000e+00> [ORD=14]

    0x3b772c0: i32 = GlobalAddress<float* @nh_fin_de_rampe> 0 [ORD=13]

    0x3b75690: <multiple use>
  0x3b774c0: ch = store 0x3b771c0, 0x3b773c0, 0x3b772c0, 0x3b75690<ST4[%6]> [ORD=14]


visiting load instruction   %8 = load i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3), align 4
I was here to add i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3)
I was here to add @redefine_in_a = common global [6 x i32] zeroinitializer, align 4
with I type i32and sd value :0x3b778c0: i32 = add 0x3b775c0, 0x3b777c0
new load?0x3b779c0: i32,ch = load 0x3b774c0, 0x3b778c0, 0x3b75690<LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3)]>
dag after load is dealt with?SelectionDAG has 27 nodes:
  0x3b75590: i32 = Constant<0> [ORD=10]

  0x3b75690: i32 = undef [ORD=2]

  0x3b776c0: i64 = Constant<12>

                  0x3b57b78: ch = EntryToken [ORD=2]

                  0x3b75490: f32 = ConstantFP<6.000000e-01> [ORD=2]

                  0x3b75390: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0 [ORD=1]

                  0x3b75690: <multiple use>
                0x3b75790: ch = store 0x3b57b78, 0x3b75490, 0x3b75390, 0x3b75690<ST4[%0]> [ORD=2]

                0x3b75990: f32 = ConstantFP<9.000000e-01> [ORD=4]

                0x3b75890: i32 = GlobalAddress<float* @SG_MAX> 0 [ORD=3]

                0x3b75690: <multiple use>
              0x3b75a90: ch = store 0x3b75790, 0x3b75990, 0x3b75890, 0x3b75690<ST4[%1]> [ORD=4]

              0x3b75c90: i32 = Constant<17000> [ORD=6]

              0x3b75b90: i32 = GlobalAddress<i32* @NH_STARTER_SHUTOFF> 0 [ORD=5]

              0x3b75690: <multiple use>
            0x3b75d90: ch = store 0x3b75a90, 0x3b75c90, 0x3b75b90, 0x3b75690<ST4[%2]> [ORD=6]

            0x3b75f90: i32 = Constant<15000> [ORD=8]

            0x3b75e90: i32 = GlobalAddress<i32* @SG_MAX_RPM> 0 [ORD=7]

            0x3b75690: <multiple use>
          0x3b76090: ch = store 0x3b75d90, 0x3b75f90, 0x3b75e90, 0x3b75690<ST4[%3]> [ORD=8]

          0x3b75590: <multiple use>
          0x3b76190: i32 = GlobalAddress<i32* @glob_sg_bit0> 0 [ORD=9]

          0x3b75690: <multiple use>
        0x3b76fc0: ch = store 0x3b76090, 0x3b75590, 0x3b76190, 0x3b75690<ST4[%4]> [ORD=10]

        0x3b75590: <multiple use>
        0x3b770c0: i32 = GlobalAddress<i32* @glob_sg_bit1> 0 [ORD=11]

        0x3b75690: <multiple use>
      0x3b771c0: ch = store 0x3b76fc0, 0x3b75590, 0x3b770c0, 0x3b75690<ST4[%5]> [ORD=12]

      0x3b773c0: f32 = ConstantFP<0.000000e+00> [ORD=14]

      0x3b772c0: i32 = GlobalAddress<float* @nh_fin_de_rampe> 0 [ORD=13]

      0x3b75690: <multiple use>
    0x3b774c0: ch = store 0x3b771c0, 0x3b773c0, 0x3b772c0, 0x3b75690<ST4[%6]> [ORD=14]

      0x3b775c0: i32 = GlobalAddress<[6 x i32]* @redefine_in_a> 0 [ORD=15]

      0x3b777c0: i32 = Constant<12> [ORD=15]

    0x3b778c0: i32 = add 0x3b775c0, 0x3b777c0 [ORD=15]

    0x3b75690: <multiple use>
  0x3b779c0: i32,ch = load 0x3b774c0, 0x3b778c0, 0x3b75690<LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3)]>

                0x3b57b78: ch = EntryToken [ORD=2]

                0x3b75490: f32 = ConstantFP<6.000000e-01> [ORD=2]

                0x3b75390: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0 [ORD=1]

                0x3b75690: <multiple use>
              0x3b75790: ch = store 0x3b57b78, 0x3b75490, 0x3b75390, 0x3b75690<ST4[%0]> [ORD=2]

              0x3b75990: f32 = ConstantFP<9.000000e-01> [ORD=4]

              0x3b75890: i32 = GlobalAddress<float* @SG_MAX> 0 [ORD=3]

              0x3b75690: <multiple use>
            0x3b75a90: ch = store 0x3b75790, 0x3b75990, 0x3b75890, 0x3b75690<ST4[%1]> [ORD=4]

            0x3b75c90: i32 = Constant<17000> [ORD=6]

            0x3b75b90: i32 = GlobalAddress<i32* @NH_STARTER_SHUTOFF> 0 [ORD=5]

            0x3b75690: <multiple use>
          0x3b75d90: ch = store 0x3b75a90, 0x3b75c90, 0x3b75b90, 0x3b75690<ST4[%2]> [ORD=6]

          0x3b75f90: i32 = Constant<15000> [ORD=8]

          0x3b75e90: i32 = GlobalAddress<i32* @SG_MAX_RPM> 0 [ORD=7]

          0x3b75690: <multiple use>
        0x3b76090: ch = store 0x3b75d90, 0x3b75f90, 0x3b75e90, 0x3b75690<ST4[%3]> [ORD=8]

        0x3b75590: <multiple use>
        0x3b76190: i32 = GlobalAddress<i32* @glob_sg_bit0> 0 [ORD=9]

        0x3b75690: <multiple use>
      0x3b76fc0: ch = store 0x3b76090, 0x3b75590, 0x3b76190, 0x3b75690<ST4[%4]> [ORD=10]

      0x3b75590: <multiple use>
      0x3b770c0: i32 = GlobalAddress<i32* @glob_sg_bit1> 0 [ORD=11]

      0x3b75690: <multiple use>
    0x3b771c0: ch = store 0x3b76fc0, 0x3b75590, 0x3b770c0, 0x3b75690<ST4[%5]> [ORD=12]

    0x3b773c0: f32 = ConstantFP<0.000000e+00> [ORD=14]

    0x3b772c0: i32 = GlobalAddress<float* @nh_fin_de_rampe> 0 [ORD=13]

    0x3b75690: <multiple use>
  0x3b774c0: ch = store 0x3b771c0, 0x3b773c0, 0x3b772c0, 0x3b75690<ST4[%6]> [ORD=14]


store visit is after?  store i32 %8, i32* @glob_sg_bit0, align 4
whats in dag after store?SelectionDAG has 28 nodes:
  0x3b75590: i32 = Constant<0> [ORD=10]

  0x3b75690: i32 = undef [ORD=2]

  0x3b76190: i32 = GlobalAddress<i32* @glob_sg_bit0> 0 [ORD=9]

  0x3b776c0: i64 = Constant<12>

                  0x3b57b78: ch = EntryToken [ORD=2]

                  0x3b75490: f32 = ConstantFP<6.000000e-01> [ORD=2]

                  0x3b75390: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0 [ORD=1]

                  0x3b75690: <multiple use>
                0x3b75790: ch = store 0x3b57b78, 0x3b75490, 0x3b75390, 0x3b75690<ST4[%0]> [ORD=2]

                0x3b75990: f32 = ConstantFP<9.000000e-01> [ORD=4]

                0x3b75890: i32 = GlobalAddress<float* @SG_MAX> 0 [ORD=3]

                0x3b75690: <multiple use>
              0x3b75a90: ch = store 0x3b75790, 0x3b75990, 0x3b75890, 0x3b75690<ST4[%1]> [ORD=4]

              0x3b75c90: i32 = Constant<17000> [ORD=6]

              0x3b75b90: i32 = GlobalAddress<i32* @NH_STARTER_SHUTOFF> 0 [ORD=5]

              0x3b75690: <multiple use>
            0x3b75d90: ch = store 0x3b75a90, 0x3b75c90, 0x3b75b90, 0x3b75690<ST4[%2]> [ORD=6]

            0x3b75f90: i32 = Constant<15000> [ORD=8]

            0x3b75e90: i32 = GlobalAddress<i32* @SG_MAX_RPM> 0 [ORD=7]

            0x3b75690: <multiple use>
          0x3b76090: ch = store 0x3b75d90, 0x3b75f90, 0x3b75e90, 0x3b75690<ST4[%3]> [ORD=8]

          0x3b75590: <multiple use>
          0x3b76190: <multiple use>
          0x3b75690: <multiple use>
        0x3b76fc0: ch = store 0x3b76090, 0x3b75590, 0x3b76190, 0x3b75690<ST4[%4]> [ORD=10]

        0x3b75590: <multiple use>
        0x3b770c0: i32 = GlobalAddress<i32* @glob_sg_bit1> 0 [ORD=11]

        0x3b75690: <multiple use>
      0x3b771c0: ch = store 0x3b76fc0, 0x3b75590, 0x3b770c0, 0x3b75690<ST4[%5]> [ORD=12]

      0x3b773c0: f32 = ConstantFP<0.000000e+00> [ORD=14]

      0x3b772c0: i32 = GlobalAddress<float* @nh_fin_de_rampe> 0 [ORD=13]

      0x3b75690: <multiple use>
    0x3b774c0: ch = store 0x3b771c0, 0x3b773c0, 0x3b772c0, 0x3b75690<ST4[%6]> [ORD=14]

      0x3b775c0: i32 = GlobalAddress<[6 x i32]* @redefine_in_a> 0 [ORD=15]

      0x3b777c0: i32 = Constant<12> [ORD=15]

    0x3b778c0: i32 = add 0x3b775c0, 0x3b777c0 [ORD=15]

    0x3b75690: <multiple use>
  0x3b779c0: i32,ch = load 0x3b774c0, 0x3b778c0, 0x3b75690<LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3)]> [ORD=16]

    0x3b779c0: <multiple use>
    0x3b779c0: <multiple use>
    0x3b76190: <multiple use>
    0x3b75690: <multiple use>
  0x3b77ac0: ch = store 0x3b779c0:1, 0x3b779c0, 0x3b76190, 0x3b75690<ST4[@glob_sg_bit0]> [ORD=17]


visiting load instruction   %9 = load i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4), align 4
I was here to add i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4)
with I type i32and sd value :0x3b77dc0: i32 = add 0x3b775c0, 0x3b77cc0
new load?0x3b79030: i32,ch = load 0x3b77ac0, 0x3b77dc0, 0x3b75690<LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4)]>
dag after load is dealt with?SelectionDAG has 32 nodes:
  0x3b75590: i32 = Constant<0> [ORD=10]

  0x3b75690: i32 = undef [ORD=2]

  0x3b76190: i32 = GlobalAddress<i32* @glob_sg_bit0> 0 [ORD=9]

  0x3b775c0: i32 = GlobalAddress<[6 x i32]* @redefine_in_a> 0 [ORD=15]

  0x3b776c0: i64 = Constant<12>

                  0x3b57b78: ch = EntryToken [ORD=2]

                  0x3b75490: f32 = ConstantFP<6.000000e-01> [ORD=2]

                  0x3b75390: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0 [ORD=1]

                  0x3b75690: <multiple use>
                0x3b75790: ch = store 0x3b57b78, 0x3b75490, 0x3b75390, 0x3b75690<ST4[%0]> [ORD=2]

                0x3b75990: f32 = ConstantFP<9.000000e-01> [ORD=4]

                0x3b75890: i32 = GlobalAddress<float* @SG_MAX> 0 [ORD=3]

                0x3b75690: <multiple use>
              0x3b75a90: ch = store 0x3b75790, 0x3b75990, 0x3b75890, 0x3b75690<ST4[%1]> [ORD=4]

              0x3b75c90: i32 = Constant<17000> [ORD=6]

              0x3b75b90: i32 = GlobalAddress<i32* @NH_STARTER_SHUTOFF> 0 [ORD=5]

              0x3b75690: <multiple use>
            0x3b75d90: ch = store 0x3b75a90, 0x3b75c90, 0x3b75b90, 0x3b75690<ST4[%2]> [ORD=6]

            0x3b75f90: i32 = Constant<15000> [ORD=8]

            0x3b75e90: i32 = GlobalAddress<i32* @SG_MAX_RPM> 0 [ORD=7]

            0x3b75690: <multiple use>
          0x3b76090: ch = store 0x3b75d90, 0x3b75f90, 0x3b75e90, 0x3b75690<ST4[%3]> [ORD=8]

          0x3b75590: <multiple use>
          0x3b76190: <multiple use>
          0x3b75690: <multiple use>
        0x3b76fc0: ch = store 0x3b76090, 0x3b75590, 0x3b76190, 0x3b75690<ST4[%4]> [ORD=10]

        0x3b75590: <multiple use>
        0x3b770c0: i32 = GlobalAddress<i32* @glob_sg_bit1> 0 [ORD=11]

        0x3b75690: <multiple use>
      0x3b771c0: ch = store 0x3b76fc0, 0x3b75590, 0x3b770c0, 0x3b75690<ST4[%5]> [ORD=12]

      0x3b773c0: f32 = ConstantFP<0.000000e+00> [ORD=14]

      0x3b772c0: i32 = GlobalAddress<float* @nh_fin_de_rampe> 0 [ORD=13]

      0x3b75690: <multiple use>
    0x3b774c0: ch = store 0x3b771c0, 0x3b773c0, 0x3b772c0, 0x3b75690<ST4[%6]> [ORD=14]

      0x3b775c0: <multiple use>
      0x3b777c0: i32 = Constant<12> [ORD=15]

    0x3b778c0: i32 = add 0x3b775c0, 0x3b777c0 [ORD=15]

    0x3b75690: <multiple use>
  0x3b779c0: i32,ch = load 0x3b774c0, 0x3b778c0, 0x3b75690<LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3)]> [ORD=16]

  0x3b77bc0: i64 = Constant<16>

      0x3b779c0: <multiple use>
      0x3b779c0: <multiple use>
      0x3b76190: <multiple use>
      0x3b75690: <multiple use>
    0x3b77ac0: ch = store 0x3b779c0:1, 0x3b779c0, 0x3b76190, 0x3b75690<ST4[@glob_sg_bit0]> [ORD=17]

      0x3b775c0: <multiple use>
      0x3b77cc0: i32 = Constant<16> [ORD=18]

    0x3b77dc0: i32 = add 0x3b775c0, 0x3b77cc0 [ORD=18]

    0x3b75690: <multiple use>
  0x3b79030: i32,ch = load 0x3b77ac0, 0x3b77dc0, 0x3b75690<LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4)]>

    0x3b779c0: <multiple use>
    0x3b779c0: <multiple use>
    0x3b76190: <multiple use>
    0x3b75690: <multiple use>
  0x3b77ac0: ch = store 0x3b779c0:1, 0x3b779c0, 0x3b76190, 0x3b75690<ST4[@glob_sg_bit0]> [ORD=17]


store visit is after?  store i32 %9, i32* @glob_sg_bit1, align 4
whats in dag after store?SelectionDAG has 33 nodes:
  0x3b75590: i32 = Constant<0> [ORD=10]

  0x3b75690: i32 = undef [ORD=2]

  0x3b76190: i32 = GlobalAddress<i32* @glob_sg_bit0> 0 [ORD=9]

  0x3b770c0: i32 = GlobalAddress<i32* @glob_sg_bit1> 0 [ORD=11]

  0x3b775c0: i32 = GlobalAddress<[6 x i32]* @redefine_in_a> 0 [ORD=15]

  0x3b776c0: i64 = Constant<12>

                  0x3b57b78: ch = EntryToken [ORD=2]

                  0x3b75490: f32 = ConstantFP<6.000000e-01> [ORD=2]

                  0x3b75390: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0 [ORD=1]

                  0x3b75690: <multiple use>
                0x3b75790: ch = store 0x3b57b78, 0x3b75490, 0x3b75390, 0x3b75690<ST4[%0]> [ORD=2]

                0x3b75990: f32 = ConstantFP<9.000000e-01> [ORD=4]

                0x3b75890: i32 = GlobalAddress<float* @SG_MAX> 0 [ORD=3]

                0x3b75690: <multiple use>
              0x3b75a90: ch = store 0x3b75790, 0x3b75990, 0x3b75890, 0x3b75690<ST4[%1]> [ORD=4]

              0x3b75c90: i32 = Constant<17000> [ORD=6]

              0x3b75b90: i32 = GlobalAddress<i32* @NH_STARTER_SHUTOFF> 0 [ORD=5]

              0x3b75690: <multiple use>
            0x3b75d90: ch = store 0x3b75a90, 0x3b75c90, 0x3b75b90, 0x3b75690<ST4[%2]> [ORD=6]

            0x3b75f90: i32 = Constant<15000> [ORD=8]

            0x3b75e90: i32 = GlobalAddress<i32* @SG_MAX_RPM> 0 [ORD=7]

            0x3b75690: <multiple use>
          0x3b76090: ch = store 0x3b75d90, 0x3b75f90, 0x3b75e90, 0x3b75690<ST4[%3]> [ORD=8]

          0x3b75590: <multiple use>
          0x3b76190: <multiple use>
          0x3b75690: <multiple use>
        0x3b76fc0: ch = store 0x3b76090, 0x3b75590, 0x3b76190, 0x3b75690<ST4[%4]> [ORD=10]

        0x3b75590: <multiple use>
        0x3b770c0: <multiple use>
        0x3b75690: <multiple use>
      0x3b771c0: ch = store 0x3b76fc0, 0x3b75590, 0x3b770c0, 0x3b75690<ST4[%5]> [ORD=12]

      0x3b773c0: f32 = ConstantFP<0.000000e+00> [ORD=14]

      0x3b772c0: i32 = GlobalAddress<float* @nh_fin_de_rampe> 0 [ORD=13]

      0x3b75690: <multiple use>
    0x3b774c0: ch = store 0x3b771c0, 0x3b773c0, 0x3b772c0, 0x3b75690<ST4[%6]> [ORD=14]

      0x3b775c0: <multiple use>
      0x3b777c0: i32 = Constant<12> [ORD=15]

    0x3b778c0: i32 = add 0x3b775c0, 0x3b777c0 [ORD=15]

    0x3b75690: <multiple use>
  0x3b779c0: i32,ch = load 0x3b774c0, 0x3b778c0, 0x3b75690<LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3)]> [ORD=16]

  0x3b77bc0: i64 = Constant<16>

      0x3b779c0: <multiple use>
      0x3b779c0: <multiple use>
      0x3b76190: <multiple use>
      0x3b75690: <multiple use>
    0x3b77ac0: ch = store 0x3b779c0:1, 0x3b779c0, 0x3b76190, 0x3b75690<ST4[@glob_sg_bit0]> [ORD=17]

      0x3b775c0: <multiple use>
      0x3b77cc0: i32 = Constant<16> [ORD=18]

    0x3b77dc0: i32 = add 0x3b775c0, 0x3b77cc0 [ORD=18]

    0x3b75690: <multiple use>
  0x3b79030: i32,ch = load 0x3b77ac0, 0x3b77dc0, 0x3b75690<LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4)]> [ORD=19]

    0x3b79030: <multiple use>
    0x3b79030: <multiple use>
    0x3b770c0: <multiple use>
    0x3b75690: <multiple use>
  0x3b79130: ch = store 0x3b79030:1, 0x3b79030, 0x3b770c0, 0x3b75690<ST4[@glob_sg_bit1]> [ORD=20]


visiting load instruction   %10 = load float* bitcast (i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 5) to float*), align 4
I was here to add float* bitcast (i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 5) to float*)
I was here to add i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 5)
with I type floatand sd value :0x3b79430: i32 = add 0x3b775c0, 0x3b79330
new load?0x3b79530: f32,ch = load 0x3b79130, 0x3b79430, 0x3b75690<LD4[bitcast (i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 5) to float*)]>
dag after load is dealt with?SelectionDAG has 37 nodes:
  0x3b75590: i32 = Constant<0> [ORD=10]

  0x3b75690: i32 = undef [ORD=2]

  0x3b76190: i32 = GlobalAddress<i32* @glob_sg_bit0> 0 [ORD=9]

  0x3b770c0: i32 = GlobalAddress<i32* @glob_sg_bit1> 0 [ORD=11]

  0x3b775c0: i32 = GlobalAddress<[6 x i32]* @redefine_in_a> 0 [ORD=15]

  0x3b776c0: i64 = Constant<12>

                  0x3b57b78: ch = EntryToken [ORD=2]

                  0x3b75490: f32 = ConstantFP<6.000000e-01> [ORD=2]

                  0x3b75390: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0 [ORD=1]

                  0x3b75690: <multiple use>
                0x3b75790: ch = store 0x3b57b78, 0x3b75490, 0x3b75390, 0x3b75690<ST4[%0]> [ORD=2]

                0x3b75990: f32 = ConstantFP<9.000000e-01> [ORD=4]

                0x3b75890: i32 = GlobalAddress<float* @SG_MAX> 0 [ORD=3]

                0x3b75690: <multiple use>
              0x3b75a90: ch = store 0x3b75790, 0x3b75990, 0x3b75890, 0x3b75690<ST4[%1]> [ORD=4]

              0x3b75c90: i32 = Constant<17000> [ORD=6]

              0x3b75b90: i32 = GlobalAddress<i32* @NH_STARTER_SHUTOFF> 0 [ORD=5]

              0x3b75690: <multiple use>
            0x3b75d90: ch = store 0x3b75a90, 0x3b75c90, 0x3b75b90, 0x3b75690<ST4[%2]> [ORD=6]

            0x3b75f90: i32 = Constant<15000> [ORD=8]

            0x3b75e90: i32 = GlobalAddress<i32* @SG_MAX_RPM> 0 [ORD=7]

            0x3b75690: <multiple use>
          0x3b76090: ch = store 0x3b75d90, 0x3b75f90, 0x3b75e90, 0x3b75690<ST4[%3]> [ORD=8]

          0x3b75590: <multiple use>
          0x3b76190: <multiple use>
          0x3b75690: <multiple use>
        0x3b76fc0: ch = store 0x3b76090, 0x3b75590, 0x3b76190, 0x3b75690<ST4[%4]> [ORD=10]

        0x3b75590: <multiple use>
        0x3b770c0: <multiple use>
        0x3b75690: <multiple use>
      0x3b771c0: ch = store 0x3b76fc0, 0x3b75590, 0x3b770c0, 0x3b75690<ST4[%5]> [ORD=12]

      0x3b773c0: f32 = ConstantFP<0.000000e+00> [ORD=14]

      0x3b772c0: i32 = GlobalAddress<float* @nh_fin_de_rampe> 0 [ORD=13]

      0x3b75690: <multiple use>
    0x3b774c0: ch = store 0x3b771c0, 0x3b773c0, 0x3b772c0, 0x3b75690<ST4[%6]> [ORD=14]

      0x3b775c0: <multiple use>
      0x3b777c0: i32 = Constant<12> [ORD=15]

    0x3b778c0: i32 = add 0x3b775c0, 0x3b777c0 [ORD=15]

    0x3b75690: <multiple use>
  0x3b779c0: i32,ch = load 0x3b774c0, 0x3b778c0, 0x3b75690<LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3)]> [ORD=16]

  0x3b77bc0: i64 = Constant<16>

      0x3b779c0: <multiple use>
      0x3b779c0: <multiple use>
      0x3b76190: <multiple use>
      0x3b75690: <multiple use>
    0x3b77ac0: ch = store 0x3b779c0:1, 0x3b779c0, 0x3b76190, 0x3b75690<ST4[@glob_sg_bit0]> [ORD=17]

      0x3b775c0: <multiple use>
      0x3b77cc0: i32 = Constant<16> [ORD=18]

    0x3b77dc0: i32 = add 0x3b775c0, 0x3b77cc0 [ORD=18]

    0x3b75690: <multiple use>
  0x3b79030: i32,ch = load 0x3b77ac0, 0x3b77dc0, 0x3b75690<LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4)]> [ORD=19]

  0x3b79230: i64 = Constant<20>

      0x3b79030: <multiple use>
      0x3b79030: <multiple use>
      0x3b770c0: <multiple use>
      0x3b75690: <multiple use>
    0x3b79130: ch = store 0x3b79030:1, 0x3b79030, 0x3b770c0, 0x3b75690<ST4[@glob_sg_bit1]> [ORD=20]

      0x3b775c0: <multiple use>
      0x3b79330: i32 = Constant<20> [ORD=21]

    0x3b79430: i32 = add 0x3b775c0, 0x3b79330 [ORD=21]

    0x3b75690: <multiple use>
  0x3b79530: f32,ch = load 0x3b79130, 0x3b79430, 0x3b75690<LD4[bitcast (i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 5) to float*)]>

    0x3b79030: <multiple use>
    0x3b79030: <multiple use>
    0x3b770c0: <multiple use>
    0x3b75690: <multiple use>
  0x3b79130: ch = store 0x3b79030:1, 0x3b79030, 0x3b770c0, 0x3b75690<ST4[@glob_sg_bit1]> [ORD=20]


store visit is after?  store float %10, float* @nh_fin_de_rampe, align 4
whats in dag after store?SelectionDAG has 38 nodes:
  0x3b75590: i32 = Constant<0> [ORD=10]

  0x3b75690: i32 = undef [ORD=2]

  0x3b76190: i32 = GlobalAddress<i32* @glob_sg_bit0> 0 [ORD=9]

  0x3b770c0: i32 = GlobalAddress<i32* @glob_sg_bit1> 0 [ORD=11]

  0x3b772c0: i32 = GlobalAddress<float* @nh_fin_de_rampe> 0 [ORD=13]

  0x3b775c0: i32 = GlobalAddress<[6 x i32]* @redefine_in_a> 0 [ORD=15]

  0x3b776c0: i64 = Constant<12>

                  0x3b57b78: ch = EntryToken [ORD=2]

                  0x3b75490: f32 = ConstantFP<6.000000e-01> [ORD=2]

                  0x3b75390: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0 [ORD=1]

                  0x3b75690: <multiple use>
                0x3b75790: ch = store 0x3b57b78, 0x3b75490, 0x3b75390, 0x3b75690<ST4[%0]> [ORD=2]

                0x3b75990: f32 = ConstantFP<9.000000e-01> [ORD=4]

                0x3b75890: i32 = GlobalAddress<float* @SG_MAX> 0 [ORD=3]

                0x3b75690: <multiple use>
              0x3b75a90: ch = store 0x3b75790, 0x3b75990, 0x3b75890, 0x3b75690<ST4[%1]> [ORD=4]

              0x3b75c90: i32 = Constant<17000> [ORD=6]

              0x3b75b90: i32 = GlobalAddress<i32* @NH_STARTER_SHUTOFF> 0 [ORD=5]

              0x3b75690: <multiple use>
            0x3b75d90: ch = store 0x3b75a90, 0x3b75c90, 0x3b75b90, 0x3b75690<ST4[%2]> [ORD=6]

            0x3b75f90: i32 = Constant<15000> [ORD=8]

            0x3b75e90: i32 = GlobalAddress<i32* @SG_MAX_RPM> 0 [ORD=7]

            0x3b75690: <multiple use>
          0x3b76090: ch = store 0x3b75d90, 0x3b75f90, 0x3b75e90, 0x3b75690<ST4[%3]> [ORD=8]

          0x3b75590: <multiple use>
          0x3b76190: <multiple use>
          0x3b75690: <multiple use>
        0x3b76fc0: ch = store 0x3b76090, 0x3b75590, 0x3b76190, 0x3b75690<ST4[%4]> [ORD=10]

        0x3b75590: <multiple use>
        0x3b770c0: <multiple use>
        0x3b75690: <multiple use>
      0x3b771c0: ch = store 0x3b76fc0, 0x3b75590, 0x3b770c0, 0x3b75690<ST4[%5]> [ORD=12]

      0x3b773c0: f32 = ConstantFP<0.000000e+00> [ORD=14]

      0x3b772c0: <multiple use>
      0x3b75690: <multiple use>
    0x3b774c0: ch = store 0x3b771c0, 0x3b773c0, 0x3b772c0, 0x3b75690<ST4[%6]> [ORD=14]

      0x3b775c0: <multiple use>
      0x3b777c0: i32 = Constant<12> [ORD=15]

    0x3b778c0: i32 = add 0x3b775c0, 0x3b777c0 [ORD=15]

    0x3b75690: <multiple use>
  0x3b779c0: i32,ch = load 0x3b774c0, 0x3b778c0, 0x3b75690<LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3)]> [ORD=16]

  0x3b77bc0: i64 = Constant<16>

      0x3b779c0: <multiple use>
      0x3b779c0: <multiple use>
      0x3b76190: <multiple use>
      0x3b75690: <multiple use>
    0x3b77ac0: ch = store 0x3b779c0:1, 0x3b779c0, 0x3b76190, 0x3b75690<ST4[@glob_sg_bit0]> [ORD=17]

      0x3b775c0: <multiple use>
      0x3b77cc0: i32 = Constant<16> [ORD=18]

    0x3b77dc0: i32 = add 0x3b775c0, 0x3b77cc0 [ORD=18]

    0x3b75690: <multiple use>
  0x3b79030: i32,ch = load 0x3b77ac0, 0x3b77dc0, 0x3b75690<LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4)]> [ORD=19]

  0x3b79230: i64 = Constant<20>

      0x3b79030: <multiple use>
      0x3b79030: <multiple use>
      0x3b770c0: <multiple use>
      0x3b75690: <multiple use>
    0x3b79130: ch = store 0x3b79030:1, 0x3b79030, 0x3b770c0, 0x3b75690<ST4[@glob_sg_bit1]> [ORD=20]

      0x3b775c0: <multiple use>
      0x3b79330: i32 = Constant<20> [ORD=21]

    0x3b79430: i32 = add 0x3b775c0, 0x3b79330 [ORD=21]

    0x3b75690: <multiple use>
  0x3b79530: f32,ch = load 0x3b79130, 0x3b79430, 0x3b75690<LD4[bitcast (i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 5) to float*)]> [ORD=23]

    0x3b79530: <multiple use>
    0x3b79530: <multiple use>
    0x3b772c0: <multiple use>
    0x3b75690: <multiple use>
  0x3b79630: ch = store 0x3b79530:1, 0x3b79530, 0x3b772c0, 0x3b75690<ST4[@nh_fin_de_rampe]> [ORD=24]


store visit is after?  store i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 0), i32** %7
I was here to add i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 0)
I was here to add   %7 = alloca i32*, align 4, !ConsumedBy !6
whats in dag after store?SelectionDAG has 40 nodes:
  0x3b75590: i32 = Constant<0> [ORD=10]

  0x3b75690: i32 = undef [ORD=2]

  0x3b76190: i32 = GlobalAddress<i32* @glob_sg_bit0> 0 [ORD=9]

  0x3b770c0: i32 = GlobalAddress<i32* @glob_sg_bit1> 0 [ORD=11]

  0x3b772c0: i32 = GlobalAddress<float* @nh_fin_de_rampe> 0 [ORD=13]

  0x3b775c0: i32 = GlobalAddress<[6 x i32]* @redefine_in_a> 0 [ORD=15]

  0x3b776c0: i64 = Constant<12>

                  0x3b57b78: ch = EntryToken [ORD=2]

                  0x3b75490: f32 = ConstantFP<6.000000e-01> [ORD=2]

                  0x3b75390: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0 [ORD=1]

                  0x3b75690: <multiple use>
                0x3b75790: ch = store 0x3b57b78, 0x3b75490, 0x3b75390, 0x3b75690<ST4[%0]> [ORD=2]

                0x3b75990: f32 = ConstantFP<9.000000e-01> [ORD=4]

                0x3b75890: i32 = GlobalAddress<float* @SG_MAX> 0 [ORD=3]

                0x3b75690: <multiple use>
              0x3b75a90: ch = store 0x3b75790, 0x3b75990, 0x3b75890, 0x3b75690<ST4[%1]> [ORD=4]

              0x3b75c90: i32 = Constant<17000> [ORD=6]

              0x3b75b90: i32 = GlobalAddress<i32* @NH_STARTER_SHUTOFF> 0 [ORD=5]

              0x3b75690: <multiple use>
            0x3b75d90: ch = store 0x3b75a90, 0x3b75c90, 0x3b75b90, 0x3b75690<ST4[%2]> [ORD=6]

            0x3b75f90: i32 = Constant<15000> [ORD=8]

            0x3b75e90: i32 = GlobalAddress<i32* @SG_MAX_RPM> 0 [ORD=7]

            0x3b75690: <multiple use>
          0x3b76090: ch = store 0x3b75d90, 0x3b75f90, 0x3b75e90, 0x3b75690<ST4[%3]> [ORD=8]

          0x3b75590: <multiple use>
          0x3b76190: <multiple use>
          0x3b75690: <multiple use>
        0x3b76fc0: ch = store 0x3b76090, 0x3b75590, 0x3b76190, 0x3b75690<ST4[%4]> [ORD=10]

        0x3b75590: <multiple use>
        0x3b770c0: <multiple use>
        0x3b75690: <multiple use>
      0x3b771c0: ch = store 0x3b76fc0, 0x3b75590, 0x3b770c0, 0x3b75690<ST4[%5]> [ORD=12]

      0x3b773c0: f32 = ConstantFP<0.000000e+00> [ORD=14]

      0x3b772c0: <multiple use>
      0x3b75690: <multiple use>
    0x3b774c0: ch = store 0x3b771c0, 0x3b773c0, 0x3b772c0, 0x3b75690<ST4[%6]> [ORD=14]

      0x3b775c0: <multiple use>
      0x3b777c0: i32 = Constant<12> [ORD=15]

    0x3b778c0: i32 = add 0x3b775c0, 0x3b777c0 [ORD=15]

    0x3b75690: <multiple use>
  0x3b779c0: i32,ch = load 0x3b774c0, 0x3b778c0, 0x3b75690<LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3)]> [ORD=16]

  0x3b77bc0: i64 = Constant<16>

      0x3b779c0: <multiple use>
      0x3b779c0: <multiple use>
      0x3b76190: <multiple use>
      0x3b75690: <multiple use>
    0x3b77ac0: ch = store 0x3b779c0:1, 0x3b779c0, 0x3b76190, 0x3b75690<ST4[@glob_sg_bit0]> [ORD=17]

      0x3b775c0: <multiple use>
      0x3b77cc0: i32 = Constant<16> [ORD=18]

    0x3b77dc0: i32 = add 0x3b775c0, 0x3b77cc0 [ORD=18]

    0x3b75690: <multiple use>
  0x3b79030: i32,ch = load 0x3b77ac0, 0x3b77dc0, 0x3b75690<LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4)]> [ORD=19]

  0x3b79230: i64 = Constant<20>

      0x3b79030: <multiple use>
      0x3b79030: <multiple use>
      0x3b770c0: <multiple use>
      0x3b75690: <multiple use>
    0x3b79130: ch = store 0x3b79030:1, 0x3b79030, 0x3b770c0, 0x3b75690<ST4[@glob_sg_bit1]> [ORD=20]

      0x3b775c0: <multiple use>
      0x3b79330: i32 = Constant<20> [ORD=21]

    0x3b79430: i32 = add 0x3b775c0, 0x3b79330 [ORD=21]

    0x3b75690: <multiple use>
  0x3b79530: f32,ch = load 0x3b79130, 0x3b79430, 0x3b75690<LD4[bitcast (i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 5) to float*)]> [ORD=23]

      0x3b79530: <multiple use>
      0x3b79530: <multiple use>
      0x3b772c0: <multiple use>
      0x3b75690: <multiple use>
    0x3b79630: ch = store 0x3b79530:1, 0x3b79530, 0x3b772c0, 0x3b75690<ST4[@nh_fin_de_rampe]> [ORD=24]

    0x3b775c0: <multiple use>
    0x3b79730: i32 = FrameIndex<0> [ORD=26]

    0x3b75690: <multiple use>
  0x3b79830: ch = store 0x3b79630, 0x3b775c0, 0x3b79730, 0x3b75690<ST4[%7]> [ORD=26]


visiting load instruction   %11 = load i32** %7
with I type i32*and sd value :0x3b79730: i32 = FrameIndex<0>
new load?0x3b79930: i32,ch = load 0x3b79830, 0x3b79730, 0x3b75690<LD4[%7]>
dag after load is dealt with?SelectionDAG has 41 nodes:
  0x3b75590: i32 = Constant<0> [ORD=10]

  0x3b75690: i32 = undef [ORD=2]

  0x3b76190: i32 = GlobalAddress<i32* @glob_sg_bit0> 0 [ORD=9]

  0x3b770c0: i32 = GlobalAddress<i32* @glob_sg_bit1> 0 [ORD=11]

  0x3b772c0: i32 = GlobalAddress<float* @nh_fin_de_rampe> 0 [ORD=13]

  0x3b775c0: i32 = GlobalAddress<[6 x i32]* @redefine_in_a> 0 [ORD=15]

  0x3b776c0: i64 = Constant<12>

                  0x3b57b78: ch = EntryToken [ORD=2]

                  0x3b75490: f32 = ConstantFP<6.000000e-01> [ORD=2]

                  0x3b75390: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0 [ORD=1]

                  0x3b75690: <multiple use>
                0x3b75790: ch = store 0x3b57b78, 0x3b75490, 0x3b75390, 0x3b75690<ST4[%0]> [ORD=2]

                0x3b75990: f32 = ConstantFP<9.000000e-01> [ORD=4]

                0x3b75890: i32 = GlobalAddress<float* @SG_MAX> 0 [ORD=3]

                0x3b75690: <multiple use>
              0x3b75a90: ch = store 0x3b75790, 0x3b75990, 0x3b75890, 0x3b75690<ST4[%1]> [ORD=4]

              0x3b75c90: i32 = Constant<17000> [ORD=6]

              0x3b75b90: i32 = GlobalAddress<i32* @NH_STARTER_SHUTOFF> 0 [ORD=5]

              0x3b75690: <multiple use>
            0x3b75d90: ch = store 0x3b75a90, 0x3b75c90, 0x3b75b90, 0x3b75690<ST4[%2]> [ORD=6]

            0x3b75f90: i32 = Constant<15000> [ORD=8]

            0x3b75e90: i32 = GlobalAddress<i32* @SG_MAX_RPM> 0 [ORD=7]

            0x3b75690: <multiple use>
          0x3b76090: ch = store 0x3b75d90, 0x3b75f90, 0x3b75e90, 0x3b75690<ST4[%3]> [ORD=8]

          0x3b75590: <multiple use>
          0x3b76190: <multiple use>
          0x3b75690: <multiple use>
        0x3b76fc0: ch = store 0x3b76090, 0x3b75590, 0x3b76190, 0x3b75690<ST4[%4]> [ORD=10]

        0x3b75590: <multiple use>
        0x3b770c0: <multiple use>
        0x3b75690: <multiple use>
      0x3b771c0: ch = store 0x3b76fc0, 0x3b75590, 0x3b770c0, 0x3b75690<ST4[%5]> [ORD=12]

      0x3b773c0: f32 = ConstantFP<0.000000e+00> [ORD=14]

      0x3b772c0: <multiple use>
      0x3b75690: <multiple use>
    0x3b774c0: ch = store 0x3b771c0, 0x3b773c0, 0x3b772c0, 0x3b75690<ST4[%6]> [ORD=14]

      0x3b775c0: <multiple use>
      0x3b777c0: i32 = Constant<12> [ORD=15]

    0x3b778c0: i32 = add 0x3b775c0, 0x3b777c0 [ORD=15]

    0x3b75690: <multiple use>
  0x3b779c0: i32,ch = load 0x3b774c0, 0x3b778c0, 0x3b75690<LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3)]> [ORD=16]

  0x3b77bc0: i64 = Constant<16>

      0x3b779c0: <multiple use>
      0x3b779c0: <multiple use>
      0x3b76190: <multiple use>
      0x3b75690: <multiple use>
    0x3b77ac0: ch = store 0x3b779c0:1, 0x3b779c0, 0x3b76190, 0x3b75690<ST4[@glob_sg_bit0]> [ORD=17]

      0x3b775c0: <multiple use>
      0x3b77cc0: i32 = Constant<16> [ORD=18]

    0x3b77dc0: i32 = add 0x3b775c0, 0x3b77cc0 [ORD=18]

    0x3b75690: <multiple use>
  0x3b79030: i32,ch = load 0x3b77ac0, 0x3b77dc0, 0x3b75690<LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4)]> [ORD=19]

  0x3b79230: i64 = Constant<20>

      0x3b79030: <multiple use>
      0x3b79030: <multiple use>
      0x3b770c0: <multiple use>
      0x3b75690: <multiple use>
    0x3b79130: ch = store 0x3b79030:1, 0x3b79030, 0x3b770c0, 0x3b75690<ST4[@glob_sg_bit1]> [ORD=20]

      0x3b775c0: <multiple use>
      0x3b79330: i32 = Constant<20> [ORD=21]

    0x3b79430: i32 = add 0x3b775c0, 0x3b79330 [ORD=21]

    0x3b75690: <multiple use>
  0x3b79530: f32,ch = load 0x3b79130, 0x3b79430, 0x3b75690<LD4[bitcast (i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 5) to float*)]> [ORD=23]

  0x3b79730: i32 = FrameIndex<0> [ORD=26]

        0x3b79530: <multiple use>
        0x3b79530: <multiple use>
        0x3b772c0: <multiple use>
        0x3b75690: <multiple use>
      0x3b79630: ch = store 0x3b79530:1, 0x3b79530, 0x3b772c0, 0x3b75690<ST4[@nh_fin_de_rampe]> [ORD=24]

      0x3b775c0: <multiple use>
      0x3b79730: <multiple use>
      0x3b75690: <multiple use>
    0x3b79830: ch = store 0x3b79630, 0x3b775c0, 0x3b79730, 0x3b75690<ST4[%7]> [ORD=26]

    0x3b79730: <multiple use>
    0x3b75690: <multiple use>
  0x3b79930: i32,ch = load 0x3b79830, 0x3b79730, 0x3b75690<LD4[%7]>

      0x3b79530: <multiple use>
      0x3b79530: <multiple use>
      0x3b772c0: <multiple use>
      0x3b75690: <multiple use>
    0x3b79630: ch = store 0x3b79530:1, 0x3b79530, 0x3b772c0, 0x3b75690<ST4[@nh_fin_de_rampe]> [ORD=24]

    0x3b775c0: <multiple use>
    0x3b79730: <multiple use>
    0x3b75690: <multiple use>
  0x3b79830: ch = store 0x3b79630, 0x3b775c0, 0x3b79730, 0x3b75690<ST4[%7]> [ORD=26]


Initial selection DAG: BB#0 'redefine_start1:redefine_start1.return'
SelectionDAG has 41 nodes:
  0x3b75590: i32 = Constant<0> [ORD=10]

  0x3b75690: i32 = undef [ORD=2]

  0x3b76190: i32 = GlobalAddress<i32* @glob_sg_bit0> 0 [ORD=9]

  0x3b770c0: i32 = GlobalAddress<i32* @glob_sg_bit1> 0 [ORD=11]

  0x3b772c0: i32 = GlobalAddress<float* @nh_fin_de_rampe> 0 [ORD=13]

  0x3b775c0: i32 = GlobalAddress<[6 x i32]* @redefine_in_a> 0 [ORD=15]

  0x3b776c0: i64 = Constant<12>

                  0x3b57b78: ch = EntryToken [ORD=2]

                  0x3b75490: f32 = ConstantFP<6.000000e-01> [ORD=2]

                  0x3b75390: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0 [ORD=1]

                  0x3b75690: <multiple use>
                0x3b75790: ch = store 0x3b57b78, 0x3b75490, 0x3b75390, 0x3b75690<ST4[%0]> [ORD=2]

                0x3b75990: f32 = ConstantFP<9.000000e-01> [ORD=4]

                0x3b75890: i32 = GlobalAddress<float* @SG_MAX> 0 [ORD=3]

                0x3b75690: <multiple use>
              0x3b75a90: ch = store 0x3b75790, 0x3b75990, 0x3b75890, 0x3b75690<ST4[%1]> [ORD=4]

              0x3b75c90: i32 = Constant<17000> [ORD=6]

              0x3b75b90: i32 = GlobalAddress<i32* @NH_STARTER_SHUTOFF> 0 [ORD=5]

              0x3b75690: <multiple use>
            0x3b75d90: ch = store 0x3b75a90, 0x3b75c90, 0x3b75b90, 0x3b75690<ST4[%2]> [ORD=6]

            0x3b75f90: i32 = Constant<15000> [ORD=8]

            0x3b75e90: i32 = GlobalAddress<i32* @SG_MAX_RPM> 0 [ORD=7]

            0x3b75690: <multiple use>
          0x3b76090: ch = store 0x3b75d90, 0x3b75f90, 0x3b75e90, 0x3b75690<ST4[%3]> [ORD=8]

          0x3b75590: <multiple use>
          0x3b76190: <multiple use>
          0x3b75690: <multiple use>
        0x3b76fc0: ch = store 0x3b76090, 0x3b75590, 0x3b76190, 0x3b75690<ST4[%4]> [ORD=10]

        0x3b75590: <multiple use>
        0x3b770c0: <multiple use>
        0x3b75690: <multiple use>
      0x3b771c0: ch = store 0x3b76fc0, 0x3b75590, 0x3b770c0, 0x3b75690<ST4[%5]> [ORD=12]

      0x3b773c0: f32 = ConstantFP<0.000000e+00> [ORD=14]

      0x3b772c0: <multiple use>
      0x3b75690: <multiple use>
    0x3b774c0: ch = store 0x3b771c0, 0x3b773c0, 0x3b772c0, 0x3b75690<ST4[%6]> [ORD=14]

      0x3b775c0: <multiple use>
      0x3b777c0: i32 = Constant<12> [ORD=15]

    0x3b778c0: i32 = add 0x3b775c0, 0x3b777c0 [ORD=15]

    0x3b75690: <multiple use>
  0x3b779c0: i32,ch = load 0x3b774c0, 0x3b778c0, 0x3b75690<LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3)]> [ORD=16]

  0x3b77bc0: i64 = Constant<16>

      0x3b779c0: <multiple use>
      0x3b779c0: <multiple use>
      0x3b76190: <multiple use>
      0x3b75690: <multiple use>
    0x3b77ac0: ch = store 0x3b779c0:1, 0x3b779c0, 0x3b76190, 0x3b75690<ST4[@glob_sg_bit0]> [ORD=17]

      0x3b775c0: <multiple use>
      0x3b77cc0: i32 = Constant<16> [ORD=18]

    0x3b77dc0: i32 = add 0x3b775c0, 0x3b77cc0 [ORD=18]

    0x3b75690: <multiple use>
  0x3b79030: i32,ch = load 0x3b77ac0, 0x3b77dc0, 0x3b75690<LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4)]> [ORD=19]

  0x3b79230: i64 = Constant<20>

      0x3b79030: <multiple use>
      0x3b79030: <multiple use>
      0x3b770c0: <multiple use>
      0x3b75690: <multiple use>
    0x3b79130: ch = store 0x3b79030:1, 0x3b79030, 0x3b770c0, 0x3b75690<ST4[@glob_sg_bit1]> [ORD=20]

      0x3b775c0: <multiple use>
      0x3b79330: i32 = Constant<20> [ORD=21]

    0x3b79430: i32 = add 0x3b775c0, 0x3b79330 [ORD=21]

    0x3b75690: <multiple use>
  0x3b79530: f32,ch = load 0x3b79130, 0x3b79430, 0x3b75690<LD4[bitcast (i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 5) to float*)]> [ORD=23]

  0x3b79730: i32 = FrameIndex<0> [ORD=26]

        0x3b79530: <multiple use>
        0x3b79530: <multiple use>
        0x3b772c0: <multiple use>
        0x3b75690: <multiple use>
      0x3b79630: ch = store 0x3b79530:1, 0x3b79530, 0x3b772c0, 0x3b75690<ST4[@nh_fin_de_rampe]> [ORD=24]

      0x3b775c0: <multiple use>
      0x3b79730: <multiple use>
      0x3b75690: <multiple use>
    0x3b79830: ch = store 0x3b79630, 0x3b775c0, 0x3b79730, 0x3b75690<ST4[%7]> [ORD=26]

    0x3b79730: <multiple use>
    0x3b75690: <multiple use>
  0x3b79930: i32,ch = load 0x3b79830, 0x3b79730, 0x3b75690<LD4[%7]> [ORD=27]

      0x3b79530: <multiple use>
      0x3b79530: <multiple use>
      0x3b772c0: <multiple use>
      0x3b75690: <multiple use>
    0x3b79630: ch = store 0x3b79530:1, 0x3b79530, 0x3b772c0, 0x3b75690<ST4[@nh_fin_de_rampe]> [ORD=24]

    0x3b775c0: <multiple use>
    0x3b79730: <multiple use>
    0x3b75690: <multiple use>
  0x3b79830: ch = store 0x3b79630, 0x3b775c0, 0x3b79730, 0x3b75690<ST4[%7]> [ORD=26]



Replacing.3 0x3b774c0: ch = store 0x3b771c0, 0x3b773c0, 0x3b772c0, 0x3b75690<ST4[%6]> [ORD=14]

With: 0x3b776c0: ch = store 0x3b771c0, 0x3b75590, 0x3b772c0, 0x3b75690<ST4[%6]>


Replacing.3 0x3b75a90: ch = store 0x3b75790, 0x3b75990, 0x3b75890, 0x3b75690<ST4[%1]> [ORD=4]

With: 0x3b774c0: ch = store 0x3b75790, 0x3b773c0, 0x3b75890, 0x3b75690<ST4[%1]>


Replacing.3 0x3b75790: ch = store 0x3b57b78, 0x3b75490, 0x3b75390, 0x3b75690<ST4[%0]> [ORD=2]

With: 0x3b75a90: ch = store 0x3b57b78, 0x3b75990, 0x3b75390, 0x3b75690<ST4[%0]>

Optimized lowered selection DAG: BB#0 'redefine_start1:redefine_start1.return'
SelectionDAG has 36 nodes:
  0x3b75590: i32 = Constant<0> [ORD=10]

  0x3b75690: i32 = undef [ORD=2]

  0x3b76190: i32 = GlobalAddress<i32* @glob_sg_bit0> 0 [ORD=9]

  0x3b770c0: i32 = GlobalAddress<i32* @glob_sg_bit1> 0 [ORD=11]

  0x3b772c0: i32 = GlobalAddress<float* @nh_fin_de_rampe> 0 [ORD=13]

  0x3b775c0: i32 = GlobalAddress<[6 x i32]* @redefine_in_a> 0 [ORD=15]

                  0x3b57b78: ch = EntryToken [ORD=2]

                  0x3b75990: i32 = Constant<1058642330>

                  0x3b75390: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0 [ORD=1]

                  0x3b75690: <multiple use>
                0x3b75a90: ch = store 0x3b57b78, 0x3b75990, 0x3b75390, 0x3b75690<ST4[%0]>

                0x3b773c0: i32 = Constant<1063675494>

                0x3b75890: i32 = GlobalAddress<float* @SG_MAX> 0 [ORD=3]

                0x3b75690: <multiple use>
              0x3b774c0: ch = store 0x3b75a90, 0x3b773c0, 0x3b75890, 0x3b75690<ST4[%1]>

              0x3b75c90: i32 = Constant<17000> [ORD=6]

              0x3b75b90: i32 = GlobalAddress<i32* @NH_STARTER_SHUTOFF> 0 [ORD=5]

              0x3b75690: <multiple use>
            0x3b75d90: ch = store 0x3b774c0, 0x3b75c90, 0x3b75b90, 0x3b75690<ST4[%2]> [ORD=6]

            0x3b75f90: i32 = Constant<15000> [ORD=8]

            0x3b75e90: i32 = GlobalAddress<i32* @SG_MAX_RPM> 0 [ORD=7]

            0x3b75690: <multiple use>
          0x3b76090: ch = store 0x3b75d90, 0x3b75f90, 0x3b75e90, 0x3b75690<ST4[%3]> [ORD=8]

          0x3b75590: <multiple use>
          0x3b76190: <multiple use>
          0x3b75690: <multiple use>
        0x3b76fc0: ch = store 0x3b76090, 0x3b75590, 0x3b76190, 0x3b75690<ST4[%4]> [ORD=10]

        0x3b75590: <multiple use>
        0x3b770c0: <multiple use>
        0x3b75690: <multiple use>
      0x3b771c0: ch = store 0x3b76fc0, 0x3b75590, 0x3b770c0, 0x3b75690<ST4[%5]> [ORD=12]

      0x3b75590: <multiple use>
      0x3b772c0: <multiple use>
      0x3b75690: <multiple use>
    0x3b776c0: ch = store 0x3b771c0, 0x3b75590, 0x3b772c0, 0x3b75690<ST4[%6]>

      0x3b775c0: <multiple use>
      0x3b777c0: i32 = Constant<12> [ORD=15]

    0x3b778c0: i32 = add 0x3b775c0, 0x3b777c0 [ORD=15]

    0x3b75690: <multiple use>
  0x3b779c0: i32,ch = load 0x3b776c0, 0x3b778c0, 0x3b75690<LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3)]> [ORD=16]

      0x3b779c0: <multiple use>
      0x3b779c0: <multiple use>
      0x3b76190: <multiple use>
      0x3b75690: <multiple use>
    0x3b77ac0: ch = store 0x3b779c0:1, 0x3b779c0, 0x3b76190, 0x3b75690<ST4[@glob_sg_bit0]> [ORD=17]

      0x3b775c0: <multiple use>
      0x3b77cc0: i32 = Constant<16> [ORD=18]

    0x3b77dc0: i32 = add 0x3b775c0, 0x3b77cc0 [ORD=18]

    0x3b75690: <multiple use>
  0x3b79030: i32,ch = load 0x3b77ac0, 0x3b77dc0, 0x3b75690<LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4)]> [ORD=19]

      0x3b79030: <multiple use>
      0x3b79030: <multiple use>
      0x3b770c0: <multiple use>
      0x3b75690: <multiple use>
    0x3b79130: ch = store 0x3b79030:1, 0x3b79030, 0x3b770c0, 0x3b75690<ST4[@glob_sg_bit1]> [ORD=20]

      0x3b775c0: <multiple use>
      0x3b79330: i32 = Constant<20> [ORD=21]

    0x3b79430: i32 = add 0x3b775c0, 0x3b79330 [ORD=21]

    0x3b75690: <multiple use>
  0x3b79530: f32,ch = load 0x3b79130, 0x3b79430, 0x3b75690<LD4[bitcast (i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 5) to float*)]> [ORD=23]

      0x3b79530: <multiple use>
      0x3b79530: <multiple use>
      0x3b772c0: <multiple use>
      0x3b75690: <multiple use>
    0x3b79630: ch = store 0x3b79530:1, 0x3b79530, 0x3b772c0, 0x3b75690<ST4[@nh_fin_de_rampe]> [ORD=24]

    0x3b775c0: <multiple use>
    0x3b79730: i32 = FrameIndex<0> [ORD=26]

    0x3b75690: <multiple use>
  0x3b79830: ch = store 0x3b79630, 0x3b775c0, 0x3b79730, 0x3b75690<ST4[%7]> [ORD=26]


Legally typed node: 0x3b75990: i32 = Constant<1058642330> [ID=0]

Legally typed node: 0x3b773c0: i32 = Constant<1063675494> [ID=0]

Legally typed node: 0x3b79730: i32 = FrameIndex<0> [ORD=26] [ID=0]

Legally typed node: 0x3b79330: i32 = Constant<20> [ORD=21] [ID=0]

Legally typed node: 0x3b77cc0: i32 = Constant<16> [ORD=18] [ID=0]

Legally typed node: 0x3b777c0: i32 = Constant<12> [ORD=15] [ID=0]

Legally typed node: 0x3b775c0: i32 = GlobalAddress<[6 x i32]* @redefine_in_a> 0 [ORD=15] [ID=0]

Legally typed node: 0x3b778c0: i32 = add 0x3b775c0, 0x3b777c0 [ORD=15] [ID=0]

Legally typed node: 0x3b77dc0: i32 = add 0x3b775c0, 0x3b77cc0 [ORD=18] [ID=0]

Legally typed node: 0x3b79430: i32 = add 0x3b775c0, 0x3b79330 [ORD=21] [ID=0]

Legally typed node: 0x3b772c0: i32 = GlobalAddress<float* @nh_fin_de_rampe> 0 [ORD=13] [ID=0]

Legally typed node: 0x3b770c0: i32 = GlobalAddress<i32* @glob_sg_bit1> 0 [ORD=11] [ID=0]

Legally typed node: 0x3b76190: i32 = GlobalAddress<i32* @glob_sg_bit0> 0 [ORD=9] [ID=0]

Legally typed node: 0x3b75f90: i32 = Constant<15000> [ORD=8] [ID=0]

Legally typed node: 0x3b75e90: i32 = GlobalAddress<i32* @SG_MAX_RPM> 0 [ORD=7] [ID=0]

Legally typed node: 0x3b75c90: i32 = Constant<17000> [ORD=6] [ID=0]

Legally typed node: 0x3b75b90: i32 = GlobalAddress<i32* @NH_STARTER_SHUTOFF> 0 [ORD=5] [ID=0]

Legally typed node: 0x3b75890: i32 = GlobalAddress<float* @SG_MAX> 0 [ORD=3] [ID=0]

Legally typed node: 0x3b75690: i32 = undef [ORD=2] [ID=0]

Legally typed node: 0x3b75590: i32 = Constant<0> [ORD=10] [ID=0]

Legally typed node: 0x3b75390: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0 [ORD=1] [ID=0]

Legally typed node: 0x3b57b78: ch = EntryToken [ORD=2] [ID=0]

Legally typed node: 0x3b75a90: ch = store 0x3b57b78, 0x3b75990, 0x3b75390, 0x3b75690<ST4[%0]> [ID=0]

Legally typed node: 0x3b774c0: ch = store 0x3b75a90, 0x3b773c0, 0x3b75890, 0x3b75690<ST4[%1]> [ID=0]

Legally typed node: 0x3b75d90: ch = store 0x3b774c0, 0x3b75c90, 0x3b75b90, 0x3b75690<ST4[%2]> [ORD=6] [ID=0]

Legally typed node: 0x3b76090: ch = store 0x3b75d90, 0x3b75f90, 0x3b75e90, 0x3b75690<ST4[%3]> [ORD=8] [ID=0]

Legally typed node: 0x3b76fc0: ch = store 0x3b76090, 0x3b75590, 0x3b76190, 0x3b75690<ST4[%4]> [ORD=10] [ID=0]

Legally typed node: 0x3b771c0: ch = store 0x3b76fc0, 0x3b75590, 0x3b770c0, 0x3b75690<ST4[%5]> [ORD=12] [ID=0]

Legally typed node: 0x3b776c0: ch = store 0x3b771c0, 0x3b75590, 0x3b772c0, 0x3b75690<ST4[%6]> [ID=0]

Legally typed node: 0x3b779c0: i32,ch = load 0x3b776c0, 0x3b778c0, 0x3b75690<LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3)]> [ORD=16] [ID=0]

Legally typed node: 0x3b77ac0: ch = store 0x3b779c0:1, 0x3b779c0, 0x3b76190, 0x3b75690<ST4[@glob_sg_bit0]> [ORD=17] [ID=0]

Legally typed node: 0x3b79030: i32,ch = load 0x3b77ac0, 0x3b77dc0, 0x3b75690<LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4)]> [ORD=19] [ID=0]

Legally typed node: 0x3b79130: ch = store 0x3b79030:1, 0x3b79030, 0x3b770c0, 0x3b75690<ST4[@glob_sg_bit1]> [ORD=20] [ID=0]

Legally typed node: 0x3b79530: f32,ch = load 0x3b79130, 0x3b79430, 0x3b75690<LD4[bitcast (i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 5) to float*)]> [ORD=23] [ID=0]

Legally typed node: 0x3b79630: ch = store 0x3b79530:1, 0x3b79530, 0x3b772c0, 0x3b75690<ST4[@nh_fin_de_rampe]> [ORD=24] [ID=0]

Legally typed node: 0x3b79830: ch = store 0x3b79630, 0x3b775c0, 0x3b79730, 0x3b75690<ST4[%7]> [ORD=26] [ID=0]

Legally typed node: 0x7fffa88b7260: ch = handlenode 0x3b79830 [ID=0]

Type-legalized selection DAG: BB#0 'redefine_start1:redefine_start1.return'
SelectionDAG has 36 nodes:
  0x3b75590: i32 = Constant<0> [ORD=10] [ID=-3]

  0x3b75690: i32 = undef [ORD=2] [ID=-3]

  0x3b76190: i32 = GlobalAddress<i32* @glob_sg_bit0> 0 [ORD=9] [ID=-3]

  0x3b770c0: i32 = GlobalAddress<i32* @glob_sg_bit1> 0 [ORD=11] [ID=-3]

  0x3b772c0: i32 = GlobalAddress<float* @nh_fin_de_rampe> 0 [ORD=13] [ID=-3]

  0x3b775c0: i32 = GlobalAddress<[6 x i32]* @redefine_in_a> 0 [ORD=15] [ID=-3]

                  0x3b57b78: ch = EntryToken [ORD=2] [ID=-3]

                  0x3b75990: i32 = Constant<1058642330> [ID=-3]

                  0x3b75390: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0 [ORD=1] [ID=-3]

                  0x3b75690: <multiple use>
                0x3b75a90: ch = store 0x3b57b78, 0x3b75990, 0x3b75390, 0x3b75690<ST4[%0]> [ID=-3]

                0x3b773c0: i32 = Constant<1063675494> [ID=-3]

                0x3b75890: i32 = GlobalAddress<float* @SG_MAX> 0 [ORD=3] [ID=-3]

                0x3b75690: <multiple use>
              0x3b774c0: ch = store 0x3b75a90, 0x3b773c0, 0x3b75890, 0x3b75690<ST4[%1]> [ID=-3]

              0x3b75c90: i32 = Constant<17000> [ORD=6] [ID=-3]

              0x3b75b90: i32 = GlobalAddress<i32* @NH_STARTER_SHUTOFF> 0 [ORD=5] [ID=-3]

              0x3b75690: <multiple use>
            0x3b75d90: ch = store 0x3b774c0, 0x3b75c90, 0x3b75b90, 0x3b75690<ST4[%2]> [ORD=6] [ID=-3]

            0x3b75f90: i32 = Constant<15000> [ORD=8] [ID=-3]

            0x3b75e90: i32 = GlobalAddress<i32* @SG_MAX_RPM> 0 [ORD=7] [ID=-3]

            0x3b75690: <multiple use>
          0x3b76090: ch = store 0x3b75d90, 0x3b75f90, 0x3b75e90, 0x3b75690<ST4[%3]> [ORD=8] [ID=-3]

          0x3b75590: <multiple use>
          0x3b76190: <multiple use>
          0x3b75690: <multiple use>
        0x3b76fc0: ch = store 0x3b76090, 0x3b75590, 0x3b76190, 0x3b75690<ST4[%4]> [ORD=10] [ID=-3]

        0x3b75590: <multiple use>
        0x3b770c0: <multiple use>
        0x3b75690: <multiple use>
      0x3b771c0: ch = store 0x3b76fc0, 0x3b75590, 0x3b770c0, 0x3b75690<ST4[%5]> [ORD=12] [ID=-3]

      0x3b75590: <multiple use>
      0x3b772c0: <multiple use>
      0x3b75690: <multiple use>
    0x3b776c0: ch = store 0x3b771c0, 0x3b75590, 0x3b772c0, 0x3b75690<ST4[%6]> [ID=-3]

      0x3b775c0: <multiple use>
      0x3b777c0: i32 = Constant<12> [ORD=15] [ID=-3]

    0x3b778c0: i32 = add 0x3b775c0, 0x3b777c0 [ORD=15] [ID=-3]

    0x3b75690: <multiple use>
  0x3b779c0: i32,ch = load 0x3b776c0, 0x3b778c0, 0x3b75690<LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3)]> [ORD=16] [ID=-3]

      0x3b779c0: <multiple use>
      0x3b779c0: <multiple use>
      0x3b76190: <multiple use>
      0x3b75690: <multiple use>
    0x3b77ac0: ch = store 0x3b779c0:1, 0x3b779c0, 0x3b76190, 0x3b75690<ST4[@glob_sg_bit0]> [ORD=17] [ID=-3]

      0x3b775c0: <multiple use>
      0x3b77cc0: i32 = Constant<16> [ORD=18] [ID=-3]

    0x3b77dc0: i32 = add 0x3b775c0, 0x3b77cc0 [ORD=18] [ID=-3]

    0x3b75690: <multiple use>
  0x3b79030: i32,ch = load 0x3b77ac0, 0x3b77dc0, 0x3b75690<LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4)]> [ORD=19] [ID=-3]

      0x3b79030: <multiple use>
      0x3b79030: <multiple use>
      0x3b770c0: <multiple use>
      0x3b75690: <multiple use>
    0x3b79130: ch = store 0x3b79030:1, 0x3b79030, 0x3b770c0, 0x3b75690<ST4[@glob_sg_bit1]> [ORD=20] [ID=-3]

      0x3b775c0: <multiple use>
      0x3b79330: i32 = Constant<20> [ORD=21] [ID=-3]

    0x3b79430: i32 = add 0x3b775c0, 0x3b79330 [ORD=21] [ID=-3]

    0x3b75690: <multiple use>
  0x3b79530: f32,ch = load 0x3b79130, 0x3b79430, 0x3b75690<LD4[bitcast (i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 5) to float*)]> [ORD=23] [ID=-3]

      0x3b79530: <multiple use>
      0x3b79530: <multiple use>
      0x3b772c0: <multiple use>
      0x3b75690: <multiple use>
    0x3b79630: ch = store 0x3b79530:1, 0x3b79530, 0x3b772c0, 0x3b75690<ST4[@nh_fin_de_rampe]> [ORD=24] [ID=-3]

    0x3b775c0: <multiple use>
    0x3b79730: i32 = FrameIndex<0> [ORD=26] [ID=-3]

    0x3b75690: <multiple use>
  0x3b79830: ch = store 0x3b79630, 0x3b775c0, 0x3b79730, 0x3b75690<ST4[%7]> [ORD=26] [ID=-3]


Legalized selection DAG: BB#0 'redefine_start1:redefine_start1.return'
SelectionDAG has 68 nodes:
  0x3b75590: i32 = Constant<0> [ORD=10] [ID=2]

  0x3b75690: i32 = undef [ORD=2] [ID=3]

                  0x3b57b78: ch = EntryToken [ORD=2] [ID=0]

                  0x3b75990: i32 = Constant<1058642330> [ID=18]

                      0x3b75890: i32 = TargetGlobalAddress<float* @SG_RAMP_MAX> 0 [TF=2]

                    0x3b7bb30: i32 = REDEFINEISD::Hi 0x3b75890

                      0x3b7ba30: i32 = TargetGlobalAddress<float* @SG_RAMP_MAX> 0 [TF=3]

                    0x3b7bc30: i32 = REDEFINEISD::Lo 0x3b7ba30

                  0x3b7bd30: i32 = add 0x3b7bb30, 0x3b7bc30

                  0x3b75690: <multiple use>
                0x3b75a90: ch = store 0x3b57b78, 0x3b75990, 0x3b7bd30, 0x3b75690<ST4[%0]> [ID=22]

                0x3b773c0: i32 = Constant<1063675494> [ID=17]

                    0x3b75b90: i32 = TargetGlobalAddress<float* @SG_MAX> 0 [TF=2]

                  0x3b7b730: i32 = REDEFINEISD::Hi 0x3b75b90

                    0x3b7b630: i32 = TargetGlobalAddress<float* @SG_MAX> 0 [TF=3]

                  0x3b7b830: i32 = REDEFINEISD::Lo 0x3b7b630

                0x3b7b930: i32 = add 0x3b7b730, 0x3b7b830

                0x3b75690: <multiple use>
              0x3b774c0: ch = store 0x3b75a90, 0x3b773c0, 0x3b7b930, 0x3b75690<ST4[%1]> [ID=23]

              0x3b75c90: i32 = Constant<17000> [ORD=6] [ID=6]

                  0x3b75e90: i32 = TargetGlobalAddress<i32* @NH_STARTER_SHUTOFF> 0 [TF=2]

                0x3b7b220: i32 = REDEFINEISD::Hi 0x3b75e90

                  0x3b7b120: i32 = TargetGlobalAddress<i32* @NH_STARTER_SHUTOFF> 0 [TF=3]

                0x3b7b320: i32 = REDEFINEISD::Lo 0x3b7b120

              0x3b7b420: i32 = add 0x3b7b220, 0x3b7b320

              0x3b75690: <multiple use>
            0x3b75d90: ch = store 0x3b774c0, 0x3b75c90, 0x3b7b420, 0x3b75690<ST4[%2]> [ORD=6] [ID=24]

            0x3b75f90: i32 = Constant<15000> [ORD=8] [ID=8]

                0x3b76190: i32 = TargetGlobalAddress<i32* @SG_MAX_RPM> 0 [TF=2]

              0x3b7ae20: i32 = REDEFINEISD::Hi 0x3b76190

                0x3b7ad20: i32 = TargetGlobalAddress<i32* @SG_MAX_RPM> 0 [TF=3]

              0x3b7af20: i32 = REDEFINEISD::Lo 0x3b7ad20

            0x3b7b020: i32 = add 0x3b7ae20, 0x3b7af20

            0x3b75690: <multiple use>
          0x3b76090: ch = store 0x3b75d90, 0x3b75f90, 0x3b7b020, 0x3b75690<ST4[%3]> [ORD=8] [ID=25]

          0x3b75590: <multiple use>
          0x3b7ac20: <multiple use>
          0x3b75690: <multiple use>
        0x3b76fc0: ch = store 0x3b76090, 0x3b75590, 0x3b7ac20, 0x3b75690<ST4[%4]> [ORD=10] [ID=26]

        0x3b75590: <multiple use>
        0x3b7a820: <multiple use>
        0x3b75690: <multiple use>
      0x3b771c0: ch = store 0x3b76fc0, 0x3b75590, 0x3b7a820, 0x3b75690<ST4[%5]> [ORD=12] [ID=27]

      0x3b75590: <multiple use>
      0x3b79d30: <multiple use>
      0x3b75690: <multiple use>
    0x3b776c0: ch = store 0x3b771c0, 0x3b75590, 0x3b79d30, 0x3b75690<ST4[%6]> [ID=28]

      0x3b79930: <multiple use>
      0x3b777c0: i32 = Constant<12> [ORD=15] [ID=13]

    0x3b778c0: i32 = add 0x3b79930, 0x3b777c0 [ORD=15] [ID=19]

    0x3b75690: <multiple use>
  0x3b779c0: i32,ch = load 0x3b776c0, 0x3b778c0, 0x3b75690<LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3)]> [ORD=16] [ID=29]

      0x3b779c0: <multiple use>
      0x3b779c0: <multiple use>
      0x3b7ac20: <multiple use>
      0x3b75690: <multiple use>
    0x3b77ac0: ch = store 0x3b779c0:1, 0x3b779c0, 0x3b7ac20, 0x3b75690<ST4[@glob_sg_bit0]> [ORD=17] [ID=30]

      0x3b79930: <multiple use>
      0x3b77cc0: i32 = Constant<16> [ORD=18] [ID=14]

    0x3b77dc0: i32 = add 0x3b79930, 0x3b77cc0 [ORD=18] [ID=20]

    0x3b75690: <multiple use>
  0x3b79030: i32,ch = load 0x3b77ac0, 0x3b77dc0, 0x3b75690<LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4)]> [ORD=19] [ID=31]

      0x3b79030: <multiple use>
      0x3b79030: <multiple use>
      0x3b7a820: <multiple use>
      0x3b75690: <multiple use>
    0x3b79130: ch = store 0x3b79030:1, 0x3b79030, 0x3b7a820, 0x3b75690<ST4[@glob_sg_bit1]> [ORD=20] [ID=32]

      0x3b79930: <multiple use>
      0x3b79330: i32 = Constant<20> [ORD=21] [ID=15]

    0x3b79430: i32 = add 0x3b79930, 0x3b79330 [ORD=21] [ID=21]

    0x3b75690: <multiple use>
  0x3b79530: f32,ch = load 0x3b79130, 0x3b79430, 0x3b75690<LD4[bitcast (i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 5) to float*)]> [ORD=23] [ID=33]

      0x3b75490: i32 = TargetGlobalAddress<[6 x i32]* @redefine_in_a> 0 [TF=2]

    0x3b77bc0: i32 = REDEFINEISD::Hi 0x3b75490

      0x3b75790: i32 = TargetGlobalAddress<[6 x i32]* @redefine_in_a> 0 [TF=3]

    0x3b79230: i32 = REDEFINEISD::Lo 0x3b75790

  0x3b79930: i32 = add 0x3b77bc0, 0x3b79230

      0x3b775c0: i32 = TargetGlobalAddress<float* @nh_fin_de_rampe> 0 [TF=2]

    0x3b79b30: i32 = REDEFINEISD::Hi 0x3b775c0

      0x3b79a30: i32 = TargetGlobalAddress<float* @nh_fin_de_rampe> 0 [TF=3]

    0x3b79c30: i32 = REDEFINEISD::Lo 0x3b79a30

  0x3b79d30: i32 = add 0x3b79b30, 0x3b79c30

      0x3b772c0: i32 = TargetGlobalAddress<i32* @glob_sg_bit1> 0 [TF=2]

    0x3b7a620: i32 = REDEFINEISD::Hi 0x3b772c0

      0x3b79e30: i32 = TargetGlobalAddress<i32* @glob_sg_bit1> 0 [TF=3]

    0x3b7a720: i32 = REDEFINEISD::Lo 0x3b79e30

  0x3b7a820: i32 = add 0x3b7a620, 0x3b7a720

      0x3b770c0: i32 = TargetGlobalAddress<i32* @glob_sg_bit0> 0 [TF=2]

    0x3b7aa20: i32 = REDEFINEISD::Hi 0x3b770c0

      0x3b7a920: i32 = TargetGlobalAddress<i32* @glob_sg_bit0> 0 [TF=3]

    0x3b7ab20: i32 = REDEFINEISD::Lo 0x3b7a920

  0x3b7ac20: i32 = add 0x3b7aa20, 0x3b7ab20

      0x3b79530: <multiple use>
      0x3b79530: <multiple use>
      0x3b79d30: <multiple use>
      0x3b75690: <multiple use>
    0x3b79630: ch = store 0x3b79530:1, 0x3b79530, 0x3b79d30, 0x3b75690<ST4[@nh_fin_de_rampe]> [ORD=24] [ID=34]

    0x3b79930: <multiple use>
    0x3b79730: i32 = FrameIndex<0> [ORD=26] [ID=16]

    0x3b75690: <multiple use>
  0x3b79830: ch = store 0x3b79630, 0x3b79930, 0x3b79730, 0x3b75690<ST4[%7]> [ORD=26] [ID=35]


Optimized legalized selection DAG: BB#0 'redefine_start1:redefine_start1.return'
SelectionDAG has 68 nodes:
  0x3b75590: i32 = Constant<0> [ORD=10] [ID=2]

  0x3b75690: i32 = undef [ORD=2] [ID=3]

                  0x3b57b78: ch = EntryToken [ORD=2] [ID=0]

                  0x3b75990: i32 = Constant<1058642330> [ID=18]

                      0x3b75890: i32 = TargetGlobalAddress<float* @SG_RAMP_MAX> 0 [TF=2]

                    0x3b7bb30: i32 = REDEFINEISD::Hi 0x3b75890

                      0x3b7ba30: i32 = TargetGlobalAddress<float* @SG_RAMP_MAX> 0 [TF=3]

                    0x3b7bc30: i32 = REDEFINEISD::Lo 0x3b7ba30

                  0x3b7bd30: i32 = add 0x3b7bb30, 0x3b7bc30

                  0x3b75690: <multiple use>
                0x3b75a90: ch = store 0x3b57b78, 0x3b75990, 0x3b7bd30, 0x3b75690<ST4[%0]> [ID=22]

                0x3b773c0: i32 = Constant<1063675494> [ID=17]

                    0x3b75b90: i32 = TargetGlobalAddress<float* @SG_MAX> 0 [TF=2]

                  0x3b7b730: i32 = REDEFINEISD::Hi 0x3b75b90

                    0x3b7b630: i32 = TargetGlobalAddress<float* @SG_MAX> 0 [TF=3]

                  0x3b7b830: i32 = REDEFINEISD::Lo 0x3b7b630

                0x3b7b930: i32 = add 0x3b7b730, 0x3b7b830

                0x3b75690: <multiple use>
              0x3b774c0: ch = store 0x3b75a90, 0x3b773c0, 0x3b7b930, 0x3b75690<ST4[%1]> [ID=23]

              0x3b75c90: i32 = Constant<17000> [ORD=6] [ID=6]

                  0x3b75e90: i32 = TargetGlobalAddress<i32* @NH_STARTER_SHUTOFF> 0 [TF=2]

                0x3b7b220: i32 = REDEFINEISD::Hi 0x3b75e90

                  0x3b7b120: i32 = TargetGlobalAddress<i32* @NH_STARTER_SHUTOFF> 0 [TF=3]

                0x3b7b320: i32 = REDEFINEISD::Lo 0x3b7b120

              0x3b7b420: i32 = add 0x3b7b220, 0x3b7b320

              0x3b75690: <multiple use>
            0x3b75d90: ch = store 0x3b774c0, 0x3b75c90, 0x3b7b420, 0x3b75690<ST4[%2]> [ORD=6] [ID=24]

            0x3b75f90: i32 = Constant<15000> [ORD=8] [ID=8]

                0x3b76190: i32 = TargetGlobalAddress<i32* @SG_MAX_RPM> 0 [TF=2]

              0x3b7ae20: i32 = REDEFINEISD::Hi 0x3b76190

                0x3b7ad20: i32 = TargetGlobalAddress<i32* @SG_MAX_RPM> 0 [TF=3]

              0x3b7af20: i32 = REDEFINEISD::Lo 0x3b7ad20

            0x3b7b020: i32 = add 0x3b7ae20, 0x3b7af20

            0x3b75690: <multiple use>
          0x3b76090: ch = store 0x3b75d90, 0x3b75f90, 0x3b7b020, 0x3b75690<ST4[%3]> [ORD=8] [ID=25]

          0x3b75590: <multiple use>
          0x3b7ac20: <multiple use>
          0x3b75690: <multiple use>
        0x3b76fc0: ch = store 0x3b76090, 0x3b75590, 0x3b7ac20, 0x3b75690<ST4[%4]> [ORD=10] [ID=26]

        0x3b75590: <multiple use>
        0x3b7a820: <multiple use>
        0x3b75690: <multiple use>
      0x3b771c0: ch = store 0x3b76fc0, 0x3b75590, 0x3b7a820, 0x3b75690<ST4[%5]> [ORD=12] [ID=27]

      0x3b75590: <multiple use>
      0x3b79d30: <multiple use>
      0x3b75690: <multiple use>
    0x3b776c0: ch = store 0x3b771c0, 0x3b75590, 0x3b79d30, 0x3b75690<ST4[%6]> [ID=28]

      0x3b79930: <multiple use>
      0x3b777c0: i32 = Constant<12> [ORD=15] [ID=13]

    0x3b778c0: i32 = add 0x3b79930, 0x3b777c0 [ORD=15] [ID=19]

    0x3b75690: <multiple use>
  0x3b779c0: i32,ch = load 0x3b776c0, 0x3b778c0, 0x3b75690<LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3)]> [ORD=16] [ID=29]

      0x3b779c0: <multiple use>
      0x3b779c0: <multiple use>
      0x3b7ac20: <multiple use>
      0x3b75690: <multiple use>
    0x3b77ac0: ch = store 0x3b779c0:1, 0x3b779c0, 0x3b7ac20, 0x3b75690<ST4[@glob_sg_bit0]> [ORD=17] [ID=30]

      0x3b79930: <multiple use>
      0x3b77cc0: i32 = Constant<16> [ORD=18] [ID=14]

    0x3b77dc0: i32 = add 0x3b79930, 0x3b77cc0 [ORD=18] [ID=20]

    0x3b75690: <multiple use>
  0x3b79030: i32,ch = load 0x3b77ac0, 0x3b77dc0, 0x3b75690<LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4)]> [ORD=19] [ID=31]

      0x3b79030: <multiple use>
      0x3b79030: <multiple use>
      0x3b7a820: <multiple use>
      0x3b75690: <multiple use>
    0x3b79130: ch = store 0x3b79030:1, 0x3b79030, 0x3b7a820, 0x3b75690<ST4[@glob_sg_bit1]> [ORD=20] [ID=32]

      0x3b79930: <multiple use>
      0x3b79330: i32 = Constant<20> [ORD=21] [ID=15]

    0x3b79430: i32 = add 0x3b79930, 0x3b79330 [ORD=21] [ID=21]

    0x3b75690: <multiple use>
  0x3b79530: f32,ch = load 0x3b79130, 0x3b79430, 0x3b75690<LD4[bitcast (i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 5) to float*)]> [ORD=23] [ID=33]

      0x3b75490: i32 = TargetGlobalAddress<[6 x i32]* @redefine_in_a> 0 [TF=2]

    0x3b77bc0: i32 = REDEFINEISD::Hi 0x3b75490

      0x3b75790: i32 = TargetGlobalAddress<[6 x i32]* @redefine_in_a> 0 [TF=3]

    0x3b79230: i32 = REDEFINEISD::Lo 0x3b75790

  0x3b79930: i32 = add 0x3b77bc0, 0x3b79230

      0x3b775c0: i32 = TargetGlobalAddress<float* @nh_fin_de_rampe> 0 [TF=2]

    0x3b79b30: i32 = REDEFINEISD::Hi 0x3b775c0

      0x3b79a30: i32 = TargetGlobalAddress<float* @nh_fin_de_rampe> 0 [TF=3]

    0x3b79c30: i32 = REDEFINEISD::Lo 0x3b79a30

  0x3b79d30: i32 = add 0x3b79b30, 0x3b79c30

      0x3b772c0: i32 = TargetGlobalAddress<i32* @glob_sg_bit1> 0 [TF=2]

    0x3b7a620: i32 = REDEFINEISD::Hi 0x3b772c0

      0x3b79e30: i32 = TargetGlobalAddress<i32* @glob_sg_bit1> 0 [TF=3]

    0x3b7a720: i32 = REDEFINEISD::Lo 0x3b79e30

  0x3b7a820: i32 = add 0x3b7a620, 0x3b7a720

      0x3b770c0: i32 = TargetGlobalAddress<i32* @glob_sg_bit0> 0 [TF=2]

    0x3b7aa20: i32 = REDEFINEISD::Hi 0x3b770c0

      0x3b7a920: i32 = TargetGlobalAddress<i32* @glob_sg_bit0> 0 [TF=3]

    0x3b7ab20: i32 = REDEFINEISD::Lo 0x3b7a920

  0x3b7ac20: i32 = add 0x3b7aa20, 0x3b7ab20

      0x3b79530: <multiple use>
      0x3b79530: <multiple use>
      0x3b79d30: <multiple use>
      0x3b75690: <multiple use>
    0x3b79630: ch = store 0x3b79530:1, 0x3b79530, 0x3b79d30, 0x3b75690<ST4[@nh_fin_de_rampe]> [ORD=24] [ID=34]

    0x3b79930: <multiple use>
    0x3b79730: i32 = FrameIndex<0> [ORD=26] [ID=16]

    0x3b75690: <multiple use>
  0x3b79830: ch = store 0x3b79630, 0x3b79930, 0x3b79730, 0x3b75690<ST4[%7]> [ORD=26] [ID=35]


===== Instruction selection begins: BB#0 'redefine_start1.return'
ISEL: Starting pattern match on root node: 0x3b79830: ch = store 0x3b79630, 0x3b79930, 0x3b79730, 0x3b75690<ST4[%7]> [ORD=26] [ID=67]

  Morphed node: 0x3b79830: ch = SW 0x3b79930, 0x3b79730, 0x3b75390, 0x3b79630<Mem:ST4[%7]> [ORD=26]

ISEL: Match complete!
=> 0x3b79830: ch = SW 0x3b79930, 0x3b79730, 0x3b75390, 0x3b79630<Mem:ST4[%7]> [ORD=26]

ISEL: Starting pattern match on root node: 0x3b79630: ch = store 0x3b79530:1, 0x3b79530, 0x3b79d30, 0x3b75690<ST4[@nh_fin_de_rampe]> [ORD=24] [ID=66]

  Initial Opcode index to 178
  Skipped scope entry (due to false predicate) at index 183, continuing at 243
  Morphed node: 0x3b79630: ch = FSW 0x3b79530, 0x3b79d30, 0x3b75390, 0x3b79530:1<Mem:ST4[@nh_fin_de_rampe]> [ORD=24]

ISEL: Match complete!
=> 0x3b79630: ch = FSW 0x3b79530, 0x3b79d30, 0x3b75390, 0x3b79530:1<Mem:ST4[@nh_fin_de_rampe]> [ORD=24]

ISEL: Starting pattern match on root node: 0x3b79530: f32,ch = load 0x3b79130, 0x3b79430, 0x3b75690<LD4[bitcast (i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 5) to float*)]> [ORD=23] [ID=65]

  Initial Opcode index to 5
  TypeSwitch[f32] from 10 to 159
  Morphed node: 0x3b79530: f32,ch = FLW 0x3b79930, 0x3b7be30, 0x3b79130<Mem:LD4[bitcast (i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 5) to float*)]> [ORD=23]

ISEL: Match complete!
=> 0x3b79530: f32,ch = FLW 0x3b79930, 0x3b7be30, 0x3b79130<Mem:LD4[bitcast (i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 5) to float*)]> [ORD=23]

ISEL: Starting pattern match on root node: 0x3b79130: ch = store 0x3b79030:1, 0x3b79030, 0x3b7a820, 0x3b75690<ST4[@glob_sg_bit1]> [ORD=20] [ID=64]

  Initial Opcode index to 178
  Morphed node: 0x3b79130: ch = SW 0x3b79030, 0x3b7a820, 0x3b75390, 0x3b79030:1<Mem:ST4[@glob_sg_bit1]> [ORD=20]

ISEL: Match complete!
=> 0x3b79130: ch = SW 0x3b79030, 0x3b7a820, 0x3b75390, 0x3b79030:1<Mem:ST4[@glob_sg_bit1]> [ORD=20]

ISEL: Starting pattern match on root node: 0x3b79030: i32,ch = load 0x3b77ac0, 0x3b77dc0, 0x3b75690<LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4)]> [ORD=19] [ID=63]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x3b79030: i32,ch = LW 0x3b79930, 0x3b79330, 0x3b77ac0<Mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4)]> [ORD=19]

ISEL: Match complete!
=> 0x3b79030: i32,ch = LW 0x3b79930, 0x3b79330, 0x3b77ac0<Mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4)]> [ORD=19]

ISEL: Starting pattern match on root node: 0x3b77ac0: ch = store 0x3b779c0:1, 0x3b779c0, 0x3b7ac20, 0x3b75690<ST4[@glob_sg_bit0]> [ORD=17] [ID=62]

  Initial Opcode index to 178
  Morphed node: 0x3b77ac0: ch = SW 0x3b779c0, 0x3b7ac20, 0x3b75390, 0x3b779c0:1<Mem:ST4[@glob_sg_bit0]> [ORD=17]

ISEL: Match complete!
=> 0x3b77ac0: ch = SW 0x3b779c0, 0x3b7ac20, 0x3b75390, 0x3b779c0:1<Mem:ST4[@glob_sg_bit0]> [ORD=17]

ISEL: Starting pattern match on root node: 0x3b779c0: i32,ch = load 0x3b776c0, 0x3b778c0, 0x3b75690<LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3)]> [ORD=16] [ID=61]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x3b779c0: i32,ch = LW 0x3b79930, 0x3b77cc0, 0x3b776c0<Mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3)]> [ORD=16]

ISEL: Match complete!
=> 0x3b779c0: i32,ch = LW 0x3b79930, 0x3b77cc0, 0x3b776c0<Mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3)]> [ORD=16]

ISEL: Starting pattern match on root node: 0x3b776c0: ch = store 0x3b771c0, 0x3b75590, 0x3b79d30, 0x3b75690<ST4[%6]> [ID=60]

  Initial Opcode index to 178
  Morphed node: 0x3b776c0: ch = SW 0x3b75590, 0x3b79d30, 0x3b75390, 0x3b771c0<Mem:ST4[%6]>

ISEL: Match complete!
=> 0x3b776c0: ch = SW 0x3b75590, 0x3b79d30, 0x3b75390, 0x3b771c0<Mem:ST4[%6]>

ISEL: Starting pattern match on root node: 0x3b771c0: ch = store 0x3b76fc0, 0x3b75590, 0x3b7a820, 0x3b75690<ST4[%5]> [ORD=12] [ID=59]

  Initial Opcode index to 178
  Morphed node: 0x3b771c0: ch = SW 0x3b75590, 0x3b7a820, 0x3b75390, 0x3b76fc0<Mem:ST4[%5]> [ORD=12]

ISEL: Match complete!
=> 0x3b771c0: ch = SW 0x3b75590, 0x3b7a820, 0x3b75390, 0x3b76fc0<Mem:ST4[%5]> [ORD=12]

ISEL: Starting pattern match on root node: 0x3b76fc0: ch = store 0x3b76090, 0x3b75590, 0x3b7ac20, 0x3b75690<ST4[%4]> [ORD=10] [ID=58]

  Initial Opcode index to 178
  Morphed node: 0x3b76fc0: ch = SW 0x3b75590, 0x3b7ac20, 0x3b75390, 0x3b76090<Mem:ST4[%4]> [ORD=10]

ISEL: Match complete!
=> 0x3b76fc0: ch = SW 0x3b75590, 0x3b7ac20, 0x3b75390, 0x3b76090<Mem:ST4[%4]> [ORD=10]

ISEL: Starting pattern match on root node: 0x3b76090: ch = store 0x3b75d90, 0x3b75f90, 0x3b7b020, 0x3b75690<ST4[%3]> [ORD=8] [ID=57]

  Initial Opcode index to 178
  Morphed node: 0x3b76090: ch = SW 0x3b75f90, 0x3b7b020, 0x3b75390, 0x3b75d90<Mem:ST4[%3]> [ORD=8]

ISEL: Match complete!
=> 0x3b76090: ch = SW 0x3b75f90, 0x3b7b020, 0x3b75390, 0x3b75d90<Mem:ST4[%3]> [ORD=8]

ISEL: Starting pattern match on root node: 0x3b75d90: ch = store 0x3b774c0, 0x3b75c90, 0x3b7b420, 0x3b75690<ST4[%2]> [ORD=6] [ID=56]

  Initial Opcode index to 178
  Morphed node: 0x3b75d90: ch = SW 0x3b75c90, 0x3b7b420, 0x3b75390, 0x3b774c0<Mem:ST4[%2]> [ORD=6]

ISEL: Match complete!
=> 0x3b75d90: ch = SW 0x3b75c90, 0x3b7b420, 0x3b75390, 0x3b774c0<Mem:ST4[%2]> [ORD=6]

ISEL: Starting pattern match on root node: 0x3b774c0: ch = store 0x3b75a90, 0x3b773c0, 0x3b7b930, 0x3b75690<ST4[%1]> [ID=55]

  Initial Opcode index to 178
  Morphed node: 0x3b774c0: ch = SW 0x3b773c0, 0x3b7b930, 0x3b75390, 0x3b75a90<Mem:ST4[%1]>

ISEL: Match complete!
=> 0x3b774c0: ch = SW 0x3b773c0, 0x3b7b930, 0x3b75390, 0x3b75a90<Mem:ST4[%1]>

ISEL: Starting pattern match on root node: 0x3b75a90: ch = store 0x3b57b78, 0x3b75990, 0x3b7bd30, 0x3b75690<ST4[%0]> [ID=54]

  Initial Opcode index to 178
  Morphed node: 0x3b75a90: ch = SW 0x3b75990, 0x3b7bd30, 0x3b75390, 0x3b57b78<Mem:ST4[%0]>

ISEL: Match complete!
=> 0x3b75a90: ch = SW 0x3b75990, 0x3b7bd30, 0x3b75390, 0x3b57b78<Mem:ST4[%0]>

ISEL: Starting pattern match on root node: 0x3b7bd30: i32 = add 0x3b7bb30, 0x3b7bc30 [ID=50]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x3b7bd30: i32 = ADD 0x3b7bc30, 0x3b7bb30

ISEL: Match complete!
=> 0x3b7bd30: i32 = ADD 0x3b7bc30, 0x3b7bb30

ISEL: Starting pattern match on root node: 0x3b7b930: i32 = add 0x3b7b730, 0x3b7b830 [ID=49]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x3b7b930: i32 = ADD 0x3b7b830, 0x3b7b730

ISEL: Match complete!
=> 0x3b7b930: i32 = ADD 0x3b7b830, 0x3b7b730

ISEL: Starting pattern match on root node: 0x3b7b420: i32 = add 0x3b7b220, 0x3b7b320 [ID=48]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x3b7b420: i32 = ADD 0x3b7b320, 0x3b7b220

ISEL: Match complete!
=> 0x3b7b420: i32 = ADD 0x3b7b320, 0x3b7b220

ISEL: Starting pattern match on root node: 0x3b7b020: i32 = add 0x3b7ae20, 0x3b7af20 [ID=47]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x3b7b020: i32 = ADD 0x3b7af20, 0x3b7ae20

ISEL: Match complete!
=> 0x3b7b020: i32 = ADD 0x3b7af20, 0x3b7ae20

ISEL: Starting pattern match on root node: 0x3b7ac20: i32 = add 0x3b7aa20, 0x3b7ab20 [ID=46]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x3b7ac20: i32 = ADD 0x3b7ab20, 0x3b7aa20

ISEL: Match complete!
=> 0x3b7ac20: i32 = ADD 0x3b7ab20, 0x3b7aa20

ISEL: Starting pattern match on root node: 0x3b7a820: i32 = add 0x3b7a620, 0x3b7a720 [ID=45]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x3b7a820: i32 = ADD 0x3b7a720, 0x3b7a620

ISEL: Match complete!
=> 0x3b7a820: i32 = ADD 0x3b7a720, 0x3b7a620

ISEL: Starting pattern match on root node: 0x3b79d30: i32 = add 0x3b79b30, 0x3b79c30 [ID=44]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x3b79d30: i32 = ADD 0x3b79c30, 0x3b79b30

ISEL: Match complete!
=> 0x3b79d30: i32 = ADD 0x3b79c30, 0x3b79b30

ISEL: Starting pattern match on root node: 0x3b79930: i32 = add 0x3b77bc0, 0x3b79230 [ID=43]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x3b79930: i32 = ADD 0x3b79230, 0x3b77bc0

ISEL: Match complete!
=> 0x3b79930: i32 = ADD 0x3b79230, 0x3b77bc0

ISEL: Starting pattern match on root node: 0x3b7bc30: i32 = REDEFINEISD::Lo 0x3b7ba30 [ID=42]

  Initial Opcode index to 1204
  Morphed node: 0x3b7bc30: i32 = ADDI 0x3b75690, 0x3b7ba30

ISEL: Match complete!
=> 0x3b7bc30: i32 = ADDI 0x3b75690, 0x3b7ba30

ISEL: Starting pattern match on root node: 0x3b7bb30: i32 = REDEFINEISD::Hi 0x3b75890 [ID=41]

  Initial Opcode index to 1186
  Morphed node: 0x3b7bb30: i32 = LUI 0x3b75890

ISEL: Match complete!
=> 0x3b7bb30: i32 = LUI 0x3b75890

ISEL: Starting pattern match on root node: 0x3b7b830: i32 = REDEFINEISD::Lo 0x3b7b630 [ID=40]

  Initial Opcode index to 1204
  Morphed node: 0x3b7b830: i32 = ADDI 0x3b75690, 0x3b7b630

ISEL: Match complete!
=> 0x3b7b830: i32 = ADDI 0x3b75690, 0x3b7b630

ISEL: Starting pattern match on root node: 0x3b7b730: i32 = REDEFINEISD::Hi 0x3b75b90 [ID=39]

  Initial Opcode index to 1186
  Morphed node: 0x3b7b730: i32 = LUI 0x3b75b90

ISEL: Match complete!
=> 0x3b7b730: i32 = LUI 0x3b75b90

ISEL: Starting pattern match on root node: 0x3b7b320: i32 = REDEFINEISD::Lo 0x3b7b120 [ID=38]

  Initial Opcode index to 1204
  Morphed node: 0x3b7b320: i32 = ADDI 0x3b75690, 0x3b7b120

ISEL: Match complete!
=> 0x3b7b320: i32 = ADDI 0x3b75690, 0x3b7b120

ISEL: Starting pattern match on root node: 0x3b7b220: i32 = REDEFINEISD::Hi 0x3b75e90 [ID=37]

  Initial Opcode index to 1186
  Morphed node: 0x3b7b220: i32 = LUI 0x3b75e90

ISEL: Match complete!
=> 0x3b7b220: i32 = LUI 0x3b75e90

ISEL: Starting pattern match on root node: 0x3b7af20: i32 = REDEFINEISD::Lo 0x3b7ad20 [ID=36]

  Initial Opcode index to 1204
  Morphed node: 0x3b7af20: i32 = ADDI 0x3b75690, 0x3b7ad20

ISEL: Match complete!
=> 0x3b7af20: i32 = ADDI 0x3b75690, 0x3b7ad20

ISEL: Starting pattern match on root node: 0x3b7ae20: i32 = REDEFINEISD::Hi 0x3b76190 [ID=35]

  Initial Opcode index to 1186
  Morphed node: 0x3b7ae20: i32 = LUI 0x3b76190

ISEL: Match complete!
=> 0x3b7ae20: i32 = LUI 0x3b76190

ISEL: Starting pattern match on root node: 0x3b7ab20: i32 = REDEFINEISD::Lo 0x3b7a920 [ID=34]

  Initial Opcode index to 1204
  Morphed node: 0x3b7ab20: i32 = ADDI 0x3b75690, 0x3b7a920

ISEL: Match complete!
=> 0x3b7ab20: i32 = ADDI 0x3b75690, 0x3b7a920

ISEL: Starting pattern match on root node: 0x3b7aa20: i32 = REDEFINEISD::Hi 0x3b770c0 [ID=33]

  Initial Opcode index to 1186
  Morphed node: 0x3b7aa20: i32 = LUI 0x3b770c0

ISEL: Match complete!
=> 0x3b7aa20: i32 = LUI 0x3b770c0

ISEL: Starting pattern match on root node: 0x3b7a720: i32 = REDEFINEISD::Lo 0x3b79e30 [ID=32]

  Initial Opcode index to 1204
  Morphed node: 0x3b7a720: i32 = ADDI 0x3b75690, 0x3b79e30

ISEL: Match complete!
=> 0x3b7a720: i32 = ADDI 0x3b75690, 0x3b79e30

ISEL: Starting pattern match on root node: 0x3b7a620: i32 = REDEFINEISD::Hi 0x3b772c0 [ID=31]

  Initial Opcode index to 1186
  Morphed node: 0x3b7a620: i32 = LUI 0x3b772c0

ISEL: Match complete!
=> 0x3b7a620: i32 = LUI 0x3b772c0

ISEL: Starting pattern match on root node: 0x3b79c30: i32 = REDEFINEISD::Lo 0x3b79a30 [ID=30]

  Initial Opcode index to 1204
  Morphed node: 0x3b79c30: i32 = ADDI 0x3b75690, 0x3b79a30

ISEL: Match complete!
=> 0x3b79c30: i32 = ADDI 0x3b75690, 0x3b79a30

ISEL: Starting pattern match on root node: 0x3b79b30: i32 = REDEFINEISD::Hi 0x3b775c0 [ID=29]

  Initial Opcode index to 1186
  Morphed node: 0x3b79b30: i32 = LUI 0x3b775c0

ISEL: Match complete!
=> 0x3b79b30: i32 = LUI 0x3b775c0

ISEL: Starting pattern match on root node: 0x3b79230: i32 = REDEFINEISD::Lo 0x3b75790 [ID=28]

  Initial Opcode index to 1204
  Morphed node: 0x3b79230: i32 = ADDI 0x3b75690, 0x3b75790

ISEL: Match complete!
=> 0x3b79230: i32 = ADDI 0x3b75690, 0x3b75790

ISEL: Starting pattern match on root node: 0x3b77bc0: i32 = REDEFINEISD::Hi 0x3b75490 [ID=27]

  Initial Opcode index to 1186
  Morphed node: 0x3b77bc0: i32 = LUI 0x3b75490

ISEL: Match complete!
=> 0x3b77bc0: i32 = LUI 0x3b75490

=> 0x3b7ba30: i32 = TargetGlobalAddress<float* @SG_RAMP_MAX> 0 [TF=3]

=> 0x3b75890: i32 = TargetGlobalAddress<float* @SG_RAMP_MAX> 0 [TF=2]

=> 0x3b7b630: i32 = TargetGlobalAddress<float* @SG_MAX> 0 [TF=3]

=> 0x3b75b90: i32 = TargetGlobalAddress<float* @SG_MAX> 0 [TF=2]

=> 0x3b7b120: i32 = TargetGlobalAddress<i32* @NH_STARTER_SHUTOFF> 0 [TF=3]

=> 0x3b75e90: i32 = TargetGlobalAddress<i32* @NH_STARTER_SHUTOFF> 0 [TF=2]

=> 0x3b7ad20: i32 = TargetGlobalAddress<i32* @SG_MAX_RPM> 0 [TF=3]

=> 0x3b76190: i32 = TargetGlobalAddress<i32* @SG_MAX_RPM> 0 [TF=2]

=> 0x3b7a920: i32 = TargetGlobalAddress<i32* @glob_sg_bit0> 0 [TF=3]

=> 0x3b770c0: i32 = TargetGlobalAddress<i32* @glob_sg_bit0> 0 [TF=2]

=> 0x3b79e30: i32 = TargetGlobalAddress<i32* @glob_sg_bit1> 0 [TF=3]

=> 0x3b772c0: i32 = TargetGlobalAddress<i32* @glob_sg_bit1> 0 [TF=2]

=> 0x3b79a30: i32 = TargetGlobalAddress<float* @nh_fin_de_rampe> 0 [TF=3]

=> 0x3b775c0: i32 = TargetGlobalAddress<float* @nh_fin_de_rampe> 0 [TF=2]

=> 0x3b75790: i32 = TargetGlobalAddress<[6 x i32]* @redefine_in_a> 0 [TF=3]

=> 0x3b75490: i32 = TargetGlobalAddress<[6 x i32]* @redefine_in_a> 0 [TF=2]

ISEL: Starting pattern match on root node: 0x3b75990: i32 = Constant<1058642330> [ID=10]

  Initial Opcode index to 1226
comparing 0 and 1058642330 and returning value:0
  Skipped scope entry (due to false predicate) at index 1228, continuing at 1236
  Skipped scope entry (due to false predicate) at index 1240, continuing at 1256
  Morphed node: 0x3b75990: i32 = ADDI 0x3b75690, 0x3b777c0

ISEL: Match complete!
=> 0x3b75990: i32 = ADDI 0x3b75690, 0x3b777c0

ISEL: Starting pattern match on root node: 0x3b773c0: i32 = Constant<1063675494> [ID=9]

  Initial Opcode index to 1226
comparing 0 and 1063675494 and returning value:0
  Skipped scope entry (due to false predicate) at index 1228, continuing at 1236
  Skipped scope entry (due to false predicate) at index 1240, continuing at 1256
  Morphed node: 0x3b773c0: i32 = ADDI 0x3b75690, 0x3b778c0

ISEL: Match complete!
=> 0x3b773c0: i32 = ADDI 0x3b75690, 0x3b778c0

ISEL: Starting pattern match on root node: 0x3b75f90: i32 = Constant<15000> [ORD=8] [ID=4]

  Initial Opcode index to 1226
comparing 0 and 15000 and returning value:0
  Skipped scope entry (due to false predicate) at index 1228, continuing at 1236
  Skipped scope entry (due to false predicate) at index 1240, continuing at 1256
  Morphed node: 0x3b75f90: i32 = ADDI 0x3b75690, 0x3b7bf30 [ORD=8]

ISEL: Match complete!
=> 0x3b75f90: i32 = ADDI 0x3b75690, 0x3b7bf30 [ORD=8]

ISEL: Starting pattern match on root node: 0x3b75c90: i32 = Constant<17000> [ORD=6] [ID=3]

  Initial Opcode index to 1226
comparing 0 and 17000 and returning value:0
  Skipped scope entry (due to false predicate) at index 1228, continuing at 1236
  Skipped scope entry (due to false predicate) at index 1240, continuing at 1256
  Morphed node: 0x3b75c90: i32 = ADDI 0x3b75690, 0x3b7c030 [ORD=6]

ISEL: Match complete!
=> 0x3b75c90: i32 = ADDI 0x3b75690, 0x3b7c030 [ORD=6]

ISEL: Starting pattern match on root node: 0x3b75590: i32 = Constant<0> [ORD=10] [ID=1]

  Initial Opcode index to 1226
comparing 0 and 0 and returning value:1
ISEL: Match complete!
=> 0x3b75590: i32 = Constant<0> [ORD=10] [ID=1]

=> 0x3b57b78: ch = EntryToken [ORD=2]

===== Instruction selection ends:
Selected selection DAG: BB#0 'redefine_start1:redefine_start1.return'
SelectionDAG has 71 nodes:
      0x3b75690: <multiple use>
      0x3b75790: i32 = TargetGlobalAddress<[6 x i32]* @redefine_in_a> 0 [TF=3]

    0x3b79230: i32 = ADDI 0x3b75690, 0x3b75790

      0x3b75490: i32 = TargetGlobalAddress<[6 x i32]* @redefine_in_a> 0 [TF=2]

    0x3b77bc0: i32 = LUI 0x3b75490

  0x3b79930: i32 = ADD 0x3b79230, 0x3b77bc0

      0x3b75690: <multiple use>
      0x3b79a30: i32 = TargetGlobalAddress<float* @nh_fin_de_rampe> 0 [TF=3]

    0x3b79c30: i32 = ADDI 0x3b75690, 0x3b79a30

      0x3b775c0: i32 = TargetGlobalAddress<float* @nh_fin_de_rampe> 0 [TF=2]

    0x3b79b30: i32 = LUI 0x3b775c0

  0x3b79d30: i32 = ADD 0x3b79c30, 0x3b79b30

      0x3b75690: <multiple use>
      0x3b79e30: i32 = TargetGlobalAddress<i32* @glob_sg_bit1> 0 [TF=3]

    0x3b7a720: i32 = ADDI 0x3b75690, 0x3b79e30

      0x3b772c0: i32 = TargetGlobalAddress<i32* @glob_sg_bit1> 0 [TF=2]

    0x3b7a620: i32 = LUI 0x3b772c0

  0x3b7a820: i32 = ADD 0x3b7a720, 0x3b7a620

      0x3b75690: <multiple use>
      0x3b7a920: i32 = TargetGlobalAddress<i32* @glob_sg_bit0> 0 [TF=3]

    0x3b7ab20: i32 = ADDI 0x3b75690, 0x3b7a920

      0x3b770c0: i32 = TargetGlobalAddress<i32* @glob_sg_bit0> 0 [TF=2]

    0x3b7aa20: i32 = LUI 0x3b770c0

  0x3b7ac20: i32 = ADD 0x3b7ab20, 0x3b7aa20

    0x3b79930: <multiple use>
    0x3b77cc0: i32 = TargetConstant<12>

      0x3b75690: <multiple use>
      0x3b79d30: <multiple use>
      0x3b75390: <multiple use>
        0x3b75690: <multiple use>
        0x3b7a820: <multiple use>
        0x3b75390: <multiple use>
          0x3b75690: <multiple use>
          0x3b7ac20: <multiple use>
          0x3b75390: <multiple use>
              0x3b75690: <multiple use>
              0x3b7bf30: i32 = TargetConstant<15000>

            0x3b75f90: i32 = ADDI 0x3b75690, 0x3b7bf30 [ORD=8]

                0x3b75690: <multiple use>
                0x3b7ad20: i32 = TargetGlobalAddress<i32* @SG_MAX_RPM> 0 [TF=3]

              0x3b7af20: i32 = ADDI 0x3b75690, 0x3b7ad20

                0x3b76190: i32 = TargetGlobalAddress<i32* @SG_MAX_RPM> 0 [TF=2]

              0x3b7ae20: i32 = LUI 0x3b76190

            0x3b7b020: i32 = ADD 0x3b7af20, 0x3b7ae20

            0x3b75390: <multiple use>
                0x3b75690: <multiple use>
                0x3b7c030: i32 = TargetConstant<17000>

              0x3b75c90: i32 = ADDI 0x3b75690, 0x3b7c030 [ORD=6]

                  0x3b75690: <multiple use>
                  0x3b7b120: i32 = TargetGlobalAddress<i32* @NH_STARTER_SHUTOFF> 0 [TF=3]

                0x3b7b320: i32 = ADDI 0x3b75690, 0x3b7b120

                  0x3b75e90: i32 = TargetGlobalAddress<i32* @NH_STARTER_SHUTOFF> 0 [TF=2]

                0x3b7b220: i32 = LUI 0x3b75e90

              0x3b7b420: i32 = ADD 0x3b7b320, 0x3b7b220

              0x3b75390: <multiple use>
                  0x3b75690: <multiple use>
                  0x3b778c0: i32 = TargetConstant<1063675494>

                0x3b773c0: i32 = ADDI 0x3b75690, 0x3b778c0

                    0x3b75690: <multiple use>
                    0x3b7b630: i32 = TargetGlobalAddress<float* @SG_MAX> 0 [TF=3]

                  0x3b7b830: i32 = ADDI 0x3b75690, 0x3b7b630

                    0x3b75b90: i32 = TargetGlobalAddress<float* @SG_MAX> 0 [TF=2]

                  0x3b7b730: i32 = LUI 0x3b75b90

                0x3b7b930: i32 = ADD 0x3b7b830, 0x3b7b730

                0x3b75390: <multiple use>
                    0x3b75690: <multiple use>
                    0x3b777c0: i32 = TargetConstant<1058642330>

                  0x3b75990: i32 = ADDI 0x3b75690, 0x3b777c0

                      0x3b75690: <multiple use>
                      0x3b7ba30: i32 = TargetGlobalAddress<float* @SG_RAMP_MAX> 0 [TF=3]

                    0x3b7bc30: i32 = ADDI 0x3b75690, 0x3b7ba30

                      0x3b75890: i32 = TargetGlobalAddress<float* @SG_RAMP_MAX> 0 [TF=2]

                    0x3b7bb30: i32 = LUI 0x3b75890

                  0x3b7bd30: i32 = ADD 0x3b7bc30, 0x3b7bb30

                  0x3b75390: <multiple use>
                  0x3b57b78: ch = EntryToken [ORD=2]

                0x3b75a90: ch = SW 0x3b75990, 0x3b7bd30, 0x3b75390, 0x3b57b78<Mem:ST4[%0]>

              0x3b774c0: ch = SW 0x3b773c0, 0x3b7b930, 0x3b75390, 0x3b75a90<Mem:ST4[%1]>

            0x3b75d90: ch = SW 0x3b75c90, 0x3b7b420, 0x3b75390, 0x3b774c0<Mem:ST4[%2]> [ORD=6]

          0x3b76090: ch = SW 0x3b75f90, 0x3b7b020, 0x3b75390, 0x3b75d90<Mem:ST4[%3]> [ORD=8]

        0x3b76fc0: ch = SW 0x3b75690, 0x3b7ac20, 0x3b75390, 0x3b76090<Mem:ST4[%4]> [ORD=10]

      0x3b771c0: ch = SW 0x3b75690, 0x3b7a820, 0x3b75390, 0x3b76fc0<Mem:ST4[%5]> [ORD=12]

    0x3b776c0: ch = SW 0x3b75690, 0x3b79d30, 0x3b75390, 0x3b771c0<Mem:ST4[%6]>

  0x3b779c0: i32,ch = LW 0x3b79930, 0x3b77cc0, 0x3b776c0<Mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3)]> [ORD=16]

    0x3b79930: <multiple use>
    0x3b79330: i32 = TargetConstant<16>

      0x3b779c0: <multiple use>
      0x3b7ac20: <multiple use>
      0x3b75390: <multiple use>
      0x3b779c0: <multiple use>
    0x3b77ac0: ch = SW 0x3b779c0, 0x3b7ac20, 0x3b75390, 0x3b779c0:1<Mem:ST4[@glob_sg_bit0]> [ORD=17]

  0x3b79030: i32,ch = LW 0x3b79930, 0x3b79330, 0x3b77ac0<Mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4)]> [ORD=19]

    0x3b79930: <multiple use>
    0x3b7be30: i32 = TargetConstant<20>

      0x3b79030: <multiple use>
      0x3b7a820: <multiple use>
      0x3b75390: <multiple use>
      0x3b79030: <multiple use>
    0x3b79130: ch = SW 0x3b79030, 0x3b7a820, 0x3b75390, 0x3b79030:1<Mem:ST4[@glob_sg_bit1]> [ORD=20]

  0x3b79530: f32,ch = FLW 0x3b79930, 0x3b7be30, 0x3b79130<Mem:LD4[bitcast (i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 5) to float*)]> [ORD=23]

  0x3b75390: i32 = TargetConstant<0>

  0x3b75690: i32 = Register %zero

    0x3b79930: <multiple use>
      0x3b77dc0: i32 = Register %t5

      0x3b79430: i32 = TargetFrameIndex<0>

    0x3b79730: i32 = ADDI 0x3b77dc0, 0x3b79430 [ORD=26]

    0x3b75390: <multiple use>
      0x3b79530: <multiple use>
      0x3b79d30: <multiple use>
      0x3b75390: <multiple use>
      0x3b79530: <multiple use>
    0x3b79630: ch = FSW 0x3b79530, 0x3b79d30, 0x3b75390, 0x3b79530:1<Mem:ST4[@nh_fin_de_rampe]> [ORD=24]

  0x3b79830: ch = SW 0x3b79930, 0x3b79730, 0x3b75390, 0x3b79630<Mem:ST4[%7]> [ORD=26]


********** List Scheduling BB#0 'redefine_start1.return' **********
SU(0): 0x3b79830: ch = SW 0x3b79930, 0x3b79730, 0x3b75390, 0x3b79630<Mem:ST4[%7]> [ORD=26] [ID=0]

  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
   val SU(40): Latency=1
   val SU(39): Latency=1
   ch  SU(1): Latency=1

SU(1): 0x3b79630: ch = FSW 0x3b79530, 0x3b79d30, 0x3b75390, 0x3b79530:1<Mem:ST4[@nh_fin_de_rampe]> [ORD=24] [ID=1]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
   val SU(5): Latency=1
   val SU(2): Latency=1
   ch  SU(5): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x3b79d30: i32 = ADD 0x3b79c30, 0x3b79b30 [ID=2]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 8
  Predecessors:
   val SU(4): Latency=1
   val SU(3): Latency=1
  Successors:
   val SU(1): Latency=1
   val SU(16): Latency=1

SU(3): 0x3b79b30: i32 = LUI 0x3b775c0 [ID=3]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 9
  Successors:
   val SU(2): Latency=1

SU(4): 0x3b79c30: i32 = ADDI 0x3b75690, 0x3b79a30 [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 9
  Successors:
   val SU(2): Latency=1

SU(5): 0x3b79530: f32,ch = FLW 0x3b79930, 0x3b7be30, 0x3b79130<Mem:LD4[bitcast (i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 5) to float*)]> [ORD=23] [ID=5]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 13
  Height             : 2
  Predecessors:
   val SU(40): Latency=1
   ch  SU(6): Latency=1
  Successors:
   val SU(1): Latency=1
   ch  SU(1): Latency=1

SU(6): 0x3b79130: ch = SW 0x3b79030, 0x3b7a820, 0x3b75390, 0x3b79030:1<Mem:ST4[@glob_sg_bit1]> [ORD=20] [ID=6]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 3
  Predecessors:
   val SU(10): Latency=1
   val SU(7): Latency=1
   ch  SU(10): Latency=1
  Successors:
   ch  SU(5): Latency=1

SU(7): 0x3b7a820: i32 = ADD 0x3b7a720, 0x3b7a620 [ID=7]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 9
  Predecessors:
   val SU(9): Latency=1
   val SU(8): Latency=1
  Successors:
   val SU(6): Latency=1
   val SU(17): Latency=1

SU(8): 0x3b7a620: i32 = LUI 0x3b772c0 [ID=8]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 10
  Successors:
   val SU(7): Latency=1

SU(9): 0x3b7a720: i32 = ADDI 0x3b75690, 0x3b79e30 [ID=9]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 10
  Successors:
   val SU(7): Latency=1

SU(10): 0x3b79030: i32,ch = LW 0x3b79930, 0x3b79330, 0x3b77ac0<Mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4)]> [ORD=19] [ID=10]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 11
  Height             : 4
  Predecessors:
   val SU(40): Latency=1
   ch  SU(11): Latency=1
  Successors:
   val SU(6): Latency=1
   ch  SU(6): Latency=1

SU(11): 0x3b77ac0: ch = SW 0x3b779c0, 0x3b7ac20, 0x3b75390, 0x3b779c0:1<Mem:ST4[@glob_sg_bit0]> [ORD=17] [ID=11]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 5
  Predecessors:
   val SU(15): Latency=1
   val SU(12): Latency=1
   ch  SU(15): Latency=1
  Successors:
   ch  SU(10): Latency=1

SU(12): 0x3b7ac20: i32 = ADD 0x3b7ab20, 0x3b7aa20 [ID=12]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 10
  Predecessors:
   val SU(14): Latency=1
   val SU(13): Latency=1
  Successors:
   val SU(11): Latency=1
   val SU(18): Latency=1

SU(13): 0x3b7aa20: i32 = LUI 0x3b770c0 [ID=13]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 11
  Successors:
   val SU(12): Latency=1

SU(14): 0x3b7ab20: i32 = ADDI 0x3b75690, 0x3b7a920 [ID=14]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 11
  Successors:
   val SU(12): Latency=1

SU(15): 0x3b779c0: i32,ch = LW 0x3b79930, 0x3b77cc0, 0x3b776c0<Mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3)]> [ORD=16] [ID=15]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 9
  Height             : 6
  Predecessors:
   val SU(40): Latency=1
   ch  SU(16): Latency=1
  Successors:
   val SU(11): Latency=1
   ch  SU(11): Latency=1

SU(16): 0x3b776c0: ch = SW 0x3b75690, 0x3b79d30, 0x3b75390, 0x3b771c0<Mem:ST4[%6]> [ID=16]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 7
  Predecessors:
   val SU(2): Latency=1
   ch  SU(17): Latency=1
  Successors:
   ch  SU(15): Latency=1

SU(17): 0x3b771c0: ch = SW 0x3b75690, 0x3b7a820, 0x3b75390, 0x3b76fc0<Mem:ST4[%5]> [ORD=12] [ID=17]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 8
  Predecessors:
   val SU(7): Latency=1
   ch  SU(18): Latency=1
  Successors:
   ch  SU(16): Latency=1

SU(18): 0x3b76fc0: ch = SW 0x3b75690, 0x3b7ac20, 0x3b75390, 0x3b76090<Mem:ST4[%4]> [ORD=10] [ID=18]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 9
  Predecessors:
   val SU(12): Latency=1
   ch  SU(19): Latency=1
  Successors:
   ch  SU(17): Latency=1

SU(19): 0x3b76090: ch = SW 0x3b75f90, 0x3b7b020, 0x3b75390, 0x3b75d90<Mem:ST4[%3]> [ORD=8] [ID=19]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 10
  Predecessors:
   val SU(38): Latency=1
   val SU(35): Latency=1
   ch  SU(20): Latency=1
  Successors:
   ch  SU(18): Latency=1

SU(20): 0x3b75d90: ch = SW 0x3b75c90, 0x3b7b420, 0x3b75390, 0x3b774c0<Mem:ST4[%2]> [ORD=6] [ID=20]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
   val SU(34): Latency=1
   val SU(31): Latency=1
   ch  SU(21): Latency=1
  Successors:
   ch  SU(19): Latency=1

SU(21): 0x3b774c0: ch = SW 0x3b773c0, 0x3b7b930, 0x3b75390, 0x3b75a90<Mem:ST4[%1]> [ID=21]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 12
  Predecessors:
   val SU(30): Latency=1
   val SU(27): Latency=1
   ch  SU(22): Latency=1
  Successors:
   ch  SU(20): Latency=1

SU(22): 0x3b75a90: ch = SW 0x3b75990, 0x3b7bd30, 0x3b75390, 0x3b57b78<Mem:ST4[%0]> [ID=22]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 13
  Predecessors:
   val SU(26): Latency=1
   val SU(23): Latency=1
  Successors:
   ch  SU(21): Latency=1

SU(23): 0x3b7bd30: i32 = ADD 0x3b7bc30, 0x3b7bb30 [ID=23]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 14
  Predecessors:
   val SU(25): Latency=1
   val SU(24): Latency=1
  Successors:
   val SU(22): Latency=1

SU(24): 0x3b7bb30: i32 = LUI 0x3b75890 [ID=24]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 15
  Successors:
   val SU(23): Latency=1

SU(25): 0x3b7bc30: i32 = ADDI 0x3b75690, 0x3b7ba30 [ID=25]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 15
  Successors:
   val SU(23): Latency=1

SU(26): 0x3b75990: i32 = ADDI 0x3b75690, 0x3b777c0 [ID=26]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 14
  Successors:
   val SU(22): Latency=1

SU(27): 0x3b7b930: i32 = ADD 0x3b7b830, 0x3b7b730 [ID=27]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 13
  Predecessors:
   val SU(29): Latency=1
   val SU(28): Latency=1
  Successors:
   val SU(21): Latency=1

SU(28): 0x3b7b730: i32 = LUI 0x3b75b90 [ID=28]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 14
  Successors:
   val SU(27): Latency=1

SU(29): 0x3b7b830: i32 = ADDI 0x3b75690, 0x3b7b630 [ID=29]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 14
  Successors:
   val SU(27): Latency=1

SU(30): 0x3b773c0: i32 = ADDI 0x3b75690, 0x3b778c0 [ID=30]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 13
  Successors:
   val SU(21): Latency=1

SU(31): 0x3b7b420: i32 = ADD 0x3b7b320, 0x3b7b220 [ID=31]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 12
  Predecessors:
   val SU(33): Latency=1
   val SU(32): Latency=1
  Successors:
   val SU(20): Latency=1

SU(32): 0x3b7b220: i32 = LUI 0x3b75e90 [ID=32]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 13
  Successors:
   val SU(31): Latency=1

SU(33): 0x3b7b320: i32 = ADDI 0x3b75690, 0x3b7b120 [ID=33]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 13
  Successors:
   val SU(31): Latency=1

SU(34): 0x3b75c90: i32 = ADDI 0x3b75690, 0x3b7c030 [ORD=6] [ID=34]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 12
  Successors:
   val SU(20): Latency=1

SU(35): 0x3b7b020: i32 = ADD 0x3b7af20, 0x3b7ae20 [ID=35]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 11
  Predecessors:
   val SU(37): Latency=1
   val SU(36): Latency=1
  Successors:
   val SU(19): Latency=1

SU(36): 0x3b7ae20: i32 = LUI 0x3b76190 [ID=36]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 12
  Successors:
   val SU(35): Latency=1

SU(37): 0x3b7af20: i32 = ADDI 0x3b75690, 0x3b7ad20 [ID=37]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 12
  Successors:
   val SU(35): Latency=1

SU(38): 0x3b75f90: i32 = ADDI 0x3b75690, 0x3b7bf30 [ORD=8] [ID=38]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 11
  Successors:
   val SU(19): Latency=1

SU(39): 0x3b79730: i32 = ADDI 0x3b77dc0, 0x3b79430 [ORD=26] [ID=39]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
   val SU(0): Latency=1

SU(40): 0x3b79930: i32 = ADD 0x3b79230, 0x3b77bc0 [ID=40]

  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 7
  Predecessors:
   val SU(42): Latency=1
   val SU(41): Latency=1
  Successors:
   val SU(0): Latency=1
   val SU(5): Latency=1
   val SU(10): Latency=1
   val SU(15): Latency=1

SU(41): 0x3b77bc0: i32 = LUI 0x3b75490 [ID=41]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 8
  Successors:
   val SU(40): Latency=1

SU(42): 0x3b79230: i32 = ADDI 0x3b75690, 0x3b75790 [ID=42]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 8
  Successors:
   val SU(40): Latency=1


Examining Available:
Height 0: SU(0): 0x3b79830: ch = SW 0x3b79930, 0x3b79730, 0x3b75390, 0x3b79630<Mem:ST4[%7]> [ORD=26] [ID=0]


*** Scheduling [0]: SU(0): 0x3b79830: ch = SW 0x3b79930, 0x3b79730, 0x3b75390, 0x3b79630<Mem:ST4[%7]> [ORD=26] [ID=0]


Examining Available:
Height 1: SU(39): 0x3b79730: i32 = ADDI 0x3b77dc0, 0x3b79430 [ORD=26] [ID=39]

Height 1: SU(1): 0x3b79630: ch = FSW 0x3b79530, 0x3b79d30, 0x3b75390, 0x3b79530:1<Mem:ST4[@nh_fin_de_rampe]> [ORD=24] [ID=1]


*** Scheduling [1]: SU(39): 0x3b79730: i32 = ADDI 0x3b77dc0, 0x3b79430 [ORD=26] [ID=39]


Examining Available:
Height 1: SU(1): 0x3b79630: ch = FSW 0x3b79530, 0x3b79d30, 0x3b75390, 0x3b79530:1<Mem:ST4[@nh_fin_de_rampe]> [ORD=24] [ID=1]


*** Scheduling [2]: SU(1): 0x3b79630: ch = FSW 0x3b79530, 0x3b79d30, 0x3b75390, 0x3b79530:1<Mem:ST4[@nh_fin_de_rampe]> [ORD=24] [ID=1]


Examining Available:
Height 3: SU(5): 0x3b79530: f32,ch = FLW 0x3b79930, 0x3b7be30, 0x3b79130<Mem:LD4[bitcast (i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 5) to float*)]> [ORD=23] [ID=5]


*** Scheduling [3]: SU(5): 0x3b79530: f32,ch = FLW 0x3b79930, 0x3b7be30, 0x3b79130<Mem:LD4[bitcast (i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 5) to float*)]> [ORD=23] [ID=5]


Examining Available:
Height 4: SU(6): 0x3b79130: ch = SW 0x3b79030, 0x3b7a820, 0x3b75390, 0x3b79030:1<Mem:ST4[@glob_sg_bit1]> [ORD=20] [ID=6]


*** Scheduling [4]: SU(6): 0x3b79130: ch = SW 0x3b79030, 0x3b7a820, 0x3b75390, 0x3b79030:1<Mem:ST4[@glob_sg_bit1]> [ORD=20] [ID=6]


Examining Available:
Height 5: SU(10): 0x3b79030: i32,ch = LW 0x3b79930, 0x3b79330, 0x3b77ac0<Mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4)]> [ORD=19] [ID=10]


*** Scheduling [5]: SU(10): 0x3b79030: i32,ch = LW 0x3b79930, 0x3b79330, 0x3b77ac0<Mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4)]> [ORD=19] [ID=10]


Examining Available:
Height 6: SU(11): 0x3b77ac0: ch = SW 0x3b779c0, 0x3b7ac20, 0x3b75390, 0x3b779c0:1<Mem:ST4[@glob_sg_bit0]> [ORD=17] [ID=11]


*** Scheduling [6]: SU(11): 0x3b77ac0: ch = SW 0x3b779c0, 0x3b7ac20, 0x3b75390, 0x3b779c0:1<Mem:ST4[@glob_sg_bit0]> [ORD=17] [ID=11]


Examining Available:
Height 7: SU(15): 0x3b779c0: i32,ch = LW 0x3b79930, 0x3b77cc0, 0x3b776c0<Mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3)]> [ORD=16] [ID=15]


*** Scheduling [7]: SU(15): 0x3b779c0: i32,ch = LW 0x3b79930, 0x3b77cc0, 0x3b776c0<Mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3)]> [ORD=16] [ID=15]


Examining Available:
Height 8: SU(40): 0x3b79930: i32 = ADD 0x3b79230, 0x3b77bc0 [ID=40]

Height 8: SU(16): 0x3b776c0: ch = SW 0x3b75690, 0x3b79d30, 0x3b75390, 0x3b771c0<Mem:ST4[%6]> [ID=16]


*** Scheduling [8]: SU(40): 0x3b79930: i32 = ADD 0x3b79230, 0x3b77bc0 [ID=40]


Examining Available:
Height 9: SU(42): 0x3b79230: i32 = ADDI 0x3b75690, 0x3b75790 [ID=42]

Height 9: SU(41): 0x3b77bc0: i32 = LUI 0x3b75490 [ID=41]

Height 8: SU(16): 0x3b776c0: ch = SW 0x3b75690, 0x3b79d30, 0x3b75390, 0x3b771c0<Mem:ST4[%6]> [ID=16]


*** Scheduling [9]: SU(42): 0x3b79230: i32 = ADDI 0x3b75690, 0x3b75790 [ID=42]


Examining Available:
Height 9: SU(41): 0x3b77bc0: i32 = LUI 0x3b75490 [ID=41]

Height 8: SU(16): 0x3b776c0: ch = SW 0x3b75690, 0x3b79d30, 0x3b75390, 0x3b771c0<Mem:ST4[%6]> [ID=16]


*** Scheduling [10]: SU(41): 0x3b77bc0: i32 = LUI 0x3b75490 [ID=41]


Examining Available:
Height 8: SU(16): 0x3b776c0: ch = SW 0x3b75690, 0x3b79d30, 0x3b75390, 0x3b771c0<Mem:ST4[%6]> [ID=16]


*** Scheduling [11]: SU(16): 0x3b776c0: ch = SW 0x3b75690, 0x3b79d30, 0x3b75390, 0x3b771c0<Mem:ST4[%6]> [ID=16]


Examining Available:
Height 12: SU(2): 0x3b79d30: i32 = ADD 0x3b79c30, 0x3b79b30 [ID=2]

Height 12: SU(17): 0x3b771c0: ch = SW 0x3b75690, 0x3b7a820, 0x3b75390, 0x3b76fc0<Mem:ST4[%5]> [ORD=12] [ID=17]


*** Scheduling [12]: SU(2): 0x3b79d30: i32 = ADD 0x3b79c30, 0x3b79b30 [ID=2]


Examining Available:
Height 13: SU(4): 0x3b79c30: i32 = ADDI 0x3b75690, 0x3b79a30 [ID=4]

Height 13: SU(3): 0x3b79b30: i32 = LUI 0x3b775c0 [ID=3]

Height 12: SU(17): 0x3b771c0: ch = SW 0x3b75690, 0x3b7a820, 0x3b75390, 0x3b76fc0<Mem:ST4[%5]> [ORD=12] [ID=17]


*** Scheduling [13]: SU(4): 0x3b79c30: i32 = ADDI 0x3b75690, 0x3b79a30 [ID=4]


Examining Available:
Height 13: SU(3): 0x3b79b30: i32 = LUI 0x3b775c0 [ID=3]

Height 12: SU(17): 0x3b771c0: ch = SW 0x3b75690, 0x3b7a820, 0x3b75390, 0x3b76fc0<Mem:ST4[%5]> [ORD=12] [ID=17]


*** Scheduling [14]: SU(3): 0x3b79b30: i32 = LUI 0x3b775c0 [ID=3]


Examining Available:
Height 12: SU(17): 0x3b771c0: ch = SW 0x3b75690, 0x3b7a820, 0x3b75390, 0x3b76fc0<Mem:ST4[%5]> [ORD=12] [ID=17]


*** Scheduling [15]: SU(17): 0x3b771c0: ch = SW 0x3b75690, 0x3b7a820, 0x3b75390, 0x3b76fc0<Mem:ST4[%5]> [ORD=12] [ID=17]


Examining Available:
Height 16: SU(7): 0x3b7a820: i32 = ADD 0x3b7a720, 0x3b7a620 [ID=7]

Height 16: SU(18): 0x3b76fc0: ch = SW 0x3b75690, 0x3b7ac20, 0x3b75390, 0x3b76090<Mem:ST4[%4]> [ORD=10] [ID=18]


*** Scheduling [16]: SU(7): 0x3b7a820: i32 = ADD 0x3b7a720, 0x3b7a620 [ID=7]


Examining Available:
Height 17: SU(9): 0x3b7a720: i32 = ADDI 0x3b75690, 0x3b79e30 [ID=9]

Height 17: SU(8): 0x3b7a620: i32 = LUI 0x3b772c0 [ID=8]

Height 16: SU(18): 0x3b76fc0: ch = SW 0x3b75690, 0x3b7ac20, 0x3b75390, 0x3b76090<Mem:ST4[%4]> [ORD=10] [ID=18]


*** Scheduling [17]: SU(9): 0x3b7a720: i32 = ADDI 0x3b75690, 0x3b79e30 [ID=9]


Examining Available:
Height 17: SU(8): 0x3b7a620: i32 = LUI 0x3b772c0 [ID=8]

Height 16: SU(18): 0x3b76fc0: ch = SW 0x3b75690, 0x3b7ac20, 0x3b75390, 0x3b76090<Mem:ST4[%4]> [ORD=10] [ID=18]


*** Scheduling [18]: SU(8): 0x3b7a620: i32 = LUI 0x3b772c0 [ID=8]


Examining Available:
Height 16: SU(18): 0x3b76fc0: ch = SW 0x3b75690, 0x3b7ac20, 0x3b75390, 0x3b76090<Mem:ST4[%4]> [ORD=10] [ID=18]


*** Scheduling [19]: SU(18): 0x3b76fc0: ch = SW 0x3b75690, 0x3b7ac20, 0x3b75390, 0x3b76090<Mem:ST4[%4]> [ORD=10] [ID=18]


Examining Available:
Height 20: SU(12): 0x3b7ac20: i32 = ADD 0x3b7ab20, 0x3b7aa20 [ID=12]

Height 20: SU(19): 0x3b76090: ch = SW 0x3b75f90, 0x3b7b020, 0x3b75390, 0x3b75d90<Mem:ST4[%3]> [ORD=8] [ID=19]


*** Scheduling [20]: SU(12): 0x3b7ac20: i32 = ADD 0x3b7ab20, 0x3b7aa20 [ID=12]


Examining Available:
Height 21: SU(14): 0x3b7ab20: i32 = ADDI 0x3b75690, 0x3b7a920 [ID=14]

Height 21: SU(13): 0x3b7aa20: i32 = LUI 0x3b770c0 [ID=13]

Height 20: SU(19): 0x3b76090: ch = SW 0x3b75f90, 0x3b7b020, 0x3b75390, 0x3b75d90<Mem:ST4[%3]> [ORD=8] [ID=19]


*** Scheduling [21]: SU(14): 0x3b7ab20: i32 = ADDI 0x3b75690, 0x3b7a920 [ID=14]


Examining Available:
Height 21: SU(13): 0x3b7aa20: i32 = LUI 0x3b770c0 [ID=13]

Height 20: SU(19): 0x3b76090: ch = SW 0x3b75f90, 0x3b7b020, 0x3b75390, 0x3b75d90<Mem:ST4[%3]> [ORD=8] [ID=19]


*** Scheduling [22]: SU(13): 0x3b7aa20: i32 = LUI 0x3b770c0 [ID=13]


Examining Available:
Height 20: SU(19): 0x3b76090: ch = SW 0x3b75f90, 0x3b7b020, 0x3b75390, 0x3b75d90<Mem:ST4[%3]> [ORD=8] [ID=19]


*** Scheduling [23]: SU(19): 0x3b76090: ch = SW 0x3b75f90, 0x3b7b020, 0x3b75390, 0x3b75d90<Mem:ST4[%3]> [ORD=8] [ID=19]


Examining Available:
Height 24: SU(35): 0x3b7b020: i32 = ADD 0x3b7af20, 0x3b7ae20 [ID=35]

Height 24: SU(38): 0x3b75f90: i32 = ADDI 0x3b75690, 0x3b7bf30 [ORD=8] [ID=38]

Height 24: SU(20): 0x3b75d90: ch = SW 0x3b75c90, 0x3b7b420, 0x3b75390, 0x3b774c0<Mem:ST4[%2]> [ORD=6] [ID=20]


*** Scheduling [24]: SU(35): 0x3b7b020: i32 = ADD 0x3b7af20, 0x3b7ae20 [ID=35]


Examining Available:
Height 25: SU(37): 0x3b7af20: i32 = ADDI 0x3b75690, 0x3b7ad20 [ID=37]

Height 25: SU(36): 0x3b7ae20: i32 = LUI 0x3b76190 [ID=36]

Height 24: SU(38): 0x3b75f90: i32 = ADDI 0x3b75690, 0x3b7bf30 [ORD=8] [ID=38]

Height 24: SU(20): 0x3b75d90: ch = SW 0x3b75c90, 0x3b7b420, 0x3b75390, 0x3b774c0<Mem:ST4[%2]> [ORD=6] [ID=20]


*** Scheduling [25]: SU(37): 0x3b7af20: i32 = ADDI 0x3b75690, 0x3b7ad20 [ID=37]


Examining Available:
Height 25: SU(36): 0x3b7ae20: i32 = LUI 0x3b76190 [ID=36]

Height 24: SU(38): 0x3b75f90: i32 = ADDI 0x3b75690, 0x3b7bf30 [ORD=8] [ID=38]

Height 24: SU(20): 0x3b75d90: ch = SW 0x3b75c90, 0x3b7b420, 0x3b75390, 0x3b774c0<Mem:ST4[%2]> [ORD=6] [ID=20]


*** Scheduling [26]: SU(36): 0x3b7ae20: i32 = LUI 0x3b76190 [ID=36]


Examining Available:
Height 24: SU(38): 0x3b75f90: i32 = ADDI 0x3b75690, 0x3b7bf30 [ORD=8] [ID=38]

Height 24: SU(20): 0x3b75d90: ch = SW 0x3b75c90, 0x3b7b420, 0x3b75390, 0x3b774c0<Mem:ST4[%2]> [ORD=6] [ID=20]


*** Scheduling [27]: SU(38): 0x3b75f90: i32 = ADDI 0x3b75690, 0x3b7bf30 [ORD=8] [ID=38]


Examining Available:
Height 24: SU(20): 0x3b75d90: ch = SW 0x3b75c90, 0x3b7b420, 0x3b75390, 0x3b774c0<Mem:ST4[%2]> [ORD=6] [ID=20]


*** Scheduling [28]: SU(20): 0x3b75d90: ch = SW 0x3b75c90, 0x3b7b420, 0x3b75390, 0x3b774c0<Mem:ST4[%2]> [ORD=6] [ID=20]


Examining Available:
Height 29: SU(31): 0x3b7b420: i32 = ADD 0x3b7b320, 0x3b7b220 [ID=31]

Height 29: SU(21): 0x3b774c0: ch = SW 0x3b773c0, 0x3b7b930, 0x3b75390, 0x3b75a90<Mem:ST4[%1]> [ID=21]

Height 29: SU(34): 0x3b75c90: i32 = ADDI 0x3b75690, 0x3b7c030 [ORD=6] [ID=34]


*** Scheduling [29]: SU(31): 0x3b7b420: i32 = ADD 0x3b7b320, 0x3b7b220 [ID=31]


Examining Available:
Height 30: SU(33): 0x3b7b320: i32 = ADDI 0x3b75690, 0x3b7b120 [ID=33]

Height 30: SU(32): 0x3b7b220: i32 = LUI 0x3b75e90 [ID=32]

Height 29: SU(21): 0x3b774c0: ch = SW 0x3b773c0, 0x3b7b930, 0x3b75390, 0x3b75a90<Mem:ST4[%1]> [ID=21]

Height 29: SU(34): 0x3b75c90: i32 = ADDI 0x3b75690, 0x3b7c030 [ORD=6] [ID=34]


*** Scheduling [30]: SU(33): 0x3b7b320: i32 = ADDI 0x3b75690, 0x3b7b120 [ID=33]


Examining Available:
Height 30: SU(32): 0x3b7b220: i32 = LUI 0x3b75e90 [ID=32]

Height 29: SU(21): 0x3b774c0: ch = SW 0x3b773c0, 0x3b7b930, 0x3b75390, 0x3b75a90<Mem:ST4[%1]> [ID=21]

Height 29: SU(34): 0x3b75c90: i32 = ADDI 0x3b75690, 0x3b7c030 [ORD=6] [ID=34]


*** Scheduling [31]: SU(32): 0x3b7b220: i32 = LUI 0x3b75e90 [ID=32]


Examining Available:
Height 29: SU(21): 0x3b774c0: ch = SW 0x3b773c0, 0x3b7b930, 0x3b75390, 0x3b75a90<Mem:ST4[%1]> [ID=21]

Height 29: SU(34): 0x3b75c90: i32 = ADDI 0x3b75690, 0x3b7c030 [ORD=6] [ID=34]


*** Scheduling [32]: SU(21): 0x3b774c0: ch = SW 0x3b773c0, 0x3b7b930, 0x3b75390, 0x3b75a90<Mem:ST4[%1]> [ID=21]


Examining Available:
Height 33: SU(30): 0x3b773c0: i32 = ADDI 0x3b75690, 0x3b778c0 [ID=30]

Height 33: SU(27): 0x3b7b930: i32 = ADD 0x3b7b830, 0x3b7b730 [ID=27]

Height 33: SU(22): 0x3b75a90: ch = SW 0x3b75990, 0x3b7bd30, 0x3b75390, 0x3b57b78<Mem:ST4[%0]> [ID=22]

Height 29: SU(34): 0x3b75c90: i32 = ADDI 0x3b75690, 0x3b7c030 [ORD=6] [ID=34]


*** Scheduling [33]: SU(30): 0x3b773c0: i32 = ADDI 0x3b75690, 0x3b778c0 [ID=30]


Examining Available:
Height 33: SU(27): 0x3b7b930: i32 = ADD 0x3b7b830, 0x3b7b730 [ID=27]

Height 33: SU(22): 0x3b75a90: ch = SW 0x3b75990, 0x3b7bd30, 0x3b75390, 0x3b57b78<Mem:ST4[%0]> [ID=22]

Height 29: SU(34): 0x3b75c90: i32 = ADDI 0x3b75690, 0x3b7c030 [ORD=6] [ID=34]


*** Scheduling [34]: SU(27): 0x3b7b930: i32 = ADD 0x3b7b830, 0x3b7b730 [ID=27]


Examining Available:
Height 35: SU(29): 0x3b7b830: i32 = ADDI 0x3b75690, 0x3b7b630 [ID=29]

Height 35: SU(28): 0x3b7b730: i32 = LUI 0x3b75b90 [ID=28]

Height 33: SU(22): 0x3b75a90: ch = SW 0x3b75990, 0x3b7bd30, 0x3b75390, 0x3b57b78<Mem:ST4[%0]> [ID=22]

Height 29: SU(34): 0x3b75c90: i32 = ADDI 0x3b75690, 0x3b7c030 [ORD=6] [ID=34]


*** Scheduling [35]: SU(29): 0x3b7b830: i32 = ADDI 0x3b75690, 0x3b7b630 [ID=29]


Examining Available:
Height 35: SU(28): 0x3b7b730: i32 = LUI 0x3b75b90 [ID=28]

Height 33: SU(22): 0x3b75a90: ch = SW 0x3b75990, 0x3b7bd30, 0x3b75390, 0x3b57b78<Mem:ST4[%0]> [ID=22]

Height 29: SU(34): 0x3b75c90: i32 = ADDI 0x3b75690, 0x3b7c030 [ORD=6] [ID=34]


*** Scheduling [36]: SU(28): 0x3b7b730: i32 = LUI 0x3b75b90 [ID=28]


Examining Available:
Height 33: SU(22): 0x3b75a90: ch = SW 0x3b75990, 0x3b7bd30, 0x3b75390, 0x3b57b78<Mem:ST4[%0]> [ID=22]

Height 29: SU(34): 0x3b75c90: i32 = ADDI 0x3b75690, 0x3b7c030 [ORD=6] [ID=34]


*** Scheduling [37]: SU(22): 0x3b75a90: ch = SW 0x3b75990, 0x3b7bd30, 0x3b75390, 0x3b57b78<Mem:ST4[%0]> [ID=22]


Examining Available:
Height 38: SU(26): 0x3b75990: i32 = ADDI 0x3b75690, 0x3b777c0 [ID=26]

Height 38: SU(23): 0x3b7bd30: i32 = ADD 0x3b7bc30, 0x3b7bb30 [ID=23]

Height 29: SU(34): 0x3b75c90: i32 = ADDI 0x3b75690, 0x3b7c030 [ORD=6] [ID=34]


*** Scheduling [38]: SU(26): 0x3b75990: i32 = ADDI 0x3b75690, 0x3b777c0 [ID=26]


Examining Available:
Height 38: SU(23): 0x3b7bd30: i32 = ADD 0x3b7bc30, 0x3b7bb30 [ID=23]

Height 29: SU(34): 0x3b75c90: i32 = ADDI 0x3b75690, 0x3b7c030 [ORD=6] [ID=34]


*** Scheduling [39]: SU(23): 0x3b7bd30: i32 = ADD 0x3b7bc30, 0x3b7bb30 [ID=23]


Examining Available:
Height 40: SU(25): 0x3b7bc30: i32 = ADDI 0x3b75690, 0x3b7ba30 [ID=25]

Height 40: SU(24): 0x3b7bb30: i32 = LUI 0x3b75890 [ID=24]

Height 29: SU(34): 0x3b75c90: i32 = ADDI 0x3b75690, 0x3b7c030 [ORD=6] [ID=34]


*** Scheduling [40]: SU(25): 0x3b7bc30: i32 = ADDI 0x3b75690, 0x3b7ba30 [ID=25]


Examining Available:
Height 40: SU(24): 0x3b7bb30: i32 = LUI 0x3b75890 [ID=24]

Height 29: SU(34): 0x3b75c90: i32 = ADDI 0x3b75690, 0x3b7c030 [ORD=6] [ID=34]


*** Scheduling [41]: SU(24): 0x3b7bb30: i32 = LUI 0x3b75890 [ID=24]


Examining Available:
Height 29: SU(34): 0x3b75c90: i32 = ADDI 0x3b75690, 0x3b7c030 [ORD=6] [ID=34]


*** Scheduling [42]: SU(34): 0x3b75c90: i32 = ADDI 0x3b75690, 0x3b7c030 [ORD=6] [ID=34]

*** Final schedule ***
SU(34): 0x3b75c90: i32 = ADDI 0x3b75690, 0x3b7c030 [ORD=6] [ID=34]

SU(24): 0x3b7bb30: i32 = LUI 0x3b75890 [ID=24]

SU(25): 0x3b7bc30: i32 = ADDI 0x3b75690, 0x3b7ba30 [ID=25]

SU(23): 0x3b7bd30: i32 = ADD 0x3b7bc30, 0x3b7bb30 [ID=23]

SU(26): 0x3b75990: i32 = ADDI 0x3b75690, 0x3b777c0 [ID=26]

SU(22): 0x3b75a90: ch = SW 0x3b75990, 0x3b7bd30, 0x3b75390, 0x3b57b78<Mem:ST4[%0]> [ID=22]

SU(28): 0x3b7b730: i32 = LUI 0x3b75b90 [ID=28]

SU(29): 0x3b7b830: i32 = ADDI 0x3b75690, 0x3b7b630 [ID=29]

SU(27): 0x3b7b930: i32 = ADD 0x3b7b830, 0x3b7b730 [ID=27]

SU(30): 0x3b773c0: i32 = ADDI 0x3b75690, 0x3b778c0 [ID=30]

SU(21): 0x3b774c0: ch = SW 0x3b773c0, 0x3b7b930, 0x3b75390, 0x3b75a90<Mem:ST4[%1]> [ID=21]

SU(32): 0x3b7b220: i32 = LUI 0x3b75e90 [ID=32]

SU(33): 0x3b7b320: i32 = ADDI 0x3b75690, 0x3b7b120 [ID=33]

SU(31): 0x3b7b420: i32 = ADD 0x3b7b320, 0x3b7b220 [ID=31]

SU(20): 0x3b75d90: ch = SW 0x3b75c90, 0x3b7b420, 0x3b75390, 0x3b774c0<Mem:ST4[%2]> [ORD=6] [ID=20]

SU(38): 0x3b75f90: i32 = ADDI 0x3b75690, 0x3b7bf30 [ORD=8] [ID=38]

SU(36): 0x3b7ae20: i32 = LUI 0x3b76190 [ID=36]

SU(37): 0x3b7af20: i32 = ADDI 0x3b75690, 0x3b7ad20 [ID=37]

SU(35): 0x3b7b020: i32 = ADD 0x3b7af20, 0x3b7ae20 [ID=35]

SU(19): 0x3b76090: ch = SW 0x3b75f90, 0x3b7b020, 0x3b75390, 0x3b75d90<Mem:ST4[%3]> [ORD=8] [ID=19]

SU(13): 0x3b7aa20: i32 = LUI 0x3b770c0 [ID=13]

SU(14): 0x3b7ab20: i32 = ADDI 0x3b75690, 0x3b7a920 [ID=14]

SU(12): 0x3b7ac20: i32 = ADD 0x3b7ab20, 0x3b7aa20 [ID=12]

SU(18): 0x3b76fc0: ch = SW 0x3b75690, 0x3b7ac20, 0x3b75390, 0x3b76090<Mem:ST4[%4]> [ORD=10] [ID=18]

SU(8): 0x3b7a620: i32 = LUI 0x3b772c0 [ID=8]

SU(9): 0x3b7a720: i32 = ADDI 0x3b75690, 0x3b79e30 [ID=9]

SU(7): 0x3b7a820: i32 = ADD 0x3b7a720, 0x3b7a620 [ID=7]

SU(17): 0x3b771c0: ch = SW 0x3b75690, 0x3b7a820, 0x3b75390, 0x3b76fc0<Mem:ST4[%5]> [ORD=12] [ID=17]

SU(3): 0x3b79b30: i32 = LUI 0x3b775c0 [ID=3]

SU(4): 0x3b79c30: i32 = ADDI 0x3b75690, 0x3b79a30 [ID=4]

SU(2): 0x3b79d30: i32 = ADD 0x3b79c30, 0x3b79b30 [ID=2]

SU(16): 0x3b776c0: ch = SW 0x3b75690, 0x3b79d30, 0x3b75390, 0x3b771c0<Mem:ST4[%6]> [ID=16]

SU(41): 0x3b77bc0: i32 = LUI 0x3b75490 [ID=41]

SU(42): 0x3b79230: i32 = ADDI 0x3b75690, 0x3b75790 [ID=42]

SU(40): 0x3b79930: i32 = ADD 0x3b79230, 0x3b77bc0 [ID=40]

SU(15): 0x3b779c0: i32,ch = LW 0x3b79930, 0x3b77cc0, 0x3b776c0<Mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3)]> [ORD=16] [ID=15]

SU(11): 0x3b77ac0: ch = SW 0x3b779c0, 0x3b7ac20, 0x3b75390, 0x3b779c0:1<Mem:ST4[@glob_sg_bit0]> [ORD=17] [ID=11]

SU(10): 0x3b79030: i32,ch = LW 0x3b79930, 0x3b79330, 0x3b77ac0<Mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4)]> [ORD=19] [ID=10]

SU(6): 0x3b79130: ch = SW 0x3b79030, 0x3b7a820, 0x3b75390, 0x3b79030:1<Mem:ST4[@glob_sg_bit1]> [ORD=20] [ID=6]

SU(5): 0x3b79530: f32,ch = FLW 0x3b79930, 0x3b7be30, 0x3b79130<Mem:LD4[bitcast (i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 5) to float*)]> [ORD=23] [ID=5]

SU(1): 0x3b79630: ch = FSW 0x3b79530, 0x3b79d30, 0x3b75390, 0x3b79530:1<Mem:ST4[@nh_fin_de_rampe]> [ORD=24] [ID=1]

SU(39): 0x3b79730: i32 = ADDI 0x3b77dc0, 0x3b79430 [ORD=26] [ID=39]

SU(0): 0x3b79830: ch = SW 0x3b79930, 0x3b79730, 0x3b75390, 0x3b79630<Mem:ST4[%7]> [ORD=26] [ID=0]


Total amount of phi nodes to update: 0
# Machine code for function redefine_start1: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start1.return
16B		%vreg0<def> = ADDI %zero, 17000; GR32Bit:%vreg0
32B		%vreg1<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg1
48B		%vreg2<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg2
64B		%vreg3<def> = ADD %vreg2<kill>, %vreg1<kill>; GR32Bit:%vreg3,%vreg2,%vreg1
80B		%vreg4<def> = ADDI %zero, 1058642330; GR32Bit:%vreg4
96B		SW %vreg4<kill>, %vreg3<kill>, 0; mem:ST4[%0] GR32Bit:%vreg4,%vreg3
112B		%vreg5<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg5
128B		%vreg6<def> = ADDI %zero, <ga:@SG_MAX>[TF=3]; GR32Bit:%vreg6
144B		%vreg7<def> = ADD %vreg6<kill>, %vreg5<kill>; GR32Bit:%vreg7,%vreg6,%vreg5
160B		%vreg8<def> = ADDI %zero, 1063675494; GR32Bit:%vreg8
176B		SW %vreg8<kill>, %vreg7<kill>, 0; mem:ST4[%1] GR32Bit:%vreg8,%vreg7
192B		%vreg9<def> = LUI <ga:@NH_STARTER_SHUTOFF>[TF=2]; GR32Bit:%vreg9
208B		%vreg10<def> = ADDI %zero, <ga:@NH_STARTER_SHUTOFF>[TF=3]; GR32Bit:%vreg10
224B		%vreg11<def> = ADD %vreg10<kill>, %vreg9<kill>; GR32Bit:%vreg11,%vreg10,%vreg9
240B		SW %vreg0<kill>, %vreg11<kill>, 0; mem:ST4[%2] GR32Bit:%vreg0,%vreg11
256B		%vreg12<def> = ADDI %zero, 15000; GR32Bit:%vreg12
272B		%vreg13<def> = LUI <ga:@SG_MAX_RPM>[TF=2]; GR32Bit:%vreg13
288B		%vreg14<def> = ADDI %zero, <ga:@SG_MAX_RPM>[TF=3]; GR32Bit:%vreg14
304B		%vreg15<def> = ADD %vreg14<kill>, %vreg13<kill>; GR32Bit:%vreg15,%vreg14,%vreg13
320B		SW %vreg12<kill>, %vreg15<kill>, 0; mem:ST4[%3] GR32Bit:%vreg12,%vreg15
336B		%vreg16<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg16
352B		%vreg17<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg17
368B		%vreg18<def> = ADD %vreg17<kill>, %vreg16<kill>; GR32Bit:%vreg18,%vreg17,%vreg16
384B		SW %zero, %vreg18, 0; mem:ST4[%4] GR32Bit:%vreg18
400B		%vreg19<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg19
416B		%vreg20<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg20
432B		%vreg21<def> = ADD %vreg20<kill>, %vreg19<kill>; GR32Bit:%vreg21,%vreg20,%vreg19
448B		SW %zero, %vreg21, 0; mem:ST4[%5] GR32Bit:%vreg21
464B		%vreg22<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg22
480B		%vreg23<def> = ADDI %zero, <ga:@nh_fin_de_rampe>[TF=3]; GR32Bit:%vreg23
496B		%vreg24<def> = ADD %vreg23<kill>, %vreg22<kill>; GR32Bit:%vreg24,%vreg23,%vreg22
512B		SW %zero, %vreg24, 0; mem:ST4[%6] GR32Bit:%vreg24
528B		%vreg25<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg25
544B		%vreg26<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg26
560B		%vreg27<def> = ADD %vreg26<kill>, %vreg25<kill>; GR32Bit:%vreg27,%vreg26,%vreg25
576B		%vreg28<def> = LW %vreg27, 12; mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3)] GR32Bit:%vreg28,%vreg27
592B		SW %vreg28<kill>, %vreg18, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg28,%vreg18
608B		%vreg29<def> = LW %vreg27, 16; mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4)] GR32Bit:%vreg29,%vreg27
624B		SW %vreg29<kill>, %vreg21, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg29,%vreg21
640B		%vreg30<def> = FLW %vreg27, 20; mem:LD4[bitcast (i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 5) to float*)] FP32Bit:%vreg30 GR32Bit:%vreg27
656B		FSW %vreg30<kill>, %vreg24, 0; mem:ST4[@nh_fin_de_rampe] FP32Bit:%vreg30 GR32Bit:%vreg24
672B		%vreg31<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg31
688B		SW %vreg27, %vreg31<kill>, 0; mem:ST4[%7] GR32Bit:%vreg27,%vreg31

# End machine code for function redefine_start1.

********** Stack Coloring **********
********** Function: redefine_start1
Found 0 markers and 1 slots
Slot structure:
Slot #0 - 4 bytes.
Total Stack size: 4 bytes

Will not try to merge slots.
Removed 0 markers.
******** Pre-regalloc Machine LICM: redefine_start1 ********
******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: redefine_start1
********** PROCESS IMPLICIT DEFS **********
********** Function: redefine_start1
********** REWRITING TWO-ADDR INSTRS **********
********** Function: redefine_start1
# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start1.return
16B		%vreg0<def> = ADDI %zero, 17000; GR32Bit:%vreg0
32B		%vreg1<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg1
48B		%vreg2<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg2
64B		%vreg3<def> = ADD %vreg2<kill>, %vreg1<kill>; GR32Bit:%vreg3,%vreg2,%vreg1
80B		%vreg4<def> = ADDI %zero, 1058642330; GR32Bit:%vreg4
96B		SW %vreg4<kill>, %vreg3<kill>, 0; mem:ST4[%0] GR32Bit:%vreg4,%vreg3
112B		%vreg5<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg5
128B		%vreg6<def> = ADDI %zero, <ga:@SG_MAX>[TF=3]; GR32Bit:%vreg6
144B		%vreg7<def> = ADD %vreg6<kill>, %vreg5<kill>; GR32Bit:%vreg7,%vreg6,%vreg5
160B		%vreg8<def> = ADDI %zero, 1063675494; GR32Bit:%vreg8
176B		SW %vreg8<kill>, %vreg7<kill>, 0; mem:ST4[%1] GR32Bit:%vreg8,%vreg7
192B		%vreg9<def> = LUI <ga:@NH_STARTER_SHUTOFF>[TF=2]; GR32Bit:%vreg9
208B		%vreg10<def> = ADDI %zero, <ga:@NH_STARTER_SHUTOFF>[TF=3]; GR32Bit:%vreg10
224B		%vreg11<def> = ADD %vreg10<kill>, %vreg9<kill>; GR32Bit:%vreg11,%vreg10,%vreg9
240B		SW %vreg0<kill>, %vreg11<kill>, 0; mem:ST4[%2] GR32Bit:%vreg0,%vreg11
256B		%vreg12<def> = ADDI %zero, 15000; GR32Bit:%vreg12
272B		%vreg13<def> = LUI <ga:@SG_MAX_RPM>[TF=2]; GR32Bit:%vreg13
288B		%vreg14<def> = ADDI %zero, <ga:@SG_MAX_RPM>[TF=3]; GR32Bit:%vreg14
304B		%vreg15<def> = ADD %vreg14<kill>, %vreg13<kill>; GR32Bit:%vreg15,%vreg14,%vreg13
320B		SW %vreg12<kill>, %vreg15<kill>, 0; mem:ST4[%3] GR32Bit:%vreg12,%vreg15
336B		%vreg16<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg16
352B		%vreg17<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg17
368B		%vreg18<def> = ADD %vreg17<kill>, %vreg16<kill>; GR32Bit:%vreg18,%vreg17,%vreg16
384B		SW %zero, %vreg18, 0; mem:ST4[%4] GR32Bit:%vreg18
400B		%vreg19<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg19
416B		%vreg20<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg20
432B		%vreg21<def> = ADD %vreg20<kill>, %vreg19<kill>; GR32Bit:%vreg21,%vreg20,%vreg19
448B		SW %zero, %vreg21, 0; mem:ST4[%5] GR32Bit:%vreg21
464B		%vreg22<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg22
480B		%vreg23<def> = ADDI %zero, <ga:@nh_fin_de_rampe>[TF=3]; GR32Bit:%vreg23
496B		%vreg24<def> = ADD %vreg23<kill>, %vreg22<kill>; GR32Bit:%vreg24,%vreg23,%vreg22
512B		SW %zero, %vreg24, 0; mem:ST4[%6] GR32Bit:%vreg24
528B		%vreg25<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg25
544B		%vreg26<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg26
560B		%vreg27<def> = ADD %vreg26<kill>, %vreg25<kill>; GR32Bit:%vreg27,%vreg26,%vreg25
576B		%vreg28<def> = LW %vreg27, 12; mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3)] GR32Bit:%vreg28,%vreg27
592B		SW %vreg28<kill>, %vreg18<kill>, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg28,%vreg18
608B		%vreg29<def> = LW %vreg27, 16; mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4)] GR32Bit:%vreg29,%vreg27
624B		SW %vreg29<kill>, %vreg21<kill>, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg29,%vreg21
640B		%vreg30<def> = FLW %vreg27, 20; mem:LD4[bitcast (i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 5) to float*)] FP32Bit:%vreg30 GR32Bit:%vreg27
656B		FSW %vreg30<kill>, %vreg24<kill>, 0; mem:ST4[@nh_fin_de_rampe] FP32Bit:%vreg30 GR32Bit:%vreg24
672B		%vreg31<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg31
688B		SW %vreg27<kill>, %vreg31<kill>, 0; mem:ST4[%7] GR32Bit:%vreg27,%vreg31

# End machine code for function redefine_start1.

Computing live-in reg-units in ABI blocks.
Created 0 new intervals.
********** INTERVALS **********
%vreg0 = [16r,240r:0)  0@16r
%vreg1 = [32r,64r:0)  0@32r
%vreg2 = [48r,64r:0)  0@48r
%vreg3 = [64r,96r:0)  0@64r
%vreg4 = [80r,96r:0)  0@80r
%vreg5 = [112r,144r:0)  0@112r
%vreg6 = [128r,144r:0)  0@128r
%vreg7 = [144r,176r:0)  0@144r
%vreg8 = [160r,176r:0)  0@160r
%vreg9 = [192r,224r:0)  0@192r
%vreg10 = [208r,224r:0)  0@208r
%vreg11 = [224r,240r:0)  0@224r
%vreg12 = [256r,320r:0)  0@256r
%vreg13 = [272r,304r:0)  0@272r
%vreg14 = [288r,304r:0)  0@288r
%vreg15 = [304r,320r:0)  0@304r
%vreg16 = [336r,368r:0)  0@336r
%vreg17 = [352r,368r:0)  0@352r
%vreg18 = [368r,592r:0)  0@368r
%vreg19 = [400r,432r:0)  0@400r
%vreg20 = [416r,432r:0)  0@416r
%vreg21 = [432r,624r:0)  0@432r
%vreg22 = [464r,496r:0)  0@464r
%vreg23 = [480r,496r:0)  0@480r
%vreg24 = [496r,656r:0)  0@496r
%vreg25 = [528r,560r:0)  0@528r
%vreg26 = [544r,560r:0)  0@544r
%vreg27 = [560r,688r:0)  0@560r
%vreg28 = [576r,592r:0)  0@576r
%vreg29 = [608r,624r:0)  0@608r
%vreg30 = [640r,656r:0)  0@640r
%vreg31 = [672r,688r:0)  0@672r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start1.return
16B		%vreg0<def> = ADDI %zero, 17000; GR32Bit:%vreg0
32B		%vreg1<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg1
48B		%vreg2<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg2
64B		%vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
80B		%vreg4<def> = ADDI %zero, 1058642330; GR32Bit:%vreg4
96B		SW %vreg4, %vreg3, 0; mem:ST4[%0] GR32Bit:%vreg4,%vreg3
112B		%vreg5<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg5
128B		%vreg6<def> = ADDI %zero, <ga:@SG_MAX>[TF=3]; GR32Bit:%vreg6
144B		%vreg7<def> = ADD %vreg6, %vreg5; GR32Bit:%vreg7,%vreg6,%vreg5
160B		%vreg8<def> = ADDI %zero, 1063675494; GR32Bit:%vreg8
176B		SW %vreg8, %vreg7, 0; mem:ST4[%1] GR32Bit:%vreg8,%vreg7
192B		%vreg9<def> = LUI <ga:@NH_STARTER_SHUTOFF>[TF=2]; GR32Bit:%vreg9
208B		%vreg10<def> = ADDI %zero, <ga:@NH_STARTER_SHUTOFF>[TF=3]; GR32Bit:%vreg10
224B		%vreg11<def> = ADD %vreg10, %vreg9; GR32Bit:%vreg11,%vreg10,%vreg9
240B		SW %vreg0, %vreg11, 0; mem:ST4[%2] GR32Bit:%vreg0,%vreg11
256B		%vreg12<def> = ADDI %zero, 15000; GR32Bit:%vreg12
272B		%vreg13<def> = LUI <ga:@SG_MAX_RPM>[TF=2]; GR32Bit:%vreg13
288B		%vreg14<def> = ADDI %zero, <ga:@SG_MAX_RPM>[TF=3]; GR32Bit:%vreg14
304B		%vreg15<def> = ADD %vreg14, %vreg13; GR32Bit:%vreg15,%vreg14,%vreg13
320B		SW %vreg12, %vreg15, 0; mem:ST4[%3] GR32Bit:%vreg12,%vreg15
336B		%vreg16<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg16
352B		%vreg17<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg17
368B		%vreg18<def> = ADD %vreg17, %vreg16; GR32Bit:%vreg18,%vreg17,%vreg16
384B		SW %zero, %vreg18, 0; mem:ST4[%4] GR32Bit:%vreg18
400B		%vreg19<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg19
416B		%vreg20<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg20
432B		%vreg21<def> = ADD %vreg20, %vreg19; GR32Bit:%vreg21,%vreg20,%vreg19
448B		SW %zero, %vreg21, 0; mem:ST4[%5] GR32Bit:%vreg21
464B		%vreg22<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg22
480B		%vreg23<def> = ADDI %zero, <ga:@nh_fin_de_rampe>[TF=3]; GR32Bit:%vreg23
496B		%vreg24<def> = ADD %vreg23, %vreg22; GR32Bit:%vreg24,%vreg23,%vreg22
512B		SW %zero, %vreg24, 0; mem:ST4[%6] GR32Bit:%vreg24
528B		%vreg25<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg25
544B		%vreg26<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg26
560B		%vreg27<def> = ADD %vreg26, %vreg25; GR32Bit:%vreg27,%vreg26,%vreg25
576B		%vreg28<def> = LW %vreg27, 12; mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3)] GR32Bit:%vreg28,%vreg27
592B		SW %vreg28, %vreg18, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg28,%vreg18
608B		%vreg29<def> = LW %vreg27, 16; mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4)] GR32Bit:%vreg29,%vreg27
624B		SW %vreg29, %vreg21, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg29,%vreg21
640B		%vreg30<def> = FLW %vreg27, 20; mem:LD4[bitcast (i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 5) to float*)] FP32Bit:%vreg30 GR32Bit:%vreg27
656B		FSW %vreg30, %vreg24, 0; mem:ST4[@nh_fin_de_rampe] FP32Bit:%vreg30 GR32Bit:%vreg24
672B		%vreg31<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg31
688B		SW %vreg27, %vreg31, 0; mem:ST4[%7] GR32Bit:%vreg27,%vreg31

# End machine code for function redefine_start1.

********** SIMPLE REGISTER COALESCING **********
********** Function: redefine_start1
********** JOINING INTERVALS ***********
redefine_start1.return:
Trying to inflate 0 regs.
********** INTERVALS **********
%vreg0 = [16r,240r:0)  0@16r
%vreg1 = [32r,64r:0)  0@32r
%vreg2 = [48r,64r:0)  0@48r
%vreg3 = [64r,96r:0)  0@64r
%vreg4 = [80r,96r:0)  0@80r
%vreg5 = [112r,144r:0)  0@112r
%vreg6 = [128r,144r:0)  0@128r
%vreg7 = [144r,176r:0)  0@144r
%vreg8 = [160r,176r:0)  0@160r
%vreg9 = [192r,224r:0)  0@192r
%vreg10 = [208r,224r:0)  0@208r
%vreg11 = [224r,240r:0)  0@224r
%vreg12 = [256r,320r:0)  0@256r
%vreg13 = [272r,304r:0)  0@272r
%vreg14 = [288r,304r:0)  0@288r
%vreg15 = [304r,320r:0)  0@304r
%vreg16 = [336r,368r:0)  0@336r
%vreg17 = [352r,368r:0)  0@352r
%vreg18 = [368r,592r:0)  0@368r
%vreg19 = [400r,432r:0)  0@400r
%vreg20 = [416r,432r:0)  0@416r
%vreg21 = [432r,624r:0)  0@432r
%vreg22 = [464r,496r:0)  0@464r
%vreg23 = [480r,496r:0)  0@480r
%vreg24 = [496r,656r:0)  0@496r
%vreg25 = [528r,560r:0)  0@528r
%vreg26 = [544r,560r:0)  0@544r
%vreg27 = [560r,688r:0)  0@560r
%vreg28 = [576r,592r:0)  0@576r
%vreg29 = [608r,624r:0)  0@608r
%vreg30 = [640r,656r:0)  0@640r
%vreg31 = [672r,688r:0)  0@672r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start1.return
16B		%vreg0<def> = ADDI %zero, 17000; GR32Bit:%vreg0
32B		%vreg1<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg1
48B		%vreg2<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg2
64B		%vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
80B		%vreg4<def> = ADDI %zero, 1058642330; GR32Bit:%vreg4
96B		SW %vreg4, %vreg3, 0; mem:ST4[%0] GR32Bit:%vreg4,%vreg3
112B		%vreg5<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg5
128B		%vreg6<def> = ADDI %zero, <ga:@SG_MAX>[TF=3]; GR32Bit:%vreg6
144B		%vreg7<def> = ADD %vreg6, %vreg5; GR32Bit:%vreg7,%vreg6,%vreg5
160B		%vreg8<def> = ADDI %zero, 1063675494; GR32Bit:%vreg8
176B		SW %vreg8, %vreg7, 0; mem:ST4[%1] GR32Bit:%vreg8,%vreg7
192B		%vreg9<def> = LUI <ga:@NH_STARTER_SHUTOFF>[TF=2]; GR32Bit:%vreg9
208B		%vreg10<def> = ADDI %zero, <ga:@NH_STARTER_SHUTOFF>[TF=3]; GR32Bit:%vreg10
224B		%vreg11<def> = ADD %vreg10, %vreg9; GR32Bit:%vreg11,%vreg10,%vreg9
240B		SW %vreg0, %vreg11, 0; mem:ST4[%2] GR32Bit:%vreg0,%vreg11
256B		%vreg12<def> = ADDI %zero, 15000; GR32Bit:%vreg12
272B		%vreg13<def> = LUI <ga:@SG_MAX_RPM>[TF=2]; GR32Bit:%vreg13
288B		%vreg14<def> = ADDI %zero, <ga:@SG_MAX_RPM>[TF=3]; GR32Bit:%vreg14
304B		%vreg15<def> = ADD %vreg14, %vreg13; GR32Bit:%vreg15,%vreg14,%vreg13
320B		SW %vreg12, %vreg15, 0; mem:ST4[%3] GR32Bit:%vreg12,%vreg15
336B		%vreg16<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg16
352B		%vreg17<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg17
368B		%vreg18<def> = ADD %vreg17, %vreg16; GR32Bit:%vreg18,%vreg17,%vreg16
384B		SW %zero, %vreg18, 0; mem:ST4[%4] GR32Bit:%vreg18
400B		%vreg19<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg19
416B		%vreg20<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg20
432B		%vreg21<def> = ADD %vreg20, %vreg19; GR32Bit:%vreg21,%vreg20,%vreg19
448B		SW %zero, %vreg21, 0; mem:ST4[%5] GR32Bit:%vreg21
464B		%vreg22<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg22
480B		%vreg23<def> = ADDI %zero, <ga:@nh_fin_de_rampe>[TF=3]; GR32Bit:%vreg23
496B		%vreg24<def> = ADD %vreg23, %vreg22; GR32Bit:%vreg24,%vreg23,%vreg22
512B		SW %zero, %vreg24, 0; mem:ST4[%6] GR32Bit:%vreg24
528B		%vreg25<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg25
544B		%vreg26<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg26
560B		%vreg27<def> = ADD %vreg26, %vreg25; GR32Bit:%vreg27,%vreg26,%vreg25
576B		%vreg28<def> = LW %vreg27, 12; mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3)] GR32Bit:%vreg28,%vreg27
592B		SW %vreg28, %vreg18, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg28,%vreg18
608B		%vreg29<def> = LW %vreg27, 16; mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4)] GR32Bit:%vreg29,%vreg27
624B		SW %vreg29, %vreg21, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg29,%vreg21
640B		%vreg30<def> = FLW %vreg27, 20; mem:LD4[bitcast (i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 5) to float*)] FP32Bit:%vreg30 GR32Bit:%vreg27
656B		FSW %vreg30, %vreg24, 0; mem:ST4[@nh_fin_de_rampe] FP32Bit:%vreg30 GR32Bit:%vreg24
672B		%vreg31<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg31
688B		SW %vreg27, %vreg31, 0; mem:ST4[%7] GR32Bit:%vreg27,%vreg31

# End machine code for function redefine_start1.

Before MISched:
# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %redefine_start1.return
	%vreg0<def> = ADDI %zero, 17000; GR32Bit:%vreg0
	%vreg1<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg1
	%vreg2<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg2
	%vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
	%vreg4<def> = ADDI %zero, 1058642330; GR32Bit:%vreg4
	SW %vreg4, %vreg3, 0; mem:ST4[%0] GR32Bit:%vreg4,%vreg3
	%vreg5<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg5
	%vreg6<def> = ADDI %zero, <ga:@SG_MAX>[TF=3]; GR32Bit:%vreg6
	%vreg7<def> = ADD %vreg6, %vreg5; GR32Bit:%vreg7,%vreg6,%vreg5
	%vreg8<def> = ADDI %zero, 1063675494; GR32Bit:%vreg8
	SW %vreg8, %vreg7, 0; mem:ST4[%1] GR32Bit:%vreg8,%vreg7
	%vreg9<def> = LUI <ga:@NH_STARTER_SHUTOFF>[TF=2]; GR32Bit:%vreg9
	%vreg10<def> = ADDI %zero, <ga:@NH_STARTER_SHUTOFF>[TF=3]; GR32Bit:%vreg10
	%vreg11<def> = ADD %vreg10, %vreg9; GR32Bit:%vreg11,%vreg10,%vreg9
	SW %vreg0, %vreg11, 0; mem:ST4[%2] GR32Bit:%vreg0,%vreg11
	%vreg12<def> = ADDI %zero, 15000; GR32Bit:%vreg12
	%vreg13<def> = LUI <ga:@SG_MAX_RPM>[TF=2]; GR32Bit:%vreg13
	%vreg14<def> = ADDI %zero, <ga:@SG_MAX_RPM>[TF=3]; GR32Bit:%vreg14
	%vreg15<def> = ADD %vreg14, %vreg13; GR32Bit:%vreg15,%vreg14,%vreg13
	SW %vreg12, %vreg15, 0; mem:ST4[%3] GR32Bit:%vreg12,%vreg15
	%vreg16<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg16
	%vreg17<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg17
	%vreg18<def> = ADD %vreg17, %vreg16; GR32Bit:%vreg18,%vreg17,%vreg16
	SW %zero, %vreg18, 0; mem:ST4[%4] GR32Bit:%vreg18
	%vreg19<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg19
	%vreg20<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg20
	%vreg21<def> = ADD %vreg20, %vreg19; GR32Bit:%vreg21,%vreg20,%vreg19
	SW %zero, %vreg21, 0; mem:ST4[%5] GR32Bit:%vreg21
	%vreg22<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg22
	%vreg23<def> = ADDI %zero, <ga:@nh_fin_de_rampe>[TF=3]; GR32Bit:%vreg23
	%vreg24<def> = ADD %vreg23, %vreg22; GR32Bit:%vreg24,%vreg23,%vreg22
	SW %zero, %vreg24, 0; mem:ST4[%6] GR32Bit:%vreg24
	%vreg25<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg25
	%vreg26<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg26
	%vreg27<def> = ADD %vreg26, %vreg25; GR32Bit:%vreg27,%vreg26,%vreg25
	%vreg28<def> = LW %vreg27, 12; mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3)] GR32Bit:%vreg28,%vreg27
	SW %vreg28, %vreg18, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg28,%vreg18
	%vreg29<def> = LW %vreg27, 16; mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4)] GR32Bit:%vreg29,%vreg27
	SW %vreg29, %vreg21, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg29,%vreg21
	%vreg30<def> = FLW %vreg27, 20; mem:LD4[bitcast (i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 5) to float*)] FP32Bit:%vreg30 GR32Bit:%vreg27
	FSW %vreg30, %vreg24, 0; mem:ST4[@nh_fin_de_rampe] FP32Bit:%vreg30 GR32Bit:%vreg24
	%vreg31<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg31
	SW %vreg27, %vreg31, 0; mem:ST4[%7] GR32Bit:%vreg27,%vreg31

# End machine code for function redefine_start1.


-------------
Starting new basic block BB#0
********** MI Scheduling **********
redefine_start1:BB#0 redefine_start1.return
  From: %vreg0<def> = ADDI %zero, 17000; GR32Bit:%vreg0
    To: End Remaining: 0
Max Pressure: FP32Bit=1
GR32Bit=5
Live In: 
Live Out: 
FP32BitLimit 32 Actual 1
GR32BitLimit 32 Actual 5
Excess PSets: 
12 subtrees:
  SU(0) in tree 0
  SU(1) in tree 1
  SU(2) in tree 1
  SU(3) in tree 1
  SU(4) in tree 1
  SU(5) in tree 1
  SU(6) in tree 2
  SU(7) in tree 2
  SU(8) in tree 2
  SU(9) in tree 2
  SU(10) in tree 2
  SU(11) in tree 0
  SU(12) in tree 0
  SU(13) in tree 0
  SU(14) in tree 0
  SU(15) in tree 3
  SU(16) in tree 3
  SU(17) in tree 3
  SU(18) in tree 3
  SU(19) in tree 3
  SU(20) in tree 4
  SU(21) in tree 4
  SU(22) in tree 4
  SU(23) in tree 4
  SU(24) in tree 5
  SU(25) in tree 5
  SU(26) in tree 5
  SU(27) in tree 5
  SU(28) in tree 6
  SU(29) in tree 6
  SU(30) in tree 6
  SU(31) in tree 6
  SU(32) in tree 7
  SU(33) in tree 7
  SU(34) in tree 7
  SU(35) in tree 8
  SU(36) in tree 8
  SU(37) in tree 9
  SU(38) in tree 9
  SU(39) in tree 10
  SU(40) in tree 10
  SU(41) in tree 11
  SU(42) in tree 11
SU(0):   %vreg0<def> = ADDI %zero, 17000; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
   val SU(14): Latency=4 Reg=%vreg0

SU(1):   %vreg1<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(3): Latency=5 Reg=%vreg1

SU(2):   %vreg2<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(3): Latency=5 Reg=%vreg2

SU(3):   %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg2
   val SU(1): Latency=5 Reg=%vreg1
  Successors:
   val SU(5): Latency=5 Reg=%vreg3

SU(4):   %vreg4<def> = ADDI %zero, 1058642330; GR32Bit:%vreg4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
   val SU(5): Latency=4 Reg=%vreg4

SU(5):   SW %vreg4, %vreg3, 0; mem:ST4[%0] GR32Bit:%vreg4,%vreg3
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 10
  Height             : 0
  Predecessors:
   val SU(3): Latency=5 Reg=%vreg3
   val SU(4): Latency=4 Reg=%vreg4
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(6):   %vreg5<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(8): Latency=5 Reg=%vreg5

SU(7):   %vreg6<def> = ADDI %zero, <ga:@SG_MAX>[TF=3]; GR32Bit:%vreg6
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(8): Latency=5 Reg=%vreg6

SU(8):   %vreg7<def> = ADD %vreg6, %vreg5; GR32Bit:%vreg7,%vreg6,%vreg5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
   val SU(7): Latency=5 Reg=%vreg6
   val SU(6): Latency=5 Reg=%vreg5
  Successors:
   val SU(10): Latency=5 Reg=%vreg7

SU(9):   %vreg8<def> = ADDI %zero, 1063675494; GR32Bit:%vreg8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
   val SU(10): Latency=4 Reg=%vreg8

SU(10):   SW %vreg8, %vreg7, 0; mem:ST4[%1] GR32Bit:%vreg8,%vreg7
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 10
  Height             : 0
  Predecessors:
   val SU(8): Latency=5 Reg=%vreg7
   val SU(9): Latency=4 Reg=%vreg8
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(11):   %vreg9<def> = LUI <ga:@NH_STARTER_SHUTOFF>[TF=2]; GR32Bit:%vreg9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(13): Latency=5 Reg=%vreg9

SU(12):   %vreg10<def> = ADDI %zero, <ga:@NH_STARTER_SHUTOFF>[TF=3]; GR32Bit:%vreg10
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(13): Latency=5 Reg=%vreg10

SU(13):   %vreg11<def> = ADD %vreg10, %vreg9; GR32Bit:%vreg11,%vreg10,%vreg9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
   val SU(12): Latency=5 Reg=%vreg10
   val SU(11): Latency=5 Reg=%vreg9
  Successors:
   val SU(14): Latency=5 Reg=%vreg11

SU(14):   SW %vreg0, %vreg11, 0; mem:ST4[%2] GR32Bit:%vreg0,%vreg11
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 10
  Height             : 0
  Predecessors:
   val SU(13): Latency=5 Reg=%vreg11
   val SU(0): Latency=4 Reg=%vreg0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(15):   %vreg12<def> = ADDI %zero, 15000; GR32Bit:%vreg12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
   val SU(19): Latency=4 Reg=%vreg12

SU(16):   %vreg13<def> = LUI <ga:@SG_MAX_RPM>[TF=2]; GR32Bit:%vreg13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(18): Latency=5 Reg=%vreg13

SU(17):   %vreg14<def> = ADDI %zero, <ga:@SG_MAX_RPM>[TF=3]; GR32Bit:%vreg14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(18): Latency=5 Reg=%vreg14

SU(18):   %vreg15<def> = ADD %vreg14, %vreg13; GR32Bit:%vreg15,%vreg14,%vreg13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
   val SU(17): Latency=5 Reg=%vreg14
   val SU(16): Latency=5 Reg=%vreg13
  Successors:
   val SU(19): Latency=5 Reg=%vreg15

SU(19):   SW %vreg12, %vreg15, 0; mem:ST4[%3] GR32Bit:%vreg12,%vreg15
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 10
  Height             : 0
  Predecessors:
   val SU(18): Latency=5 Reg=%vreg15
   val SU(15): Latency=4 Reg=%vreg12
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(20):   %vreg16<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(22): Latency=5 Reg=%vreg16

SU(21):   %vreg17<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(22): Latency=5 Reg=%vreg17

SU(22):   %vreg18<def> = ADD %vreg17, %vreg16; GR32Bit:%vreg18,%vreg17,%vreg16
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
   val SU(21): Latency=5 Reg=%vreg17
   val SU(20): Latency=5 Reg=%vreg16
  Successors:
   val SU(36): Latency=5 Reg=%vreg18
   val SU(23): Latency=5 Reg=%vreg18

SU(23):   SW %zero, %vreg18, 0; mem:ST4[%4] GR32Bit:%vreg18
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 10
  Height             : 0
  Predecessors:
   val SU(22): Latency=5 Reg=%vreg18
  Successors:
   ch  SU(36): Latency=0
   ch  SU(4294967295) *: Latency=0

SU(24):   %vreg19<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg19
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(26): Latency=5 Reg=%vreg19

SU(25):   %vreg20<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(26): Latency=5 Reg=%vreg20

SU(26):   %vreg21<def> = ADD %vreg20, %vreg19; GR32Bit:%vreg21,%vreg20,%vreg19
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
   val SU(25): Latency=5 Reg=%vreg20
   val SU(24): Latency=5 Reg=%vreg19
  Successors:
   val SU(38): Latency=5 Reg=%vreg21
   val SU(27): Latency=5 Reg=%vreg21

SU(27):   SW %zero, %vreg21, 0; mem:ST4[%5] GR32Bit:%vreg21
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 10
  Height             : 0
  Predecessors:
   val SU(26): Latency=5 Reg=%vreg21
  Successors:
   ch  SU(38): Latency=0
   ch  SU(4294967295) *: Latency=0

SU(28):   %vreg22<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(30): Latency=5 Reg=%vreg22

SU(29):   %vreg23<def> = ADDI %zero, <ga:@nh_fin_de_rampe>[TF=3]; GR32Bit:%vreg23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(30): Latency=5 Reg=%vreg23

SU(30):   %vreg24<def> = ADD %vreg23, %vreg22; GR32Bit:%vreg24,%vreg23,%vreg22
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
   val SU(29): Latency=5 Reg=%vreg23
   val SU(28): Latency=5 Reg=%vreg22
  Successors:
   val SU(40): Latency=5 Reg=%vreg24
   val SU(31): Latency=5 Reg=%vreg24

SU(31):   SW %zero, %vreg24, 0; mem:ST4[%6] GR32Bit:%vreg24
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 10
  Height             : 0
  Predecessors:
   val SU(30): Latency=5 Reg=%vreg24
  Successors:
   ch  SU(40): Latency=0
   ch  SU(4294967295) *: Latency=0

SU(32):   %vreg25<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
   val SU(34): Latency=5 Reg=%vreg25

SU(33):   %vreg26<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg26
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
   val SU(34): Latency=5 Reg=%vreg26

SU(34):   %vreg27<def> = ADD %vreg26, %vreg25; GR32Bit:%vreg27,%vreg26,%vreg25
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
   val SU(33): Latency=5 Reg=%vreg26
   val SU(32): Latency=5 Reg=%vreg25
  Successors:
   val SU(42): Latency=4 Reg=%vreg27
   val SU(39): Latency=5 Reg=%vreg27
   val SU(37): Latency=5 Reg=%vreg27
   val SU(35): Latency=5 Reg=%vreg27

SU(35):   %vreg28<def> = LW %vreg27, 12; mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3)] GR32Bit:%vreg28,%vreg27
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 2
  Predecessors:
   val SU(34): Latency=5 Reg=%vreg27
  Successors:
   val SU(36): Latency=2 Reg=%vreg28

SU(36):   SW %vreg28, %vreg18, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg28,%vreg18
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 12
  Height             : 0
  Predecessors:
   val SU(35): Latency=2 Reg=%vreg28
   val SU(22): Latency=5 Reg=%vreg18
   ch  SU(23): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(37):   %vreg29<def> = LW %vreg27, 16; mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4)] GR32Bit:%vreg29,%vreg27
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 2
  Predecessors:
   val SU(34): Latency=5 Reg=%vreg27
  Successors:
   val SU(38): Latency=2 Reg=%vreg29

SU(38):   SW %vreg29, %vreg21, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg29,%vreg21
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 12
  Height             : 0
  Predecessors:
   val SU(37): Latency=2 Reg=%vreg29
   val SU(26): Latency=5 Reg=%vreg21
   ch  SU(27): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(39):   %vreg30<def> = FLW %vreg27, 20; mem:LD4[bitcast (i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 5) to float*)] FP32Bit:%vreg30 GR32Bit:%vreg27
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 2
  Predecessors:
   val SU(34): Latency=5 Reg=%vreg27
  Successors:
   val SU(40): Latency=2 Reg=%vreg30

SU(40):   FSW %vreg30, %vreg24, 0; mem:ST4[@nh_fin_de_rampe] FP32Bit:%vreg30 GR32Bit:%vreg24
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 12
  Height             : 0
  Predecessors:
   val SU(39): Latency=2 Reg=%vreg30
   val SU(30): Latency=5 Reg=%vreg24
   ch  SU(31): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(41):   %vreg31<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(42): Latency=5 Reg=%vreg31

SU(42):   SW %vreg27, %vreg31, 0; mem:ST4[%7] GR32Bit:%vreg27,%vreg31
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 9
  Height             : 0
  Predecessors:
   val SU(34): Latency=4 Reg=%vreg27
   val SU(41): Latency=5 Reg=%vreg31
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg0<def> = ADDI %zero, 17000; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
   val SU(14): Latency=4 Reg=%vreg0

SU(1):   %vreg1<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(3): Latency=5 Reg=%vreg1

SU(2):   %vreg2<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(3): Latency=5 Reg=%vreg2

SU(3):   %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg2
   val SU(1): Latency=5 Reg=%vreg1
  Successors:
   val SU(5): Latency=5 Reg=%vreg3

SU(4):   %vreg4<def> = ADDI %zero, 1058642330; GR32Bit:%vreg4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
   val SU(5): Latency=4 Reg=%vreg4

SU(5):   SW %vreg4, %vreg3, 0; mem:ST4[%0] GR32Bit:%vreg4,%vreg3
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 10
  Height             : 0
  Predecessors:
   val SU(3): Latency=5 Reg=%vreg3
   val SU(4): Latency=4 Reg=%vreg4
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(6):   %vreg5<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(8): Latency=5 Reg=%vreg5

SU(7):   %vreg6<def> = ADDI %zero, <ga:@SG_MAX>[TF=3]; GR32Bit:%vreg6
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(8): Latency=5 Reg=%vreg6

SU(8):   %vreg7<def> = ADD %vreg6, %vreg5; GR32Bit:%vreg7,%vreg6,%vreg5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
   val SU(7): Latency=5 Reg=%vreg6
   val SU(6): Latency=5 Reg=%vreg5
  Successors:
   val SU(10): Latency=5 Reg=%vreg7

SU(9):   %vreg8<def> = ADDI %zero, 1063675494; GR32Bit:%vreg8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
   val SU(10): Latency=4 Reg=%vreg8

SU(10):   SW %vreg8, %vreg7, 0; mem:ST4[%1] GR32Bit:%vreg8,%vreg7
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 10
  Height             : 0
  Predecessors:
   val SU(8): Latency=5 Reg=%vreg7
   val SU(9): Latency=4 Reg=%vreg8
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(11):   %vreg9<def> = LUI <ga:@NH_STARTER_SHUTOFF>[TF=2]; GR32Bit:%vreg9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(13): Latency=5 Reg=%vreg9

SU(12):   %vreg10<def> = ADDI %zero, <ga:@NH_STARTER_SHUTOFF>[TF=3]; GR32Bit:%vreg10
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(13): Latency=5 Reg=%vreg10

SU(13):   %vreg11<def> = ADD %vreg10, %vreg9; GR32Bit:%vreg11,%vreg10,%vreg9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
   val SU(12): Latency=5 Reg=%vreg10
   val SU(11): Latency=5 Reg=%vreg9
  Successors:
   val SU(14): Latency=5 Reg=%vreg11

SU(14):   SW %vreg0, %vreg11, 0; mem:ST4[%2] GR32Bit:%vreg0,%vreg11
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 10
  Height             : 0
  Predecessors:
   val SU(13): Latency=5 Reg=%vreg11
   val SU(0): Latency=4 Reg=%vreg0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(15):   %vreg12<def> = ADDI %zero, 15000; GR32Bit:%vreg12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
   val SU(19): Latency=4 Reg=%vreg12

SU(16):   %vreg13<def> = LUI <ga:@SG_MAX_RPM>[TF=2]; GR32Bit:%vreg13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(18): Latency=5 Reg=%vreg13

SU(17):   %vreg14<def> = ADDI %zero, <ga:@SG_MAX_RPM>[TF=3]; GR32Bit:%vreg14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(18): Latency=5 Reg=%vreg14

SU(18):   %vreg15<def> = ADD %vreg14, %vreg13; GR32Bit:%vreg15,%vreg14,%vreg13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
   val SU(17): Latency=5 Reg=%vreg14
   val SU(16): Latency=5 Reg=%vreg13
  Successors:
   val SU(19): Latency=5 Reg=%vreg15

SU(19):   SW %vreg12, %vreg15, 0; mem:ST4[%3] GR32Bit:%vreg12,%vreg15
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 10
  Height             : 0
  Predecessors:
   val SU(18): Latency=5 Reg=%vreg15
   val SU(15): Latency=4 Reg=%vreg12
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(20):   %vreg16<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(22): Latency=5 Reg=%vreg16

SU(21):   %vreg17<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(22): Latency=5 Reg=%vreg17

SU(22):   %vreg18<def> = ADD %vreg17, %vreg16; GR32Bit:%vreg18,%vreg17,%vreg16
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
   val SU(21): Latency=5 Reg=%vreg17
   val SU(20): Latency=5 Reg=%vreg16
  Successors:
   val SU(36): Latency=5 Reg=%vreg18
   val SU(23): Latency=5 Reg=%vreg18

SU(23):   SW %zero, %vreg18, 0; mem:ST4[%4] GR32Bit:%vreg18
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 10
  Height             : 0
  Predecessors:
   val SU(22): Latency=5 Reg=%vreg18
  Successors:
   ch  SU(36): Latency=0
   ch  SU(4294967295) *: Latency=0

SU(24):   %vreg19<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg19
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(26): Latency=5 Reg=%vreg19

SU(25):   %vreg20<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(26): Latency=5 Reg=%vreg20

SU(26):   %vreg21<def> = ADD %vreg20, %vreg19; GR32Bit:%vreg21,%vreg20,%vreg19
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
   val SU(25): Latency=5 Reg=%vreg20
   val SU(24): Latency=5 Reg=%vreg19
  Successors:
   val SU(38): Latency=5 Reg=%vreg21
   val SU(27): Latency=5 Reg=%vreg21

SU(27):   SW %zero, %vreg21, 0; mem:ST4[%5] GR32Bit:%vreg21
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 10
  Height             : 0
  Predecessors:
   val SU(26): Latency=5 Reg=%vreg21
  Successors:
   ch  SU(38): Latency=0
   ch  SU(4294967295) *: Latency=0

SU(28):   %vreg22<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(30): Latency=5 Reg=%vreg22

SU(29):   %vreg23<def> = ADDI %zero, <ga:@nh_fin_de_rampe>[TF=3]; GR32Bit:%vreg23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(30): Latency=5 Reg=%vreg23

SU(30):   %vreg24<def> = ADD %vreg23, %vreg22; GR32Bit:%vreg24,%vreg23,%vreg22
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
   val SU(29): Latency=5 Reg=%vreg23
   val SU(28): Latency=5 Reg=%vreg22
  Successors:
   val SU(40): Latency=5 Reg=%vreg24
   val SU(31): Latency=5 Reg=%vreg24

SU(31):   SW %zero, %vreg24, 0; mem:ST4[%6] GR32Bit:%vreg24
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 10
  Height             : 0
  Predecessors:
   val SU(30): Latency=5 Reg=%vreg24
  Successors:
   ch  SU(40): Latency=0
   ch  SU(4294967295) *: Latency=0

SU(32):   %vreg25<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
   val SU(34): Latency=5 Reg=%vreg25

SU(33):   %vreg26<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg26
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
   val SU(34): Latency=5 Reg=%vreg26

SU(34):   %vreg27<def> = ADD %vreg26, %vreg25; GR32Bit:%vreg27,%vreg26,%vreg25
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
   val SU(33): Latency=5 Reg=%vreg26
   val SU(32): Latency=5 Reg=%vreg25
  Successors:
   val SU(42): Latency=4 Reg=%vreg27
   val SU(39): Latency=5 Reg=%vreg27
   val SU(37): Latency=5 Reg=%vreg27
   val SU(35): Latency=5 Reg=%vreg27

SU(35):   %vreg28<def> = LW %vreg27, 12; mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3)] GR32Bit:%vreg28,%vreg27
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 2
  Predecessors:
   val SU(34): Latency=5 Reg=%vreg27
  Successors:
   val SU(36): Latency=2 Reg=%vreg28

SU(36):   SW %vreg28, %vreg18, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg28,%vreg18
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 12
  Height             : 0
  Predecessors:
   val SU(35): Latency=2 Reg=%vreg28
   val SU(22): Latency=5 Reg=%vreg18
   ch  SU(23): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(37):   %vreg29<def> = LW %vreg27, 16; mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4)] GR32Bit:%vreg29,%vreg27
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 2
  Predecessors:
   val SU(34): Latency=5 Reg=%vreg27
  Successors:
   val SU(38): Latency=2 Reg=%vreg29

SU(38):   SW %vreg29, %vreg21, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg29,%vreg21
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 12
  Height             : 0
  Predecessors:
   val SU(37): Latency=2 Reg=%vreg29
   val SU(26): Latency=5 Reg=%vreg21
   ch  SU(27): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(39):   %vreg30<def> = FLW %vreg27, 20; mem:LD4[bitcast (i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 5) to float*)] FP32Bit:%vreg30 GR32Bit:%vreg27
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 2
  Predecessors:
   val SU(34): Latency=5 Reg=%vreg27
  Successors:
   val SU(40): Latency=2 Reg=%vreg30

SU(40):   FSW %vreg30, %vreg24, 0; mem:ST4[@nh_fin_de_rampe] FP32Bit:%vreg30 GR32Bit:%vreg24
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 12
  Height             : 0
  Predecessors:
   val SU(39): Latency=2 Reg=%vreg30
   val SU(30): Latency=5 Reg=%vreg24
   ch  SU(31): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(41):   %vreg31<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(42): Latency=5 Reg=%vreg31

SU(42):   SW %vreg27, %vreg31, 0; mem:ST4[%7] GR32Bit:%vreg27,%vreg31
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 9
  Height             : 0
  Predecessors:
   val SU(34): Latency=4 Reg=%vreg27
   val SU(41): Latency=5 Reg=%vreg31
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(24)  ILP: 1 / 1 = 1 Tree: 5 @0
Scheduling %vreg19<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg19
handleMove 400B -> 8B: %vreg19<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg19
     %vreg19:	[400r,432r:0)  0@400r
        -->	[8r,432r:0)  0@8r
  Tree: 9 @5
Pick node SU(25)  ILP: 1 / 1 = 1 Tree: 5 @0
Scheduling %vreg20<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg20
handleMove 416B -> 12B: %vreg20<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg20
     %vreg20:	[416r,432r:0)  0@416r
        -->	[12r,432r:0)  0@12r
     zero:	EMPTY
        -->	EMPTY
Pick node SU(26)  ILP: 3 / 6 = 0.5 Tree: 5 @0
Scheduling %vreg21<def> = ADD %vreg20, %vreg19; GR32Bit:%vreg21,%vreg20,%vreg19

*** Renumbered SlotIndexes 12-28 ***
handleMove 432B -> 20B: %vreg21<def> = ADD %vreg20, %vreg19; GR32Bit:%vreg21,%vreg20,%vreg19
     %vreg21:	[432r,624r:0)  0@432r
        -->	[20r,624r:0)  0@20r
     %vreg20:	[12r,432r:0)  0@12r
        -->	[12r,20r:0)  0@12r
     %vreg19:	[8r,432r:0)  0@8r
        -->	[8r,20r:0)  0@8r
Pick node SU(27)  ILP: 4 / 11 = 0.363636 Tree: 5 @0
Scheduling SW %zero, %vreg21, 0; mem:ST4[%5] GR32Bit:%vreg21
handleMove 448B -> 24B: SW %zero, %vreg21, 0; mem:ST4[%5] GR32Bit:%vreg21
     zero:	EMPTY
        -->	EMPTY
     %vreg21:	[20r,624r:0)  0@20r
        -->	[20r,624r:0)  0@20r
Pick node SU(2)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg2<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg2

*** Renumbered SlotIndexes 24-56 ***
handleMove 56B -> 32B: %vreg2<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg2
     %vreg2:	[56r,64r:0)  0@56r
        -->	[32r,64r:0)  0@32r
     zero:	EMPTY
        -->	EMPTY
Pick node SU(1)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg1<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg1
handleMove 48B -> 36B: %vreg1<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg1
     %vreg1:	[48r,64r:0)  0@48r
        -->	[36r,64r:0)  0@36r
Pick node SU(4)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg4<def> = ADDI %zero, 1058642330; GR32Bit:%vreg4

*** Renumbered SlotIndexes 36-76 ***
handleMove 80B -> 44B: %vreg4<def> = ADDI %zero, 1058642330; GR32Bit:%vreg4
     %vreg4:	[80r,96r:0)  0@80r
        -->	[44r,96r:0)  0@44r
     zero:	EMPTY
        -->	EMPTY
Pick node SU(3)  ILP: 3 / 6 = 0.5 Tree: 1 @0
Scheduling %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
handleMove 76B -> 48B: %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
     %vreg3:	[76r,96r:0)  0@76r
        -->	[48r,96r:0)  0@48r
     %vreg2:	[32r,76r:0)  0@32r
        -->	[32r,48r:0)  0@32r
     %vreg1:	[36r,76r:0)  0@36r
        -->	[36r,48r:0)  0@36r
Pick node SU(5)  ILP: 5 / 11 = 0.454545 Tree: 1 @0
Scheduling SW %vreg4, %vreg3, 0; mem:ST4[%0] GR32Bit:%vreg4,%vreg3

*** Renumbered SlotIndexes 48-104 ***
handleMove 104B -> 56B: SW %vreg4, %vreg3, 0; mem:ST4[%0] GR32Bit:%vreg4,%vreg3
     %vreg4:	[44r,104r:0)  0@44r
        -->	[44r,56r:0)  0@44r
     %vreg3:	[48r,104r:0)  0@48r
        -->	[48r,56r:0)  0@48r
Pick node SU(6)  ILP: 1 / 1 = 1 Tree: 2 @0
Scheduling %vreg5<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg5
handleMove 112B -> 60B: %vreg5<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg5
     %vreg5:	[112r,144r:0)  0@112r
        -->	[60r,144r:0)  0@60r
Pick node SU(7)  ILP: 1 / 1 = 1 Tree: 2 @0
Scheduling %vreg6<def> = ADDI %zero, <ga:@SG_MAX>[TF=3]; GR32Bit:%vreg6

*** Renumbered SlotIndexes 60-124 ***
handleMove 128B -> 68B: %vreg6<def> = ADDI %zero, <ga:@SG_MAX>[TF=3]; GR32Bit:%vreg6
     %vreg6:	[128r,144r:0)  0@128r
        -->	[68r,144r:0)  0@68r
     zero:	EMPTY
        -->	EMPTY
Pick node SU(9)  ILP: 1 / 1 = 1 Tree: 2 @0
Scheduling %vreg8<def> = ADDI %zero, 1063675494; GR32Bit:%vreg8
handleMove 160B -> 72B: %vreg8<def> = ADDI %zero, 1063675494; GR32Bit:%vreg8
     %vreg8:	[160r,176r:0)  0@160r
        -->	[72r,176r:0)  0@72r
     zero:	EMPTY
        -->	EMPTY
Pick node SU(8)  ILP: 3 / 6 = 0.5 Tree: 2 @0
Scheduling %vreg7<def> = ADD %vreg6, %vreg5; GR32Bit:%vreg7,%vreg6,%vreg5

*** Renumbered SlotIndexes 72-152 ***
handleMove 152B -> 80B: %vreg7<def> = ADD %vreg6, %vreg5; GR32Bit:%vreg7,%vreg6,%vreg5
     %vreg7:	[152r,176r:0)  0@152r
        -->	[80r,176r:0)  0@80r
     %vreg6:	[68r,152r:0)  0@68r
        -->	[68r,80r:0)  0@68r
     %vreg5:	[60r,152r:0)  0@60r
        -->	[60r,80r:0)  0@60r
Pick node SU(10)  ILP: 5 / 11 = 0.454545 Tree: 2 @0
Scheduling SW %vreg8, %vreg7, 0; mem:ST4[%1] GR32Bit:%vreg8,%vreg7
handleMove 176B -> 84B: SW %vreg8, %vreg7, 0; mem:ST4[%1] GR32Bit:%vreg8,%vreg7
     %vreg8:	[72r,176r:0)  0@72r
        -->	[72r,84r:0)  0@72r
     %vreg7:	[80r,176r:0)  0@80r
        -->	[80r,84r:0)  0@80r
Pick node SU(28)  ILP: 1 / 1 = 1 Tree: 6 @0
Scheduling %vreg22<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg22

*** Renumbered SlotIndexes 84-172 ***
handleMove 464B -> 92B: %vreg22<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg22
     %vreg22:	[464r,496r:0)  0@464r
        -->	[92r,496r:0)  0@92r
  Tree: 10 @5
Pick node SU(29)  ILP: 1 / 1 = 1 Tree: 6 @0
Scheduling %vreg23<def> = ADDI %zero, <ga:@nh_fin_de_rampe>[TF=3]; GR32Bit:%vreg23
handleMove 480B -> 96B: %vreg23<def> = ADDI %zero, <ga:@nh_fin_de_rampe>[TF=3]; GR32Bit:%vreg23
     %vreg23:	[480r,496r:0)  0@480r
        -->	[96r,496r:0)  0@96r
     zero:	EMPTY
        -->	EMPTY
Pick node SU(30)  ILP: 3 / 6 = 0.5 Tree: 6 @0
Scheduling %vreg24<def> = ADD %vreg23, %vreg22; GR32Bit:%vreg24,%vreg23,%vreg22

*** Renumbered SlotIndexes 96-200 ***
handleMove 496B -> 104B: %vreg24<def> = ADD %vreg23, %vreg22; GR32Bit:%vreg24,%vreg23,%vreg22
     %vreg24:	[496r,656r:0)  0@496r
        -->	[104r,656r:0)  0@104r
     %vreg23:	[96r,496r:0)  0@96r
        -->	[96r,104r:0)  0@96r
     %vreg22:	[92r,496r:0)  0@92r
        -->	[92r,104r:0)  0@92r
Pick node SU(31)  ILP: 4 / 11 = 0.363636 Tree: 6 @0
Scheduling SW %zero, %vreg24, 0; mem:ST4[%6] GR32Bit:%vreg24
handleMove 512B -> 108B: SW %zero, %vreg24, 0; mem:ST4[%6] GR32Bit:%vreg24
     zero:	EMPTY
        -->	EMPTY
     %vreg24:	[104r,656r:0)  0@104r
        -->	[104r,656r:0)  0@104r
Pick node SU(11)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg9<def> = LUI <ga:@NH_STARTER_SHUTOFF>[TF=2]; GR32Bit:%vreg9

*** Renumbered SlotIndexes 108-220 ***
handleMove 212B -> 116B: %vreg9<def> = LUI <ga:@NH_STARTER_SHUTOFF>[TF=2]; GR32Bit:%vreg9
     %vreg9:	[212r,224r:0)  0@212r
        -->	[116r,224r:0)  0@116r
Pick node SU(12)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg10<def> = ADDI %zero, <ga:@NH_STARTER_SHUTOFF>[TF=3]; GR32Bit:%vreg10
handleMove 220B -> 120B: %vreg10<def> = ADDI %zero, <ga:@NH_STARTER_SHUTOFF>[TF=3]; GR32Bit:%vreg10
     %vreg10:	[220r,224r:0)  0@220r
        -->	[120r,224r:0)  0@120r
     zero:	EMPTY
        -->	EMPTY
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg0<def> = ADDI %zero, 17000; GR32Bit:%vreg0
Pick node SU(13)  ILP: 3 / 6 = 0.5 Tree: 0 @0
Scheduling %vreg11<def> = ADD %vreg10, %vreg9; GR32Bit:%vreg11,%vreg10,%vreg9
Pick node SU(14)  ILP: 5 / 11 = 0.454545 Tree: 0 @0
Scheduling SW %vreg0, %vreg11, 0; mem:ST4[%2] GR32Bit:%vreg0,%vreg11
Pick node SU(32)  ILP: 1 / 1 = 1 Tree: 7 @0
Scheduling %vreg25<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg25
handleMove 528B -> 248B: %vreg25<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg25
     %vreg25:	[528r,560r:0)  0@528r
        -->	[248r,560r:0)  0@248r
  Tree: 9 @5
  Tree: 10 @5
  Tree: 11 @5
Pick node SU(33)  ILP: 1 / 1 = 1 Tree: 7 @0
Scheduling %vreg26<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg26
handleMove 544B -> 252B: %vreg26<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg26
     %vreg26:	[544r,560r:0)  0@544r
        -->	[252r,560r:0)  0@252r
     zero:	EMPTY
        -->	EMPTY
Pick node SU(34)  ILP: 3 / 6 = 0.5 Tree: 7 @0
Scheduling %vreg27<def> = ADD %vreg26, %vreg25; GR32Bit:%vreg27,%vreg26,%vreg25

*** Renumbered SlotIndexes 252-268 ***
handleMove 560B -> 260B: %vreg27<def> = ADD %vreg26, %vreg25; GR32Bit:%vreg27,%vreg26,%vreg25
     %vreg27:	[560r,688r:0)  0@560r
        -->	[260r,688r:0)  0@260r
     %vreg26:	[252r,560r:0)  0@252r
        -->	[252r,260r:0)  0@252r
     %vreg25:	[248r,560r:0)  0@248r
        -->	[248r,260r:0)  0@248r
Pick node SU(41)  ILP: 1 / 1 = 1 Tree: 11 @5
Scheduling %vreg31<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg31
handleMove 672B -> 264B: %vreg31<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg31
     %vreg31:	[672r,688r:0)  0@672r
        -->	[264r,688r:0)  0@264r
     t5:	EMPTY
        -->	EMPTY
  Tree: 7 @5
Pick node SU(42)  ILP: 2 / 10 = 0.2 Tree: 11 @5
Scheduling SW %vreg27, %vreg31, 0; mem:ST4[%7] GR32Bit:%vreg27,%vreg31

*** Renumbered SlotIndexes 264-296 ***
handleMove 688B -> 272B: SW %vreg27, %vreg31, 0; mem:ST4[%7] GR32Bit:%vreg27,%vreg31
     %vreg27:	[260r,688r:0)  0@260r
        -->	[260r,640r:0)  0@260r
     %vreg31:	[264r,688r:0)  0@264r
        -->	[264r,272r:0)  0@264r
Pick node SU(37)  ILP: 1 / 11 = 0.0909091 Tree: 9 @5
Scheduling %vreg29<def> = LW %vreg27, 16; mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4)] GR32Bit:%vreg29,%vreg27
handleMove 608B -> 276B: %vreg29<def> = LW %vreg27, 16; mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4)] GR32Bit:%vreg29,%vreg27
     %vreg29:	[608r,624r:0)  0@608r
        -->	[276r,624r:0)  0@276r
     %vreg27:	[260r,640r:0)  0@260r
        -->	[260r,640r:0)  0@260r
  Tree: 7 @5
  Tree: 5 @5
Pick node SU(38)  ILP: 2 / 13 = 0.153846 Tree: 9 @5
Scheduling SW %vreg29, %vreg21, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg29,%vreg21

*** Renumbered SlotIndexes 276-316 ***
handleMove 624B -> 284B: SW %vreg29, %vreg21, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg29,%vreg21
     %vreg29:	[276r,624r:0)  0@276r
        -->	[276r,284r:0)  0@276r
     %vreg21:	[20r,624r:0)  0@20r
        -->	[20r,284r:0)  0@20r
Pick node SU(39)  ILP: 1 / 11 = 0.0909091 Tree: 10 @5
Scheduling %vreg30<def> = FLW %vreg27, 20; mem:LD4[bitcast (i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 5) to float*)] FP32Bit:%vreg30 GR32Bit:%vreg27
handleMove 640B -> 288B: %vreg30<def> = FLW %vreg27, 20; mem:LD4[bitcast (i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 5) to float*)] FP32Bit:%vreg30 GR32Bit:%vreg27
     %vreg30:	[640r,656r:0)  0@640r
        -->	[288r,656r:0)  0@288r
     %vreg27:	[260r,640r:0)  0@260r
        -->	[260r,576r:0)  0@260r
  Tree: 7 @5
  Tree: 6 @5
Pick node SU(40)  ILP: 2 / 13 = 0.153846 Tree: 10 @5
Scheduling FSW %vreg30, %vreg24, 0; mem:ST4[@nh_fin_de_rampe] FP32Bit:%vreg30 GR32Bit:%vreg24

*** Renumbered SlotIndexes 288-344 ***
handleMove 656B -> 296B: FSW %vreg30, %vreg24, 0; mem:ST4[@nh_fin_de_rampe] FP32Bit:%vreg30 GR32Bit:%vreg24
     %vreg30:	[288r,656r:0)  0@288r
        -->	[288r,296r:0)  0@288r
     %vreg24:	[104r,656r:0)  0@104r
        -->	[104r,296r:0)  0@104r
Pick node SU(16)  ILP: 1 / 1 = 1 Tree: 3 @0
Scheduling %vreg13<def> = LUI <ga:@SG_MAX_RPM>[TF=2]; GR32Bit:%vreg13
handleMove 312B -> 300B: %vreg13<def> = LUI <ga:@SG_MAX_RPM>[TF=2]; GR32Bit:%vreg13
     %vreg13:	[312r,328r:0)  0@312r
        -->	[300r,328r:0)  0@300r
Pick node SU(15)  ILP: 1 / 1 = 1 Tree: 3 @0
Scheduling %vreg12<def> = ADDI %zero, 15000; GR32Bit:%vreg12
Pick node SU(17)  ILP: 1 / 1 = 1 Tree: 3 @0
Scheduling %vreg14<def> = ADDI %zero, <ga:@SG_MAX_RPM>[TF=3]; GR32Bit:%vreg14
Pick node SU(18)  ILP: 3 / 6 = 0.5 Tree: 3 @0
Scheduling %vreg15<def> = ADD %vreg14, %vreg13; GR32Bit:%vreg15,%vreg14,%vreg13
Pick node SU(19)  ILP: 5 / 11 = 0.454545 Tree: 3 @0
Scheduling SW %vreg12, %vreg15, 0; mem:ST4[%3] GR32Bit:%vreg12,%vreg15
Pick node SU(20)  ILP: 1 / 1 = 1 Tree: 4 @0
Scheduling %vreg16<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg16
  Tree: 8 @5
Pick node SU(21)  ILP: 1 / 1 = 1 Tree: 4 @0
Scheduling %vreg17<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg17
Pick node SU(22)  ILP: 3 / 6 = 0.5 Tree: 4 @0
Scheduling %vreg18<def> = ADD %vreg17, %vreg16; GR32Bit:%vreg18,%vreg17,%vreg16
Pick node SU(23)  ILP: 4 / 11 = 0.363636 Tree: 4 @0
Scheduling SW %zero, %vreg18, 0; mem:ST4[%4] GR32Bit:%vreg18
Pick node SU(35)  ILP: 4 / 11 = 0.363636 Tree: 8 @5
Scheduling %vreg28<def> = LW %vreg27, 12; mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3)] GR32Bit:%vreg28,%vreg27
  Tree: 4 @5
  Tree: 9 @5
  Tree: 10 @5
  Tree: 11 @5
Pick node SU(36)  ILP: 5 / 13 = 0.384615 Tree: 8 @5
Scheduling SW %vreg28, %vreg18, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg28,%vreg18
*** Final schedule for BB#0 ***
SU(24):   %vreg19<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg19
SU(25):   %vreg20<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg20
SU(26):   %vreg21<def> = ADD %vreg20, %vreg19; GR32Bit:%vreg21,%vreg20,%vreg19
SU(27):   SW %zero, %vreg21, 0; mem:ST4[%5] GR32Bit:%vreg21
SU(2):   %vreg2<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg2
SU(1):   %vreg1<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg1
SU(4):   %vreg4<def> = ADDI %zero, 1058642330; GR32Bit:%vreg4
SU(3):   %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
SU(5):   SW %vreg4, %vreg3, 0; mem:ST4[%0] GR32Bit:%vreg4,%vreg3
SU(6):   %vreg5<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg5
SU(7):   %vreg6<def> = ADDI %zero, <ga:@SG_MAX>[TF=3]; GR32Bit:%vreg6
SU(9):   %vreg8<def> = ADDI %zero, 1063675494; GR32Bit:%vreg8
SU(8):   %vreg7<def> = ADD %vreg6, %vreg5; GR32Bit:%vreg7,%vreg6,%vreg5
SU(10):   SW %vreg8, %vreg7, 0; mem:ST4[%1] GR32Bit:%vreg8,%vreg7
SU(28):   %vreg22<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg22
SU(29):   %vreg23<def> = ADDI %zero, <ga:@nh_fin_de_rampe>[TF=3]; GR32Bit:%vreg23
SU(30):   %vreg24<def> = ADD %vreg23, %vreg22; GR32Bit:%vreg24,%vreg23,%vreg22
SU(31):   SW %zero, %vreg24, 0; mem:ST4[%6] GR32Bit:%vreg24
SU(11):   %vreg9<def> = LUI <ga:@NH_STARTER_SHUTOFF>[TF=2]; GR32Bit:%vreg9
SU(12):   %vreg10<def> = ADDI %zero, <ga:@NH_STARTER_SHUTOFF>[TF=3]; GR32Bit:%vreg10
SU(0):   %vreg0<def> = ADDI %zero, 17000; GR32Bit:%vreg0
SU(13):   %vreg11<def> = ADD %vreg10, %vreg9; GR32Bit:%vreg11,%vreg10,%vreg9
SU(14):   SW %vreg0, %vreg11, 0; mem:ST4[%2] GR32Bit:%vreg0,%vreg11
SU(32):   %vreg25<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg25
SU(33):   %vreg26<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg26
SU(34):   %vreg27<def> = ADD %vreg26, %vreg25; GR32Bit:%vreg27,%vreg26,%vreg25
SU(41):   %vreg31<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg31
SU(42):   SW %vreg27, %vreg31, 0; mem:ST4[%7] GR32Bit:%vreg27,%vreg31
SU(37):   %vreg29<def> = LW %vreg27, 16; mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4)] GR32Bit:%vreg29,%vreg27
SU(38):   SW %vreg29, %vreg21, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg29,%vreg21
SU(39):   %vreg30<def> = FLW %vreg27, 20; mem:LD4[bitcast (i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 5) to float*)] FP32Bit:%vreg30 GR32Bit:%vreg27
SU(40):   FSW %vreg30, %vreg24, 0; mem:ST4[@nh_fin_de_rampe] FP32Bit:%vreg30 GR32Bit:%vreg24
SU(16):   %vreg13<def> = LUI <ga:@SG_MAX_RPM>[TF=2]; GR32Bit:%vreg13
SU(15):   %vreg12<def> = ADDI %zero, 15000; GR32Bit:%vreg12
SU(17):   %vreg14<def> = ADDI %zero, <ga:@SG_MAX_RPM>[TF=3]; GR32Bit:%vreg14
SU(18):   %vreg15<def> = ADD %vreg14, %vreg13; GR32Bit:%vreg15,%vreg14,%vreg13
SU(19):   SW %vreg12, %vreg15, 0; mem:ST4[%3] GR32Bit:%vreg12,%vreg15
SU(20):   %vreg16<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg16
SU(21):   %vreg17<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg17
SU(22):   %vreg18<def> = ADD %vreg17, %vreg16; GR32Bit:%vreg18,%vreg17,%vreg16
SU(23):   SW %zero, %vreg18, 0; mem:ST4[%4] GR32Bit:%vreg18
SU(35):   %vreg28<def> = LW %vreg27, 12; mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3)] GR32Bit:%vreg28,%vreg27
SU(36):   SW %vreg28, %vreg18, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg28,%vreg18


*** Renumbered SlotIndexes 4-492 ***

*** Renumbered SlotIndexes 16-520 ***

*** Renumbered SlotIndexes 28-540 ***

*** Renumbered SlotIndexes 40-568 ***

*** Renumbered SlotIndexes 52-588 ***

*** Renumbered SlotIndexes 64-616 ***

*** Renumbered SlotIndexes 76-636 ***

*** Renumbered SlotIndexes 88-664 ***

*** Renumbered SlotIndexes 100-684 ***

*** Renumbered SlotIndexes 112-712 ***

*** Renumbered SlotIndexes 124-724 ***

*** Renumbered SlotIndexes 136-736 ***

*** Renumbered SlotIndexes 148-748 ***

*** Renumbered SlotIndexes 160-760 ***

*** Renumbered SlotIndexes 172-772 ***

*** Renumbered SlotIndexes 184-784 ***

*** Renumbered SlotIndexes 196-796 ***

*** Renumbered SlotIndexes 208-808 ***

*** Renumbered SlotIndexes 220-820 ***

*** Renumbered SlotIndexes 232-832 ***

*** Renumbered SlotIndexes 244-844 ***

*** Renumbered SlotIndexes 256-856 ***

*** Renumbered SlotIndexes 268-868 ***

*** Renumbered SlotIndexes 280-880 ***

*** Renumbered SlotIndexes 292-892 ***

*** Renumbered SlotIndexes 304-904 ***

*** Renumbered SlotIndexes 316-916 ***

*** Renumbered SlotIndexes 328-928 ***

*** Renumbered SlotIndexes 340-940 ***

*** Renumbered SlotIndexes 352-952 ***

*** Renumbered SlotIndexes 364-964 ***

*** Renumbered SlotIndexes 376-976 ***

*** Renumbered SlotIndexes 388-988 ***

*** Renumbered SlotIndexes 400-1000 ***
Partitioning instructions of the region into multiple CEs
instr:  %vreg19<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg19
instr:  %vreg20<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg20
instr:  %vreg21<def> = ADD %vreg20, %vreg19; GR32Bit:%vreg21,%vreg20,%vreg19
instr:  SW %zero, %vreg21, 0; mem:ST4[%5] GR32Bit:%vreg21
instr:  %vreg2<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg2
instr:  %vreg1<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg1
instr:  %vreg4<def> = ADDI %zero, 1058642330; GR32Bit:%vreg4
instr:  %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
instr:  SW %vreg4, %vreg3, 0; mem:ST4[%0] GR32Bit:%vreg4,%vreg3
instr:  %vreg5<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg5
instr:  %vreg6<def> = ADDI %zero, <ga:@SG_MAX>[TF=3]; GR32Bit:%vreg6
instr:  %vreg8<def> = ADDI %zero, 1063675494; GR32Bit:%vreg8
instr:  %vreg7<def> = ADD %vreg6, %vreg5; GR32Bit:%vreg7,%vreg6,%vreg5
instr:  SW %vreg8, %vreg7, 0; mem:ST4[%1] GR32Bit:%vreg8,%vreg7
instr:  %vreg22<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg22
instr:  %vreg23<def> = ADDI %zero, <ga:@nh_fin_de_rampe>[TF=3]; GR32Bit:%vreg23
instr:  %vreg24<def> = ADD %vreg23, %vreg22; GR32Bit:%vreg24,%vreg23,%vreg22
instr:  SW %zero, %vreg24, 0; mem:ST4[%6] GR32Bit:%vreg24
instr:  %vreg9<def> = LUI <ga:@NH_STARTER_SHUTOFF>[TF=2]; GR32Bit:%vreg9
instr:  %vreg10<def> = ADDI %zero, <ga:@NH_STARTER_SHUTOFF>[TF=3]; GR32Bit:%vreg10
instr:  %vreg0<def> = ADDI %zero, 17000; GR32Bit:%vreg0
instr:  %vreg11<def> = ADD %vreg10, %vreg9; GR32Bit:%vreg11,%vreg10,%vreg9
instr:  SW %vreg0, %vreg11, 0; mem:ST4[%2] GR32Bit:%vreg0,%vreg11
instr:  %vreg25<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg25
instr:  %vreg26<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg26
instr:  %vreg27<def> = ADD %vreg26, %vreg25; GR32Bit:%vreg27,%vreg26,%vreg25
instr:  %vreg31<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg31
instr:  SW %vreg27, %vreg31, 0; mem:ST4[%7] GR32Bit:%vreg27,%vreg31
instr:  %vreg29<def> = LW %vreg27, 16; mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4)] GR32Bit:%vreg29,%vreg27
instr:  SW %vreg29, %vreg21, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg29,%vreg21
instr:  %vreg30<def> = FLW %vreg27, 20; mem:LD4[bitcast (i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 5) to float*)] FP32Bit:%vreg30 GR32Bit:%vreg27
instr:  FSW %vreg30, %vreg24, 0; mem:ST4[@nh_fin_de_rampe] FP32Bit:%vreg30 GR32Bit:%vreg24
instr:  %vreg13<def> = LUI <ga:@SG_MAX_RPM>[TF=2]; GR32Bit:%vreg13
instr:  %vreg12<def> = ADDI %zero, 15000; GR32Bit:%vreg12
instr:  %vreg14<def> = ADDI %zero, <ga:@SG_MAX_RPM>[TF=3]; GR32Bit:%vreg14
instr:  %vreg15<def> = ADD %vreg14, %vreg13; GR32Bit:%vreg15,%vreg14,%vreg13
instr:  SW %vreg12, %vreg15, 0; mem:ST4[%3] GR32Bit:%vreg12,%vreg15
instr:  %vreg16<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg16
instr:  %vreg17<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg17
instr:  %vreg18<def> = ADD %vreg17, %vreg16; GR32Bit:%vreg18,%vreg17,%vreg16
instr:  SW %zero, %vreg18, 0; mem:ST4[%4] GR32Bit:%vreg18
instr:  %vreg28<def> = LW %vreg27, 12; mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3)] GR32Bit:%vreg28,%vreg27
instr:  SW %vreg28, %vreg18, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg28,%vreg18
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
before falloc, state of bb0:BB#0: derived from LLVM BB %redefine_start1.return
	%vreg32<def> = ADD %t5, %zero; GR32Bit:%vreg32
	%vreg34<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg34
	%vreg35<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg35
	%vreg36<def> = SRLI %vreg35, 12; GR32Bit:%vreg36,%vreg35
	%vreg37<def> = ADD %vreg34, %vreg36; GR32Bit:%vreg37,%vreg34,%vreg36
	%vreg38<def> = ADDI %zero, 28; GR32Bit:%vreg38
	%vreg39<def> = SRLI %t5, 22; GR32Bit:%vreg39
	%vreg40<def> = SRLI %t5, 12; GR32Bit:%vreg40
	%vreg41<def> = ANDI %vreg40, 15; GR32Bit:%vreg41,%vreg40
	%vreg42<def> = SRLI %t5, 6; GR32Bit:%vreg42
	%vreg43<def> = ANDI %vreg42, 63; GR32Bit:%vreg43,%vreg42
	%vreg44<def> = ADDI %zero, 832; GR32Bit:%vreg44
	%vreg45<def> = MUL %vreg39, %vreg44; GR32Bit:%vreg45,%vreg39,%vreg44
	%vreg46<def> = ADDI %zero, 52; GR32Bit:%vreg46
	%vreg47<def> = MUL %vreg41, %vreg46; GR32Bit:%vreg47,%vreg41,%vreg46
	%vreg48<def> = ADD %vreg47, %vreg43; GR32Bit:%vreg48,%vreg47,%vreg43
	%vreg49<def> = ADD %vreg48, %vreg45; GR32Bit:%vreg49,%vreg48,%vreg45
	%vreg50<def> = MUL %vreg49, %vreg38; GR32Bit:%vreg50,%vreg49,%vreg38
	%vreg33<def> = ADD %vreg37, %vreg50; GR32Bit:%vreg33,%vreg37,%vreg50
	%vreg19<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg19
	%vreg20<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg20
	%vreg21<def> = ADD %vreg20, %vreg19; GR32Bit:%vreg21,%vreg20,%vreg19
	SW %zero, %vreg21, 0; mem:ST4[%5] GR32Bit:%vreg21
	%vreg2<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg2
	%vreg1<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg1
	%vreg4<def> = ADDI %zero, 1058642330; GR32Bit:%vreg4
	%vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
	SW %vreg4, %vreg3, 0; mem:ST4[%0] GR32Bit:%vreg4,%vreg3
	%vreg5<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg5
	%vreg6<def> = ADDI %zero, <ga:@SG_MAX>[TF=3]; GR32Bit:%vreg6
	%vreg8<def> = ADDI %zero, 1063675494; GR32Bit:%vreg8
	%vreg7<def> = ADD %vreg6, %vreg5; GR32Bit:%vreg7,%vreg6,%vreg5
	SW %vreg8, %vreg7, 0; mem:ST4[%1] GR32Bit:%vreg8,%vreg7
	%vreg22<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg22
	%vreg23<def> = ADDI %zero, <ga:@nh_fin_de_rampe>[TF=3]; GR32Bit:%vreg23
	%vreg24<def> = ADD %vreg23, %vreg22; GR32Bit:%vreg24,%vreg23,%vreg22
	SW %zero, %vreg24, 0; mem:ST4[%6] GR32Bit:%vreg24
	%vreg9<def> = LUI <ga:@NH_STARTER_SHUTOFF>[TF=2]; GR32Bit:%vreg9
	%vreg10<def> = ADDI %zero, <ga:@NH_STARTER_SHUTOFF>[TF=3]; GR32Bit:%vreg10
	%vreg0<def> = ADDI %zero, 17000; GR32Bit:%vreg0
	%vreg11<def> = ADD %vreg10, %vreg9; GR32Bit:%vreg11,%vreg10,%vreg9
	SW %vreg0, %vreg11, 0; mem:ST4[%2] GR32Bit:%vreg0,%vreg11
	%vreg25<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg25
	%vreg26<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg26
	%vreg27<def> = ADD %vreg26, %vreg25; GR32Bit:%vreg27,%vreg26,%vreg25
	%vreg31<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg31
	SW %vreg27, %vreg31, 0; mem:ST4[%7] GR32Bit:%vreg27,%vreg31
	%vreg29<def> = LW %vreg27, 16; mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4)] GR32Bit:%vreg29,%vreg27
	SW %vreg29, %vreg21, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg29,%vreg21
	%vreg30<def> = FLW %vreg27, 20; mem:LD4[bitcast (i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 5) to float*)] FP32Bit:%vreg30 GR32Bit:%vreg27
	FSW %vreg30, %vreg24, 0; mem:ST4[@nh_fin_de_rampe] FP32Bit:%vreg30 GR32Bit:%vreg24
	%vreg13<def> = LUI <ga:@SG_MAX_RPM>[TF=2]; GR32Bit:%vreg13
	%vreg12<def> = ADDI %zero, 15000; GR32Bit:%vreg12
	%vreg14<def> = ADDI %zero, <ga:@SG_MAX_RPM>[TF=3]; GR32Bit:%vreg14
	%vreg15<def> = ADD %vreg14, %vreg13; GR32Bit:%vreg15,%vreg14,%vreg13
	SW %vreg12, %vreg15, 0; mem:ST4[%3] GR32Bit:%vreg12,%vreg15
	%vreg16<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg16
	%vreg17<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg17
	%vreg18<def> = ADD %vreg17, %vreg16; GR32Bit:%vreg18,%vreg17,%vreg16
	SW %zero, %vreg18, 0; mem:ST4[%4] GR32Bit:%vreg18
	%vreg28<def> = LW %vreg27, 12; mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3)] GR32Bit:%vreg28,%vreg27
	SW %vreg28, %vreg18, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg28,%vreg18
	%vreg51<def> = ADD %t5, %zero; GR32Bit:%vreg51
	%vreg53<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg53
	%vreg54<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg54
	%vreg55<def> = SRLI %vreg54, 12; GR32Bit:%vreg55,%vreg54
	%vreg56<def> = ADD %vreg53, %vreg55; GR32Bit:%vreg56,%vreg53,%vreg55
	%vreg57<def> = ADDI %zero, 28; GR32Bit:%vreg57
	%vreg58<def> = SRLI %t5, 22; GR32Bit:%vreg58
	%vreg59<def> = SRLI %t5, 12; GR32Bit:%vreg59
	%vreg60<def> = ANDI %vreg59, 15; GR32Bit:%vreg60,%vreg59
	%vreg61<def> = SRLI %t5, 6; GR32Bit:%vreg61
	%vreg62<def> = ANDI %vreg61, 63; GR32Bit:%vreg62,%vreg61
	%vreg63<def> = ADDI %zero, 832; GR32Bit:%vreg63
	%vreg64<def> = MUL %vreg58, %vreg63; GR32Bit:%vreg64,%vreg58,%vreg63
	%vreg65<def> = ADDI %zero, 52; GR32Bit:%vreg65
	%vreg66<def> = MUL %vreg60, %vreg65; GR32Bit:%vreg66,%vreg60,%vreg65
	%vreg67<def> = ADD %vreg66, %vreg62; GR32Bit:%vreg67,%vreg66,%vreg62
	%vreg68<def> = ADD %vreg67, %vreg64; GR32Bit:%vreg68,%vreg67,%vreg64
	%vreg69<def> = MUL %vreg68, %vreg57; GR32Bit:%vreg69,%vreg68,%vreg57
	%vreg52<def> = ADD %vreg56, %vreg69; GR32Bit:%vreg52,%vreg56,%vreg69
	%vreg70<def> = ADD %t5, %zero; GR32Bit:%vreg70
	%vreg72<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg72
	%vreg73<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg73
	%vreg74<def> = SRLI %vreg73, 12; GR32Bit:%vreg74,%vreg73
	%vreg75<def> = ADD %vreg72, %vreg74; GR32Bit:%vreg75,%vreg72,%vreg74
	%vreg76<def> = ADDI %zero, 28; GR32Bit:%vreg76
	%vreg77<def> = SRLI %t5, 22; GR32Bit:%vreg77
	%vreg78<def> = SRLI %t5, 12; GR32Bit:%vreg78
	%vreg79<def> = ANDI %vreg78, 15; GR32Bit:%vreg79,%vreg78
	%vreg80<def> = SRLI %t5, 6; GR32Bit:%vreg80
	%vreg81<def> = ANDI %vreg80, 63; GR32Bit:%vreg81,%vreg80
	%vreg82<def> = ADDI %zero, 832; GR32Bit:%vreg82
	%vreg83<def> = MUL %vreg77, %vreg82; GR32Bit:%vreg83,%vreg77,%vreg82
	%vreg84<def> = ADDI %zero, 52; GR32Bit:%vreg84
	%vreg85<def> = MUL %vreg79, %vreg84; GR32Bit:%vreg85,%vreg79,%vreg84
	%vreg86<def> = ADD %vreg85, %vreg81; GR32Bit:%vreg86,%vreg85,%vreg81
	%vreg87<def> = ADD %vreg86, %vreg83; GR32Bit:%vreg87,%vreg86,%vreg83
	%vreg88<def> = MUL %vreg87, %vreg76; GR32Bit:%vreg88,%vreg87,%vreg76
	%vreg71<def> = ADD %vreg75, %vreg88; GR32Bit:%vreg71,%vreg75,%vreg88
	%vreg89<def> = ADD %t5, %zero; GR32Bit:%vreg89
	%vreg91<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg91
	%vreg92<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg92
	%vreg93<def> = SRLI %vreg92, 12; GR32Bit:%vreg93,%vreg92
	%vreg94<def> = ADD %vreg91, %vreg93; GR32Bit:%vreg94,%vreg91,%vreg93
	%vreg95<def> = ADDI %zero, 28; GR32Bit:%vreg95
	%vreg96<def> = SRLI %t5, 22; GR32Bit:%vreg96
	%vreg97<def> = SRLI %t5, 12; GR32Bit:%vreg97
	%vreg98<def> = ANDI %vreg97, 15; GR32Bit:%vreg98,%vreg97
	%vreg99<def> = SRLI %t5, 6; GR32Bit:%vreg99
	%vreg100<def> = ANDI %vreg99, 63; GR32Bit:%vreg100,%vreg99
	%vreg101<def> = ADDI %zero, 832; GR32Bit:%vreg101
	%vreg102<def> = MUL %vreg96, %vreg101; GR32Bit:%vreg102,%vreg96,%vreg101
	%vreg103<def> = ADDI %zero, 52; GR32Bit:%vreg103
	%vreg104<def> = MUL %vreg98, %vreg103; GR32Bit:%vreg104,%vreg98,%vreg103
	%vreg105<def> = ADD %vreg104, %vreg100; GR32Bit:%vreg105,%vreg104,%vreg100
	%vreg106<def> = ADD %vreg105, %vreg102; GR32Bit:%vreg106,%vreg105,%vreg102
	%vreg107<def> = MUL %vreg106, %vreg95; GR32Bit:%vreg107,%vreg106,%vreg95
	%vreg90<def> = ADD %vreg94, %vreg107; GR32Bit:%vreg90,%vreg94,%vreg107
Adding all fallocs first to avoid stalls due to sequential fallocs and fbinds
Adding writecm(for writing sync count to context frames) and fbind instructions
live end of child is itself
live end of child is itself
Adding localref sw instructions to hyperOp redefine_start1

*** Renumbered SlotIndexes 412-1012 ***

*** Renumbered SlotIndexes 424-1024 ***

*** Renumbered SlotIndexes 436-1036 ***

*** Renumbered SlotIndexes 448-1048 ***

*** Renumbered SlotIndexes 460-1060 ***

*** Renumbered SlotIndexes 472-1072 ***

*** Renumbered SlotIndexes 484-1084 ***

*** Renumbered SlotIndexes 496-1096 ***

*** Renumbered SlotIndexes 508-1108 ***
localref sw to startup_starter3:  SW %vreg128, %vreg127, 24; GR32Bit:%vreg128,%vreg127
Adding writecm instructions to hyperOp redefine_start1
Adding writecmp and sync instructions
problem with which child exactly?startup_starter3 with edge of type:6

*** Renumbered SlotIndexes 520-1120 ***

*** Renumbered SlotIndexes 532-1132 ***

*** Renumbered SlotIndexes 544-1144 ***
Adding endHyperOp instructions to each pHyperOp

*** Renumbered SlotIndexes 556-1156 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 568-1168 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 580-1180 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 592-1192 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 604-1204 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 616-1216 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0
After Shuffling regions of basic block, state of BB#0:
BB#0: derived from LLVM BB %redefine_start1.return
	%vreg32<def> = ADD %t5, %zero; GR32Bit:%vreg32
	%vreg34<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg34
	%vreg35<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg35
	%vreg36<def> = SRLI %vreg35, 12; GR32Bit:%vreg36,%vreg35
	%vreg37<def> = ADD %vreg34, %vreg36; GR32Bit:%vreg37,%vreg34,%vreg36
	%vreg38<def> = ADDI %zero, 28; GR32Bit:%vreg38
	%vreg39<def> = SRLI %t5, 22; GR32Bit:%vreg39
	%vreg40<def> = SRLI %t5, 12; GR32Bit:%vreg40
	%vreg41<def> = ANDI %vreg40, 15; GR32Bit:%vreg41,%vreg40
	%vreg42<def> = SRLI %t5, 6; GR32Bit:%vreg42
	%vreg43<def> = ANDI %vreg42, 63; GR32Bit:%vreg43,%vreg42
	%vreg44<def> = ADDI %zero, 832; GR32Bit:%vreg44
	%vreg45<def> = MUL %vreg39, %vreg44; GR32Bit:%vreg45,%vreg39,%vreg44
	%vreg46<def> = ADDI %zero, 52; GR32Bit:%vreg46
	%vreg47<def> = MUL %vreg41, %vreg46; GR32Bit:%vreg47,%vreg41,%vreg46
	%vreg48<def> = ADD %vreg47, %vreg43; GR32Bit:%vreg48,%vreg47,%vreg43
	%vreg49<def> = ADD %vreg48, %vreg45; GR32Bit:%vreg49,%vreg48,%vreg45
	%vreg50<def> = MUL %vreg49, %vreg38; GR32Bit:%vreg50,%vreg49,%vreg38
	%vreg33<def> = ADD %vreg37, %vreg50; GR32Bit:%vreg33,%vreg37,%vreg50
	%vreg19<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg19
	%vreg20<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg20
	%vreg21<def> = ADD %vreg20, %vreg19; GR32Bit:%vreg21,%vreg20,%vreg19
	SW %zero, %vreg21, 0; mem:ST4[%5] GR32Bit:%vreg21
	%vreg2<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg2
	%vreg1<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg1
	%vreg4<def> = ADDI %zero, 1058642330; GR32Bit:%vreg4
	%vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
	SW %vreg4, %vreg3, 0; mem:ST4[%0] GR32Bit:%vreg4,%vreg3
	%vreg5<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg5
	%vreg6<def> = ADDI %zero, <ga:@SG_MAX>[TF=3]; GR32Bit:%vreg6
	%vreg8<def> = ADDI %zero, 1063675494; GR32Bit:%vreg8
	%vreg7<def> = ADD %vreg6, %vreg5; GR32Bit:%vreg7,%vreg6,%vreg5
	SW %vreg8, %vreg7, 0; mem:ST4[%1] GR32Bit:%vreg8,%vreg7
	%vreg22<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg22
	%vreg23<def> = ADDI %zero, <ga:@nh_fin_de_rampe>[TF=3]; GR32Bit:%vreg23
	%vreg24<def> = ADD %vreg23, %vreg22; GR32Bit:%vreg24,%vreg23,%vreg22
	SW %zero, %vreg24, 0; mem:ST4[%6] GR32Bit:%vreg24
	%vreg9<def> = LUI <ga:@NH_STARTER_SHUTOFF>[TF=2]; GR32Bit:%vreg9
	%vreg10<def> = ADDI %zero, <ga:@NH_STARTER_SHUTOFF>[TF=3]; GR32Bit:%vreg10
	%vreg0<def> = ADDI %zero, 17000; GR32Bit:%vreg0
	%vreg11<def> = ADD %vreg10, %vreg9; GR32Bit:%vreg11,%vreg10,%vreg9
	SW %vreg0, %vreg11, 0; mem:ST4[%2] GR32Bit:%vreg0,%vreg11
	%vreg25<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg25
	%vreg26<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg26
	%vreg27<def> = ADD %vreg26, %vreg25; GR32Bit:%vreg27,%vreg26,%vreg25
	%vreg31<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg31
	SW %vreg27, %vreg31, 0; mem:ST4[%7] GR32Bit:%vreg27,%vreg31
	%vreg29<def> = LW %vreg27, 16; mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4)] GR32Bit:%vreg29,%vreg27
	SW %vreg29, %vreg21, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg29,%vreg21
	%vreg30<def> = FLW %vreg27, 20; mem:LD4[bitcast (i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 5) to float*)] FP32Bit:%vreg30 GR32Bit:%vreg27
	FSW %vreg30, %vreg24, 0; mem:ST4[@nh_fin_de_rampe] FP32Bit:%vreg30 GR32Bit:%vreg24
	%vreg13<def> = LUI <ga:@SG_MAX_RPM>[TF=2]; GR32Bit:%vreg13
	%vreg12<def> = ADDI %zero, 15000; GR32Bit:%vreg12
	%vreg14<def> = ADDI %zero, <ga:@SG_MAX_RPM>[TF=3]; GR32Bit:%vreg14
	%vreg15<def> = ADD %vreg14, %vreg13; GR32Bit:%vreg15,%vreg14,%vreg13
	SW %vreg12, %vreg15, 0; mem:ST4[%3] GR32Bit:%vreg12,%vreg15
	%vreg16<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg16
	%vreg17<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg17
	%vreg18<def> = ADD %vreg17, %vreg16; GR32Bit:%vreg18,%vreg17,%vreg16
	SW %zero, %vreg18, 0; mem:ST4[%4] GR32Bit:%vreg18
	%vreg28<def> = LW %vreg27, 12; mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3)] GR32Bit:%vreg28,%vreg27
	SW %vreg28, %vreg18, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg28,%vreg18
	%vreg108<def> = ADDI %zero, 64; GR32Bit:%vreg108
	%vreg109<def> = ADDI %zero, 1; GR32Bit:%vreg109
	WRITECM %vreg108, %vreg109, 60; GR32Bit:%vreg108,%vreg109
	%vreg110<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg110
	%vreg111<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg111
	%vreg112<def> = SRLI %vreg111, 12; GR32Bit:%vreg112,%vreg111
	%vreg113<def> = ADD %vreg110, %vreg112; GR32Bit:%vreg113,%vreg110,%vreg112
	%vreg114<def> = ADDI %zero, 28; GR32Bit:%vreg114
	%vreg115<def> = SRLI %vreg108, 22; GR32Bit:%vreg115,%vreg108
	%vreg116<def> = SRLI %vreg108, 12; GR32Bit:%vreg116,%vreg108
	%vreg117<def> = ANDI %vreg116, 15; GR32Bit:%vreg117,%vreg116
	%vreg118<def> = SRLI %vreg108, 6; GR32Bit:%vreg118,%vreg108
	%vreg119<def> = ANDI %vreg118, 63; GR32Bit:%vreg119,%vreg118
	%vreg120<def> = ADDI %zero, 832; GR32Bit:%vreg120
	%vreg121<def> = MUL %vreg115, %vreg120; GR32Bit:%vreg121,%vreg115,%vreg120
	%vreg122<def> = ADDI %zero, 52; GR32Bit:%vreg122
	%vreg123<def> = MUL %vreg117, %vreg122; GR32Bit:%vreg123,%vreg117,%vreg122
	%vreg124<def> = ADD %vreg123, %vreg119; GR32Bit:%vreg124,%vreg123,%vreg119
	%vreg125<def> = ADD %vreg124, %vreg121; GR32Bit:%vreg125,%vreg124,%vreg121
	%vreg126<def> = MUL %vreg125, %vreg114; GR32Bit:%vreg126,%vreg125,%vreg114
	%vreg127<def> = ADD %vreg126, %vreg113; GR32Bit:%vreg127,%vreg126,%vreg113
	%vreg128<def> = LW %t5, 0; GR32Bit:%vreg128
	SW %vreg128, %vreg127, 24; GR32Bit:%vreg128,%vreg127
	%vreg129<def> = LUI 1; GR32Bit:%vreg129
	WRITEPM %vreg129, %vreg108, 0; GR32Bit:%vreg129,%vreg108
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg51<def> = ADD %t5, %zero; GR32Bit:%vreg51
	%vreg53<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg53
	%vreg54<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg54
	%vreg55<def> = SRLI %vreg54, 12; GR32Bit:%vreg55,%vreg54
	%vreg56<def> = ADD %vreg53, %vreg55; GR32Bit:%vreg56,%vreg53,%vreg55
	%vreg57<def> = ADDI %zero, 28; GR32Bit:%vreg57
	%vreg58<def> = SRLI %t5, 22; GR32Bit:%vreg58
	%vreg59<def> = SRLI %t5, 12; GR32Bit:%vreg59
	%vreg60<def> = ANDI %vreg59, 15; GR32Bit:%vreg60,%vreg59
	%vreg61<def> = SRLI %t5, 6; GR32Bit:%vreg61
	%vreg62<def> = ANDI %vreg61, 63; GR32Bit:%vreg62,%vreg61
	%vreg63<def> = ADDI %zero, 832; GR32Bit:%vreg63
	%vreg64<def> = MUL %vreg58, %vreg63; GR32Bit:%vreg64,%vreg58,%vreg63
	%vreg65<def> = ADDI %zero, 52; GR32Bit:%vreg65
	%vreg66<def> = MUL %vreg60, %vreg65; GR32Bit:%vreg66,%vreg60,%vreg65
	%vreg67<def> = ADD %vreg66, %vreg62; GR32Bit:%vreg67,%vreg66,%vreg62
	%vreg68<def> = ADD %vreg67, %vreg64; GR32Bit:%vreg68,%vreg67,%vreg64
	%vreg69<def> = MUL %vreg68, %vreg57; GR32Bit:%vreg69,%vreg68,%vreg57
	%vreg52<def> = ADD %vreg56, %vreg69; GR32Bit:%vreg52,%vreg56,%vreg69
	%vreg130<def> = LUI 1; GR32Bit:%vreg130
	%vreg131<def> = DREADPM %vreg130, 0; GR32Bit:%vreg131,%vreg130
	%vreg132<def> = ADDI %zero, -1; GR32Bit:%vreg132
	SYNC %vreg131, %vreg132, 60; GR32Bit:%vreg131,%vreg132
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg70<def> = ADD %t5, %zero; GR32Bit:%vreg70
	%vreg72<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg72
	%vreg73<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg73
	%vreg74<def> = SRLI %vreg73, 12; GR32Bit:%vreg74,%vreg73
	%vreg75<def> = ADD %vreg72, %vreg74; GR32Bit:%vreg75,%vreg72,%vreg74
	%vreg76<def> = ADDI %zero, 28; GR32Bit:%vreg76
	%vreg77<def> = SRLI %t5, 22; GR32Bit:%vreg77
	%vreg78<def> = SRLI %t5, 12; GR32Bit:%vreg78
	%vreg79<def> = ANDI %vreg78, 15; GR32Bit:%vreg79,%vreg78
	%vreg80<def> = SRLI %t5, 6; GR32Bit:%vreg80
	%vreg81<def> = ANDI %vreg80, 63; GR32Bit:%vreg81,%vreg80
	%vreg82<def> = ADDI %zero, 832; GR32Bit:%vreg82
	%vreg83<def> = MUL %vreg77, %vreg82; GR32Bit:%vreg83,%vreg77,%vreg82
	%vreg84<def> = ADDI %zero, 52; GR32Bit:%vreg84
	%vreg85<def> = MUL %vreg79, %vreg84; GR32Bit:%vreg85,%vreg79,%vreg84
	%vreg86<def> = ADD %vreg85, %vreg81; GR32Bit:%vreg86,%vreg85,%vreg81
	%vreg87<def> = ADD %vreg86, %vreg83; GR32Bit:%vreg87,%vreg86,%vreg83
	%vreg88<def> = MUL %vreg87, %vreg76; GR32Bit:%vreg88,%vreg87,%vreg76
	%vreg71<def> = ADD %vreg75, %vreg88; GR32Bit:%vreg71,%vreg75,%vreg88
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg89<def> = ADD %t5, %zero; GR32Bit:%vreg89
	%vreg91<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg91
	%vreg92<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg92
	%vreg93<def> = SRLI %vreg92, 12; GR32Bit:%vreg93,%vreg92
	%vreg94<def> = ADD %vreg91, %vreg93; GR32Bit:%vreg94,%vreg91,%vreg93
	%vreg95<def> = ADDI %zero, 28; GR32Bit:%vreg95
	%vreg96<def> = SRLI %t5, 22; GR32Bit:%vreg96
	%vreg97<def> = SRLI %t5, 12; GR32Bit:%vreg97
	%vreg98<def> = ANDI %vreg97, 15; GR32Bit:%vreg98,%vreg97
	%vreg99<def> = SRLI %t5, 6; GR32Bit:%vreg99
	%vreg100<def> = ANDI %vreg99, 63; GR32Bit:%vreg100,%vreg99
	%vreg101<def> = ADDI %zero, 832; GR32Bit:%vreg101
	%vreg102<def> = MUL %vreg96, %vreg101; GR32Bit:%vreg102,%vreg96,%vreg101
	%vreg103<def> = ADDI %zero, 52; GR32Bit:%vreg103
	%vreg104<def> = MUL %vreg98, %vreg103; GR32Bit:%vreg104,%vreg98,%vreg103
	%vreg105<def> = ADD %vreg104, %vreg100; GR32Bit:%vreg105,%vreg104,%vreg100
	%vreg106<def> = ADD %vreg105, %vreg102; GR32Bit:%vreg106,%vreg105,%vreg102
	%vreg107<def> = MUL %vreg106, %vreg95; GR32Bit:%vreg107,%vreg106,%vreg95
	%vreg90<def> = ADD %vreg94, %vreg107; GR32Bit:%vreg90,%vreg94,%vreg107
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 316-1340 ***

*** Renumbered SlotIndexes 304-1360 ***

*** Renumbered SlotIndexes 216-1408 ***

*** Renumbered SlotIndexes 204-1428 ***

*** Renumbered SlotIndexes 204-1444 ***

*** Renumbered SlotIndexes 204-1460 ***

*** Renumbered SlotIndexes 204-1476 ***

*** Renumbered SlotIndexes 112-1520 ***

*** Renumbered SlotIndexes 100-1540 ***

*** Renumbered SlotIndexes 100-1556 ***

*** Renumbered SlotIndexes 100-1572 ***

*** Renumbered SlotIndexes 100-1588 ***

*** Renumbered SlotIndexes 100-1604 ***

*** Renumbered SlotIndexes 100-1620 ***

*** Renumbered SlotIndexes 100-1636 ***

*** Renumbered SlotIndexes 100-1652 ***

*** Renumbered SlotIndexes 100-1668 ***

*** Renumbered SlotIndexes 100-1684 ***

*** Renumbered SlotIndexes 100-1700 ***

*** Renumbered SlotIndexes 100-1716 ***

*** Renumbered SlotIndexes 100-1732 ***

*** Renumbered SlotIndexes 100-1748 ***

*** Renumbered SlotIndexes 100-1764 ***

*** Renumbered SlotIndexes 100-1780 ***

*** Renumbered SlotIndexes 100-1796 ***

*** Renumbered SlotIndexes 100-1812 ***

*** Renumbered SlotIndexes 100-1828 ***

*** Renumbered SlotIndexes 100-1844 ***

*** Renumbered SlotIndexes 100-1860 ***

*** Renumbered SlotIndexes 100-1876 ***

*** Renumbered SlotIndexes 100-1892 ***

*** Renumbered SlotIndexes 100-1908 ***

*** Renumbered SlotIndexes 100-1924 ***

*** Renumbered SlotIndexes 100-1940 ***

*** Renumbered SlotIndexes 100-1956 ***

*** Renumbered SlotIndexes 100-1972 ***

*** Renumbered SlotIndexes 100-1988 ***

*** Renumbered SlotIndexes 100-2004 ***

*** Renumbered SlotIndexes 100-2020 ***

*** Renumbered SlotIndexes 100-2036 ***

*** Renumbered SlotIndexes 100-2052 ***

*** Renumbered SlotIndexes 100-2068 ***

*** Renumbered SlotIndexes 100-2084 ***

*** Renumbered SlotIndexes 12-2132 ***
Creating pHyperOp bundles for CEs for bb0
  %vreg51<def> = ADD %t5, %zero; GR32Bit:%vreg51
starting at   %vreg32<def> = ADD %t5, %zero; GR32Bit:%vreg32
  %vreg70<def> = ADD %t5, %zero; GR32Bit:%vreg70
starting at   %vreg51<def> = ADD %t5, %zero; GR32Bit:%vreg51
  %vreg89<def> = ADD %t5, %zero; GR32Bit:%vreg89
starting at   %vreg70<def> = ADD %t5, %zero; GR32Bit:%vreg70
starting at   %vreg89<def> = ADD %t5, %zero; GR32Bit:%vreg89
After bundling, state of BB0:BB#0: derived from LLVM BB %redefine_start1.return
	%vreg32<def> = ADD %t5, %zero; GR32Bit:%vreg32
	  * %vreg34<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg34
	  * %vreg35<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg35
	  * %vreg36<def> = SRLI %vreg35, 12; GR32Bit:%vreg36,%vreg35
	  * %vreg37<def> = ADD %vreg34, %vreg36; GR32Bit:%vreg37,%vreg34,%vreg36
	  * %vreg38<def> = ADDI %zero, 28; GR32Bit:%vreg38
	  * %vreg39<def> = SRLI %t5, 22; GR32Bit:%vreg39
	  * %vreg40<def> = SRLI %t5, 12; GR32Bit:%vreg40
	  * %vreg41<def> = ANDI %vreg40, 15; GR32Bit:%vreg41,%vreg40
	  * %vreg42<def> = SRLI %t5, 6; GR32Bit:%vreg42
	  * %vreg43<def> = ANDI %vreg42, 63; GR32Bit:%vreg43,%vreg42
	  * %vreg44<def> = ADDI %zero, 832; GR32Bit:%vreg44
	  * %vreg45<def> = MUL %vreg39, %vreg44; GR32Bit:%vreg45,%vreg39,%vreg44
	  * %vreg46<def> = ADDI %zero, 52; GR32Bit:%vreg46
	  * %vreg47<def> = MUL %vreg41, %vreg46; GR32Bit:%vreg47,%vreg41,%vreg46
	  * %vreg48<def> = ADD %vreg47, %vreg43; GR32Bit:%vreg48,%vreg47,%vreg43
	  * %vreg49<def> = ADD %vreg48, %vreg45; GR32Bit:%vreg49,%vreg48,%vreg45
	  * %vreg50<def> = MUL %vreg49, %vreg38; GR32Bit:%vreg50,%vreg49,%vreg38
	  * %vreg33<def> = ADD %vreg37, %vreg50; GR32Bit:%vreg33,%vreg37,%vreg50
	  * %vreg19<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg19
	  * %vreg20<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg20
	  * %vreg21<def> = ADD %vreg20, %vreg19; GR32Bit:%vreg21,%vreg20,%vreg19
	  * SW %zero, %vreg21, 0; mem:ST4[%5] GR32Bit:%vreg21
	  * %vreg2<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg2
	  * %vreg1<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg1
	  * %vreg4<def> = ADDI %zero, 1058642330; GR32Bit:%vreg4
	  * %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
	  * SW %vreg4, %vreg3, 0; mem:ST4[%0] GR32Bit:%vreg4,%vreg3
	  * %vreg5<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg5
	  * %vreg6<def> = ADDI %zero, <ga:@SG_MAX>[TF=3]; GR32Bit:%vreg6
	  * %vreg8<def> = ADDI %zero, 1063675494; GR32Bit:%vreg8
	  * %vreg7<def> = ADD %vreg6, %vreg5; GR32Bit:%vreg7,%vreg6,%vreg5
	  * SW %vreg8, %vreg7, 0; mem:ST4[%1] GR32Bit:%vreg8,%vreg7
	  * %vreg22<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg22
	  * %vreg23<def> = ADDI %zero, <ga:@nh_fin_de_rampe>[TF=3]; GR32Bit:%vreg23
	  * %vreg24<def> = ADD %vreg23, %vreg22; GR32Bit:%vreg24,%vreg23,%vreg22
	  * SW %zero, %vreg24, 0; mem:ST4[%6] GR32Bit:%vreg24
	  * %vreg9<def> = LUI <ga:@NH_STARTER_SHUTOFF>[TF=2]; GR32Bit:%vreg9
	  * %vreg10<def> = ADDI %zero, <ga:@NH_STARTER_SHUTOFF>[TF=3]; GR32Bit:%vreg10
	  * %vreg0<def> = ADDI %zero, 17000; GR32Bit:%vreg0
	  * %vreg11<def> = ADD %vreg10, %vreg9; GR32Bit:%vreg11,%vreg10,%vreg9
	  * SW %vreg0, %vreg11, 0; mem:ST4[%2] GR32Bit:%vreg0,%vreg11
	  * %vreg25<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg25
	  * %vreg26<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg26
	  * %vreg27<def> = ADD %vreg26, %vreg25; GR32Bit:%vreg27,%vreg26,%vreg25
	  * %vreg31<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg31
	  * SW %vreg27, %vreg31, 0; mem:ST4[%7] GR32Bit:%vreg27,%vreg31
	  * %vreg29<def> = LW %vreg27, 16; mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4)] GR32Bit:%vreg29,%vreg27
	  * SW %vreg29, %vreg21, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg29,%vreg21
	  * %vreg30<def> = FLW %vreg27, 20; mem:LD4[bitcast (i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 5) to float*)] FP32Bit:%vreg30 GR32Bit:%vreg27
	  * FSW %vreg30, %vreg24, 0; mem:ST4[@nh_fin_de_rampe] FP32Bit:%vreg30 GR32Bit:%vreg24
	  * %vreg13<def> = LUI <ga:@SG_MAX_RPM>[TF=2]; GR32Bit:%vreg13
	  * %vreg12<def> = ADDI %zero, 15000; GR32Bit:%vreg12
	  * %vreg14<def> = ADDI %zero, <ga:@SG_MAX_RPM>[TF=3]; GR32Bit:%vreg14
	  * %vreg15<def> = ADD %vreg14, %vreg13; GR32Bit:%vreg15,%vreg14,%vreg13
	  * SW %vreg12, %vreg15, 0; mem:ST4[%3] GR32Bit:%vreg12,%vreg15
	  * %vreg16<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg16
	  * %vreg17<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg17
	  * %vreg18<def> = ADD %vreg17, %vreg16; GR32Bit:%vreg18,%vreg17,%vreg16
	  * SW %zero, %vreg18, 0; mem:ST4[%4] GR32Bit:%vreg18
	  * %vreg28<def> = LW %vreg27, 12; mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3)] GR32Bit:%vreg28,%vreg27
	  * SW %vreg28, %vreg18, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg28,%vreg18
	  * %vreg108<def> = ADDI %zero, 64; GR32Bit:%vreg108
	  * %vreg109<def> = ADDI %zero, 1; GR32Bit:%vreg109
	  * WRITECM %vreg108, %vreg109, 60; GR32Bit:%vreg108,%vreg109
	  * %vreg110<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg110
	  * %vreg111<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg111
	  * %vreg112<def> = SRLI %vreg111, 12; GR32Bit:%vreg112,%vreg111
	  * %vreg113<def> = ADD %vreg110, %vreg112; GR32Bit:%vreg113,%vreg110,%vreg112
	  * %vreg114<def> = ADDI %zero, 28; GR32Bit:%vreg114
	  * %vreg115<def> = SRLI %vreg108, 22; GR32Bit:%vreg115,%vreg108
	  * %vreg116<def> = SRLI %vreg108, 12; GR32Bit:%vreg116,%vreg108
	  * %vreg117<def> = ANDI %vreg116, 15; GR32Bit:%vreg117,%vreg116
	  * %vreg118<def> = SRLI %vreg108, 6; GR32Bit:%vreg118,%vreg108
	  * %vreg119<def> = ANDI %vreg118, 63; GR32Bit:%vreg119,%vreg118
	  * %vreg120<def> = ADDI %zero, 832; GR32Bit:%vreg120
	  * %vreg121<def> = MUL %vreg115, %vreg120; GR32Bit:%vreg121,%vreg115,%vreg120
	  * %vreg122<def> = ADDI %zero, 52; GR32Bit:%vreg122
	  * %vreg123<def> = MUL %vreg117, %vreg122; GR32Bit:%vreg123,%vreg117,%vreg122
	  * %vreg124<def> = ADD %vreg123, %vreg119; GR32Bit:%vreg124,%vreg123,%vreg119
	  * %vreg125<def> = ADD %vreg124, %vreg121; GR32Bit:%vreg125,%vreg124,%vreg121
	  * %vreg126<def> = MUL %vreg125, %vreg114; GR32Bit:%vreg126,%vreg125,%vreg114
	  * %vreg127<def> = ADD %vreg126, %vreg113; GR32Bit:%vreg127,%vreg126,%vreg113
	  * %vreg128<def> = LW %t5, 0; GR32Bit:%vreg128
	  * SW %vreg128, %vreg127, 24; GR32Bit:%vreg128,%vreg127
	  * %vreg129<def> = LUI 1; GR32Bit:%vreg129
	  * WRITEPM %vreg129, %vreg108, 0; GR32Bit:%vreg129,%vreg108
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg51<def> = ADD %t5, %zero; GR32Bit:%vreg51
	  * %vreg53<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg53
	  * %vreg54<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg54
	  * %vreg55<def> = SRLI %vreg54, 12; GR32Bit:%vreg55,%vreg54
	  * %vreg56<def> = ADD %vreg53, %vreg55; GR32Bit:%vreg56,%vreg53,%vreg55
	  * %vreg57<def> = ADDI %zero, 28; GR32Bit:%vreg57
	  * %vreg58<def> = SRLI %t5, 22; GR32Bit:%vreg58
	  * %vreg59<def> = SRLI %t5, 12; GR32Bit:%vreg59
	  * %vreg60<def> = ANDI %vreg59, 15; GR32Bit:%vreg60,%vreg59
	  * %vreg61<def> = SRLI %t5, 6; GR32Bit:%vreg61
	  * %vreg62<def> = ANDI %vreg61, 63; GR32Bit:%vreg62,%vreg61
	  * %vreg63<def> = ADDI %zero, 832; GR32Bit:%vreg63
	  * %vreg64<def> = MUL %vreg58, %vreg63; GR32Bit:%vreg64,%vreg58,%vreg63
	  * %vreg65<def> = ADDI %zero, 52; GR32Bit:%vreg65
	  * %vreg66<def> = MUL %vreg60, %vreg65; GR32Bit:%vreg66,%vreg60,%vreg65
	  * %vreg67<def> = ADD %vreg66, %vreg62; GR32Bit:%vreg67,%vreg66,%vreg62
	  * %vreg68<def> = ADD %vreg67, %vreg64; GR32Bit:%vreg68,%vreg67,%vreg64
	  * %vreg69<def> = MUL %vreg68, %vreg57; GR32Bit:%vreg69,%vreg68,%vreg57
	  * %vreg52<def> = ADD %vreg56, %vreg69; GR32Bit:%vreg52,%vreg56,%vreg69
	  * %vreg130<def> = LUI 1; GR32Bit:%vreg130
	  * %vreg131<def> = DREADPM %vreg130, 0; GR32Bit:%vreg131,%vreg130
	  * %vreg132<def> = ADDI %zero, -1; GR32Bit:%vreg132
	  * SYNC %vreg131, %vreg132, 60; GR32Bit:%vreg131,%vreg132
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg70<def> = ADD %t5, %zero; GR32Bit:%vreg70
	  * %vreg72<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg72
	  * %vreg73<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg73
	  * %vreg74<def> = SRLI %vreg73, 12; GR32Bit:%vreg74,%vreg73
	  * %vreg75<def> = ADD %vreg72, %vreg74; GR32Bit:%vreg75,%vreg72,%vreg74
	  * %vreg76<def> = ADDI %zero, 28; GR32Bit:%vreg76
	  * %vreg77<def> = SRLI %t5, 22; GR32Bit:%vreg77
	  * %vreg78<def> = SRLI %t5, 12; GR32Bit:%vreg78
	  * %vreg79<def> = ANDI %vreg78, 15; GR32Bit:%vreg79,%vreg78
	  * %vreg80<def> = SRLI %t5, 6; GR32Bit:%vreg80
	  * %vreg81<def> = ANDI %vreg80, 63; GR32Bit:%vreg81,%vreg80
	  * %vreg82<def> = ADDI %zero, 832; GR32Bit:%vreg82
	  * %vreg83<def> = MUL %vreg77, %vreg82; GR32Bit:%vreg83,%vreg77,%vreg82
	  * %vreg84<def> = ADDI %zero, 52; GR32Bit:%vreg84
	  * %vreg85<def> = MUL %vreg79, %vreg84; GR32Bit:%vreg85,%vreg79,%vreg84
	  * %vreg86<def> = ADD %vreg85, %vreg81; GR32Bit:%vreg86,%vreg85,%vreg81
	  * %vreg87<def> = ADD %vreg86, %vreg83; GR32Bit:%vreg87,%vreg86,%vreg83
	  * %vreg88<def> = MUL %vreg87, %vreg76; GR32Bit:%vreg88,%vreg87,%vreg76
	  * %vreg71<def> = ADD %vreg75, %vreg88; GR32Bit:%vreg71,%vreg75,%vreg88
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg89<def> = ADD %t5, %zero; GR32Bit:%vreg89
	  * %vreg91<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg91
	  * %vreg92<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg92
	  * %vreg93<def> = SRLI %vreg92, 12; GR32Bit:%vreg93,%vreg92
	  * %vreg94<def> = ADD %vreg91, %vreg93; GR32Bit:%vreg94,%vreg91,%vreg93
	  * %vreg95<def> = ADDI %zero, 28; GR32Bit:%vreg95
	  * %vreg96<def> = SRLI %t5, 22; GR32Bit:%vreg96
	  * %vreg97<def> = SRLI %t5, 12; GR32Bit:%vreg97
	  * %vreg98<def> = ANDI %vreg97, 15; GR32Bit:%vreg98,%vreg97
	  * %vreg99<def> = SRLI %t5, 6; GR32Bit:%vreg99
	  * %vreg100<def> = ANDI %vreg99, 63; GR32Bit:%vreg100,%vreg99
	  * %vreg101<def> = ADDI %zero, 832; GR32Bit:%vreg101
	  * %vreg102<def> = MUL %vreg96, %vreg101; GR32Bit:%vreg102,%vreg96,%vreg101
	  * %vreg103<def> = ADDI %zero, 52; GR32Bit:%vreg103
	  * %vreg104<def> = MUL %vreg98, %vreg103; GR32Bit:%vreg104,%vreg98,%vreg103
	  * %vreg105<def> = ADD %vreg104, %vreg100; GR32Bit:%vreg105,%vreg104,%vreg100
	  * %vreg106<def> = ADD %vreg105, %vreg102; GR32Bit:%vreg106,%vreg105,%vreg102
	  * %vreg107<def> = MUL %vreg106, %vreg95; GR32Bit:%vreg107,%vreg106,%vreg95
	  * %vreg90<def> = ADD %vreg94, %vreg107; GR32Bit:%vreg90,%vreg94,%vreg107
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
Patching the instructions that are supposed to use the physical registers r30 and r31
Computing live-in reg-units in ABI blocks.
Created 0 new intervals.

*** Renumbered SlotIndexes 8-2152 ***

*** Renumbered SlotIndexes 204-2164 ***

*** Renumbered SlotIndexes 264-2176 ***

*** Renumbered SlotIndexes 348-2188 ***

*** Renumbered SlotIndexes 400-2200 ***

*** Renumbered SlotIndexes 524-2212 ***
********** INTERVALS **********
t5 = EMPTY
zero = EMPTY
%vreg0 = [364r,380r:0)  0@364r
%vreg1 = [220r,236r:0)  0@220r
%vreg2 = [200r,236r:0)  0@200r
%vreg3 = [236r,244r:0)  0@236r
%vreg4 = [228r,244r:0)  0@228r
%vreg5 = [252r,288r:0)  0@252r
%vreg6 = [260r,288r:0)  0@260r
%vreg7 = [288r,296r:0)  0@288r
%vreg8 = [280r,296r:0)  0@280r
%vreg9 = [336r,372r:0)  0@336r
%vreg10 = [344r,372r:0)  0@344r
%vreg11 = [372r,380r:0)  0@372r
%vreg12 = [480r,504r:0)  0@480r
%vreg13 = [472r,496r:0)  0@472r
%vreg14 = [488r,496r:0)  0@488r
%vreg15 = [496r,504r:0)  0@496r
%vreg16 = [512r,540r:0)  0@512r
%vreg17 = [520r,540r:0)  0@520r
%vreg18 = [540r,564r:0)  0@540r
%vreg19 = [168r,184r:0)  0@168r
%vreg20 = [176r,184r:0)  0@176r
%vreg21 = [184r,448r:0)  0@184r
%vreg22 = [304r,320r:0)  0@304r
%vreg23 = [312r,320r:0)  0@312r
%vreg24 = [320r,464r:0)  0@320r
%vreg25 = [388r,416r:0)  0@388r
%vreg26 = [396r,416r:0)  0@396r
%vreg27 = [416r,556r:0)  0@416r
%vreg28 = [556r,564r:0)  0@556r
%vreg29 = [440r,448r:0)  0@440r
%vreg30 = [456r,464r:0)  0@456r
%vreg31 = [424r,432r:0)  0@424r
%vreg32 = [4r,4d:0)  0@4r
%vreg33 = [160r,160d:0)  0@160r
%vreg34 = [24r,48r:0)  0@24r
%vreg35 = [32r,40r:0)  0@32r
%vreg36 = [40r,48r:0)  0@40r
%vreg37 = [48r,160r:0)  0@48r
%vreg38 = [56r,152r:0)  0@56r
%vreg39 = [64r,112r:0)  0@64r
%vreg40 = [72r,80r:0)  0@72r
%vreg41 = [80r,128r:0)  0@80r
%vreg42 = [88r,96r:0)  0@88r
%vreg43 = [96r,136r:0)  0@96r
%vreg44 = [104r,112r:0)  0@104r
%vreg45 = [112r,144r:0)  0@112r
%vreg46 = [120r,128r:0)  0@120r
%vreg47 = [128r,136r:0)  0@128r
%vreg48 = [136r,144r:0)  0@136r
%vreg49 = [144r,152r:0)  0@144r
%vreg50 = [152r,160r:0)  0@152r
%vreg51 = [796r,796d:0)  0@796r
%vreg52 = [940r,940d:0)  0@940r
%vreg53 = [804r,828r:0)  0@804r
%vreg54 = [812r,820r:0)  0@812r
%vreg55 = [820r,828r:0)  0@820r
%vreg56 = [828r,940r:0)  0@828r
%vreg57 = [836r,932r:0)  0@836r
%vreg58 = [844r,892r:0)  0@844r
%vreg59 = [852r,860r:0)  0@852r
%vreg60 = [860r,908r:0)  0@860r
%vreg61 = [868r,876r:0)  0@868r
%vreg62 = [876r,916r:0)  0@876r
%vreg63 = [884r,892r:0)  0@884r
%vreg64 = [892r,924r:0)  0@892r
%vreg65 = [900r,908r:0)  0@900r
%vreg66 = [908r,916r:0)  0@908r
%vreg67 = [916r,924r:0)  0@916r
%vreg68 = [924r,932r:0)  0@924r
%vreg69 = [932r,940r:0)  0@932r
%vreg70 = [1004r,1004d:0)  0@1004r
%vreg71 = [1148r,1148d:0)  0@1148r
%vreg72 = [1012r,1036r:0)  0@1012r
%vreg73 = [1020r,1028r:0)  0@1020r
%vreg74 = [1028r,1036r:0)  0@1028r
%vreg75 = [1036r,1148r:0)  0@1036r
%vreg76 = [1044r,1140r:0)  0@1044r
%vreg77 = [1052r,1100r:0)  0@1052r
%vreg78 = [1060r,1068r:0)  0@1060r
%vreg79 = [1068r,1116r:0)  0@1068r
%vreg80 = [1076r,1084r:0)  0@1076r
%vreg81 = [1084r,1124r:0)  0@1084r
%vreg82 = [1092r,1100r:0)  0@1092r
%vreg83 = [1100r,1132r:0)  0@1100r
%vreg84 = [1108r,1116r:0)  0@1108r
%vreg85 = [1116r,1124r:0)  0@1116r
%vreg86 = [1124r,1132r:0)  0@1124r
%vreg87 = [1132r,1140r:0)  0@1132r
%vreg88 = [1140r,1148r:0)  0@1140r
%vreg89 = [1180r,1180d:0)  0@1180r
%vreg90 = [1324r,1324d:0)  0@1324r
%vreg91 = [1188r,1212r:0)  0@1188r
%vreg92 = [1196r,1204r:0)  0@1196r
%vreg93 = [1204r,1212r:0)  0@1204r
%vreg94 = [1212r,1324r:0)  0@1212r
%vreg95 = [1220r,1316r:0)  0@1220r
%vreg96 = [1228r,1276r:0)  0@1228r
%vreg97 = [1236r,1244r:0)  0@1236r
%vreg98 = [1244r,1292r:0)  0@1244r
%vreg99 = [1252r,1260r:0)  0@1252r
%vreg100 = [1260r,1300r:0)  0@1260r
%vreg101 = [1268r,1276r:0)  0@1268r
%vreg102 = [1276r,1308r:0)  0@1276r
%vreg103 = [1284r,1292r:0)  0@1284r
%vreg104 = [1292r,1300r:0)  0@1292r
%vreg105 = [1300r,1308r:0)  0@1300r
%vreg106 = [1308r,1316r:0)  0@1308r
%vreg107 = [1316r,1324r:0)  0@1316r
%vreg108 = [572r,764r:0)  0@572r
%vreg109 = [580r,588r:0)  0@580r
%vreg110 = [596r,620r:0)  0@596r
%vreg111 = [604r,612r:0)  0@604r
%vreg112 = [612r,620r:0)  0@612r
%vreg113 = [620r,732r:0)  0@620r
%vreg114 = [628r,724r:0)  0@628r
%vreg115 = [636r,684r:0)  0@636r
%vreg116 = [644r,652r:0)  0@644r
%vreg117 = [652r,700r:0)  0@652r
%vreg118 = [660r,668r:0)  0@660r
%vreg119 = [668r,708r:0)  0@668r
%vreg120 = [676r,684r:0)  0@676r
%vreg121 = [684r,716r:0)  0@684r
%vreg122 = [692r,700r:0)  0@692r
%vreg123 = [700r,708r:0)  0@700r
%vreg124 = [708r,716r:0)  0@708r
%vreg125 = [716r,724r:0)  0@716r
%vreg126 = [724r,732r:0)  0@724r
%vreg127 = [732r,748r:0)  0@732r
%vreg128 = [740r,748r:0)  0@740r
%vreg129 = [756r,764r:0)  0@756r
%vreg130 = [948r,956r:0)  0@948r
%vreg131 = [956r,2212B:0)  0@956r
%vreg132 = [964r,972r:0)  0@964r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start1.return
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg34<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg34
4B		  * %vreg35<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg35
4B		  * %vreg36<def> = SRLI %vreg35, 12; GR32Bit:%vreg36,%vreg35
4B		  * %vreg37<def> = ADD %vreg34, %vreg36; GR32Bit:%vreg37,%vreg34,%vreg36
4B		  * %vreg38<def> = ADDI %zero, 28; GR32Bit:%vreg38
4B		  * %vreg39<def> = SRLI %t5, 22; GR32Bit:%vreg39
4B		  * %vreg40<def> = SRLI %t5, 12; GR32Bit:%vreg40
4B		  * %vreg41<def> = ANDI %vreg40, 15; GR32Bit:%vreg41,%vreg40
4B		  * %vreg42<def> = SRLI %t5, 6; GR32Bit:%vreg42
4B		  * %vreg43<def> = ANDI %vreg42, 63; GR32Bit:%vreg43,%vreg42
4B		  * %vreg44<def> = ADDI %zero, 832; GR32Bit:%vreg44
4B		  * %vreg45<def> = MUL %vreg39, %vreg44; GR32Bit:%vreg45,%vreg39,%vreg44
4B		  * %vreg46<def> = ADDI %zero, 52; GR32Bit:%vreg46
4B		  * %vreg47<def> = MUL %vreg41, %vreg46; GR32Bit:%vreg47,%vreg41,%vreg46
4B		  * %vreg48<def> = ADD %vreg47, %vreg43; GR32Bit:%vreg48,%vreg47,%vreg43
4B		  * %vreg49<def> = ADD %vreg48, %vreg45; GR32Bit:%vreg49,%vreg48,%vreg45
4B		  * %vreg50<def> = MUL %vreg49, %vreg38; GR32Bit:%vreg50,%vreg49,%vreg38
4B		  * %t5<def> = ADD %vreg37, %vreg50; GR32Bit:%vreg37,%vreg50
4B		  * %vreg19<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg19
4B		  * %vreg20<def> = LUI <MCSym="%lo("ga#1280")">; GR32Bit:%vreg20
4B		  * SRLI %vreg20, %vreg20, 12; GR32Bit:%vreg20
4B		  * %vreg21<def> = ADD %vreg20, %vreg19; GR32Bit:%vreg21,%vreg20,%vreg19
4B		  * SW %zero, %vreg21, 0; mem:ST4[%5] GR32Bit:%vreg21
4B		  * %vreg2<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg2
4B		  * SRLI %vreg2, %vreg2, 12; GR32Bit:%vreg2
4B		  * %vreg1<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg1
4B		  * %vreg4<def> = LUI 258457; GR32Bit:%vreg4
4B		  * %a5<def> = LUI 2458
4B		  * %a5<def> = SRLI %a5<internal>, 12
4B		  * ADD %vreg4, %vreg4, %a5; GR32Bit:%vreg4
4B		  * %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
4B		  * SW %vreg4, %vreg3, 0; mem:ST4[%0] GR32Bit:%vreg4,%vreg3
4B		  * %vreg5<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg5
4B		  * %vreg6<def> = LUI <MCSym="%lo("ga#256")">; GR32Bit:%vreg6
4B		  * SRLI %vreg6, %vreg6, 12; GR32Bit:%vreg6
4B		  * %vreg8<def> = LUI 259686; GR32Bit:%vreg8
4B		  * %a5<def> = LUI 1638
4B		  * %a5<def> = SRLI %a5<internal>, 12
4B		  * ADD %vreg8, %vreg8, %a5; GR32Bit:%vreg8
4B		  * %vreg7<def> = ADD %vreg6, %vreg5; GR32Bit:%vreg7,%vreg6,%vreg5
4B		  * SW %vreg8, %vreg7, 0; mem:ST4[%1] GR32Bit:%vreg8,%vreg7
4B		  * %vreg22<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg22
4B		  * %vreg23<def> = LUI <MCSym="%lo("ga#1536")">; GR32Bit:%vreg23
4B		  * SRLI %vreg23, %vreg23, 12; GR32Bit:%vreg23
4B		  * %vreg24<def> = ADD %vreg23, %vreg22; GR32Bit:%vreg24,%vreg23,%vreg22
4B		  * SW %zero, %vreg24, 0; mem:ST4[%6] GR32Bit:%vreg24
4B		  * %vreg9<def> = LUI <ga:@NH_STARTER_SHUTOFF>[TF=2]; GR32Bit:%vreg9
4B		  * %vreg10<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg10
4B		  * SRLI %vreg10, %vreg10, 12; GR32Bit:%vreg10
4B		  * %vreg0<def> = LUI 4; GR32Bit:%vreg0
4B		  * %a5<def> = LUI 616
4B		  * %a5<def> = SRLI %a5<internal>, 12
4B		  * ADD %vreg0, %vreg0, %a5; GR32Bit:%vreg0
4B		  * %vreg11<def> = ADD %vreg10, %vreg9; GR32Bit:%vreg11,%vreg10,%vreg9
4B		  * SW %vreg0, %vreg11, 0; mem:ST4[%2] GR32Bit:%vreg0,%vreg11
4B		  * %vreg25<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg25
4B		  * %vreg26<def> = LUI <MCSym="%lo("ga#1792")">; GR32Bit:%vreg26
4B		  * SRLI %vreg26, %vreg26, 12; GR32Bit:%vreg26
4B		  * %vreg27<def> = ADD %vreg26, %vreg25; GR32Bit:%vreg27,%vreg26,%vreg25
4B		  * %vreg31<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg31
4B		  * SW %vreg27, %vreg31, 0; mem:ST4[%7] GR32Bit:%vreg27,%vreg31
4B		  * %vreg29<def> = LW %vreg27, 16; mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4)] GR32Bit:%vreg29,%vreg27
4B		  * SW %vreg29, %vreg21, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg29,%vreg21
4B		  * %vreg30<def> = FLW %vreg27, 20; mem:LD4[bitcast (i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 5) to float*)] FP32Bit:%vreg30 GR32Bit:%vreg27
4B		  * FSW %vreg30, %vreg24, 0; mem:ST4[@nh_fin_de_rampe] FP32Bit:%vreg30 GR32Bit:%vreg24
4B		  * %vreg13<def> = LUI <ga:@SG_MAX_RPM>[TF=2]; GR32Bit:%vreg13
4B		  * %vreg12<def> = LUI 3; GR32Bit:%vreg12
4B		  * %a5<def> = LUI 2712
4B		  * %a5<def> = SRLI %a5<internal>, 12
4B		  * ADD %vreg12, %vreg12, %a5; GR32Bit:%vreg12
4B		  * %vreg14<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg14
4B		  * SRLI %vreg14, %vreg14, 12; GR32Bit:%vreg14
4B		  * %vreg15<def> = ADD %vreg14, %vreg13; GR32Bit:%vreg15,%vreg14,%vreg13
4B		  * SW %vreg12, %vreg15, 0; mem:ST4[%3] GR32Bit:%vreg12,%vreg15
4B		  * %vreg16<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg16
4B		  * %vreg17<def> = LUI <MCSym="%lo("ga#1024")">; GR32Bit:%vreg17
4B		  * SRLI %vreg17, %vreg17, 12; GR32Bit:%vreg17
4B		  * %vreg18<def> = ADD %vreg17, %vreg16; GR32Bit:%vreg18,%vreg17,%vreg16
4B		  * SW %zero, %vreg18, 0; mem:ST4[%4] GR32Bit:%vreg18
4B		  * %vreg28<def> = LW %vreg27, 12; mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3)] GR32Bit:%vreg28,%vreg27
4B		  * SW %vreg28, %vreg18, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg28,%vreg18
4B		  * %vreg108<def> = ADDI %zero, 64; GR32Bit:%vreg108
4B		  * %vreg109<def> = ADDI %zero, 1; GR32Bit:%vreg109
4B		  * WRITECM %vreg108, %vreg109, 60; GR32Bit:%vreg108,%vreg109
4B		  * %vreg110<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg110
4B		  * %vreg111<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg111
4B		  * %vreg112<def> = SRLI %vreg111, 12; GR32Bit:%vreg112,%vreg111
4B		  * %vreg113<def> = ADD %vreg110, %vreg112; GR32Bit:%vreg113,%vreg110,%vreg112
4B		  * %vreg114<def> = ADDI %zero, 28; GR32Bit:%vreg114
4B		  * %vreg115<def> = SRLI %vreg108, 22; GR32Bit:%vreg115,%vreg108
4B		  * %vreg116<def> = SRLI %vreg108, 12; GR32Bit:%vreg116,%vreg108
4B		  * %vreg117<def> = ANDI %vreg116, 15; GR32Bit:%vreg117,%vreg116
4B		  * %vreg118<def> = SRLI %vreg108, 6; GR32Bit:%vreg118,%vreg108
4B		  * %vreg119<def> = ANDI %vreg118, 63; GR32Bit:%vreg119,%vreg118
4B		  * %vreg120<def> = ADDI %zero, 832; GR32Bit:%vreg120
4B		  * %vreg121<def> = MUL %vreg115, %vreg120; GR32Bit:%vreg121,%vreg115,%vreg120
4B		  * %vreg122<def> = ADDI %zero, 52; GR32Bit:%vreg122
4B		  * %vreg123<def> = MUL %vreg117, %vreg122; GR32Bit:%vreg123,%vreg117,%vreg122
4B		  * %vreg124<def> = ADD %vreg123, %vreg119; GR32Bit:%vreg124,%vreg123,%vreg119
4B		  * %vreg125<def> = ADD %vreg124, %vreg121; GR32Bit:%vreg125,%vreg124,%vreg121
4B		  * %vreg126<def> = MUL %vreg125, %vreg114; GR32Bit:%vreg126,%vreg125,%vreg114
4B		  * %vreg127<def> = ADD %vreg126, %vreg113; GR32Bit:%vreg127,%vreg126,%vreg113
4B		  * %vreg128<def> = LW %t5, 0; GR32Bit:%vreg128
4B		  * SW %vreg128, %vreg127, 24; GR32Bit:%vreg128,%vreg127
4B		  * %vreg129<def> = LUI 1; GR32Bit:%vreg129
4B		  * WRITEPM %vreg129, %vreg108, 0; GR32Bit:%vreg129,%vreg108
4B		  * END 0
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
796B		%t4<def> = ADD %t5, %zero
796B		  * %vreg53<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg53
796B		  * %vreg54<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg54
796B		  * %vreg55<def> = SRLI %vreg54, 12; GR32Bit:%vreg55,%vreg54
796B		  * %vreg56<def> = ADD %vreg53, %vreg55; GR32Bit:%vreg56,%vreg53,%vreg55
796B		  * %vreg57<def> = ADDI %zero, 28; GR32Bit:%vreg57
796B		  * %vreg58<def> = SRLI %t5, 22; GR32Bit:%vreg58
796B		  * %vreg59<def> = SRLI %t5, 12; GR32Bit:%vreg59
796B		  * %vreg60<def> = ANDI %vreg59, 15; GR32Bit:%vreg60,%vreg59
796B		  * %vreg61<def> = SRLI %t5, 6; GR32Bit:%vreg61
796B		  * %vreg62<def> = ANDI %vreg61, 63; GR32Bit:%vreg62,%vreg61
796B		  * %vreg63<def> = ADDI %zero, 832; GR32Bit:%vreg63
796B		  * %vreg64<def> = MUL %vreg58, %vreg63; GR32Bit:%vreg64,%vreg58,%vreg63
796B		  * %vreg65<def> = ADDI %zero, 52; GR32Bit:%vreg65
796B		  * %vreg66<def> = MUL %vreg60, %vreg65; GR32Bit:%vreg66,%vreg60,%vreg65
796B		  * %vreg67<def> = ADD %vreg66, %vreg62; GR32Bit:%vreg67,%vreg66,%vreg62
796B		  * %vreg68<def> = ADD %vreg67, %vreg64; GR32Bit:%vreg68,%vreg67,%vreg64
796B		  * %vreg69<def> = MUL %vreg68, %vreg57; GR32Bit:%vreg69,%vreg68,%vreg57
796B		  * %t5<def> = ADD %vreg56, %vreg69; GR32Bit:%vreg56,%vreg69
796B		  * %vreg130<def> = LUI 1; GR32Bit:%vreg130
796B		  * %vreg131<def> = DREADPM %vreg130, 0; GR32Bit:%vreg131,%vreg130
796B		  * %vreg132<def> = LUI 1048575; GR32Bit:%vreg132
796B		  * %a5<def> = LUI 4095
796B		  * %a5<def> = SRLI %a5<internal>, 12
796B		  * ADD %vreg132, %vreg132, %a5; GR32Bit:%vreg132
796B		  * SYNC %vreg131, %vreg132, 60; GR32Bit:%vreg131,%vreg132
796B		  * END 0
796B		  * %zero<def> = ADDI %zero, 0
796B		  * %zero<def> = ADDI %zero, 0
1004B		%t4<def> = ADD %t5, %zero
1004B		  * %vreg72<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg72
1004B		  * %vreg73<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg73
1004B		  * %vreg74<def> = SRLI %vreg73, 12; GR32Bit:%vreg74,%vreg73
1004B		  * %vreg75<def> = ADD %vreg72, %vreg74; GR32Bit:%vreg75,%vreg72,%vreg74
1004B		  * %vreg76<def> = ADDI %zero, 28; GR32Bit:%vreg76
1004B		  * %vreg77<def> = SRLI %t5, 22; GR32Bit:%vreg77
1004B		  * %vreg78<def> = SRLI %t5, 12; GR32Bit:%vreg78
1004B		  * %vreg79<def> = ANDI %vreg78, 15; GR32Bit:%vreg79,%vreg78
1004B		  * %vreg80<def> = SRLI %t5, 6; GR32Bit:%vreg80
1004B		  * %vreg81<def> = ANDI %vreg80, 63; GR32Bit:%vreg81,%vreg80
1004B		  * %vreg82<def> = ADDI %zero, 832; GR32Bit:%vreg82
1004B		  * %vreg83<def> = MUL %vreg77, %vreg82; GR32Bit:%vreg83,%vreg77,%vreg82
1004B		  * %vreg84<def> = ADDI %zero, 52; GR32Bit:%vreg84
1004B		  * %vreg85<def> = MUL %vreg79, %vreg84; GR32Bit:%vreg85,%vreg79,%vreg84
1004B		  * %vreg86<def> = ADD %vreg85, %vreg81; GR32Bit:%vreg86,%vreg85,%vreg81
1004B		  * %vreg87<def> = ADD %vreg86, %vreg83; GR32Bit:%vreg87,%vreg86,%vreg83
1004B		  * %vreg88<def> = MUL %vreg87, %vreg76; GR32Bit:%vreg88,%vreg87,%vreg76
1004B		  * %t5<def> = ADD %vreg75, %vreg88; GR32Bit:%vreg75,%vreg88
1004B		  * END 0
1004B		  * %zero<def> = ADDI %zero, 0
1004B		  * %zero<def> = ADDI %zero, 0
1180B		%t4<def> = ADD %t5, %zero
1180B		  * %vreg91<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg91
1180B		  * %vreg92<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg92
1180B		  * %vreg93<def> = SRLI %vreg92, 12; GR32Bit:%vreg93,%vreg92
1180B		  * %vreg94<def> = ADD %vreg91, %vreg93; GR32Bit:%vreg94,%vreg91,%vreg93
1180B		  * %vreg95<def> = ADDI %zero, 28; GR32Bit:%vreg95
1180B		  * %vreg96<def> = SRLI %t5, 22; GR32Bit:%vreg96
1180B		  * %vreg97<def> = SRLI %t5, 12; GR32Bit:%vreg97
1180B		  * %vreg98<def> = ANDI %vreg97, 15; GR32Bit:%vreg98,%vreg97
1180B		  * %vreg99<def> = SRLI %t5, 6; GR32Bit:%vreg99
1180B		  * %vreg100<def> = ANDI %vreg99, 63; GR32Bit:%vreg100,%vreg99
1180B		  * %vreg101<def> = ADDI %zero, 832; GR32Bit:%vreg101
1180B		  * %vreg102<def> = MUL %vreg96, %vreg101; GR32Bit:%vreg102,%vreg96,%vreg101
1180B		  * %vreg103<def> = ADDI %zero, 52; GR32Bit:%vreg103
1180B		  * %vreg104<def> = MUL %vreg98, %vreg103; GR32Bit:%vreg104,%vreg98,%vreg103
1180B		  * %vreg105<def> = ADD %vreg104, %vreg100; GR32Bit:%vreg105,%vreg104,%vreg100
1180B		  * %vreg106<def> = ADD %vreg105, %vreg102; GR32Bit:%vreg106,%vreg105,%vreg102
1180B		  * %vreg107<def> = MUL %vreg106, %vreg95; GR32Bit:%vreg107,%vreg106,%vreg95
1180B		  * %t5<def> = ADD %vreg94, %vreg107; GR32Bit:%vreg94,%vreg107
1180B		  * END 0
1180B		  * %zero<def> = ADDI %zero, 0
1180B		  * %zero<def> = ADDI %zero, 0

# End machine code for function redefine_start1.

********** COMPUTING LIVE DEBUG VARIABLES: redefine_start1 **********
********** DEBUG VARIABLES **********
********** Compute Spill Weights **********
********** Function: redefine_start1
********** GREEDY REGISTER ALLOCATION **********
********** Function: redefine_start1

selectOrSplit GR32Bit:%vreg131 [956r,2212B:0)  0@956r
AllocationOrder(GR32Bit) = [ %t0 %t1 %t2 %fp %a0 %a1 %a2 %a3 %a4 %a6 %a7 %t3 %ra %sp %gp %tp %s0 %s1 %s2 %s3 %s4 %s5 %s6 %s7 %s8 %s9 %s10 %s11 ]
assigning %vreg131 to %t0: t0

selectOrSplit GR32Bit:%vreg21 [184r,448r:0)  0@184r
assigning %vreg21 to %t0: t0

selectOrSplit GR32Bit:%vreg108 [572r,764r:0)  0@572r
assigning %vreg108 to %t0: t0

selectOrSplit GR32Bit:%vreg24 [320r,464r:0)  0@320r
assigning %vreg24 to %t1: t1

selectOrSplit GR32Bit:%vreg27 [416r,556r:0)  0@416r
assigning %vreg27 to %t2: t2

selectOrSplit GR32Bit:%vreg37 [48r,160r:0)  0@48r
assigning %vreg37 to %t0: t0

selectOrSplit GR32Bit:%vreg56 [828r,940r:0)  0@828r
assigning %vreg56 to %t0: t0

selectOrSplit GR32Bit:%vreg75 [1036r,1148r:0)  0@1036r
assigning %vreg75 to %t1: t1

selectOrSplit GR32Bit:%vreg94 [1212r,1324r:0)  0@1212r
assigning %vreg94 to %t1: t1

selectOrSplit GR32Bit:%vreg113 [620r,732r:0)  0@620r
assigning %vreg113 to %t1: t1

selectOrSplit GR32Bit:%vreg38 [56r,152r:0)  0@56r
assigning %vreg38 to %t1: t1

selectOrSplit GR32Bit:%vreg57 [836r,932r:0)  0@836r
assigning %vreg57 to %t1: t1

selectOrSplit GR32Bit:%vreg76 [1044r,1140r:0)  0@1044r
assigning %vreg76 to %t2: t2

selectOrSplit GR32Bit:%vreg95 [1220r,1316r:0)  0@1220r
assigning %vreg95 to %t2: t2

selectOrSplit GR32Bit:%vreg114 [628r,724r:0)  0@628r
assigning %vreg114 to %t2: t2

selectOrSplit GR32Bit:%vreg39 [64r,112r:0)  0@64r
assigning %vreg39 to %t2: t2

selectOrSplit GR32Bit:%vreg41 [80r,128r:0)  0@80r
assigning %vreg41 to %fp: fp

selectOrSplit GR32Bit:%vreg58 [844r,892r:0)  0@844r
assigning %vreg58 to %t2: t2

selectOrSplit GR32Bit:%vreg60 [860r,908r:0)  0@860r
assigning %vreg60 to %fp: fp

selectOrSplit GR32Bit:%vreg77 [1052r,1100r:0)  0@1052r
assigning %vreg77 to %fp: fp

selectOrSplit GR32Bit:%vreg79 [1068r,1116r:0)  0@1068r
assigning %vreg79 to %a0: a0

selectOrSplit GR32Bit:%vreg96 [1228r,1276r:0)  0@1228r
assigning %vreg96 to %fp: fp

selectOrSplit GR32Bit:%vreg98 [1244r,1292r:0)  0@1244r
assigning %vreg98 to %a0: a0

selectOrSplit GR32Bit:%vreg115 [636r,684r:0)  0@636r
assigning %vreg115 to %fp: fp

selectOrSplit GR32Bit:%vreg117 [652r,700r:0)  0@652r
assigning %vreg117 to %a0: a0

selectOrSplit GR32Bit:%vreg43 [96r,136r:0)  0@96r
assigning %vreg43 to %a0: a0

selectOrSplit GR32Bit:%vreg62 [876r,916r:0)  0@876r
assigning %vreg62 to %a0: a0

selectOrSplit GR32Bit:%vreg81 [1084r,1124r:0)  0@1084r
assigning %vreg81 to %a1: a1

selectOrSplit GR32Bit:%vreg100 [1260r,1300r:0)  0@1260r
assigning %vreg100 to %a1: a1

selectOrSplit GR32Bit:%vreg119 [668r,708r:0)  0@668r
assigning %vreg119 to %a1: a1

selectOrSplit GR32Bit:%vreg2 [200r,236r:0)  0@200r
assigning %vreg2 to %t1: t1

selectOrSplit GR32Bit:%vreg5 [252r,288r:0)  0@252r
assigning %vreg5 to %t1: t1

selectOrSplit GR32Bit:%vreg9 [336r,372r:0)  0@336r
assigning %vreg9 to %t2: t2

selectOrSplit GR32Bit:%vreg45 [112r,144r:0)  0@112r
assigning %vreg45 to %t2: t2

selectOrSplit GR32Bit:%vreg64 [892r,924r:0)  0@892r
assigning %vreg64 to %t2: t2

selectOrSplit GR32Bit:%vreg83 [1100r,1132r:0)  0@1100r
assigning %vreg83 to %fp: fp

selectOrSplit GR32Bit:%vreg102 [1276r,1308r:0)  0@1276r
assigning %vreg102 to %fp: fp

selectOrSplit GR32Bit:%vreg121 [684r,716r:0)  0@684r
assigning %vreg121 to %fp: fp

selectOrSplit GR32Bit:%vreg6 [260r,288r:0)  0@260r
assigning %vreg6 to %t2: t2

selectOrSplit GR32Bit:%vreg10 [344r,372r:0)  0@344r
assigning %vreg10 to %fp: fp

selectOrSplit GR32Bit:%vreg16 [512r,540r:0)  0@512r
assigning %vreg16 to %t0: t0

selectOrSplit GR32Bit:%vreg25 [388r,416r:0)  0@388r
assigning %vreg25 to %t2: t2

selectOrSplit GR32Bit:%vreg12 [480r,504r:0)  0@480r
assigning %vreg12 to %t0: t0

selectOrSplit GR32Bit:%vreg13 [472r,496r:0)  0@472r
assigning %vreg13 to %t1: t1

selectOrSplit GR32Bit:%vreg18 [540r,564r:0)  0@540r
assigning %vreg18 to %t0: t0

selectOrSplit GR32Bit:%vreg34 [24r,48r:0)  0@24r
assigning %vreg34 to %t0: t0

selectOrSplit GR32Bit:%vreg53 [804r,828r:0)  0@804r
assigning %vreg53 to %t0: t0

selectOrSplit GR32Bit:%vreg72 [1012r,1036r:0)  0@1012r
assigning %vreg72 to %t1: t1

selectOrSplit GR32Bit:%vreg91 [1188r,1212r:0)  0@1188r
assigning %vreg91 to %t1: t1

selectOrSplit GR32Bit:%vreg110 [596r,620r:0)  0@596r
assigning %vreg110 to %t1: t1

selectOrSplit GR32Bit:%vreg17 [520r,540r:0)  0@520r
assigning %vreg17 to %t1: t1

selectOrSplit GR32Bit:%vreg26 [396r,416r:0)  0@396r
assigning %vreg26 to %fp: fp

selectOrSplit GR32Bit:%vreg0 [364r,380r:0)  0@364r
assigning %vreg0 to %a0: a0

selectOrSplit GR32Bit:%vreg1 [220r,236r:0)  0@220r
assigning %vreg1 to %t2: t2

selectOrSplit GR32Bit:%vreg4 [228r,244r:0)  0@228r
assigning %vreg4 to %fp: fp

selectOrSplit GR32Bit:%vreg8 [280r,296r:0)  0@280r
assigning %vreg8 to %fp: fp

selectOrSplit GR32Bit:%vreg19 [168r,184r:0)  0@168r
assigning %vreg19 to %t0: t0

selectOrSplit GR32Bit:%vreg22 [304r,320r:0)  0@304r
assigning %vreg22 to %t1: t1

selectOrSplit GR32Bit:%vreg127 [732r,748r:0)  0@732r
assigning %vreg127 to %t1: t1

selectOrSplit GR32Bit:%vreg3 [236r,244r:0)  0@236r
assigning %vreg3 to %t1: t1

selectOrSplit GR32Bit:%vreg7 [288r,296r:0)  0@288r
assigning %vreg7 to %t1: t1

selectOrSplit GR32Bit:%vreg11 [372r,380r:0)  0@372r
assigning %vreg11 to %t2: t2

selectOrSplit GR32Bit:%vreg14 [488r,496r:0)  0@488r
assigning %vreg14 to %fp: fp

selectOrSplit GR32Bit:%vreg15 [496r,504r:0)  0@496r
assigning %vreg15 to %t1: t1

selectOrSplit GR32Bit:%vreg20 [176r,184r:0)  0@176r
assigning %vreg20 to %t1: t1

selectOrSplit GR32Bit:%vreg23 [312r,320r:0)  0@312r
assigning %vreg23 to %t2: t2

selectOrSplit GR32Bit:%vreg28 [556r,564r:0)  0@556r
assigning %vreg28 to %t1: t1

selectOrSplit GR32Bit:%vreg29 [440r,448r:0)  0@440r
assigning %vreg29 to %fp: fp

selectOrSplit FP32Bit:%vreg30 [456r,464r:0)  0@456r
AllocationOrder(FP32Bit) = [ %ft1 %ft2 %ft3 %ft4 %ft5 %ft6 %ft7 %fs0 %fs1 %fa0 %fa1 %fa2 %fa3 %fa4 %fa5 %fa6 %fa7 %fs2 %fs3 %fs4 %fs5 %fs6 %fs7 %fs8 %fs9 %fs10 %fs11 %ft8 %ft9 %ft10 %ft11 ]
assigning %vreg30 to %ft1: ft1

selectOrSplit GR32Bit:%vreg31 [424r,432r:0)  0@424r
assigning %vreg31 to %fp: fp

selectOrSplit GR32Bit:%vreg35 [32r,40r:0)  0@32r
assigning %vreg35 to %t1: t1

selectOrSplit GR32Bit:%vreg36 [40r,48r:0)  0@40r
assigning %vreg36 to %t1: t1

selectOrSplit GR32Bit:%vreg40 [72r,80r:0)  0@72r
assigning %vreg40 to %fp: fp

selectOrSplit GR32Bit:%vreg42 [88r,96r:0)  0@88r
assigning %vreg42 to %a0: a0

selectOrSplit GR32Bit:%vreg44 [104r,112r:0)  0@104r
assigning %vreg44 to %a1: a1

selectOrSplit GR32Bit:%vreg46 [120r,128r:0)  0@120r
assigning %vreg46 to %a1: a1

selectOrSplit GR32Bit:%vreg47 [128r,136r:0)  0@128r
assigning %vreg47 to %fp: fp

selectOrSplit GR32Bit:%vreg48 [136r,144r:0)  0@136r
assigning %vreg48 to %fp: fp

selectOrSplit GR32Bit:%vreg49 [144r,152r:0)  0@144r
assigning %vreg49 to %t2: t2

selectOrSplit GR32Bit:%vreg50 [152r,160r:0)  0@152r
assigning %vreg50 to %t1: t1

selectOrSplit GR32Bit:%vreg54 [812r,820r:0)  0@812r
assigning %vreg54 to %t1: t1

selectOrSplit GR32Bit:%vreg55 [820r,828r:0)  0@820r
assigning %vreg55 to %t1: t1

selectOrSplit GR32Bit:%vreg59 [852r,860r:0)  0@852r
assigning %vreg59 to %fp: fp

selectOrSplit GR32Bit:%vreg61 [868r,876r:0)  0@868r
assigning %vreg61 to %a0: a0

selectOrSplit GR32Bit:%vreg63 [884r,892r:0)  0@884r
assigning %vreg63 to %a1: a1

selectOrSplit GR32Bit:%vreg65 [900r,908r:0)  0@900r
assigning %vreg65 to %a1: a1

selectOrSplit GR32Bit:%vreg66 [908r,916r:0)  0@908r
assigning %vreg66 to %fp: fp

selectOrSplit GR32Bit:%vreg67 [916r,924r:0)  0@916r
assigning %vreg67 to %fp: fp

selectOrSplit GR32Bit:%vreg68 [924r,932r:0)  0@924r
assigning %vreg68 to %t2: t2

selectOrSplit GR32Bit:%vreg69 [932r,940r:0)  0@932r
assigning %vreg69 to %t1: t1

selectOrSplit GR32Bit:%vreg73 [1020r,1028r:0)  0@1020r
assigning %vreg73 to %t2: t2

selectOrSplit GR32Bit:%vreg74 [1028r,1036r:0)  0@1028r
assigning %vreg74 to %t2: t2

selectOrSplit GR32Bit:%vreg78 [1060r,1068r:0)  0@1060r
assigning %vreg78 to %a0: a0

selectOrSplit GR32Bit:%vreg80 [1076r,1084r:0)  0@1076r
assigning %vreg80 to %a1: a1

selectOrSplit GR32Bit:%vreg82 [1092r,1100r:0)  0@1092r
assigning %vreg82 to %a2: a2

selectOrSplit GR32Bit:%vreg84 [1108r,1116r:0)  0@1108r
assigning %vreg84 to %a2: a2

selectOrSplit GR32Bit:%vreg85 [1116r,1124r:0)  0@1116r
assigning %vreg85 to %a0: a0

selectOrSplit GR32Bit:%vreg86 [1124r,1132r:0)  0@1124r
assigning %vreg86 to %a0: a0

selectOrSplit GR32Bit:%vreg87 [1132r,1140r:0)  0@1132r
assigning %vreg87 to %fp: fp

selectOrSplit GR32Bit:%vreg88 [1140r,1148r:0)  0@1140r
assigning %vreg88 to %t2: t2

selectOrSplit GR32Bit:%vreg92 [1196r,1204r:0)  0@1196r
assigning %vreg92 to %t2: t2

selectOrSplit GR32Bit:%vreg93 [1204r,1212r:0)  0@1204r
assigning %vreg93 to %t2: t2

selectOrSplit GR32Bit:%vreg97 [1236r,1244r:0)  0@1236r
assigning %vreg97 to %a0: a0

selectOrSplit GR32Bit:%vreg99 [1252r,1260r:0)  0@1252r
assigning %vreg99 to %a1: a1

selectOrSplit GR32Bit:%vreg101 [1268r,1276r:0)  0@1268r
assigning %vreg101 to %a2: a2

selectOrSplit GR32Bit:%vreg103 [1284r,1292r:0)  0@1284r
assigning %vreg103 to %a2: a2

selectOrSplit GR32Bit:%vreg104 [1292r,1300r:0)  0@1292r
assigning %vreg104 to %a0: a0

selectOrSplit GR32Bit:%vreg105 [1300r,1308r:0)  0@1300r
assigning %vreg105 to %a0: a0

selectOrSplit GR32Bit:%vreg106 [1308r,1316r:0)  0@1308r
assigning %vreg106 to %fp: fp

selectOrSplit GR32Bit:%vreg107 [1316r,1324r:0)  0@1316r
assigning %vreg107 to %t2: t2

selectOrSplit GR32Bit:%vreg109 [580r,588r:0)  0@580r
assigning %vreg109 to %t1: t1

selectOrSplit GR32Bit:%vreg111 [604r,612r:0)  0@604r
assigning %vreg111 to %t2: t2

selectOrSplit GR32Bit:%vreg112 [612r,620r:0)  0@612r
assigning %vreg112 to %t2: t2

selectOrSplit GR32Bit:%vreg116 [644r,652r:0)  0@644r
assigning %vreg116 to %a0: a0

selectOrSplit GR32Bit:%vreg118 [660r,668r:0)  0@660r
assigning %vreg118 to %a1: a1

selectOrSplit GR32Bit:%vreg120 [676r,684r:0)  0@676r
assigning %vreg120 to %a2: a2

selectOrSplit GR32Bit:%vreg122 [692r,700r:0)  0@692r
assigning %vreg122 to %a2: a2

selectOrSplit GR32Bit:%vreg123 [700r,708r:0)  0@700r
assigning %vreg123 to %a0: a0

selectOrSplit GR32Bit:%vreg124 [708r,716r:0)  0@708r
assigning %vreg124 to %a0: a0

selectOrSplit GR32Bit:%vreg125 [716r,724r:0)  0@716r
assigning %vreg125 to %fp: fp

selectOrSplit GR32Bit:%vreg126 [724r,732r:0)  0@724r
assigning %vreg126 to %t2: t2

selectOrSplit GR32Bit:%vreg128 [740r,748r:0)  0@740r
assigning %vreg128 to %t2: t2

selectOrSplit GR32Bit:%vreg129 [756r,764r:0)  0@756r
assigning %vreg129 to %t1: t1

selectOrSplit GR32Bit:%vreg130 [948r,956r:0)  0@948r
assigning %vreg130 to %t0: t0

selectOrSplit GR32Bit:%vreg132 [964r,972r:0)  0@964r
assigning %vreg132 to %t1: t1
********** REWRITE VIRTUAL REGISTERS **********
********** Function: redefine_start1
********** REGISTER MAP **********
[%vreg0 -> %a0] GR32Bit
[%vreg1 -> %t2] GR32Bit
[%vreg2 -> %t1] GR32Bit
[%vreg3 -> %t1] GR32Bit
[%vreg4 -> %fp] GR32Bit
[%vreg5 -> %t1] GR32Bit
[%vreg6 -> %t2] GR32Bit
[%vreg7 -> %t1] GR32Bit
[%vreg8 -> %fp] GR32Bit
[%vreg9 -> %t2] GR32Bit
[%vreg10 -> %fp] GR32Bit
[%vreg11 -> %t2] GR32Bit
[%vreg12 -> %t0] GR32Bit
[%vreg13 -> %t1] GR32Bit
[%vreg14 -> %fp] GR32Bit
[%vreg15 -> %t1] GR32Bit
[%vreg16 -> %t0] GR32Bit
[%vreg17 -> %t1] GR32Bit
[%vreg18 -> %t0] GR32Bit
[%vreg19 -> %t0] GR32Bit
[%vreg20 -> %t1] GR32Bit
[%vreg21 -> %t0] GR32Bit
[%vreg22 -> %t1] GR32Bit
[%vreg23 -> %t2] GR32Bit
[%vreg24 -> %t1] GR32Bit
[%vreg25 -> %t2] GR32Bit
[%vreg26 -> %fp] GR32Bit
[%vreg27 -> %t2] GR32Bit
[%vreg28 -> %t1] GR32Bit
[%vreg29 -> %fp] GR32Bit
[%vreg30 -> %ft1] FP32Bit
[%vreg31 -> %fp] GR32Bit
[%vreg34 -> %t0] GR32Bit
[%vreg35 -> %t1] GR32Bit
[%vreg36 -> %t1] GR32Bit
[%vreg37 -> %t0] GR32Bit
[%vreg38 -> %t1] GR32Bit
[%vreg39 -> %t2] GR32Bit
[%vreg40 -> %fp] GR32Bit
[%vreg41 -> %fp] GR32Bit
[%vreg42 -> %a0] GR32Bit
[%vreg43 -> %a0] GR32Bit
[%vreg44 -> %a1] GR32Bit
[%vreg45 -> %t2] GR32Bit
[%vreg46 -> %a1] GR32Bit
[%vreg47 -> %fp] GR32Bit
[%vreg48 -> %fp] GR32Bit
[%vreg49 -> %t2] GR32Bit
[%vreg50 -> %t1] GR32Bit
[%vreg53 -> %t0] GR32Bit
[%vreg54 -> %t1] GR32Bit
[%vreg55 -> %t1] GR32Bit
[%vreg56 -> %t0] GR32Bit
[%vreg57 -> %t1] GR32Bit
[%vreg58 -> %t2] GR32Bit
[%vreg59 -> %fp] GR32Bit
[%vreg60 -> %fp] GR32Bit
[%vreg61 -> %a0] GR32Bit
[%vreg62 -> %a0] GR32Bit
[%vreg63 -> %a1] GR32Bit
[%vreg64 -> %t2] GR32Bit
[%vreg65 -> %a1] GR32Bit
[%vreg66 -> %fp] GR32Bit
[%vreg67 -> %fp] GR32Bit
[%vreg68 -> %t2] GR32Bit
[%vreg69 -> %t1] GR32Bit
[%vreg72 -> %t1] GR32Bit
[%vreg73 -> %t2] GR32Bit
[%vreg74 -> %t2] GR32Bit
[%vreg75 -> %t1] GR32Bit
[%vreg76 -> %t2] GR32Bit
[%vreg77 -> %fp] GR32Bit
[%vreg78 -> %a0] GR32Bit
[%vreg79 -> %a0] GR32Bit
[%vreg80 -> %a1] GR32Bit
[%vreg81 -> %a1] GR32Bit
[%vreg82 -> %a2] GR32Bit
[%vreg83 -> %fp] GR32Bit
[%vreg84 -> %a2] GR32Bit
[%vreg85 -> %a0] GR32Bit
[%vreg86 -> %a0] GR32Bit
[%vreg87 -> %fp] GR32Bit
[%vreg88 -> %t2] GR32Bit
[%vreg91 -> %t1] GR32Bit
[%vreg92 -> %t2] GR32Bit
[%vreg93 -> %t2] GR32Bit
[%vreg94 -> %t1] GR32Bit
[%vreg95 -> %t2] GR32Bit
[%vreg96 -> %fp] GR32Bit
[%vreg97 -> %a0] GR32Bit
[%vreg98 -> %a0] GR32Bit
[%vreg99 -> %a1] GR32Bit
[%vreg100 -> %a1] GR32Bit
[%vreg101 -> %a2] GR32Bit
[%vreg102 -> %fp] GR32Bit
[%vreg103 -> %a2] GR32Bit
[%vreg104 -> %a0] GR32Bit
[%vreg105 -> %a0] GR32Bit
[%vreg106 -> %fp] GR32Bit
[%vreg107 -> %t2] GR32Bit
[%vreg108 -> %t0] GR32Bit
[%vreg109 -> %t1] GR32Bit
[%vreg110 -> %t1] GR32Bit
[%vreg111 -> %t2] GR32Bit
[%vreg112 -> %t2] GR32Bit
[%vreg113 -> %t1] GR32Bit
[%vreg114 -> %t2] GR32Bit
[%vreg115 -> %fp] GR32Bit
[%vreg116 -> %a0] GR32Bit
[%vreg117 -> %a0] GR32Bit
[%vreg118 -> %a1] GR32Bit
[%vreg119 -> %a1] GR32Bit
[%vreg120 -> %a2] GR32Bit
[%vreg121 -> %fp] GR32Bit
[%vreg122 -> %a2] GR32Bit
[%vreg123 -> %a0] GR32Bit
[%vreg124 -> %a0] GR32Bit
[%vreg125 -> %fp] GR32Bit
[%vreg126 -> %t2] GR32Bit
[%vreg127 -> %t1] GR32Bit
[%vreg128 -> %t2] GR32Bit
[%vreg129 -> %t1] GR32Bit
[%vreg130 -> %t0] GR32Bit
[%vreg131 -> %t0] GR32Bit
[%vreg132 -> %t1] GR32Bit

0B	BB#0: derived from LLVM BB %redefine_start1.return
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg34<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg34
4B		  * %vreg35<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg35
4B		  * %vreg36<def> = SRLI %vreg35<kill>, 12; GR32Bit:%vreg36,%vreg35
4B		  * %vreg37<def> = ADD %vreg34<kill>, %vreg36<kill>; GR32Bit:%vreg37,%vreg34,%vreg36
4B		  * %vreg38<def> = ADDI %zero, 28; GR32Bit:%vreg38
4B		  * %vreg39<def> = SRLI %t5, 22; GR32Bit:%vreg39
4B		  * %vreg40<def> = SRLI %t5, 12; GR32Bit:%vreg40
4B		  * %vreg41<def> = ANDI %vreg40<kill>, 15; GR32Bit:%vreg41,%vreg40
4B		  * %vreg42<def> = SRLI %t5, 6; GR32Bit:%vreg42
4B		  * %vreg43<def> = ANDI %vreg42<kill>, 63; GR32Bit:%vreg43,%vreg42
4B		  * %vreg44<def> = ADDI %zero, 832; GR32Bit:%vreg44
4B		  * %vreg45<def> = MUL %vreg39<kill>, %vreg44<kill>; GR32Bit:%vreg45,%vreg39,%vreg44
4B		  * %vreg46<def> = ADDI %zero, 52; GR32Bit:%vreg46
4B		  * %vreg47<def> = MUL %vreg41<kill>, %vreg46<kill>; GR32Bit:%vreg47,%vreg41,%vreg46
4B		  * %vreg48<def> = ADD %vreg47<kill>, %vreg43<kill>; GR32Bit:%vreg48,%vreg47,%vreg43
4B		  * %vreg49<def> = ADD %vreg48<kill>, %vreg45<kill>; GR32Bit:%vreg49,%vreg48,%vreg45
4B		  * %vreg50<def> = MUL %vreg49<kill>, %vreg38<kill>; GR32Bit:%vreg50,%vreg49,%vreg38
4B		  * %t5<def> = ADD %vreg37<kill>, %vreg50<kill>; GR32Bit:%vreg37,%vreg50
4B		  * %vreg19<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg19
4B		  * %vreg20<def> = LUI <MCSym="%lo("ga#1280")">; GR32Bit:%vreg20
4B		  * SRLI %vreg20, %vreg20, 12; GR32Bit:%vreg20
4B		  * %vreg21<def> = ADD %vreg20<kill>, %vreg19<kill>; GR32Bit:%vreg21,%vreg20,%vreg19
4B		  * SW %zero, %vreg21, 0; mem:ST4[%5] GR32Bit:%vreg21
4B		  * %vreg2<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg2
4B		  * SRLI %vreg2, %vreg2, 12; GR32Bit:%vreg2
4B		  * %vreg1<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg1
4B		  * %vreg4<def> = LUI 258457; GR32Bit:%vreg4
4B		  * %a5<def> = LUI 2458
4B		  * %a5<def> = SRLI %a5<internal>, 12
4B		  * ADD %vreg4, %vreg4, %a5; GR32Bit:%vreg4
4B		  * %vreg3<def> = ADD %vreg2<kill>, %vreg1<kill>; GR32Bit:%vreg3,%vreg2,%vreg1
4B		  * SW %vreg4<kill>, %vreg3<kill>, 0; mem:ST4[%0] GR32Bit:%vreg4,%vreg3
4B		  * %vreg5<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg5
4B		  * %vreg6<def> = LUI <MCSym="%lo("ga#256")">; GR32Bit:%vreg6
4B		  * SRLI %vreg6, %vreg6, 12; GR32Bit:%vreg6
4B		  * %vreg8<def> = LUI 259686; GR32Bit:%vreg8
4B		  * %a5<def> = LUI 1638
4B		  * %a5<def> = SRLI %a5<internal>, 12
4B		  * ADD %vreg8, %vreg8, %a5; GR32Bit:%vreg8
4B		  * %vreg7<def> = ADD %vreg6<kill>, %vreg5<kill>; GR32Bit:%vreg7,%vreg6,%vreg5
4B		  * SW %vreg8<kill>, %vreg7<kill>, 0; mem:ST4[%1] GR32Bit:%vreg8,%vreg7
4B		  * %vreg22<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg22
4B		  * %vreg23<def> = LUI <MCSym="%lo("ga#1536")">; GR32Bit:%vreg23
4B		  * SRLI %vreg23, %vreg23, 12; GR32Bit:%vreg23
4B		  * %vreg24<def> = ADD %vreg23<kill>, %vreg22<kill>; GR32Bit:%vreg24,%vreg23,%vreg22
4B		  * SW %zero, %vreg24, 0; mem:ST4[%6] GR32Bit:%vreg24
4B		  * %vreg9<def> = LUI <ga:@NH_STARTER_SHUTOFF>[TF=2]; GR32Bit:%vreg9
4B		  * %vreg10<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg10
4B		  * SRLI %vreg10, %vreg10, 12; GR32Bit:%vreg10
4B		  * %vreg0<def> = LUI 4; GR32Bit:%vreg0
4B		  * %a5<def> = LUI 616
4B		  * %a5<def> = SRLI %a5<internal>, 12
4B		  * ADD %vreg0, %vreg0, %a5; GR32Bit:%vreg0
4B		  * %vreg11<def> = ADD %vreg10<kill>, %vreg9<kill>; GR32Bit:%vreg11,%vreg10,%vreg9
4B		  * SW %vreg0<kill>, %vreg11<kill>, 0; mem:ST4[%2] GR32Bit:%vreg0,%vreg11
4B		  * %vreg25<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg25
4B		  * %vreg26<def> = LUI <MCSym="%lo("ga#1792")">; GR32Bit:%vreg26
4B		  * SRLI %vreg26, %vreg26, 12; GR32Bit:%vreg26
4B		  * %vreg27<def> = ADD %vreg26<kill>, %vreg25<kill>; GR32Bit:%vreg27,%vreg26,%vreg25
4B		  * %vreg31<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg31
4B		  * SW %vreg27, %vreg31<kill>, 0; mem:ST4[%7] GR32Bit:%vreg27,%vreg31
4B		  * %vreg29<def> = LW %vreg27, 16; mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4)] GR32Bit:%vreg29,%vreg27
4B		  * SW %vreg29<kill>, %vreg21<kill>, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg29,%vreg21
4B		  * %vreg30<def> = FLW %vreg27, 20; mem:LD4[bitcast (i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 5) to float*)] FP32Bit:%vreg30 GR32Bit:%vreg27
4B		  * FSW %vreg30<kill>, %vreg24<kill>, 0; mem:ST4[@nh_fin_de_rampe] FP32Bit:%vreg30 GR32Bit:%vreg24
4B		  * %vreg13<def> = LUI <ga:@SG_MAX_RPM>[TF=2]; GR32Bit:%vreg13
4B		  * %vreg12<def> = LUI 3; GR32Bit:%vreg12
4B		  * %a5<def> = LUI 2712
4B		  * %a5<def> = SRLI %a5<internal>, 12
4B		  * ADD %vreg12, %vreg12, %a5; GR32Bit:%vreg12
4B		  * %vreg14<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg14
4B		  * SRLI %vreg14, %vreg14, 12; GR32Bit:%vreg14
4B		  * %vreg15<def> = ADD %vreg14<kill>, %vreg13<kill>; GR32Bit:%vreg15,%vreg14,%vreg13
4B		  * SW %vreg12<kill>, %vreg15<kill>, 0; mem:ST4[%3] GR32Bit:%vreg12,%vreg15
4B		  * %vreg16<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg16
4B		  * %vreg17<def> = LUI <MCSym="%lo("ga#1024")">; GR32Bit:%vreg17
4B		  * SRLI %vreg17, %vreg17, 12; GR32Bit:%vreg17
4B		  * %vreg18<def> = ADD %vreg17<kill>, %vreg16<kill>; GR32Bit:%vreg18,%vreg17,%vreg16
4B		  * SW %zero, %vreg18, 0; mem:ST4[%4] GR32Bit:%vreg18
4B		  * %vreg28<def> = LW %vreg27<kill>, 12; mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3)] GR32Bit:%vreg28,%vreg27
4B		  * SW %vreg28<kill>, %vreg18<kill>, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg28,%vreg18
4B		  * %vreg108<def> = ADDI %zero, 64; GR32Bit:%vreg108
4B		  * %vreg109<def> = ADDI %zero, 1; GR32Bit:%vreg109
4B		  * WRITECM %vreg108, %vreg109<kill>, 60; GR32Bit:%vreg108,%vreg109
4B		  * %vreg110<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg110
4B		  * %vreg111<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg111
4B		  * %vreg112<def> = SRLI %vreg111<kill>, 12; GR32Bit:%vreg112,%vreg111
4B		  * %vreg113<def> = ADD %vreg110<kill>, %vreg112<kill>; GR32Bit:%vreg113,%vreg110,%vreg112
4B		  * %vreg114<def> = ADDI %zero, 28; GR32Bit:%vreg114
4B		  * %vreg115<def> = SRLI %vreg108, 22; GR32Bit:%vreg115,%vreg108
4B		  * %vreg116<def> = SRLI %vreg108, 12; GR32Bit:%vreg116,%vreg108
4B		  * %vreg117<def> = ANDI %vreg116<kill>, 15; GR32Bit:%vreg117,%vreg116
4B		  * %vreg118<def> = SRLI %vreg108, 6; GR32Bit:%vreg118,%vreg108
4B		  * %vreg119<def> = ANDI %vreg118<kill>, 63; GR32Bit:%vreg119,%vreg118
4B		  * %vreg120<def> = ADDI %zero, 832; GR32Bit:%vreg120
4B		  * %vreg121<def> = MUL %vreg115<kill>, %vreg120<kill>; GR32Bit:%vreg121,%vreg115,%vreg120
4B		  * %vreg122<def> = ADDI %zero, 52; GR32Bit:%vreg122
4B		  * %vreg123<def> = MUL %vreg117<kill>, %vreg122<kill>; GR32Bit:%vreg123,%vreg117,%vreg122
4B		  * %vreg124<def> = ADD %vreg123<kill>, %vreg119<kill>; GR32Bit:%vreg124,%vreg123,%vreg119
4B		  * %vreg125<def> = ADD %vreg124<kill>, %vreg121<kill>; GR32Bit:%vreg125,%vreg124,%vreg121
4B		  * %vreg126<def> = MUL %vreg125<kill>, %vreg114<kill>; GR32Bit:%vreg126,%vreg125,%vreg114
4B		  * %vreg127<def> = ADD %vreg126<kill>, %vreg113<kill>; GR32Bit:%vreg127,%vreg126,%vreg113
4B		  * %vreg128<def> = LW %t5, 0; GR32Bit:%vreg128
4B		  * SW %vreg128<kill>, %vreg127<kill>, 24; GR32Bit:%vreg128,%vreg127
4B		  * %vreg129<def> = LUI 1; GR32Bit:%vreg129
4B		  * WRITEPM %vreg129<kill>, %vreg108<kill>, 0; GR32Bit:%vreg129,%vreg108
4B		  * END 0
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
796B		%t4<def> = ADD %t5, %zero
796B		  * %vreg53<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg53
796B		  * %vreg54<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg54
796B		  * %vreg55<def> = SRLI %vreg54<kill>, 12; GR32Bit:%vreg55,%vreg54
796B		  * %vreg56<def> = ADD %vreg53<kill>, %vreg55<kill>; GR32Bit:%vreg56,%vreg53,%vreg55
796B		  * %vreg57<def> = ADDI %zero, 28; GR32Bit:%vreg57
796B		  * %vreg58<def> = SRLI %t5, 22; GR32Bit:%vreg58
796B		  * %vreg59<def> = SRLI %t5, 12; GR32Bit:%vreg59
796B		  * %vreg60<def> = ANDI %vreg59<kill>, 15; GR32Bit:%vreg60,%vreg59
796B		  * %vreg61<def> = SRLI %t5, 6; GR32Bit:%vreg61
796B		  * %vreg62<def> = ANDI %vreg61<kill>, 63; GR32Bit:%vreg62,%vreg61
796B		  * %vreg63<def> = ADDI %zero, 832; GR32Bit:%vreg63
796B		  * %vreg64<def> = MUL %vreg58<kill>, %vreg63<kill>; GR32Bit:%vreg64,%vreg58,%vreg63
796B		  * %vreg65<def> = ADDI %zero, 52; GR32Bit:%vreg65
796B		  * %vreg66<def> = MUL %vreg60<kill>, %vreg65<kill>; GR32Bit:%vreg66,%vreg60,%vreg65
796B		  * %vreg67<def> = ADD %vreg66<kill>, %vreg62<kill>; GR32Bit:%vreg67,%vreg66,%vreg62
796B		  * %vreg68<def> = ADD %vreg67<kill>, %vreg64<kill>; GR32Bit:%vreg68,%vreg67,%vreg64
796B		  * %vreg69<def> = MUL %vreg68<kill>, %vreg57<kill>; GR32Bit:%vreg69,%vreg68,%vreg57
796B		  * %t5<def> = ADD %vreg56<kill>, %vreg69<kill>; GR32Bit:%vreg56,%vreg69
796B		  * %vreg130<def> = LUI 1; GR32Bit:%vreg130
796B		  * %vreg131<def> = DREADPM %vreg130<kill>, 0; GR32Bit:%vreg131,%vreg130
796B		  * %vreg132<def> = LUI 1048575; GR32Bit:%vreg132
796B		  * %a5<def> = LUI 4095
796B		  * %a5<def> = SRLI %a5<internal>, 12
796B		  * ADD %vreg132, %vreg132, %a5; GR32Bit:%vreg132
796B		  * SYNC %vreg131, %vreg132<kill>, 60; GR32Bit:%vreg131,%vreg132
796B		  * END 0
796B		  * %zero<def> = ADDI %zero, 0
796B		  * %zero<def> = ADDI %zero, 0
1004B		%t4<def> = ADD %t5, %zero
1004B		  * %vreg72<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg72
1004B		  * %vreg73<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg73
1004B		  * %vreg74<def> = SRLI %vreg73<kill>, 12; GR32Bit:%vreg74,%vreg73
1004B		  * %vreg75<def> = ADD %vreg72<kill>, %vreg74<kill>; GR32Bit:%vreg75,%vreg72,%vreg74
1004B		  * %vreg76<def> = ADDI %zero, 28; GR32Bit:%vreg76
1004B		  * %vreg77<def> = SRLI %t5, 22; GR32Bit:%vreg77
1004B		  * %vreg78<def> = SRLI %t5, 12; GR32Bit:%vreg78
1004B		  * %vreg79<def> = ANDI %vreg78<kill>, 15; GR32Bit:%vreg79,%vreg78
1004B		  * %vreg80<def> = SRLI %t5, 6; GR32Bit:%vreg80
1004B		  * %vreg81<def> = ANDI %vreg80<kill>, 63; GR32Bit:%vreg81,%vreg80
1004B		  * %vreg82<def> = ADDI %zero, 832; GR32Bit:%vreg82
1004B		  * %vreg83<def> = MUL %vreg77<kill>, %vreg82<kill>; GR32Bit:%vreg83,%vreg77,%vreg82
1004B		  * %vreg84<def> = ADDI %zero, 52; GR32Bit:%vreg84
1004B		  * %vreg85<def> = MUL %vreg79<kill>, %vreg84<kill>; GR32Bit:%vreg85,%vreg79,%vreg84
1004B		  * %vreg86<def> = ADD %vreg85<kill>, %vreg81<kill>; GR32Bit:%vreg86,%vreg85,%vreg81
1004B		  * %vreg87<def> = ADD %vreg86<kill>, %vreg83<kill>; GR32Bit:%vreg87,%vreg86,%vreg83
1004B		  * %vreg88<def> = MUL %vreg87<kill>, %vreg76<kill>; GR32Bit:%vreg88,%vreg87,%vreg76
1004B		  * %t5<def> = ADD %vreg75<kill>, %vreg88<kill>; GR32Bit:%vreg75,%vreg88
1004B		  * END 0
1004B		  * %zero<def> = ADDI %zero, 0
1004B		  * %zero<def> = ADDI %zero, 0
1180B		%t4<def> = ADD %t5, %zero
1180B		  * %vreg91<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg91
1180B		  * %vreg92<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg92
1180B		  * %vreg93<def> = SRLI %vreg92<kill>, 12; GR32Bit:%vreg93,%vreg92
1180B		  * %vreg94<def> = ADD %vreg91<kill>, %vreg93<kill>; GR32Bit:%vreg94,%vreg91,%vreg93
1180B		  * %vreg95<def> = ADDI %zero, 28; GR32Bit:%vreg95
1180B		  * %vreg96<def> = SRLI %t5, 22; GR32Bit:%vreg96
1180B		  * %vreg97<def> = SRLI %t5, 12; GR32Bit:%vreg97
1180B		  * %vreg98<def> = ANDI %vreg97<kill>, 15; GR32Bit:%vreg98,%vreg97
1180B		  * %vreg99<def> = SRLI %t5, 6; GR32Bit:%vreg99
1180B		  * %vreg100<def> = ANDI %vreg99<kill>, 63; GR32Bit:%vreg100,%vreg99
1180B		  * %vreg101<def> = ADDI %zero, 832; GR32Bit:%vreg101
1180B		  * %vreg102<def> = MUL %vreg96<kill>, %vreg101<kill>; GR32Bit:%vreg102,%vreg96,%vreg101
1180B		  * %vreg103<def> = ADDI %zero, 52; GR32Bit:%vreg103
1180B		  * %vreg104<def> = MUL %vreg98<kill>, %vreg103<kill>; GR32Bit:%vreg104,%vreg98,%vreg103
1180B		  * %vreg105<def> = ADD %vreg104<kill>, %vreg100<kill>; GR32Bit:%vreg105,%vreg104,%vreg100
1180B		  * %vreg106<def> = ADD %vreg105<kill>, %vreg102<kill>; GR32Bit:%vreg106,%vreg105,%vreg102
1180B		  * %vreg107<def> = MUL %vreg106<kill>, %vreg95<kill>; GR32Bit:%vreg107,%vreg106,%vreg95
1180B		  * %t5<def> = ADD %vreg94<kill>, %vreg107<kill>; GR32Bit:%vreg94,%vreg107
1180B		  * END 0
1180B		  * %zero<def> = ADDI %zero, 0
1180B		  * %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#2560")">
> %t1<def> = LUI <MCSym="%lo("ga#2560")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 28
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = LUI <ga:@glob_sg_bit1>[TF=2]
> %t1<def> = LUI <MCSym="%lo("ga#1280")">
> SRLI %t1, %t1, 12
> %t0<def> = ADD %t1<kill>, %t0<kill>
> SW %zero, %t0, 0; mem:ST4[%5]
> %t1<def> = LUI <MCSym="%lo("ga#0")">
> SRLI %t1, %t1, 12
> %t2<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]
> %fp<def> = LUI 258457
> %a5<def> = LUI 2458
> %a5<def> = SRLI %a5<internal>, 12
> ADD %fp, %fp, %a5
> %t1<def> = ADD %t1<kill>, %t2<kill>
> SW %fp<kill>, %t1<kill>, 0; mem:ST4[%0]
> %t1<def> = LUI <ga:@SG_MAX>[TF=2]
> %t2<def> = LUI <MCSym="%lo("ga#256")">
> SRLI %t2, %t2, 12
> %fp<def> = LUI 259686
> %a5<def> = LUI 1638
> %a5<def> = SRLI %a5<internal>, 12
> ADD %fp, %fp, %a5
> %t1<def> = ADD %t2<kill>, %t1<kill>
> SW %fp<kill>, %t1<kill>, 0; mem:ST4[%1]
> %t1<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]
> %t2<def> = LUI <MCSym="%lo("ga#1536")">
> SRLI %t2, %t2, 12
> %t1<def> = ADD %t2<kill>, %t1<kill>
> SW %zero, %t1, 0; mem:ST4[%6]
> %t2<def> = LUI <ga:@NH_STARTER_SHUTOFF>[TF=2]
> %fp<def> = LUI <MCSym="%lo("ga#512")">
> SRLI %fp, %fp, 12
> %a0<def> = LUI 4
> %a5<def> = LUI 616
> %a5<def> = SRLI %a5<internal>, 12
> ADD %a0, %a0, %a5
> %t2<def> = ADD %fp<kill>, %t2<kill>
> SW %a0<kill>, %t2<kill>, 0; mem:ST4[%2]
> %t2<def> = LUI <ga:@redefine_in_a>[TF=2]
> %fp<def> = LUI <MCSym="%lo("ga#1792")">
> SRLI %fp, %fp, 12
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %fp<def> = ADDI %t5, <fi#0>
> SW %t2, %fp<kill>, 0; mem:ST4[%7]
> %fp<def> = LW %t2, 16; mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4)]
> SW %fp<kill>, %t0<kill>, 0; mem:ST4[@glob_sg_bit1]
> %ft1<def> = FLW %t2, 20; mem:LD4[bitcast (i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 5) to float*)]
> FSW %ft1<kill>, %t1<kill>, 0; mem:ST4[@nh_fin_de_rampe]
> %t1<def> = LUI <ga:@SG_MAX_RPM>[TF=2]
> %t0<def> = LUI 3
> %a5<def> = LUI 2712
> %a5<def> = SRLI %a5<internal>, 12
> ADD %t0, %t0, %a5
> %fp<def> = LUI <MCSym="%lo("ga#768")">
> SRLI %fp, %fp, 12
> %t1<def> = ADD %fp<kill>, %t1<kill>
> SW %t0<kill>, %t1<kill>, 0; mem:ST4[%3]
> %t0<def> = LUI <ga:@glob_sg_bit0>[TF=2]
> %t1<def> = LUI <MCSym="%lo("ga#1024")">
> SRLI %t1, %t1, 12
> %t0<def> = ADD %t1<kill>, %t0<kill>
> SW %zero, %t0, 0; mem:ST4[%4]
> %t1<def> = LW %t2<kill>, 12; mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3)]
> SW %t1<kill>, %t0<kill>, 0; mem:ST4[@glob_sg_bit0]
> %t0<def> = ADDI %zero, 64
> %t1<def> = ADDI %zero, 1
> WRITECM %t0, %t1<kill>, 60
> %t1<def> = LUI <MCSym="%hi("ga#2560")">
> %t2<def> = LUI <MCSym="%lo("ga#2560")">
> %t2<def> = SRLI %t2<kill>, 12
> %t1<def> = ADD %t1<kill>, %t2<kill>
> %t2<def> = ADDI %zero, 28
> %fp<def> = SRLI %t0, 22
> %a0<def> = SRLI %t0, 12
> %a0<def> = ANDI %a0<kill>, 15
> %a1<def> = SRLI %t0, 6
> %a1<def> = ANDI %a1<kill>, 63
> %a2<def> = ADDI %zero, 832
> %fp<def> = MUL %fp<kill>, %a2<kill>
> %a2<def> = ADDI %zero, 52
> %a0<def> = MUL %a0<kill>, %a2<kill>
> %a0<def> = ADD %a0<kill>, %a1<kill>
> %fp<def> = ADD %a0<kill>, %fp<kill>
> %t2<def> = MUL %fp<kill>, %t2<kill>
> %t1<def> = ADD %t2<kill>, %t1<kill>
> %t2<def> = LW %t5, 0
> SW %t2<kill>, %t1<kill>, 24
> %t1<def> = LUI 1
> WRITEPM %t1<kill>, %t0<kill>, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#2560")">
> %t1<def> = LUI <MCSym="%lo("ga#2560")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 28
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = LUI 1
> %t0<def> = DREADPM %t0<kill>, 0
> %t1<def> = LUI 1048575
> %a5<def> = LUI 4095
> %a5<def> = SRLI %a5<internal>, 12
> ADD %t1, %t1, %a5
> SYNC %t0, %t1<kill>, 60
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t1<def> = LUI <MCSym="%hi("ga#2560")">
> %t2<def> = LUI <MCSym="%lo("ga#2560")">
> %t2<def> = SRLI %t2<kill>, 12
> %t1<def> = ADD %t1<kill>, %t2<kill>
> %t2<def> = ADDI %zero, 28
> %fp<def> = SRLI %t5, 22
> %a0<def> = SRLI %t5, 12
> %a0<def> = ANDI %a0<kill>, 15
> %a1<def> = SRLI %t5, 6
> %a1<def> = ANDI %a1<kill>, 63
> %a2<def> = ADDI %zero, 832
> %fp<def> = MUL %fp<kill>, %a2<kill>
> %a2<def> = ADDI %zero, 52
> %a0<def> = MUL %a0<kill>, %a2<kill>
> %a0<def> = ADD %a0<kill>, %a1<kill>
> %fp<def> = ADD %a0<kill>, %fp<kill>
> %t2<def> = MUL %fp<kill>, %t2<kill>
> %t5<def> = ADD %t1<kill>, %t2<kill>
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t1<def> = LUI <MCSym="%hi("ga#2560")">
> %t2<def> = LUI <MCSym="%lo("ga#2560")">
> %t2<def> = SRLI %t2<kill>, 12
> %t1<def> = ADD %t1<kill>, %t2<kill>
> %t2<def> = ADDI %zero, 28
> %fp<def> = SRLI %t5, 22
> %a0<def> = SRLI %t5, 12
> %a0<def> = ANDI %a0<kill>, 15
> %a1<def> = SRLI %t5, 6
> %a1<def> = ANDI %a1<kill>, 63
> %a2<def> = ADDI %zero, 832
> %fp<def> = MUL %fp<kill>, %a2<kill>
> %a2<def> = ADDI %zero, 52
> %a0<def> = MUL %a0<kill>, %a2<kill>
> %a0<def> = ADD %a0<kill>, %a1<kill>
> %fp<def> = ADD %a0<kill>, %fp<kill>
> %t2<def> = MUL %fp<kill>, %t2<kill>
> %t5<def> = ADD %t1<kill>, %t2<kill>
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
********** EMITTING LIVE DEBUG VARIABLES **********
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: redefine_start1
max x:0, min x:0
max y:0, min y:0
current state of mf:# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %redefine_start1.return
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#2560")">
	  * %t1<def> = LUI <MCSym="%lo("ga#2560")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 28
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = LUI <ga:@glob_sg_bit1>[TF=2]
	  * %t1<def> = LUI <MCSym="%lo("ga#1280")">
	  * SRLI %t1, %t1, 12
	  * %t0<def> = ADD %t1<kill>, %t0<kill>
	  * SW %zero, %t0, 0; mem:ST4[%5]
	  * %t1<def> = LUI <MCSym="%lo("ga#0")">
	  * SRLI %t1, %t1, 12
	  * %t2<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]
	  * %fp<def> = LUI 258457
	  * %a5<def> = LUI 2458
	  * %a5<def> = SRLI %a5<internal>, 12
	  * ADD %fp, %fp, %a5
	  * %t1<def> = ADD %t1<kill>, %t2<kill>
	  * SW %fp<kill>, %t1<kill>, 0; mem:ST4[%0]
	  * %t1<def> = LUI <ga:@SG_MAX>[TF=2]
	  * %t2<def> = LUI <MCSym="%lo("ga#256")">
	  * SRLI %t2, %t2, 12
	  * %fp<def> = LUI 259686
	  * %a5<def> = LUI 1638
	  * %a5<def> = SRLI %a5<internal>, 12
	  * ADD %fp, %fp, %a5
	  * %t1<def> = ADD %t2<kill>, %t1<kill>
	  * SW %fp<kill>, %t1<kill>, 0; mem:ST4[%1]
	  * %t1<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]
	  * %t2<def> = LUI <MCSym="%lo("ga#1536")">
	  * SRLI %t2, %t2, 12
	  * %t1<def> = ADD %t2<kill>, %t1<kill>
	  * SW %zero, %t1, 0; mem:ST4[%6]
	  * %t2<def> = LUI <ga:@NH_STARTER_SHUTOFF>[TF=2]
	  * %fp<def> = LUI <MCSym="%lo("ga#512")">
	  * SRLI %fp, %fp, 12
	  * %a0<def> = LUI 4
	  * %a5<def> = LUI 616
	  * %a5<def> = SRLI %a5<internal>, 12
	  * ADD %a0, %a0, %a5
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * SW %a0<kill>, %t2<kill>, 0; mem:ST4[%2]
	  * %t2<def> = LUI <ga:@redefine_in_a>[TF=2]
	  * %fp<def> = LUI <MCSym="%lo("ga#1792")">
	  * SRLI %fp, %fp, 12
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %fp<def> = ADDI %t5, <fi#0>
	  * SW %t2, %fp<kill>, 0; mem:ST4[%7]
	  * %fp<def> = LW %t2, 16; mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 4)]
	  * SW %fp<kill>, %t0<kill>, 0; mem:ST4[@glob_sg_bit1]
	  * %ft1<def> = FLW %t2, 20; mem:LD4[bitcast (i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 5) to float*)]
	  * FSW %ft1<kill>, %t1<kill>, 0; mem:ST4[@nh_fin_de_rampe]
	  * %t1<def> = LUI <ga:@SG_MAX_RPM>[TF=2]
	  * %t0<def> = LUI 3
	  * %a5<def> = LUI 2712
	  * %a5<def> = SRLI %a5<internal>, 12
	  * ADD %t0, %t0, %a5
	  * %fp<def> = LUI <MCSym="%lo("ga#768")">
	  * SRLI %fp, %fp, 12
	  * %t1<def> = ADD %fp<kill>, %t1<kill>
	  * SW %t0<kill>, %t1<kill>, 0; mem:ST4[%3]
	  * %t0<def> = LUI <ga:@glob_sg_bit0>[TF=2]
	  * %t1<def> = LUI <MCSym="%lo("ga#1024")">
	  * SRLI %t1, %t1, 12
	  * %t0<def> = ADD %t1<kill>, %t0<kill>
	  * SW %zero, %t0, 0; mem:ST4[%4]
	  * %t1<def> = LW %t2<kill>, 12; mem:LD4[getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 3)]
	  * SW %t1<kill>, %t0<kill>, 0; mem:ST4[@glob_sg_bit0]
	  * %t0<def> = ADDI %zero, 64
	  * %t1<def> = ADDI %zero, 1
	  * WRITECM %t0, %t1<kill>, 60
	  * %t1<def> = LUI <MCSym="%hi("ga#2560")">
	  * %t2<def> = LUI <MCSym="%lo("ga#2560")">
	  * %t2<def> = SRLI %t2<kill>, 12
	  * %t1<def> = ADD %t1<kill>, %t2<kill>
	  * %t2<def> = ADDI %zero, 28
	  * %fp<def> = SRLI %t0, 22
	  * %a0<def> = SRLI %t0, 12
	  * %a0<def> = ANDI %a0<kill>, 15
	  * %a1<def> = SRLI %t0, 6
	  * %a1<def> = ANDI %a1<kill>, 63
	  * %a2<def> = ADDI %zero, 832
	  * %fp<def> = MUL %fp<kill>, %a2<kill>
	  * %a2<def> = ADDI %zero, 52
	  * %a0<def> = MUL %a0<kill>, %a2<kill>
	  * %a0<def> = ADD %a0<kill>, %a1<kill>
	  * %fp<def> = ADD %a0<kill>, %fp<kill>
	  * %t2<def> = MUL %fp<kill>, %t2<kill>
	  * %t1<def> = ADD %t2<kill>, %t1<kill>
	  * %t2<def> = LW %t5, 0
	  * SW %t2<kill>, %t1<kill>, 24
	  * %t1<def> = LUI 1
	  * WRITEPM %t1<kill>, %t0<kill>, 0
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#2560")">
	  * %t1<def> = LUI <MCSym="%lo("ga#2560")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 28
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = LUI 1
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * %t1<def> = LUI 1048575
	  * %a5<def> = LUI 4095
	  * %a5<def> = SRLI %a5<internal>, 12
	  * ADD %t1, %t1, %a5
	  * SYNC %t0, %t1<kill>, 60
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t1<def> = LUI <MCSym="%hi("ga#2560")">
	  * %t2<def> = LUI <MCSym="%lo("ga#2560")">
	  * %t2<def> = SRLI %t2<kill>, 12
	  * %t1<def> = ADD %t1<kill>, %t2<kill>
	  * %t2<def> = ADDI %zero, 28
	  * %fp<def> = SRLI %t5, 22
	  * %a0<def> = SRLI %t5, 12
	  * %a0<def> = ANDI %a0<kill>, 15
	  * %a1<def> = SRLI %t5, 6
	  * %a1<def> = ANDI %a1<kill>, 63
	  * %a2<def> = ADDI %zero, 832
	  * %fp<def> = MUL %fp<kill>, %a2<kill>
	  * %a2<def> = ADDI %zero, 52
	  * %a0<def> = MUL %a0<kill>, %a2<kill>
	  * %a0<def> = ADD %a0<kill>, %a1<kill>
	  * %fp<def> = ADD %a0<kill>, %fp<kill>
	  * %t2<def> = MUL %fp<kill>, %t2<kill>
	  * %t5<def> = ADD %t1<kill>, %t2<kill>
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t1<def> = LUI <MCSym="%hi("ga#2560")">
	  * %t2<def> = LUI <MCSym="%lo("ga#2560")">
	  * %t2<def> = SRLI %t2<kill>, 12
	  * %t1<def> = ADD %t1<kill>, %t2<kill>
	  * %t2<def> = ADDI %zero, 28
	  * %fp<def> = SRLI %t5, 22
	  * %a0<def> = SRLI %t5, 12
	  * %a0<def> = ANDI %a0<kill>, 15
	  * %a1<def> = SRLI %t5, 6
	  * %a1<def> = ANDI %a1<kill>, 63
	  * %a2<def> = ADDI %zero, 832
	  * %fp<def> = MUL %fp<kill>, %a2<kill>
	  * %a2<def> = ADDI %zero, 52
	  * %a0<def> = MUL %a0<kill>, %a2<kill>
	  * %a0<def> = ADD %a0<kill>, %a1<kill>
	  * %fp<def> = ADD %a0<kill>, %fp<kill>
	  * %t2<def> = MUL %fp<kill>, %t2<kill>
	  * %t5<def> = ADD %t1<kill>, %t2<kill>
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0

# End machine code for function redefine_start1.

lowering frame index for func redefine_start1:0 TO VAL:0
CGP: Found      local addrmode: [Base:%0]
CGP: Found      local addrmode: [Base:@redefine_out_b]
CGP: Found      local addrmode: [Base:@nh_fin_de_rampe]
CGP: Found      local addrmode: [4 + Base:@redefine_out_b]
CGP: Found      local addrmode: [Base:@glob_sg_bit0]
CGP: Found      local addrmode: [Base:@redefine_out_c]
CGP: Found      local addrmode: [Base:@glob_sg_bit1]
CGP: Found      local addrmode: [4 + Base:@redefine_out_c]
Computing probabilities for redefine_start2.return
Computing probabilities for redefine_start2.newName01



=== redefine_start2
visiting load instruction   %1 = load float* %0
I was here to add float* %0
arg match found with argIndex:-1
Argument does not have assigned frame index!
The value is an argument for which I am here to get arg frame index as:0
whats the index?-1
with I type floatand sd value :0x3b7c030: i32 = FrameIndex<-1>
new load?0x3b778c0: f32,ch = load 0x3b57b78, 0x3b7c030, 0x3b7bf30<LD4[%0]>
dag after load is dealt with?SelectionDAG has 6 nodes:
  0x3b7c030: i32 = FrameIndex<-1>

  0x3b7bf30: i32 = undef

    0x3b57b78: <multiple use>
    0x3b7c030: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b79430: i32,ch = load 0x3b57b78, 0x3b7c030, 0x3b7bf30<LD4[FixedStack-1]>

  0x3b77dc0: i32 = Constant<0>

    0x3b57b78: <multiple use>
    0x3b7c030: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b778c0: f32,ch = load 0x3b57b78, 0x3b7c030, 0x3b7bf30<LD4[%0]>

  0x3b57b78: ch = EntryToken


store visit is after?  store float %1, float* getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0), align 4
I was here to add float* getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)
I was here to add @redefine_out_b = common global [2 x float] zeroinitializer, align 4
whats in dag after store?SelectionDAG has 8 nodes:
  0x3b57b78: ch = EntryToken [ORD=28]

  0x3b7c030: i32 = FrameIndex<-1> [ORD=28]

  0x3b7bf30: i32 = undef [ORD=28]

    0x3b57b78: <multiple use>
    0x3b7c030: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b79430: i32,ch = load 0x3b57b78, 0x3b7c030, 0x3b7bf30<LD4[FixedStack-1]>

  0x3b77dc0: i32 = Constant<0>

    0x3b57b78: <multiple use>
      0x3b57b78: <multiple use>
      0x3b7c030: <multiple use>
      0x3b7bf30: <multiple use>
    0x3b778c0: f32,ch = load 0x3b57b78, 0x3b7c030, 0x3b7bf30<LD4[%0]> [ORD=28]

    0x3b777c0: i32 = GlobalAddress<[2 x float]* @redefine_out_b> 0 [ORD=29]

    0x3b7bf30: <multiple use>
  0x3b75690: ch = store 0x3b57b78, 0x3b778c0, 0x3b777c0, 0x3b7bf30<ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)]> [ORD=30]


visiting load instruction   %2 = load float* @nh_fin_de_rampe, align 4
I was here to add @nh_fin_de_rampe = common global float 0.000000e+00, align 4
with I type floatand sd value :0x3b77cc0: i32 = GlobalAddress<float* @nh_fin_de_rampe> 0
new load?0x3b79330: f32,ch = load 0x3b75690, 0x3b77cc0, 0x3b7bf30<LD4[@nh_fin_de_rampe]>
dag after load is dealt with?SelectionDAG has 10 nodes:
  0x3b57b78: ch = EntryToken [ORD=28]

  0x3b7c030: i32 = FrameIndex<-1> [ORD=28]

  0x3b7bf30: i32 = undef [ORD=28]

    0x3b57b78: <multiple use>
    0x3b7c030: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b79430: i32,ch = load 0x3b57b78, 0x3b7c030, 0x3b7bf30<LD4[FixedStack-1]>

  0x3b77dc0: i32 = Constant<0>

      0x3b57b78: <multiple use>
        0x3b57b78: <multiple use>
        0x3b7c030: <multiple use>
        0x3b7bf30: <multiple use>
      0x3b778c0: f32,ch = load 0x3b57b78, 0x3b7c030, 0x3b7bf30<LD4[%0]> [ORD=28]

      0x3b777c0: i32 = GlobalAddress<[2 x float]* @redefine_out_b> 0 [ORD=29]

      0x3b7bf30: <multiple use>
    0x3b75690: ch = store 0x3b57b78, 0x3b778c0, 0x3b777c0, 0x3b7bf30<ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)]> [ORD=30]

    0x3b77cc0: i32 = GlobalAddress<float* @nh_fin_de_rampe> 0

    0x3b7bf30: <multiple use>
  0x3b79330: f32,ch = load 0x3b75690, 0x3b77cc0, 0x3b7bf30<LD4[@nh_fin_de_rampe]>

    0x3b57b78: <multiple use>
      0x3b57b78: <multiple use>
      0x3b7c030: <multiple use>
      0x3b7bf30: <multiple use>
    0x3b778c0: f32,ch = load 0x3b57b78, 0x3b7c030, 0x3b7bf30<LD4[%0]> [ORD=28]

    0x3b777c0: i32 = GlobalAddress<[2 x float]* @redefine_out_b> 0 [ORD=29]

    0x3b7bf30: <multiple use>
  0x3b75690: ch = store 0x3b57b78, 0x3b778c0, 0x3b777c0, 0x3b7bf30<ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)]> [ORD=30]


store visit is after?  store float %2, float* getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1), align 4
I was here to add float* getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)
whats in dag after store?SelectionDAG has 14 nodes:
  0x3b57b78: ch = EntryToken [ORD=28]

  0x3b7c030: i32 = FrameIndex<-1> [ORD=28]

  0x3b7bf30: i32 = undef [ORD=28]

    0x3b57b78: <multiple use>
    0x3b7c030: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b79430: i32,ch = load 0x3b57b78, 0x3b7c030, 0x3b7bf30<LD4[FixedStack-1]>

  0x3b77dc0: i32 = Constant<0>

  0x3b777c0: i32 = GlobalAddress<[2 x float]* @redefine_out_b> 0 [ORD=29]

      0x3b57b78: <multiple use>
        0x3b57b78: <multiple use>
        0x3b7c030: <multiple use>
        0x3b7bf30: <multiple use>
      0x3b778c0: f32,ch = load 0x3b57b78, 0x3b7c030, 0x3b7bf30<LD4[%0]> [ORD=28]

      0x3b777c0: <multiple use>
      0x3b7bf30: <multiple use>
    0x3b75690: ch = store 0x3b57b78, 0x3b778c0, 0x3b777c0, 0x3b7bf30<ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)]> [ORD=30]

    0x3b77cc0: i32 = GlobalAddress<float* @nh_fin_de_rampe> 0 [ORD=31]

    0x3b7bf30: <multiple use>
  0x3b79330: f32,ch = load 0x3b75690, 0x3b77cc0, 0x3b7bf30<LD4[@nh_fin_de_rampe]> [ORD=31]

  0x3b7be30: i64 = Constant<4>

    0x3b79330: <multiple use>
    0x3b79330: <multiple use>
      0x3b777c0: <multiple use>
      0x3b75390: i32 = Constant<4> [ORD=32]

    0x3b79830: i32 = add 0x3b777c0, 0x3b75390 [ORD=32]

    0x3b7bf30: <multiple use>
  0x3b79630: ch = store 0x3b79330:1, 0x3b79330, 0x3b79830, 0x3b7bf30<ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)]> [ORD=33]


visiting load instruction   %3 = load i32* @glob_sg_bit0, align 4
I was here to add @glob_sg_bit0 = common global i32 0, align 4
with I type i32and sd value :0x3b79530: i32 = GlobalAddress<i32* @glob_sg_bit0> 0
new load?0x3b79130: i32,ch = load 0x3b79630, 0x3b79530, 0x3b7bf30<LD4[@glob_sg_bit0]>
dag after load is dealt with?SelectionDAG has 16 nodes:
  0x3b57b78: ch = EntryToken [ORD=28]

  0x3b7c030: i32 = FrameIndex<-1> [ORD=28]

  0x3b7bf30: i32 = undef [ORD=28]

    0x3b57b78: <multiple use>
    0x3b7c030: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b79430: i32,ch = load 0x3b57b78, 0x3b7c030, 0x3b7bf30<LD4[FixedStack-1]>

  0x3b77dc0: i32 = Constant<0>

  0x3b777c0: i32 = GlobalAddress<[2 x float]* @redefine_out_b> 0 [ORD=29]

      0x3b57b78: <multiple use>
        0x3b57b78: <multiple use>
        0x3b7c030: <multiple use>
        0x3b7bf30: <multiple use>
      0x3b778c0: f32,ch = load 0x3b57b78, 0x3b7c030, 0x3b7bf30<LD4[%0]> [ORD=28]

      0x3b777c0: <multiple use>
      0x3b7bf30: <multiple use>
    0x3b75690: ch = store 0x3b57b78, 0x3b778c0, 0x3b777c0, 0x3b7bf30<ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)]> [ORD=30]

    0x3b77cc0: i32 = GlobalAddress<float* @nh_fin_de_rampe> 0 [ORD=31]

    0x3b7bf30: <multiple use>
  0x3b79330: f32,ch = load 0x3b75690, 0x3b77cc0, 0x3b7bf30<LD4[@nh_fin_de_rampe]> [ORD=31]

  0x3b7be30: i64 = Constant<4>

      0x3b79330: <multiple use>
      0x3b79330: <multiple use>
        0x3b777c0: <multiple use>
        0x3b75390: i32 = Constant<4> [ORD=32]

      0x3b79830: i32 = add 0x3b777c0, 0x3b75390 [ORD=32]

      0x3b7bf30: <multiple use>
    0x3b79630: ch = store 0x3b79330:1, 0x3b79330, 0x3b79830, 0x3b7bf30<ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)]> [ORD=33]

    0x3b79530: i32 = GlobalAddress<i32* @glob_sg_bit0> 0

    0x3b7bf30: <multiple use>
  0x3b79130: i32,ch = load 0x3b79630, 0x3b79530, 0x3b7bf30<LD4[@glob_sg_bit0]>

    0x3b79330: <multiple use>
    0x3b79330: <multiple use>
      0x3b777c0: <multiple use>
      0x3b75390: i32 = Constant<4> [ORD=32]

    0x3b79830: i32 = add 0x3b777c0, 0x3b75390 [ORD=32]

    0x3b7bf30: <multiple use>
  0x3b79630: ch = store 0x3b79330:1, 0x3b79330, 0x3b79830, 0x3b7bf30<ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)]> [ORD=33]


store visit is after?  store i32 %3, i32* getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0), align 4
I was here to add i32* getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0)
I was here to add @redefine_out_c = common global [2 x i32] zeroinitializer, align 4
whats in dag after store?SelectionDAG has 18 nodes:
  0x3b57b78: ch = EntryToken [ORD=28]

  0x3b7c030: i32 = FrameIndex<-1> [ORD=28]

  0x3b7bf30: i32 = undef [ORD=28]

    0x3b57b78: <multiple use>
    0x3b7c030: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b79430: i32,ch = load 0x3b57b78, 0x3b7c030, 0x3b7bf30<LD4[FixedStack-1]>

  0x3b77dc0: i32 = Constant<0>

  0x3b777c0: i32 = GlobalAddress<[2 x float]* @redefine_out_b> 0 [ORD=29]

      0x3b57b78: <multiple use>
        0x3b57b78: <multiple use>
        0x3b7c030: <multiple use>
        0x3b7bf30: <multiple use>
      0x3b778c0: f32,ch = load 0x3b57b78, 0x3b7c030, 0x3b7bf30<LD4[%0]> [ORD=28]

      0x3b777c0: <multiple use>
      0x3b7bf30: <multiple use>
    0x3b75690: ch = store 0x3b57b78, 0x3b778c0, 0x3b777c0, 0x3b7bf30<ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)]> [ORD=30]

    0x3b77cc0: i32 = GlobalAddress<float* @nh_fin_de_rampe> 0 [ORD=31]

    0x3b7bf30: <multiple use>
  0x3b79330: f32,ch = load 0x3b75690, 0x3b77cc0, 0x3b7bf30<LD4[@nh_fin_de_rampe]> [ORD=31]

  0x3b7be30: i64 = Constant<4>

      0x3b79330: <multiple use>
      0x3b79330: <multiple use>
        0x3b777c0: <multiple use>
        0x3b75390: i32 = Constant<4> [ORD=32]

      0x3b79830: i32 = add 0x3b777c0, 0x3b75390 [ORD=32]

      0x3b7bf30: <multiple use>
    0x3b79630: ch = store 0x3b79330:1, 0x3b79330, 0x3b79830, 0x3b7bf30<ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)]> [ORD=33]

    0x3b79530: i32 = GlobalAddress<i32* @glob_sg_bit0> 0 [ORD=34]

    0x3b7bf30: <multiple use>
  0x3b79130: i32,ch = load 0x3b79630, 0x3b79530, 0x3b7bf30<LD4[@glob_sg_bit0]> [ORD=34]

    0x3b79130: <multiple use>
    0x3b79130: <multiple use>
    0x3b79030: i32 = GlobalAddress<[2 x i32]* @redefine_out_c> 0 [ORD=35]

    0x3b7bf30: <multiple use>
  0x3b77ac0: ch = store 0x3b79130:1, 0x3b79130, 0x3b79030, 0x3b7bf30<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0)]> [ORD=36]


visiting load instruction   %4 = load i32* @glob_sg_bit1, align 4
I was here to add @glob_sg_bit1 = common global i32 0, align 4
with I type i32and sd value :0x3b779c0: i32 = GlobalAddress<i32* @glob_sg_bit1> 0
new load?0x3b776c0: i32,ch = load 0x3b77ac0, 0x3b779c0, 0x3b7bf30<LD4[@glob_sg_bit1]>
dag after load is dealt with?SelectionDAG has 20 nodes:
  0x3b57b78: ch = EntryToken [ORD=28]

  0x3b7c030: i32 = FrameIndex<-1> [ORD=28]

  0x3b7bf30: i32 = undef [ORD=28]

    0x3b57b78: <multiple use>
    0x3b7c030: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b79430: i32,ch = load 0x3b57b78, 0x3b7c030, 0x3b7bf30<LD4[FixedStack-1]>

  0x3b77dc0: i32 = Constant<0>

  0x3b777c0: i32 = GlobalAddress<[2 x float]* @redefine_out_b> 0 [ORD=29]

      0x3b57b78: <multiple use>
        0x3b57b78: <multiple use>
        0x3b7c030: <multiple use>
        0x3b7bf30: <multiple use>
      0x3b778c0: f32,ch = load 0x3b57b78, 0x3b7c030, 0x3b7bf30<LD4[%0]> [ORD=28]

      0x3b777c0: <multiple use>
      0x3b7bf30: <multiple use>
    0x3b75690: ch = store 0x3b57b78, 0x3b778c0, 0x3b777c0, 0x3b7bf30<ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)]> [ORD=30]

    0x3b77cc0: i32 = GlobalAddress<float* @nh_fin_de_rampe> 0 [ORD=31]

    0x3b7bf30: <multiple use>
  0x3b79330: f32,ch = load 0x3b75690, 0x3b77cc0, 0x3b7bf30<LD4[@nh_fin_de_rampe]> [ORD=31]

  0x3b7be30: i64 = Constant<4>

      0x3b79330: <multiple use>
      0x3b79330: <multiple use>
        0x3b777c0: <multiple use>
        0x3b75390: i32 = Constant<4> [ORD=32]

      0x3b79830: i32 = add 0x3b777c0, 0x3b75390 [ORD=32]

      0x3b7bf30: <multiple use>
    0x3b79630: ch = store 0x3b79330:1, 0x3b79330, 0x3b79830, 0x3b7bf30<ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)]> [ORD=33]

    0x3b79530: i32 = GlobalAddress<i32* @glob_sg_bit0> 0 [ORD=34]

    0x3b7bf30: <multiple use>
  0x3b79130: i32,ch = load 0x3b79630, 0x3b79530, 0x3b7bf30<LD4[@glob_sg_bit0]> [ORD=34]

      0x3b79130: <multiple use>
      0x3b79130: <multiple use>
      0x3b79030: i32 = GlobalAddress<[2 x i32]* @redefine_out_c> 0 [ORD=35]

      0x3b7bf30: <multiple use>
    0x3b77ac0: ch = store 0x3b79130:1, 0x3b79130, 0x3b79030, 0x3b7bf30<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0)]> [ORD=36]

    0x3b779c0: i32 = GlobalAddress<i32* @glob_sg_bit1> 0

    0x3b7bf30: <multiple use>
  0x3b776c0: i32,ch = load 0x3b77ac0, 0x3b779c0, 0x3b7bf30<LD4[@glob_sg_bit1]>

    0x3b79130: <multiple use>
    0x3b79130: <multiple use>
    0x3b79030: i32 = GlobalAddress<[2 x i32]* @redefine_out_c> 0 [ORD=35]

    0x3b7bf30: <multiple use>
  0x3b77ac0: ch = store 0x3b79130:1, 0x3b79130, 0x3b79030, 0x3b7bf30<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0)]> [ORD=36]


store visit is after?  store i32 %4, i32* getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 1), align 4
I was here to add i32* getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 1)
whats in dag after store?SelectionDAG has 22 nodes:
  0x3b57b78: ch = EntryToken [ORD=28]

  0x3b7c030: i32 = FrameIndex<-1> [ORD=28]

  0x3b7bf30: i32 = undef [ORD=28]

    0x3b57b78: <multiple use>
    0x3b7c030: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b79430: i32,ch = load 0x3b57b78, 0x3b7c030, 0x3b7bf30<LD4[FixedStack-1]>

  0x3b77dc0: i32 = Constant<0>

  0x3b777c0: i32 = GlobalAddress<[2 x float]* @redefine_out_b> 0 [ORD=29]

      0x3b57b78: <multiple use>
        0x3b57b78: <multiple use>
        0x3b7c030: <multiple use>
        0x3b7bf30: <multiple use>
      0x3b778c0: f32,ch = load 0x3b57b78, 0x3b7c030, 0x3b7bf30<LD4[%0]> [ORD=28]

      0x3b777c0: <multiple use>
      0x3b7bf30: <multiple use>
    0x3b75690: ch = store 0x3b57b78, 0x3b778c0, 0x3b777c0, 0x3b7bf30<ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)]> [ORD=30]

    0x3b77cc0: i32 = GlobalAddress<float* @nh_fin_de_rampe> 0 [ORD=31]

    0x3b7bf30: <multiple use>
  0x3b79330: f32,ch = load 0x3b75690, 0x3b77cc0, 0x3b7bf30<LD4[@nh_fin_de_rampe]> [ORD=31]

  0x3b7be30: i64 = Constant<4>

  0x3b75390: i32 = Constant<4> [ORD=32]

      0x3b79330: <multiple use>
      0x3b79330: <multiple use>
        0x3b777c0: <multiple use>
        0x3b75390: <multiple use>
      0x3b79830: i32 = add 0x3b777c0, 0x3b75390 [ORD=32]

      0x3b7bf30: <multiple use>
    0x3b79630: ch = store 0x3b79330:1, 0x3b79330, 0x3b79830, 0x3b7bf30<ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)]> [ORD=33]

    0x3b79530: i32 = GlobalAddress<i32* @glob_sg_bit0> 0 [ORD=34]

    0x3b7bf30: <multiple use>
  0x3b79130: i32,ch = load 0x3b79630, 0x3b79530, 0x3b7bf30<LD4[@glob_sg_bit0]> [ORD=34]

  0x3b79030: i32 = GlobalAddress<[2 x i32]* @redefine_out_c> 0 [ORD=35]

      0x3b79130: <multiple use>
      0x3b79130: <multiple use>
      0x3b79030: <multiple use>
      0x3b7bf30: <multiple use>
    0x3b77ac0: ch = store 0x3b79130:1, 0x3b79130, 0x3b79030, 0x3b7bf30<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0)]> [ORD=36]

    0x3b779c0: i32 = GlobalAddress<i32* @glob_sg_bit1> 0 [ORD=37]

    0x3b7bf30: <multiple use>
  0x3b776c0: i32,ch = load 0x3b77ac0, 0x3b779c0, 0x3b7bf30<LD4[@glob_sg_bit1]> [ORD=37]

    0x3b776c0: <multiple use>
    0x3b776c0: <multiple use>
      0x3b79030: <multiple use>
      0x3b75390: <multiple use>
    0x3b771c0: i32 = add 0x3b79030, 0x3b75390 [ORD=38]

    0x3b7bf30: <multiple use>
  0x3b76fc0: ch = store 0x3b776c0:1, 0x3b776c0, 0x3b771c0, 0x3b7bf30<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 1)]> [ORD=39]


Initial selection DAG: BB#0 'redefine_start2:redefine_start2.newName01'
SelectionDAG has 22 nodes:
  0x3b57b78: ch = EntryToken [ORD=28]

  0x3b7c030: i32 = FrameIndex<-1> [ORD=28]

  0x3b7bf30: i32 = undef [ORD=28]

    0x3b57b78: <multiple use>
    0x3b7c030: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b79430: i32,ch = load 0x3b57b78, 0x3b7c030, 0x3b7bf30<LD4[FixedStack-1]>

  0x3b77dc0: i32 = Constant<0>

  0x3b777c0: i32 = GlobalAddress<[2 x float]* @redefine_out_b> 0 [ORD=29]

      0x3b57b78: <multiple use>
        0x3b57b78: <multiple use>
        0x3b7c030: <multiple use>
        0x3b7bf30: <multiple use>
      0x3b778c0: f32,ch = load 0x3b57b78, 0x3b7c030, 0x3b7bf30<LD4[%0]> [ORD=28]

      0x3b777c0: <multiple use>
      0x3b7bf30: <multiple use>
    0x3b75690: ch = store 0x3b57b78, 0x3b778c0, 0x3b777c0, 0x3b7bf30<ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)]> [ORD=30]

    0x3b77cc0: i32 = GlobalAddress<float* @nh_fin_de_rampe> 0 [ORD=31]

    0x3b7bf30: <multiple use>
  0x3b79330: f32,ch = load 0x3b75690, 0x3b77cc0, 0x3b7bf30<LD4[@nh_fin_de_rampe]> [ORD=31]

  0x3b7be30: i64 = Constant<4>

  0x3b75390: i32 = Constant<4> [ORD=32]

      0x3b79330: <multiple use>
      0x3b79330: <multiple use>
        0x3b777c0: <multiple use>
        0x3b75390: <multiple use>
      0x3b79830: i32 = add 0x3b777c0, 0x3b75390 [ORD=32]

      0x3b7bf30: <multiple use>
    0x3b79630: ch = store 0x3b79330:1, 0x3b79330, 0x3b79830, 0x3b7bf30<ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)]> [ORD=33]

    0x3b79530: i32 = GlobalAddress<i32* @glob_sg_bit0> 0 [ORD=34]

    0x3b7bf30: <multiple use>
  0x3b79130: i32,ch = load 0x3b79630, 0x3b79530, 0x3b7bf30<LD4[@glob_sg_bit0]> [ORD=34]

  0x3b79030: i32 = GlobalAddress<[2 x i32]* @redefine_out_c> 0 [ORD=35]

      0x3b79130: <multiple use>
      0x3b79130: <multiple use>
      0x3b79030: <multiple use>
      0x3b7bf30: <multiple use>
    0x3b77ac0: ch = store 0x3b79130:1, 0x3b79130, 0x3b79030, 0x3b7bf30<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0)]> [ORD=36]

    0x3b779c0: i32 = GlobalAddress<i32* @glob_sg_bit1> 0 [ORD=37]

    0x3b7bf30: <multiple use>
  0x3b776c0: i32,ch = load 0x3b77ac0, 0x3b779c0, 0x3b7bf30<LD4[@glob_sg_bit1]> [ORD=37]

    0x3b776c0: <multiple use>
    0x3b776c0: <multiple use>
      0x3b79030: <multiple use>
      0x3b75390: <multiple use>
    0x3b771c0: i32 = add 0x3b79030, 0x3b75390 [ORD=38]

    0x3b7bf30: <multiple use>
  0x3b76fc0: ch = store 0x3b776c0:1, 0x3b776c0, 0x3b771c0, 0x3b7bf30<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 1)]> [ORD=39]



Replacing.1 0x3b778c0: f32,ch = load 0x3b57b78, 0x3b7c030, 0x3b7bf30<LD4[%0](align=16)> [ORD=28]

With: 0x3b778c0: f32,ch = load 0x3b57b78, 0x3b7c030, 0x3b7bf30<LD4[%0](align=16)> [ORD=28]
 and 1 other values
Optimized lowered selection DAG: BB#0 'redefine_start2:redefine_start2.newName01'
SelectionDAG has 19 nodes:
  0x3b57b78: ch = EntryToken [ORD=28]

  0x3b7bf30: i32 = undef [ORD=28]

  0x3b777c0: i32 = GlobalAddress<[2 x float]* @redefine_out_b> 0 [ORD=29]

      0x3b57b78: <multiple use>
        0x3b57b78: <multiple use>
        0x3b7c030: i32 = FrameIndex<-1> [ORD=28]

        0x3b7bf30: <multiple use>
      0x3b778c0: f32,ch = load 0x3b57b78, 0x3b7c030, 0x3b7bf30<LD4[%0](align=16)> [ORD=28]

      0x3b777c0: <multiple use>
      0x3b7bf30: <multiple use>
    0x3b75690: ch = store 0x3b57b78, 0x3b778c0, 0x3b777c0, 0x3b7bf30<ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)]> [ORD=30]

    0x3b77cc0: i32 = GlobalAddress<float* @nh_fin_de_rampe> 0 [ORD=31]

    0x3b7bf30: <multiple use>
  0x3b79330: f32,ch = load 0x3b75690, 0x3b77cc0, 0x3b7bf30<LD4[@nh_fin_de_rampe]> [ORD=31]

  0x3b75390: i32 = Constant<4> [ORD=32]

      0x3b79330: <multiple use>
      0x3b79330: <multiple use>
        0x3b777c0: <multiple use>
        0x3b75390: <multiple use>
      0x3b79830: i32 = add 0x3b777c0, 0x3b75390 [ORD=32]

      0x3b7bf30: <multiple use>
    0x3b79630: ch = store 0x3b79330:1, 0x3b79330, 0x3b79830, 0x3b7bf30<ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)]> [ORD=33]

    0x3b79530: i32 = GlobalAddress<i32* @glob_sg_bit0> 0 [ORD=34]

    0x3b7bf30: <multiple use>
  0x3b79130: i32,ch = load 0x3b79630, 0x3b79530, 0x3b7bf30<LD4[@glob_sg_bit0]> [ORD=34]

  0x3b79030: i32 = GlobalAddress<[2 x i32]* @redefine_out_c> 0 [ORD=35]

      0x3b79130: <multiple use>
      0x3b79130: <multiple use>
      0x3b79030: <multiple use>
      0x3b7bf30: <multiple use>
    0x3b77ac0: ch = store 0x3b79130:1, 0x3b79130, 0x3b79030, 0x3b7bf30<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0)]> [ORD=36]

    0x3b779c0: i32 = GlobalAddress<i32* @glob_sg_bit1> 0 [ORD=37]

    0x3b7bf30: <multiple use>
  0x3b776c0: i32,ch = load 0x3b77ac0, 0x3b779c0, 0x3b7bf30<LD4[@glob_sg_bit1]> [ORD=37]

    0x3b776c0: <multiple use>
    0x3b776c0: <multiple use>
      0x3b79030: <multiple use>
      0x3b75390: <multiple use>
    0x3b771c0: i32 = add 0x3b79030, 0x3b75390 [ORD=38]

    0x3b7bf30: <multiple use>
  0x3b76fc0: ch = store 0x3b776c0:1, 0x3b776c0, 0x3b771c0, 0x3b7bf30<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 1)]> [ORD=39]


Legally typed node: 0x3b779c0: i32 = GlobalAddress<i32* @glob_sg_bit1> 0 [ORD=37] [ID=0]

Legally typed node: 0x3b79030: i32 = GlobalAddress<[2 x i32]* @redefine_out_c> 0 [ORD=35] [ID=0]

Legally typed node: 0x3b79530: i32 = GlobalAddress<i32* @glob_sg_bit0> 0 [ORD=34] [ID=0]

Legally typed node: 0x3b75390: i32 = Constant<4> [ORD=32] [ID=0]

Legally typed node: 0x3b771c0: i32 = add 0x3b79030, 0x3b75390 [ORD=38] [ID=0]

Legally typed node: 0x3b77cc0: i32 = GlobalAddress<float* @nh_fin_de_rampe> 0 [ORD=31] [ID=0]

Legally typed node: 0x3b777c0: i32 = GlobalAddress<[2 x float]* @redefine_out_b> 0 [ORD=29] [ID=0]

Legally typed node: 0x3b79830: i32 = add 0x3b777c0, 0x3b75390 [ORD=32] [ID=0]

Legally typed node: 0x3b7bf30: i32 = undef [ORD=28] [ID=0]

Legally typed node: 0x3b7c030: i32 = FrameIndex<-1> [ORD=28] [ID=0]

Legally typed node: 0x3b57b78: ch = EntryToken [ORD=28] [ID=0]

Legally typed node: 0x3b778c0: f32,ch = load 0x3b57b78, 0x3b7c030, 0x3b7bf30<LD4[%0](align=16)> [ORD=28] [ID=0]

Legally typed node: 0x3b75690: ch = store 0x3b57b78, 0x3b778c0, 0x3b777c0, 0x3b7bf30<ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)]> [ORD=30] [ID=0]

Legally typed node: 0x3b79330: f32,ch = load 0x3b75690, 0x3b77cc0, 0x3b7bf30<LD4[@nh_fin_de_rampe]> [ORD=31] [ID=0]

Legally typed node: 0x3b79630: ch = store 0x3b79330:1, 0x3b79330, 0x3b79830, 0x3b7bf30<ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)]> [ORD=33] [ID=0]

Legally typed node: 0x3b79130: i32,ch = load 0x3b79630, 0x3b79530, 0x3b7bf30<LD4[@glob_sg_bit0]> [ORD=34] [ID=0]

Legally typed node: 0x3b77ac0: ch = store 0x3b79130:1, 0x3b79130, 0x3b79030, 0x3b7bf30<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0)]> [ORD=36] [ID=0]

Legally typed node: 0x3b776c0: i32,ch = load 0x3b77ac0, 0x3b779c0, 0x3b7bf30<LD4[@glob_sg_bit1]> [ORD=37] [ID=0]

Legally typed node: 0x3b76fc0: ch = store 0x3b776c0:1, 0x3b776c0, 0x3b771c0, 0x3b7bf30<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 1)]> [ORD=39] [ID=0]

Legally typed node: 0x7fffa88b7260: ch = handlenode 0x3b76fc0 [ID=0]

Type-legalized selection DAG: BB#0 'redefine_start2:redefine_start2.newName01'
SelectionDAG has 19 nodes:
  0x3b57b78: ch = EntryToken [ORD=28] [ID=-3]

  0x3b7bf30: i32 = undef [ORD=28] [ID=-3]

  0x3b777c0: i32 = GlobalAddress<[2 x float]* @redefine_out_b> 0 [ORD=29] [ID=-3]

      0x3b57b78: <multiple use>
        0x3b57b78: <multiple use>
        0x3b7c030: i32 = FrameIndex<-1> [ORD=28] [ID=-3]

        0x3b7bf30: <multiple use>
      0x3b778c0: f32,ch = load 0x3b57b78, 0x3b7c030, 0x3b7bf30<LD4[%0](align=16)> [ORD=28] [ID=-3]

      0x3b777c0: <multiple use>
      0x3b7bf30: <multiple use>
    0x3b75690: ch = store 0x3b57b78, 0x3b778c0, 0x3b777c0, 0x3b7bf30<ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)]> [ORD=30] [ID=-3]

    0x3b77cc0: i32 = GlobalAddress<float* @nh_fin_de_rampe> 0 [ORD=31] [ID=-3]

    0x3b7bf30: <multiple use>
  0x3b79330: f32,ch = load 0x3b75690, 0x3b77cc0, 0x3b7bf30<LD4[@nh_fin_de_rampe]> [ORD=31] [ID=-3]

  0x3b75390: i32 = Constant<4> [ORD=32] [ID=-3]

      0x3b79330: <multiple use>
      0x3b79330: <multiple use>
        0x3b777c0: <multiple use>
        0x3b75390: <multiple use>
      0x3b79830: i32 = add 0x3b777c0, 0x3b75390 [ORD=32] [ID=-3]

      0x3b7bf30: <multiple use>
    0x3b79630: ch = store 0x3b79330:1, 0x3b79330, 0x3b79830, 0x3b7bf30<ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)]> [ORD=33] [ID=-3]

    0x3b79530: i32 = GlobalAddress<i32* @glob_sg_bit0> 0 [ORD=34] [ID=-3]

    0x3b7bf30: <multiple use>
  0x3b79130: i32,ch = load 0x3b79630, 0x3b79530, 0x3b7bf30<LD4[@glob_sg_bit0]> [ORD=34] [ID=-3]

  0x3b79030: i32 = GlobalAddress<[2 x i32]* @redefine_out_c> 0 [ORD=35] [ID=-3]

      0x3b79130: <multiple use>
      0x3b79130: <multiple use>
      0x3b79030: <multiple use>
      0x3b7bf30: <multiple use>
    0x3b77ac0: ch = store 0x3b79130:1, 0x3b79130, 0x3b79030, 0x3b7bf30<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0)]> [ORD=36] [ID=-3]

    0x3b779c0: i32 = GlobalAddress<i32* @glob_sg_bit1> 0 [ORD=37] [ID=-3]

    0x3b7bf30: <multiple use>
  0x3b776c0: i32,ch = load 0x3b77ac0, 0x3b779c0, 0x3b7bf30<LD4[@glob_sg_bit1]> [ORD=37] [ID=-3]

    0x3b776c0: <multiple use>
    0x3b776c0: <multiple use>
      0x3b79030: <multiple use>
      0x3b75390: <multiple use>
    0x3b771c0: i32 = add 0x3b79030, 0x3b75390 [ORD=38] [ID=-3]

    0x3b7bf30: <multiple use>
  0x3b76fc0: ch = store 0x3b776c0:1, 0x3b776c0, 0x3b771c0, 0x3b7bf30<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 1)]> [ORD=39] [ID=-3]


Legalized selection DAG: BB#0 'redefine_start2:redefine_start2.newName01'
SelectionDAG has 39 nodes:
  0x3b57b78: ch = EntryToken [ORD=28] [ID=0]

  0x3b7bf30: i32 = undef [ORD=28] [ID=2]

  0x3b75390: i32 = Constant<4> [ORD=32] [ID=5]

      0x3b57b78: <multiple use>
        0x3b57b78: <multiple use>
        0x3b7c030: i32 = FrameIndex<-1> [ORD=28] [ID=1]

        0x3b7bf30: <multiple use>
      0x3b778c0: f32,ch = load 0x3b57b78, 0x3b7c030, 0x3b7bf30<LD4[%0](align=16)> [ORD=28] [ID=9]

      0x3b7b220: <multiple use>
      0x3b7bf30: <multiple use>
    0x3b75690: ch = store 0x3b57b78, 0x3b778c0, 0x3b7b220, 0x3b7bf30<ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)]> [ORD=30] [ID=12]

        0x3b79530: i32 = TargetGlobalAddress<float* @nh_fin_de_rampe> 0 [TF=2]

      0x3b79930: i32 = REDEFINEISD::Hi 0x3b79530

        0x3b79d30: i32 = TargetGlobalAddress<float* @nh_fin_de_rampe> 0 [TF=3]

      0x3b7bc30: i32 = REDEFINEISD::Lo 0x3b79d30

    0x3b7bb30: i32 = add 0x3b79930, 0x3b7bc30

    0x3b7bf30: <multiple use>
  0x3b79330: f32,ch = load 0x3b75690, 0x3b7bb30, 0x3b7bf30<LD4[@nh_fin_de_rampe]> [ORD=31] [ID=13]

      0x3b79330: <multiple use>
      0x3b79330: <multiple use>
        0x3b7b220: <multiple use>
        0x3b75390: <multiple use>
      0x3b79830: i32 = add 0x3b7b220, 0x3b75390 [ORD=32] [ID=10]

      0x3b7bf30: <multiple use>
    0x3b79630: ch = store 0x3b79330:1, 0x3b79330, 0x3b79830, 0x3b7bf30<ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)]> [ORD=33] [ID=14]

        0x3b79030: i32 = TargetGlobalAddress<i32* @glob_sg_bit0> 0 [TF=2]

      0x3b7b020: i32 = REDEFINEISD::Hi 0x3b79030

        0x3b7b420: i32 = TargetGlobalAddress<i32* @glob_sg_bit0> 0 [TF=3]

      0x3b7ac20: i32 = REDEFINEISD::Lo 0x3b7b420

    0x3b7a820: i32 = add 0x3b7b020, 0x3b7ac20

    0x3b7bf30: <multiple use>
  0x3b79130: i32,ch = load 0x3b79630, 0x3b7a820, 0x3b7bf30<LD4[@glob_sg_bit0]> [ORD=34] [ID=15]

      0x3b79130: <multiple use>
      0x3b79130: <multiple use>
      0x3b7b930: <multiple use>
      0x3b7bf30: <multiple use>
    0x3b77ac0: ch = store 0x3b79130:1, 0x3b79130, 0x3b7b930, 0x3b7bf30<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0)]> [ORD=36] [ID=16]

        0x3b79430: i32 = TargetGlobalAddress<i32* @glob_sg_bit1> 0 [TF=2]

      0x3b7be30: i32 = REDEFINEISD::Hi 0x3b79430

        0x3b77dc0: i32 = TargetGlobalAddress<i32* @glob_sg_bit1> 0 [TF=3]

      0x3b76090: i32 = REDEFINEISD::Lo 0x3b77dc0

    0x3b75d90: i32 = add 0x3b7be30, 0x3b76090

    0x3b7bf30: <multiple use>
  0x3b776c0: i32,ch = load 0x3b77ac0, 0x3b75d90, 0x3b7bf30<LD4[@glob_sg_bit1]> [ORD=37] [ID=17]

      0x3b779c0: i32 = TargetGlobalAddress<[2 x i32]* @redefine_out_c> 0 [TF=2]

    0x3b75a90: i32 = REDEFINEISD::Hi 0x3b779c0

      0x3b774c0: i32 = TargetGlobalAddress<[2 x i32]* @redefine_out_c> 0 [TF=3]

    0x3b7bd30: i32 = REDEFINEISD::Lo 0x3b774c0

  0x3b7b930: i32 = add 0x3b75a90, 0x3b7bd30

      0x3b77cc0: i32 = TargetGlobalAddress<[2 x float]* @redefine_out_b> 0 [TF=2]

    0x3b7b730: i32 = REDEFINEISD::Hi 0x3b77cc0

      0x3b7b830: i32 = TargetGlobalAddress<[2 x float]* @redefine_out_b> 0 [TF=3]

    0x3b7b320: i32 = REDEFINEISD::Lo 0x3b7b830

  0x3b7b220: i32 = add 0x3b7b730, 0x3b7b320

    0x3b776c0: <multiple use>
    0x3b776c0: <multiple use>
      0x3b7b930: <multiple use>
      0x3b75390: <multiple use>
    0x3b771c0: i32 = add 0x3b7b930, 0x3b75390 [ORD=38] [ID=11]

    0x3b7bf30: <multiple use>
  0x3b76fc0: ch = store 0x3b776c0:1, 0x3b776c0, 0x3b771c0, 0x3b7bf30<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 1)]> [ORD=39] [ID=18]


Optimized legalized selection DAG: BB#0 'redefine_start2:redefine_start2.newName01'
SelectionDAG has 39 nodes:
  0x3b57b78: ch = EntryToken [ORD=28] [ID=0]

  0x3b7bf30: i32 = undef [ORD=28] [ID=2]

  0x3b75390: i32 = Constant<4> [ORD=32] [ID=5]

      0x3b57b78: <multiple use>
        0x3b57b78: <multiple use>
        0x3b7c030: i32 = FrameIndex<-1> [ORD=28] [ID=1]

        0x3b7bf30: <multiple use>
      0x3b778c0: f32,ch = load 0x3b57b78, 0x3b7c030, 0x3b7bf30<LD4[%0](align=16)> [ORD=28] [ID=9]

      0x3b7b220: <multiple use>
      0x3b7bf30: <multiple use>
    0x3b75690: ch = store 0x3b57b78, 0x3b778c0, 0x3b7b220, 0x3b7bf30<ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)]> [ORD=30] [ID=12]

        0x3b79530: i32 = TargetGlobalAddress<float* @nh_fin_de_rampe> 0 [TF=2]

      0x3b79930: i32 = REDEFINEISD::Hi 0x3b79530

        0x3b79d30: i32 = TargetGlobalAddress<float* @nh_fin_de_rampe> 0 [TF=3]

      0x3b7bc30: i32 = REDEFINEISD::Lo 0x3b79d30

    0x3b7bb30: i32 = add 0x3b79930, 0x3b7bc30

    0x3b7bf30: <multiple use>
  0x3b79330: f32,ch = load 0x3b75690, 0x3b7bb30, 0x3b7bf30<LD4[@nh_fin_de_rampe]> [ORD=31] [ID=13]

      0x3b79330: <multiple use>
      0x3b79330: <multiple use>
        0x3b7b220: <multiple use>
        0x3b75390: <multiple use>
      0x3b79830: i32 = add 0x3b7b220, 0x3b75390 [ORD=32] [ID=10]

      0x3b7bf30: <multiple use>
    0x3b79630: ch = store 0x3b79330:1, 0x3b79330, 0x3b79830, 0x3b7bf30<ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)]> [ORD=33] [ID=14]

        0x3b79030: i32 = TargetGlobalAddress<i32* @glob_sg_bit0> 0 [TF=2]

      0x3b7b020: i32 = REDEFINEISD::Hi 0x3b79030

        0x3b7b420: i32 = TargetGlobalAddress<i32* @glob_sg_bit0> 0 [TF=3]

      0x3b7ac20: i32 = REDEFINEISD::Lo 0x3b7b420

    0x3b7a820: i32 = add 0x3b7b020, 0x3b7ac20

    0x3b7bf30: <multiple use>
  0x3b79130: i32,ch = load 0x3b79630, 0x3b7a820, 0x3b7bf30<LD4[@glob_sg_bit0]> [ORD=34] [ID=15]

      0x3b79130: <multiple use>
      0x3b79130: <multiple use>
      0x3b7b930: <multiple use>
      0x3b7bf30: <multiple use>
    0x3b77ac0: ch = store 0x3b79130:1, 0x3b79130, 0x3b7b930, 0x3b7bf30<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0)]> [ORD=36] [ID=16]

        0x3b79430: i32 = TargetGlobalAddress<i32* @glob_sg_bit1> 0 [TF=2]

      0x3b7be30: i32 = REDEFINEISD::Hi 0x3b79430

        0x3b77dc0: i32 = TargetGlobalAddress<i32* @glob_sg_bit1> 0 [TF=3]

      0x3b76090: i32 = REDEFINEISD::Lo 0x3b77dc0

    0x3b75d90: i32 = add 0x3b7be30, 0x3b76090

    0x3b7bf30: <multiple use>
  0x3b776c0: i32,ch = load 0x3b77ac0, 0x3b75d90, 0x3b7bf30<LD4[@glob_sg_bit1]> [ORD=37] [ID=17]

      0x3b779c0: i32 = TargetGlobalAddress<[2 x i32]* @redefine_out_c> 0 [TF=2]

    0x3b75a90: i32 = REDEFINEISD::Hi 0x3b779c0

      0x3b774c0: i32 = TargetGlobalAddress<[2 x i32]* @redefine_out_c> 0 [TF=3]

    0x3b7bd30: i32 = REDEFINEISD::Lo 0x3b774c0

  0x3b7b930: i32 = add 0x3b75a90, 0x3b7bd30

      0x3b77cc0: i32 = TargetGlobalAddress<[2 x float]* @redefine_out_b> 0 [TF=2]

    0x3b7b730: i32 = REDEFINEISD::Hi 0x3b77cc0

      0x3b7b830: i32 = TargetGlobalAddress<[2 x float]* @redefine_out_b> 0 [TF=3]

    0x3b7b320: i32 = REDEFINEISD::Lo 0x3b7b830

  0x3b7b220: i32 = add 0x3b7b730, 0x3b7b320

    0x3b776c0: <multiple use>
    0x3b776c0: <multiple use>
      0x3b7b930: <multiple use>
      0x3b75390: <multiple use>
    0x3b771c0: i32 = add 0x3b7b930, 0x3b75390 [ORD=38] [ID=11]

    0x3b7bf30: <multiple use>
  0x3b76fc0: ch = store 0x3b776c0:1, 0x3b776c0, 0x3b771c0, 0x3b7bf30<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 1)]> [ORD=39] [ID=18]


===== Instruction selection begins: BB#0 'redefine_start2.newName01'
ISEL: Starting pattern match on root node: 0x3b76fc0: ch = store 0x3b776c0:1, 0x3b776c0, 0x3b771c0, 0x3b7bf30<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 1)]> [ORD=39] [ID=38]

  Initial Opcode index to 178
  Morphed node: 0x3b76fc0: ch = SW 0x3b776c0, 0x3b7b930, 0x3b777c0, 0x3b776c0:1<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 1)]> [ORD=39]

ISEL: Match complete!
=> 0x3b76fc0: ch = SW 0x3b776c0, 0x3b7b930, 0x3b777c0, 0x3b776c0:1<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 1)]> [ORD=39]

ISEL: Starting pattern match on root node: 0x3b776c0: i32,ch = load 0x3b77ac0, 0x3b75d90, 0x3b7bf30<LD4[@glob_sg_bit1]> [ORD=37] [ID=37]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x3b776c0: i32,ch = LW 0x3b75d90, 0x3b771c0, 0x3b77ac0<Mem:LD4[@glob_sg_bit1]> [ORD=37]

ISEL: Match complete!
=> 0x3b776c0: i32,ch = LW 0x3b75d90, 0x3b771c0, 0x3b77ac0<Mem:LD4[@glob_sg_bit1]> [ORD=37]

ISEL: Starting pattern match on root node: 0x3b77ac0: ch = store 0x3b79130:1, 0x3b79130, 0x3b7b930, 0x3b7bf30<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0)]> [ORD=36] [ID=36]

  Initial Opcode index to 178
  Morphed node: 0x3b77ac0: ch = SW 0x3b79130, 0x3b7b930, 0x3b771c0, 0x3b79130:1<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0)]> [ORD=36]

ISEL: Match complete!
=> 0x3b77ac0: ch = SW 0x3b79130, 0x3b7b930, 0x3b771c0, 0x3b79130:1<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0)]> [ORD=36]

ISEL: Starting pattern match on root node: 0x3b79130: i32,ch = load 0x3b79630, 0x3b7a820, 0x3b7bf30<LD4[@glob_sg_bit0]> [ORD=34] [ID=35]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x3b79130: i32,ch = LW 0x3b7a820, 0x3b771c0, 0x3b79630<Mem:LD4[@glob_sg_bit0]> [ORD=34]

ISEL: Match complete!
=> 0x3b79130: i32,ch = LW 0x3b7a820, 0x3b771c0, 0x3b79630<Mem:LD4[@glob_sg_bit0]> [ORD=34]

ISEL: Starting pattern match on root node: 0x3b79630: ch = store 0x3b79330:1, 0x3b79330, 0x3b79830, 0x3b7bf30<ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)]> [ORD=33] [ID=34]

  Initial Opcode index to 178
  Skipped scope entry (due to false predicate) at index 183, continuing at 243
  Morphed node: 0x3b79630: ch = FSW 0x3b79330, 0x3b7b220, 0x3b777c0, 0x3b79330:1<Mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)]> [ORD=33]

ISEL: Match complete!
=> 0x3b79630: ch = FSW 0x3b79330, 0x3b7b220, 0x3b777c0, 0x3b79330:1<Mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)]> [ORD=33]

ISEL: Starting pattern match on root node: 0x3b79330: f32,ch = load 0x3b75690, 0x3b7bb30, 0x3b7bf30<LD4[@nh_fin_de_rampe]> [ORD=31] [ID=33]

  Initial Opcode index to 5
  TypeSwitch[f32] from 10 to 159
  Morphed node: 0x3b79330: f32,ch = FLW 0x3b7bb30, 0x3b771c0, 0x3b75690<Mem:LD4[@nh_fin_de_rampe]> [ORD=31]

ISEL: Match complete!
=> 0x3b79330: f32,ch = FLW 0x3b7bb30, 0x3b771c0, 0x3b75690<Mem:LD4[@nh_fin_de_rampe]> [ORD=31]

ISEL: Starting pattern match on root node: 0x3b75690: ch = store 0x3b57b78, 0x3b778c0, 0x3b7b220, 0x3b7bf30<ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)]> [ORD=30] [ID=31]

  Initial Opcode index to 178
  Skipped scope entry (due to false predicate) at index 183, continuing at 243
  Morphed node: 0x3b75690: ch = FSW 0x3b778c0, 0x3b7b220, 0x3b771c0, 0x3b57b78<Mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)]> [ORD=30]

ISEL: Match complete!
=> 0x3b75690: ch = FSW 0x3b778c0, 0x3b7b220, 0x3b771c0, 0x3b57b78<Mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)]> [ORD=30]

ISEL: Starting pattern match on root node: 0x3b7b220: i32 = add 0x3b7b730, 0x3b7b320 [ID=29]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x3b7b220: i32 = ADD 0x3b7b320, 0x3b7b730

ISEL: Match complete!
=> 0x3b7b220: i32 = ADD 0x3b7b320, 0x3b7b730

ISEL: Starting pattern match on root node: 0x3b7bb30: i32 = add 0x3b79930, 0x3b7bc30 [ID=28]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x3b7bb30: i32 = ADD 0x3b7bc30, 0x3b79930

ISEL: Match complete!
=> 0x3b7bb30: i32 = ADD 0x3b7bc30, 0x3b79930

ISEL: Starting pattern match on root node: 0x3b7a820: i32 = add 0x3b7b020, 0x3b7ac20 [ID=27]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x3b7a820: i32 = ADD 0x3b7ac20, 0x3b7b020

ISEL: Match complete!
=> 0x3b7a820: i32 = ADD 0x3b7ac20, 0x3b7b020

ISEL: Starting pattern match on root node: 0x3b7b930: i32 = add 0x3b75a90, 0x3b7bd30 [ID=26]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x3b7b930: i32 = ADD 0x3b7bd30, 0x3b75a90

ISEL: Match complete!
=> 0x3b7b930: i32 = ADD 0x3b7bd30, 0x3b75a90

ISEL: Starting pattern match on root node: 0x3b75d90: i32 = add 0x3b7be30, 0x3b76090 [ID=25]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x3b75d90: i32 = ADD 0x3b76090, 0x3b7be30

ISEL: Match complete!
=> 0x3b75d90: i32 = ADD 0x3b76090, 0x3b7be30

ISEL: Starting pattern match on root node: 0x3b7b320: i32 = REDEFINEISD::Lo 0x3b7b830 [ID=24]

  Initial Opcode index to 1204
  Morphed node: 0x3b7b320: i32 = ADDI 0x3b75390, 0x3b7b830

ISEL: Match complete!
=> 0x3b7b320: i32 = ADDI 0x3b75390, 0x3b7b830

ISEL: Starting pattern match on root node: 0x3b7b730: i32 = REDEFINEISD::Hi 0x3b77cc0 [ID=23]

  Initial Opcode index to 1186
  Morphed node: 0x3b7b730: i32 = LUI 0x3b77cc0

ISEL: Match complete!
=> 0x3b7b730: i32 = LUI 0x3b77cc0

ISEL: Starting pattern match on root node: 0x3b7bc30: i32 = REDEFINEISD::Lo 0x3b79d30 [ID=22]

  Initial Opcode index to 1204
  Morphed node: 0x3b7bc30: i32 = ADDI 0x3b75390, 0x3b79d30

ISEL: Match complete!
=> 0x3b7bc30: i32 = ADDI 0x3b75390, 0x3b79d30

ISEL: Starting pattern match on root node: 0x3b79930: i32 = REDEFINEISD::Hi 0x3b79530 [ID=21]

  Initial Opcode index to 1186
  Morphed node: 0x3b79930: i32 = LUI 0x3b79530

ISEL: Match complete!
=> 0x3b79930: i32 = LUI 0x3b79530

ISEL: Starting pattern match on root node: 0x3b7ac20: i32 = REDEFINEISD::Lo 0x3b7b420 [ID=20]

  Initial Opcode index to 1204
  Morphed node: 0x3b7ac20: i32 = ADDI 0x3b75390, 0x3b7b420

ISEL: Match complete!
=> 0x3b7ac20: i32 = ADDI 0x3b75390, 0x3b7b420

ISEL: Starting pattern match on root node: 0x3b7b020: i32 = REDEFINEISD::Hi 0x3b79030 [ID=19]

  Initial Opcode index to 1186
  Morphed node: 0x3b7b020: i32 = LUI 0x3b79030

ISEL: Match complete!
=> 0x3b7b020: i32 = LUI 0x3b79030

ISEL: Starting pattern match on root node: 0x3b7bd30: i32 = REDEFINEISD::Lo 0x3b774c0 [ID=18]

  Initial Opcode index to 1204
  Morphed node: 0x3b7bd30: i32 = ADDI 0x3b75390, 0x3b774c0

ISEL: Match complete!
=> 0x3b7bd30: i32 = ADDI 0x3b75390, 0x3b774c0

ISEL: Starting pattern match on root node: 0x3b75a90: i32 = REDEFINEISD::Hi 0x3b779c0 [ID=17]

  Initial Opcode index to 1186
  Morphed node: 0x3b75a90: i32 = LUI 0x3b779c0

ISEL: Match complete!
=> 0x3b75a90: i32 = LUI 0x3b779c0

ISEL: Starting pattern match on root node: 0x3b76090: i32 = REDEFINEISD::Lo 0x3b77dc0 [ID=16]

  Initial Opcode index to 1204
  Morphed node: 0x3b76090: i32 = ADDI 0x3b75390, 0x3b77dc0

ISEL: Match complete!
=> 0x3b76090: i32 = ADDI 0x3b75390, 0x3b77dc0

ISEL: Starting pattern match on root node: 0x3b7be30: i32 = REDEFINEISD::Hi 0x3b79430 [ID=15]

  Initial Opcode index to 1186
  Morphed node: 0x3b7be30: i32 = LUI 0x3b79430

ISEL: Match complete!
=> 0x3b7be30: i32 = LUI 0x3b79430

ISEL: Starting pattern match on root node: 0x3b778c0: f32,ch = load 0x3b57b78, 0x3b7c030, 0x3b7bf30<LD4[%0](align=16)> [ORD=28] [ID=14]

  Initial Opcode index to 5
  TypeSwitch[f32] from 10 to 159
  Morphed node: 0x3b778c0: f32,ch = FLW 0x3b7c030, 0x3b771c0, 0x3b57b78<Mem:LD4[%0](align=16)> [ORD=28]

ISEL: Match complete!
=> 0x3b778c0: f32,ch = FLW 0x3b7c030, 0x3b771c0, 0x3b57b78<Mem:LD4[%0](align=16)> [ORD=28]

=> 0x3b7b830: i32 = TargetGlobalAddress<[2 x float]* @redefine_out_b> 0 [TF=3]

=> 0x3b77cc0: i32 = TargetGlobalAddress<[2 x float]* @redefine_out_b> 0 [TF=2]

=> 0x3b79d30: i32 = TargetGlobalAddress<float* @nh_fin_de_rampe> 0 [TF=3]

=> 0x3b79530: i32 = TargetGlobalAddress<float* @nh_fin_de_rampe> 0 [TF=2]

=> 0x3b7b420: i32 = TargetGlobalAddress<i32* @glob_sg_bit0> 0 [TF=3]

=> 0x3b79030: i32 = TargetGlobalAddress<i32* @glob_sg_bit0> 0 [TF=2]

=> 0x3b774c0: i32 = TargetGlobalAddress<[2 x i32]* @redefine_out_c> 0 [TF=3]

=> 0x3b779c0: i32 = TargetGlobalAddress<[2 x i32]* @redefine_out_c> 0 [TF=2]

=> 0x3b77dc0: i32 = TargetGlobalAddress<i32* @glob_sg_bit1> 0 [TF=3]

=> 0x3b79430: i32 = TargetGlobalAddress<i32* @glob_sg_bit1> 0 [TF=2]

=> 0x3b57b78: ch = EntryToken [ORD=28]

===== Instruction selection ends:
Selected selection DAG: BB#0 'redefine_start2:redefine_start2.newName01'
SelectionDAG has 40 nodes:
  0x3b57b78: ch = EntryToken [ORD=28]

      0x3b75390: <multiple use>
      0x3b774c0: i32 = TargetGlobalAddress<[2 x i32]* @redefine_out_c> 0 [TF=3]

    0x3b7bd30: i32 = ADDI 0x3b75390, 0x3b774c0

      0x3b779c0: i32 = TargetGlobalAddress<[2 x i32]* @redefine_out_c> 0 [TF=2]

    0x3b75a90: i32 = LUI 0x3b779c0

  0x3b7b930: i32 = ADD 0x3b7bd30, 0x3b75a90

      0x3b75390: <multiple use>
      0x3b7b830: i32 = TargetGlobalAddress<[2 x float]* @redefine_out_b> 0 [TF=3]

    0x3b7b320: i32 = ADDI 0x3b75390, 0x3b7b830

      0x3b77cc0: i32 = TargetGlobalAddress<[2 x float]* @redefine_out_b> 0 [TF=2]

    0x3b7b730: i32 = LUI 0x3b77cc0

  0x3b7b220: i32 = ADD 0x3b7b320, 0x3b7b730

        0x3b75390: <multiple use>
        0x3b79d30: i32 = TargetGlobalAddress<float* @nh_fin_de_rampe> 0 [TF=3]

      0x3b7bc30: i32 = ADDI 0x3b75390, 0x3b79d30

        0x3b79530: i32 = TargetGlobalAddress<float* @nh_fin_de_rampe> 0 [TF=2]

      0x3b79930: i32 = LUI 0x3b79530

    0x3b7bb30: i32 = ADD 0x3b7bc30, 0x3b79930

    0x3b771c0: <multiple use>
          0x3b7bf30: i32 = Register %t5

          0x3b79830: i32 = TargetFrameIndex<-1>

        0x3b7c030: i32 = ADDI 0x3b7bf30, 0x3b79830 [ORD=28]

        0x3b771c0: <multiple use>
        0x3b57b78: <multiple use>
      0x3b778c0: f32,ch = FLW 0x3b7c030, 0x3b771c0, 0x3b57b78<Mem:LD4[%0](align=16)> [ORD=28]

      0x3b7b220: <multiple use>
      0x3b771c0: <multiple use>
      0x3b57b78: <multiple use>
    0x3b75690: ch = FSW 0x3b778c0, 0x3b7b220, 0x3b771c0, 0x3b57b78<Mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)]> [ORD=30]

  0x3b79330: f32,ch = FLW 0x3b7bb30, 0x3b771c0, 0x3b75690<Mem:LD4[@nh_fin_de_rampe]> [ORD=31]

        0x3b75390: <multiple use>
        0x3b7b420: i32 = TargetGlobalAddress<i32* @glob_sg_bit0> 0 [TF=3]

      0x3b7ac20: i32 = ADDI 0x3b75390, 0x3b7b420

        0x3b79030: i32 = TargetGlobalAddress<i32* @glob_sg_bit0> 0 [TF=2]

      0x3b7b020: i32 = LUI 0x3b79030

    0x3b7a820: i32 = ADD 0x3b7ac20, 0x3b7b020

    0x3b771c0: <multiple use>
      0x3b79330: <multiple use>
      0x3b7b220: <multiple use>
      0x3b777c0: <multiple use>
      0x3b79330: <multiple use>
    0x3b79630: ch = FSW 0x3b79330, 0x3b7b220, 0x3b777c0, 0x3b79330:1<Mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)]> [ORD=33]

  0x3b79130: i32,ch = LW 0x3b7a820, 0x3b771c0, 0x3b79630<Mem:LD4[@glob_sg_bit0]> [ORD=34]

        0x3b75390: <multiple use>
        0x3b77dc0: i32 = TargetGlobalAddress<i32* @glob_sg_bit1> 0 [TF=3]

      0x3b76090: i32 = ADDI 0x3b75390, 0x3b77dc0

        0x3b79430: i32 = TargetGlobalAddress<i32* @glob_sg_bit1> 0 [TF=2]

      0x3b7be30: i32 = LUI 0x3b79430

    0x3b75d90: i32 = ADD 0x3b76090, 0x3b7be30

    0x3b771c0: <multiple use>
      0x3b79130: <multiple use>
      0x3b7b930: <multiple use>
      0x3b771c0: <multiple use>
      0x3b79130: <multiple use>
    0x3b77ac0: ch = SW 0x3b79130, 0x3b7b930, 0x3b771c0, 0x3b79130:1<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0)]> [ORD=36]

  0x3b776c0: i32,ch = LW 0x3b75d90, 0x3b771c0, 0x3b77ac0<Mem:LD4[@glob_sg_bit1]> [ORD=37]

  0x3b777c0: i32 = TargetConstant<4>

  0x3b771c0: i32 = TargetConstant<0>

  0x3b75390: i32 = Register %zero

    0x3b776c0: <multiple use>
    0x3b7b930: <multiple use>
    0x3b777c0: <multiple use>
    0x3b776c0: <multiple use>
  0x3b76fc0: ch = SW 0x3b776c0, 0x3b7b930, 0x3b777c0, 0x3b776c0:1<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 1)]> [ORD=39]


********** List Scheduling BB#0 'redefine_start2.newName01' **********
SU(0): 0x3b76fc0: ch = SW 0x3b776c0, 0x3b7b930, 0x3b777c0, 0x3b776c0:1<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 1)]> [ORD=39] [ID=0]

  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
   val SU(4): Latency=1
   val SU(1): Latency=1
   ch  SU(4): Latency=1

SU(1): 0x3b7b930: i32 = ADD 0x3b7bd30, 0x3b75a90 [ID=1]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(3): Latency=1
   val SU(2): Latency=1
  Successors:
   val SU(0): Latency=1
   val SU(5): Latency=1

SU(2): 0x3b75a90: i32 = LUI 0x3b779c0 [ID=2]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(1): Latency=1

SU(3): 0x3b7bd30: i32 = ADDI 0x3b75390, 0x3b774c0 [ID=3]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(1): Latency=1

SU(4): 0x3b776c0: i32,ch = LW 0x3b75d90, 0x3b771c0, 0x3b77ac0<Mem:LD4[@glob_sg_bit1]> [ORD=37] [ID=4]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
   val SU(21): Latency=1
   ch  SU(5): Latency=1
  Successors:
   val SU(0): Latency=1
   ch  SU(0): Latency=1

SU(5): 0x3b77ac0: ch = SW 0x3b79130, 0x3b7b930, 0x3b771c0, 0x3b79130:1<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0)]> [ORD=36] [ID=5]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
   val SU(6): Latency=1
   val SU(1): Latency=1
   ch  SU(6): Latency=1
  Successors:
   ch  SU(4): Latency=1

SU(6): 0x3b79130: i32,ch = LW 0x3b7a820, 0x3b771c0, 0x3b79630<Mem:LD4[@glob_sg_bit0]> [ORD=34] [ID=6]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
   val SU(18): Latency=1
   ch  SU(7): Latency=1
  Successors:
   val SU(5): Latency=1
   ch  SU(5): Latency=1

SU(7): 0x3b79630: ch = FSW 0x3b79330, 0x3b7b220, 0x3b777c0, 0x3b79330:1<Mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)]> [ORD=33] [ID=7]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
   val SU(11): Latency=1
   val SU(8): Latency=1
   ch  SU(11): Latency=1
  Successors:
   ch  SU(6): Latency=1

SU(8): 0x3b7b220: i32 = ADD 0x3b7b320, 0x3b7b730 [ID=8]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 7
  Predecessors:
   val SU(10): Latency=1
   val SU(9): Latency=1
  Successors:
   val SU(7): Latency=1
   val SU(12): Latency=1

SU(9): 0x3b7b730: i32 = LUI 0x3b77cc0 [ID=9]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 8
  Successors:
   val SU(8): Latency=1

SU(10): 0x3b7b320: i32 = ADDI 0x3b75390, 0x3b7b830 [ID=10]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 8
  Successors:
   val SU(8): Latency=1

SU(11): 0x3b79330: f32,ch = FLW 0x3b7bb30, 0x3b771c0, 0x3b75690<Mem:LD4[@nh_fin_de_rampe]> [ORD=31] [ID=11]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 3
  Height             : 5
  Predecessors:
   val SU(15): Latency=1
   ch  SU(12): Latency=1
  Successors:
   val SU(7): Latency=1
   ch  SU(7): Latency=1

SU(12): 0x3b75690: ch = FSW 0x3b778c0, 0x3b7b220, 0x3b771c0, 0x3b57b78<Mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)]> [ORD=30] [ID=12]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 6
  Predecessors:
   val SU(13): Latency=1
   val SU(8): Latency=1
  Successors:
   ch  SU(11): Latency=1

SU(13): 0x3b778c0: f32,ch = FLW 0x3b7c030, 0x3b771c0, 0x3b57b78<Mem:LD4[%0](align=16)> [ORD=28] [ID=13]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 7
  Predecessors:
   val SU(14): Latency=1
  Successors:
   val SU(12): Latency=1

SU(14): 0x3b7c030: i32 = ADDI 0x3b7bf30, 0x3b79830 [ORD=28] [ID=14]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 8
  Successors:
   val SU(13): Latency=1

SU(15): 0x3b7bb30: i32 = ADD 0x3b7bc30, 0x3b79930 [ID=15]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 6
  Predecessors:
   val SU(17): Latency=1
   val SU(16): Latency=1
  Successors:
   val SU(11): Latency=1

SU(16): 0x3b79930: i32 = LUI 0x3b79530 [ID=16]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
   val SU(15): Latency=1

SU(17): 0x3b7bc30: i32 = ADDI 0x3b75390, 0x3b79d30 [ID=17]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
   val SU(15): Latency=1

SU(18): 0x3b7a820: i32 = ADD 0x3b7ac20, 0x3b7b020 [ID=18]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
   val SU(20): Latency=1
   val SU(19): Latency=1
  Successors:
   val SU(6): Latency=1

SU(19): 0x3b7b020: i32 = LUI 0x3b79030 [ID=19]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
   val SU(18): Latency=1

SU(20): 0x3b7ac20: i32 = ADDI 0x3b75390, 0x3b7b420 [ID=20]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
   val SU(18): Latency=1

SU(21): 0x3b75d90: i32 = ADD 0x3b76090, 0x3b7be30 [ID=21]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
   val SU(23): Latency=1
   val SU(22): Latency=1
  Successors:
   val SU(4): Latency=1

SU(22): 0x3b7be30: i32 = LUI 0x3b79430 [ID=22]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(21): Latency=1

SU(23): 0x3b76090: i32 = ADDI 0x3b75390, 0x3b77dc0 [ID=23]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(21): Latency=1


Examining Available:
Height 0: SU(0): 0x3b76fc0: ch = SW 0x3b776c0, 0x3b7b930, 0x3b777c0, 0x3b776c0:1<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 1)]> [ORD=39] [ID=0]


*** Scheduling [0]: SU(0): 0x3b76fc0: ch = SW 0x3b776c0, 0x3b7b930, 0x3b777c0, 0x3b776c0:1<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 1)]> [ORD=39] [ID=0]


Examining Available:
Height 1: SU(4): 0x3b776c0: i32,ch = LW 0x3b75d90, 0x3b771c0, 0x3b77ac0<Mem:LD4[@glob_sg_bit1]> [ORD=37] [ID=4]


*** Scheduling [1]: SU(4): 0x3b776c0: i32,ch = LW 0x3b75d90, 0x3b771c0, 0x3b77ac0<Mem:LD4[@glob_sg_bit1]> [ORD=37] [ID=4]


Examining Available:
Height 2: SU(21): 0x3b75d90: i32 = ADD 0x3b76090, 0x3b7be30 [ID=21]

Height 2: SU(5): 0x3b77ac0: ch = SW 0x3b79130, 0x3b7b930, 0x3b771c0, 0x3b79130:1<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0)]> [ORD=36] [ID=5]


*** Scheduling [2]: SU(21): 0x3b75d90: i32 = ADD 0x3b76090, 0x3b7be30 [ID=21]


Examining Available:
Height 3: SU(23): 0x3b76090: i32 = ADDI 0x3b75390, 0x3b77dc0 [ID=23]

Height 3: SU(22): 0x3b7be30: i32 = LUI 0x3b79430 [ID=22]

Height 2: SU(5): 0x3b77ac0: ch = SW 0x3b79130, 0x3b7b930, 0x3b771c0, 0x3b79130:1<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0)]> [ORD=36] [ID=5]


*** Scheduling [3]: SU(23): 0x3b76090: i32 = ADDI 0x3b75390, 0x3b77dc0 [ID=23]


Examining Available:
Height 3: SU(22): 0x3b7be30: i32 = LUI 0x3b79430 [ID=22]

Height 2: SU(5): 0x3b77ac0: ch = SW 0x3b79130, 0x3b7b930, 0x3b771c0, 0x3b79130:1<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0)]> [ORD=36] [ID=5]


*** Scheduling [4]: SU(22): 0x3b7be30: i32 = LUI 0x3b79430 [ID=22]


Examining Available:
Height 2: SU(5): 0x3b77ac0: ch = SW 0x3b79130, 0x3b7b930, 0x3b771c0, 0x3b79130:1<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0)]> [ORD=36] [ID=5]


*** Scheduling [5]: SU(5): 0x3b77ac0: ch = SW 0x3b79130, 0x3b7b930, 0x3b771c0, 0x3b79130:1<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0)]> [ORD=36] [ID=5]


Examining Available:
Height 6: SU(1): 0x3b7b930: i32 = ADD 0x3b7bd30, 0x3b75a90 [ID=1]

Height 6: SU(6): 0x3b79130: i32,ch = LW 0x3b7a820, 0x3b771c0, 0x3b79630<Mem:LD4[@glob_sg_bit0]> [ORD=34] [ID=6]


*** Scheduling [6]: SU(1): 0x3b7b930: i32 = ADD 0x3b7bd30, 0x3b75a90 [ID=1]


Examining Available:
Height 7: SU(3): 0x3b7bd30: i32 = ADDI 0x3b75390, 0x3b774c0 [ID=3]

Height 7: SU(2): 0x3b75a90: i32 = LUI 0x3b779c0 [ID=2]

Height 6: SU(6): 0x3b79130: i32,ch = LW 0x3b7a820, 0x3b771c0, 0x3b79630<Mem:LD4[@glob_sg_bit0]> [ORD=34] [ID=6]


*** Scheduling [7]: SU(3): 0x3b7bd30: i32 = ADDI 0x3b75390, 0x3b774c0 [ID=3]


Examining Available:
Height 7: SU(2): 0x3b75a90: i32 = LUI 0x3b779c0 [ID=2]

Height 6: SU(6): 0x3b79130: i32,ch = LW 0x3b7a820, 0x3b771c0, 0x3b79630<Mem:LD4[@glob_sg_bit0]> [ORD=34] [ID=6]


*** Scheduling [8]: SU(2): 0x3b75a90: i32 = LUI 0x3b779c0 [ID=2]


Examining Available:
Height 6: SU(6): 0x3b79130: i32,ch = LW 0x3b7a820, 0x3b771c0, 0x3b79630<Mem:LD4[@glob_sg_bit0]> [ORD=34] [ID=6]


*** Scheduling [9]: SU(6): 0x3b79130: i32,ch = LW 0x3b7a820, 0x3b771c0, 0x3b79630<Mem:LD4[@glob_sg_bit0]> [ORD=34] [ID=6]


Examining Available:
Height 10: SU(18): 0x3b7a820: i32 = ADD 0x3b7ac20, 0x3b7b020 [ID=18]

Height 10: SU(7): 0x3b79630: ch = FSW 0x3b79330, 0x3b7b220, 0x3b777c0, 0x3b79330:1<Mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)]> [ORD=33] [ID=7]


*** Scheduling [10]: SU(18): 0x3b7a820: i32 = ADD 0x3b7ac20, 0x3b7b020 [ID=18]


Examining Available:
Height 11: SU(20): 0x3b7ac20: i32 = ADDI 0x3b75390, 0x3b7b420 [ID=20]

Height 11: SU(19): 0x3b7b020: i32 = LUI 0x3b79030 [ID=19]

Height 10: SU(7): 0x3b79630: ch = FSW 0x3b79330, 0x3b7b220, 0x3b777c0, 0x3b79330:1<Mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)]> [ORD=33] [ID=7]


*** Scheduling [11]: SU(20): 0x3b7ac20: i32 = ADDI 0x3b75390, 0x3b7b420 [ID=20]


Examining Available:
Height 11: SU(19): 0x3b7b020: i32 = LUI 0x3b79030 [ID=19]

Height 10: SU(7): 0x3b79630: ch = FSW 0x3b79330, 0x3b7b220, 0x3b777c0, 0x3b79330:1<Mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)]> [ORD=33] [ID=7]


*** Scheduling [12]: SU(19): 0x3b7b020: i32 = LUI 0x3b79030 [ID=19]


Examining Available:
Height 10: SU(7): 0x3b79630: ch = FSW 0x3b79330, 0x3b7b220, 0x3b777c0, 0x3b79330:1<Mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)]> [ORD=33] [ID=7]


*** Scheduling [13]: SU(7): 0x3b79630: ch = FSW 0x3b79330, 0x3b7b220, 0x3b777c0, 0x3b79330:1<Mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)]> [ORD=33] [ID=7]


Examining Available:
Height 14: SU(11): 0x3b79330: f32,ch = FLW 0x3b7bb30, 0x3b771c0, 0x3b75690<Mem:LD4[@nh_fin_de_rampe]> [ORD=31] [ID=11]


*** Scheduling [14]: SU(11): 0x3b79330: f32,ch = FLW 0x3b7bb30, 0x3b771c0, 0x3b75690<Mem:LD4[@nh_fin_de_rampe]> [ORD=31] [ID=11]


Examining Available:
Height 15: SU(15): 0x3b7bb30: i32 = ADD 0x3b7bc30, 0x3b79930 [ID=15]

Height 15: SU(12): 0x3b75690: ch = FSW 0x3b778c0, 0x3b7b220, 0x3b771c0, 0x3b57b78<Mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)]> [ORD=30] [ID=12]


*** Scheduling [15]: SU(15): 0x3b7bb30: i32 = ADD 0x3b7bc30, 0x3b79930 [ID=15]


Examining Available:
Height 16: SU(17): 0x3b7bc30: i32 = ADDI 0x3b75390, 0x3b79d30 [ID=17]

Height 16: SU(16): 0x3b79930: i32 = LUI 0x3b79530 [ID=16]

Height 15: SU(12): 0x3b75690: ch = FSW 0x3b778c0, 0x3b7b220, 0x3b771c0, 0x3b57b78<Mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)]> [ORD=30] [ID=12]


*** Scheduling [16]: SU(17): 0x3b7bc30: i32 = ADDI 0x3b75390, 0x3b79d30 [ID=17]


Examining Available:
Height 16: SU(16): 0x3b79930: i32 = LUI 0x3b79530 [ID=16]

Height 15: SU(12): 0x3b75690: ch = FSW 0x3b778c0, 0x3b7b220, 0x3b771c0, 0x3b57b78<Mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)]> [ORD=30] [ID=12]


*** Scheduling [17]: SU(16): 0x3b79930: i32 = LUI 0x3b79530 [ID=16]


Examining Available:
Height 15: SU(12): 0x3b75690: ch = FSW 0x3b778c0, 0x3b7b220, 0x3b771c0, 0x3b57b78<Mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)]> [ORD=30] [ID=12]


*** Scheduling [18]: SU(12): 0x3b75690: ch = FSW 0x3b778c0, 0x3b7b220, 0x3b771c0, 0x3b57b78<Mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)]> [ORD=30] [ID=12]


Examining Available:
Height 19: SU(8): 0x3b7b220: i32 = ADD 0x3b7b320, 0x3b7b730 [ID=8]

Height 19: SU(13): 0x3b778c0: f32,ch = FLW 0x3b7c030, 0x3b771c0, 0x3b57b78<Mem:LD4[%0](align=16)> [ORD=28] [ID=13]


*** Scheduling [19]: SU(8): 0x3b7b220: i32 = ADD 0x3b7b320, 0x3b7b730 [ID=8]


Examining Available:
Height 20: SU(10): 0x3b7b320: i32 = ADDI 0x3b75390, 0x3b7b830 [ID=10]

Height 20: SU(9): 0x3b7b730: i32 = LUI 0x3b77cc0 [ID=9]

Height 19: SU(13): 0x3b778c0: f32,ch = FLW 0x3b7c030, 0x3b771c0, 0x3b57b78<Mem:LD4[%0](align=16)> [ORD=28] [ID=13]


*** Scheduling [20]: SU(10): 0x3b7b320: i32 = ADDI 0x3b75390, 0x3b7b830 [ID=10]


Examining Available:
Height 20: SU(9): 0x3b7b730: i32 = LUI 0x3b77cc0 [ID=9]

Height 19: SU(13): 0x3b778c0: f32,ch = FLW 0x3b7c030, 0x3b771c0, 0x3b57b78<Mem:LD4[%0](align=16)> [ORD=28] [ID=13]


*** Scheduling [21]: SU(9): 0x3b7b730: i32 = LUI 0x3b77cc0 [ID=9]


Examining Available:
Height 19: SU(13): 0x3b778c0: f32,ch = FLW 0x3b7c030, 0x3b771c0, 0x3b57b78<Mem:LD4[%0](align=16)> [ORD=28] [ID=13]


*** Scheduling [22]: SU(13): 0x3b778c0: f32,ch = FLW 0x3b7c030, 0x3b771c0, 0x3b57b78<Mem:LD4[%0](align=16)> [ORD=28] [ID=13]


Examining Available:
Height 23: SU(14): 0x3b7c030: i32 = ADDI 0x3b7bf30, 0x3b79830 [ORD=28] [ID=14]


*** Scheduling [23]: SU(14): 0x3b7c030: i32 = ADDI 0x3b7bf30, 0x3b79830 [ORD=28] [ID=14]

*** Final schedule ***
SU(14): 0x3b7c030: i32 = ADDI 0x3b7bf30, 0x3b79830 [ORD=28] [ID=14]

SU(13): 0x3b778c0: f32,ch = FLW 0x3b7c030, 0x3b771c0, 0x3b57b78<Mem:LD4[%0](align=16)> [ORD=28] [ID=13]

SU(9): 0x3b7b730: i32 = LUI 0x3b77cc0 [ID=9]

SU(10): 0x3b7b320: i32 = ADDI 0x3b75390, 0x3b7b830 [ID=10]

SU(8): 0x3b7b220: i32 = ADD 0x3b7b320, 0x3b7b730 [ID=8]

SU(12): 0x3b75690: ch = FSW 0x3b778c0, 0x3b7b220, 0x3b771c0, 0x3b57b78<Mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)]> [ORD=30] [ID=12]

SU(16): 0x3b79930: i32 = LUI 0x3b79530 [ID=16]

SU(17): 0x3b7bc30: i32 = ADDI 0x3b75390, 0x3b79d30 [ID=17]

SU(15): 0x3b7bb30: i32 = ADD 0x3b7bc30, 0x3b79930 [ID=15]

SU(11): 0x3b79330: f32,ch = FLW 0x3b7bb30, 0x3b771c0, 0x3b75690<Mem:LD4[@nh_fin_de_rampe]> [ORD=31] [ID=11]

SU(7): 0x3b79630: ch = FSW 0x3b79330, 0x3b7b220, 0x3b777c0, 0x3b79330:1<Mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)]> [ORD=33] [ID=7]

SU(19): 0x3b7b020: i32 = LUI 0x3b79030 [ID=19]

SU(20): 0x3b7ac20: i32 = ADDI 0x3b75390, 0x3b7b420 [ID=20]

SU(18): 0x3b7a820: i32 = ADD 0x3b7ac20, 0x3b7b020 [ID=18]

SU(6): 0x3b79130: i32,ch = LW 0x3b7a820, 0x3b771c0, 0x3b79630<Mem:LD4[@glob_sg_bit0]> [ORD=34] [ID=6]

SU(2): 0x3b75a90: i32 = LUI 0x3b779c0 [ID=2]

SU(3): 0x3b7bd30: i32 = ADDI 0x3b75390, 0x3b774c0 [ID=3]

SU(1): 0x3b7b930: i32 = ADD 0x3b7bd30, 0x3b75a90 [ID=1]

SU(5): 0x3b77ac0: ch = SW 0x3b79130, 0x3b7b930, 0x3b771c0, 0x3b79130:1<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0)]> [ORD=36] [ID=5]

SU(22): 0x3b7be30: i32 = LUI 0x3b79430 [ID=22]

SU(23): 0x3b76090: i32 = ADDI 0x3b75390, 0x3b77dc0 [ID=23]

SU(21): 0x3b75d90: i32 = ADD 0x3b76090, 0x3b7be30 [ID=21]

SU(4): 0x3b776c0: i32,ch = LW 0x3b75d90, 0x3b771c0, 0x3b77ac0<Mem:LD4[@glob_sg_bit1]> [ORD=37] [ID=4]

SU(0): 0x3b76fc0: ch = SW 0x3b776c0, 0x3b7b930, 0x3b777c0, 0x3b776c0:1<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 1)]> [ORD=39] [ID=0]


Total amount of phi nodes to update: 0
Initial selection DAG: BB#1 'redefine_start2:redefine_start2.return'
SelectionDAG has 1 nodes:
  0x3b57b78: ch = EntryToken


Optimized lowered selection DAG: BB#1 'redefine_start2:redefine_start2.return'
SelectionDAG has 1 nodes:
  0x3b57b78: ch = EntryToken


Legally typed node: 0x3b57b78: ch = EntryToken [ID=0]

Legally typed node: 0x7fffa88b7260: ch = handlenode 0x3b57b78 [ID=0]

Type-legalized selection DAG: BB#1 'redefine_start2:redefine_start2.return'
SelectionDAG has 1 nodes:
  0x3b57b78: ch = EntryToken [ID=-3]


Legalized selection DAG: BB#1 'redefine_start2:redefine_start2.return'
SelectionDAG has 1 nodes:
  0x3b57b78: ch = EntryToken [ID=0]


Optimized legalized selection DAG: BB#1 'redefine_start2:redefine_start2.return'
SelectionDAG has 1 nodes:
  0x3b57b78: ch = EntryToken [ID=0]


===== Instruction selection begins: BB#1 'redefine_start2.return'
=> 0x3b57b78: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: BB#1 'redefine_start2:redefine_start2.return'
SelectionDAG has 1 nodes:
  0x3b57b78: ch = EntryToken


********** List Scheduling BB#1 'redefine_start2.return' **********
*** Final schedule ***

Total amount of phi nodes to update: 0

*** Tail-duplicating BB#1

Merging into block: BB#0: derived from LLVM BB %redefine_start2.newName01
	%vreg0<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg0
	%vreg1<def> = FLW %vreg0<kill>, 0; mem:LD4[%0](align=16) FP32Bit:%vreg1 GR32Bit:%vreg0
	%vreg2<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg2
	%vreg3<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg3
	%vreg4<def> = ADD %vreg3<kill>, %vreg2<kill>; GR32Bit:%vreg4,%vreg3,%vreg2
	FSW %vreg1<kill>, %vreg4, 0; mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)] FP32Bit:%vreg1 GR32Bit:%vreg4
	%vreg5<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg5
	%vreg6<def> = ADDI %zero, <ga:@nh_fin_de_rampe>[TF=3]; GR32Bit:%vreg6
	%vreg7<def> = ADD %vreg6<kill>, %vreg5<kill>; GR32Bit:%vreg7,%vreg6,%vreg5
	%vreg8<def> = FLW %vreg7<kill>, 0; mem:LD4[@nh_fin_de_rampe] FP32Bit:%vreg8 GR32Bit:%vreg7
	FSW %vreg8<kill>, %vreg4, 4; mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)] FP32Bit:%vreg8 GR32Bit:%vreg4
	%vreg9<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg9
	%vreg10<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg10
	%vreg11<def> = ADD %vreg10<kill>, %vreg9<kill>; GR32Bit:%vreg11,%vreg10,%vreg9
	%vreg12<def> = LW %vreg11<kill>, 0; mem:LD4[@glob_sg_bit0] GR32Bit:%vreg12,%vreg11
	%vreg13<def> = LUI <ga:@redefine_out_c>[TF=2]; GR32Bit:%vreg13
	%vreg14<def> = ADDI %zero, <ga:@redefine_out_c>[TF=3]; GR32Bit:%vreg14
	%vreg15<def> = ADD %vreg14<kill>, %vreg13<kill>; GR32Bit:%vreg15,%vreg14,%vreg13
	SW %vreg12<kill>, %vreg15, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0)] GR32Bit:%vreg12,%vreg15
	%vreg16<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg16
	%vreg17<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg17
	%vreg18<def> = ADD %vreg17<kill>, %vreg16<kill>; GR32Bit:%vreg18,%vreg17,%vreg16
	%vreg19<def> = LW %vreg18<kill>, 0; mem:LD4[@glob_sg_bit1] GR32Bit:%vreg19,%vreg18
	SW %vreg19<kill>, %vreg15, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 1)] GR32Bit:%vreg19,%vreg15
    Successors according to CFG: BB#1
From MBB: BB#1: derived from LLVM BB %redefine_start2.return
    Predecessors according to CFG: BB#0

Removing MBB: BB#1: derived from LLVM BB %redefine_start2.return
# Machine code for function redefine_start2: SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start2.newName01
16B		%vreg0<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg0
32B		%vreg1<def> = FLW %vreg0<kill>, 0; mem:LD4[%0](align=16) FP32Bit:%vreg1 GR32Bit:%vreg0
48B		%vreg2<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg2
64B		%vreg3<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg3
80B		%vreg4<def> = ADD %vreg3<kill>, %vreg2<kill>; GR32Bit:%vreg4,%vreg3,%vreg2
96B		FSW %vreg1<kill>, %vreg4, 0; mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)] FP32Bit:%vreg1 GR32Bit:%vreg4
112B		%vreg5<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg5
128B		%vreg6<def> = ADDI %zero, <ga:@nh_fin_de_rampe>[TF=3]; GR32Bit:%vreg6
144B		%vreg7<def> = ADD %vreg6<kill>, %vreg5<kill>; GR32Bit:%vreg7,%vreg6,%vreg5
160B		%vreg8<def> = FLW %vreg7<kill>, 0; mem:LD4[@nh_fin_de_rampe] FP32Bit:%vreg8 GR32Bit:%vreg7
176B		FSW %vreg8<kill>, %vreg4, 4; mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)] FP32Bit:%vreg8 GR32Bit:%vreg4
192B		%vreg9<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg9
208B		%vreg10<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg10
224B		%vreg11<def> = ADD %vreg10<kill>, %vreg9<kill>; GR32Bit:%vreg11,%vreg10,%vreg9
240B		%vreg12<def> = LW %vreg11<kill>, 0; mem:LD4[@glob_sg_bit0] GR32Bit:%vreg12,%vreg11
256B		%vreg13<def> = LUI <ga:@redefine_out_c>[TF=2]; GR32Bit:%vreg13
272B		%vreg14<def> = ADDI %zero, <ga:@redefine_out_c>[TF=3]; GR32Bit:%vreg14
288B		%vreg15<def> = ADD %vreg14<kill>, %vreg13<kill>; GR32Bit:%vreg15,%vreg14,%vreg13
304B		SW %vreg12<kill>, %vreg15, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0)] GR32Bit:%vreg12,%vreg15
320B		%vreg16<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg16
336B		%vreg17<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg17
352B		%vreg18<def> = ADD %vreg17<kill>, %vreg16<kill>; GR32Bit:%vreg18,%vreg17,%vreg16
368B		%vreg19<def> = LW %vreg18<kill>, 0; mem:LD4[@glob_sg_bit1] GR32Bit:%vreg19,%vreg18
384B		SW %vreg19<kill>, %vreg15, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 1)] GR32Bit:%vreg19,%vreg15

# End machine code for function redefine_start2.

********** Stack Coloring **********
********** Function: redefine_start2
******** Pre-regalloc Machine LICM: redefine_start2 ********
******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: redefine_start2
********** PROCESS IMPLICIT DEFS **********
********** Function: redefine_start2
********** REWRITING TWO-ADDR INSTRS **********
********** Function: redefine_start2
# Machine code for function redefine_start2: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start2.newName01
16B		%vreg0<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg0
32B		%vreg1<def> = FLW %vreg0<kill>, 0; mem:LD4[%0](align=16) FP32Bit:%vreg1 GR32Bit:%vreg0
48B		%vreg2<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg2
64B		%vreg3<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg3
80B		%vreg4<def> = ADD %vreg3<kill>, %vreg2<kill>; GR32Bit:%vreg4,%vreg3,%vreg2
96B		FSW %vreg1<kill>, %vreg4, 0; mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)] FP32Bit:%vreg1 GR32Bit:%vreg4
112B		%vreg5<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg5
128B		%vreg6<def> = ADDI %zero, <ga:@nh_fin_de_rampe>[TF=3]; GR32Bit:%vreg6
144B		%vreg7<def> = ADD %vreg6<kill>, %vreg5<kill>; GR32Bit:%vreg7,%vreg6,%vreg5
160B		%vreg8<def> = FLW %vreg7<kill>, 0; mem:LD4[@nh_fin_de_rampe] FP32Bit:%vreg8 GR32Bit:%vreg7
176B		FSW %vreg8<kill>, %vreg4<kill>, 4; mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)] FP32Bit:%vreg8 GR32Bit:%vreg4
192B		%vreg9<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg9
208B		%vreg10<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg10
224B		%vreg11<def> = ADD %vreg10<kill>, %vreg9<kill>; GR32Bit:%vreg11,%vreg10,%vreg9
240B		%vreg12<def> = LW %vreg11<kill>, 0; mem:LD4[@glob_sg_bit0] GR32Bit:%vreg12,%vreg11
256B		%vreg13<def> = LUI <ga:@redefine_out_c>[TF=2]; GR32Bit:%vreg13
272B		%vreg14<def> = ADDI %zero, <ga:@redefine_out_c>[TF=3]; GR32Bit:%vreg14
288B		%vreg15<def> = ADD %vreg14<kill>, %vreg13<kill>; GR32Bit:%vreg15,%vreg14,%vreg13
304B		SW %vreg12<kill>, %vreg15, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0)] GR32Bit:%vreg12,%vreg15
320B		%vreg16<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg16
336B		%vreg17<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg17
352B		%vreg18<def> = ADD %vreg17<kill>, %vreg16<kill>; GR32Bit:%vreg18,%vreg17,%vreg16
368B		%vreg19<def> = LW %vreg18<kill>, 0; mem:LD4[@glob_sg_bit1] GR32Bit:%vreg19,%vreg18
384B		SW %vreg19<kill>, %vreg15<kill>, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 1)] GR32Bit:%vreg19,%vreg15

# End machine code for function redefine_start2.

Computing live-in reg-units in ABI blocks.
Created 0 new intervals.
********** INTERVALS **********
%vreg0 = [16r,32r:0)  0@16r
%vreg1 = [32r,96r:0)  0@32r
%vreg2 = [48r,80r:0)  0@48r
%vreg3 = [64r,80r:0)  0@64r
%vreg4 = [80r,176r:0)  0@80r
%vreg5 = [112r,144r:0)  0@112r
%vreg6 = [128r,144r:0)  0@128r
%vreg7 = [144r,160r:0)  0@144r
%vreg8 = [160r,176r:0)  0@160r
%vreg9 = [192r,224r:0)  0@192r
%vreg10 = [208r,224r:0)  0@208r
%vreg11 = [224r,240r:0)  0@224r
%vreg12 = [240r,304r:0)  0@240r
%vreg13 = [256r,288r:0)  0@256r
%vreg14 = [272r,288r:0)  0@272r
%vreg15 = [288r,384r:0)  0@288r
%vreg16 = [320r,352r:0)  0@320r
%vreg17 = [336r,352r:0)  0@336r
%vreg18 = [352r,368r:0)  0@352r
%vreg19 = [368r,384r:0)  0@368r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start2: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start2.newName01
16B		%vreg0<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg0
32B		%vreg1<def> = FLW %vreg0, 0; mem:LD4[%0](align=16) FP32Bit:%vreg1 GR32Bit:%vreg0
48B		%vreg2<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg2
64B		%vreg3<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg3
80B		%vreg4<def> = ADD %vreg3, %vreg2; GR32Bit:%vreg4,%vreg3,%vreg2
96B		FSW %vreg1, %vreg4, 0; mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)] FP32Bit:%vreg1 GR32Bit:%vreg4
112B		%vreg5<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg5
128B		%vreg6<def> = ADDI %zero, <ga:@nh_fin_de_rampe>[TF=3]; GR32Bit:%vreg6
144B		%vreg7<def> = ADD %vreg6, %vreg5; GR32Bit:%vreg7,%vreg6,%vreg5
160B		%vreg8<def> = FLW %vreg7, 0; mem:LD4[@nh_fin_de_rampe] FP32Bit:%vreg8 GR32Bit:%vreg7
176B		FSW %vreg8, %vreg4, 4; mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)] FP32Bit:%vreg8 GR32Bit:%vreg4
192B		%vreg9<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg9
208B		%vreg10<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg10
224B		%vreg11<def> = ADD %vreg10, %vreg9; GR32Bit:%vreg11,%vreg10,%vreg9
240B		%vreg12<def> = LW %vreg11, 0; mem:LD4[@glob_sg_bit0] GR32Bit:%vreg12,%vreg11
256B		%vreg13<def> = LUI <ga:@redefine_out_c>[TF=2]; GR32Bit:%vreg13
272B		%vreg14<def> = ADDI %zero, <ga:@redefine_out_c>[TF=3]; GR32Bit:%vreg14
288B		%vreg15<def> = ADD %vreg14, %vreg13; GR32Bit:%vreg15,%vreg14,%vreg13
304B		SW %vreg12, %vreg15, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0)] GR32Bit:%vreg12,%vreg15
320B		%vreg16<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg16
336B		%vreg17<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg17
352B		%vreg18<def> = ADD %vreg17, %vreg16; GR32Bit:%vreg18,%vreg17,%vreg16
368B		%vreg19<def> = LW %vreg18, 0; mem:LD4[@glob_sg_bit1] GR32Bit:%vreg19,%vreg18
384B		SW %vreg19, %vreg15, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 1)] GR32Bit:%vreg19,%vreg15

# End machine code for function redefine_start2.

********** SIMPLE REGISTER COALESCING **********
********** Function: redefine_start2
********** JOINING INTERVALS ***********
redefine_start2.newName01:
Trying to inflate 0 regs.
********** INTERVALS **********
%vreg0 = [16r,32r:0)  0@16r
%vreg1 = [32r,96r:0)  0@32r
%vreg2 = [48r,80r:0)  0@48r
%vreg3 = [64r,80r:0)  0@64r
%vreg4 = [80r,176r:0)  0@80r
%vreg5 = [112r,144r:0)  0@112r
%vreg6 = [128r,144r:0)  0@128r
%vreg7 = [144r,160r:0)  0@144r
%vreg8 = [160r,176r:0)  0@160r
%vreg9 = [192r,224r:0)  0@192r
%vreg10 = [208r,224r:0)  0@208r
%vreg11 = [224r,240r:0)  0@224r
%vreg12 = [240r,304r:0)  0@240r
%vreg13 = [256r,288r:0)  0@256r
%vreg14 = [272r,288r:0)  0@272r
%vreg15 = [288r,384r:0)  0@288r
%vreg16 = [320r,352r:0)  0@320r
%vreg17 = [336r,352r:0)  0@336r
%vreg18 = [352r,368r:0)  0@352r
%vreg19 = [368r,384r:0)  0@368r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start2: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start2.newName01
16B		%vreg0<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg0
32B		%vreg1<def> = FLW %vreg0, 0; mem:LD4[%0](align=16) FP32Bit:%vreg1 GR32Bit:%vreg0
48B		%vreg2<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg2
64B		%vreg3<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg3
80B		%vreg4<def> = ADD %vreg3, %vreg2; GR32Bit:%vreg4,%vreg3,%vreg2
96B		FSW %vreg1, %vreg4, 0; mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)] FP32Bit:%vreg1 GR32Bit:%vreg4
112B		%vreg5<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg5
128B		%vreg6<def> = ADDI %zero, <ga:@nh_fin_de_rampe>[TF=3]; GR32Bit:%vreg6
144B		%vreg7<def> = ADD %vreg6, %vreg5; GR32Bit:%vreg7,%vreg6,%vreg5
160B		%vreg8<def> = FLW %vreg7, 0; mem:LD4[@nh_fin_de_rampe] FP32Bit:%vreg8 GR32Bit:%vreg7
176B		FSW %vreg8, %vreg4, 4; mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)] FP32Bit:%vreg8 GR32Bit:%vreg4
192B		%vreg9<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg9
208B		%vreg10<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg10
224B		%vreg11<def> = ADD %vreg10, %vreg9; GR32Bit:%vreg11,%vreg10,%vreg9
240B		%vreg12<def> = LW %vreg11, 0; mem:LD4[@glob_sg_bit0] GR32Bit:%vreg12,%vreg11
256B		%vreg13<def> = LUI <ga:@redefine_out_c>[TF=2]; GR32Bit:%vreg13
272B		%vreg14<def> = ADDI %zero, <ga:@redefine_out_c>[TF=3]; GR32Bit:%vreg14
288B		%vreg15<def> = ADD %vreg14, %vreg13; GR32Bit:%vreg15,%vreg14,%vreg13
304B		SW %vreg12, %vreg15, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0)] GR32Bit:%vreg12,%vreg15
320B		%vreg16<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg16
336B		%vreg17<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg17
352B		%vreg18<def> = ADD %vreg17, %vreg16; GR32Bit:%vreg18,%vreg17,%vreg16
368B		%vreg19<def> = LW %vreg18, 0; mem:LD4[@glob_sg_bit1] GR32Bit:%vreg19,%vreg18
384B		SW %vreg19, %vreg15, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 1)] GR32Bit:%vreg19,%vreg15

# End machine code for function redefine_start2.

Before MISched:
# Machine code for function redefine_start2: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]

BB#0: derived from LLVM BB %redefine_start2.newName01
	%vreg0<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg0
	%vreg1<def> = FLW %vreg0, 0; mem:LD4[%0](align=16) FP32Bit:%vreg1 GR32Bit:%vreg0
	%vreg2<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg2
	%vreg3<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg3
	%vreg4<def> = ADD %vreg3, %vreg2; GR32Bit:%vreg4,%vreg3,%vreg2
	FSW %vreg1, %vreg4, 0; mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)] FP32Bit:%vreg1 GR32Bit:%vreg4
	%vreg5<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg5
	%vreg6<def> = ADDI %zero, <ga:@nh_fin_de_rampe>[TF=3]; GR32Bit:%vreg6
	%vreg7<def> = ADD %vreg6, %vreg5; GR32Bit:%vreg7,%vreg6,%vreg5
	%vreg8<def> = FLW %vreg7, 0; mem:LD4[@nh_fin_de_rampe] FP32Bit:%vreg8 GR32Bit:%vreg7
	FSW %vreg8, %vreg4, 4; mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)] FP32Bit:%vreg8 GR32Bit:%vreg4
	%vreg9<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg9
	%vreg10<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg10
	%vreg11<def> = ADD %vreg10, %vreg9; GR32Bit:%vreg11,%vreg10,%vreg9
	%vreg12<def> = LW %vreg11, 0; mem:LD4[@glob_sg_bit0] GR32Bit:%vreg12,%vreg11
	%vreg13<def> = LUI <ga:@redefine_out_c>[TF=2]; GR32Bit:%vreg13
	%vreg14<def> = ADDI %zero, <ga:@redefine_out_c>[TF=3]; GR32Bit:%vreg14
	%vreg15<def> = ADD %vreg14, %vreg13; GR32Bit:%vreg15,%vreg14,%vreg13
	SW %vreg12, %vreg15, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0)] GR32Bit:%vreg12,%vreg15
	%vreg16<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg16
	%vreg17<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg17
	%vreg18<def> = ADD %vreg17, %vreg16; GR32Bit:%vreg18,%vreg17,%vreg16
	%vreg19<def> = LW %vreg18, 0; mem:LD4[@glob_sg_bit1] GR32Bit:%vreg19,%vreg18
	SW %vreg19, %vreg15, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 1)] GR32Bit:%vreg19,%vreg15

# End machine code for function redefine_start2.


-------------
Starting new basic block BB#0
********** MI Scheduling **********
redefine_start2:BB#0 redefine_start2.newName01
  From: %vreg0<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg0
    To: End Remaining: 0
Max Pressure: FP32Bit=1
GR32Bit=3
Live In: 
Live Out: 
FP32BitLimit 32 Actual 1
GR32BitLimit 32 Actual 3
Excess PSets: 
4 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 0
  SU(5) in tree 0
  SU(6) in tree 1
  SU(7) in tree 1
  SU(8) in tree 1
  SU(9) in tree 1
  SU(10) in tree 1
  SU(11) in tree 2
  SU(12) in tree 2
  SU(13) in tree 2
  SU(14) in tree 2
  SU(15) in tree 2
  SU(16) in tree 2
  SU(17) in tree 2
  SU(18) in tree 2
  SU(19) in tree 3
  SU(20) in tree 3
  SU(21) in tree 3
  SU(22) in tree 3
  SU(23) in tree 3
SU(0):   %vreg0<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
   val SU(1): Latency=5 Reg=%vreg0

SU(1):   %vreg1<def> = FLW %vreg0, 0; mem:LD4[%0](align=16) FP32Bit:%vreg1 GR32Bit:%vreg0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 2
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg0
  Successors:
   val SU(5): Latency=2 Reg=%vreg1

SU(2):   %vreg2<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(4): Latency=5 Reg=%vreg2

SU(3):   %vreg3<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(4): Latency=5 Reg=%vreg3

SU(4):   %vreg4<def> = ADD %vreg3, %vreg2; GR32Bit:%vreg4,%vreg3,%vreg2
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
   val SU(3): Latency=5 Reg=%vreg3
   val SU(2): Latency=5 Reg=%vreg2
  Successors:
   val SU(10): Latency=5 Reg=%vreg4
   val SU(5): Latency=5 Reg=%vreg4

SU(5):   FSW %vreg1, %vreg4, 0; mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)] FP32Bit:%vreg1 GR32Bit:%vreg4
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 10
  Height             : 0
  Predecessors:
   val SU(1): Latency=2 Reg=%vreg1
   val SU(4): Latency=5 Reg=%vreg4
  Successors:
   ch  SU(10): Latency=0
   ch  SU(4294967295) *: Latency=0

SU(6):   %vreg5<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
   val SU(8): Latency=5 Reg=%vreg5

SU(7):   %vreg6<def> = ADDI %zero, <ga:@nh_fin_de_rampe>[TF=3]; GR32Bit:%vreg6
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
   val SU(8): Latency=5 Reg=%vreg6

SU(8):   %vreg7<def> = ADD %vreg6, %vreg5; GR32Bit:%vreg7,%vreg6,%vreg5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
   val SU(7): Latency=5 Reg=%vreg6
   val SU(6): Latency=5 Reg=%vreg5
  Successors:
   val SU(9): Latency=5 Reg=%vreg7

SU(9):   %vreg8<def> = FLW %vreg7, 0; mem:LD4[@nh_fin_de_rampe] FP32Bit:%vreg8 GR32Bit:%vreg7
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 2
  Predecessors:
   val SU(8): Latency=5 Reg=%vreg7
  Successors:
   val SU(10): Latency=2 Reg=%vreg8

SU(10):   FSW %vreg8, %vreg4, 4; mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)] FP32Bit:%vreg8 GR32Bit:%vreg4
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 12
  Height             : 0
  Predecessors:
   val SU(9): Latency=2 Reg=%vreg8
   val SU(4): Latency=5 Reg=%vreg4
   ch  SU(5): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(11):   %vreg9<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
   val SU(13): Latency=5 Reg=%vreg9

SU(12):   %vreg10<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg10
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
   val SU(13): Latency=5 Reg=%vreg10

SU(13):   %vreg11<def> = ADD %vreg10, %vreg9; GR32Bit:%vreg11,%vreg10,%vreg9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
   val SU(12): Latency=5 Reg=%vreg10
   val SU(11): Latency=5 Reg=%vreg9
  Successors:
   val SU(14): Latency=5 Reg=%vreg11

SU(14):   %vreg12<def> = LW %vreg11, 0; mem:LD4[@glob_sg_bit0] GR32Bit:%vreg12,%vreg11
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 2
  Predecessors:
   val SU(13): Latency=5 Reg=%vreg11
  Successors:
   val SU(18): Latency=2 Reg=%vreg12

SU(15):   %vreg13<def> = LUI <ga:@redefine_out_c>[TF=2]; GR32Bit:%vreg13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(17): Latency=5 Reg=%vreg13

SU(16):   %vreg14<def> = ADDI %zero, <ga:@redefine_out_c>[TF=3]; GR32Bit:%vreg14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(17): Latency=5 Reg=%vreg14

SU(17):   %vreg15<def> = ADD %vreg14, %vreg13; GR32Bit:%vreg15,%vreg14,%vreg13
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
   val SU(16): Latency=5 Reg=%vreg14
   val SU(15): Latency=5 Reg=%vreg13
  Successors:
   val SU(23): Latency=5 Reg=%vreg15
   val SU(18): Latency=5 Reg=%vreg15

SU(18):   SW %vreg12, %vreg15, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0)] GR32Bit:%vreg12,%vreg15
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 12
  Height             : 0
  Predecessors:
   val SU(14): Latency=2 Reg=%vreg12
   val SU(17): Latency=5 Reg=%vreg15
  Successors:
   ch  SU(23): Latency=0
   ch  SU(4294967295) *: Latency=0

SU(19):   %vreg16<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
   val SU(21): Latency=5 Reg=%vreg16

SU(20):   %vreg17<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
   val SU(21): Latency=5 Reg=%vreg17

SU(21):   %vreg18<def> = ADD %vreg17, %vreg16; GR32Bit:%vreg18,%vreg17,%vreg16
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
   val SU(20): Latency=5 Reg=%vreg17
   val SU(19): Latency=5 Reg=%vreg16
  Successors:
   val SU(22): Latency=5 Reg=%vreg18

SU(22):   %vreg19<def> = LW %vreg18, 0; mem:LD4[@glob_sg_bit1] GR32Bit:%vreg19,%vreg18
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 2
  Predecessors:
   val SU(21): Latency=5 Reg=%vreg18
  Successors:
   val SU(23): Latency=2 Reg=%vreg19

SU(23):   SW %vreg19, %vreg15, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 1)] GR32Bit:%vreg19,%vreg15
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 12
  Height             : 0
  Predecessors:
   val SU(22): Latency=2 Reg=%vreg19
   val SU(17): Latency=5 Reg=%vreg15
   ch  SU(18): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg0<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
   val SU(1): Latency=5 Reg=%vreg0

SU(1):   %vreg1<def> = FLW %vreg0, 0; mem:LD4[%0](align=16) FP32Bit:%vreg1 GR32Bit:%vreg0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 2
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg0
  Successors:
   val SU(5): Latency=2 Reg=%vreg1

SU(2):   %vreg2<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(4): Latency=5 Reg=%vreg2

SU(3):   %vreg3<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(4): Latency=5 Reg=%vreg3

SU(4):   %vreg4<def> = ADD %vreg3, %vreg2; GR32Bit:%vreg4,%vreg3,%vreg2
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
   val SU(3): Latency=5 Reg=%vreg3
   val SU(2): Latency=5 Reg=%vreg2
  Successors:
   val SU(10): Latency=5 Reg=%vreg4
   val SU(5): Latency=5 Reg=%vreg4

SU(5):   FSW %vreg1, %vreg4, 0; mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)] FP32Bit:%vreg1 GR32Bit:%vreg4
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 10
  Height             : 0
  Predecessors:
   val SU(1): Latency=2 Reg=%vreg1
   val SU(4): Latency=5 Reg=%vreg4
  Successors:
   ch  SU(10): Latency=0
   ch  SU(4294967295) *: Latency=0

SU(6):   %vreg5<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
   val SU(8): Latency=5 Reg=%vreg5

SU(7):   %vreg6<def> = ADDI %zero, <ga:@nh_fin_de_rampe>[TF=3]; GR32Bit:%vreg6
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
   val SU(8): Latency=5 Reg=%vreg6

SU(8):   %vreg7<def> = ADD %vreg6, %vreg5; GR32Bit:%vreg7,%vreg6,%vreg5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
   val SU(7): Latency=5 Reg=%vreg6
   val SU(6): Latency=5 Reg=%vreg5
  Successors:
   val SU(9): Latency=5 Reg=%vreg7

SU(9):   %vreg8<def> = FLW %vreg7, 0; mem:LD4[@nh_fin_de_rampe] FP32Bit:%vreg8 GR32Bit:%vreg7
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 2
  Predecessors:
   val SU(8): Latency=5 Reg=%vreg7
  Successors:
   val SU(10): Latency=2 Reg=%vreg8

SU(10):   FSW %vreg8, %vreg4, 4; mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)] FP32Bit:%vreg8 GR32Bit:%vreg4
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 12
  Height             : 0
  Predecessors:
   val SU(9): Latency=2 Reg=%vreg8
   val SU(4): Latency=5 Reg=%vreg4
   ch  SU(5): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(11):   %vreg9<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
   val SU(13): Latency=5 Reg=%vreg9

SU(12):   %vreg10<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg10
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
   val SU(13): Latency=5 Reg=%vreg10

SU(13):   %vreg11<def> = ADD %vreg10, %vreg9; GR32Bit:%vreg11,%vreg10,%vreg9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
   val SU(12): Latency=5 Reg=%vreg10
   val SU(11): Latency=5 Reg=%vreg9
  Successors:
   val SU(14): Latency=5 Reg=%vreg11

SU(14):   %vreg12<def> = LW %vreg11, 0; mem:LD4[@glob_sg_bit0] GR32Bit:%vreg12,%vreg11
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 2
  Predecessors:
   val SU(13): Latency=5 Reg=%vreg11
  Successors:
   val SU(18): Latency=2 Reg=%vreg12

SU(15):   %vreg13<def> = LUI <ga:@redefine_out_c>[TF=2]; GR32Bit:%vreg13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(17): Latency=5 Reg=%vreg13

SU(16):   %vreg14<def> = ADDI %zero, <ga:@redefine_out_c>[TF=3]; GR32Bit:%vreg14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(17): Latency=5 Reg=%vreg14

SU(17):   %vreg15<def> = ADD %vreg14, %vreg13; GR32Bit:%vreg15,%vreg14,%vreg13
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
   val SU(16): Latency=5 Reg=%vreg14
   val SU(15): Latency=5 Reg=%vreg13
  Successors:
   val SU(23): Latency=5 Reg=%vreg15
   val SU(18): Latency=5 Reg=%vreg15

SU(18):   SW %vreg12, %vreg15, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0)] GR32Bit:%vreg12,%vreg15
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 12
  Height             : 0
  Predecessors:
   val SU(14): Latency=2 Reg=%vreg12
   val SU(17): Latency=5 Reg=%vreg15
  Successors:
   ch  SU(23): Latency=0
   ch  SU(4294967295) *: Latency=0

SU(19):   %vreg16<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
   val SU(21): Latency=5 Reg=%vreg16

SU(20):   %vreg17<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
   val SU(21): Latency=5 Reg=%vreg17

SU(21):   %vreg18<def> = ADD %vreg17, %vreg16; GR32Bit:%vreg18,%vreg17,%vreg16
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
   val SU(20): Latency=5 Reg=%vreg17
   val SU(19): Latency=5 Reg=%vreg16
  Successors:
   val SU(22): Latency=5 Reg=%vreg18

SU(22):   %vreg19<def> = LW %vreg18, 0; mem:LD4[@glob_sg_bit1] GR32Bit:%vreg19,%vreg18
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 2
  Predecessors:
   val SU(21): Latency=5 Reg=%vreg18
  Successors:
   val SU(23): Latency=2 Reg=%vreg19

SU(23):   SW %vreg19, %vreg15, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 1)] GR32Bit:%vreg19,%vreg15
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 12
  Height             : 0
  Predecessors:
   val SU(22): Latency=2 Reg=%vreg19
   val SU(17): Latency=5 Reg=%vreg15
   ch  SU(18): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(12)  ILP: 1 / 1 = 1 Tree: 2 @0
Scheduling %vreg10<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg10
handleMove 208B -> 8B: %vreg10<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg10
     %vreg10:	[208r,224r:0)  0@208r
        -->	[8r,224r:0)  0@8r
     zero:	EMPTY
        -->	EMPTY
  Tree: 3 @5
Pick node SU(11)  ILP: 1 / 1 = 1 Tree: 2 @0
Scheduling %vreg9<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg9
handleMove 192B -> 12B: %vreg9<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg9
     %vreg9:	[192r,224r:0)  0@192r
        -->	[12r,224r:0)  0@12r
Pick node SU(15)  ILP: 1 / 1 = 1 Tree: 2 @0
Scheduling %vreg13<def> = LUI <ga:@redefine_out_c>[TF=2]; GR32Bit:%vreg13

*** Renumbered SlotIndexes 12-28 ***
handleMove 256B -> 20B: %vreg13<def> = LUI <ga:@redefine_out_c>[TF=2]; GR32Bit:%vreg13
     %vreg13:	[256r,288r:0)  0@256r
        -->	[20r,288r:0)  0@20r
Pick node SU(16)  ILP: 1 / 1 = 1 Tree: 2 @0
Scheduling %vreg14<def> = ADDI %zero, <ga:@redefine_out_c>[TF=3]; GR32Bit:%vreg14
handleMove 272B -> 24B: %vreg14<def> = ADDI %zero, <ga:@redefine_out_c>[TF=3]; GR32Bit:%vreg14
     %vreg14:	[272r,288r:0)  0@272r
        -->	[24r,288r:0)  0@24r
     zero:	EMPTY
        -->	EMPTY
Pick node SU(13)  ILP: 3 / 6 = 0.5 Tree: 2 @0
Scheduling %vreg11<def> = ADD %vreg10, %vreg9; GR32Bit:%vreg11,%vreg10,%vreg9

*** Renumbered SlotIndexes 24-56 ***
handleMove 224B -> 32B: %vreg11<def> = ADD %vreg10, %vreg9; GR32Bit:%vreg11,%vreg10,%vreg9
     %vreg11:	[224r,240r:0)  0@224r
        -->	[32r,240r:0)  0@32r
     %vreg10:	[8r,224r:0)  0@8r
        -->	[8r,32r:0)  0@8r
     %vreg9:	[12r,224r:0)  0@12r
        -->	[12r,32r:0)  0@12r
Pick node SU(17)  ILP: 3 / 6 = 0.5 Tree: 2 @0
Scheduling %vreg15<def> = ADD %vreg14, %vreg13; GR32Bit:%vreg15,%vreg14,%vreg13
handleMove 288B -> 36B: %vreg15<def> = ADD %vreg14, %vreg13; GR32Bit:%vreg15,%vreg14,%vreg13
     %vreg15:	[288r,384r:0)  0@288r
        -->	[36r,384r:0)  0@36r
     %vreg14:	[24r,288r:0)  0@24r
        -->	[24r,36r:0)  0@24r
     %vreg13:	[20r,288r:0)  0@20r
        -->	[20r,36r:0)  0@20r
Pick node SU(14)  ILP: 4 / 11 = 0.363636 Tree: 2 @0
Scheduling %vreg12<def> = LW %vreg11, 0; mem:LD4[@glob_sg_bit0] GR32Bit:%vreg12,%vreg11

*** Renumbered SlotIndexes 36-76 ***
handleMove 240B -> 44B: %vreg12<def> = LW %vreg11, 0; mem:LD4[@glob_sg_bit0] GR32Bit:%vreg12,%vreg11
     %vreg12:	[240r,304r:0)  0@240r
        -->	[44r,304r:0)  0@44r
     %vreg11:	[32r,240r:0)  0@32r
        -->	[32r,44r:0)  0@32r
Pick node SU(18)  ILP: 8 / 13 = 0.615385 Tree: 2 @0
Scheduling SW %vreg12, %vreg15, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0)] GR32Bit:%vreg12,%vreg15
handleMove 304B -> 48B: SW %vreg12, %vreg15, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0)] GR32Bit:%vreg12,%vreg15
     %vreg12:	[44r,304r:0)  0@44r
        -->	[44r,48r:0)  0@44r
     %vreg15:	[36r,384r:0)  0@36r
        -->	[36r,384r:0)  0@36r
Pick node SU(19)  ILP: 1 / 1 = 1 Tree: 3 @5
Scheduling %vreg16<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg16

*** Renumbered SlotIndexes 48-104 ***
handleMove 320B -> 56B: %vreg16<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg16
     %vreg16:	[320r,352r:0)  0@320r
        -->	[56r,352r:0)  0@56r
  Tree: 2 @5
Pick node SU(20)  ILP: 1 / 1 = 1 Tree: 3 @5
Scheduling %vreg17<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg17
handleMove 336B -> 60B: %vreg17<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg17
     %vreg17:	[336r,352r:0)  0@336r
        -->	[60r,352r:0)  0@60r
     zero:	EMPTY
        -->	EMPTY
Pick node SU(21)  ILP: 3 / 6 = 0.5 Tree: 3 @5
Scheduling %vreg18<def> = ADD %vreg17, %vreg16; GR32Bit:%vreg18,%vreg17,%vreg16

*** Renumbered SlotIndexes 60-124 ***
handleMove 352B -> 68B: %vreg18<def> = ADD %vreg17, %vreg16; GR32Bit:%vreg18,%vreg17,%vreg16
     %vreg18:	[352r,368r:0)  0@352r
        -->	[68r,368r:0)  0@68r
     %vreg17:	[60r,352r:0)  0@60r
        -->	[60r,68r:0)  0@60r
     %vreg16:	[56r,352r:0)  0@56r
        -->	[56r,68r:0)  0@56r
Pick node SU(22)  ILP: 4 / 11 = 0.363636 Tree: 3 @5
Scheduling %vreg19<def> = LW %vreg18, 0; mem:LD4[@glob_sg_bit1] GR32Bit:%vreg19,%vreg18
handleMove 368B -> 72B: %vreg19<def> = LW %vreg18, 0; mem:LD4[@glob_sg_bit1] GR32Bit:%vreg19,%vreg18
     %vreg19:	[368r,384r:0)  0@368r
        -->	[72r,384r:0)  0@72r
     %vreg18:	[68r,368r:0)  0@68r
        -->	[68r,72r:0)  0@68r
Pick node SU(23)  ILP: 5 / 13 = 0.384615 Tree: 3 @5
Scheduling SW %vreg19, %vreg15, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 1)] GR32Bit:%vreg19,%vreg15

*** Renumbered SlotIndexes 72-152 ***
handleMove 384B -> 80B: SW %vreg19, %vreg15, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 1)] GR32Bit:%vreg19,%vreg15
     %vreg19:	[72r,384r:0)  0@72r
        -->	[72r,80r:0)  0@72r
     %vreg15:	[36r,384r:0)  0@36r
        -->	[36r,80r:0)  0@36r
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg0<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg0
  Tree: 1 @5
Pick node SU(3)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg3<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg3
handleMove 112B -> 92B: %vreg3<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg3
     %vreg3:	[112r,120r:0)  0@112r
        -->	[92r,120r:0)  0@92r
     zero:	EMPTY
        -->	EMPTY
Pick node SU(2)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg2<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg2

*** Renumbered SlotIndexes 92-172 ***
handleMove 116B -> 100B: %vreg2<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg2
     %vreg2:	[116r,132r:0)  0@116r
        -->	[100r,132r:0)  0@100r
Pick node SU(4)  ILP: 3 / 6 = 0.5 Tree: 0 @0
Scheduling %vreg4<def> = ADD %vreg3, %vreg2; GR32Bit:%vreg4,%vreg3,%vreg2
handleMove 132B -> 104B: %vreg4<def> = ADD %vreg3, %vreg2; GR32Bit:%vreg4,%vreg3,%vreg2
     %vreg4:	[132r,176r:0)  0@132r
        -->	[104r,176r:0)  0@104r
     %vreg3:	[92r,132r:0)  0@92r
        -->	[92r,104r:0)  0@92r
     %vreg2:	[100r,132r:0)  0@100r
        -->	[100r,104r:0)  0@100r
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg1<def> = FLW %vreg0, 0; mem:LD4[%0](align=16) FP32Bit:%vreg1 GR32Bit:%vreg0
Pick node SU(5)  ILP: 6 / 11 = 0.545455 Tree: 0 @0
Scheduling FSW %vreg1, %vreg4, 0; mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)] FP32Bit:%vreg1 GR32Bit:%vreg4
Pick node SU(6)  ILP: 1 / 1 = 1 Tree: 1 @5
Scheduling %vreg5<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg5
  Tree: 0 @5
Pick node SU(7)  ILP: 1 / 1 = 1 Tree: 1 @5
Scheduling %vreg6<def> = ADDI %zero, <ga:@nh_fin_de_rampe>[TF=3]; GR32Bit:%vreg6
Pick node SU(8)  ILP: 3 / 6 = 0.5 Tree: 1 @5
Scheduling %vreg7<def> = ADD %vreg6, %vreg5; GR32Bit:%vreg7,%vreg6,%vreg5
Pick node SU(9)  ILP: 4 / 11 = 0.363636 Tree: 1 @5
Scheduling %vreg8<def> = FLW %vreg7, 0; mem:LD4[@nh_fin_de_rampe] FP32Bit:%vreg8 GR32Bit:%vreg7
Pick node SU(10)  ILP: 5 / 13 = 0.384615 Tree: 1 @5
Scheduling FSW %vreg8, %vreg4, 4; mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)] FP32Bit:%vreg8 GR32Bit:%vreg4
*** Final schedule for BB#0 ***
SU(12):   %vreg10<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg10
SU(11):   %vreg9<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg9
SU(15):   %vreg13<def> = LUI <ga:@redefine_out_c>[TF=2]; GR32Bit:%vreg13
SU(16):   %vreg14<def> = ADDI %zero, <ga:@redefine_out_c>[TF=3]; GR32Bit:%vreg14
SU(13):   %vreg11<def> = ADD %vreg10, %vreg9; GR32Bit:%vreg11,%vreg10,%vreg9
SU(17):   %vreg15<def> = ADD %vreg14, %vreg13; GR32Bit:%vreg15,%vreg14,%vreg13
SU(14):   %vreg12<def> = LW %vreg11, 0; mem:LD4[@glob_sg_bit0] GR32Bit:%vreg12,%vreg11
SU(18):   SW %vreg12, %vreg15, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0)] GR32Bit:%vreg12,%vreg15
SU(19):   %vreg16<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg16
SU(20):   %vreg17<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg17
SU(21):   %vreg18<def> = ADD %vreg17, %vreg16; GR32Bit:%vreg18,%vreg17,%vreg16
SU(22):   %vreg19<def> = LW %vreg18, 0; mem:LD4[@glob_sg_bit1] GR32Bit:%vreg19,%vreg18
SU(23):   SW %vreg19, %vreg15, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 1)] GR32Bit:%vreg19,%vreg15
SU(0):   %vreg0<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg0
SU(3):   %vreg3<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg3
SU(2):   %vreg2<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg2
SU(4):   %vreg4<def> = ADD %vreg3, %vreg2; GR32Bit:%vreg4,%vreg3,%vreg2
SU(1):   %vreg1<def> = FLW %vreg0, 0; mem:LD4[%0](align=16) FP32Bit:%vreg1 GR32Bit:%vreg0
SU(5):   FSW %vreg1, %vreg4, 0; mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)] FP32Bit:%vreg1 GR32Bit:%vreg4
SU(6):   %vreg5<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg5
SU(7):   %vreg6<def> = ADDI %zero, <ga:@nh_fin_de_rampe>[TF=3]; GR32Bit:%vreg6
SU(8):   %vreg7<def> = ADD %vreg6, %vreg5; GR32Bit:%vreg7,%vreg6,%vreg5
SU(9):   %vreg8<def> = FLW %vreg7, 0; mem:LD4[@nh_fin_de_rampe] FP32Bit:%vreg8 GR32Bit:%vreg7
SU(10):   FSW %vreg8, %vreg4, 4; mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)] FP32Bit:%vreg8 GR32Bit:%vreg4


*** Renumbered SlotIndexes 4-268 ***

*** Renumbered SlotIndexes 16-296 ***

*** Renumbered SlotIndexes 28-316 ***

*** Renumbered SlotIndexes 40-344 ***

*** Renumbered SlotIndexes 52-364 ***

*** Renumbered SlotIndexes 64-392 ***

*** Renumbered SlotIndexes 76-412 ***

*** Renumbered SlotIndexes 88-424 ***

*** Renumbered SlotIndexes 100-436 ***

*** Renumbered SlotIndexes 112-448 ***

*** Renumbered SlotIndexes 124-460 ***

*** Renumbered SlotIndexes 136-472 ***

*** Renumbered SlotIndexes 148-484 ***

*** Renumbered SlotIndexes 160-496 ***

*** Renumbered SlotIndexes 172-508 ***

*** Renumbered SlotIndexes 184-520 ***

*** Renumbered SlotIndexes 196-532 ***

*** Renumbered SlotIndexes 208-544 ***

*** Renumbered SlotIndexes 220-556 ***

*** Renumbered SlotIndexes 232-568 ***

*** Renumbered SlotIndexes 244-580 ***

*** Renumbered SlotIndexes 256-592 ***

*** Renumbered SlotIndexes 268-604 ***

*** Renumbered SlotIndexes 280-616 ***

*** Renumbered SlotIndexes 292-628 ***

*** Renumbered SlotIndexes 304-640 ***

*** Renumbered SlotIndexes 316-652 ***

*** Renumbered SlotIndexes 328-664 ***

*** Renumbered SlotIndexes 340-676 ***

*** Renumbered SlotIndexes 352-688 ***

*** Renumbered SlotIndexes 364-700 ***

*** Renumbered SlotIndexes 376-712 ***

*** Renumbered SlotIndexes 388-724 ***

*** Renumbered SlotIndexes 400-736 ***
Partitioning instructions of the region into multiple CEs
instr:  %vreg10<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg10
instr:  %vreg9<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg9
instr:  %vreg13<def> = LUI <ga:@redefine_out_c>[TF=2]; GR32Bit:%vreg13
instr:  %vreg14<def> = ADDI %zero, <ga:@redefine_out_c>[TF=3]; GR32Bit:%vreg14
instr:  %vreg11<def> = ADD %vreg10, %vreg9; GR32Bit:%vreg11,%vreg10,%vreg9
instr:  %vreg15<def> = ADD %vreg14, %vreg13; GR32Bit:%vreg15,%vreg14,%vreg13
instr:  %vreg12<def> = LW %vreg11, 0; mem:LD4[@glob_sg_bit0] GR32Bit:%vreg12,%vreg11
instr:  SW %vreg12, %vreg15, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0)] GR32Bit:%vreg12,%vreg15
instr:  %vreg16<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg16
instr:  %vreg17<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg17
instr:  %vreg18<def> = ADD %vreg17, %vreg16; GR32Bit:%vreg18,%vreg17,%vreg16
instr:  %vreg19<def> = LW %vreg18, 0; mem:LD4[@glob_sg_bit1] GR32Bit:%vreg19,%vreg18
instr:  SW %vreg19, %vreg15, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 1)] GR32Bit:%vreg19,%vreg15
instr:  %vreg0<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg0
instr:  %vreg3<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg3
instr:  %vreg2<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg2
instr:  %vreg4<def> = ADD %vreg3, %vreg2; GR32Bit:%vreg4,%vreg3,%vreg2
instr:  %vreg1<def> = FLW %vreg0, 0; mem:LD4[%0](align=16) FP32Bit:%vreg1 GR32Bit:%vreg0
instr:  FSW %vreg1, %vreg4, 0; mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)] FP32Bit:%vreg1 GR32Bit:%vreg4
instr:  %vreg5<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg5
instr:  %vreg6<def> = ADDI %zero, <ga:@nh_fin_de_rampe>[TF=3]; GR32Bit:%vreg6
instr:  %vreg7<def> = ADD %vreg6, %vreg5; GR32Bit:%vreg7,%vreg6,%vreg5
instr:  %vreg8<def> = FLW %vreg7, 0; mem:LD4[@nh_fin_de_rampe] FP32Bit:%vreg8 GR32Bit:%vreg7
instr:  FSW %vreg8, %vreg4, 4; mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)] FP32Bit:%vreg8 GR32Bit:%vreg4
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
before falloc, state of bb0:BB#0: derived from LLVM BB %redefine_start2.newName01
	%vreg20<def> = ADD %t5, %zero; GR32Bit:%vreg20
	%vreg22<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg22
	%vreg23<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg23
	%vreg24<def> = SRLI %vreg23, 12; GR32Bit:%vreg24,%vreg23
	%vreg25<def> = ADD %vreg22, %vreg24; GR32Bit:%vreg25,%vreg22,%vreg24
	%vreg26<def> = ADDI %zero, 28; GR32Bit:%vreg26
	%vreg27<def> = SRLI %t5, 22; GR32Bit:%vreg27
	%vreg28<def> = SRLI %t5, 12; GR32Bit:%vreg28
	%vreg29<def> = ANDI %vreg28, 15; GR32Bit:%vreg29,%vreg28
	%vreg30<def> = SRLI %t5, 6; GR32Bit:%vreg30
	%vreg31<def> = ANDI %vreg30, 63; GR32Bit:%vreg31,%vreg30
	%vreg32<def> = ADDI %zero, 832; GR32Bit:%vreg32
	%vreg33<def> = MUL %vreg27, %vreg32; GR32Bit:%vreg33,%vreg27,%vreg32
	%vreg34<def> = ADDI %zero, 52; GR32Bit:%vreg34
	%vreg35<def> = MUL %vreg29, %vreg34; GR32Bit:%vreg35,%vreg29,%vreg34
	%vreg36<def> = ADD %vreg35, %vreg31; GR32Bit:%vreg36,%vreg35,%vreg31
	%vreg37<def> = ADD %vreg36, %vreg33; GR32Bit:%vreg37,%vreg36,%vreg33
	%vreg38<def> = MUL %vreg37, %vreg26; GR32Bit:%vreg38,%vreg37,%vreg26
	%vreg21<def> = ADD %vreg25, %vreg38; GR32Bit:%vreg21,%vreg25,%vreg38
	%vreg10<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg10
	%vreg9<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg9
	%vreg13<def> = LUI <ga:@redefine_out_c>[TF=2]; GR32Bit:%vreg13
	%vreg14<def> = ADDI %zero, <ga:@redefine_out_c>[TF=3]; GR32Bit:%vreg14
	%vreg11<def> = ADD %vreg10, %vreg9; GR32Bit:%vreg11,%vreg10,%vreg9
	%vreg15<def> = ADD %vreg14, %vreg13; GR32Bit:%vreg15,%vreg14,%vreg13
	%vreg12<def> = LW %vreg11, 0; mem:LD4[@glob_sg_bit0] GR32Bit:%vreg12,%vreg11
	SW %vreg12, %vreg15, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0)] GR32Bit:%vreg12,%vreg15
	%vreg16<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg16
	%vreg17<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg17
	%vreg18<def> = ADD %vreg17, %vreg16; GR32Bit:%vreg18,%vreg17,%vreg16
	%vreg19<def> = LW %vreg18, 0; mem:LD4[@glob_sg_bit1] GR32Bit:%vreg19,%vreg18
	SW %vreg19, %vreg15, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 1)] GR32Bit:%vreg19,%vreg15
	%vreg0<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg0
	%vreg3<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg3
	%vreg2<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg2
	%vreg4<def> = ADD %vreg3, %vreg2; GR32Bit:%vreg4,%vreg3,%vreg2
	%vreg1<def> = FLW %vreg0, 0; mem:LD4[%0](align=16) FP32Bit:%vreg1 GR32Bit:%vreg0
	FSW %vreg1, %vreg4, 0; mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)] FP32Bit:%vreg1 GR32Bit:%vreg4
	%vreg5<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg5
	%vreg6<def> = ADDI %zero, <ga:@nh_fin_de_rampe>[TF=3]; GR32Bit:%vreg6
	%vreg7<def> = ADD %vreg6, %vreg5; GR32Bit:%vreg7,%vreg6,%vreg5
	%vreg8<def> = FLW %vreg7, 0; mem:LD4[@nh_fin_de_rampe] FP32Bit:%vreg8 GR32Bit:%vreg7
	FSW %vreg8, %vreg4, 4; mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)] FP32Bit:%vreg8 GR32Bit:%vreg4
	%vreg39<def> = ADD %t5, %zero; GR32Bit:%vreg39
	%vreg41<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg41
	%vreg42<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg42
	%vreg43<def> = SRLI %vreg42, 12; GR32Bit:%vreg43,%vreg42
	%vreg44<def> = ADD %vreg41, %vreg43; GR32Bit:%vreg44,%vreg41,%vreg43
	%vreg45<def> = ADDI %zero, 28; GR32Bit:%vreg45
	%vreg46<def> = SRLI %t5, 22; GR32Bit:%vreg46
	%vreg47<def> = SRLI %t5, 12; GR32Bit:%vreg47
	%vreg48<def> = ANDI %vreg47, 15; GR32Bit:%vreg48,%vreg47
	%vreg49<def> = SRLI %t5, 6; GR32Bit:%vreg49
	%vreg50<def> = ANDI %vreg49, 63; GR32Bit:%vreg50,%vreg49
	%vreg51<def> = ADDI %zero, 832; GR32Bit:%vreg51
	%vreg52<def> = MUL %vreg46, %vreg51; GR32Bit:%vreg52,%vreg46,%vreg51
	%vreg53<def> = ADDI %zero, 52; GR32Bit:%vreg53
	%vreg54<def> = MUL %vreg48, %vreg53; GR32Bit:%vreg54,%vreg48,%vreg53
	%vreg55<def> = ADD %vreg54, %vreg50; GR32Bit:%vreg55,%vreg54,%vreg50
	%vreg56<def> = ADD %vreg55, %vreg52; GR32Bit:%vreg56,%vreg55,%vreg52
	%vreg57<def> = MUL %vreg56, %vreg45; GR32Bit:%vreg57,%vreg56,%vreg45
	%vreg40<def> = ADD %vreg44, %vreg57; GR32Bit:%vreg40,%vreg44,%vreg57
	%vreg58<def> = ADD %t5, %zero; GR32Bit:%vreg58
	%vreg60<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg60
	%vreg61<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg61
	%vreg62<def> = SRLI %vreg61, 12; GR32Bit:%vreg62,%vreg61
	%vreg63<def> = ADD %vreg60, %vreg62; GR32Bit:%vreg63,%vreg60,%vreg62
	%vreg64<def> = ADDI %zero, 28; GR32Bit:%vreg64
	%vreg65<def> = SRLI %t5, 22; GR32Bit:%vreg65
	%vreg66<def> = SRLI %t5, 12; GR32Bit:%vreg66
	%vreg67<def> = ANDI %vreg66, 15; GR32Bit:%vreg67,%vreg66
	%vreg68<def> = SRLI %t5, 6; GR32Bit:%vreg68
	%vreg69<def> = ANDI %vreg68, 63; GR32Bit:%vreg69,%vreg68
	%vreg70<def> = ADDI %zero, 832; GR32Bit:%vreg70
	%vreg71<def> = MUL %vreg65, %vreg70; GR32Bit:%vreg71,%vreg65,%vreg70
	%vreg72<def> = ADDI %zero, 52; GR32Bit:%vreg72
	%vreg73<def> = MUL %vreg67, %vreg72; GR32Bit:%vreg73,%vreg67,%vreg72
	%vreg74<def> = ADD %vreg73, %vreg69; GR32Bit:%vreg74,%vreg73,%vreg69
	%vreg75<def> = ADD %vreg74, %vreg71; GR32Bit:%vreg75,%vreg74,%vreg71
	%vreg76<def> = MUL %vreg75, %vreg64; GR32Bit:%vreg76,%vreg75,%vreg64
	%vreg59<def> = ADD %vreg63, %vreg76; GR32Bit:%vreg59,%vreg63,%vreg76
	%vreg77<def> = ADD %t5, %zero; GR32Bit:%vreg77
	%vreg79<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg79
	%vreg80<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg80
	%vreg81<def> = SRLI %vreg80, 12; GR32Bit:%vreg81,%vreg80
	%vreg82<def> = ADD %vreg79, %vreg81; GR32Bit:%vreg82,%vreg79,%vreg81
	%vreg83<def> = ADDI %zero, 28; GR32Bit:%vreg83
	%vreg84<def> = SRLI %t5, 22; GR32Bit:%vreg84
	%vreg85<def> = SRLI %t5, 12; GR32Bit:%vreg85
	%vreg86<def> = ANDI %vreg85, 15; GR32Bit:%vreg86,%vreg85
	%vreg87<def> = SRLI %t5, 6; GR32Bit:%vreg87
	%vreg88<def> = ANDI %vreg87, 63; GR32Bit:%vreg88,%vreg87
	%vreg89<def> = ADDI %zero, 832; GR32Bit:%vreg89
	%vreg90<def> = MUL %vreg84, %vreg89; GR32Bit:%vreg90,%vreg84,%vreg89
	%vreg91<def> = ADDI %zero, 52; GR32Bit:%vreg91
	%vreg92<def> = MUL %vreg86, %vreg91; GR32Bit:%vreg92,%vreg86,%vreg91
	%vreg93<def> = ADD %vreg92, %vreg88; GR32Bit:%vreg93,%vreg92,%vreg88
	%vreg94<def> = ADD %vreg93, %vreg90; GR32Bit:%vreg94,%vreg93,%vreg90
	%vreg95<def> = MUL %vreg94, %vreg83; GR32Bit:%vreg95,%vreg94,%vreg83
	%vreg78<def> = ADD %vreg82, %vreg95; GR32Bit:%vreg78,%vreg82,%vreg95
Adding all fallocs first to avoid stalls due to sequential fallocs and fbinds
Adding writecm(for writing sync count to context frames) and fbind instructions
live end of child is itself
live end of child is itself
Adding localref sw instructions to hyperOp redefine_start2
Adding writecm instructions to hyperOp redefine_start2
Adding writecmp and sync instructions
Adding endHyperOp instructions to each pHyperOp

*** Renumbered SlotIndexes 412-748 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 424-760 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 436-772 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 448-784 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 460-796 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 472-808 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0
After Shuffling regions of basic block, state of BB#0:
BB#0: derived from LLVM BB %redefine_start2.newName01
	%vreg20<def> = ADD %t5, %zero; GR32Bit:%vreg20
	%vreg22<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg22
	%vreg23<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg23
	%vreg24<def> = SRLI %vreg23, 12; GR32Bit:%vreg24,%vreg23
	%vreg25<def> = ADD %vreg22, %vreg24; GR32Bit:%vreg25,%vreg22,%vreg24
	%vreg26<def> = ADDI %zero, 28; GR32Bit:%vreg26
	%vreg27<def> = SRLI %t5, 22; GR32Bit:%vreg27
	%vreg28<def> = SRLI %t5, 12; GR32Bit:%vreg28
	%vreg29<def> = ANDI %vreg28, 15; GR32Bit:%vreg29,%vreg28
	%vreg30<def> = SRLI %t5, 6; GR32Bit:%vreg30
	%vreg31<def> = ANDI %vreg30, 63; GR32Bit:%vreg31,%vreg30
	%vreg32<def> = ADDI %zero, 832; GR32Bit:%vreg32
	%vreg33<def> = MUL %vreg27, %vreg32; GR32Bit:%vreg33,%vreg27,%vreg32
	%vreg34<def> = ADDI %zero, 52; GR32Bit:%vreg34
	%vreg35<def> = MUL %vreg29, %vreg34; GR32Bit:%vreg35,%vreg29,%vreg34
	%vreg36<def> = ADD %vreg35, %vreg31; GR32Bit:%vreg36,%vreg35,%vreg31
	%vreg37<def> = ADD %vreg36, %vreg33; GR32Bit:%vreg37,%vreg36,%vreg33
	%vreg38<def> = MUL %vreg37, %vreg26; GR32Bit:%vreg38,%vreg37,%vreg26
	%vreg21<def> = ADD %vreg25, %vreg38; GR32Bit:%vreg21,%vreg25,%vreg38
	%vreg10<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg10
	%vreg9<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg9
	%vreg13<def> = LUI <ga:@redefine_out_c>[TF=2]; GR32Bit:%vreg13
	%vreg14<def> = ADDI %zero, <ga:@redefine_out_c>[TF=3]; GR32Bit:%vreg14
	%vreg11<def> = ADD %vreg10, %vreg9; GR32Bit:%vreg11,%vreg10,%vreg9
	%vreg15<def> = ADD %vreg14, %vreg13; GR32Bit:%vreg15,%vreg14,%vreg13
	%vreg12<def> = LW %vreg11, 0; mem:LD4[@glob_sg_bit0] GR32Bit:%vreg12,%vreg11
	SW %vreg12, %vreg15, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0)] GR32Bit:%vreg12,%vreg15
	%vreg16<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg16
	%vreg17<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg17
	%vreg18<def> = ADD %vreg17, %vreg16; GR32Bit:%vreg18,%vreg17,%vreg16
	%vreg19<def> = LW %vreg18, 0; mem:LD4[@glob_sg_bit1] GR32Bit:%vreg19,%vreg18
	SW %vreg19, %vreg15, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 1)] GR32Bit:%vreg19,%vreg15
	%vreg0<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg0
	%vreg3<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg3
	%vreg2<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg2
	%vreg4<def> = ADD %vreg3, %vreg2; GR32Bit:%vreg4,%vreg3,%vreg2
	%vreg1<def> = FLW %vreg0, 0; mem:LD4[%0](align=16) FP32Bit:%vreg1 GR32Bit:%vreg0
	FSW %vreg1, %vreg4, 0; mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)] FP32Bit:%vreg1 GR32Bit:%vreg4
	%vreg5<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg5
	%vreg6<def> = ADDI %zero, <ga:@nh_fin_de_rampe>[TF=3]; GR32Bit:%vreg6
	%vreg7<def> = ADD %vreg6, %vreg5; GR32Bit:%vreg7,%vreg6,%vreg5
	%vreg8<def> = FLW %vreg7, 0; mem:LD4[@nh_fin_de_rampe] FP32Bit:%vreg8 GR32Bit:%vreg7
	FSW %vreg8, %vreg4, 4; mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)] FP32Bit:%vreg8 GR32Bit:%vreg4
	FDELETE %t4, 0
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg39<def> = ADD %t5, %zero; GR32Bit:%vreg39
	%vreg41<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg41
	%vreg42<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg42
	%vreg43<def> = SRLI %vreg42, 12; GR32Bit:%vreg43,%vreg42
	%vreg44<def> = ADD %vreg41, %vreg43; GR32Bit:%vreg44,%vreg41,%vreg43
	%vreg45<def> = ADDI %zero, 28; GR32Bit:%vreg45
	%vreg46<def> = SRLI %t5, 22; GR32Bit:%vreg46
	%vreg47<def> = SRLI %t5, 12; GR32Bit:%vreg47
	%vreg48<def> = ANDI %vreg47, 15; GR32Bit:%vreg48,%vreg47
	%vreg49<def> = SRLI %t5, 6; GR32Bit:%vreg49
	%vreg50<def> = ANDI %vreg49, 63; GR32Bit:%vreg50,%vreg49
	%vreg51<def> = ADDI %zero, 832; GR32Bit:%vreg51
	%vreg52<def> = MUL %vreg46, %vreg51; GR32Bit:%vreg52,%vreg46,%vreg51
	%vreg53<def> = ADDI %zero, 52; GR32Bit:%vreg53
	%vreg54<def> = MUL %vreg48, %vreg53; GR32Bit:%vreg54,%vreg48,%vreg53
	%vreg55<def> = ADD %vreg54, %vreg50; GR32Bit:%vreg55,%vreg54,%vreg50
	%vreg56<def> = ADD %vreg55, %vreg52; GR32Bit:%vreg56,%vreg55,%vreg52
	%vreg57<def> = MUL %vreg56, %vreg45; GR32Bit:%vreg57,%vreg56,%vreg45
	%vreg40<def> = ADD %vreg44, %vreg57; GR32Bit:%vreg40,%vreg44,%vreg57
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg58<def> = ADD %t5, %zero; GR32Bit:%vreg58
	%vreg60<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg60
	%vreg61<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg61
	%vreg62<def> = SRLI %vreg61, 12; GR32Bit:%vreg62,%vreg61
	%vreg63<def> = ADD %vreg60, %vreg62; GR32Bit:%vreg63,%vreg60,%vreg62
	%vreg64<def> = ADDI %zero, 28; GR32Bit:%vreg64
	%vreg65<def> = SRLI %t5, 22; GR32Bit:%vreg65
	%vreg66<def> = SRLI %t5, 12; GR32Bit:%vreg66
	%vreg67<def> = ANDI %vreg66, 15; GR32Bit:%vreg67,%vreg66
	%vreg68<def> = SRLI %t5, 6; GR32Bit:%vreg68
	%vreg69<def> = ANDI %vreg68, 63; GR32Bit:%vreg69,%vreg68
	%vreg70<def> = ADDI %zero, 832; GR32Bit:%vreg70
	%vreg71<def> = MUL %vreg65, %vreg70; GR32Bit:%vreg71,%vreg65,%vreg70
	%vreg72<def> = ADDI %zero, 52; GR32Bit:%vreg72
	%vreg73<def> = MUL %vreg67, %vreg72; GR32Bit:%vreg73,%vreg67,%vreg72
	%vreg74<def> = ADD %vreg73, %vreg69; GR32Bit:%vreg74,%vreg73,%vreg69
	%vreg75<def> = ADD %vreg74, %vreg71; GR32Bit:%vreg75,%vreg74,%vreg71
	%vreg76<def> = MUL %vreg75, %vreg64; GR32Bit:%vreg76,%vreg75,%vreg64
	%vreg59<def> = ADD %vreg63, %vreg76; GR32Bit:%vreg59,%vreg63,%vreg76
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg77<def> = ADD %t5, %zero; GR32Bit:%vreg77
	%vreg79<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg79
	%vreg80<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg80
	%vreg81<def> = SRLI %vreg80, 12; GR32Bit:%vreg81,%vreg80
	%vreg82<def> = ADD %vreg79, %vreg81; GR32Bit:%vreg82,%vreg79,%vreg81
	%vreg83<def> = ADDI %zero, 28; GR32Bit:%vreg83
	%vreg84<def> = SRLI %t5, 22; GR32Bit:%vreg84
	%vreg85<def> = SRLI %t5, 12; GR32Bit:%vreg85
	%vreg86<def> = ANDI %vreg85, 15; GR32Bit:%vreg86,%vreg85
	%vreg87<def> = SRLI %t5, 6; GR32Bit:%vreg87
	%vreg88<def> = ANDI %vreg87, 63; GR32Bit:%vreg88,%vreg87
	%vreg89<def> = ADDI %zero, 832; GR32Bit:%vreg89
	%vreg90<def> = MUL %vreg84, %vreg89; GR32Bit:%vreg90,%vreg84,%vreg89
	%vreg91<def> = ADDI %zero, 52; GR32Bit:%vreg91
	%vreg92<def> = MUL %vreg86, %vreg91; GR32Bit:%vreg92,%vreg86,%vreg91
	%vreg93<def> = ADD %vreg92, %vreg88; GR32Bit:%vreg93,%vreg92,%vreg88
	%vreg94<def> = ADD %vreg93, %vreg90; GR32Bit:%vreg94,%vreg93,%vreg90
	%vreg95<def> = MUL %vreg94, %vreg83; GR32Bit:%vreg95,%vreg94,%vreg83
	%vreg78<def> = ADD %vreg82, %vreg95; GR32Bit:%vreg78,%vreg82,%vreg95
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 316-884 ***

*** Renumbered SlotIndexes 304-904 ***

*** Renumbered SlotIndexes 216-952 ***

*** Renumbered SlotIndexes 204-972 ***

*** Renumbered SlotIndexes 204-988 ***

*** Renumbered SlotIndexes 112-1032 ***

*** Renumbered SlotIndexes 100-1052 ***

*** Renumbered SlotIndexes 100-1068 ***

*** Renumbered SlotIndexes 100-1084 ***

*** Renumbered SlotIndexes 100-1100 ***

*** Renumbered SlotIndexes 100-1116 ***

*** Renumbered SlotIndexes 100-1132 ***

*** Renumbered SlotIndexes 100-1148 ***

*** Renumbered SlotIndexes 100-1164 ***

*** Renumbered SlotIndexes 100-1180 ***

*** Renumbered SlotIndexes 100-1196 ***

*** Renumbered SlotIndexes 100-1212 ***

*** Renumbered SlotIndexes 100-1228 ***

*** Renumbered SlotIndexes 100-1244 ***

*** Renumbered SlotIndexes 100-1260 ***

*** Renumbered SlotIndexes 12-1300 ***
Creating pHyperOp bundles for CEs for bb0
  %vreg39<def> = ADD %t5, %zero; GR32Bit:%vreg39
starting at   %vreg20<def> = ADD %t5, %zero; GR32Bit:%vreg20
  %vreg58<def> = ADD %t5, %zero; GR32Bit:%vreg58
starting at   %vreg39<def> = ADD %t5, %zero; GR32Bit:%vreg39
  %vreg77<def> = ADD %t5, %zero; GR32Bit:%vreg77
starting at   %vreg58<def> = ADD %t5, %zero; GR32Bit:%vreg58
starting at   %vreg77<def> = ADD %t5, %zero; GR32Bit:%vreg77
After bundling, state of BB0:BB#0: derived from LLVM BB %redefine_start2.newName01
	%vreg20<def> = ADD %t5, %zero; GR32Bit:%vreg20
	  * %vreg22<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg22
	  * %vreg23<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg23
	  * %vreg24<def> = SRLI %vreg23, 12; GR32Bit:%vreg24,%vreg23
	  * %vreg25<def> = ADD %vreg22, %vreg24; GR32Bit:%vreg25,%vreg22,%vreg24
	  * %vreg26<def> = ADDI %zero, 28; GR32Bit:%vreg26
	  * %vreg27<def> = SRLI %t5, 22; GR32Bit:%vreg27
	  * %vreg28<def> = SRLI %t5, 12; GR32Bit:%vreg28
	  * %vreg29<def> = ANDI %vreg28, 15; GR32Bit:%vreg29,%vreg28
	  * %vreg30<def> = SRLI %t5, 6; GR32Bit:%vreg30
	  * %vreg31<def> = ANDI %vreg30, 63; GR32Bit:%vreg31,%vreg30
	  * %vreg32<def> = ADDI %zero, 832; GR32Bit:%vreg32
	  * %vreg33<def> = MUL %vreg27, %vreg32; GR32Bit:%vreg33,%vreg27,%vreg32
	  * %vreg34<def> = ADDI %zero, 52; GR32Bit:%vreg34
	  * %vreg35<def> = MUL %vreg29, %vreg34; GR32Bit:%vreg35,%vreg29,%vreg34
	  * %vreg36<def> = ADD %vreg35, %vreg31; GR32Bit:%vreg36,%vreg35,%vreg31
	  * %vreg37<def> = ADD %vreg36, %vreg33; GR32Bit:%vreg37,%vreg36,%vreg33
	  * %vreg38<def> = MUL %vreg37, %vreg26; GR32Bit:%vreg38,%vreg37,%vreg26
	  * %vreg21<def> = ADD %vreg25, %vreg38; GR32Bit:%vreg21,%vreg25,%vreg38
	  * %vreg10<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg10
	  * %vreg9<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg9
	  * %vreg13<def> = LUI <ga:@redefine_out_c>[TF=2]; GR32Bit:%vreg13
	  * %vreg14<def> = ADDI %zero, <ga:@redefine_out_c>[TF=3]; GR32Bit:%vreg14
	  * %vreg11<def> = ADD %vreg10, %vreg9; GR32Bit:%vreg11,%vreg10,%vreg9
	  * %vreg15<def> = ADD %vreg14, %vreg13; GR32Bit:%vreg15,%vreg14,%vreg13
	  * %vreg12<def> = LW %vreg11, 0; mem:LD4[@glob_sg_bit0] GR32Bit:%vreg12,%vreg11
	  * SW %vreg12, %vreg15, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0)] GR32Bit:%vreg12,%vreg15
	  * %vreg16<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg16
	  * %vreg17<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg17
	  * %vreg18<def> = ADD %vreg17, %vreg16; GR32Bit:%vreg18,%vreg17,%vreg16
	  * %vreg19<def> = LW %vreg18, 0; mem:LD4[@glob_sg_bit1] GR32Bit:%vreg19,%vreg18
	  * SW %vreg19, %vreg15, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 1)] GR32Bit:%vreg19,%vreg15
	  * %vreg0<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg0
	  * %vreg3<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg3
	  * %vreg2<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg2
	  * %vreg4<def> = ADD %vreg3, %vreg2; GR32Bit:%vreg4,%vreg3,%vreg2
	  * %vreg1<def> = FLW %vreg0, 0; mem:LD4[%0](align=16) FP32Bit:%vreg1 GR32Bit:%vreg0
	  * FSW %vreg1, %vreg4, 0; mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)] FP32Bit:%vreg1 GR32Bit:%vreg4
	  * %vreg5<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg5
	  * %vreg6<def> = ADDI %zero, <ga:@nh_fin_de_rampe>[TF=3]; GR32Bit:%vreg6
	  * %vreg7<def> = ADD %vreg6, %vreg5; GR32Bit:%vreg7,%vreg6,%vreg5
	  * %vreg8<def> = FLW %vreg7, 0; mem:LD4[@nh_fin_de_rampe] FP32Bit:%vreg8 GR32Bit:%vreg7
	  * FSW %vreg8, %vreg4, 4; mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)] FP32Bit:%vreg8 GR32Bit:%vreg4
	  * FDELETE %t4, 0
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg39<def> = ADD %t5, %zero; GR32Bit:%vreg39
	  * %vreg41<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg41
	  * %vreg42<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg42
	  * %vreg43<def> = SRLI %vreg42, 12; GR32Bit:%vreg43,%vreg42
	  * %vreg44<def> = ADD %vreg41, %vreg43; GR32Bit:%vreg44,%vreg41,%vreg43
	  * %vreg45<def> = ADDI %zero, 28; GR32Bit:%vreg45
	  * %vreg46<def> = SRLI %t5, 22; GR32Bit:%vreg46
	  * %vreg47<def> = SRLI %t5, 12; GR32Bit:%vreg47
	  * %vreg48<def> = ANDI %vreg47, 15; GR32Bit:%vreg48,%vreg47
	  * %vreg49<def> = SRLI %t5, 6; GR32Bit:%vreg49
	  * %vreg50<def> = ANDI %vreg49, 63; GR32Bit:%vreg50,%vreg49
	  * %vreg51<def> = ADDI %zero, 832; GR32Bit:%vreg51
	  * %vreg52<def> = MUL %vreg46, %vreg51; GR32Bit:%vreg52,%vreg46,%vreg51
	  * %vreg53<def> = ADDI %zero, 52; GR32Bit:%vreg53
	  * %vreg54<def> = MUL %vreg48, %vreg53; GR32Bit:%vreg54,%vreg48,%vreg53
	  * %vreg55<def> = ADD %vreg54, %vreg50; GR32Bit:%vreg55,%vreg54,%vreg50
	  * %vreg56<def> = ADD %vreg55, %vreg52; GR32Bit:%vreg56,%vreg55,%vreg52
	  * %vreg57<def> = MUL %vreg56, %vreg45; GR32Bit:%vreg57,%vreg56,%vreg45
	  * %vreg40<def> = ADD %vreg44, %vreg57; GR32Bit:%vreg40,%vreg44,%vreg57
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg58<def> = ADD %t5, %zero; GR32Bit:%vreg58
	  * %vreg60<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg60
	  * %vreg61<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg61
	  * %vreg62<def> = SRLI %vreg61, 12; GR32Bit:%vreg62,%vreg61
	  * %vreg63<def> = ADD %vreg60, %vreg62; GR32Bit:%vreg63,%vreg60,%vreg62
	  * %vreg64<def> = ADDI %zero, 28; GR32Bit:%vreg64
	  * %vreg65<def> = SRLI %t5, 22; GR32Bit:%vreg65
	  * %vreg66<def> = SRLI %t5, 12; GR32Bit:%vreg66
	  * %vreg67<def> = ANDI %vreg66, 15; GR32Bit:%vreg67,%vreg66
	  * %vreg68<def> = SRLI %t5, 6; GR32Bit:%vreg68
	  * %vreg69<def> = ANDI %vreg68, 63; GR32Bit:%vreg69,%vreg68
	  * %vreg70<def> = ADDI %zero, 832; GR32Bit:%vreg70
	  * %vreg71<def> = MUL %vreg65, %vreg70; GR32Bit:%vreg71,%vreg65,%vreg70
	  * %vreg72<def> = ADDI %zero, 52; GR32Bit:%vreg72
	  * %vreg73<def> = MUL %vreg67, %vreg72; GR32Bit:%vreg73,%vreg67,%vreg72
	  * %vreg74<def> = ADD %vreg73, %vreg69; GR32Bit:%vreg74,%vreg73,%vreg69
	  * %vreg75<def> = ADD %vreg74, %vreg71; GR32Bit:%vreg75,%vreg74,%vreg71
	  * %vreg76<def> = MUL %vreg75, %vreg64; GR32Bit:%vreg76,%vreg75,%vreg64
	  * %vreg59<def> = ADD %vreg63, %vreg76; GR32Bit:%vreg59,%vreg63,%vreg76
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg77<def> = ADD %t5, %zero; GR32Bit:%vreg77
	  * %vreg79<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg79
	  * %vreg80<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg80
	  * %vreg81<def> = SRLI %vreg80, 12; GR32Bit:%vreg81,%vreg80
	  * %vreg82<def> = ADD %vreg79, %vreg81; GR32Bit:%vreg82,%vreg79,%vreg81
	  * %vreg83<def> = ADDI %zero, 28; GR32Bit:%vreg83
	  * %vreg84<def> = SRLI %t5, 22; GR32Bit:%vreg84
	  * %vreg85<def> = SRLI %t5, 12; GR32Bit:%vreg85
	  * %vreg86<def> = ANDI %vreg85, 15; GR32Bit:%vreg86,%vreg85
	  * %vreg87<def> = SRLI %t5, 6; GR32Bit:%vreg87
	  * %vreg88<def> = ANDI %vreg87, 63; GR32Bit:%vreg88,%vreg87
	  * %vreg89<def> = ADDI %zero, 832; GR32Bit:%vreg89
	  * %vreg90<def> = MUL %vreg84, %vreg89; GR32Bit:%vreg90,%vreg84,%vreg89
	  * %vreg91<def> = ADDI %zero, 52; GR32Bit:%vreg91
	  * %vreg92<def> = MUL %vreg86, %vreg91; GR32Bit:%vreg92,%vreg86,%vreg91
	  * %vreg93<def> = ADD %vreg92, %vreg88; GR32Bit:%vreg93,%vreg92,%vreg88
	  * %vreg94<def> = ADD %vreg93, %vreg90; GR32Bit:%vreg94,%vreg93,%vreg90
	  * %vreg95<def> = MUL %vreg94, %vreg83; GR32Bit:%vreg95,%vreg94,%vreg83
	  * %vreg78<def> = ADD %vreg82, %vreg95; GR32Bit:%vreg78,%vreg82,%vreg95
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
Patching the instructions that are supposed to use the physical registers r30 and r31
Computing live-in reg-units in ABI blocks.
Created 0 new intervals.

*** Renumbered SlotIndexes 8-1320 ***
********** INTERVALS **********
zero = EMPTY
%vreg0 = [272r,304r:0)  0@272r
%vreg1 = [304r,312r:0)  0@304r
%vreg2 = [288r,296r:0)  0@288r
%vreg3 = [280r,296r:0)  0@280r
%vreg4 = [296r,352r:0)  0@296r
%vreg5 = [320r,336r:0)  0@320r
%vreg6 = [328r,336r:0)  0@328r
%vreg7 = [336r,344r:0)  0@336r
%vreg8 = [344r,352r:0)  0@344r
%vreg9 = [176r,200r:0)  0@176r
%vreg10 = [168r,200r:0)  0@168r
%vreg11 = [200r,216r:0)  0@200r
%vreg12 = [216r,224r:0)  0@216r
%vreg13 = [184r,208r:0)  0@184r
%vreg14 = [192r,208r:0)  0@192r
%vreg15 = [208r,264r:0)  0@208r
%vreg16 = [232r,248r:0)  0@232r
%vreg17 = [240r,248r:0)  0@240r
%vreg18 = [248r,256r:0)  0@248r
%vreg19 = [256r,264r:0)  0@256r
%vreg20 = [4r,4d:0)  0@4r
%vreg21 = [160r,160d:0)  0@160r
%vreg22 = [24r,48r:0)  0@24r
%vreg23 = [32r,40r:0)  0@32r
%vreg24 = [40r,48r:0)  0@40r
%vreg25 = [48r,160r:0)  0@48r
%vreg26 = [56r,152r:0)  0@56r
%vreg27 = [64r,112r:0)  0@64r
%vreg28 = [72r,80r:0)  0@72r
%vreg29 = [80r,128r:0)  0@80r
%vreg30 = [88r,96r:0)  0@88r
%vreg31 = [96r,136r:0)  0@96r
%vreg32 = [104r,112r:0)  0@104r
%vreg33 = [112r,144r:0)  0@112r
%vreg34 = [120r,128r:0)  0@120r
%vreg35 = [128r,136r:0)  0@128r
%vreg36 = [136r,144r:0)  0@136r
%vreg37 = [144r,152r:0)  0@144r
%vreg38 = [152r,160r:0)  0@152r
%vreg39 = [392r,392d:0)  0@392r
%vreg40 = [536r,536d:0)  0@536r
%vreg41 = [400r,424r:0)  0@400r
%vreg42 = [408r,416r:0)  0@408r
%vreg43 = [416r,424r:0)  0@416r
%vreg44 = [424r,536r:0)  0@424r
%vreg45 = [432r,528r:0)  0@432r
%vreg46 = [440r,488r:0)  0@440r
%vreg47 = [448r,456r:0)  0@448r
%vreg48 = [456r,504r:0)  0@456r
%vreg49 = [464r,472r:0)  0@464r
%vreg50 = [472r,512r:0)  0@472r
%vreg51 = [480r,488r:0)  0@480r
%vreg52 = [488r,520r:0)  0@488r
%vreg53 = [496r,504r:0)  0@496r
%vreg54 = [504r,512r:0)  0@504r
%vreg55 = [512r,520r:0)  0@512r
%vreg56 = [520r,528r:0)  0@520r
%vreg57 = [528r,536r:0)  0@528r
%vreg58 = [568r,568d:0)  0@568r
%vreg59 = [712r,712d:0)  0@712r
%vreg60 = [576r,600r:0)  0@576r
%vreg61 = [584r,592r:0)  0@584r
%vreg62 = [592r,600r:0)  0@592r
%vreg63 = [600r,712r:0)  0@600r
%vreg64 = [608r,704r:0)  0@608r
%vreg65 = [616r,664r:0)  0@616r
%vreg66 = [624r,632r:0)  0@624r
%vreg67 = [632r,680r:0)  0@632r
%vreg68 = [640r,648r:0)  0@640r
%vreg69 = [648r,688r:0)  0@648r
%vreg70 = [656r,664r:0)  0@656r
%vreg71 = [664r,696r:0)  0@664r
%vreg72 = [672r,680r:0)  0@672r
%vreg73 = [680r,688r:0)  0@680r
%vreg74 = [688r,696r:0)  0@688r
%vreg75 = [696r,704r:0)  0@696r
%vreg76 = [704r,712r:0)  0@704r
%vreg77 = [744r,744d:0)  0@744r
%vreg78 = [888r,888d:0)  0@888r
%vreg79 = [752r,776r:0)  0@752r
%vreg80 = [760r,768r:0)  0@760r
%vreg81 = [768r,776r:0)  0@768r
%vreg82 = [776r,888r:0)  0@776r
%vreg83 = [784r,880r:0)  0@784r
%vreg84 = [792r,840r:0)  0@792r
%vreg85 = [800r,808r:0)  0@800r
%vreg86 = [808r,856r:0)  0@808r
%vreg87 = [816r,824r:0)  0@816r
%vreg88 = [824r,864r:0)  0@824r
%vreg89 = [832r,840r:0)  0@832r
%vreg90 = [840r,872r:0)  0@840r
%vreg91 = [848r,856r:0)  0@848r
%vreg92 = [856r,864r:0)  0@856r
%vreg93 = [864r,872r:0)  0@864r
%vreg94 = [872r,880r:0)  0@872r
%vreg95 = [880r,888r:0)  0@880r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start2: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start2.newName01
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg22<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg22
4B		  * %vreg23<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg23
4B		  * %vreg24<def> = SRLI %vreg23, 12; GR32Bit:%vreg24,%vreg23
4B		  * %vreg25<def> = ADD %vreg22, %vreg24; GR32Bit:%vreg25,%vreg22,%vreg24
4B		  * %vreg26<def> = ADDI %zero, 28; GR32Bit:%vreg26
4B		  * %vreg27<def> = SRLI %t5, 22; GR32Bit:%vreg27
4B		  * %vreg28<def> = SRLI %t5, 12; GR32Bit:%vreg28
4B		  * %vreg29<def> = ANDI %vreg28, 15; GR32Bit:%vreg29,%vreg28
4B		  * %vreg30<def> = SRLI %t5, 6; GR32Bit:%vreg30
4B		  * %vreg31<def> = ANDI %vreg30, 63; GR32Bit:%vreg31,%vreg30
4B		  * %vreg32<def> = ADDI %zero, 832; GR32Bit:%vreg32
4B		  * %vreg33<def> = MUL %vreg27, %vreg32; GR32Bit:%vreg33,%vreg27,%vreg32
4B		  * %vreg34<def> = ADDI %zero, 52; GR32Bit:%vreg34
4B		  * %vreg35<def> = MUL %vreg29, %vreg34; GR32Bit:%vreg35,%vreg29,%vreg34
4B		  * %vreg36<def> = ADD %vreg35, %vreg31; GR32Bit:%vreg36,%vreg35,%vreg31
4B		  * %vreg37<def> = ADD %vreg36, %vreg33; GR32Bit:%vreg37,%vreg36,%vreg33
4B		  * %vreg38<def> = MUL %vreg37, %vreg26; GR32Bit:%vreg38,%vreg37,%vreg26
4B		  * %t5<def> = ADD %vreg25, %vreg38; GR32Bit:%vreg25,%vreg38
4B		  * %vreg10<def> = LUI <MCSym="%lo("ga#1024")">; GR32Bit:%vreg10
4B		  * SRLI %vreg10, %vreg10, 12; GR32Bit:%vreg10
4B		  * %vreg9<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg9
4B		  * %vreg13<def> = LUI <ga:@redefine_out_c>[TF=2]; GR32Bit:%vreg13
4B		  * %vreg14<def> = LUI <MCSym="%lo("ga#2304")">; GR32Bit:%vreg14
4B		  * SRLI %vreg14, %vreg14, 12; GR32Bit:%vreg14
4B		  * %vreg11<def> = ADD %vreg10, %vreg9; GR32Bit:%vreg11,%vreg10,%vreg9
4B		  * %vreg15<def> = ADD %vreg14, %vreg13; GR32Bit:%vreg15,%vreg14,%vreg13
4B		  * %vreg12<def> = LW %vreg11, 0; mem:LD4[@glob_sg_bit0] GR32Bit:%vreg12,%vreg11
4B		  * SW %vreg12, %vreg15, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0)] GR32Bit:%vreg12,%vreg15
4B		  * %vreg16<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg16
4B		  * %vreg17<def> = LUI <MCSym="%lo("ga#1280")">; GR32Bit:%vreg17
4B		  * SRLI %vreg17, %vreg17, 12; GR32Bit:%vreg17
4B		  * %vreg18<def> = ADD %vreg17, %vreg16; GR32Bit:%vreg18,%vreg17,%vreg16
4B		  * %vreg19<def> = LW %vreg18, 0; mem:LD4[@glob_sg_bit1] GR32Bit:%vreg19,%vreg18
4B		  * SW %vreg19, %vreg15, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 1)] GR32Bit:%vreg19,%vreg15
4B		  * %vreg0<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg0
4B		  * %vreg3<def> = LUI <MCSym="%lo("ga#2048")">; GR32Bit:%vreg3
4B		  * SRLI %vreg3, %vreg3, 12; GR32Bit:%vreg3
4B		  * %vreg2<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg2
4B		  * %vreg4<def> = ADD %vreg3, %vreg2; GR32Bit:%vreg4,%vreg3,%vreg2
4B		  * %vreg1<def> = FLW %vreg0, 0; mem:LD4[%0](align=16) FP32Bit:%vreg1 GR32Bit:%vreg0
4B		  * FSW %vreg1, %vreg4, 0; mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)] FP32Bit:%vreg1 GR32Bit:%vreg4
4B		  * %vreg5<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg5
4B		  * %vreg6<def> = LUI <MCSym="%lo("ga#1536")">; GR32Bit:%vreg6
4B		  * SRLI %vreg6, %vreg6, 12; GR32Bit:%vreg6
4B		  * %vreg7<def> = ADD %vreg6, %vreg5; GR32Bit:%vreg7,%vreg6,%vreg5
4B		  * %vreg8<def> = FLW %vreg7, 0; mem:LD4[@nh_fin_de_rampe] FP32Bit:%vreg8 GR32Bit:%vreg7
4B		  * FSW %vreg8, %vreg4, 4; mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)] FP32Bit:%vreg8 GR32Bit:%vreg4
4B		  * FDELETE %t4, 0
4B		  * END 0
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
392B		%t4<def> = ADD %t5, %zero
392B		  * %vreg41<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg41
392B		  * %vreg42<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg42
392B		  * %vreg43<def> = SRLI %vreg42, 12; GR32Bit:%vreg43,%vreg42
392B		  * %vreg44<def> = ADD %vreg41, %vreg43; GR32Bit:%vreg44,%vreg41,%vreg43
392B		  * %vreg45<def> = ADDI %zero, 28; GR32Bit:%vreg45
392B		  * %vreg46<def> = SRLI %t5, 22; GR32Bit:%vreg46
392B		  * %vreg47<def> = SRLI %t5, 12; GR32Bit:%vreg47
392B		  * %vreg48<def> = ANDI %vreg47, 15; GR32Bit:%vreg48,%vreg47
392B		  * %vreg49<def> = SRLI %t5, 6; GR32Bit:%vreg49
392B		  * %vreg50<def> = ANDI %vreg49, 63; GR32Bit:%vreg50,%vreg49
392B		  * %vreg51<def> = ADDI %zero, 832; GR32Bit:%vreg51
392B		  * %vreg52<def> = MUL %vreg46, %vreg51; GR32Bit:%vreg52,%vreg46,%vreg51
392B		  * %vreg53<def> = ADDI %zero, 52; GR32Bit:%vreg53
392B		  * %vreg54<def> = MUL %vreg48, %vreg53; GR32Bit:%vreg54,%vreg48,%vreg53
392B		  * %vreg55<def> = ADD %vreg54, %vreg50; GR32Bit:%vreg55,%vreg54,%vreg50
392B		  * %vreg56<def> = ADD %vreg55, %vreg52; GR32Bit:%vreg56,%vreg55,%vreg52
392B		  * %vreg57<def> = MUL %vreg56, %vreg45; GR32Bit:%vreg57,%vreg56,%vreg45
392B		  * %t5<def> = ADD %vreg44, %vreg57; GR32Bit:%vreg44,%vreg57
392B		  * END 0
392B		  * %zero<def> = ADDI %zero, 0
392B		  * %zero<def> = ADDI %zero, 0
568B		%t4<def> = ADD %t5, %zero
568B		  * %vreg60<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg60
568B		  * %vreg61<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg61
568B		  * %vreg62<def> = SRLI %vreg61, 12; GR32Bit:%vreg62,%vreg61
568B		  * %vreg63<def> = ADD %vreg60, %vreg62; GR32Bit:%vreg63,%vreg60,%vreg62
568B		  * %vreg64<def> = ADDI %zero, 28; GR32Bit:%vreg64
568B		  * %vreg65<def> = SRLI %t5, 22; GR32Bit:%vreg65
568B		  * %vreg66<def> = SRLI %t5, 12; GR32Bit:%vreg66
568B		  * %vreg67<def> = ANDI %vreg66, 15; GR32Bit:%vreg67,%vreg66
568B		  * %vreg68<def> = SRLI %t5, 6; GR32Bit:%vreg68
568B		  * %vreg69<def> = ANDI %vreg68, 63; GR32Bit:%vreg69,%vreg68
568B		  * %vreg70<def> = ADDI %zero, 832; GR32Bit:%vreg70
568B		  * %vreg71<def> = MUL %vreg65, %vreg70; GR32Bit:%vreg71,%vreg65,%vreg70
568B		  * %vreg72<def> = ADDI %zero, 52; GR32Bit:%vreg72
568B		  * %vreg73<def> = MUL %vreg67, %vreg72; GR32Bit:%vreg73,%vreg67,%vreg72
568B		  * %vreg74<def> = ADD %vreg73, %vreg69; GR32Bit:%vreg74,%vreg73,%vreg69
568B		  * %vreg75<def> = ADD %vreg74, %vreg71; GR32Bit:%vreg75,%vreg74,%vreg71
568B		  * %vreg76<def> = MUL %vreg75, %vreg64; GR32Bit:%vreg76,%vreg75,%vreg64
568B		  * %t5<def> = ADD %vreg63, %vreg76; GR32Bit:%vreg63,%vreg76
568B		  * END 0
568B		  * %zero<def> = ADDI %zero, 0
568B		  * %zero<def> = ADDI %zero, 0
744B		%t4<def> = ADD %t5, %zero
744B		  * %vreg79<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg79
744B		  * %vreg80<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg80
744B		  * %vreg81<def> = SRLI %vreg80, 12; GR32Bit:%vreg81,%vreg80
744B		  * %vreg82<def> = ADD %vreg79, %vreg81; GR32Bit:%vreg82,%vreg79,%vreg81
744B		  * %vreg83<def> = ADDI %zero, 28; GR32Bit:%vreg83
744B		  * %vreg84<def> = SRLI %t5, 22; GR32Bit:%vreg84
744B		  * %vreg85<def> = SRLI %t5, 12; GR32Bit:%vreg85
744B		  * %vreg86<def> = ANDI %vreg85, 15; GR32Bit:%vreg86,%vreg85
744B		  * %vreg87<def> = SRLI %t5, 6; GR32Bit:%vreg87
744B		  * %vreg88<def> = ANDI %vreg87, 63; GR32Bit:%vreg88,%vreg87
744B		  * %vreg89<def> = ADDI %zero, 832; GR32Bit:%vreg89
744B		  * %vreg90<def> = MUL %vreg84, %vreg89; GR32Bit:%vreg90,%vreg84,%vreg89
744B		  * %vreg91<def> = ADDI %zero, 52; GR32Bit:%vreg91
744B		  * %vreg92<def> = MUL %vreg86, %vreg91; GR32Bit:%vreg92,%vreg86,%vreg91
744B		  * %vreg93<def> = ADD %vreg92, %vreg88; GR32Bit:%vreg93,%vreg92,%vreg88
744B		  * %vreg94<def> = ADD %vreg93, %vreg90; GR32Bit:%vreg94,%vreg93,%vreg90
744B		  * %vreg95<def> = MUL %vreg94, %vreg83; GR32Bit:%vreg95,%vreg94,%vreg83
744B		  * %t5<def> = ADD %vreg82, %vreg95; GR32Bit:%vreg82,%vreg95
744B		  * END 0
744B		  * %zero<def> = ADDI %zero, 0
744B		  * %zero<def> = ADDI %zero, 0

# End machine code for function redefine_start2.

********** COMPUTING LIVE DEBUG VARIABLES: redefine_start2 **********
********** DEBUG VARIABLES **********
********** Compute Spill Weights **********
********** Function: redefine_start2
********** GREEDY REGISTER ALLOCATION **********
********** Function: redefine_start2

selectOrSplit GR32Bit:%vreg25 [48r,160r:0)  0@48r
assigning %vreg25 to %t0: t0

selectOrSplit GR32Bit:%vreg44 [424r,536r:0)  0@424r
assigning %vreg44 to %t0: t0

selectOrSplit GR32Bit:%vreg63 [600r,712r:0)  0@600r
assigning %vreg63 to %t0: t0

selectOrSplit GR32Bit:%vreg82 [776r,888r:0)  0@776r
assigning %vreg82 to %t0: t0

selectOrSplit GR32Bit:%vreg26 [56r,152r:0)  0@56r
assigning %vreg26 to %t1: t1

selectOrSplit GR32Bit:%vreg45 [432r,528r:0)  0@432r
assigning %vreg45 to %t1: t1

selectOrSplit GR32Bit:%vreg64 [608r,704r:0)  0@608r
assigning %vreg64 to %t1: t1

selectOrSplit GR32Bit:%vreg83 [784r,880r:0)  0@784r
assigning %vreg83 to %t1: t1

selectOrSplit GR32Bit:%vreg4 [296r,352r:0)  0@296r
assigning %vreg4 to %t0: t0

selectOrSplit GR32Bit:%vreg15 [208r,264r:0)  0@208r
assigning %vreg15 to %t0: t0

selectOrSplit GR32Bit:%vreg27 [64r,112r:0)  0@64r
assigning %vreg27 to %t2: t2

selectOrSplit GR32Bit:%vreg29 [80r,128r:0)  0@80r
assigning %vreg29 to %fp: fp

selectOrSplit GR32Bit:%vreg46 [440r,488r:0)  0@440r
assigning %vreg46 to %t2: t2

selectOrSplit GR32Bit:%vreg48 [456r,504r:0)  0@456r
assigning %vreg48 to %fp: fp

selectOrSplit GR32Bit:%vreg65 [616r,664r:0)  0@616r
assigning %vreg65 to %t2: t2

selectOrSplit GR32Bit:%vreg67 [632r,680r:0)  0@632r
assigning %vreg67 to %fp: fp

selectOrSplit GR32Bit:%vreg84 [792r,840r:0)  0@792r
assigning %vreg84 to %t2: t2

selectOrSplit GR32Bit:%vreg86 [808r,856r:0)  0@808r
assigning %vreg86 to %fp: fp

selectOrSplit GR32Bit:%vreg31 [96r,136r:0)  0@96r
assigning %vreg31 to %a0: a0

selectOrSplit GR32Bit:%vreg50 [472r,512r:0)  0@472r
assigning %vreg50 to %a0: a0

selectOrSplit GR32Bit:%vreg69 [648r,688r:0)  0@648r
assigning %vreg69 to %a0: a0

selectOrSplit GR32Bit:%vreg88 [824r,864r:0)  0@824r
assigning %vreg88 to %a0: a0

selectOrSplit GR32Bit:%vreg0 [272r,304r:0)  0@272r
assigning %vreg0 to %t1: t1

selectOrSplit GR32Bit:%vreg10 [168r,200r:0)  0@168r
assigning %vreg10 to %t0: t0

selectOrSplit GR32Bit:%vreg33 [112r,144r:0)  0@112r
assigning %vreg33 to %t2: t2

selectOrSplit GR32Bit:%vreg52 [488r,520r:0)  0@488r
assigning %vreg52 to %t2: t2

selectOrSplit GR32Bit:%vreg71 [664r,696r:0)  0@664r
assigning %vreg71 to %t2: t2

selectOrSplit GR32Bit:%vreg90 [840r,872r:0)  0@840r
assigning %vreg90 to %t2: t2

selectOrSplit GR32Bit:%vreg9 [176r,200r:0)  0@176r
assigning %vreg9 to %t1: t1

selectOrSplit GR32Bit:%vreg13 [184r,208r:0)  0@184r
assigning %vreg13 to %t2: t2

selectOrSplit GR32Bit:%vreg22 [24r,48r:0)  0@24r
assigning %vreg22 to %t0: t0

selectOrSplit GR32Bit:%vreg41 [400r,424r:0)  0@400r
assigning %vreg41 to %t0: t0

selectOrSplit GR32Bit:%vreg60 [576r,600r:0)  0@576r
assigning %vreg60 to %t0: t0

selectOrSplit GR32Bit:%vreg79 [752r,776r:0)  0@752r
assigning %vreg79 to %t0: t0

selectOrSplit GR32Bit:%vreg3 [280r,296r:0)  0@280r
assigning %vreg3 to %t0: t0

selectOrSplit GR32Bit:%vreg5 [320r,336r:0)  0@320r
assigning %vreg5 to %t1: t1

selectOrSplit GR32Bit:%vreg11 [200r,216r:0)  0@200r
assigning %vreg11 to %t1: t1

selectOrSplit GR32Bit:%vreg14 [192r,208r:0)  0@192r
assigning %vreg14 to %fp: fp

selectOrSplit GR32Bit:%vreg16 [232r,248r:0)  0@232r
assigning %vreg16 to %t1: t1

selectOrSplit FP32Bit:%vreg1 [304r,312r:0)  0@304r
assigning %vreg1 to %ft1: ft1

selectOrSplit GR32Bit:%vreg2 [288r,296r:0)  0@288r
assigning %vreg2 to %t2: t2

selectOrSplit GR32Bit:%vreg6 [328r,336r:0)  0@328r
assigning %vreg6 to %t2: t2

selectOrSplit GR32Bit:%vreg7 [336r,344r:0)  0@336r
assigning %vreg7 to %t1: t1

selectOrSplit FP32Bit:%vreg8 [344r,352r:0)  0@344r
assigning %vreg8 to %ft1: ft1

selectOrSplit GR32Bit:%vreg12 [216r,224r:0)  0@216r
assigning %vreg12 to %t1: t1

selectOrSplit GR32Bit:%vreg17 [240r,248r:0)  0@240r
assigning %vreg17 to %t2: t2

selectOrSplit GR32Bit:%vreg18 [248r,256r:0)  0@248r
assigning %vreg18 to %t1: t1

selectOrSplit GR32Bit:%vreg19 [256r,264r:0)  0@256r
assigning %vreg19 to %t1: t1

selectOrSplit GR32Bit:%vreg23 [32r,40r:0)  0@32r
assigning %vreg23 to %t1: t1

selectOrSplit GR32Bit:%vreg24 [40r,48r:0)  0@40r
assigning %vreg24 to %t1: t1

selectOrSplit GR32Bit:%vreg28 [72r,80r:0)  0@72r
assigning %vreg28 to %fp: fp

selectOrSplit GR32Bit:%vreg30 [88r,96r:0)  0@88r
assigning %vreg30 to %a0: a0

selectOrSplit GR32Bit:%vreg32 [104r,112r:0)  0@104r
assigning %vreg32 to %a1: a1

selectOrSplit GR32Bit:%vreg34 [120r,128r:0)  0@120r
assigning %vreg34 to %a1: a1

selectOrSplit GR32Bit:%vreg35 [128r,136r:0)  0@128r
assigning %vreg35 to %fp: fp

selectOrSplit GR32Bit:%vreg36 [136r,144r:0)  0@136r
assigning %vreg36 to %fp: fp

selectOrSplit GR32Bit:%vreg37 [144r,152r:0)  0@144r
assigning %vreg37 to %t2: t2

selectOrSplit GR32Bit:%vreg38 [152r,160r:0)  0@152r
assigning %vreg38 to %t1: t1

selectOrSplit GR32Bit:%vreg42 [408r,416r:0)  0@408r
assigning %vreg42 to %t1: t1

selectOrSplit GR32Bit:%vreg43 [416r,424r:0)  0@416r
assigning %vreg43 to %t1: t1

selectOrSplit GR32Bit:%vreg47 [448r,456r:0)  0@448r
assigning %vreg47 to %fp: fp

selectOrSplit GR32Bit:%vreg49 [464r,472r:0)  0@464r
assigning %vreg49 to %a0: a0

selectOrSplit GR32Bit:%vreg51 [480r,488r:0)  0@480r
assigning %vreg51 to %a1: a1

selectOrSplit GR32Bit:%vreg53 [496r,504r:0)  0@496r
assigning %vreg53 to %a1: a1

selectOrSplit GR32Bit:%vreg54 [504r,512r:0)  0@504r
assigning %vreg54 to %fp: fp

selectOrSplit GR32Bit:%vreg55 [512r,520r:0)  0@512r
assigning %vreg55 to %fp: fp

selectOrSplit GR32Bit:%vreg56 [520r,528r:0)  0@520r
assigning %vreg56 to %t2: t2

selectOrSplit GR32Bit:%vreg57 [528r,536r:0)  0@528r
assigning %vreg57 to %t1: t1

selectOrSplit GR32Bit:%vreg61 [584r,592r:0)  0@584r
assigning %vreg61 to %t1: t1

selectOrSplit GR32Bit:%vreg62 [592r,600r:0)  0@592r
assigning %vreg62 to %t1: t1

selectOrSplit GR32Bit:%vreg66 [624r,632r:0)  0@624r
assigning %vreg66 to %fp: fp

selectOrSplit GR32Bit:%vreg68 [640r,648r:0)  0@640r
assigning %vreg68 to %a0: a0

selectOrSplit GR32Bit:%vreg70 [656r,664r:0)  0@656r
assigning %vreg70 to %a1: a1

selectOrSplit GR32Bit:%vreg72 [672r,680r:0)  0@672r
assigning %vreg72 to %a1: a1

selectOrSplit GR32Bit:%vreg73 [680r,688r:0)  0@680r
assigning %vreg73 to %fp: fp

selectOrSplit GR32Bit:%vreg74 [688r,696r:0)  0@688r
assigning %vreg74 to %fp: fp

selectOrSplit GR32Bit:%vreg75 [696r,704r:0)  0@696r
assigning %vreg75 to %t2: t2

selectOrSplit GR32Bit:%vreg76 [704r,712r:0)  0@704r
assigning %vreg76 to %t1: t1

selectOrSplit GR32Bit:%vreg80 [760r,768r:0)  0@760r
assigning %vreg80 to %t1: t1

selectOrSplit GR32Bit:%vreg81 [768r,776r:0)  0@768r
assigning %vreg81 to %t1: t1

selectOrSplit GR32Bit:%vreg85 [800r,808r:0)  0@800r
assigning %vreg85 to %fp: fp

selectOrSplit GR32Bit:%vreg87 [816r,824r:0)  0@816r
assigning %vreg87 to %a0: a0

selectOrSplit GR32Bit:%vreg89 [832r,840r:0)  0@832r
assigning %vreg89 to %a1: a1

selectOrSplit GR32Bit:%vreg91 [848r,856r:0)  0@848r
assigning %vreg91 to %a1: a1

selectOrSplit GR32Bit:%vreg92 [856r,864r:0)  0@856r
assigning %vreg92 to %fp: fp

selectOrSplit GR32Bit:%vreg93 [864r,872r:0)  0@864r
assigning %vreg93 to %fp: fp

selectOrSplit GR32Bit:%vreg94 [872r,880r:0)  0@872r
assigning %vreg94 to %t2: t2

selectOrSplit GR32Bit:%vreg95 [880r,888r:0)  0@880r
assigning %vreg95 to %t1: t1
********** REWRITE VIRTUAL REGISTERS **********
********** Function: redefine_start2
********** REGISTER MAP **********
[%vreg0 -> %t1] GR32Bit
[%vreg1 -> %ft1] FP32Bit
[%vreg2 -> %t2] GR32Bit
[%vreg3 -> %t0] GR32Bit
[%vreg4 -> %t0] GR32Bit
[%vreg5 -> %t1] GR32Bit
[%vreg6 -> %t2] GR32Bit
[%vreg7 -> %t1] GR32Bit
[%vreg8 -> %ft1] FP32Bit
[%vreg9 -> %t1] GR32Bit
[%vreg10 -> %t0] GR32Bit
[%vreg11 -> %t1] GR32Bit
[%vreg12 -> %t1] GR32Bit
[%vreg13 -> %t2] GR32Bit
[%vreg14 -> %fp] GR32Bit
[%vreg15 -> %t0] GR32Bit
[%vreg16 -> %t1] GR32Bit
[%vreg17 -> %t2] GR32Bit
[%vreg18 -> %t1] GR32Bit
[%vreg19 -> %t1] GR32Bit
[%vreg22 -> %t0] GR32Bit
[%vreg23 -> %t1] GR32Bit
[%vreg24 -> %t1] GR32Bit
[%vreg25 -> %t0] GR32Bit
[%vreg26 -> %t1] GR32Bit
[%vreg27 -> %t2] GR32Bit
[%vreg28 -> %fp] GR32Bit
[%vreg29 -> %fp] GR32Bit
[%vreg30 -> %a0] GR32Bit
[%vreg31 -> %a0] GR32Bit
[%vreg32 -> %a1] GR32Bit
[%vreg33 -> %t2] GR32Bit
[%vreg34 -> %a1] GR32Bit
[%vreg35 -> %fp] GR32Bit
[%vreg36 -> %fp] GR32Bit
[%vreg37 -> %t2] GR32Bit
[%vreg38 -> %t1] GR32Bit
[%vreg41 -> %t0] GR32Bit
[%vreg42 -> %t1] GR32Bit
[%vreg43 -> %t1] GR32Bit
[%vreg44 -> %t0] GR32Bit
[%vreg45 -> %t1] GR32Bit
[%vreg46 -> %t2] GR32Bit
[%vreg47 -> %fp] GR32Bit
[%vreg48 -> %fp] GR32Bit
[%vreg49 -> %a0] GR32Bit
[%vreg50 -> %a0] GR32Bit
[%vreg51 -> %a1] GR32Bit
[%vreg52 -> %t2] GR32Bit
[%vreg53 -> %a1] GR32Bit
[%vreg54 -> %fp] GR32Bit
[%vreg55 -> %fp] GR32Bit
[%vreg56 -> %t2] GR32Bit
[%vreg57 -> %t1] GR32Bit
[%vreg60 -> %t0] GR32Bit
[%vreg61 -> %t1] GR32Bit
[%vreg62 -> %t1] GR32Bit
[%vreg63 -> %t0] GR32Bit
[%vreg64 -> %t1] GR32Bit
[%vreg65 -> %t2] GR32Bit
[%vreg66 -> %fp] GR32Bit
[%vreg67 -> %fp] GR32Bit
[%vreg68 -> %a0] GR32Bit
[%vreg69 -> %a0] GR32Bit
[%vreg70 -> %a1] GR32Bit
[%vreg71 -> %t2] GR32Bit
[%vreg72 -> %a1] GR32Bit
[%vreg73 -> %fp] GR32Bit
[%vreg74 -> %fp] GR32Bit
[%vreg75 -> %t2] GR32Bit
[%vreg76 -> %t1] GR32Bit
[%vreg79 -> %t0] GR32Bit
[%vreg80 -> %t1] GR32Bit
[%vreg81 -> %t1] GR32Bit
[%vreg82 -> %t0] GR32Bit
[%vreg83 -> %t1] GR32Bit
[%vreg84 -> %t2] GR32Bit
[%vreg85 -> %fp] GR32Bit
[%vreg86 -> %fp] GR32Bit
[%vreg87 -> %a0] GR32Bit
[%vreg88 -> %a0] GR32Bit
[%vreg89 -> %a1] GR32Bit
[%vreg90 -> %t2] GR32Bit
[%vreg91 -> %a1] GR32Bit
[%vreg92 -> %fp] GR32Bit
[%vreg93 -> %fp] GR32Bit
[%vreg94 -> %t2] GR32Bit
[%vreg95 -> %t1] GR32Bit

0B	BB#0: derived from LLVM BB %redefine_start2.newName01
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg22<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg22
4B		  * %vreg23<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg23
4B		  * %vreg24<def> = SRLI %vreg23<kill>, 12; GR32Bit:%vreg24,%vreg23
4B		  * %vreg25<def> = ADD %vreg22<kill>, %vreg24<kill>; GR32Bit:%vreg25,%vreg22,%vreg24
4B		  * %vreg26<def> = ADDI %zero, 28; GR32Bit:%vreg26
4B		  * %vreg27<def> = SRLI %t5, 22; GR32Bit:%vreg27
4B		  * %vreg28<def> = SRLI %t5, 12; GR32Bit:%vreg28
4B		  * %vreg29<def> = ANDI %vreg28<kill>, 15; GR32Bit:%vreg29,%vreg28
4B		  * %vreg30<def> = SRLI %t5, 6; GR32Bit:%vreg30
4B		  * %vreg31<def> = ANDI %vreg30<kill>, 63; GR32Bit:%vreg31,%vreg30
4B		  * %vreg32<def> = ADDI %zero, 832; GR32Bit:%vreg32
4B		  * %vreg33<def> = MUL %vreg27<kill>, %vreg32<kill>; GR32Bit:%vreg33,%vreg27,%vreg32
4B		  * %vreg34<def> = ADDI %zero, 52; GR32Bit:%vreg34
4B		  * %vreg35<def> = MUL %vreg29<kill>, %vreg34<kill>; GR32Bit:%vreg35,%vreg29,%vreg34
4B		  * %vreg36<def> = ADD %vreg35<kill>, %vreg31<kill>; GR32Bit:%vreg36,%vreg35,%vreg31
4B		  * %vreg37<def> = ADD %vreg36<kill>, %vreg33<kill>; GR32Bit:%vreg37,%vreg36,%vreg33
4B		  * %vreg38<def> = MUL %vreg37<kill>, %vreg26<kill>; GR32Bit:%vreg38,%vreg37,%vreg26
4B		  * %t5<def> = ADD %vreg25<kill>, %vreg38<kill>; GR32Bit:%vreg25,%vreg38
4B		  * %vreg10<def> = LUI <MCSym="%lo("ga#1024")">; GR32Bit:%vreg10
4B		  * SRLI %vreg10, %vreg10, 12; GR32Bit:%vreg10
4B		  * %vreg9<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg9
4B		  * %vreg13<def> = LUI <ga:@redefine_out_c>[TF=2]; GR32Bit:%vreg13
4B		  * %vreg14<def> = LUI <MCSym="%lo("ga#2304")">; GR32Bit:%vreg14
4B		  * SRLI %vreg14, %vreg14, 12; GR32Bit:%vreg14
4B		  * %vreg11<def> = ADD %vreg10<kill>, %vreg9<kill>; GR32Bit:%vreg11,%vreg10,%vreg9
4B		  * %vreg15<def> = ADD %vreg14<kill>, %vreg13<kill>; GR32Bit:%vreg15,%vreg14,%vreg13
4B		  * %vreg12<def> = LW %vreg11<kill>, 0; mem:LD4[@glob_sg_bit0] GR32Bit:%vreg12,%vreg11
4B		  * SW %vreg12<kill>, %vreg15, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0)] GR32Bit:%vreg12,%vreg15
4B		  * %vreg16<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg16
4B		  * %vreg17<def> = LUI <MCSym="%lo("ga#1280")">; GR32Bit:%vreg17
4B		  * SRLI %vreg17, %vreg17, 12; GR32Bit:%vreg17
4B		  * %vreg18<def> = ADD %vreg17<kill>, %vreg16<kill>; GR32Bit:%vreg18,%vreg17,%vreg16
4B		  * %vreg19<def> = LW %vreg18<kill>, 0; mem:LD4[@glob_sg_bit1] GR32Bit:%vreg19,%vreg18
4B		  * SW %vreg19<kill>, %vreg15<kill>, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 1)] GR32Bit:%vreg19,%vreg15
4B		  * %vreg0<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg0
4B		  * %vreg3<def> = LUI <MCSym="%lo("ga#2048")">; GR32Bit:%vreg3
4B		  * SRLI %vreg3, %vreg3, 12; GR32Bit:%vreg3
4B		  * %vreg2<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg2
4B		  * %vreg4<def> = ADD %vreg3<kill>, %vreg2<kill>; GR32Bit:%vreg4,%vreg3,%vreg2
4B		  * %vreg1<def> = FLW %vreg0<kill>, 0; mem:LD4[%0](align=16) FP32Bit:%vreg1 GR32Bit:%vreg0
4B		  * FSW %vreg1<kill>, %vreg4, 0; mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)] FP32Bit:%vreg1 GR32Bit:%vreg4
4B		  * %vreg5<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg5
4B		  * %vreg6<def> = LUI <MCSym="%lo("ga#1536")">; GR32Bit:%vreg6
4B		  * SRLI %vreg6, %vreg6, 12; GR32Bit:%vreg6
4B		  * %vreg7<def> = ADD %vreg6<kill>, %vreg5<kill>; GR32Bit:%vreg7,%vreg6,%vreg5
4B		  * %vreg8<def> = FLW %vreg7<kill>, 0; mem:LD4[@nh_fin_de_rampe] FP32Bit:%vreg8 GR32Bit:%vreg7
4B		  * FSW %vreg8<kill>, %vreg4<kill>, 4; mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)] FP32Bit:%vreg8 GR32Bit:%vreg4
4B		  * FDELETE %t4, 0
4B		  * END 0
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
392B		%t4<def> = ADD %t5, %zero
392B		  * %vreg41<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg41
392B		  * %vreg42<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg42
392B		  * %vreg43<def> = SRLI %vreg42<kill>, 12; GR32Bit:%vreg43,%vreg42
392B		  * %vreg44<def> = ADD %vreg41<kill>, %vreg43<kill>; GR32Bit:%vreg44,%vreg41,%vreg43
392B		  * %vreg45<def> = ADDI %zero, 28; GR32Bit:%vreg45
392B		  * %vreg46<def> = SRLI %t5, 22; GR32Bit:%vreg46
392B		  * %vreg47<def> = SRLI %t5, 12; GR32Bit:%vreg47
392B		  * %vreg48<def> = ANDI %vreg47<kill>, 15; GR32Bit:%vreg48,%vreg47
392B		  * %vreg49<def> = SRLI %t5, 6; GR32Bit:%vreg49
392B		  * %vreg50<def> = ANDI %vreg49<kill>, 63; GR32Bit:%vreg50,%vreg49
392B		  * %vreg51<def> = ADDI %zero, 832; GR32Bit:%vreg51
392B		  * %vreg52<def> = MUL %vreg46<kill>, %vreg51<kill>; GR32Bit:%vreg52,%vreg46,%vreg51
392B		  * %vreg53<def> = ADDI %zero, 52; GR32Bit:%vreg53
392B		  * %vreg54<def> = MUL %vreg48<kill>, %vreg53<kill>; GR32Bit:%vreg54,%vreg48,%vreg53
392B		  * %vreg55<def> = ADD %vreg54<kill>, %vreg50<kill>; GR32Bit:%vreg55,%vreg54,%vreg50
392B		  * %vreg56<def> = ADD %vreg55<kill>, %vreg52<kill>; GR32Bit:%vreg56,%vreg55,%vreg52
392B		  * %vreg57<def> = MUL %vreg56<kill>, %vreg45<kill>; GR32Bit:%vreg57,%vreg56,%vreg45
392B		  * %t5<def> = ADD %vreg44<kill>, %vreg57<kill>; GR32Bit:%vreg44,%vreg57
392B		  * END 0
392B		  * %zero<def> = ADDI %zero, 0
392B		  * %zero<def> = ADDI %zero, 0
568B		%t4<def> = ADD %t5, %zero
568B		  * %vreg60<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg60
568B		  * %vreg61<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg61
568B		  * %vreg62<def> = SRLI %vreg61<kill>, 12; GR32Bit:%vreg62,%vreg61
568B		  * %vreg63<def> = ADD %vreg60<kill>, %vreg62<kill>; GR32Bit:%vreg63,%vreg60,%vreg62
568B		  * %vreg64<def> = ADDI %zero, 28; GR32Bit:%vreg64
568B		  * %vreg65<def> = SRLI %t5, 22; GR32Bit:%vreg65
568B		  * %vreg66<def> = SRLI %t5, 12; GR32Bit:%vreg66
568B		  * %vreg67<def> = ANDI %vreg66<kill>, 15; GR32Bit:%vreg67,%vreg66
568B		  * %vreg68<def> = SRLI %t5, 6; GR32Bit:%vreg68
568B		  * %vreg69<def> = ANDI %vreg68<kill>, 63; GR32Bit:%vreg69,%vreg68
568B		  * %vreg70<def> = ADDI %zero, 832; GR32Bit:%vreg70
568B		  * %vreg71<def> = MUL %vreg65<kill>, %vreg70<kill>; GR32Bit:%vreg71,%vreg65,%vreg70
568B		  * %vreg72<def> = ADDI %zero, 52; GR32Bit:%vreg72
568B		  * %vreg73<def> = MUL %vreg67<kill>, %vreg72<kill>; GR32Bit:%vreg73,%vreg67,%vreg72
568B		  * %vreg74<def> = ADD %vreg73<kill>, %vreg69<kill>; GR32Bit:%vreg74,%vreg73,%vreg69
568B		  * %vreg75<def> = ADD %vreg74<kill>, %vreg71<kill>; GR32Bit:%vreg75,%vreg74,%vreg71
568B		  * %vreg76<def> = MUL %vreg75<kill>, %vreg64<kill>; GR32Bit:%vreg76,%vreg75,%vreg64
568B		  * %t5<def> = ADD %vreg63<kill>, %vreg76<kill>; GR32Bit:%vreg63,%vreg76
568B		  * END 0
568B		  * %zero<def> = ADDI %zero, 0
568B		  * %zero<def> = ADDI %zero, 0
744B		%t4<def> = ADD %t5, %zero
744B		  * %vreg79<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg79
744B		  * %vreg80<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg80
744B		  * %vreg81<def> = SRLI %vreg80<kill>, 12; GR32Bit:%vreg81,%vreg80
744B		  * %vreg82<def> = ADD %vreg79<kill>, %vreg81<kill>; GR32Bit:%vreg82,%vreg79,%vreg81
744B		  * %vreg83<def> = ADDI %zero, 28; GR32Bit:%vreg83
744B		  * %vreg84<def> = SRLI %t5, 22; GR32Bit:%vreg84
744B		  * %vreg85<def> = SRLI %t5, 12; GR32Bit:%vreg85
744B		  * %vreg86<def> = ANDI %vreg85<kill>, 15; GR32Bit:%vreg86,%vreg85
744B		  * %vreg87<def> = SRLI %t5, 6; GR32Bit:%vreg87
744B		  * %vreg88<def> = ANDI %vreg87<kill>, 63; GR32Bit:%vreg88,%vreg87
744B		  * %vreg89<def> = ADDI %zero, 832; GR32Bit:%vreg89
744B		  * %vreg90<def> = MUL %vreg84<kill>, %vreg89<kill>; GR32Bit:%vreg90,%vreg84,%vreg89
744B		  * %vreg91<def> = ADDI %zero, 52; GR32Bit:%vreg91
744B		  * %vreg92<def> = MUL %vreg86<kill>, %vreg91<kill>; GR32Bit:%vreg92,%vreg86,%vreg91
744B		  * %vreg93<def> = ADD %vreg92<kill>, %vreg88<kill>; GR32Bit:%vreg93,%vreg92,%vreg88
744B		  * %vreg94<def> = ADD %vreg93<kill>, %vreg90<kill>; GR32Bit:%vreg94,%vreg93,%vreg90
744B		  * %vreg95<def> = MUL %vreg94<kill>, %vreg83<kill>; GR32Bit:%vreg95,%vreg94,%vreg83
744B		  * %t5<def> = ADD %vreg82<kill>, %vreg95<kill>; GR32Bit:%vreg82,%vreg95
744B		  * END 0
744B		  * %zero<def> = ADDI %zero, 0
744B		  * %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#2560")">
> %t1<def> = LUI <MCSym="%lo("ga#2560")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 28
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = LUI <MCSym="%lo("ga#1024")">
> SRLI %t0, %t0, 12
> %t1<def> = LUI <ga:@glob_sg_bit0>[TF=2]
> %t2<def> = LUI <ga:@redefine_out_c>[TF=2]
> %fp<def> = LUI <MCSym="%lo("ga#2304")">
> SRLI %fp, %fp, 12
> %t1<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = LW %t1<kill>, 0; mem:LD4[@glob_sg_bit0]
> SW %t1<kill>, %t0, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0)]
> %t1<def> = LUI <ga:@glob_sg_bit1>[TF=2]
> %t2<def> = LUI <MCSym="%lo("ga#1280")">
> SRLI %t2, %t2, 12
> %t1<def> = ADD %t2<kill>, %t1<kill>
> %t1<def> = LW %t1<kill>, 0; mem:LD4[@glob_sg_bit1]
> SW %t1<kill>, %t0<kill>, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 1)]
> %t1<def> = ADDI %t5, <fi#-1>
> %t0<def> = LUI <MCSym="%lo("ga#2048")">
> SRLI %t0, %t0, 12
> %t2<def> = LUI <ga:@redefine_out_b>[TF=2]
> %t0<def> = ADD %t0<kill>, %t2<kill>
> %ft1<def> = FLW %t1<kill>, 0; mem:LD4[%0](align=16)
> FSW %ft1<kill>, %t0, 0; mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)]
> %t1<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]
> %t2<def> = LUI <MCSym="%lo("ga#1536")">
> SRLI %t2, %t2, 12
> %t1<def> = ADD %t2<kill>, %t1<kill>
> %ft1<def> = FLW %t1<kill>, 0; mem:LD4[@nh_fin_de_rampe]
> FSW %ft1<kill>, %t0<kill>, 4; mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)]
> FDELETE %t4, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#2560")">
> %t1<def> = LUI <MCSym="%lo("ga#2560")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 28
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#2560")">
> %t1<def> = LUI <MCSym="%lo("ga#2560")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 28
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#2560")">
> %t1<def> = LUI <MCSym="%lo("ga#2560")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 28
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
********** EMITTING LIVE DEBUG VARIABLES **********
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: redefine_start2
current state of mf:# Machine code for function redefine_start2: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]

BB#0: derived from LLVM BB %redefine_start2.newName01
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#2560")">
	  * %t1<def> = LUI <MCSym="%lo("ga#2560")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 28
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = LUI <MCSym="%lo("ga#1024")">
	  * SRLI %t0, %t0, 12
	  * %t1<def> = LUI <ga:@glob_sg_bit0>[TF=2]
	  * %t2<def> = LUI <ga:@redefine_out_c>[TF=2]
	  * %fp<def> = LUI <MCSym="%lo("ga#2304")">
	  * SRLI %fp, %fp, 12
	  * %t1<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = LW %t1<kill>, 0; mem:LD4[@glob_sg_bit0]
	  * SW %t1<kill>, %t0, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 0)]
	  * %t1<def> = LUI <ga:@glob_sg_bit1>[TF=2]
	  * %t2<def> = LUI <MCSym="%lo("ga#1280")">
	  * SRLI %t2, %t2, 12
	  * %t1<def> = ADD %t2<kill>, %t1<kill>
	  * %t1<def> = LW %t1<kill>, 0; mem:LD4[@glob_sg_bit1]
	  * SW %t1<kill>, %t0<kill>, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_c, i32 0, i32 1)]
	  * %t1<def> = ADDI %t5, <fi#-1>
	  * %t0<def> = LUI <MCSym="%lo("ga#2048")">
	  * SRLI %t0, %t0, 12
	  * %t2<def> = LUI <ga:@redefine_out_b>[TF=2]
	  * %t0<def> = ADD %t0<kill>, %t2<kill>
	  * %ft1<def> = FLW %t1<kill>, 0; mem:LD4[%0](align=16)
	  * FSW %ft1<kill>, %t0, 0; mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 0)]
	  * %t1<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]
	  * %t2<def> = LUI <MCSym="%lo("ga#1536")">
	  * SRLI %t2, %t2, 12
	  * %t1<def> = ADD %t2<kill>, %t1<kill>
	  * %ft1<def> = FLW %t1<kill>, 0; mem:LD4[@nh_fin_de_rampe]
	  * FSW %ft1<kill>, %t0<kill>, 4; mem:ST4[getelementptr inbounds ([2 x float]* @redefine_out_b, i32 0, i32 1)]
	  * FDELETE %t4, 0
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#2560")">
	  * %t1<def> = LUI <MCSym="%lo("ga#2560")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 28
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#2560")">
	  * %t1<def> = LUI <MCSym="%lo("ga#2560")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 28
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#2560")">
	  * %t1<def> = LUI <MCSym="%lo("ga#2560")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 28
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0

# End machine code for function redefine_start2.

lowering frame index for func redefine_start2:-1 TO VAL:0
MERGING MOSTLY EMPTY BLOCKS - BEFORE:

startup_starter3.if.end26:                        ; preds = %startup_starter3.if.then25, %startup_starter3.if.end
  br label %startup_starter3.if.end27

startup_starter3.if.end27:                        ; preds = %startup_starter3.if.end26, %startup_starter3.if.then15
  br label %startup_starter3.if.end29
AFTER:

startup_starter3.if.end27:                        ; preds = %startup_starter3.if.end, %startup_starter3.if.then25, %startup_starter3.if.then15
  br label %startup_starter3.if.end29



MERGING MOSTLY EMPTY BLOCKS - BEFORE:

startup_starter3.if.end27:                        ; preds = %startup_starter3.if.end, %startup_starter3.if.then25, %startup_starter3.if.then15
  br label %startup_starter3.if.end29

startup_starter3.if.end29:                        ; preds = %startup_starter3.if.end27, %startup_starter3.if.else28
  br label %startup_starter3.if.end30
AFTER:

startup_starter3.if.end29:                        ; preds = %startup_starter3.if.then15, %startup_starter3.if.then25, %startup_starter3.if.end, %startup_starter3.if.else28
  br label %startup_starter3.if.end30



MERGING MOSTLY EMPTY BLOCKS - BEFORE:

startup_starter3.if.end29:                        ; preds = %startup_starter3.if.then15, %startup_starter3.if.then25, %startup_starter3.if.end, %startup_starter3.if.else28
  br label %startup_starter3.if.end30

startup_starter3.if.end30:                        ; preds = %startup_starter3.if.end29, %startup_starter3.if.then9
  br label %startup_starter3.if.end31
AFTER:

startup_starter3.if.end30:                        ; preds = %startup_starter3.if.else28, %startup_starter3.if.end, %startup_starter3.if.then25, %startup_starter3.if.then15, %startup_starter3.if.then9
  br label %startup_starter3.if.end31



MERGING MOSTLY EMPTY BLOCKS - BEFORE:

startup_starter3.if.then5:                        ; preds = %startup_starter3.if.else
  br label %startup_starter3.if.end31

startup_starter3.if.end31:                        ; preds = %startup_starter3.if.end30, %startup_starter3.if.then5
  br label %startup_starter3.if.end32
AFTER:

startup_starter3.if.end31:                        ; preds = %startup_starter3.if.else, %startup_starter3.if.end30
  br label %startup_starter3.if.end32



MERGING MOSTLY EMPTY BLOCKS - BEFORE:

startup_starter3.if.end30:                        ; preds = %startup_starter3.if.else28, %startup_starter3.if.end, %startup_starter3.if.then25, %startup_starter3.if.then15, %startup_starter3.if.then9
  br label %startup_starter3.if.end31

startup_starter3.if.end31:                        ; preds = %startup_starter3.if.else, %startup_starter3.if.end30
  br label %startup_starter3.if.end32
AFTER:

startup_starter3.if.end31:                        ; preds = %startup_starter3.if.then9, %startup_starter3.if.then15, %startup_starter3.if.then25, %startup_starter3.if.end, %startup_starter3.if.else28, %startup_starter3.if.else
  br label %startup_starter3.if.end32



MERGING MOSTLY EMPTY BLOCKS - BEFORE:

startup_starter3.if.end31:                        ; preds = %startup_starter3.if.then9, %startup_starter3.if.then15, %startup_starter3.if.then25, %startup_starter3.if.end, %startup_starter3.if.else28, %startup_starter3.if.else
  br label %startup_starter3.if.end32

startup_starter3.if.end32:                        ; preds = %startup_starter3.if.end31, %startup_starter3.if.then
  %54 = load float* %4, align 4
  store float %54, float* %1, align 4
  br label %startup_starter3.return
AFTER:

startup_starter3.if.end32:                        ; preds = %startup_starter3.if.else, %startup_starter3.if.else28, %startup_starter3.if.end, %startup_starter3.if.then25, %startup_starter3.if.then15, %startup_starter3.if.then9, %startup_starter3.if.then
  %54 = load float* %4, align 4
  store float %54, float* %1, align 4
  br label %startup_starter3.return



CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:%8]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [8 + Base:%11]
CGP: Found      local addrmode: [Base:%4]
CGP: Found      local addrmode: [Base:%5]
CGP: Found      local addrmode: [Base:%6]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [4 + Base:%15]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [4 + Base:%19]
CGP: Found      local addrmode: [Base:%5]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [4 + Base:%24]
CGP: Found      local addrmode: [Base:%6]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:@NH_STARTER_SHUTOFF]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:@SG_MAX_RPM]
CGP: Found      local addrmode: [Base:%4]
CGP: Found      local addrmode: [Base:@SG_RAMP_MAX]
CGP: Found      local addrmode: [Base:@SG_RAMP_MAX]
CGP: Found      local addrmode: [Base:%4]
CGP: Found      local addrmode: [Base:%4]
CGP: Found      local addrmode: [Base:@SG_MAX]
CGP: Found      local addrmode: [Base:@SG_MAX]
CGP: Found      local addrmode: [Base:%4]
CGP: Found      local addrmode: [Base:%4]
CGP: Found      local addrmode: [Base:@glob_sg_bit0]
CGP: Found      local addrmode: [Base:@glob_sg_bit1]
CGP: Found      local addrmode: [Base:@SG_RAMP_MAX]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [4 + Base:%46]
CGP: Found      local addrmode: [Base:%4]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:@nh_fin_de_rampe]
CGP: Found      local addrmode: [Base:%4]
CGP: Found      local addrmode: [Base:@glob_sg_bit0]
CGP: Found      local addrmode: [Base:@glob_sg_bit1]
CGP: Found      local addrmode: [Base:%4]
CGP: Found      local addrmode: [Base:%1]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:%8]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [8 + Base:%11]
CGP: Found      local addrmode: [Base:%4]
CGP: Found      local addrmode: [Base:%5]
CGP: Found      local addrmode: [Base:%6]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [4 + Base:%15]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [4 + Base:%19]
CGP: Found      local addrmode: [Base:%5]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [4 + Base:%24]
CGP: Found      local addrmode: [Base:%6]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:@NH_STARTER_SHUTOFF]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:@SG_MAX_RPM]
CGP: Found      local addrmode: [Base:%4]
CGP: Found      local addrmode: [Base:@SG_RAMP_MAX]
CGP: Found      local addrmode: [Base:@SG_RAMP_MAX]
CGP: Found      local addrmode: [Base:%4]
CGP: Found      local addrmode: [Base:%4]
CGP: Found      local addrmode: [Base:@SG_MAX]
CGP: Found      local addrmode: [Base:@SG_MAX]
CGP: Found      local addrmode: [Base:%4]
CGP: Found      local addrmode: [Base:%4]
CGP: Found      local addrmode: [Base:@glob_sg_bit0]
CGP: Found      local addrmode: [Base:@glob_sg_bit1]
CGP: Found      local addrmode: [Base:@SG_RAMP_MAX]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [4 + Base:%46]
CGP: Found      local addrmode: [Base:%4]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:@nh_fin_de_rampe]
CGP: Found      local addrmode: [Base:%4]
CGP: Found      local addrmode: [Base:@glob_sg_bit0]
CGP: Found      local addrmode: [Base:@glob_sg_bit1]
CGP: Found      local addrmode: [Base:%4]
CGP: Found      local addrmode: [Base:%1]
To merge:

startup_starter3.if.end32:                        ; preds = %startup_starter3.if.else, %startup_starter3.if.else28, %startup_starter3.if.end, %startup_starter3.if.then25, %startup_starter3.if.then15, %startup_starter3.if.then9, %startup_starter3.if.then
  %54 = load float* %4, align 4
  store float %54, float* %1, align 4
  br label %startup_starter3.return



Computing probabilities for startup_starter3.return
Computing probabilities for startup_starter3.if.then
Computing probabilities for startup_starter3.if.then9
Computing probabilities for startup_starter3.if.then25
Computing probabilities for startup_starter3.if.end
Computing probabilities for startup_starter3.if.then22
Computing probabilities for startup_starter3.if.then19
Computing probabilities for startup_starter3.if.then15
Computing probabilities for startup_starter3.if.else28
Computing probabilities for startup_starter3.if.else11
Computing probabilities for startup_starter3.if.else6
Computing probabilities for startup_starter3.if.else
Computing probabilities for startup_starter3.entry
set edge startup_starter3.entry -> 1 successor weight to 20
set edge startup_starter3.entry -> 0 successor weight to 12



=== startup_starter3
store visit is after?  store i32* %0, i32** %2, align 4
I was here to add i32* %0
arg match found with argIndex:-1
Argument does not have assigned frame index!
The value is an argument for which I am here to get arg frame index as:0
whats the index?-1
I was here to add   %2 = alloca i32*, align 4
whats in dag after store?SelectionDAG has 7 nodes:
  0x3b57b78: ch = EntryToken [ORD=40]

  0x3b79830: i32 = FrameIndex<-1> [ORD=40]

  0x3b7bf30: i32 = undef [ORD=40]

    0x3b57b78: <multiple use>
    0x3b79830: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b75390: i32,ch = load 0x3b57b78, 0x3b79830, 0x3b7bf30<LD4[FixedStack-1]>

  0x3b777c0: i32 = Constant<0>

    0x3b57b78: <multiple use>
    0x3b79830: <multiple use>
    0x3b771c0: i32 = FrameIndex<1> [ORD=40]

    0x3b7bf30: <multiple use>
  0x3b76fc0: ch = store 0x3b57b78, 0x3b79830, 0x3b771c0, 0x3b7bf30<ST4[%2]> [ORD=40]


visiting load instruction   %7 = load i32** %2, align 4
with I type i32*and sd value :0x3b771c0: i32 = FrameIndex<1>
new load?0x3b776c0: i32,ch = load 0x3b76fc0, 0x3b771c0, 0x3b7bf30<LD4[%2]>
dag after load is dealt with?SelectionDAG has 8 nodes:
  0x3b57b78: ch = EntryToken [ORD=40]

  0x3b79830: i32 = FrameIndex<-1> [ORD=40]

  0x3b7bf30: i32 = undef [ORD=40]

    0x3b57b78: <multiple use>
    0x3b79830: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b75390: i32,ch = load 0x3b57b78, 0x3b79830, 0x3b7bf30<LD4[FixedStack-1]>

  0x3b771c0: i32 = FrameIndex<1> [ORD=40]

  0x3b777c0: i32 = Constant<0>

      0x3b57b78: <multiple use>
      0x3b79830: <multiple use>
      0x3b771c0: <multiple use>
      0x3b7bf30: <multiple use>
    0x3b76fc0: ch = store 0x3b57b78, 0x3b79830, 0x3b771c0, 0x3b7bf30<ST4[%2]> [ORD=40]

    0x3b771c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b776c0: i32,ch = load 0x3b76fc0, 0x3b771c0, 0x3b7bf30<LD4[%2]>

    0x3b57b78: <multiple use>
    0x3b79830: <multiple use>
    0x3b771c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b76fc0: ch = store 0x3b57b78, 0x3b79830, 0x3b771c0, 0x3b7bf30<ST4[%2]> [ORD=40]


visiting load instruction   %10 = load float* %9, align 4
with I type floatand sd value :0x3b776c0: i32,ch = load 0x3b76fc0, 0x3b771c0, 0x3b7bf30<LD4[%2]>
new load?0x3b77ac0: f32,ch = load 0x3b76fc0, 0x3b776c0, 0x3b7bf30<LD4[%9]>
dag after load is dealt with?SelectionDAG has 9 nodes:
  0x3b57b78: ch = EntryToken [ORD=40]

  0x3b79830: i32 = FrameIndex<-1> [ORD=40]

  0x3b7bf30: i32 = undef [ORD=40]

    0x3b57b78: <multiple use>
    0x3b79830: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b75390: i32,ch = load 0x3b57b78, 0x3b79830, 0x3b7bf30<LD4[FixedStack-1]>

  0x3b771c0: i32 = FrameIndex<1> [ORD=40]

  0x3b777c0: i32 = Constant<0>

    0x3b76fc0: <multiple use>
      0x3b76fc0: <multiple use>
      0x3b771c0: <multiple use>
      0x3b7bf30: <multiple use>
    0x3b776c0: i32,ch = load 0x3b76fc0, 0x3b771c0, 0x3b7bf30<LD4[%2]> [ORD=41]

    0x3b7bf30: <multiple use>
  0x3b77ac0: f32,ch = load 0x3b76fc0, 0x3b776c0, 0x3b7bf30<LD4[%9]>

    0x3b57b78: <multiple use>
    0x3b79830: <multiple use>
    0x3b771c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b76fc0: ch = store 0x3b57b78, 0x3b79830, 0x3b771c0, 0x3b7bf30<ST4[%2]> [ORD=40]


store visit is after?  store float %10, float* %3, align 4
I was here to add   %3 = alloca float, align 4
whats in dag after store?SelectionDAG has 12 nodes:
  0x3b57b78: ch = EntryToken [ORD=40]

  0x3b79830: i32 = FrameIndex<-1> [ORD=40]

  0x3b7bf30: i32 = undef [ORD=40]

    0x3b57b78: <multiple use>
    0x3b79830: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b75390: i32,ch = load 0x3b57b78, 0x3b79830, 0x3b7bf30<LD4[FixedStack-1]>

  0x3b771c0: i32 = FrameIndex<1> [ORD=40]

  0x3b777c0: i32 = Constant<0>

    0x3b57b78: <multiple use>
    0x3b79830: <multiple use>
    0x3b771c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b76fc0: ch = store 0x3b57b78, 0x3b79830, 0x3b771c0, 0x3b7bf30<ST4[%2]> [ORD=40]

    0x3b76fc0: <multiple use>
    0x3b771c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b776c0: i32,ch = load 0x3b76fc0, 0x3b771c0, 0x3b7bf30<LD4[%2]> [ORD=41]

    0x3b76fc0: <multiple use>
    0x3b776c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b77ac0: f32,ch = load 0x3b76fc0, 0x3b776c0, 0x3b7bf30<LD4[%9]> [ORD=44]

      0x3b776c0: <multiple use>
      0x3b77ac0: <multiple use>
    0x3b79630: ch = TokenFactor 0x3b776c0:1, 0x3b77ac0:1 [ORD=45]

    0x3b77ac0: <multiple use>
    0x3b79130: i32 = FrameIndex<2> [ORD=45]

    0x3b7bf30: <multiple use>
  0x3b79330: ch = store 0x3b79630, 0x3b77ac0, 0x3b79130, 0x3b7bf30<ST4[%3]> [ORD=45]


visiting load instruction   %11 = load i32** %2, align 4
with I type i32*and sd value :0x3b771c0: i32 = FrameIndex<1>
new load?0x3b75690: i32,ch = load 0x3b79330, 0x3b771c0, 0x3b7bf30<LD4[%2]>
dag after load is dealt with?SelectionDAG has 13 nodes:
  0x3b57b78: ch = EntryToken [ORD=40]

  0x3b79830: i32 = FrameIndex<-1> [ORD=40]

  0x3b7bf30: i32 = undef [ORD=40]

    0x3b57b78: <multiple use>
    0x3b79830: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b75390: i32,ch = load 0x3b57b78, 0x3b79830, 0x3b7bf30<LD4[FixedStack-1]>

  0x3b771c0: i32 = FrameIndex<1> [ORD=40]

  0x3b777c0: i32 = Constant<0>

    0x3b57b78: <multiple use>
    0x3b79830: <multiple use>
    0x3b771c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b76fc0: ch = store 0x3b57b78, 0x3b79830, 0x3b771c0, 0x3b7bf30<ST4[%2]> [ORD=40]

    0x3b76fc0: <multiple use>
    0x3b771c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b776c0: i32,ch = load 0x3b76fc0, 0x3b771c0, 0x3b7bf30<LD4[%2]> [ORD=41]

    0x3b76fc0: <multiple use>
    0x3b776c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b77ac0: f32,ch = load 0x3b76fc0, 0x3b776c0, 0x3b7bf30<LD4[%9]> [ORD=44]

        0x3b776c0: <multiple use>
        0x3b77ac0: <multiple use>
      0x3b79630: ch = TokenFactor 0x3b776c0:1, 0x3b77ac0:1 [ORD=45]

      0x3b77ac0: <multiple use>
      0x3b79130: i32 = FrameIndex<2> [ORD=45]

      0x3b7bf30: <multiple use>
    0x3b79330: ch = store 0x3b79630, 0x3b77ac0, 0x3b79130, 0x3b7bf30<ST4[%3]> [ORD=45]

    0x3b771c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b75690: i32,ch = load 0x3b79330, 0x3b771c0, 0x3b7bf30<LD4[%2]>

      0x3b776c0: <multiple use>
      0x3b77ac0: <multiple use>
    0x3b79630: ch = TokenFactor 0x3b776c0:1, 0x3b77ac0:1 [ORD=45]

    0x3b77ac0: <multiple use>
    0x3b79130: i32 = FrameIndex<2> [ORD=45]

    0x3b7bf30: <multiple use>
  0x3b79330: ch = store 0x3b79630, 0x3b77ac0, 0x3b79130, 0x3b7bf30<ST4[%3]> [ORD=45]


visiting load instruction   %14 = load float* %13, align 4
with I type floatand sd value :0x3b7a820: i32 = add 0x3b75690, 0x3b7bb30
new load?0x3b7b930: f32,ch = load 0x3b79330, 0x3b7a820, 0x3b7bf30<LD4[%13]>
dag after load is dealt with?SelectionDAG has 17 nodes:
  0x3b57b78: ch = EntryToken [ORD=40]

  0x3b79830: i32 = FrameIndex<-1> [ORD=40]

  0x3b7bf30: i32 = undef [ORD=40]

    0x3b57b78: <multiple use>
    0x3b79830: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b75390: i32,ch = load 0x3b57b78, 0x3b79830, 0x3b7bf30<LD4[FixedStack-1]>

  0x3b771c0: i32 = FrameIndex<1> [ORD=40]

  0x3b777c0: i32 = Constant<0>

    0x3b57b78: <multiple use>
    0x3b79830: <multiple use>
    0x3b771c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b76fc0: ch = store 0x3b57b78, 0x3b79830, 0x3b771c0, 0x3b7bf30<ST4[%2]> [ORD=40]

    0x3b76fc0: <multiple use>
    0x3b771c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b776c0: i32,ch = load 0x3b76fc0, 0x3b771c0, 0x3b7bf30<LD4[%2]> [ORD=41]

    0x3b76fc0: <multiple use>
    0x3b776c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b77ac0: f32,ch = load 0x3b76fc0, 0x3b776c0, 0x3b7bf30<LD4[%9]> [ORD=44]

  0x3b7b220: i64 = Constant<8>

    0x3b79330: <multiple use>
        0x3b79330: <multiple use>
        0x3b771c0: <multiple use>
        0x3b7bf30: <multiple use>
      0x3b75690: i32,ch = load 0x3b79330, 0x3b771c0, 0x3b7bf30<LD4[%2]> [ORD=46]

      0x3b7bb30: i32 = Constant<8> [ORD=47]

    0x3b7a820: i32 = add 0x3b75690, 0x3b7bb30 [ORD=47]

    0x3b7bf30: <multiple use>
  0x3b7b930: f32,ch = load 0x3b79330, 0x3b7a820, 0x3b7bf30<LD4[%13]>

      0x3b776c0: <multiple use>
      0x3b77ac0: <multiple use>
    0x3b79630: ch = TokenFactor 0x3b776c0:1, 0x3b77ac0:1 [ORD=45]

    0x3b77ac0: <multiple use>
    0x3b79130: i32 = FrameIndex<2> [ORD=45]

    0x3b7bf30: <multiple use>
  0x3b79330: ch = store 0x3b79630, 0x3b77ac0, 0x3b79130, 0x3b7bf30<ST4[%3]> [ORD=45]


store visit is after?  store float %14, float* %4, align 4
I was here to add   %4 = alloca float, align 4
whats in dag after store?SelectionDAG has 20 nodes:
  0x3b57b78: ch = EntryToken [ORD=40]

  0x3b79830: i32 = FrameIndex<-1> [ORD=40]

  0x3b7bf30: i32 = undef [ORD=40]

    0x3b57b78: <multiple use>
    0x3b79830: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b75390: i32,ch = load 0x3b57b78, 0x3b79830, 0x3b7bf30<LD4[FixedStack-1]>

  0x3b771c0: i32 = FrameIndex<1> [ORD=40]

  0x3b777c0: i32 = Constant<0>

    0x3b57b78: <multiple use>
    0x3b79830: <multiple use>
    0x3b771c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b76fc0: ch = store 0x3b57b78, 0x3b79830, 0x3b771c0, 0x3b7bf30<ST4[%2]> [ORD=40]

    0x3b76fc0: <multiple use>
    0x3b771c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b776c0: i32,ch = load 0x3b76fc0, 0x3b771c0, 0x3b7bf30<LD4[%2]> [ORD=41]

    0x3b76fc0: <multiple use>
    0x3b776c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b77ac0: f32,ch = load 0x3b76fc0, 0x3b776c0, 0x3b7bf30<LD4[%9]> [ORD=44]

      0x3b776c0: <multiple use>
      0x3b77ac0: <multiple use>
    0x3b79630: ch = TokenFactor 0x3b776c0:1, 0x3b77ac0:1 [ORD=45]

    0x3b77ac0: <multiple use>
    0x3b79130: i32 = FrameIndex<2> [ORD=45]

    0x3b7bf30: <multiple use>
  0x3b79330: ch = store 0x3b79630, 0x3b77ac0, 0x3b79130, 0x3b7bf30<ST4[%3]> [ORD=45]

    0x3b79330: <multiple use>
    0x3b771c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b75690: i32,ch = load 0x3b79330, 0x3b771c0, 0x3b7bf30<LD4[%2]> [ORD=46]

  0x3b7b220: i64 = Constant<8>

    0x3b79330: <multiple use>
      0x3b75690: <multiple use>
      0x3b7bb30: i32 = Constant<8> [ORD=47]

    0x3b7a820: i32 = add 0x3b75690, 0x3b7bb30 [ORD=47]

    0x3b7bf30: <multiple use>
  0x3b7b930: f32,ch = load 0x3b79330, 0x3b7a820, 0x3b7bf30<LD4[%13]> [ORD=49]

      0x3b75690: <multiple use>
      0x3b7b930: <multiple use>
    0x3b7b320: ch = TokenFactor 0x3b75690:1, 0x3b7b930:1 [ORD=50]

    0x3b7b930: <multiple use>
    0x3b75d90: i32 = FrameIndex<3> [ORD=50]

    0x3b7bf30: <multiple use>
  0x3b7b730: ch = store 0x3b7b320, 0x3b7b930, 0x3b75d90, 0x3b7bf30<ST4[%4]> [ORD=50]


store visit is after?  store i32 350, i32* %5, align 4
I was here to add i32 350
I was here to add   %5 = alloca i32, align 4
whats in dag after store?SelectionDAG has 23 nodes:
  0x3b57b78: ch = EntryToken [ORD=40]

  0x3b79830: i32 = FrameIndex<-1> [ORD=40]

  0x3b7bf30: i32 = undef [ORD=40]

    0x3b57b78: <multiple use>
    0x3b79830: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b75390: i32,ch = load 0x3b57b78, 0x3b79830, 0x3b7bf30<LD4[FixedStack-1]>

  0x3b771c0: i32 = FrameIndex<1> [ORD=40]

  0x3b777c0: i32 = Constant<0>

    0x3b57b78: <multiple use>
    0x3b79830: <multiple use>
    0x3b771c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b76fc0: ch = store 0x3b57b78, 0x3b79830, 0x3b771c0, 0x3b7bf30<ST4[%2]> [ORD=40]

    0x3b76fc0: <multiple use>
    0x3b771c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b776c0: i32,ch = load 0x3b76fc0, 0x3b771c0, 0x3b7bf30<LD4[%2]> [ORD=41]

    0x3b76fc0: <multiple use>
    0x3b776c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b77ac0: f32,ch = load 0x3b76fc0, 0x3b776c0, 0x3b7bf30<LD4[%9]> [ORD=44]

      0x3b776c0: <multiple use>
      0x3b77ac0: <multiple use>
    0x3b79630: ch = TokenFactor 0x3b776c0:1, 0x3b77ac0:1 [ORD=45]

    0x3b77ac0: <multiple use>
    0x3b79130: i32 = FrameIndex<2> [ORD=45]

    0x3b7bf30: <multiple use>
  0x3b79330: ch = store 0x3b79630, 0x3b77ac0, 0x3b79130, 0x3b7bf30<ST4[%3]> [ORD=45]

    0x3b79330: <multiple use>
    0x3b771c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b75690: i32,ch = load 0x3b79330, 0x3b771c0, 0x3b7bf30<LD4[%2]> [ORD=46]

  0x3b7b220: i64 = Constant<8>

    0x3b79330: <multiple use>
      0x3b75690: <multiple use>
      0x3b7bb30: i32 = Constant<8> [ORD=47]

    0x3b7a820: i32 = add 0x3b75690, 0x3b7bb30 [ORD=47]

    0x3b7bf30: <multiple use>
  0x3b7b930: f32,ch = load 0x3b79330, 0x3b7a820, 0x3b7bf30<LD4[%13]> [ORD=49]

        0x3b75690: <multiple use>
        0x3b7b930: <multiple use>
      0x3b7b320: ch = TokenFactor 0x3b75690:1, 0x3b7b930:1 [ORD=50]

      0x3b7b930: <multiple use>
      0x3b75d90: i32 = FrameIndex<3> [ORD=50]

      0x3b7bf30: <multiple use>
    0x3b7b730: ch = store 0x3b7b320, 0x3b7b930, 0x3b75d90, 0x3b7bf30<ST4[%4]> [ORD=50]

    0x3b7bc30: i32 = Constant<350> [ORD=51]

    0x3b79930: i32 = FrameIndex<4> [ORD=51]

    0x3b7bf30: <multiple use>
  0x3b7ac20: ch = store 0x3b7b730, 0x3b7bc30, 0x3b79930, 0x3b7bf30<ST4[%5]> [ORD=51]


store visit is after?  store i32 850, i32* %6, align 4
I was here to add i32 850
I was here to add   %6 = alloca i32, align 4
whats in dag after store?SelectionDAG has 26 nodes:
  0x3b57b78: ch = EntryToken [ORD=40]

  0x3b79830: i32 = FrameIndex<-1> [ORD=40]

  0x3b7bf30: i32 = undef [ORD=40]

    0x3b57b78: <multiple use>
    0x3b79830: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b75390: i32,ch = load 0x3b57b78, 0x3b79830, 0x3b7bf30<LD4[FixedStack-1]>

  0x3b771c0: i32 = FrameIndex<1> [ORD=40]

  0x3b777c0: i32 = Constant<0>

    0x3b57b78: <multiple use>
    0x3b79830: <multiple use>
    0x3b771c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b76fc0: ch = store 0x3b57b78, 0x3b79830, 0x3b771c0, 0x3b7bf30<ST4[%2]> [ORD=40]

    0x3b76fc0: <multiple use>
    0x3b771c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b776c0: i32,ch = load 0x3b76fc0, 0x3b771c0, 0x3b7bf30<LD4[%2]> [ORD=41]

    0x3b76fc0: <multiple use>
    0x3b776c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b77ac0: f32,ch = load 0x3b76fc0, 0x3b776c0, 0x3b7bf30<LD4[%9]> [ORD=44]

      0x3b776c0: <multiple use>
      0x3b77ac0: <multiple use>
    0x3b79630: ch = TokenFactor 0x3b776c0:1, 0x3b77ac0:1 [ORD=45]

    0x3b77ac0: <multiple use>
    0x3b79130: i32 = FrameIndex<2> [ORD=45]

    0x3b7bf30: <multiple use>
  0x3b79330: ch = store 0x3b79630, 0x3b77ac0, 0x3b79130, 0x3b7bf30<ST4[%3]> [ORD=45]

    0x3b79330: <multiple use>
    0x3b771c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b75690: i32,ch = load 0x3b79330, 0x3b771c0, 0x3b7bf30<LD4[%2]> [ORD=46]

  0x3b7b220: i64 = Constant<8>

    0x3b79330: <multiple use>
      0x3b75690: <multiple use>
      0x3b7bb30: i32 = Constant<8> [ORD=47]

    0x3b7a820: i32 = add 0x3b75690, 0x3b7bb30 [ORD=47]

    0x3b7bf30: <multiple use>
  0x3b7b930: f32,ch = load 0x3b79330, 0x3b7a820, 0x3b7bf30<LD4[%13]> [ORD=49]

          0x3b75690: <multiple use>
          0x3b7b930: <multiple use>
        0x3b7b320: ch = TokenFactor 0x3b75690:1, 0x3b7b930:1 [ORD=50]

        0x3b7b930: <multiple use>
        0x3b75d90: i32 = FrameIndex<3> [ORD=50]

        0x3b7bf30: <multiple use>
      0x3b7b730: ch = store 0x3b7b320, 0x3b7b930, 0x3b75d90, 0x3b7bf30<ST4[%4]> [ORD=50]

      0x3b7bc30: i32 = Constant<350> [ORD=51]

      0x3b79930: i32 = FrameIndex<4> [ORD=51]

      0x3b7bf30: <multiple use>
    0x3b7ac20: ch = store 0x3b7b730, 0x3b7bc30, 0x3b79930, 0x3b7bf30<ST4[%5]> [ORD=51]

    0x3b7b020: i32 = Constant<850> [ORD=52]

    0x3b7bd30: i32 = FrameIndex<5> [ORD=52]

    0x3b7bf30: <multiple use>
  0x3b75a90: ch = store 0x3b7ac20, 0x3b7b020, 0x3b7bd30, 0x3b7bf30<ST4[%6]> [ORD=52]


visiting load instruction   %15 = load i32** %2, align 4
with I type i32*and sd value :0x3b771c0: i32 = FrameIndex<1>
new load?0x3b76090: i32,ch = load 0x3b75a90, 0x3b771c0, 0x3b7bf30<LD4[%2]>
dag after load is dealt with?SelectionDAG has 27 nodes:
  0x3b57b78: ch = EntryToken [ORD=40]

  0x3b79830: i32 = FrameIndex<-1> [ORD=40]

  0x3b7bf30: i32 = undef [ORD=40]

    0x3b57b78: <multiple use>
    0x3b79830: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b75390: i32,ch = load 0x3b57b78, 0x3b79830, 0x3b7bf30<LD4[FixedStack-1]>

  0x3b771c0: i32 = FrameIndex<1> [ORD=40]

  0x3b777c0: i32 = Constant<0>

    0x3b57b78: <multiple use>
    0x3b79830: <multiple use>
    0x3b771c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b76fc0: ch = store 0x3b57b78, 0x3b79830, 0x3b771c0, 0x3b7bf30<ST4[%2]> [ORD=40]

    0x3b76fc0: <multiple use>
    0x3b771c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b776c0: i32,ch = load 0x3b76fc0, 0x3b771c0, 0x3b7bf30<LD4[%2]> [ORD=41]

    0x3b76fc0: <multiple use>
    0x3b776c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b77ac0: f32,ch = load 0x3b76fc0, 0x3b776c0, 0x3b7bf30<LD4[%9]> [ORD=44]

      0x3b776c0: <multiple use>
      0x3b77ac0: <multiple use>
    0x3b79630: ch = TokenFactor 0x3b776c0:1, 0x3b77ac0:1 [ORD=45]

    0x3b77ac0: <multiple use>
    0x3b79130: i32 = FrameIndex<2> [ORD=45]

    0x3b7bf30: <multiple use>
  0x3b79330: ch = store 0x3b79630, 0x3b77ac0, 0x3b79130, 0x3b7bf30<ST4[%3]> [ORD=45]

    0x3b79330: <multiple use>
    0x3b771c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b75690: i32,ch = load 0x3b79330, 0x3b771c0, 0x3b7bf30<LD4[%2]> [ORD=46]

  0x3b7b220: i64 = Constant<8>

    0x3b79330: <multiple use>
      0x3b75690: <multiple use>
      0x3b7bb30: i32 = Constant<8> [ORD=47]

    0x3b7a820: i32 = add 0x3b75690, 0x3b7bb30 [ORD=47]

    0x3b7bf30: <multiple use>
  0x3b7b930: f32,ch = load 0x3b79330, 0x3b7a820, 0x3b7bf30<LD4[%13]> [ORD=49]

            0x3b75690: <multiple use>
            0x3b7b930: <multiple use>
          0x3b7b320: ch = TokenFactor 0x3b75690:1, 0x3b7b930:1 [ORD=50]

          0x3b7b930: <multiple use>
          0x3b75d90: i32 = FrameIndex<3> [ORD=50]

          0x3b7bf30: <multiple use>
        0x3b7b730: ch = store 0x3b7b320, 0x3b7b930, 0x3b75d90, 0x3b7bf30<ST4[%4]> [ORD=50]

        0x3b7bc30: i32 = Constant<350> [ORD=51]

        0x3b79930: i32 = FrameIndex<4> [ORD=51]

        0x3b7bf30: <multiple use>
      0x3b7ac20: ch = store 0x3b7b730, 0x3b7bc30, 0x3b79930, 0x3b7bf30<ST4[%5]> [ORD=51]

      0x3b7b020: i32 = Constant<850> [ORD=52]

      0x3b7bd30: i32 = FrameIndex<5> [ORD=52]

      0x3b7bf30: <multiple use>
    0x3b75a90: ch = store 0x3b7ac20, 0x3b7b020, 0x3b7bd30, 0x3b7bf30<ST4[%6]> [ORD=52]

    0x3b771c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b76090: i32,ch = load 0x3b75a90, 0x3b771c0, 0x3b7bf30<LD4[%2]>

          0x3b75690: <multiple use>
          0x3b7b930: <multiple use>
        0x3b7b320: ch = TokenFactor 0x3b75690:1, 0x3b7b930:1 [ORD=50]

        0x3b7b930: <multiple use>
        0x3b75d90: i32 = FrameIndex<3> [ORD=50]

        0x3b7bf30: <multiple use>
      0x3b7b730: ch = store 0x3b7b320, 0x3b7b930, 0x3b75d90, 0x3b7bf30<ST4[%4]> [ORD=50]

      0x3b7bc30: i32 = Constant<350> [ORD=51]

      0x3b79930: i32 = FrameIndex<4> [ORD=51]

      0x3b7bf30: <multiple use>
    0x3b7ac20: ch = store 0x3b7b730, 0x3b7bc30, 0x3b79930, 0x3b7bf30<ST4[%5]> [ORD=51]

    0x3b7b020: i32 = Constant<850> [ORD=52]

    0x3b7bd30: i32 = FrameIndex<5> [ORD=52]

    0x3b7bf30: <multiple use>
  0x3b75a90: ch = store 0x3b7ac20, 0x3b7b020, 0x3b7bd30, 0x3b7bf30<ST4[%6]> [ORD=52]


visiting load instruction   %17 = load i32* %16, align 4
with I type i32and sd value :0x3b7b830: i32 = add 0x3b76090, 0x3b778c0
new load?0x3b77cc0: i32,ch = load 0x3b75a90, 0x3b7b830, 0x3b7bf30<LD4[%16]>
dag after load is dealt with?SelectionDAG has 31 nodes:
  0x3b57b78: ch = EntryToken [ORD=40]

  0x3b79830: i32 = FrameIndex<-1> [ORD=40]

  0x3b7bf30: i32 = undef [ORD=40]

    0x3b57b78: <multiple use>
    0x3b79830: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b75390: i32,ch = load 0x3b57b78, 0x3b79830, 0x3b7bf30<LD4[FixedStack-1]>

  0x3b771c0: i32 = FrameIndex<1> [ORD=40]

  0x3b777c0: i32 = Constant<0>

    0x3b57b78: <multiple use>
    0x3b79830: <multiple use>
    0x3b771c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b76fc0: ch = store 0x3b57b78, 0x3b79830, 0x3b771c0, 0x3b7bf30<ST4[%2]> [ORD=40]

    0x3b76fc0: <multiple use>
    0x3b771c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b776c0: i32,ch = load 0x3b76fc0, 0x3b771c0, 0x3b7bf30<LD4[%2]> [ORD=41]

    0x3b76fc0: <multiple use>
    0x3b776c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b77ac0: f32,ch = load 0x3b76fc0, 0x3b776c0, 0x3b7bf30<LD4[%9]> [ORD=44]

      0x3b776c0: <multiple use>
      0x3b77ac0: <multiple use>
    0x3b79630: ch = TokenFactor 0x3b776c0:1, 0x3b77ac0:1 [ORD=45]

    0x3b77ac0: <multiple use>
    0x3b79130: i32 = FrameIndex<2> [ORD=45]

    0x3b7bf30: <multiple use>
  0x3b79330: ch = store 0x3b79630, 0x3b77ac0, 0x3b79130, 0x3b7bf30<ST4[%3]> [ORD=45]

    0x3b79330: <multiple use>
    0x3b771c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b75690: i32,ch = load 0x3b79330, 0x3b771c0, 0x3b7bf30<LD4[%2]> [ORD=46]

  0x3b7b220: i64 = Constant<8>

    0x3b79330: <multiple use>
      0x3b75690: <multiple use>
      0x3b7bb30: i32 = Constant<8> [ORD=47]

    0x3b7a820: i32 = add 0x3b75690, 0x3b7bb30 [ORD=47]

    0x3b7bf30: <multiple use>
  0x3b7b930: f32,ch = load 0x3b79330, 0x3b7a820, 0x3b7bf30<LD4[%13]> [ORD=49]

  0x3b7be30: i64 = Constant<4>

    0x3b75a90: <multiple use>
        0x3b75a90: <multiple use>
        0x3b771c0: <multiple use>
        0x3b7bf30: <multiple use>
      0x3b76090: i32,ch = load 0x3b75a90, 0x3b771c0, 0x3b7bf30<LD4[%2]> [ORD=53]

      0x3b778c0: i32 = Constant<4> [ORD=54]

    0x3b7b830: i32 = add 0x3b76090, 0x3b778c0 [ORD=54]

    0x3b7bf30: <multiple use>
  0x3b77cc0: i32,ch = load 0x3b75a90, 0x3b7b830, 0x3b7bf30<LD4[%16]>

          0x3b75690: <multiple use>
          0x3b7b930: <multiple use>
        0x3b7b320: ch = TokenFactor 0x3b75690:1, 0x3b7b930:1 [ORD=50]

        0x3b7b930: <multiple use>
        0x3b75d90: i32 = FrameIndex<3> [ORD=50]

        0x3b7bf30: <multiple use>
      0x3b7b730: ch = store 0x3b7b320, 0x3b7b930, 0x3b75d90, 0x3b7bf30<ST4[%4]> [ORD=50]

      0x3b7bc30: i32 = Constant<350> [ORD=51]

      0x3b79930: i32 = FrameIndex<4> [ORD=51]

      0x3b7bf30: <multiple use>
    0x3b7ac20: ch = store 0x3b7b730, 0x3b7bc30, 0x3b79930, 0x3b7bf30<ST4[%5]> [ORD=51]

    0x3b7b020: i32 = Constant<850> [ORD=52]

    0x3b7bd30: i32 = FrameIndex<5> [ORD=52]

    0x3b7bf30: <multiple use>
  0x3b75a90: ch = store 0x3b7ac20, 0x3b7b020, 0x3b7bd30, 0x3b7bf30<ST4[%6]> [ORD=52]


I was here to add i32 0
Initial selection DAG: BB#0 'startup_starter3:startup_starter3.entry'
SelectionDAG has 37 nodes:
  0x3b57b78: ch = EntryToken [ORD=40]

  0x3b79830: i32 = FrameIndex<-1> [ORD=40]

  0x3b7bf30: i32 = undef [ORD=40]

    0x3b57b78: <multiple use>
    0x3b79830: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b75390: i32,ch = load 0x3b57b78, 0x3b79830, 0x3b7bf30<LD4[FixedStack-1]>

  0x3b771c0: i32 = FrameIndex<1> [ORD=40]

    0x3b57b78: <multiple use>
    0x3b79830: <multiple use>
    0x3b771c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b76fc0: ch = store 0x3b57b78, 0x3b79830, 0x3b771c0, 0x3b7bf30<ST4[%2]> [ORD=40]

    0x3b76fc0: <multiple use>
    0x3b771c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b776c0: i32,ch = load 0x3b76fc0, 0x3b771c0, 0x3b7bf30<LD4[%2]> [ORD=41]

    0x3b76fc0: <multiple use>
    0x3b776c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b77ac0: f32,ch = load 0x3b76fc0, 0x3b776c0, 0x3b7bf30<LD4[%9]> [ORD=44]

      0x3b776c0: <multiple use>
      0x3b77ac0: <multiple use>
    0x3b79630: ch = TokenFactor 0x3b776c0:1, 0x3b77ac0:1 [ORD=45]

    0x3b77ac0: <multiple use>
    0x3b79130: i32 = FrameIndex<2> [ORD=45]

    0x3b7bf30: <multiple use>
  0x3b79330: ch = store 0x3b79630, 0x3b77ac0, 0x3b79130, 0x3b7bf30<ST4[%3]> [ORD=45]

    0x3b79330: <multiple use>
    0x3b771c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b75690: i32,ch = load 0x3b79330, 0x3b771c0, 0x3b7bf30<LD4[%2]> [ORD=46]

  0x3b7b220: i64 = Constant<8>

    0x3b79330: <multiple use>
      0x3b75690: <multiple use>
      0x3b7bb30: i32 = Constant<8> [ORD=47]

    0x3b7a820: i32 = add 0x3b75690, 0x3b7bb30 [ORD=47]

    0x3b7bf30: <multiple use>
  0x3b7b930: f32,ch = load 0x3b79330, 0x3b7a820, 0x3b7bf30<LD4[%13]> [ORD=49]

          0x3b75690: <multiple use>
          0x3b7b930: <multiple use>
        0x3b7b320: ch = TokenFactor 0x3b75690:1, 0x3b7b930:1 [ORD=50]

        0x3b7b930: <multiple use>
        0x3b75d90: i32 = FrameIndex<3> [ORD=50]

        0x3b7bf30: <multiple use>
      0x3b7b730: ch = store 0x3b7b320, 0x3b7b930, 0x3b75d90, 0x3b7bf30<ST4[%4]> [ORD=50]

      0x3b7bc30: i32 = Constant<350> [ORD=51]

      0x3b79930: i32 = FrameIndex<4> [ORD=51]

      0x3b7bf30: <multiple use>
    0x3b7ac20: ch = store 0x3b7b730, 0x3b7bc30, 0x3b79930, 0x3b7bf30<ST4[%5]> [ORD=51]

    0x3b7b020: i32 = Constant<850> [ORD=52]

    0x3b7bd30: i32 = FrameIndex<5> [ORD=52]

    0x3b7bf30: <multiple use>
  0x3b75a90: ch = store 0x3b7ac20, 0x3b7b020, 0x3b7bd30, 0x3b7bf30<ST4[%6]> [ORD=52]

  0x3b7be30: i64 = Constant<4>

      0x3b75a90: <multiple use>
          0x3b75a90: <multiple use>
              0x3b75a90: <multiple use>
              0x3b771c0: <multiple use>
              0x3b7bf30: <multiple use>
            0x3b76090: i32,ch = load 0x3b75a90, 0x3b771c0, 0x3b7bf30<LD4[%2]> [ORD=53]

            0x3b778c0: i32 = Constant<4> [ORD=54]

          0x3b7b830: i32 = add 0x3b76090, 0x3b778c0 [ORD=54]

          0x3b7bf30: <multiple use>
        0x3b77cc0: i32,ch = load 0x3b75a90, 0x3b7b830, 0x3b7bf30<LD4[%16]> [ORD=55]

        0x3b777c0: i32 = Constant<0> [ORD=56]

        0x3b79d30: ch = seteq [ORD=56]

      0x3b79530: i1 = setcc 0x3b77cc0, 0x3b777c0, 0x3b79d30 [ORD=56]

      0x3b7b420: ch = BasicBlock<startup_starter3.if.then 0x3b95ed0>

    0x3b79030: ch = brcond 0x3b75a90, 0x3b79530, 0x3b7b420

    0x3b774c0: ch = BasicBlock<startup_starter3.if.else 0x3b957f0>

  0x3b779c0: ch = br 0x3b79030, 0x3b774c0



Replacing.1 0x3b776c0: i32,ch = load 0x3b76fc0, 0x3b771c0, 0x3b7bf30<LD4[%2]> [ORD=41]

With: 0x3b79830: i32 = FrameIndex<-1> [ORD=40]
 and 1 other values

Replacing.1 0x3b77ac0: f32,ch = load 0x3b76fc0, 0x3b79830, 0x3b7bf30<LD4[%9](align=16)> [ORD=44]

With: 0x3b77ac0: f32,ch = load 0x3b76fc0, 0x3b79830, 0x3b7bf30<LD4[%9](align=16)> [ORD=44]
 and 1 other values

Replacing.3 0x3b79630: ch = TokenFactor 0x3b76fc0, 0x3b77ac0:1 [ORD=45]

With: 0x3b77ac0: f32,ch = load 0x3b76fc0, 0x3b79830, 0x3b7bf30<LD4[%9](align=16)> [ORD=44]

Optimized lowered selection DAG: BB#0 'startup_starter3:startup_starter3.entry'
SelectionDAG has 32 nodes:
  0x3b79830: i32 = FrameIndex<-1> [ORD=40]

  0x3b7bf30: i32 = undef [ORD=40]

  0x3b771c0: i32 = FrameIndex<1> [ORD=40]

      0x3b57b78: ch = EntryToken [ORD=40]

      0x3b79830: <multiple use>
      0x3b771c0: <multiple use>
      0x3b7bf30: <multiple use>
    0x3b76fc0: ch = store 0x3b57b78, 0x3b79830, 0x3b771c0, 0x3b7bf30<ST4[%2]> [ORD=40]

    0x3b79830: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b77ac0: f32,ch = load 0x3b76fc0, 0x3b79830, 0x3b7bf30<LD4[%9](align=16)> [ORD=44]

    0x3b77ac0: <multiple use>
    0x3b77ac0: <multiple use>
    0x3b79130: i32 = FrameIndex<2> [ORD=45]

    0x3b7bf30: <multiple use>
  0x3b79330: ch = store 0x3b77ac0:1, 0x3b77ac0, 0x3b79130, 0x3b7bf30<ST4[%3]> [ORD=45]

    0x3b79330: <multiple use>
    0x3b771c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b75690: i32,ch = load 0x3b79330, 0x3b771c0, 0x3b7bf30<LD4[%2]> [ORD=46]

    0x3b79330: <multiple use>
      0x3b75690: <multiple use>
      0x3b7bb30: i32 = Constant<8> [ORD=47]

    0x3b7a820: i32 = add 0x3b75690, 0x3b7bb30 [ORD=47]

    0x3b7bf30: <multiple use>
  0x3b7b930: f32,ch = load 0x3b79330, 0x3b7a820, 0x3b7bf30<LD4[%13]> [ORD=49]

          0x3b75690: <multiple use>
          0x3b7b930: <multiple use>
        0x3b7b320: ch = TokenFactor 0x3b75690:1, 0x3b7b930:1 [ORD=50]

        0x3b7b930: <multiple use>
        0x3b75d90: i32 = FrameIndex<3> [ORD=50]

        0x3b7bf30: <multiple use>
      0x3b7b730: ch = store 0x3b7b320, 0x3b7b930, 0x3b75d90, 0x3b7bf30<ST4[%4]> [ORD=50]

      0x3b7bc30: i32 = Constant<350> [ORD=51]

      0x3b79930: i32 = FrameIndex<4> [ORD=51]

      0x3b7bf30: <multiple use>
    0x3b7ac20: ch = store 0x3b7b730, 0x3b7bc30, 0x3b79930, 0x3b7bf30<ST4[%5]> [ORD=51]

    0x3b7b020: i32 = Constant<850> [ORD=52]

    0x3b7bd30: i32 = FrameIndex<5> [ORD=52]

    0x3b7bf30: <multiple use>
  0x3b75a90: ch = store 0x3b7ac20, 0x3b7b020, 0x3b7bd30, 0x3b7bf30<ST4[%6]> [ORD=52]

      0x3b75a90: <multiple use>
          0x3b75a90: <multiple use>
              0x3b75a90: <multiple use>
              0x3b771c0: <multiple use>
              0x3b7bf30: <multiple use>
            0x3b76090: i32,ch = load 0x3b75a90, 0x3b771c0, 0x3b7bf30<LD4[%2]> [ORD=53]

            0x3b778c0: i32 = Constant<4> [ORD=54]

          0x3b7b830: i32 = add 0x3b76090, 0x3b778c0 [ORD=54]

          0x3b7bf30: <multiple use>
        0x3b77cc0: i32,ch = load 0x3b75a90, 0x3b7b830, 0x3b7bf30<LD4[%16]> [ORD=55]

        0x3b777c0: i32 = Constant<0> [ORD=56]

        0x3b79d30: ch = seteq [ORD=56]

      0x3b79530: i1 = setcc 0x3b77cc0, 0x3b777c0, 0x3b79d30 [ORD=56]

      0x3b7b420: ch = BasicBlock<startup_starter3.if.then 0x3b95ed0>

    0x3b79030: ch = brcond 0x3b75a90, 0x3b79530, 0x3b7b420

    0x3b774c0: ch = BasicBlock<startup_starter3.if.else 0x3b957f0>

  0x3b779c0: ch = br 0x3b79030, 0x3b774c0


Legally typed node: 0x3b774c0: ch = BasicBlock<startup_starter3.if.else 0x3b957f0> [ID=0]

Legally typed node: 0x3b7b420: ch = BasicBlock<startup_starter3.if.then 0x3b95ed0> [ID=0]

Legally typed node: 0x3b79d30: ch = seteq [ORD=56] [ID=0]

Legally typed node: 0x3b778c0: i32 = Constant<4> [ORD=54] [ID=0]

Legally typed node: 0x3b7bd30: i32 = FrameIndex<5> [ORD=52] [ID=0]

Legally typed node: 0x3b7b020: i32 = Constant<850> [ORD=52] [ID=0]

Legally typed node: 0x3b79930: i32 = FrameIndex<4> [ORD=51] [ID=0]

Legally typed node: 0x3b7bc30: i32 = Constant<350> [ORD=51] [ID=0]

Legally typed node: 0x3b75d90: i32 = FrameIndex<3> [ORD=50] [ID=0]

Legally typed node: 0x3b7bb30: i32 = Constant<8> [ORD=47] [ID=0]

Legally typed node: 0x3b79130: i32 = FrameIndex<2> [ORD=45] [ID=0]

Legally typed node: 0x3b777c0: i32 = Constant<0> [ORD=56] [ID=0]

Legally typed node: 0x3b771c0: i32 = FrameIndex<1> [ORD=40] [ID=0]

Legally typed node: 0x3b7bf30: i32 = undef [ORD=40] [ID=0]

Legally typed node: 0x3b79830: i32 = FrameIndex<-1> [ORD=40] [ID=0]

Legally typed node: 0x3b57b78: ch = EntryToken [ORD=40] [ID=0]

Legally typed node: 0x3b76fc0: ch = store 0x3b57b78, 0x3b79830, 0x3b771c0, 0x3b7bf30<ST4[%2]> [ORD=40] [ID=0]

Legally typed node: 0x3b77ac0: f32,ch = load 0x3b76fc0, 0x3b79830, 0x3b7bf30<LD4[%9](align=16)> [ORD=44] [ID=0]

Legally typed node: 0x3b79330: ch = store 0x3b77ac0:1, 0x3b77ac0, 0x3b79130, 0x3b7bf30<ST4[%3]> [ORD=45] [ID=0]

Legally typed node: 0x3b75690: i32,ch = load 0x3b79330, 0x3b771c0, 0x3b7bf30<LD4[%2]> [ORD=46] [ID=0]

Legally typed node: 0x3b7a820: i32 = add 0x3b75690, 0x3b7bb30 [ORD=47] [ID=0]

Legally typed node: 0x3b7b930: f32,ch = load 0x3b79330, 0x3b7a820, 0x3b7bf30<LD4[%13]> [ORD=49] [ID=0]

Legally typed node: 0x3b7b320: ch = TokenFactor 0x3b75690:1, 0x3b7b930:1 [ORD=50] [ID=0]

Legally typed node: 0x3b7b730: ch = store 0x3b7b320, 0x3b7b930, 0x3b75d90, 0x3b7bf30<ST4[%4]> [ORD=50] [ID=0]

Legally typed node: 0x3b7ac20: ch = store 0x3b7b730, 0x3b7bc30, 0x3b79930, 0x3b7bf30<ST4[%5]> [ORD=51] [ID=0]

Legally typed node: 0x3b75a90: ch = store 0x3b7ac20, 0x3b7b020, 0x3b7bd30, 0x3b7bf30<ST4[%6]> [ORD=52] [ID=0]

Legally typed node: 0x3b76090: i32,ch = load 0x3b75a90, 0x3b771c0, 0x3b7bf30<LD4[%2]> [ORD=53] [ID=0]

Legally typed node: 0x3b7b830: i32 = add 0x3b76090, 0x3b778c0 [ORD=54] [ID=0]

Legally typed node: 0x3b77cc0: i32,ch = load 0x3b75a90, 0x3b7b830, 0x3b7bf30<LD4[%16]> [ORD=55] [ID=0]

Promote integer result: 0x3b79530: i1 = setcc 0x3b77cc0, 0x3b777c0, 0x3b79d30 [ORD=56] [ID=0]

Promote integer operand: 0x3b79030: ch = brcond 0x3b75a90, 0x3b79530, 0x3b7b420 [ID=0]

Promote integer operand: 0x3b79630: i32 = zero_extend 0x3b79530 [ID=0]

Legally typed node: 0x3b776c0: i32 = Constant<1> [ID=0]

Legally typed node: 0x3b75390: i32 = setcc 0x3b77cc0, 0x3b777c0, 0x3b79d30 [ORD=56] [ID=0]

Legally typed node: 0x3b7b220: i32 = and 0x3b75390, 0x3b776c0 [ID=0]

Legally typed node: 0x3b79030: ch = brcond 0x3b75a90, 0x3b7b220, 0x3b7b420 [ID=0]

Legally typed node: 0x3b779c0: ch = br 0x3b79030, 0x3b774c0 [ID=0]

Legally typed node: 0x7fffa88b7260: ch = handlenode 0x3b779c0 [ID=0]

Type-legalized selection DAG: BB#0 'startup_starter3:startup_starter3.entry'
SelectionDAG has 34 nodes:
  0x3b79830: i32 = FrameIndex<-1> [ORD=40] [ID=-3]

  0x3b7bf30: i32 = undef [ORD=40] [ID=-3]

  0x3b771c0: i32 = FrameIndex<1> [ORD=40] [ID=-3]

      0x3b57b78: ch = EntryToken [ORD=40] [ID=-3]

      0x3b79830: <multiple use>
      0x3b771c0: <multiple use>
      0x3b7bf30: <multiple use>
    0x3b76fc0: ch = store 0x3b57b78, 0x3b79830, 0x3b771c0, 0x3b7bf30<ST4[%2]> [ORD=40] [ID=-3]

    0x3b79830: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b77ac0: f32,ch = load 0x3b76fc0, 0x3b79830, 0x3b7bf30<LD4[%9](align=16)> [ORD=44] [ID=-3]

    0x3b77ac0: <multiple use>
    0x3b77ac0: <multiple use>
    0x3b79130: i32 = FrameIndex<2> [ORD=45] [ID=-3]

    0x3b7bf30: <multiple use>
  0x3b79330: ch = store 0x3b77ac0:1, 0x3b77ac0, 0x3b79130, 0x3b7bf30<ST4[%3]> [ORD=45] [ID=-3]

    0x3b79330: <multiple use>
    0x3b771c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b75690: i32,ch = load 0x3b79330, 0x3b771c0, 0x3b7bf30<LD4[%2]> [ORD=46] [ID=-3]

    0x3b79330: <multiple use>
      0x3b75690: <multiple use>
      0x3b7bb30: i32 = Constant<8> [ORD=47] [ID=-3]

    0x3b7a820: i32 = add 0x3b75690, 0x3b7bb30 [ORD=47] [ID=-3]

    0x3b7bf30: <multiple use>
  0x3b7b930: f32,ch = load 0x3b79330, 0x3b7a820, 0x3b7bf30<LD4[%13]> [ORD=49] [ID=-3]

          0x3b75690: <multiple use>
          0x3b7b930: <multiple use>
        0x3b7b320: ch = TokenFactor 0x3b75690:1, 0x3b7b930:1 [ORD=50] [ID=-3]

        0x3b7b930: <multiple use>
        0x3b75d90: i32 = FrameIndex<3> [ORD=50] [ID=-3]

        0x3b7bf30: <multiple use>
      0x3b7b730: ch = store 0x3b7b320, 0x3b7b930, 0x3b75d90, 0x3b7bf30<ST4[%4]> [ORD=50] [ID=-3]

      0x3b7bc30: i32 = Constant<350> [ORD=51] [ID=-3]

      0x3b79930: i32 = FrameIndex<4> [ORD=51] [ID=-3]

      0x3b7bf30: <multiple use>
    0x3b7ac20: ch = store 0x3b7b730, 0x3b7bc30, 0x3b79930, 0x3b7bf30<ST4[%5]> [ORD=51] [ID=-3]

    0x3b7b020: i32 = Constant<850> [ORD=52] [ID=-3]

    0x3b7bd30: i32 = FrameIndex<5> [ORD=52] [ID=-3]

    0x3b7bf30: <multiple use>
  0x3b75a90: ch = store 0x3b7ac20, 0x3b7b020, 0x3b7bd30, 0x3b7bf30<ST4[%6]> [ORD=52] [ID=-3]

      0x3b75a90: <multiple use>
            0x3b75a90: <multiple use>
                0x3b75a90: <multiple use>
                0x3b771c0: <multiple use>
                0x3b7bf30: <multiple use>
              0x3b76090: i32,ch = load 0x3b75a90, 0x3b771c0, 0x3b7bf30<LD4[%2]> [ORD=53] [ID=-3]

              0x3b778c0: i32 = Constant<4> [ORD=54] [ID=-3]

            0x3b7b830: i32 = add 0x3b76090, 0x3b778c0 [ORD=54] [ID=-3]

            0x3b7bf30: <multiple use>
          0x3b77cc0: i32,ch = load 0x3b75a90, 0x3b7b830, 0x3b7bf30<LD4[%16]> [ORD=55] [ID=-3]

          0x3b777c0: i32 = Constant<0> [ORD=56] [ID=-3]

          0x3b79d30: ch = seteq [ORD=56] [ID=-3]

        0x3b75390: i32 = setcc 0x3b77cc0, 0x3b777c0, 0x3b79d30 [ORD=56] [ID=-3]

        0x3b776c0: i32 = Constant<1> [ID=-3]

      0x3b7b220: i32 = and 0x3b75390, 0x3b776c0 [ID=-3]

      0x3b7b420: ch = BasicBlock<startup_starter3.if.then 0x3b95ed0> [ID=-3]

    0x3b79030: ch = brcond 0x3b75a90, 0x3b7b220, 0x3b7b420 [ID=-3]

    0x3b774c0: ch = BasicBlock<startup_starter3.if.else 0x3b957f0> [ID=-3]

  0x3b779c0: ch = br 0x3b79030, 0x3b774c0 [ID=-3]



Replacing.2 0x3b7b220: i32 = and 0x3b75390, 0x3b776c0 [ID=-3]

With: 0x3b75390: i32 = setcc 0x3b77cc0, 0x3b777c0, 0x3b79d30 [ORD=56] [ID=-3]

Optimized type-legalized selection DAG: BB#0 'startup_starter3:startup_starter3.entry'
SelectionDAG has 32 nodes:
  0x3b79830: i32 = FrameIndex<-1> [ORD=40] [ID=-3]

  0x3b7bf30: i32 = undef [ORD=40] [ID=-3]

  0x3b771c0: i32 = FrameIndex<1> [ORD=40] [ID=-3]

      0x3b57b78: ch = EntryToken [ORD=40] [ID=-3]

      0x3b79830: <multiple use>
      0x3b771c0: <multiple use>
      0x3b7bf30: <multiple use>
    0x3b76fc0: ch = store 0x3b57b78, 0x3b79830, 0x3b771c0, 0x3b7bf30<ST4[%2]> [ORD=40] [ID=-3]

    0x3b79830: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b77ac0: f32,ch = load 0x3b76fc0, 0x3b79830, 0x3b7bf30<LD4[%9](align=16)> [ORD=44] [ID=-3]

    0x3b77ac0: <multiple use>
    0x3b77ac0: <multiple use>
    0x3b79130: i32 = FrameIndex<2> [ORD=45] [ID=-3]

    0x3b7bf30: <multiple use>
  0x3b79330: ch = store 0x3b77ac0:1, 0x3b77ac0, 0x3b79130, 0x3b7bf30<ST4[%3]> [ORD=45] [ID=-3]

    0x3b79330: <multiple use>
    0x3b771c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b75690: i32,ch = load 0x3b79330, 0x3b771c0, 0x3b7bf30<LD4[%2]> [ORD=46] [ID=-3]

    0x3b79330: <multiple use>
      0x3b75690: <multiple use>
      0x3b7bb30: i32 = Constant<8> [ORD=47] [ID=-3]

    0x3b7a820: i32 = add 0x3b75690, 0x3b7bb30 [ORD=47] [ID=-3]

    0x3b7bf30: <multiple use>
  0x3b7b930: f32,ch = load 0x3b79330, 0x3b7a820, 0x3b7bf30<LD4[%13]> [ORD=49] [ID=-3]

          0x3b75690: <multiple use>
          0x3b7b930: <multiple use>
        0x3b7b320: ch = TokenFactor 0x3b75690:1, 0x3b7b930:1 [ORD=50] [ID=-3]

        0x3b7b930: <multiple use>
        0x3b75d90: i32 = FrameIndex<3> [ORD=50] [ID=-3]

        0x3b7bf30: <multiple use>
      0x3b7b730: ch = store 0x3b7b320, 0x3b7b930, 0x3b75d90, 0x3b7bf30<ST4[%4]> [ORD=50] [ID=-3]

      0x3b7bc30: i32 = Constant<350> [ORD=51] [ID=-3]

      0x3b79930: i32 = FrameIndex<4> [ORD=51] [ID=-3]

      0x3b7bf30: <multiple use>
    0x3b7ac20: ch = store 0x3b7b730, 0x3b7bc30, 0x3b79930, 0x3b7bf30<ST4[%5]> [ORD=51] [ID=-3]

    0x3b7b020: i32 = Constant<850> [ORD=52] [ID=-3]

    0x3b7bd30: i32 = FrameIndex<5> [ORD=52] [ID=-3]

    0x3b7bf30: <multiple use>
  0x3b75a90: ch = store 0x3b7ac20, 0x3b7b020, 0x3b7bd30, 0x3b7bf30<ST4[%6]> [ORD=52] [ID=-3]

      0x3b75a90: <multiple use>
          0x3b75a90: <multiple use>
              0x3b75a90: <multiple use>
              0x3b771c0: <multiple use>
              0x3b7bf30: <multiple use>
            0x3b76090: i32,ch = load 0x3b75a90, 0x3b771c0, 0x3b7bf30<LD4[%2]> [ORD=53] [ID=-3]

            0x3b778c0: i32 = Constant<4> [ORD=54] [ID=-3]

          0x3b7b830: i32 = add 0x3b76090, 0x3b778c0 [ORD=54] [ID=-3]

          0x3b7bf30: <multiple use>
        0x3b77cc0: i32,ch = load 0x3b75a90, 0x3b7b830, 0x3b7bf30<LD4[%16]> [ORD=55] [ID=-3]

        0x3b777c0: i32 = Constant<0> [ORD=56] [ID=-3]

        0x3b79d30: ch = seteq [ORD=56] [ID=-3]

      0x3b75390: i32 = setcc 0x3b77cc0, 0x3b777c0, 0x3b79d30 [ORD=56] [ID=-3]

      0x3b7b420: ch = BasicBlock<startup_starter3.if.then 0x3b95ed0> [ID=-3]

    0x3b79030: ch = brcond 0x3b75a90, 0x3b75390, 0x3b7b420 [ID=-3]

    0x3b774c0: ch = BasicBlock<startup_starter3.if.else 0x3b957f0> [ID=-3]

  0x3b779c0: ch = br 0x3b79030, 0x3b774c0 [ID=-3]


Legalized selection DAG: BB#0 'startup_starter3:startup_starter3.entry'
SelectionDAG has 32 nodes:
  0x3b79830: i32 = FrameIndex<-1> [ORD=40] [ID=1]

  0x3b7bf30: i32 = undef [ORD=40] [ID=2]

  0x3b771c0: i32 = FrameIndex<1> [ORD=40] [ID=3]

      0x3b57b78: ch = EntryToken [ORD=40] [ID=0]

      0x3b79830: <multiple use>
      0x3b771c0: <multiple use>
      0x3b7bf30: <multiple use>
    0x3b76fc0: ch = store 0x3b57b78, 0x3b79830, 0x3b771c0, 0x3b7bf30<ST4[%2]> [ORD=40] [ID=16]

    0x3b79830: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b77ac0: f32,ch = load 0x3b76fc0, 0x3b79830, 0x3b7bf30<LD4[%9](align=16)> [ORD=44] [ID=17]

    0x3b77ac0: <multiple use>
    0x3b77ac0: <multiple use>
    0x3b79130: i32 = FrameIndex<2> [ORD=45] [ID=5]

    0x3b7bf30: <multiple use>
  0x3b79330: ch = store 0x3b77ac0:1, 0x3b77ac0, 0x3b79130, 0x3b7bf30<ST4[%3]> [ORD=45] [ID=18]

    0x3b79330: <multiple use>
    0x3b771c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b75690: i32,ch = load 0x3b79330, 0x3b771c0, 0x3b7bf30<LD4[%2]> [ORD=46] [ID=19]

    0x3b79330: <multiple use>
      0x3b75690: <multiple use>
      0x3b7bb30: i32 = Constant<8> [ORD=47] [ID=6]

    0x3b7a820: i32 = add 0x3b75690, 0x3b7bb30 [ORD=47] [ID=20]

    0x3b7bf30: <multiple use>
  0x3b7b930: f32,ch = load 0x3b79330, 0x3b7a820, 0x3b7bf30<LD4[%13]> [ORD=49] [ID=21]

          0x3b75690: <multiple use>
          0x3b7b930: <multiple use>
        0x3b7b320: ch = TokenFactor 0x3b75690:1, 0x3b7b930:1 [ORD=50] [ID=22]

        0x3b7b930: <multiple use>
        0x3b75d90: i32 = FrameIndex<3> [ORD=50] [ID=7]

        0x3b7bf30: <multiple use>
      0x3b7b730: ch = store 0x3b7b320, 0x3b7b930, 0x3b75d90, 0x3b7bf30<ST4[%4]> [ORD=50] [ID=23]

      0x3b7bc30: i32 = Constant<350> [ORD=51] [ID=8]

      0x3b79930: i32 = FrameIndex<4> [ORD=51] [ID=9]

      0x3b7bf30: <multiple use>
    0x3b7ac20: ch = store 0x3b7b730, 0x3b7bc30, 0x3b79930, 0x3b7bf30<ST4[%5]> [ORD=51] [ID=24]

    0x3b7b020: i32 = Constant<850> [ORD=52] [ID=10]

    0x3b7bd30: i32 = FrameIndex<5> [ORD=52] [ID=11]

    0x3b7bf30: <multiple use>
  0x3b75a90: ch = store 0x3b7ac20, 0x3b7b020, 0x3b7bd30, 0x3b7bf30<ST4[%6]> [ORD=52] [ID=25]

      0x3b75a90: <multiple use>
          0x3b75a90: <multiple use>
              0x3b75a90: <multiple use>
              0x3b771c0: <multiple use>
              0x3b7bf30: <multiple use>
            0x3b76090: i32,ch = load 0x3b75a90, 0x3b771c0, 0x3b7bf30<LD4[%2]> [ORD=53] [ID=26]

            0x3b778c0: i32 = Constant<4> [ORD=54] [ID=12]

          0x3b7b830: i32 = add 0x3b76090, 0x3b778c0 [ORD=54] [ID=27]

          0x3b7bf30: <multiple use>
        0x3b77cc0: i32,ch = load 0x3b75a90, 0x3b7b830, 0x3b7bf30<LD4[%16]> [ORD=55] [ID=28]

        0x3b777c0: i32 = Constant<0> [ORD=56] [ID=4]

        0x3b79d30: ch = seteq [ORD=56] [ID=13]

      0x3b75390: i32 = setcc 0x3b77cc0, 0x3b777c0, 0x3b79d30 [ORD=56] [ID=29]

      0x3b7b420: ch = BasicBlock<startup_starter3.if.then 0x3b95ed0> [ID=14]

    0x3b79030: ch = brcond 0x3b75a90, 0x3b75390, 0x3b7b420 [ID=30]

    0x3b774c0: ch = BasicBlock<startup_starter3.if.else 0x3b957f0> [ID=15]

  0x3b779c0: ch = br 0x3b79030, 0x3b774c0 [ID=31]


Optimized legalized selection DAG: BB#0 'startup_starter3:startup_starter3.entry'
SelectionDAG has 32 nodes:
  0x3b79830: i32 = FrameIndex<-1> [ORD=40] [ID=1]

  0x3b7bf30: i32 = undef [ORD=40] [ID=2]

  0x3b771c0: i32 = FrameIndex<1> [ORD=40] [ID=3]

      0x3b57b78: ch = EntryToken [ORD=40] [ID=0]

      0x3b79830: <multiple use>
      0x3b771c0: <multiple use>
      0x3b7bf30: <multiple use>
    0x3b76fc0: ch = store 0x3b57b78, 0x3b79830, 0x3b771c0, 0x3b7bf30<ST4[%2]> [ORD=40] [ID=16]

    0x3b79830: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b77ac0: f32,ch = load 0x3b76fc0, 0x3b79830, 0x3b7bf30<LD4[%9](align=16)> [ORD=44] [ID=17]

    0x3b77ac0: <multiple use>
    0x3b77ac0: <multiple use>
    0x3b79130: i32 = FrameIndex<2> [ORD=45] [ID=5]

    0x3b7bf30: <multiple use>
  0x3b79330: ch = store 0x3b77ac0:1, 0x3b77ac0, 0x3b79130, 0x3b7bf30<ST4[%3]> [ORD=45] [ID=18]

    0x3b79330: <multiple use>
    0x3b771c0: <multiple use>
    0x3b7bf30: <multiple use>
  0x3b75690: i32,ch = load 0x3b79330, 0x3b771c0, 0x3b7bf30<LD4[%2]> [ORD=46] [ID=19]

    0x3b79330: <multiple use>
      0x3b75690: <multiple use>
      0x3b7bb30: i32 = Constant<8> [ORD=47] [ID=6]

    0x3b7a820: i32 = add 0x3b75690, 0x3b7bb30 [ORD=47] [ID=20]

    0x3b7bf30: <multiple use>
  0x3b7b930: f32,ch = load 0x3b79330, 0x3b7a820, 0x3b7bf30<LD4[%13]> [ORD=49] [ID=21]

          0x3b75690: <multiple use>
          0x3b7b930: <multiple use>
        0x3b7b320: ch = TokenFactor 0x3b75690:1, 0x3b7b930:1 [ORD=50] [ID=22]

        0x3b7b930: <multiple use>
        0x3b75d90: i32 = FrameIndex<3> [ORD=50] [ID=7]

        0x3b7bf30: <multiple use>
      0x3b7b730: ch = store 0x3b7b320, 0x3b7b930, 0x3b75d90, 0x3b7bf30<ST4[%4]> [ORD=50] [ID=23]

      0x3b7bc30: i32 = Constant<350> [ORD=51] [ID=8]

      0x3b79930: i32 = FrameIndex<4> [ORD=51] [ID=9]

      0x3b7bf30: <multiple use>
    0x3b7ac20: ch = store 0x3b7b730, 0x3b7bc30, 0x3b79930, 0x3b7bf30<ST4[%5]> [ORD=51] [ID=24]

    0x3b7b020: i32 = Constant<850> [ORD=52] [ID=10]

    0x3b7bd30: i32 = FrameIndex<5> [ORD=52] [ID=11]

    0x3b7bf30: <multiple use>
  0x3b75a90: ch = store 0x3b7ac20, 0x3b7b020, 0x3b7bd30, 0x3b7bf30<ST4[%6]> [ORD=52] [ID=25]

      0x3b75a90: <multiple use>
          0x3b75a90: <multiple use>
              0x3b75a90: <multiple use>
              0x3b771c0: <multiple use>
              0x3b7bf30: <multiple use>
            0x3b76090: i32,ch = load 0x3b75a90, 0x3b771c0, 0x3b7bf30<LD4[%2]> [ORD=53] [ID=26]

            0x3b778c0: i32 = Constant<4> [ORD=54] [ID=12]

          0x3b7b830: i32 = add 0x3b76090, 0x3b778c0 [ORD=54] [ID=27]

          0x3b7bf30: <multiple use>
        0x3b77cc0: i32,ch = load 0x3b75a90, 0x3b7b830, 0x3b7bf30<LD4[%16]> [ORD=55] [ID=28]

        0x3b777c0: i32 = Constant<0> [ORD=56] [ID=4]

        0x3b79d30: ch = seteq [ORD=56] [ID=13]

      0x3b75390: i32 = setcc 0x3b77cc0, 0x3b777c0, 0x3b79d30 [ORD=56] [ID=29]

      0x3b7b420: ch = BasicBlock<startup_starter3.if.then 0x3b95ed0> [ID=14]

    0x3b79030: ch = brcond 0x3b75a90, 0x3b75390, 0x3b7b420 [ID=30]

    0x3b774c0: ch = BasicBlock<startup_starter3.if.else 0x3b957f0> [ID=15]

  0x3b779c0: ch = br 0x3b79030, 0x3b774c0 [ID=31]


===== Instruction selection begins: BB#0 'startup_starter3.entry'
ISEL: Starting pattern match on root node: 0x3b779c0: ch = br 0x3b79030, 0x3b774c0 [ID=31]

  Initial Opcode index to 1938
  Morphed node: 0x3b779c0: ch = JAL 0x3b774c0, 0x3b79030

ISEL: Match complete!
=> 0x3b779c0: ch = JAL 0x3b774c0, 0x3b79030

ISEL: Starting pattern match on root node: 0x3b79030: ch = brcond 0x3b75a90, 0x3b75390, 0x3b7b420 [ID=30]

  Initial Opcode index to 1439
  Morphed node: 0x3b79030: ch = BEQ 0x3b7b420, 0x3b77cc0, 0x3b777c0, 0x3b75a90

ISEL: Match complete!
=> 0x3b79030: ch = BEQ 0x3b7b420, 0x3b77cc0, 0x3b777c0, 0x3b75a90

ISEL: Starting pattern match on root node: 0x3b77cc0: i32,ch = load 0x3b75a90, 0x3b7b830, 0x3b7bf30<LD4[%16]> [ORD=55] [ID=28]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x3b77cc0: i32,ch = LW 0x3b76090, 0x3b79d30, 0x3b75a90<Mem:LD4[%16]> [ORD=55]

ISEL: Match complete!
=> 0x3b77cc0: i32,ch = LW 0x3b76090, 0x3b79d30, 0x3b75a90<Mem:LD4[%16]> [ORD=55]

ISEL: Starting pattern match on root node: 0x3b76090: i32,ch = load 0x3b75a90, 0x3b771c0, 0x3b7bf30<LD4[%2]> [ORD=53] [ID=26]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x3b76090: i32,ch = LW 0x3b771c0, 0x3b778c0, 0x3b75a90<Mem:LD4[%2]> [ORD=53]

ISEL: Match complete!
=> 0x3b76090: i32,ch = LW 0x3b771c0, 0x3b778c0, 0x3b75a90<Mem:LD4[%2]> [ORD=53]

ISEL: Starting pattern match on root node: 0x3b75a90: ch = store 0x3b7ac20, 0x3b7b020, 0x3b7bd30, 0x3b7bf30<ST4[%6]> [ORD=52] [ID=25]

  Initial Opcode index to 178
  Morphed node: 0x3b75a90: ch = SW 0x3b7b020, 0x3b7bd30, 0x3b778c0, 0x3b7ac20<Mem:ST4[%6]> [ORD=52]

ISEL: Match complete!
=> 0x3b75a90: ch = SW 0x3b7b020, 0x3b7bd30, 0x3b778c0, 0x3b7ac20<Mem:ST4[%6]> [ORD=52]

ISEL: Starting pattern match on root node: 0x3b7ac20: ch = store 0x3b7b730, 0x3b7bc30, 0x3b79930, 0x3b7bf30<ST4[%5]> [ORD=51] [ID=24]

  Initial Opcode index to 178
  Morphed node: 0x3b7ac20: ch = SW 0x3b7bc30, 0x3b79930, 0x3b778c0, 0x3b7b730<Mem:ST4[%5]> [ORD=51]

ISEL: Match complete!
=> 0x3b7ac20: ch = SW 0x3b7bc30, 0x3b79930, 0x3b778c0, 0x3b7b730<Mem:ST4[%5]> [ORD=51]

ISEL: Starting pattern match on root node: 0x3b7b730: ch = store 0x3b7b320, 0x3b7b930, 0x3b75d90, 0x3b7bf30<ST4[%4]> [ORD=50] [ID=23]

  Initial Opcode index to 178
  Skipped scope entry (due to false predicate) at index 183, continuing at 243
  Morphed node: 0x3b7b730: ch = FSW 0x3b7b930, 0x3b75d90, 0x3b778c0, 0x3b7b320<Mem:ST4[%4]> [ORD=50]

ISEL: Match complete!
=> 0x3b7b730: ch = FSW 0x3b7b930, 0x3b75d90, 0x3b778c0, 0x3b7b320<Mem:ST4[%4]> [ORD=50]

=> 0x3b7b320: ch = TokenFactor 0x3b75690:1, 0x3b7b930:1 [ORD=50]

ISEL: Starting pattern match on root node: 0x3b7b930: f32,ch = load 0x3b79330, 0x3b7a820, 0x3b7bf30<LD4[%13]> [ORD=49] [ID=21]

  Initial Opcode index to 5
  TypeSwitch[f32] from 10 to 159
  Morphed node: 0x3b7b930: f32,ch = FLW 0x3b75690, 0x3b7b830, 0x3b79330<Mem:LD4[%13]> [ORD=49]

ISEL: Match complete!
=> 0x3b7b930: f32,ch = FLW 0x3b75690, 0x3b7b830, 0x3b79330<Mem:LD4[%13]> [ORD=49]

ISEL: Starting pattern match on root node: 0x3b75690: i32,ch = load 0x3b79330, 0x3b771c0, 0x3b7bf30<LD4[%2]> [ORD=46] [ID=19]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x3b75690: i32,ch = LW 0x3b771c0, 0x3b778c0, 0x3b79330<Mem:LD4[%2]> [ORD=46]

ISEL: Match complete!
=> 0x3b75690: i32,ch = LW 0x3b771c0, 0x3b778c0, 0x3b79330<Mem:LD4[%2]> [ORD=46]

ISEL: Starting pattern match on root node: 0x3b79330: ch = store 0x3b77ac0:1, 0x3b77ac0, 0x3b79130, 0x3b7bf30<ST4[%3]> [ORD=45] [ID=18]

  Initial Opcode index to 178
  Skipped scope entry (due to false predicate) at index 183, continuing at 243
  Morphed node: 0x3b79330: ch = FSW 0x3b77ac0, 0x3b79130, 0x3b778c0, 0x3b77ac0:1<Mem:ST4[%3]> [ORD=45]

ISEL: Match complete!
=> 0x3b79330: ch = FSW 0x3b77ac0, 0x3b79130, 0x3b778c0, 0x3b77ac0:1<Mem:ST4[%3]> [ORD=45]

ISEL: Starting pattern match on root node: 0x3b77ac0: f32,ch = load 0x3b76fc0, 0x3b79830, 0x3b7bf30<LD4[%9](align=16)> [ORD=44] [ID=17]

  Initial Opcode index to 5
  TypeSwitch[f32] from 10 to 159
  Morphed node: 0x3b77ac0: f32,ch = FLW 0x3b79830, 0x3b778c0, 0x3b76fc0<Mem:LD4[%9](align=16)> [ORD=44]

ISEL: Match complete!
=> 0x3b77ac0: f32,ch = FLW 0x3b79830, 0x3b778c0, 0x3b76fc0<Mem:LD4[%9](align=16)> [ORD=44]

ISEL: Starting pattern match on root node: 0x3b76fc0: ch = store 0x3b57b78, 0x3b79830, 0x3b771c0, 0x3b7bf30<ST4[%2]> [ORD=40] [ID=16]

  Initial Opcode index to 178
  Morphed node: 0x3b76fc0: ch = SW 0x3b79830, 0x3b771c0, 0x3b778c0, 0x3b57b78<Mem:ST4[%2]> [ORD=40]

ISEL: Match complete!
=> 0x3b76fc0: ch = SW 0x3b79830, 0x3b771c0, 0x3b778c0, 0x3b57b78<Mem:ST4[%2]> [ORD=40]

=> 0x3b774c0: ch = BasicBlock<startup_starter3.if.else 0x3b957f0>

=> 0x3b7b420: ch = BasicBlock<startup_starter3.if.then 0x3b95ed0>

ISEL: Starting pattern match on root node: 0x3b7b020: i32 = Constant<850> [ORD=52] [ID=10]

  Initial Opcode index to 1226
comparing 0 and 850 and returning value:0
  Skipped scope entry (due to false predicate) at index 1228, continuing at 1236
  Morphed node: 0x3b7b020: i32 = ADDI 0x3b7a820, 0x3b75390 [ORD=52]

ISEL: Match complete!
=> 0x3b7b020: i32 = ADDI 0x3b7a820, 0x3b75390 [ORD=52]

ISEL: Starting pattern match on root node: 0x3b7bc30: i32 = Constant<350> [ORD=51] [ID=8]

  Initial Opcode index to 1226
comparing 0 and 350 and returning value:0
  Skipped scope entry (due to false predicate) at index 1228, continuing at 1236
  Morphed node: 0x3b7bc30: i32 = ADDI 0x3b7a820, 0x3b7b220 [ORD=51]

ISEL: Match complete!
=> 0x3b7bc30: i32 = ADDI 0x3b7a820, 0x3b7b220 [ORD=51]

ISEL: Starting pattern match on root node: 0x3b777c0: i32 = Constant<0> [ORD=56] [ID=4]

  Initial Opcode index to 1226
comparing 0 and 0 and returning value:1
ISEL: Match complete!
=> 0x3b777c0: i32 = Constant<0> [ORD=56] [ID=4]

=> 0x3b57b78: ch = EntryToken [ORD=40]

===== Instruction selection ends:
Selected selection DAG: BB#0 'startup_starter3:startup_starter3.entry'
SelectionDAG has 37 nodes:
    0x3b77dc0: <multiple use>
    0x3b778c0: <multiple use>
      0x3b77dc0: <multiple use>
      0x3b7be30: <multiple use>
      0x3b778c0: <multiple use>
      0x3b57b78: ch = EntryToken [ORD=40]

    0x3b76fc0: ch = SW 0x3b77dc0, 0x3b7be30, 0x3b778c0, 0x3b57b78<Mem:ST4[%2]> [ORD=40]

  0x3b77ac0: f32,ch = FLW 0x3b77dc0, 0x3b778c0, 0x3b76fc0<Mem:LD4[%9](align=16)> [ORD=44]

    0x3b77ac0: <multiple use>
      0x3b7bf30: <multiple use>
      0x3b79630: i32 = TargetFrameIndex<2>

    0x3b79130: i32 = ADDI 0x3b7bf30, 0x3b79630 [ORD=45]

    0x3b778c0: <multiple use>
    0x3b77ac0: <multiple use>
  0x3b79330: ch = FSW 0x3b77ac0, 0x3b79130, 0x3b778c0, 0x3b77ac0:1<Mem:ST4[%3]> [ORD=45]

    0x3b7be30: <multiple use>
    0x3b778c0: <multiple use>
    0x3b79330: <multiple use>
  0x3b75690: i32,ch = LW 0x3b7be30, 0x3b778c0, 0x3b79330<Mem:LD4[%2]> [ORD=46]

    0x3b75690: <multiple use>
    0x3b7b830: i32 = TargetConstant<8>

    0x3b79330: <multiple use>
  0x3b7b930: f32,ch = FLW 0x3b75690, 0x3b7b830, 0x3b79330<Mem:LD4[%13]> [ORD=49]

      0x3b7a820: <multiple use>
      0x3b75390: i32 = TargetConstant<850>

    0x3b7b020: i32 = ADDI 0x3b7a820, 0x3b75390 [ORD=52]

      0x3b7bf30: <multiple use>
      0x3b7bb30: i32 = TargetFrameIndex<5>

    0x3b7bd30: i32 = ADDI 0x3b7bf30, 0x3b7bb30 [ORD=52]

    0x3b778c0: <multiple use>
        0x3b7a820: <multiple use>
        0x3b7b220: i32 = TargetConstant<350>

      0x3b7bc30: i32 = ADDI 0x3b7a820, 0x3b7b220 [ORD=51]

        0x3b7bf30: <multiple use>
        0x3b776c0: i32 = TargetFrameIndex<4>

      0x3b79930: i32 = ADDI 0x3b7bf30, 0x3b776c0 [ORD=51]

      0x3b778c0: <multiple use>
        0x3b7b930: <multiple use>
          0x3b7bf30: <multiple use>
          0x3b79530: i32 = TargetFrameIndex<3>

        0x3b75d90: i32 = ADDI 0x3b7bf30, 0x3b79530 [ORD=50]

        0x3b778c0: <multiple use>
          0x3b75690: <multiple use>
          0x3b7b930: <multiple use>
        0x3b7b320: ch = TokenFactor 0x3b75690:1, 0x3b7b930:1 [ORD=50]

      0x3b7b730: ch = FSW 0x3b7b930, 0x3b75d90, 0x3b778c0, 0x3b7b320<Mem:ST4[%4]> [ORD=50]

    0x3b7ac20: ch = SW 0x3b7bc30, 0x3b79930, 0x3b778c0, 0x3b7b730<Mem:ST4[%5]> [ORD=51]

  0x3b75a90: ch = SW 0x3b7b020, 0x3b7bd30, 0x3b778c0, 0x3b7ac20<Mem:ST4[%6]> [ORD=52]

  0x3b778c0: i32 = TargetConstant<0>

  0x3b7bf30: i32 = Register %t5

  0x3b7a820: i32 = Register %zero

    0x3b7bf30: <multiple use>
    0x3b777c0: i32 = TargetFrameIndex<1>

  0x3b7be30: i32 = ADDI 0x3b7bf30, 0x3b777c0 [ORD=40]

    0x3b7bf30: <multiple use>
    0x3b771c0: i32 = TargetFrameIndex<-1>

  0x3b77dc0: i32 = ADDI 0x3b7bf30, 0x3b771c0 [ORD=40]

    0x3b774c0: ch = BasicBlock<startup_starter3.if.else 0x3b957f0>

      0x3b7b420: ch = BasicBlock<startup_starter3.if.then 0x3b95ed0>

          0x3b7be30: <multiple use>
          0x3b778c0: <multiple use>
          0x3b75a90: <multiple use>
        0x3b76090: i32,ch = LW 0x3b7be30, 0x3b778c0, 0x3b75a90<Mem:LD4[%2]> [ORD=53]

        0x3b79d30: i32 = TargetConstant<4>

        0x3b75a90: <multiple use>
      0x3b77cc0: i32,ch = LW 0x3b76090, 0x3b79d30, 0x3b75a90<Mem:LD4[%16]> [ORD=55]

      0x3b7a820: <multiple use>
      0x3b75a90: <multiple use>
    0x3b79030: ch = BEQ 0x3b7b420, 0x3b77cc0, 0x3b7a820, 0x3b75a90

  0x3b779c0: ch = JAL 0x3b774c0, 0x3b79030


********** List Scheduling BB#0 'startup_starter3.entry' **********
SU(0): 0x3b779c0: ch = JAL 0x3b774c0, 0x3b79030 [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x3b79030: ch = BEQ 0x3b7b420, 0x3b77cc0, 0x3b7a820, 0x3b75a90 [ID=1]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 1
  Predecessors:
   val SU(19): Latency=1
   ch  SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x3b75a90: ch = SW 0x3b7b020, 0x3b7bd30, 0x3b778c0, 0x3b7ac20<Mem:ST4[%6]> [ORD=52] [ID=2]

  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 4
  Predecessors:
   val SU(18): Latency=1
   val SU(17): Latency=1
   ch  SU(3): Latency=1
  Successors:
   ch  SU(1): Latency=1
   ch  SU(19): Latency=1
   ch  SU(20): Latency=1

SU(3): 0x3b7ac20: ch = SW 0x3b7bc30, 0x3b79930, 0x3b778c0, 0x3b7b730<Mem:ST4[%5]> [ORD=51] [ID=3]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 5
  Predecessors:
   val SU(16): Latency=1
   val SU(15): Latency=1
   ch  SU(4): Latency=1
  Successors:
   ch  SU(2): Latency=1

SU(4): 0x3b7b730: ch = FSW 0x3b7b930, 0x3b75d90, 0x3b778c0, 0x3b7b320<Mem:ST4[%4]> [ORD=50] [ID=4]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 6
  Predecessors:
   val SU(14): Latency=1
   val SU(13): Latency=1
   ch  SU(5): Latency=0
  Successors:
   ch  SU(3): Latency=1

SU(5): 0x3b7b320: ch = TokenFactor 0x3b75690:1, 0x3b7b930:1 [ORD=50] [ID=5]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 6
  Predecessors:
   ch  SU(6): Latency=1
   ch  SU(14): Latency=1
  Successors:
   ch  SU(4): Latency=0

SU(6): 0x3b75690: i32,ch = LW 0x3b7be30, 0x3b778c0, 0x3b79330<Mem:LD4[%2]> [ORD=46] [ID=6]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 4
  Height             : 8
  Predecessors:
   val SU(12): Latency=1
   ch  SU(7): Latency=1
  Successors:
   ch  SU(5): Latency=1
   val SU(14): Latency=1

SU(7): 0x3b79330: ch = FSW 0x3b77ac0, 0x3b79130, 0x3b778c0, 0x3b77ac0:1<Mem:ST4[%3]> [ORD=45] [ID=7]

  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 9
  Predecessors:
   val SU(9): Latency=1
   val SU(8): Latency=1
   ch  SU(9): Latency=1
  Successors:
   ch  SU(6): Latency=1
   ch  SU(14): Latency=1

SU(8): 0x3b79130: i32 = ADDI 0x3b7bf30, 0x3b79630 [ORD=45] [ID=8]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 10
  Successors:
   val SU(7): Latency=1

SU(9): 0x3b77ac0: f32,ch = FLW 0x3b77dc0, 0x3b778c0, 0x3b76fc0<Mem:LD4[%9](align=16)> [ORD=44] [ID=9]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 10
  Predecessors:
   val SU(11): Latency=1
   ch  SU(10): Latency=1
  Successors:
   val SU(7): Latency=1
   ch  SU(7): Latency=1

SU(10): 0x3b76fc0: ch = SW 0x3b77dc0, 0x3b7be30, 0x3b778c0, 0x3b57b78<Mem:ST4[%2]> [ORD=40] [ID=10]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 11
  Predecessors:
   val SU(11): Latency=1
   val SU(12): Latency=1
  Successors:
   ch  SU(9): Latency=1

SU(11): 0x3b77dc0: i32 = ADDI 0x3b7bf30, 0x3b771c0 [ORD=40] [ID=11]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 12
  Successors:
   val SU(9): Latency=1
   val SU(10): Latency=1

SU(12): 0x3b7be30: i32 = ADDI 0x3b7bf30, 0x3b777c0 [ORD=40] [ID=12]

  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 12
  Successors:
   val SU(6): Latency=1
   val SU(10): Latency=1
   val SU(20): Latency=1

SU(13): 0x3b75d90: i32 = ADDI 0x3b7bf30, 0x3b79530 [ORD=50] [ID=13]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
   val SU(4): Latency=1

SU(14): 0x3b7b930: f32,ch = FLW 0x3b75690, 0x3b7b830, 0x3b79330<Mem:LD4[%13]> [ORD=49] [ID=14]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 5
  Height             : 7
  Predecessors:
   val SU(6): Latency=1
   ch  SU(7): Latency=1
  Successors:
   val SU(4): Latency=1
   ch  SU(5): Latency=1

SU(15): 0x3b79930: i32 = ADDI 0x3b7bf30, 0x3b776c0 [ORD=51] [ID=15]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
   val SU(3): Latency=1

SU(16): 0x3b7bc30: i32 = ADDI 0x3b7a820, 0x3b7b220 [ORD=51] [ID=16]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
   val SU(3): Latency=1

SU(17): 0x3b7bd30: i32 = ADDI 0x3b7bf30, 0x3b7bb30 [ORD=52] [ID=17]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
   val SU(2): Latency=1

SU(18): 0x3b7b020: i32 = ADDI 0x3b7a820, 0x3b75390 [ORD=52] [ID=18]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
   val SU(2): Latency=1

SU(19): 0x3b77cc0: i32,ch = LW 0x3b76090, 0x3b79d30, 0x3b75a90<Mem:LD4[%16]> [ORD=55] [ID=19]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 10
  Height             : 2
  Predecessors:
   val SU(20): Latency=1
   ch  SU(2): Latency=1
  Successors:
   val SU(1): Latency=1

SU(20): 0x3b76090: i32,ch = LW 0x3b7be30, 0x3b778c0, 0x3b75a90<Mem:LD4[%2]> [ORD=53] [ID=20]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 9
  Height             : 3
  Predecessors:
   val SU(12): Latency=1
   ch  SU(2): Latency=1
  Successors:
   val SU(19): Latency=1


Examining Available:
Height 0: SU(0): 0x3b779c0: ch = JAL 0x3b774c0, 0x3b79030 [ID=0]


*** Scheduling [0]: SU(0): 0x3b779c0: ch = JAL 0x3b774c0, 0x3b79030 [ID=0]


Examining Available:
Height 1: SU(1): 0x3b79030: ch = BEQ 0x3b7b420, 0x3b77cc0, 0x3b7a820, 0x3b75a90 [ID=1]


*** Scheduling [1]: SU(1): 0x3b79030: ch = BEQ 0x3b7b420, 0x3b77cc0, 0x3b7a820, 0x3b75a90 [ID=1]


Examining Available:
Height 2: SU(19): 0x3b77cc0: i32,ch = LW 0x3b76090, 0x3b79d30, 0x3b75a90<Mem:LD4[%16]> [ORD=55] [ID=19]


*** Scheduling [2]: SU(19): 0x3b77cc0: i32,ch = LW 0x3b76090, 0x3b79d30, 0x3b75a90<Mem:LD4[%16]> [ORD=55] [ID=19]


Examining Available:
Height 3: SU(20): 0x3b76090: i32,ch = LW 0x3b7be30, 0x3b778c0, 0x3b75a90<Mem:LD4[%2]> [ORD=53] [ID=20]


*** Scheduling [3]: SU(20): 0x3b76090: i32,ch = LW 0x3b7be30, 0x3b778c0, 0x3b75a90<Mem:LD4[%2]> [ORD=53] [ID=20]


Examining Available:
Height 4: SU(2): 0x3b75a90: ch = SW 0x3b7b020, 0x3b7bd30, 0x3b778c0, 0x3b7ac20<Mem:ST4[%6]> [ORD=52] [ID=2]


*** Scheduling [4]: SU(2): 0x3b75a90: ch = SW 0x3b7b020, 0x3b7bd30, 0x3b778c0, 0x3b7ac20<Mem:ST4[%6]> [ORD=52] [ID=2]


Examining Available:
Height 5: SU(18): 0x3b7b020: i32 = ADDI 0x3b7a820, 0x3b75390 [ORD=52] [ID=18]

Height 5: SU(17): 0x3b7bd30: i32 = ADDI 0x3b7bf30, 0x3b7bb30 [ORD=52] [ID=17]

Height 5: SU(3): 0x3b7ac20: ch = SW 0x3b7bc30, 0x3b79930, 0x3b778c0, 0x3b7b730<Mem:ST4[%5]> [ORD=51] [ID=3]


*** Scheduling [5]: SU(18): 0x3b7b020: i32 = ADDI 0x3b7a820, 0x3b75390 [ORD=52] [ID=18]


Examining Available:
Height 5: SU(17): 0x3b7bd30: i32 = ADDI 0x3b7bf30, 0x3b7bb30 [ORD=52] [ID=17]

Height 5: SU(3): 0x3b7ac20: ch = SW 0x3b7bc30, 0x3b79930, 0x3b778c0, 0x3b7b730<Mem:ST4[%5]> [ORD=51] [ID=3]


*** Scheduling [6]: SU(17): 0x3b7bd30: i32 = ADDI 0x3b7bf30, 0x3b7bb30 [ORD=52] [ID=17]


Examining Available:
Height 5: SU(3): 0x3b7ac20: ch = SW 0x3b7bc30, 0x3b79930, 0x3b778c0, 0x3b7b730<Mem:ST4[%5]> [ORD=51] [ID=3]


*** Scheduling [7]: SU(3): 0x3b7ac20: ch = SW 0x3b7bc30, 0x3b79930, 0x3b778c0, 0x3b7b730<Mem:ST4[%5]> [ORD=51] [ID=3]


Examining Available:
Height 8: SU(16): 0x3b7bc30: i32 = ADDI 0x3b7a820, 0x3b7b220 [ORD=51] [ID=16]

Height 8: SU(15): 0x3b79930: i32 = ADDI 0x3b7bf30, 0x3b776c0 [ORD=51] [ID=15]

Height 8: SU(4): 0x3b7b730: ch = FSW 0x3b7b930, 0x3b75d90, 0x3b778c0, 0x3b7b320<Mem:ST4[%4]> [ORD=50] [ID=4]


*** Scheduling [8]: SU(16): 0x3b7bc30: i32 = ADDI 0x3b7a820, 0x3b7b220 [ORD=51] [ID=16]


Examining Available:
Height 8: SU(15): 0x3b79930: i32 = ADDI 0x3b7bf30, 0x3b776c0 [ORD=51] [ID=15]

Height 8: SU(4): 0x3b7b730: ch = FSW 0x3b7b930, 0x3b75d90, 0x3b778c0, 0x3b7b320<Mem:ST4[%4]> [ORD=50] [ID=4]


*** Scheduling [9]: SU(15): 0x3b79930: i32 = ADDI 0x3b7bf30, 0x3b776c0 [ORD=51] [ID=15]


Examining Available:
Height 8: SU(4): 0x3b7b730: ch = FSW 0x3b7b930, 0x3b75d90, 0x3b778c0, 0x3b7b320<Mem:ST4[%4]> [ORD=50] [ID=4]


*** Scheduling [10]: SU(4): 0x3b7b730: ch = FSW 0x3b7b930, 0x3b75d90, 0x3b778c0, 0x3b7b320<Mem:ST4[%4]> [ORD=50] [ID=4]


Examining Available:
Height 10: SU(5): 0x3b7b320: ch = TokenFactor 0x3b75690:1, 0x3b7b930:1 [ORD=50] [ID=5]

Height 11: SU(13): 0x3b75d90: i32 = ADDI 0x3b7bf30, 0x3b79530 [ORD=50] [ID=13]


*** Scheduling [11]: SU(5): 0x3b7b320: ch = TokenFactor 0x3b75690:1, 0x3b7b930:1 [ORD=50] [ID=5]


Examining Available:
Height 11: SU(13): 0x3b75d90: i32 = ADDI 0x3b7bf30, 0x3b79530 [ORD=50] [ID=13]

Height 12: SU(14): 0x3b7b930: f32,ch = FLW 0x3b75690, 0x3b7b830, 0x3b79330<Mem:LD4[%13]> [ORD=49] [ID=14]


*** Scheduling [12]: SU(13): 0x3b75d90: i32 = ADDI 0x3b7bf30, 0x3b79530 [ORD=50] [ID=13]


Examining Available:
Height 12: SU(14): 0x3b7b930: f32,ch = FLW 0x3b75690, 0x3b7b830, 0x3b79330<Mem:LD4[%13]> [ORD=49] [ID=14]


*** Scheduling [13]: SU(14): 0x3b7b930: f32,ch = FLW 0x3b75690, 0x3b7b830, 0x3b79330<Mem:LD4[%13]> [ORD=49] [ID=14]


Examining Available:
Height 14: SU(6): 0x3b75690: i32,ch = LW 0x3b7be30, 0x3b778c0, 0x3b79330<Mem:LD4[%2]> [ORD=46] [ID=6]


*** Scheduling [14]: SU(6): 0x3b75690: i32,ch = LW 0x3b7be30, 0x3b778c0, 0x3b79330<Mem:LD4[%2]> [ORD=46] [ID=6]


Examining Available:
Height 15: SU(7): 0x3b79330: ch = FSW 0x3b77ac0, 0x3b79130, 0x3b778c0, 0x3b77ac0:1<Mem:ST4[%3]> [ORD=45] [ID=7]


*** Scheduling [15]: SU(7): 0x3b79330: ch = FSW 0x3b77ac0, 0x3b79130, 0x3b778c0, 0x3b77ac0:1<Mem:ST4[%3]> [ORD=45] [ID=7]


Examining Available:
Height 16: SU(8): 0x3b79130: i32 = ADDI 0x3b7bf30, 0x3b79630 [ORD=45] [ID=8]

Height 16: SU(9): 0x3b77ac0: f32,ch = FLW 0x3b77dc0, 0x3b778c0, 0x3b76fc0<Mem:LD4[%9](align=16)> [ORD=44] [ID=9]


*** Scheduling [16]: SU(8): 0x3b79130: i32 = ADDI 0x3b7bf30, 0x3b79630 [ORD=45] [ID=8]


Examining Available:
Height 16: SU(9): 0x3b77ac0: f32,ch = FLW 0x3b77dc0, 0x3b778c0, 0x3b76fc0<Mem:LD4[%9](align=16)> [ORD=44] [ID=9]


*** Scheduling [17]: SU(9): 0x3b77ac0: f32,ch = FLW 0x3b77dc0, 0x3b778c0, 0x3b76fc0<Mem:LD4[%9](align=16)> [ORD=44] [ID=9]


Examining Available:
Height 18: SU(10): 0x3b76fc0: ch = SW 0x3b77dc0, 0x3b7be30, 0x3b778c0, 0x3b57b78<Mem:ST4[%2]> [ORD=40] [ID=10]


*** Scheduling [18]: SU(10): 0x3b76fc0: ch = SW 0x3b77dc0, 0x3b7be30, 0x3b778c0, 0x3b57b78<Mem:ST4[%2]> [ORD=40] [ID=10]


Examining Available:
Height 19: SU(11): 0x3b77dc0: i32 = ADDI 0x3b7bf30, 0x3b771c0 [ORD=40] [ID=11]

Height 19: SU(12): 0x3b7be30: i32 = ADDI 0x3b7bf30, 0x3b777c0 [ORD=40] [ID=12]


*** Scheduling [19]: SU(11): 0x3b77dc0: i32 = ADDI 0x3b7bf30, 0x3b771c0 [ORD=40] [ID=11]


Examining Available:
Height 19: SU(12): 0x3b7be30: i32 = ADDI 0x3b7bf30, 0x3b777c0 [ORD=40] [ID=12]


*** Scheduling [20]: SU(12): 0x3b7be30: i32 = ADDI 0x3b7bf30, 0x3b777c0 [ORD=40] [ID=12]

*** Final schedule ***
SU(12): 0x3b7be30: i32 = ADDI 0x3b7bf30, 0x3b777c0 [ORD=40] [ID=12]

SU(11): 0x3b77dc0: i32 = ADDI 0x3b7bf30, 0x3b771c0 [ORD=40] [ID=11]

SU(10): 0x3b76fc0: ch = SW 0x3b77dc0, 0x3b7be30, 0x3b778c0, 0x3b57b78<Mem:ST4[%2]> [ORD=40] [ID=10]

SU(9): 0x3b77ac0: f32,ch = FLW 0x3b77dc0, 0x3b778c0, 0x3b76fc0<Mem:LD4[%9](align=16)> [ORD=44] [ID=9]

SU(8): 0x3b79130: i32 = ADDI 0x3b7bf30, 0x3b79630 [ORD=45] [ID=8]

SU(7): 0x3b79330: ch = FSW 0x3b77ac0, 0x3b79130, 0x3b778c0, 0x3b77ac0:1<Mem:ST4[%3]> [ORD=45] [ID=7]

SU(6): 0x3b75690: i32,ch = LW 0x3b7be30, 0x3b778c0, 0x3b79330<Mem:LD4[%2]> [ORD=46] [ID=6]

SU(14): 0x3b7b930: f32,ch = FLW 0x3b75690, 0x3b7b830, 0x3b79330<Mem:LD4[%13]> [ORD=49] [ID=14]

SU(13): 0x3b75d90: i32 = ADDI 0x3b7bf30, 0x3b79530 [ORD=50] [ID=13]

SU(5): 0x3b7b320: ch = TokenFactor 0x3b75690:1, 0x3b7b930:1 [ORD=50] [ID=5]

SU(4): 0x3b7b730: ch = FSW 0x3b7b930, 0x3b75d90, 0x3b778c0, 0x3b7b320<Mem:ST4[%4]> [ORD=50] [ID=4]

SU(15): 0x3b79930: i32 = ADDI 0x3b7bf30, 0x3b776c0 [ORD=51] [ID=15]

SU(16): 0x3b7bc30: i32 = ADDI 0x3b7a820, 0x3b7b220 [ORD=51] [ID=16]

SU(3): 0x3b7ac20: ch = SW 0x3b7bc30, 0x3b79930, 0x3b778c0, 0x3b7b730<Mem:ST4[%5]> [ORD=51] [ID=3]

SU(17): 0x3b7bd30: i32 = ADDI 0x3b7bf30, 0x3b7bb30 [ORD=52] [ID=17]

SU(18): 0x3b7b020: i32 = ADDI 0x3b7a820, 0x3b75390 [ORD=52] [ID=18]

SU(2): 0x3b75a90: ch = SW 0x3b7b020, 0x3b7bd30, 0x3b778c0, 0x3b7ac20<Mem:ST4[%6]> [ORD=52] [ID=2]

SU(20): 0x3b76090: i32,ch = LW 0x3b7be30, 0x3b778c0, 0x3b75a90<Mem:LD4[%2]> [ORD=53] [ID=20]

SU(19): 0x3b77cc0: i32,ch = LW 0x3b76090, 0x3b79d30, 0x3b75a90<Mem:LD4[%16]> [ORD=55] [ID=19]

SU(1): 0x3b79030: ch = BEQ 0x3b7b420, 0x3b77cc0, 0x3b7a820, 0x3b75a90 [ID=1]

SU(0): 0x3b779c0: ch = JAL 0x3b774c0, 0x3b79030 [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %19 = load i32** %2, align 4
I was here to add   %2 = alloca i32*, align 4
with I type i32*and sd value :0x3b77dc0: i32 = FrameIndex<1>
new load?0x3b777c0: i32,ch = load 0x3b57b78, 0x3b77dc0, 0x3b7be30<LD4[%2]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x3b771c0: i32 = Constant<0>

    0x3b57b78: ch = EntryToken

    0x3b77dc0: i32 = FrameIndex<1>

    0x3b7be30: i32 = undef

  0x3b777c0: i32,ch = load 0x3b57b78, 0x3b77dc0, 0x3b7be30<LD4[%2]>

  0x3b57b78: ch = EntryToken


visiting load instruction   %21 = load i32* %20, align 4
with I type i32and sd value :0x3b7b220: i32 = add 0x3b777c0, 0x3b79530
new load?0x3b776c0: i32,ch = load 0x3b57b78, 0x3b7b220, 0x3b7be30<LD4[%20]>
dag after load is dealt with?SelectionDAG has 9 nodes:
  0x3b771c0: i32 = Constant<0>

  0x3b7be30: i32 = undef [ORD=57]

  0x3b79630: i64 = Constant<4>

    0x3b57b78: <multiple use>
        0x3b57b78: <multiple use>
        0x3b77dc0: i32 = FrameIndex<1> [ORD=57]

        0x3b7be30: <multiple use>
      0x3b777c0: i32,ch = load 0x3b57b78, 0x3b77dc0, 0x3b7be30<LD4[%2]> [ORD=57]

      0x3b79530: i32 = Constant<4> [ORD=58]

    0x3b7b220: i32 = add 0x3b777c0, 0x3b79530 [ORD=58]

    0x3b7be30: <multiple use>
  0x3b776c0: i32,ch = load 0x3b57b78, 0x3b7b220, 0x3b7be30<LD4[%20]>

  0x3b57b78: ch = EntryToken [ORD=57]


visiting load instruction   %22 = load i32* %5, align 4
I was here to add   %5 = alloca i32, align 4
with I type i32and sd value :0x3b75390: i32 = FrameIndex<4>
new load?0x3b7a820: i32,ch = load 0x3b57b78, 0x3b75390, 0x3b7be30<LD4[%5]>
dag after load is dealt with?SelectionDAG has 11 nodes:
  0x3b771c0: i32 = Constant<0>

  0x3b7be30: i32 = undef [ORD=57]

  0x3b79630: i64 = Constant<4>

    0x3b57b78: <multiple use>
        0x3b57b78: <multiple use>
        0x3b77dc0: i32 = FrameIndex<1> [ORD=57]

        0x3b7be30: <multiple use>
      0x3b777c0: i32,ch = load 0x3b57b78, 0x3b77dc0, 0x3b7be30<LD4[%2]> [ORD=57]

      0x3b79530: i32 = Constant<4> [ORD=58]

    0x3b7b220: i32 = add 0x3b777c0, 0x3b79530 [ORD=58]

    0x3b7be30: <multiple use>
  0x3b776c0: i32,ch = load 0x3b57b78, 0x3b7b220, 0x3b7be30<LD4[%20]> [ORD=59]

    0x3b57b78: <multiple use>
    0x3b75390: i32 = FrameIndex<4>

    0x3b7be30: <multiple use>
  0x3b7a820: i32,ch = load 0x3b57b78, 0x3b75390, 0x3b7be30<LD4[%5]>

  0x3b57b78: ch = EntryToken [ORD=57]


Initial selection DAG: BB#1 'startup_starter3:startup_starter3.if.else'
SelectionDAG has 17 nodes:
  0x3b57b78: ch = EntryToken [ORD=57]

  0x3b771c0: i32 = Constant<0>

  0x3b7be30: i32 = undef [ORD=57]

  0x3b79630: i64 = Constant<4>

      0x3b57b78: <multiple use>
          0x3b57b78: <multiple use>
              0x3b57b78: <multiple use>
              0x3b77dc0: i32 = FrameIndex<1> [ORD=57]

              0x3b7be30: <multiple use>
            0x3b777c0: i32,ch = load 0x3b57b78, 0x3b77dc0, 0x3b7be30<LD4[%2]> [ORD=57]

            0x3b79530: i32 = Constant<4> [ORD=58]

          0x3b7b220: i32 = add 0x3b777c0, 0x3b79530 [ORD=58]

          0x3b7be30: <multiple use>
        0x3b776c0: i32,ch = load 0x3b57b78, 0x3b7b220, 0x3b7be30<LD4[%20]> [ORD=59]

          0x3b57b78: <multiple use>
          0x3b75390: i32 = FrameIndex<4> [ORD=60]

          0x3b7be30: <multiple use>
        0x3b7a820: i32,ch = load 0x3b57b78, 0x3b75390, 0x3b7be30<LD4[%5]> [ORD=60]

        0x3b7bb30: ch = setlt [ORD=61]

      0x3b7bf30: i1 = setcc 0x3b776c0, 0x3b7a820, 0x3b7bb30 [ORD=61]

      0x3b7b830: ch = BasicBlock<startup_starter3.return 0x3b95f80>

    0x3b778c0: ch = brcond 0x3b57b78, 0x3b7bf30, 0x3b7b830

    0x3b79d30: ch = BasicBlock<startup_starter3.if.else6 0x3b958a0>

  0x3b779c0: ch = br 0x3b778c0, 0x3b79d30


Optimized lowered selection DAG: BB#1 'startup_starter3:startup_starter3.if.else'
SelectionDAG has 15 nodes:
  0x3b57b78: ch = EntryToken [ORD=57]

  0x3b7be30: i32 = undef [ORD=57]

      0x3b57b78: <multiple use>
          0x3b57b78: <multiple use>
              0x3b57b78: <multiple use>
              0x3b77dc0: i32 = FrameIndex<1> [ORD=57]

              0x3b7be30: <multiple use>
            0x3b777c0: i32,ch = load 0x3b57b78, 0x3b77dc0, 0x3b7be30<LD4[%2]> [ORD=57]

            0x3b79530: i32 = Constant<4> [ORD=58]

          0x3b7b220: i32 = add 0x3b777c0, 0x3b79530 [ORD=58]

          0x3b7be30: <multiple use>
        0x3b776c0: i32,ch = load 0x3b57b78, 0x3b7b220, 0x3b7be30<LD4[%20]> [ORD=59]

          0x3b57b78: <multiple use>
          0x3b75390: i32 = FrameIndex<4> [ORD=60]

          0x3b7be30: <multiple use>
        0x3b7a820: i32,ch = load 0x3b57b78, 0x3b75390, 0x3b7be30<LD4[%5]> [ORD=60]

        0x3b7bb30: ch = setlt [ORD=61]

      0x3b7bf30: i1 = setcc 0x3b776c0, 0x3b7a820, 0x3b7bb30 [ORD=61]

      0x3b7b830: ch = BasicBlock<startup_starter3.return 0x3b95f80>

    0x3b778c0: ch = brcond 0x3b57b78, 0x3b7bf30, 0x3b7b830

    0x3b79d30: ch = BasicBlock<startup_starter3.if.else6 0x3b958a0>

  0x3b779c0: ch = br 0x3b778c0, 0x3b79d30


Legally typed node: 0x3b79d30: ch = BasicBlock<startup_starter3.if.else6 0x3b958a0> [ID=0]

Legally typed node: 0x3b7b830: ch = BasicBlock<startup_starter3.return 0x3b95f80> [ID=0]

Legally typed node: 0x3b7bb30: ch = setlt [ORD=61] [ID=0]

Legally typed node: 0x3b75390: i32 = FrameIndex<4> [ORD=60] [ID=0]

Legally typed node: 0x3b79530: i32 = Constant<4> [ORD=58] [ID=0]

Legally typed node: 0x3b7be30: i32 = undef [ORD=57] [ID=0]

Legally typed node: 0x3b77dc0: i32 = FrameIndex<1> [ORD=57] [ID=0]

Legally typed node: 0x3b57b78: ch = EntryToken [ORD=57] [ID=0]

Legally typed node: 0x3b777c0: i32,ch = load 0x3b57b78, 0x3b77dc0, 0x3b7be30<LD4[%2]> [ORD=57] [ID=0]

Legally typed node: 0x3b7b220: i32 = add 0x3b777c0, 0x3b79530 [ORD=58] [ID=0]

Legally typed node: 0x3b776c0: i32,ch = load 0x3b57b78, 0x3b7b220, 0x3b7be30<LD4[%20]> [ORD=59] [ID=0]

Legally typed node: 0x3b7a820: i32,ch = load 0x3b57b78, 0x3b75390, 0x3b7be30<LD4[%5]> [ORD=60] [ID=0]

Promote integer result: 0x3b7bf30: i1 = setcc 0x3b776c0, 0x3b7a820, 0x3b7bb30 [ORD=61] [ID=0]

Promote integer operand: 0x3b778c0: ch = brcond 0x3b57b78, 0x3b7bf30, 0x3b7b830 [ID=0]

Promote integer operand: 0x3b79630: i32 = zero_extend 0x3b7bf30 [ID=0]

Legally typed node: 0x3b79030: i32 = Constant<1> [ID=0]

Legally typed node: 0x3b771c0: i32 = setcc 0x3b776c0, 0x3b7a820, 0x3b7bb30 [ORD=61] [ID=0]

Legally typed node: 0x3b77cc0: i32 = and 0x3b771c0, 0x3b79030 [ID=0]

Legally typed node: 0x3b778c0: ch = brcond 0x3b57b78, 0x3b77cc0, 0x3b7b830 [ID=0]

Legally typed node: 0x3b779c0: ch = br 0x3b778c0, 0x3b79d30 [ID=0]

Legally typed node: 0x7fffa88b7260: ch = handlenode 0x3b779c0 [ID=0]

Type-legalized selection DAG: BB#1 'startup_starter3:startup_starter3.if.else'
SelectionDAG has 17 nodes:
  0x3b57b78: ch = EntryToken [ORD=57] [ID=-3]

  0x3b7be30: i32 = undef [ORD=57] [ID=-3]

      0x3b57b78: <multiple use>
            0x3b57b78: <multiple use>
                0x3b57b78: <multiple use>
                0x3b77dc0: i32 = FrameIndex<1> [ORD=57] [ID=-3]

                0x3b7be30: <multiple use>
              0x3b777c0: i32,ch = load 0x3b57b78, 0x3b77dc0, 0x3b7be30<LD4[%2]> [ORD=57] [ID=-3]

              0x3b79530: i32 = Constant<4> [ORD=58] [ID=-3]

            0x3b7b220: i32 = add 0x3b777c0, 0x3b79530 [ORD=58] [ID=-3]

            0x3b7be30: <multiple use>
          0x3b776c0: i32,ch = load 0x3b57b78, 0x3b7b220, 0x3b7be30<LD4[%20]> [ORD=59] [ID=-3]

            0x3b57b78: <multiple use>
            0x3b75390: i32 = FrameIndex<4> [ORD=60] [ID=-3]

            0x3b7be30: <multiple use>
          0x3b7a820: i32,ch = load 0x3b57b78, 0x3b75390, 0x3b7be30<LD4[%5]> [ORD=60] [ID=-3]

          0x3b7bb30: ch = setlt [ORD=61] [ID=-3]

        0x3b771c0: i32 = setcc 0x3b776c0, 0x3b7a820, 0x3b7bb30 [ORD=61] [ID=-3]

        0x3b79030: i32 = Constant<1> [ID=-3]

      0x3b77cc0: i32 = and 0x3b771c0, 0x3b79030 [ID=-3]

      0x3b7b830: ch = BasicBlock<startup_starter3.return 0x3b95f80> [ID=-3]

    0x3b778c0: ch = brcond 0x3b57b78, 0x3b77cc0, 0x3b7b830 [ID=-3]

    0x3b79d30: ch = BasicBlock<startup_starter3.if.else6 0x3b958a0> [ID=-3]

  0x3b779c0: ch = br 0x3b778c0, 0x3b79d30 [ID=-3]



Replacing.2 0x3b77cc0: i32 = and 0x3b771c0, 0x3b79030 [ID=-3]

With: 0x3b771c0: i32 = setcc 0x3b776c0, 0x3b7a820, 0x3b7bb30 [ORD=61] [ID=-3]

Optimized type-legalized selection DAG: BB#1 'startup_starter3:startup_starter3.if.else'
SelectionDAG has 15 nodes:
  0x3b57b78: ch = EntryToken [ORD=57] [ID=-3]

  0x3b7be30: i32 = undef [ORD=57] [ID=-3]

      0x3b57b78: <multiple use>
          0x3b57b78: <multiple use>
              0x3b57b78: <multiple use>
              0x3b77dc0: i32 = FrameIndex<1> [ORD=57] [ID=-3]

              0x3b7be30: <multiple use>
            0x3b777c0: i32,ch = load 0x3b57b78, 0x3b77dc0, 0x3b7be30<LD4[%2]> [ORD=57] [ID=-3]

            0x3b79530: i32 = Constant<4> [ORD=58] [ID=-3]

          0x3b7b220: i32 = add 0x3b777c0, 0x3b79530 [ORD=58] [ID=-3]

          0x3b7be30: <multiple use>
        0x3b776c0: i32,ch = load 0x3b57b78, 0x3b7b220, 0x3b7be30<LD4[%20]> [ORD=59] [ID=-3]

          0x3b57b78: <multiple use>
          0x3b75390: i32 = FrameIndex<4> [ORD=60] [ID=-3]

          0x3b7be30: <multiple use>
        0x3b7a820: i32,ch = load 0x3b57b78, 0x3b75390, 0x3b7be30<LD4[%5]> [ORD=60] [ID=-3]

        0x3b7bb30: ch = setlt [ORD=61] [ID=-3]

      0x3b771c0: i32 = setcc 0x3b776c0, 0x3b7a820, 0x3b7bb30 [ORD=61] [ID=-3]

      0x3b7b830: ch = BasicBlock<startup_starter3.return 0x3b95f80> [ID=-3]

    0x3b778c0: ch = brcond 0x3b57b78, 0x3b771c0, 0x3b7b830 [ID=-3]

    0x3b79d30: ch = BasicBlock<startup_starter3.if.else6 0x3b958a0> [ID=-3]

  0x3b779c0: ch = br 0x3b778c0, 0x3b79d30 [ID=-3]


Legalized selection DAG: BB#1 'startup_starter3:startup_starter3.if.else'
SelectionDAG has 15 nodes:
  0x3b57b78: ch = EntryToken [ORD=57] [ID=0]

  0x3b7be30: i32 = undef [ORD=57] [ID=2]

      0x3b57b78: <multiple use>
          0x3b57b78: <multiple use>
              0x3b57b78: <multiple use>
              0x3b77dc0: i32 = FrameIndex<1> [ORD=57] [ID=1]

              0x3b7be30: <multiple use>
            0x3b777c0: i32,ch = load 0x3b57b78, 0x3b77dc0, 0x3b7be30<LD4[%2]> [ORD=57] [ID=8]

            0x3b79530: i32 = Constant<4> [ORD=58] [ID=3]

          0x3b7b220: i32 = add 0x3b777c0, 0x3b79530 [ORD=58] [ID=10]

          0x3b7be30: <multiple use>
        0x3b776c0: i32,ch = load 0x3b57b78, 0x3b7b220, 0x3b7be30<LD4[%20]> [ORD=59] [ID=11]

          0x3b57b78: <multiple use>
          0x3b75390: i32 = FrameIndex<4> [ORD=60] [ID=4]

          0x3b7be30: <multiple use>
        0x3b7a820: i32,ch = load 0x3b57b78, 0x3b75390, 0x3b7be30<LD4[%5]> [ORD=60] [ID=9]

        0x3b7bb30: ch = setlt [ORD=61] [ID=5]

      0x3b771c0: i32 = setcc 0x3b776c0, 0x3b7a820, 0x3b7bb30 [ORD=61] [ID=12]

      0x3b7b830: ch = BasicBlock<startup_starter3.return 0x3b95f80> [ID=6]

    0x3b778c0: ch = brcond 0x3b57b78, 0x3b771c0, 0x3b7b830 [ID=13]

    0x3b79d30: ch = BasicBlock<startup_starter3.if.else6 0x3b958a0> [ID=7]

  0x3b779c0: ch = br 0x3b778c0, 0x3b79d30 [ID=14]


Optimized legalized selection DAG: BB#1 'startup_starter3:startup_starter3.if.else'
SelectionDAG has 15 nodes:
  0x3b57b78: ch = EntryToken [ORD=57] [ID=0]

  0x3b7be30: i32 = undef [ORD=57] [ID=2]

      0x3b57b78: <multiple use>
          0x3b57b78: <multiple use>
              0x3b57b78: <multiple use>
              0x3b77dc0: i32 = FrameIndex<1> [ORD=57] [ID=1]

              0x3b7be30: <multiple use>
            0x3b777c0: i32,ch = load 0x3b57b78, 0x3b77dc0, 0x3b7be30<LD4[%2]> [ORD=57] [ID=8]

            0x3b79530: i32 = Constant<4> [ORD=58] [ID=3]

          0x3b7b220: i32 = add 0x3b777c0, 0x3b79530 [ORD=58] [ID=10]

          0x3b7be30: <multiple use>
        0x3b776c0: i32,ch = load 0x3b57b78, 0x3b7b220, 0x3b7be30<LD4[%20]> [ORD=59] [ID=11]

          0x3b57b78: <multiple use>
          0x3b75390: i32 = FrameIndex<4> [ORD=60] [ID=4]

          0x3b7be30: <multiple use>
        0x3b7a820: i32,ch = load 0x3b57b78, 0x3b75390, 0x3b7be30<LD4[%5]> [ORD=60] [ID=9]

        0x3b7bb30: ch = setlt [ORD=61] [ID=5]

      0x3b771c0: i32 = setcc 0x3b776c0, 0x3b7a820, 0x3b7bb30 [ORD=61] [ID=12]

      0x3b7b830: ch = BasicBlock<startup_starter3.return 0x3b95f80> [ID=6]

    0x3b778c0: ch = brcond 0x3b57b78, 0x3b771c0, 0x3b7b830 [ID=13]

    0x3b79d30: ch = BasicBlock<startup_starter3.if.else6 0x3b958a0> [ID=7]

  0x3b779c0: ch = br 0x3b778c0, 0x3b79d30 [ID=14]


===== Instruction selection begins: BB#1 'startup_starter3.if.else'
ISEL: Starting pattern match on root node: 0x3b779c0: ch = br 0x3b778c0, 0x3b79d30 [ID=14]

  Initial Opcode index to 1938
  Morphed node: 0x3b779c0: ch = JAL 0x3b79d30, 0x3b778c0

ISEL: Match complete!
=> 0x3b779c0: ch = JAL 0x3b79d30, 0x3b778c0

ISEL: Starting pattern match on root node: 0x3b778c0: ch = brcond 0x3b57b78, 0x3b771c0, 0x3b7b830 [ID=13]

  Initial Opcode index to 1439
  Skipped scope entry (due to false predicate) at index 1456, continuing at 1477
  Skipped scope entry (due to false predicate) at index 1478, continuing at 1499
  Morphed node: 0x3b778c0: ch = BLT 0x3b7b830, 0x3b776c0, 0x3b7a820, 0x3b57b78

ISEL: Match complete!
=> 0x3b778c0: ch = BLT 0x3b7b830, 0x3b776c0, 0x3b7a820, 0x3b57b78

ISEL: Starting pattern match on root node: 0x3b776c0: i32,ch = load 0x3b57b78, 0x3b7b220, 0x3b7be30<LD4[%20]> [ORD=59] [ID=11]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x3b776c0: i32,ch = LW 0x3b777c0, 0x3b7bb30, 0x3b57b78<Mem:LD4[%20]> [ORD=59]

ISEL: Match complete!
=> 0x3b776c0: i32,ch = LW 0x3b777c0, 0x3b7bb30, 0x3b57b78<Mem:LD4[%20]> [ORD=59]

ISEL: Starting pattern match on root node: 0x3b7a820: i32,ch = load 0x3b57b78, 0x3b75390, 0x3b7be30<LD4[%5]> [ORD=60] [ID=9]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x3b7a820: i32,ch = LW 0x3b75390, 0x3b79530, 0x3b57b78<Mem:LD4[%5]> [ORD=60]

ISEL: Match complete!
=> 0x3b7a820: i32,ch = LW 0x3b75390, 0x3b79530, 0x3b57b78<Mem:LD4[%5]> [ORD=60]

ISEL: Starting pattern match on root node: 0x3b777c0: i32,ch = load 0x3b57b78, 0x3b77dc0, 0x3b7be30<LD4[%2]> [ORD=57] [ID=8]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x3b777c0: i32,ch = LW 0x3b77dc0, 0x3b79530, 0x3b57b78<Mem:LD4[%2]> [ORD=57]

ISEL: Match complete!
=> 0x3b777c0: i32,ch = LW 0x3b77dc0, 0x3b79530, 0x3b57b78<Mem:LD4[%2]> [ORD=57]

=> 0x3b79d30: ch = BasicBlock<startup_starter3.if.else6 0x3b958a0>

=> 0x3b7b830: ch = BasicBlock<startup_starter3.return 0x3b95f80>

=> 0x3b57b78: ch = EntryToken [ORD=57]

===== Instruction selection ends:
Selected selection DAG: BB#1 'startup_starter3:startup_starter3.if.else'
SelectionDAG has 15 nodes:
  0x3b57b78: ch = EntryToken [ORD=57]

  0x3b79530: i32 = TargetConstant<0>

  0x3b7be30: i32 = Register %t5

    0x3b79d30: ch = BasicBlock<startup_starter3.if.else6 0x3b958a0>

      0x3b7b830: ch = BasicBlock<startup_starter3.return 0x3b95f80>

            0x3b7be30: <multiple use>
            0x3b771c0: i32 = TargetFrameIndex<1>

          0x3b77dc0: i32 = ADDI 0x3b7be30, 0x3b771c0 [ORD=57]

          0x3b79530: <multiple use>
          0x3b57b78: <multiple use>
        0x3b777c0: i32,ch = LW 0x3b77dc0, 0x3b79530, 0x3b57b78<Mem:LD4[%2]> [ORD=57]

        0x3b7bb30: i32 = TargetConstant<4>

        0x3b57b78: <multiple use>
      0x3b776c0: i32,ch = LW 0x3b777c0, 0x3b7bb30, 0x3b57b78<Mem:LD4[%20]> [ORD=59]

          0x3b7be30: <multiple use>
          0x3b7b220: i32 = TargetFrameIndex<4>

        0x3b75390: i32 = ADDI 0x3b7be30, 0x3b7b220 [ORD=60]

        0x3b79530: <multiple use>
        0x3b57b78: <multiple use>
      0x3b7a820: i32,ch = LW 0x3b75390, 0x3b79530, 0x3b57b78<Mem:LD4[%5]> [ORD=60]

      0x3b57b78: <multiple use>
    0x3b778c0: ch = BLT 0x3b7b830, 0x3b776c0, 0x3b7a820, 0x3b57b78

  0x3b779c0: ch = JAL 0x3b79d30, 0x3b778c0


********** List Scheduling BB#1 'startup_starter3.if.else' **********
SU(0): 0x3b779c0: ch = JAL 0x3b79d30, 0x3b778c0 [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x3b778c0: ch = BLT 0x3b7b830, 0x3b776c0, 0x3b7a820, 0x3b57b78 [ID=1]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(4): Latency=1
   val SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x3b7a820: i32,ch = LW 0x3b75390, 0x3b79530, 0x3b57b78<Mem:LD4[%5]> [ORD=60] [ID=2]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
   val SU(3): Latency=1
  Successors:
   val SU(1): Latency=1

SU(3): 0x3b75390: i32 = ADDI 0x3b7be30, 0x3b7b220 [ORD=60] [ID=3]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(2): Latency=1

SU(4): 0x3b776c0: i32,ch = LW 0x3b777c0, 0x3b7bb30, 0x3b57b78<Mem:LD4[%20]> [ORD=59] [ID=4]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(5): Latency=1
  Successors:
   val SU(1): Latency=1

SU(5): 0x3b777c0: i32,ch = LW 0x3b77dc0, 0x3b79530, 0x3b57b78<Mem:LD4[%2]> [ORD=57] [ID=5]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(6): Latency=1
  Successors:
   val SU(4): Latency=1

SU(6): 0x3b77dc0: i32 = ADDI 0x3b7be30, 0x3b771c0 [ORD=57] [ID=6]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(5): Latency=1


Examining Available:
Height 0: SU(0): 0x3b779c0: ch = JAL 0x3b79d30, 0x3b778c0 [ID=0]


*** Scheduling [0]: SU(0): 0x3b779c0: ch = JAL 0x3b79d30, 0x3b778c0 [ID=0]


Examining Available:
Height 1: SU(1): 0x3b778c0: ch = BLT 0x3b7b830, 0x3b776c0, 0x3b7a820, 0x3b57b78 [ID=1]


*** Scheduling [1]: SU(1): 0x3b778c0: ch = BLT 0x3b7b830, 0x3b776c0, 0x3b7a820, 0x3b57b78 [ID=1]


Examining Available:
Height 2: SU(2): 0x3b7a820: i32,ch = LW 0x3b75390, 0x3b79530, 0x3b57b78<Mem:LD4[%5]> [ORD=60] [ID=2]

Height 2: SU(4): 0x3b776c0: i32,ch = LW 0x3b777c0, 0x3b7bb30, 0x3b57b78<Mem:LD4[%20]> [ORD=59] [ID=4]


*** Scheduling [2]: SU(2): 0x3b7a820: i32,ch = LW 0x3b75390, 0x3b79530, 0x3b57b78<Mem:LD4[%5]> [ORD=60] [ID=2]


Examining Available:
Height 3: SU(3): 0x3b75390: i32 = ADDI 0x3b7be30, 0x3b7b220 [ORD=60] [ID=3]

Height 2: SU(4): 0x3b776c0: i32,ch = LW 0x3b777c0, 0x3b7bb30, 0x3b57b78<Mem:LD4[%20]> [ORD=59] [ID=4]


*** Scheduling [3]: SU(3): 0x3b75390: i32 = ADDI 0x3b7be30, 0x3b7b220 [ORD=60] [ID=3]


Examining Available:
Height 2: SU(4): 0x3b776c0: i32,ch = LW 0x3b777c0, 0x3b7bb30, 0x3b57b78<Mem:LD4[%20]> [ORD=59] [ID=4]


*** Scheduling [4]: SU(4): 0x3b776c0: i32,ch = LW 0x3b777c0, 0x3b7bb30, 0x3b57b78<Mem:LD4[%20]> [ORD=59] [ID=4]


Examining Available:
Height 5: SU(5): 0x3b777c0: i32,ch = LW 0x3b77dc0, 0x3b79530, 0x3b57b78<Mem:LD4[%2]> [ORD=57] [ID=5]


*** Scheduling [5]: SU(5): 0x3b777c0: i32,ch = LW 0x3b77dc0, 0x3b79530, 0x3b57b78<Mem:LD4[%2]> [ORD=57] [ID=5]


Examining Available:
Height 6: SU(6): 0x3b77dc0: i32 = ADDI 0x3b7be30, 0x3b771c0 [ORD=57] [ID=6]


*** Scheduling [6]: SU(6): 0x3b77dc0: i32 = ADDI 0x3b7be30, 0x3b771c0 [ORD=57] [ID=6]

*** Final schedule ***
SU(6): 0x3b77dc0: i32 = ADDI 0x3b7be30, 0x3b771c0 [ORD=57] [ID=6]

SU(5): 0x3b777c0: i32,ch = LW 0x3b77dc0, 0x3b79530, 0x3b57b78<Mem:LD4[%2]> [ORD=57] [ID=5]

SU(4): 0x3b776c0: i32,ch = LW 0x3b777c0, 0x3b7bb30, 0x3b57b78<Mem:LD4[%20]> [ORD=59] [ID=4]

SU(3): 0x3b75390: i32 = ADDI 0x3b7be30, 0x3b7b220 [ORD=60] [ID=3]

SU(2): 0x3b7a820: i32,ch = LW 0x3b75390, 0x3b79530, 0x3b57b78<Mem:LD4[%5]> [ORD=60] [ID=2]

SU(1): 0x3b778c0: ch = BLT 0x3b7b830, 0x3b776c0, 0x3b7a820, 0x3b57b78 [ID=1]

SU(0): 0x3b779c0: ch = JAL 0x3b79d30, 0x3b778c0 [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %24 = load i32** %2, align 4
I was here to add   %2 = alloca i32*, align 4
with I type i32*and sd value :0x3b771c0: i32 = FrameIndex<1>
new load?0x3b79530: i32,ch = load 0x3b57b78, 0x3b771c0, 0x3b7be30<LD4[%2]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x3b7b220: i32 = Constant<0>

    0x3b57b78: ch = EntryToken

    0x3b771c0: i32 = FrameIndex<1>

    0x3b7be30: i32 = undef

  0x3b79530: i32,ch = load 0x3b57b78, 0x3b771c0, 0x3b7be30<LD4[%2]>

  0x3b57b78: ch = EntryToken


visiting load instruction   %26 = load i32* %25, align 4
with I type i32and sd value :0x3b778c0: i32 = add 0x3b79530, 0x3b779c0
new load?0x3b776c0: i32,ch = load 0x3b57b78, 0x3b778c0, 0x3b7be30<LD4[%25]>
dag after load is dealt with?SelectionDAG has 9 nodes:
  0x3b7b220: i32 = Constant<0>

  0x3b7be30: i32 = undef [ORD=62]

  0x3b7bb30: i64 = Constant<4>

    0x3b57b78: <multiple use>
        0x3b57b78: <multiple use>
        0x3b771c0: i32 = FrameIndex<1> [ORD=62]

        0x3b7be30: <multiple use>
      0x3b79530: i32,ch = load 0x3b57b78, 0x3b771c0, 0x3b7be30<LD4[%2]> [ORD=62]

      0x3b779c0: i32 = Constant<4> [ORD=63]

    0x3b778c0: i32 = add 0x3b79530, 0x3b779c0 [ORD=63]

    0x3b7be30: <multiple use>
  0x3b776c0: i32,ch = load 0x3b57b78, 0x3b778c0, 0x3b7be30<LD4[%25]>

  0x3b57b78: ch = EntryToken [ORD=62]


visiting load instruction   %27 = load i32* %6, align 4
I was here to add   %6 = alloca i32, align 4
with I type i32and sd value :0x3b7a820: i32 = FrameIndex<5>
new load?0x3b777c0: i32,ch = load 0x3b57b78, 0x3b7a820, 0x3b7be30<LD4[%6]>
dag after load is dealt with?SelectionDAG has 11 nodes:
  0x3b7b220: i32 = Constant<0>

  0x3b7be30: i32 = undef [ORD=62]

  0x3b7bb30: i64 = Constant<4>

    0x3b57b78: <multiple use>
        0x3b57b78: <multiple use>
        0x3b771c0: i32 = FrameIndex<1> [ORD=62]

        0x3b7be30: <multiple use>
      0x3b79530: i32,ch = load 0x3b57b78, 0x3b771c0, 0x3b7be30<LD4[%2]> [ORD=62]

      0x3b779c0: i32 = Constant<4> [ORD=63]

    0x3b778c0: i32 = add 0x3b79530, 0x3b779c0 [ORD=63]

    0x3b7be30: <multiple use>
  0x3b776c0: i32,ch = load 0x3b57b78, 0x3b778c0, 0x3b7be30<LD4[%25]> [ORD=64]

    0x3b57b78: <multiple use>
    0x3b7a820: i32 = FrameIndex<5>

    0x3b7be30: <multiple use>
  0x3b777c0: i32,ch = load 0x3b57b78, 0x3b7a820, 0x3b7be30<LD4[%6]>

  0x3b57b78: ch = EntryToken [ORD=62]


Initial selection DAG: BB#2 'startup_starter3:startup_starter3.if.else6'
SelectionDAG has 17 nodes:
  0x3b57b78: ch = EntryToken [ORD=62]

  0x3b7b220: i32 = Constant<0>

  0x3b7be30: i32 = undef [ORD=62]

  0x3b7bb30: i64 = Constant<4>

      0x3b57b78: <multiple use>
          0x3b57b78: <multiple use>
              0x3b57b78: <multiple use>
              0x3b771c0: i32 = FrameIndex<1> [ORD=62]

              0x3b7be30: <multiple use>
            0x3b79530: i32,ch = load 0x3b57b78, 0x3b771c0, 0x3b7be30<LD4[%2]> [ORD=62]

            0x3b779c0: i32 = Constant<4> [ORD=63]

          0x3b778c0: i32 = add 0x3b79530, 0x3b779c0 [ORD=63]

          0x3b7be30: <multiple use>
        0x3b776c0: i32,ch = load 0x3b57b78, 0x3b778c0, 0x3b7be30<LD4[%25]> [ORD=64]

          0x3b57b78: <multiple use>
          0x3b7a820: i32 = FrameIndex<5> [ORD=65]

          0x3b7be30: <multiple use>
        0x3b777c0: i32,ch = load 0x3b57b78, 0x3b7a820, 0x3b7be30<LD4[%6]> [ORD=65]

        0x3b79d30: ch = setle [ORD=66]

      0x3b7b830: i1 = setcc 0x3b776c0, 0x3b777c0, 0x3b79d30 [ORD=66]

      0x3b75390: ch = BasicBlock<startup_starter3.if.then9 0x3b95e20>

    0x3b77dc0: ch = brcond 0x3b57b78, 0x3b7b830, 0x3b75390

    0x3b79030: ch = BasicBlock<startup_starter3.if.else11 0x3b95950>

  0x3b77cc0: ch = br 0x3b77dc0, 0x3b79030


Optimized lowered selection DAG: BB#2 'startup_starter3:startup_starter3.if.else6'
SelectionDAG has 15 nodes:
  0x3b57b78: ch = EntryToken [ORD=62]

  0x3b7be30: i32 = undef [ORD=62]

      0x3b57b78: <multiple use>
          0x3b57b78: <multiple use>
              0x3b57b78: <multiple use>
              0x3b771c0: i32 = FrameIndex<1> [ORD=62]

              0x3b7be30: <multiple use>
            0x3b79530: i32,ch = load 0x3b57b78, 0x3b771c0, 0x3b7be30<LD4[%2]> [ORD=62]

            0x3b779c0: i32 = Constant<4> [ORD=63]

          0x3b778c0: i32 = add 0x3b79530, 0x3b779c0 [ORD=63]

          0x3b7be30: <multiple use>
        0x3b776c0: i32,ch = load 0x3b57b78, 0x3b778c0, 0x3b7be30<LD4[%25]> [ORD=64]

          0x3b57b78: <multiple use>
          0x3b7a820: i32 = FrameIndex<5> [ORD=65]

          0x3b7be30: <multiple use>
        0x3b777c0: i32,ch = load 0x3b57b78, 0x3b7a820, 0x3b7be30<LD4[%6]> [ORD=65]

        0x3b79d30: ch = setle [ORD=66]

      0x3b7b830: i1 = setcc 0x3b776c0, 0x3b777c0, 0x3b79d30 [ORD=66]

      0x3b75390: ch = BasicBlock<startup_starter3.if.then9 0x3b95e20>

    0x3b77dc0: ch = brcond 0x3b57b78, 0x3b7b830, 0x3b75390

    0x3b79030: ch = BasicBlock<startup_starter3.if.else11 0x3b95950>

  0x3b77cc0: ch = br 0x3b77dc0, 0x3b79030


Legally typed node: 0x3b79030: ch = BasicBlock<startup_starter3.if.else11 0x3b95950> [ID=0]

Legally typed node: 0x3b75390: ch = BasicBlock<startup_starter3.if.then9 0x3b95e20> [ID=0]

Legally typed node: 0x3b79d30: ch = setle [ORD=66] [ID=0]

Legally typed node: 0x3b7a820: i32 = FrameIndex<5> [ORD=65] [ID=0]

Legally typed node: 0x3b779c0: i32 = Constant<4> [ORD=63] [ID=0]

Legally typed node: 0x3b7be30: i32 = undef [ORD=62] [ID=0]

Legally typed node: 0x3b771c0: i32 = FrameIndex<1> [ORD=62] [ID=0]

Legally typed node: 0x3b57b78: ch = EntryToken [ORD=62] [ID=0]

Legally typed node: 0x3b79530: i32,ch = load 0x3b57b78, 0x3b771c0, 0x3b7be30<LD4[%2]> [ORD=62] [ID=0]

Legally typed node: 0x3b778c0: i32 = add 0x3b79530, 0x3b779c0 [ORD=63] [ID=0]

Legally typed node: 0x3b776c0: i32,ch = load 0x3b57b78, 0x3b778c0, 0x3b7be30<LD4[%25]> [ORD=64] [ID=0]

Legally typed node: 0x3b777c0: i32,ch = load 0x3b57b78, 0x3b7a820, 0x3b7be30<LD4[%6]> [ORD=65] [ID=0]

Promote integer result: 0x3b7b830: i1 = setcc 0x3b776c0, 0x3b777c0, 0x3b79d30 [ORD=66] [ID=0]

Promote integer operand: 0x3b77dc0: ch = brcond 0x3b57b78, 0x3b7b830, 0x3b75390 [ID=0]

Promote integer operand: 0x3b7bb30: i32 = zero_extend 0x3b7b830 [ID=0]

Legally typed node: 0x3b7bf30: i32 = Constant<1> [ID=0]

Legally typed node: 0x3b7b220: i32 = setcc 0x3b776c0, 0x3b777c0, 0x3b79d30 [ORD=66] [ID=0]

Legally typed node: 0x3b79630: i32 = and 0x3b7b220, 0x3b7bf30 [ID=0]

Legally typed node: 0x3b77dc0: ch = brcond 0x3b57b78, 0x3b79630, 0x3b75390 [ID=0]

Legally typed node: 0x3b77cc0: ch = br 0x3b77dc0, 0x3b79030 [ID=0]

Legally typed node: 0x7fffa88b7260: ch = handlenode 0x3b77cc0 [ID=0]

Type-legalized selection DAG: BB#2 'startup_starter3:startup_starter3.if.else6'
SelectionDAG has 17 nodes:
  0x3b57b78: ch = EntryToken [ORD=62] [ID=-3]

  0x3b7be30: i32 = undef [ORD=62] [ID=-3]

      0x3b57b78: <multiple use>
            0x3b57b78: <multiple use>
                0x3b57b78: <multiple use>
                0x3b771c0: i32 = FrameIndex<1> [ORD=62] [ID=-3]

                0x3b7be30: <multiple use>
              0x3b79530: i32,ch = load 0x3b57b78, 0x3b771c0, 0x3b7be30<LD4[%2]> [ORD=62] [ID=-3]

              0x3b779c0: i32 = Constant<4> [ORD=63] [ID=-3]

            0x3b778c0: i32 = add 0x3b79530, 0x3b779c0 [ORD=63] [ID=-3]

            0x3b7be30: <multiple use>
          0x3b776c0: i32,ch = load 0x3b57b78, 0x3b778c0, 0x3b7be30<LD4[%25]> [ORD=64] [ID=-3]

            0x3b57b78: <multiple use>
            0x3b7a820: i32 = FrameIndex<5> [ORD=65] [ID=-3]

            0x3b7be30: <multiple use>
          0x3b777c0: i32,ch = load 0x3b57b78, 0x3b7a820, 0x3b7be30<LD4[%6]> [ORD=65] [ID=-3]

          0x3b79d30: ch = setle [ORD=66] [ID=-3]

        0x3b7b220: i32 = setcc 0x3b776c0, 0x3b777c0, 0x3b79d30 [ORD=66] [ID=-3]

        0x3b7bf30: i32 = Constant<1> [ID=-3]

      0x3b79630: i32 = and 0x3b7b220, 0x3b7bf30 [ID=-3]

      0x3b75390: ch = BasicBlock<startup_starter3.if.then9 0x3b95e20> [ID=-3]

    0x3b77dc0: ch = brcond 0x3b57b78, 0x3b79630, 0x3b75390 [ID=-3]

    0x3b79030: ch = BasicBlock<startup_starter3.if.else11 0x3b95950> [ID=-3]

  0x3b77cc0: ch = br 0x3b77dc0, 0x3b79030 [ID=-3]



Replacing.2 0x3b79630: i32 = and 0x3b7b220, 0x3b7bf30 [ID=-3]

With: 0x3b7b220: i32 = setcc 0x3b776c0, 0x3b777c0, 0x3b79d30 [ORD=66] [ID=-3]

Optimized type-legalized selection DAG: BB#2 'startup_starter3:startup_starter3.if.else6'
SelectionDAG has 15 nodes:
  0x3b57b78: ch = EntryToken [ORD=62] [ID=-3]

  0x3b7be30: i32 = undef [ORD=62] [ID=-3]

      0x3b57b78: <multiple use>
          0x3b57b78: <multiple use>
              0x3b57b78: <multiple use>
              0x3b771c0: i32 = FrameIndex<1> [ORD=62] [ID=-3]

              0x3b7be30: <multiple use>
            0x3b79530: i32,ch = load 0x3b57b78, 0x3b771c0, 0x3b7be30<LD4[%2]> [ORD=62] [ID=-3]

            0x3b779c0: i32 = Constant<4> [ORD=63] [ID=-3]

          0x3b778c0: i32 = add 0x3b79530, 0x3b779c0 [ORD=63] [ID=-3]

          0x3b7be30: <multiple use>
        0x3b776c0: i32,ch = load 0x3b57b78, 0x3b778c0, 0x3b7be30<LD4[%25]> [ORD=64] [ID=-3]

          0x3b57b78: <multiple use>
          0x3b7a820: i32 = FrameIndex<5> [ORD=65] [ID=-3]

          0x3b7be30: <multiple use>
        0x3b777c0: i32,ch = load 0x3b57b78, 0x3b7a820, 0x3b7be30<LD4[%6]> [ORD=65] [ID=-3]

        0x3b79d30: ch = setle [ORD=66] [ID=-3]

      0x3b7b220: i32 = setcc 0x3b776c0, 0x3b777c0, 0x3b79d30 [ORD=66] [ID=-3]

      0x3b75390: ch = BasicBlock<startup_starter3.if.then9 0x3b95e20> [ID=-3]

    0x3b77dc0: ch = brcond 0x3b57b78, 0x3b7b220, 0x3b75390 [ID=-3]

    0x3b79030: ch = BasicBlock<startup_starter3.if.else11 0x3b95950> [ID=-3]

  0x3b77cc0: ch = br 0x3b77dc0, 0x3b79030 [ID=-3]


Legalized selection DAG: BB#2 'startup_starter3:startup_starter3.if.else6'
SelectionDAG has 15 nodes:
  0x3b57b78: ch = EntryToken [ORD=62] [ID=0]

  0x3b7be30: i32 = undef [ORD=62] [ID=2]

      0x3b57b78: <multiple use>
          0x3b57b78: <multiple use>
              0x3b57b78: <multiple use>
              0x3b771c0: i32 = FrameIndex<1> [ORD=62] [ID=1]

              0x3b7be30: <multiple use>
            0x3b79530: i32,ch = load 0x3b57b78, 0x3b771c0, 0x3b7be30<LD4[%2]> [ORD=62] [ID=8]

            0x3b779c0: i32 = Constant<4> [ORD=63] [ID=3]

          0x3b778c0: i32 = add 0x3b79530, 0x3b779c0 [ORD=63] [ID=10]

          0x3b7be30: <multiple use>
        0x3b776c0: i32,ch = load 0x3b57b78, 0x3b778c0, 0x3b7be30<LD4[%25]> [ORD=64] [ID=11]

          0x3b57b78: <multiple use>
          0x3b7a820: i32 = FrameIndex<5> [ORD=65] [ID=4]

          0x3b7be30: <multiple use>
        0x3b777c0: i32,ch = load 0x3b57b78, 0x3b7a820, 0x3b7be30<LD4[%6]> [ORD=65] [ID=9]

        0x3b79d30: ch = setle [ORD=66] [ID=5]

      0x3b7b220: i32 = setcc 0x3b776c0, 0x3b777c0, 0x3b79d30 [ORD=66] [ID=12]

      0x3b75390: ch = BasicBlock<startup_starter3.if.then9 0x3b95e20> [ID=6]

    0x3b77dc0: ch = brcond 0x3b57b78, 0x3b7b220, 0x3b75390 [ID=13]

    0x3b79030: ch = BasicBlock<startup_starter3.if.else11 0x3b95950> [ID=7]

  0x3b77cc0: ch = br 0x3b77dc0, 0x3b79030 [ID=14]


Optimized legalized selection DAG: BB#2 'startup_starter3:startup_starter3.if.else6'
SelectionDAG has 15 nodes:
  0x3b57b78: ch = EntryToken [ORD=62] [ID=0]

  0x3b7be30: i32 = undef [ORD=62] [ID=2]

      0x3b57b78: <multiple use>
          0x3b57b78: <multiple use>
              0x3b57b78: <multiple use>
              0x3b771c0: i32 = FrameIndex<1> [ORD=62] [ID=1]

              0x3b7be30: <multiple use>
            0x3b79530: i32,ch = load 0x3b57b78, 0x3b771c0, 0x3b7be30<LD4[%2]> [ORD=62] [ID=8]

            0x3b779c0: i32 = Constant<4> [ORD=63] [ID=3]

          0x3b778c0: i32 = add 0x3b79530, 0x3b779c0 [ORD=63] [ID=10]

          0x3b7be30: <multiple use>
        0x3b776c0: i32,ch = load 0x3b57b78, 0x3b778c0, 0x3b7be30<LD4[%25]> [ORD=64] [ID=11]

          0x3b57b78: <multiple use>
          0x3b7a820: i32 = FrameIndex<5> [ORD=65] [ID=4]

          0x3b7be30: <multiple use>
        0x3b777c0: i32,ch = load 0x3b57b78, 0x3b7a820, 0x3b7be30<LD4[%6]> [ORD=65] [ID=9]

        0x3b79d30: ch = setle [ORD=66] [ID=5]

      0x3b7b220: i32 = setcc 0x3b776c0, 0x3b777c0, 0x3b79d30 [ORD=66] [ID=12]

      0x3b75390: ch = BasicBlock<startup_starter3.if.then9 0x3b95e20> [ID=6]

    0x3b77dc0: ch = brcond 0x3b57b78, 0x3b7b220, 0x3b75390 [ID=13]

    0x3b79030: ch = BasicBlock<startup_starter3.if.else11 0x3b95950> [ID=7]

  0x3b77cc0: ch = br 0x3b77dc0, 0x3b79030 [ID=14]


===== Instruction selection begins: BB#2 'startup_starter3.if.else6'
ISEL: Starting pattern match on root node: 0x3b77cc0: ch = br 0x3b77dc0, 0x3b79030 [ID=14]

  Initial Opcode index to 1938
  Morphed node: 0x3b77cc0: ch = JAL 0x3b79030, 0x3b77dc0

ISEL: Match complete!
=> 0x3b77cc0: ch = JAL 0x3b79030, 0x3b77dc0

ISEL: Starting pattern match on root node: 0x3b77dc0: ch = brcond 0x3b57b78, 0x3b7b220, 0x3b75390 [ID=13]

  Initial Opcode index to 1439
  Skipped scope entry (due to false predicate) at index 1456, continuing at 1477
  Skipped scope entry (due to false predicate) at index 1478, continuing at 1499
  Skipped scope entry (due to false predicate) at index 1500, continuing at 1521
  Skipped scope entry (due to false predicate) at index 1522, continuing at 1543
  Skipped scope entry (due to false predicate) at index 1544, continuing at 1565
  Skipped scope entry (due to false predicate) at index 1566, continuing at 1587
  Skipped scope entry (due to false predicate) at index 1588, continuing at 1609
  Skipped scope entry (due to false predicate) at index 1610, continuing at 1631
  Morphed node: 0x3b77dc0: ch = BLE 0x3b75390, 0x3b776c0, 0x3b777c0, 0x3b57b78

ISEL: Match complete!
=> 0x3b77dc0: ch = BLE 0x3b75390, 0x3b776c0, 0x3b777c0, 0x3b57b78

ISEL: Starting pattern match on root node: 0x3b776c0: i32,ch = load 0x3b57b78, 0x3b778c0, 0x3b7be30<LD4[%25]> [ORD=64] [ID=11]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x3b776c0: i32,ch = LW 0x3b79530, 0x3b79d30, 0x3b57b78<Mem:LD4[%25]> [ORD=64]

ISEL: Match complete!
=> 0x3b776c0: i32,ch = LW 0x3b79530, 0x3b79d30, 0x3b57b78<Mem:LD4[%25]> [ORD=64]

ISEL: Starting pattern match on root node: 0x3b777c0: i32,ch = load 0x3b57b78, 0x3b7a820, 0x3b7be30<LD4[%6]> [ORD=65] [ID=9]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x3b777c0: i32,ch = LW 0x3b7a820, 0x3b779c0, 0x3b57b78<Mem:LD4[%6]> [ORD=65]

ISEL: Match complete!
=> 0x3b777c0: i32,ch = LW 0x3b7a820, 0x3b779c0, 0x3b57b78<Mem:LD4[%6]> [ORD=65]

ISEL: Starting pattern match on root node: 0x3b79530: i32,ch = load 0x3b57b78, 0x3b771c0, 0x3b7be30<LD4[%2]> [ORD=62] [ID=8]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x3b79530: i32,ch = LW 0x3b771c0, 0x3b779c0, 0x3b57b78<Mem:LD4[%2]> [ORD=62]

ISEL: Match complete!
=> 0x3b79530: i32,ch = LW 0x3b771c0, 0x3b779c0, 0x3b57b78<Mem:LD4[%2]> [ORD=62]

=> 0x3b79030: ch = BasicBlock<startup_starter3.if.else11 0x3b95950>

=> 0x3b75390: ch = BasicBlock<startup_starter3.if.then9 0x3b95e20>

=> 0x3b57b78: ch = EntryToken [ORD=62]

===== Instruction selection ends:
Selected selection DAG: BB#2 'startup_starter3:startup_starter3.if.else6'
SelectionDAG has 15 nodes:
  0x3b57b78: ch = EntryToken [ORD=62]

  0x3b779c0: i32 = TargetConstant<0>

  0x3b7be30: i32 = Register %t5

    0x3b79030: ch = BasicBlock<startup_starter3.if.else11 0x3b95950>

      0x3b75390: ch = BasicBlock<startup_starter3.if.then9 0x3b95e20>

            0x3b7be30: <multiple use>
            0x3b7b220: i32 = TargetFrameIndex<1>

          0x3b771c0: i32 = ADDI 0x3b7be30, 0x3b7b220 [ORD=62]

          0x3b779c0: <multiple use>
          0x3b57b78: <multiple use>
        0x3b79530: i32,ch = LW 0x3b771c0, 0x3b779c0, 0x3b57b78<Mem:LD4[%2]> [ORD=62]

        0x3b79d30: i32 = TargetConstant<4>

        0x3b57b78: <multiple use>
      0x3b776c0: i32,ch = LW 0x3b79530, 0x3b79d30, 0x3b57b78<Mem:LD4[%25]> [ORD=64]

          0x3b7be30: <multiple use>
          0x3b778c0: i32 = TargetFrameIndex<5>

        0x3b7a820: i32 = ADDI 0x3b7be30, 0x3b778c0 [ORD=65]

        0x3b779c0: <multiple use>
        0x3b57b78: <multiple use>
      0x3b777c0: i32,ch = LW 0x3b7a820, 0x3b779c0, 0x3b57b78<Mem:LD4[%6]> [ORD=65]

      0x3b57b78: <multiple use>
    0x3b77dc0: ch = BLE 0x3b75390, 0x3b776c0, 0x3b777c0, 0x3b57b78

  0x3b77cc0: ch = JAL 0x3b79030, 0x3b77dc0


********** List Scheduling BB#2 'startup_starter3.if.else6' **********
SU(0): 0x3b77cc0: ch = JAL 0x3b79030, 0x3b77dc0 [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x3b77dc0: ch = BLE 0x3b75390, 0x3b776c0, 0x3b777c0, 0x3b57b78 [ID=1]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(4): Latency=1
   val SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x3b777c0: i32,ch = LW 0x3b7a820, 0x3b779c0, 0x3b57b78<Mem:LD4[%6]> [ORD=65] [ID=2]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
   val SU(3): Latency=1
  Successors:
   val SU(1): Latency=1

SU(3): 0x3b7a820: i32 = ADDI 0x3b7be30, 0x3b778c0 [ORD=65] [ID=3]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(2): Latency=1

SU(4): 0x3b776c0: i32,ch = LW 0x3b79530, 0x3b79d30, 0x3b57b78<Mem:LD4[%25]> [ORD=64] [ID=4]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(5): Latency=1
  Successors:
   val SU(1): Latency=1

SU(5): 0x3b79530: i32,ch = LW 0x3b771c0, 0x3b779c0, 0x3b57b78<Mem:LD4[%2]> [ORD=62] [ID=5]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(6): Latency=1
  Successors:
   val SU(4): Latency=1

SU(6): 0x3b771c0: i32 = ADDI 0x3b7be30, 0x3b7b220 [ORD=62] [ID=6]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(5): Latency=1


Examining Available:
Height 0: SU(0): 0x3b77cc0: ch = JAL 0x3b79030, 0x3b77dc0 [ID=0]


*** Scheduling [0]: SU(0): 0x3b77cc0: ch = JAL 0x3b79030, 0x3b77dc0 [ID=0]


Examining Available:
Height 1: SU(1): 0x3b77dc0: ch = BLE 0x3b75390, 0x3b776c0, 0x3b777c0, 0x3b57b78 [ID=1]


*** Scheduling [1]: SU(1): 0x3b77dc0: ch = BLE 0x3b75390, 0x3b776c0, 0x3b777c0, 0x3b57b78 [ID=1]


Examining Available:
Height 2: SU(2): 0x3b777c0: i32,ch = LW 0x3b7a820, 0x3b779c0, 0x3b57b78<Mem:LD4[%6]> [ORD=65] [ID=2]

Height 2: SU(4): 0x3b776c0: i32,ch = LW 0x3b79530, 0x3b79d30, 0x3b57b78<Mem:LD4[%25]> [ORD=64] [ID=4]


*** Scheduling [2]: SU(2): 0x3b777c0: i32,ch = LW 0x3b7a820, 0x3b779c0, 0x3b57b78<Mem:LD4[%6]> [ORD=65] [ID=2]


Examining Available:
Height 3: SU(3): 0x3b7a820: i32 = ADDI 0x3b7be30, 0x3b778c0 [ORD=65] [ID=3]

Height 2: SU(4): 0x3b776c0: i32,ch = LW 0x3b79530, 0x3b79d30, 0x3b57b78<Mem:LD4[%25]> [ORD=64] [ID=4]


*** Scheduling [3]: SU(3): 0x3b7a820: i32 = ADDI 0x3b7be30, 0x3b778c0 [ORD=65] [ID=3]


Examining Available:
Height 2: SU(4): 0x3b776c0: i32,ch = LW 0x3b79530, 0x3b79d30, 0x3b57b78<Mem:LD4[%25]> [ORD=64] [ID=4]


*** Scheduling [4]: SU(4): 0x3b776c0: i32,ch = LW 0x3b79530, 0x3b79d30, 0x3b57b78<Mem:LD4[%25]> [ORD=64] [ID=4]


Examining Available:
Height 5: SU(5): 0x3b79530: i32,ch = LW 0x3b771c0, 0x3b779c0, 0x3b57b78<Mem:LD4[%2]> [ORD=62] [ID=5]


*** Scheduling [5]: SU(5): 0x3b79530: i32,ch = LW 0x3b771c0, 0x3b779c0, 0x3b57b78<Mem:LD4[%2]> [ORD=62] [ID=5]


Examining Available:
Height 6: SU(6): 0x3b771c0: i32 = ADDI 0x3b7be30, 0x3b7b220 [ORD=62] [ID=6]


*** Scheduling [6]: SU(6): 0x3b771c0: i32 = ADDI 0x3b7be30, 0x3b7b220 [ORD=62] [ID=6]

*** Final schedule ***
SU(6): 0x3b771c0: i32 = ADDI 0x3b7be30, 0x3b7b220 [ORD=62] [ID=6]

SU(5): 0x3b79530: i32,ch = LW 0x3b771c0, 0x3b779c0, 0x3b57b78<Mem:LD4[%2]> [ORD=62] [ID=5]

SU(4): 0x3b776c0: i32,ch = LW 0x3b79530, 0x3b79d30, 0x3b57b78<Mem:LD4[%25]> [ORD=64] [ID=4]

SU(3): 0x3b7a820: i32 = ADDI 0x3b7be30, 0x3b778c0 [ORD=65] [ID=3]

SU(2): 0x3b777c0: i32,ch = LW 0x3b7a820, 0x3b779c0, 0x3b57b78<Mem:LD4[%6]> [ORD=65] [ID=2]

SU(1): 0x3b77dc0: ch = BLE 0x3b75390, 0x3b776c0, 0x3b777c0, 0x3b57b78 [ID=1]

SU(0): 0x3b77cc0: ch = JAL 0x3b79030, 0x3b77dc0 [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %29 = load float* %3, align 4
I was here to add   %3 = alloca float, align 4
with I type floatand sd value :0x3b7b220: i32 = FrameIndex<2>
new load?0x3b779c0: f32,ch = load 0x3b57b78, 0x3b7b220, 0x3b7be30<LD4[%3]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x3b778c0: i32 = Constant<0>

    0x3b57b78: ch = EntryToken

    0x3b7b220: i32 = FrameIndex<2>

    0x3b7be30: i32 = undef

  0x3b779c0: f32,ch = load 0x3b57b78, 0x3b7b220, 0x3b7be30<LD4[%3]>

  0x3b57b78: ch = EntryToken


visiting load instruction   %30 = load i32* @NH_STARTER_SHUTOFF, align 4
I was here to add @NH_STARTER_SHUTOFF = global i32 17000, align 4
with I type i32and sd value :0x3b79d30: i32 = GlobalAddress<i32* @NH_STARTER_SHUTOFF> 0
new load?0x3b77cc0: i32,ch = load 0x3b57b78, 0x3b79d30, 0x3b7be30<LD4[@NH_STARTER_SHUTOFF]>
dag after load is dealt with?SelectionDAG has 7 nodes:
  0x3b778c0: i32 = Constant<0>

  0x3b7be30: i32 = undef [ORD=67]

    0x3b57b78: <multiple use>
    0x3b7b220: i32 = FrameIndex<2> [ORD=67]

    0x3b7be30: <multiple use>
  0x3b779c0: f32,ch = load 0x3b57b78, 0x3b7b220, 0x3b7be30<LD4[%3]> [ORD=67]

    0x3b57b78: <multiple use>
    0x3b79d30: i32 = GlobalAddress<i32* @NH_STARTER_SHUTOFF> 0

    0x3b7be30: <multiple use>
  0x3b77cc0: i32,ch = load 0x3b57b78, 0x3b79d30, 0x3b7be30<LD4[@NH_STARTER_SHUTOFF]>

  0x3b57b78: ch = EntryToken [ORD=67]


Initial selection DAG: BB#3 'startup_starter3:startup_starter3.if.else11'
SelectionDAG has 16 nodes:
  0x3b57b78: ch = EntryToken [ORD=67]

  0x3b778c0: i32 = Constant<0>

  0x3b7be30: i32 = undef [ORD=67]

      0x3b57b78: <multiple use>
            0x3b57b78: <multiple use>
            0x3b7b220: i32 = FrameIndex<2> [ORD=67]

            0x3b7be30: <multiple use>
          0x3b779c0: f32,ch = load 0x3b57b78, 0x3b7b220, 0x3b7be30<LD4[%3]> [ORD=67]

              0x3b57b78: <multiple use>
              0x3b79d30: i32 = GlobalAddress<i32* @NH_STARTER_SHUTOFF> 0 [ORD=68]

              0x3b7be30: <multiple use>
            0x3b77cc0: i32,ch = load 0x3b57b78, 0x3b79d30, 0x3b7be30<LD4[@NH_STARTER_SHUTOFF]> [ORD=68]

          0x3b77dc0: f32 = sint_to_fp 0x3b77cc0 [ORD=69]

          0x3b776c0: ch = setolt [ORD=70]

        0x3b777c0: i1 = setcc 0x3b779c0, 0x3b77dc0, 0x3b776c0 [ORD=70]

        0x3b79530: i1 = Constant<-1>

      0x3b79030: i1 = xor 0x3b777c0, 0x3b79530

      0x3b75390: ch = BasicBlock<startup_starter3.if.else28 0x3b95d70>

    0x3b7a820: ch = brcond 0x3b57b78, 0x3b79030, 0x3b75390

    0x3b771c0: ch = BasicBlock<startup_starter3.if.then15 0x3b95a00>

  0x3b7bf30: ch = br 0x3b7a820, 0x3b771c0



Replacing.3 0x3b79030: i1 = xor 0x3b777c0, 0x3b79530

With: 0x3b7b830: i1 = setcc 0x3b779c0, 0x3b77dc0, 0x3b79630

Optimized lowered selection DAG: BB#3 'startup_starter3:startup_starter3.if.else11'
SelectionDAG has 13 nodes:
  0x3b57b78: ch = EntryToken [ORD=67]

  0x3b7be30: i32 = undef [ORD=67]

      0x3b57b78: <multiple use>
          0x3b57b78: <multiple use>
          0x3b7b220: i32 = FrameIndex<2> [ORD=67]

          0x3b7be30: <multiple use>
        0x3b779c0: f32,ch = load 0x3b57b78, 0x3b7b220, 0x3b7be30<LD4[%3]> [ORD=67]

            0x3b57b78: <multiple use>
            0x3b79d30: i32 = GlobalAddress<i32* @NH_STARTER_SHUTOFF> 0 [ORD=68]

            0x3b7be30: <multiple use>
          0x3b77cc0: i32,ch = load 0x3b57b78, 0x3b79d30, 0x3b7be30<LD4[@NH_STARTER_SHUTOFF]> [ORD=68]

        0x3b77dc0: f32 = sint_to_fp 0x3b77cc0 [ORD=69]

        0x3b79630: ch = setuge

      0x3b7b830: i1 = setcc 0x3b779c0, 0x3b77dc0, 0x3b79630

      0x3b75390: ch = BasicBlock<startup_starter3.if.else28 0x3b95d70>

    0x3b7a820: ch = brcond 0x3b57b78, 0x3b7b830, 0x3b75390

    0x3b771c0: ch = BasicBlock<startup_starter3.if.then15 0x3b95a00>

  0x3b7bf30: ch = br 0x3b7a820, 0x3b771c0


Legally typed node: 0x3b79630: ch = setuge [ID=0]

Legally typed node: 0x3b771c0: ch = BasicBlock<startup_starter3.if.then15 0x3b95a00> [ID=0]

Legally typed node: 0x3b75390: ch = BasicBlock<startup_starter3.if.else28 0x3b95d70> [ID=0]

Legally typed node: 0x3b79d30: i32 = GlobalAddress<i32* @NH_STARTER_SHUTOFF> 0 [ORD=68] [ID=0]

Legally typed node: 0x3b7be30: i32 = undef [ORD=67] [ID=0]

Legally typed node: 0x3b7b220: i32 = FrameIndex<2> [ORD=67] [ID=0]

Legally typed node: 0x3b57b78: ch = EntryToken [ORD=67] [ID=0]

Legally typed node: 0x3b779c0: f32,ch = load 0x3b57b78, 0x3b7b220, 0x3b7be30<LD4[%3]> [ORD=67] [ID=0]

Legally typed node: 0x3b77cc0: i32,ch = load 0x3b57b78, 0x3b79d30, 0x3b7be30<LD4[@NH_STARTER_SHUTOFF]> [ORD=68] [ID=0]

Legally typed node: 0x3b77dc0: f32 = sint_to_fp 0x3b77cc0 [ORD=69] [ID=0]

Promote integer result: 0x3b7b830: i1 = setcc 0x3b779c0, 0x3b77dc0, 0x3b79630 [ID=0]

Promote integer operand: 0x3b7a820: ch = brcond 0x3b57b78, 0x3b7b830, 0x3b75390 [ID=0]

Promote integer operand: 0x3b776c0: i32 = zero_extend 0x3b7b830 [ID=0]

Legally typed node: 0x3b777c0: i32 = Constant<1> [ID=0]

Legally typed node: 0x3b778c0: i32 = setcc 0x3b779c0, 0x3b77dc0, 0x3b79630 [ID=0]

Legally typed node: 0x3b79530: i32 = and 0x3b778c0, 0x3b777c0 [ID=0]

Legally typed node: 0x3b7a820: ch = brcond 0x3b57b78, 0x3b79530, 0x3b75390 [ID=0]

Legally typed node: 0x3b7bf30: ch = br 0x3b7a820, 0x3b771c0 [ID=0]

Legally typed node: 0x7fffa88b7260: ch = handlenode 0x3b7bf30 [ID=0]

Type-legalized selection DAG: BB#3 'startup_starter3:startup_starter3.if.else11'
SelectionDAG has 15 nodes:
  0x3b57b78: ch = EntryToken [ORD=67] [ID=-3]

  0x3b7be30: i32 = undef [ORD=67] [ID=-3]

      0x3b57b78: <multiple use>
            0x3b57b78: <multiple use>
            0x3b7b220: i32 = FrameIndex<2> [ORD=67] [ID=-3]

            0x3b7be30: <multiple use>
          0x3b779c0: f32,ch = load 0x3b57b78, 0x3b7b220, 0x3b7be30<LD4[%3]> [ORD=67] [ID=-3]

              0x3b57b78: <multiple use>
              0x3b79d30: i32 = GlobalAddress<i32* @NH_STARTER_SHUTOFF> 0 [ORD=68] [ID=-3]

              0x3b7be30: <multiple use>
            0x3b77cc0: i32,ch = load 0x3b57b78, 0x3b79d30, 0x3b7be30<LD4[@NH_STARTER_SHUTOFF]> [ORD=68] [ID=-3]

          0x3b77dc0: f32 = sint_to_fp 0x3b77cc0 [ORD=69] [ID=-3]

          0x3b79630: ch = setuge [ID=-3]

        0x3b778c0: i32 = setcc 0x3b779c0, 0x3b77dc0, 0x3b79630 [ID=-3]

        0x3b777c0: i32 = Constant<1> [ID=-3]

      0x3b79530: i32 = and 0x3b778c0, 0x3b777c0 [ID=-3]

      0x3b75390: ch = BasicBlock<startup_starter3.if.else28 0x3b95d70> [ID=-3]

    0x3b7a820: ch = brcond 0x3b57b78, 0x3b79530, 0x3b75390 [ID=-3]

    0x3b771c0: ch = BasicBlock<startup_starter3.if.then15 0x3b95a00> [ID=-3]

  0x3b7bf30: ch = br 0x3b7a820, 0x3b771c0 [ID=-3]



Replacing.2 0x3b79530: i32 = and 0x3b778c0, 0x3b777c0 [ID=-3]

With: 0x3b778c0: i32 = setcc 0x3b779c0, 0x3b77dc0, 0x3b79630 [ID=-3]

Optimized type-legalized selection DAG: BB#3 'startup_starter3:startup_starter3.if.else11'
SelectionDAG has 13 nodes:
  0x3b57b78: ch = EntryToken [ORD=67] [ID=-3]

  0x3b7be30: i32 = undef [ORD=67] [ID=-3]

      0x3b57b78: <multiple use>
          0x3b57b78: <multiple use>
          0x3b7b220: i32 = FrameIndex<2> [ORD=67] [ID=-3]

          0x3b7be30: <multiple use>
        0x3b779c0: f32,ch = load 0x3b57b78, 0x3b7b220, 0x3b7be30<LD4[%3]> [ORD=67] [ID=-3]

            0x3b57b78: <multiple use>
            0x3b79d30: i32 = GlobalAddress<i32* @NH_STARTER_SHUTOFF> 0 [ORD=68] [ID=-3]

            0x3b7be30: <multiple use>
          0x3b77cc0: i32,ch = load 0x3b57b78, 0x3b79d30, 0x3b7be30<LD4[@NH_STARTER_SHUTOFF]> [ORD=68] [ID=-3]

        0x3b77dc0: f32 = sint_to_fp 0x3b77cc0 [ORD=69] [ID=-3]

        0x3b79630: ch = setuge [ID=-3]

      0x3b778c0: i32 = setcc 0x3b779c0, 0x3b77dc0, 0x3b79630 [ID=-3]

      0x3b75390: ch = BasicBlock<startup_starter3.if.else28 0x3b95d70> [ID=-3]

    0x3b7a820: ch = brcond 0x3b57b78, 0x3b778c0, 0x3b75390 [ID=-3]

    0x3b771c0: ch = BasicBlock<startup_starter3.if.then15 0x3b95a00> [ID=-3]

  0x3b7bf30: ch = br 0x3b7a820, 0x3b771c0 [ID=-3]


Legalized selection DAG: BB#3 'startup_starter3:startup_starter3.if.else11'
SelectionDAG has 17 nodes:
  0x3b57b78: ch = EntryToken [ORD=67] [ID=0]

  0x3b7be30: i32 = undef [ORD=67] [ID=2]

      0x3b57b78: <multiple use>
          0x3b57b78: <multiple use>
          0x3b7b220: i32 = FrameIndex<2> [ORD=67] [ID=1]

          0x3b7be30: <multiple use>
        0x3b779c0: f32,ch = load 0x3b57b78, 0x3b7b220, 0x3b7be30<LD4[%3]> [ORD=67] [ID=7]

            0x3b57b78: <multiple use>
                0x3b777c0: i32 = TargetGlobalAddress<i32* @NH_STARTER_SHUTOFF> 0 [TF=2]

              0x3b7b830: i32 = REDEFINEISD::Hi 0x3b777c0

                0x3b79530: i32 = TargetGlobalAddress<i32* @NH_STARTER_SHUTOFF> 0 [TF=3]

              0x3b776c0: i32 = REDEFINEISD::Lo 0x3b79530

            0x3b79030: i32 = add 0x3b7b830, 0x3b776c0

            0x3b7be30: <multiple use>
          0x3b77cc0: i32,ch = load 0x3b57b78, 0x3b79030, 0x3b7be30<LD4[@NH_STARTER_SHUTOFF]> [ORD=68] [ID=8]

        0x3b77dc0: f32 = sint_to_fp 0x3b77cc0 [ORD=69] [ID=9]

        0x3b79630: ch = setuge [ID=6]

      0x3b778c0: i32 = setcc 0x3b779c0, 0x3b77dc0, 0x3b79630 [ID=10]

      0x3b75390: ch = BasicBlock<startup_starter3.if.else28 0x3b95d70> [ID=4]

    0x3b7a820: ch = brcond 0x3b57b78, 0x3b778c0, 0x3b75390 [ID=11]

    0x3b771c0: ch = BasicBlock<startup_starter3.if.then15 0x3b95a00> [ID=5]

  0x3b7bf30: ch = br 0x3b7a820, 0x3b771c0 [ID=12]


Optimized legalized selection DAG: BB#3 'startup_starter3:startup_starter3.if.else11'
SelectionDAG has 17 nodes:
  0x3b57b78: ch = EntryToken [ORD=67] [ID=0]

  0x3b7be30: i32 = undef [ORD=67] [ID=2]

      0x3b57b78: <multiple use>
          0x3b57b78: <multiple use>
          0x3b7b220: i32 = FrameIndex<2> [ORD=67] [ID=1]

          0x3b7be30: <multiple use>
        0x3b779c0: f32,ch = load 0x3b57b78, 0x3b7b220, 0x3b7be30<LD4[%3]> [ORD=67] [ID=7]

            0x3b57b78: <multiple use>
                0x3b777c0: i32 = TargetGlobalAddress<i32* @NH_STARTER_SHUTOFF> 0 [TF=2]

              0x3b7b830: i32 = REDEFINEISD::Hi 0x3b777c0

                0x3b79530: i32 = TargetGlobalAddress<i32* @NH_STARTER_SHUTOFF> 0 [TF=3]

              0x3b776c0: i32 = REDEFINEISD::Lo 0x3b79530

            0x3b79030: i32 = add 0x3b7b830, 0x3b776c0

            0x3b7be30: <multiple use>
          0x3b77cc0: i32,ch = load 0x3b57b78, 0x3b79030, 0x3b7be30<LD4[@NH_STARTER_SHUTOFF]> [ORD=68] [ID=8]

        0x3b77dc0: f32 = sint_to_fp 0x3b77cc0 [ORD=69] [ID=9]

        0x3b79630: ch = setuge [ID=6]

      0x3b778c0: i32 = setcc 0x3b779c0, 0x3b77dc0, 0x3b79630 [ID=10]

      0x3b75390: ch = BasicBlock<startup_starter3.if.else28 0x3b95d70> [ID=4]

    0x3b7a820: ch = brcond 0x3b57b78, 0x3b778c0, 0x3b75390 [ID=11]

    0x3b771c0: ch = BasicBlock<startup_starter3.if.then15 0x3b95a00> [ID=5]

  0x3b7bf30: ch = br 0x3b7a820, 0x3b771c0 [ID=12]


===== Instruction selection begins: BB#3 'startup_starter3.if.else11'
ISEL: Starting pattern match on root node: 0x3b7bf30: ch = br 0x3b7a820, 0x3b771c0 [ID=16]

  Initial Opcode index to 1938
  Morphed node: 0x3b7bf30: ch = JAL 0x3b771c0, 0x3b7a820

ISEL: Match complete!
=> 0x3b7bf30: ch = JAL 0x3b771c0, 0x3b7a820

ISEL: Starting pattern match on root node: 0x3b7a820: ch = brcond 0x3b57b78, 0x3b778c0, 0x3b75390 [ID=15]

  Initial Opcode index to 1439
  Match failed at index 1449
  Continuing at 1676
  Morphed node: 0x3b7a820: ch = BNE 0x3b75390, 0x3b778c0, 0x3b79d30, 0x3b57b78

ISEL: Match complete!
=> 0x3b7a820: ch = BNE 0x3b75390, 0x3b778c0, 0x3b79d30, 0x3b57b78

ISEL: Starting pattern match on root node: 0x3b778c0: i32 = setcc 0x3b779c0, 0x3b77dc0, 0x3b79630 [ID=14]

  Initial Opcode index to 642
  Match failed at index 648
  Continuing at 688
  Match failed at index 690
  Continuing at 899
  Skipped scope entry (due to false predicate) at index 908, continuing at 920
  Skipped scope entry (due to false predicate) at index 921, continuing at 933
  Skipped scope entry (due to false predicate) at index 934, continuing at 946
  Skipped scope entry (due to false predicate) at index 947, continuing at 959
  Skipped scope entry (due to false predicate) at index 960, continuing at 972
  Skipped scope entry (due to false predicate) at index 973, continuing at 985
  Skipped scope entry (due to false predicate) at index 986, continuing at 998
  Skipped scope entry (due to false predicate) at index 999, continuing at 1011
  Skipped scope entry (due to false predicate) at index 1012, continuing at 1024
  Morphed node: 0x3b778c0: i32 = FULE_S 0x3b779c0, 0x3b77dc0

ISEL: Match complete!
=> 0x3b778c0: i32 = FULE_S 0x3b779c0, 0x3b77dc0

ISEL: Starting pattern match on root node: 0x3b77dc0: f32 = sint_to_fp 0x3b77cc0 [ORD=69] [ID=13]

  Initial Opcode index to 2155
  Morphed node: 0x3b77dc0: f32 = FCVT_S_W_RDY 0x3b77cc0 [ORD=69]

ISEL: Match complete!
=> 0x3b77dc0: f32 = FCVT_S_W_RDY 0x3b77cc0 [ORD=69]

ISEL: Starting pattern match on root node: 0x3b77cc0: i32,ch = load 0x3b57b78, 0x3b79030, 0x3b7be30<LD4[@NH_STARTER_SHUTOFF]> [ORD=68] [ID=12]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x3b77cc0: i32,ch = LW 0x3b79030, 0x3b79630, 0x3b57b78<Mem:LD4[@NH_STARTER_SHUTOFF]> [ORD=68]

ISEL: Match complete!
=> 0x3b77cc0: i32,ch = LW 0x3b79030, 0x3b79630, 0x3b57b78<Mem:LD4[@NH_STARTER_SHUTOFF]> [ORD=68]

ISEL: Starting pattern match on root node: 0x3b79030: i32 = add 0x3b7b830, 0x3b776c0 [ID=11]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x3b79030: i32 = ADD 0x3b776c0, 0x3b7b830

ISEL: Match complete!
=> 0x3b79030: i32 = ADD 0x3b776c0, 0x3b7b830

ISEL: Starting pattern match on root node: 0x3b776c0: i32 = REDEFINEISD::Lo 0x3b79530 [ID=10]

  Initial Opcode index to 1204
  Morphed node: 0x3b776c0: i32 = ADDI 0x3b79d30, 0x3b79530

ISEL: Match complete!
=> 0x3b776c0: i32 = ADDI 0x3b79d30, 0x3b79530

ISEL: Starting pattern match on root node: 0x3b7b830: i32 = REDEFINEISD::Hi 0x3b777c0 [ID=9]

  Initial Opcode index to 1186
  Morphed node: 0x3b7b830: i32 = LUI 0x3b777c0

ISEL: Match complete!
=> 0x3b7b830: i32 = LUI 0x3b777c0

ISEL: Starting pattern match on root node: 0x3b779c0: f32,ch = load 0x3b57b78, 0x3b7b220, 0x3b7be30<LD4[%3]> [ORD=67] [ID=8]

  Initial Opcode index to 5
  TypeSwitch[f32] from 10 to 159
  Morphed node: 0x3b779c0: f32,ch = FLW 0x3b7b220, 0x3b79630, 0x3b57b78<Mem:LD4[%3]> [ORD=67]

ISEL: Match complete!
=> 0x3b779c0: f32,ch = FLW 0x3b7b220, 0x3b79630, 0x3b57b78<Mem:LD4[%3]> [ORD=67]

=> 0x3b79530: i32 = TargetGlobalAddress<i32* @NH_STARTER_SHUTOFF> 0 [TF=3]

=> 0x3b777c0: i32 = TargetGlobalAddress<i32* @NH_STARTER_SHUTOFF> 0 [TF=2]

=> 0x3b771c0: ch = BasicBlock<startup_starter3.if.then15 0x3b95a00>

=> 0x3b75390: ch = BasicBlock<startup_starter3.if.else28 0x3b95d70>

=> 0x3b57b78: ch = EntryToken [ORD=67]

===== Instruction selection ends:
Selected selection DAG: BB#3 'startup_starter3:startup_starter3.if.else11'
SelectionDAG has 19 nodes:
  0x3b57b78: ch = EntryToken [ORD=67]

  0x3b79d30: i32 = Register %zero

  0x3b79630: i32 = TargetConstant<0>

    0x3b771c0: ch = BasicBlock<startup_starter3.if.then15 0x3b95a00>

      0x3b75390: ch = BasicBlock<startup_starter3.if.else28 0x3b95d70>

            0x3b7be30: i32 = Register %t5

            0x3b7bb30: i32 = TargetFrameIndex<2>

          0x3b7b220: i32 = ADDI 0x3b7be30, 0x3b7bb30 [ORD=67]

          0x3b79630: <multiple use>
          0x3b57b78: <multiple use>
        0x3b779c0: f32,ch = FLW 0x3b7b220, 0x3b79630, 0x3b57b78<Mem:LD4[%3]> [ORD=67]

                0x3b79d30: <multiple use>
                0x3b79530: i32 = TargetGlobalAddress<i32* @NH_STARTER_SHUTOFF> 0 [TF=3]

              0x3b776c0: i32 = ADDI 0x3b79d30, 0x3b79530

                0x3b777c0: i32 = TargetGlobalAddress<i32* @NH_STARTER_SHUTOFF> 0 [TF=2]

              0x3b7b830: i32 = LUI 0x3b777c0

            0x3b79030: i32 = ADD 0x3b776c0, 0x3b7b830

            0x3b79630: <multiple use>
            0x3b57b78: <multiple use>
          0x3b77cc0: i32,ch = LW 0x3b79030, 0x3b79630, 0x3b57b78<Mem:LD4[@NH_STARTER_SHUTOFF]> [ORD=68]

        0x3b77dc0: f32 = FCVT_S_W_RDY 0x3b77cc0 [ORD=69]

      0x3b778c0: i32 = FULE_S 0x3b779c0, 0x3b77dc0

      0x3b79d30: <multiple use>
      0x3b57b78: <multiple use>
    0x3b7a820: ch = BNE 0x3b75390, 0x3b778c0, 0x3b79d30, 0x3b57b78

  0x3b7bf30: ch = JAL 0x3b771c0, 0x3b7a820


********** List Scheduling BB#3 'startup_starter3.if.else11' **********
SU(0): 0x3b7bf30: ch = JAL 0x3b771c0, 0x3b7a820 [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x3b7a820: ch = BNE 0x3b75390, 0x3b778c0, 0x3b79d30, 0x3b57b78 [ID=1]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
   val SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x3b778c0: i32 = FULE_S 0x3b779c0, 0x3b77dc0 [ID=2]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
   val SU(8): Latency=1
   val SU(3): Latency=1
  Successors:
   val SU(1): Latency=1

SU(3): 0x3b77dc0: f32 = FCVT_S_W_RDY 0x3b77cc0 [ORD=69] [ID=3]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 3
  Height             : 3
  Predecessors:
   val SU(4): Latency=1
  Successors:
   val SU(2): Latency=1

SU(4): 0x3b77cc0: i32,ch = LW 0x3b79030, 0x3b79630, 0x3b57b78<Mem:LD4[@NH_STARTER_SHUTOFF]> [ORD=68] [ID=4]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 4
  Predecessors:
   val SU(5): Latency=1
  Successors:
   val SU(3): Latency=1

SU(5): 0x3b79030: i32 = ADD 0x3b776c0, 0x3b7b830 [ID=5]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 5
  Predecessors:
   val SU(7): Latency=1
   val SU(6): Latency=1
  Successors:
   val SU(4): Latency=1

SU(6): 0x3b7b830: i32 = LUI 0x3b777c0 [ID=6]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
   val SU(5): Latency=1

SU(7): 0x3b776c0: i32 = ADDI 0x3b79d30, 0x3b79530 [ID=7]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
   val SU(5): Latency=1

SU(8): 0x3b779c0: f32,ch = FLW 0x3b7b220, 0x3b79630, 0x3b57b78<Mem:LD4[%3]> [ORD=67] [ID=8]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(9): Latency=1
  Successors:
   val SU(2): Latency=1

SU(9): 0x3b7b220: i32 = ADDI 0x3b7be30, 0x3b7bb30 [ORD=67] [ID=9]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(8): Latency=1


Examining Available:
Height 0: SU(0): 0x3b7bf30: ch = JAL 0x3b771c0, 0x3b7a820 [ID=0]


*** Scheduling [0]: SU(0): 0x3b7bf30: ch = JAL 0x3b771c0, 0x3b7a820 [ID=0]


Examining Available:
Height 1: SU(1): 0x3b7a820: ch = BNE 0x3b75390, 0x3b778c0, 0x3b79d30, 0x3b57b78 [ID=1]


*** Scheduling [1]: SU(1): 0x3b7a820: ch = BNE 0x3b75390, 0x3b778c0, 0x3b79d30, 0x3b57b78 [ID=1]


Examining Available:
Height 2: SU(2): 0x3b778c0: i32 = FULE_S 0x3b779c0, 0x3b77dc0 [ID=2]


*** Scheduling [2]: SU(2): 0x3b778c0: i32 = FULE_S 0x3b779c0, 0x3b77dc0 [ID=2]


Examining Available:
Height 3: SU(3): 0x3b77dc0: f32 = FCVT_S_W_RDY 0x3b77cc0 [ORD=69] [ID=3]

Height 3: SU(8): 0x3b779c0: f32,ch = FLW 0x3b7b220, 0x3b79630, 0x3b57b78<Mem:LD4[%3]> [ORD=67] [ID=8]


*** Scheduling [3]: SU(3): 0x3b77dc0: f32 = FCVT_S_W_RDY 0x3b77cc0 [ORD=69] [ID=3]


Examining Available:
Height 4: SU(4): 0x3b77cc0: i32,ch = LW 0x3b79030, 0x3b79630, 0x3b57b78<Mem:LD4[@NH_STARTER_SHUTOFF]> [ORD=68] [ID=4]

Height 3: SU(8): 0x3b779c0: f32,ch = FLW 0x3b7b220, 0x3b79630, 0x3b57b78<Mem:LD4[%3]> [ORD=67] [ID=8]


*** Scheduling [4]: SU(4): 0x3b77cc0: i32,ch = LW 0x3b79030, 0x3b79630, 0x3b57b78<Mem:LD4[@NH_STARTER_SHUTOFF]> [ORD=68] [ID=4]


Examining Available:
Height 5: SU(5): 0x3b79030: i32 = ADD 0x3b776c0, 0x3b7b830 [ID=5]

Height 3: SU(8): 0x3b779c0: f32,ch = FLW 0x3b7b220, 0x3b79630, 0x3b57b78<Mem:LD4[%3]> [ORD=67] [ID=8]


*** Scheduling [5]: SU(5): 0x3b79030: i32 = ADD 0x3b776c0, 0x3b7b830 [ID=5]


Examining Available:
Height 6: SU(7): 0x3b776c0: i32 = ADDI 0x3b79d30, 0x3b79530 [ID=7]

Height 6: SU(6): 0x3b7b830: i32 = LUI 0x3b777c0 [ID=6]

Height 3: SU(8): 0x3b779c0: f32,ch = FLW 0x3b7b220, 0x3b79630, 0x3b57b78<Mem:LD4[%3]> [ORD=67] [ID=8]


*** Scheduling [6]: SU(7): 0x3b776c0: i32 = ADDI 0x3b79d30, 0x3b79530 [ID=7]


Examining Available:
Height 6: SU(6): 0x3b7b830: i32 = LUI 0x3b777c0 [ID=6]

Height 3: SU(8): 0x3b779c0: f32,ch = FLW 0x3b7b220, 0x3b79630, 0x3b57b78<Mem:LD4[%3]> [ORD=67] [ID=8]


*** Scheduling [7]: SU(6): 0x3b7b830: i32 = LUI 0x3b777c0 [ID=6]


Examining Available:
Height 3: SU(8): 0x3b779c0: f32,ch = FLW 0x3b7b220, 0x3b79630, 0x3b57b78<Mem:LD4[%3]> [ORD=67] [ID=8]


*** Scheduling [8]: SU(8): 0x3b779c0: f32,ch = FLW 0x3b7b220, 0x3b79630, 0x3b57b78<Mem:LD4[%3]> [ORD=67] [ID=8]


Examining Available:
Height 9: SU(9): 0x3b7b220: i32 = ADDI 0x3b7be30, 0x3b7bb30 [ORD=67] [ID=9]


*** Scheduling [9]: SU(9): 0x3b7b220: i32 = ADDI 0x3b7be30, 0x3b7bb30 [ORD=67] [ID=9]

*** Final schedule ***
SU(9): 0x3b7b220: i32 = ADDI 0x3b7be30, 0x3b7bb30 [ORD=67] [ID=9]

SU(8): 0x3b779c0: f32,ch = FLW 0x3b7b220, 0x3b79630, 0x3b57b78<Mem:LD4[%3]> [ORD=67] [ID=8]

SU(6): 0x3b7b830: i32 = LUI 0x3b777c0 [ID=6]

SU(7): 0x3b776c0: i32 = ADDI 0x3b79d30, 0x3b79530 [ID=7]

SU(5): 0x3b79030: i32 = ADD 0x3b776c0, 0x3b7b830 [ID=5]

SU(4): 0x3b77cc0: i32,ch = LW 0x3b79030, 0x3b79630, 0x3b57b78<Mem:LD4[@NH_STARTER_SHUTOFF]> [ORD=68] [ID=4]

SU(3): 0x3b77dc0: f32 = FCVT_S_W_RDY 0x3b77cc0 [ORD=69] [ID=3]

SU(2): 0x3b778c0: i32 = FULE_S 0x3b779c0, 0x3b77dc0 [ID=2]

SU(1): 0x3b7a820: ch = BNE 0x3b75390, 0x3b778c0, 0x3b79d30, 0x3b57b78 [ID=1]

SU(0): 0x3b7bf30: ch = JAL 0x3b771c0, 0x3b7a820 [ID=0]


Total amount of phi nodes to update: 0
store visit is after?  store float 0.000000e+00, float* %4, align 4
I was here to add float 0.000000e+00
I was here to add   %4 = alloca float, align 4
whats in dag after store?SelectionDAG has 6 nodes:
  0x3b79630: i32 = Constant<0>

    0x3b57b78: ch = EntryToken [ORD=71]

    0x3b7bb30: f32 = ConstantFP<0.000000e+00> [ORD=71]

    0x3b7be30: i32 = FrameIndex<3> [ORD=71]

    0x3b79d30: i32 = undef [ORD=71]

  0x3b7bf30: ch = store 0x3b57b78, 0x3b7bb30, 0x3b7be30, 0x3b79d30<ST4[%4]> [ORD=71]


store visit is after?  store i32 0, i32* @glob_sg_bit0, align 4
I was here to add i32 0
I was here to add @glob_sg_bit0 = common global i32 0, align 4
whats in dag after store?SelectionDAG has 8 nodes:
  0x3b79d30: i32 = undef [ORD=71]

      0x3b57b78: ch = EntryToken [ORD=71]

      0x3b7bb30: f32 = ConstantFP<0.000000e+00> [ORD=71]

      0x3b7be30: i32 = FrameIndex<3> [ORD=71]

      0x3b79d30: <multiple use>
    0x3b7bf30: ch = store 0x3b57b78, 0x3b7bb30, 0x3b7be30, 0x3b79d30<ST4[%4]> [ORD=71]

    0x3b79630: i32 = Constant<0> [ORD=72]

    0x3b7a820: i32 = GlobalAddress<i32* @glob_sg_bit0> 0 [ORD=72]

    0x3b79d30: <multiple use>
  0x3b778c0: ch = store 0x3b7bf30, 0x3b79630, 0x3b7a820, 0x3b79d30<ST4[@glob_sg_bit0]> [ORD=72]


store visit is after?  store i32 0, i32* @glob_sg_bit1, align 4
I was here to add @glob_sg_bit1 = common global i32 0, align 4
whats in dag after store?SelectionDAG has 10 nodes:
  0x3b79630: i32 = Constant<0> [ORD=72]

  0x3b79d30: i32 = undef [ORD=71]

        0x3b57b78: ch = EntryToken [ORD=71]

        0x3b7bb30: f32 = ConstantFP<0.000000e+00> [ORD=71]

        0x3b7be30: i32 = FrameIndex<3> [ORD=71]

        0x3b79d30: <multiple use>
      0x3b7bf30: ch = store 0x3b57b78, 0x3b7bb30, 0x3b7be30, 0x3b79d30<ST4[%4]> [ORD=71]

      0x3b79630: <multiple use>
      0x3b7a820: i32 = GlobalAddress<i32* @glob_sg_bit0> 0 [ORD=72]

      0x3b79d30: <multiple use>
    0x3b778c0: ch = store 0x3b7bf30, 0x3b79630, 0x3b7a820, 0x3b79d30<ST4[@glob_sg_bit0]> [ORD=72]

    0x3b79630: <multiple use>
    0x3b77dc0: i32 = GlobalAddress<i32* @glob_sg_bit1> 0 [ORD=73]

    0x3b79d30: <multiple use>
  0x3b77cc0: ch = store 0x3b778c0, 0x3b79630, 0x3b77dc0, 0x3b79d30<ST4[@glob_sg_bit1]> [ORD=73]


Initial selection DAG: BB#9 'startup_starter3:startup_starter3.if.else28'
SelectionDAG has 12 nodes:
  0x3b79630: i32 = Constant<0> [ORD=72]

  0x3b79d30: i32 = undef [ORD=71]

          0x3b57b78: ch = EntryToken [ORD=71]

          0x3b7bb30: f32 = ConstantFP<0.000000e+00> [ORD=71]

          0x3b7be30: i32 = FrameIndex<3> [ORD=71]

          0x3b79d30: <multiple use>
        0x3b7bf30: ch = store 0x3b57b78, 0x3b7bb30, 0x3b7be30, 0x3b79d30<ST4[%4]> [ORD=71]

        0x3b79630: <multiple use>
        0x3b7a820: i32 = GlobalAddress<i32* @glob_sg_bit0> 0 [ORD=72]

        0x3b79d30: <multiple use>
      0x3b778c0: ch = store 0x3b7bf30, 0x3b79630, 0x3b7a820, 0x3b79d30<ST4[@glob_sg_bit0]> [ORD=72]

      0x3b79630: <multiple use>
      0x3b77dc0: i32 = GlobalAddress<i32* @glob_sg_bit1> 0 [ORD=73]

      0x3b79d30: <multiple use>
    0x3b77cc0: ch = store 0x3b778c0, 0x3b79630, 0x3b77dc0, 0x3b79d30<ST4[@glob_sg_bit1]> [ORD=73]

    0x3b79030: ch = BasicBlock<startup_starter3.return 0x3b95f80>

  0x3b776c0: ch = br 0x3b77cc0, 0x3b79030



Replacing.3 0x3b7bf30: ch = store 0x3b57b78, 0x3b7bb30, 0x3b7be30, 0x3b79d30<ST4[%4]> [ORD=71]

With: 0x3b7b830: ch = store 0x3b57b78, 0x3b79630, 0x3b7be30, 0x3b79d30<ST4[%4]>

Optimized lowered selection DAG: BB#9 'startup_starter3:startup_starter3.if.else28'
SelectionDAG has 11 nodes:
  0x3b79630: i32 = Constant<0> [ORD=72]

  0x3b79d30: i32 = undef [ORD=71]

          0x3b57b78: ch = EntryToken [ORD=71]

          0x3b79630: <multiple use>
          0x3b7be30: i32 = FrameIndex<3> [ORD=71]

          0x3b79d30: <multiple use>
        0x3b7b830: ch = store 0x3b57b78, 0x3b79630, 0x3b7be30, 0x3b79d30<ST4[%4]>

        0x3b79630: <multiple use>
        0x3b7a820: i32 = GlobalAddress<i32* @glob_sg_bit0> 0 [ORD=72]

        0x3b79d30: <multiple use>
      0x3b778c0: ch = store 0x3b7b830, 0x3b79630, 0x3b7a820, 0x3b79d30<ST4[@glob_sg_bit0]> [ORD=72]

      0x3b79630: <multiple use>
      0x3b77dc0: i32 = GlobalAddress<i32* @glob_sg_bit1> 0 [ORD=73]

      0x3b79d30: <multiple use>
    0x3b77cc0: ch = store 0x3b778c0, 0x3b79630, 0x3b77dc0, 0x3b79d30<ST4[@glob_sg_bit1]> [ORD=73]

    0x3b79030: ch = BasicBlock<startup_starter3.return 0x3b95f80>

  0x3b776c0: ch = br 0x3b77cc0, 0x3b79030


Legally typed node: 0x3b79030: ch = BasicBlock<startup_starter3.return 0x3b95f80> [ID=0]

Legally typed node: 0x3b77dc0: i32 = GlobalAddress<i32* @glob_sg_bit1> 0 [ORD=73] [ID=0]

Legally typed node: 0x3b7a820: i32 = GlobalAddress<i32* @glob_sg_bit0> 0 [ORD=72] [ID=0]

Legally typed node: 0x3b79d30: i32 = undef [ORD=71] [ID=0]

Legally typed node: 0x3b79630: i32 = Constant<0> [ORD=72] [ID=0]

Legally typed node: 0x3b7be30: i32 = FrameIndex<3> [ORD=71] [ID=0]

Legally typed node: 0x3b57b78: ch = EntryToken [ORD=71] [ID=0]

Legally typed node: 0x3b7b830: ch = store 0x3b57b78, 0x3b79630, 0x3b7be30, 0x3b79d30<ST4[%4]> [ID=0]

Legally typed node: 0x3b778c0: ch = store 0x3b7b830, 0x3b79630, 0x3b7a820, 0x3b79d30<ST4[@glob_sg_bit0]> [ORD=72] [ID=0]

Legally typed node: 0x3b77cc0: ch = store 0x3b778c0, 0x3b79630, 0x3b77dc0, 0x3b79d30<ST4[@glob_sg_bit1]> [ORD=73] [ID=0]

Legally typed node: 0x3b776c0: ch = br 0x3b77cc0, 0x3b79030 [ID=0]

Legally typed node: 0x7fffa88b7260: ch = handlenode 0x3b776c0 [ID=0]

Type-legalized selection DAG: BB#9 'startup_starter3:startup_starter3.if.else28'
SelectionDAG has 11 nodes:
  0x3b79630: i32 = Constant<0> [ORD=72] [ID=-3]

  0x3b79d30: i32 = undef [ORD=71] [ID=-3]

          0x3b57b78: ch = EntryToken [ORD=71] [ID=-3]

          0x3b79630: <multiple use>
          0x3b7be30: i32 = FrameIndex<3> [ORD=71] [ID=-3]

          0x3b79d30: <multiple use>
        0x3b7b830: ch = store 0x3b57b78, 0x3b79630, 0x3b7be30, 0x3b79d30<ST4[%4]> [ID=-3]

        0x3b79630: <multiple use>
        0x3b7a820: i32 = GlobalAddress<i32* @glob_sg_bit0> 0 [ORD=72] [ID=-3]

        0x3b79d30: <multiple use>
      0x3b778c0: ch = store 0x3b7b830, 0x3b79630, 0x3b7a820, 0x3b79d30<ST4[@glob_sg_bit0]> [ORD=72] [ID=-3]

      0x3b79630: <multiple use>
      0x3b77dc0: i32 = GlobalAddress<i32* @glob_sg_bit1> 0 [ORD=73] [ID=-3]

      0x3b79d30: <multiple use>
    0x3b77cc0: ch = store 0x3b778c0, 0x3b79630, 0x3b77dc0, 0x3b79d30<ST4[@glob_sg_bit1]> [ORD=73] [ID=-3]

    0x3b79030: ch = BasicBlock<startup_starter3.return 0x3b95f80> [ID=-3]

  0x3b776c0: ch = br 0x3b77cc0, 0x3b79030 [ID=-3]


Legalized selection DAG: BB#9 'startup_starter3:startup_starter3.if.else28'
SelectionDAG has 19 nodes:
  0x3b79630: i32 = Constant<0> [ORD=72] [ID=2]

  0x3b79d30: i32 = undef [ORD=71] [ID=3]

          0x3b57b78: ch = EntryToken [ORD=71] [ID=0]

          0x3b79630: <multiple use>
          0x3b7be30: i32 = FrameIndex<3> [ORD=71] [ID=1]

          0x3b79d30: <multiple use>
        0x3b7b830: ch = store 0x3b57b78, 0x3b79630, 0x3b7be30, 0x3b79d30<ST4[%4]> [ID=7]

        0x3b79630: <multiple use>
            0x3b77dc0: i32 = TargetGlobalAddress<i32* @glob_sg_bit0> 0 [TF=2]

          0x3b75390: i32 = REDEFINEISD::Hi 0x3b77dc0

            0x3b771c0: i32 = TargetGlobalAddress<i32* @glob_sg_bit0> 0 [TF=3]

          0x3b7b220: i32 = REDEFINEISD::Lo 0x3b771c0

        0x3b76090: i32 = add 0x3b75390, 0x3b7b220

        0x3b79d30: <multiple use>
      0x3b778c0: ch = store 0x3b7b830, 0x3b79630, 0x3b76090, 0x3b79d30<ST4[@glob_sg_bit0]> [ORD=72] [ID=8]

      0x3b79630: <multiple use>
          0x3b7bb30: i32 = TargetGlobalAddress<i32* @glob_sg_bit1> 0 [TF=2]

        0x3b779c0: i32 = REDEFINEISD::Hi 0x3b7bb30

          0x3b7bf30: i32 = TargetGlobalAddress<i32* @glob_sg_bit1> 0 [TF=3]

        0x3b79530: i32 = REDEFINEISD::Lo 0x3b7bf30

      0x3b777c0: i32 = add 0x3b779c0, 0x3b79530

      0x3b79d30: <multiple use>
    0x3b77cc0: ch = store 0x3b778c0, 0x3b79630, 0x3b777c0, 0x3b79d30<ST4[@glob_sg_bit1]> [ORD=73] [ID=9]

    0x3b79030: ch = BasicBlock<startup_starter3.return 0x3b95f80> [ID=6]

  0x3b776c0: ch = br 0x3b77cc0, 0x3b79030 [ID=10]


Optimized legalized selection DAG: BB#9 'startup_starter3:startup_starter3.if.else28'
SelectionDAG has 19 nodes:
  0x3b79630: i32 = Constant<0> [ORD=72] [ID=2]

  0x3b79d30: i32 = undef [ORD=71] [ID=3]

          0x3b57b78: ch = EntryToken [ORD=71] [ID=0]

          0x3b79630: <multiple use>
          0x3b7be30: i32 = FrameIndex<3> [ORD=71] [ID=1]

          0x3b79d30: <multiple use>
        0x3b7b830: ch = store 0x3b57b78, 0x3b79630, 0x3b7be30, 0x3b79d30<ST4[%4]> [ID=7]

        0x3b79630: <multiple use>
            0x3b77dc0: i32 = TargetGlobalAddress<i32* @glob_sg_bit0> 0 [TF=2]

          0x3b75390: i32 = REDEFINEISD::Hi 0x3b77dc0

            0x3b771c0: i32 = TargetGlobalAddress<i32* @glob_sg_bit0> 0 [TF=3]

          0x3b7b220: i32 = REDEFINEISD::Lo 0x3b771c0

        0x3b76090: i32 = add 0x3b75390, 0x3b7b220

        0x3b79d30: <multiple use>
      0x3b778c0: ch = store 0x3b7b830, 0x3b79630, 0x3b76090, 0x3b79d30<ST4[@glob_sg_bit0]> [ORD=72] [ID=8]

      0x3b79630: <multiple use>
          0x3b7bb30: i32 = TargetGlobalAddress<i32* @glob_sg_bit1> 0 [TF=2]

        0x3b779c0: i32 = REDEFINEISD::Hi 0x3b7bb30

          0x3b7bf30: i32 = TargetGlobalAddress<i32* @glob_sg_bit1> 0 [TF=3]

        0x3b79530: i32 = REDEFINEISD::Lo 0x3b7bf30

      0x3b777c0: i32 = add 0x3b779c0, 0x3b79530

      0x3b79d30: <multiple use>
    0x3b77cc0: ch = store 0x3b778c0, 0x3b79630, 0x3b777c0, 0x3b79d30<ST4[@glob_sg_bit1]> [ORD=73] [ID=9]

    0x3b79030: ch = BasicBlock<startup_starter3.return 0x3b95f80> [ID=6]

  0x3b776c0: ch = br 0x3b77cc0, 0x3b79030 [ID=10]


===== Instruction selection begins: BB#9 'startup_starter3.if.else28'
ISEL: Starting pattern match on root node: 0x3b776c0: ch = br 0x3b77cc0, 0x3b79030 [ID=18]

  Initial Opcode index to 1938
  Morphed node: 0x3b776c0: ch = JAL 0x3b79030, 0x3b77cc0

ISEL: Match complete!
=> 0x3b776c0: ch = JAL 0x3b79030, 0x3b77cc0

ISEL: Starting pattern match on root node: 0x3b77cc0: ch = store 0x3b778c0, 0x3b79630, 0x3b777c0, 0x3b79d30<ST4[@glob_sg_bit1]> [ORD=73] [ID=17]

  Initial Opcode index to 178
  Morphed node: 0x3b77cc0: ch = SW 0x3b79630, 0x3b777c0, 0x3b7a820, 0x3b778c0<Mem:ST4[@glob_sg_bit1]> [ORD=73]

ISEL: Match complete!
=> 0x3b77cc0: ch = SW 0x3b79630, 0x3b777c0, 0x3b7a820, 0x3b778c0<Mem:ST4[@glob_sg_bit1]> [ORD=73]

ISEL: Starting pattern match on root node: 0x3b778c0: ch = store 0x3b7b830, 0x3b79630, 0x3b76090, 0x3b79d30<ST4[@glob_sg_bit0]> [ORD=72] [ID=16]

  Initial Opcode index to 178
  Morphed node: 0x3b778c0: ch = SW 0x3b79630, 0x3b76090, 0x3b7a820, 0x3b7b830<Mem:ST4[@glob_sg_bit0]> [ORD=72]

ISEL: Match complete!
=> 0x3b778c0: ch = SW 0x3b79630, 0x3b76090, 0x3b7a820, 0x3b7b830<Mem:ST4[@glob_sg_bit0]> [ORD=72]

ISEL: Starting pattern match on root node: 0x3b76090: i32 = add 0x3b75390, 0x3b7b220 [ID=15]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x3b76090: i32 = ADD 0x3b7b220, 0x3b75390

ISEL: Match complete!
=> 0x3b76090: i32 = ADD 0x3b7b220, 0x3b75390

ISEL: Starting pattern match on root node: 0x3b777c0: i32 = add 0x3b779c0, 0x3b79530 [ID=14]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x3b777c0: i32 = ADD 0x3b79530, 0x3b779c0

ISEL: Match complete!
=> 0x3b777c0: i32 = ADD 0x3b79530, 0x3b779c0

ISEL: Starting pattern match on root node: 0x3b7b220: i32 = REDEFINEISD::Lo 0x3b771c0 [ID=13]

  Initial Opcode index to 1204
  Morphed node: 0x3b7b220: i32 = ADDI 0x3b75a90, 0x3b771c0

ISEL: Match complete!
=> 0x3b7b220: i32 = ADDI 0x3b75a90, 0x3b771c0

ISEL: Starting pattern match on root node: 0x3b75390: i32 = REDEFINEISD::Hi 0x3b77dc0 [ID=12]

  Initial Opcode index to 1186
  Morphed node: 0x3b75390: i32 = LUI 0x3b77dc0

ISEL: Match complete!
=> 0x3b75390: i32 = LUI 0x3b77dc0

ISEL: Starting pattern match on root node: 0x3b79530: i32 = REDEFINEISD::Lo 0x3b7bf30 [ID=11]

  Initial Opcode index to 1204
  Morphed node: 0x3b79530: i32 = ADDI 0x3b75a90, 0x3b7bf30

ISEL: Match complete!
=> 0x3b79530: i32 = ADDI 0x3b75a90, 0x3b7bf30

ISEL: Starting pattern match on root node: 0x3b779c0: i32 = REDEFINEISD::Hi 0x3b7bb30 [ID=10]

  Initial Opcode index to 1186
  Morphed node: 0x3b779c0: i32 = LUI 0x3b7bb30

ISEL: Match complete!
=> 0x3b779c0: i32 = LUI 0x3b7bb30

ISEL: Starting pattern match on root node: 0x3b7b830: ch = store 0x3b57b78, 0x3b79630, 0x3b7be30, 0x3b79d30<ST4[%4]> [ID=9]

  Initial Opcode index to 178
  Morphed node: 0x3b7b830: ch = SW 0x3b79630, 0x3b7be30, 0x3b7a820, 0x3b57b78<Mem:ST4[%4]>

ISEL: Match complete!
=> 0x3b7b830: ch = SW 0x3b79630, 0x3b7be30, 0x3b7a820, 0x3b57b78<Mem:ST4[%4]>

=> 0x3b771c0: i32 = TargetGlobalAddress<i32* @glob_sg_bit0> 0 [TF=3]

=> 0x3b77dc0: i32 = TargetGlobalAddress<i32* @glob_sg_bit0> 0 [TF=2]

=> 0x3b7bf30: i32 = TargetGlobalAddress<i32* @glob_sg_bit1> 0 [TF=3]

=> 0x3b7bb30: i32 = TargetGlobalAddress<i32* @glob_sg_bit1> 0 [TF=2]

=> 0x3b79030: ch = BasicBlock<startup_starter3.return 0x3b95f80>

ISEL: Starting pattern match on root node: 0x3b79630: i32 = Constant<0> [ORD=72] [ID=2]

  Initial Opcode index to 1226
comparing 0 and 0 and returning value:1
ISEL: Match complete!
=> 0x3b79630: i32 = Constant<0> [ORD=72] [ID=2]

=> 0x3b57b78: ch = EntryToken [ORD=71]

===== Instruction selection ends:
Selected selection DAG: BB#9 'startup_starter3:startup_starter3.if.else28'
SelectionDAG has 21 nodes:
  0x3b7a820: i32 = TargetConstant<0>

  0x3b75a90: i32 = Register %zero

    0x3b79030: ch = BasicBlock<startup_starter3.return 0x3b95f80>

      0x3b75a90: <multiple use>
          0x3b75a90: <multiple use>
          0x3b7bf30: i32 = TargetGlobalAddress<i32* @glob_sg_bit1> 0 [TF=3]

        0x3b79530: i32 = ADDI 0x3b75a90, 0x3b7bf30

          0x3b7bb30: i32 = TargetGlobalAddress<i32* @glob_sg_bit1> 0 [TF=2]

        0x3b779c0: i32 = LUI 0x3b7bb30

      0x3b777c0: i32 = ADD 0x3b79530, 0x3b779c0

      0x3b7a820: <multiple use>
        0x3b75a90: <multiple use>
            0x3b75a90: <multiple use>
            0x3b771c0: i32 = TargetGlobalAddress<i32* @glob_sg_bit0> 0 [TF=3]

          0x3b7b220: i32 = ADDI 0x3b75a90, 0x3b771c0

            0x3b77dc0: i32 = TargetGlobalAddress<i32* @glob_sg_bit0> 0 [TF=2]

          0x3b75390: i32 = LUI 0x3b77dc0

        0x3b76090: i32 = ADD 0x3b7b220, 0x3b75390

        0x3b7a820: <multiple use>
          0x3b75a90: <multiple use>
            0x3b79630: i32 = Register %t5

            0x3b79d30: i32 = TargetFrameIndex<3>

          0x3b7be30: i32 = ADDI 0x3b79630, 0x3b79d30 [ORD=71]

          0x3b7a820: <multiple use>
          0x3b57b78: ch = EntryToken [ORD=71]

        0x3b7b830: ch = SW 0x3b75a90, 0x3b7be30, 0x3b7a820, 0x3b57b78<Mem:ST4[%4]>

      0x3b778c0: ch = SW 0x3b75a90, 0x3b76090, 0x3b7a820, 0x3b7b830<Mem:ST4[@glob_sg_bit0]> [ORD=72]

    0x3b77cc0: ch = SW 0x3b75a90, 0x3b777c0, 0x3b7a820, 0x3b778c0<Mem:ST4[@glob_sg_bit1]> [ORD=73]

  0x3b776c0: ch = JAL 0x3b79030, 0x3b77cc0


********** List Scheduling BB#9 'startup_starter3.if.else28' **********
SU(0): 0x3b776c0: ch = JAL 0x3b79030, 0x3b77cc0 [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x3b77cc0: ch = SW 0x3b75a90, 0x3b777c0, 0x3b7a820, 0x3b778c0<Mem:ST4[@glob_sg_bit1]> [ORD=73] [ID=1]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(8): Latency=1
   ch  SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x3b778c0: ch = SW 0x3b75a90, 0x3b76090, 0x3b7a820, 0x3b7b830<Mem:ST4[@glob_sg_bit0]> [ORD=72] [ID=2]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(5): Latency=1
   ch  SU(3): Latency=1
  Successors:
   ch  SU(1): Latency=1

SU(3): 0x3b7b830: ch = SW 0x3b75a90, 0x3b7be30, 0x3b7a820, 0x3b57b78<Mem:ST4[%4]> [ID=3]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(4): Latency=1
  Successors:
   ch  SU(2): Latency=1

SU(4): 0x3b7be30: i32 = ADDI 0x3b79630, 0x3b79d30 [ORD=71] [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(3): Latency=1

SU(5): 0x3b76090: i32 = ADD 0x3b7b220, 0x3b75390 [ID=5]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(7): Latency=1
   val SU(6): Latency=1
  Successors:
   val SU(2): Latency=1

SU(6): 0x3b75390: i32 = LUI 0x3b77dc0 [ID=6]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(5): Latency=1

SU(7): 0x3b7b220: i32 = ADDI 0x3b75a90, 0x3b771c0 [ID=7]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(5): Latency=1

SU(8): 0x3b777c0: i32 = ADD 0x3b79530, 0x3b779c0 [ID=8]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
   val SU(10): Latency=1
   val SU(9): Latency=1
  Successors:
   val SU(1): Latency=1

SU(9): 0x3b779c0: i32 = LUI 0x3b7bb30 [ID=9]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(8): Latency=1

SU(10): 0x3b79530: i32 = ADDI 0x3b75a90, 0x3b7bf30 [ID=10]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(8): Latency=1


Examining Available:
Height 0: SU(0): 0x3b776c0: ch = JAL 0x3b79030, 0x3b77cc0 [ID=0]


*** Scheduling [0]: SU(0): 0x3b776c0: ch = JAL 0x3b79030, 0x3b77cc0 [ID=0]


Examining Available:
Height 1: SU(1): 0x3b77cc0: ch = SW 0x3b75a90, 0x3b777c0, 0x3b7a820, 0x3b778c0<Mem:ST4[@glob_sg_bit1]> [ORD=73] [ID=1]


*** Scheduling [1]: SU(1): 0x3b77cc0: ch = SW 0x3b75a90, 0x3b777c0, 0x3b7a820, 0x3b778c0<Mem:ST4[@glob_sg_bit1]> [ORD=73] [ID=1]


Examining Available:
Height 2: SU(8): 0x3b777c0: i32 = ADD 0x3b79530, 0x3b779c0 [ID=8]

Height 2: SU(2): 0x3b778c0: ch = SW 0x3b75a90, 0x3b76090, 0x3b7a820, 0x3b7b830<Mem:ST4[@glob_sg_bit0]> [ORD=72] [ID=2]


*** Scheduling [2]: SU(8): 0x3b777c0: i32 = ADD 0x3b79530, 0x3b779c0 [ID=8]


Examining Available:
Height 3: SU(10): 0x3b79530: i32 = ADDI 0x3b75a90, 0x3b7bf30 [ID=10]

Height 3: SU(9): 0x3b779c0: i32 = LUI 0x3b7bb30 [ID=9]

Height 2: SU(2): 0x3b778c0: ch = SW 0x3b75a90, 0x3b76090, 0x3b7a820, 0x3b7b830<Mem:ST4[@glob_sg_bit0]> [ORD=72] [ID=2]


*** Scheduling [3]: SU(10): 0x3b79530: i32 = ADDI 0x3b75a90, 0x3b7bf30 [ID=10]


Examining Available:
Height 3: SU(9): 0x3b779c0: i32 = LUI 0x3b7bb30 [ID=9]

Height 2: SU(2): 0x3b778c0: ch = SW 0x3b75a90, 0x3b76090, 0x3b7a820, 0x3b7b830<Mem:ST4[@glob_sg_bit0]> [ORD=72] [ID=2]


*** Scheduling [4]: SU(9): 0x3b779c0: i32 = LUI 0x3b7bb30 [ID=9]


Examining Available:
Height 2: SU(2): 0x3b778c0: ch = SW 0x3b75a90, 0x3b76090, 0x3b7a820, 0x3b7b830<Mem:ST4[@glob_sg_bit0]> [ORD=72] [ID=2]


*** Scheduling [5]: SU(2): 0x3b778c0: ch = SW 0x3b75a90, 0x3b76090, 0x3b7a820, 0x3b7b830<Mem:ST4[@glob_sg_bit0]> [ORD=72] [ID=2]


Examining Available:
Height 6: SU(5): 0x3b76090: i32 = ADD 0x3b7b220, 0x3b75390 [ID=5]

Height 6: SU(3): 0x3b7b830: ch = SW 0x3b75a90, 0x3b7be30, 0x3b7a820, 0x3b57b78<Mem:ST4[%4]> [ID=3]


*** Scheduling [6]: SU(5): 0x3b76090: i32 = ADD 0x3b7b220, 0x3b75390 [ID=5]


Examining Available:
Height 7: SU(7): 0x3b7b220: i32 = ADDI 0x3b75a90, 0x3b771c0 [ID=7]

Height 7: SU(6): 0x3b75390: i32 = LUI 0x3b77dc0 [ID=6]

Height 6: SU(3): 0x3b7b830: ch = SW 0x3b75a90, 0x3b7be30, 0x3b7a820, 0x3b57b78<Mem:ST4[%4]> [ID=3]


*** Scheduling [7]: SU(7): 0x3b7b220: i32 = ADDI 0x3b75a90, 0x3b771c0 [ID=7]


Examining Available:
Height 7: SU(6): 0x3b75390: i32 = LUI 0x3b77dc0 [ID=6]

Height 6: SU(3): 0x3b7b830: ch = SW 0x3b75a90, 0x3b7be30, 0x3b7a820, 0x3b57b78<Mem:ST4[%4]> [ID=3]


*** Scheduling [8]: SU(6): 0x3b75390: i32 = LUI 0x3b77dc0 [ID=6]


Examining Available:
Height 6: SU(3): 0x3b7b830: ch = SW 0x3b75a90, 0x3b7be30, 0x3b7a820, 0x3b57b78<Mem:ST4[%4]> [ID=3]


*** Scheduling [9]: SU(3): 0x3b7b830: ch = SW 0x3b75a90, 0x3b7be30, 0x3b7a820, 0x3b57b78<Mem:ST4[%4]> [ID=3]


Examining Available:
Height 10: SU(4): 0x3b7be30: i32 = ADDI 0x3b79630, 0x3b79d30 [ORD=71] [ID=4]


*** Scheduling [10]: SU(4): 0x3b7be30: i32 = ADDI 0x3b79630, 0x3b79d30 [ORD=71] [ID=4]

*** Final schedule ***
SU(4): 0x3b7be30: i32 = ADDI 0x3b79630, 0x3b79d30 [ORD=71] [ID=4]

SU(3): 0x3b7b830: ch = SW 0x3b75a90, 0x3b7be30, 0x3b7a820, 0x3b57b78<Mem:ST4[%4]> [ID=3]

SU(6): 0x3b75390: i32 = LUI 0x3b77dc0 [ID=6]

SU(7): 0x3b7b220: i32 = ADDI 0x3b75a90, 0x3b771c0 [ID=7]

SU(5): 0x3b76090: i32 = ADD 0x3b7b220, 0x3b75390 [ID=5]

SU(2): 0x3b778c0: ch = SW 0x3b75a90, 0x3b76090, 0x3b7a820, 0x3b7b830<Mem:ST4[@glob_sg_bit0]> [ORD=72] [ID=2]

SU(9): 0x3b779c0: i32 = LUI 0x3b7bb30 [ID=9]

SU(10): 0x3b79530: i32 = ADDI 0x3b75a90, 0x3b7bf30 [ID=10]

SU(8): 0x3b777c0: i32 = ADD 0x3b79530, 0x3b779c0 [ID=8]

SU(1): 0x3b77cc0: ch = SW 0x3b75a90, 0x3b777c0, 0x3b7a820, 0x3b778c0<Mem:ST4[@glob_sg_bit1]> [ORD=73] [ID=1]

SU(0): 0x3b776c0: ch = JAL 0x3b79030, 0x3b77cc0 [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %33 = load float* %3, align 4
I was here to add   %3 = alloca float, align 4
with I type floatand sd value :0x3b79d30: i32 = FrameIndex<2>
new load?0x3b7a820: f32,ch = load 0x3b57b78, 0x3b79d30, 0x3b75a90<LD4[%3]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x3b79630: i32 = Constant<0>

    0x3b57b78: ch = EntryToken

    0x3b79d30: i32 = FrameIndex<2>

    0x3b75a90: i32 = undef

  0x3b7a820: f32,ch = load 0x3b57b78, 0x3b79d30, 0x3b75a90<LD4[%3]>

  0x3b57b78: ch = EntryToken


visiting load instruction   %34 = load i32* @SG_MAX_RPM, align 4
I was here to add @SG_MAX_RPM = global i32 15000, align 4
with I type i32and sd value :0x3b776c0: i32 = GlobalAddress<i32* @SG_MAX_RPM> 0
new load?0x3b77cc0: i32,ch = load 0x3b57b78, 0x3b776c0, 0x3b75a90<LD4[@SG_MAX_RPM]>
dag after load is dealt with?SelectionDAG has 7 nodes:
  0x3b79630: i32 = Constant<0>

  0x3b75a90: i32 = undef [ORD=74]

    0x3b57b78: <multiple use>
    0x3b79d30: i32 = FrameIndex<2> [ORD=74]

    0x3b75a90: <multiple use>
  0x3b7a820: f32,ch = load 0x3b57b78, 0x3b79d30, 0x3b75a90<LD4[%3]> [ORD=74]

    0x3b57b78: <multiple use>
    0x3b776c0: i32 = GlobalAddress<i32* @SG_MAX_RPM> 0

    0x3b75a90: <multiple use>
  0x3b77cc0: i32,ch = load 0x3b57b78, 0x3b776c0, 0x3b75a90<LD4[@SG_MAX_RPM]>

  0x3b57b78: ch = EntryToken [ORD=74]


Initial selection DAG: BB#4 'startup_starter3:startup_starter3.if.then15'
SelectionDAG has 16 nodes:
  0x3b57b78: ch = EntryToken [ORD=74]

  0x3b79630: i32 = Constant<0>

  0x3b75a90: i32 = undef [ORD=74]

      0x3b57b78: <multiple use>
            0x3b57b78: <multiple use>
            0x3b79d30: i32 = FrameIndex<2> [ORD=74]

            0x3b75a90: <multiple use>
          0x3b7a820: f32,ch = load 0x3b57b78, 0x3b79d30, 0x3b75a90<LD4[%3]> [ORD=74]

              0x3b57b78: <multiple use>
              0x3b776c0: i32 = GlobalAddress<i32* @SG_MAX_RPM> 0 [ORD=75]

              0x3b75a90: <multiple use>
            0x3b77cc0: i32,ch = load 0x3b57b78, 0x3b776c0, 0x3b75a90<LD4[@SG_MAX_RPM]> [ORD=75]

          0x3b778c0: f32 = sint_to_fp 0x3b77cc0 [ORD=76]

          0x3b76090: ch = setolt [ORD=77]

        0x3b777c0: i1 = setcc 0x3b7a820, 0x3b778c0, 0x3b76090 [ORD=77]

        0x3b7b220: i1 = Constant<-1>

      0x3b75390: i1 = xor 0x3b777c0, 0x3b7b220

      0x3b79530: ch = BasicBlock<startup_starter3.return 0x3b95f80>

    0x3b779c0: ch = brcond 0x3b57b78, 0x3b75390, 0x3b79530

    0x3b7b830: ch = BasicBlock<startup_starter3.if.then19 0x3b95ab0>

  0x3b771c0: ch = br 0x3b779c0, 0x3b7b830



Replacing.3 0x3b75390: i1 = xor 0x3b777c0, 0x3b7b220

With: 0x3b7bf30: i1 = setcc 0x3b7a820, 0x3b778c0, 0x3b77dc0

Optimized lowered selection DAG: BB#4 'startup_starter3:startup_starter3.if.then15'
SelectionDAG has 13 nodes:
  0x3b57b78: ch = EntryToken [ORD=74]

  0x3b75a90: i32 = undef [ORD=74]

      0x3b57b78: <multiple use>
          0x3b57b78: <multiple use>
          0x3b79d30: i32 = FrameIndex<2> [ORD=74]

          0x3b75a90: <multiple use>
        0x3b7a820: f32,ch = load 0x3b57b78, 0x3b79d30, 0x3b75a90<LD4[%3]> [ORD=74]

            0x3b57b78: <multiple use>
            0x3b776c0: i32 = GlobalAddress<i32* @SG_MAX_RPM> 0 [ORD=75]

            0x3b75a90: <multiple use>
          0x3b77cc0: i32,ch = load 0x3b57b78, 0x3b776c0, 0x3b75a90<LD4[@SG_MAX_RPM]> [ORD=75]

        0x3b778c0: f32 = sint_to_fp 0x3b77cc0 [ORD=76]

        0x3b77dc0: ch = setuge

      0x3b7bf30: i1 = setcc 0x3b7a820, 0x3b778c0, 0x3b77dc0

      0x3b79530: ch = BasicBlock<startup_starter3.return 0x3b95f80>

    0x3b779c0: ch = brcond 0x3b57b78, 0x3b7bf30, 0x3b79530

    0x3b7b830: ch = BasicBlock<startup_starter3.if.then19 0x3b95ab0>

  0x3b771c0: ch = br 0x3b779c0, 0x3b7b830


Legally typed node: 0x3b77dc0: ch = setuge [ID=0]

Legally typed node: 0x3b7b830: ch = BasicBlock<startup_starter3.if.then19 0x3b95ab0> [ID=0]

Legally typed node: 0x3b79530: ch = BasicBlock<startup_starter3.return 0x3b95f80> [ID=0]

Legally typed node: 0x3b776c0: i32 = GlobalAddress<i32* @SG_MAX_RPM> 0 [ORD=75] [ID=0]

Legally typed node: 0x3b75a90: i32 = undef [ORD=74] [ID=0]

Legally typed node: 0x3b79d30: i32 = FrameIndex<2> [ORD=74] [ID=0]

Legally typed node: 0x3b57b78: ch = EntryToken [ORD=74] [ID=0]

Legally typed node: 0x3b7a820: f32,ch = load 0x3b57b78, 0x3b79d30, 0x3b75a90<LD4[%3]> [ORD=74] [ID=0]

Legally typed node: 0x3b77cc0: i32,ch = load 0x3b57b78, 0x3b776c0, 0x3b75a90<LD4[@SG_MAX_RPM]> [ORD=75] [ID=0]

Legally typed node: 0x3b778c0: f32 = sint_to_fp 0x3b77cc0 [ORD=76] [ID=0]

Promote integer result: 0x3b7bf30: i1 = setcc 0x3b7a820, 0x3b778c0, 0x3b77dc0 [ID=0]

Promote integer operand: 0x3b779c0: ch = brcond 0x3b57b78, 0x3b7bf30, 0x3b79530 [ID=0]

Promote integer operand: 0x3b76090: i32 = zero_extend 0x3b7bf30 [ID=0]

Legally typed node: 0x3b777c0: i32 = Constant<1> [ID=0]

Legally typed node: 0x3b79630: i32 = setcc 0x3b7a820, 0x3b778c0, 0x3b77dc0 [ID=0]

Legally typed node: 0x3b7b220: i32 = and 0x3b79630, 0x3b777c0 [ID=0]

Legally typed node: 0x3b779c0: ch = brcond 0x3b57b78, 0x3b7b220, 0x3b79530 [ID=0]

Legally typed node: 0x3b771c0: ch = br 0x3b779c0, 0x3b7b830 [ID=0]

Legally typed node: 0x7fffa88b7260: ch = handlenode 0x3b771c0 [ID=0]

Type-legalized selection DAG: BB#4 'startup_starter3:startup_starter3.if.then15'
SelectionDAG has 15 nodes:
  0x3b57b78: ch = EntryToken [ORD=74] [ID=-3]

  0x3b75a90: i32 = undef [ORD=74] [ID=-3]

      0x3b57b78: <multiple use>
            0x3b57b78: <multiple use>
            0x3b79d30: i32 = FrameIndex<2> [ORD=74] [ID=-3]

            0x3b75a90: <multiple use>
          0x3b7a820: f32,ch = load 0x3b57b78, 0x3b79d30, 0x3b75a90<LD4[%3]> [ORD=74] [ID=-3]

              0x3b57b78: <multiple use>
              0x3b776c0: i32 = GlobalAddress<i32* @SG_MAX_RPM> 0 [ORD=75] [ID=-3]

              0x3b75a90: <multiple use>
            0x3b77cc0: i32,ch = load 0x3b57b78, 0x3b776c0, 0x3b75a90<LD4[@SG_MAX_RPM]> [ORD=75] [ID=-3]

          0x3b778c0: f32 = sint_to_fp 0x3b77cc0 [ORD=76] [ID=-3]

          0x3b77dc0: ch = setuge [ID=-3]

        0x3b79630: i32 = setcc 0x3b7a820, 0x3b778c0, 0x3b77dc0 [ID=-3]

        0x3b777c0: i32 = Constant<1> [ID=-3]

      0x3b7b220: i32 = and 0x3b79630, 0x3b777c0 [ID=-3]

      0x3b79530: ch = BasicBlock<startup_starter3.return 0x3b95f80> [ID=-3]

    0x3b779c0: ch = brcond 0x3b57b78, 0x3b7b220, 0x3b79530 [ID=-3]

    0x3b7b830: ch = BasicBlock<startup_starter3.if.then19 0x3b95ab0> [ID=-3]

  0x3b771c0: ch = br 0x3b779c0, 0x3b7b830 [ID=-3]



Replacing.2 0x3b7b220: i32 = and 0x3b79630, 0x3b777c0 [ID=-3]

With: 0x3b79630: i32 = setcc 0x3b7a820, 0x3b778c0, 0x3b77dc0 [ID=-3]

Optimized type-legalized selection DAG: BB#4 'startup_starter3:startup_starter3.if.then15'
SelectionDAG has 13 nodes:
  0x3b57b78: ch = EntryToken [ORD=74] [ID=-3]

  0x3b75a90: i32 = undef [ORD=74] [ID=-3]

      0x3b57b78: <multiple use>
          0x3b57b78: <multiple use>
          0x3b79d30: i32 = FrameIndex<2> [ORD=74] [ID=-3]

          0x3b75a90: <multiple use>
        0x3b7a820: f32,ch = load 0x3b57b78, 0x3b79d30, 0x3b75a90<LD4[%3]> [ORD=74] [ID=-3]

            0x3b57b78: <multiple use>
            0x3b776c0: i32 = GlobalAddress<i32* @SG_MAX_RPM> 0 [ORD=75] [ID=-3]

            0x3b75a90: <multiple use>
          0x3b77cc0: i32,ch = load 0x3b57b78, 0x3b776c0, 0x3b75a90<LD4[@SG_MAX_RPM]> [ORD=75] [ID=-3]

        0x3b778c0: f32 = sint_to_fp 0x3b77cc0 [ORD=76] [ID=-3]

        0x3b77dc0: ch = setuge [ID=-3]

      0x3b79630: i32 = setcc 0x3b7a820, 0x3b778c0, 0x3b77dc0 [ID=-3]

      0x3b79530: ch = BasicBlock<startup_starter3.return 0x3b95f80> [ID=-3]

    0x3b779c0: ch = brcond 0x3b57b78, 0x3b79630, 0x3b79530 [ID=-3]

    0x3b7b830: ch = BasicBlock<startup_starter3.if.then19 0x3b95ab0> [ID=-3]

  0x3b771c0: ch = br 0x3b779c0, 0x3b7b830 [ID=-3]


Legalized selection DAG: BB#4 'startup_starter3:startup_starter3.if.then15'
SelectionDAG has 17 nodes:
  0x3b57b78: ch = EntryToken [ORD=74] [ID=0]

  0x3b75a90: i32 = undef [ORD=74] [ID=2]

      0x3b57b78: <multiple use>
          0x3b57b78: <multiple use>
          0x3b79d30: i32 = FrameIndex<2> [ORD=74] [ID=1]

          0x3b75a90: <multiple use>
        0x3b7a820: f32,ch = load 0x3b57b78, 0x3b79d30, 0x3b75a90<LD4[%3]> [ORD=74] [ID=7]

            0x3b57b78: <multiple use>
                0x3b777c0: i32 = TargetGlobalAddress<i32* @SG_MAX_RPM> 0 [TF=2]

              0x3b7bf30: i32 = REDEFINEISD::Hi 0x3b777c0

                0x3b7b220: i32 = TargetGlobalAddress<i32* @SG_MAX_RPM> 0 [TF=3]

              0x3b76090: i32 = REDEFINEISD::Lo 0x3b7b220

            0x3b75390: i32 = add 0x3b7bf30, 0x3b76090

            0x3b75a90: <multiple use>
          0x3b77cc0: i32,ch = load 0x3b57b78, 0x3b75390, 0x3b75a90<LD4[@SG_MAX_RPM]> [ORD=75] [ID=8]

        0x3b778c0: f32 = sint_to_fp 0x3b77cc0 [ORD=76] [ID=9]

        0x3b77dc0: ch = setuge [ID=6]

      0x3b79630: i32 = setcc 0x3b7a820, 0x3b778c0, 0x3b77dc0 [ID=10]

      0x3b79530: ch = BasicBlock<startup_starter3.return 0x3b95f80> [ID=4]

    0x3b779c0: ch = brcond 0x3b57b78, 0x3b79630, 0x3b79530 [ID=11]

    0x3b7b830: ch = BasicBlock<startup_starter3.if.then19 0x3b95ab0> [ID=5]

  0x3b771c0: ch = br 0x3b779c0, 0x3b7b830 [ID=12]


Optimized legalized selection DAG: BB#4 'startup_starter3:startup_starter3.if.then15'
SelectionDAG has 17 nodes:
  0x3b57b78: ch = EntryToken [ORD=74] [ID=0]

  0x3b75a90: i32 = undef [ORD=74] [ID=2]

      0x3b57b78: <multiple use>
          0x3b57b78: <multiple use>
          0x3b79d30: i32 = FrameIndex<2> [ORD=74] [ID=1]

          0x3b75a90: <multiple use>
        0x3b7a820: f32,ch = load 0x3b57b78, 0x3b79d30, 0x3b75a90<LD4[%3]> [ORD=74] [ID=7]

            0x3b57b78: <multiple use>
                0x3b777c0: i32 = TargetGlobalAddress<i32* @SG_MAX_RPM> 0 [TF=2]

              0x3b7bf30: i32 = REDEFINEISD::Hi 0x3b777c0

                0x3b7b220: i32 = TargetGlobalAddress<i32* @SG_MAX_RPM> 0 [TF=3]

              0x3b76090: i32 = REDEFINEISD::Lo 0x3b7b220

            0x3b75390: i32 = add 0x3b7bf30, 0x3b76090

            0x3b75a90: <multiple use>
          0x3b77cc0: i32,ch = load 0x3b57b78, 0x3b75390, 0x3b75a90<LD4[@SG_MAX_RPM]> [ORD=75] [ID=8]

        0x3b778c0: f32 = sint_to_fp 0x3b77cc0 [ORD=76] [ID=9]

        0x3b77dc0: ch = setuge [ID=6]

      0x3b79630: i32 = setcc 0x3b7a820, 0x3b778c0, 0x3b77dc0 [ID=10]

      0x3b79530: ch = BasicBlock<startup_starter3.return 0x3b95f80> [ID=4]

    0x3b779c0: ch = brcond 0x3b57b78, 0x3b79630, 0x3b79530 [ID=11]

    0x3b7b830: ch = BasicBlock<startup_starter3.if.then19 0x3b95ab0> [ID=5]

  0x3b771c0: ch = br 0x3b779c0, 0x3b7b830 [ID=12]


===== Instruction selection begins: BB#4 'startup_starter3.if.then15'
ISEL: Starting pattern match on root node: 0x3b771c0: ch = br 0x3b779c0, 0x3b7b830 [ID=16]

  Initial Opcode index to 1938
  Morphed node: 0x3b771c0: ch = JAL 0x3b7b830, 0x3b779c0

ISEL: Match complete!
=> 0x3b771c0: ch = JAL 0x3b7b830, 0x3b779c0

ISEL: Starting pattern match on root node: 0x3b779c0: ch = brcond 0x3b57b78, 0x3b79630, 0x3b79530 [ID=15]

  Initial Opcode index to 1439
  Match failed at index 1449
  Continuing at 1676
  Morphed node: 0x3b779c0: ch = BNE 0x3b79530, 0x3b79630, 0x3b776c0, 0x3b57b78

ISEL: Match complete!
=> 0x3b779c0: ch = BNE 0x3b79530, 0x3b79630, 0x3b776c0, 0x3b57b78

ISEL: Starting pattern match on root node: 0x3b79630: i32 = setcc 0x3b7a820, 0x3b778c0, 0x3b77dc0 [ID=14]

  Initial Opcode index to 642
  Match failed at index 648
  Continuing at 688
  Match failed at index 690
  Continuing at 899
  Skipped scope entry (due to false predicate) at index 908, continuing at 920
  Skipped scope entry (due to false predicate) at index 921, continuing at 933
  Skipped scope entry (due to false predicate) at index 934, continuing at 946
  Skipped scope entry (due to false predicate) at index 947, continuing at 959
  Skipped scope entry (due to false predicate) at index 960, continuing at 972
  Skipped scope entry (due to false predicate) at index 973, continuing at 985
  Skipped scope entry (due to false predicate) at index 986, continuing at 998
  Skipped scope entry (due to false predicate) at index 999, continuing at 1011
  Skipped scope entry (due to false predicate) at index 1012, continuing at 1024
  Morphed node: 0x3b79630: i32 = FULE_S 0x3b7a820, 0x3b778c0

ISEL: Match complete!
=> 0x3b79630: i32 = FULE_S 0x3b7a820, 0x3b778c0

ISEL: Starting pattern match on root node: 0x3b778c0: f32 = sint_to_fp 0x3b77cc0 [ORD=76] [ID=13]

  Initial Opcode index to 2155
  Morphed node: 0x3b778c0: f32 = FCVT_S_W_RDY 0x3b77cc0 [ORD=76]

ISEL: Match complete!
=> 0x3b778c0: f32 = FCVT_S_W_RDY 0x3b77cc0 [ORD=76]

ISEL: Starting pattern match on root node: 0x3b77cc0: i32,ch = load 0x3b57b78, 0x3b75390, 0x3b75a90<LD4[@SG_MAX_RPM]> [ORD=75] [ID=12]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x3b77cc0: i32,ch = LW 0x3b75390, 0x3b77dc0, 0x3b57b78<Mem:LD4[@SG_MAX_RPM]> [ORD=75]

ISEL: Match complete!
=> 0x3b77cc0: i32,ch = LW 0x3b75390, 0x3b77dc0, 0x3b57b78<Mem:LD4[@SG_MAX_RPM]> [ORD=75]

ISEL: Starting pattern match on root node: 0x3b75390: i32 = add 0x3b7bf30, 0x3b76090 [ID=11]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x3b75390: i32 = ADD 0x3b76090, 0x3b7bf30

ISEL: Match complete!
=> 0x3b75390: i32 = ADD 0x3b76090, 0x3b7bf30

ISEL: Starting pattern match on root node: 0x3b76090: i32 = REDEFINEISD::Lo 0x3b7b220 [ID=10]

  Initial Opcode index to 1204
  Morphed node: 0x3b76090: i32 = ADDI 0x3b776c0, 0x3b7b220

ISEL: Match complete!
=> 0x3b76090: i32 = ADDI 0x3b776c0, 0x3b7b220

ISEL: Starting pattern match on root node: 0x3b7bf30: i32 = REDEFINEISD::Hi 0x3b777c0 [ID=9]

  Initial Opcode index to 1186
  Morphed node: 0x3b7bf30: i32 = LUI 0x3b777c0

ISEL: Match complete!
=> 0x3b7bf30: i32 = LUI 0x3b777c0

ISEL: Starting pattern match on root node: 0x3b7a820: f32,ch = load 0x3b57b78, 0x3b79d30, 0x3b75a90<LD4[%3]> [ORD=74] [ID=8]

  Initial Opcode index to 5
  TypeSwitch[f32] from 10 to 159
  Morphed node: 0x3b7a820: f32,ch = FLW 0x3b79d30, 0x3b77dc0, 0x3b57b78<Mem:LD4[%3]> [ORD=74]

ISEL: Match complete!
=> 0x3b7a820: f32,ch = FLW 0x3b79d30, 0x3b77dc0, 0x3b57b78<Mem:LD4[%3]> [ORD=74]

=> 0x3b7b220: i32 = TargetGlobalAddress<i32* @SG_MAX_RPM> 0 [TF=3]

=> 0x3b777c0: i32 = TargetGlobalAddress<i32* @SG_MAX_RPM> 0 [TF=2]

=> 0x3b7b830: ch = BasicBlock<startup_starter3.if.then19 0x3b95ab0>

=> 0x3b79530: ch = BasicBlock<startup_starter3.return 0x3b95f80>

=> 0x3b57b78: ch = EntryToken [ORD=74]

===== Instruction selection ends:
Selected selection DAG: BB#4 'startup_starter3:startup_starter3.if.then15'
SelectionDAG has 19 nodes:
  0x3b57b78: ch = EntryToken [ORD=74]

  0x3b776c0: i32 = Register %zero

  0x3b77dc0: i32 = TargetConstant<0>

    0x3b7b830: ch = BasicBlock<startup_starter3.if.then19 0x3b95ab0>

      0x3b79530: ch = BasicBlock<startup_starter3.return 0x3b95f80>

            0x3b75a90: i32 = Register %t5

            0x3b7bb30: i32 = TargetFrameIndex<2>

          0x3b79d30: i32 = ADDI 0x3b75a90, 0x3b7bb30 [ORD=74]

          0x3b77dc0: <multiple use>
          0x3b57b78: <multiple use>
        0x3b7a820: f32,ch = FLW 0x3b79d30, 0x3b77dc0, 0x3b57b78<Mem:LD4[%3]> [ORD=74]

                0x3b776c0: <multiple use>
                0x3b7b220: i32 = TargetGlobalAddress<i32* @SG_MAX_RPM> 0 [TF=3]

              0x3b76090: i32 = ADDI 0x3b776c0, 0x3b7b220

                0x3b777c0: i32 = TargetGlobalAddress<i32* @SG_MAX_RPM> 0 [TF=2]

              0x3b7bf30: i32 = LUI 0x3b777c0

            0x3b75390: i32 = ADD 0x3b76090, 0x3b7bf30

            0x3b77dc0: <multiple use>
            0x3b57b78: <multiple use>
          0x3b77cc0: i32,ch = LW 0x3b75390, 0x3b77dc0, 0x3b57b78<Mem:LD4[@SG_MAX_RPM]> [ORD=75]

        0x3b778c0: f32 = FCVT_S_W_RDY 0x3b77cc0 [ORD=76]

      0x3b79630: i32 = FULE_S 0x3b7a820, 0x3b778c0

      0x3b776c0: <multiple use>
      0x3b57b78: <multiple use>
    0x3b779c0: ch = BNE 0x3b79530, 0x3b79630, 0x3b776c0, 0x3b57b78

  0x3b771c0: ch = JAL 0x3b7b830, 0x3b779c0


********** List Scheduling BB#4 'startup_starter3.if.then15' **********
SU(0): 0x3b771c0: ch = JAL 0x3b7b830, 0x3b779c0 [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x3b779c0: ch = BNE 0x3b79530, 0x3b79630, 0x3b776c0, 0x3b57b78 [ID=1]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
   val SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x3b79630: i32 = FULE_S 0x3b7a820, 0x3b778c0 [ID=2]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
   val SU(8): Latency=1
   val SU(3): Latency=1
  Successors:
   val SU(1): Latency=1

SU(3): 0x3b778c0: f32 = FCVT_S_W_RDY 0x3b77cc0 [ORD=76] [ID=3]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 3
  Height             : 3
  Predecessors:
   val SU(4): Latency=1
  Successors:
   val SU(2): Latency=1

SU(4): 0x3b77cc0: i32,ch = LW 0x3b75390, 0x3b77dc0, 0x3b57b78<Mem:LD4[@SG_MAX_RPM]> [ORD=75] [ID=4]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 4
  Predecessors:
   val SU(5): Latency=1
  Successors:
   val SU(3): Latency=1

SU(5): 0x3b75390: i32 = ADD 0x3b76090, 0x3b7bf30 [ID=5]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 5
  Predecessors:
   val SU(7): Latency=1
   val SU(6): Latency=1
  Successors:
   val SU(4): Latency=1

SU(6): 0x3b7bf30: i32 = LUI 0x3b777c0 [ID=6]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
   val SU(5): Latency=1

SU(7): 0x3b76090: i32 = ADDI 0x3b776c0, 0x3b7b220 [ID=7]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
   val SU(5): Latency=1

SU(8): 0x3b7a820: f32,ch = FLW 0x3b79d30, 0x3b77dc0, 0x3b57b78<Mem:LD4[%3]> [ORD=74] [ID=8]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(9): Latency=1
  Successors:
   val SU(2): Latency=1

SU(9): 0x3b79d30: i32 = ADDI 0x3b75a90, 0x3b7bb30 [ORD=74] [ID=9]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(8): Latency=1


Examining Available:
Height 0: SU(0): 0x3b771c0: ch = JAL 0x3b7b830, 0x3b779c0 [ID=0]


*** Scheduling [0]: SU(0): 0x3b771c0: ch = JAL 0x3b7b830, 0x3b779c0 [ID=0]


Examining Available:
Height 1: SU(1): 0x3b779c0: ch = BNE 0x3b79530, 0x3b79630, 0x3b776c0, 0x3b57b78 [ID=1]


*** Scheduling [1]: SU(1): 0x3b779c0: ch = BNE 0x3b79530, 0x3b79630, 0x3b776c0, 0x3b57b78 [ID=1]


Examining Available:
Height 2: SU(2): 0x3b79630: i32 = FULE_S 0x3b7a820, 0x3b778c0 [ID=2]


*** Scheduling [2]: SU(2): 0x3b79630: i32 = FULE_S 0x3b7a820, 0x3b778c0 [ID=2]


Examining Available:
Height 3: SU(3): 0x3b778c0: f32 = FCVT_S_W_RDY 0x3b77cc0 [ORD=76] [ID=3]

Height 3: SU(8): 0x3b7a820: f32,ch = FLW 0x3b79d30, 0x3b77dc0, 0x3b57b78<Mem:LD4[%3]> [ORD=74] [ID=8]


*** Scheduling [3]: SU(3): 0x3b778c0: f32 = FCVT_S_W_RDY 0x3b77cc0 [ORD=76] [ID=3]


Examining Available:
Height 4: SU(4): 0x3b77cc0: i32,ch = LW 0x3b75390, 0x3b77dc0, 0x3b57b78<Mem:LD4[@SG_MAX_RPM]> [ORD=75] [ID=4]

Height 3: SU(8): 0x3b7a820: f32,ch = FLW 0x3b79d30, 0x3b77dc0, 0x3b57b78<Mem:LD4[%3]> [ORD=74] [ID=8]


*** Scheduling [4]: SU(4): 0x3b77cc0: i32,ch = LW 0x3b75390, 0x3b77dc0, 0x3b57b78<Mem:LD4[@SG_MAX_RPM]> [ORD=75] [ID=4]


Examining Available:
Height 5: SU(5): 0x3b75390: i32 = ADD 0x3b76090, 0x3b7bf30 [ID=5]

Height 3: SU(8): 0x3b7a820: f32,ch = FLW 0x3b79d30, 0x3b77dc0, 0x3b57b78<Mem:LD4[%3]> [ORD=74] [ID=8]


*** Scheduling [5]: SU(5): 0x3b75390: i32 = ADD 0x3b76090, 0x3b7bf30 [ID=5]


Examining Available:
Height 6: SU(7): 0x3b76090: i32 = ADDI 0x3b776c0, 0x3b7b220 [ID=7]

Height 6: SU(6): 0x3b7bf30: i32 = LUI 0x3b777c0 [ID=6]

Height 3: SU(8): 0x3b7a820: f32,ch = FLW 0x3b79d30, 0x3b77dc0, 0x3b57b78<Mem:LD4[%3]> [ORD=74] [ID=8]


*** Scheduling [6]: SU(7): 0x3b76090: i32 = ADDI 0x3b776c0, 0x3b7b220 [ID=7]


Examining Available:
Height 6: SU(6): 0x3b7bf30: i32 = LUI 0x3b777c0 [ID=6]

Height 3: SU(8): 0x3b7a820: f32,ch = FLW 0x3b79d30, 0x3b77dc0, 0x3b57b78<Mem:LD4[%3]> [ORD=74] [ID=8]


*** Scheduling [7]: SU(6): 0x3b7bf30: i32 = LUI 0x3b777c0 [ID=6]


Examining Available:
Height 3: SU(8): 0x3b7a820: f32,ch = FLW 0x3b79d30, 0x3b77dc0, 0x3b57b78<Mem:LD4[%3]> [ORD=74] [ID=8]


*** Scheduling [8]: SU(8): 0x3b7a820: f32,ch = FLW 0x3b79d30, 0x3b77dc0, 0x3b57b78<Mem:LD4[%3]> [ORD=74] [ID=8]


Examining Available:
Height 9: SU(9): 0x3b79d30: i32 = ADDI 0x3b75a90, 0x3b7bb30 [ORD=74] [ID=9]


*** Scheduling [9]: SU(9): 0x3b79d30: i32 = ADDI 0x3b75a90, 0x3b7bb30 [ORD=74] [ID=9]

*** Final schedule ***
SU(9): 0x3b79d30: i32 = ADDI 0x3b75a90, 0x3b7bb30 [ORD=74] [ID=9]

SU(8): 0x3b7a820: f32,ch = FLW 0x3b79d30, 0x3b77dc0, 0x3b57b78<Mem:LD4[%3]> [ORD=74] [ID=8]

SU(6): 0x3b7bf30: i32 = LUI 0x3b777c0 [ID=6]

SU(7): 0x3b76090: i32 = ADDI 0x3b776c0, 0x3b7b220 [ID=7]

SU(5): 0x3b75390: i32 = ADD 0x3b76090, 0x3b7bf30 [ID=5]

SU(4): 0x3b77cc0: i32,ch = LW 0x3b75390, 0x3b77dc0, 0x3b57b78<Mem:LD4[@SG_MAX_RPM]> [ORD=75] [ID=4]

SU(3): 0x3b778c0: f32 = FCVT_S_W_RDY 0x3b77cc0 [ORD=76] [ID=3]

SU(2): 0x3b79630: i32 = FULE_S 0x3b7a820, 0x3b778c0 [ID=2]

SU(1): 0x3b779c0: ch = BNE 0x3b79530, 0x3b79630, 0x3b776c0, 0x3b57b78 [ID=1]

SU(0): 0x3b771c0: ch = JAL 0x3b7b830, 0x3b779c0 [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %37 = load float* %4, align 4
I was here to add   %4 = alloca float, align 4
with I type floatand sd value :0x3b7bb30: i32 = FrameIndex<3>
new load?0x3b776c0: f32,ch = load 0x3b57b78, 0x3b7bb30, 0x3b77dc0<LD4[%4]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x3b75a90: i32 = Constant<0>

    0x3b57b78: ch = EntryToken

    0x3b7bb30: i32 = FrameIndex<3>

    0x3b77dc0: i32 = undef

  0x3b776c0: f32,ch = load 0x3b57b78, 0x3b7bb30, 0x3b77dc0<LD4[%4]>

  0x3b57b78: ch = EntryToken


visiting load instruction   %38 = load float* @SG_RAMP_MAX, align 4
I was here to add @SG_RAMP_MAX = global float 0x3FE3333340000000, align 4
with I type floatand sd value :0x3b771c0: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0
new load?0x3b779c0: f32,ch = load 0x3b57b78, 0x3b771c0, 0x3b77dc0<LD4[@SG_RAMP_MAX]>
dag after load is dealt with?SelectionDAG has 7 nodes:
  0x3b75a90: i32 = Constant<0>

  0x3b77dc0: i32 = undef [ORD=78]

    0x3b57b78: <multiple use>
    0x3b7bb30: i32 = FrameIndex<3> [ORD=78]

    0x3b77dc0: <multiple use>
  0x3b776c0: f32,ch = load 0x3b57b78, 0x3b7bb30, 0x3b77dc0<LD4[%4]> [ORD=78]

    0x3b57b78: <multiple use>
    0x3b771c0: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0

    0x3b77dc0: <multiple use>
  0x3b779c0: f32,ch = load 0x3b57b78, 0x3b771c0, 0x3b77dc0<LD4[@SG_RAMP_MAX]>

  0x3b57b78: ch = EntryToken [ORD=78]


Initial selection DAG: BB#5 'startup_starter3:startup_starter3.if.then19'
SelectionDAG has 15 nodes:
  0x3b57b78: ch = EntryToken [ORD=78]

  0x3b75a90: i32 = Constant<0>

  0x3b77dc0: i32 = undef [ORD=78]

      0x3b57b78: <multiple use>
            0x3b57b78: <multiple use>
            0x3b7bb30: i32 = FrameIndex<3> [ORD=78]

            0x3b77dc0: <multiple use>
          0x3b776c0: f32,ch = load 0x3b57b78, 0x3b7bb30, 0x3b77dc0<LD4[%4]> [ORD=78]

            0x3b57b78: <multiple use>
            0x3b771c0: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0 [ORD=79]

            0x3b77dc0: <multiple use>
          0x3b779c0: f32,ch = load 0x3b57b78, 0x3b771c0, 0x3b77dc0<LD4[@SG_RAMP_MAX]> [ORD=79]

          0x3b79630: ch = setolt [ORD=80]

        0x3b778c0: i1 = setcc 0x3b776c0, 0x3b779c0, 0x3b79630 [ORD=80]

        0x3b77cc0: i1 = Constant<-1>

      0x3b75390: i1 = xor 0x3b778c0, 0x3b77cc0

      0x3b76090: ch = BasicBlock<startup_starter3.if.end 0x3b95c10>

    0x3b7bf30: ch = brcond 0x3b57b78, 0x3b75390, 0x3b76090

    0x3b7a820: ch = BasicBlock<startup_starter3.if.then22 0x3b95b60>

  0x3b7b220: ch = br 0x3b7bf30, 0x3b7a820



Replacing.3 0x3b75390: i1 = xor 0x3b778c0, 0x3b77cc0

With: 0x3b7b830: i1 = setcc 0x3b776c0, 0x3b779c0, 0x3b777c0

Optimized lowered selection DAG: BB#5 'startup_starter3:startup_starter3.if.then19'
SelectionDAG has 12 nodes:
  0x3b57b78: ch = EntryToken [ORD=78]

  0x3b77dc0: i32 = undef [ORD=78]

      0x3b57b78: <multiple use>
          0x3b57b78: <multiple use>
          0x3b7bb30: i32 = FrameIndex<3> [ORD=78]

          0x3b77dc0: <multiple use>
        0x3b776c0: f32,ch = load 0x3b57b78, 0x3b7bb30, 0x3b77dc0<LD4[%4]> [ORD=78]

          0x3b57b78: <multiple use>
          0x3b771c0: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0 [ORD=79]

          0x3b77dc0: <multiple use>
        0x3b779c0: f32,ch = load 0x3b57b78, 0x3b771c0, 0x3b77dc0<LD4[@SG_RAMP_MAX]> [ORD=79]

        0x3b777c0: ch = setuge

      0x3b7b830: i1 = setcc 0x3b776c0, 0x3b779c0, 0x3b777c0

      0x3b76090: ch = BasicBlock<startup_starter3.if.end 0x3b95c10>

    0x3b7bf30: ch = brcond 0x3b57b78, 0x3b7b830, 0x3b76090

    0x3b7a820: ch = BasicBlock<startup_starter3.if.then22 0x3b95b60>

  0x3b7b220: ch = br 0x3b7bf30, 0x3b7a820


Legally typed node: 0x3b777c0: ch = setuge [ID=0]

Legally typed node: 0x3b7a820: ch = BasicBlock<startup_starter3.if.then22 0x3b95b60> [ID=0]

Legally typed node: 0x3b76090: ch = BasicBlock<startup_starter3.if.end 0x3b95c10> [ID=0]

Legally typed node: 0x3b771c0: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0 [ORD=79] [ID=0]

Legally typed node: 0x3b77dc0: i32 = undef [ORD=78] [ID=0]

Legally typed node: 0x3b7bb30: i32 = FrameIndex<3> [ORD=78] [ID=0]

Legally typed node: 0x3b57b78: ch = EntryToken [ORD=78] [ID=0]

Legally typed node: 0x3b776c0: f32,ch = load 0x3b57b78, 0x3b7bb30, 0x3b77dc0<LD4[%4]> [ORD=78] [ID=0]

Legally typed node: 0x3b779c0: f32,ch = load 0x3b57b78, 0x3b771c0, 0x3b77dc0<LD4[@SG_RAMP_MAX]> [ORD=79] [ID=0]

Promote integer result: 0x3b7b830: i1 = setcc 0x3b776c0, 0x3b779c0, 0x3b777c0 [ID=0]

Promote integer operand: 0x3b7bf30: ch = brcond 0x3b57b78, 0x3b7b830, 0x3b76090 [ID=0]

Promote integer operand: 0x3b79630: i32 = zero_extend 0x3b7b830 [ID=0]

Legally typed node: 0x3b778c0: i32 = Constant<1> [ID=0]

Legally typed node: 0x3b75a90: i32 = setcc 0x3b776c0, 0x3b779c0, 0x3b777c0 [ID=0]

Legally typed node: 0x3b77cc0: i32 = and 0x3b75a90, 0x3b778c0 [ID=0]

Legally typed node: 0x3b7bf30: ch = brcond 0x3b57b78, 0x3b77cc0, 0x3b76090 [ID=0]

Legally typed node: 0x3b7b220: ch = br 0x3b7bf30, 0x3b7a820 [ID=0]

Legally typed node: 0x7fffa88b7260: ch = handlenode 0x3b7b220 [ID=0]

Type-legalized selection DAG: BB#5 'startup_starter3:startup_starter3.if.then19'
SelectionDAG has 14 nodes:
  0x3b57b78: ch = EntryToken [ORD=78] [ID=-3]

  0x3b77dc0: i32 = undef [ORD=78] [ID=-3]

      0x3b57b78: <multiple use>
            0x3b57b78: <multiple use>
            0x3b7bb30: i32 = FrameIndex<3> [ORD=78] [ID=-3]

            0x3b77dc0: <multiple use>
          0x3b776c0: f32,ch = load 0x3b57b78, 0x3b7bb30, 0x3b77dc0<LD4[%4]> [ORD=78] [ID=-3]

            0x3b57b78: <multiple use>
            0x3b771c0: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0 [ORD=79] [ID=-3]

            0x3b77dc0: <multiple use>
          0x3b779c0: f32,ch = load 0x3b57b78, 0x3b771c0, 0x3b77dc0<LD4[@SG_RAMP_MAX]> [ORD=79] [ID=-3]

          0x3b777c0: ch = setuge [ID=-3]

        0x3b75a90: i32 = setcc 0x3b776c0, 0x3b779c0, 0x3b777c0 [ID=-3]

        0x3b778c0: i32 = Constant<1> [ID=-3]

      0x3b77cc0: i32 = and 0x3b75a90, 0x3b778c0 [ID=-3]

      0x3b76090: ch = BasicBlock<startup_starter3.if.end 0x3b95c10> [ID=-3]

    0x3b7bf30: ch = brcond 0x3b57b78, 0x3b77cc0, 0x3b76090 [ID=-3]

    0x3b7a820: ch = BasicBlock<startup_starter3.if.then22 0x3b95b60> [ID=-3]

  0x3b7b220: ch = br 0x3b7bf30, 0x3b7a820 [ID=-3]



Replacing.2 0x3b77cc0: i32 = and 0x3b75a90, 0x3b778c0 [ID=-3]

With: 0x3b75a90: i32 = setcc 0x3b776c0, 0x3b779c0, 0x3b777c0 [ID=-3]

Optimized type-legalized selection DAG: BB#5 'startup_starter3:startup_starter3.if.then19'
SelectionDAG has 12 nodes:
  0x3b57b78: ch = EntryToken [ORD=78] [ID=-3]

  0x3b77dc0: i32 = undef [ORD=78] [ID=-3]

      0x3b57b78: <multiple use>
          0x3b57b78: <multiple use>
          0x3b7bb30: i32 = FrameIndex<3> [ORD=78] [ID=-3]

          0x3b77dc0: <multiple use>
        0x3b776c0: f32,ch = load 0x3b57b78, 0x3b7bb30, 0x3b77dc0<LD4[%4]> [ORD=78] [ID=-3]

          0x3b57b78: <multiple use>
          0x3b771c0: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0 [ORD=79] [ID=-3]

          0x3b77dc0: <multiple use>
        0x3b779c0: f32,ch = load 0x3b57b78, 0x3b771c0, 0x3b77dc0<LD4[@SG_RAMP_MAX]> [ORD=79] [ID=-3]

        0x3b777c0: ch = setuge [ID=-3]

      0x3b75a90: i32 = setcc 0x3b776c0, 0x3b779c0, 0x3b777c0 [ID=-3]

      0x3b76090: ch = BasicBlock<startup_starter3.if.end 0x3b95c10> [ID=-3]

    0x3b7bf30: ch = brcond 0x3b57b78, 0x3b75a90, 0x3b76090 [ID=-3]

    0x3b7a820: ch = BasicBlock<startup_starter3.if.then22 0x3b95b60> [ID=-3]

  0x3b7b220: ch = br 0x3b7bf30, 0x3b7a820 [ID=-3]


Legalized selection DAG: BB#5 'startup_starter3:startup_starter3.if.then19'
SelectionDAG has 16 nodes:
  0x3b57b78: ch = EntryToken [ORD=78] [ID=0]

  0x3b77dc0: i32 = undef [ORD=78] [ID=2]

      0x3b57b78: <multiple use>
          0x3b57b78: <multiple use>
          0x3b7bb30: i32 = FrameIndex<3> [ORD=78] [ID=1]

          0x3b77dc0: <multiple use>
        0x3b776c0: f32,ch = load 0x3b57b78, 0x3b7bb30, 0x3b77dc0<LD4[%4]> [ORD=78] [ID=7]

          0x3b57b78: <multiple use>
              0x3b778c0: i32 = TargetGlobalAddress<float* @SG_RAMP_MAX> 0 [TF=2]

            0x3b7b830: i32 = REDEFINEISD::Hi 0x3b778c0

              0x3b77cc0: i32 = TargetGlobalAddress<float* @SG_RAMP_MAX> 0 [TF=3]

            0x3b79630: i32 = REDEFINEISD::Lo 0x3b77cc0

          0x3b75390: i32 = add 0x3b7b830, 0x3b79630

          0x3b77dc0: <multiple use>
        0x3b779c0: f32,ch = load 0x3b57b78, 0x3b75390, 0x3b77dc0<LD4[@SG_RAMP_MAX]> [ORD=79] [ID=8]

        0x3b777c0: ch = setuge [ID=6]

      0x3b75a90: i32 = setcc 0x3b776c0, 0x3b779c0, 0x3b777c0 [ID=9]

      0x3b76090: ch = BasicBlock<startup_starter3.if.end 0x3b95c10> [ID=4]

    0x3b7bf30: ch = brcond 0x3b57b78, 0x3b75a90, 0x3b76090 [ID=10]

    0x3b7a820: ch = BasicBlock<startup_starter3.if.then22 0x3b95b60> [ID=5]

  0x3b7b220: ch = br 0x3b7bf30, 0x3b7a820 [ID=11]


Optimized legalized selection DAG: BB#5 'startup_starter3:startup_starter3.if.then19'
SelectionDAG has 16 nodes:
  0x3b57b78: ch = EntryToken [ORD=78] [ID=0]

  0x3b77dc0: i32 = undef [ORD=78] [ID=2]

      0x3b57b78: <multiple use>
          0x3b57b78: <multiple use>
          0x3b7bb30: i32 = FrameIndex<3> [ORD=78] [ID=1]

          0x3b77dc0: <multiple use>
        0x3b776c0: f32,ch = load 0x3b57b78, 0x3b7bb30, 0x3b77dc0<LD4[%4]> [ORD=78] [ID=7]

          0x3b57b78: <multiple use>
              0x3b778c0: i32 = TargetGlobalAddress<float* @SG_RAMP_MAX> 0 [TF=2]

            0x3b7b830: i32 = REDEFINEISD::Hi 0x3b778c0

              0x3b77cc0: i32 = TargetGlobalAddress<float* @SG_RAMP_MAX> 0 [TF=3]

            0x3b79630: i32 = REDEFINEISD::Lo 0x3b77cc0

          0x3b75390: i32 = add 0x3b7b830, 0x3b79630

          0x3b77dc0: <multiple use>
        0x3b779c0: f32,ch = load 0x3b57b78, 0x3b75390, 0x3b77dc0<LD4[@SG_RAMP_MAX]> [ORD=79] [ID=8]

        0x3b777c0: ch = setuge [ID=6]

      0x3b75a90: i32 = setcc 0x3b776c0, 0x3b779c0, 0x3b777c0 [ID=9]

      0x3b76090: ch = BasicBlock<startup_starter3.if.end 0x3b95c10> [ID=4]

    0x3b7bf30: ch = brcond 0x3b57b78, 0x3b75a90, 0x3b76090 [ID=10]

    0x3b7a820: ch = BasicBlock<startup_starter3.if.then22 0x3b95b60> [ID=5]

  0x3b7b220: ch = br 0x3b7bf30, 0x3b7a820 [ID=11]


===== Instruction selection begins: BB#5 'startup_starter3.if.then19'
ISEL: Starting pattern match on root node: 0x3b7b220: ch = br 0x3b7bf30, 0x3b7a820 [ID=15]

  Initial Opcode index to 1938
  Morphed node: 0x3b7b220: ch = JAL 0x3b7a820, 0x3b7bf30

ISEL: Match complete!
=> 0x3b7b220: ch = JAL 0x3b7a820, 0x3b7bf30

ISEL: Starting pattern match on root node: 0x3b7bf30: ch = brcond 0x3b57b78, 0x3b75a90, 0x3b76090 [ID=14]

  Initial Opcode index to 1439
  Match failed at index 1449
  Continuing at 1676
  Morphed node: 0x3b7bf30: ch = BNE 0x3b76090, 0x3b75a90, 0x3b771c0, 0x3b57b78

ISEL: Match complete!
=> 0x3b7bf30: ch = BNE 0x3b76090, 0x3b75a90, 0x3b771c0, 0x3b57b78

ISEL: Starting pattern match on root node: 0x3b75a90: i32 = setcc 0x3b776c0, 0x3b779c0, 0x3b777c0 [ID=13]

  Initial Opcode index to 642
  Match failed at index 648
  Continuing at 688
  Match failed at index 690
  Continuing at 899
  Skipped scope entry (due to false predicate) at index 908, continuing at 920
  Skipped scope entry (due to false predicate) at index 921, continuing at 933
  Skipped scope entry (due to false predicate) at index 934, continuing at 946
  Skipped scope entry (due to false predicate) at index 947, continuing at 959
  Skipped scope entry (due to false predicate) at index 960, continuing at 972
  Skipped scope entry (due to false predicate) at index 973, continuing at 985
  Skipped scope entry (due to false predicate) at index 986, continuing at 998
  Skipped scope entry (due to false predicate) at index 999, continuing at 1011
  Skipped scope entry (due to false predicate) at index 1012, continuing at 1024
  Morphed node: 0x3b75a90: i32 = FULE_S 0x3b776c0, 0x3b779c0

ISEL: Match complete!
=> 0x3b75a90: i32 = FULE_S 0x3b776c0, 0x3b779c0

ISEL: Starting pattern match on root node: 0x3b779c0: f32,ch = load 0x3b57b78, 0x3b75390, 0x3b77dc0<LD4[@SG_RAMP_MAX]> [ORD=79] [ID=12]

  Initial Opcode index to 5
  TypeSwitch[f32] from 10 to 159
  Morphed node: 0x3b779c0: f32,ch = FLW 0x3b75390, 0x3b777c0, 0x3b57b78<Mem:LD4[@SG_RAMP_MAX]> [ORD=79]

ISEL: Match complete!
=> 0x3b779c0: f32,ch = FLW 0x3b75390, 0x3b777c0, 0x3b57b78<Mem:LD4[@SG_RAMP_MAX]> [ORD=79]

ISEL: Starting pattern match on root node: 0x3b75390: i32 = add 0x3b7b830, 0x3b79630 [ID=11]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x3b75390: i32 = ADD 0x3b79630, 0x3b7b830

ISEL: Match complete!
=> 0x3b75390: i32 = ADD 0x3b79630, 0x3b7b830

ISEL: Starting pattern match on root node: 0x3b79630: i32 = REDEFINEISD::Lo 0x3b77cc0 [ID=10]

  Initial Opcode index to 1204
  Morphed node: 0x3b79630: i32 = ADDI 0x3b771c0, 0x3b77cc0

ISEL: Match complete!
=> 0x3b79630: i32 = ADDI 0x3b771c0, 0x3b77cc0

ISEL: Starting pattern match on root node: 0x3b7b830: i32 = REDEFINEISD::Hi 0x3b778c0 [ID=9]

  Initial Opcode index to 1186
  Morphed node: 0x3b7b830: i32 = LUI 0x3b778c0

ISEL: Match complete!
=> 0x3b7b830: i32 = LUI 0x3b778c0

ISEL: Starting pattern match on root node: 0x3b776c0: f32,ch = load 0x3b57b78, 0x3b7bb30, 0x3b77dc0<LD4[%4]> [ORD=78] [ID=8]

  Initial Opcode index to 5
  TypeSwitch[f32] from 10 to 159
  Morphed node: 0x3b776c0: f32,ch = FLW 0x3b7bb30, 0x3b777c0, 0x3b57b78<Mem:LD4[%4]> [ORD=78]

ISEL: Match complete!
=> 0x3b776c0: f32,ch = FLW 0x3b7bb30, 0x3b777c0, 0x3b57b78<Mem:LD4[%4]> [ORD=78]

=> 0x3b77cc0: i32 = TargetGlobalAddress<float* @SG_RAMP_MAX> 0 [TF=3]

=> 0x3b778c0: i32 = TargetGlobalAddress<float* @SG_RAMP_MAX> 0 [TF=2]

=> 0x3b7a820: ch = BasicBlock<startup_starter3.if.then22 0x3b95b60>

=> 0x3b76090: ch = BasicBlock<startup_starter3.if.end 0x3b95c10>

=> 0x3b57b78: ch = EntryToken [ORD=78]

===== Instruction selection ends:
Selected selection DAG: BB#5 'startup_starter3:startup_starter3.if.then19'
SelectionDAG has 18 nodes:
  0x3b57b78: ch = EntryToken [ORD=78]

  0x3b771c0: i32 = Register %zero

  0x3b777c0: i32 = TargetConstant<0>

    0x3b7a820: ch = BasicBlock<startup_starter3.if.then22 0x3b95b60>

      0x3b76090: ch = BasicBlock<startup_starter3.if.end 0x3b95c10>

            0x3b77dc0: i32 = Register %t5

            0x3b79530: i32 = TargetFrameIndex<3>

          0x3b7bb30: i32 = ADDI 0x3b77dc0, 0x3b79530 [ORD=78]

          0x3b777c0: <multiple use>
          0x3b57b78: <multiple use>
        0x3b776c0: f32,ch = FLW 0x3b7bb30, 0x3b777c0, 0x3b57b78<Mem:LD4[%4]> [ORD=78]

              0x3b771c0: <multiple use>
              0x3b77cc0: i32 = TargetGlobalAddress<float* @SG_RAMP_MAX> 0 [TF=3]

            0x3b79630: i32 = ADDI 0x3b771c0, 0x3b77cc0

              0x3b778c0: i32 = TargetGlobalAddress<float* @SG_RAMP_MAX> 0 [TF=2]

            0x3b7b830: i32 = LUI 0x3b778c0

          0x3b75390: i32 = ADD 0x3b79630, 0x3b7b830

          0x3b777c0: <multiple use>
          0x3b57b78: <multiple use>
        0x3b779c0: f32,ch = FLW 0x3b75390, 0x3b777c0, 0x3b57b78<Mem:LD4[@SG_RAMP_MAX]> [ORD=79]

      0x3b75a90: i32 = FULE_S 0x3b776c0, 0x3b779c0

      0x3b771c0: <multiple use>
      0x3b57b78: <multiple use>
    0x3b7bf30: ch = BNE 0x3b76090, 0x3b75a90, 0x3b771c0, 0x3b57b78

  0x3b7b220: ch = JAL 0x3b7a820, 0x3b7bf30


********** List Scheduling BB#5 'startup_starter3.if.then19' **********
SU(0): 0x3b7b220: ch = JAL 0x3b7a820, 0x3b7bf30 [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x3b7bf30: ch = BNE 0x3b76090, 0x3b75a90, 0x3b771c0, 0x3b57b78 [ID=1]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
   val SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x3b75a90: i32 = FULE_S 0x3b776c0, 0x3b779c0 [ID=2]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 3
  Height             : 2
  Predecessors:
   val SU(7): Latency=1
   val SU(3): Latency=1
  Successors:
   val SU(1): Latency=1

SU(3): 0x3b779c0: f32,ch = FLW 0x3b75390, 0x3b777c0, 0x3b57b78<Mem:LD4[@SG_RAMP_MAX]> [ORD=79] [ID=3]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 3
  Predecessors:
   val SU(4): Latency=1
  Successors:
   val SU(2): Latency=1

SU(4): 0x3b75390: i32 = ADD 0x3b79630, 0x3b7b830 [ID=4]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
   val SU(6): Latency=1
   val SU(5): Latency=1
  Successors:
   val SU(3): Latency=1

SU(5): 0x3b7b830: i32 = LUI 0x3b778c0 [ID=5]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
   val SU(4): Latency=1

SU(6): 0x3b79630: i32 = ADDI 0x3b771c0, 0x3b77cc0 [ID=6]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
   val SU(4): Latency=1

SU(7): 0x3b776c0: f32,ch = FLW 0x3b7bb30, 0x3b777c0, 0x3b57b78<Mem:LD4[%4]> [ORD=78] [ID=7]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(8): Latency=1
  Successors:
   val SU(2): Latency=1

SU(8): 0x3b7bb30: i32 = ADDI 0x3b77dc0, 0x3b79530 [ORD=78] [ID=8]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(7): Latency=1


Examining Available:
Height 0: SU(0): 0x3b7b220: ch = JAL 0x3b7a820, 0x3b7bf30 [ID=0]


*** Scheduling [0]: SU(0): 0x3b7b220: ch = JAL 0x3b7a820, 0x3b7bf30 [ID=0]


Examining Available:
Height 1: SU(1): 0x3b7bf30: ch = BNE 0x3b76090, 0x3b75a90, 0x3b771c0, 0x3b57b78 [ID=1]


*** Scheduling [1]: SU(1): 0x3b7bf30: ch = BNE 0x3b76090, 0x3b75a90, 0x3b771c0, 0x3b57b78 [ID=1]


Examining Available:
Height 2: SU(2): 0x3b75a90: i32 = FULE_S 0x3b776c0, 0x3b779c0 [ID=2]


*** Scheduling [2]: SU(2): 0x3b75a90: i32 = FULE_S 0x3b776c0, 0x3b779c0 [ID=2]


Examining Available:
Height 3: SU(3): 0x3b779c0: f32,ch = FLW 0x3b75390, 0x3b777c0, 0x3b57b78<Mem:LD4[@SG_RAMP_MAX]> [ORD=79] [ID=3]

Height 3: SU(7): 0x3b776c0: f32,ch = FLW 0x3b7bb30, 0x3b777c0, 0x3b57b78<Mem:LD4[%4]> [ORD=78] [ID=7]


*** Scheduling [3]: SU(3): 0x3b779c0: f32,ch = FLW 0x3b75390, 0x3b777c0, 0x3b57b78<Mem:LD4[@SG_RAMP_MAX]> [ORD=79] [ID=3]


Examining Available:
Height 4: SU(4): 0x3b75390: i32 = ADD 0x3b79630, 0x3b7b830 [ID=4]

Height 3: SU(7): 0x3b776c0: f32,ch = FLW 0x3b7bb30, 0x3b777c0, 0x3b57b78<Mem:LD4[%4]> [ORD=78] [ID=7]


*** Scheduling [4]: SU(4): 0x3b75390: i32 = ADD 0x3b79630, 0x3b7b830 [ID=4]


Examining Available:
Height 5: SU(6): 0x3b79630: i32 = ADDI 0x3b771c0, 0x3b77cc0 [ID=6]

Height 5: SU(5): 0x3b7b830: i32 = LUI 0x3b778c0 [ID=5]

Height 3: SU(7): 0x3b776c0: f32,ch = FLW 0x3b7bb30, 0x3b777c0, 0x3b57b78<Mem:LD4[%4]> [ORD=78] [ID=7]


*** Scheduling [5]: SU(6): 0x3b79630: i32 = ADDI 0x3b771c0, 0x3b77cc0 [ID=6]


Examining Available:
Height 5: SU(5): 0x3b7b830: i32 = LUI 0x3b778c0 [ID=5]

Height 3: SU(7): 0x3b776c0: f32,ch = FLW 0x3b7bb30, 0x3b777c0, 0x3b57b78<Mem:LD4[%4]> [ORD=78] [ID=7]


*** Scheduling [6]: SU(5): 0x3b7b830: i32 = LUI 0x3b778c0 [ID=5]


Examining Available:
Height 3: SU(7): 0x3b776c0: f32,ch = FLW 0x3b7bb30, 0x3b777c0, 0x3b57b78<Mem:LD4[%4]> [ORD=78] [ID=7]


*** Scheduling [7]: SU(7): 0x3b776c0: f32,ch = FLW 0x3b7bb30, 0x3b777c0, 0x3b57b78<Mem:LD4[%4]> [ORD=78] [ID=7]


Examining Available:
Height 8: SU(8): 0x3b7bb30: i32 = ADDI 0x3b77dc0, 0x3b79530 [ORD=78] [ID=8]


*** Scheduling [8]: SU(8): 0x3b7bb30: i32 = ADDI 0x3b77dc0, 0x3b79530 [ORD=78] [ID=8]

*** Final schedule ***
SU(8): 0x3b7bb30: i32 = ADDI 0x3b77dc0, 0x3b79530 [ORD=78] [ID=8]

SU(7): 0x3b776c0: f32,ch = FLW 0x3b7bb30, 0x3b777c0, 0x3b57b78<Mem:LD4[%4]> [ORD=78] [ID=7]

SU(5): 0x3b7b830: i32 = LUI 0x3b778c0 [ID=5]

SU(6): 0x3b79630: i32 = ADDI 0x3b771c0, 0x3b77cc0 [ID=6]

SU(4): 0x3b75390: i32 = ADD 0x3b79630, 0x3b7b830 [ID=4]

SU(3): 0x3b779c0: f32,ch = FLW 0x3b75390, 0x3b777c0, 0x3b57b78<Mem:LD4[@SG_RAMP_MAX]> [ORD=79] [ID=3]

SU(2): 0x3b75a90: i32 = FULE_S 0x3b776c0, 0x3b779c0 [ID=2]

SU(1): 0x3b7bf30: ch = BNE 0x3b76090, 0x3b75a90, 0x3b771c0, 0x3b57b78 [ID=1]

SU(0): 0x3b7b220: ch = JAL 0x3b7a820, 0x3b7bf30 [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %40 = load float* @SG_RAMP_MAX, align 4
I was here to add @SG_RAMP_MAX = global float 0x3FE3333340000000, align 4
with I type floatand sd value :0x3b79530: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0
new load?0x3b771c0: f32,ch = load 0x3b57b78, 0x3b79530, 0x3b777c0<LD4[@SG_RAMP_MAX]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x3b77dc0: i32 = Constant<0>

    0x3b57b78: ch = EntryToken

    0x3b79530: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0

    0x3b777c0: i32 = undef

  0x3b771c0: f32,ch = load 0x3b57b78, 0x3b79530, 0x3b777c0<LD4[@SG_RAMP_MAX]>

  0x3b57b78: ch = EntryToken


store visit is after?  store float %40, float* %4, align 4
I was here to add   %4 = alloca float, align 4
whats in dag after store?SelectionDAG has 7 nodes:
  0x3b77dc0: i32 = Constant<0>

  0x3b777c0: i32 = undef [ORD=81]

    0x3b57b78: ch = EntryToken [ORD=81]

    0x3b79530: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0 [ORD=81]

    0x3b777c0: <multiple use>
  0x3b771c0: f32,ch = load 0x3b57b78, 0x3b79530, 0x3b777c0<LD4[@SG_RAMP_MAX]> [ORD=81]

    0x3b771c0: <multiple use>
    0x3b771c0: <multiple use>
    0x3b7b220: i32 = FrameIndex<3> [ORD=82]

    0x3b777c0: <multiple use>
  0x3b7bf30: ch = store 0x3b771c0:1, 0x3b771c0, 0x3b7b220, 0x3b777c0<ST4[%4]> [ORD=82]


Initial selection DAG: BB#6 'startup_starter3:startup_starter3.if.then22'
SelectionDAG has 7 nodes:
  0x3b77dc0: i32 = Constant<0>

  0x3b777c0: i32 = undef [ORD=81]

    0x3b57b78: ch = EntryToken [ORD=81]

    0x3b79530: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0 [ORD=81]

    0x3b777c0: <multiple use>
  0x3b771c0: f32,ch = load 0x3b57b78, 0x3b79530, 0x3b777c0<LD4[@SG_RAMP_MAX]> [ORD=81]

    0x3b771c0: <multiple use>
    0x3b771c0: <multiple use>
    0x3b7b220: i32 = FrameIndex<3> [ORD=82]

    0x3b777c0: <multiple use>
  0x3b7bf30: ch = store 0x3b771c0:1, 0x3b771c0, 0x3b7b220, 0x3b777c0<ST4[%4]> [ORD=82]


Optimized lowered selection DAG: BB#6 'startup_starter3:startup_starter3.if.then22'
SelectionDAG has 6 nodes:
  0x3b777c0: i32 = undef [ORD=81]

    0x3b57b78: ch = EntryToken [ORD=81]

    0x3b79530: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0 [ORD=81]

    0x3b777c0: <multiple use>
  0x3b771c0: f32,ch = load 0x3b57b78, 0x3b79530, 0x3b777c0<LD4[@SG_RAMP_MAX]> [ORD=81]

    0x3b771c0: <multiple use>
    0x3b771c0: <multiple use>
    0x3b7b220: i32 = FrameIndex<3> [ORD=82]

    0x3b777c0: <multiple use>
  0x3b7bf30: ch = store 0x3b771c0:1, 0x3b771c0, 0x3b7b220, 0x3b777c0<ST4[%4]> [ORD=82]


Legally typed node: 0x3b7b220: i32 = FrameIndex<3> [ORD=82] [ID=0]

Legally typed node: 0x3b777c0: i32 = undef [ORD=81] [ID=0]

Legally typed node: 0x3b79530: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0 [ORD=81] [ID=0]

Legally typed node: 0x3b57b78: ch = EntryToken [ORD=81] [ID=0]

Legally typed node: 0x3b771c0: f32,ch = load 0x3b57b78, 0x3b79530, 0x3b777c0<LD4[@SG_RAMP_MAX]> [ORD=81] [ID=0]

Legally typed node: 0x3b7bf30: ch = store 0x3b771c0:1, 0x3b771c0, 0x3b7b220, 0x3b777c0<ST4[%4]> [ORD=82] [ID=0]

Legally typed node: 0x7fffa88b7260: ch = handlenode 0x3b7bf30 [ID=0]

Type-legalized selection DAG: BB#6 'startup_starter3:startup_starter3.if.then22'
SelectionDAG has 6 nodes:
  0x3b777c0: i32 = undef [ORD=81] [ID=-3]

    0x3b57b78: ch = EntryToken [ORD=81] [ID=-3]

    0x3b79530: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0 [ORD=81] [ID=-3]

    0x3b777c0: <multiple use>
  0x3b771c0: f32,ch = load 0x3b57b78, 0x3b79530, 0x3b777c0<LD4[@SG_RAMP_MAX]> [ORD=81] [ID=-3]

    0x3b771c0: <multiple use>
    0x3b771c0: <multiple use>
    0x3b7b220: i32 = FrameIndex<3> [ORD=82] [ID=-3]

    0x3b777c0: <multiple use>
  0x3b7bf30: ch = store 0x3b771c0:1, 0x3b771c0, 0x3b7b220, 0x3b777c0<ST4[%4]> [ORD=82] [ID=-3]


Legalized selection DAG: BB#6 'startup_starter3:startup_starter3.if.then22'
SelectionDAG has 10 nodes:
  0x3b777c0: i32 = undef [ORD=81] [ID=2]

    0x3b57b78: ch = EntryToken [ORD=81] [ID=0]

        0x3b77dc0: i32 = TargetGlobalAddress<float* @SG_RAMP_MAX> 0 [TF=2]

      0x3b779c0: i32 = REDEFINEISD::Hi 0x3b77dc0

        0x3b75a90: i32 = TargetGlobalAddress<float* @SG_RAMP_MAX> 0 [TF=3]

      0x3b75390: i32 = REDEFINEISD::Lo 0x3b75a90

    0x3b79630: i32 = add 0x3b779c0, 0x3b75390

    0x3b777c0: <multiple use>
  0x3b771c0: f32,ch = load 0x3b57b78, 0x3b79630, 0x3b777c0<LD4[@SG_RAMP_MAX]> [ORD=81] [ID=4]

    0x3b771c0: <multiple use>
    0x3b771c0: <multiple use>
    0x3b7b220: i32 = FrameIndex<3> [ORD=82] [ID=3]

    0x3b777c0: <multiple use>
  0x3b7bf30: ch = store 0x3b771c0:1, 0x3b771c0, 0x3b7b220, 0x3b777c0<ST4[%4]> [ORD=82] [ID=5]


Optimized legalized selection DAG: BB#6 'startup_starter3:startup_starter3.if.then22'
SelectionDAG has 10 nodes:
  0x3b777c0: i32 = undef [ORD=81] [ID=2]

    0x3b57b78: ch = EntryToken [ORD=81] [ID=0]

        0x3b77dc0: i32 = TargetGlobalAddress<float* @SG_RAMP_MAX> 0 [TF=2]

      0x3b779c0: i32 = REDEFINEISD::Hi 0x3b77dc0

        0x3b75a90: i32 = TargetGlobalAddress<float* @SG_RAMP_MAX> 0 [TF=3]

      0x3b75390: i32 = REDEFINEISD::Lo 0x3b75a90

    0x3b79630: i32 = add 0x3b779c0, 0x3b75390

    0x3b777c0: <multiple use>
  0x3b771c0: f32,ch = load 0x3b57b78, 0x3b79630, 0x3b777c0<LD4[@SG_RAMP_MAX]> [ORD=81] [ID=4]

    0x3b771c0: <multiple use>
    0x3b771c0: <multiple use>
    0x3b7b220: i32 = FrameIndex<3> [ORD=82] [ID=3]

    0x3b777c0: <multiple use>
  0x3b7bf30: ch = store 0x3b771c0:1, 0x3b771c0, 0x3b7b220, 0x3b777c0<ST4[%4]> [ORD=82] [ID=5]


===== Instruction selection begins: BB#6 'startup_starter3.if.then22'
ISEL: Starting pattern match on root node: 0x3b7bf30: ch = store 0x3b771c0:1, 0x3b771c0, 0x3b7b220, 0x3b777c0<ST4[%4]> [ORD=82] [ID=9]

  Initial Opcode index to 178
  Skipped scope entry (due to false predicate) at index 183, continuing at 243
  Morphed node: 0x3b7bf30: ch = FSW 0x3b771c0, 0x3b7b220, 0x3b79530, 0x3b771c0:1<Mem:ST4[%4]> [ORD=82]

ISEL: Match complete!
=> 0x3b7bf30: ch = FSW 0x3b771c0, 0x3b7b220, 0x3b79530, 0x3b771c0:1<Mem:ST4[%4]> [ORD=82]

ISEL: Starting pattern match on root node: 0x3b771c0: f32,ch = load 0x3b57b78, 0x3b79630, 0x3b777c0<LD4[@SG_RAMP_MAX]> [ORD=81] [ID=8]

  Initial Opcode index to 5
  TypeSwitch[f32] from 10 to 159
  Morphed node: 0x3b771c0: f32,ch = FLW 0x3b79630, 0x3b79530, 0x3b57b78<Mem:LD4[@SG_RAMP_MAX]> [ORD=81]

ISEL: Match complete!
=> 0x3b771c0: f32,ch = FLW 0x3b79630, 0x3b79530, 0x3b57b78<Mem:LD4[@SG_RAMP_MAX]> [ORD=81]

ISEL: Starting pattern match on root node: 0x3b79630: i32 = add 0x3b779c0, 0x3b75390 [ID=7]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x3b79630: i32 = ADD 0x3b75390, 0x3b779c0

ISEL: Match complete!
=> 0x3b79630: i32 = ADD 0x3b75390, 0x3b779c0

ISEL: Starting pattern match on root node: 0x3b75390: i32 = REDEFINEISD::Lo 0x3b75a90 [ID=6]

  Initial Opcode index to 1204
  Morphed node: 0x3b75390: i32 = ADDI 0x3b777c0, 0x3b75a90

ISEL: Match complete!
=> 0x3b75390: i32 = ADDI 0x3b777c0, 0x3b75a90

ISEL: Starting pattern match on root node: 0x3b779c0: i32 = REDEFINEISD::Hi 0x3b77dc0 [ID=5]

  Initial Opcode index to 1186
  Morphed node: 0x3b779c0: i32 = LUI 0x3b77dc0

ISEL: Match complete!
=> 0x3b779c0: i32 = LUI 0x3b77dc0

=> 0x3b75a90: i32 = TargetGlobalAddress<float* @SG_RAMP_MAX> 0 [TF=3]

=> 0x3b77dc0: i32 = TargetGlobalAddress<float* @SG_RAMP_MAX> 0 [TF=2]

=> 0x3b57b78: ch = EntryToken [ORD=81]

===== Instruction selection ends:
Selected selection DAG: BB#6 'startup_starter3:startup_starter3.if.then22'
SelectionDAG has 13 nodes:
        0x3b777c0: i32 = Register %zero

        0x3b75a90: i32 = TargetGlobalAddress<float* @SG_RAMP_MAX> 0 [TF=3]

      0x3b75390: i32 = ADDI 0x3b777c0, 0x3b75a90

        0x3b77dc0: i32 = TargetGlobalAddress<float* @SG_RAMP_MAX> 0 [TF=2]

      0x3b779c0: i32 = LUI 0x3b77dc0

    0x3b79630: i32 = ADD 0x3b75390, 0x3b779c0

    0x3b79530: <multiple use>
    0x3b57b78: ch = EntryToken [ORD=81]

  0x3b771c0: f32,ch = FLW 0x3b79630, 0x3b79530, 0x3b57b78<Mem:LD4[@SG_RAMP_MAX]> [ORD=81]

  0x3b79530: i32 = TargetConstant<0>

    0x3b771c0: <multiple use>
      0x3b7b830: i32 = Register %t5

      0x3b776c0: i32 = TargetFrameIndex<3>

    0x3b7b220: i32 = ADDI 0x3b7b830, 0x3b776c0 [ORD=82]

    0x3b79530: <multiple use>
    0x3b771c0: <multiple use>
  0x3b7bf30: ch = FSW 0x3b771c0, 0x3b7b220, 0x3b79530, 0x3b771c0:1<Mem:ST4[%4]> [ORD=82]


********** List Scheduling BB#6 'startup_starter3.if.then22' **********
SU(0): 0x3b7bf30: ch = FSW 0x3b771c0, 0x3b7b220, 0x3b79530, 0x3b771c0:1<Mem:ST4[%4]> [ORD=82] [ID=0]

  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 0
  Predecessors:
   val SU(2): Latency=1
   val SU(1): Latency=1
   ch  SU(2): Latency=1

SU(1): 0x3b7b220: i32 = ADDI 0x3b7b830, 0x3b776c0 [ORD=82] [ID=1]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
   val SU(0): Latency=1

SU(2): 0x3b771c0: f32,ch = FLW 0x3b79630, 0x3b79530, 0x3b57b78<Mem:LD4[@SG_RAMP_MAX]> [ORD=81] [ID=2]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
   val SU(3): Latency=1
  Successors:
   val SU(0): Latency=1
   ch  SU(0): Latency=1

SU(3): 0x3b79630: i32 = ADD 0x3b75390, 0x3b779c0 [ID=3]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
   val SU(5): Latency=1
   val SU(4): Latency=1
  Successors:
   val SU(2): Latency=1

SU(4): 0x3b779c0: i32 = LUI 0x3b77dc0 [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(3): Latency=1

SU(5): 0x3b75390: i32 = ADDI 0x3b777c0, 0x3b75a90 [ID=5]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(3): Latency=1


Examining Available:
Height 0: SU(0): 0x3b7bf30: ch = FSW 0x3b771c0, 0x3b7b220, 0x3b79530, 0x3b771c0:1<Mem:ST4[%4]> [ORD=82] [ID=0]


*** Scheduling [0]: SU(0): 0x3b7bf30: ch = FSW 0x3b771c0, 0x3b7b220, 0x3b79530, 0x3b771c0:1<Mem:ST4[%4]> [ORD=82] [ID=0]


Examining Available:
Height 1: SU(1): 0x3b7b220: i32 = ADDI 0x3b7b830, 0x3b776c0 [ORD=82] [ID=1]

Height 1: SU(2): 0x3b771c0: f32,ch = FLW 0x3b79630, 0x3b79530, 0x3b57b78<Mem:LD4[@SG_RAMP_MAX]> [ORD=81] [ID=2]


*** Scheduling [1]: SU(1): 0x3b7b220: i32 = ADDI 0x3b7b830, 0x3b776c0 [ORD=82] [ID=1]


Examining Available:
Height 1: SU(2): 0x3b771c0: f32,ch = FLW 0x3b79630, 0x3b79530, 0x3b57b78<Mem:LD4[@SG_RAMP_MAX]> [ORD=81] [ID=2]


*** Scheduling [2]: SU(2): 0x3b771c0: f32,ch = FLW 0x3b79630, 0x3b79530, 0x3b57b78<Mem:LD4[@SG_RAMP_MAX]> [ORD=81] [ID=2]


Examining Available:
Height 3: SU(3): 0x3b79630: i32 = ADD 0x3b75390, 0x3b779c0 [ID=3]


*** Scheduling [3]: SU(3): 0x3b79630: i32 = ADD 0x3b75390, 0x3b779c0 [ID=3]


Examining Available:
Height 4: SU(5): 0x3b75390: i32 = ADDI 0x3b777c0, 0x3b75a90 [ID=5]

Height 4: SU(4): 0x3b779c0: i32 = LUI 0x3b77dc0 [ID=4]


*** Scheduling [4]: SU(5): 0x3b75390: i32 = ADDI 0x3b777c0, 0x3b75a90 [ID=5]


Examining Available:
Height 4: SU(4): 0x3b779c0: i32 = LUI 0x3b77dc0 [ID=4]


*** Scheduling [5]: SU(4): 0x3b779c0: i32 = LUI 0x3b77dc0 [ID=4]

*** Final schedule ***
SU(4): 0x3b779c0: i32 = LUI 0x3b77dc0 [ID=4]

SU(5): 0x3b75390: i32 = ADDI 0x3b777c0, 0x3b75a90 [ID=5]

SU(3): 0x3b79630: i32 = ADD 0x3b75390, 0x3b779c0 [ID=3]

SU(2): 0x3b771c0: f32,ch = FLW 0x3b79630, 0x3b79530, 0x3b57b78<Mem:LD4[@SG_RAMP_MAX]> [ORD=81] [ID=2]

SU(1): 0x3b7b220: i32 = ADDI 0x3b7b830, 0x3b776c0 [ORD=82] [ID=1]

SU(0): 0x3b7bf30: ch = FSW 0x3b771c0, 0x3b7b220, 0x3b79530, 0x3b771c0:1<Mem:ST4[%4]> [ORD=82] [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %41 = load float* %4, align 4
I was here to add   %4 = alloca float, align 4
with I type floatand sd value :0x3b776c0: i32 = FrameIndex<3>
new load?0x3b79530: f32,ch = load 0x3b57b78, 0x3b776c0, 0x3b777c0<LD4[%4]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x3b7b830: i32 = Constant<0>

    0x3b57b78: ch = EntryToken

    0x3b776c0: i32 = FrameIndex<3>

    0x3b777c0: i32 = undef

  0x3b79530: f32,ch = load 0x3b57b78, 0x3b776c0, 0x3b777c0<LD4[%4]>

  0x3b57b78: ch = EntryToken


visiting load instruction   %42 = load float* @SG_MAX, align 4
I was here to add @SG_MAX = global float 0x3FECCCCCC0000000, align 4
with I type floatand sd value :0x3b7bf30: i32 = GlobalAddress<float* @SG_MAX> 0
new load?0x3b771c0: f32,ch = load 0x3b57b78, 0x3b7bf30, 0x3b777c0<LD4[@SG_MAX]>
dag after load is dealt with?SelectionDAG has 7 nodes:
  0x3b7b830: i32 = Constant<0>

  0x3b777c0: i32 = undef [ORD=83]

    0x3b57b78: <multiple use>
    0x3b776c0: i32 = FrameIndex<3> [ORD=83]

    0x3b777c0: <multiple use>
  0x3b79530: f32,ch = load 0x3b57b78, 0x3b776c0, 0x3b777c0<LD4[%4]> [ORD=83]

    0x3b57b78: <multiple use>
    0x3b7bf30: i32 = GlobalAddress<float* @SG_MAX> 0

    0x3b777c0: <multiple use>
  0x3b771c0: f32,ch = load 0x3b57b78, 0x3b7bf30, 0x3b777c0<LD4[@SG_MAX]>

  0x3b57b78: ch = EntryToken [ORD=83]


Initial selection DAG: BB#7 'startup_starter3:startup_starter3.if.end'
SelectionDAG has 15 nodes:
  0x3b57b78: ch = EntryToken [ORD=83]

  0x3b7b830: i32 = Constant<0>

  0x3b777c0: i32 = undef [ORD=83]

      0x3b57b78: <multiple use>
            0x3b57b78: <multiple use>
            0x3b776c0: i32 = FrameIndex<3> [ORD=83]

            0x3b777c0: <multiple use>
          0x3b79530: f32,ch = load 0x3b57b78, 0x3b776c0, 0x3b777c0<LD4[%4]> [ORD=83]

            0x3b57b78: <multiple use>
            0x3b7bf30: i32 = GlobalAddress<float* @SG_MAX> 0 [ORD=84]

            0x3b777c0: <multiple use>
          0x3b771c0: f32,ch = load 0x3b57b78, 0x3b7bf30, 0x3b777c0<LD4[@SG_MAX]> [ORD=84]

          0x3b79630: ch = setogt [ORD=85]

        0x3b75390: i1 = setcc 0x3b79530, 0x3b771c0, 0x3b79630 [ORD=85]

        0x3b779c0: i1 = Constant<-1>

      0x3b75a90: i1 = xor 0x3b75390, 0x3b779c0

      0x3b77dc0: ch = BasicBlock<startup_starter3.return 0x3b95f80>

    0x3b7b220: ch = brcond 0x3b57b78, 0x3b75a90, 0x3b77dc0

    0x3b77cc0: ch = BasicBlock<startup_starter3.if.then25 0x3b95cc0>

  0x3b778c0: ch = br 0x3b7b220, 0x3b77cc0



Replacing.3 0x3b75a90: i1 = xor 0x3b75390, 0x3b779c0

With: 0x3b76090: i1 = setcc 0x3b79530, 0x3b771c0, 0x3b7a820

Optimized lowered selection DAG: BB#7 'startup_starter3:startup_starter3.if.end'
SelectionDAG has 12 nodes:
  0x3b57b78: ch = EntryToken [ORD=83]

  0x3b777c0: i32 = undef [ORD=83]

      0x3b57b78: <multiple use>
          0x3b57b78: <multiple use>
          0x3b776c0: i32 = FrameIndex<3> [ORD=83]

          0x3b777c0: <multiple use>
        0x3b79530: f32,ch = load 0x3b57b78, 0x3b776c0, 0x3b777c0<LD4[%4]> [ORD=83]

          0x3b57b78: <multiple use>
          0x3b7bf30: i32 = GlobalAddress<float* @SG_MAX> 0 [ORD=84]

          0x3b777c0: <multiple use>
        0x3b771c0: f32,ch = load 0x3b57b78, 0x3b7bf30, 0x3b777c0<LD4[@SG_MAX]> [ORD=84]

        0x3b7a820: ch = setule

      0x3b76090: i1 = setcc 0x3b79530, 0x3b771c0, 0x3b7a820

      0x3b77dc0: ch = BasicBlock<startup_starter3.return 0x3b95f80>

    0x3b7b220: ch = brcond 0x3b57b78, 0x3b76090, 0x3b77dc0

    0x3b77cc0: ch = BasicBlock<startup_starter3.if.then25 0x3b95cc0>

  0x3b778c0: ch = br 0x3b7b220, 0x3b77cc0


Legally typed node: 0x3b7a820: ch = setule [ID=0]

Legally typed node: 0x3b77cc0: ch = BasicBlock<startup_starter3.if.then25 0x3b95cc0> [ID=0]

Legally typed node: 0x3b77dc0: ch = BasicBlock<startup_starter3.return 0x3b95f80> [ID=0]

Legally typed node: 0x3b7bf30: i32 = GlobalAddress<float* @SG_MAX> 0 [ORD=84] [ID=0]

Legally typed node: 0x3b777c0: i32 = undef [ORD=83] [ID=0]

Legally typed node: 0x3b776c0: i32 = FrameIndex<3> [ORD=83] [ID=0]

Legally typed node: 0x3b57b78: ch = EntryToken [ORD=83] [ID=0]

Legally typed node: 0x3b79530: f32,ch = load 0x3b57b78, 0x3b776c0, 0x3b777c0<LD4[%4]> [ORD=83] [ID=0]

Legally typed node: 0x3b771c0: f32,ch = load 0x3b57b78, 0x3b7bf30, 0x3b777c0<LD4[@SG_MAX]> [ORD=84] [ID=0]

Promote integer result: 0x3b76090: i1 = setcc 0x3b79530, 0x3b771c0, 0x3b7a820 [ID=0]

Promote integer operand: 0x3b7b220: ch = brcond 0x3b57b78, 0x3b76090, 0x3b77dc0 [ID=0]

Promote integer operand: 0x3b79630: i32 = zero_extend 0x3b76090 [ID=0]

Legally typed node: 0x3b75390: i32 = Constant<1> [ID=0]

Legally typed node: 0x3b7b830: i32 = setcc 0x3b79530, 0x3b771c0, 0x3b7a820 [ID=0]

Legally typed node: 0x3b779c0: i32 = and 0x3b7b830, 0x3b75390 [ID=0]

Legally typed node: 0x3b7b220: ch = brcond 0x3b57b78, 0x3b779c0, 0x3b77dc0 [ID=0]

Legally typed node: 0x3b778c0: ch = br 0x3b7b220, 0x3b77cc0 [ID=0]

Legally typed node: 0x7fffa88b7260: ch = handlenode 0x3b778c0 [ID=0]

Type-legalized selection DAG: BB#7 'startup_starter3:startup_starter3.if.end'
SelectionDAG has 14 nodes:
  0x3b57b78: ch = EntryToken [ORD=83] [ID=-3]

  0x3b777c0: i32 = undef [ORD=83] [ID=-3]

      0x3b57b78: <multiple use>
            0x3b57b78: <multiple use>
            0x3b776c0: i32 = FrameIndex<3> [ORD=83] [ID=-3]

            0x3b777c0: <multiple use>
          0x3b79530: f32,ch = load 0x3b57b78, 0x3b776c0, 0x3b777c0<LD4[%4]> [ORD=83] [ID=-3]

            0x3b57b78: <multiple use>
            0x3b7bf30: i32 = GlobalAddress<float* @SG_MAX> 0 [ORD=84] [ID=-3]

            0x3b777c0: <multiple use>
          0x3b771c0: f32,ch = load 0x3b57b78, 0x3b7bf30, 0x3b777c0<LD4[@SG_MAX]> [ORD=84] [ID=-3]

          0x3b7a820: ch = setule [ID=-3]

        0x3b7b830: i32 = setcc 0x3b79530, 0x3b771c0, 0x3b7a820 [ID=-3]

        0x3b75390: i32 = Constant<1> [ID=-3]

      0x3b779c0: i32 = and 0x3b7b830, 0x3b75390 [ID=-3]

      0x3b77dc0: ch = BasicBlock<startup_starter3.return 0x3b95f80> [ID=-3]

    0x3b7b220: ch = brcond 0x3b57b78, 0x3b779c0, 0x3b77dc0 [ID=-3]

    0x3b77cc0: ch = BasicBlock<startup_starter3.if.then25 0x3b95cc0> [ID=-3]

  0x3b778c0: ch = br 0x3b7b220, 0x3b77cc0 [ID=-3]



Replacing.2 0x3b779c0: i32 = and 0x3b7b830, 0x3b75390 [ID=-3]

With: 0x3b7b830: i32 = setcc 0x3b79530, 0x3b771c0, 0x3b7a820 [ID=-3]

Optimized type-legalized selection DAG: BB#7 'startup_starter3:startup_starter3.if.end'
SelectionDAG has 12 nodes:
  0x3b57b78: ch = EntryToken [ORD=83] [ID=-3]

  0x3b777c0: i32 = undef [ORD=83] [ID=-3]

      0x3b57b78: <multiple use>
          0x3b57b78: <multiple use>
          0x3b776c0: i32 = FrameIndex<3> [ORD=83] [ID=-3]

          0x3b777c0: <multiple use>
        0x3b79530: f32,ch = load 0x3b57b78, 0x3b776c0, 0x3b777c0<LD4[%4]> [ORD=83] [ID=-3]

          0x3b57b78: <multiple use>
          0x3b7bf30: i32 = GlobalAddress<float* @SG_MAX> 0 [ORD=84] [ID=-3]

          0x3b777c0: <multiple use>
        0x3b771c0: f32,ch = load 0x3b57b78, 0x3b7bf30, 0x3b777c0<LD4[@SG_MAX]> [ORD=84] [ID=-3]

        0x3b7a820: ch = setule [ID=-3]

      0x3b7b830: i32 = setcc 0x3b79530, 0x3b771c0, 0x3b7a820 [ID=-3]

      0x3b77dc0: ch = BasicBlock<startup_starter3.return 0x3b95f80> [ID=-3]

    0x3b7b220: ch = brcond 0x3b57b78, 0x3b7b830, 0x3b77dc0 [ID=-3]

    0x3b77cc0: ch = BasicBlock<startup_starter3.if.then25 0x3b95cc0> [ID=-3]

  0x3b778c0: ch = br 0x3b7b220, 0x3b77cc0 [ID=-3]


Legalized selection DAG: BB#7 'startup_starter3:startup_starter3.if.end'
SelectionDAG has 16 nodes:
  0x3b57b78: ch = EntryToken [ORD=83] [ID=0]

  0x3b777c0: i32 = undef [ORD=83] [ID=2]

      0x3b57b78: <multiple use>
          0x3b57b78: <multiple use>
          0x3b776c0: i32 = FrameIndex<3> [ORD=83] [ID=1]

          0x3b777c0: <multiple use>
        0x3b79530: f32,ch = load 0x3b57b78, 0x3b776c0, 0x3b777c0<LD4[%4]> [ORD=83] [ID=7]

          0x3b57b78: <multiple use>
              0x3b75390: i32 = TargetGlobalAddress<float* @SG_MAX> 0 [TF=2]

            0x3b76090: i32 = REDEFINEISD::Hi 0x3b75390

              0x3b779c0: i32 = TargetGlobalAddress<float* @SG_MAX> 0 [TF=3]

            0x3b79630: i32 = REDEFINEISD::Lo 0x3b779c0

          0x3b75a90: i32 = add 0x3b76090, 0x3b79630

          0x3b777c0: <multiple use>
        0x3b771c0: f32,ch = load 0x3b57b78, 0x3b75a90, 0x3b777c0<LD4[@SG_MAX]> [ORD=84] [ID=8]

        0x3b7a820: ch = setule [ID=6]

      0x3b7b830: i32 = setcc 0x3b79530, 0x3b771c0, 0x3b7a820 [ID=9]

      0x3b77dc0: ch = BasicBlock<startup_starter3.return 0x3b95f80> [ID=4]

    0x3b7b220: ch = brcond 0x3b57b78, 0x3b7b830, 0x3b77dc0 [ID=10]

    0x3b77cc0: ch = BasicBlock<startup_starter3.if.then25 0x3b95cc0> [ID=5]

  0x3b778c0: ch = br 0x3b7b220, 0x3b77cc0 [ID=11]


Optimized legalized selection DAG: BB#7 'startup_starter3:startup_starter3.if.end'
SelectionDAG has 16 nodes:
  0x3b57b78: ch = EntryToken [ORD=83] [ID=0]

  0x3b777c0: i32 = undef [ORD=83] [ID=2]

      0x3b57b78: <multiple use>
          0x3b57b78: <multiple use>
          0x3b776c0: i32 = FrameIndex<3> [ORD=83] [ID=1]

          0x3b777c0: <multiple use>
        0x3b79530: f32,ch = load 0x3b57b78, 0x3b776c0, 0x3b777c0<LD4[%4]> [ORD=83] [ID=7]

          0x3b57b78: <multiple use>
              0x3b75390: i32 = TargetGlobalAddress<float* @SG_MAX> 0 [TF=2]

            0x3b76090: i32 = REDEFINEISD::Hi 0x3b75390

              0x3b779c0: i32 = TargetGlobalAddress<float* @SG_MAX> 0 [TF=3]

            0x3b79630: i32 = REDEFINEISD::Lo 0x3b779c0

          0x3b75a90: i32 = add 0x3b76090, 0x3b79630

          0x3b777c0: <multiple use>
        0x3b771c0: f32,ch = load 0x3b57b78, 0x3b75a90, 0x3b777c0<LD4[@SG_MAX]> [ORD=84] [ID=8]

        0x3b7a820: ch = setule [ID=6]

      0x3b7b830: i32 = setcc 0x3b79530, 0x3b771c0, 0x3b7a820 [ID=9]

      0x3b77dc0: ch = BasicBlock<startup_starter3.return 0x3b95f80> [ID=4]

    0x3b7b220: ch = brcond 0x3b57b78, 0x3b7b830, 0x3b77dc0 [ID=10]

    0x3b77cc0: ch = BasicBlock<startup_starter3.if.then25 0x3b95cc0> [ID=5]

  0x3b778c0: ch = br 0x3b7b220, 0x3b77cc0 [ID=11]


===== Instruction selection begins: BB#7 'startup_starter3.if.end'
ISEL: Starting pattern match on root node: 0x3b778c0: ch = br 0x3b7b220, 0x3b77cc0 [ID=15]

  Initial Opcode index to 1938
  Morphed node: 0x3b778c0: ch = JAL 0x3b77cc0, 0x3b7b220

ISEL: Match complete!
=> 0x3b778c0: ch = JAL 0x3b77cc0, 0x3b7b220

ISEL: Starting pattern match on root node: 0x3b7b220: ch = brcond 0x3b57b78, 0x3b7b830, 0x3b77dc0 [ID=14]

  Initial Opcode index to 1439
  Match failed at index 1449
  Continuing at 1676
  Morphed node: 0x3b7b220: ch = BNE 0x3b77dc0, 0x3b7b830, 0x3b7bf30, 0x3b57b78

ISEL: Match complete!
=> 0x3b7b220: ch = BNE 0x3b77dc0, 0x3b7b830, 0x3b7bf30, 0x3b57b78

ISEL: Starting pattern match on root node: 0x3b7b830: i32 = setcc 0x3b79530, 0x3b771c0, 0x3b7a820 [ID=13]

  Initial Opcode index to 642
  Match failed at index 648
  Continuing at 688
  Match failed at index 690
  Continuing at 899
  Skipped scope entry (due to false predicate) at index 908, continuing at 920
  Skipped scope entry (due to false predicate) at index 921, continuing at 933
  Skipped scope entry (due to false predicate) at index 934, continuing at 946
  Skipped scope entry (due to false predicate) at index 947, continuing at 959
  Skipped scope entry (due to false predicate) at index 960, continuing at 972
  Morphed node: 0x3b7b830: i32 = FULE_S 0x3b771c0, 0x3b79530

ISEL: Match complete!
=> 0x3b7b830: i32 = FULE_S 0x3b771c0, 0x3b79530

ISEL: Starting pattern match on root node: 0x3b771c0: f32,ch = load 0x3b57b78, 0x3b75a90, 0x3b777c0<LD4[@SG_MAX]> [ORD=84] [ID=12]

  Initial Opcode index to 5
  TypeSwitch[f32] from 10 to 159
  Morphed node: 0x3b771c0: f32,ch = FLW 0x3b75a90, 0x3b7a820, 0x3b57b78<Mem:LD4[@SG_MAX]> [ORD=84]

ISEL: Match complete!
=> 0x3b771c0: f32,ch = FLW 0x3b75a90, 0x3b7a820, 0x3b57b78<Mem:LD4[@SG_MAX]> [ORD=84]

ISEL: Starting pattern match on root node: 0x3b75a90: i32 = add 0x3b76090, 0x3b79630 [ID=11]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x3b75a90: i32 = ADD 0x3b79630, 0x3b76090

ISEL: Match complete!
=> 0x3b75a90: i32 = ADD 0x3b79630, 0x3b76090

ISEL: Starting pattern match on root node: 0x3b79630: i32 = REDEFINEISD::Lo 0x3b779c0 [ID=10]

  Initial Opcode index to 1204
  Morphed node: 0x3b79630: i32 = ADDI 0x3b7bf30, 0x3b779c0

ISEL: Match complete!
=> 0x3b79630: i32 = ADDI 0x3b7bf30, 0x3b779c0

ISEL: Starting pattern match on root node: 0x3b76090: i32 = REDEFINEISD::Hi 0x3b75390 [ID=9]

  Initial Opcode index to 1186
  Morphed node: 0x3b76090: i32 = LUI 0x3b75390

ISEL: Match complete!
=> 0x3b76090: i32 = LUI 0x3b75390

ISEL: Starting pattern match on root node: 0x3b79530: f32,ch = load 0x3b57b78, 0x3b776c0, 0x3b777c0<LD4[%4]> [ORD=83] [ID=8]

  Initial Opcode index to 5
  TypeSwitch[f32] from 10 to 159
  Morphed node: 0x3b79530: f32,ch = FLW 0x3b776c0, 0x3b7a820, 0x3b57b78<Mem:LD4[%4]> [ORD=83]

ISEL: Match complete!
=> 0x3b79530: f32,ch = FLW 0x3b776c0, 0x3b7a820, 0x3b57b78<Mem:LD4[%4]> [ORD=83]

=> 0x3b779c0: i32 = TargetGlobalAddress<float* @SG_MAX> 0 [TF=3]

=> 0x3b75390: i32 = TargetGlobalAddress<float* @SG_MAX> 0 [TF=2]

=> 0x3b77cc0: ch = BasicBlock<startup_starter3.if.then25 0x3b95cc0>

=> 0x3b77dc0: ch = BasicBlock<startup_starter3.return 0x3b95f80>

=> 0x3b57b78: ch = EntryToken [ORD=83]

===== Instruction selection ends:
Selected selection DAG: BB#7 'startup_starter3:startup_starter3.if.end'
SelectionDAG has 18 nodes:
  0x3b57b78: ch = EntryToken [ORD=83]

  0x3b7bf30: i32 = Register %zero

  0x3b7a820: i32 = TargetConstant<0>

    0x3b77cc0: ch = BasicBlock<startup_starter3.if.then25 0x3b95cc0>

      0x3b77dc0: ch = BasicBlock<startup_starter3.return 0x3b95f80>

              0x3b7bf30: <multiple use>
              0x3b779c0: i32 = TargetGlobalAddress<float* @SG_MAX> 0 [TF=3]

            0x3b79630: i32 = ADDI 0x3b7bf30, 0x3b779c0

              0x3b75390: i32 = TargetGlobalAddress<float* @SG_MAX> 0 [TF=2]

            0x3b76090: i32 = LUI 0x3b75390

          0x3b75a90: i32 = ADD 0x3b79630, 0x3b76090

          0x3b7a820: <multiple use>
          0x3b57b78: <multiple use>
        0x3b771c0: f32,ch = FLW 0x3b75a90, 0x3b7a820, 0x3b57b78<Mem:LD4[@SG_MAX]> [ORD=84]

            0x3b777c0: i32 = Register %t5

            0x3b7bb30: i32 = TargetFrameIndex<3>

          0x3b776c0: i32 = ADDI 0x3b777c0, 0x3b7bb30 [ORD=83]

          0x3b7a820: <multiple use>
          0x3b57b78: <multiple use>
        0x3b79530: f32,ch = FLW 0x3b776c0, 0x3b7a820, 0x3b57b78<Mem:LD4[%4]> [ORD=83]

      0x3b7b830: i32 = FULE_S 0x3b771c0, 0x3b79530

      0x3b7bf30: <multiple use>
      0x3b57b78: <multiple use>
    0x3b7b220: ch = BNE 0x3b77dc0, 0x3b7b830, 0x3b7bf30, 0x3b57b78

  0x3b778c0: ch = JAL 0x3b77cc0, 0x3b7b220


********** List Scheduling BB#7 'startup_starter3.if.end' **********
SU(0): 0x3b778c0: ch = JAL 0x3b77cc0, 0x3b7b220 [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x3b7b220: ch = BNE 0x3b77dc0, 0x3b7b830, 0x3b7bf30, 0x3b57b78 [ID=1]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
   val SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x3b7b830: i32 = FULE_S 0x3b771c0, 0x3b79530 [ID=2]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 3
  Height             : 2
  Predecessors:
   val SU(5): Latency=1
   val SU(3): Latency=1
  Successors:
   val SU(1): Latency=1

SU(3): 0x3b79530: f32,ch = FLW 0x3b776c0, 0x3b7a820, 0x3b57b78<Mem:LD4[%4]> [ORD=83] [ID=3]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(4): Latency=1
  Successors:
   val SU(2): Latency=1

SU(4): 0x3b776c0: i32 = ADDI 0x3b777c0, 0x3b7bb30 [ORD=83] [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(3): Latency=1

SU(5): 0x3b771c0: f32,ch = FLW 0x3b75a90, 0x3b7a820, 0x3b57b78<Mem:LD4[@SG_MAX]> [ORD=84] [ID=5]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 3
  Predecessors:
   val SU(6): Latency=1
  Successors:
   val SU(2): Latency=1

SU(6): 0x3b75a90: i32 = ADD 0x3b79630, 0x3b76090 [ID=6]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
   val SU(8): Latency=1
   val SU(7): Latency=1
  Successors:
   val SU(5): Latency=1

SU(7): 0x3b76090: i32 = LUI 0x3b75390 [ID=7]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
   val SU(6): Latency=1

SU(8): 0x3b79630: i32 = ADDI 0x3b7bf30, 0x3b779c0 [ID=8]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
   val SU(6): Latency=1


Examining Available:
Height 0: SU(0): 0x3b778c0: ch = JAL 0x3b77cc0, 0x3b7b220 [ID=0]


*** Scheduling [0]: SU(0): 0x3b778c0: ch = JAL 0x3b77cc0, 0x3b7b220 [ID=0]


Examining Available:
Height 1: SU(1): 0x3b7b220: ch = BNE 0x3b77dc0, 0x3b7b830, 0x3b7bf30, 0x3b57b78 [ID=1]


*** Scheduling [1]: SU(1): 0x3b7b220: ch = BNE 0x3b77dc0, 0x3b7b830, 0x3b7bf30, 0x3b57b78 [ID=1]


Examining Available:
Height 2: SU(2): 0x3b7b830: i32 = FULE_S 0x3b771c0, 0x3b79530 [ID=2]


*** Scheduling [2]: SU(2): 0x3b7b830: i32 = FULE_S 0x3b771c0, 0x3b79530 [ID=2]


Examining Available:
Height 3: SU(5): 0x3b771c0: f32,ch = FLW 0x3b75a90, 0x3b7a820, 0x3b57b78<Mem:LD4[@SG_MAX]> [ORD=84] [ID=5]

Height 3: SU(3): 0x3b79530: f32,ch = FLW 0x3b776c0, 0x3b7a820, 0x3b57b78<Mem:LD4[%4]> [ORD=83] [ID=3]


*** Scheduling [3]: SU(5): 0x3b771c0: f32,ch = FLW 0x3b75a90, 0x3b7a820, 0x3b57b78<Mem:LD4[@SG_MAX]> [ORD=84] [ID=5]


Examining Available:
Height 4: SU(6): 0x3b75a90: i32 = ADD 0x3b79630, 0x3b76090 [ID=6]

Height 3: SU(3): 0x3b79530: f32,ch = FLW 0x3b776c0, 0x3b7a820, 0x3b57b78<Mem:LD4[%4]> [ORD=83] [ID=3]


*** Scheduling [4]: SU(6): 0x3b75a90: i32 = ADD 0x3b79630, 0x3b76090 [ID=6]


Examining Available:
Height 5: SU(8): 0x3b79630: i32 = ADDI 0x3b7bf30, 0x3b779c0 [ID=8]

Height 5: SU(7): 0x3b76090: i32 = LUI 0x3b75390 [ID=7]

Height 3: SU(3): 0x3b79530: f32,ch = FLW 0x3b776c0, 0x3b7a820, 0x3b57b78<Mem:LD4[%4]> [ORD=83] [ID=3]


*** Scheduling [5]: SU(8): 0x3b79630: i32 = ADDI 0x3b7bf30, 0x3b779c0 [ID=8]


Examining Available:
Height 5: SU(7): 0x3b76090: i32 = LUI 0x3b75390 [ID=7]

Height 3: SU(3): 0x3b79530: f32,ch = FLW 0x3b776c0, 0x3b7a820, 0x3b57b78<Mem:LD4[%4]> [ORD=83] [ID=3]


*** Scheduling [6]: SU(7): 0x3b76090: i32 = LUI 0x3b75390 [ID=7]


Examining Available:
Height 3: SU(3): 0x3b79530: f32,ch = FLW 0x3b776c0, 0x3b7a820, 0x3b57b78<Mem:LD4[%4]> [ORD=83] [ID=3]


*** Scheduling [7]: SU(3): 0x3b79530: f32,ch = FLW 0x3b776c0, 0x3b7a820, 0x3b57b78<Mem:LD4[%4]> [ORD=83] [ID=3]


Examining Available:
Height 8: SU(4): 0x3b776c0: i32 = ADDI 0x3b777c0, 0x3b7bb30 [ORD=83] [ID=4]


*** Scheduling [8]: SU(4): 0x3b776c0: i32 = ADDI 0x3b777c0, 0x3b7bb30 [ORD=83] [ID=4]

*** Final schedule ***
SU(4): 0x3b776c0: i32 = ADDI 0x3b777c0, 0x3b7bb30 [ORD=83] [ID=4]

SU(3): 0x3b79530: f32,ch = FLW 0x3b776c0, 0x3b7a820, 0x3b57b78<Mem:LD4[%4]> [ORD=83] [ID=3]

SU(7): 0x3b76090: i32 = LUI 0x3b75390 [ID=7]

SU(8): 0x3b79630: i32 = ADDI 0x3b7bf30, 0x3b779c0 [ID=8]

SU(6): 0x3b75a90: i32 = ADD 0x3b79630, 0x3b76090 [ID=6]

SU(5): 0x3b771c0: f32,ch = FLW 0x3b75a90, 0x3b7a820, 0x3b57b78<Mem:LD4[@SG_MAX]> [ORD=84] [ID=5]

SU(2): 0x3b7b830: i32 = FULE_S 0x3b771c0, 0x3b79530 [ID=2]

SU(1): 0x3b7b220: ch = BNE 0x3b77dc0, 0x3b7b830, 0x3b7bf30, 0x3b57b78 [ID=1]

SU(0): 0x3b778c0: ch = JAL 0x3b77cc0, 0x3b7b220 [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %44 = load float* @SG_MAX, align 4
I was here to add @SG_MAX = global float 0x3FECCCCCC0000000, align 4
with I type floatand sd value :0x3b7bb30: i32 = GlobalAddress<float* @SG_MAX> 0
new load?0x3b7bf30: f32,ch = load 0x3b57b78, 0x3b7bb30, 0x3b7a820<LD4[@SG_MAX]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x3b777c0: i32 = Constant<0>

    0x3b57b78: ch = EntryToken

    0x3b7bb30: i32 = GlobalAddress<float* @SG_MAX> 0

    0x3b7a820: i32 = undef

  0x3b7bf30: f32,ch = load 0x3b57b78, 0x3b7bb30, 0x3b7a820<LD4[@SG_MAX]>

  0x3b57b78: ch = EntryToken


store visit is after?  store float %44, float* %4, align 4
I was here to add   %4 = alloca float, align 4
whats in dag after store?SelectionDAG has 7 nodes:
  0x3b777c0: i32 = Constant<0>

  0x3b7a820: i32 = undef [ORD=86]

    0x3b57b78: ch = EntryToken [ORD=86]

    0x3b7bb30: i32 = GlobalAddress<float* @SG_MAX> 0 [ORD=86]

    0x3b7a820: <multiple use>
  0x3b7bf30: f32,ch = load 0x3b57b78, 0x3b7bb30, 0x3b7a820<LD4[@SG_MAX]> [ORD=86]

    0x3b7bf30: <multiple use>
    0x3b7bf30: <multiple use>
    0x3b778c0: i32 = FrameIndex<3> [ORD=87]

    0x3b7a820: <multiple use>
  0x3b7b220: ch = store 0x3b7bf30:1, 0x3b7bf30, 0x3b778c0, 0x3b7a820<ST4[%4]> [ORD=87]


Initial selection DAG: BB#8 'startup_starter3:startup_starter3.if.then25'
SelectionDAG has 9 nodes:
  0x3b777c0: i32 = Constant<0>

  0x3b7a820: i32 = undef [ORD=86]

    0x3b57b78: ch = EntryToken [ORD=86]

    0x3b7bb30: i32 = GlobalAddress<float* @SG_MAX> 0 [ORD=86]

    0x3b7a820: <multiple use>
  0x3b7bf30: f32,ch = load 0x3b57b78, 0x3b7bb30, 0x3b7a820<LD4[@SG_MAX]> [ORD=86]

      0x3b7bf30: <multiple use>
      0x3b7bf30: <multiple use>
      0x3b778c0: i32 = FrameIndex<3> [ORD=87]

      0x3b7a820: <multiple use>
    0x3b7b220: ch = store 0x3b7bf30:1, 0x3b7bf30, 0x3b778c0, 0x3b7a820<ST4[%4]> [ORD=87]

    0x3b7b830: ch = BasicBlock<startup_starter3.return 0x3b95f80>

  0x3b771c0: ch = br 0x3b7b220, 0x3b7b830


Optimized lowered selection DAG: BB#8 'startup_starter3:startup_starter3.if.then25'
SelectionDAG has 8 nodes:
  0x3b7a820: i32 = undef [ORD=86]

    0x3b57b78: ch = EntryToken [ORD=86]

    0x3b7bb30: i32 = GlobalAddress<float* @SG_MAX> 0 [ORD=86]

    0x3b7a820: <multiple use>
  0x3b7bf30: f32,ch = load 0x3b57b78, 0x3b7bb30, 0x3b7a820<LD4[@SG_MAX]> [ORD=86]

      0x3b7bf30: <multiple use>
      0x3b7bf30: <multiple use>
      0x3b778c0: i32 = FrameIndex<3> [ORD=87]

      0x3b7a820: <multiple use>
    0x3b7b220: ch = store 0x3b7bf30:1, 0x3b7bf30, 0x3b778c0, 0x3b7a820<ST4[%4]> [ORD=87]

    0x3b7b830: ch = BasicBlock<startup_starter3.return 0x3b95f80>

  0x3b771c0: ch = br 0x3b7b220, 0x3b7b830


Legally typed node: 0x3b7b830: ch = BasicBlock<startup_starter3.return 0x3b95f80> [ID=0]

Legally typed node: 0x3b778c0: i32 = FrameIndex<3> [ORD=87] [ID=0]

Legally typed node: 0x3b7a820: i32 = undef [ORD=86] [ID=0]

Legally typed node: 0x3b7bb30: i32 = GlobalAddress<float* @SG_MAX> 0 [ORD=86] [ID=0]

Legally typed node: 0x3b57b78: ch = EntryToken [ORD=86] [ID=0]

Legally typed node: 0x3b7bf30: f32,ch = load 0x3b57b78, 0x3b7bb30, 0x3b7a820<LD4[@SG_MAX]> [ORD=86] [ID=0]

Legally typed node: 0x3b7b220: ch = store 0x3b7bf30:1, 0x3b7bf30, 0x3b778c0, 0x3b7a820<ST4[%4]> [ORD=87] [ID=0]

Legally typed node: 0x3b771c0: ch = br 0x3b7b220, 0x3b7b830 [ID=0]

Legally typed node: 0x7fffa88b7260: ch = handlenode 0x3b771c0 [ID=0]

Type-legalized selection DAG: BB#8 'startup_starter3:startup_starter3.if.then25'
SelectionDAG has 8 nodes:
  0x3b7a820: i32 = undef [ORD=86] [ID=-3]

    0x3b57b78: ch = EntryToken [ORD=86] [ID=-3]

    0x3b7bb30: i32 = GlobalAddress<float* @SG_MAX> 0 [ORD=86] [ID=-3]

    0x3b7a820: <multiple use>
  0x3b7bf30: f32,ch = load 0x3b57b78, 0x3b7bb30, 0x3b7a820<LD4[@SG_MAX]> [ORD=86] [ID=-3]

      0x3b7bf30: <multiple use>
      0x3b7bf30: <multiple use>
      0x3b778c0: i32 = FrameIndex<3> [ORD=87] [ID=-3]

      0x3b7a820: <multiple use>
    0x3b7b220: ch = store 0x3b7bf30:1, 0x3b7bf30, 0x3b778c0, 0x3b7a820<ST4[%4]> [ORD=87] [ID=-3]

    0x3b7b830: ch = BasicBlock<startup_starter3.return 0x3b95f80> [ID=-3]

  0x3b771c0: ch = br 0x3b7b220, 0x3b7b830 [ID=-3]


Legalized selection DAG: BB#8 'startup_starter3:startup_starter3.if.then25'
SelectionDAG has 12 nodes:
  0x3b7a820: i32 = undef [ORD=86] [ID=2]

    0x3b57b78: ch = EntryToken [ORD=86] [ID=0]

        0x3b777c0: i32 = TargetGlobalAddress<float* @SG_MAX> 0 [TF=2]

      0x3b79630: i32 = REDEFINEISD::Hi 0x3b777c0

        0x3b75a90: i32 = TargetGlobalAddress<float* @SG_MAX> 0 [TF=3]

      0x3b76090: i32 = REDEFINEISD::Lo 0x3b75a90

    0x3b79530: i32 = add 0x3b79630, 0x3b76090

    0x3b7a820: <multiple use>
  0x3b7bf30: f32,ch = load 0x3b57b78, 0x3b79530, 0x3b7a820<LD4[@SG_MAX]> [ORD=86] [ID=5]

      0x3b7bf30: <multiple use>
      0x3b7bf30: <multiple use>
      0x3b778c0: i32 = FrameIndex<3> [ORD=87] [ID=3]

      0x3b7a820: <multiple use>
    0x3b7b220: ch = store 0x3b7bf30:1, 0x3b7bf30, 0x3b778c0, 0x3b7a820<ST4[%4]> [ORD=87] [ID=6]

    0x3b7b830: ch = BasicBlock<startup_starter3.return 0x3b95f80> [ID=4]

  0x3b771c0: ch = br 0x3b7b220, 0x3b7b830 [ID=7]


Optimized legalized selection DAG: BB#8 'startup_starter3:startup_starter3.if.then25'
SelectionDAG has 12 nodes:
  0x3b7a820: i32 = undef [ORD=86] [ID=2]

    0x3b57b78: ch = EntryToken [ORD=86] [ID=0]

        0x3b777c0: i32 = TargetGlobalAddress<float* @SG_MAX> 0 [TF=2]

      0x3b79630: i32 = REDEFINEISD::Hi 0x3b777c0

        0x3b75a90: i32 = TargetGlobalAddress<float* @SG_MAX> 0 [TF=3]

      0x3b76090: i32 = REDEFINEISD::Lo 0x3b75a90

    0x3b79530: i32 = add 0x3b79630, 0x3b76090

    0x3b7a820: <multiple use>
  0x3b7bf30: f32,ch = load 0x3b57b78, 0x3b79530, 0x3b7a820<LD4[@SG_MAX]> [ORD=86] [ID=5]

      0x3b7bf30: <multiple use>
      0x3b7bf30: <multiple use>
      0x3b778c0: i32 = FrameIndex<3> [ORD=87] [ID=3]

      0x3b7a820: <multiple use>
    0x3b7b220: ch = store 0x3b7bf30:1, 0x3b7bf30, 0x3b778c0, 0x3b7a820<ST4[%4]> [ORD=87] [ID=6]

    0x3b7b830: ch = BasicBlock<startup_starter3.return 0x3b95f80> [ID=4]

  0x3b771c0: ch = br 0x3b7b220, 0x3b7b830 [ID=7]


===== Instruction selection begins: BB#8 'startup_starter3.if.then25'
ISEL: Starting pattern match on root node: 0x3b771c0: ch = br 0x3b7b220, 0x3b7b830 [ID=11]

  Initial Opcode index to 1938
  Morphed node: 0x3b771c0: ch = JAL 0x3b7b830, 0x3b7b220

ISEL: Match complete!
=> 0x3b771c0: ch = JAL 0x3b7b830, 0x3b7b220

ISEL: Starting pattern match on root node: 0x3b7b220: ch = store 0x3b7bf30:1, 0x3b7bf30, 0x3b778c0, 0x3b7a820<ST4[%4]> [ORD=87] [ID=10]

  Initial Opcode index to 178
  Skipped scope entry (due to false predicate) at index 183, continuing at 243
  Morphed node: 0x3b7b220: ch = FSW 0x3b7bf30, 0x3b778c0, 0x3b7bb30, 0x3b7bf30:1<Mem:ST4[%4]> [ORD=87]

ISEL: Match complete!
=> 0x3b7b220: ch = FSW 0x3b7bf30, 0x3b778c0, 0x3b7bb30, 0x3b7bf30:1<Mem:ST4[%4]> [ORD=87]

ISEL: Starting pattern match on root node: 0x3b7bf30: f32,ch = load 0x3b57b78, 0x3b79530, 0x3b7a820<LD4[@SG_MAX]> [ORD=86] [ID=9]

  Initial Opcode index to 5
  TypeSwitch[f32] from 10 to 159
  Morphed node: 0x3b7bf30: f32,ch = FLW 0x3b79530, 0x3b7bb30, 0x3b57b78<Mem:LD4[@SG_MAX]> [ORD=86]

ISEL: Match complete!
=> 0x3b7bf30: f32,ch = FLW 0x3b79530, 0x3b7bb30, 0x3b57b78<Mem:LD4[@SG_MAX]> [ORD=86]

ISEL: Starting pattern match on root node: 0x3b79530: i32 = add 0x3b79630, 0x3b76090 [ID=8]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x3b79530: i32 = ADD 0x3b76090, 0x3b79630

ISEL: Match complete!
=> 0x3b79530: i32 = ADD 0x3b76090, 0x3b79630

ISEL: Starting pattern match on root node: 0x3b76090: i32 = REDEFINEISD::Lo 0x3b75a90 [ID=7]

  Initial Opcode index to 1204
  Morphed node: 0x3b76090: i32 = ADDI 0x3b7a820, 0x3b75a90

ISEL: Match complete!
=> 0x3b76090: i32 = ADDI 0x3b7a820, 0x3b75a90

ISEL: Starting pattern match on root node: 0x3b79630: i32 = REDEFINEISD::Hi 0x3b777c0 [ID=6]

  Initial Opcode index to 1186
  Morphed node: 0x3b79630: i32 = LUI 0x3b777c0

ISEL: Match complete!
=> 0x3b79630: i32 = LUI 0x3b777c0

=> 0x3b75a90: i32 = TargetGlobalAddress<float* @SG_MAX> 0 [TF=3]

=> 0x3b777c0: i32 = TargetGlobalAddress<float* @SG_MAX> 0 [TF=2]

=> 0x3b7b830: ch = BasicBlock<startup_starter3.return 0x3b95f80>

=> 0x3b57b78: ch = EntryToken [ORD=86]

===== Instruction selection ends:
Selected selection DAG: BB#8 'startup_starter3:startup_starter3.if.then25'
SelectionDAG has 15 nodes:
        0x3b7a820: i32 = Register %zero

        0x3b75a90: i32 = TargetGlobalAddress<float* @SG_MAX> 0 [TF=3]

      0x3b76090: i32 = ADDI 0x3b7a820, 0x3b75a90

        0x3b777c0: i32 = TargetGlobalAddress<float* @SG_MAX> 0 [TF=2]

      0x3b79630: i32 = LUI 0x3b777c0

    0x3b79530: i32 = ADD 0x3b76090, 0x3b79630

    0x3b7bb30: <multiple use>
    0x3b57b78: ch = EntryToken [ORD=86]

  0x3b7bf30: f32,ch = FLW 0x3b79530, 0x3b7bb30, 0x3b57b78<Mem:LD4[@SG_MAX]> [ORD=86]

  0x3b7bb30: i32 = TargetConstant<0>

    0x3b7b830: ch = BasicBlock<startup_starter3.return 0x3b95f80>

      0x3b7bf30: <multiple use>
        0x3b779c0: i32 = Register %t5

        0x3b75390: i32 = TargetFrameIndex<3>

      0x3b778c0: i32 = ADDI 0x3b779c0, 0x3b75390 [ORD=87]

      0x3b7bb30: <multiple use>
      0x3b7bf30: <multiple use>
    0x3b7b220: ch = FSW 0x3b7bf30, 0x3b778c0, 0x3b7bb30, 0x3b7bf30:1<Mem:ST4[%4]> [ORD=87]

  0x3b771c0: ch = JAL 0x3b7b830, 0x3b7b220


********** List Scheduling BB#8 'startup_starter3.if.then25' **********
SU(0): 0x3b771c0: ch = JAL 0x3b7b830, 0x3b7b220 [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x3b7b220: ch = FSW 0x3b7bf30, 0x3b778c0, 0x3b7bb30, 0x3b7bf30:1<Mem:ST4[%4]> [ORD=87] [ID=1]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(3): Latency=1
   val SU(2): Latency=1
   ch  SU(3): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x3b778c0: i32 = ADDI 0x3b779c0, 0x3b75390 [ORD=87] [ID=2]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
   val SU(1): Latency=1

SU(3): 0x3b7bf30: f32,ch = FLW 0x3b79530, 0x3b7bb30, 0x3b57b78<Mem:LD4[@SG_MAX]> [ORD=86] [ID=3]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(4): Latency=1
  Successors:
   val SU(1): Latency=1
   ch  SU(1): Latency=1

SU(4): 0x3b79530: i32 = ADD 0x3b76090, 0x3b79630 [ID=4]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(6): Latency=1
   val SU(5): Latency=1
  Successors:
   val SU(3): Latency=1

SU(5): 0x3b79630: i32 = LUI 0x3b777c0 [ID=5]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(4): Latency=1

SU(6): 0x3b76090: i32 = ADDI 0x3b7a820, 0x3b75a90 [ID=6]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(4): Latency=1


Examining Available:
Height 0: SU(0): 0x3b771c0: ch = JAL 0x3b7b830, 0x3b7b220 [ID=0]


*** Scheduling [0]: SU(0): 0x3b771c0: ch = JAL 0x3b7b830, 0x3b7b220 [ID=0]


Examining Available:
Height 1: SU(1): 0x3b7b220: ch = FSW 0x3b7bf30, 0x3b778c0, 0x3b7bb30, 0x3b7bf30:1<Mem:ST4[%4]> [ORD=87] [ID=1]


*** Scheduling [1]: SU(1): 0x3b7b220: ch = FSW 0x3b7bf30, 0x3b778c0, 0x3b7bb30, 0x3b7bf30:1<Mem:ST4[%4]> [ORD=87] [ID=1]


Examining Available:
Height 2: SU(2): 0x3b778c0: i32 = ADDI 0x3b779c0, 0x3b75390 [ORD=87] [ID=2]

Height 2: SU(3): 0x3b7bf30: f32,ch = FLW 0x3b79530, 0x3b7bb30, 0x3b57b78<Mem:LD4[@SG_MAX]> [ORD=86] [ID=3]


*** Scheduling [2]: SU(2): 0x3b778c0: i32 = ADDI 0x3b779c0, 0x3b75390 [ORD=87] [ID=2]


Examining Available:
Height 2: SU(3): 0x3b7bf30: f32,ch = FLW 0x3b79530, 0x3b7bb30, 0x3b57b78<Mem:LD4[@SG_MAX]> [ORD=86] [ID=3]


*** Scheduling [3]: SU(3): 0x3b7bf30: f32,ch = FLW 0x3b79530, 0x3b7bb30, 0x3b57b78<Mem:LD4[@SG_MAX]> [ORD=86] [ID=3]


Examining Available:
Height 4: SU(4): 0x3b79530: i32 = ADD 0x3b76090, 0x3b79630 [ID=4]


*** Scheduling [4]: SU(4): 0x3b79530: i32 = ADD 0x3b76090, 0x3b79630 [ID=4]


Examining Available:
Height 5: SU(6): 0x3b76090: i32 = ADDI 0x3b7a820, 0x3b75a90 [ID=6]

Height 5: SU(5): 0x3b79630: i32 = LUI 0x3b777c0 [ID=5]


*** Scheduling [5]: SU(6): 0x3b76090: i32 = ADDI 0x3b7a820, 0x3b75a90 [ID=6]


Examining Available:
Height 5: SU(5): 0x3b79630: i32 = LUI 0x3b777c0 [ID=5]


*** Scheduling [6]: SU(5): 0x3b79630: i32 = LUI 0x3b777c0 [ID=5]

*** Final schedule ***
SU(5): 0x3b79630: i32 = LUI 0x3b777c0 [ID=5]

SU(6): 0x3b76090: i32 = ADDI 0x3b7a820, 0x3b75a90 [ID=6]

SU(4): 0x3b79530: i32 = ADD 0x3b76090, 0x3b79630 [ID=4]

SU(3): 0x3b7bf30: f32,ch = FLW 0x3b79530, 0x3b7bb30, 0x3b57b78<Mem:LD4[@SG_MAX]> [ORD=86] [ID=3]

SU(2): 0x3b778c0: i32 = ADDI 0x3b779c0, 0x3b75390 [ORD=87] [ID=2]

SU(1): 0x3b7b220: ch = FSW 0x3b7bf30, 0x3b778c0, 0x3b7bb30, 0x3b7bf30:1<Mem:ST4[%4]> [ORD=87] [ID=1]

SU(0): 0x3b771c0: ch = JAL 0x3b7b830, 0x3b7b220 [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %45 = load float* @SG_RAMP_MAX, align 4
I was here to add @SG_RAMP_MAX = global float 0x3FE3333340000000, align 4
with I type floatand sd value :0x3b75390: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0
new load?0x3b7bb30: f32,ch = load 0x3b57b78, 0x3b75390, 0x3b7a820<LD4[@SG_RAMP_MAX]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x3b779c0: i32 = Constant<0>

    0x3b57b78: ch = EntryToken

    0x3b75390: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0

    0x3b7a820: i32 = undef

  0x3b7bb30: f32,ch = load 0x3b57b78, 0x3b75390, 0x3b7a820<LD4[@SG_RAMP_MAX]>

  0x3b57b78: ch = EntryToken


visiting load instruction   %46 = load i32** %2, align 4
I was here to add   %2 = alloca i32*, align 4
with I type i32*and sd value :0x3b771c0: i32 = FrameIndex<1>
new load?0x3b7b220: i32,ch = load 0x3b57b78, 0x3b771c0, 0x3b7a820<LD4[%2]>
dag after load is dealt with?SelectionDAG has 7 nodes:
  0x3b779c0: i32 = Constant<0>

  0x3b7a820: i32 = undef [ORD=88]

    0x3b57b78: <multiple use>
    0x3b75390: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0 [ORD=88]

    0x3b7a820: <multiple use>
  0x3b7bb30: f32,ch = load 0x3b57b78, 0x3b75390, 0x3b7a820<LD4[@SG_RAMP_MAX]> [ORD=88]

    0x3b57b78: <multiple use>
    0x3b771c0: i32 = FrameIndex<1>

    0x3b7a820: <multiple use>
  0x3b7b220: i32,ch = load 0x3b57b78, 0x3b771c0, 0x3b7a820<LD4[%2]>

  0x3b57b78: ch = EntryToken [ORD=88]


visiting load instruction   %48 = load i32* %47, align 4
with I type i32and sd value :0x3b76090: i32 = add 0x3b7b220, 0x3b79530
new load?0x3b79630: i32,ch = load 0x3b57b78, 0x3b76090, 0x3b7a820<LD4[%47]>
dag after load is dealt with?SelectionDAG has 11 nodes:
  0x3b779c0: i32 = Constant<0>

  0x3b7a820: i32 = undef [ORD=88]

    0x3b57b78: <multiple use>
    0x3b75390: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0 [ORD=88]

    0x3b7a820: <multiple use>
  0x3b7bb30: f32,ch = load 0x3b57b78, 0x3b75390, 0x3b7a820<LD4[@SG_RAMP_MAX]> [ORD=88]

  0x3b7bf30: i64 = Constant<4>

    0x3b57b78: <multiple use>
        0x3b57b78: <multiple use>
        0x3b771c0: i32 = FrameIndex<1> [ORD=89]

        0x3b7a820: <multiple use>
      0x3b7b220: i32,ch = load 0x3b57b78, 0x3b771c0, 0x3b7a820<LD4[%2]> [ORD=89]

      0x3b79530: i32 = Constant<4> [ORD=90]

    0x3b76090: i32 = add 0x3b7b220, 0x3b79530 [ORD=90]

    0x3b7a820: <multiple use>
  0x3b79630: i32,ch = load 0x3b57b78, 0x3b76090, 0x3b7a820<LD4[%47]>

  0x3b57b78: ch = EntryToken [ORD=88]


I was here to add i32 350
I was here to add float 5.000000e+02
store visit is after?  store float %52, float* %4, align 4
I was here to add   %4 = alloca float, align 4
whats in dag after store?SelectionDAG has 20 nodes:
  0x3b57b78: ch = EntryToken [ORD=88]

  0x3b779c0: i32 = Constant<0>

  0x3b7a820: i32 = undef [ORD=88]

    0x3b57b78: <multiple use>
    0x3b75390: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0 [ORD=88]

    0x3b7a820: <multiple use>
  0x3b7bb30: f32,ch = load 0x3b57b78, 0x3b75390, 0x3b7a820<LD4[@SG_RAMP_MAX]> [ORD=88]

    0x3b57b78: <multiple use>
    0x3b771c0: i32 = FrameIndex<1> [ORD=89]

    0x3b7a820: <multiple use>
  0x3b7b220: i32,ch = load 0x3b57b78, 0x3b771c0, 0x3b7a820<LD4[%2]> [ORD=89]

  0x3b7bf30: i64 = Constant<4>

    0x3b57b78: <multiple use>
      0x3b7b220: <multiple use>
      0x3b79530: i32 = Constant<4> [ORD=90]

    0x3b76090: i32 = add 0x3b7b220, 0x3b79530 [ORD=90]

    0x3b7a820: <multiple use>
  0x3b79630: i32,ch = load 0x3b57b78, 0x3b76090, 0x3b7a820<LD4[%47]> [ORD=91]

      0x3b7bb30: <multiple use>
      0x3b7b220: <multiple use>
      0x3b79630: <multiple use>
    0x3b79d30: ch = TokenFactor 0x3b7bb30:1, 0x3b7b220:1, 0x3b79630:1 [ORD=96]

        0x3b7bb30: <multiple use>
            0x3b79630: <multiple use>
            0x3b75a90: i32 = Constant<350> [ORD=92]

          0x3b777c0: i32 = sub 0x3b79630, 0x3b75a90 [ORD=92]

        0x3b7b830: f32 = sint_to_fp 0x3b777c0 [ORD=93]

      0x3b778c0: f32 = fmul 0x3b7bb30, 0x3b7b830 [ORD=94]

      0x3b77cc0: f32 = ConstantFP<5.000000e+02> [ORD=95]

    0x3b77dc0: f32 = fdiv 0x3b778c0, 0x3b77cc0 [ORD=95]

    0x3b776c0: i32 = FrameIndex<3> [ORD=96]

    0x3b7a820: <multiple use>
  0x3b79030: ch = store 0x3b79d30, 0x3b77dc0, 0x3b776c0, 0x3b7a820<ST4[%4]> [ORD=96]


visiting load instruction   %53 = load float* %3, align 4
I was here to add   %3 = alloca float, align 4
with I type floatand sd value :0x3b7be30: i32 = FrameIndex<2>
new load?0x3b7ac20: f32,ch = load 0x3b79030, 0x3b7be30, 0x3b7a820<LD4[%3]>
dag after load is dealt with?SelectionDAG has 22 nodes:
  0x3b57b78: ch = EntryToken [ORD=88]

  0x3b779c0: i32 = Constant<0>

  0x3b7a820: i32 = undef [ORD=88]

    0x3b57b78: <multiple use>
    0x3b75390: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0 [ORD=88]

    0x3b7a820: <multiple use>
  0x3b7bb30: f32,ch = load 0x3b57b78, 0x3b75390, 0x3b7a820<LD4[@SG_RAMP_MAX]> [ORD=88]

    0x3b57b78: <multiple use>
    0x3b771c0: i32 = FrameIndex<1> [ORD=89]

    0x3b7a820: <multiple use>
  0x3b7b220: i32,ch = load 0x3b57b78, 0x3b771c0, 0x3b7a820<LD4[%2]> [ORD=89]

  0x3b7bf30: i64 = Constant<4>

    0x3b57b78: <multiple use>
      0x3b7b220: <multiple use>
      0x3b79530: i32 = Constant<4> [ORD=90]

    0x3b76090: i32 = add 0x3b7b220, 0x3b79530 [ORD=90]

    0x3b7a820: <multiple use>
  0x3b79630: i32,ch = load 0x3b57b78, 0x3b76090, 0x3b7a820<LD4[%47]> [ORD=91]

        0x3b7bb30: <multiple use>
        0x3b7b220: <multiple use>
        0x3b79630: <multiple use>
      0x3b79d30: ch = TokenFactor 0x3b7bb30:1, 0x3b7b220:1, 0x3b79630:1 [ORD=96]

          0x3b7bb30: <multiple use>
              0x3b79630: <multiple use>
              0x3b75a90: i32 = Constant<350> [ORD=92]

            0x3b777c0: i32 = sub 0x3b79630, 0x3b75a90 [ORD=92]

          0x3b7b830: f32 = sint_to_fp 0x3b777c0 [ORD=93]

        0x3b778c0: f32 = fmul 0x3b7bb30, 0x3b7b830 [ORD=94]

        0x3b77cc0: f32 = ConstantFP<5.000000e+02> [ORD=95]

      0x3b77dc0: f32 = fdiv 0x3b778c0, 0x3b77cc0 [ORD=95]

      0x3b776c0: i32 = FrameIndex<3> [ORD=96]

      0x3b7a820: <multiple use>
    0x3b79030: ch = store 0x3b79d30, 0x3b77dc0, 0x3b776c0, 0x3b7a820<ST4[%4]> [ORD=96]

    0x3b7be30: i32 = FrameIndex<2>

    0x3b7a820: <multiple use>
  0x3b7ac20: f32,ch = load 0x3b79030, 0x3b7be30, 0x3b7a820<LD4[%3]>

      0x3b7bb30: <multiple use>
      0x3b7b220: <multiple use>
      0x3b79630: <multiple use>
    0x3b79d30: ch = TokenFactor 0x3b7bb30:1, 0x3b7b220:1, 0x3b79630:1 [ORD=96]

        0x3b7bb30: <multiple use>
            0x3b79630: <multiple use>
            0x3b75a90: i32 = Constant<350> [ORD=92]

          0x3b777c0: i32 = sub 0x3b79630, 0x3b75a90 [ORD=92]

        0x3b7b830: f32 = sint_to_fp 0x3b777c0 [ORD=93]

      0x3b778c0: f32 = fmul 0x3b7bb30, 0x3b7b830 [ORD=94]

      0x3b77cc0: f32 = ConstantFP<5.000000e+02> [ORD=95]

    0x3b77dc0: f32 = fdiv 0x3b778c0, 0x3b77cc0 [ORD=95]

    0x3b776c0: i32 = FrameIndex<3> [ORD=96]

    0x3b7a820: <multiple use>
  0x3b79030: ch = store 0x3b79d30, 0x3b77dc0, 0x3b776c0, 0x3b7a820<ST4[%4]> [ORD=96]


store visit is after?  store float %53, float* @nh_fin_de_rampe, align 4
I was here to add @nh_fin_de_rampe = common global float 0.000000e+00, align 4
whats in dag after store?SelectionDAG has 24 nodes:
  0x3b57b78: ch = EntryToken [ORD=88]

  0x3b779c0: i32 = Constant<0>

  0x3b7a820: i32 = undef [ORD=88]

    0x3b57b78: <multiple use>
    0x3b75390: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0 [ORD=88]

    0x3b7a820: <multiple use>
  0x3b7bb30: f32,ch = load 0x3b57b78, 0x3b75390, 0x3b7a820<LD4[@SG_RAMP_MAX]> [ORD=88]

    0x3b57b78: <multiple use>
    0x3b771c0: i32 = FrameIndex<1> [ORD=89]

    0x3b7a820: <multiple use>
  0x3b7b220: i32,ch = load 0x3b57b78, 0x3b771c0, 0x3b7a820<LD4[%2]> [ORD=89]

  0x3b7bf30: i64 = Constant<4>

    0x3b57b78: <multiple use>
      0x3b7b220: <multiple use>
      0x3b79530: i32 = Constant<4> [ORD=90]

    0x3b76090: i32 = add 0x3b7b220, 0x3b79530 [ORD=90]

    0x3b7a820: <multiple use>
  0x3b79630: i32,ch = load 0x3b57b78, 0x3b76090, 0x3b7a820<LD4[%47]> [ORD=91]

        0x3b7bb30: <multiple use>
        0x3b7b220: <multiple use>
        0x3b79630: <multiple use>
      0x3b79d30: ch = TokenFactor 0x3b7bb30:1, 0x3b7b220:1, 0x3b79630:1 [ORD=96]

          0x3b7bb30: <multiple use>
              0x3b79630: <multiple use>
              0x3b75a90: i32 = Constant<350> [ORD=92]

            0x3b777c0: i32 = sub 0x3b79630, 0x3b75a90 [ORD=92]

          0x3b7b830: f32 = sint_to_fp 0x3b777c0 [ORD=93]

        0x3b778c0: f32 = fmul 0x3b7bb30, 0x3b7b830 [ORD=94]

        0x3b77cc0: f32 = ConstantFP<5.000000e+02> [ORD=95]

      0x3b77dc0: f32 = fdiv 0x3b778c0, 0x3b77cc0 [ORD=95]

      0x3b776c0: i32 = FrameIndex<3> [ORD=96]

      0x3b7a820: <multiple use>
    0x3b79030: ch = store 0x3b79d30, 0x3b77dc0, 0x3b776c0, 0x3b7a820<ST4[%4]> [ORD=96]

    0x3b7be30: i32 = FrameIndex<2> [ORD=97]

    0x3b7a820: <multiple use>
  0x3b7ac20: f32,ch = load 0x3b79030, 0x3b7be30, 0x3b7a820<LD4[%3]> [ORD=97]

    0x3b7ac20: <multiple use>
    0x3b7ac20: <multiple use>
    0x3b7b730: i32 = GlobalAddress<float* @nh_fin_de_rampe> 0 [ORD=98]

    0x3b7a820: <multiple use>
  0x3b7b320: ch = store 0x3b7ac20:1, 0x3b7ac20, 0x3b7b730, 0x3b7a820<ST4[@nh_fin_de_rampe]> [ORD=98]


Initial selection DAG: BB#10 'startup_starter3:startup_starter3.if.then9'
SelectionDAG has 26 nodes:
  0x3b57b78: ch = EntryToken [ORD=88]

  0x3b779c0: i32 = Constant<0>

  0x3b7a820: i32 = undef [ORD=88]

    0x3b57b78: <multiple use>
    0x3b75390: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0 [ORD=88]

    0x3b7a820: <multiple use>
  0x3b7bb30: f32,ch = load 0x3b57b78, 0x3b75390, 0x3b7a820<LD4[@SG_RAMP_MAX]> [ORD=88]

    0x3b57b78: <multiple use>
    0x3b771c0: i32 = FrameIndex<1> [ORD=89]

    0x3b7a820: <multiple use>
  0x3b7b220: i32,ch = load 0x3b57b78, 0x3b771c0, 0x3b7a820<LD4[%2]> [ORD=89]

  0x3b7bf30: i64 = Constant<4>

    0x3b57b78: <multiple use>
      0x3b7b220: <multiple use>
      0x3b79530: i32 = Constant<4> [ORD=90]

    0x3b76090: i32 = add 0x3b7b220, 0x3b79530 [ORD=90]

    0x3b7a820: <multiple use>
  0x3b79630: i32,ch = load 0x3b57b78, 0x3b76090, 0x3b7a820<LD4[%47]> [ORD=91]

        0x3b7bb30: <multiple use>
        0x3b7b220: <multiple use>
        0x3b79630: <multiple use>
      0x3b79d30: ch = TokenFactor 0x3b7bb30:1, 0x3b7b220:1, 0x3b79630:1 [ORD=96]

          0x3b7bb30: <multiple use>
              0x3b79630: <multiple use>
              0x3b75a90: i32 = Constant<350> [ORD=92]

            0x3b777c0: i32 = sub 0x3b79630, 0x3b75a90 [ORD=92]

          0x3b7b830: f32 = sint_to_fp 0x3b777c0 [ORD=93]

        0x3b778c0: f32 = fmul 0x3b7bb30, 0x3b7b830 [ORD=94]

        0x3b77cc0: f32 = ConstantFP<5.000000e+02> [ORD=95]

      0x3b77dc0: f32 = fdiv 0x3b778c0, 0x3b77cc0 [ORD=95]

      0x3b776c0: i32 = FrameIndex<3> [ORD=96]

      0x3b7a820: <multiple use>
    0x3b79030: ch = store 0x3b79d30, 0x3b77dc0, 0x3b776c0, 0x3b7a820<ST4[%4]> [ORD=96]

    0x3b7be30: i32 = FrameIndex<2> [ORD=97]

    0x3b7a820: <multiple use>
  0x3b7ac20: f32,ch = load 0x3b79030, 0x3b7be30, 0x3b7a820<LD4[%3]> [ORD=97]

      0x3b7ac20: <multiple use>
      0x3b7ac20: <multiple use>
      0x3b7b730: i32 = GlobalAddress<float* @nh_fin_de_rampe> 0 [ORD=98]

      0x3b7a820: <multiple use>
    0x3b7b320: ch = store 0x3b7ac20:1, 0x3b7ac20, 0x3b7b730, 0x3b7a820<ST4[@nh_fin_de_rampe]> [ORD=98]

    0x3b7b930: ch = BasicBlock<startup_starter3.return 0x3b95f80>

  0x3b75690: ch = br 0x3b7b320, 0x3b7b930



Replacing.3 0x3b777c0: i32 = sub 0x3b79630, 0x3b75a90 [ORD=92]

With: 0x3b77ac0: i32 = add 0x3b79630, 0x3b79330

Optimized lowered selection DAG: BB#10 'startup_starter3:startup_starter3.if.then9'
SelectionDAG has 24 nodes:
  0x3b57b78: ch = EntryToken [ORD=88]

  0x3b7a820: i32 = undef [ORD=88]

    0x3b57b78: <multiple use>
    0x3b75390: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0 [ORD=88]

    0x3b7a820: <multiple use>
  0x3b7bb30: f32,ch = load 0x3b57b78, 0x3b75390, 0x3b7a820<LD4[@SG_RAMP_MAX]> [ORD=88]

    0x3b57b78: <multiple use>
    0x3b771c0: i32 = FrameIndex<1> [ORD=89]

    0x3b7a820: <multiple use>
  0x3b7b220: i32,ch = load 0x3b57b78, 0x3b771c0, 0x3b7a820<LD4[%2]> [ORD=89]

    0x3b57b78: <multiple use>
      0x3b7b220: <multiple use>
      0x3b79530: i32 = Constant<4> [ORD=90]

    0x3b76090: i32 = add 0x3b7b220, 0x3b79530 [ORD=90]

    0x3b7a820: <multiple use>
  0x3b79630: i32,ch = load 0x3b57b78, 0x3b76090, 0x3b7a820<LD4[%47]> [ORD=91]

        0x3b7bb30: <multiple use>
        0x3b7b220: <multiple use>
        0x3b79630: <multiple use>
      0x3b79d30: ch = TokenFactor 0x3b7bb30:1, 0x3b7b220:1, 0x3b79630:1 [ORD=96]

          0x3b7bb30: <multiple use>
              0x3b79630: <multiple use>
              0x3b79330: i32 = Constant<-350>

            0x3b77ac0: i32 = add 0x3b79630, 0x3b79330

          0x3b7b830: f32 = sint_to_fp 0x3b77ac0 [ORD=93]

        0x3b778c0: f32 = fmul 0x3b7bb30, 0x3b7b830 [ORD=94]

        0x3b77cc0: f32 = ConstantFP<5.000000e+02> [ORD=95]

      0x3b77dc0: f32 = fdiv 0x3b778c0, 0x3b77cc0 [ORD=95]

      0x3b776c0: i32 = FrameIndex<3> [ORD=96]

      0x3b7a820: <multiple use>
    0x3b79030: ch = store 0x3b79d30, 0x3b77dc0, 0x3b776c0, 0x3b7a820<ST4[%4]> [ORD=96]

    0x3b7be30: i32 = FrameIndex<2> [ORD=97]

    0x3b7a820: <multiple use>
  0x3b7ac20: f32,ch = load 0x3b79030, 0x3b7be30, 0x3b7a820<LD4[%3]> [ORD=97]

      0x3b7ac20: <multiple use>
      0x3b7ac20: <multiple use>
      0x3b7b730: i32 = GlobalAddress<float* @nh_fin_de_rampe> 0 [ORD=98]

      0x3b7a820: <multiple use>
    0x3b7b320: ch = store 0x3b7ac20:1, 0x3b7ac20, 0x3b7b730, 0x3b7a820<ST4[@nh_fin_de_rampe]> [ORD=98]

    0x3b7b930: ch = BasicBlock<startup_starter3.return 0x3b95f80>

  0x3b75690: ch = br 0x3b7b320, 0x3b7b930


Legally typed node: 0x3b79330: i32 = Constant<-350> [ID=0]

Legally typed node: 0x3b7b930: ch = BasicBlock<startup_starter3.return 0x3b95f80> [ID=0]

Legally typed node: 0x3b7b730: i32 = GlobalAddress<float* @nh_fin_de_rampe> 0 [ORD=98] [ID=0]

Legally typed node: 0x3b7be30: i32 = FrameIndex<2> [ORD=97] [ID=0]

Legally typed node: 0x3b776c0: i32 = FrameIndex<3> [ORD=96] [ID=0]

Legally typed node: 0x3b77cc0: f32 = ConstantFP<5.000000e+02> [ORD=95] [ID=0]

Legally typed node: 0x3b79530: i32 = Constant<4> [ORD=90] [ID=0]

Legally typed node: 0x3b771c0: i32 = FrameIndex<1> [ORD=89] [ID=0]

Legally typed node: 0x3b7a820: i32 = undef [ORD=88] [ID=0]

Legally typed node: 0x3b75390: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0 [ORD=88] [ID=0]

Legally typed node: 0x3b57b78: ch = EntryToken [ORD=88] [ID=0]

Legally typed node: 0x3b7bb30: f32,ch = load 0x3b57b78, 0x3b75390, 0x3b7a820<LD4[@SG_RAMP_MAX]> [ORD=88] [ID=0]

Legally typed node: 0x3b7b220: i32,ch = load 0x3b57b78, 0x3b771c0, 0x3b7a820<LD4[%2]> [ORD=89] [ID=0]

Legally typed node: 0x3b76090: i32 = add 0x3b7b220, 0x3b79530 [ORD=90] [ID=0]

Legally typed node: 0x3b79630: i32,ch = load 0x3b57b78, 0x3b76090, 0x3b7a820<LD4[%47]> [ORD=91] [ID=0]

Legally typed node: 0x3b79d30: ch = TokenFactor 0x3b7bb30:1, 0x3b7b220:1, 0x3b79630:1 [ORD=96] [ID=0]

Legally typed node: 0x3b77ac0: i32 = add 0x3b79630, 0x3b79330 [ID=0]

Legally typed node: 0x3b7b830: f32 = sint_to_fp 0x3b77ac0 [ORD=93] [ID=0]

Legally typed node: 0x3b778c0: f32 = fmul 0x3b7bb30, 0x3b7b830 [ORD=94] [ID=0]

Legally typed node: 0x3b77dc0: f32 = fdiv 0x3b778c0, 0x3b77cc0 [ORD=95] [ID=0]

Legally typed node: 0x3b79030: ch = store 0x3b79d30, 0x3b77dc0, 0x3b776c0, 0x3b7a820<ST4[%4]> [ORD=96] [ID=0]

Legally typed node: 0x3b7ac20: f32,ch = load 0x3b79030, 0x3b7be30, 0x3b7a820<LD4[%3]> [ORD=97] [ID=0]

Legally typed node: 0x3b7b320: ch = store 0x3b7ac20:1, 0x3b7ac20, 0x3b7b730, 0x3b7a820<ST4[@nh_fin_de_rampe]> [ORD=98] [ID=0]

Legally typed node: 0x3b75690: ch = br 0x3b7b320, 0x3b7b930 [ID=0]

Legally typed node: 0x7fffa88b7260: ch = handlenode 0x3b75690 [ID=0]

Type-legalized selection DAG: BB#10 'startup_starter3:startup_starter3.if.then9'
SelectionDAG has 24 nodes:
  0x3b57b78: ch = EntryToken [ORD=88] [ID=-3]

  0x3b7a820: i32 = undef [ORD=88] [ID=-3]

    0x3b57b78: <multiple use>
    0x3b75390: i32 = GlobalAddress<float* @SG_RAMP_MAX> 0 [ORD=88] [ID=-3]

    0x3b7a820: <multiple use>
  0x3b7bb30: f32,ch = load 0x3b57b78, 0x3b75390, 0x3b7a820<LD4[@SG_RAMP_MAX]> [ORD=88] [ID=-3]

    0x3b57b78: <multiple use>
    0x3b771c0: i32 = FrameIndex<1> [ORD=89] [ID=-3]

    0x3b7a820: <multiple use>
  0x3b7b220: i32,ch = load 0x3b57b78, 0x3b771c0, 0x3b7a820<LD4[%2]> [ORD=89] [ID=-3]

    0x3b57b78: <multiple use>
      0x3b7b220: <multiple use>
      0x3b79530: i32 = Constant<4> [ORD=90] [ID=-3]

    0x3b76090: i32 = add 0x3b7b220, 0x3b79530 [ORD=90] [ID=-3]

    0x3b7a820: <multiple use>
  0x3b79630: i32,ch = load 0x3b57b78, 0x3b76090, 0x3b7a820<LD4[%47]> [ORD=91] [ID=-3]

        0x3b7bb30: <multiple use>
        0x3b7b220: <multiple use>
        0x3b79630: <multiple use>
      0x3b79d30: ch = TokenFactor 0x3b7bb30:1, 0x3b7b220:1, 0x3b79630:1 [ORD=96] [ID=-3]

          0x3b7bb30: <multiple use>
              0x3b79630: <multiple use>
              0x3b79330: i32 = Constant<-350> [ID=-3]

            0x3b77ac0: i32 = add 0x3b79630, 0x3b79330 [ID=-3]

          0x3b7b830: f32 = sint_to_fp 0x3b77ac0 [ORD=93] [ID=-3]

        0x3b778c0: f32 = fmul 0x3b7bb30, 0x3b7b830 [ORD=94] [ID=-3]

        0x3b77cc0: f32 = ConstantFP<5.000000e+02> [ORD=95] [ID=-3]

      0x3b77dc0: f32 = fdiv 0x3b778c0, 0x3b77cc0 [ORD=95] [ID=-3]

      0x3b776c0: i32 = FrameIndex<3> [ORD=96] [ID=-3]

      0x3b7a820: <multiple use>
    0x3b79030: ch = store 0x3b79d30, 0x3b77dc0, 0x3b776c0, 0x3b7a820<ST4[%4]> [ORD=96] [ID=-3]

    0x3b7be30: i32 = FrameIndex<2> [ORD=97] [ID=-3]

    0x3b7a820: <multiple use>
  0x3b7ac20: f32,ch = load 0x3b79030, 0x3b7be30, 0x3b7a820<LD4[%3]> [ORD=97] [ID=-3]

      0x3b7ac20: <multiple use>
      0x3b7ac20: <multiple use>
      0x3b7b730: i32 = GlobalAddress<float* @nh_fin_de_rampe> 0 [ORD=98] [ID=-3]

      0x3b7a820: <multiple use>
    0x3b7b320: ch = store 0x3b7ac20:1, 0x3b7ac20, 0x3b7b730, 0x3b7a820<ST4[@nh_fin_de_rampe]> [ORD=98] [ID=-3]

    0x3b7b930: ch = BasicBlock<startup_starter3.return 0x3b95f80> [ID=-3]

  0x3b75690: ch = br 0x3b7b320, 0x3b7b930 [ID=-3]


Legalized selection DAG: BB#10 'startup_starter3:startup_starter3.if.then9'
SelectionDAG has 32 nodes:
  0x3b57b78: ch = EntryToken [ORD=88] [ID=0]

  0x3b7a820: i32 = undef [ORD=88] [ID=2]

    0x3b57b78: <multiple use>
        0x3b77cc0: i32 = TargetGlobalAddress<float* @SG_RAMP_MAX> 0 [TF=2]

      0x3b7b420: i32 = REDEFINEISD::Hi 0x3b77cc0

        0x3b774c0: i32 = TargetGlobalAddress<float* @SG_RAMP_MAX> 0 [TF=3]

      0x3b7bd30: i32 = REDEFINEISD::Lo 0x3b774c0

    0x3b7b020: i32 = add 0x3b7b420, 0x3b7bd30

    0x3b7a820: <multiple use>
  0x3b7bb30: f32,ch = load 0x3b57b78, 0x3b7b020, 0x3b7a820<LD4[@SG_RAMP_MAX]> [ORD=88] [ID=11]

    0x3b57b78: <multiple use>
    0x3b771c0: i32 = FrameIndex<1> [ORD=89] [ID=3]

    0x3b7a820: <multiple use>
  0x3b7b220: i32,ch = load 0x3b57b78, 0x3b771c0, 0x3b7a820<LD4[%2]> [ORD=89] [ID=12]

    0x3b57b78: <multiple use>
      0x3b7b220: <multiple use>
      0x3b79530: i32 = Constant<4> [ORD=90] [ID=4]

    0x3b76090: i32 = add 0x3b7b220, 0x3b79530 [ORD=90] [ID=13]

    0x3b7a820: <multiple use>
  0x3b79630: i32,ch = load 0x3b57b78, 0x3b76090, 0x3b7a820<LD4[%47]> [ORD=91] [ID=14]

        0x3b7bb30: <multiple use>
        0x3b7b220: <multiple use>
        0x3b79630: <multiple use>
      0x3b79d30: ch = TokenFactor 0x3b7bb30:1, 0x3b7b220:1, 0x3b79630:1 [ORD=96] [ID=16]

          0x3b7bb30: <multiple use>
              0x3b79630: <multiple use>
              0x3b79330: i32 = Constant<-350> [ID=10]

            0x3b77ac0: i32 = add 0x3b79630, 0x3b79330 [ID=15]

          0x3b7b830: f32 = sint_to_fp 0x3b77ac0 [ORD=93] [ID=17]

        0x3b778c0: f32 = fmul 0x3b7bb30, 0x3b7b830 [ORD=94] [ID=18]

        0x3b7b730: i32 = Constant<1140457472>

      0x3b77dc0: f32 = fdiv 0x3b778c0, 0x3b7b730 [ORD=95] [ID=19]

      0x3b776c0: i32 = FrameIndex<3> [ORD=96] [ID=6]

      0x3b7a820: <multiple use>
    0x3b79030: ch = store 0x3b79d30, 0x3b77dc0, 0x3b776c0, 0x3b7a820<ST4[%4]> [ORD=96] [ID=20]

    0x3b7be30: i32 = FrameIndex<2> [ORD=97] [ID=7]

    0x3b7a820: <multiple use>
  0x3b7ac20: f32,ch = load 0x3b79030, 0x3b7be30, 0x3b7a820<LD4[%3]> [ORD=97] [ID=21]

      0x3b7ac20: <multiple use>
      0x3b7ac20: <multiple use>
          0x3b779c0: i32 = TargetGlobalAddress<float* @nh_fin_de_rampe> 0 [TF=2]

        0x3b75a90: i32 = REDEFINEISD::Hi 0x3b779c0

          0x3b7bf30: i32 = TargetGlobalAddress<float* @nh_fin_de_rampe> 0 [TF=3]

        0x3b777c0: i32 = REDEFINEISD::Lo 0x3b7bf30

      0x3b76fc0: i32 = add 0x3b75a90, 0x3b777c0

      0x3b7a820: <multiple use>
    0x3b7b320: ch = store 0x3b7ac20:1, 0x3b7ac20, 0x3b76fc0, 0x3b7a820<ST4[@nh_fin_de_rampe]> [ORD=98] [ID=22]

    0x3b7b930: ch = BasicBlock<startup_starter3.return 0x3b95f80> [ID=9]

  0x3b75690: ch = br 0x3b7b320, 0x3b7b930 [ID=23]


Optimized legalized selection DAG: BB#10 'startup_starter3:startup_starter3.if.then9'
SelectionDAG has 32 nodes:
  0x3b57b78: ch = EntryToken [ORD=88] [ID=0]

  0x3b7a820: i32 = undef [ORD=88] [ID=2]

    0x3b57b78: <multiple use>
        0x3b77cc0: i32 = TargetGlobalAddress<float* @SG_RAMP_MAX> 0 [TF=2]

      0x3b7b420: i32 = REDEFINEISD::Hi 0x3b77cc0

        0x3b774c0: i32 = TargetGlobalAddress<float* @SG_RAMP_MAX> 0 [TF=3]

      0x3b7bd30: i32 = REDEFINEISD::Lo 0x3b774c0

    0x3b7b020: i32 = add 0x3b7b420, 0x3b7bd30

    0x3b7a820: <multiple use>
  0x3b7bb30: f32,ch = load 0x3b57b78, 0x3b7b020, 0x3b7a820<LD4[@SG_RAMP_MAX]> [ORD=88] [ID=11]

    0x3b57b78: <multiple use>
    0x3b771c0: i32 = FrameIndex<1> [ORD=89] [ID=3]

    0x3b7a820: <multiple use>
  0x3b7b220: i32,ch = load 0x3b57b78, 0x3b771c0, 0x3b7a820<LD4[%2]> [ORD=89] [ID=12]

    0x3b57b78: <multiple use>
      0x3b7b220: <multiple use>
      0x3b79530: i32 = Constant<4> [ORD=90] [ID=4]

    0x3b76090: i32 = add 0x3b7b220, 0x3b79530 [ORD=90] [ID=13]

    0x3b7a820: <multiple use>
  0x3b79630: i32,ch = load 0x3b57b78, 0x3b76090, 0x3b7a820<LD4[%47]> [ORD=91] [ID=14]

        0x3b7bb30: <multiple use>
        0x3b7b220: <multiple use>
        0x3b79630: <multiple use>
      0x3b79d30: ch = TokenFactor 0x3b7bb30:1, 0x3b7b220:1, 0x3b79630:1 [ORD=96] [ID=16]

          0x3b7bb30: <multiple use>
              0x3b79630: <multiple use>
              0x3b79330: i32 = Constant<-350> [ID=10]

            0x3b77ac0: i32 = add 0x3b79630, 0x3b79330 [ID=15]

          0x3b7b830: f32 = sint_to_fp 0x3b77ac0 [ORD=93] [ID=17]

        0x3b778c0: f32 = fmul 0x3b7bb30, 0x3b7b830 [ORD=94] [ID=18]

        0x3b7b730: i32 = Constant<1140457472>

      0x3b77dc0: f32 = fdiv 0x3b778c0, 0x3b7b730 [ORD=95] [ID=19]

      0x3b776c0: i32 = FrameIndex<3> [ORD=96] [ID=6]

      0x3b7a820: <multiple use>
    0x3b79030: ch = store 0x3b79d30, 0x3b77dc0, 0x3b776c0, 0x3b7a820<ST4[%4]> [ORD=96] [ID=20]

    0x3b7be30: i32 = FrameIndex<2> [ORD=97] [ID=7]

    0x3b7a820: <multiple use>
  0x3b7ac20: f32,ch = load 0x3b79030, 0x3b7be30, 0x3b7a820<LD4[%3]> [ORD=97] [ID=21]

      0x3b7ac20: <multiple use>
      0x3b7ac20: <multiple use>
          0x3b779c0: i32 = TargetGlobalAddress<float* @nh_fin_de_rampe> 0 [TF=2]

        0x3b75a90: i32 = REDEFINEISD::Hi 0x3b779c0

          0x3b7bf30: i32 = TargetGlobalAddress<float* @nh_fin_de_rampe> 0 [TF=3]

        0x3b777c0: i32 = REDEFINEISD::Lo 0x3b7bf30

      0x3b76fc0: i32 = add 0x3b75a90, 0x3b777c0

      0x3b7a820: <multiple use>
    0x3b7b320: ch = store 0x3b7ac20:1, 0x3b7ac20, 0x3b76fc0, 0x3b7a820<ST4[@nh_fin_de_rampe]> [ORD=98] [ID=22]

    0x3b7b930: ch = BasicBlock<startup_starter3.return 0x3b95f80> [ID=9]

  0x3b75690: ch = br 0x3b7b320, 0x3b7b930 [ID=23]


===== Instruction selection begins: BB#10 'startup_starter3.if.then9'
ISEL: Starting pattern match on root node: 0x3b75690: ch = br 0x3b7b320, 0x3b7b930 [ID=31]

  Initial Opcode index to 1938
  Morphed node: 0x3b75690: ch = JAL 0x3b7b930, 0x3b7b320

ISEL: Match complete!
=> 0x3b75690: ch = JAL 0x3b7b930, 0x3b7b320

ISEL: Starting pattern match on root node: 0x3b7b320: ch = store 0x3b7ac20:1, 0x3b7ac20, 0x3b76fc0, 0x3b7a820<ST4[@nh_fin_de_rampe]> [ORD=98] [ID=30]

  Initial Opcode index to 178
  Skipped scope entry (due to false predicate) at index 183, continuing at 243
  Morphed node: 0x3b7b320: ch = FSW 0x3b7ac20, 0x3b76fc0, 0x3b75390, 0x3b7ac20:1<Mem:ST4[@nh_fin_de_rampe]> [ORD=98]

ISEL: Match complete!
=> 0x3b7b320: ch = FSW 0x3b7ac20, 0x3b76fc0, 0x3b75390, 0x3b7ac20:1<Mem:ST4[@nh_fin_de_rampe]> [ORD=98]

ISEL: Starting pattern match on root node: 0x3b7ac20: f32,ch = load 0x3b79030, 0x3b7be30, 0x3b7a820<LD4[%3]> [ORD=97] [ID=29]

  Initial Opcode index to 5
  TypeSwitch[f32] from 10 to 159
  Morphed node: 0x3b7ac20: f32,ch = FLW 0x3b7be30, 0x3b75390, 0x3b79030<Mem:LD4[%3]> [ORD=97]

ISEL: Match complete!
=> 0x3b7ac20: f32,ch = FLW 0x3b7be30, 0x3b75390, 0x3b79030<Mem:LD4[%3]> [ORD=97]

ISEL: Starting pattern match on root node: 0x3b79030: ch = store 0x3b79d30, 0x3b77dc0, 0x3b776c0, 0x3b7a820<ST4[%4]> [ORD=96] [ID=28]

  Initial Opcode index to 178
  Skipped scope entry (due to false predicate) at index 183, continuing at 243
  Morphed node: 0x3b79030: ch = FSW 0x3b77dc0, 0x3b776c0, 0x3b75390, 0x3b79d30<Mem:ST4[%4]> [ORD=96]

ISEL: Match complete!
=> 0x3b79030: ch = FSW 0x3b77dc0, 0x3b776c0, 0x3b75390, 0x3b79d30<Mem:ST4[%4]> [ORD=96]

ISEL: Starting pattern match on root node: 0x3b77dc0: f32 = fdiv 0x3b778c0, 0x3b7b730 [ORD=95] [ID=27]

  Initial Opcode index to 2024
  Morphed node: 0x3b77dc0: f32 = FDIV_S_RDY 0x3b7b730, 0x3b778c0 [ORD=95]

ISEL: Match complete!
=> 0x3b77dc0: f32 = FDIV_S_RDY 0x3b7b730, 0x3b778c0 [ORD=95]

ISEL: Starting pattern match on root node: 0x3b778c0: f32 = fmul 0x3b7bb30, 0x3b7b830 [ORD=94] [ID=26]

  Initial Opcode index to 1957
  Morphed node: 0x3b778c0: f32 = FMUL_S_RDY 0x3b7b830, 0x3b7bb30 [ORD=94]

ISEL: Match complete!
=> 0x3b778c0: f32 = FMUL_S_RDY 0x3b7b830, 0x3b7bb30 [ORD=94]

ISEL: Starting pattern match on root node: 0x3b7b830: f32 = sint_to_fp 0x3b77ac0 [ORD=93] [ID=25]

  Initial Opcode index to 2155
  Morphed node: 0x3b7b830: f32 = FCVT_S_W_RDY 0x3b77ac0 [ORD=93]

ISEL: Match complete!
=> 0x3b7b830: f32 = FCVT_S_W_RDY 0x3b77ac0 [ORD=93]

=> 0x3b79d30: ch = TokenFactor 0x3b7bb30:1, 0x3b7b220:1, 0x3b79630:1 [ORD=96]

ISEL: Starting pattern match on root node: 0x3b77ac0: i32 = add 0x3b79630, 0x3b79330 [ID=23]

  Initial Opcode index to 493
  Morphed node: 0x3b77ac0: i32 = ADDI 0x3b79630, 0x3b79930

ISEL: Match complete!
=> 0x3b77ac0: i32 = ADDI 0x3b79630, 0x3b79930

ISEL: Starting pattern match on root node: 0x3b7bb30: f32,ch = load 0x3b57b78, 0x3b7b020, 0x3b7a820<LD4[@SG_RAMP_MAX]> [ORD=88] [ID=22]

  Initial Opcode index to 5
  TypeSwitch[f32] from 10 to 159
  Morphed node: 0x3b7bb30: f32,ch = FLW 0x3b7b020, 0x3b75390, 0x3b57b78<Mem:LD4[@SG_RAMP_MAX]> [ORD=88]

ISEL: Match complete!
=> 0x3b7bb30: f32,ch = FLW 0x3b7b020, 0x3b75390, 0x3b57b78<Mem:LD4[@SG_RAMP_MAX]> [ORD=88]

ISEL: Starting pattern match on root node: 0x3b79630: i32,ch = load 0x3b57b78, 0x3b76090, 0x3b7a820<LD4[%47]> [ORD=91] [ID=21]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x3b79630: i32,ch = LW 0x3b7b220, 0x3b79330, 0x3b57b78<Mem:LD4[%47]> [ORD=91]

ISEL: Match complete!
=> 0x3b79630: i32,ch = LW 0x3b7b220, 0x3b79330, 0x3b57b78<Mem:LD4[%47]> [ORD=91]

ISEL: Starting pattern match on root node: 0x3b7b020: i32 = add 0x3b7b420, 0x3b7bd30 [ID=20]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x3b7b020: i32 = ADD 0x3b7bd30, 0x3b7b420

ISEL: Match complete!
=> 0x3b7b020: i32 = ADD 0x3b7bd30, 0x3b7b420

ISEL: Starting pattern match on root node: 0x3b76fc0: i32 = add 0x3b75a90, 0x3b777c0 [ID=19]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x3b76fc0: i32 = ADD 0x3b777c0, 0x3b75a90

ISEL: Match complete!
=> 0x3b76fc0: i32 = ADD 0x3b777c0, 0x3b75a90

ISEL: Starting pattern match on root node: 0x3b7bd30: i32 = REDEFINEISD::Lo 0x3b774c0 [ID=17]

  Initial Opcode index to 1204
  Morphed node: 0x3b7bd30: i32 = ADDI 0x3b79530, 0x3b774c0

ISEL: Match complete!
=> 0x3b7bd30: i32 = ADDI 0x3b79530, 0x3b774c0

ISEL: Starting pattern match on root node: 0x3b7b420: i32 = REDEFINEISD::Hi 0x3b77cc0 [ID=16]

  Initial Opcode index to 1186
  Morphed node: 0x3b7b420: i32 = LUI 0x3b77cc0

ISEL: Match complete!
=> 0x3b7b420: i32 = LUI 0x3b77cc0

ISEL: Starting pattern match on root node: 0x3b777c0: i32 = REDEFINEISD::Lo 0x3b7bf30 [ID=15]

  Initial Opcode index to 1204
  Morphed node: 0x3b777c0: i32 = ADDI 0x3b79530, 0x3b7bf30

ISEL: Match complete!
=> 0x3b777c0: i32 = ADDI 0x3b79530, 0x3b7bf30

ISEL: Starting pattern match on root node: 0x3b75a90: i32 = REDEFINEISD::Hi 0x3b779c0 [ID=14]

  Initial Opcode index to 1186
  Morphed node: 0x3b75a90: i32 = LUI 0x3b779c0

ISEL: Match complete!
=> 0x3b75a90: i32 = LUI 0x3b779c0

ISEL: Starting pattern match on root node: 0x3b7b220: i32,ch = load 0x3b57b78, 0x3b771c0, 0x3b7a820<LD4[%2]> [ORD=89] [ID=13]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x3b7b220: i32,ch = LW 0x3b771c0, 0x3b75390, 0x3b57b78<Mem:LD4[%2]> [ORD=89]

ISEL: Match complete!
=> 0x3b7b220: i32,ch = LW 0x3b771c0, 0x3b75390, 0x3b57b78<Mem:LD4[%2]> [ORD=89]

=> 0x3b774c0: i32 = TargetGlobalAddress<float* @SG_RAMP_MAX> 0 [TF=3]

=> 0x3b77cc0: i32 = TargetGlobalAddress<float* @SG_RAMP_MAX> 0 [TF=2]

ISEL: Starting pattern match on root node: 0x3b7b730: i32 = Constant<1140457472> [ID=10]

  Initial Opcode index to 1226
comparing 0 and 1140457472 and returning value:0
  Skipped scope entry (due to false predicate) at index 1228, continuing at 1236
  Skipped scope entry (due to false predicate) at index 1240, continuing at 1256
  Morphed node: 0x3b7b730: i32 = ADDI 0x3b79530, 0x3b7a820

ISEL: Match complete!
=> 0x3b7b730: i32 = ADDI 0x3b79530, 0x3b7a820

=> 0x3b7bf30: i32 = TargetGlobalAddress<float* @nh_fin_de_rampe> 0 [TF=3]

=> 0x3b779c0: i32 = TargetGlobalAddress<float* @nh_fin_de_rampe> 0 [TF=2]

=> 0x3b7b930: ch = BasicBlock<startup_starter3.return 0x3b95f80>

=> 0x3b57b78: ch = EntryToken [ORD=88]

===== Instruction selection ends:
Selected selection DAG: BB#10 'startup_starter3:startup_starter3.if.then9'
SelectionDAG has 37 nodes:
  0x3b57b78: ch = EntryToken [ORD=88]

      0x3b76090: <multiple use>
      0x3b79130: i32 = TargetFrameIndex<1>

    0x3b771c0: i32 = ADDI 0x3b76090, 0x3b79130 [ORD=89]

    0x3b75390: <multiple use>
    0x3b57b78: <multiple use>
  0x3b7b220: i32,ch = LW 0x3b771c0, 0x3b75390, 0x3b57b78<Mem:LD4[%2]> [ORD=89]

    0x3b7b220: <multiple use>
    0x3b79330: i32 = TargetConstant<4>

    0x3b57b78: <multiple use>
  0x3b79630: i32,ch = LW 0x3b7b220, 0x3b79330, 0x3b57b78<Mem:LD4[%47]> [ORD=91]

        0x3b79530: <multiple use>
        0x3b774c0: i32 = TargetGlobalAddress<float* @SG_RAMP_MAX> 0 [TF=3]

      0x3b7bd30: i32 = ADDI 0x3b79530, 0x3b774c0

        0x3b77cc0: i32 = TargetGlobalAddress<float* @SG_RAMP_MAX> 0 [TF=2]

      0x3b7b420: i32 = LUI 0x3b77cc0

    0x3b7b020: i32 = ADD 0x3b7bd30, 0x3b7b420

    0x3b75390: <multiple use>
    0x3b57b78: <multiple use>
  0x3b7bb30: f32,ch = FLW 0x3b7b020, 0x3b75390, 0x3b57b78<Mem:LD4[@SG_RAMP_MAX]> [ORD=88]

      0x3b76090: <multiple use>
      0x3b7bc30: i32 = TargetFrameIndex<2>

    0x3b7be30: i32 = ADDI 0x3b76090, 0x3b7bc30 [ORD=97]

    0x3b75390: <multiple use>
          0x3b79530: <multiple use>
          0x3b7a820: i32 = TargetConstant<1140457472>

        0x3b7b730: i32 = ADDI 0x3b79530, 0x3b7a820

              0x3b79630: <multiple use>
              0x3b79930: i32 = TargetConstant<-350>

            0x3b77ac0: i32 = ADDI 0x3b79630, 0x3b79930

          0x3b7b830: f32 = FCVT_S_W_RDY 0x3b77ac0 [ORD=93]

          0x3b7bb30: <multiple use>
        0x3b778c0: f32 = FMUL_S_RDY 0x3b7b830, 0x3b7bb30 [ORD=94]

      0x3b77dc0: f32 = FDIV_S_RDY 0x3b7b730, 0x3b778c0 [ORD=95]

        0x3b76090: <multiple use>
        0x3b75d90: i32 = TargetFrameIndex<3>

      0x3b776c0: i32 = ADDI 0x3b76090, 0x3b75d90 [ORD=96]

      0x3b75390: <multiple use>
        0x3b7bb30: <multiple use>
        0x3b7b220: <multiple use>
        0x3b79630: <multiple use>
      0x3b79d30: ch = TokenFactor 0x3b7bb30:1, 0x3b7b220:1, 0x3b79630:1 [ORD=96]

    0x3b79030: ch = FSW 0x3b77dc0, 0x3b776c0, 0x3b75390, 0x3b79d30<Mem:ST4[%4]> [ORD=96]

  0x3b7ac20: f32,ch = FLW 0x3b7be30, 0x3b75390, 0x3b79030<Mem:LD4[%3]> [ORD=97]

  0x3b75390: i32 = TargetConstant<0>

  0x3b79530: i32 = Register %zero

  0x3b76090: i32 = Register %t5

    0x3b7b930: ch = BasicBlock<startup_starter3.return 0x3b95f80>

      0x3b7ac20: <multiple use>
          0x3b79530: <multiple use>
          0x3b7bf30: i32 = TargetGlobalAddress<float* @nh_fin_de_rampe> 0 [TF=3]

        0x3b777c0: i32 = ADDI 0x3b79530, 0x3b7bf30

          0x3b779c0: i32 = TargetGlobalAddress<float* @nh_fin_de_rampe> 0 [TF=2]

        0x3b75a90: i32 = LUI 0x3b779c0

      0x3b76fc0: i32 = ADD 0x3b777c0, 0x3b75a90

      0x3b75390: <multiple use>
      0x3b7ac20: <multiple use>
    0x3b7b320: ch = FSW 0x3b7ac20, 0x3b76fc0, 0x3b75390, 0x3b7ac20:1<Mem:ST4[@nh_fin_de_rampe]> [ORD=98]

  0x3b75690: ch = JAL 0x3b7b930, 0x3b7b320


********** List Scheduling BB#10 'startup_starter3.if.then9' **********
SU(0): 0x3b75690: ch = JAL 0x3b7b930, 0x3b7b320 [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x3b7b320: ch = FSW 0x3b7ac20, 0x3b76fc0, 0x3b75390, 0x3b7ac20:1<Mem:ST4[@nh_fin_de_rampe]> [ORD=98] [ID=1]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
   val SU(5): Latency=1
   val SU(2): Latency=1
   ch  SU(5): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x3b76fc0: i32 = ADD 0x3b777c0, 0x3b75a90 [ID=2]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
   val SU(4): Latency=1
   val SU(3): Latency=1
  Successors:
   val SU(1): Latency=1

SU(3): 0x3b75a90: i32 = LUI 0x3b779c0 [ID=3]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(2): Latency=1

SU(4): 0x3b777c0: i32 = ADDI 0x3b79530, 0x3b7bf30 [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(2): Latency=1

SU(5): 0x3b7ac20: f32,ch = FLW 0x3b7be30, 0x3b75390, 0x3b79030<Mem:LD4[%3]> [ORD=97] [ID=5]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 8
  Height             : 2
  Predecessors:
   val SU(21): Latency=1
   ch  SU(6): Latency=1
  Successors:
   val SU(1): Latency=1
   ch  SU(1): Latency=1

SU(6): 0x3b79030: ch = FSW 0x3b77dc0, 0x3b776c0, 0x3b75390, 0x3b79d30<Mem:ST4[%4]> [ORD=96] [ID=6]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 3
  Predecessors:
   val SU(16): Latency=1
   val SU(15): Latency=1
   ch  SU(7): Latency=0
  Successors:
   ch  SU(5): Latency=1

SU(7): 0x3b79d30: ch = TokenFactor 0x3b7bb30:1, 0x3b7b220:1, 0x3b79630:1 [ORD=96] [ID=7]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 3
  Predecessors:
   ch  SU(11): Latency=1
   ch  SU(9): Latency=1
   ch  SU(8): Latency=1
  Successors:
   ch  SU(6): Latency=0

SU(8): 0x3b79630: i32,ch = LW 0x3b7b220, 0x3b79330, 0x3b57b78<Mem:LD4[%47]> [ORD=91] [ID=8]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 8
  Predecessors:
   val SU(9): Latency=1
  Successors:
   ch  SU(7): Latency=1
   val SU(19): Latency=1

SU(9): 0x3b7b220: i32,ch = LW 0x3b771c0, 0x3b75390, 0x3b57b78<Mem:LD4[%2]> [ORD=89] [ID=9]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 9
  Predecessors:
   val SU(10): Latency=1
  Successors:
   ch  SU(7): Latency=1
   val SU(8): Latency=1

SU(10): 0x3b771c0: i32 = ADDI 0x3b76090, 0x3b79130 [ORD=89] [ID=10]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 10
  Successors:
   val SU(9): Latency=1

SU(11): 0x3b7bb30: f32,ch = FLW 0x3b7b020, 0x3b75390, 0x3b57b78<Mem:LD4[@SG_RAMP_MAX]> [ORD=88] [ID=11]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 6
  Predecessors:
   val SU(12): Latency=1
  Successors:
   ch  SU(7): Latency=1
   val SU(17): Latency=1

SU(12): 0x3b7b020: i32 = ADD 0x3b7bd30, 0x3b7b420 [ID=12]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 7
  Predecessors:
   val SU(14): Latency=1
   val SU(13): Latency=1
  Successors:
   val SU(11): Latency=1

SU(13): 0x3b7b420: i32 = LUI 0x3b77cc0 [ID=13]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 8
  Successors:
   val SU(12): Latency=1

SU(14): 0x3b7bd30: i32 = ADDI 0x3b79530, 0x3b774c0 [ID=14]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 8
  Successors:
   val SU(12): Latency=1

SU(15): 0x3b776c0: i32 = ADDI 0x3b76090, 0x3b75d90 [ORD=96] [ID=15]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(6): Latency=1

SU(16): 0x3b77dc0: f32 = FDIV_S_RDY 0x3b7b730, 0x3b778c0 [ORD=95] [ID=16]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 6
  Height             : 4
  Predecessors:
   val SU(20): Latency=1
   val SU(17): Latency=1
  Successors:
   val SU(6): Latency=1

SU(17): 0x3b778c0: f32 = FMUL_S_RDY 0x3b7b830, 0x3b7bb30 [ORD=94] [ID=17]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 5
  Height             : 5
  Predecessors:
   val SU(18): Latency=1
   val SU(11): Latency=1
  Successors:
   val SU(16): Latency=1

SU(18): 0x3b7b830: f32 = FCVT_S_W_RDY 0x3b77ac0 [ORD=93] [ID=18]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
   val SU(19): Latency=1
  Successors:
   val SU(17): Latency=1

SU(19): 0x3b77ac0: i32 = ADDI 0x3b79630, 0x3b79930 [ID=19]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 3
  Height             : 7
  Predecessors:
   val SU(8): Latency=1
  Successors:
   val SU(18): Latency=1

SU(20): 0x3b7b730: i32 = ADDI 0x3b79530, 0x3b7a820 [ID=20]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
   val SU(16): Latency=1

SU(21): 0x3b7be30: i32 = ADDI 0x3b76090, 0x3b7bc30 [ORD=97] [ID=21]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(5): Latency=1


Examining Available:
Height 0: SU(0): 0x3b75690: ch = JAL 0x3b7b930, 0x3b7b320 [ID=0]


*** Scheduling [0]: SU(0): 0x3b75690: ch = JAL 0x3b7b930, 0x3b7b320 [ID=0]


Examining Available:
Height 1: SU(1): 0x3b7b320: ch = FSW 0x3b7ac20, 0x3b76fc0, 0x3b75390, 0x3b7ac20:1<Mem:ST4[@nh_fin_de_rampe]> [ORD=98] [ID=1]


*** Scheduling [1]: SU(1): 0x3b7b320: ch = FSW 0x3b7ac20, 0x3b76fc0, 0x3b75390, 0x3b7ac20:1<Mem:ST4[@nh_fin_de_rampe]> [ORD=98] [ID=1]


Examining Available:
Height 2: SU(2): 0x3b76fc0: i32 = ADD 0x3b777c0, 0x3b75a90 [ID=2]

Height 2: SU(5): 0x3b7ac20: f32,ch = FLW 0x3b7be30, 0x3b75390, 0x3b79030<Mem:LD4[%3]> [ORD=97] [ID=5]


*** Scheduling [2]: SU(2): 0x3b76fc0: i32 = ADD 0x3b777c0, 0x3b75a90 [ID=2]


Examining Available:
Height 3: SU(4): 0x3b777c0: i32 = ADDI 0x3b79530, 0x3b7bf30 [ID=4]

Height 3: SU(3): 0x3b75a90: i32 = LUI 0x3b779c0 [ID=3]

Height 2: SU(5): 0x3b7ac20: f32,ch = FLW 0x3b7be30, 0x3b75390, 0x3b79030<Mem:LD4[%3]> [ORD=97] [ID=5]


*** Scheduling [3]: SU(4): 0x3b777c0: i32 = ADDI 0x3b79530, 0x3b7bf30 [ID=4]


Examining Available:
Height 3: SU(3): 0x3b75a90: i32 = LUI 0x3b779c0 [ID=3]

Height 2: SU(5): 0x3b7ac20: f32,ch = FLW 0x3b7be30, 0x3b75390, 0x3b79030<Mem:LD4[%3]> [ORD=97] [ID=5]


*** Scheduling [4]: SU(3): 0x3b75a90: i32 = LUI 0x3b779c0 [ID=3]


Examining Available:
Height 2: SU(5): 0x3b7ac20: f32,ch = FLW 0x3b7be30, 0x3b75390, 0x3b79030<Mem:LD4[%3]> [ORD=97] [ID=5]


*** Scheduling [5]: SU(5): 0x3b7ac20: f32,ch = FLW 0x3b7be30, 0x3b75390, 0x3b79030<Mem:LD4[%3]> [ORD=97] [ID=5]


Examining Available:
Height 6: SU(21): 0x3b7be30: i32 = ADDI 0x3b76090, 0x3b7bc30 [ORD=97] [ID=21]

Height 6: SU(6): 0x3b79030: ch = FSW 0x3b77dc0, 0x3b776c0, 0x3b75390, 0x3b79d30<Mem:ST4[%4]> [ORD=96] [ID=6]


*** Scheduling [6]: SU(21): 0x3b7be30: i32 = ADDI 0x3b76090, 0x3b7bc30 [ORD=97] [ID=21]


Examining Available:
Height 6: SU(6): 0x3b79030: ch = FSW 0x3b77dc0, 0x3b776c0, 0x3b75390, 0x3b79d30<Mem:ST4[%4]> [ORD=96] [ID=6]


*** Scheduling [7]: SU(6): 0x3b79030: ch = FSW 0x3b77dc0, 0x3b776c0, 0x3b75390, 0x3b79d30<Mem:ST4[%4]> [ORD=96] [ID=6]


Examining Available:
Height 7: SU(7): 0x3b79d30: ch = TokenFactor 0x3b7bb30:1, 0x3b7b220:1, 0x3b79630:1 [ORD=96] [ID=7]

Height 8: SU(15): 0x3b776c0: i32 = ADDI 0x3b76090, 0x3b75d90 [ORD=96] [ID=15]

Height 8: SU(16): 0x3b77dc0: f32 = FDIV_S_RDY 0x3b7b730, 0x3b778c0 [ORD=95] [ID=16]


*** Scheduling [8]: SU(7): 0x3b79d30: ch = TokenFactor 0x3b7bb30:1, 0x3b7b220:1, 0x3b79630:1 [ORD=96] [ID=7]


Examining Available:
Height 8: SU(15): 0x3b776c0: i32 = ADDI 0x3b76090, 0x3b75d90 [ORD=96] [ID=15]

Height 8: SU(16): 0x3b77dc0: f32 = FDIV_S_RDY 0x3b7b730, 0x3b778c0 [ORD=95] [ID=16]


*** Scheduling [9]: SU(15): 0x3b776c0: i32 = ADDI 0x3b76090, 0x3b75d90 [ORD=96] [ID=15]


Examining Available:
Height 8: SU(16): 0x3b77dc0: f32 = FDIV_S_RDY 0x3b7b730, 0x3b778c0 [ORD=95] [ID=16]


*** Scheduling [10]: SU(16): 0x3b77dc0: f32 = FDIV_S_RDY 0x3b7b730, 0x3b778c0 [ORD=95] [ID=16]


Examining Available:
Height 11: SU(20): 0x3b7b730: i32 = ADDI 0x3b79530, 0x3b7a820 [ID=20]

Height 11: SU(17): 0x3b778c0: f32 = FMUL_S_RDY 0x3b7b830, 0x3b7bb30 [ORD=94] [ID=17]


*** Scheduling [11]: SU(20): 0x3b7b730: i32 = ADDI 0x3b79530, 0x3b7a820 [ID=20]


Examining Available:
Height 11: SU(17): 0x3b778c0: f32 = FMUL_S_RDY 0x3b7b830, 0x3b7bb30 [ORD=94] [ID=17]


*** Scheduling [12]: SU(17): 0x3b778c0: f32 = FMUL_S_RDY 0x3b7b830, 0x3b7bb30 [ORD=94] [ID=17]


Examining Available:
Height 13: SU(18): 0x3b7b830: f32 = FCVT_S_W_RDY 0x3b77ac0 [ORD=93] [ID=18]

Height 13: SU(11): 0x3b7bb30: f32,ch = FLW 0x3b7b020, 0x3b75390, 0x3b57b78<Mem:LD4[@SG_RAMP_MAX]> [ORD=88] [ID=11]


*** Scheduling [13]: SU(18): 0x3b7b830: f32 = FCVT_S_W_RDY 0x3b77ac0 [ORD=93] [ID=18]


Examining Available:
Height 14: SU(19): 0x3b77ac0: i32 = ADDI 0x3b79630, 0x3b79930 [ID=19]

Height 13: SU(11): 0x3b7bb30: f32,ch = FLW 0x3b7b020, 0x3b75390, 0x3b57b78<Mem:LD4[@SG_RAMP_MAX]> [ORD=88] [ID=11]


*** Scheduling [14]: SU(19): 0x3b77ac0: i32 = ADDI 0x3b79630, 0x3b79930 [ID=19]


Examining Available:
Height 15: SU(8): 0x3b79630: i32,ch = LW 0x3b7b220, 0x3b79330, 0x3b57b78<Mem:LD4[%47]> [ORD=91] [ID=8]

Height 13: SU(11): 0x3b7bb30: f32,ch = FLW 0x3b7b020, 0x3b75390, 0x3b57b78<Mem:LD4[@SG_RAMP_MAX]> [ORD=88] [ID=11]


*** Scheduling [15]: SU(8): 0x3b79630: i32,ch = LW 0x3b7b220, 0x3b79330, 0x3b57b78<Mem:LD4[%47]> [ORD=91] [ID=8]


Examining Available:
Height 16: SU(9): 0x3b7b220: i32,ch = LW 0x3b771c0, 0x3b75390, 0x3b57b78<Mem:LD4[%2]> [ORD=89] [ID=9]

Height 13: SU(11): 0x3b7bb30: f32,ch = FLW 0x3b7b020, 0x3b75390, 0x3b57b78<Mem:LD4[@SG_RAMP_MAX]> [ORD=88] [ID=11]


*** Scheduling [16]: SU(9): 0x3b7b220: i32,ch = LW 0x3b771c0, 0x3b75390, 0x3b57b78<Mem:LD4[%2]> [ORD=89] [ID=9]


Examining Available:
Height 17: SU(10): 0x3b771c0: i32 = ADDI 0x3b76090, 0x3b79130 [ORD=89] [ID=10]

Height 13: SU(11): 0x3b7bb30: f32,ch = FLW 0x3b7b020, 0x3b75390, 0x3b57b78<Mem:LD4[@SG_RAMP_MAX]> [ORD=88] [ID=11]


*** Scheduling [17]: SU(10): 0x3b771c0: i32 = ADDI 0x3b76090, 0x3b79130 [ORD=89] [ID=10]


Examining Available:
Height 13: SU(11): 0x3b7bb30: f32,ch = FLW 0x3b7b020, 0x3b75390, 0x3b57b78<Mem:LD4[@SG_RAMP_MAX]> [ORD=88] [ID=11]


*** Scheduling [18]: SU(11): 0x3b7bb30: f32,ch = FLW 0x3b7b020, 0x3b75390, 0x3b57b78<Mem:LD4[@SG_RAMP_MAX]> [ORD=88] [ID=11]


Examining Available:
Height 19: SU(12): 0x3b7b020: i32 = ADD 0x3b7bd30, 0x3b7b420 [ID=12]


*** Scheduling [19]: SU(12): 0x3b7b020: i32 = ADD 0x3b7bd30, 0x3b7b420 [ID=12]


Examining Available:
Height 20: SU(14): 0x3b7bd30: i32 = ADDI 0x3b79530, 0x3b774c0 [ID=14]

Height 20: SU(13): 0x3b7b420: i32 = LUI 0x3b77cc0 [ID=13]


*** Scheduling [20]: SU(14): 0x3b7bd30: i32 = ADDI 0x3b79530, 0x3b774c0 [ID=14]


Examining Available:
Height 20: SU(13): 0x3b7b420: i32 = LUI 0x3b77cc0 [ID=13]


*** Scheduling [21]: SU(13): 0x3b7b420: i32 = LUI 0x3b77cc0 [ID=13]

*** Final schedule ***
SU(13): 0x3b7b420: i32 = LUI 0x3b77cc0 [ID=13]

SU(14): 0x3b7bd30: i32 = ADDI 0x3b79530, 0x3b774c0 [ID=14]

SU(12): 0x3b7b020: i32 = ADD 0x3b7bd30, 0x3b7b420 [ID=12]

SU(11): 0x3b7bb30: f32,ch = FLW 0x3b7b020, 0x3b75390, 0x3b57b78<Mem:LD4[@SG_RAMP_MAX]> [ORD=88] [ID=11]

SU(10): 0x3b771c0: i32 = ADDI 0x3b76090, 0x3b79130 [ORD=89] [ID=10]

SU(9): 0x3b7b220: i32,ch = LW 0x3b771c0, 0x3b75390, 0x3b57b78<Mem:LD4[%2]> [ORD=89] [ID=9]

SU(8): 0x3b79630: i32,ch = LW 0x3b7b220, 0x3b79330, 0x3b57b78<Mem:LD4[%47]> [ORD=91] [ID=8]

SU(19): 0x3b77ac0: i32 = ADDI 0x3b79630, 0x3b79930 [ID=19]

SU(18): 0x3b7b830: f32 = FCVT_S_W_RDY 0x3b77ac0 [ORD=93] [ID=18]

SU(17): 0x3b778c0: f32 = FMUL_S_RDY 0x3b7b830, 0x3b7bb30 [ORD=94] [ID=17]

SU(20): 0x3b7b730: i32 = ADDI 0x3b79530, 0x3b7a820 [ID=20]

SU(16): 0x3b77dc0: f32 = FDIV_S_RDY 0x3b7b730, 0x3b778c0 [ORD=95] [ID=16]

SU(15): 0x3b776c0: i32 = ADDI 0x3b76090, 0x3b75d90 [ORD=96] [ID=15]

SU(7): 0x3b79d30: ch = TokenFactor 0x3b7bb30:1, 0x3b7b220:1, 0x3b79630:1 [ORD=96] [ID=7]

SU(6): 0x3b79030: ch = FSW 0x3b77dc0, 0x3b776c0, 0x3b75390, 0x3b79d30<Mem:ST4[%4]> [ORD=96] [ID=6]

SU(21): 0x3b7be30: i32 = ADDI 0x3b76090, 0x3b7bc30 [ORD=97] [ID=21]

SU(5): 0x3b7ac20: f32,ch = FLW 0x3b7be30, 0x3b75390, 0x3b79030<Mem:LD4[%3]> [ORD=97] [ID=5]

SU(3): 0x3b75a90: i32 = LUI 0x3b779c0 [ID=3]

SU(4): 0x3b777c0: i32 = ADDI 0x3b79530, 0x3b7bf30 [ID=4]

SU(2): 0x3b76fc0: i32 = ADD 0x3b777c0, 0x3b75a90 [ID=2]

SU(1): 0x3b7b320: ch = FSW 0x3b7ac20, 0x3b76fc0, 0x3b75390, 0x3b7ac20:1<Mem:ST4[@nh_fin_de_rampe]> [ORD=98] [ID=1]

SU(0): 0x3b75690: ch = JAL 0x3b7b930, 0x3b7b320 [ID=0]


Total amount of phi nodes to update: 0
store visit is after?  store float 0.000000e+00, float* %4, align 4
I was here to add float 0.000000e+00
I was here to add   %4 = alloca float, align 4
whats in dag after store?SelectionDAG has 6 nodes:
  0x3b7bc30: i32 = Constant<0>

    0x3b57b78: ch = EntryToken [ORD=99]

    0x3b79130: f32 = ConstantFP<0.000000e+00> [ORD=99]

    0x3b75d90: i32 = FrameIndex<3> [ORD=99]

    0x3b76090: i32 = undef [ORD=99]

  0x3b7a820: ch = store 0x3b57b78, 0x3b79130, 0x3b75d90, 0x3b76090<ST4[%4]> [ORD=99]


store visit is after?  store i32 1, i32* @glob_sg_bit0, align 4
I was here to add i32 1
I was here to add @glob_sg_bit0 = common global i32 0, align 4
whats in dag after store?SelectionDAG has 9 nodes:
  0x3b7bc30: i32 = Constant<0>

  0x3b76090: i32 = undef [ORD=99]

      0x3b57b78: ch = EntryToken [ORD=99]

      0x3b79130: f32 = ConstantFP<0.000000e+00> [ORD=99]

      0x3b75d90: i32 = FrameIndex<3> [ORD=99]

      0x3b76090: <multiple use>
    0x3b7a820: ch = store 0x3b57b78, 0x3b79130, 0x3b75d90, 0x3b76090<ST4[%4]> [ORD=99]

    0x3b79530: i32 = Constant<1> [ORD=100]

    0x3b79330: i32 = GlobalAddress<i32* @glob_sg_bit0> 0 [ORD=100]

    0x3b76090: <multiple use>
  0x3b79930: ch = store 0x3b7a820, 0x3b79530, 0x3b79330, 0x3b76090<ST4[@glob_sg_bit0]> [ORD=100]


store visit is after?  store i32 0, i32* @glob_sg_bit1, align 4
I was here to add i32 0
I was here to add @glob_sg_bit1 = common global i32 0, align 4
whats in dag after store?SelectionDAG has 11 nodes:
  0x3b76090: i32 = undef [ORD=99]

        0x3b57b78: ch = EntryToken [ORD=99]

        0x3b79130: f32 = ConstantFP<0.000000e+00> [ORD=99]

        0x3b75d90: i32 = FrameIndex<3> [ORD=99]

        0x3b76090: <multiple use>
      0x3b7a820: ch = store 0x3b57b78, 0x3b79130, 0x3b75d90, 0x3b76090<ST4[%4]> [ORD=99]

      0x3b79530: i32 = Constant<1> [ORD=100]

      0x3b79330: i32 = GlobalAddress<i32* @glob_sg_bit0> 0 [ORD=100]

      0x3b76090: <multiple use>
    0x3b79930: ch = store 0x3b7a820, 0x3b79530, 0x3b79330, 0x3b76090<ST4[@glob_sg_bit0]> [ORD=100]

    0x3b7bc30: i32 = Constant<0> [ORD=101]

    0x3b75390: i32 = GlobalAddress<i32* @glob_sg_bit1> 0 [ORD=101]

    0x3b76090: <multiple use>
  0x3b75690: ch = store 0x3b79930, 0x3b7bc30, 0x3b75390, 0x3b76090<ST4[@glob_sg_bit1]> [ORD=101]


Initial selection DAG: BB#11 'startup_starter3:startup_starter3.if.then'
SelectionDAG has 11 nodes:
  0x3b76090: i32 = undef [ORD=99]

        0x3b57b78: ch = EntryToken [ORD=99]

        0x3b79130: f32 = ConstantFP<0.000000e+00> [ORD=99]

        0x3b75d90: i32 = FrameIndex<3> [ORD=99]

        0x3b76090: <multiple use>
      0x3b7a820: ch = store 0x3b57b78, 0x3b79130, 0x3b75d90, 0x3b76090<ST4[%4]> [ORD=99]

      0x3b79530: i32 = Constant<1> [ORD=100]

      0x3b79330: i32 = GlobalAddress<i32* @glob_sg_bit0> 0 [ORD=100]

      0x3b76090: <multiple use>
    0x3b79930: ch = store 0x3b7a820, 0x3b79530, 0x3b79330, 0x3b76090<ST4[@glob_sg_bit0]> [ORD=100]

    0x3b7bc30: i32 = Constant<0> [ORD=101]

    0x3b75390: i32 = GlobalAddress<i32* @glob_sg_bit1> 0 [ORD=101]

    0x3b76090: <multiple use>
  0x3b75690: ch = store 0x3b79930, 0x3b7bc30, 0x3b75390, 0x3b76090<ST4[@glob_sg_bit1]> [ORD=101]



Replacing.3 0x3b7a820: ch = store 0x3b57b78, 0x3b79130, 0x3b75d90, 0x3b76090<ST4[%4]> [ORD=99]

With: 0x3b7b320: ch = store 0x3b57b78, 0x3b7bc30, 0x3b75d90, 0x3b76090<ST4[%4]>

Optimized lowered selection DAG: BB#11 'startup_starter3:startup_starter3.if.then'
SelectionDAG has 10 nodes:
  0x3b7bc30: i32 = Constant<0> [ORD=101]

  0x3b76090: i32 = undef [ORD=99]

        0x3b57b78: ch = EntryToken [ORD=99]

        0x3b7bc30: <multiple use>
        0x3b75d90: i32 = FrameIndex<3> [ORD=99]

        0x3b76090: <multiple use>
      0x3b7b320: ch = store 0x3b57b78, 0x3b7bc30, 0x3b75d90, 0x3b76090<ST4[%4]>

      0x3b79530: i32 = Constant<1> [ORD=100]

      0x3b79330: i32 = GlobalAddress<i32* @glob_sg_bit0> 0 [ORD=100]

      0x3b76090: <multiple use>
    0x3b79930: ch = store 0x3b7b320, 0x3b79530, 0x3b79330, 0x3b76090<ST4[@glob_sg_bit0]> [ORD=100]

    0x3b7bc30: <multiple use>
    0x3b75390: i32 = GlobalAddress<i32* @glob_sg_bit1> 0 [ORD=101]

    0x3b76090: <multiple use>
  0x3b75690: ch = store 0x3b79930, 0x3b7bc30, 0x3b75390, 0x3b76090<ST4[@glob_sg_bit1]> [ORD=101]


Legally typed node: 0x3b75390: i32 = GlobalAddress<i32* @glob_sg_bit1> 0 [ORD=101] [ID=0]

Legally typed node: 0x3b79330: i32 = GlobalAddress<i32* @glob_sg_bit0> 0 [ORD=100] [ID=0]

Legally typed node: 0x3b79530: i32 = Constant<1> [ORD=100] [ID=0]

Legally typed node: 0x3b76090: i32 = undef [ORD=99] [ID=0]

Legally typed node: 0x3b7bc30: i32 = Constant<0> [ORD=101] [ID=0]

Legally typed node: 0x3b75d90: i32 = FrameIndex<3> [ORD=99] [ID=0]

Legally typed node: 0x3b57b78: ch = EntryToken [ORD=99] [ID=0]

Legally typed node: 0x3b7b320: ch = store 0x3b57b78, 0x3b7bc30, 0x3b75d90, 0x3b76090<ST4[%4]> [ID=0]

Legally typed node: 0x3b79930: ch = store 0x3b7b320, 0x3b79530, 0x3b79330, 0x3b76090<ST4[@glob_sg_bit0]> [ORD=100] [ID=0]

Legally typed node: 0x3b75690: ch = store 0x3b79930, 0x3b7bc30, 0x3b75390, 0x3b76090<ST4[@glob_sg_bit1]> [ORD=101] [ID=0]

Legally typed node: 0x7fffa88b7260: ch = handlenode 0x3b75690 [ID=0]

Type-legalized selection DAG: BB#11 'startup_starter3:startup_starter3.if.then'
SelectionDAG has 10 nodes:
  0x3b7bc30: i32 = Constant<0> [ORD=101] [ID=-3]

  0x3b76090: i32 = undef [ORD=99] [ID=-3]

        0x3b57b78: ch = EntryToken [ORD=99] [ID=-3]

        0x3b7bc30: <multiple use>
        0x3b75d90: i32 = FrameIndex<3> [ORD=99] [ID=-3]

        0x3b76090: <multiple use>
      0x3b7b320: ch = store 0x3b57b78, 0x3b7bc30, 0x3b75d90, 0x3b76090<ST4[%4]> [ID=-3]

      0x3b79530: i32 = Constant<1> [ORD=100] [ID=-3]

      0x3b79330: i32 = GlobalAddress<i32* @glob_sg_bit0> 0 [ORD=100] [ID=-3]

      0x3b76090: <multiple use>
    0x3b79930: ch = store 0x3b7b320, 0x3b79530, 0x3b79330, 0x3b76090<ST4[@glob_sg_bit0]> [ORD=100] [ID=-3]

    0x3b7bc30: <multiple use>
    0x3b75390: i32 = GlobalAddress<i32* @glob_sg_bit1> 0 [ORD=101] [ID=-3]

    0x3b76090: <multiple use>
  0x3b75690: ch = store 0x3b79930, 0x3b7bc30, 0x3b75390, 0x3b76090<ST4[@glob_sg_bit1]> [ORD=101] [ID=-3]


Legalized selection DAG: BB#11 'startup_starter3:startup_starter3.if.then'
SelectionDAG has 18 nodes:
  0x3b7bc30: i32 = Constant<0> [ORD=101] [ID=2]

  0x3b76090: i32 = undef [ORD=99] [ID=3]

        0x3b57b78: ch = EntryToken [ORD=99] [ID=0]

        0x3b7bc30: <multiple use>
        0x3b75d90: i32 = FrameIndex<3> [ORD=99] [ID=1]

        0x3b76090: <multiple use>
      0x3b7b320: ch = store 0x3b57b78, 0x3b7bc30, 0x3b75d90, 0x3b76090<ST4[%4]> [ID=7]

      0x3b79530: i32 = Constant<1> [ORD=100] [ID=4]

          0x3b75390: i32 = TargetGlobalAddress<i32* @glob_sg_bit0> 0 [TF=2]

        0x3b7b830: i32 = REDEFINEISD::Hi 0x3b75390

          0x3b778c0: i32 = TargetGlobalAddress<i32* @glob_sg_bit0> 0 [TF=3]

        0x3b79d30: i32 = REDEFINEISD::Lo 0x3b778c0

      0x3b77ac0: i32 = add 0x3b7b830, 0x3b79d30

      0x3b76090: <multiple use>
    0x3b79930: ch = store 0x3b7b320, 0x3b79530, 0x3b77ac0, 0x3b76090<ST4[@glob_sg_bit0]> [ORD=100] [ID=8]

    0x3b7bc30: <multiple use>
        0x3b79130: i32 = TargetGlobalAddress<i32* @glob_sg_bit1> 0 [TF=2]

      0x3b7ac20: i32 = REDEFINEISD::Hi 0x3b79130

        0x3b7a820: i32 = TargetGlobalAddress<i32* @glob_sg_bit1> 0 [TF=3]

      0x3b79030: i32 = REDEFINEISD::Lo 0x3b7a820

    0x3b77dc0: i32 = add 0x3b7ac20, 0x3b79030

    0x3b76090: <multiple use>
  0x3b75690: ch = store 0x3b79930, 0x3b7bc30, 0x3b77dc0, 0x3b76090<ST4[@glob_sg_bit1]> [ORD=101] [ID=9]


Optimized legalized selection DAG: BB#11 'startup_starter3:startup_starter3.if.then'
SelectionDAG has 18 nodes:
  0x3b7bc30: i32 = Constant<0> [ORD=101] [ID=2]

  0x3b76090: i32 = undef [ORD=99] [ID=3]

        0x3b57b78: ch = EntryToken [ORD=99] [ID=0]

        0x3b7bc30: <multiple use>
        0x3b75d90: i32 = FrameIndex<3> [ORD=99] [ID=1]

        0x3b76090: <multiple use>
      0x3b7b320: ch = store 0x3b57b78, 0x3b7bc30, 0x3b75d90, 0x3b76090<ST4[%4]> [ID=7]

      0x3b79530: i32 = Constant<1> [ORD=100] [ID=4]

          0x3b75390: i32 = TargetGlobalAddress<i32* @glob_sg_bit0> 0 [TF=2]

        0x3b7b830: i32 = REDEFINEISD::Hi 0x3b75390

          0x3b778c0: i32 = TargetGlobalAddress<i32* @glob_sg_bit0> 0 [TF=3]

        0x3b79d30: i32 = REDEFINEISD::Lo 0x3b778c0

      0x3b77ac0: i32 = add 0x3b7b830, 0x3b79d30

      0x3b76090: <multiple use>
    0x3b79930: ch = store 0x3b7b320, 0x3b79530, 0x3b77ac0, 0x3b76090<ST4[@glob_sg_bit0]> [ORD=100] [ID=8]

    0x3b7bc30: <multiple use>
        0x3b79130: i32 = TargetGlobalAddress<i32* @glob_sg_bit1> 0 [TF=2]

      0x3b7ac20: i32 = REDEFINEISD::Hi 0x3b79130

        0x3b7a820: i32 = TargetGlobalAddress<i32* @glob_sg_bit1> 0 [TF=3]

      0x3b79030: i32 = REDEFINEISD::Lo 0x3b7a820

    0x3b77dc0: i32 = add 0x3b7ac20, 0x3b79030

    0x3b76090: <multiple use>
  0x3b75690: ch = store 0x3b79930, 0x3b7bc30, 0x3b77dc0, 0x3b76090<ST4[@glob_sg_bit1]> [ORD=101] [ID=9]


===== Instruction selection begins: BB#11 'startup_starter3.if.then'
ISEL: Starting pattern match on root node: 0x3b75690: ch = store 0x3b79930, 0x3b7bc30, 0x3b77dc0, 0x3b76090<ST4[@glob_sg_bit1]> [ORD=101] [ID=17]

  Initial Opcode index to 178
  Morphed node: 0x3b75690: ch = SW 0x3b7bc30, 0x3b77dc0, 0x3b79330, 0x3b79930<Mem:ST4[@glob_sg_bit1]> [ORD=101]

ISEL: Match complete!
=> 0x3b75690: ch = SW 0x3b7bc30, 0x3b77dc0, 0x3b79330, 0x3b79930<Mem:ST4[@glob_sg_bit1]> [ORD=101]

ISEL: Starting pattern match on root node: 0x3b79930: ch = store 0x3b7b320, 0x3b79530, 0x3b77ac0, 0x3b76090<ST4[@glob_sg_bit0]> [ORD=100] [ID=16]

  Initial Opcode index to 178
  Morphed node: 0x3b79930: ch = SW 0x3b79530, 0x3b77ac0, 0x3b79330, 0x3b7b320<Mem:ST4[@glob_sg_bit0]> [ORD=100]

ISEL: Match complete!
=> 0x3b79930: ch = SW 0x3b79530, 0x3b77ac0, 0x3b79330, 0x3b7b320<Mem:ST4[@glob_sg_bit0]> [ORD=100]

ISEL: Starting pattern match on root node: 0x3b77ac0: i32 = add 0x3b7b830, 0x3b79d30 [ID=15]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x3b77ac0: i32 = ADD 0x3b79d30, 0x3b7b830

ISEL: Match complete!
=> 0x3b77ac0: i32 = ADD 0x3b79d30, 0x3b7b830

ISEL: Starting pattern match on root node: 0x3b77dc0: i32 = add 0x3b7ac20, 0x3b79030 [ID=14]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x3b77dc0: i32 = ADD 0x3b79030, 0x3b7ac20

ISEL: Match complete!
=> 0x3b77dc0: i32 = ADD 0x3b79030, 0x3b7ac20

ISEL: Starting pattern match on root node: 0x3b79d30: i32 = REDEFINEISD::Lo 0x3b778c0 [ID=13]

  Initial Opcode index to 1204
  Morphed node: 0x3b79d30: i32 = ADDI 0x3b7bb30, 0x3b778c0

ISEL: Match complete!
=> 0x3b79d30: i32 = ADDI 0x3b7bb30, 0x3b778c0

ISEL: Starting pattern match on root node: 0x3b7b830: i32 = REDEFINEISD::Hi 0x3b75390 [ID=12]

  Initial Opcode index to 1186
  Morphed node: 0x3b7b830: i32 = LUI 0x3b75390

ISEL: Match complete!
=> 0x3b7b830: i32 = LUI 0x3b75390

ISEL: Starting pattern match on root node: 0x3b79030: i32 = REDEFINEISD::Lo 0x3b7a820 [ID=11]

  Initial Opcode index to 1204
  Morphed node: 0x3b79030: i32 = ADDI 0x3b7bb30, 0x3b7a820

ISEL: Match complete!
=> 0x3b79030: i32 = ADDI 0x3b7bb30, 0x3b7a820

ISEL: Starting pattern match on root node: 0x3b7ac20: i32 = REDEFINEISD::Hi 0x3b79130 [ID=10]

  Initial Opcode index to 1186
  Morphed node: 0x3b7ac20: i32 = LUI 0x3b79130

ISEL: Match complete!
=> 0x3b7ac20: i32 = LUI 0x3b79130

ISEL: Starting pattern match on root node: 0x3b7b320: ch = store 0x3b57b78, 0x3b7bc30, 0x3b75d90, 0x3b76090<ST4[%4]> [ID=9]

  Initial Opcode index to 178
  Morphed node: 0x3b7b320: ch = SW 0x3b7bc30, 0x3b75d90, 0x3b79330, 0x3b57b78<Mem:ST4[%4]>

ISEL: Match complete!
=> 0x3b7b320: ch = SW 0x3b7bc30, 0x3b75d90, 0x3b79330, 0x3b57b78<Mem:ST4[%4]>

=> 0x3b778c0: i32 = TargetGlobalAddress<i32* @glob_sg_bit0> 0 [TF=3]

=> 0x3b75390: i32 = TargetGlobalAddress<i32* @glob_sg_bit0> 0 [TF=2]

=> 0x3b7a820: i32 = TargetGlobalAddress<i32* @glob_sg_bit1> 0 [TF=3]

=> 0x3b79130: i32 = TargetGlobalAddress<i32* @glob_sg_bit1> 0 [TF=2]

ISEL: Starting pattern match on root node: 0x3b79530: i32 = Constant<1> [ORD=100] [ID=4]

  Initial Opcode index to 1226
comparing 0 and 1 and returning value:0
  Skipped scope entry (due to false predicate) at index 1228, continuing at 1236
  Morphed node: 0x3b79530: i32 = ADDI 0x3b7bb30, 0x3b76090 [ORD=100]

ISEL: Match complete!
=> 0x3b79530: i32 = ADDI 0x3b7bb30, 0x3b76090 [ORD=100]

ISEL: Starting pattern match on root node: 0x3b7bc30: i32 = Constant<0> [ORD=101] [ID=2]

  Initial Opcode index to 1226
comparing 0 and 0 and returning value:1
ISEL: Match complete!
=> 0x3b7bc30: i32 = Constant<0> [ORD=101] [ID=2]

=> 0x3b57b78: ch = EntryToken [ORD=99]

===== Instruction selection ends:
Selected selection DAG: BB#11 'startup_starter3:startup_starter3.if.then'
SelectionDAG has 21 nodes:
  0x3b79330: i32 = TargetConstant<0>

  0x3b7bb30: i32 = Register %zero

    0x3b7bb30: <multiple use>
        0x3b7bb30: <multiple use>
        0x3b7a820: i32 = TargetGlobalAddress<i32* @glob_sg_bit1> 0 [TF=3]

      0x3b79030: i32 = ADDI 0x3b7bb30, 0x3b7a820

        0x3b79130: i32 = TargetGlobalAddress<i32* @glob_sg_bit1> 0 [TF=2]

      0x3b7ac20: i32 = LUI 0x3b79130

    0x3b77dc0: i32 = ADD 0x3b79030, 0x3b7ac20

    0x3b79330: <multiple use>
        0x3b7bb30: <multiple use>
        0x3b76090: i32 = TargetConstant<1>

      0x3b79530: i32 = ADDI 0x3b7bb30, 0x3b76090 [ORD=100]

          0x3b7bb30: <multiple use>
          0x3b778c0: i32 = TargetGlobalAddress<i32* @glob_sg_bit0> 0 [TF=3]

        0x3b79d30: i32 = ADDI 0x3b7bb30, 0x3b778c0

          0x3b75390: i32 = TargetGlobalAddress<i32* @glob_sg_bit0> 0 [TF=2]

        0x3b7b830: i32 = LUI 0x3b75390

      0x3b77ac0: i32 = ADD 0x3b79d30, 0x3b7b830

      0x3b79330: <multiple use>
        0x3b7bb30: <multiple use>
          0x3b7bc30: i32 = Register %t5

          0x3b79630: i32 = TargetFrameIndex<3>

        0x3b75d90: i32 = ADDI 0x3b7bc30, 0x3b79630 [ORD=99]

        0x3b79330: <multiple use>
        0x3b57b78: ch = EntryToken [ORD=99]

      0x3b7b320: ch = SW 0x3b7bb30, 0x3b75d90, 0x3b79330, 0x3b57b78<Mem:ST4[%4]>

    0x3b79930: ch = SW 0x3b79530, 0x3b77ac0, 0x3b79330, 0x3b7b320<Mem:ST4[@glob_sg_bit0]> [ORD=100]

  0x3b75690: ch = SW 0x3b7bb30, 0x3b77dc0, 0x3b79330, 0x3b79930<Mem:ST4[@glob_sg_bit1]> [ORD=101]


********** List Scheduling BB#11 'startup_starter3.if.then' **********
SU(0): 0x3b75690: ch = SW 0x3b7bb30, 0x3b77dc0, 0x3b79330, 0x3b79930<Mem:ST4[@glob_sg_bit1]> [ORD=101] [ID=0]

  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 0
  Predecessors:
   val SU(8): Latency=1
   ch  SU(1): Latency=1

SU(1): 0x3b79930: ch = SW 0x3b79530, 0x3b77ac0, 0x3b79330, 0x3b7b320<Mem:ST4[@glob_sg_bit0]> [ORD=100] [ID=1]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
   val SU(7): Latency=1
   val SU(4): Latency=1
   ch  SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x3b7b320: ch = SW 0x3b7bb30, 0x3b75d90, 0x3b79330, 0x3b57b78<Mem:ST4[%4]> [ID=2]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
   val SU(3): Latency=1
  Successors:
   ch  SU(1): Latency=1

SU(3): 0x3b75d90: i32 = ADDI 0x3b7bc30, 0x3b79630 [ORD=99] [ID=3]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(2): Latency=1

SU(4): 0x3b77ac0: i32 = ADD 0x3b79d30, 0x3b7b830 [ID=4]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
   val SU(6): Latency=1
   val SU(5): Latency=1
  Successors:
   val SU(1): Latency=1

SU(5): 0x3b7b830: i32 = LUI 0x3b75390 [ID=5]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(4): Latency=1

SU(6): 0x3b79d30: i32 = ADDI 0x3b7bb30, 0x3b778c0 [ID=6]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(4): Latency=1

SU(7): 0x3b79530: i32 = ADDI 0x3b7bb30, 0x3b76090 [ORD=100] [ID=7]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
   val SU(1): Latency=1

SU(8): 0x3b77dc0: i32 = ADD 0x3b79030, 0x3b7ac20 [ID=8]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
   val SU(10): Latency=1
   val SU(9): Latency=1
  Successors:
   val SU(0): Latency=1

SU(9): 0x3b7ac20: i32 = LUI 0x3b79130 [ID=9]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
   val SU(8): Latency=1

SU(10): 0x3b79030: i32 = ADDI 0x3b7bb30, 0x3b7a820 [ID=10]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
   val SU(8): Latency=1


Examining Available:
Height 0: SU(0): 0x3b75690: ch = SW 0x3b7bb30, 0x3b77dc0, 0x3b79330, 0x3b79930<Mem:ST4[@glob_sg_bit1]> [ORD=101] [ID=0]


*** Scheduling [0]: SU(0): 0x3b75690: ch = SW 0x3b7bb30, 0x3b77dc0, 0x3b79330, 0x3b79930<Mem:ST4[@glob_sg_bit1]> [ORD=101] [ID=0]


Examining Available:
Height 1: SU(8): 0x3b77dc0: i32 = ADD 0x3b79030, 0x3b7ac20 [ID=8]

Height 1: SU(1): 0x3b79930: ch = SW 0x3b79530, 0x3b77ac0, 0x3b79330, 0x3b7b320<Mem:ST4[@glob_sg_bit0]> [ORD=100] [ID=1]


*** Scheduling [1]: SU(8): 0x3b77dc0: i32 = ADD 0x3b79030, 0x3b7ac20 [ID=8]


Examining Available:
Height 2: SU(10): 0x3b79030: i32 = ADDI 0x3b7bb30, 0x3b7a820 [ID=10]

Height 2: SU(9): 0x3b7ac20: i32 = LUI 0x3b79130 [ID=9]

Height 1: SU(1): 0x3b79930: ch = SW 0x3b79530, 0x3b77ac0, 0x3b79330, 0x3b7b320<Mem:ST4[@glob_sg_bit0]> [ORD=100] [ID=1]


*** Scheduling [2]: SU(10): 0x3b79030: i32 = ADDI 0x3b7bb30, 0x3b7a820 [ID=10]


Examining Available:
Height 2: SU(9): 0x3b7ac20: i32 = LUI 0x3b79130 [ID=9]

Height 1: SU(1): 0x3b79930: ch = SW 0x3b79530, 0x3b77ac0, 0x3b79330, 0x3b7b320<Mem:ST4[@glob_sg_bit0]> [ORD=100] [ID=1]


*** Scheduling [3]: SU(9): 0x3b7ac20: i32 = LUI 0x3b79130 [ID=9]


Examining Available:
Height 1: SU(1): 0x3b79930: ch = SW 0x3b79530, 0x3b77ac0, 0x3b79330, 0x3b7b320<Mem:ST4[@glob_sg_bit0]> [ORD=100] [ID=1]


*** Scheduling [4]: SU(1): 0x3b79930: ch = SW 0x3b79530, 0x3b77ac0, 0x3b79330, 0x3b7b320<Mem:ST4[@glob_sg_bit0]> [ORD=100] [ID=1]


Examining Available:
Height 5: SU(4): 0x3b77ac0: i32 = ADD 0x3b79d30, 0x3b7b830 [ID=4]

Height 5: SU(2): 0x3b7b320: ch = SW 0x3b7bb30, 0x3b75d90, 0x3b79330, 0x3b57b78<Mem:ST4[%4]> [ID=2]

Height 5: SU(7): 0x3b79530: i32 = ADDI 0x3b7bb30, 0x3b76090 [ORD=100] [ID=7]


*** Scheduling [5]: SU(4): 0x3b77ac0: i32 = ADD 0x3b79d30, 0x3b7b830 [ID=4]


Examining Available:
Height 6: SU(6): 0x3b79d30: i32 = ADDI 0x3b7bb30, 0x3b778c0 [ID=6]

Height 6: SU(5): 0x3b7b830: i32 = LUI 0x3b75390 [ID=5]

Height 5: SU(2): 0x3b7b320: ch = SW 0x3b7bb30, 0x3b75d90, 0x3b79330, 0x3b57b78<Mem:ST4[%4]> [ID=2]

Height 5: SU(7): 0x3b79530: i32 = ADDI 0x3b7bb30, 0x3b76090 [ORD=100] [ID=7]


*** Scheduling [6]: SU(6): 0x3b79d30: i32 = ADDI 0x3b7bb30, 0x3b778c0 [ID=6]


Examining Available:
Height 6: SU(5): 0x3b7b830: i32 = LUI 0x3b75390 [ID=5]

Height 5: SU(2): 0x3b7b320: ch = SW 0x3b7bb30, 0x3b75d90, 0x3b79330, 0x3b57b78<Mem:ST4[%4]> [ID=2]

Height 5: SU(7): 0x3b79530: i32 = ADDI 0x3b7bb30, 0x3b76090 [ORD=100] [ID=7]


*** Scheduling [7]: SU(5): 0x3b7b830: i32 = LUI 0x3b75390 [ID=5]


Examining Available:
Height 5: SU(2): 0x3b7b320: ch = SW 0x3b7bb30, 0x3b75d90, 0x3b79330, 0x3b57b78<Mem:ST4[%4]> [ID=2]

Height 5: SU(7): 0x3b79530: i32 = ADDI 0x3b7bb30, 0x3b76090 [ORD=100] [ID=7]


*** Scheduling [8]: SU(2): 0x3b7b320: ch = SW 0x3b7bb30, 0x3b75d90, 0x3b79330, 0x3b57b78<Mem:ST4[%4]> [ID=2]


Examining Available:
Height 5: SU(7): 0x3b79530: i32 = ADDI 0x3b7bb30, 0x3b76090 [ORD=100] [ID=7]

Height 9: SU(3): 0x3b75d90: i32 = ADDI 0x3b7bc30, 0x3b79630 [ORD=99] [ID=3]


*** Scheduling [9]: SU(7): 0x3b79530: i32 = ADDI 0x3b7bb30, 0x3b76090 [ORD=100] [ID=7]


Examining Available:
Height 9: SU(3): 0x3b75d90: i32 = ADDI 0x3b7bc30, 0x3b79630 [ORD=99] [ID=3]


*** Scheduling [10]: SU(3): 0x3b75d90: i32 = ADDI 0x3b7bc30, 0x3b79630 [ORD=99] [ID=3]

*** Final schedule ***
SU(3): 0x3b75d90: i32 = ADDI 0x3b7bc30, 0x3b79630 [ORD=99] [ID=3]

SU(7): 0x3b79530: i32 = ADDI 0x3b7bb30, 0x3b76090 [ORD=100] [ID=7]

SU(2): 0x3b7b320: ch = SW 0x3b7bb30, 0x3b75d90, 0x3b79330, 0x3b57b78<Mem:ST4[%4]> [ID=2]

SU(5): 0x3b7b830: i32 = LUI 0x3b75390 [ID=5]

SU(6): 0x3b79d30: i32 = ADDI 0x3b7bb30, 0x3b778c0 [ID=6]

SU(4): 0x3b77ac0: i32 = ADD 0x3b79d30, 0x3b7b830 [ID=4]

SU(1): 0x3b79930: ch = SW 0x3b79530, 0x3b77ac0, 0x3b79330, 0x3b7b320<Mem:ST4[@glob_sg_bit0]> [ORD=100] [ID=1]

SU(9): 0x3b7ac20: i32 = LUI 0x3b79130 [ID=9]

SU(10): 0x3b79030: i32 = ADDI 0x3b7bb30, 0x3b7a820 [ID=10]

SU(8): 0x3b77dc0: i32 = ADD 0x3b79030, 0x3b7ac20 [ID=8]

SU(0): 0x3b75690: ch = SW 0x3b7bb30, 0x3b77dc0, 0x3b79330, 0x3b79930<Mem:ST4[@glob_sg_bit1]> [ORD=101] [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %54 = load float* %4, align 4
I was here to add   %4 = alloca float, align 4
with I type floatand sd value :0x3b79630: i32 = FrameIndex<3>
new load?0x3b7bb30: f32,ch = load 0x3b57b78, 0x3b79630, 0x3b76090<LD4[%4]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x3b7bc30: i32 = Constant<0>

    0x3b57b78: ch = EntryToken

    0x3b79630: i32 = FrameIndex<3>

    0x3b76090: i32 = undef

  0x3b7bb30: f32,ch = load 0x3b57b78, 0x3b79630, 0x3b76090<LD4[%4]>

  0x3b57b78: ch = EntryToken


store visit is after?  store float %54, float* %1, align 4
I was here to add   %1 = alloca float, align 4, !ConsumedBy !6
whats in dag after store?SelectionDAG has 7 nodes:
  0x3b7bc30: i32 = Constant<0>

  0x3b76090: i32 = undef [ORD=102]

    0x3b57b78: ch = EntryToken [ORD=102]

    0x3b79630: i32 = FrameIndex<3> [ORD=102]

    0x3b76090: <multiple use>
  0x3b7bb30: f32,ch = load 0x3b57b78, 0x3b79630, 0x3b76090<LD4[%4]> [ORD=102]

    0x3b7bb30: <multiple use>
    0x3b7bb30: <multiple use>
    0x3b79330: i32 = FrameIndex<0> [ORD=103]

    0x3b76090: <multiple use>
  0x3b75690: ch = store 0x3b7bb30:1, 0x3b7bb30, 0x3b79330, 0x3b76090<ST4[%1]> [ORD=103]


Initial selection DAG: BB#12 'startup_starter3:startup_starter3.return'
SelectionDAG has 7 nodes:
  0x3b7bc30: i32 = Constant<0>

  0x3b76090: i32 = undef [ORD=102]

    0x3b57b78: ch = EntryToken [ORD=102]

    0x3b79630: i32 = FrameIndex<3> [ORD=102]

    0x3b76090: <multiple use>
  0x3b7bb30: f32,ch = load 0x3b57b78, 0x3b79630, 0x3b76090<LD4[%4]> [ORD=102]

    0x3b7bb30: <multiple use>
    0x3b7bb30: <multiple use>
    0x3b79330: i32 = FrameIndex<0> [ORD=103]

    0x3b76090: <multiple use>
  0x3b75690: ch = store 0x3b7bb30:1, 0x3b7bb30, 0x3b79330, 0x3b76090<ST4[%1]> [ORD=103]


Optimized lowered selection DAG: BB#12 'startup_starter3:startup_starter3.return'
SelectionDAG has 6 nodes:
  0x3b76090: i32 = undef [ORD=102]

    0x3b57b78: ch = EntryToken [ORD=102]

    0x3b79630: i32 = FrameIndex<3> [ORD=102]

    0x3b76090: <multiple use>
  0x3b7bb30: f32,ch = load 0x3b57b78, 0x3b79630, 0x3b76090<LD4[%4]> [ORD=102]

    0x3b7bb30: <multiple use>
    0x3b7bb30: <multiple use>
    0x3b79330: i32 = FrameIndex<0> [ORD=103]

    0x3b76090: <multiple use>
  0x3b75690: ch = store 0x3b7bb30:1, 0x3b7bb30, 0x3b79330, 0x3b76090<ST4[%1]> [ORD=103]


Legally typed node: 0x3b79330: i32 = FrameIndex<0> [ORD=103] [ID=0]

Legally typed node: 0x3b76090: i32 = undef [ORD=102] [ID=0]

Legally typed node: 0x3b79630: i32 = FrameIndex<3> [ORD=102] [ID=0]

Legally typed node: 0x3b57b78: ch = EntryToken [ORD=102] [ID=0]

Legally typed node: 0x3b7bb30: f32,ch = load 0x3b57b78, 0x3b79630, 0x3b76090<LD4[%4]> [ORD=102] [ID=0]

Legally typed node: 0x3b75690: ch = store 0x3b7bb30:1, 0x3b7bb30, 0x3b79330, 0x3b76090<ST4[%1]> [ORD=103] [ID=0]

Legally typed node: 0x7fffa88b7260: ch = handlenode 0x3b75690 [ID=0]

Type-legalized selection DAG: BB#12 'startup_starter3:startup_starter3.return'
SelectionDAG has 6 nodes:
  0x3b76090: i32 = undef [ORD=102] [ID=-3]

    0x3b57b78: ch = EntryToken [ORD=102] [ID=-3]

    0x3b79630: i32 = FrameIndex<3> [ORD=102] [ID=-3]

    0x3b76090: <multiple use>
  0x3b7bb30: f32,ch = load 0x3b57b78, 0x3b79630, 0x3b76090<LD4[%4]> [ORD=102] [ID=-3]

    0x3b7bb30: <multiple use>
    0x3b7bb30: <multiple use>
    0x3b79330: i32 = FrameIndex<0> [ORD=103] [ID=-3]

    0x3b76090: <multiple use>
  0x3b75690: ch = store 0x3b7bb30:1, 0x3b7bb30, 0x3b79330, 0x3b76090<ST4[%1]> [ORD=103] [ID=-3]


Legalized selection DAG: BB#12 'startup_starter3:startup_starter3.return'
SelectionDAG has 6 nodes:
  0x3b76090: i32 = undef [ORD=102] [ID=2]

    0x3b57b78: ch = EntryToken [ORD=102] [ID=0]

    0x3b79630: i32 = FrameIndex<3> [ORD=102] [ID=1]

    0x3b76090: <multiple use>
  0x3b7bb30: f32,ch = load 0x3b57b78, 0x3b79630, 0x3b76090<LD4[%4]> [ORD=102] [ID=4]

    0x3b7bb30: <multiple use>
    0x3b7bb30: <multiple use>
    0x3b79330: i32 = FrameIndex<0> [ORD=103] [ID=3]

    0x3b76090: <multiple use>
  0x3b75690: ch = store 0x3b7bb30:1, 0x3b7bb30, 0x3b79330, 0x3b76090<ST4[%1]> [ORD=103] [ID=5]


Optimized legalized selection DAG: BB#12 'startup_starter3:startup_starter3.return'
SelectionDAG has 6 nodes:
  0x3b76090: i32 = undef [ORD=102] [ID=2]

    0x3b57b78: ch = EntryToken [ORD=102] [ID=0]

    0x3b79630: i32 = FrameIndex<3> [ORD=102] [ID=1]

    0x3b76090: <multiple use>
  0x3b7bb30: f32,ch = load 0x3b57b78, 0x3b79630, 0x3b76090<LD4[%4]> [ORD=102] [ID=4]

    0x3b7bb30: <multiple use>
    0x3b7bb30: <multiple use>
    0x3b79330: i32 = FrameIndex<0> [ORD=103] [ID=3]

    0x3b76090: <multiple use>
  0x3b75690: ch = store 0x3b7bb30:1, 0x3b7bb30, 0x3b79330, 0x3b76090<ST4[%1]> [ORD=103] [ID=5]


===== Instruction selection begins: BB#12 'startup_starter3.return'
ISEL: Starting pattern match on root node: 0x3b75690: ch = store 0x3b7bb30:1, 0x3b7bb30, 0x3b79330, 0x3b76090<ST4[%1]> [ORD=103] [ID=5]

  Initial Opcode index to 178
  Skipped scope entry (due to false predicate) at index 183, continuing at 243
  Morphed node: 0x3b75690: ch = FSW 0x3b7bb30, 0x3b79330, 0x3b7bc30, 0x3b7bb30:1<Mem:ST4[%1]> [ORD=103]

ISEL: Match complete!
=> 0x3b75690: ch = FSW 0x3b7bb30, 0x3b79330, 0x3b7bc30, 0x3b7bb30:1<Mem:ST4[%1]> [ORD=103]

ISEL: Starting pattern match on root node: 0x3b7bb30: f32,ch = load 0x3b57b78, 0x3b79630, 0x3b76090<LD4[%4]> [ORD=102] [ID=4]

  Initial Opcode index to 5
  TypeSwitch[f32] from 10 to 159
  Morphed node: 0x3b7bb30: f32,ch = FLW 0x3b79630, 0x3b7bc30, 0x3b57b78<Mem:LD4[%4]> [ORD=102]

ISEL: Match complete!
=> 0x3b7bb30: f32,ch = FLW 0x3b79630, 0x3b7bc30, 0x3b57b78<Mem:LD4[%4]> [ORD=102]

=> 0x3b57b78: ch = EntryToken [ORD=102]

===== Instruction selection ends:
Selected selection DAG: BB#12 'startup_starter3:startup_starter3.return'
SelectionDAG has 9 nodes:
      0x3b76090: <multiple use>
      0x3b77ac0: i32 = TargetFrameIndex<3>

    0x3b79630: i32 = ADDI 0x3b76090, 0x3b77ac0 [ORD=102]

    0x3b7bc30: <multiple use>
    0x3b57b78: ch = EntryToken [ORD=102]

  0x3b7bb30: f32,ch = FLW 0x3b79630, 0x3b7bc30, 0x3b57b78<Mem:LD4[%4]> [ORD=102]

  0x3b7bc30: i32 = TargetConstant<0>

  0x3b76090: i32 = Register %t5

    0x3b7bb30: <multiple use>
      0x3b76090: <multiple use>
      0x3b79930: i32 = TargetFrameIndex<0>

    0x3b79330: i32 = ADDI 0x3b76090, 0x3b79930 [ORD=103]

    0x3b7bc30: <multiple use>
    0x3b7bb30: <multiple use>
  0x3b75690: ch = FSW 0x3b7bb30, 0x3b79330, 0x3b7bc30, 0x3b7bb30:1<Mem:ST4[%1]> [ORD=103]


********** List Scheduling BB#12 'startup_starter3.return' **********
SU(0): 0x3b75690: ch = FSW 0x3b7bb30, 0x3b79330, 0x3b7bc30, 0x3b7bb30:1<Mem:ST4[%1]> [ORD=103] [ID=0]

  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
   val SU(2): Latency=1
   val SU(1): Latency=1
   ch  SU(2): Latency=1

SU(1): 0x3b79330: i32 = ADDI 0x3b76090, 0x3b79930 [ORD=103] [ID=1]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
   val SU(0): Latency=1

SU(2): 0x3b7bb30: f32,ch = FLW 0x3b79630, 0x3b7bc30, 0x3b57b78<Mem:LD4[%4]> [ORD=102] [ID=2]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
   val SU(3): Latency=1
  Successors:
   val SU(0): Latency=1
   ch  SU(0): Latency=1

SU(3): 0x3b79630: i32 = ADDI 0x3b76090, 0x3b77ac0 [ORD=102] [ID=3]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
   val SU(2): Latency=1


Examining Available:
Height 0: SU(0): 0x3b75690: ch = FSW 0x3b7bb30, 0x3b79330, 0x3b7bc30, 0x3b7bb30:1<Mem:ST4[%1]> [ORD=103] [ID=0]


*** Scheduling [0]: SU(0): 0x3b75690: ch = FSW 0x3b7bb30, 0x3b79330, 0x3b7bc30, 0x3b7bb30:1<Mem:ST4[%1]> [ORD=103] [ID=0]


Examining Available:
Height 1: SU(1): 0x3b79330: i32 = ADDI 0x3b76090, 0x3b79930 [ORD=103] [ID=1]

Height 1: SU(2): 0x3b7bb30: f32,ch = FLW 0x3b79630, 0x3b7bc30, 0x3b57b78<Mem:LD4[%4]> [ORD=102] [ID=2]


*** Scheduling [1]: SU(1): 0x3b79330: i32 = ADDI 0x3b76090, 0x3b79930 [ORD=103] [ID=1]


Examining Available:
Height 1: SU(2): 0x3b7bb30: f32,ch = FLW 0x3b79630, 0x3b7bc30, 0x3b57b78<Mem:LD4[%4]> [ORD=102] [ID=2]


*** Scheduling [2]: SU(2): 0x3b7bb30: f32,ch = FLW 0x3b79630, 0x3b7bc30, 0x3b57b78<Mem:LD4[%4]> [ORD=102] [ID=2]


Examining Available:
Height 3: SU(3): 0x3b79630: i32 = ADDI 0x3b76090, 0x3b77ac0 [ORD=102] [ID=3]


*** Scheduling [3]: SU(3): 0x3b79630: i32 = ADDI 0x3b76090, 0x3b77ac0 [ORD=102] [ID=3]

*** Final schedule ***
SU(3): 0x3b79630: i32 = ADDI 0x3b76090, 0x3b77ac0 [ORD=102] [ID=3]

SU(2): 0x3b7bb30: f32,ch = FLW 0x3b79630, 0x3b7bc30, 0x3b57b78<Mem:LD4[%4]> [ORD=102] [ID=2]

SU(1): 0x3b79330: i32 = ADDI 0x3b76090, 0x3b79930 [ORD=103] [ID=1]

SU(0): 0x3b75690: ch = FSW 0x3b7bb30, 0x3b79330, 0x3b7bc30, 0x3b7bb30:1<Mem:ST4[%1]> [ORD=103] [ID=0]


Total amount of phi nodes to update: 0
# Machine code for function startup_starter3: SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %startup_starter3.entry
16B		%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
48B		SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
64B		%vreg2<def> = FLW %vreg1, 0; mem:LD4[%9](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
80B		%vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
96B		FSW %vreg2<kill>, %vreg3<kill>, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
112B		%vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
128B		%vreg5<def> = FLW %vreg4<kill>, 8; mem:LD4[%13] FP32Bit:%vreg5 GR32Bit:%vreg4
144B		%vreg6<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg6
160B		FSW %vreg5<kill>, %vreg6<kill>, 0; mem:ST4[%4] FP32Bit:%vreg5 GR32Bit:%vreg6
176B		%vreg7<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg7
192B		%vreg8<def> = ADDI %zero, 350; GR32Bit:%vreg8
208B		SW %vreg8<kill>, %vreg7<kill>, 0; mem:ST4[%5] GR32Bit:%vreg8,%vreg7
224B		%vreg9<def> = ADDI %t5, <fi#5>; GR32Bit:%vreg9
240B		%vreg10<def> = ADDI %zero, 850; GR32Bit:%vreg10
256B		SW %vreg10<kill>, %vreg9<kill>, 0; mem:ST4[%6] GR32Bit:%vreg10,%vreg9
272B		%vreg11<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg11,%vreg0
288B		%vreg12<def> = LW %vreg11<kill>, 4; mem:LD4[%16] GR32Bit:%vreg12,%vreg11
304B		BEQ <BB#11>, %vreg12<kill>, %zero; GR32Bit:%vreg12
320B		JAL <BB#1>
	    Successors according to CFG: BB#11(12) BB#1(20)

336B	BB#1: derived from LLVM BB %startup_starter3.if.else
	    Predecessors according to CFG: BB#0
352B		%vreg13<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg13
368B		%vreg14<def> = LW %vreg13<kill>, 0; mem:LD4[%2] GR32Bit:%vreg14,%vreg13
384B		%vreg15<def> = LW %vreg14<kill>, 4; mem:LD4[%20] GR32Bit:%vreg15,%vreg14
400B		%vreg16<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg16
416B		%vreg17<def> = LW %vreg16<kill>, 0; mem:LD4[%5] GR32Bit:%vreg17,%vreg16
432B		BLT <BB#12>, %vreg15<kill>, %vreg17<kill>; GR32Bit:%vreg15,%vreg17
448B		JAL <BB#2>
	    Successors according to CFG: BB#12(16) BB#2(16)

464B	BB#2: derived from LLVM BB %startup_starter3.if.else6
	    Predecessors according to CFG: BB#1
480B		%vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
496B		%vreg19<def> = LW %vreg18<kill>, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
512B		%vreg20<def> = LW %vreg19<kill>, 4; mem:LD4[%25] GR32Bit:%vreg20,%vreg19
528B		%vreg21<def> = ADDI %t5, <fi#5>; GR32Bit:%vreg21
544B		%vreg22<def> = LW %vreg21<kill>, 0; mem:LD4[%6] GR32Bit:%vreg22,%vreg21
560B		BLE <BB#10>, %vreg20<kill>, %vreg22<kill>; GR32Bit:%vreg20,%vreg22
576B		JAL <BB#3>
	    Successors according to CFG: BB#10(16) BB#3(16)

592B	BB#3: derived from LLVM BB %startup_starter3.if.else11
	    Predecessors according to CFG: BB#2
608B		%vreg23<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg23
624B		%vreg24<def> = FLW %vreg23<kill>, 0; mem:LD4[%3] FP32Bit:%vreg24 GR32Bit:%vreg23
640B		%vreg25<def> = LUI <ga:@NH_STARTER_SHUTOFF>[TF=2]; GR32Bit:%vreg25
656B		%vreg26<def> = ADDI %zero, <ga:@NH_STARTER_SHUTOFF>[TF=3]; GR32Bit:%vreg26
672B		%vreg27<def> = ADD %vreg26<kill>, %vreg25<kill>; GR32Bit:%vreg27,%vreg26,%vreg25
688B		%vreg28<def> = LW %vreg27<kill>, 0; mem:LD4[@NH_STARTER_SHUTOFF] GR32Bit:%vreg28,%vreg27
704B		%vreg29<def> = FCVT_S_W_RDY %vreg28<kill>; FP32Bit:%vreg29 GR32Bit:%vreg28
720B		%vreg30<def> = FULE_S %vreg24<kill>, %vreg29<kill>; GR32Bit:%vreg30 FP32Bit:%vreg24,%vreg29
736B		BNE <BB#9>, %vreg30<kill>, %zero; GR32Bit:%vreg30
752B		JAL <BB#4>
	    Successors according to CFG: BB#4(16) BB#9(16)

768B	BB#4: derived from LLVM BB %startup_starter3.if.then15
	    Predecessors according to CFG: BB#3
784B		%vreg38<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg38
800B		%vreg39<def> = FLW %vreg38<kill>, 0; mem:LD4[%3] FP32Bit:%vreg39 GR32Bit:%vreg38
816B		%vreg40<def> = LUI <ga:@SG_MAX_RPM>[TF=2]; GR32Bit:%vreg40
832B		%vreg41<def> = ADDI %zero, <ga:@SG_MAX_RPM>[TF=3]; GR32Bit:%vreg41
848B		%vreg42<def> = ADD %vreg41<kill>, %vreg40<kill>; GR32Bit:%vreg42,%vreg41,%vreg40
864B		%vreg43<def> = LW %vreg42<kill>, 0; mem:LD4[@SG_MAX_RPM] GR32Bit:%vreg43,%vreg42
880B		%vreg44<def> = FCVT_S_W_RDY %vreg43<kill>; FP32Bit:%vreg44 GR32Bit:%vreg43
896B		%vreg45<def> = FULE_S %vreg39<kill>, %vreg44<kill>; GR32Bit:%vreg45 FP32Bit:%vreg39,%vreg44
912B		BNE <BB#12>, %vreg45<kill>, %zero; GR32Bit:%vreg45
928B		JAL <BB#5>
	    Successors according to CFG: BB#5(16) BB#12(16)

944B	BB#5: derived from LLVM BB %startup_starter3.if.then19
	    Predecessors according to CFG: BB#4
960B		%vreg46<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg46
976B		%vreg47<def> = FLW %vreg46<kill>, 0; mem:LD4[%4] FP32Bit:%vreg47 GR32Bit:%vreg46
992B		%vreg48<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg48
1008B		%vreg49<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg49
1024B		%vreg50<def> = ADD %vreg49<kill>, %vreg48<kill>; GR32Bit:%vreg50,%vreg49,%vreg48
1040B		%vreg51<def> = FLW %vreg50<kill>, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg51 GR32Bit:%vreg50
1056B		%vreg52<def> = FULE_S %vreg47<kill>, %vreg51<kill>; GR32Bit:%vreg52 FP32Bit:%vreg47,%vreg51
1072B		BNE <BB#7>, %vreg52<kill>, %zero; GR32Bit:%vreg52
1088B		JAL <BB#6>
	    Successors according to CFG: BB#6(16) BB#7(16)

1104B	BB#6: derived from LLVM BB %startup_starter3.if.then22
	    Predecessors according to CFG: BB#5
1120B		%vreg53<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg53
1136B		%vreg54<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg54
1152B		%vreg55<def> = ADD %vreg54<kill>, %vreg53<kill>; GR32Bit:%vreg55,%vreg54,%vreg53
1168B		%vreg56<def> = FLW %vreg55<kill>, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg56 GR32Bit:%vreg55
1184B		%vreg57<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg57
1200B		FSW %vreg56<kill>, %vreg57<kill>, 0; mem:ST4[%4] FP32Bit:%vreg56 GR32Bit:%vreg57
	    Successors according to CFG: BB#7

1216B	BB#7: derived from LLVM BB %startup_starter3.if.end
	    Predecessors according to CFG: BB#5 BB#6
1232B		%vreg58<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg58
1248B		%vreg59<def> = FLW %vreg58<kill>, 0; mem:LD4[%4] FP32Bit:%vreg59 GR32Bit:%vreg58
1264B		%vreg60<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg60
1280B		%vreg61<def> = ADDI %zero, <ga:@SG_MAX>[TF=3]; GR32Bit:%vreg61
1296B		%vreg62<def> = ADD %vreg61<kill>, %vreg60<kill>; GR32Bit:%vreg62,%vreg61,%vreg60
1312B		%vreg63<def> = FLW %vreg62<kill>, 0; mem:LD4[@SG_MAX] FP32Bit:%vreg63 GR32Bit:%vreg62
1328B		%vreg64<def> = FULE_S %vreg63<kill>, %vreg59<kill>; GR32Bit:%vreg64 FP32Bit:%vreg63,%vreg59
1344B		BNE <BB#12>, %vreg64<kill>, %zero; GR32Bit:%vreg64
1360B		JAL <BB#8>
	    Successors according to CFG: BB#8(16) BB#12(16)

1376B	BB#8: derived from LLVM BB %startup_starter3.if.then25
	    Predecessors according to CFG: BB#7
1392B		%vreg65<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg65
1408B		%vreg66<def> = ADDI %zero, <ga:@SG_MAX>[TF=3]; GR32Bit:%vreg66
1424B		%vreg67<def> = ADD %vreg66<kill>, %vreg65<kill>; GR32Bit:%vreg67,%vreg66,%vreg65
1440B		%vreg68<def> = FLW %vreg67<kill>, 0; mem:LD4[@SG_MAX] FP32Bit:%vreg68 GR32Bit:%vreg67
1456B		%vreg69<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg69
1472B		FSW %vreg68<kill>, %vreg69<kill>, 0; mem:ST4[%4] FP32Bit:%vreg68 GR32Bit:%vreg69
1488B		JAL <BB#12>
	    Successors according to CFG: BB#12

1504B	BB#9: derived from LLVM BB %startup_starter3.if.else28
	    Predecessors according to CFG: BB#3
1520B		%vreg31<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg31
1536B		SW %zero, %vreg31<kill>, 0; mem:ST4[%4] GR32Bit:%vreg31
1552B		%vreg32<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg32
1568B		%vreg33<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg33
1584B		%vreg34<def> = ADD %vreg33<kill>, %vreg32<kill>; GR32Bit:%vreg34,%vreg33,%vreg32
1600B		SW %zero, %vreg34<kill>, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg34
1616B		%vreg35<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg35
1632B		%vreg36<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg36
1648B		%vreg37<def> = ADD %vreg36<kill>, %vreg35<kill>; GR32Bit:%vreg37,%vreg36,%vreg35
1664B		SW %zero, %vreg37<kill>, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg37
1680B		JAL <BB#12>
	    Successors according to CFG: BB#12

1696B	BB#10: derived from LLVM BB %startup_starter3.if.then9
	    Predecessors according to CFG: BB#2
1712B		%vreg70<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg70
1728B		%vreg71<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg71
1744B		%vreg72<def> = ADD %vreg71<kill>, %vreg70<kill>; GR32Bit:%vreg72,%vreg71,%vreg70
1760B		%vreg73<def> = FLW %vreg72<kill>, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg73 GR32Bit:%vreg72
1776B		%vreg74<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg74
1792B		%vreg75<def> = LW %vreg74<kill>, 0; mem:LD4[%2] GR32Bit:%vreg75,%vreg74
1808B		%vreg76<def> = LW %vreg75<kill>, 4; mem:LD4[%47] GR32Bit:%vreg76,%vreg75
1824B		%vreg77<def> = ADDI %vreg76<kill>, -350; GR32Bit:%vreg77,%vreg76
1840B		%vreg78<def> = FCVT_S_W_RDY %vreg77<kill>; FP32Bit:%vreg78 GR32Bit:%vreg77
1856B		%vreg79<def> = FMUL_S_RDY %vreg78<kill>, %vreg73<kill>; FP32Bit:%vreg79,%vreg78,%vreg73
1872B		%vreg80<def> = ADDI %zero, 1140457472; GR32Bit:%vreg80
1888B		%vreg82<def> = COPY %vreg80; FP32Bit:%vreg82 GR32Bit:%vreg80
1904B		%vreg81<def> = FDIV_S_RDY %vreg82<kill>, %vreg79<kill>; FP32Bit:%vreg81,%vreg82,%vreg79
1920B		%vreg83<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg83
1936B		FSW %vreg81<kill>, %vreg83<kill>, 0; mem:ST4[%4] FP32Bit:%vreg81 GR32Bit:%vreg83
1952B		%vreg84<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg84
1968B		%vreg85<def> = FLW %vreg84<kill>, 0; mem:LD4[%3] FP32Bit:%vreg85 GR32Bit:%vreg84
1984B		%vreg86<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg86
2000B		%vreg87<def> = ADDI %zero, <ga:@nh_fin_de_rampe>[TF=3]; GR32Bit:%vreg87
2016B		%vreg88<def> = ADD %vreg87<kill>, %vreg86<kill>; GR32Bit:%vreg88,%vreg87,%vreg86
2032B		FSW %vreg85<kill>, %vreg88<kill>, 0; mem:ST4[@nh_fin_de_rampe] FP32Bit:%vreg85 GR32Bit:%vreg88
2048B		JAL <BB#12>
	    Successors according to CFG: BB#12

2064B	BB#11: derived from LLVM BB %startup_starter3.if.then
	    Predecessors according to CFG: BB#0
2080B		%vreg89<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg89
2096B		%vreg90<def> = ADDI %zero, 1; GR32Bit:%vreg90
2112B		SW %zero, %vreg89<kill>, 0; mem:ST4[%4] GR32Bit:%vreg89
2128B		%vreg91<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg91
2144B		%vreg92<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg92
2160B		%vreg93<def> = ADD %vreg92<kill>, %vreg91<kill>; GR32Bit:%vreg93,%vreg92,%vreg91
2176B		SW %vreg90<kill>, %vreg93<kill>, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg90,%vreg93
2192B		%vreg94<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg94
2208B		%vreg95<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg95
2224B		%vreg96<def> = ADD %vreg95<kill>, %vreg94<kill>; GR32Bit:%vreg96,%vreg95,%vreg94
2240B		SW %zero, %vreg96<kill>, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg96
	    Successors according to CFG: BB#12

2256B	BB#12: derived from LLVM BB %startup_starter3.return
	    Predecessors according to CFG: BB#1 BB#9 BB#4 BB#7 BB#8 BB#10 BB#11
2272B		%vreg97<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg97
2288B		%vreg98<def> = FLW %vreg97<kill>, 0; mem:LD4[%4] FP32Bit:%vreg98 GR32Bit:%vreg97
2304B		%vreg99<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg99
2320B		FSW %vreg98<kill>, %vreg99<kill>, 0; mem:ST4[%1] FP32Bit:%vreg98 GR32Bit:%vreg99

# End machine code for function startup_starter3.

********** Stack Coloring **********
********** Function: startup_starter3
Found 0 markers and 6 slots
Slot structure:
Slot #0 - 4 bytes.
Slot #1 - 4 bytes.
Slot #2 - 4 bytes.
Slot #3 - 4 bytes.
Slot #4 - 4 bytes.
Slot #5 - 4 bytes.
Total Stack size: 24 bytes

Will not try to merge slots.
Removed 0 markers.
******** Pre-regalloc Machine LICM: startup_starter3 ********
******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: startup_starter3
********** PROCESS IMPLICIT DEFS **********
********** Function: startup_starter3
********** REWRITING TWO-ADDR INSTRS **********
********** Function: startup_starter3
# Machine code for function startup_starter3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %startup_starter3.entry
16B		%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
48B		SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
64B		%vreg2<def> = FLW %vreg1<kill>, 0; mem:LD4[%9](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
80B		%vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
96B		FSW %vreg2<kill>, %vreg3<kill>, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
112B		%vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
128B		%vreg5<def> = FLW %vreg4<kill>, 8; mem:LD4[%13] FP32Bit:%vreg5 GR32Bit:%vreg4
144B		%vreg6<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg6
160B		FSW %vreg5<kill>, %vreg6<kill>, 0; mem:ST4[%4] FP32Bit:%vreg5 GR32Bit:%vreg6
176B		%vreg7<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg7
192B		%vreg8<def> = ADDI %zero, 350; GR32Bit:%vreg8
208B		SW %vreg8<kill>, %vreg7<kill>, 0; mem:ST4[%5] GR32Bit:%vreg8,%vreg7
224B		%vreg9<def> = ADDI %t5, <fi#5>; GR32Bit:%vreg9
240B		%vreg10<def> = ADDI %zero, 850; GR32Bit:%vreg10
256B		SW %vreg10<kill>, %vreg9<kill>, 0; mem:ST4[%6] GR32Bit:%vreg10,%vreg9
272B		%vreg11<def> = LW %vreg0<kill>, 0; mem:LD4[%2] GR32Bit:%vreg11,%vreg0
288B		%vreg12<def> = LW %vreg11<kill>, 4; mem:LD4[%16] GR32Bit:%vreg12,%vreg11
304B		BEQ <BB#11>, %vreg12<kill>, %zero; GR32Bit:%vreg12
320B		JAL <BB#1>
	    Successors according to CFG: BB#11(12) BB#1(20)

336B	BB#1: derived from LLVM BB %startup_starter3.if.else
	    Predecessors according to CFG: BB#0
352B		%vreg13<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg13
368B		%vreg14<def> = LW %vreg13<kill>, 0; mem:LD4[%2] GR32Bit:%vreg14,%vreg13
384B		%vreg15<def> = LW %vreg14<kill>, 4; mem:LD4[%20] GR32Bit:%vreg15,%vreg14
400B		%vreg16<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg16
416B		%vreg17<def> = LW %vreg16<kill>, 0; mem:LD4[%5] GR32Bit:%vreg17,%vreg16
432B		BLT <BB#12>, %vreg15<kill>, %vreg17<kill>; GR32Bit:%vreg15,%vreg17
448B		JAL <BB#2>
	    Successors according to CFG: BB#12(16) BB#2(16)

464B	BB#2: derived from LLVM BB %startup_starter3.if.else6
	    Predecessors according to CFG: BB#1
480B		%vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
496B		%vreg19<def> = LW %vreg18<kill>, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
512B		%vreg20<def> = LW %vreg19<kill>, 4; mem:LD4[%25] GR32Bit:%vreg20,%vreg19
528B		%vreg21<def> = ADDI %t5, <fi#5>; GR32Bit:%vreg21
544B		%vreg22<def> = LW %vreg21<kill>, 0; mem:LD4[%6] GR32Bit:%vreg22,%vreg21
560B		BLE <BB#10>, %vreg20<kill>, %vreg22<kill>; GR32Bit:%vreg20,%vreg22
576B		JAL <BB#3>
	    Successors according to CFG: BB#10(16) BB#3(16)

592B	BB#3: derived from LLVM BB %startup_starter3.if.else11
	    Predecessors according to CFG: BB#2
608B		%vreg23<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg23
624B		%vreg24<def> = FLW %vreg23<kill>, 0; mem:LD4[%3] FP32Bit:%vreg24 GR32Bit:%vreg23
640B		%vreg25<def> = LUI <ga:@NH_STARTER_SHUTOFF>[TF=2]; GR32Bit:%vreg25
656B		%vreg26<def> = ADDI %zero, <ga:@NH_STARTER_SHUTOFF>[TF=3]; GR32Bit:%vreg26
672B		%vreg27<def> = ADD %vreg26<kill>, %vreg25<kill>; GR32Bit:%vreg27,%vreg26,%vreg25
688B		%vreg28<def> = LW %vreg27<kill>, 0; mem:LD4[@NH_STARTER_SHUTOFF] GR32Bit:%vreg28,%vreg27
704B		%vreg29<def> = FCVT_S_W_RDY %vreg28<kill>; FP32Bit:%vreg29 GR32Bit:%vreg28
720B		%vreg30<def> = FULE_S %vreg24<kill>, %vreg29<kill>; GR32Bit:%vreg30 FP32Bit:%vreg24,%vreg29
736B		BNE <BB#9>, %vreg30<kill>, %zero; GR32Bit:%vreg30
752B		JAL <BB#4>
	    Successors according to CFG: BB#4(16) BB#9(16)

768B	BB#4: derived from LLVM BB %startup_starter3.if.then15
	    Predecessors according to CFG: BB#3
784B		%vreg38<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg38
800B		%vreg39<def> = FLW %vreg38<kill>, 0; mem:LD4[%3] FP32Bit:%vreg39 GR32Bit:%vreg38
816B		%vreg40<def> = LUI <ga:@SG_MAX_RPM>[TF=2]; GR32Bit:%vreg40
832B		%vreg41<def> = ADDI %zero, <ga:@SG_MAX_RPM>[TF=3]; GR32Bit:%vreg41
848B		%vreg42<def> = ADD %vreg41<kill>, %vreg40<kill>; GR32Bit:%vreg42,%vreg41,%vreg40
864B		%vreg43<def> = LW %vreg42<kill>, 0; mem:LD4[@SG_MAX_RPM] GR32Bit:%vreg43,%vreg42
880B		%vreg44<def> = FCVT_S_W_RDY %vreg43<kill>; FP32Bit:%vreg44 GR32Bit:%vreg43
896B		%vreg45<def> = FULE_S %vreg39<kill>, %vreg44<kill>; GR32Bit:%vreg45 FP32Bit:%vreg39,%vreg44
912B		BNE <BB#12>, %vreg45<kill>, %zero; GR32Bit:%vreg45
928B		JAL <BB#5>
	    Successors according to CFG: BB#5(16) BB#12(16)

944B	BB#5: derived from LLVM BB %startup_starter3.if.then19
	    Predecessors according to CFG: BB#4
960B		%vreg46<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg46
976B		%vreg47<def> = FLW %vreg46<kill>, 0; mem:LD4[%4] FP32Bit:%vreg47 GR32Bit:%vreg46
992B		%vreg48<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg48
1008B		%vreg49<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg49
1024B		%vreg50<def> = ADD %vreg49<kill>, %vreg48<kill>; GR32Bit:%vreg50,%vreg49,%vreg48
1040B		%vreg51<def> = FLW %vreg50<kill>, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg51 GR32Bit:%vreg50
1056B		%vreg52<def> = FULE_S %vreg47<kill>, %vreg51<kill>; GR32Bit:%vreg52 FP32Bit:%vreg47,%vreg51
1072B		BNE <BB#7>, %vreg52<kill>, %zero; GR32Bit:%vreg52
1088B		JAL <BB#6>
	    Successors according to CFG: BB#6(16) BB#7(16)

1104B	BB#6: derived from LLVM BB %startup_starter3.if.then22
	    Predecessors according to CFG: BB#5
1120B		%vreg53<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg53
1136B		%vreg54<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg54
1152B		%vreg55<def> = ADD %vreg54<kill>, %vreg53<kill>; GR32Bit:%vreg55,%vreg54,%vreg53
1168B		%vreg56<def> = FLW %vreg55<kill>, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg56 GR32Bit:%vreg55
1184B		%vreg57<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg57
1200B		FSW %vreg56<kill>, %vreg57<kill>, 0; mem:ST4[%4] FP32Bit:%vreg56 GR32Bit:%vreg57
	    Successors according to CFG: BB#7

1216B	BB#7: derived from LLVM BB %startup_starter3.if.end
	    Predecessors according to CFG: BB#5 BB#6
1232B		%vreg58<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg58
1248B		%vreg59<def> = FLW %vreg58<kill>, 0; mem:LD4[%4] FP32Bit:%vreg59 GR32Bit:%vreg58
1264B		%vreg60<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg60
1280B		%vreg61<def> = ADDI %zero, <ga:@SG_MAX>[TF=3]; GR32Bit:%vreg61
1296B		%vreg62<def> = ADD %vreg61<kill>, %vreg60<kill>; GR32Bit:%vreg62,%vreg61,%vreg60
1312B		%vreg63<def> = FLW %vreg62<kill>, 0; mem:LD4[@SG_MAX] FP32Bit:%vreg63 GR32Bit:%vreg62
1328B		%vreg64<def> = FULE_S %vreg63<kill>, %vreg59<kill>; GR32Bit:%vreg64 FP32Bit:%vreg63,%vreg59
1344B		BNE <BB#12>, %vreg64<kill>, %zero; GR32Bit:%vreg64
1360B		JAL <BB#8>
	    Successors according to CFG: BB#8(16) BB#12(16)

1376B	BB#8: derived from LLVM BB %startup_starter3.if.then25
	    Predecessors according to CFG: BB#7
1392B		%vreg65<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg65
1408B		%vreg66<def> = ADDI %zero, <ga:@SG_MAX>[TF=3]; GR32Bit:%vreg66
1424B		%vreg67<def> = ADD %vreg66<kill>, %vreg65<kill>; GR32Bit:%vreg67,%vreg66,%vreg65
1440B		%vreg68<def> = FLW %vreg67<kill>, 0; mem:LD4[@SG_MAX] FP32Bit:%vreg68 GR32Bit:%vreg67
1456B		%vreg69<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg69
1472B		FSW %vreg68<kill>, %vreg69<kill>, 0; mem:ST4[%4] FP32Bit:%vreg68 GR32Bit:%vreg69
1488B		JAL <BB#12>
	    Successors according to CFG: BB#12

1504B	BB#9: derived from LLVM BB %startup_starter3.if.else28
	    Predecessors according to CFG: BB#3
1520B		%vreg31<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg31
1536B		SW %zero, %vreg31<kill>, 0; mem:ST4[%4] GR32Bit:%vreg31
1552B		%vreg32<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg32
1568B		%vreg33<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg33
1584B		%vreg34<def> = ADD %vreg33<kill>, %vreg32<kill>; GR32Bit:%vreg34,%vreg33,%vreg32
1600B		SW %zero, %vreg34<kill>, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg34
1616B		%vreg35<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg35
1632B		%vreg36<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg36
1648B		%vreg37<def> = ADD %vreg36<kill>, %vreg35<kill>; GR32Bit:%vreg37,%vreg36,%vreg35
1664B		SW %zero, %vreg37<kill>, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg37
1680B		JAL <BB#12>
	    Successors according to CFG: BB#12

1696B	BB#10: derived from LLVM BB %startup_starter3.if.then9
	    Predecessors according to CFG: BB#2
1712B		%vreg70<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg70
1728B		%vreg71<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg71
1744B		%vreg72<def> = ADD %vreg71<kill>, %vreg70<kill>; GR32Bit:%vreg72,%vreg71,%vreg70
1760B		%vreg73<def> = FLW %vreg72<kill>, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg73 GR32Bit:%vreg72
1776B		%vreg74<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg74
1792B		%vreg75<def> = LW %vreg74<kill>, 0; mem:LD4[%2] GR32Bit:%vreg75,%vreg74
1808B		%vreg76<def> = LW %vreg75<kill>, 4; mem:LD4[%47] GR32Bit:%vreg76,%vreg75
1824B		%vreg77<def> = ADDI %vreg76<kill>, -350; GR32Bit:%vreg77,%vreg76
1840B		%vreg78<def> = FCVT_S_W_RDY %vreg77<kill>; FP32Bit:%vreg78 GR32Bit:%vreg77
1856B		%vreg79<def> = FMUL_S_RDY %vreg78<kill>, %vreg73<kill>; FP32Bit:%vreg79,%vreg78,%vreg73
1872B		%vreg80<def> = ADDI %zero, 1140457472; GR32Bit:%vreg80
1888B		%vreg82<def> = COPY %vreg80<kill>; FP32Bit:%vreg82 GR32Bit:%vreg80
1904B		%vreg81<def> = FDIV_S_RDY %vreg82<kill>, %vreg79<kill>; FP32Bit:%vreg81,%vreg82,%vreg79
1920B		%vreg83<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg83
1936B		FSW %vreg81<kill>, %vreg83<kill>, 0; mem:ST4[%4] FP32Bit:%vreg81 GR32Bit:%vreg83
1952B		%vreg84<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg84
1968B		%vreg85<def> = FLW %vreg84<kill>, 0; mem:LD4[%3] FP32Bit:%vreg85 GR32Bit:%vreg84
1984B		%vreg86<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg86
2000B		%vreg87<def> = ADDI %zero, <ga:@nh_fin_de_rampe>[TF=3]; GR32Bit:%vreg87
2016B		%vreg88<def> = ADD %vreg87<kill>, %vreg86<kill>; GR32Bit:%vreg88,%vreg87,%vreg86
2032B		FSW %vreg85<kill>, %vreg88<kill>, 0; mem:ST4[@nh_fin_de_rampe] FP32Bit:%vreg85 GR32Bit:%vreg88
2048B		JAL <BB#12>
	    Successors according to CFG: BB#12

2064B	BB#11: derived from LLVM BB %startup_starter3.if.then
	    Predecessors according to CFG: BB#0
2080B		%vreg89<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg89
2096B		%vreg90<def> = ADDI %zero, 1; GR32Bit:%vreg90
2112B		SW %zero, %vreg89<kill>, 0; mem:ST4[%4] GR32Bit:%vreg89
2128B		%vreg91<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg91
2144B		%vreg92<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg92
2160B		%vreg93<def> = ADD %vreg92<kill>, %vreg91<kill>; GR32Bit:%vreg93,%vreg92,%vreg91
2176B		SW %vreg90<kill>, %vreg93<kill>, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg90,%vreg93
2192B		%vreg94<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg94
2208B		%vreg95<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg95
2224B		%vreg96<def> = ADD %vreg95<kill>, %vreg94<kill>; GR32Bit:%vreg96,%vreg95,%vreg94
2240B		SW %zero, %vreg96<kill>, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg96
	    Successors according to CFG: BB#12

2256B	BB#12: derived from LLVM BB %startup_starter3.return
	    Predecessors according to CFG: BB#1 BB#9 BB#4 BB#7 BB#8 BB#10 BB#11
2272B		%vreg97<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg97
2288B		%vreg98<def> = FLW %vreg97<kill>, 0; mem:LD4[%4] FP32Bit:%vreg98 GR32Bit:%vreg97
2304B		%vreg99<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg99
2320B		FSW %vreg98<kill>, %vreg99<kill>, 0; mem:ST4[%1] FP32Bit:%vreg98 GR32Bit:%vreg99

# End machine code for function startup_starter3.

Computing live-in reg-units in ABI blocks.
Created 0 new intervals.
********** INTERVALS **********
%vreg0 = [16r,272r:0)  0@16r
%vreg1 = [32r,64r:0)  0@32r
%vreg2 = [64r,96r:0)  0@64r
%vreg3 = [80r,96r:0)  0@80r
%vreg4 = [112r,128r:0)  0@112r
%vreg5 = [128r,160r:0)  0@128r
%vreg6 = [144r,160r:0)  0@144r
%vreg7 = [176r,208r:0)  0@176r
%vreg8 = [192r,208r:0)  0@192r
%vreg9 = [224r,256r:0)  0@224r
%vreg10 = [240r,256r:0)  0@240r
%vreg11 = [272r,288r:0)  0@272r
%vreg12 = [288r,304r:0)  0@288r
%vreg13 = [352r,368r:0)  0@352r
%vreg14 = [368r,384r:0)  0@368r
%vreg15 = [384r,432r:0)  0@384r
%vreg16 = [400r,416r:0)  0@400r
%vreg17 = [416r,432r:0)  0@416r
%vreg18 = [480r,496r:0)  0@480r
%vreg19 = [496r,512r:0)  0@496r
%vreg20 = [512r,560r:0)  0@512r
%vreg21 = [528r,544r:0)  0@528r
%vreg22 = [544r,560r:0)  0@544r
%vreg23 = [608r,624r:0)  0@608r
%vreg24 = [624r,720r:0)  0@624r
%vreg25 = [640r,672r:0)  0@640r
%vreg26 = [656r,672r:0)  0@656r
%vreg27 = [672r,688r:0)  0@672r
%vreg28 = [688r,704r:0)  0@688r
%vreg29 = [704r,720r:0)  0@704r
%vreg30 = [720r,736r:0)  0@720r
%vreg31 = [1520r,1536r:0)  0@1520r
%vreg32 = [1552r,1584r:0)  0@1552r
%vreg33 = [1568r,1584r:0)  0@1568r
%vreg34 = [1584r,1600r:0)  0@1584r
%vreg35 = [1616r,1648r:0)  0@1616r
%vreg36 = [1632r,1648r:0)  0@1632r
%vreg37 = [1648r,1664r:0)  0@1648r
%vreg38 = [784r,800r:0)  0@784r
%vreg39 = [800r,896r:0)  0@800r
%vreg40 = [816r,848r:0)  0@816r
%vreg41 = [832r,848r:0)  0@832r
%vreg42 = [848r,864r:0)  0@848r
%vreg43 = [864r,880r:0)  0@864r
%vreg44 = [880r,896r:0)  0@880r
%vreg45 = [896r,912r:0)  0@896r
%vreg46 = [960r,976r:0)  0@960r
%vreg47 = [976r,1056r:0)  0@976r
%vreg48 = [992r,1024r:0)  0@992r
%vreg49 = [1008r,1024r:0)  0@1008r
%vreg50 = [1024r,1040r:0)  0@1024r
%vreg51 = [1040r,1056r:0)  0@1040r
%vreg52 = [1056r,1072r:0)  0@1056r
%vreg53 = [1120r,1152r:0)  0@1120r
%vreg54 = [1136r,1152r:0)  0@1136r
%vreg55 = [1152r,1168r:0)  0@1152r
%vreg56 = [1168r,1200r:0)  0@1168r
%vreg57 = [1184r,1200r:0)  0@1184r
%vreg58 = [1232r,1248r:0)  0@1232r
%vreg59 = [1248r,1328r:0)  0@1248r
%vreg60 = [1264r,1296r:0)  0@1264r
%vreg61 = [1280r,1296r:0)  0@1280r
%vreg62 = [1296r,1312r:0)  0@1296r
%vreg63 = [1312r,1328r:0)  0@1312r
%vreg64 = [1328r,1344r:0)  0@1328r
%vreg65 = [1392r,1424r:0)  0@1392r
%vreg66 = [1408r,1424r:0)  0@1408r
%vreg67 = [1424r,1440r:0)  0@1424r
%vreg68 = [1440r,1472r:0)  0@1440r
%vreg69 = [1456r,1472r:0)  0@1456r
%vreg70 = [1712r,1744r:0)  0@1712r
%vreg71 = [1728r,1744r:0)  0@1728r
%vreg72 = [1744r,1760r:0)  0@1744r
%vreg73 = [1760r,1856r:0)  0@1760r
%vreg74 = [1776r,1792r:0)  0@1776r
%vreg75 = [1792r,1808r:0)  0@1792r
%vreg76 = [1808r,1824r:0)  0@1808r
%vreg77 = [1824r,1840r:0)  0@1824r
%vreg78 = [1840r,1856r:0)  0@1840r
%vreg79 = [1856r,1904r:0)  0@1856r
%vreg80 = [1872r,1888r:0)  0@1872r
%vreg81 = [1904r,1936r:0)  0@1904r
%vreg82 = [1888r,1904r:0)  0@1888r
%vreg83 = [1920r,1936r:0)  0@1920r
%vreg84 = [1952r,1968r:0)  0@1952r
%vreg85 = [1968r,2032r:0)  0@1968r
%vreg86 = [1984r,2016r:0)  0@1984r
%vreg87 = [2000r,2016r:0)  0@2000r
%vreg88 = [2016r,2032r:0)  0@2016r
%vreg89 = [2080r,2112r:0)  0@2080r
%vreg90 = [2096r,2176r:0)  0@2096r
%vreg91 = [2128r,2160r:0)  0@2128r
%vreg92 = [2144r,2160r:0)  0@2144r
%vreg93 = [2160r,2176r:0)  0@2160r
%vreg94 = [2192r,2224r:0)  0@2192r
%vreg95 = [2208r,2224r:0)  0@2208r
%vreg96 = [2224r,2240r:0)  0@2224r
%vreg97 = [2272r,2288r:0)  0@2272r
%vreg98 = [2288r,2320r:0)  0@2288r
%vreg99 = [2304r,2320r:0)  0@2304r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function startup_starter3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %startup_starter3.entry
16B		%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
48B		SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
64B		%vreg2<def> = FLW %vreg1, 0; mem:LD4[%9](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
80B		%vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
96B		FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
112B		%vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
128B		%vreg5<def> = FLW %vreg4, 8; mem:LD4[%13] FP32Bit:%vreg5 GR32Bit:%vreg4
144B		%vreg6<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg6
160B		FSW %vreg5, %vreg6, 0; mem:ST4[%4] FP32Bit:%vreg5 GR32Bit:%vreg6
176B		%vreg7<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg7
192B		%vreg8<def> = ADDI %zero, 350; GR32Bit:%vreg8
208B		SW %vreg8, %vreg7, 0; mem:ST4[%5] GR32Bit:%vreg8,%vreg7
224B		%vreg9<def> = ADDI %t5, <fi#5>; GR32Bit:%vreg9
240B		%vreg10<def> = ADDI %zero, 850; GR32Bit:%vreg10
256B		SW %vreg10, %vreg9, 0; mem:ST4[%6] GR32Bit:%vreg10,%vreg9
272B		%vreg11<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg11,%vreg0
288B		%vreg12<def> = LW %vreg11, 4; mem:LD4[%16] GR32Bit:%vreg12,%vreg11
304B		BEQ <BB#11>, %vreg12, %zero; GR32Bit:%vreg12
320B		JAL <BB#1>
	    Successors according to CFG: BB#11(12) BB#1(20)

336B	BB#1: derived from LLVM BB %startup_starter3.if.else
	    Predecessors according to CFG: BB#0
352B		%vreg13<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg13
368B		%vreg14<def> = LW %vreg13, 0; mem:LD4[%2] GR32Bit:%vreg14,%vreg13
384B		%vreg15<def> = LW %vreg14, 4; mem:LD4[%20] GR32Bit:%vreg15,%vreg14
400B		%vreg16<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg16
416B		%vreg17<def> = LW %vreg16, 0; mem:LD4[%5] GR32Bit:%vreg17,%vreg16
432B		BLT <BB#12>, %vreg15, %vreg17; GR32Bit:%vreg15,%vreg17
448B		JAL <BB#2>
	    Successors according to CFG: BB#12(16) BB#2(16)

464B	BB#2: derived from LLVM BB %startup_starter3.if.else6
	    Predecessors according to CFG: BB#1
480B		%vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
496B		%vreg19<def> = LW %vreg18, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
512B		%vreg20<def> = LW %vreg19, 4; mem:LD4[%25] GR32Bit:%vreg20,%vreg19
528B		%vreg21<def> = ADDI %t5, <fi#5>; GR32Bit:%vreg21
544B		%vreg22<def> = LW %vreg21, 0; mem:LD4[%6] GR32Bit:%vreg22,%vreg21
560B		BLE <BB#10>, %vreg20, %vreg22; GR32Bit:%vreg20,%vreg22
576B		JAL <BB#3>
	    Successors according to CFG: BB#10(16) BB#3(16)

592B	BB#3: derived from LLVM BB %startup_starter3.if.else11
	    Predecessors according to CFG: BB#2
608B		%vreg23<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg23
624B		%vreg24<def> = FLW %vreg23, 0; mem:LD4[%3] FP32Bit:%vreg24 GR32Bit:%vreg23
640B		%vreg25<def> = LUI <ga:@NH_STARTER_SHUTOFF>[TF=2]; GR32Bit:%vreg25
656B		%vreg26<def> = ADDI %zero, <ga:@NH_STARTER_SHUTOFF>[TF=3]; GR32Bit:%vreg26
672B		%vreg27<def> = ADD %vreg26, %vreg25; GR32Bit:%vreg27,%vreg26,%vreg25
688B		%vreg28<def> = LW %vreg27, 0; mem:LD4[@NH_STARTER_SHUTOFF] GR32Bit:%vreg28,%vreg27
704B		%vreg29<def> = FCVT_S_W_RDY %vreg28; FP32Bit:%vreg29 GR32Bit:%vreg28
720B		%vreg30<def> = FULE_S %vreg24, %vreg29; GR32Bit:%vreg30 FP32Bit:%vreg24,%vreg29
736B		BNE <BB#9>, %vreg30, %zero; GR32Bit:%vreg30
752B		JAL <BB#4>
	    Successors according to CFG: BB#4(16) BB#9(16)

768B	BB#4: derived from LLVM BB %startup_starter3.if.then15
	    Predecessors according to CFG: BB#3
784B		%vreg38<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg38
800B		%vreg39<def> = FLW %vreg38, 0; mem:LD4[%3] FP32Bit:%vreg39 GR32Bit:%vreg38
816B		%vreg40<def> = LUI <ga:@SG_MAX_RPM>[TF=2]; GR32Bit:%vreg40
832B		%vreg41<def> = ADDI %zero, <ga:@SG_MAX_RPM>[TF=3]; GR32Bit:%vreg41
848B		%vreg42<def> = ADD %vreg41, %vreg40; GR32Bit:%vreg42,%vreg41,%vreg40
864B		%vreg43<def> = LW %vreg42, 0; mem:LD4[@SG_MAX_RPM] GR32Bit:%vreg43,%vreg42
880B		%vreg44<def> = FCVT_S_W_RDY %vreg43; FP32Bit:%vreg44 GR32Bit:%vreg43
896B		%vreg45<def> = FULE_S %vreg39, %vreg44; GR32Bit:%vreg45 FP32Bit:%vreg39,%vreg44
912B		BNE <BB#12>, %vreg45, %zero; GR32Bit:%vreg45
928B		JAL <BB#5>
	    Successors according to CFG: BB#5(16) BB#12(16)

944B	BB#5: derived from LLVM BB %startup_starter3.if.then19
	    Predecessors according to CFG: BB#4
960B		%vreg46<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg46
976B		%vreg47<def> = FLW %vreg46, 0; mem:LD4[%4] FP32Bit:%vreg47 GR32Bit:%vreg46
992B		%vreg48<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg48
1008B		%vreg49<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg49
1024B		%vreg50<def> = ADD %vreg49, %vreg48; GR32Bit:%vreg50,%vreg49,%vreg48
1040B		%vreg51<def> = FLW %vreg50, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg51 GR32Bit:%vreg50
1056B		%vreg52<def> = FULE_S %vreg47, %vreg51; GR32Bit:%vreg52 FP32Bit:%vreg47,%vreg51
1072B		BNE <BB#7>, %vreg52, %zero; GR32Bit:%vreg52
1088B		JAL <BB#6>
	    Successors according to CFG: BB#6(16) BB#7(16)

1104B	BB#6: derived from LLVM BB %startup_starter3.if.then22
	    Predecessors according to CFG: BB#5
1120B		%vreg53<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg53
1136B		%vreg54<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg54
1152B		%vreg55<def> = ADD %vreg54, %vreg53; GR32Bit:%vreg55,%vreg54,%vreg53
1168B		%vreg56<def> = FLW %vreg55, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg56 GR32Bit:%vreg55
1184B		%vreg57<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg57
1200B		FSW %vreg56, %vreg57, 0; mem:ST4[%4] FP32Bit:%vreg56 GR32Bit:%vreg57
	    Successors according to CFG: BB#7

1216B	BB#7: derived from LLVM BB %startup_starter3.if.end
	    Predecessors according to CFG: BB#5 BB#6
1232B		%vreg58<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg58
1248B		%vreg59<def> = FLW %vreg58, 0; mem:LD4[%4] FP32Bit:%vreg59 GR32Bit:%vreg58
1264B		%vreg60<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg60
1280B		%vreg61<def> = ADDI %zero, <ga:@SG_MAX>[TF=3]; GR32Bit:%vreg61
1296B		%vreg62<def> = ADD %vreg61, %vreg60; GR32Bit:%vreg62,%vreg61,%vreg60
1312B		%vreg63<def> = FLW %vreg62, 0; mem:LD4[@SG_MAX] FP32Bit:%vreg63 GR32Bit:%vreg62
1328B		%vreg64<def> = FULE_S %vreg63, %vreg59; GR32Bit:%vreg64 FP32Bit:%vreg63,%vreg59
1344B		BNE <BB#12>, %vreg64, %zero; GR32Bit:%vreg64
1360B		JAL <BB#8>
	    Successors according to CFG: BB#8(16) BB#12(16)

1376B	BB#8: derived from LLVM BB %startup_starter3.if.then25
	    Predecessors according to CFG: BB#7
1392B		%vreg65<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg65
1408B		%vreg66<def> = ADDI %zero, <ga:@SG_MAX>[TF=3]; GR32Bit:%vreg66
1424B		%vreg67<def> = ADD %vreg66, %vreg65; GR32Bit:%vreg67,%vreg66,%vreg65
1440B		%vreg68<def> = FLW %vreg67, 0; mem:LD4[@SG_MAX] FP32Bit:%vreg68 GR32Bit:%vreg67
1456B		%vreg69<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg69
1472B		FSW %vreg68, %vreg69, 0; mem:ST4[%4] FP32Bit:%vreg68 GR32Bit:%vreg69
1488B		JAL <BB#12>
	    Successors according to CFG: BB#12

1504B	BB#9: derived from LLVM BB %startup_starter3.if.else28
	    Predecessors according to CFG: BB#3
1520B		%vreg31<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg31
1536B		SW %zero, %vreg31, 0; mem:ST4[%4] GR32Bit:%vreg31
1552B		%vreg32<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg32
1568B		%vreg33<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg33
1584B		%vreg34<def> = ADD %vreg33, %vreg32; GR32Bit:%vreg34,%vreg33,%vreg32
1600B		SW %zero, %vreg34, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg34
1616B		%vreg35<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg35
1632B		%vreg36<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg36
1648B		%vreg37<def> = ADD %vreg36, %vreg35; GR32Bit:%vreg37,%vreg36,%vreg35
1664B		SW %zero, %vreg37, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg37
1680B		JAL <BB#12>
	    Successors according to CFG: BB#12

1696B	BB#10: derived from LLVM BB %startup_starter3.if.then9
	    Predecessors according to CFG: BB#2
1712B		%vreg70<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg70
1728B		%vreg71<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg71
1744B		%vreg72<def> = ADD %vreg71, %vreg70; GR32Bit:%vreg72,%vreg71,%vreg70
1760B		%vreg73<def> = FLW %vreg72, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg73 GR32Bit:%vreg72
1776B		%vreg74<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg74
1792B		%vreg75<def> = LW %vreg74, 0; mem:LD4[%2] GR32Bit:%vreg75,%vreg74
1808B		%vreg76<def> = LW %vreg75, 4; mem:LD4[%47] GR32Bit:%vreg76,%vreg75
1824B		%vreg77<def> = ADDI %vreg76, -350; GR32Bit:%vreg77,%vreg76
1840B		%vreg78<def> = FCVT_S_W_RDY %vreg77; FP32Bit:%vreg78 GR32Bit:%vreg77
1856B		%vreg79<def> = FMUL_S_RDY %vreg78, %vreg73; FP32Bit:%vreg79,%vreg78,%vreg73
1872B		%vreg80<def> = ADDI %zero, 1140457472; GR32Bit:%vreg80
1888B		%vreg82<def> = COPY %vreg80; FP32Bit:%vreg82 GR32Bit:%vreg80
1904B		%vreg81<def> = FDIV_S_RDY %vreg82, %vreg79; FP32Bit:%vreg81,%vreg82,%vreg79
1920B		%vreg83<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg83
1936B		FSW %vreg81, %vreg83, 0; mem:ST4[%4] FP32Bit:%vreg81 GR32Bit:%vreg83
1952B		%vreg84<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg84
1968B		%vreg85<def> = FLW %vreg84, 0; mem:LD4[%3] FP32Bit:%vreg85 GR32Bit:%vreg84
1984B		%vreg86<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg86
2000B		%vreg87<def> = ADDI %zero, <ga:@nh_fin_de_rampe>[TF=3]; GR32Bit:%vreg87
2016B		%vreg88<def> = ADD %vreg87, %vreg86; GR32Bit:%vreg88,%vreg87,%vreg86
2032B		FSW %vreg85, %vreg88, 0; mem:ST4[@nh_fin_de_rampe] FP32Bit:%vreg85 GR32Bit:%vreg88
2048B		JAL <BB#12>
	    Successors according to CFG: BB#12

2064B	BB#11: derived from LLVM BB %startup_starter3.if.then
	    Predecessors according to CFG: BB#0
2080B		%vreg89<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg89
2096B		%vreg90<def> = ADDI %zero, 1; GR32Bit:%vreg90
2112B		SW %zero, %vreg89, 0; mem:ST4[%4] GR32Bit:%vreg89
2128B		%vreg91<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg91
2144B		%vreg92<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg92
2160B		%vreg93<def> = ADD %vreg92, %vreg91; GR32Bit:%vreg93,%vreg92,%vreg91
2176B		SW %vreg90, %vreg93, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg90,%vreg93
2192B		%vreg94<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg94
2208B		%vreg95<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg95
2224B		%vreg96<def> = ADD %vreg95, %vreg94; GR32Bit:%vreg96,%vreg95,%vreg94
2240B		SW %zero, %vreg96, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg96
	    Successors according to CFG: BB#12

2256B	BB#12: derived from LLVM BB %startup_starter3.return
	    Predecessors according to CFG: BB#1 BB#9 BB#4 BB#7 BB#8 BB#10 BB#11
2272B		%vreg97<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg97
2288B		%vreg98<def> = FLW %vreg97, 0; mem:LD4[%4] FP32Bit:%vreg98 GR32Bit:%vreg97
2304B		%vreg99<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg99
2320B		FSW %vreg98, %vreg99, 0; mem:ST4[%1] FP32Bit:%vreg98 GR32Bit:%vreg99

# End machine code for function startup_starter3.

********** SIMPLE REGISTER COALESCING **********
********** Function: startup_starter3
********** JOINING INTERVALS ***********
startup_starter3.return:
startup_starter3.if.end:
startup_starter3.if.else:
startup_starter3.if.else6:
startup_starter3.if.else11:
startup_starter3.if.then15:
startup_starter3.if.then19:
startup_starter3.entry:
startup_starter3.if.then22:
startup_starter3.if.then25:
startup_starter3.if.else28:
startup_starter3.if.then9:
startup_starter3.if.then:
1888B	%vreg82<def> = COPY %vreg80; FP32Bit:%vreg82 GR32Bit:%vreg80
	Not coalescable.
Trying to inflate 0 regs.
********** INTERVALS **********
%vreg0 = [16r,272r:0)  0@16r
%vreg1 = [32r,64r:0)  0@32r
%vreg2 = [64r,96r:0)  0@64r
%vreg3 = [80r,96r:0)  0@80r
%vreg4 = [112r,128r:0)  0@112r
%vreg5 = [128r,160r:0)  0@128r
%vreg6 = [144r,160r:0)  0@144r
%vreg7 = [176r,208r:0)  0@176r
%vreg8 = [192r,208r:0)  0@192r
%vreg9 = [224r,256r:0)  0@224r
%vreg10 = [240r,256r:0)  0@240r
%vreg11 = [272r,288r:0)  0@272r
%vreg12 = [288r,304r:0)  0@288r
%vreg13 = [352r,368r:0)  0@352r
%vreg14 = [368r,384r:0)  0@368r
%vreg15 = [384r,432r:0)  0@384r
%vreg16 = [400r,416r:0)  0@400r
%vreg17 = [416r,432r:0)  0@416r
%vreg18 = [480r,496r:0)  0@480r
%vreg19 = [496r,512r:0)  0@496r
%vreg20 = [512r,560r:0)  0@512r
%vreg21 = [528r,544r:0)  0@528r
%vreg22 = [544r,560r:0)  0@544r
%vreg23 = [608r,624r:0)  0@608r
%vreg24 = [624r,720r:0)  0@624r
%vreg25 = [640r,672r:0)  0@640r
%vreg26 = [656r,672r:0)  0@656r
%vreg27 = [672r,688r:0)  0@672r
%vreg28 = [688r,704r:0)  0@688r
%vreg29 = [704r,720r:0)  0@704r
%vreg30 = [720r,736r:0)  0@720r
%vreg31 = [1520r,1536r:0)  0@1520r
%vreg32 = [1552r,1584r:0)  0@1552r
%vreg33 = [1568r,1584r:0)  0@1568r
%vreg34 = [1584r,1600r:0)  0@1584r
%vreg35 = [1616r,1648r:0)  0@1616r
%vreg36 = [1632r,1648r:0)  0@1632r
%vreg37 = [1648r,1664r:0)  0@1648r
%vreg38 = [784r,800r:0)  0@784r
%vreg39 = [800r,896r:0)  0@800r
%vreg40 = [816r,848r:0)  0@816r
%vreg41 = [832r,848r:0)  0@832r
%vreg42 = [848r,864r:0)  0@848r
%vreg43 = [864r,880r:0)  0@864r
%vreg44 = [880r,896r:0)  0@880r
%vreg45 = [896r,912r:0)  0@896r
%vreg46 = [960r,976r:0)  0@960r
%vreg47 = [976r,1056r:0)  0@976r
%vreg48 = [992r,1024r:0)  0@992r
%vreg49 = [1008r,1024r:0)  0@1008r
%vreg50 = [1024r,1040r:0)  0@1024r
%vreg51 = [1040r,1056r:0)  0@1040r
%vreg52 = [1056r,1072r:0)  0@1056r
%vreg53 = [1120r,1152r:0)  0@1120r
%vreg54 = [1136r,1152r:0)  0@1136r
%vreg55 = [1152r,1168r:0)  0@1152r
%vreg56 = [1168r,1200r:0)  0@1168r
%vreg57 = [1184r,1200r:0)  0@1184r
%vreg58 = [1232r,1248r:0)  0@1232r
%vreg59 = [1248r,1328r:0)  0@1248r
%vreg60 = [1264r,1296r:0)  0@1264r
%vreg61 = [1280r,1296r:0)  0@1280r
%vreg62 = [1296r,1312r:0)  0@1296r
%vreg63 = [1312r,1328r:0)  0@1312r
%vreg64 = [1328r,1344r:0)  0@1328r
%vreg65 = [1392r,1424r:0)  0@1392r
%vreg66 = [1408r,1424r:0)  0@1408r
%vreg67 = [1424r,1440r:0)  0@1424r
%vreg68 = [1440r,1472r:0)  0@1440r
%vreg69 = [1456r,1472r:0)  0@1456r
%vreg70 = [1712r,1744r:0)  0@1712r
%vreg71 = [1728r,1744r:0)  0@1728r
%vreg72 = [1744r,1760r:0)  0@1744r
%vreg73 = [1760r,1856r:0)  0@1760r
%vreg74 = [1776r,1792r:0)  0@1776r
%vreg75 = [1792r,1808r:0)  0@1792r
%vreg76 = [1808r,1824r:0)  0@1808r
%vreg77 = [1824r,1840r:0)  0@1824r
%vreg78 = [1840r,1856r:0)  0@1840r
%vreg79 = [1856r,1904r:0)  0@1856r
%vreg80 = [1872r,1888r:0)  0@1872r
%vreg81 = [1904r,1936r:0)  0@1904r
%vreg82 = [1888r,1904r:0)  0@1888r
%vreg83 = [1920r,1936r:0)  0@1920r
%vreg84 = [1952r,1968r:0)  0@1952r
%vreg85 = [1968r,2032r:0)  0@1968r
%vreg86 = [1984r,2016r:0)  0@1984r
%vreg87 = [2000r,2016r:0)  0@2000r
%vreg88 = [2016r,2032r:0)  0@2016r
%vreg89 = [2080r,2112r:0)  0@2080r
%vreg90 = [2096r,2176r:0)  0@2096r
%vreg91 = [2128r,2160r:0)  0@2128r
%vreg92 = [2144r,2160r:0)  0@2144r
%vreg93 = [2160r,2176r:0)  0@2160r
%vreg94 = [2192r,2224r:0)  0@2192r
%vreg95 = [2208r,2224r:0)  0@2208r
%vreg96 = [2224r,2240r:0)  0@2224r
%vreg97 = [2272r,2288r:0)  0@2272r
%vreg98 = [2288r,2320r:0)  0@2288r
%vreg99 = [2304r,2320r:0)  0@2304r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function startup_starter3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %startup_starter3.entry
16B		%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
48B		SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
64B		%vreg2<def> = FLW %vreg1, 0; mem:LD4[%9](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
80B		%vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
96B		FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
112B		%vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
128B		%vreg5<def> = FLW %vreg4, 8; mem:LD4[%13] FP32Bit:%vreg5 GR32Bit:%vreg4
144B		%vreg6<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg6
160B		FSW %vreg5, %vreg6, 0; mem:ST4[%4] FP32Bit:%vreg5 GR32Bit:%vreg6
176B		%vreg7<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg7
192B		%vreg8<def> = ADDI %zero, 350; GR32Bit:%vreg8
208B		SW %vreg8, %vreg7, 0; mem:ST4[%5] GR32Bit:%vreg8,%vreg7
224B		%vreg9<def> = ADDI %t5, <fi#5>; GR32Bit:%vreg9
240B		%vreg10<def> = ADDI %zero, 850; GR32Bit:%vreg10
256B		SW %vreg10, %vreg9, 0; mem:ST4[%6] GR32Bit:%vreg10,%vreg9
272B		%vreg11<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg11,%vreg0
288B		%vreg12<def> = LW %vreg11, 4; mem:LD4[%16] GR32Bit:%vreg12,%vreg11
304B		BEQ <BB#11>, %vreg12, %zero; GR32Bit:%vreg12
320B		JAL <BB#1>
	    Successors according to CFG: BB#11(12) BB#1(20)

336B	BB#1: derived from LLVM BB %startup_starter3.if.else
	    Predecessors according to CFG: BB#0
352B		%vreg13<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg13
368B		%vreg14<def> = LW %vreg13, 0; mem:LD4[%2] GR32Bit:%vreg14,%vreg13
384B		%vreg15<def> = LW %vreg14, 4; mem:LD4[%20] GR32Bit:%vreg15,%vreg14
400B		%vreg16<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg16
416B		%vreg17<def> = LW %vreg16, 0; mem:LD4[%5] GR32Bit:%vreg17,%vreg16
432B		BLT <BB#12>, %vreg15, %vreg17; GR32Bit:%vreg15,%vreg17
448B		JAL <BB#2>
	    Successors according to CFG: BB#12(16) BB#2(16)

464B	BB#2: derived from LLVM BB %startup_starter3.if.else6
	    Predecessors according to CFG: BB#1
480B		%vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
496B		%vreg19<def> = LW %vreg18, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
512B		%vreg20<def> = LW %vreg19, 4; mem:LD4[%25] GR32Bit:%vreg20,%vreg19
528B		%vreg21<def> = ADDI %t5, <fi#5>; GR32Bit:%vreg21
544B		%vreg22<def> = LW %vreg21, 0; mem:LD4[%6] GR32Bit:%vreg22,%vreg21
560B		BLE <BB#10>, %vreg20, %vreg22; GR32Bit:%vreg20,%vreg22
576B		JAL <BB#3>
	    Successors according to CFG: BB#10(16) BB#3(16)

592B	BB#3: derived from LLVM BB %startup_starter3.if.else11
	    Predecessors according to CFG: BB#2
608B		%vreg23<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg23
624B		%vreg24<def> = FLW %vreg23, 0; mem:LD4[%3] FP32Bit:%vreg24 GR32Bit:%vreg23
640B		%vreg25<def> = LUI <ga:@NH_STARTER_SHUTOFF>[TF=2]; GR32Bit:%vreg25
656B		%vreg26<def> = ADDI %zero, <ga:@NH_STARTER_SHUTOFF>[TF=3]; GR32Bit:%vreg26
672B		%vreg27<def> = ADD %vreg26, %vreg25; GR32Bit:%vreg27,%vreg26,%vreg25
688B		%vreg28<def> = LW %vreg27, 0; mem:LD4[@NH_STARTER_SHUTOFF] GR32Bit:%vreg28,%vreg27
704B		%vreg29<def> = FCVT_S_W_RDY %vreg28; FP32Bit:%vreg29 GR32Bit:%vreg28
720B		%vreg30<def> = FULE_S %vreg24, %vreg29; GR32Bit:%vreg30 FP32Bit:%vreg24,%vreg29
736B		BNE <BB#9>, %vreg30, %zero; GR32Bit:%vreg30
752B		JAL <BB#4>
	    Successors according to CFG: BB#4(16) BB#9(16)

768B	BB#4: derived from LLVM BB %startup_starter3.if.then15
	    Predecessors according to CFG: BB#3
784B		%vreg38<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg38
800B		%vreg39<def> = FLW %vreg38, 0; mem:LD4[%3] FP32Bit:%vreg39 GR32Bit:%vreg38
816B		%vreg40<def> = LUI <ga:@SG_MAX_RPM>[TF=2]; GR32Bit:%vreg40
832B		%vreg41<def> = ADDI %zero, <ga:@SG_MAX_RPM>[TF=3]; GR32Bit:%vreg41
848B		%vreg42<def> = ADD %vreg41, %vreg40; GR32Bit:%vreg42,%vreg41,%vreg40
864B		%vreg43<def> = LW %vreg42, 0; mem:LD4[@SG_MAX_RPM] GR32Bit:%vreg43,%vreg42
880B		%vreg44<def> = FCVT_S_W_RDY %vreg43; FP32Bit:%vreg44 GR32Bit:%vreg43
896B		%vreg45<def> = FULE_S %vreg39, %vreg44; GR32Bit:%vreg45 FP32Bit:%vreg39,%vreg44
912B		BNE <BB#12>, %vreg45, %zero; GR32Bit:%vreg45
928B		JAL <BB#5>
	    Successors according to CFG: BB#5(16) BB#12(16)

944B	BB#5: derived from LLVM BB %startup_starter3.if.then19
	    Predecessors according to CFG: BB#4
960B		%vreg46<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg46
976B		%vreg47<def> = FLW %vreg46, 0; mem:LD4[%4] FP32Bit:%vreg47 GR32Bit:%vreg46
992B		%vreg48<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg48
1008B		%vreg49<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg49
1024B		%vreg50<def> = ADD %vreg49, %vreg48; GR32Bit:%vreg50,%vreg49,%vreg48
1040B		%vreg51<def> = FLW %vreg50, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg51 GR32Bit:%vreg50
1056B		%vreg52<def> = FULE_S %vreg47, %vreg51; GR32Bit:%vreg52 FP32Bit:%vreg47,%vreg51
1072B		BNE <BB#7>, %vreg52, %zero; GR32Bit:%vreg52
1088B		JAL <BB#6>
	    Successors according to CFG: BB#6(16) BB#7(16)

1104B	BB#6: derived from LLVM BB %startup_starter3.if.then22
	    Predecessors according to CFG: BB#5
1120B		%vreg53<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg53
1136B		%vreg54<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg54
1152B		%vreg55<def> = ADD %vreg54, %vreg53; GR32Bit:%vreg55,%vreg54,%vreg53
1168B		%vreg56<def> = FLW %vreg55, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg56 GR32Bit:%vreg55
1184B		%vreg57<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg57
1200B		FSW %vreg56, %vreg57, 0; mem:ST4[%4] FP32Bit:%vreg56 GR32Bit:%vreg57
	    Successors according to CFG: BB#7

1216B	BB#7: derived from LLVM BB %startup_starter3.if.end
	    Predecessors according to CFG: BB#5 BB#6
1232B		%vreg58<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg58
1248B		%vreg59<def> = FLW %vreg58, 0; mem:LD4[%4] FP32Bit:%vreg59 GR32Bit:%vreg58
1264B		%vreg60<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg60
1280B		%vreg61<def> = ADDI %zero, <ga:@SG_MAX>[TF=3]; GR32Bit:%vreg61
1296B		%vreg62<def> = ADD %vreg61, %vreg60; GR32Bit:%vreg62,%vreg61,%vreg60
1312B		%vreg63<def> = FLW %vreg62, 0; mem:LD4[@SG_MAX] FP32Bit:%vreg63 GR32Bit:%vreg62
1328B		%vreg64<def> = FULE_S %vreg63, %vreg59; GR32Bit:%vreg64 FP32Bit:%vreg63,%vreg59
1344B		BNE <BB#12>, %vreg64, %zero; GR32Bit:%vreg64
1360B		JAL <BB#8>
	    Successors according to CFG: BB#8(16) BB#12(16)

1376B	BB#8: derived from LLVM BB %startup_starter3.if.then25
	    Predecessors according to CFG: BB#7
1392B		%vreg65<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg65
1408B		%vreg66<def> = ADDI %zero, <ga:@SG_MAX>[TF=3]; GR32Bit:%vreg66
1424B		%vreg67<def> = ADD %vreg66, %vreg65; GR32Bit:%vreg67,%vreg66,%vreg65
1440B		%vreg68<def> = FLW %vreg67, 0; mem:LD4[@SG_MAX] FP32Bit:%vreg68 GR32Bit:%vreg67
1456B		%vreg69<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg69
1472B		FSW %vreg68, %vreg69, 0; mem:ST4[%4] FP32Bit:%vreg68 GR32Bit:%vreg69
1488B		JAL <BB#12>
	    Successors according to CFG: BB#12

1504B	BB#9: derived from LLVM BB %startup_starter3.if.else28
	    Predecessors according to CFG: BB#3
1520B		%vreg31<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg31
1536B		SW %zero, %vreg31, 0; mem:ST4[%4] GR32Bit:%vreg31
1552B		%vreg32<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg32
1568B		%vreg33<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg33
1584B		%vreg34<def> = ADD %vreg33, %vreg32; GR32Bit:%vreg34,%vreg33,%vreg32
1600B		SW %zero, %vreg34, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg34
1616B		%vreg35<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg35
1632B		%vreg36<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg36
1648B		%vreg37<def> = ADD %vreg36, %vreg35; GR32Bit:%vreg37,%vreg36,%vreg35
1664B		SW %zero, %vreg37, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg37
1680B		JAL <BB#12>
	    Successors according to CFG: BB#12

1696B	BB#10: derived from LLVM BB %startup_starter3.if.then9
	    Predecessors according to CFG: BB#2
1712B		%vreg70<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg70
1728B		%vreg71<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg71
1744B		%vreg72<def> = ADD %vreg71, %vreg70; GR32Bit:%vreg72,%vreg71,%vreg70
1760B		%vreg73<def> = FLW %vreg72, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg73 GR32Bit:%vreg72
1776B		%vreg74<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg74
1792B		%vreg75<def> = LW %vreg74, 0; mem:LD4[%2] GR32Bit:%vreg75,%vreg74
1808B		%vreg76<def> = LW %vreg75, 4; mem:LD4[%47] GR32Bit:%vreg76,%vreg75
1824B		%vreg77<def> = ADDI %vreg76, -350; GR32Bit:%vreg77,%vreg76
1840B		%vreg78<def> = FCVT_S_W_RDY %vreg77; FP32Bit:%vreg78 GR32Bit:%vreg77
1856B		%vreg79<def> = FMUL_S_RDY %vreg78, %vreg73; FP32Bit:%vreg79,%vreg78,%vreg73
1872B		%vreg80<def> = ADDI %zero, 1140457472; GR32Bit:%vreg80
1888B		%vreg82<def> = COPY %vreg80; FP32Bit:%vreg82 GR32Bit:%vreg80
1904B		%vreg81<def> = FDIV_S_RDY %vreg82, %vreg79; FP32Bit:%vreg81,%vreg82,%vreg79
1920B		%vreg83<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg83
1936B		FSW %vreg81, %vreg83, 0; mem:ST4[%4] FP32Bit:%vreg81 GR32Bit:%vreg83
1952B		%vreg84<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg84
1968B		%vreg85<def> = FLW %vreg84, 0; mem:LD4[%3] FP32Bit:%vreg85 GR32Bit:%vreg84
1984B		%vreg86<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg86
2000B		%vreg87<def> = ADDI %zero, <ga:@nh_fin_de_rampe>[TF=3]; GR32Bit:%vreg87
2016B		%vreg88<def> = ADD %vreg87, %vreg86; GR32Bit:%vreg88,%vreg87,%vreg86
2032B		FSW %vreg85, %vreg88, 0; mem:ST4[@nh_fin_de_rampe] FP32Bit:%vreg85 GR32Bit:%vreg88
2048B		JAL <BB#12>
	    Successors according to CFG: BB#12

2064B	BB#11: derived from LLVM BB %startup_starter3.if.then
	    Predecessors according to CFG: BB#0
2080B		%vreg89<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg89
2096B		%vreg90<def> = ADDI %zero, 1; GR32Bit:%vreg90
2112B		SW %zero, %vreg89, 0; mem:ST4[%4] GR32Bit:%vreg89
2128B		%vreg91<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg91
2144B		%vreg92<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg92
2160B		%vreg93<def> = ADD %vreg92, %vreg91; GR32Bit:%vreg93,%vreg92,%vreg91
2176B		SW %vreg90, %vreg93, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg90,%vreg93
2192B		%vreg94<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg94
2208B		%vreg95<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg95
2224B		%vreg96<def> = ADD %vreg95, %vreg94; GR32Bit:%vreg96,%vreg95,%vreg94
2240B		SW %zero, %vreg96, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg96
	    Successors according to CFG: BB#12

2256B	BB#12: derived from LLVM BB %startup_starter3.return
	    Predecessors according to CFG: BB#1 BB#9 BB#4 BB#7 BB#8 BB#10 BB#11
2272B		%vreg97<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg97
2288B		%vreg98<def> = FLW %vreg97, 0; mem:LD4[%4] FP32Bit:%vreg98 GR32Bit:%vreg97
2304B		%vreg99<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg99
2320B		FSW %vreg98, %vreg99, 0; mem:ST4[%1] FP32Bit:%vreg98 GR32Bit:%vreg99

# End machine code for function startup_starter3.

Before MISched:
# Machine code for function startup_starter3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %startup_starter3.entry
	%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
	%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
	SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
	%vreg2<def> = FLW %vreg1, 0; mem:LD4[%9](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
	%vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
	FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
	%vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
	%vreg5<def> = FLW %vreg4, 8; mem:LD4[%13] FP32Bit:%vreg5 GR32Bit:%vreg4
	%vreg6<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg6
	FSW %vreg5, %vreg6, 0; mem:ST4[%4] FP32Bit:%vreg5 GR32Bit:%vreg6
	%vreg7<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg7
	%vreg8<def> = ADDI %zero, 350; GR32Bit:%vreg8
	SW %vreg8, %vreg7, 0; mem:ST4[%5] GR32Bit:%vreg8,%vreg7
	%vreg9<def> = ADDI %t5, <fi#5>; GR32Bit:%vreg9
	%vreg10<def> = ADDI %zero, 850; GR32Bit:%vreg10
	SW %vreg10, %vreg9, 0; mem:ST4[%6] GR32Bit:%vreg10,%vreg9
	%vreg11<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg11,%vreg0
	%vreg12<def> = LW %vreg11, 4; mem:LD4[%16] GR32Bit:%vreg12,%vreg11
	BEQ <BB#11>, %vreg12, %zero; GR32Bit:%vreg12
	JAL <BB#1>
    Successors according to CFG: BB#11(12) BB#1(20)

BB#1: derived from LLVM BB %startup_starter3.if.else
    Predecessors according to CFG: BB#0
	%vreg13<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg13
	%vreg14<def> = LW %vreg13, 0; mem:LD4[%2] GR32Bit:%vreg14,%vreg13
	%vreg15<def> = LW %vreg14, 4; mem:LD4[%20] GR32Bit:%vreg15,%vreg14
	%vreg16<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg16
	%vreg17<def> = LW %vreg16, 0; mem:LD4[%5] GR32Bit:%vreg17,%vreg16
	BLT <BB#12>, %vreg15, %vreg17; GR32Bit:%vreg15,%vreg17
	JAL <BB#2>
    Successors according to CFG: BB#12(16) BB#2(16)

BB#2: derived from LLVM BB %startup_starter3.if.else6
    Predecessors according to CFG: BB#1
	%vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
	%vreg19<def> = LW %vreg18, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
	%vreg20<def> = LW %vreg19, 4; mem:LD4[%25] GR32Bit:%vreg20,%vreg19
	%vreg21<def> = ADDI %t5, <fi#5>; GR32Bit:%vreg21
	%vreg22<def> = LW %vreg21, 0; mem:LD4[%6] GR32Bit:%vreg22,%vreg21
	BLE <BB#10>, %vreg20, %vreg22; GR32Bit:%vreg20,%vreg22
	JAL <BB#3>
    Successors according to CFG: BB#10(16) BB#3(16)

BB#3: derived from LLVM BB %startup_starter3.if.else11
    Predecessors according to CFG: BB#2
	%vreg23<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg23
	%vreg24<def> = FLW %vreg23, 0; mem:LD4[%3] FP32Bit:%vreg24 GR32Bit:%vreg23
	%vreg25<def> = LUI <ga:@NH_STARTER_SHUTOFF>[TF=2]; GR32Bit:%vreg25
	%vreg26<def> = ADDI %zero, <ga:@NH_STARTER_SHUTOFF>[TF=3]; GR32Bit:%vreg26
	%vreg27<def> = ADD %vreg26, %vreg25; GR32Bit:%vreg27,%vreg26,%vreg25
	%vreg28<def> = LW %vreg27, 0; mem:LD4[@NH_STARTER_SHUTOFF] GR32Bit:%vreg28,%vreg27
	%vreg29<def> = FCVT_S_W_RDY %vreg28; FP32Bit:%vreg29 GR32Bit:%vreg28
	%vreg30<def> = FULE_S %vreg24, %vreg29; GR32Bit:%vreg30 FP32Bit:%vreg24,%vreg29
	BNE <BB#9>, %vreg30, %zero; GR32Bit:%vreg30
	JAL <BB#4>
    Successors according to CFG: BB#4(16) BB#9(16)

BB#4: derived from LLVM BB %startup_starter3.if.then15
    Predecessors according to CFG: BB#3
	%vreg38<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg38
	%vreg39<def> = FLW %vreg38, 0; mem:LD4[%3] FP32Bit:%vreg39 GR32Bit:%vreg38
	%vreg40<def> = LUI <ga:@SG_MAX_RPM>[TF=2]; GR32Bit:%vreg40
	%vreg41<def> = ADDI %zero, <ga:@SG_MAX_RPM>[TF=3]; GR32Bit:%vreg41
	%vreg42<def> = ADD %vreg41, %vreg40; GR32Bit:%vreg42,%vreg41,%vreg40
	%vreg43<def> = LW %vreg42, 0; mem:LD4[@SG_MAX_RPM] GR32Bit:%vreg43,%vreg42
	%vreg44<def> = FCVT_S_W_RDY %vreg43; FP32Bit:%vreg44 GR32Bit:%vreg43
	%vreg45<def> = FULE_S %vreg39, %vreg44; GR32Bit:%vreg45 FP32Bit:%vreg39,%vreg44
	BNE <BB#12>, %vreg45, %zero; GR32Bit:%vreg45
	JAL <BB#5>
    Successors according to CFG: BB#5(16) BB#12(16)

BB#5: derived from LLVM BB %startup_starter3.if.then19
    Predecessors according to CFG: BB#4
	%vreg46<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg46
	%vreg47<def> = FLW %vreg46, 0; mem:LD4[%4] FP32Bit:%vreg47 GR32Bit:%vreg46
	%vreg48<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg48
	%vreg49<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg49
	%vreg50<def> = ADD %vreg49, %vreg48; GR32Bit:%vreg50,%vreg49,%vreg48
	%vreg51<def> = FLW %vreg50, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg51 GR32Bit:%vreg50
	%vreg52<def> = FULE_S %vreg47, %vreg51; GR32Bit:%vreg52 FP32Bit:%vreg47,%vreg51
	BNE <BB#7>, %vreg52, %zero; GR32Bit:%vreg52
	JAL <BB#6>
    Successors according to CFG: BB#6(16) BB#7(16)

BB#6: derived from LLVM BB %startup_starter3.if.then22
    Predecessors according to CFG: BB#5
	%vreg53<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg53
	%vreg54<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg54
	%vreg55<def> = ADD %vreg54, %vreg53; GR32Bit:%vreg55,%vreg54,%vreg53
	%vreg56<def> = FLW %vreg55, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg56 GR32Bit:%vreg55
	%vreg57<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg57
	FSW %vreg56, %vreg57, 0; mem:ST4[%4] FP32Bit:%vreg56 GR32Bit:%vreg57
    Successors according to CFG: BB#7

BB#7: derived from LLVM BB %startup_starter3.if.end
    Predecessors according to CFG: BB#5 BB#6
	%vreg58<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg58
	%vreg59<def> = FLW %vreg58, 0; mem:LD4[%4] FP32Bit:%vreg59 GR32Bit:%vreg58
	%vreg60<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg60
	%vreg61<def> = ADDI %zero, <ga:@SG_MAX>[TF=3]; GR32Bit:%vreg61
	%vreg62<def> = ADD %vreg61, %vreg60; GR32Bit:%vreg62,%vreg61,%vreg60
	%vreg63<def> = FLW %vreg62, 0; mem:LD4[@SG_MAX] FP32Bit:%vreg63 GR32Bit:%vreg62
	%vreg64<def> = FULE_S %vreg63, %vreg59; GR32Bit:%vreg64 FP32Bit:%vreg63,%vreg59
	BNE <BB#12>, %vreg64, %zero; GR32Bit:%vreg64
	JAL <BB#8>
    Successors according to CFG: BB#8(16) BB#12(16)

BB#8: derived from LLVM BB %startup_starter3.if.then25
    Predecessors according to CFG: BB#7
	%vreg65<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg65
	%vreg66<def> = ADDI %zero, <ga:@SG_MAX>[TF=3]; GR32Bit:%vreg66
	%vreg67<def> = ADD %vreg66, %vreg65; GR32Bit:%vreg67,%vreg66,%vreg65
	%vreg68<def> = FLW %vreg67, 0; mem:LD4[@SG_MAX] FP32Bit:%vreg68 GR32Bit:%vreg67
	%vreg69<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg69
	FSW %vreg68, %vreg69, 0; mem:ST4[%4] FP32Bit:%vreg68 GR32Bit:%vreg69
	JAL <BB#12>
    Successors according to CFG: BB#12

BB#9: derived from LLVM BB %startup_starter3.if.else28
    Predecessors according to CFG: BB#3
	%vreg31<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg31
	SW %zero, %vreg31, 0; mem:ST4[%4] GR32Bit:%vreg31
	%vreg32<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg32
	%vreg33<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg33
	%vreg34<def> = ADD %vreg33, %vreg32; GR32Bit:%vreg34,%vreg33,%vreg32
	SW %zero, %vreg34, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg34
	%vreg35<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg35
	%vreg36<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg36
	%vreg37<def> = ADD %vreg36, %vreg35; GR32Bit:%vreg37,%vreg36,%vreg35
	SW %zero, %vreg37, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg37
	JAL <BB#12>
    Successors according to CFG: BB#12

BB#10: derived from LLVM BB %startup_starter3.if.then9
    Predecessors according to CFG: BB#2
	%vreg70<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg70
	%vreg71<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg71
	%vreg72<def> = ADD %vreg71, %vreg70; GR32Bit:%vreg72,%vreg71,%vreg70
	%vreg73<def> = FLW %vreg72, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg73 GR32Bit:%vreg72
	%vreg74<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg74
	%vreg75<def> = LW %vreg74, 0; mem:LD4[%2] GR32Bit:%vreg75,%vreg74
	%vreg76<def> = LW %vreg75, 4; mem:LD4[%47] GR32Bit:%vreg76,%vreg75
	%vreg77<def> = ADDI %vreg76, -350; GR32Bit:%vreg77,%vreg76
	%vreg78<def> = FCVT_S_W_RDY %vreg77; FP32Bit:%vreg78 GR32Bit:%vreg77
	%vreg79<def> = FMUL_S_RDY %vreg78, %vreg73; FP32Bit:%vreg79,%vreg78,%vreg73
	%vreg80<def> = ADDI %zero, 1140457472; GR32Bit:%vreg80
	%vreg82<def> = COPY %vreg80; FP32Bit:%vreg82 GR32Bit:%vreg80
	%vreg81<def> = FDIV_S_RDY %vreg82, %vreg79; FP32Bit:%vreg81,%vreg82,%vreg79
	%vreg83<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg83
	FSW %vreg81, %vreg83, 0; mem:ST4[%4] FP32Bit:%vreg81 GR32Bit:%vreg83
	%vreg84<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg84
	%vreg85<def> = FLW %vreg84, 0; mem:LD4[%3] FP32Bit:%vreg85 GR32Bit:%vreg84
	%vreg86<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg86
	%vreg87<def> = ADDI %zero, <ga:@nh_fin_de_rampe>[TF=3]; GR32Bit:%vreg87
	%vreg88<def> = ADD %vreg87, %vreg86; GR32Bit:%vreg88,%vreg87,%vreg86
	FSW %vreg85, %vreg88, 0; mem:ST4[@nh_fin_de_rampe] FP32Bit:%vreg85 GR32Bit:%vreg88
	JAL <BB#12>
    Successors according to CFG: BB#12

BB#11: derived from LLVM BB %startup_starter3.if.then
    Predecessors according to CFG: BB#0
	%vreg89<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg89
	%vreg90<def> = ADDI %zero, 1; GR32Bit:%vreg90
	SW %zero, %vreg89, 0; mem:ST4[%4] GR32Bit:%vreg89
	%vreg91<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg91
	%vreg92<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg92
	%vreg93<def> = ADD %vreg92, %vreg91; GR32Bit:%vreg93,%vreg92,%vreg91
	SW %vreg90, %vreg93, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg90,%vreg93
	%vreg94<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg94
	%vreg95<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg95
	%vreg96<def> = ADD %vreg95, %vreg94; GR32Bit:%vreg96,%vreg95,%vreg94
	SW %zero, %vreg96, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg96
    Successors according to CFG: BB#12

BB#12: derived from LLVM BB %startup_starter3.return
    Predecessors according to CFG: BB#1 BB#9 BB#4 BB#7 BB#8 BB#10 BB#11
	%vreg97<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg97
	%vreg98<def> = FLW %vreg97, 0; mem:LD4[%4] FP32Bit:%vreg98 GR32Bit:%vreg97
	%vreg99<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg99
	FSW %vreg98, %vreg99, 0; mem:ST4[%1] FP32Bit:%vreg98 GR32Bit:%vreg99

# End machine code for function startup_starter3.


-------------
Starting new basic block BB#0
********** MI Scheduling **********
startup_starter3:BB#0 startup_starter3.entry
  From: JAL <BB#1>
    To: JAL <BB#1>
 Remaining: 19
Max Pressure: Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 0
Excess PSets: 
0 subtrees:
*** Final schedule for BB#0 ***

Partitioning instructions of the region into multiple CEs

*** Renumbered SlotIndexes 332-348 ***

*** Renumbered SlotIndexes 344-376 ***

*** Renumbered SlotIndexes 356-396 ***

*** Renumbered SlotIndexes 368-424 ***

*** Renumbered SlotIndexes 380-444 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
********** MI Scheduling **********
startup_starter3:BB#0 startup_starter3.entry
  From: %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
    To: BEQ <BB#11>, %vreg12, %zero; GR32Bit:%vreg12
 Remaining: 0
Max Pressure: FP32Bit=1
GR32Bit=3
Live In: 
Live Out: 
FP32BitLimit 32 Actual 1
GR32BitLimit 32 Actual 3
Excess PSets: 
6 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 1
  SU(4) in tree 1
  SU(5) in tree 1
  SU(6) in tree 2
  SU(7) in tree 2
  SU(8) in tree 2
  SU(9) in tree 2
  SU(10) in tree 3
  SU(11) in tree 3
  SU(12) in tree 3
  SU(13) in tree 4
  SU(14) in tree 4
  SU(15) in tree 4
  SU(16) in tree 5
  SU(17) in tree 5
SU(0):   %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 39
  Successors:
   val SU(16): Latency=5 Reg=%vreg0
   val SU(6): Latency=5 Reg=%vreg0
   val SU(2): Latency=5 Reg=%vreg0

SU(1):   %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 38
  Successors:
   val SU(3): Latency=5 Reg=%vreg1
   val SU(2): Latency=4 Reg=%vreg1

SU(2):   SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
  # preds left       : 2
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 13
  Depth              : 5
  Height             : 34
  Predecessors:
   val SU(1): Latency=4 Reg=%vreg1
   val SU(0): Latency=5 Reg=%vreg0
  Successors:
   ch  SU(16): Latency=1
   ch  SU(6): Latency=1
   ch  SU(17): Latency=1
   ch  SU(7): Latency=1
   ch  SU(3): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(3):   %vreg2<def> = FLW %vreg1, 0; mem:LD4[%9](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 14
  Depth              : 6
  Height             : 21
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg1
   ch  SU(2): Latency=1
  Successors:
   val SU(5): Latency=2 Reg=%vreg2
   ch  SU(15): Latency=0
   ch  SU(12): Latency=0
   ch  SU(9): Latency=0
   ch  SU(5): Latency=0

SU(4):   %vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 24
  Successors:
   val SU(5): Latency=5 Reg=%vreg3

SU(5):   FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 13
  Depth              : 8
  Height             : 19
  Predecessors:
   val SU(3): Latency=2 Reg=%vreg2
   val SU(4): Latency=5 Reg=%vreg3
   ch  SU(3): Latency=0
  Successors:
   ch  SU(17): Latency=1
   ch  SU(7): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(6):   %vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 6
  Height             : 33
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg0
   ch  SU(2): Latency=1
  Successors:
   val SU(7): Latency=15 Reg=%vreg4

SU(7):   %vreg5<def> = FLW %vreg4, 8; mem:LD4[%13] FP32Bit:%vreg5 GR32Bit:%vreg4
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 14
  Depth              : 21
  Height             : 18
  Predecessors:
   val SU(6): Latency=15 Reg=%vreg4
   ch  SU(5): Latency=1
   ch  SU(2): Latency=1
  Successors:
   val SU(9): Latency=2 Reg=%vreg5
   ch  SU(15): Latency=0
   ch  SU(12): Latency=0
   ch  SU(9): Latency=0

SU(8):   %vreg6<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg6
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
   val SU(9): Latency=5 Reg=%vreg6

SU(9):   FSW %vreg5, %vreg6, 0; mem:ST4[%4] FP32Bit:%vreg5 GR32Bit:%vreg6
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 23
  Height             : 16
  Predecessors:
   val SU(7): Latency=2 Reg=%vreg5
   val SU(8): Latency=5 Reg=%vreg6
   ch  SU(7): Latency=0
   ch  SU(3): Latency=0
  Successors:
   ch  SU(17): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(10):   %vreg7<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg7
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
   val SU(12): Latency=5 Reg=%vreg7

SU(11):   %vreg8<def> = ADDI %zero, 350; GR32Bit:%vreg8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
   val SU(12): Latency=4 Reg=%vreg8

SU(12):   SW %vreg8, %vreg7, 0; mem:ST4[%5] GR32Bit:%vreg8,%vreg7
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 21
  Height             : 16
  Predecessors:
   val SU(11): Latency=4 Reg=%vreg8
   val SU(10): Latency=5 Reg=%vreg7
   ch  SU(7): Latency=0
   ch  SU(3): Latency=0
  Successors:
   ch  SU(17): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(13):   %vreg9<def> = ADDI %t5, <fi#5>; GR32Bit:%vreg9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
   val SU(15): Latency=5 Reg=%vreg9

SU(14):   %vreg10<def> = ADDI %zero, 850; GR32Bit:%vreg10
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
   val SU(15): Latency=4 Reg=%vreg10

SU(15):   SW %vreg10, %vreg9, 0; mem:ST4[%6] GR32Bit:%vreg10,%vreg9
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 21
  Height             : 16
  Predecessors:
   val SU(14): Latency=4 Reg=%vreg10
   val SU(13): Latency=5 Reg=%vreg9
   ch  SU(7): Latency=0
   ch  SU(3): Latency=0
  Successors:
   ch  SU(17): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(16):   %vreg11<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg11,%vreg0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 6
  Height             : 30
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg0
   ch  SU(2): Latency=1
  Successors:
   val SU(17): Latency=15 Reg=%vreg11

SU(17):   %vreg12<def> = LW %vreg11, 4; mem:LD4[%16] GR32Bit:%vreg12,%vreg11
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 24
  Height             : 15
  Predecessors:
   val SU(16): Latency=15 Reg=%vreg11
   ch  SU(15): Latency=1
   ch  SU(12): Latency=1
   ch  SU(9): Latency=1
   ch  SU(5): Latency=1
   ch  SU(2): Latency=1
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg12

SU(0):   %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 39
  Successors:
   val SU(16): Latency=5 Reg=%vreg0
   val SU(6): Latency=5 Reg=%vreg0
   val SU(2): Latency=5 Reg=%vreg0

SU(1):   %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 38
  Successors:
   val SU(3): Latency=5 Reg=%vreg1
   val SU(2): Latency=4 Reg=%vreg1

SU(2):   SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 13
  Depth              : 5
  Height             : 34
  Predecessors:
   val SU(1): Latency=4 Reg=%vreg1
   val SU(0): Latency=5 Reg=%vreg0
  Successors:
   ch  SU(16): Latency=1
   ch  SU(6): Latency=1
   ch  SU(17): Latency=1
   ch  SU(7): Latency=1
   ch  SU(3): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(3):   %vreg2<def> = FLW %vreg1, 0; mem:LD4[%9](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 14
  Depth              : 6
  Height             : 21
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg1
   ch  SU(2): Latency=1
  Successors:
   val SU(5): Latency=2 Reg=%vreg2
   ch  SU(15): Latency=0
   ch  SU(12): Latency=0
   ch  SU(9): Latency=0
   ch  SU(5): Latency=0

SU(4):   %vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 24
  Successors:
   val SU(5): Latency=5 Reg=%vreg3

SU(5):   FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 8
  Height             : 19
  Predecessors:
   val SU(3): Latency=2 Reg=%vreg2
   val SU(4): Latency=5 Reg=%vreg3
   ch  SU(3): Latency=0
  Successors:
   ch  SU(17): Latency=1
   ch  SU(7): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(6):   %vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 6
  Height             : 33
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg0
   ch  SU(2): Latency=1
  Successors:
   val SU(7): Latency=15 Reg=%vreg4

SU(7):   %vreg5<def> = FLW %vreg4, 8; mem:LD4[%13] FP32Bit:%vreg5 GR32Bit:%vreg4
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 14
  Depth              : 21
  Height             : 18
  Predecessors:
   val SU(6): Latency=15 Reg=%vreg4
   ch  SU(5): Latency=1
   ch  SU(2): Latency=1
  Successors:
   val SU(9): Latency=2 Reg=%vreg5
   ch  SU(15): Latency=0
   ch  SU(12): Latency=0
   ch  SU(9): Latency=0

SU(8):   %vreg6<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg6
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
   val SU(9): Latency=5 Reg=%vreg6

SU(9):   FSW %vreg5, %vreg6, 0; mem:ST4[%4] FP32Bit:%vreg5 GR32Bit:%vreg6
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 23
  Height             : 16
  Predecessors:
   val SU(7): Latency=2 Reg=%vreg5
   val SU(8): Latency=5 Reg=%vreg6
   ch  SU(7): Latency=0
   ch  SU(3): Latency=0
  Successors:
   ch  SU(17): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(10):   %vreg7<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg7
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
   val SU(12): Latency=5 Reg=%vreg7

SU(11):   %vreg8<def> = ADDI %zero, 350; GR32Bit:%vreg8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
   val SU(12): Latency=4 Reg=%vreg8

SU(12):   SW %vreg8, %vreg7, 0; mem:ST4[%5] GR32Bit:%vreg8,%vreg7
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 21
  Height             : 16
  Predecessors:
   val SU(11): Latency=4 Reg=%vreg8
   val SU(10): Latency=5 Reg=%vreg7
   ch  SU(7): Latency=0
   ch  SU(3): Latency=0
  Successors:
   ch  SU(17): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(13):   %vreg9<def> = ADDI %t5, <fi#5>; GR32Bit:%vreg9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
   val SU(15): Latency=5 Reg=%vreg9

SU(14):   %vreg10<def> = ADDI %zero, 850; GR32Bit:%vreg10
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
   val SU(15): Latency=4 Reg=%vreg10

SU(15):   SW %vreg10, %vreg9, 0; mem:ST4[%6] GR32Bit:%vreg10,%vreg9
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 21
  Height             : 16
  Predecessors:
   val SU(14): Latency=4 Reg=%vreg10
   val SU(13): Latency=5 Reg=%vreg9
   ch  SU(7): Latency=0
   ch  SU(3): Latency=0
  Successors:
   ch  SU(17): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(16):   %vreg11<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg11,%vreg0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 6
  Height             : 30
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg0
   ch  SU(2): Latency=1
  Successors:
   val SU(17): Latency=15 Reg=%vreg11

SU(17):   %vreg12<def> = LW %vreg11, 4; mem:LD4[%16] GR32Bit:%vreg12,%vreg11
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 14
  Depth              : 24
  Height             : 15
  Predecessors:
   val SU(16): Latency=15 Reg=%vreg11
   ch  SU(15): Latency=1
   ch  SU(12): Latency=1
   ch  SU(9): Latency=1
   ch  SU(5): Latency=1
   ch  SU(2): Latency=1
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg12

Pick node SU(13)  ILP: 1 / 1 = 1 Tree: 4 @0
Scheduling %vreg9<def> = ADDI %t5, <fi#5>; GR32Bit:%vreg9
handleMove 224B -> 8B: %vreg9<def> = ADDI %t5, <fi#5>; GR32Bit:%vreg9
     %vreg9:	[224r,256r:0)  0@224r
        -->	[8r,256r:0)  0@8r
     t5:	EMPTY
        -->	EMPTY
Pick node SU(14)  ILP: 1 / 1 = 1 Tree: 4 @0
Scheduling %vreg10<def> = ADDI %zero, 850; GR32Bit:%vreg10
handleMove 240B -> 12B: %vreg10<def> = ADDI %zero, 850; GR32Bit:%vreg10
     %vreg10:	[240r,256r:0)  0@240r
        -->	[12r,256r:0)  0@12r
     zero:	[344r,344d:7)[352r,352d:6)[356r,356d:5)[364r,364d:4)[368r,368d:3)[376r,376d:2)[380r,380d:1)[388r,388d:0)  0@388r 1@380r 2@376r 3@368r 4@364r 5@356r 6@352r 7@344r
        -->	[344r,344d:7)[352r,352d:6)[356r,356d:5)[364r,364d:4)[368r,368d:3)[376r,376d:2)[380r,380d:1)[388r,388d:0)  0@388r 1@380r 2@376r 3@368r 4@364r 5@356r 6@352r 7@344r
Pick node SU(8)  ILP: 1 / 1 = 1 Tree: 2 @0
Scheduling %vreg6<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg6

*** Renumbered SlotIndexes 12-28 ***
handleMove 144B -> 20B: %vreg6<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg6
     %vreg6:	[144r,160r:0)  0@144r
        -->	[20r,160r:0)  0@20r
     t5:	EMPTY
        -->	EMPTY
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
Pick node SU(1)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
Pick node SU(2)  ILP: 3 / 6 = 0.5 Tree: 0 @0
Scheduling SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
Pick node SU(6)  ILP: 1 / 7 = 0.142857 Tree: 2 @0
Scheduling %vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
handleMove 112B -> 56B: %vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
     %vreg4:	[112r,128r:0)  0@112r
        -->	[56r,128r:0)  0@56r
     %vreg0:	[28r,272r:0)  0@28r
        -->	[28r,272r:0)  0@28r
Pick node SU(10)  ILP: 1 / 1 = 1 Tree: 3 @0
Scheduling %vreg7<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg7
handleMove 176B -> 60B: %vreg7<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg7
     %vreg7:	[176r,208r:0)  0@176r
        -->	[60r,208r:0)  0@60r
     t5:	EMPTY
        -->	EMPTY
Pick node SU(11)  ILP: 1 / 1 = 1 Tree: 3 @0
Scheduling %vreg8<def> = ADDI %zero, 350; GR32Bit:%vreg8

*** Renumbered SlotIndexes 60-76 ***
handleMove 192B -> 68B: %vreg8<def> = ADDI %zero, 350; GR32Bit:%vreg8
     %vreg8:	[192r,208r:0)  0@192r
        -->	[68r,208r:0)  0@68r
     zero:	[344r,344d:7)[352r,352d:6)[356r,356d:5)[364r,364d:4)[368r,368d:3)[376r,376d:2)[380r,380d:1)[388r,388d:0)  0@388r 1@380r 2@376r 3@368r 4@364r 5@356r 6@352r 7@344r
        -->	[344r,344d:7)[352r,352d:6)[356r,356d:5)[364r,364d:4)[368r,368d:3)[376r,376d:2)[380r,380d:1)[388r,388d:0)  0@388r 1@380r 2@376r 3@368r 4@364r 5@356r 6@352r 7@344r
Pick node SU(4)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
handleMove 80B -> 72B: %vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
     %vreg3:	[80r,96r:0)  0@80r
        -->	[72r,96r:0)  0@72r
     t5:	EMPTY
        -->	EMPTY
Pick node SU(3)  ILP: 1 / 7 = 0.142857 Tree: 1 @0
Scheduling %vreg2<def> = FLW %vreg1, 0; mem:LD4[%9](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
Pick node SU(5)  ILP: 3 / 9 = 0.333333 Tree: 1 @0
Scheduling FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
Pick node SU(7)  ILP: 2 / 22 = 0.0909091 Tree: 2 @0
Scheduling %vreg5<def> = FLW %vreg4, 8; mem:LD4[%13] FP32Bit:%vreg5 GR32Bit:%vreg4
Pick node SU(9)  ILP: 4 / 24 = 0.166667 Tree: 2 @0
Scheduling FSW %vreg5, %vreg6, 0; mem:ST4[%4] FP32Bit:%vreg5 GR32Bit:%vreg6
Pick node SU(12)  ILP: 3 / 22 = 0.136364 Tree: 3 @0
Scheduling SW %vreg8, %vreg7, 0; mem:ST4[%5] GR32Bit:%vreg8,%vreg7
Pick node SU(15)  ILP: 3 / 22 = 0.136364 Tree: 4 @0
Scheduling SW %vreg10, %vreg9, 0; mem:ST4[%6] GR32Bit:%vreg10,%vreg9
Pick node SU(16)  ILP: 1 / 7 = 0.142857 Tree: 5 @0
Scheduling %vreg11<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg11,%vreg0
Pick node SU(17)  ILP: 2 / 25 = 0.08 Tree: 5 @0
Scheduling %vreg12<def> = LW %vreg11, 4; mem:LD4[%16] GR32Bit:%vreg12,%vreg11
*** Final schedule for BB#0 ***
SU(13):   %vreg9<def> = ADDI %t5, <fi#5>; GR32Bit:%vreg9
SU(14):   %vreg10<def> = ADDI %zero, 850; GR32Bit:%vreg10
SU(8):   %vreg6<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg6
SU(0):   %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
SU(1):   %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
SU(2):   SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
SU(6):   %vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
SU(10):   %vreg7<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg7
SU(11):   %vreg8<def> = ADDI %zero, 350; GR32Bit:%vreg8
SU(4):   %vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
SU(3):   %vreg2<def> = FLW %vreg1, 0; mem:LD4[%9](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
SU(5):   FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
SU(7):   %vreg5<def> = FLW %vreg4, 8; mem:LD4[%13] FP32Bit:%vreg5 GR32Bit:%vreg4
SU(9):   FSW %vreg5, %vreg6, 0; mem:ST4[%4] FP32Bit:%vreg5 GR32Bit:%vreg6
SU(12):   SW %vreg8, %vreg7, 0; mem:ST4[%5] GR32Bit:%vreg8,%vreg7
SU(15):   SW %vreg10, %vreg9, 0; mem:ST4[%6] GR32Bit:%vreg10,%vreg9
SU(16):   %vreg11<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg11,%vreg0
SU(17):   %vreg12<def> = LW %vreg11, 4; mem:LD4[%16] GR32Bit:%vreg12,%vreg11


*** Renumbered SlotIndexes 4-124 ***

*** Renumbered SlotIndexes 16-152 ***

*** Renumbered SlotIndexes 28-172 ***

*** Renumbered SlotIndexes 40-200 ***

*** Renumbered SlotIndexes 52-220 ***

*** Renumbered SlotIndexes 64-248 ***

*** Renumbered SlotIndexes 76-268 ***

*** Renumbered SlotIndexes 88-296 ***

*** Renumbered SlotIndexes 100-316 ***

*** Renumbered SlotIndexes 112-520 ***

*** Renumbered SlotIndexes 124-540 ***

*** Renumbered SlotIndexes 136-568 ***

*** Renumbered SlotIndexes 148-588 ***

*** Renumbered SlotIndexes 160-616 ***

*** Renumbered SlotIndexes 172-636 ***

*** Renumbered SlotIndexes 184-664 ***

*** Renumbered SlotIndexes 196-684 ***

*** Renumbered SlotIndexes 208-712 ***

*** Renumbered SlotIndexes 220-732 ***

*** Renumbered SlotIndexes 232-760 ***

*** Renumbered SlotIndexes 244-780 ***

*** Renumbered SlotIndexes 256-808 ***

*** Renumbered SlotIndexes 268-828 ***

*** Renumbered SlotIndexes 280-856 ***

*** Renumbered SlotIndexes 292-876 ***

*** Renumbered SlotIndexes 304-904 ***

*** Renumbered SlotIndexes 316-924 ***

*** Renumbered SlotIndexes 328-952 ***

*** Renumbered SlotIndexes 340-972 ***

*** Renumbered SlotIndexes 352-1000 ***

*** Renumbered SlotIndexes 364-1020 ***

*** Renumbered SlotIndexes 376-1048 ***

*** Renumbered SlotIndexes 388-1068 ***

*** Renumbered SlotIndexes 400-1096 ***
Partitioning instructions of the region into multiple CEs
instr:  %vreg9<def> = ADDI %t5, <fi#5>; GR32Bit:%vreg9
instr:  %vreg10<def> = ADDI %zero, 850; GR32Bit:%vreg10
instr:  %vreg6<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg6
instr:  %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
instr:  %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
instr:  SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
instr:  %vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
instr:  %vreg7<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg7
instr:  %vreg8<def> = ADDI %zero, 350; GR32Bit:%vreg8
instr:  %vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
instr:  %vreg2<def> = FLW %vreg1, 0; mem:LD4[%9](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
instr:  FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
instr:  %vreg5<def> = FLW %vreg4, 8; mem:LD4[%13] FP32Bit:%vreg5 GR32Bit:%vreg4
instr:  FSW %vreg5, %vreg6, 0; mem:ST4[%4] FP32Bit:%vreg5 GR32Bit:%vreg6
instr:  SW %vreg8, %vreg7, 0; mem:ST4[%5] GR32Bit:%vreg8,%vreg7
instr:  SW %vreg10, %vreg9, 0; mem:ST4[%6] GR32Bit:%vreg10,%vreg9
instr:  %vreg11<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg11,%vreg0
instr:  %vreg12<def> = LW %vreg11, 4; mem:LD4[%16] GR32Bit:%vreg12,%vreg11

*** Renumbered SlotIndexes 612-1116 ***

*** Renumbered SlotIndexes 624-1144 ***

*** Renumbered SlotIndexes 636-1164 ***

*** Renumbered SlotIndexes 648-1192 ***

*** Renumbered SlotIndexes 660-1212 ***

*** Renumbered SlotIndexes 672-1240 ***

*** Renumbered SlotIndexes 692-1260 ***

*** Renumbered SlotIndexes 704-1288 ***

*** Renumbered SlotIndexes 716-1308 ***

*** Renumbered SlotIndexes 728-1336 ***

*** Renumbered SlotIndexes 740-1356 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs

renaming register of operand that belongs to ce 1 but was defined in0
%vreg12<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg12<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg12<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg12
renaming register of operand that belongs to ce 2 but was defined in0
%vreg12
renaming register of operand that belongs to ce 3 but was defined in0
%vreg12After Shuffling regions of basic block, state of BB#0:
BB#0: derived from LLVM BB %startup_starter3.entry
	%vreg100<def> = ADD %t5, %zero; GR32Bit:%vreg100
	%vreg102<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg102
	%vreg103<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg103
	%vreg104<def> = SRLI %vreg103, 12; GR32Bit:%vreg104,%vreg103
	%vreg105<def> = ADD %vreg102, %vreg104; GR32Bit:%vreg105,%vreg102,%vreg104
	%vreg106<def> = ADDI %zero, 28; GR32Bit:%vreg106
	%vreg107<def> = SRLI %t5, 22; GR32Bit:%vreg107
	%vreg108<def> = SRLI %t5, 12; GR32Bit:%vreg108
	%vreg109<def> = ANDI %vreg108, 15; GR32Bit:%vreg109,%vreg108
	%vreg110<def> = SRLI %t5, 6; GR32Bit:%vreg110
	%vreg111<def> = ANDI %vreg110, 63; GR32Bit:%vreg111,%vreg110
	%vreg112<def> = ADDI %zero, 832; GR32Bit:%vreg112
	%vreg113<def> = MUL %vreg107, %vreg112; GR32Bit:%vreg113,%vreg107,%vreg112
	%vreg114<def> = ADDI %zero, 52; GR32Bit:%vreg114
	%vreg115<def> = MUL %vreg109, %vreg114; GR32Bit:%vreg115,%vreg109,%vreg114
	%vreg116<def> = ADD %vreg115, %vreg111; GR32Bit:%vreg116,%vreg115,%vreg111
	%vreg117<def> = ADD %vreg116, %vreg113; GR32Bit:%vreg117,%vreg116,%vreg113
	%vreg118<def> = MUL %vreg117, %vreg106; GR32Bit:%vreg118,%vreg117,%vreg106
	%vreg101<def> = ADD %vreg105, %vreg118; GR32Bit:%vreg101,%vreg105,%vreg118
	%vreg9<def> = ADDI %t5, <fi#5>; GR32Bit:%vreg9
	%vreg10<def> = ADDI %zero, 850; GR32Bit:%vreg10
	%vreg6<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg6
	%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
	%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
	SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
	%vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
	%vreg7<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg7
	%vreg8<def> = ADDI %zero, 350; GR32Bit:%vreg8
	%vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
	%vreg2<def> = FLW %vreg1, 0; mem:LD4[%9](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
	FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
	%vreg5<def> = FLW %vreg4, 8; mem:LD4[%13] FP32Bit:%vreg5 GR32Bit:%vreg4
	FSW %vreg5, %vreg6, 0; mem:ST4[%4] FP32Bit:%vreg5 GR32Bit:%vreg6
	SW %vreg8, %vreg7, 0; mem:ST4[%5] GR32Bit:%vreg8,%vreg7
	SW %vreg10, %vreg9, 0; mem:ST4[%6] GR32Bit:%vreg10,%vreg9
	%vreg11<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg11,%vreg0
	%vreg12<def> = LW %vreg11, 4; mem:LD4[%16] GR32Bit:%vreg12,%vreg11
	%vreg176<def> = LUI 1; GR32Bit:%vreg176
	WRITEPM %vreg176, %vreg12, 0; GR32Bit:%vreg176,%vreg12
	%vreg178<def> = LUI 2; GR32Bit:%vreg178
	WRITEPM %vreg178, %vreg12, 0; GR32Bit:%vreg178,%vreg12
	%vreg180<def> = LUI 3; GR32Bit:%vreg180
	WRITEPM %vreg180, %vreg12, 0; GR32Bit:%vreg180,%vreg12
	BEQ <BB#11>, %vreg12, %zero; GR32Bit:%vreg12
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#1>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg119<def> = ADD %t5, %zero; GR32Bit:%vreg119
	%vreg121<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg121
	%vreg122<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg122
	%vreg123<def> = SRLI %vreg122, 12; GR32Bit:%vreg123,%vreg122
	%vreg124<def> = ADD %vreg121, %vreg123; GR32Bit:%vreg124,%vreg121,%vreg123
	%vreg125<def> = ADDI %zero, 28; GR32Bit:%vreg125
	%vreg126<def> = SRLI %t5, 22; GR32Bit:%vreg126
	%vreg127<def> = SRLI %t5, 12; GR32Bit:%vreg127
	%vreg128<def> = ANDI %vreg127, 15; GR32Bit:%vreg128,%vreg127
	%vreg129<def> = SRLI %t5, 6; GR32Bit:%vreg129
	%vreg130<def> = ANDI %vreg129, 63; GR32Bit:%vreg130,%vreg129
	%vreg131<def> = ADDI %zero, 832; GR32Bit:%vreg131
	%vreg132<def> = MUL %vreg126, %vreg131; GR32Bit:%vreg132,%vreg126,%vreg131
	%vreg133<def> = ADDI %zero, 52; GR32Bit:%vreg133
	%vreg134<def> = MUL %vreg128, %vreg133; GR32Bit:%vreg134,%vreg128,%vreg133
	%vreg135<def> = ADD %vreg134, %vreg130; GR32Bit:%vreg135,%vreg134,%vreg130
	%vreg136<def> = ADD %vreg135, %vreg132; GR32Bit:%vreg136,%vreg135,%vreg132
	%vreg137<def> = MUL %vreg136, %vreg125; GR32Bit:%vreg137,%vreg136,%vreg125
	%vreg120<def> = ADD %vreg124, %vreg137; GR32Bit:%vreg120,%vreg124,%vreg137
	%vreg177<def> = LUI 1; GR32Bit:%vreg177
	%vreg182<def> = DREADPM %vreg177, 0; GR32Bit:%vreg182,%vreg177
	BEQ <BB#11>, %vreg182, %zero; GR32Bit:%vreg182
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#1>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg138<def> = ADD %t5, %zero; GR32Bit:%vreg138
	%vreg140<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg140
	%vreg141<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg141
	%vreg142<def> = SRLI %vreg141, 12; GR32Bit:%vreg142,%vreg141
	%vreg143<def> = ADD %vreg140, %vreg142; GR32Bit:%vreg143,%vreg140,%vreg142
	%vreg144<def> = ADDI %zero, 28; GR32Bit:%vreg144
	%vreg145<def> = SRLI %t5, 22; GR32Bit:%vreg145
	%vreg146<def> = SRLI %t5, 12; GR32Bit:%vreg146
	%vreg147<def> = ANDI %vreg146, 15; GR32Bit:%vreg147,%vreg146
	%vreg148<def> = SRLI %t5, 6; GR32Bit:%vreg148
	%vreg149<def> = ANDI %vreg148, 63; GR32Bit:%vreg149,%vreg148
	%vreg150<def> = ADDI %zero, 832; GR32Bit:%vreg150
	%vreg151<def> = MUL %vreg145, %vreg150; GR32Bit:%vreg151,%vreg145,%vreg150
	%vreg152<def> = ADDI %zero, 52; GR32Bit:%vreg152
	%vreg153<def> = MUL %vreg147, %vreg152; GR32Bit:%vreg153,%vreg147,%vreg152
	%vreg154<def> = ADD %vreg153, %vreg149; GR32Bit:%vreg154,%vreg153,%vreg149
	%vreg155<def> = ADD %vreg154, %vreg151; GR32Bit:%vreg155,%vreg154,%vreg151
	%vreg156<def> = MUL %vreg155, %vreg144; GR32Bit:%vreg156,%vreg155,%vreg144
	%vreg139<def> = ADD %vreg143, %vreg156; GR32Bit:%vreg139,%vreg143,%vreg156
	%vreg179<def> = LUI 2; GR32Bit:%vreg179
	%vreg183<def> = DREADPM %vreg179, 0; GR32Bit:%vreg183,%vreg179
	BEQ <BB#11>, %vreg183, %zero; GR32Bit:%vreg183
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#1>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg157<def> = ADD %t5, %zero; GR32Bit:%vreg157
	%vreg159<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg159
	%vreg160<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg160
	%vreg161<def> = SRLI %vreg160, 12; GR32Bit:%vreg161,%vreg160
	%vreg162<def> = ADD %vreg159, %vreg161; GR32Bit:%vreg162,%vreg159,%vreg161
	%vreg163<def> = ADDI %zero, 28; GR32Bit:%vreg163
	%vreg164<def> = SRLI %t5, 22; GR32Bit:%vreg164
	%vreg165<def> = SRLI %t5, 12; GR32Bit:%vreg165
	%vreg166<def> = ANDI %vreg165, 15; GR32Bit:%vreg166,%vreg165
	%vreg167<def> = SRLI %t5, 6; GR32Bit:%vreg167
	%vreg168<def> = ANDI %vreg167, 63; GR32Bit:%vreg168,%vreg167
	%vreg169<def> = ADDI %zero, 832; GR32Bit:%vreg169
	%vreg170<def> = MUL %vreg164, %vreg169; GR32Bit:%vreg170,%vreg164,%vreg169
	%vreg171<def> = ADDI %zero, 52; GR32Bit:%vreg171
	%vreg172<def> = MUL %vreg166, %vreg171; GR32Bit:%vreg172,%vreg166,%vreg171
	%vreg173<def> = ADD %vreg172, %vreg168; GR32Bit:%vreg173,%vreg172,%vreg168
	%vreg174<def> = ADD %vreg173, %vreg170; GR32Bit:%vreg174,%vreg173,%vreg170
	%vreg175<def> = MUL %vreg174, %vreg163; GR32Bit:%vreg175,%vreg174,%vreg163
	%vreg158<def> = ADD %vreg162, %vreg175; GR32Bit:%vreg158,%vreg162,%vreg175
	%vreg181<def> = LUI 3; GR32Bit:%vreg181
	%vreg184<def> = DREADPM %vreg181, 0; GR32Bit:%vreg184,%vreg181
	BEQ <BB#11>, %vreg184, %zero; GR32Bit:%vreg184
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#1>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#11(12) BB#1(20)

*** Renumbered SlotIndexes 316-1548 ***

*** Renumbered SlotIndexes 304-1592 ***

*** Renumbered SlotIndexes 304-1624 ***

*** Renumbered SlotIndexes 304-1656 ***

*** Renumbered SlotIndexes 304-1688 ***

*** Renumbered SlotIndexes 216-1768 ***

*** Renumbered SlotIndexes 204-1804 ***

*** Renumbered SlotIndexes 204-1836 ***

*** Renumbered SlotIndexes 204-1868 ***

*** Renumbered SlotIndexes 204-1900 ***

*** Renumbered SlotIndexes 112-2008 ***

*** Renumbered SlotIndexes 100-2044 ***

*** Renumbered SlotIndexes 100-2076 ***

*** Renumbered SlotIndexes 100-2108 ***

*** Renumbered SlotIndexes 100-2140 ***

*** Renumbered SlotIndexes 100-2172 ***

*** Renumbered SlotIndexes 100-2204 ***

*** Renumbered SlotIndexes 100-2236 ***

*** Renumbered SlotIndexes 100-2268 ***

*** Renumbered SlotIndexes 100-2300 ***

*** Renumbered SlotIndexes 100-2332 ***

*** Renumbered SlotIndexes 100-2356 ***

*** Renumbered SlotIndexes 100-2372 ***

*** Renumbered SlotIndexes 100-2388 ***

*** Renumbered SlotIndexes 100-2404 ***

*** Renumbered SlotIndexes 100-2420 ***

*** Renumbered SlotIndexes 12-2460 ***
Creating pHyperOp bundles for CEs for bb0
  %vreg119<def> = ADD %t5, %zero; GR32Bit:%vreg119
starting at   %vreg100<def> = ADD %t5, %zero; GR32Bit:%vreg100
  %vreg138<def> = ADD %t5, %zero; GR32Bit:%vreg138
starting at   %vreg119<def> = ADD %t5, %zero; GR32Bit:%vreg119
  %vreg157<def> = ADD %t5, %zero; GR32Bit:%vreg157
starting at   %vreg138<def> = ADD %t5, %zero; GR32Bit:%vreg138
starting at   %vreg157<def> = ADD %t5, %zero; GR32Bit:%vreg157
After bundling, state of BB0:BB#0: derived from LLVM BB %startup_starter3.entry
	%vreg100<def> = ADD %t5, %zero; GR32Bit:%vreg100
	  * %vreg102<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg102
	  * %vreg103<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg103
	  * %vreg104<def> = SRLI %vreg103, 12; GR32Bit:%vreg104,%vreg103
	  * %vreg105<def> = ADD %vreg102, %vreg104; GR32Bit:%vreg105,%vreg102,%vreg104
	  * %vreg106<def> = ADDI %zero, 28; GR32Bit:%vreg106
	  * %vreg107<def> = SRLI %t5, 22; GR32Bit:%vreg107
	  * %vreg108<def> = SRLI %t5, 12; GR32Bit:%vreg108
	  * %vreg109<def> = ANDI %vreg108, 15; GR32Bit:%vreg109,%vreg108
	  * %vreg110<def> = SRLI %t5, 6; GR32Bit:%vreg110
	  * %vreg111<def> = ANDI %vreg110, 63; GR32Bit:%vreg111,%vreg110
	  * %vreg112<def> = ADDI %zero, 832; GR32Bit:%vreg112
	  * %vreg113<def> = MUL %vreg107, %vreg112; GR32Bit:%vreg113,%vreg107,%vreg112
	  * %vreg114<def> = ADDI %zero, 52; GR32Bit:%vreg114
	  * %vreg115<def> = MUL %vreg109, %vreg114; GR32Bit:%vreg115,%vreg109,%vreg114
	  * %vreg116<def> = ADD %vreg115, %vreg111; GR32Bit:%vreg116,%vreg115,%vreg111
	  * %vreg117<def> = ADD %vreg116, %vreg113; GR32Bit:%vreg117,%vreg116,%vreg113
	  * %vreg118<def> = MUL %vreg117, %vreg106; GR32Bit:%vreg118,%vreg117,%vreg106
	  * %vreg101<def> = ADD %vreg105, %vreg118; GR32Bit:%vreg101,%vreg105,%vreg118
	  * %vreg9<def> = ADDI %t5, <fi#5>; GR32Bit:%vreg9
	  * %vreg10<def> = ADDI %zero, 850; GR32Bit:%vreg10
	  * %vreg6<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg6
	  * %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
	  * %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
	  * SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
	  * %vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
	  * %vreg7<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg7
	  * %vreg8<def> = ADDI %zero, 350; GR32Bit:%vreg8
	  * %vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
	  * %vreg2<def> = FLW %vreg1, 0; mem:LD4[%9](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
	  * FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
	  * %vreg5<def> = FLW %vreg4, 8; mem:LD4[%13] FP32Bit:%vreg5 GR32Bit:%vreg4
	  * FSW %vreg5, %vreg6, 0; mem:ST4[%4] FP32Bit:%vreg5 GR32Bit:%vreg6
	  * SW %vreg8, %vreg7, 0; mem:ST4[%5] GR32Bit:%vreg8,%vreg7
	  * SW %vreg10, %vreg9, 0; mem:ST4[%6] GR32Bit:%vreg10,%vreg9
	  * %vreg11<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg11,%vreg0
	  * %vreg12<def> = LW %vreg11, 4; mem:LD4[%16] GR32Bit:%vreg12,%vreg11
	  * %vreg176<def> = LUI 1; GR32Bit:%vreg176
	  * WRITEPM %vreg176, %vreg12, 0; GR32Bit:%vreg176,%vreg12
	  * %vreg178<def> = LUI 2; GR32Bit:%vreg178
	  * WRITEPM %vreg178, %vreg12, 0; GR32Bit:%vreg178,%vreg12
	  * %vreg180<def> = LUI 3; GR32Bit:%vreg180
	  * WRITEPM %vreg180, %vreg12, 0; GR32Bit:%vreg180,%vreg12
	  * BEQ <BB#11>, %vreg12, %zero; GR32Bit:%vreg12
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg119<def> = ADD %t5, %zero; GR32Bit:%vreg119
	  * %vreg121<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg121
	  * %vreg122<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg122
	  * %vreg123<def> = SRLI %vreg122, 12; GR32Bit:%vreg123,%vreg122
	  * %vreg124<def> = ADD %vreg121, %vreg123; GR32Bit:%vreg124,%vreg121,%vreg123
	  * %vreg125<def> = ADDI %zero, 28; GR32Bit:%vreg125
	  * %vreg126<def> = SRLI %t5, 22; GR32Bit:%vreg126
	  * %vreg127<def> = SRLI %t5, 12; GR32Bit:%vreg127
	  * %vreg128<def> = ANDI %vreg127, 15; GR32Bit:%vreg128,%vreg127
	  * %vreg129<def> = SRLI %t5, 6; GR32Bit:%vreg129
	  * %vreg130<def> = ANDI %vreg129, 63; GR32Bit:%vreg130,%vreg129
	  * %vreg131<def> = ADDI %zero, 832; GR32Bit:%vreg131
	  * %vreg132<def> = MUL %vreg126, %vreg131; GR32Bit:%vreg132,%vreg126,%vreg131
	  * %vreg133<def> = ADDI %zero, 52; GR32Bit:%vreg133
	  * %vreg134<def> = MUL %vreg128, %vreg133; GR32Bit:%vreg134,%vreg128,%vreg133
	  * %vreg135<def> = ADD %vreg134, %vreg130; GR32Bit:%vreg135,%vreg134,%vreg130
	  * %vreg136<def> = ADD %vreg135, %vreg132; GR32Bit:%vreg136,%vreg135,%vreg132
	  * %vreg137<def> = MUL %vreg136, %vreg125; GR32Bit:%vreg137,%vreg136,%vreg125
	  * %vreg120<def> = ADD %vreg124, %vreg137; GR32Bit:%vreg120,%vreg124,%vreg137
	  * %vreg177<def> = LUI 1; GR32Bit:%vreg177
	  * %vreg182<def> = DREADPM %vreg177, 0; GR32Bit:%vreg182,%vreg177
	  * BEQ <BB#11>, %vreg182, %zero; GR32Bit:%vreg182
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg138<def> = ADD %t5, %zero; GR32Bit:%vreg138
	  * %vreg140<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg140
	  * %vreg141<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg141
	  * %vreg142<def> = SRLI %vreg141, 12; GR32Bit:%vreg142,%vreg141
	  * %vreg143<def> = ADD %vreg140, %vreg142; GR32Bit:%vreg143,%vreg140,%vreg142
	  * %vreg144<def> = ADDI %zero, 28; GR32Bit:%vreg144
	  * %vreg145<def> = SRLI %t5, 22; GR32Bit:%vreg145
	  * %vreg146<def> = SRLI %t5, 12; GR32Bit:%vreg146
	  * %vreg147<def> = ANDI %vreg146, 15; GR32Bit:%vreg147,%vreg146
	  * %vreg148<def> = SRLI %t5, 6; GR32Bit:%vreg148
	  * %vreg149<def> = ANDI %vreg148, 63; GR32Bit:%vreg149,%vreg148
	  * %vreg150<def> = ADDI %zero, 832; GR32Bit:%vreg150
	  * %vreg151<def> = MUL %vreg145, %vreg150; GR32Bit:%vreg151,%vreg145,%vreg150
	  * %vreg152<def> = ADDI %zero, 52; GR32Bit:%vreg152
	  * %vreg153<def> = MUL %vreg147, %vreg152; GR32Bit:%vreg153,%vreg147,%vreg152
	  * %vreg154<def> = ADD %vreg153, %vreg149; GR32Bit:%vreg154,%vreg153,%vreg149
	  * %vreg155<def> = ADD %vreg154, %vreg151; GR32Bit:%vreg155,%vreg154,%vreg151
	  * %vreg156<def> = MUL %vreg155, %vreg144; GR32Bit:%vreg156,%vreg155,%vreg144
	  * %vreg139<def> = ADD %vreg143, %vreg156; GR32Bit:%vreg139,%vreg143,%vreg156
	  * %vreg179<def> = LUI 2; GR32Bit:%vreg179
	  * %vreg183<def> = DREADPM %vreg179, 0; GR32Bit:%vreg183,%vreg179
	  * BEQ <BB#11>, %vreg183, %zero; GR32Bit:%vreg183
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg157<def> = ADD %t5, %zero; GR32Bit:%vreg157
	  * %vreg159<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg159
	  * %vreg160<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg160
	  * %vreg161<def> = SRLI %vreg160, 12; GR32Bit:%vreg161,%vreg160
	  * %vreg162<def> = ADD %vreg159, %vreg161; GR32Bit:%vreg162,%vreg159,%vreg161
	  * %vreg163<def> = ADDI %zero, 28; GR32Bit:%vreg163
	  * %vreg164<def> = SRLI %t5, 22; GR32Bit:%vreg164
	  * %vreg165<def> = SRLI %t5, 12; GR32Bit:%vreg165
	  * %vreg166<def> = ANDI %vreg165, 15; GR32Bit:%vreg166,%vreg165
	  * %vreg167<def> = SRLI %t5, 6; GR32Bit:%vreg167
	  * %vreg168<def> = ANDI %vreg167, 63; GR32Bit:%vreg168,%vreg167
	  * %vreg169<def> = ADDI %zero, 832; GR32Bit:%vreg169
	  * %vreg170<def> = MUL %vreg164, %vreg169; GR32Bit:%vreg170,%vreg164,%vreg169
	  * %vreg171<def> = ADDI %zero, 52; GR32Bit:%vreg171
	  * %vreg172<def> = MUL %vreg166, %vreg171; GR32Bit:%vreg172,%vreg166,%vreg171
	  * %vreg173<def> = ADD %vreg172, %vreg168; GR32Bit:%vreg173,%vreg172,%vreg168
	  * %vreg174<def> = ADD %vreg173, %vreg170; GR32Bit:%vreg174,%vreg173,%vreg170
	  * %vreg175<def> = MUL %vreg174, %vreg163; GR32Bit:%vreg175,%vreg174,%vreg163
	  * %vreg158<def> = ADD %vreg162, %vreg175; GR32Bit:%vreg158,%vreg162,%vreg175
	  * %vreg181<def> = LUI 3; GR32Bit:%vreg181
	  * %vreg184<def> = DREADPM %vreg181, 0; GR32Bit:%vreg184,%vreg181
	  * BEQ <BB#11>, %vreg184, %zero; GR32Bit:%vreg184
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#11(12) BB#1(20)

-------------
Starting new basic block BB#1
********** MI Scheduling **********
startup_starter3:BB#1 startup_starter3.if.else
  From: JAL <BB#2>
    To: JAL <BB#2>
 Remaining: 6
Max Pressure: Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 0
Excess PSets: 
0 subtrees:
*** Final schedule for BB#1 ***

Partitioning instructions of the region into multiple CEs

*** Renumbered SlotIndexes 1520-2472 ***

*** Renumbered SlotIndexes 1532-2484 ***

*** Renumbered SlotIndexes 1544-2496 ***

*** Renumbered SlotIndexes 1556-2508 ***

*** Renumbered SlotIndexes 1568-2520 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
********** MI Scheduling **********
startup_starter3:BB#1 startup_starter3.if.else
  From: %vreg13<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg13
    To: BLT <BB#12>, %vreg15, %vreg17; GR32Bit:%vreg15,%vreg17
 Remaining: 0
Max Pressure: GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 2
Excess PSets: 
2 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 1
  SU(4) in tree 1
SU(0):   %vreg13<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
   val SU(1): Latency=5 Reg=%vreg13

SU(1):   %vreg14<def> = LW %vreg13, 0; mem:LD4[%2] GR32Bit:%vreg14,%vreg13
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 30
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg13
  Successors:
   val SU(2): Latency=15 Reg=%vreg14

SU(2):   %vreg15<def> = LW %vreg14, 4; mem:LD4[%20] GR32Bit:%vreg15,%vreg14
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 20
  Height             : 15
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg14
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg15

SU(3):   %vreg16<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
   val SU(4): Latency=5 Reg=%vreg16

SU(4):   %vreg17<def> = LW %vreg16, 0; mem:LD4[%5] GR32Bit:%vreg17,%vreg16
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 15
  Predecessors:
   val SU(3): Latency=5 Reg=%vreg16
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg17

SU(0):   %vreg13<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
   val SU(1): Latency=5 Reg=%vreg13

SU(1):   %vreg14<def> = LW %vreg13, 0; mem:LD4[%2] GR32Bit:%vreg14,%vreg13
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 30
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg13
  Successors:
   val SU(2): Latency=15 Reg=%vreg14

SU(2):   %vreg15<def> = LW %vreg14, 4; mem:LD4[%20] GR32Bit:%vreg15,%vreg14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 14
  Depth              : 20
  Height             : 15
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg14
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg15

SU(3):   %vreg16<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
   val SU(4): Latency=5 Reg=%vreg16

SU(4):   %vreg17<def> = LW %vreg16, 0; mem:LD4[%5] GR32Bit:%vreg17,%vreg16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 15
  Predecessors:
   val SU(3): Latency=5 Reg=%vreg16
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg17

Pick node SU(3)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg16<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg16
handleMove 1492B -> 1464B: %vreg16<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg16
     %vreg16:	[1492r,1500r:0)  0@1492r
        -->	[1464r,1500r:0)  0@1464r
     t5:	EMPTY
        -->	EMPTY
Pick node SU(4)  ILP: 2 / 6 = 0.333333 Tree: 1 @0
Scheduling %vreg17<def> = LW %vreg16, 0; mem:LD4[%5] GR32Bit:%vreg17,%vreg16

*** Renumbered SlotIndexes 1464-2560 ***
handleMove 1512B -> 1472B: %vreg17<def> = LW %vreg16, 0; mem:LD4[%5] GR32Bit:%vreg17,%vreg16
     %vreg17:	[1512r,1520r:0)  0@1512r
        -->	[1472r,1520r:0)  0@1472r
     %vreg16:	[1464r,1512r:0)  0@1464r
        -->	[1464r,1472r:0)  0@1464r
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg13<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg13
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg14<def> = LW %vreg13, 0; mem:LD4[%2] GR32Bit:%vreg14,%vreg13
Pick node SU(2)  ILP: 3 / 21 = 0.142857 Tree: 0 @0
Scheduling %vreg15<def> = LW %vreg14, 4; mem:LD4[%20] GR32Bit:%vreg15,%vreg14
*** Final schedule for BB#1 ***
SU(3):   %vreg16<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg16
SU(4):   %vreg17<def> = LW %vreg16, 0; mem:LD4[%5] GR32Bit:%vreg17,%vreg16
SU(0):   %vreg13<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg13
SU(1):   %vreg14<def> = LW %vreg13, 0; mem:LD4[%2] GR32Bit:%vreg14,%vreg13
SU(2):   %vreg15<def> = LW %vreg14, 4; mem:LD4[%20] GR32Bit:%vreg15,%vreg14

Partitioning instructions of the region into multiple CEs
instr:  %vreg16<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg16
instr:  %vreg17<def> = LW %vreg16, 0; mem:LD4[%5] GR32Bit:%vreg17,%vreg16
instr:  %vreg13<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg13
instr:  %vreg14<def> = LW %vreg13, 0; mem:LD4[%2] GR32Bit:%vreg14,%vreg13
instr:  %vreg15<def> = LW %vreg14, 4; mem:LD4[%20] GR32Bit:%vreg15,%vreg14

*** Renumbered SlotIndexes 1500-2572 ***

*** Renumbered SlotIndexes 1512-2584 ***

*** Renumbered SlotIndexes 1524-2596 ***

*** Renumbered SlotIndexes 1536-2608 ***

*** Renumbered SlotIndexes 1548-2620 ***

*** Renumbered SlotIndexes 1560-2632 ***

*** Renumbered SlotIndexes 1572-2644 ***

*** Renumbered SlotIndexes 1584-2656 ***

*** Renumbered SlotIndexes 1596-2668 ***

*** Renumbered SlotIndexes 1632-2680 ***

*** Renumbered SlotIndexes 1644-2692 ***

*** Renumbered SlotIndexes 1656-2704 ***

*** Renumbered SlotIndexes 1668-2716 ***

*** Renumbered SlotIndexes 1680-2728 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs

renaming register of operand that belongs to ce 1 but was defined in0
%vreg15<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg15<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg15<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg17<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg17<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg17<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg15
renaming register of operand that belongs to ce 1 but was defined in0
%vreg17
renaming register of operand that belongs to ce 2 but was defined in0
%vreg15
renaming register of operand that belongs to ce 2 but was defined in0
%vreg17
renaming register of operand that belongs to ce 3 but was defined in0
%vreg15
renaming register of operand that belongs to ce 3 but was defined in0
%vreg17After Shuffling regions of basic block, state of BB#1:
BB#1: derived from LLVM BB %startup_starter3.if.else
    Predecessors according to CFG: BB#0
	%vreg16<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg16
	%vreg17<def> = LW %vreg16, 0; mem:LD4[%5] GR32Bit:%vreg17,%vreg16
	%vreg13<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg13
	%vreg14<def> = LW %vreg13, 0; mem:LD4[%2] GR32Bit:%vreg14,%vreg13
	%vreg15<def> = LW %vreg14, 4; mem:LD4[%20] GR32Bit:%vreg15,%vreg14
	%vreg185<def> = LUI 1; GR32Bit:%vreg185
	WRITEPM %vreg185, %vreg15, 0; GR32Bit:%vreg185,%vreg15
	%vreg187<def> = LUI 2; GR32Bit:%vreg187
	WRITEPM %vreg187, %vreg15, 0; GR32Bit:%vreg187,%vreg15
	%vreg189<def> = LUI 3; GR32Bit:%vreg189
	WRITEPM %vreg189, %vreg15, 0; GR32Bit:%vreg189,%vreg15
	WRITEPM %vreg185, %vreg17, 4; GR32Bit:%vreg185,%vreg17
	WRITEPM %vreg187, %vreg17, 4; GR32Bit:%vreg187,%vreg17
	WRITEPM %vreg189, %vreg17, 4; GR32Bit:%vreg189,%vreg17
	BLT <BB#12>, %vreg15, %vreg17; GR32Bit:%vreg15,%vreg17
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#2>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg186<def> = LUI 1; GR32Bit:%vreg186
	%vreg191<def> = DREADPM %vreg186, 0; GR32Bit:%vreg191,%vreg186
	%vreg194<def> = DREADPM %vreg186, 4; GR32Bit:%vreg194,%vreg186
	BLT <BB#12>, %vreg191, %vreg194; GR32Bit:%vreg191,%vreg194
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#2>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg188<def> = LUI 2; GR32Bit:%vreg188
	%vreg192<def> = DREADPM %vreg188, 0; GR32Bit:%vreg192,%vreg188
	%vreg195<def> = DREADPM %vreg188, 4; GR32Bit:%vreg195,%vreg188
	BLT <BB#12>, %vreg192, %vreg195; GR32Bit:%vreg192,%vreg195
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#2>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg190<def> = LUI 3; GR32Bit:%vreg190
	%vreg193<def> = DREADPM %vreg190, 0; GR32Bit:%vreg193,%vreg190
	%vreg196<def> = DREADPM %vreg190, 4; GR32Bit:%vreg196,%vreg190
	BLT <BB#12>, %vreg193, %vreg196; GR32Bit:%vreg193,%vreg196
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#2>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#12(16) BB#2(16)

*** Renumbered SlotIndexes 1544-2784 ***

*** Renumbered SlotIndexes 1544-2800 ***

*** Renumbered SlotIndexes 1544-2816 ***

*** Renumbered SlotIndexes 1544-2832 ***

*** Renumbered SlotIndexes 1520-2848 ***

*** Renumbered SlotIndexes 1520-2864 ***

*** Renumbered SlotIndexes 1520-2880 ***

*** Renumbered SlotIndexes 1520-2896 ***

*** Renumbered SlotIndexes 1500-2916 ***

*** Renumbered SlotIndexes 1500-2932 ***

*** Renumbered SlotIndexes 1500-2948 ***

*** Renumbered SlotIndexes 1500-2964 ***

*** Renumbered SlotIndexes 1500-2980 ***

*** Renumbered SlotIndexes 1500-2996 ***

*** Renumbered SlotIndexes 1500-3012 ***
Creating pHyperOp bundles for CEs for bb1
  %vreg186<def> = LUI 1; GR32Bit:%vreg186
starting at   %vreg16<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg16
  %vreg188<def> = LUI 2; GR32Bit:%vreg188
starting at   %vreg186<def> = LUI 1; GR32Bit:%vreg186
  %vreg190<def> = LUI 3; GR32Bit:%vreg190
starting at   %vreg188<def> = LUI 2; GR32Bit:%vreg188
starting at   %vreg190<def> = LUI 3; GR32Bit:%vreg190
After bundling, state of BB1:BB#1: derived from LLVM BB %startup_starter3.if.else
    Predecessors according to CFG: BB#0
	%vreg16<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg16
	  * %vreg17<def> = LW %vreg16, 0; mem:LD4[%5] GR32Bit:%vreg17,%vreg16
	  * %vreg13<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg13
	  * %vreg14<def> = LW %vreg13, 0; mem:LD4[%2] GR32Bit:%vreg14,%vreg13
	  * %vreg15<def> = LW %vreg14, 4; mem:LD4[%20] GR32Bit:%vreg15,%vreg14
	  * %vreg185<def> = LUI 1; GR32Bit:%vreg185
	  * WRITEPM %vreg185, %vreg15, 0; GR32Bit:%vreg185,%vreg15
	  * %vreg187<def> = LUI 2; GR32Bit:%vreg187
	  * WRITEPM %vreg187, %vreg15, 0; GR32Bit:%vreg187,%vreg15
	  * %vreg189<def> = LUI 3; GR32Bit:%vreg189
	  * WRITEPM %vreg189, %vreg15, 0; GR32Bit:%vreg189,%vreg15
	  * WRITEPM %vreg185, %vreg17, 4; GR32Bit:%vreg185,%vreg17
	  * WRITEPM %vreg187, %vreg17, 4; GR32Bit:%vreg187,%vreg17
	  * WRITEPM %vreg189, %vreg17, 4; GR32Bit:%vreg189,%vreg17
	  * BLT <BB#12>, %vreg15, %vreg17; GR32Bit:%vreg15,%vreg17
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg186<def> = LUI 1; GR32Bit:%vreg186
	  * %vreg191<def> = DREADPM %vreg186, 0; GR32Bit:%vreg191,%vreg186
	  * %vreg194<def> = DREADPM %vreg186, 4; GR32Bit:%vreg194,%vreg186
	  * BLT <BB#12>, %vreg191, %vreg194; GR32Bit:%vreg191,%vreg194
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg188<def> = LUI 2; GR32Bit:%vreg188
	  * %vreg192<def> = DREADPM %vreg188, 0; GR32Bit:%vreg192,%vreg188
	  * %vreg195<def> = DREADPM %vreg188, 4; GR32Bit:%vreg195,%vreg188
	  * BLT <BB#12>, %vreg192, %vreg195; GR32Bit:%vreg192,%vreg195
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg190<def> = LUI 3; GR32Bit:%vreg190
	  * %vreg193<def> = DREADPM %vreg190, 0; GR32Bit:%vreg193,%vreg190
	  * %vreg196<def> = DREADPM %vreg190, 4; GR32Bit:%vreg196,%vreg190
	  * BLT <BB#12>, %vreg193, %vreg196; GR32Bit:%vreg193,%vreg196
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#12(16) BB#2(16)

-------------
Starting new basic block BB#2
********** MI Scheduling **********
startup_starter3:BB#2 startup_starter3.if.else6
  From: JAL <BB#3>
    To: JAL <BB#3>
 Remaining: 6
Max Pressure: Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 0
Excess PSets: 
0 subtrees:
*** Final schedule for BB#2 ***

Partitioning instructions of the region into multiple CEs

*** Renumbered SlotIndexes 2136-3024 ***

*** Renumbered SlotIndexes 2148-3036 ***

*** Renumbered SlotIndexes 2160-3048 ***

*** Renumbered SlotIndexes 2172-3060 ***

*** Renumbered SlotIndexes 2184-3072 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
********** MI Scheduling **********
startup_starter3:BB#2 startup_starter3.if.else6
  From: %vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
    To: BLE <BB#10>, %vreg20, %vreg22; GR32Bit:%vreg20,%vreg22
 Remaining: 0
Max Pressure: GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 2
Excess PSets: 
2 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 1
  SU(4) in tree 1
SU(0):   %vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
   val SU(1): Latency=5 Reg=%vreg18

SU(1):   %vreg19<def> = LW %vreg18, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 30
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg18
  Successors:
   val SU(2): Latency=15 Reg=%vreg19

SU(2):   %vreg20<def> = LW %vreg19, 4; mem:LD4[%25] GR32Bit:%vreg20,%vreg19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 20
  Height             : 15
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg19
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg20

SU(3):   %vreg21<def> = ADDI %t5, <fi#5>; GR32Bit:%vreg21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
   val SU(4): Latency=5 Reg=%vreg21

SU(4):   %vreg22<def> = LW %vreg21, 0; mem:LD4[%6] GR32Bit:%vreg22,%vreg21
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 15
  Predecessors:
   val SU(3): Latency=5 Reg=%vreg21
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg22

SU(0):   %vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
   val SU(1): Latency=5 Reg=%vreg18

SU(1):   %vreg19<def> = LW %vreg18, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 30
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg18
  Successors:
   val SU(2): Latency=15 Reg=%vreg19

SU(2):   %vreg20<def> = LW %vreg19, 4; mem:LD4[%25] GR32Bit:%vreg20,%vreg19
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 14
  Depth              : 20
  Height             : 15
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg19
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg20

SU(3):   %vreg21<def> = ADDI %t5, <fi#5>; GR32Bit:%vreg21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
   val SU(4): Latency=5 Reg=%vreg21

SU(4):   %vreg22<def> = LW %vreg21, 0; mem:LD4[%6] GR32Bit:%vreg22,%vreg21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 15
  Predecessors:
   val SU(3): Latency=5 Reg=%vreg21
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg22

Pick node SU(3)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg21<def> = ADDI %t5, <fi#5>; GR32Bit:%vreg21
handleMove 2108B -> 2080B: %vreg21<def> = ADDI %t5, <fi#5>; GR32Bit:%vreg21
     %vreg21:	[2108r,2116r:0)  0@2108r
        -->	[2080r,2116r:0)  0@2080r
     t5:	EMPTY
        -->	EMPTY
Pick node SU(4)  ILP: 2 / 6 = 0.333333 Tree: 1 @0
Scheduling %vreg22<def> = LW %vreg21, 0; mem:LD4[%6] GR32Bit:%vreg22,%vreg21

*** Renumbered SlotIndexes 2080-3112 ***
handleMove 2128B -> 2088B: %vreg22<def> = LW %vreg21, 0; mem:LD4[%6] GR32Bit:%vreg22,%vreg21
     %vreg22:	[2128r,2136r:0)  0@2128r
        -->	[2088r,2136r:0)  0@2088r
     %vreg21:	[2080r,2128r:0)  0@2080r
        -->	[2080r,2088r:0)  0@2080r
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg19<def> = LW %vreg18, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
Pick node SU(2)  ILP: 3 / 21 = 0.142857 Tree: 0 @0
Scheduling %vreg20<def> = LW %vreg19, 4; mem:LD4[%25] GR32Bit:%vreg20,%vreg19
*** Final schedule for BB#2 ***
SU(3):   %vreg21<def> = ADDI %t5, <fi#5>; GR32Bit:%vreg21
SU(4):   %vreg22<def> = LW %vreg21, 0; mem:LD4[%6] GR32Bit:%vreg22,%vreg21
SU(0):   %vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
SU(1):   %vreg19<def> = LW %vreg18, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
SU(2):   %vreg20<def> = LW %vreg19, 4; mem:LD4[%25] GR32Bit:%vreg20,%vreg19

Partitioning instructions of the region into multiple CEs
instr:  %vreg21<def> = ADDI %t5, <fi#5>; GR32Bit:%vreg21
instr:  %vreg22<def> = LW %vreg21, 0; mem:LD4[%6] GR32Bit:%vreg22,%vreg21
instr:  %vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
instr:  %vreg19<def> = LW %vreg18, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
instr:  %vreg20<def> = LW %vreg19, 4; mem:LD4[%25] GR32Bit:%vreg20,%vreg19

*** Renumbered SlotIndexes 2116-3124 ***

*** Renumbered SlotIndexes 2128-3136 ***

*** Renumbered SlotIndexes 2140-3148 ***

*** Renumbered SlotIndexes 2152-3160 ***

*** Renumbered SlotIndexes 2164-3172 ***

*** Renumbered SlotIndexes 2176-3184 ***

*** Renumbered SlotIndexes 2188-3196 ***

*** Renumbered SlotIndexes 2200-3208 ***

*** Renumbered SlotIndexes 2212-3220 ***

*** Renumbered SlotIndexes 2248-3232 ***

*** Renumbered SlotIndexes 2260-3244 ***

*** Renumbered SlotIndexes 2272-3256 ***

*** Renumbered SlotIndexes 2284-3268 ***

*** Renumbered SlotIndexes 2296-3280 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs

renaming register of operand that belongs to ce 1 but was defined in0
%vreg20<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg20<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg20<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg22<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg22<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg22<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg20
renaming register of operand that belongs to ce 1 but was defined in0
%vreg22
renaming register of operand that belongs to ce 2 but was defined in0
%vreg20
renaming register of operand that belongs to ce 2 but was defined in0
%vreg22
renaming register of operand that belongs to ce 3 but was defined in0
%vreg20
renaming register of operand that belongs to ce 3 but was defined in0
%vreg22After Shuffling regions of basic block, state of BB#2:
BB#2: derived from LLVM BB %startup_starter3.if.else6
    Predecessors according to CFG: BB#1
	%vreg21<def> = ADDI %t5, <fi#5>; GR32Bit:%vreg21
	%vreg22<def> = LW %vreg21, 0; mem:LD4[%6] GR32Bit:%vreg22,%vreg21
	%vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
	%vreg19<def> = LW %vreg18, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
	%vreg20<def> = LW %vreg19, 4; mem:LD4[%25] GR32Bit:%vreg20,%vreg19
	%vreg197<def> = LUI 1; GR32Bit:%vreg197
	WRITEPM %vreg197, %vreg20, 0; GR32Bit:%vreg197,%vreg20
	%vreg199<def> = LUI 2; GR32Bit:%vreg199
	WRITEPM %vreg199, %vreg20, 0; GR32Bit:%vreg199,%vreg20
	%vreg201<def> = LUI 3; GR32Bit:%vreg201
	WRITEPM %vreg201, %vreg20, 0; GR32Bit:%vreg201,%vreg20
	WRITEPM %vreg197, %vreg22, 4; GR32Bit:%vreg197,%vreg22
	WRITEPM %vreg199, %vreg22, 4; GR32Bit:%vreg199,%vreg22
	WRITEPM %vreg201, %vreg22, 4; GR32Bit:%vreg201,%vreg22
	BLE <BB#10>, %vreg20, %vreg22; GR32Bit:%vreg20,%vreg22
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#3>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg198<def> = LUI 1; GR32Bit:%vreg198
	%vreg203<def> = DREADPM %vreg198, 0; GR32Bit:%vreg203,%vreg198
	%vreg206<def> = DREADPM %vreg198, 4; GR32Bit:%vreg206,%vreg198
	BLE <BB#10>, %vreg203, %vreg206; GR32Bit:%vreg203,%vreg206
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#3>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg200<def> = LUI 2; GR32Bit:%vreg200
	%vreg204<def> = DREADPM %vreg200, 0; GR32Bit:%vreg204,%vreg200
	%vreg207<def> = DREADPM %vreg200, 4; GR32Bit:%vreg207,%vreg200
	BLE <BB#10>, %vreg204, %vreg207; GR32Bit:%vreg204,%vreg207
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#3>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg202<def> = LUI 3; GR32Bit:%vreg202
	%vreg205<def> = DREADPM %vreg202, 0; GR32Bit:%vreg205,%vreg202
	%vreg208<def> = DREADPM %vreg202, 4; GR32Bit:%vreg208,%vreg202
	BLE <BB#10>, %vreg205, %vreg208; GR32Bit:%vreg205,%vreg208
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#3>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#10(16) BB#3(16)

*** Renumbered SlotIndexes 2160-3336 ***

*** Renumbered SlotIndexes 2160-3352 ***

*** Renumbered SlotIndexes 2160-3368 ***

*** Renumbered SlotIndexes 2160-3384 ***

*** Renumbered SlotIndexes 2136-3400 ***

*** Renumbered SlotIndexes 2136-3416 ***

*** Renumbered SlotIndexes 2136-3432 ***

*** Renumbered SlotIndexes 2136-3448 ***

*** Renumbered SlotIndexes 2116-3468 ***

*** Renumbered SlotIndexes 2116-3484 ***

*** Renumbered SlotIndexes 2116-3500 ***

*** Renumbered SlotIndexes 2116-3516 ***

*** Renumbered SlotIndexes 2116-3532 ***

*** Renumbered SlotIndexes 2116-3548 ***

*** Renumbered SlotIndexes 2116-3564 ***
Creating pHyperOp bundles for CEs for bb2
  %vreg198<def> = LUI 1; GR32Bit:%vreg198
starting at   %vreg21<def> = ADDI %t5, <fi#5>; GR32Bit:%vreg21
  %vreg200<def> = LUI 2; GR32Bit:%vreg200
starting at   %vreg198<def> = LUI 1; GR32Bit:%vreg198
  %vreg202<def> = LUI 3; GR32Bit:%vreg202
starting at   %vreg200<def> = LUI 2; GR32Bit:%vreg200
starting at   %vreg202<def> = LUI 3; GR32Bit:%vreg202
After bundling, state of BB2:BB#2: derived from LLVM BB %startup_starter3.if.else6
    Predecessors according to CFG: BB#1
	%vreg21<def> = ADDI %t5, <fi#5>; GR32Bit:%vreg21
	  * %vreg22<def> = LW %vreg21, 0; mem:LD4[%6] GR32Bit:%vreg22,%vreg21
	  * %vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
	  * %vreg19<def> = LW %vreg18, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
	  * %vreg20<def> = LW %vreg19, 4; mem:LD4[%25] GR32Bit:%vreg20,%vreg19
	  * %vreg197<def> = LUI 1; GR32Bit:%vreg197
	  * WRITEPM %vreg197, %vreg20, 0; GR32Bit:%vreg197,%vreg20
	  * %vreg199<def> = LUI 2; GR32Bit:%vreg199
	  * WRITEPM %vreg199, %vreg20, 0; GR32Bit:%vreg199,%vreg20
	  * %vreg201<def> = LUI 3; GR32Bit:%vreg201
	  * WRITEPM %vreg201, %vreg20, 0; GR32Bit:%vreg201,%vreg20
	  * WRITEPM %vreg197, %vreg22, 4; GR32Bit:%vreg197,%vreg22
	  * WRITEPM %vreg199, %vreg22, 4; GR32Bit:%vreg199,%vreg22
	  * WRITEPM %vreg201, %vreg22, 4; GR32Bit:%vreg201,%vreg22
	  * BLE <BB#10>, %vreg20, %vreg22; GR32Bit:%vreg20,%vreg22
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#3>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg198<def> = LUI 1; GR32Bit:%vreg198
	  * %vreg203<def> = DREADPM %vreg198, 0; GR32Bit:%vreg203,%vreg198
	  * %vreg206<def> = DREADPM %vreg198, 4; GR32Bit:%vreg206,%vreg198
	  * BLE <BB#10>, %vreg203, %vreg206; GR32Bit:%vreg203,%vreg206
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#3>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg200<def> = LUI 2; GR32Bit:%vreg200
	  * %vreg204<def> = DREADPM %vreg200, 0; GR32Bit:%vreg204,%vreg200
	  * %vreg207<def> = DREADPM %vreg200, 4; GR32Bit:%vreg207,%vreg200
	  * BLE <BB#10>, %vreg204, %vreg207; GR32Bit:%vreg204,%vreg207
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#3>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg202<def> = LUI 3; GR32Bit:%vreg202
	  * %vreg205<def> = DREADPM %vreg202, 0; GR32Bit:%vreg205,%vreg202
	  * %vreg208<def> = DREADPM %vreg202, 4; GR32Bit:%vreg208,%vreg202
	  * BLE <BB#10>, %vreg205, %vreg208; GR32Bit:%vreg205,%vreg208
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#3>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#10(16) BB#3(16)

-------------
Starting new basic block BB#3
********** MI Scheduling **********
startup_starter3:BB#3 startup_starter3.if.else11
  From: JAL <BB#4>
    To: JAL <BB#4>
 Remaining: 9
Max Pressure: Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 0
Excess PSets: 
0 subtrees:
*** Final schedule for BB#3 ***

Partitioning instructions of the region into multiple CEs

*** Renumbered SlotIndexes 2776-3576 ***

*** Renumbered SlotIndexes 2788-3588 ***

*** Renumbered SlotIndexes 2800-3600 ***

*** Renumbered SlotIndexes 2812-3612 ***

*** Renumbered SlotIndexes 2824-3624 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
********** MI Scheduling **********
startup_starter3:BB#3 startup_starter3.if.else11
  From: %vreg23<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg23
    To: BNE <BB#9>, %vreg30, %zero; GR32Bit:%vreg30
 Remaining: 0
Max Pressure: FP32Bit=2
GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 2
GR32BitLimit 32 Actual 2
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 0
  SU(5) in tree 0
  SU(6) in tree 0
  SU(7) in tree 0
SU(0):   %vreg23<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 25
  Successors:
   val SU(1): Latency=5 Reg=%vreg23

SU(1):   %vreg24<def> = FLW %vreg23, 0; mem:LD4[%3] FP32Bit:%vreg24 GR32Bit:%vreg23
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 20
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg23
  Successors:
   val SU(7): Latency=15 Reg=%vreg24

SU(2):   %vreg25<def> = LUI <ga:@NH_STARTER_SHUTOFF>[TF=2]; GR32Bit:%vreg25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
   val SU(4): Latency=5 Reg=%vreg25

SU(3):   %vreg26<def> = ADDI %zero, <ga:@NH_STARTER_SHUTOFF>[TF=3]; GR32Bit:%vreg26
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
   val SU(4): Latency=5 Reg=%vreg26

SU(4):   %vreg27<def> = ADD %vreg26, %vreg25; GR32Bit:%vreg27,%vreg26,%vreg25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 30
  Predecessors:
   val SU(3): Latency=5 Reg=%vreg26
   val SU(2): Latency=5 Reg=%vreg25
  Successors:
   val SU(5): Latency=5 Reg=%vreg27

SU(5):   %vreg28<def> = LW %vreg27, 0; mem:LD4[@NH_STARTER_SHUTOFF] GR32Bit:%vreg28,%vreg27
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 25
  Predecessors:
   val SU(4): Latency=5 Reg=%vreg27
  Successors:
   val SU(6): Latency=15 Reg=%vreg28

SU(6):   %vreg29<def> = FCVT_S_W_RDY %vreg28; FP32Bit:%vreg29 GR32Bit:%vreg28
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 10
  Predecessors:
   val SU(5): Latency=15 Reg=%vreg28
  Successors:
   val SU(7): Latency=5 Reg=%vreg29

SU(7):   %vreg30<def> = FULE_S %vreg24, %vreg29; GR32Bit:%vreg30 FP32Bit:%vreg24,%vreg29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 30
  Height             : 5
  Predecessors:
   val SU(6): Latency=5 Reg=%vreg29
   val SU(1): Latency=15 Reg=%vreg24
  Successors:
   val SU(4294967295): Latency=5 Reg=%vreg30

SU(0):   %vreg23<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 25
  Successors:
   val SU(1): Latency=5 Reg=%vreg23

SU(1):   %vreg24<def> = FLW %vreg23, 0; mem:LD4[%3] FP32Bit:%vreg24 GR32Bit:%vreg23
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 20
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg23
  Successors:
   val SU(7): Latency=15 Reg=%vreg24

SU(2):   %vreg25<def> = LUI <ga:@NH_STARTER_SHUTOFF>[TF=2]; GR32Bit:%vreg25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
   val SU(4): Latency=5 Reg=%vreg25

SU(3):   %vreg26<def> = ADDI %zero, <ga:@NH_STARTER_SHUTOFF>[TF=3]; GR32Bit:%vreg26
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
   val SU(4): Latency=5 Reg=%vreg26

SU(4):   %vreg27<def> = ADD %vreg26, %vreg25; GR32Bit:%vreg27,%vreg26,%vreg25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 30
  Predecessors:
   val SU(3): Latency=5 Reg=%vreg26
   val SU(2): Latency=5 Reg=%vreg25
  Successors:
   val SU(5): Latency=5 Reg=%vreg27

SU(5):   %vreg28<def> = LW %vreg27, 0; mem:LD4[@NH_STARTER_SHUTOFF] GR32Bit:%vreg28,%vreg27
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 25
  Predecessors:
   val SU(4): Latency=5 Reg=%vreg27
  Successors:
   val SU(6): Latency=15 Reg=%vreg28

SU(6):   %vreg29<def> = FCVT_S_W_RDY %vreg28; FP32Bit:%vreg29 GR32Bit:%vreg28
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 10
  Predecessors:
   val SU(5): Latency=15 Reg=%vreg28
  Successors:
   val SU(7): Latency=5 Reg=%vreg29

SU(7):   %vreg30<def> = FULE_S %vreg24, %vreg29; GR32Bit:%vreg30 FP32Bit:%vreg24,%vreg29
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 4
  Depth              : 30
  Height             : 5
  Predecessors:
   val SU(6): Latency=5 Reg=%vreg29
   val SU(1): Latency=15 Reg=%vreg24
  Successors:
   val SU(4294967295): Latency=5 Reg=%vreg30

Pick node SU(3)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg26<def> = ADDI %zero, <ga:@NH_STARTER_SHUTOFF>[TF=3]; GR32Bit:%vreg26
handleMove 2724B -> 2696B: %vreg26<def> = ADDI %zero, <ga:@NH_STARTER_SHUTOFF>[TF=3]; GR32Bit:%vreg26
     %vreg26:	[2724r,2732r:0)  0@2724r
        -->	[2696r,2732r:0)  0@2696r
     zero:	[1396r,1396d:7)[1404r,1404d:6)[1412r,1412d:5)[1420r,1420d:4)[1428r,1428d:3)[1436r,1436d:2)[1444r,1444d:1)[1452r,1452d:0)  0@1452r 1@1444r 2@1436r 3@1428r 4@1420r 5@1412r 6@1404r 7@1396r
        -->	[1396r,1396d:7)[1404r,1404d:6)[1412r,1412d:5)[1420r,1420d:4)[1428r,1428d:3)[1436r,1436d:2)[1444r,1444d:1)[1452r,1452d:0)  0@1452r 1@1444r 2@1436r 3@1428r 4@1420r 5@1412r 6@1404r 7@1396r
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg23<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg23
Pick node SU(2)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg25<def> = LUI <ga:@NH_STARTER_SHUTOFF>[TF=2]; GR32Bit:%vreg25
handleMove 2716B -> 2704B: %vreg25<def> = LUI <ga:@NH_STARTER_SHUTOFF>[TF=2]; GR32Bit:%vreg25
     %vreg25:	[2716r,2732r:0)  0@2716r
        -->	[2704r,2732r:0)  0@2704r
Pick node SU(4)  ILP: 3 / 6 = 0.5 Tree: 0 @0
Scheduling %vreg27<def> = ADD %vreg26, %vreg25; GR32Bit:%vreg27,%vreg26,%vreg25

*** Renumbered SlotIndexes 2704-3664 ***
handleMove 2744B -> 2712B: %vreg27<def> = ADD %vreg26, %vreg25; GR32Bit:%vreg27,%vreg26,%vreg25
     %vreg27:	[2744r,2752r:0)  0@2744r
        -->	[2712r,2752r:0)  0@2712r
     %vreg26:	[2696r,2744r:0)  0@2696r
        -->	[2696r,2712r:0)  0@2696r
     %vreg25:	[2704r,2744r:0)  0@2704r
        -->	[2704r,2712r:0)  0@2704r
Pick node SU(5)  ILP: 4 / 11 = 0.363636 Tree: 0 @0
Scheduling %vreg28<def> = LW %vreg27, 0; mem:LD4[@NH_STARTER_SHUTOFF] GR32Bit:%vreg28,%vreg27
handleMove 2752B -> 2716B: %vreg28<def> = LW %vreg27, 0; mem:LD4[@NH_STARTER_SHUTOFF] GR32Bit:%vreg28,%vreg27
     %vreg28:	[2752r,2760r:0)  0@2752r
        -->	[2716r,2760r:0)  0@2716r
     %vreg27:	[2712r,2752r:0)  0@2712r
        -->	[2712r,2716r:0)  0@2712r
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg24<def> = FLW %vreg23, 0; mem:LD4[%3] FP32Bit:%vreg24 GR32Bit:%vreg23
Pick node SU(6)  ILP: 5 / 26 = 0.192308 Tree: 0 @0
Scheduling %vreg29<def> = FCVT_S_W_RDY %vreg28; FP32Bit:%vreg29 GR32Bit:%vreg28
Pick node SU(7)  ILP: 8 / 31 = 0.258065 Tree: 0 @0
Scheduling %vreg30<def> = FULE_S %vreg24, %vreg29; GR32Bit:%vreg30 FP32Bit:%vreg24,%vreg29
*** Final schedule for BB#3 ***
SU(3):   %vreg26<def> = ADDI %zero, <ga:@NH_STARTER_SHUTOFF>[TF=3]; GR32Bit:%vreg26
SU(0):   %vreg23<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg23
SU(2):   %vreg25<def> = LUI <ga:@NH_STARTER_SHUTOFF>[TF=2]; GR32Bit:%vreg25
SU(4):   %vreg27<def> = ADD %vreg26, %vreg25; GR32Bit:%vreg27,%vreg26,%vreg25
SU(5):   %vreg28<def> = LW %vreg27, 0; mem:LD4[@NH_STARTER_SHUTOFF] GR32Bit:%vreg28,%vreg27
SU(1):   %vreg24<def> = FLW %vreg23, 0; mem:LD4[%3] FP32Bit:%vreg24 GR32Bit:%vreg23
SU(6):   %vreg29<def> = FCVT_S_W_RDY %vreg28; FP32Bit:%vreg29 GR32Bit:%vreg28
SU(7):   %vreg30<def> = FULE_S %vreg24, %vreg29; GR32Bit:%vreg30 FP32Bit:%vreg24,%vreg29

Partitioning instructions of the region into multiple CEs
instr:  %vreg26<def> = ADDI %zero, <ga:@NH_STARTER_SHUTOFF>[TF=3]; GR32Bit:%vreg26
instr:  %vreg23<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg23
instr:  %vreg25<def> = LUI <ga:@NH_STARTER_SHUTOFF>[TF=2]; GR32Bit:%vreg25
instr:  %vreg27<def> = ADD %vreg26, %vreg25; GR32Bit:%vreg27,%vreg26,%vreg25
instr:  %vreg28<def> = LW %vreg27, 0; mem:LD4[@NH_STARTER_SHUTOFF] GR32Bit:%vreg28,%vreg27
instr:  %vreg24<def> = FLW %vreg23, 0; mem:LD4[%3] FP32Bit:%vreg24 GR32Bit:%vreg23
instr:  %vreg29<def> = FCVT_S_W_RDY %vreg28; FP32Bit:%vreg29 GR32Bit:%vreg28
instr:  %vreg30<def> = FULE_S %vreg24, %vreg29; GR32Bit:%vreg30 FP32Bit:%vreg24,%vreg29

*** Renumbered SlotIndexes 2772-3676 ***

*** Renumbered SlotIndexes 2784-3688 ***

*** Renumbered SlotIndexes 2796-3700 ***

*** Renumbered SlotIndexes 2808-3712 ***

*** Renumbered SlotIndexes 2820-3724 ***

*** Renumbered SlotIndexes 2832-3736 ***

*** Renumbered SlotIndexes 2852-3748 ***

*** Renumbered SlotIndexes 2864-3760 ***

*** Renumbered SlotIndexes 2876-3772 ***

*** Renumbered SlotIndexes 2888-3784 ***

*** Renumbered SlotIndexes 2900-3796 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs

renaming register of operand that belongs to ce 1 but was defined in0
%vreg30<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg30<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg30<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg30
renaming register of operand that belongs to ce 2 but was defined in0
%vreg30
renaming register of operand that belongs to ce 3 but was defined in0
%vreg30After Shuffling regions of basic block, state of BB#3:
BB#3: derived from LLVM BB %startup_starter3.if.else11
    Predecessors according to CFG: BB#2
	%vreg26<def> = ADDI %zero, <ga:@NH_STARTER_SHUTOFF>[TF=3]; GR32Bit:%vreg26
	%vreg23<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg23
	%vreg25<def> = LUI <ga:@NH_STARTER_SHUTOFF>[TF=2]; GR32Bit:%vreg25
	%vreg27<def> = ADD %vreg26, %vreg25; GR32Bit:%vreg27,%vreg26,%vreg25
	%vreg28<def> = LW %vreg27, 0; mem:LD4[@NH_STARTER_SHUTOFF] GR32Bit:%vreg28,%vreg27
	%vreg24<def> = FLW %vreg23, 0; mem:LD4[%3] FP32Bit:%vreg24 GR32Bit:%vreg23
	%vreg29<def> = FCVT_S_W_RDY %vreg28; FP32Bit:%vreg29 GR32Bit:%vreg28
	%vreg30<def> = FULE_S %vreg24, %vreg29; GR32Bit:%vreg30 FP32Bit:%vreg24,%vreg29
	%vreg209<def> = LUI 1; GR32Bit:%vreg209
	WRITEPM %vreg209, %vreg30, 0; GR32Bit:%vreg209,%vreg30
	%vreg211<def> = LUI 2; GR32Bit:%vreg211
	WRITEPM %vreg211, %vreg30, 0; GR32Bit:%vreg211,%vreg30
	%vreg213<def> = LUI 3; GR32Bit:%vreg213
	WRITEPM %vreg213, %vreg30, 0; GR32Bit:%vreg213,%vreg30
	BNE <BB#9>, %vreg30, %zero; GR32Bit:%vreg30
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#4>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg210<def> = LUI 1; GR32Bit:%vreg210
	%vreg215<def> = DREADPM %vreg210, 0; GR32Bit:%vreg215,%vreg210
	BNE <BB#9>, %vreg215, %zero; GR32Bit:%vreg215
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#4>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg212<def> = LUI 2; GR32Bit:%vreg212
	%vreg216<def> = DREADPM %vreg212, 0; GR32Bit:%vreg216,%vreg212
	BNE <BB#9>, %vreg216, %zero; GR32Bit:%vreg216
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#4>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg214<def> = LUI 3; GR32Bit:%vreg214
	%vreg217<def> = DREADPM %vreg214, 0; GR32Bit:%vreg217,%vreg214
	BNE <BB#9>, %vreg217, %zero; GR32Bit:%vreg217
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#4>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#4(16) BB#9(16)

*** Renumbered SlotIndexes 2816-3840 ***

*** Renumbered SlotIndexes 2816-3856 ***

*** Renumbered SlotIndexes 2816-3872 ***

*** Renumbered SlotIndexes 2792-3896 ***

*** Renumbered SlotIndexes 2792-3912 ***

*** Renumbered SlotIndexes 2792-3928 ***

*** Renumbered SlotIndexes 2772-3956 ***

*** Renumbered SlotIndexes 2772-3972 ***

*** Renumbered SlotIndexes 2772-3988 ***

*** Renumbered SlotIndexes 2772-4004 ***

*** Renumbered SlotIndexes 2772-4020 ***
Creating pHyperOp bundles for CEs for bb3
  %vreg210<def> = LUI 1; GR32Bit:%vreg210
starting at   %vreg26<def> = ADDI %zero, <ga:@NH_STARTER_SHUTOFF>[TF=3]; GR32Bit:%vreg26
  %vreg212<def> = LUI 2; GR32Bit:%vreg212
starting at   %vreg210<def> = LUI 1; GR32Bit:%vreg210
  %vreg214<def> = LUI 3; GR32Bit:%vreg214
starting at   %vreg212<def> = LUI 2; GR32Bit:%vreg212
starting at   %vreg214<def> = LUI 3; GR32Bit:%vreg214
After bundling, state of BB3:BB#3: derived from LLVM BB %startup_starter3.if.else11
    Predecessors according to CFG: BB#2
	%vreg26<def> = ADDI %zero, <ga:@NH_STARTER_SHUTOFF>[TF=3]; GR32Bit:%vreg26
	  * %vreg23<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg23
	  * %vreg25<def> = LUI <ga:@NH_STARTER_SHUTOFF>[TF=2]; GR32Bit:%vreg25
	  * %vreg27<def> = ADD %vreg26, %vreg25; GR32Bit:%vreg27,%vreg26,%vreg25
	  * %vreg28<def> = LW %vreg27, 0; mem:LD4[@NH_STARTER_SHUTOFF] GR32Bit:%vreg28,%vreg27
	  * %vreg24<def> = FLW %vreg23, 0; mem:LD4[%3] FP32Bit:%vreg24 GR32Bit:%vreg23
	  * %vreg29<def> = FCVT_S_W_RDY %vreg28; FP32Bit:%vreg29 GR32Bit:%vreg28
	  * %vreg30<def> = FULE_S %vreg24, %vreg29; GR32Bit:%vreg30 FP32Bit:%vreg24,%vreg29
	  * %vreg209<def> = LUI 1; GR32Bit:%vreg209
	  * WRITEPM %vreg209, %vreg30, 0; GR32Bit:%vreg209,%vreg30
	  * %vreg211<def> = LUI 2; GR32Bit:%vreg211
	  * WRITEPM %vreg211, %vreg30, 0; GR32Bit:%vreg211,%vreg30
	  * %vreg213<def> = LUI 3; GR32Bit:%vreg213
	  * WRITEPM %vreg213, %vreg30, 0; GR32Bit:%vreg213,%vreg30
	  * BNE <BB#9>, %vreg30, %zero; GR32Bit:%vreg30
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#4>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg210<def> = LUI 1; GR32Bit:%vreg210
	  * %vreg215<def> = DREADPM %vreg210, 0; GR32Bit:%vreg215,%vreg210
	  * BNE <BB#9>, %vreg215, %zero; GR32Bit:%vreg215
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#4>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg212<def> = LUI 2; GR32Bit:%vreg212
	  * %vreg216<def> = DREADPM %vreg212, 0; GR32Bit:%vreg216,%vreg212
	  * BNE <BB#9>, %vreg216, %zero; GR32Bit:%vreg216
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#4>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg214<def> = LUI 3; GR32Bit:%vreg214
	  * %vreg217<def> = DREADPM %vreg214, 0; GR32Bit:%vreg217,%vreg214
	  * BNE <BB#9>, %vreg217, %zero; GR32Bit:%vreg217
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#4>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#4(16) BB#9(16)

-------------
Starting new basic block BB#4
********** MI Scheduling **********
startup_starter3:BB#4 startup_starter3.if.then15
  From: JAL <BB#5>
    To: JAL <BB#5>
 Remaining: 9
Max Pressure: Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 0
Excess PSets: 
0 subtrees:
*** Final schedule for BB#4 ***

Partitioning instructions of the region into multiple CEs

*** Renumbered SlotIndexes 3320-4032 ***

*** Renumbered SlotIndexes 3332-4044 ***

*** Renumbered SlotIndexes 3344-4056 ***

*** Renumbered SlotIndexes 3356-4068 ***

*** Renumbered SlotIndexes 3368-4080 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
********** MI Scheduling **********
startup_starter3:BB#4 startup_starter3.if.then15
  From: %vreg38<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg38
    To: BNE <BB#12>, %vreg45, %zero; GR32Bit:%vreg45
 Remaining: 0
Max Pressure: FP32Bit=2
GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 2
GR32BitLimit 32 Actual 2
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 0
  SU(5) in tree 0
  SU(6) in tree 0
  SU(7) in tree 0
SU(0):   %vreg38<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg38
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 25
  Successors:
   val SU(1): Latency=5 Reg=%vreg38

SU(1):   %vreg39<def> = FLW %vreg38, 0; mem:LD4[%3] FP32Bit:%vreg39 GR32Bit:%vreg38
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 20
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg38
  Successors:
   val SU(7): Latency=15 Reg=%vreg39

SU(2):   %vreg40<def> = LUI <ga:@SG_MAX_RPM>[TF=2]; GR32Bit:%vreg40
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
   val SU(4): Latency=5 Reg=%vreg40

SU(3):   %vreg41<def> = ADDI %zero, <ga:@SG_MAX_RPM>[TF=3]; GR32Bit:%vreg41
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
   val SU(4): Latency=5 Reg=%vreg41

SU(4):   %vreg42<def> = ADD %vreg41, %vreg40; GR32Bit:%vreg42,%vreg41,%vreg40
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 30
  Predecessors:
   val SU(3): Latency=5 Reg=%vreg41
   val SU(2): Latency=5 Reg=%vreg40
  Successors:
   val SU(5): Latency=5 Reg=%vreg42

SU(5):   %vreg43<def> = LW %vreg42, 0; mem:LD4[@SG_MAX_RPM] GR32Bit:%vreg43,%vreg42
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 25
  Predecessors:
   val SU(4): Latency=5 Reg=%vreg42
  Successors:
   val SU(6): Latency=15 Reg=%vreg43

SU(6):   %vreg44<def> = FCVT_S_W_RDY %vreg43; FP32Bit:%vreg44 GR32Bit:%vreg43
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 10
  Predecessors:
   val SU(5): Latency=15 Reg=%vreg43
  Successors:
   val SU(7): Latency=5 Reg=%vreg44

SU(7):   %vreg45<def> = FULE_S %vreg39, %vreg44; GR32Bit:%vreg45 FP32Bit:%vreg39,%vreg44
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 30
  Height             : 5
  Predecessors:
   val SU(6): Latency=5 Reg=%vreg44
   val SU(1): Latency=15 Reg=%vreg39
  Successors:
   val SU(4294967295): Latency=5 Reg=%vreg45

SU(0):   %vreg38<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg38
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 25
  Successors:
   val SU(1): Latency=5 Reg=%vreg38

SU(1):   %vreg39<def> = FLW %vreg38, 0; mem:LD4[%3] FP32Bit:%vreg39 GR32Bit:%vreg38
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 20
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg38
  Successors:
   val SU(7): Latency=15 Reg=%vreg39

SU(2):   %vreg40<def> = LUI <ga:@SG_MAX_RPM>[TF=2]; GR32Bit:%vreg40
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
   val SU(4): Latency=5 Reg=%vreg40

SU(3):   %vreg41<def> = ADDI %zero, <ga:@SG_MAX_RPM>[TF=3]; GR32Bit:%vreg41
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
   val SU(4): Latency=5 Reg=%vreg41

SU(4):   %vreg42<def> = ADD %vreg41, %vreg40; GR32Bit:%vreg42,%vreg41,%vreg40
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 30
  Predecessors:
   val SU(3): Latency=5 Reg=%vreg41
   val SU(2): Latency=5 Reg=%vreg40
  Successors:
   val SU(5): Latency=5 Reg=%vreg42

SU(5):   %vreg43<def> = LW %vreg42, 0; mem:LD4[@SG_MAX_RPM] GR32Bit:%vreg43,%vreg42
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 25
  Predecessors:
   val SU(4): Latency=5 Reg=%vreg42
  Successors:
   val SU(6): Latency=15 Reg=%vreg43

SU(6):   %vreg44<def> = FCVT_S_W_RDY %vreg43; FP32Bit:%vreg44 GR32Bit:%vreg43
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 10
  Predecessors:
   val SU(5): Latency=15 Reg=%vreg43
  Successors:
   val SU(7): Latency=5 Reg=%vreg44

SU(7):   %vreg45<def> = FULE_S %vreg39, %vreg44; GR32Bit:%vreg45 FP32Bit:%vreg39,%vreg44
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 4
  Depth              : 30
  Height             : 5
  Predecessors:
   val SU(6): Latency=5 Reg=%vreg44
   val SU(1): Latency=15 Reg=%vreg39
  Successors:
   val SU(4294967295): Latency=5 Reg=%vreg45

Pick node SU(3)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg41<def> = ADDI %zero, <ga:@SG_MAX_RPM>[TF=3]; GR32Bit:%vreg41
handleMove 3268B -> 3240B: %vreg41<def> = ADDI %zero, <ga:@SG_MAX_RPM>[TF=3]; GR32Bit:%vreg41
     %vreg41:	[3268r,3276r:0)  0@3268r
        -->	[3240r,3276r:0)  0@3240r
     zero:	[1396r,1396d:7)[1404r,1404d:6)[1412r,1412d:5)[1420r,1420d:4)[1428r,1428d:3)[1436r,1436d:2)[1444r,1444d:1)[1452r,1452d:0)  0@1452r 1@1444r 2@1436r 3@1428r 4@1420r 5@1412r 6@1404r 7@1396r
        -->	[1396r,1396d:7)[1404r,1404d:6)[1412r,1412d:5)[1420r,1420d:4)[1428r,1428d:3)[1436r,1436d:2)[1444r,1444d:1)[1452r,1452d:0)  0@1452r 1@1444r 2@1436r 3@1428r 4@1420r 5@1412r 6@1404r 7@1396r
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg38<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg38
Pick node SU(2)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg40<def> = LUI <ga:@SG_MAX_RPM>[TF=2]; GR32Bit:%vreg40
handleMove 3260B -> 3248B: %vreg40<def> = LUI <ga:@SG_MAX_RPM>[TF=2]; GR32Bit:%vreg40
     %vreg40:	[3260r,3276r:0)  0@3260r
        -->	[3248r,3276r:0)  0@3248r
Pick node SU(4)  ILP: 3 / 6 = 0.5 Tree: 0 @0
Scheduling %vreg42<def> = ADD %vreg41, %vreg40; GR32Bit:%vreg42,%vreg41,%vreg40

*** Renumbered SlotIndexes 3248-4120 ***
handleMove 3288B -> 3256B: %vreg42<def> = ADD %vreg41, %vreg40; GR32Bit:%vreg42,%vreg41,%vreg40
     %vreg42:	[3288r,3296r:0)  0@3288r
        -->	[3256r,3296r:0)  0@3256r
     %vreg41:	[3240r,3288r:0)  0@3240r
        -->	[3240r,3256r:0)  0@3240r
     %vreg40:	[3248r,3288r:0)  0@3248r
        -->	[3248r,3256r:0)  0@3248r
Pick node SU(5)  ILP: 4 / 11 = 0.363636 Tree: 0 @0
Scheduling %vreg43<def> = LW %vreg42, 0; mem:LD4[@SG_MAX_RPM] GR32Bit:%vreg43,%vreg42
handleMove 3296B -> 3260B: %vreg43<def> = LW %vreg42, 0; mem:LD4[@SG_MAX_RPM] GR32Bit:%vreg43,%vreg42
     %vreg43:	[3296r,3304r:0)  0@3296r
        -->	[3260r,3304r:0)  0@3260r
     %vreg42:	[3256r,3296r:0)  0@3256r
        -->	[3256r,3260r:0)  0@3256r
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg39<def> = FLW %vreg38, 0; mem:LD4[%3] FP32Bit:%vreg39 GR32Bit:%vreg38
Pick node SU(6)  ILP: 5 / 26 = 0.192308 Tree: 0 @0
Scheduling %vreg44<def> = FCVT_S_W_RDY %vreg43; FP32Bit:%vreg44 GR32Bit:%vreg43
Pick node SU(7)  ILP: 8 / 31 = 0.258065 Tree: 0 @0
Scheduling %vreg45<def> = FULE_S %vreg39, %vreg44; GR32Bit:%vreg45 FP32Bit:%vreg39,%vreg44
*** Final schedule for BB#4 ***
SU(3):   %vreg41<def> = ADDI %zero, <ga:@SG_MAX_RPM>[TF=3]; GR32Bit:%vreg41
SU(0):   %vreg38<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg38
SU(2):   %vreg40<def> = LUI <ga:@SG_MAX_RPM>[TF=2]; GR32Bit:%vreg40
SU(4):   %vreg42<def> = ADD %vreg41, %vreg40; GR32Bit:%vreg42,%vreg41,%vreg40
SU(5):   %vreg43<def> = LW %vreg42, 0; mem:LD4[@SG_MAX_RPM] GR32Bit:%vreg43,%vreg42
SU(1):   %vreg39<def> = FLW %vreg38, 0; mem:LD4[%3] FP32Bit:%vreg39 GR32Bit:%vreg38
SU(6):   %vreg44<def> = FCVT_S_W_RDY %vreg43; FP32Bit:%vreg44 GR32Bit:%vreg43
SU(7):   %vreg45<def> = FULE_S %vreg39, %vreg44; GR32Bit:%vreg45 FP32Bit:%vreg39,%vreg44

Partitioning instructions of the region into multiple CEs
instr:  %vreg41<def> = ADDI %zero, <ga:@SG_MAX_RPM>[TF=3]; GR32Bit:%vreg41
instr:  %vreg38<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg38
instr:  %vreg40<def> = LUI <ga:@SG_MAX_RPM>[TF=2]; GR32Bit:%vreg40
instr:  %vreg42<def> = ADD %vreg41, %vreg40; GR32Bit:%vreg42,%vreg41,%vreg40
instr:  %vreg43<def> = LW %vreg42, 0; mem:LD4[@SG_MAX_RPM] GR32Bit:%vreg43,%vreg42
instr:  %vreg39<def> = FLW %vreg38, 0; mem:LD4[%3] FP32Bit:%vreg39 GR32Bit:%vreg38
instr:  %vreg44<def> = FCVT_S_W_RDY %vreg43; FP32Bit:%vreg44 GR32Bit:%vreg43
instr:  %vreg45<def> = FULE_S %vreg39, %vreg44; GR32Bit:%vreg45 FP32Bit:%vreg39,%vreg44

*** Renumbered SlotIndexes 3316-4132 ***

*** Renumbered SlotIndexes 3328-4144 ***

*** Renumbered SlotIndexes 3340-4156 ***

*** Renumbered SlotIndexes 3352-4168 ***

*** Renumbered SlotIndexes 3364-4180 ***

*** Renumbered SlotIndexes 3376-4192 ***

*** Renumbered SlotIndexes 3396-4204 ***

*** Renumbered SlotIndexes 3408-4216 ***

*** Renumbered SlotIndexes 3420-4228 ***

*** Renumbered SlotIndexes 3432-4240 ***

*** Renumbered SlotIndexes 3444-4252 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs

renaming register of operand that belongs to ce 1 but was defined in0
%vreg45<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg45<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg45<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg45
renaming register of operand that belongs to ce 2 but was defined in0
%vreg45
renaming register of operand that belongs to ce 3 but was defined in0
%vreg45After Shuffling regions of basic block, state of BB#4:
BB#4: derived from LLVM BB %startup_starter3.if.then15
    Predecessors according to CFG: BB#3
	%vreg41<def> = ADDI %zero, <ga:@SG_MAX_RPM>[TF=3]; GR32Bit:%vreg41
	%vreg38<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg38
	%vreg40<def> = LUI <ga:@SG_MAX_RPM>[TF=2]; GR32Bit:%vreg40
	%vreg42<def> = ADD %vreg41, %vreg40; GR32Bit:%vreg42,%vreg41,%vreg40
	%vreg43<def> = LW %vreg42, 0; mem:LD4[@SG_MAX_RPM] GR32Bit:%vreg43,%vreg42
	%vreg39<def> = FLW %vreg38, 0; mem:LD4[%3] FP32Bit:%vreg39 GR32Bit:%vreg38
	%vreg44<def> = FCVT_S_W_RDY %vreg43; FP32Bit:%vreg44 GR32Bit:%vreg43
	%vreg45<def> = FULE_S %vreg39, %vreg44; GR32Bit:%vreg45 FP32Bit:%vreg39,%vreg44
	%vreg218<def> = LUI 1; GR32Bit:%vreg218
	WRITEPM %vreg218, %vreg45, 0; GR32Bit:%vreg218,%vreg45
	%vreg220<def> = LUI 2; GR32Bit:%vreg220
	WRITEPM %vreg220, %vreg45, 0; GR32Bit:%vreg220,%vreg45
	%vreg222<def> = LUI 3; GR32Bit:%vreg222
	WRITEPM %vreg222, %vreg45, 0; GR32Bit:%vreg222,%vreg45
	BNE <BB#12>, %vreg45, %zero; GR32Bit:%vreg45
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#5>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg219<def> = LUI 1; GR32Bit:%vreg219
	%vreg224<def> = DREADPM %vreg219, 0; GR32Bit:%vreg224,%vreg219
	BNE <BB#12>, %vreg224, %zero; GR32Bit:%vreg224
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#5>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg221<def> = LUI 2; GR32Bit:%vreg221
	%vreg225<def> = DREADPM %vreg221, 0; GR32Bit:%vreg225,%vreg221
	BNE <BB#12>, %vreg225, %zero; GR32Bit:%vreg225
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#5>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg223<def> = LUI 3; GR32Bit:%vreg223
	%vreg226<def> = DREADPM %vreg223, 0; GR32Bit:%vreg226,%vreg223
	BNE <BB#12>, %vreg226, %zero; GR32Bit:%vreg226
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#5>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#5(16) BB#12(16)

*** Renumbered SlotIndexes 3360-4296 ***

*** Renumbered SlotIndexes 3360-4312 ***

*** Renumbered SlotIndexes 3360-4328 ***

*** Renumbered SlotIndexes 3336-4352 ***

*** Renumbered SlotIndexes 3336-4368 ***

*** Renumbered SlotIndexes 3336-4384 ***

*** Renumbered SlotIndexes 3316-4412 ***

*** Renumbered SlotIndexes 3316-4428 ***

*** Renumbered SlotIndexes 3316-4444 ***

*** Renumbered SlotIndexes 3316-4460 ***

*** Renumbered SlotIndexes 3316-4476 ***
Creating pHyperOp bundles for CEs for bb4
  %vreg219<def> = LUI 1; GR32Bit:%vreg219
starting at   %vreg41<def> = ADDI %zero, <ga:@SG_MAX_RPM>[TF=3]; GR32Bit:%vreg41
  %vreg221<def> = LUI 2; GR32Bit:%vreg221
starting at   %vreg219<def> = LUI 1; GR32Bit:%vreg219
  %vreg223<def> = LUI 3; GR32Bit:%vreg223
starting at   %vreg221<def> = LUI 2; GR32Bit:%vreg221
starting at   %vreg223<def> = LUI 3; GR32Bit:%vreg223
After bundling, state of BB4:BB#4: derived from LLVM BB %startup_starter3.if.then15
    Predecessors according to CFG: BB#3
	%vreg41<def> = ADDI %zero, <ga:@SG_MAX_RPM>[TF=3]; GR32Bit:%vreg41
	  * %vreg38<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg38
	  * %vreg40<def> = LUI <ga:@SG_MAX_RPM>[TF=2]; GR32Bit:%vreg40
	  * %vreg42<def> = ADD %vreg41, %vreg40; GR32Bit:%vreg42,%vreg41,%vreg40
	  * %vreg43<def> = LW %vreg42, 0; mem:LD4[@SG_MAX_RPM] GR32Bit:%vreg43,%vreg42
	  * %vreg39<def> = FLW %vreg38, 0; mem:LD4[%3] FP32Bit:%vreg39 GR32Bit:%vreg38
	  * %vreg44<def> = FCVT_S_W_RDY %vreg43; FP32Bit:%vreg44 GR32Bit:%vreg43
	  * %vreg45<def> = FULE_S %vreg39, %vreg44; GR32Bit:%vreg45 FP32Bit:%vreg39,%vreg44
	  * %vreg218<def> = LUI 1; GR32Bit:%vreg218
	  * WRITEPM %vreg218, %vreg45, 0; GR32Bit:%vreg218,%vreg45
	  * %vreg220<def> = LUI 2; GR32Bit:%vreg220
	  * WRITEPM %vreg220, %vreg45, 0; GR32Bit:%vreg220,%vreg45
	  * %vreg222<def> = LUI 3; GR32Bit:%vreg222
	  * WRITEPM %vreg222, %vreg45, 0; GR32Bit:%vreg222,%vreg45
	  * BNE <BB#12>, %vreg45, %zero; GR32Bit:%vreg45
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#5>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg219<def> = LUI 1; GR32Bit:%vreg219
	  * %vreg224<def> = DREADPM %vreg219, 0; GR32Bit:%vreg224,%vreg219
	  * BNE <BB#12>, %vreg224, %zero; GR32Bit:%vreg224
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#5>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg221<def> = LUI 2; GR32Bit:%vreg221
	  * %vreg225<def> = DREADPM %vreg221, 0; GR32Bit:%vreg225,%vreg221
	  * BNE <BB#12>, %vreg225, %zero; GR32Bit:%vreg225
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#5>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg223<def> = LUI 3; GR32Bit:%vreg223
	  * %vreg226<def> = DREADPM %vreg223, 0; GR32Bit:%vreg226,%vreg223
	  * BNE <BB#12>, %vreg226, %zero; GR32Bit:%vreg226
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#5>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#5(16) BB#12(16)

-------------
Starting new basic block BB#5
********** MI Scheduling **********
startup_starter3:BB#5 startup_starter3.if.then19
  From: JAL <BB#6>
    To: JAL <BB#6>
 Remaining: 8
Max Pressure: Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 0
Excess PSets: 
0 subtrees:
*** Final schedule for BB#5 ***

Partitioning instructions of the region into multiple CEs

*** Renumbered SlotIndexes 3856-4488 ***

*** Renumbered SlotIndexes 3868-4500 ***

*** Renumbered SlotIndexes 3880-4512 ***

*** Renumbered SlotIndexes 3892-4524 ***

*** Renumbered SlotIndexes 3904-4536 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
********** MI Scheduling **********
startup_starter3:BB#5 startup_starter3.if.then19
  From: %vreg46<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg46
    To: BNE <BB#7>, %vreg52, %zero; GR32Bit:%vreg52
 Remaining: 0
Max Pressure: FP32Bit=2
GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 2
GR32BitLimit 32 Actual 2
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 0
  SU(5) in tree 0
  SU(6) in tree 0
SU(0):   %vreg46<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg46
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 25
  Successors:
   val SU(1): Latency=5 Reg=%vreg46

SU(1):   %vreg47<def> = FLW %vreg46, 0; mem:LD4[%4] FP32Bit:%vreg47 GR32Bit:%vreg46
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 20
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg46
  Successors:
   val SU(6): Latency=15 Reg=%vreg47

SU(2):   %vreg48<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg48
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 30
  Successors:
   val SU(4): Latency=5 Reg=%vreg48

SU(3):   %vreg49<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg49
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 30
  Successors:
   val SU(4): Latency=5 Reg=%vreg49

SU(4):   %vreg50<def> = ADD %vreg49, %vreg48; GR32Bit:%vreg50,%vreg49,%vreg48
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 25
  Predecessors:
   val SU(3): Latency=5 Reg=%vreg49
   val SU(2): Latency=5 Reg=%vreg48
  Successors:
   val SU(5): Latency=5 Reg=%vreg50

SU(5):   %vreg51<def> = FLW %vreg50, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg51 GR32Bit:%vreg50
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 20
  Predecessors:
   val SU(4): Latency=5 Reg=%vreg50
  Successors:
   val SU(6): Latency=15 Reg=%vreg51

SU(6):   %vreg52<def> = FULE_S %vreg47, %vreg51; GR32Bit:%vreg52 FP32Bit:%vreg47,%vreg51
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 5
  Predecessors:
   val SU(5): Latency=15 Reg=%vreg51
   val SU(1): Latency=15 Reg=%vreg47
  Successors:
   val SU(4294967295): Latency=5 Reg=%vreg52

SU(0):   %vreg46<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg46
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 25
  Successors:
   val SU(1): Latency=5 Reg=%vreg46

SU(1):   %vreg47<def> = FLW %vreg46, 0; mem:LD4[%4] FP32Bit:%vreg47 GR32Bit:%vreg46
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 20
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg46
  Successors:
   val SU(6): Latency=15 Reg=%vreg47

SU(2):   %vreg48<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg48
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 30
  Successors:
   val SU(4): Latency=5 Reg=%vreg48

SU(3):   %vreg49<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg49
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 30
  Successors:
   val SU(4): Latency=5 Reg=%vreg49

SU(4):   %vreg50<def> = ADD %vreg49, %vreg48; GR32Bit:%vreg50,%vreg49,%vreg48
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 25
  Predecessors:
   val SU(3): Latency=5 Reg=%vreg49
   val SU(2): Latency=5 Reg=%vreg48
  Successors:
   val SU(5): Latency=5 Reg=%vreg50

SU(5):   %vreg51<def> = FLW %vreg50, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg51 GR32Bit:%vreg50
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 20
  Predecessors:
   val SU(4): Latency=5 Reg=%vreg50
  Successors:
   val SU(6): Latency=15 Reg=%vreg51

SU(6):   %vreg52<def> = FULE_S %vreg47, %vreg51; GR32Bit:%vreg52 FP32Bit:%vreg47,%vreg51
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 5
  Predecessors:
   val SU(5): Latency=15 Reg=%vreg51
   val SU(1): Latency=15 Reg=%vreg47
  Successors:
   val SU(4294967295): Latency=5 Reg=%vreg52

Pick node SU(3)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg49<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg49
handleMove 3812B -> 3784B: %vreg49<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg49
     %vreg49:	[3812r,3820r:0)  0@3812r
        -->	[3784r,3820r:0)  0@3784r
     zero:	[1396r,1396d:7)[1404r,1404d:6)[1412r,1412d:5)[1420r,1420d:4)[1428r,1428d:3)[1436r,1436d:2)[1444r,1444d:1)[1452r,1452d:0)  0@1452r 1@1444r 2@1436r 3@1428r 4@1420r 5@1412r 6@1404r 7@1396r
        -->	[1396r,1396d:7)[1404r,1404d:6)[1412r,1412d:5)[1420r,1420d:4)[1428r,1428d:3)[1436r,1436d:2)[1444r,1444d:1)[1452r,1452d:0)  0@1452r 1@1444r 2@1436r 3@1428r 4@1420r 5@1412r 6@1404r 7@1396r
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg46<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg46
Pick node SU(2)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg48<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg48
handleMove 3804B -> 3792B: %vreg48<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg48
     %vreg48:	[3804r,3820r:0)  0@3804r
        -->	[3792r,3820r:0)  0@3792r
Pick node SU(4)  ILP: 3 / 6 = 0.5 Tree: 0 @0
Scheduling %vreg50<def> = ADD %vreg49, %vreg48; GR32Bit:%vreg50,%vreg49,%vreg48

*** Renumbered SlotIndexes 3792-4576 ***
handleMove 3832B -> 3800B: %vreg50<def> = ADD %vreg49, %vreg48; GR32Bit:%vreg50,%vreg49,%vreg48
     %vreg50:	[3832r,3840r:0)  0@3832r
        -->	[3800r,3840r:0)  0@3800r
     %vreg49:	[3784r,3832r:0)  0@3784r
        -->	[3784r,3800r:0)  0@3784r
     %vreg48:	[3792r,3832r:0)  0@3792r
        -->	[3792r,3800r:0)  0@3792r
Pick node SU(5)  ILP: 4 / 11 = 0.363636 Tree: 0 @0
Scheduling %vreg51<def> = FLW %vreg50, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg51 GR32Bit:%vreg50
handleMove 3840B -> 3804B: %vreg51<def> = FLW %vreg50, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg51 GR32Bit:%vreg50
     %vreg51:	[3840r,3848r:0)  0@3840r
        -->	[3804r,3848r:0)  0@3804r
     %vreg50:	[3800r,3840r:0)  0@3800r
        -->	[3800r,3804r:0)  0@3800r
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg47<def> = FLW %vreg46, 0; mem:LD4[%4] FP32Bit:%vreg47 GR32Bit:%vreg46
Pick node SU(6)  ILP: 7 / 26 = 0.269231 Tree: 0 @0
Scheduling %vreg52<def> = FULE_S %vreg47, %vreg51; GR32Bit:%vreg52 FP32Bit:%vreg47,%vreg51
*** Final schedule for BB#5 ***
SU(3):   %vreg49<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg49
SU(0):   %vreg46<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg46
SU(2):   %vreg48<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg48
SU(4):   %vreg50<def> = ADD %vreg49, %vreg48; GR32Bit:%vreg50,%vreg49,%vreg48
SU(5):   %vreg51<def> = FLW %vreg50, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg51 GR32Bit:%vreg50
SU(1):   %vreg47<def> = FLW %vreg46, 0; mem:LD4[%4] FP32Bit:%vreg47 GR32Bit:%vreg46
SU(6):   %vreg52<def> = FULE_S %vreg47, %vreg51; GR32Bit:%vreg52 FP32Bit:%vreg47,%vreg51

Partitioning instructions of the region into multiple CEs
instr:  %vreg49<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg49
instr:  %vreg46<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg46
instr:  %vreg48<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg48
instr:  %vreg50<def> = ADD %vreg49, %vreg48; GR32Bit:%vreg50,%vreg49,%vreg48
instr:  %vreg51<def> = FLW %vreg50, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg51 GR32Bit:%vreg50
instr:  %vreg47<def> = FLW %vreg46, 0; mem:LD4[%4] FP32Bit:%vreg47 GR32Bit:%vreg46
instr:  %vreg52<def> = FULE_S %vreg47, %vreg51; GR32Bit:%vreg52 FP32Bit:%vreg47,%vreg51

*** Renumbered SlotIndexes 3852-4588 ***

*** Renumbered SlotIndexes 3864-4600 ***

*** Renumbered SlotIndexes 3876-4612 ***

*** Renumbered SlotIndexes 3888-4624 ***

*** Renumbered SlotIndexes 3900-4636 ***

*** Renumbered SlotIndexes 3912-4648 ***

*** Renumbered SlotIndexes 3932-4660 ***

*** Renumbered SlotIndexes 3944-4672 ***

*** Renumbered SlotIndexes 3956-4684 ***

*** Renumbered SlotIndexes 3968-4696 ***

*** Renumbered SlotIndexes 3980-4708 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs

renaming register of operand that belongs to ce 1 but was defined in0
%vreg52<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg52<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg52<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg52
renaming register of operand that belongs to ce 2 but was defined in0
%vreg52
renaming register of operand that belongs to ce 3 but was defined in0
%vreg52After Shuffling regions of basic block, state of BB#5:
BB#5: derived from LLVM BB %startup_starter3.if.then19
    Predecessors according to CFG: BB#4
	%vreg49<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg49
	%vreg46<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg46
	%vreg48<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg48
	%vreg50<def> = ADD %vreg49, %vreg48; GR32Bit:%vreg50,%vreg49,%vreg48
	%vreg51<def> = FLW %vreg50, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg51 GR32Bit:%vreg50
	%vreg47<def> = FLW %vreg46, 0; mem:LD4[%4] FP32Bit:%vreg47 GR32Bit:%vreg46
	%vreg52<def> = FULE_S %vreg47, %vreg51; GR32Bit:%vreg52 FP32Bit:%vreg47,%vreg51
	%vreg227<def> = LUI 1; GR32Bit:%vreg227
	WRITEPM %vreg227, %vreg52, 0; GR32Bit:%vreg227,%vreg52
	%vreg229<def> = LUI 2; GR32Bit:%vreg229
	WRITEPM %vreg229, %vreg52, 0; GR32Bit:%vreg229,%vreg52
	%vreg231<def> = LUI 3; GR32Bit:%vreg231
	WRITEPM %vreg231, %vreg52, 0; GR32Bit:%vreg231,%vreg52
	BNE <BB#7>, %vreg52, %zero; GR32Bit:%vreg52
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#6>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg228<def> = LUI 1; GR32Bit:%vreg228
	%vreg233<def> = DREADPM %vreg228, 0; GR32Bit:%vreg233,%vreg228
	BNE <BB#7>, %vreg233, %zero; GR32Bit:%vreg233
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#6>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg230<def> = LUI 2; GR32Bit:%vreg230
	%vreg234<def> = DREADPM %vreg230, 0; GR32Bit:%vreg234,%vreg230
	BNE <BB#7>, %vreg234, %zero; GR32Bit:%vreg234
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#6>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg232<def> = LUI 3; GR32Bit:%vreg232
	%vreg235<def> = DREADPM %vreg232, 0; GR32Bit:%vreg235,%vreg232
	BNE <BB#7>, %vreg235, %zero; GR32Bit:%vreg235
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#6>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#6(16) BB#7(16)

*** Renumbered SlotIndexes 3896-4752 ***

*** Renumbered SlotIndexes 3896-4768 ***

*** Renumbered SlotIndexes 3896-4784 ***

*** Renumbered SlotIndexes 3872-4808 ***

*** Renumbered SlotIndexes 3872-4824 ***

*** Renumbered SlotIndexes 3872-4840 ***

*** Renumbered SlotIndexes 3852-4868 ***

*** Renumbered SlotIndexes 3852-4884 ***

*** Renumbered SlotIndexes 3852-4900 ***

*** Renumbered SlotIndexes 3852-4916 ***

*** Renumbered SlotIndexes 3852-4932 ***
Creating pHyperOp bundles for CEs for bb5
  %vreg228<def> = LUI 1; GR32Bit:%vreg228
starting at   %vreg49<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg49
  %vreg230<def> = LUI 2; GR32Bit:%vreg230
starting at   %vreg228<def> = LUI 1; GR32Bit:%vreg228
  %vreg232<def> = LUI 3; GR32Bit:%vreg232
starting at   %vreg230<def> = LUI 2; GR32Bit:%vreg230
starting at   %vreg232<def> = LUI 3; GR32Bit:%vreg232
After bundling, state of BB5:BB#5: derived from LLVM BB %startup_starter3.if.then19
    Predecessors according to CFG: BB#4
	%vreg49<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg49
	  * %vreg46<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg46
	  * %vreg48<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg48
	  * %vreg50<def> = ADD %vreg49, %vreg48; GR32Bit:%vreg50,%vreg49,%vreg48
	  * %vreg51<def> = FLW %vreg50, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg51 GR32Bit:%vreg50
	  * %vreg47<def> = FLW %vreg46, 0; mem:LD4[%4] FP32Bit:%vreg47 GR32Bit:%vreg46
	  * %vreg52<def> = FULE_S %vreg47, %vreg51; GR32Bit:%vreg52 FP32Bit:%vreg47,%vreg51
	  * %vreg227<def> = LUI 1; GR32Bit:%vreg227
	  * WRITEPM %vreg227, %vreg52, 0; GR32Bit:%vreg227,%vreg52
	  * %vreg229<def> = LUI 2; GR32Bit:%vreg229
	  * WRITEPM %vreg229, %vreg52, 0; GR32Bit:%vreg229,%vreg52
	  * %vreg231<def> = LUI 3; GR32Bit:%vreg231
	  * WRITEPM %vreg231, %vreg52, 0; GR32Bit:%vreg231,%vreg52
	  * BNE <BB#7>, %vreg52, %zero; GR32Bit:%vreg52
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#6>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg228<def> = LUI 1; GR32Bit:%vreg228
	  * %vreg233<def> = DREADPM %vreg228, 0; GR32Bit:%vreg233,%vreg228
	  * BNE <BB#7>, %vreg233, %zero; GR32Bit:%vreg233
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#6>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg230<def> = LUI 2; GR32Bit:%vreg230
	  * %vreg234<def> = DREADPM %vreg230, 0; GR32Bit:%vreg234,%vreg230
	  * BNE <BB#7>, %vreg234, %zero; GR32Bit:%vreg234
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#6>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg232<def> = LUI 3; GR32Bit:%vreg232
	  * %vreg235<def> = DREADPM %vreg232, 0; GR32Bit:%vreg235,%vreg232
	  * BNE <BB#7>, %vreg235, %zero; GR32Bit:%vreg235
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#6>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#6(16) BB#7(16)

-------------
Starting new basic block BB#6
********** MI Scheduling **********
startup_starter3:BB#6 startup_starter3.if.then22
  From: %vreg53<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg53
    To: End Remaining: 0
Max Pressure: FP32Bit=1
GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 1
GR32BitLimit 32 Actual 2
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 0
  SU(5) in tree 0
SU(0):   %vreg53<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg53
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
   val SU(2): Latency=5 Reg=%vreg53

SU(1):   %vreg54<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg54
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
   val SU(2): Latency=5 Reg=%vreg54

SU(2):   %vreg55<def> = ADD %vreg54, %vreg53; GR32Bit:%vreg55,%vreg54,%vreg53
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg54
   val SU(0): Latency=5 Reg=%vreg53
  Successors:
   val SU(3): Latency=5 Reg=%vreg55

SU(3):   %vreg56<def> = FLW %vreg55, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg56 GR32Bit:%vreg55
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 2
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg55
  Successors:
   val SU(5): Latency=2 Reg=%vreg56

SU(4):   %vreg57<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg57
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(5): Latency=5 Reg=%vreg57

SU(5):   FSW %vreg56, %vreg57, 0; mem:ST4[%4] FP32Bit:%vreg56 GR32Bit:%vreg57
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 12
  Height             : 0
  Predecessors:
   val SU(3): Latency=2 Reg=%vreg56
   val SU(4): Latency=5 Reg=%vreg57
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg53<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg53
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
   val SU(2): Latency=5 Reg=%vreg53

SU(1):   %vreg54<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg54
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
   val SU(2): Latency=5 Reg=%vreg54

SU(2):   %vreg55<def> = ADD %vreg54, %vreg53; GR32Bit:%vreg55,%vreg54,%vreg53
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg54
   val SU(0): Latency=5 Reg=%vreg53
  Successors:
   val SU(3): Latency=5 Reg=%vreg55

SU(3):   %vreg56<def> = FLW %vreg55, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg56 GR32Bit:%vreg55
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 2
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg55
  Successors:
   val SU(5): Latency=2 Reg=%vreg56

SU(4):   %vreg57<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg57
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(5): Latency=5 Reg=%vreg57

SU(5):   FSW %vreg56, %vreg57, 0; mem:ST4[%4] FP32Bit:%vreg56 GR32Bit:%vreg57
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 12
  Height             : 0
  Predecessors:
   val SU(3): Latency=2 Reg=%vreg56
   val SU(4): Latency=5 Reg=%vreg57
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(4)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg57<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg57
handleMove 4356B -> 4320B: %vreg57<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg57
     %vreg57:	[4356r,4364r:0)  0@4356r
        -->	[4320r,4364r:0)  0@4320r
     t5:	EMPTY
        -->	EMPTY
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg53<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg53
Pick node SU(1)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg54<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg54
Pick node SU(2)  ILP: 3 / 6 = 0.5 Tree: 0 @0
Scheduling %vreg55<def> = ADD %vreg54, %vreg53; GR32Bit:%vreg55,%vreg54,%vreg53
Pick node SU(3)  ILP: 4 / 11 = 0.363636 Tree: 0 @0
Scheduling %vreg56<def> = FLW %vreg55, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg56 GR32Bit:%vreg55
Pick node SU(5)  ILP: 6 / 13 = 0.461538 Tree: 0 @0
Scheduling FSW %vreg56, %vreg57, 0; mem:ST4[%4] FP32Bit:%vreg56 GR32Bit:%vreg57
*** Final schedule for BB#6 ***
SU(4):   %vreg57<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg57
SU(0):   %vreg53<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg53
SU(1):   %vreg54<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg54
SU(2):   %vreg55<def> = ADD %vreg54, %vreg53; GR32Bit:%vreg55,%vreg54,%vreg53
SU(3):   %vreg56<def> = FLW %vreg55, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg56 GR32Bit:%vreg55
SU(5):   FSW %vreg56, %vreg57, 0; mem:ST4[%4] FP32Bit:%vreg56 GR32Bit:%vreg57

Partitioning instructions of the region into multiple CEs
instr:  %vreg57<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg57
instr:  %vreg53<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg53
instr:  %vreg54<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg54
instr:  %vreg55<def> = ADD %vreg54, %vreg53; GR32Bit:%vreg55,%vreg54,%vreg53
instr:  %vreg56<def> = FLW %vreg55, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg56 GR32Bit:%vreg55
instr:  FSW %vreg56, %vreg57, 0; mem:ST4[%4] FP32Bit:%vreg56 GR32Bit:%vreg57
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
After Shuffling regions of basic block, state of BB#6:
BB#6: derived from LLVM BB %startup_starter3.if.then22
    Predecessors according to CFG: BB#5
	%vreg57<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg57
	%vreg53<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg53
	%vreg54<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg54
	%vreg55<def> = ADD %vreg54, %vreg53; GR32Bit:%vreg55,%vreg54,%vreg53
	%vreg56<def> = FLW %vreg55, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg56 GR32Bit:%vreg55
	FSW %vreg56, %vreg57, 0; mem:ST4[%4] FP32Bit:%vreg56 GR32Bit:%vreg57
    Successors according to CFG: BB#7
Creating pHyperOp bundles for CEs for bb6
starting at   %vreg57<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg57

*** Renumbered SlotIndexes 4320-4944 ***
starting at   %zero<def> = ADDI %zero, 0
starting at   %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 4332-4956 ***
starting at   %zero<def> = ADDI %zero, 0
After bundling, state of BB6:BB#6: derived from LLVM BB %startup_starter3.if.then22
    Predecessors according to CFG: BB#5
	%vreg57<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg57
	  * %vreg53<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg53
	  * %vreg54<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg54
	  * %vreg55<def> = ADD %vreg54, %vreg53; GR32Bit:%vreg55,%vreg54,%vreg53
	  * %vreg56<def> = FLW %vreg55, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg56 GR32Bit:%vreg55
	  * FSW %vreg56, %vreg57, 0; mem:ST4[%4] FP32Bit:%vreg56 GR32Bit:%vreg57
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#7

-------------
Starting new basic block BB#7
********** MI Scheduling **********
startup_starter3:BB#7 startup_starter3.if.end
  From: JAL <BB#8>
    To: JAL <BB#8>
 Remaining: 8
Max Pressure: Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 0
Excess PSets: 
0 subtrees:
*** Final schedule for BB#7 ***

Partitioning instructions of the region into multiple CEs

*** Renumbered SlotIndexes 4472-4968 ***

*** Renumbered SlotIndexes 4484-4980 ***

*** Renumbered SlotIndexes 4496-4992 ***

*** Renumbered SlotIndexes 4508-5004 ***

*** Renumbered SlotIndexes 4520-5016 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
********** MI Scheduling **********
startup_starter3:BB#7 startup_starter3.if.end
  From: %vreg58<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg58
    To: BNE <BB#12>, %vreg64, %zero; GR32Bit:%vreg64
 Remaining: 0
Max Pressure: FP32Bit=2
GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 2
GR32BitLimit 32 Actual 2
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 0
  SU(5) in tree 0
  SU(6) in tree 0
SU(0):   %vreg58<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg58
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 25
  Successors:
   val SU(1): Latency=5 Reg=%vreg58

SU(1):   %vreg59<def> = FLW %vreg58, 0; mem:LD4[%4] FP32Bit:%vreg59 GR32Bit:%vreg58
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 20
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg58
  Successors:
   val SU(6): Latency=15 Reg=%vreg59

SU(2):   %vreg60<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg60
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 30
  Successors:
   val SU(4): Latency=5 Reg=%vreg60

SU(3):   %vreg61<def> = ADDI %zero, <ga:@SG_MAX>[TF=3]; GR32Bit:%vreg61
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 30
  Successors:
   val SU(4): Latency=5 Reg=%vreg61

SU(4):   %vreg62<def> = ADD %vreg61, %vreg60; GR32Bit:%vreg62,%vreg61,%vreg60
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 25
  Predecessors:
   val SU(3): Latency=5 Reg=%vreg61
   val SU(2): Latency=5 Reg=%vreg60
  Successors:
   val SU(5): Latency=5 Reg=%vreg62

SU(5):   %vreg63<def> = FLW %vreg62, 0; mem:LD4[@SG_MAX] FP32Bit:%vreg63 GR32Bit:%vreg62
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 20
  Predecessors:
   val SU(4): Latency=5 Reg=%vreg62
  Successors:
   val SU(6): Latency=15 Reg=%vreg63

SU(6):   %vreg64<def> = FULE_S %vreg63, %vreg59; GR32Bit:%vreg64 FP32Bit:%vreg63,%vreg59
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 5
  Predecessors:
   val SU(5): Latency=15 Reg=%vreg63
   val SU(1): Latency=15 Reg=%vreg59
  Successors:
   val SU(4294967295): Latency=5 Reg=%vreg64

SU(0):   %vreg58<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg58
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 25
  Successors:
   val SU(1): Latency=5 Reg=%vreg58

SU(1):   %vreg59<def> = FLW %vreg58, 0; mem:LD4[%4] FP32Bit:%vreg59 GR32Bit:%vreg58
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 20
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg58
  Successors:
   val SU(6): Latency=15 Reg=%vreg59

SU(2):   %vreg60<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg60
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 30
  Successors:
   val SU(4): Latency=5 Reg=%vreg60

SU(3):   %vreg61<def> = ADDI %zero, <ga:@SG_MAX>[TF=3]; GR32Bit:%vreg61
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 30
  Successors:
   val SU(4): Latency=5 Reg=%vreg61

SU(4):   %vreg62<def> = ADD %vreg61, %vreg60; GR32Bit:%vreg62,%vreg61,%vreg60
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 25
  Predecessors:
   val SU(3): Latency=5 Reg=%vreg61
   val SU(2): Latency=5 Reg=%vreg60
  Successors:
   val SU(5): Latency=5 Reg=%vreg62

SU(5):   %vreg63<def> = FLW %vreg62, 0; mem:LD4[@SG_MAX] FP32Bit:%vreg63 GR32Bit:%vreg62
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 20
  Predecessors:
   val SU(4): Latency=5 Reg=%vreg62
  Successors:
   val SU(6): Latency=15 Reg=%vreg63

SU(6):   %vreg64<def> = FULE_S %vreg63, %vreg59; GR32Bit:%vreg64 FP32Bit:%vreg63,%vreg59
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 5
  Predecessors:
   val SU(5): Latency=15 Reg=%vreg63
   val SU(1): Latency=15 Reg=%vreg59
  Successors:
   val SU(4294967295): Latency=5 Reg=%vreg64

Pick node SU(3)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg61<def> = ADDI %zero, <ga:@SG_MAX>[TF=3]; GR32Bit:%vreg61
handleMove 4428B -> 4400B: %vreg61<def> = ADDI %zero, <ga:@SG_MAX>[TF=3]; GR32Bit:%vreg61
     %vreg61:	[4428r,4436r:0)  0@4428r
        -->	[4400r,4436r:0)  0@4400r
     zero:	[1396r,1396d:7)[1404r,1404d:6)[1412r,1412d:5)[1420r,1420d:4)[1428r,1428d:3)[1436r,1436d:2)[1444r,1444d:1)[1452r,1452d:0)  0@1452r 1@1444r 2@1436r 3@1428r 4@1420r 5@1412r 6@1404r 7@1396r
        -->	[1396r,1396d:7)[1404r,1404d:6)[1412r,1412d:5)[1420r,1420d:4)[1428r,1428d:3)[1436r,1436d:2)[1444r,1444d:1)[1452r,1452d:0)  0@1452r 1@1444r 2@1436r 3@1428r 4@1420r 5@1412r 6@1404r 7@1396r
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg58<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg58
Pick node SU(2)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg60<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg60
handleMove 4420B -> 4408B: %vreg60<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg60
     %vreg60:	[4420r,4436r:0)  0@4420r
        -->	[4408r,4436r:0)  0@4408r
Pick node SU(4)  ILP: 3 / 6 = 0.5 Tree: 0 @0
Scheduling %vreg62<def> = ADD %vreg61, %vreg60; GR32Bit:%vreg62,%vreg61,%vreg60

*** Renumbered SlotIndexes 4408-5056 ***
handleMove 4448B -> 4416B: %vreg62<def> = ADD %vreg61, %vreg60; GR32Bit:%vreg62,%vreg61,%vreg60
     %vreg62:	[4448r,4456r:0)  0@4448r
        -->	[4416r,4456r:0)  0@4416r
     %vreg61:	[4400r,4448r:0)  0@4400r
        -->	[4400r,4416r:0)  0@4400r
     %vreg60:	[4408r,4448r:0)  0@4408r
        -->	[4408r,4416r:0)  0@4408r
Pick node SU(5)  ILP: 4 / 11 = 0.363636 Tree: 0 @0
Scheduling %vreg63<def> = FLW %vreg62, 0; mem:LD4[@SG_MAX] FP32Bit:%vreg63 GR32Bit:%vreg62
handleMove 4456B -> 4420B: %vreg63<def> = FLW %vreg62, 0; mem:LD4[@SG_MAX] FP32Bit:%vreg63 GR32Bit:%vreg62
     %vreg63:	[4456r,4464r:0)  0@4456r
        -->	[4420r,4464r:0)  0@4420r
     %vreg62:	[4416r,4456r:0)  0@4416r
        -->	[4416r,4420r:0)  0@4416r
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg59<def> = FLW %vreg58, 0; mem:LD4[%4] FP32Bit:%vreg59 GR32Bit:%vreg58
Pick node SU(6)  ILP: 7 / 26 = 0.269231 Tree: 0 @0
Scheduling %vreg64<def> = FULE_S %vreg63, %vreg59; GR32Bit:%vreg64 FP32Bit:%vreg63,%vreg59
*** Final schedule for BB#7 ***
SU(3):   %vreg61<def> = ADDI %zero, <ga:@SG_MAX>[TF=3]; GR32Bit:%vreg61
SU(0):   %vreg58<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg58
SU(2):   %vreg60<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg60
SU(4):   %vreg62<def> = ADD %vreg61, %vreg60; GR32Bit:%vreg62,%vreg61,%vreg60
SU(5):   %vreg63<def> = FLW %vreg62, 0; mem:LD4[@SG_MAX] FP32Bit:%vreg63 GR32Bit:%vreg62
SU(1):   %vreg59<def> = FLW %vreg58, 0; mem:LD4[%4] FP32Bit:%vreg59 GR32Bit:%vreg58
SU(6):   %vreg64<def> = FULE_S %vreg63, %vreg59; GR32Bit:%vreg64 FP32Bit:%vreg63,%vreg59

Partitioning instructions of the region into multiple CEs
instr:  %vreg61<def> = ADDI %zero, <ga:@SG_MAX>[TF=3]; GR32Bit:%vreg61
instr:  %vreg58<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg58
instr:  %vreg60<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg60
instr:  %vreg62<def> = ADD %vreg61, %vreg60; GR32Bit:%vreg62,%vreg61,%vreg60
instr:  %vreg63<def> = FLW %vreg62, 0; mem:LD4[@SG_MAX] FP32Bit:%vreg63 GR32Bit:%vreg62
instr:  %vreg59<def> = FLW %vreg58, 0; mem:LD4[%4] FP32Bit:%vreg59 GR32Bit:%vreg58
instr:  %vreg64<def> = FULE_S %vreg63, %vreg59; GR32Bit:%vreg64 FP32Bit:%vreg63,%vreg59

*** Renumbered SlotIndexes 4468-5068 ***

*** Renumbered SlotIndexes 4480-5080 ***

*** Renumbered SlotIndexes 4492-5092 ***

*** Renumbered SlotIndexes 4504-5104 ***

*** Renumbered SlotIndexes 4516-5116 ***

*** Renumbered SlotIndexes 4528-5128 ***

*** Renumbered SlotIndexes 4548-5140 ***

*** Renumbered SlotIndexes 4560-5152 ***

*** Renumbered SlotIndexes 4572-5164 ***

*** Renumbered SlotIndexes 4584-5176 ***

*** Renumbered SlotIndexes 4596-5188 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs

renaming register of operand that belongs to ce 1 but was defined in0
%vreg64<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg64<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg64<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg64
renaming register of operand that belongs to ce 2 but was defined in0
%vreg64
renaming register of operand that belongs to ce 3 but was defined in0
%vreg64After Shuffling regions of basic block, state of BB#7:
BB#7: derived from LLVM BB %startup_starter3.if.end
    Predecessors according to CFG: BB#5 BB#6
	%vreg61<def> = ADDI %zero, <ga:@SG_MAX>[TF=3]; GR32Bit:%vreg61
	%vreg58<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg58
	%vreg60<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg60
	%vreg62<def> = ADD %vreg61, %vreg60; GR32Bit:%vreg62,%vreg61,%vreg60
	%vreg63<def> = FLW %vreg62, 0; mem:LD4[@SG_MAX] FP32Bit:%vreg63 GR32Bit:%vreg62
	%vreg59<def> = FLW %vreg58, 0; mem:LD4[%4] FP32Bit:%vreg59 GR32Bit:%vreg58
	%vreg64<def> = FULE_S %vreg63, %vreg59; GR32Bit:%vreg64 FP32Bit:%vreg63,%vreg59
	%vreg236<def> = LUI 1; GR32Bit:%vreg236
	WRITEPM %vreg236, %vreg64, 0; GR32Bit:%vreg236,%vreg64
	%vreg238<def> = LUI 2; GR32Bit:%vreg238
	WRITEPM %vreg238, %vreg64, 0; GR32Bit:%vreg238,%vreg64
	%vreg240<def> = LUI 3; GR32Bit:%vreg240
	WRITEPM %vreg240, %vreg64, 0; GR32Bit:%vreg240,%vreg64
	BNE <BB#12>, %vreg64, %zero; GR32Bit:%vreg64
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#8>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg237<def> = LUI 1; GR32Bit:%vreg237
	%vreg242<def> = DREADPM %vreg237, 0; GR32Bit:%vreg242,%vreg237
	BNE <BB#12>, %vreg242, %zero; GR32Bit:%vreg242
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#8>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg239<def> = LUI 2; GR32Bit:%vreg239
	%vreg243<def> = DREADPM %vreg239, 0; GR32Bit:%vreg243,%vreg239
	BNE <BB#12>, %vreg243, %zero; GR32Bit:%vreg243
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#8>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg241<def> = LUI 3; GR32Bit:%vreg241
	%vreg244<def> = DREADPM %vreg241, 0; GR32Bit:%vreg244,%vreg241
	BNE <BB#12>, %vreg244, %zero; GR32Bit:%vreg244
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#8>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#8(16) BB#12(16)

*** Renumbered SlotIndexes 4512-5232 ***

*** Renumbered SlotIndexes 4512-5248 ***

*** Renumbered SlotIndexes 4512-5264 ***

*** Renumbered SlotIndexes 4488-5288 ***

*** Renumbered SlotIndexes 4488-5304 ***

*** Renumbered SlotIndexes 4488-5320 ***

*** Renumbered SlotIndexes 4468-5348 ***

*** Renumbered SlotIndexes 4468-5364 ***

*** Renumbered SlotIndexes 4468-5380 ***

*** Renumbered SlotIndexes 4468-5396 ***

*** Renumbered SlotIndexes 4468-5412 ***
Creating pHyperOp bundles for CEs for bb7
  %vreg237<def> = LUI 1; GR32Bit:%vreg237
starting at   %vreg61<def> = ADDI %zero, <ga:@SG_MAX>[TF=3]; GR32Bit:%vreg61
  %vreg239<def> = LUI 2; GR32Bit:%vreg239
starting at   %vreg237<def> = LUI 1; GR32Bit:%vreg237
  %vreg241<def> = LUI 3; GR32Bit:%vreg241
starting at   %vreg239<def> = LUI 2; GR32Bit:%vreg239
starting at   %vreg241<def> = LUI 3; GR32Bit:%vreg241
After bundling, state of BB7:BB#7: derived from LLVM BB %startup_starter3.if.end
    Predecessors according to CFG: BB#5 BB#6
	%vreg61<def> = ADDI %zero, <ga:@SG_MAX>[TF=3]; GR32Bit:%vreg61
	  * %vreg58<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg58
	  * %vreg60<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg60
	  * %vreg62<def> = ADD %vreg61, %vreg60; GR32Bit:%vreg62,%vreg61,%vreg60
	  * %vreg63<def> = FLW %vreg62, 0; mem:LD4[@SG_MAX] FP32Bit:%vreg63 GR32Bit:%vreg62
	  * %vreg59<def> = FLW %vreg58, 0; mem:LD4[%4] FP32Bit:%vreg59 GR32Bit:%vreg58
	  * %vreg64<def> = FULE_S %vreg63, %vreg59; GR32Bit:%vreg64 FP32Bit:%vreg63,%vreg59
	  * %vreg236<def> = LUI 1; GR32Bit:%vreg236
	  * WRITEPM %vreg236, %vreg64, 0; GR32Bit:%vreg236,%vreg64
	  * %vreg238<def> = LUI 2; GR32Bit:%vreg238
	  * WRITEPM %vreg238, %vreg64, 0; GR32Bit:%vreg238,%vreg64
	  * %vreg240<def> = LUI 3; GR32Bit:%vreg240
	  * WRITEPM %vreg240, %vreg64, 0; GR32Bit:%vreg240,%vreg64
	  * BNE <BB#12>, %vreg64, %zero; GR32Bit:%vreg64
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#8>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg237<def> = LUI 1; GR32Bit:%vreg237
	  * %vreg242<def> = DREADPM %vreg237, 0; GR32Bit:%vreg242,%vreg237
	  * BNE <BB#12>, %vreg242, %zero; GR32Bit:%vreg242
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#8>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg239<def> = LUI 2; GR32Bit:%vreg239
	  * %vreg243<def> = DREADPM %vreg239, 0; GR32Bit:%vreg243,%vreg239
	  * BNE <BB#12>, %vreg243, %zero; GR32Bit:%vreg243
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#8>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg241<def> = LUI 3; GR32Bit:%vreg241
	  * %vreg244<def> = DREADPM %vreg241, 0; GR32Bit:%vreg244,%vreg241
	  * BNE <BB#12>, %vreg244, %zero; GR32Bit:%vreg244
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#8>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#8(16) BB#12(16)

-------------
Starting new basic block BB#8
********** MI Scheduling **********
startup_starter3:BB#8 startup_starter3.if.then25
  From: %vreg65<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg65
    To: JAL <BB#12>
 Remaining: 0
Max Pressure: FP32Bit=1
GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 1
GR32BitLimit 32 Actual 2
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 0
  SU(5) in tree 0
SU(0):   %vreg65<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg65
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
   val SU(2): Latency=5 Reg=%vreg65

SU(1):   %vreg66<def> = ADDI %zero, <ga:@SG_MAX>[TF=3]; GR32Bit:%vreg66
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
   val SU(2): Latency=5 Reg=%vreg66

SU(2):   %vreg67<def> = ADD %vreg66, %vreg65; GR32Bit:%vreg67,%vreg66,%vreg65
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg66
   val SU(0): Latency=5 Reg=%vreg65
  Successors:
   val SU(3): Latency=5 Reg=%vreg67

SU(3):   %vreg68<def> = FLW %vreg67, 0; mem:LD4[@SG_MAX] FP32Bit:%vreg68 GR32Bit:%vreg67
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 2
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg67
  Successors:
   val SU(5): Latency=2 Reg=%vreg68

SU(4):   %vreg69<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg69
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(5): Latency=5 Reg=%vreg69

SU(5):   FSW %vreg68, %vreg69, 0; mem:ST4[%4] FP32Bit:%vreg68 GR32Bit:%vreg69
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 12
  Height             : 0
  Predecessors:
   val SU(3): Latency=2 Reg=%vreg68
   val SU(4): Latency=5 Reg=%vreg69
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg65<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg65
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
   val SU(2): Latency=5 Reg=%vreg65

SU(1):   %vreg66<def> = ADDI %zero, <ga:@SG_MAX>[TF=3]; GR32Bit:%vreg66
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
   val SU(2): Latency=5 Reg=%vreg66

SU(2):   %vreg67<def> = ADD %vreg66, %vreg65; GR32Bit:%vreg67,%vreg66,%vreg65
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg66
   val SU(0): Latency=5 Reg=%vreg65
  Successors:
   val SU(3): Latency=5 Reg=%vreg67

SU(3):   %vreg68<def> = FLW %vreg67, 0; mem:LD4[@SG_MAX] FP32Bit:%vreg68 GR32Bit:%vreg67
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 2
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg67
  Successors:
   val SU(5): Latency=2 Reg=%vreg68

SU(4):   %vreg69<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg69
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(5): Latency=5 Reg=%vreg69

SU(5):   FSW %vreg68, %vreg69, 0; mem:ST4[%4] FP32Bit:%vreg68 GR32Bit:%vreg69
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 12
  Height             : 0
  Predecessors:
   val SU(3): Latency=2 Reg=%vreg68
   val SU(4): Latency=5 Reg=%vreg69
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(4)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg69<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg69
handleMove 4972B -> 4936B: %vreg69<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg69
     %vreg69:	[4972r,4980r:0)  0@4972r
        -->	[4936r,4980r:0)  0@4936r
     t5:	EMPTY
        -->	EMPTY
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg65<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg65
Pick node SU(1)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg66<def> = ADDI %zero, <ga:@SG_MAX>[TF=3]; GR32Bit:%vreg66
Pick node SU(2)  ILP: 3 / 6 = 0.5 Tree: 0 @0
Scheduling %vreg67<def> = ADD %vreg66, %vreg65; GR32Bit:%vreg67,%vreg66,%vreg65
Pick node SU(3)  ILP: 4 / 11 = 0.363636 Tree: 0 @0
Scheduling %vreg68<def> = FLW %vreg67, 0; mem:LD4[@SG_MAX] FP32Bit:%vreg68 GR32Bit:%vreg67
Pick node SU(5)  ILP: 6 / 13 = 0.461538 Tree: 0 @0
Scheduling FSW %vreg68, %vreg69, 0; mem:ST4[%4] FP32Bit:%vreg68 GR32Bit:%vreg69
*** Final schedule for BB#8 ***
SU(4):   %vreg69<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg69
SU(0):   %vreg65<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg65
SU(1):   %vreg66<def> = ADDI %zero, <ga:@SG_MAX>[TF=3]; GR32Bit:%vreg66
SU(2):   %vreg67<def> = ADD %vreg66, %vreg65; GR32Bit:%vreg67,%vreg66,%vreg65
SU(3):   %vreg68<def> = FLW %vreg67, 0; mem:LD4[@SG_MAX] FP32Bit:%vreg68 GR32Bit:%vreg67
SU(5):   FSW %vreg68, %vreg69, 0; mem:ST4[%4] FP32Bit:%vreg68 GR32Bit:%vreg69

Partitioning instructions of the region into multiple CEs
instr:  %vreg69<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg69
instr:  %vreg65<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg65
instr:  %vreg66<def> = ADDI %zero, <ga:@SG_MAX>[TF=3]; GR32Bit:%vreg66
instr:  %vreg67<def> = ADD %vreg66, %vreg65; GR32Bit:%vreg67,%vreg66,%vreg65
instr:  %vreg68<def> = FLW %vreg67, 0; mem:LD4[@SG_MAX] FP32Bit:%vreg68 GR32Bit:%vreg67
instr:  FSW %vreg68, %vreg69, 0; mem:ST4[%4] FP32Bit:%vreg68 GR32Bit:%vreg69

*** Renumbered SlotIndexes 4992-5424 ***

*** Renumbered SlotIndexes 5004-5436 ***

*** Renumbered SlotIndexes 5016-5448 ***

*** Renumbered SlotIndexes 5028-5460 ***

*** Renumbered SlotIndexes 5040-5472 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
After Shuffling regions of basic block, state of BB#8:
BB#8: derived from LLVM BB %startup_starter3.if.then25
    Predecessors according to CFG: BB#7
	%vreg69<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg69
	%vreg65<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg65
	%vreg66<def> = ADDI %zero, <ga:@SG_MAX>[TF=3]; GR32Bit:%vreg66
	%vreg67<def> = ADD %vreg66, %vreg65; GR32Bit:%vreg67,%vreg66,%vreg65
	%vreg68<def> = FLW %vreg67, 0; mem:LD4[@SG_MAX] FP32Bit:%vreg68 GR32Bit:%vreg67
	FSW %vreg68, %vreg69, 0; mem:ST4[%4] FP32Bit:%vreg68 GR32Bit:%vreg69
	JAL <BB#12>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#12>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#12>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#12>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#12

*** Renumbered SlotIndexes 5000-5504 ***

*** Renumbered SlotIndexes 4992-5528 ***

*** Renumbered SlotIndexes 4988-5540 ***
Creating pHyperOp bundles for CEs for bb8
  JAL <BB#12>
starting at   %vreg69<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg69
  JAL <BB#12>
starting at   JAL <BB#12>
  JAL <BB#12>
starting at   JAL <BB#12>
starting at   JAL <BB#12>
After bundling, state of BB8:BB#8: derived from LLVM BB %startup_starter3.if.then25
    Predecessors according to CFG: BB#7
	%vreg69<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg69
	  * %vreg65<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg65
	  * %vreg66<def> = ADDI %zero, <ga:@SG_MAX>[TF=3]; GR32Bit:%vreg66
	  * %vreg67<def> = ADD %vreg66, %vreg65; GR32Bit:%vreg67,%vreg66,%vreg65
	  * %vreg68<def> = FLW %vreg67, 0; mem:LD4[@SG_MAX] FP32Bit:%vreg68 GR32Bit:%vreg67
	  * FSW %vreg68, %vreg69, 0; mem:ST4[%4] FP32Bit:%vreg68 GR32Bit:%vreg69
	  * JAL <BB#12>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#12>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#12>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#12>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#12

-------------
Starting new basic block BB#9
********** MI Scheduling **********
startup_starter3:BB#9 startup_starter3.if.else28
  From: %vreg31<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg31
    To: JAL <BB#12>
 Remaining: 0
Max Pressure: GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 2
Excess PSets: 
3 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 1
  SU(3) in tree 1
  SU(4) in tree 1
  SU(5) in tree 1
  SU(6) in tree 2
  SU(7) in tree 2
  SU(8) in tree 2
  SU(9) in tree 2
SU(0):   %vreg31<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(1): Latency=5 Reg=%vreg31

SU(1):   SW %zero, %vreg31, 0; mem:ST4[%4] GR32Bit:%vreg31
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 5
  Height             : 0
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg31
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(2):   %vreg32<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(4): Latency=5 Reg=%vreg32

SU(3):   %vreg33<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(4): Latency=5 Reg=%vreg33

SU(4):   %vreg34<def> = ADD %vreg33, %vreg32; GR32Bit:%vreg34,%vreg33,%vreg32
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
   val SU(3): Latency=5 Reg=%vreg33
   val SU(2): Latency=5 Reg=%vreg32
  Successors:
   val SU(5): Latency=5 Reg=%vreg34

SU(5):   SW %zero, %vreg34, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg34
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 10
  Height             : 0
  Predecessors:
   val SU(4): Latency=5 Reg=%vreg34
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(6):   %vreg35<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(8): Latency=5 Reg=%vreg35

SU(7):   %vreg36<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg36
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(8): Latency=5 Reg=%vreg36

SU(8):   %vreg37<def> = ADD %vreg36, %vreg35; GR32Bit:%vreg37,%vreg36,%vreg35
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
   val SU(7): Latency=5 Reg=%vreg36
   val SU(6): Latency=5 Reg=%vreg35
  Successors:
   val SU(9): Latency=5 Reg=%vreg37

SU(9):   SW %zero, %vreg37, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg37
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 10
  Height             : 0
  Predecessors:
   val SU(8): Latency=5 Reg=%vreg37
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg31<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(1): Latency=5 Reg=%vreg31

SU(1):   SW %zero, %vreg31, 0; mem:ST4[%4] GR32Bit:%vreg31
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 5
  Height             : 0
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg31
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(2):   %vreg32<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(4): Latency=5 Reg=%vreg32

SU(3):   %vreg33<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(4): Latency=5 Reg=%vreg33

SU(4):   %vreg34<def> = ADD %vreg33, %vreg32; GR32Bit:%vreg34,%vreg33,%vreg32
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
   val SU(3): Latency=5 Reg=%vreg33
   val SU(2): Latency=5 Reg=%vreg32
  Successors:
   val SU(5): Latency=5 Reg=%vreg34

SU(5):   SW %zero, %vreg34, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg34
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 10
  Height             : 0
  Predecessors:
   val SU(4): Latency=5 Reg=%vreg34
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(6):   %vreg35<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(8): Latency=5 Reg=%vreg35

SU(7):   %vreg36<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg36
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(8): Latency=5 Reg=%vreg36

SU(8):   %vreg37<def> = ADD %vreg36, %vreg35; GR32Bit:%vreg37,%vreg36,%vreg35
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
   val SU(7): Latency=5 Reg=%vreg36
   val SU(6): Latency=5 Reg=%vreg35
  Successors:
   val SU(9): Latency=5 Reg=%vreg37

SU(9):   SW %zero, %vreg37, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg37
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 10
  Height             : 0
  Predecessors:
   val SU(8): Latency=5 Reg=%vreg37
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(3)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg33<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg33
handleMove 5156B -> 5128B: %vreg33<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg33
     %vreg33:	[5156r,5164r:0)  0@5156r
        -->	[5128r,5164r:0)  0@5128r
     zero:	[1396r,1396d:7)[1404r,1404d:6)[1412r,1412d:5)[1420r,1420d:4)[1428r,1428d:3)[1436r,1436d:2)[1444r,1444d:1)[1452r,1452d:0)  0@1452r 1@1444r 2@1436r 3@1428r 4@1420r 5@1412r 6@1404r 7@1396r
        -->	[1396r,1396d:7)[1404r,1404d:6)[1412r,1412d:5)[1420r,1420d:4)[1428r,1428d:3)[1436r,1436d:2)[1444r,1444d:1)[1452r,1452d:0)  0@1452r 1@1444r 2@1436r 3@1428r 4@1420r 5@1412r 6@1404r 7@1396r
Pick node SU(2)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg32<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg32

*** Renumbered SlotIndexes 5128-5552 ***
handleMove 5160B -> 5136B: %vreg32<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg32
     %vreg32:	[5160r,5176r:0)  0@5160r
        -->	[5136r,5176r:0)  0@5136r
Pick node SU(4)  ILP: 3 / 6 = 0.5 Tree: 1 @0
Scheduling %vreg34<def> = ADD %vreg33, %vreg32; GR32Bit:%vreg34,%vreg33,%vreg32
handleMove 5176B -> 5140B: %vreg34<def> = ADD %vreg33, %vreg32; GR32Bit:%vreg34,%vreg33,%vreg32
     %vreg34:	[5176r,5184r:0)  0@5176r
        -->	[5140r,5184r:0)  0@5140r
     %vreg33:	[5128r,5176r:0)  0@5128r
        -->	[5128r,5140r:0)  0@5128r
     %vreg32:	[5136r,5176r:0)  0@5136r
        -->	[5136r,5140r:0)  0@5136r
Pick node SU(5)  ILP: 4 / 11 = 0.363636 Tree: 1 @0
Scheduling SW %zero, %vreg34, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg34

*** Renumbered SlotIndexes 5140-5564 ***
handleMove 5196B -> 5148B: SW %zero, %vreg34, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg34
     zero:	[1396r,1396d:7)[1404r,1404d:6)[1412r,1412d:5)[1420r,1420d:4)[1428r,1428d:3)[1436r,1436d:2)[1444r,1444d:1)[1452r,1452d:0)  0@1452r 1@1444r 2@1436r 3@1428r 4@1420r 5@1412r 6@1404r 7@1396r
        -->	[1396r,1396d:7)[1404r,1404d:6)[1412r,1412d:5)[1420r,1420d:4)[1428r,1428d:3)[1436r,1436d:2)[1444r,1444d:1)[1452r,1452d:0)  0@1452r 1@1444r 2@1436r 3@1428r 4@1420r 5@1412r 6@1404r 7@1396r
     %vreg34:	[5140r,5196r:0)  0@5140r
        -->	[5140r,5148r:0)  0@5140r
Pick node SU(6)  ILP: 1 / 1 = 1 Tree: 2 @0
Scheduling %vreg35<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg35
handleMove 5204B -> 5152B: %vreg35<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg35
     %vreg35:	[5204r,5220r:0)  0@5204r
        -->	[5152r,5220r:0)  0@5152r
Pick node SU(7)  ILP: 1 / 1 = 1 Tree: 2 @0
Scheduling %vreg36<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg36

*** Renumbered SlotIndexes 5152-5576 ***
handleMove 5224B -> 5160B: %vreg36<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg36
     %vreg36:	[5224r,5232r:0)  0@5224r
        -->	[5160r,5232r:0)  0@5160r
     zero:	[1396r,1396d:7)[1404r,1404d:6)[1412r,1412d:5)[1420r,1420d:4)[1428r,1428d:3)[1436r,1436d:2)[1444r,1444d:1)[1452r,1452d:0)  0@1452r 1@1444r 2@1436r 3@1428r 4@1420r 5@1412r 6@1404r 7@1396r
        -->	[1396r,1396d:7)[1404r,1404d:6)[1412r,1412d:5)[1420r,1420d:4)[1428r,1428d:3)[1436r,1436d:2)[1444r,1444d:1)[1452r,1452d:0)  0@1452r 1@1444r 2@1436r 3@1428r 4@1420r 5@1412r 6@1404r 7@1396r
Pick node SU(8)  ILP: 3 / 6 = 0.5 Tree: 2 @0
Scheduling %vreg37<def> = ADD %vreg36, %vreg35; GR32Bit:%vreg37,%vreg36,%vreg35
handleMove 5232B -> 5164B: %vreg37<def> = ADD %vreg36, %vreg35; GR32Bit:%vreg37,%vreg36,%vreg35
     %vreg37:	[5232r,5240r:0)  0@5232r
        -->	[5164r,5240r:0)  0@5164r
     %vreg36:	[5160r,5232r:0)  0@5160r
        -->	[5160r,5164r:0)  0@5160r
     %vreg35:	[5152r,5232r:0)  0@5152r
        -->	[5152r,5164r:0)  0@5152r
Pick node SU(9)  ILP: 4 / 11 = 0.363636 Tree: 2 @0
Scheduling SW %zero, %vreg37, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg37

*** Renumbered SlotIndexes 5164-5588 ***
handleMove 5252B -> 5172B: SW %zero, %vreg37, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg37
     zero:	[1396r,1396d:7)[1404r,1404d:6)[1412r,1412d:5)[1420r,1420d:4)[1428r,1428d:3)[1436r,1436d:2)[1444r,1444d:1)[1452r,1452d:0)  0@1452r 1@1444r 2@1436r 3@1428r 4@1420r 5@1412r 6@1404r 7@1396r
        -->	[1396r,1396d:7)[1404r,1404d:6)[1412r,1412d:5)[1420r,1420d:4)[1428r,1428d:3)[1436r,1436d:2)[1444r,1444d:1)[1452r,1452d:0)  0@1452r 1@1444r 2@1436r 3@1428r 4@1420r 5@1412r 6@1404r 7@1396r
     %vreg37:	[5164r,5252r:0)  0@5164r
        -->	[5164r,5172r:0)  0@5164r
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg31<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg31
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling SW %zero, %vreg31, 0; mem:ST4[%4] GR32Bit:%vreg31
*** Final schedule for BB#9 ***
SU(3):   %vreg33<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg33
SU(2):   %vreg32<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg32
SU(4):   %vreg34<def> = ADD %vreg33, %vreg32; GR32Bit:%vreg34,%vreg33,%vreg32
SU(5):   SW %zero, %vreg34, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg34
SU(6):   %vreg35<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg35
SU(7):   %vreg36<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg36
SU(8):   %vreg37<def> = ADD %vreg36, %vreg35; GR32Bit:%vreg37,%vreg36,%vreg35
SU(9):   SW %zero, %vreg37, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg37
SU(0):   %vreg31<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg31
SU(1):   SW %zero, %vreg31, 0; mem:ST4[%4] GR32Bit:%vreg31

Partitioning instructions of the region into multiple CEs
instr:  %vreg33<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg33
instr:  %vreg32<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg32
instr:  %vreg34<def> = ADD %vreg33, %vreg32; GR32Bit:%vreg34,%vreg33,%vreg32
instr:  SW %zero, %vreg34, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg34
instr:  %vreg35<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg35
instr:  %vreg36<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg36
instr:  %vreg37<def> = ADD %vreg36, %vreg35; GR32Bit:%vreg37,%vreg36,%vreg35
instr:  SW %zero, %vreg37, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg37
instr:  %vreg31<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg31
instr:  SW %zero, %vreg31, 0; mem:ST4[%4] GR32Bit:%vreg31

*** Renumbered SlotIndexes 5264-5600 ***

*** Renumbered SlotIndexes 5276-5612 ***

*** Renumbered SlotIndexes 5288-5624 ***

*** Renumbered SlotIndexes 5300-5636 ***

*** Renumbered SlotIndexes 5312-5648 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
After Shuffling regions of basic block, state of BB#9:
BB#9: derived from LLVM BB %startup_starter3.if.else28
    Predecessors according to CFG: BB#3
	%vreg33<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg33
	%vreg32<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg32
	%vreg34<def> = ADD %vreg33, %vreg32; GR32Bit:%vreg34,%vreg33,%vreg32
	SW %zero, %vreg34, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg34
	%vreg35<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg35
	%vreg36<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg36
	%vreg37<def> = ADD %vreg36, %vreg35; GR32Bit:%vreg37,%vreg36,%vreg35
	SW %zero, %vreg37, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg37
	%vreg31<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg31
	SW %zero, %vreg31, 0; mem:ST4[%4] GR32Bit:%vreg31
	JAL <BB#12>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#12>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#12>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#12>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#12

*** Renumbered SlotIndexes 5272-5680 ***

*** Renumbered SlotIndexes 5264-5704 ***

*** Renumbered SlotIndexes 5260-5716 ***
Creating pHyperOp bundles for CEs for bb9
  JAL <BB#12>
starting at   %vreg33<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg33
  JAL <BB#12>
starting at   JAL <BB#12>
  JAL <BB#12>
starting at   JAL <BB#12>
starting at   JAL <BB#12>
After bundling, state of BB9:BB#9: derived from LLVM BB %startup_starter3.if.else28
    Predecessors according to CFG: BB#3
	%vreg33<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg33
	  * %vreg32<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg32
	  * %vreg34<def> = ADD %vreg33, %vreg32; GR32Bit:%vreg34,%vreg33,%vreg32
	  * SW %zero, %vreg34, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg34
	  * %vreg35<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg35
	  * %vreg36<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg36
	  * %vreg37<def> = ADD %vreg36, %vreg35; GR32Bit:%vreg37,%vreg36,%vreg35
	  * SW %zero, %vreg37, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg37
	  * %vreg31<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg31
	  * SW %zero, %vreg31, 0; mem:ST4[%4] GR32Bit:%vreg31
	  * JAL <BB#12>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#12>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#12>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#12>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#12

-------------
Starting new basic block BB#10
********** MI Scheduling **********
startup_starter3:BB#10 startup_starter3.if.then9
  From: %vreg70<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg70
    To: JAL <BB#12>
 Remaining: 0
Max Pressure: FP32Bit=2
GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 2
GR32BitLimit 32 Actual 2
Excess PSets: 
2 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 0
  SU(5) in tree 0
  SU(6) in tree 0
  SU(7) in tree 0
  SU(8) in tree 0
  SU(9) in tree 0
  SU(10) in tree 0
  SU(11) in tree 0
  SU(12) in tree 0
  SU(13) in tree 0
  SU(14) in tree 0
  SU(15) in tree 1
  SU(16) in tree 1
  SU(17) in tree 1
  SU(18) in tree 1
  SU(19) in tree 1
  SU(20) in tree 1
SU(0):   %vreg70<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg70
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 34
  Successors:
   val SU(2): Latency=5 Reg=%vreg70

SU(1):   %vreg71<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg71
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 34
  Successors:
   val SU(2): Latency=5 Reg=%vreg71

SU(2):   %vreg72<def> = ADD %vreg71, %vreg70; GR32Bit:%vreg72,%vreg71,%vreg70
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 29
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg71
   val SU(0): Latency=5 Reg=%vreg70
  Successors:
   val SU(3): Latency=5 Reg=%vreg72

SU(3):   %vreg73<def> = FLW %vreg72, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg73 GR32Bit:%vreg72
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 24
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg72
  Successors:
   val SU(9): Latency=15 Reg=%vreg73

SU(4):   %vreg74<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg74
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 54
  Successors:
   val SU(5): Latency=5 Reg=%vreg74

SU(5):   %vreg75<def> = LW %vreg74, 0; mem:LD4[%2] GR32Bit:%vreg75,%vreg74
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 49
  Predecessors:
   val SU(4): Latency=5 Reg=%vreg74
  Successors:
   val SU(6): Latency=15 Reg=%vreg75

SU(6):   %vreg76<def> = LW %vreg75, 4; mem:LD4[%47] GR32Bit:%vreg76,%vreg75
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 14
  Depth              : 20
  Height             : 34
  Predecessors:
   val SU(5): Latency=15 Reg=%vreg75
  Successors:
   val SU(7): Latency=15 Reg=%vreg76
   ch  SU(20): Latency=0
   ch  SU(14): Latency=0

SU(7):   %vreg77<def> = ADDI %vreg76, -350; GR32Bit:%vreg77,%vreg76
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 35
  Height             : 19
  Predecessors:
   val SU(6): Latency=15 Reg=%vreg76
  Successors:
   val SU(8): Latency=5 Reg=%vreg77

SU(8):   %vreg78<def> = FCVT_S_W_RDY %vreg77; FP32Bit:%vreg78 GR32Bit:%vreg77
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 40
  Height             : 14
  Predecessors:
   val SU(7): Latency=5 Reg=%vreg77
  Successors:
   val SU(9): Latency=5 Reg=%vreg78

SU(9):   %vreg79<def> = FMUL_S_RDY %vreg78, %vreg73; FP32Bit:%vreg79,%vreg78,%vreg73
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 45
  Height             : 9
  Predecessors:
   val SU(8): Latency=5 Reg=%vreg78
   val SU(3): Latency=15 Reg=%vreg73
  Successors:
   val SU(12): Latency=5 Reg=%vreg79

SU(10):   %vreg80<def> = ADDI %zero, 1140457472; GR32Bit:%vreg80
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
   val SU(11): Latency=4 Reg=%vreg80

SU(11):   %vreg82<def> = COPY %vreg80; FP32Bit:%vreg82 GR32Bit:%vreg80
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 4
  Predecessors:
   val SU(10): Latency=4 Reg=%vreg80
  Successors:
   val SU(12): Latency=0 Reg=%vreg82

SU(12):   %vreg81<def> = FDIV_S_RDY %vreg82, %vreg79; FP32Bit:%vreg81,%vreg82,%vreg79
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 50
  Height             : 4
  Predecessors:
   val SU(9): Latency=5 Reg=%vreg79
   val SU(11): Latency=0 Reg=%vreg82
  Successors:
   val SU(14): Latency=4 Reg=%vreg81

SU(13):   %vreg83<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg83
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(14): Latency=5 Reg=%vreg83

SU(14):   FSW %vreg81, %vreg83, 0; mem:ST4[%4] FP32Bit:%vreg81 GR32Bit:%vreg83
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 54
  Height             : 0
  Predecessors:
   val SU(12): Latency=4 Reg=%vreg81
   val SU(13): Latency=5 Reg=%vreg83
   ch  SU(6): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(15):   %vreg84<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg84
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
   val SU(16): Latency=5 Reg=%vreg84

SU(16):   %vreg85<def> = FLW %vreg84, 0; mem:LD4[%3] FP32Bit:%vreg85 GR32Bit:%vreg84
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 2
  Predecessors:
   val SU(15): Latency=5 Reg=%vreg84
  Successors:
   val SU(20): Latency=2 Reg=%vreg85

SU(17):   %vreg86<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg86
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(19): Latency=5 Reg=%vreg86

SU(18):   %vreg87<def> = ADDI %zero, <ga:@nh_fin_de_rampe>[TF=3]; GR32Bit:%vreg87
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(19): Latency=5 Reg=%vreg87

SU(19):   %vreg88<def> = ADD %vreg87, %vreg86; GR32Bit:%vreg88,%vreg87,%vreg86
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
   val SU(18): Latency=5 Reg=%vreg87
   val SU(17): Latency=5 Reg=%vreg86
  Successors:
   val SU(20): Latency=5 Reg=%vreg88

SU(20):   FSW %vreg85, %vreg88, 0; mem:ST4[@nh_fin_de_rampe] FP32Bit:%vreg85 GR32Bit:%vreg88
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 20
  Height             : 0
  Predecessors:
   val SU(16): Latency=2 Reg=%vreg85
   val SU(19): Latency=5 Reg=%vreg88
   ch  SU(6): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg70<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg70
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 34
  Successors:
   val SU(2): Latency=5 Reg=%vreg70

SU(1):   %vreg71<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg71
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 34
  Successors:
   val SU(2): Latency=5 Reg=%vreg71

SU(2):   %vreg72<def> = ADD %vreg71, %vreg70; GR32Bit:%vreg72,%vreg71,%vreg70
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 29
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg71
   val SU(0): Latency=5 Reg=%vreg70
  Successors:
   val SU(3): Latency=5 Reg=%vreg72

SU(3):   %vreg73<def> = FLW %vreg72, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg73 GR32Bit:%vreg72
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 24
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg72
  Successors:
   val SU(9): Latency=15 Reg=%vreg73

SU(4):   %vreg74<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg74
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 54
  Successors:
   val SU(5): Latency=5 Reg=%vreg74

SU(5):   %vreg75<def> = LW %vreg74, 0; mem:LD4[%2] GR32Bit:%vreg75,%vreg74
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 49
  Predecessors:
   val SU(4): Latency=5 Reg=%vreg74
  Successors:
   val SU(6): Latency=15 Reg=%vreg75

SU(6):   %vreg76<def> = LW %vreg75, 4; mem:LD4[%47] GR32Bit:%vreg76,%vreg75
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 14
  Depth              : 20
  Height             : 34
  Predecessors:
   val SU(5): Latency=15 Reg=%vreg75
  Successors:
   val SU(7): Latency=15 Reg=%vreg76
   ch  SU(20): Latency=0
   ch  SU(14): Latency=0

SU(7):   %vreg77<def> = ADDI %vreg76, -350; GR32Bit:%vreg77,%vreg76
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 35
  Height             : 19
  Predecessors:
   val SU(6): Latency=15 Reg=%vreg76
  Successors:
   val SU(8): Latency=5 Reg=%vreg77

SU(8):   %vreg78<def> = FCVT_S_W_RDY %vreg77; FP32Bit:%vreg78 GR32Bit:%vreg77
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 40
  Height             : 14
  Predecessors:
   val SU(7): Latency=5 Reg=%vreg77
  Successors:
   val SU(9): Latency=5 Reg=%vreg78

SU(9):   %vreg79<def> = FMUL_S_RDY %vreg78, %vreg73; FP32Bit:%vreg79,%vreg78,%vreg73
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 45
  Height             : 9
  Predecessors:
   val SU(8): Latency=5 Reg=%vreg78
   val SU(3): Latency=15 Reg=%vreg73
  Successors:
   val SU(12): Latency=5 Reg=%vreg79

SU(10):   %vreg80<def> = ADDI %zero, 1140457472; GR32Bit:%vreg80
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
   val SU(11): Latency=4 Reg=%vreg80

SU(11):   %vreg82<def> = COPY %vreg80; FP32Bit:%vreg82 GR32Bit:%vreg80
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 4
  Predecessors:
   val SU(10): Latency=4 Reg=%vreg80
  Successors:
   val SU(12): Latency=0 Reg=%vreg82

SU(12):   %vreg81<def> = FDIV_S_RDY %vreg82, %vreg79; FP32Bit:%vreg81,%vreg82,%vreg79
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 50
  Height             : 4
  Predecessors:
   val SU(9): Latency=5 Reg=%vreg79
   val SU(11): Latency=0 Reg=%vreg82
  Successors:
   val SU(14): Latency=4 Reg=%vreg81

SU(13):   %vreg83<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg83
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(14): Latency=5 Reg=%vreg83

SU(14):   FSW %vreg81, %vreg83, 0; mem:ST4[%4] FP32Bit:%vreg81 GR32Bit:%vreg83
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 54
  Height             : 0
  Predecessors:
   val SU(12): Latency=4 Reg=%vreg81
   val SU(13): Latency=5 Reg=%vreg83
   ch  SU(6): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(15):   %vreg84<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg84
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
   val SU(16): Latency=5 Reg=%vreg84

SU(16):   %vreg85<def> = FLW %vreg84, 0; mem:LD4[%3] FP32Bit:%vreg85 GR32Bit:%vreg84
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 2
  Predecessors:
   val SU(15): Latency=5 Reg=%vreg84
  Successors:
   val SU(20): Latency=2 Reg=%vreg85

SU(17):   %vreg86<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg86
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(19): Latency=5 Reg=%vreg86

SU(18):   %vreg87<def> = ADDI %zero, <ga:@nh_fin_de_rampe>[TF=3]; GR32Bit:%vreg87
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(19): Latency=5 Reg=%vreg87

SU(19):   %vreg88<def> = ADD %vreg87, %vreg86; GR32Bit:%vreg88,%vreg87,%vreg86
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
   val SU(18): Latency=5 Reg=%vreg87
   val SU(17): Latency=5 Reg=%vreg86
  Successors:
   val SU(20): Latency=5 Reg=%vreg88

SU(20):   FSW %vreg85, %vreg88, 0; mem:ST4[@nh_fin_de_rampe] FP32Bit:%vreg85 GR32Bit:%vreg88
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 20
  Height             : 0
  Predecessors:
   val SU(16): Latency=2 Reg=%vreg85
   val SU(19): Latency=5 Reg=%vreg88
   ch  SU(6): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(17)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg86<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg86
handleMove 5540B -> 5400B: %vreg86<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg86
     %vreg86:	[5540r,5556r:0)  0@5540r
        -->	[5400r,5556r:0)  0@5400r
Pick node SU(15)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg84<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg84

*** Renumbered SlotIndexes 5400-5728 ***
handleMove 5536B -> 5408B: %vreg84<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg84
     %vreg84:	[5536r,5544r:0)  0@5536r
        -->	[5408r,5544r:0)  0@5408r
     t5:	EMPTY
        -->	EMPTY
Pick node SU(18)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg87<def> = ADDI %zero, <ga:@nh_fin_de_rampe>[TF=3]; GR32Bit:%vreg87
handleMove 5560B -> 5412B: %vreg87<def> = ADDI %zero, <ga:@nh_fin_de_rampe>[TF=3]; GR32Bit:%vreg87
     %vreg87:	[5560r,5568r:0)  0@5560r
        -->	[5412r,5568r:0)  0@5412r
     zero:	[1396r,1396d:7)[1404r,1404d:6)[1412r,1412d:5)[1420r,1420d:4)[1428r,1428d:3)[1436r,1436d:2)[1444r,1444d:1)[1452r,1452d:0)  0@1452r 1@1444r 2@1436r 3@1428r 4@1420r 5@1412r 6@1404r 7@1396r
        -->	[1396r,1396d:7)[1404r,1404d:6)[1412r,1412d:5)[1420r,1420d:4)[1428r,1428d:3)[1436r,1436d:2)[1444r,1444d:1)[1452r,1452d:0)  0@1452r 1@1444r 2@1436r 3@1428r 4@1420r 5@1412r 6@1404r 7@1396r
Pick node SU(19)  ILP: 3 / 6 = 0.5 Tree: 1 @0
Scheduling %vreg88<def> = ADD %vreg87, %vreg86; GR32Bit:%vreg88,%vreg87,%vreg86

*** Renumbered SlotIndexes 5412-5740 ***
handleMove 5580B -> 5420B: %vreg88<def> = ADD %vreg87, %vreg86; GR32Bit:%vreg88,%vreg87,%vreg86
     %vreg88:	[5580r,5588r:0)  0@5580r
        -->	[5420r,5588r:0)  0@5420r
     %vreg87:	[5412r,5580r:0)  0@5412r
        -->	[5412r,5420r:0)  0@5412r
     %vreg86:	[5400r,5580r:0)  0@5400r
        -->	[5400r,5420r:0)  0@5400r
Pick node SU(16)  ILP: 2 / 6 = 0.333333 Tree: 1 @0
Scheduling %vreg85<def> = FLW %vreg84, 0; mem:LD4[%3] FP32Bit:%vreg85 GR32Bit:%vreg84
handleMove 5556B -> 5424B: %vreg85<def> = FLW %vreg84, 0; mem:LD4[%3] FP32Bit:%vreg85 GR32Bit:%vreg84
     %vreg85:	[5556r,5588r:0)  0@5556r
        -->	[5424r,5588r:0)  0@5424r
     %vreg84:	[5408r,5556r:0)  0@5408r
        -->	[5408r,5424r:0)  0@5408r
Pick node SU(10)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg80<def> = ADDI %zero, 1140457472; GR32Bit:%vreg80

*** Renumbered SlotIndexes 5424-5752 ***
handleMove 5520B -> 5432B: %vreg80<def> = ADDI %zero, 1140457472; GR32Bit:%vreg80
     %vreg80:	[5520r,5528r:0)  0@5520r
        -->	[5432r,5528r:0)  0@5432r
     zero:	[1396r,1396d:7)[1404r,1404d:6)[1412r,1412d:5)[1420r,1420d:4)[1428r,1428d:3)[1436r,1436d:2)[1444r,1444d:1)[1452r,1452d:0)  0@1452r 1@1444r 2@1436r 3@1428r 4@1420r 5@1412r 6@1404r 7@1396r
        -->	[1396r,1396d:7)[1404r,1404d:6)[1412r,1412d:5)[1420r,1420d:4)[1428r,1428d:3)[1436r,1436d:2)[1444r,1444d:1)[1452r,1452d:0)  0@1452r 1@1444r 2@1436r 3@1428r 4@1420r 5@1412r 6@1404r 7@1396r
Pick node SU(4)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg74<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg74
handleMove 5472B -> 5436B: %vreg74<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg74
     %vreg74:	[5472r,5480r:0)  0@5472r
        -->	[5436r,5480r:0)  0@5436r
     t5:	EMPTY
        -->	EMPTY
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg70<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg70
Pick node SU(13)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg83<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg83
handleMove 5544B -> 5444B: %vreg83<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg83
     %vreg83:	[5544r,5552r:0)  0@5544r
        -->	[5444r,5552r:0)  0@5444r
     t5:	EMPTY
        -->	EMPTY
Pick node SU(1)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg71<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg71
Pick node SU(2)  ILP: 3 / 6 = 0.5 Tree: 0 @0
Scheduling %vreg72<def> = ADD %vreg71, %vreg70; GR32Bit:%vreg72,%vreg71,%vreg70
Pick node SU(3)  ILP: 4 / 11 = 0.363636 Tree: 0 @0
Scheduling %vreg73<def> = FLW %vreg72, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg73 GR32Bit:%vreg72
Pick node SU(5)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg75<def> = LW %vreg74, 0; mem:LD4[%2] GR32Bit:%vreg75,%vreg74
Pick node SU(11)  ILP: 1 / 5 = 0.2 Tree: 0 @0
Scheduling %vreg82<def> = COPY %vreg80; FP32Bit:%vreg82 GR32Bit:%vreg80
handleMove 5528B -> 5484B: %vreg82<def> = COPY %vreg80; FP32Bit:%vreg82 GR32Bit:%vreg80
     %vreg82:	[5528r,5536r:0)  0@5528r
        -->	[5484r,5536r:0)  0@5484r
     %vreg80:	[5432r,5528r:0)  0@5432r
        -->	[5432r,5484r:0)  0@5432r
Pick node SU(6)  ILP: 3 / 21 = 0.142857 Tree: 0 @0
Scheduling %vreg76<def> = LW %vreg75, 4; mem:LD4[%47] GR32Bit:%vreg76,%vreg75
Pick node SU(20)  ILP: 6 / 21 = 0.285714 Tree: 1 @0
Scheduling FSW %vreg85, %vreg88, 0; mem:ST4[@nh_fin_de_rampe] FP32Bit:%vreg85 GR32Bit:%vreg88
handleMove 5600B -> 5492B: FSW %vreg85, %vreg88, 0; mem:ST4[@nh_fin_de_rampe] FP32Bit:%vreg85 GR32Bit:%vreg88
     %vreg85:	[5424r,5600r:0)  0@5424r
        -->	[5424r,5492r:0)  0@5424r
     %vreg88:	[5420r,5600r:0)  0@5420r
        -->	[5420r,5492r:0)  0@5420r
Pick node SU(7)  ILP: 4 / 36 = 0.111111 Tree: 0 @0
Scheduling %vreg77<def> = ADDI %vreg76, -350; GR32Bit:%vreg77,%vreg76
Pick node SU(8)  ILP: 5 / 41 = 0.121951 Tree: 0 @0
Scheduling %vreg78<def> = FCVT_S_W_RDY %vreg77; FP32Bit:%vreg78 GR32Bit:%vreg77
Pick node SU(9)  ILP: 10 / 46 = 0.217391 Tree: 0 @0
Scheduling %vreg79<def> = FMUL_S_RDY %vreg78, %vreg73; FP32Bit:%vreg79,%vreg78,%vreg73
Pick node SU(12)  ILP: 12 / 51 = 0.235294 Tree: 0 @0
Scheduling %vreg81<def> = FDIV_S_RDY %vreg82, %vreg79; FP32Bit:%vreg81,%vreg82,%vreg79
Pick node SU(14)  ILP: 14 / 55 = 0.254545 Tree: 0 @0
Scheduling FSW %vreg81, %vreg83, 0; mem:ST4[%4] FP32Bit:%vreg81 GR32Bit:%vreg83
*** Final schedule for BB#10 ***
SU(17):   %vreg86<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg86
SU(15):   %vreg84<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg84
SU(18):   %vreg87<def> = ADDI %zero, <ga:@nh_fin_de_rampe>[TF=3]; GR32Bit:%vreg87
SU(19):   %vreg88<def> = ADD %vreg87, %vreg86; GR32Bit:%vreg88,%vreg87,%vreg86
SU(16):   %vreg85<def> = FLW %vreg84, 0; mem:LD4[%3] FP32Bit:%vreg85 GR32Bit:%vreg84
SU(10):   %vreg80<def> = ADDI %zero, 1140457472; GR32Bit:%vreg80
SU(4):   %vreg74<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg74
SU(0):   %vreg70<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg70
SU(13):   %vreg83<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg83
SU(1):   %vreg71<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg71
SU(2):   %vreg72<def> = ADD %vreg71, %vreg70; GR32Bit:%vreg72,%vreg71,%vreg70
SU(3):   %vreg73<def> = FLW %vreg72, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg73 GR32Bit:%vreg72
SU(5):   %vreg75<def> = LW %vreg74, 0; mem:LD4[%2] GR32Bit:%vreg75,%vreg74
SU(11):   %vreg82<def> = COPY %vreg80; FP32Bit:%vreg82 GR32Bit:%vreg80
SU(6):   %vreg76<def> = LW %vreg75, 4; mem:LD4[%47] GR32Bit:%vreg76,%vreg75
SU(20):   FSW %vreg85, %vreg88, 0; mem:ST4[@nh_fin_de_rampe] FP32Bit:%vreg85 GR32Bit:%vreg88
SU(7):   %vreg77<def> = ADDI %vreg76, -350; GR32Bit:%vreg77,%vreg76
SU(8):   %vreg78<def> = FCVT_S_W_RDY %vreg77; FP32Bit:%vreg78 GR32Bit:%vreg77
SU(9):   %vreg79<def> = FMUL_S_RDY %vreg78, %vreg73; FP32Bit:%vreg79,%vreg78,%vreg73
SU(12):   %vreg81<def> = FDIV_S_RDY %vreg82, %vreg79; FP32Bit:%vreg81,%vreg82,%vreg79
SU(14):   FSW %vreg81, %vreg83, 0; mem:ST4[%4] FP32Bit:%vreg81 GR32Bit:%vreg83

Partitioning instructions of the region into multiple CEs
instr:  %vreg86<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg86
instr:  %vreg84<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg84
instr:  %vreg87<def> = ADDI %zero, <ga:@nh_fin_de_rampe>[TF=3]; GR32Bit:%vreg87
instr:  %vreg88<def> = ADD %vreg87, %vreg86; GR32Bit:%vreg88,%vreg87,%vreg86
instr:  %vreg85<def> = FLW %vreg84, 0; mem:LD4[%3] FP32Bit:%vreg85 GR32Bit:%vreg84
instr:  %vreg80<def> = ADDI %zero, 1140457472; GR32Bit:%vreg80
instr:  %vreg74<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg74
instr:  %vreg70<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg70
instr:  %vreg83<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg83
instr:  %vreg71<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg71
instr:  %vreg72<def> = ADD %vreg71, %vreg70; GR32Bit:%vreg72,%vreg71,%vreg70
instr:  %vreg73<def> = FLW %vreg72, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg73 GR32Bit:%vreg72
instr:  %vreg75<def> = LW %vreg74, 0; mem:LD4[%2] GR32Bit:%vreg75,%vreg74
instr:  %vreg82<def> = COPY %vreg80; FP32Bit:%vreg82 GR32Bit:%vreg80
instr:  %vreg76<def> = LW %vreg75, 4; mem:LD4[%47] GR32Bit:%vreg76,%vreg75
instr:  FSW %vreg85, %vreg88, 0; mem:ST4[@nh_fin_de_rampe] FP32Bit:%vreg85 GR32Bit:%vreg88
instr:  %vreg77<def> = ADDI %vreg76, -350; GR32Bit:%vreg77,%vreg76
instr:  %vreg78<def> = FCVT_S_W_RDY %vreg77; FP32Bit:%vreg78 GR32Bit:%vreg77
instr:  %vreg79<def> = FMUL_S_RDY %vreg78, %vreg73; FP32Bit:%vreg79,%vreg78,%vreg73
instr:  %vreg81<def> = FDIV_S_RDY %vreg82, %vreg79; FP32Bit:%vreg81,%vreg82,%vreg79
instr:  FSW %vreg81, %vreg83, 0; mem:ST4[%4] FP32Bit:%vreg81 GR32Bit:%vreg83

*** Renumbered SlotIndexes 5612-5764 ***

*** Renumbered SlotIndexes 5624-5776 ***

*** Renumbered SlotIndexes 5636-5788 ***

*** Renumbered SlotIndexes 5648-5800 ***

*** Renumbered SlotIndexes 5660-5812 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
After Shuffling regions of basic block, state of BB#10:
BB#10: derived from LLVM BB %startup_starter3.if.then9
    Predecessors according to CFG: BB#2
	%vreg86<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg86
	%vreg84<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg84
	%vreg87<def> = ADDI %zero, <ga:@nh_fin_de_rampe>[TF=3]; GR32Bit:%vreg87
	%vreg88<def> = ADD %vreg87, %vreg86; GR32Bit:%vreg88,%vreg87,%vreg86
	%vreg85<def> = FLW %vreg84, 0; mem:LD4[%3] FP32Bit:%vreg85 GR32Bit:%vreg84
	%vreg80<def> = ADDI %zero, 1140457472; GR32Bit:%vreg80
	%vreg74<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg74
	%vreg70<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg70
	%vreg83<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg83
	%vreg71<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg71
	%vreg72<def> = ADD %vreg71, %vreg70; GR32Bit:%vreg72,%vreg71,%vreg70
	%vreg73<def> = FLW %vreg72, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg73 GR32Bit:%vreg72
	%vreg75<def> = LW %vreg74, 0; mem:LD4[%2] GR32Bit:%vreg75,%vreg74
	%vreg82<def> = COPY %vreg80; FP32Bit:%vreg82 GR32Bit:%vreg80
	%vreg76<def> = LW %vreg75, 4; mem:LD4[%47] GR32Bit:%vreg76,%vreg75
	FSW %vreg85, %vreg88, 0; mem:ST4[@nh_fin_de_rampe] FP32Bit:%vreg85 GR32Bit:%vreg88
	%vreg77<def> = ADDI %vreg76, -350; GR32Bit:%vreg77,%vreg76
	%vreg78<def> = FCVT_S_W_RDY %vreg77; FP32Bit:%vreg78 GR32Bit:%vreg77
	%vreg79<def> = FMUL_S_RDY %vreg78, %vreg73; FP32Bit:%vreg79,%vreg78,%vreg73
	%vreg81<def> = FDIV_S_RDY %vreg82, %vreg79; FP32Bit:%vreg81,%vreg82,%vreg79
	FSW %vreg81, %vreg83, 0; mem:ST4[%4] FP32Bit:%vreg81 GR32Bit:%vreg83
	JAL <BB#12>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#12>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#12>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#12>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#12

*** Renumbered SlotIndexes 5620-5844 ***

*** Renumbered SlotIndexes 5612-5868 ***

*** Renumbered SlotIndexes 5608-5880 ***
Creating pHyperOp bundles for CEs for bb10
  JAL <BB#12>
starting at   %vreg86<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg86
  JAL <BB#12>
starting at   JAL <BB#12>
  JAL <BB#12>
starting at   JAL <BB#12>
starting at   JAL <BB#12>
After bundling, state of BB10:BB#10: derived from LLVM BB %startup_starter3.if.then9
    Predecessors according to CFG: BB#2
	%vreg86<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg86
	  * %vreg84<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg84
	  * %vreg87<def> = ADDI %zero, <ga:@nh_fin_de_rampe>[TF=3]; GR32Bit:%vreg87
	  * %vreg88<def> = ADD %vreg87, %vreg86; GR32Bit:%vreg88,%vreg87,%vreg86
	  * %vreg85<def> = FLW %vreg84, 0; mem:LD4[%3] FP32Bit:%vreg85 GR32Bit:%vreg84
	  * %vreg80<def> = ADDI %zero, 1140457472; GR32Bit:%vreg80
	  * %vreg74<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg74
	  * %vreg70<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg70
	  * %vreg83<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg83
	  * %vreg71<def> = ADDI %zero, <ga:@SG_RAMP_MAX>[TF=3]; GR32Bit:%vreg71
	  * %vreg72<def> = ADD %vreg71, %vreg70; GR32Bit:%vreg72,%vreg71,%vreg70
	  * %vreg73<def> = FLW %vreg72, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg73 GR32Bit:%vreg72
	  * %vreg75<def> = LW %vreg74, 0; mem:LD4[%2] GR32Bit:%vreg75,%vreg74
	  * %vreg82<def> = COPY %vreg80; FP32Bit:%vreg82 GR32Bit:%vreg80
	  * %vreg76<def> = LW %vreg75, 4; mem:LD4[%47] GR32Bit:%vreg76,%vreg75
	  * FSW %vreg85, %vreg88, 0; mem:ST4[@nh_fin_de_rampe] FP32Bit:%vreg85 GR32Bit:%vreg88
	  * %vreg77<def> = ADDI %vreg76, -350; GR32Bit:%vreg77,%vreg76
	  * %vreg78<def> = FCVT_S_W_RDY %vreg77; FP32Bit:%vreg78 GR32Bit:%vreg77
	  * %vreg79<def> = FMUL_S_RDY %vreg78, %vreg73; FP32Bit:%vreg79,%vreg78,%vreg73
	  * %vreg81<def> = FDIV_S_RDY %vreg82, %vreg79; FP32Bit:%vreg81,%vreg82,%vreg79
	  * FSW %vreg81, %vreg83, 0; mem:ST4[%4] FP32Bit:%vreg81 GR32Bit:%vreg83
	  * JAL <BB#12>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#12>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#12>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#12>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#12

-------------
Starting new basic block BB#11
********** MI Scheduling **********
startup_starter3:BB#11 startup_starter3.if.then
  From: %vreg89<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg89
    To: End Remaining: 0
Max Pressure: GR32Bit=3
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 3
Excess PSets: 
3 subtrees:
  SU(0) in tree 0
  SU(1) in tree 1
  SU(2) in tree 0
  SU(3) in tree 1
  SU(4) in tree 1
  SU(5) in tree 1
  SU(6) in tree 1
  SU(7) in tree 2
  SU(8) in tree 2
  SU(9) in tree 2
  SU(10) in tree 2
SU(0):   %vreg89<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg89
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(2): Latency=5 Reg=%vreg89

SU(1):   %vreg90<def> = ADDI %zero, 1; GR32Bit:%vreg90
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
   val SU(6): Latency=4 Reg=%vreg90

SU(2):   SW %zero, %vreg89, 0; mem:ST4[%4] GR32Bit:%vreg89
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 5
  Height             : 0
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg89
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(3):   %vreg91<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg91
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(5): Latency=5 Reg=%vreg91

SU(4):   %vreg92<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg92
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(5): Latency=5 Reg=%vreg92

SU(5):   %vreg93<def> = ADD %vreg92, %vreg91; GR32Bit:%vreg93,%vreg92,%vreg91
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
   val SU(4): Latency=5 Reg=%vreg92
   val SU(3): Latency=5 Reg=%vreg91
  Successors:
   val SU(6): Latency=5 Reg=%vreg93

SU(6):   SW %vreg90, %vreg93, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg90,%vreg93
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 10
  Height             : 0
  Predecessors:
   val SU(5): Latency=5 Reg=%vreg93
   val SU(1): Latency=4 Reg=%vreg90
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(7):   %vreg94<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg94
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(9): Latency=5 Reg=%vreg94

SU(8):   %vreg95<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg95
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(9): Latency=5 Reg=%vreg95

SU(9):   %vreg96<def> = ADD %vreg95, %vreg94; GR32Bit:%vreg96,%vreg95,%vreg94
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
   val SU(8): Latency=5 Reg=%vreg95
   val SU(7): Latency=5 Reg=%vreg94
  Successors:
   val SU(10): Latency=5 Reg=%vreg96

SU(10):   SW %zero, %vreg96, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg96
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 10
  Height             : 0
  Predecessors:
   val SU(9): Latency=5 Reg=%vreg96
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg89<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg89
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(2): Latency=5 Reg=%vreg89

SU(1):   %vreg90<def> = ADDI %zero, 1; GR32Bit:%vreg90
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
   val SU(6): Latency=4 Reg=%vreg90

SU(2):   SW %zero, %vreg89, 0; mem:ST4[%4] GR32Bit:%vreg89
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 5
  Height             : 0
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg89
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(3):   %vreg91<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg91
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(5): Latency=5 Reg=%vreg91

SU(4):   %vreg92<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg92
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(5): Latency=5 Reg=%vreg92

SU(5):   %vreg93<def> = ADD %vreg92, %vreg91; GR32Bit:%vreg93,%vreg92,%vreg91
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
   val SU(4): Latency=5 Reg=%vreg92
   val SU(3): Latency=5 Reg=%vreg91
  Successors:
   val SU(6): Latency=5 Reg=%vreg93

SU(6):   SW %vreg90, %vreg93, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg90,%vreg93
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 10
  Height             : 0
  Predecessors:
   val SU(5): Latency=5 Reg=%vreg93
   val SU(1): Latency=4 Reg=%vreg90
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(7):   %vreg94<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg94
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(9): Latency=5 Reg=%vreg94

SU(8):   %vreg95<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg95
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(9): Latency=5 Reg=%vreg95

SU(9):   %vreg96<def> = ADD %vreg95, %vreg94; GR32Bit:%vreg96,%vreg95,%vreg94
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
   val SU(8): Latency=5 Reg=%vreg95
   val SU(7): Latency=5 Reg=%vreg94
  Successors:
   val SU(10): Latency=5 Reg=%vreg96

SU(10):   SW %zero, %vreg96, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg96
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 10
  Height             : 0
  Predecessors:
   val SU(9): Latency=5 Reg=%vreg96
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(8)  ILP: 1 / 1 = 1 Tree: 2 @0
Scheduling %vreg95<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg95
handleMove 5816B -> 5748B: %vreg95<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg95
     %vreg95:	[5816r,5824r:0)  0@5816r
        -->	[5748r,5824r:0)  0@5748r
     zero:	[1396r,1396d:7)[1404r,1404d:6)[1412r,1412d:5)[1420r,1420d:4)[1428r,1428d:3)[1436r,1436d:2)[1444r,1444d:1)[1452r,1452d:0)  0@1452r 1@1444r 2@1436r 3@1428r 4@1420r 5@1412r 6@1404r 7@1396r
        -->	[1396r,1396d:7)[1404r,1404d:6)[1412r,1412d:5)[1420r,1420d:4)[1428r,1428d:3)[1436r,1436d:2)[1444r,1444d:1)[1452r,1452d:0)  0@1452r 1@1444r 2@1436r 3@1428r 4@1420r 5@1412r 6@1404r 7@1396r
Pick node SU(7)  ILP: 1 / 1 = 1 Tree: 2 @0
Scheduling %vreg94<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg94

*** Renumbered SlotIndexes 5748-5892 ***
handleMove 5820B -> 5756B: %vreg94<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg94
     %vreg94:	[5820r,5836r:0)  0@5820r
        -->	[5756r,5836r:0)  0@5756r
Pick node SU(9)  ILP: 3 / 6 = 0.5 Tree: 2 @0
Scheduling %vreg96<def> = ADD %vreg95, %vreg94; GR32Bit:%vreg96,%vreg95,%vreg94
handleMove 5836B -> 5760B: %vreg96<def> = ADD %vreg95, %vreg94; GR32Bit:%vreg96,%vreg95,%vreg94
     %vreg96:	[5836r,5844r:0)  0@5836r
        -->	[5760r,5844r:0)  0@5760r
     %vreg95:	[5748r,5836r:0)  0@5748r
        -->	[5748r,5760r:0)  0@5748r
     %vreg94:	[5756r,5836r:0)  0@5756r
        -->	[5756r,5760r:0)  0@5756r
Pick node SU(10)  ILP: 4 / 11 = 0.363636 Tree: 2 @0
Scheduling SW %zero, %vreg96, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg96

*** Renumbered SlotIndexes 5760-5904 ***
handleMove 5856B -> 5768B: SW %zero, %vreg96, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg96
     zero:	[1396r,1396d:7)[1404r,1404d:6)[1412r,1412d:5)[1420r,1420d:4)[1428r,1428d:3)[1436r,1436d:2)[1444r,1444d:1)[1452r,1452d:0)  0@1452r 1@1444r 2@1436r 3@1428r 4@1420r 5@1412r 6@1404r 7@1396r
        -->	[1396r,1396d:7)[1404r,1404d:6)[1412r,1412d:5)[1420r,1420d:4)[1428r,1428d:3)[1436r,1436d:2)[1444r,1444d:1)[1452r,1452d:0)  0@1452r 1@1444r 2@1436r 3@1428r 4@1420r 5@1412r 6@1404r 7@1396r
     %vreg96:	[5760r,5856r:0)  0@5760r
        -->	[5760r,5768r:0)  0@5760r
Pick node SU(1)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg90<def> = ADDI %zero, 1; GR32Bit:%vreg90
handleMove 5784B -> 5772B: %vreg90<def> = ADDI %zero, 1; GR32Bit:%vreg90
     %vreg90:	[5784r,5824r:0)  0@5784r
        -->	[5772r,5824r:0)  0@5772r
     zero:	[1396r,1396d:7)[1404r,1404d:6)[1412r,1412d:5)[1420r,1420d:4)[1428r,1428d:3)[1436r,1436d:2)[1444r,1444d:1)[1452r,1452d:0)  0@1452r 1@1444r 2@1436r 3@1428r 4@1420r 5@1412r 6@1404r 7@1396r
        -->	[1396r,1396d:7)[1404r,1404d:6)[1412r,1412d:5)[1420r,1420d:4)[1428r,1428d:3)[1436r,1436d:2)[1444r,1444d:1)[1452r,1452d:0)  0@1452r 1@1444r 2@1436r 3@1428r 4@1420r 5@1412r 6@1404r 7@1396r
Pick node SU(4)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg92<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg92

*** Renumbered SlotIndexes 5772-5916 ***
handleMove 5820B -> 5780B: %vreg92<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg92
     %vreg92:	[5820r,5828r:0)  0@5820r
        -->	[5780r,5828r:0)  0@5780r
     zero:	[1396r,1396d:7)[1404r,1404d:6)[1412r,1412d:5)[1420r,1420d:4)[1428r,1428d:3)[1436r,1436d:2)[1444r,1444d:1)[1452r,1452d:0)  0@1452r 1@1444r 2@1436r 3@1428r 4@1420r 5@1412r 6@1404r 7@1396r
        -->	[1396r,1396d:7)[1404r,1404d:6)[1412r,1412d:5)[1420r,1420d:4)[1428r,1428d:3)[1436r,1436d:2)[1444r,1444d:1)[1452r,1452d:0)  0@1452r 1@1444r 2@1436r 3@1428r 4@1420r 5@1412r 6@1404r 7@1396r
Pick node SU(3)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg91<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg91
handleMove 5812B -> 5784B: %vreg91<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg91
     %vreg91:	[5812r,5828r:0)  0@5812r
        -->	[5784r,5828r:0)  0@5784r
Pick node SU(5)  ILP: 3 / 6 = 0.5 Tree: 1 @0
Scheduling %vreg93<def> = ADD %vreg92, %vreg91; GR32Bit:%vreg93,%vreg92,%vreg91

*** Renumbered SlotIndexes 5784-5928 ***
handleMove 5840B -> 5792B: %vreg93<def> = ADD %vreg92, %vreg91; GR32Bit:%vreg93,%vreg92,%vreg91
     %vreg93:	[5840r,5848r:0)  0@5840r
        -->	[5792r,5848r:0)  0@5792r
     %vreg92:	[5780r,5840r:0)  0@5780r
        -->	[5780r,5792r:0)  0@5780r
     %vreg91:	[5784r,5840r:0)  0@5784r
        -->	[5784r,5792r:0)  0@5784r
Pick node SU(6)  ILP: 5 / 11 = 0.454545 Tree: 1 @0
Scheduling SW %vreg90, %vreg93, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg90,%vreg93
handleMove 5848B -> 5796B: SW %vreg90, %vreg93, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg90,%vreg93
     %vreg90:	[5772r,5848r:0)  0@5772r
        -->	[5772r,5796r:0)  0@5772r
     %vreg93:	[5792r,5848r:0)  0@5792r
        -->	[5792r,5796r:0)  0@5792r
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg89<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg89
Pick node SU(2)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling SW %zero, %vreg89, 0; mem:ST4[%4] GR32Bit:%vreg89
*** Final schedule for BB#11 ***
SU(8):   %vreg95<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg95
SU(7):   %vreg94<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg94
SU(9):   %vreg96<def> = ADD %vreg95, %vreg94; GR32Bit:%vreg96,%vreg95,%vreg94
SU(10):   SW %zero, %vreg96, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg96
SU(1):   %vreg90<def> = ADDI %zero, 1; GR32Bit:%vreg90
SU(4):   %vreg92<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg92
SU(3):   %vreg91<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg91
SU(5):   %vreg93<def> = ADD %vreg92, %vreg91; GR32Bit:%vreg93,%vreg92,%vreg91
SU(6):   SW %vreg90, %vreg93, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg90,%vreg93
SU(0):   %vreg89<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg89
SU(2):   SW %zero, %vreg89, 0; mem:ST4[%4] GR32Bit:%vreg89

Partitioning instructions of the region into multiple CEs
instr:  %vreg95<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg95
instr:  %vreg94<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg94
instr:  %vreg96<def> = ADD %vreg95, %vreg94; GR32Bit:%vreg96,%vreg95,%vreg94
instr:  SW %zero, %vreg96, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg96
instr:  %vreg90<def> = ADDI %zero, 1; GR32Bit:%vreg90
instr:  %vreg92<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg92
instr:  %vreg91<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg91
instr:  %vreg93<def> = ADD %vreg92, %vreg91; GR32Bit:%vreg93,%vreg92,%vreg91
instr:  SW %vreg90, %vreg93, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg90,%vreg93
instr:  %vreg89<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg89
instr:  SW %zero, %vreg89, 0; mem:ST4[%4] GR32Bit:%vreg89
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
After Shuffling regions of basic block, state of BB#11:
BB#11: derived from LLVM BB %startup_starter3.if.then
    Predecessors according to CFG: BB#0
	%vreg95<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg95
	%vreg94<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg94
	%vreg96<def> = ADD %vreg95, %vreg94; GR32Bit:%vreg96,%vreg95,%vreg94
	SW %zero, %vreg96, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg96
	%vreg90<def> = ADDI %zero, 1; GR32Bit:%vreg90
	%vreg92<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg92
	%vreg91<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg91
	%vreg93<def> = ADD %vreg92, %vreg91; GR32Bit:%vreg93,%vreg92,%vreg91
	SW %vreg90, %vreg93, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg90,%vreg93
	%vreg89<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg89
	SW %zero, %vreg89, 0; mem:ST4[%4] GR32Bit:%vreg89
    Successors according to CFG: BB#12
Creating pHyperOp bundles for CEs for bb11
starting at   %vreg95<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg95
starting at   %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 5752-5960 ***
starting at   %zero<def> = ADDI %zero, 0
starting at   %zero<def> = ADDI %zero, 0
After bundling, state of BB11:BB#11: derived from LLVM BB %startup_starter3.if.then
    Predecessors according to CFG: BB#0
	%vreg95<def> = ADDI %zero, <ga:@glob_sg_bit1>[TF=3]; GR32Bit:%vreg95
	  * %vreg94<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg94
	  * %vreg96<def> = ADD %vreg95, %vreg94; GR32Bit:%vreg96,%vreg95,%vreg94
	  * SW %zero, %vreg96, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg96
	  * %vreg90<def> = ADDI %zero, 1; GR32Bit:%vreg90
	  * %vreg92<def> = ADDI %zero, <ga:@glob_sg_bit0>[TF=3]; GR32Bit:%vreg92
	  * %vreg91<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg91
	  * %vreg93<def> = ADD %vreg92, %vreg91; GR32Bit:%vreg93,%vreg92,%vreg91
	  * SW %vreg90, %vreg93, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg90,%vreg93
	  * %vreg89<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg89
	  * SW %zero, %vreg89, 0; mem:ST4[%4] GR32Bit:%vreg89
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#12

-------------
Starting new basic block BB#12
********** MI Scheduling **********
startup_starter3:BB#12 startup_starter3.return
  From: %vreg97<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg97
    To: End Remaining: 0
Max Pressure: FP32Bit=1
GR32Bit=1
Live In: 
Live Out: 
FP32BitLimit 32 Actual 1
GR32BitLimit 32 Actual 1
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
SU(0):   %vreg97<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg97
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
   val SU(1): Latency=5 Reg=%vreg97

SU(1):   %vreg98<def> = FLW %vreg97, 0; mem:LD4[%4] FP32Bit:%vreg98 GR32Bit:%vreg97
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 2
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg97
  Successors:
   val SU(3): Latency=2 Reg=%vreg98

SU(2):   %vreg99<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg99
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(3): Latency=5 Reg=%vreg99

SU(3):   FSW %vreg98, %vreg99, 0; mem:ST4[%1] FP32Bit:%vreg98 GR32Bit:%vreg99
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 7
  Height             : 0
  Predecessors:
   val SU(1): Latency=2 Reg=%vreg98
   val SU(2): Latency=5 Reg=%vreg99
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg97<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg97
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
   val SU(1): Latency=5 Reg=%vreg97

SU(1):   %vreg98<def> = FLW %vreg97, 0; mem:LD4[%4] FP32Bit:%vreg98 GR32Bit:%vreg97
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 2
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg97
  Successors:
   val SU(3): Latency=2 Reg=%vreg98

SU(2):   %vreg99<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg99
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(3): Latency=5 Reg=%vreg99

SU(3):   FSW %vreg98, %vreg99, 0; mem:ST4[%1] FP32Bit:%vreg98 GR32Bit:%vreg99
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 7
  Height             : 0
  Predecessors:
   val SU(1): Latency=2 Reg=%vreg98
   val SU(2): Latency=5 Reg=%vreg99
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(2)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg99<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg99
handleMove 5944B -> 5924B: %vreg99<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg99
     %vreg99:	[5944r,5952r:0)  0@5944r
        -->	[5924r,5952r:0)  0@5924r
     t5:	EMPTY
        -->	EMPTY
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg97<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg97
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg98<def> = FLW %vreg97, 0; mem:LD4[%4] FP32Bit:%vreg98 GR32Bit:%vreg97
Pick node SU(3)  ILP: 4 / 8 = 0.5 Tree: 0 @0
Scheduling FSW %vreg98, %vreg99, 0; mem:ST4[%1] FP32Bit:%vreg98 GR32Bit:%vreg99
*** Final schedule for BB#12 ***
SU(2):   %vreg99<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg99
SU(0):   %vreg97<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg97
SU(1):   %vreg98<def> = FLW %vreg97, 0; mem:LD4[%4] FP32Bit:%vreg98 GR32Bit:%vreg97
SU(3):   FSW %vreg98, %vreg99, 0; mem:ST4[%1] FP32Bit:%vreg98 GR32Bit:%vreg99

Partitioning instructions of the region into multiple CEs
instr:  %vreg99<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg99
instr:  %vreg97<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg97
instr:  %vreg98<def> = FLW %vreg97, 0; mem:LD4[%4] FP32Bit:%vreg98 GR32Bit:%vreg97
instr:  FSW %vreg98, %vreg99, 0; mem:ST4[%1] FP32Bit:%vreg98 GR32Bit:%vreg99
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
before falloc, state of bb12:BB#12: derived from LLVM BB %startup_starter3.return
    Predecessors according to CFG: BB#1 BB#9 BB#4 BB#7 BB#8 BB#10 BB#11
	%vreg99<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg99
	%vreg97<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg97
	%vreg98<def> = FLW %vreg97, 0; mem:LD4[%4] FP32Bit:%vreg98 GR32Bit:%vreg97
	FSW %vreg98, %vreg99, 0; mem:ST4[%1] FP32Bit:%vreg98 GR32Bit:%vreg99
Adding all fallocs first to avoid stalls due to sequential fallocs and fbinds
Adding writecm(for writing sync count to context frames) and fbind instructions
live end of child is itself
live end of child is itself
Adding localref sw instructions to hyperOp startup_starter3

*** Renumbered SlotIndexes 5956-5972 ***

*** Renumbered SlotIndexes 5968-5984 ***

*** Renumbered SlotIndexes 5980-5996 ***

*** Renumbered SlotIndexes 5992-6008 ***

*** Renumbered SlotIndexes 6004-6020 ***

*** Renumbered SlotIndexes 6016-6032 ***

*** Renumbered SlotIndexes 6028-6044 ***

*** Renumbered SlotIndexes 6040-6056 ***

*** Renumbered SlotIndexes 6052-6068 ***
Adding writecm instructions to hyperOp startup_starter3
Adding writecmp and sync instructions
problem with which child exactly?redefine_start2 with edge of type:6

*** Renumbered SlotIndexes 6064-6080 ***

*** Renumbered SlotIndexes 6076-6092 ***

*** Renumbered SlotIndexes 6088-6104 ***

*** Renumbered SlotIndexes 6100-6116 ***
Adding endHyperOp instructions to each pHyperOp

*** Renumbered SlotIndexes 6104-6128 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 6116-6140 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 6128-6152 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 6140-6164 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 6152-6176 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 6164-6188 ***
  %zero<def> = ADDI %zero, 0
After Shuffling regions of basic block, state of BB#12:
BB#12: derived from LLVM BB %startup_starter3.return
    Predecessors according to CFG: BB#1 BB#9 BB#4 BB#7 BB#8 BB#10 BB#11
	%vreg99<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg99
	%vreg97<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg97
	%vreg98<def> = FLW %vreg97, 0; mem:LD4[%4] FP32Bit:%vreg98 GR32Bit:%vreg97
	FSW %vreg98, %vreg99, 0; mem:ST4[%1] FP32Bit:%vreg98 GR32Bit:%vreg99
	%vreg245<def> = ADDI %zero, 128; GR32Bit:%vreg245
	%vreg246<def> = ADDI %zero, 1; GR32Bit:%vreg246
	WRITECM %vreg245, %vreg246, 60; GR32Bit:%vreg245,%vreg246
	%vreg247<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg247
	%vreg248<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg248
	%vreg249<def> = SRLI %vreg248, 12; GR32Bit:%vreg249,%vreg248
	%vreg250<def> = ADD %vreg247, %vreg249; GR32Bit:%vreg250,%vreg247,%vreg249
	%vreg251<def> = ADDI %zero, 28; GR32Bit:%vreg251
	%vreg252<def> = SRLI %vreg245, 22; GR32Bit:%vreg252,%vreg245
	%vreg253<def> = SRLI %vreg245, 12; GR32Bit:%vreg253,%vreg245
	%vreg254<def> = ANDI %vreg253, 15; GR32Bit:%vreg254,%vreg253
	%vreg255<def> = SRLI %vreg245, 6; GR32Bit:%vreg255,%vreg245
	%vreg256<def> = ANDI %vreg255, 63; GR32Bit:%vreg256,%vreg255
	%vreg257<def> = ADDI %zero, 832; GR32Bit:%vreg257
	%vreg258<def> = MUL %vreg252, %vreg257; GR32Bit:%vreg258,%vreg252,%vreg257
	%vreg259<def> = ADDI %zero, 52; GR32Bit:%vreg259
	%vreg260<def> = MUL %vreg254, %vreg259; GR32Bit:%vreg260,%vreg254,%vreg259
	%vreg261<def> = ADD %vreg260, %vreg256; GR32Bit:%vreg261,%vreg260,%vreg256
	%vreg262<def> = ADD %vreg261, %vreg258; GR32Bit:%vreg262,%vreg261,%vreg258
	%vreg263<def> = MUL %vreg262, %vreg251; GR32Bit:%vreg263,%vreg262,%vreg251
	%vreg264<def> = ADD %vreg263, %vreg250; GR32Bit:%vreg264,%vreg263,%vreg250
	%vreg265<def> = FLW %vreg101, 0; FP32Bit:%vreg265 GR32Bit:%vreg101
	FSW %vreg265, %vreg264, 0; FP32Bit:%vreg265 GR32Bit:%vreg264
	%vreg266<def> = LUI 1; GR32Bit:%vreg266
	WRITEPM %vreg266, %vreg245, 0; GR32Bit:%vreg266,%vreg245
	FDELETE %t4, 0
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg267<def> = LUI 1; GR32Bit:%vreg267
	%vreg268<def> = DREADPM %vreg267, 0; GR32Bit:%vreg268,%vreg267
	%vreg269<def> = ADDI %zero, -1; GR32Bit:%vreg269
	SYNC %vreg268, %vreg269, 60; GR32Bit:%vreg268,%vreg269
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 6076-6236 ***

*** Renumbered SlotIndexes 6076-6252 ***

*** Renumbered SlotIndexes 5964-6300 ***

*** Renumbered SlotIndexes 5952-6320 ***
Creating pHyperOp bundles for CEs for bb12
  %vreg267<def> = LUI 1; GR32Bit:%vreg267
starting at   %vreg99<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg99
  END 0
starting at   %vreg267<def> = LUI 1; GR32Bit:%vreg267
  END 0
starting at   END 0
starting at   END 0
After bundling, state of BB12:BB#12: derived from LLVM BB %startup_starter3.return
    Predecessors according to CFG: BB#1 BB#9 BB#4 BB#7 BB#8 BB#10 BB#11
	%vreg99<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg99
	  * %vreg97<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg97
	  * %vreg98<def> = FLW %vreg97, 0; mem:LD4[%4] FP32Bit:%vreg98 GR32Bit:%vreg97
	  * FSW %vreg98, %vreg99, 0; mem:ST4[%1] FP32Bit:%vreg98 GR32Bit:%vreg99
	  * %vreg245<def> = ADDI %zero, 128; GR32Bit:%vreg245
	  * %vreg246<def> = ADDI %zero, 1; GR32Bit:%vreg246
	  * WRITECM %vreg245, %vreg246, 60; GR32Bit:%vreg245,%vreg246
	  * %vreg247<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg247
	  * %vreg248<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg248
	  * %vreg249<def> = SRLI %vreg248, 12; GR32Bit:%vreg249,%vreg248
	  * %vreg250<def> = ADD %vreg247, %vreg249; GR32Bit:%vreg250,%vreg247,%vreg249
	  * %vreg251<def> = ADDI %zero, 28; GR32Bit:%vreg251
	  * %vreg252<def> = SRLI %vreg245, 22; GR32Bit:%vreg252,%vreg245
	  * %vreg253<def> = SRLI %vreg245, 12; GR32Bit:%vreg253,%vreg245
	  * %vreg254<def> = ANDI %vreg253, 15; GR32Bit:%vreg254,%vreg253
	  * %vreg255<def> = SRLI %vreg245, 6; GR32Bit:%vreg255,%vreg245
	  * %vreg256<def> = ANDI %vreg255, 63; GR32Bit:%vreg256,%vreg255
	  * %vreg257<def> = ADDI %zero, 832; GR32Bit:%vreg257
	  * %vreg258<def> = MUL %vreg252, %vreg257; GR32Bit:%vreg258,%vreg252,%vreg257
	  * %vreg259<def> = ADDI %zero, 52; GR32Bit:%vreg259
	  * %vreg260<def> = MUL %vreg254, %vreg259; GR32Bit:%vreg260,%vreg254,%vreg259
	  * %vreg261<def> = ADD %vreg260, %vreg256; GR32Bit:%vreg261,%vreg260,%vreg256
	  * %vreg262<def> = ADD %vreg261, %vreg258; GR32Bit:%vreg262,%vreg261,%vreg258
	  * %vreg263<def> = MUL %vreg262, %vreg251; GR32Bit:%vreg263,%vreg262,%vreg251
	  * %vreg264<def> = ADD %vreg263, %vreg250; GR32Bit:%vreg264,%vreg263,%vreg250
	  * %vreg265<def> = FLW %vreg101, 0; FP32Bit:%vreg265 GR32Bit:%vreg101
	  * FSW %vreg265, %vreg264, 0; FP32Bit:%vreg265 GR32Bit:%vreg264
	  * %vreg266<def> = LUI 1; GR32Bit:%vreg266
	  * WRITEPM %vreg266, %vreg245, 0; GR32Bit:%vreg266,%vreg245
	  * FDELETE %t4, 0
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg267<def> = LUI 1; GR32Bit:%vreg267
	  * %vreg268<def> = DREADPM %vreg267, 0; GR32Bit:%vreg268,%vreg267
	  * %vreg269<def> = ADDI %zero, -1; GR32Bit:%vreg269
	  * SYNC %vreg268, %vreg269, 60; GR32Bit:%vreg268,%vreg269
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
Patching the instructions that are supposed to use the physical registers r30 and r31
Computing live-in reg-units in ABI blocks.
Created 0 new intervals.

*** Renumbered SlotIndexes 2692-6588 ***

*** Renumbered SlotIndexes 5608-6600 ***

*** Renumbered SlotIndexes 6068-6612 ***
********** INTERVALS **********
t5 = EMPTY
zero = [1396r,1396d:7)[1404r,1404d:6)[1412r,1412d:5)[1420r,1420d:4)[1428r,1428d:3)[1436r,1436d:2)[1444r,1444d:1)[1452r,1452d:0)  0@1452r 1@1444r 2@1436r 3@1428r 4@1420r 5@1412r 6@1404r 7@1396r
%vreg0 = [172r,276r:0)  0@172r
%vreg1 = [180r,228r:0)  0@180r
%vreg2 = [228r,236r:0)  0@228r
%vreg3 = [220r,236r:0)  0@220r
%vreg4 = [196r,244r:0)  0@196r
%vreg5 = [244r,252r:0)  0@244r
%vreg6 = [164r,252r:0)  0@164r
%vreg7 = [204r,260r:0)  0@204r
%vreg8 = [212r,260r:0)  0@212r
%vreg9 = [148r,268r:0)  0@148r
%vreg10 = [156r,268r:0)  0@156r
%vreg11 = [276r,284r:0)  0@276r
%vreg12 = [284r,340r:0)  0@284r
%vreg13 = [1480r,1488r:0)  0@1480r
%vreg14 = [1488r,1496r:0)  0@1488r
%vreg15 = [1496r,1572r:0)  0@1496r
%vreg16 = [1464r,1472r:0)  0@1464r
%vreg17 = [1472r,1572r:0)  0@1472r
%vreg18 = [2096r,2104r:0)  0@2096r
%vreg19 = [2104r,2112r:0)  0@2104r
%vreg20 = [2112r,2188r:0)  0@2112r
%vreg21 = [2080r,2088r:0)  0@2080r
%vreg22 = [2088r,2188r:0)  0@2088r
%vreg23 = [2716r,2748r:0)  0@2716r
%vreg24 = [2748r,2796r:0)  0@2748r
%vreg25 = [2724r,2732r:0)  0@2724r
%vreg26 = [2708r,2732r:0)  0@2708r
%vreg27 = [2732r,2740r:0)  0@2732r
%vreg28 = [2740r,2788r:0)  0@2740r
%vreg29 = [2788r,2796r:0)  0@2788r
%vreg30 = [2796r,2852r:0)  0@2796r
%vreg31 = [5356r,5364r:0)  0@5356r
%vreg32 = [5300r,5308r:0)  0@5300r
%vreg33 = [5292r,5308r:0)  0@5292r
%vreg34 = [5308r,5316r:0)  0@5308r
%vreg35 = [5324r,5340r:0)  0@5324r
%vreg36 = [5332r,5340r:0)  0@5332r
%vreg37 = [5340r,5348r:0)  0@5340r
%vreg38 = [3292r,3324r:0)  0@3292r
%vreg39 = [3324r,3372r:0)  0@3324r
%vreg40 = [3300r,3308r:0)  0@3300r
%vreg41 = [3284r,3308r:0)  0@3284r
%vreg42 = [3308r,3316r:0)  0@3308r
%vreg43 = [3316r,3364r:0)  0@3316r
%vreg44 = [3364r,3372r:0)  0@3364r
%vreg45 = [3372r,3428r:0)  0@3372r
%vreg46 = [3868r,3900r:0)  0@3868r
%vreg47 = [3900r,3940r:0)  0@3900r
%vreg48 = [3876r,3884r:0)  0@3876r
%vreg49 = [3860r,3884r:0)  0@3860r
%vreg50 = [3884r,3892r:0)  0@3884r
%vreg51 = [3892r,3940r:0)  0@3892r
%vreg52 = [3940r,3996r:0)  0@3940r
%vreg53 = [4460r,4476r:0)  0@4460r
%vreg54 = [4468r,4476r:0)  0@4468r
%vreg55 = [4476r,4484r:0)  0@4476r
%vreg56 = [4484r,4500r:0)  0@4484r
%vreg57 = [4428r,4500r:0)  0@4428r
%vreg58 = [4524r,4556r:0)  0@4524r
%vreg59 = [4556r,4596r:0)  0@4556r
%vreg60 = [4532r,4540r:0)  0@4532r
%vreg61 = [4516r,4540r:0)  0@4516r
%vreg62 = [4540r,4548r:0)  0@4540r
%vreg63 = [4548r,4596r:0)  0@4548r
%vreg64 = [4596r,4652r:0)  0@4596r
%vreg65 = [5092r,5108r:0)  0@5092r
%vreg66 = [5100r,5108r:0)  0@5100r
%vreg67 = [5108r,5116r:0)  0@5108r
%vreg68 = [5116r,5132r:0)  0@5116r
%vreg69 = [5084r,5132r:0)  0@5084r
%vreg70 = [5656r,5680r:0)  0@5656r
%vreg71 = [5672r,5680r:0)  0@5672r
%vreg72 = [5680r,5688r:0)  0@5680r
%vreg73 = [5688r,5752r:0)  0@5688r
%vreg74 = [5648r,5704r:0)  0@5648r
%vreg75 = [5704r,5720r:0)  0@5704r
%vreg76 = [5720r,5736r:0)  0@5720r
%vreg77 = [5736r,5744r:0)  0@5736r
%vreg78 = [5744r,5752r:0)  0@5744r
%vreg79 = [5752r,5776r:0)  0@5752r
%vreg80 = [5640r,5712r:0)  0@5640r
%vreg81 = [5776r,5792r:0)  0@5776r
%vreg82 = [5712r,5776r:0)  0@5712r
%vreg83 = [5664r,5792r:0)  0@5664r
%vreg84 = [5596r,5632r:0)  0@5596r
%vreg85 = [5632r,5728r:0)  0@5632r
%vreg86 = [5588r,5624r:0)  0@5588r
%vreg87 = [5604r,5624r:0)  0@5604r
%vreg88 = [5624r,5728r:0)  0@5624r
%vreg89 = [6108r,6124r:0)  0@6108r
%vreg90 = [6056r,6100r:0)  0@6056r
%vreg91 = [6084r,6092r:0)  0@6084r
%vreg92 = [6064r,6092r:0)  0@6064r
%vreg93 = [6092r,6100r:0)  0@6092r
%vreg94 = [6032r,6040r:0)  0@6032r
%vreg95 = [6000r,6040r:0)  0@6000r
%vreg96 = [6040r,6048r:0)  0@6040r
%vreg97 = [6212r,6220r:0)  0@6212r
%vreg98 = [6220r,6236r:0)  0@6220r
%vreg99 = [6204r,6236r:0)  0@6204r
%vreg100 = [4r,4d:0)  0@4r
%vreg101 = [140r,140d:0)  0@140r
%vreg102 = [12r,28r:0)  0@12r
%vreg103 = [16r,20r:0)  0@16r
%vreg104 = [20r,28r:0)  0@20r
%vreg105 = [28r,140r:0)  0@28r
%vreg106 = [36r,132r:0)  0@36r
%vreg107 = [44r,92r:0)  0@44r
%vreg108 = [52r,60r:0)  0@52r
%vreg109 = [60r,108r:0)  0@60r
%vreg110 = [68r,76r:0)  0@68r
%vreg111 = [76r,116r:0)  0@76r
%vreg112 = [84r,92r:0)  0@84r
%vreg113 = [92r,124r:0)  0@92r
%vreg114 = [100r,108r:0)  0@100r
%vreg115 = [108r,116r:0)  0@108r
%vreg116 = [116r,124r:0)  0@116r
%vreg117 = [124r,132r:0)  0@124r
%vreg118 = [132r,140r:0)  0@132r
%vreg119 = [388r,388d:0)  0@388r
%vreg120 = [532r,532d:0)  0@532r
%vreg121 = [396r,420r:0)  0@396r
%vreg122 = [404r,412r:0)  0@404r
%vreg123 = [412r,420r:0)  0@412r
%vreg124 = [420r,532r:0)  0@420r
%vreg125 = [428r,524r:0)  0@428r
%vreg126 = [436r,484r:0)  0@436r
%vreg127 = [444r,452r:0)  0@444r
%vreg128 = [452r,500r:0)  0@452r
%vreg129 = [460r,468r:0)  0@460r
%vreg130 = [468r,508r:0)  0@468r
%vreg131 = [476r,484r:0)  0@476r
%vreg132 = [484r,516r:0)  0@484r
%vreg133 = [492r,500r:0)  0@492r
%vreg134 = [500r,508r:0)  0@500r
%vreg135 = [508r,516r:0)  0@508r
%vreg136 = [516r,524r:0)  0@516r
%vreg137 = [524r,532r:0)  0@524r
%vreg138 = [604r,604d:0)  0@604r
%vreg139 = [748r,748d:0)  0@748r
%vreg140 = [612r,636r:0)  0@612r
%vreg141 = [620r,628r:0)  0@620r
%vreg142 = [628r,636r:0)  0@628r
%vreg143 = [636r,748r:0)  0@636r
%vreg144 = [644r,740r:0)  0@644r
%vreg145 = [652r,700r:0)  0@652r
%vreg146 = [660r,668r:0)  0@660r
%vreg147 = [668r,716r:0)  0@668r
%vreg148 = [676r,684r:0)  0@676r
%vreg149 = [684r,724r:0)  0@684r
%vreg150 = [692r,700r:0)  0@692r
%vreg151 = [700r,732r:0)  0@700r
%vreg152 = [708r,716r:0)  0@708r
%vreg153 = [716r,724r:0)  0@716r
%vreg154 = [724r,732r:0)  0@724r
%vreg155 = [732r,740r:0)  0@732r
%vreg156 = [740r,748r:0)  0@740r
%vreg157 = [820r,820d:0)  0@820r
%vreg158 = [964r,964d:0)  0@964r
%vreg159 = [828r,852r:0)  0@828r
%vreg160 = [836r,844r:0)  0@836r
%vreg161 = [844r,852r:0)  0@844r
%vreg162 = [852r,964r:0)  0@852r
%vreg163 = [860r,956r:0)  0@860r
%vreg164 = [868r,916r:0)  0@868r
%vreg165 = [876r,884r:0)  0@876r
%vreg166 = [884r,932r:0)  0@884r
%vreg167 = [892r,900r:0)  0@892r
%vreg168 = [900r,940r:0)  0@900r
%vreg169 = [908r,916r:0)  0@908r
%vreg170 = [916r,948r:0)  0@916r
%vreg171 = [924r,932r:0)  0@924r
%vreg172 = [932r,940r:0)  0@932r
%vreg173 = [940r,948r:0)  0@940r
%vreg174 = [948r,956r:0)  0@948r
%vreg175 = [956r,964r:0)  0@956r
%vreg176 = [292r,300r:0)  0@292r
%vreg177 = [540r,548r:0)  0@540r
%vreg178 = [308r,316r:0)  0@308r
%vreg179 = [756r,764r:0)  0@756r
%vreg180 = [324r,332r:0)  0@324r
%vreg181 = [1244r,1260r:0)  0@1244r
%vreg182 = [548r,556r:0)  0@548r
%vreg183 = [764r,772r:0)  0@764r
%vreg184 = [1260r,1292r:0)  0@1260r
%vreg185 = [1500r,1548r:0)  0@1500r
%vreg186 = [1620r,1644r:0)  0@1620r
%vreg187 = [1516r,1556r:0)  0@1516r
%vreg188 = [1708r,1732r:0)  0@1708r
%vreg189 = [1532r,1564r:0)  0@1532r
%vreg190 = [1796r,1860r:0)  0@1796r
%vreg191 = [1636r,1652r:0)  0@1636r
%vreg192 = [1724r,1740r:0)  0@1724r
%vreg193 = [1812r,1908r:0)  0@1812r
%vreg194 = [1644r,1652r:0)  0@1644r
%vreg195 = [1732r,1740r:0)  0@1732r
%vreg196 = [1860r,1908r:0)  0@1860r
%vreg197 = [2116r,2164r:0)  0@2116r
%vreg198 = [2236r,2260r:0)  0@2236r
%vreg199 = [2132r,2172r:0)  0@2132r
%vreg200 = [2324r,2348r:0)  0@2324r
%vreg201 = [2148r,2180r:0)  0@2148r
%vreg202 = [2412r,2476r:0)  0@2412r
%vreg203 = [2252r,2268r:0)  0@2252r
%vreg204 = [2340r,2356r:0)  0@2340r
%vreg205 = [2428r,2524r:0)  0@2428r
%vreg206 = [2260r,2268r:0)  0@2260r
%vreg207 = [2348r,2356r:0)  0@2348r
%vreg208 = [2476r,2524r:0)  0@2476r
%vreg209 = [2804r,2812r:0)  0@2804r
%vreg210 = [2900r,2916r:0)  0@2900r
%vreg211 = [2820r,2828r:0)  0@2820r
%vreg212 = [2980r,2996r:0)  0@2980r
%vreg213 = [2836r,2844r:0)  0@2836r
%vreg214 = [3060r,3076r:0)  0@3060r
%vreg215 = [2916r,2924r:0)  0@2916r
%vreg216 = [2996r,3004r:0)  0@2996r
%vreg217 = [3076r,3108r:0)  0@3076r
%vreg218 = [3380r,3388r:0)  0@3380r
%vreg219 = [3476r,3492r:0)  0@3476r
%vreg220 = [3396r,3404r:0)  0@3396r
%vreg221 = [3556r,3572r:0)  0@3556r
%vreg222 = [3412r,3420r:0)  0@3412r
%vreg223 = [3636r,3652r:0)  0@3636r
%vreg224 = [3492r,3500r:0)  0@3492r
%vreg225 = [3572r,3580r:0)  0@3572r
%vreg226 = [3652r,3684r:0)  0@3652r
%vreg227 = [3948r,3956r:0)  0@3948r
%vreg228 = [4044r,4060r:0)  0@4044r
%vreg229 = [3964r,3972r:0)  0@3964r
%vreg230 = [4124r,4140r:0)  0@4124r
%vreg231 = [3980r,3988r:0)  0@3980r
%vreg232 = [4204r,4220r:0)  0@4204r
%vreg233 = [4060r,4068r:0)  0@4060r
%vreg234 = [4140r,4148r:0)  0@4140r
%vreg235 = [4220r,4252r:0)  0@4220r
%vreg236 = [4604r,4612r:0)  0@4604r
%vreg237 = [4700r,4716r:0)  0@4700r
%vreg238 = [4620r,4628r:0)  0@4620r
%vreg239 = [4780r,4796r:0)  0@4780r
%vreg240 = [4636r,4644r:0)  0@4636r
%vreg241 = [4860r,4876r:0)  0@4860r
%vreg242 = [4716r,4724r:0)  0@4716r
%vreg243 = [4796r,4804r:0)  0@4796r
%vreg244 = [4876r,4908r:0)  0@4876r
%vreg245 = [6244r,6436r:0)  0@6244r
%vreg246 = [6252r,6260r:0)  0@6252r
%vreg247 = [6268r,6292r:0)  0@6268r
%vreg248 = [6276r,6284r:0)  0@6276r
%vreg249 = [6284r,6292r:0)  0@6284r
%vreg250 = [6292r,6404r:0)  0@6292r
%vreg251 = [6300r,6396r:0)  0@6300r
%vreg252 = [6308r,6356r:0)  0@6308r
%vreg253 = [6316r,6324r:0)  0@6316r
%vreg254 = [6324r,6372r:0)  0@6324r
%vreg255 = [6332r,6340r:0)  0@6332r
%vreg256 = [6340r,6380r:0)  0@6340r
%vreg257 = [6348r,6356r:0)  0@6348r
%vreg258 = [6356r,6388r:0)  0@6356r
%vreg259 = [6364r,6372r:0)  0@6364r
%vreg260 = [6372r,6380r:0)  0@6372r
%vreg261 = [6380r,6388r:0)  0@6380r
%vreg262 = [6388r,6396r:0)  0@6388r
%vreg263 = [6396r,6404r:0)  0@6396r
%vreg264 = [6404r,6420r:0)  0@6404r
%vreg265 = [6412r,6420r:0)  0@6412r
%vreg266 = [6428r,6436r:0)  0@6428r
%vreg267 = [6476r,6484r:0)  0@6476r
%vreg268 = [6484r,6612B:0)  0@6484r
%vreg269 = [6492r,6500r:0)  0@6492r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function startup_starter3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %startup_starter3.entry
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg102<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg102
4B		  * %vreg103<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg103
4B		  * %vreg104<def> = SRLI %vreg103, 12; GR32Bit:%vreg104,%vreg103
4B		  * %vreg105<def> = ADD %vreg102, %vreg104; GR32Bit:%vreg105,%vreg102,%vreg104
4B		  * %vreg106<def> = ADDI %zero, 28; GR32Bit:%vreg106
4B		  * %vreg107<def> = SRLI %t5, 22; GR32Bit:%vreg107
4B		  * %vreg108<def> = SRLI %t5, 12; GR32Bit:%vreg108
4B		  * %vreg109<def> = ANDI %vreg108, 15; GR32Bit:%vreg109,%vreg108
4B		  * %vreg110<def> = SRLI %t5, 6; GR32Bit:%vreg110
4B		  * %vreg111<def> = ANDI %vreg110, 63; GR32Bit:%vreg111,%vreg110
4B		  * %vreg112<def> = ADDI %zero, 832; GR32Bit:%vreg112
4B		  * %vreg113<def> = MUL %vreg107, %vreg112; GR32Bit:%vreg113,%vreg107,%vreg112
4B		  * %vreg114<def> = ADDI %zero, 52; GR32Bit:%vreg114
4B		  * %vreg115<def> = MUL %vreg109, %vreg114; GR32Bit:%vreg115,%vreg109,%vreg114
4B		  * %vreg116<def> = ADD %vreg115, %vreg111; GR32Bit:%vreg116,%vreg115,%vreg111
4B		  * %vreg117<def> = ADD %vreg116, %vreg113; GR32Bit:%vreg117,%vreg116,%vreg113
4B		  * %vreg118<def> = MUL %vreg117, %vreg106; GR32Bit:%vreg118,%vreg117,%vreg106
4B		  * %t5<def> = ADD %vreg105, %vreg118; GR32Bit:%vreg105,%vreg118
4B		  * %vreg9<def> = ADDI %t5, <fi#5>; GR32Bit:%vreg9
4B		  * %vreg10<def> = ADDI %zero, 850; GR32Bit:%vreg10
4B		  * %vreg6<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg6
4B		  * %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
4B		  * %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
4B		  * SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
4B		  * %vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
4B		  * %vreg7<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg7
4B		  * %vreg8<def> = ADDI %zero, 350; GR32Bit:%vreg8
4B		  * %vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
4B		  * %vreg2<def> = FLW %vreg1, 0; mem:LD4[%9](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
4B		  * FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
4B		  * %vreg5<def> = FLW %vreg4, 8; mem:LD4[%13] FP32Bit:%vreg5 GR32Bit:%vreg4
4B		  * FSW %vreg5, %vreg6, 0; mem:ST4[%4] FP32Bit:%vreg5 GR32Bit:%vreg6
4B		  * SW %vreg8, %vreg7, 0; mem:ST4[%5] GR32Bit:%vreg8,%vreg7
4B		  * SW %vreg10, %vreg9, 0; mem:ST4[%6] GR32Bit:%vreg10,%vreg9
4B		  * %vreg11<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg11,%vreg0
4B		  * %vreg12<def> = LW %vreg11, 4; mem:LD4[%16] GR32Bit:%vreg12,%vreg11
4B		  * %vreg176<def> = LUI 1; GR32Bit:%vreg176
4B		  * WRITEPM %vreg176, %vreg12, 0; GR32Bit:%vreg176,%vreg12
4B		  * %vreg178<def> = LUI 2; GR32Bit:%vreg178
4B		  * WRITEPM %vreg178, %vreg12, 0; GR32Bit:%vreg178,%vreg12
4B		  * %vreg180<def> = LUI 3; GR32Bit:%vreg180
4B		  * WRITEPM %vreg180, %vreg12, 0; GR32Bit:%vreg180,%vreg12
4B		  * BEQ <BB#11>, %vreg12, %zero; GR32Bit:%vreg12
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
4B		  * JAL <BB#1>
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
388B		%t4<def> = ADD %t5, %zero
388B		  * %vreg121<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg121
388B		  * %vreg122<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg122
388B		  * %vreg123<def> = SRLI %vreg122, 12; GR32Bit:%vreg123,%vreg122
388B		  * %vreg124<def> = ADD %vreg121, %vreg123; GR32Bit:%vreg124,%vreg121,%vreg123
388B		  * %vreg125<def> = ADDI %zero, 28; GR32Bit:%vreg125
388B		  * %vreg126<def> = SRLI %t5, 22; GR32Bit:%vreg126
388B		  * %vreg127<def> = SRLI %t5, 12; GR32Bit:%vreg127
388B		  * %vreg128<def> = ANDI %vreg127, 15; GR32Bit:%vreg128,%vreg127
388B		  * %vreg129<def> = SRLI %t5, 6; GR32Bit:%vreg129
388B		  * %vreg130<def> = ANDI %vreg129, 63; GR32Bit:%vreg130,%vreg129
388B		  * %vreg131<def> = ADDI %zero, 832; GR32Bit:%vreg131
388B		  * %vreg132<def> = MUL %vreg126, %vreg131; GR32Bit:%vreg132,%vreg126,%vreg131
388B		  * %vreg133<def> = ADDI %zero, 52; GR32Bit:%vreg133
388B		  * %vreg134<def> = MUL %vreg128, %vreg133; GR32Bit:%vreg134,%vreg128,%vreg133
388B		  * %vreg135<def> = ADD %vreg134, %vreg130; GR32Bit:%vreg135,%vreg134,%vreg130
388B		  * %vreg136<def> = ADD %vreg135, %vreg132; GR32Bit:%vreg136,%vreg135,%vreg132
388B		  * %vreg137<def> = MUL %vreg136, %vreg125; GR32Bit:%vreg137,%vreg136,%vreg125
388B		  * %t5<def> = ADD %vreg124, %vreg137; GR32Bit:%vreg124,%vreg137
388B		  * %vreg177<def> = LUI 1; GR32Bit:%vreg177
388B		  * %vreg182<def> = DREADPM %vreg177, 0; GR32Bit:%vreg182,%vreg177
388B		  * BEQ <BB#11>, %vreg182, %zero; GR32Bit:%vreg182
388B		  * %zero<def> = ADDI %zero, 0
388B		  * %zero<def> = ADDI %zero, 0
388B		  * JAL <BB#1>
388B		  * %zero<def> = ADDI %zero, 0
388B		  * %zero<def> = ADDI %zero, 0
604B		%t4<def> = ADD %t5, %zero
604B		  * %vreg140<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg140
604B		  * %vreg141<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg141
604B		  * %vreg142<def> = SRLI %vreg141, 12; GR32Bit:%vreg142,%vreg141
604B		  * %vreg143<def> = ADD %vreg140, %vreg142; GR32Bit:%vreg143,%vreg140,%vreg142
604B		  * %vreg144<def> = ADDI %zero, 28; GR32Bit:%vreg144
604B		  * %vreg145<def> = SRLI %t5, 22; GR32Bit:%vreg145
604B		  * %vreg146<def> = SRLI %t5, 12; GR32Bit:%vreg146
604B		  * %vreg147<def> = ANDI %vreg146, 15; GR32Bit:%vreg147,%vreg146
604B		  * %vreg148<def> = SRLI %t5, 6; GR32Bit:%vreg148
604B		  * %vreg149<def> = ANDI %vreg148, 63; GR32Bit:%vreg149,%vreg148
604B		  * %vreg150<def> = ADDI %zero, 832; GR32Bit:%vreg150
604B		  * %vreg151<def> = MUL %vreg145, %vreg150; GR32Bit:%vreg151,%vreg145,%vreg150
604B		  * %vreg152<def> = ADDI %zero, 52; GR32Bit:%vreg152
604B		  * %vreg153<def> = MUL %vreg147, %vreg152; GR32Bit:%vreg153,%vreg147,%vreg152
604B		  * %vreg154<def> = ADD %vreg153, %vreg149; GR32Bit:%vreg154,%vreg153,%vreg149
604B		  * %vreg155<def> = ADD %vreg154, %vreg151; GR32Bit:%vreg155,%vreg154,%vreg151
604B		  * %vreg156<def> = MUL %vreg155, %vreg144; GR32Bit:%vreg156,%vreg155,%vreg144
604B		  * %t5<def> = ADD %vreg143, %vreg156; GR32Bit:%vreg143,%vreg156
604B		  * %vreg179<def> = LUI 2; GR32Bit:%vreg179
604B		  * %vreg183<def> = DREADPM %vreg179, 0; GR32Bit:%vreg183,%vreg179
604B		  * BEQ <BB#11>, %vreg183, %zero; GR32Bit:%vreg183
604B		  * %zero<def> = ADDI %zero, 0
604B		  * %zero<def> = ADDI %zero, 0
604B		  * JAL <BB#1>
604B		  * %zero<def> = ADDI %zero, 0
604B		  * %zero<def> = ADDI %zero, 0
820B		%t4<def> = ADD %t5, %zero
820B		  * %vreg159<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg159
820B		  * %vreg160<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg160
820B		  * %vreg161<def> = SRLI %vreg160, 12; GR32Bit:%vreg161,%vreg160
820B		  * %vreg162<def> = ADD %vreg159, %vreg161; GR32Bit:%vreg162,%vreg159,%vreg161
820B		  * %vreg163<def> = ADDI %zero, 28; GR32Bit:%vreg163
820B		  * %vreg164<def> = SRLI %t5, 22; GR32Bit:%vreg164
820B		  * %vreg165<def> = SRLI %t5, 12; GR32Bit:%vreg165
820B		  * %vreg166<def> = ANDI %vreg165, 15; GR32Bit:%vreg166,%vreg165
820B		  * %vreg167<def> = SRLI %t5, 6; GR32Bit:%vreg167
820B		  * %vreg168<def> = ANDI %vreg167, 63; GR32Bit:%vreg168,%vreg167
820B		  * %vreg169<def> = ADDI %zero, 832; GR32Bit:%vreg169
820B		  * %vreg170<def> = MUL %vreg164, %vreg169; GR32Bit:%vreg170,%vreg164,%vreg169
820B		  * %vreg171<def> = ADDI %zero, 52; GR32Bit:%vreg171
820B		  * %vreg172<def> = MUL %vreg166, %vreg171; GR32Bit:%vreg172,%vreg166,%vreg171
820B		  * %vreg173<def> = ADD %vreg172, %vreg168; GR32Bit:%vreg173,%vreg172,%vreg168
820B		  * %vreg174<def> = ADD %vreg173, %vreg170; GR32Bit:%vreg174,%vreg173,%vreg170
820B		  * %vreg175<def> = MUL %vreg174, %vreg163; GR32Bit:%vreg175,%vreg174,%vreg163
820B		  * %t5<def> = ADD %vreg162, %vreg175; GR32Bit:%vreg162,%vreg175
820B		  * %vreg181<def> = LUI 3; GR32Bit:%vreg181
820B		  * %vreg184<def> = DREADPM %vreg181, 0; GR32Bit:%vreg184,%vreg181
820B		  * BEQ <BB#11>, %vreg184, %zero; GR32Bit:%vreg184
820B		  * %zero<def> = ADDI %zero, 0
820B		  * %zero<def> = ADDI %zero, 0
820B		  * JAL <BB#1>
820B		  * %zero<def> = ADDI %zero, 0
820B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#11(12) BB#1(20)

1460B	BB#1: derived from LLVM BB %startup_starter3.if.else
	    Predecessors according to CFG: BB#0
1464B		%vreg16<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg16
1464B		  * %vreg17<def> = LW %vreg16, 0; mem:LD4[%5] GR32Bit:%vreg17,%vreg16
1464B		  * %vreg13<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg13
1464B		  * %vreg14<def> = LW %vreg13, 0; mem:LD4[%2] GR32Bit:%vreg14,%vreg13
1464B		  * %vreg15<def> = LW %vreg14, 4; mem:LD4[%20] GR32Bit:%vreg15,%vreg14
1464B		  * %vreg185<def> = LUI 1; GR32Bit:%vreg185
1464B		  * WRITEPM %vreg185, %vreg15, 0; GR32Bit:%vreg185,%vreg15
1464B		  * %vreg187<def> = LUI 2; GR32Bit:%vreg187
1464B		  * WRITEPM %vreg187, %vreg15, 0; GR32Bit:%vreg187,%vreg15
1464B		  * %vreg189<def> = LUI 3; GR32Bit:%vreg189
1464B		  * WRITEPM %vreg189, %vreg15, 0; GR32Bit:%vreg189,%vreg15
1464B		  * WRITEPM %vreg185, %vreg17, 4; GR32Bit:%vreg185,%vreg17
1464B		  * WRITEPM %vreg187, %vreg17, 4; GR32Bit:%vreg187,%vreg17
1464B		  * WRITEPM %vreg189, %vreg17, 4; GR32Bit:%vreg189,%vreg17
1464B		  * BLT <BB#12>, %vreg15, %vreg17; GR32Bit:%vreg15,%vreg17
1464B		  * %zero<def> = ADDI %zero, 0
1464B		  * %zero<def> = ADDI %zero, 0
1464B		  * JAL <BB#2>
1464B		  * %zero<def> = ADDI %zero, 0
1464B		  * %zero<def> = ADDI %zero, 0
1620B		%vreg186<def> = LUI 1; GR32Bit:%vreg186
1620B		  * %vreg191<def> = DREADPM %vreg186, 0; GR32Bit:%vreg191,%vreg186
1620B		  * %vreg194<def> = DREADPM %vreg186, 4; GR32Bit:%vreg194,%vreg186
1620B		  * BLT <BB#12>, %vreg191, %vreg194; GR32Bit:%vreg191,%vreg194
1620B		  * %zero<def> = ADDI %zero, 0
1620B		  * %zero<def> = ADDI %zero, 0
1620B		  * JAL <BB#2>
1620B		  * %zero<def> = ADDI %zero, 0
1620B		  * %zero<def> = ADDI %zero, 0
1708B		%vreg188<def> = LUI 2; GR32Bit:%vreg188
1708B		  * %vreg192<def> = DREADPM %vreg188, 0; GR32Bit:%vreg192,%vreg188
1708B		  * %vreg195<def> = DREADPM %vreg188, 4; GR32Bit:%vreg195,%vreg188
1708B		  * BLT <BB#12>, %vreg192, %vreg195; GR32Bit:%vreg192,%vreg195
1708B		  * %zero<def> = ADDI %zero, 0
1708B		  * %zero<def> = ADDI %zero, 0
1708B		  * JAL <BB#2>
1708B		  * %zero<def> = ADDI %zero, 0
1708B		  * %zero<def> = ADDI %zero, 0
1796B		%vreg190<def> = LUI 3; GR32Bit:%vreg190
1796B		  * %vreg193<def> = DREADPM %vreg190, 0; GR32Bit:%vreg193,%vreg190
1796B		  * %vreg196<def> = DREADPM %vreg190, 4; GR32Bit:%vreg196,%vreg190
1796B		  * BLT <BB#12>, %vreg193, %vreg196; GR32Bit:%vreg193,%vreg196
1796B		  * %zero<def> = ADDI %zero, 0
1796B		  * %zero<def> = ADDI %zero, 0
1796B		  * JAL <BB#2>
1796B		  * %zero<def> = ADDI %zero, 0
1796B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#12(16) BB#2(16)

2076B	BB#2: derived from LLVM BB %startup_starter3.if.else6
	    Predecessors according to CFG: BB#1
2080B		%vreg21<def> = ADDI %t5, <fi#5>; GR32Bit:%vreg21
2080B		  * %vreg22<def> = LW %vreg21, 0; mem:LD4[%6] GR32Bit:%vreg22,%vreg21
2080B		  * %vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
2080B		  * %vreg19<def> = LW %vreg18, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
2080B		  * %vreg20<def> = LW %vreg19, 4; mem:LD4[%25] GR32Bit:%vreg20,%vreg19
2080B		  * %vreg197<def> = LUI 1; GR32Bit:%vreg197
2080B		  * WRITEPM %vreg197, %vreg20, 0; GR32Bit:%vreg197,%vreg20
2080B		  * %vreg199<def> = LUI 2; GR32Bit:%vreg199
2080B		  * WRITEPM %vreg199, %vreg20, 0; GR32Bit:%vreg199,%vreg20
2080B		  * %vreg201<def> = LUI 3; GR32Bit:%vreg201
2080B		  * WRITEPM %vreg201, %vreg20, 0; GR32Bit:%vreg201,%vreg20
2080B		  * WRITEPM %vreg197, %vreg22, 4; GR32Bit:%vreg197,%vreg22
2080B		  * WRITEPM %vreg199, %vreg22, 4; GR32Bit:%vreg199,%vreg22
2080B		  * WRITEPM %vreg201, %vreg22, 4; GR32Bit:%vreg201,%vreg22
2080B		  * BLE <BB#10>, %vreg20, %vreg22; GR32Bit:%vreg20,%vreg22
2080B		  * %zero<def> = ADDI %zero, 0
2080B		  * %zero<def> = ADDI %zero, 0
2080B		  * JAL <BB#3>
2080B		  * %zero<def> = ADDI %zero, 0
2080B		  * %zero<def> = ADDI %zero, 0
2236B		%vreg198<def> = LUI 1; GR32Bit:%vreg198
2236B		  * %vreg203<def> = DREADPM %vreg198, 0; GR32Bit:%vreg203,%vreg198
2236B		  * %vreg206<def> = DREADPM %vreg198, 4; GR32Bit:%vreg206,%vreg198
2236B		  * BLE <BB#10>, %vreg203, %vreg206; GR32Bit:%vreg203,%vreg206
2236B		  * %zero<def> = ADDI %zero, 0
2236B		  * %zero<def> = ADDI %zero, 0
2236B		  * JAL <BB#3>
2236B		  * %zero<def> = ADDI %zero, 0
2236B		  * %zero<def> = ADDI %zero, 0
2324B		%vreg200<def> = LUI 2; GR32Bit:%vreg200
2324B		  * %vreg204<def> = DREADPM %vreg200, 0; GR32Bit:%vreg204,%vreg200
2324B		  * %vreg207<def> = DREADPM %vreg200, 4; GR32Bit:%vreg207,%vreg200
2324B		  * BLE <BB#10>, %vreg204, %vreg207; GR32Bit:%vreg204,%vreg207
2324B		  * %zero<def> = ADDI %zero, 0
2324B		  * %zero<def> = ADDI %zero, 0
2324B		  * JAL <BB#3>
2324B		  * %zero<def> = ADDI %zero, 0
2324B		  * %zero<def> = ADDI %zero, 0
2412B		%vreg202<def> = LUI 3; GR32Bit:%vreg202
2412B		  * %vreg205<def> = DREADPM %vreg202, 0; GR32Bit:%vreg205,%vreg202
2412B		  * %vreg208<def> = DREADPM %vreg202, 4; GR32Bit:%vreg208,%vreg202
2412B		  * BLE <BB#10>, %vreg205, %vreg208; GR32Bit:%vreg205,%vreg208
2412B		  * %zero<def> = ADDI %zero, 0
2412B		  * %zero<def> = ADDI %zero, 0
2412B		  * JAL <BB#3>
2412B		  * %zero<def> = ADDI %zero, 0
2412B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#10(16) BB#3(16)

2692B	BB#3: derived from LLVM BB %startup_starter3.if.else11
	    Predecessors according to CFG: BB#2
2700B		%vreg26<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg26
2700B		  * SRLI %vreg26, %vreg26, 12; GR32Bit:%vreg26
2700B		  * %vreg23<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg23
2700B		  * %vreg25<def> = LUI <ga:@NH_STARTER_SHUTOFF>[TF=2]; GR32Bit:%vreg25
2700B		  * %vreg27<def> = ADD %vreg26, %vreg25; GR32Bit:%vreg27,%vreg26,%vreg25
2700B		  * %vreg28<def> = LW %vreg27, 0; mem:LD4[@NH_STARTER_SHUTOFF] GR32Bit:%vreg28,%vreg27
2700B		  * %vreg24<def> = FLW %vreg23, 0; mem:LD4[%3] FP32Bit:%vreg24 GR32Bit:%vreg23
2700B		  * %vreg29<def> = FCVT_S_W_RDY %vreg28; FP32Bit:%vreg29 GR32Bit:%vreg28
2700B		  * %vreg30<def> = FULE_S %vreg24, %vreg29; GR32Bit:%vreg30 FP32Bit:%vreg24,%vreg29
2700B		  * %vreg209<def> = LUI 1; GR32Bit:%vreg209
2700B		  * WRITEPM %vreg209, %vreg30, 0; GR32Bit:%vreg209,%vreg30
2700B		  * %vreg211<def> = LUI 2; GR32Bit:%vreg211
2700B		  * WRITEPM %vreg211, %vreg30, 0; GR32Bit:%vreg211,%vreg30
2700B		  * %vreg213<def> = LUI 3; GR32Bit:%vreg213
2700B		  * WRITEPM %vreg213, %vreg30, 0; GR32Bit:%vreg213,%vreg30
2700B		  * BNE <BB#9>, %vreg30, %zero; GR32Bit:%vreg30
2700B		  * %zero<def> = ADDI %zero, 0
2700B		  * %zero<def> = ADDI %zero, 0
2700B		  * JAL <BB#4>
2700B		  * %zero<def> = ADDI %zero, 0
2700B		  * %zero<def> = ADDI %zero, 0
2900B		%vreg210<def> = LUI 1; GR32Bit:%vreg210
2900B		  * %vreg215<def> = DREADPM %vreg210, 0; GR32Bit:%vreg215,%vreg210
2900B		  * BNE <BB#9>, %vreg215, %zero; GR32Bit:%vreg215
2900B		  * %zero<def> = ADDI %zero, 0
2900B		  * %zero<def> = ADDI %zero, 0
2900B		  * JAL <BB#4>
2900B		  * %zero<def> = ADDI %zero, 0
2900B		  * %zero<def> = ADDI %zero, 0
2980B		%vreg212<def> = LUI 2; GR32Bit:%vreg212
2980B		  * %vreg216<def> = DREADPM %vreg212, 0; GR32Bit:%vreg216,%vreg212
2980B		  * BNE <BB#9>, %vreg216, %zero; GR32Bit:%vreg216
2980B		  * %zero<def> = ADDI %zero, 0
2980B		  * %zero<def> = ADDI %zero, 0
2980B		  * JAL <BB#4>
2980B		  * %zero<def> = ADDI %zero, 0
2980B		  * %zero<def> = ADDI %zero, 0
3060B		%vreg214<def> = LUI 3; GR32Bit:%vreg214
3060B		  * %vreg217<def> = DREADPM %vreg214, 0; GR32Bit:%vreg217,%vreg214
3060B		  * BNE <BB#9>, %vreg217, %zero; GR32Bit:%vreg217
3060B		  * %zero<def> = ADDI %zero, 0
3060B		  * %zero<def> = ADDI %zero, 0
3060B		  * JAL <BB#4>
3060B		  * %zero<def> = ADDI %zero, 0
3060B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#4(16) BB#9(16)

3276B	BB#4: derived from LLVM BB %startup_starter3.if.then15
	    Predecessors according to CFG: BB#3
2708B		%vreg41<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg41
2708B		  * SRLI %vreg41, %vreg41, 12; GR32Bit:%vreg41
2708B		  * %vreg38<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg38
2708B		  * %vreg40<def> = LUI <ga:@SG_MAX_RPM>[TF=2]; GR32Bit:%vreg40
2708B		  * %vreg42<def> = ADD %vreg41, %vreg40; GR32Bit:%vreg42,%vreg41,%vreg40
2708B		  * %vreg43<def> = LW %vreg42, 0; mem:LD4[@SG_MAX_RPM] GR32Bit:%vreg43,%vreg42
2708B		  * %vreg39<def> = FLW %vreg38, 0; mem:LD4[%3] FP32Bit:%vreg39 GR32Bit:%vreg38
2708B		  * %vreg44<def> = FCVT_S_W_RDY %vreg43; FP32Bit:%vreg44 GR32Bit:%vreg43
2708B		  * %vreg45<def> = FULE_S %vreg39, %vreg44; GR32Bit:%vreg45 FP32Bit:%vreg39,%vreg44
2708B		  * %vreg218<def> = LUI 1; GR32Bit:%vreg218
2708B		  * WRITEPM %vreg218, %vreg45, 0; GR32Bit:%vreg218,%vreg45
2708B		  * %vreg220<def> = LUI 2; GR32Bit:%vreg220
2708B		  * WRITEPM %vreg220, %vreg45, 0; GR32Bit:%vreg220,%vreg45
2708B		  * %vreg222<def> = LUI 3; GR32Bit:%vreg222
2708B		  * WRITEPM %vreg222, %vreg45, 0; GR32Bit:%vreg222,%vreg45
2708B		  * BNE <BB#12>, %vreg45, %zero; GR32Bit:%vreg45
2708B		  * %zero<def> = ADDI %zero, 0
2708B		  * %zero<def> = ADDI %zero, 0
2708B		  * JAL <BB#5>
2708B		  * %zero<def> = ADDI %zero, 0
2708B		  * %zero<def> = ADDI %zero, 0
3476B		%vreg219<def> = LUI 1; GR32Bit:%vreg219
3476B		  * %vreg224<def> = DREADPM %vreg219, 0; GR32Bit:%vreg224,%vreg219
3476B		  * BNE <BB#12>, %vreg224, %zero; GR32Bit:%vreg224
3476B		  * %zero<def> = ADDI %zero, 0
3476B		  * %zero<def> = ADDI %zero, 0
3476B		  * JAL <BB#5>
3476B		  * %zero<def> = ADDI %zero, 0
3476B		  * %zero<def> = ADDI %zero, 0
3556B		%vreg221<def> = LUI 2; GR32Bit:%vreg221
3556B		  * %vreg225<def> = DREADPM %vreg221, 0; GR32Bit:%vreg225,%vreg221
3556B		  * BNE <BB#12>, %vreg225, %zero; GR32Bit:%vreg225
3556B		  * %zero<def> = ADDI %zero, 0
3556B		  * %zero<def> = ADDI %zero, 0
3556B		  * JAL <BB#5>
3556B		  * %zero<def> = ADDI %zero, 0
3556B		  * %zero<def> = ADDI %zero, 0
3636B		%vreg223<def> = LUI 3; GR32Bit:%vreg223
3636B		  * %vreg226<def> = DREADPM %vreg223, 0; GR32Bit:%vreg226,%vreg223
3636B		  * BNE <BB#12>, %vreg226, %zero; GR32Bit:%vreg226
3636B		  * %zero<def> = ADDI %zero, 0
3636B		  * %zero<def> = ADDI %zero, 0
3636B		  * JAL <BB#5>
3636B		  * %zero<def> = ADDI %zero, 0
3636B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#5(16) BB#12(16)

3852B	BB#5: derived from LLVM BB %startup_starter3.if.then19
	    Predecessors according to CFG: BB#4
3284B		%vreg49<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg49
3284B		  * SRLI %vreg49, %vreg49, 12; GR32Bit:%vreg49
3284B		  * %vreg46<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg46
3284B		  * %vreg48<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg48
3284B		  * %vreg50<def> = ADD %vreg49, %vreg48; GR32Bit:%vreg50,%vreg49,%vreg48
3284B		  * %vreg51<def> = FLW %vreg50, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg51 GR32Bit:%vreg50
3284B		  * %vreg47<def> = FLW %vreg46, 0; mem:LD4[%4] FP32Bit:%vreg47 GR32Bit:%vreg46
3284B		  * %vreg52<def> = FULE_S %vreg47, %vreg51; GR32Bit:%vreg52 FP32Bit:%vreg47,%vreg51
3284B		  * %vreg227<def> = LUI 1; GR32Bit:%vreg227
3284B		  * WRITEPM %vreg227, %vreg52, 0; GR32Bit:%vreg227,%vreg52
3284B		  * %vreg229<def> = LUI 2; GR32Bit:%vreg229
3284B		  * WRITEPM %vreg229, %vreg52, 0; GR32Bit:%vreg229,%vreg52
3284B		  * %vreg231<def> = LUI 3; GR32Bit:%vreg231
3284B		  * WRITEPM %vreg231, %vreg52, 0; GR32Bit:%vreg231,%vreg52
3284B		  * BNE <BB#7>, %vreg52, %zero; GR32Bit:%vreg52
3284B		  * %zero<def> = ADDI %zero, 0
3284B		  * %zero<def> = ADDI %zero, 0
3284B		  * JAL <BB#6>
3284B		  * %zero<def> = ADDI %zero, 0
3284B		  * %zero<def> = ADDI %zero, 0
4044B		%vreg228<def> = LUI 1; GR32Bit:%vreg228
4044B		  * %vreg233<def> = DREADPM %vreg228, 0; GR32Bit:%vreg233,%vreg228
4044B		  * BNE <BB#7>, %vreg233, %zero; GR32Bit:%vreg233
4044B		  * %zero<def> = ADDI %zero, 0
4044B		  * %zero<def> = ADDI %zero, 0
4044B		  * JAL <BB#6>
4044B		  * %zero<def> = ADDI %zero, 0
4044B		  * %zero<def> = ADDI %zero, 0
4124B		%vreg230<def> = LUI 2; GR32Bit:%vreg230
4124B		  * %vreg234<def> = DREADPM %vreg230, 0; GR32Bit:%vreg234,%vreg230
4124B		  * BNE <BB#7>, %vreg234, %zero; GR32Bit:%vreg234
4124B		  * %zero<def> = ADDI %zero, 0
4124B		  * %zero<def> = ADDI %zero, 0
4124B		  * JAL <BB#6>
4124B		  * %zero<def> = ADDI %zero, 0
4124B		  * %zero<def> = ADDI %zero, 0
4204B		%vreg232<def> = LUI 3; GR32Bit:%vreg232
4204B		  * %vreg235<def> = DREADPM %vreg232, 0; GR32Bit:%vreg235,%vreg232
4204B		  * BNE <BB#7>, %vreg235, %zero; GR32Bit:%vreg235
4204B		  * %zero<def> = ADDI %zero, 0
4204B		  * %zero<def> = ADDI %zero, 0
4204B		  * JAL <BB#6>
4204B		  * %zero<def> = ADDI %zero, 0
4204B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#6(16) BB#7(16)

4420B	BB#6: derived from LLVM BB %startup_starter3.if.then22
	    Predecessors according to CFG: BB#5
4428B		%vreg57<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg57
4428B		  * %vreg53<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg53
4428B		  * %vreg54<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg54
4428B		  * SRLI %vreg54, %vreg54, 12; GR32Bit:%vreg54
4428B		  * %vreg55<def> = ADD %vreg54, %vreg53; GR32Bit:%vreg55,%vreg54,%vreg53
4428B		  * %vreg56<def> = FLW %vreg55, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg56 GR32Bit:%vreg55
4428B		  * FSW %vreg56, %vreg57, 0; mem:ST4[%4] FP32Bit:%vreg56 GR32Bit:%vreg57
4436B		%zero<def> = ADDI %zero, 0
4444B		%zero<def> = ADDI %zero, 0
4452B		%zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#7

4508B	BB#7: derived from LLVM BB %startup_starter3.if.end
	    Predecessors according to CFG: BB#5 BB#6
4468B		%vreg61<def> = LUI <MCSym="%lo("ga#256")">; GR32Bit:%vreg61
4468B		  * SRLI %vreg61, %vreg61, 12; GR32Bit:%vreg61
4468B		  * %vreg58<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg58
4468B		  * %vreg60<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg60
4468B		  * %vreg62<def> = ADD %vreg61, %vreg60; GR32Bit:%vreg62,%vreg61,%vreg60
4468B		  * %vreg63<def> = FLW %vreg62, 0; mem:LD4[@SG_MAX] FP32Bit:%vreg63 GR32Bit:%vreg62
4468B		  * %vreg59<def> = FLW %vreg58, 0; mem:LD4[%4] FP32Bit:%vreg59 GR32Bit:%vreg58
4468B		  * %vreg64<def> = FULE_S %vreg63, %vreg59; GR32Bit:%vreg64 FP32Bit:%vreg63,%vreg59
4468B		  * %vreg236<def> = LUI 1; GR32Bit:%vreg236
4468B		  * WRITEPM %vreg236, %vreg64, 0; GR32Bit:%vreg236,%vreg64
4468B		  * %vreg238<def> = LUI 2; GR32Bit:%vreg238
4468B		  * WRITEPM %vreg238, %vreg64, 0; GR32Bit:%vreg238,%vreg64
4468B		  * %vreg240<def> = LUI 3; GR32Bit:%vreg240
4468B		  * WRITEPM %vreg240, %vreg64, 0; GR32Bit:%vreg240,%vreg64
4468B		  * BNE <BB#12>, %vreg64, %zero; GR32Bit:%vreg64
4468B		  * %zero<def> = ADDI %zero, 0
4468B		  * %zero<def> = ADDI %zero, 0
4468B		  * JAL <BB#8>
4468B		  * %zero<def> = ADDI %zero, 0
4468B		  * %zero<def> = ADDI %zero, 0
4700B		%vreg237<def> = LUI 1; GR32Bit:%vreg237
4700B		  * %vreg242<def> = DREADPM %vreg237, 0; GR32Bit:%vreg242,%vreg237
4700B		  * BNE <BB#12>, %vreg242, %zero; GR32Bit:%vreg242
4700B		  * %zero<def> = ADDI %zero, 0
4700B		  * %zero<def> = ADDI %zero, 0
4700B		  * JAL <BB#8>
4700B		  * %zero<def> = ADDI %zero, 0
4700B		  * %zero<def> = ADDI %zero, 0
4780B		%vreg239<def> = LUI 2; GR32Bit:%vreg239
4780B		  * %vreg243<def> = DREADPM %vreg239, 0; GR32Bit:%vreg243,%vreg239
4780B		  * BNE <BB#12>, %vreg243, %zero; GR32Bit:%vreg243
4780B		  * %zero<def> = ADDI %zero, 0
4780B		  * %zero<def> = ADDI %zero, 0
4780B		  * JAL <BB#8>
4780B		  * %zero<def> = ADDI %zero, 0
4780B		  * %zero<def> = ADDI %zero, 0
4860B		%vreg241<def> = LUI 3; GR32Bit:%vreg241
4860B		  * %vreg244<def> = DREADPM %vreg241, 0; GR32Bit:%vreg244,%vreg241
4860B		  * BNE <BB#12>, %vreg244, %zero; GR32Bit:%vreg244
4860B		  * %zero<def> = ADDI %zero, 0
4860B		  * %zero<def> = ADDI %zero, 0
4860B		  * JAL <BB#8>
4860B		  * %zero<def> = ADDI %zero, 0
4860B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#8(16) BB#12(16)

5076B	BB#8: derived from LLVM BB %startup_starter3.if.then25
	    Predecessors according to CFG: BB#7
5084B		%vreg69<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg69
5084B		  * %vreg65<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg65
5084B		  * %vreg66<def> = LUI <MCSym="%lo("ga#256")">; GR32Bit:%vreg66
5084B		  * SRLI %vreg66, %vreg66, 12; GR32Bit:%vreg66
5084B		  * %vreg67<def> = ADD %vreg66, %vreg65; GR32Bit:%vreg67,%vreg66,%vreg65
5084B		  * %vreg68<def> = FLW %vreg67, 0; mem:LD4[@SG_MAX] FP32Bit:%vreg68 GR32Bit:%vreg67
5084B		  * FSW %vreg68, %vreg69, 0; mem:ST4[%4] FP32Bit:%vreg68 GR32Bit:%vreg69
5084B		  * JAL <BB#12>
5084B		  * %zero<def> = ADDI %zero, 0
5084B		  * %zero<def> = ADDI %zero, 0
5164B		JAL <BB#12>
5164B		  * %zero<def> = ADDI %zero, 0
5164B		  * %zero<def> = ADDI %zero, 0
5188B		JAL <BB#12>
5188B		  * %zero<def> = ADDI %zero, 0
5188B		  * %zero<def> = ADDI %zero, 0
5212B		JAL <BB#12>
5212B		  * %zero<def> = ADDI %zero, 0
5212B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#12

5284B	BB#9: derived from LLVM BB %startup_starter3.if.else28
	    Predecessors according to CFG: BB#3
5100B		%vreg33<def> = LUI <MCSym="%lo("ga#1024")">; GR32Bit:%vreg33
5100B		  * SRLI %vreg33, %vreg33, 12; GR32Bit:%vreg33
5100B		  * %vreg32<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg32
5100B		  * %vreg34<def> = ADD %vreg33, %vreg32; GR32Bit:%vreg34,%vreg33,%vreg32
5100B		  * SW %zero, %vreg34, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg34
5100B		  * %vreg35<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg35
5100B		  * %vreg36<def> = LUI <MCSym="%lo("ga#1280")">; GR32Bit:%vreg36
5100B		  * SRLI %vreg36, %vreg36, 12; GR32Bit:%vreg36
5100B		  * %vreg37<def> = ADD %vreg36, %vreg35; GR32Bit:%vreg37,%vreg36,%vreg35
5100B		  * SW %zero, %vreg37, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg37
5100B		  * %vreg31<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg31
5100B		  * SW %zero, %vreg31, 0; mem:ST4[%4] GR32Bit:%vreg31
5100B		  * JAL <BB#12>
5100B		  * %zero<def> = ADDI %zero, 0
5100B		  * %zero<def> = ADDI %zero, 0
5460B		JAL <BB#12>
5460B		  * %zero<def> = ADDI %zero, 0
5460B		  * %zero<def> = ADDI %zero, 0
5484B		JAL <BB#12>
5484B		  * %zero<def> = ADDI %zero, 0
5484B		  * %zero<def> = ADDI %zero, 0
5508B		JAL <BB#12>
5508B		  * %zero<def> = ADDI %zero, 0
5508B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#12

5580B	BB#10: derived from LLVM BB %startup_starter3.if.then9
	    Predecessors according to CFG: BB#2
5588B		%vreg86<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg86
5588B		  * %vreg84<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg84
5588B		  * %vreg87<def> = LUI <MCSym="%lo("ga#1536")">; GR32Bit:%vreg87
5588B		  * SRLI %vreg87, %vreg87, 12; GR32Bit:%vreg87
5588B		  * %vreg88<def> = ADD %vreg87, %vreg86; GR32Bit:%vreg88,%vreg87,%vreg86
5588B		  * %vreg85<def> = FLW %vreg84, 0; mem:LD4[%3] FP32Bit:%vreg85 GR32Bit:%vreg84
5588B		  * %vreg80<def> = LUI 278432; GR32Bit:%vreg80
5588B		  * %a5<def> = LUI 0
5588B		  * %a5<def> = SRLI %a5<internal>, 12
5588B		  * ADD %vreg80, %vreg80, %a5; GR32Bit:%vreg80
5588B		  * %vreg74<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg74
5588B		  * %vreg70<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg70
5588B		  * %vreg83<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg83
5588B		  * %vreg71<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg71
5588B		  * SRLI %vreg71, %vreg71, 12; GR32Bit:%vreg71
5588B		  * %vreg72<def> = ADD %vreg71, %vreg70; GR32Bit:%vreg72,%vreg71,%vreg70
5588B		  * %vreg73<def> = FLW %vreg72, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg73 GR32Bit:%vreg72
5588B		  * %vreg75<def> = LW %vreg74, 0; mem:LD4[%2] GR32Bit:%vreg75,%vreg74
5588B		  * %vreg82<def> = COPY %vreg80; FP32Bit:%vreg82 GR32Bit:%vreg80
5588B		  * %vreg76<def> = LW %vreg75, 4; mem:LD4[%47] GR32Bit:%vreg76,%vreg75
5588B		  * FSW %vreg85, %vreg88, 0; mem:ST4[@nh_fin_de_rampe] FP32Bit:%vreg85 GR32Bit:%vreg88
5588B		  * %vreg77<def> = ADDI %vreg76, -350; GR32Bit:%vreg77,%vreg76
5588B		  * %vreg78<def> = FCVT_S_W_RDY %vreg77; FP32Bit:%vreg78 GR32Bit:%vreg77
5588B		  * %vreg79<def> = FMUL_S_RDY %vreg78, %vreg73; FP32Bit:%vreg79,%vreg78,%vreg73
5588B		  * %vreg81<def> = FDIV_S_RDY %vreg82, %vreg79; FP32Bit:%vreg81,%vreg82,%vreg79
5588B		  * FSW %vreg81, %vreg83, 0; mem:ST4[%4] FP32Bit:%vreg81 GR32Bit:%vreg83
5588B		  * JAL <BB#12>
5588B		  * %zero<def> = ADDI %zero, 0
5588B		  * %zero<def> = ADDI %zero, 0
5872B		JAL <BB#12>
5872B		  * %zero<def> = ADDI %zero, 0
5872B		  * %zero<def> = ADDI %zero, 0
5896B		JAL <BB#12>
5896B		  * %zero<def> = ADDI %zero, 0
5896B		  * %zero<def> = ADDI %zero, 0
5920B		JAL <BB#12>
5920B		  * %zero<def> = ADDI %zero, 0
5920B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#12

5992B	BB#11: derived from LLVM BB %startup_starter3.if.then
	    Predecessors according to CFG: BB#0
5672B		%vreg95<def> = LUI <MCSym="%lo("ga#1280")">; GR32Bit:%vreg95
5672B		  * SRLI %vreg95, %vreg95, 12; GR32Bit:%vreg95
5672B		  * %vreg94<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg94
5672B		  * %vreg96<def> = ADD %vreg95, %vreg94; GR32Bit:%vreg96,%vreg95,%vreg94
5672B		  * SW %zero, %vreg96, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg96
5672B		  * %vreg90<def> = ADDI %zero, 1; GR32Bit:%vreg90
5672B		  * %vreg92<def> = LUI <MCSym="%lo("ga#1024")">; GR32Bit:%vreg92
5672B		  * SRLI %vreg92, %vreg92, 12; GR32Bit:%vreg92
5672B		  * %vreg91<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg91
5672B		  * %vreg93<def> = ADD %vreg92, %vreg91; GR32Bit:%vreg93,%vreg92,%vreg91
5672B		  * SW %vreg90, %vreg93, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg90,%vreg93
5672B		  * %vreg89<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg89
5672B		  * SW %zero, %vreg89, 0; mem:ST4[%4] GR32Bit:%vreg89
6008B		%zero<def> = ADDI %zero, 0
6016B		%zero<def> = ADDI %zero, 0
6024B		%zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#12

6196B	BB#12: derived from LLVM BB %startup_starter3.return
	    Predecessors according to CFG: BB#1 BB#9 BB#4 BB#7 BB#8 BB#10 BB#11
6204B		%vreg99<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg99
6204B		  * %vreg97<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg97
6204B		  * %vreg98<def> = FLW %vreg97, 0; mem:LD4[%4] FP32Bit:%vreg98 GR32Bit:%vreg97
6204B		  * FSW %vreg98, %vreg99, 0; mem:ST4[%1] FP32Bit:%vreg98 GR32Bit:%vreg99
6204B		  * %vreg245<def> = ADDI %zero, 128; GR32Bit:%vreg245
6204B		  * %vreg246<def> = ADDI %zero, 1; GR32Bit:%vreg246
6204B		  * WRITECM %vreg245, %vreg246, 60; GR32Bit:%vreg245,%vreg246
6204B		  * %vreg247<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg247
6204B		  * %vreg248<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg248
6204B		  * %vreg249<def> = SRLI %vreg248, 12; GR32Bit:%vreg249,%vreg248
6204B		  * %vreg250<def> = ADD %vreg247, %vreg249; GR32Bit:%vreg250,%vreg247,%vreg249
6204B		  * %vreg251<def> = ADDI %zero, 28; GR32Bit:%vreg251
6204B		  * %vreg252<def> = SRLI %vreg245, 22; GR32Bit:%vreg252,%vreg245
6204B		  * %vreg253<def> = SRLI %vreg245, 12; GR32Bit:%vreg253,%vreg245
6204B		  * %vreg254<def> = ANDI %vreg253, 15; GR32Bit:%vreg254,%vreg253
6204B		  * %vreg255<def> = SRLI %vreg245, 6; GR32Bit:%vreg255,%vreg245
6204B		  * %vreg256<def> = ANDI %vreg255, 63; GR32Bit:%vreg256,%vreg255
6204B		  * %vreg257<def> = ADDI %zero, 832; GR32Bit:%vreg257
6204B		  * %vreg258<def> = MUL %vreg252, %vreg257; GR32Bit:%vreg258,%vreg252,%vreg257
6204B		  * %vreg259<def> = ADDI %zero, 52; GR32Bit:%vreg259
6204B		  * %vreg260<def> = MUL %vreg254, %vreg259; GR32Bit:%vreg260,%vreg254,%vreg259
6204B		  * %vreg261<def> = ADD %vreg260, %vreg256; GR32Bit:%vreg261,%vreg260,%vreg256
6204B		  * %vreg262<def> = ADD %vreg261, %vreg258; GR32Bit:%vreg262,%vreg261,%vreg258
6204B		  * %vreg263<def> = MUL %vreg262, %vreg251; GR32Bit:%vreg263,%vreg262,%vreg251
6204B		  * %vreg264<def> = ADD %vreg263, %vreg250; GR32Bit:%vreg264,%vreg263,%vreg250
6204B		  * %vreg265<def> = FLW %t5, 0; FP32Bit:%vreg265
6204B		  * FSW %vreg265, %vreg264, 0; FP32Bit:%vreg265 GR32Bit:%vreg264
6204B		  * %vreg266<def> = LUI 1; GR32Bit:%vreg266
6204B		  * WRITEPM %vreg266, %vreg245, 0; GR32Bit:%vreg266,%vreg245
6204B		  * FDELETE %t4, 0
6204B		  * END 0
6204B		  * %zero<def> = ADDI %zero, 0
6204B		  * %zero<def> = ADDI %zero, 0
6476B		%vreg267<def> = LUI 1; GR32Bit:%vreg267
6476B		  * %vreg268<def> = DREADPM %vreg267, 0; GR32Bit:%vreg268,%vreg267
6476B		  * %vreg269<def> = LUI 1048575; GR32Bit:%vreg269
6476B		  * %a5<def> = LUI 4095
6476B		  * %a5<def> = SRLI %a5<internal>, 12
6476B		  * ADD %vreg269, %vreg269, %a5; GR32Bit:%vreg269
6476B		  * SYNC %vreg268, %vreg269, 60; GR32Bit:%vreg268,%vreg269
6476B		  * END 0
6476B		  * %zero<def> = ADDI %zero, 0
6476B		  * %zero<def> = ADDI %zero, 0
6556B		END 0
6556B		  * %zero<def> = ADDI %zero, 0
6556B		  * %zero<def> = ADDI %zero, 0
6580B		END 0
6580B		  * %zero<def> = ADDI %zero, 0
6580B		  * %zero<def> = ADDI %zero, 0

# End machine code for function startup_starter3.

********** COMPUTING LIVE DEBUG VARIABLES: startup_starter3 **********
********** DEBUG VARIABLES **********
********** Compute Spill Weights **********
********** Function: startup_starter3
********** GREEDY REGISTER ALLOCATION **********
********** Function: startup_starter3

selectOrSplit GR32Bit:%vreg245 [6244r,6436r:0)  0@6244r
assigning %vreg245 to %t0: t0

selectOrSplit GR32Bit:%vreg83 [5664r,5792r:0)  0@5664r
assigning %vreg83 to %t0: t0

selectOrSplit GR32Bit:%vreg268 [6484r,6612B:0)  0@6484r
assigning %vreg268 to %t0: t0

selectOrSplit GR32Bit:%vreg9 [148r,268r:0)  0@148r
assigning %vreg9 to %t0: t0

selectOrSplit GR32Bit:%vreg10 [156r,268r:0)  0@156r
assigning %vreg10 to %t1: t1

selectOrSplit GR32Bit:%vreg105 [28r,140r:0)  0@28r
assigning %vreg105 to %t0: t0

selectOrSplit GR32Bit:%vreg124 [420r,532r:0)  0@420r
assigning %vreg124 to %t0: t0

selectOrSplit GR32Bit:%vreg143 [636r,748r:0)  0@636r
assigning %vreg143 to %t0: t0

selectOrSplit GR32Bit:%vreg162 [852r,964r:0)  0@852r
assigning %vreg162 to %t0: t0

selectOrSplit GR32Bit:%vreg250 [6292r,6404r:0)  0@6292r
assigning %vreg250 to %t1: t1

selectOrSplit GR32Bit:%vreg0 [172r,276r:0)  0@172r
assigning %vreg0 to %t2: t2

selectOrSplit GR32Bit:%vreg88 [5624r,5728r:0)  0@5624r
assigning %vreg88 to %t1: t1

selectOrSplit GR32Bit:%vreg17 [1472r,1572r:0)  0@1472r
assigning %vreg17 to %t0: t0

selectOrSplit GR32Bit:%vreg22 [2088r,2188r:0)  0@2088r
assigning %vreg22 to %t0: t0

selectOrSplit FP32Bit:%vreg85 [5632r,5728r:0)  0@5632r
assigning %vreg85 to %ft1: ft1

selectOrSplit GR32Bit:%vreg106 [36r,132r:0)  0@36r
assigning %vreg106 to %t1: t1

selectOrSplit GR32Bit:%vreg125 [428r,524r:0)  0@428r
assigning %vreg125 to %t1: t1

selectOrSplit GR32Bit:%vreg144 [644r,740r:0)  0@644r
assigning %vreg144 to %t1: t1

selectOrSplit GR32Bit:%vreg163 [860r,956r:0)  0@860r
assigning %vreg163 to %t1: t1

selectOrSplit GR32Bit:%vreg193 [1812r,1908r:0)  0@1812r
assigning %vreg193 to %t0: t0

selectOrSplit GR32Bit:%vreg205 [2428r,2524r:0)  0@2428r
assigning %vreg205 to %t0: t0

selectOrSplit GR32Bit:%vreg251 [6300r,6396r:0)  0@6300r
assigning %vreg251 to %t2: t2

selectOrSplit GR32Bit:%vreg6 [164r,252r:0)  0@164r
assigning %vreg6 to %fp: fp

selectOrSplit GR32Bit:%vreg15 [1496r,1572r:0)  0@1496r
assigning %vreg15 to %t1: t1

selectOrSplit GR32Bit:%vreg20 [2112r,2188r:0)  0@2112r
assigning %vreg20 to %t1: t1

selectOrSplit GR32Bit:%vreg57 [4428r,4500r:0)  0@4428r
assigning %vreg57 to %t0: t0

selectOrSplit GR32Bit:%vreg80 [5640r,5712r:0)  0@5640r
assigning %vreg80 to %t2: t2

selectOrSplit FP32Bit:%vreg73 [5688r,5752r:0)  0@5688r
assigning %vreg73 to %ft2: ft2

selectOrSplit FP32Bit:%vreg82 [5712r,5776r:0)  0@5712r
assigning %vreg82 to %ft3: ft3

selectOrSplit GR32Bit:%vreg190 [1796r,1860r:0)  0@1796r
assigning %vreg190 to %t1: t1

selectOrSplit GR32Bit:%vreg202 [2412r,2476r:0)  0@2412r
assigning %vreg202 to %t1: t1

selectOrSplit GR32Bit:%vreg7 [204r,260r:0)  0@204r
assigning %vreg7 to %a0: a0

selectOrSplit GR32Bit:%vreg12 [284r,340r:0)  0@284r
assigning %vreg12 to %t0: t0

selectOrSplit GR32Bit:%vreg30 [2796r,2852r:0)  0@2796r
assigning %vreg30 to %t0: t0

selectOrSplit GR32Bit:%vreg45 [3372r,3428r:0)  0@3372r
assigning %vreg45 to %t0: t0

selectOrSplit GR32Bit:%vreg52 [3940r,3996r:0)  0@3940r
assigning %vreg52 to %t0: t0

selectOrSplit GR32Bit:%vreg64 [4596r,4652r:0)  0@4596r
assigning %vreg64 to %t0: t0

selectOrSplit GR32Bit:%vreg74 [5648r,5704r:0)  0@5648r
assigning %vreg74 to %fp: fp

selectOrSplit GR32Bit:%vreg1 [180r,228r:0)  0@180r
assigning %vreg1 to %a1: a1

selectOrSplit GR32Bit:%vreg4 [196r,244r:0)  0@196r
assigning %vreg4 to %a2: a2

selectOrSplit GR32Bit:%vreg8 [212r,260r:0)  0@212r
assigning %vreg8 to %a3: a3

selectOrSplit FP32Bit:%vreg24 [2748r,2796r:0)  0@2748r
assigning %vreg24 to %ft1: ft1

selectOrSplit GR32Bit:%vreg28 [2740r,2788r:0)  0@2740r
assigning %vreg28 to %t0: t0

selectOrSplit FP32Bit:%vreg39 [3324r,3372r:0)  0@3324r
assigning %vreg39 to %ft1: ft1

selectOrSplit GR32Bit:%vreg43 [3316r,3364r:0)  0@3316r
assigning %vreg43 to %t0: t0

selectOrSplit FP32Bit:%vreg51 [3892r,3940r:0)  0@3892r
assigning %vreg51 to %ft1: ft1

selectOrSplit FP32Bit:%vreg63 [4548r,4596r:0)  0@4548r
assigning %vreg63 to %ft1: ft1

selectOrSplit GR32Bit:%vreg69 [5084r,5132r:0)  0@5084r
assigning %vreg69 to %t0: t0

selectOrSplit GR32Bit:%vreg107 [44r,92r:0)  0@44r
assigning %vreg107 to %t2: t2

selectOrSplit GR32Bit:%vreg109 [60r,108r:0)  0@60r
assigning %vreg109 to %fp: fp

selectOrSplit GR32Bit:%vreg126 [436r,484r:0)  0@436r
assigning %vreg126 to %t2: t2

selectOrSplit GR32Bit:%vreg128 [452r,500r:0)  0@452r
assigning %vreg128 to %fp: fp

selectOrSplit GR32Bit:%vreg145 [652r,700r:0)  0@652r
assigning %vreg145 to %t2: t2

selectOrSplit GR32Bit:%vreg147 [668r,716r:0)  0@668r
assigning %vreg147 to %fp: fp

selectOrSplit GR32Bit:%vreg164 [868r,916r:0)  0@868r
assigning %vreg164 to %t2: t2

selectOrSplit GR32Bit:%vreg166 [884r,932r:0)  0@884r
assigning %vreg166 to %fp: fp

selectOrSplit GR32Bit:%vreg185 [1500r,1548r:0)  0@1500r
assigning %vreg185 to %t2: t2

selectOrSplit GR32Bit:%vreg196 [1860r,1908r:0)  0@1860r
assigning %vreg196 to %t1: t1

selectOrSplit GR32Bit:%vreg197 [2116r,2164r:0)  0@2116r
assigning %vreg197 to %t2: t2

selectOrSplit GR32Bit:%vreg208 [2476r,2524r:0)  0@2476r
assigning %vreg208 to %t1: t1

selectOrSplit GR32Bit:%vreg252 [6308r,6356r:0)  0@6308r
assigning %vreg252 to %fp: fp

selectOrSplit GR32Bit:%vreg254 [6324r,6372r:0)  0@6324r
assigning %vreg254 to %a0: a0

selectOrSplit GR32Bit:%vreg90 [6056r,6100r:0)  0@6056r
assigning %vreg90 to %t0: t0

selectOrSplit FP32Bit:%vreg47 [3900r,3940r:0)  0@3900r
assigning %vreg47 to %ft2: ft2

selectOrSplit FP32Bit:%vreg59 [4556r,4596r:0)  0@4556r
assigning %vreg59 to %ft2: ft2

selectOrSplit GR32Bit:%vreg95 [6000r,6040r:0)  0@6000r
assigning %vreg95 to %t0: t0

selectOrSplit GR32Bit:%vreg111 [76r,116r:0)  0@76r
assigning %vreg111 to %a0: a0

selectOrSplit GR32Bit:%vreg130 [468r,508r:0)  0@468r
assigning %vreg130 to %a0: a0

selectOrSplit GR32Bit:%vreg149 [684r,724r:0)  0@684r
assigning %vreg149 to %a0: a0

selectOrSplit GR32Bit:%vreg168 [900r,940r:0)  0@900r
assigning %vreg168 to %a0: a0

selectOrSplit GR32Bit:%vreg187 [1516r,1556r:0)  0@1516r
assigning %vreg187 to %fp: fp

selectOrSplit GR32Bit:%vreg199 [2132r,2172r:0)  0@2132r
assigning %vreg199 to %fp: fp

selectOrSplit GR32Bit:%vreg256 [6340r,6380r:0)  0@6340r
assigning %vreg256 to %a1: a1

selectOrSplit GR32Bit:%vreg84 [5596r,5632r:0)  0@5596r
assigning %vreg84 to %t0: t0

selectOrSplit GR32Bit:%vreg86 [5588r,5624r:0)  0@5588r
assigning %vreg86 to %t1: t1

selectOrSplit GR32Bit:%vreg23 [2716r,2748r:0)  0@2716r
assigning %vreg23 to %t1: t1

selectOrSplit GR32Bit:%vreg38 [3292r,3324r:0)  0@3292r
assigning %vreg38 to %t1: t1

selectOrSplit GR32Bit:%vreg46 [3868r,3900r:0)  0@3868r
assigning %vreg46 to %t0: t0

selectOrSplit GR32Bit:%vreg58 [4524r,4556r:0)  0@4524r
assigning %vreg58 to %t0: t0

selectOrSplit GR32Bit:%vreg99 [6204r,6236r:0)  0@6204r
assigning %vreg99 to %t0: t0

selectOrSplit GR32Bit:%vreg113 [92r,124r:0)  0@92r
assigning %vreg113 to %t2: t2

selectOrSplit GR32Bit:%vreg132 [484r,516r:0)  0@484r
assigning %vreg132 to %t2: t2

selectOrSplit GR32Bit:%vreg151 [700r,732r:0)  0@700r
assigning %vreg151 to %t2: t2

selectOrSplit GR32Bit:%vreg170 [916r,948r:0)  0@916r
assigning %vreg170 to %t2: t2

selectOrSplit GR32Bit:%vreg184 [1260r,1292r:0)  0@1260r
assigning %vreg184 to %t0: t0

selectOrSplit GR32Bit:%vreg189 [1532r,1564r:0)  0@1532r
assigning %vreg189 to %a0: a0

selectOrSplit GR32Bit:%vreg201 [2148r,2180r:0)  0@2148r
assigning %vreg201 to %a0: a0

selectOrSplit GR32Bit:%vreg217 [3076r,3108r:0)  0@3076r
assigning %vreg217 to %t0: t0

selectOrSplit GR32Bit:%vreg226 [3652r,3684r:0)  0@3652r
assigning %vreg226 to %t0: t0

selectOrSplit GR32Bit:%vreg235 [4220r,4252r:0)  0@4220r
assigning %vreg235 to %t0: t0

selectOrSplit GR32Bit:%vreg244 [4876r,4908r:0)  0@4876r
assigning %vreg244 to %t0: t0

selectOrSplit GR32Bit:%vreg258 [6356r,6388r:0)  0@6356r
assigning %vreg258 to %fp: fp

selectOrSplit GR32Bit:%vreg92 [6064r,6092r:0)  0@6064r
assigning %vreg92 to %t1: t1

selectOrSplit GR32Bit:%vreg26 [2708r,2732r:0)  0@2708r
assigning %vreg26 to %t0: t0

selectOrSplit GR32Bit:%vreg41 [3284r,3308r:0)  0@3284r
assigning %vreg41 to %t0: t0

selectOrSplit GR32Bit:%vreg49 [3860r,3884r:0)  0@3860r
assigning %vreg49 to %t1: t1

selectOrSplit GR32Bit:%vreg61 [4516r,4540r:0)  0@4516r
assigning %vreg61 to %t1: t1

selectOrSplit GR32Bit:%vreg70 [5656r,5680r:0)  0@5656r
assigning %vreg70 to %a0: a0

selectOrSplit FP32Bit:%vreg79 [5752r,5776r:0)  0@5752r
assigning %vreg79 to %ft1: ft1

selectOrSplit GR32Bit:%vreg121 [396r,420r:0)  0@396r
assigning %vreg121 to %t0: t0

selectOrSplit GR32Bit:%vreg140 [612r,636r:0)  0@612r
assigning %vreg140 to %t0: t0

selectOrSplit GR32Bit:%vreg159 [828r,852r:0)  0@828r
assigning %vreg159 to %t0: t0

selectOrSplit GR32Bit:%vreg186 [1620r,1644r:0)  0@1620r
assigning %vreg186 to %t0: t0

selectOrSplit GR32Bit:%vreg188 [1708r,1732r:0)  0@1708r
assigning %vreg188 to %t0: t0

selectOrSplit GR32Bit:%vreg198 [2236r,2260r:0)  0@2236r
assigning %vreg198 to %t0: t0

selectOrSplit GR32Bit:%vreg200 [2324r,2348r:0)  0@2324r
assigning %vreg200 to %t0: t0

selectOrSplit GR32Bit:%vreg247 [6268r,6292r:0)  0@6268r
assigning %vreg247 to %t1: t1

selectOrSplit GR32Bit:%vreg87 [5604r,5624r:0)  0@5604r
assigning %vreg87 to %t2: t2

selectOrSplit GR32Bit:%vreg3 [220r,236r:0)  0@220r
assigning %vreg3 to %a4: a4

selectOrSplit GR32Bit:%vreg33 [5292r,5308r:0)  0@5292r
assigning %vreg33 to %t0: t0

selectOrSplit GR32Bit:%vreg35 [5324r,5340r:0)  0@5324r
assigning %vreg35 to %t0: t0

selectOrSplit GR32Bit:%vreg53 [4460r,4476r:0)  0@4460r
assigning %vreg53 to %t1: t1

selectOrSplit FP32Bit:%vreg56 [4484r,4500r:0)  0@4484r
assigning %vreg56 to %ft1: ft1

selectOrSplit GR32Bit:%vreg65 [5092r,5108r:0)  0@5092r
assigning %vreg65 to %t1: t1

selectOrSplit FP32Bit:%vreg68 [5116r,5132r:0)  0@5116r
assigning %vreg68 to %ft1: ft1

selectOrSplit GR32Bit:%vreg75 [5704r,5720r:0)  0@5704r
assigning %vreg75 to %fp: fp

selectOrSplit GR32Bit:%vreg76 [5720r,5736r:0)  0@5720r
assigning %vreg76 to %t2: t2

selectOrSplit FP32Bit:%vreg81 [5776r,5792r:0)  0@5776r
assigning %vreg81 to %ft1: ft1

selectOrSplit GR32Bit:%vreg89 [6108r,6124r:0)  0@6108r
assigning %vreg89 to %t0: t0

selectOrSplit FP32Bit:%vreg98 [6220r,6236r:0)  0@6220r
assigning %vreg98 to %ft1: ft1

selectOrSplit GR32Bit:%vreg102 [12r,28r:0)  0@12r
assigning %vreg102 to %t0: t0

selectOrSplit GR32Bit:%vreg181 [1244r,1260r:0)  0@1244r
assigning %vreg181 to %t0: t0

selectOrSplit GR32Bit:%vreg191 [1636r,1652r:0)  0@1636r
assigning %vreg191 to %t1: t1

selectOrSplit GR32Bit:%vreg192 [1724r,1740r:0)  0@1724r
assigning %vreg192 to %t1: t1

selectOrSplit GR32Bit:%vreg203 [2252r,2268r:0)  0@2252r
assigning %vreg203 to %t1: t1

selectOrSplit GR32Bit:%vreg204 [2340r,2356r:0)  0@2340r
assigning %vreg204 to %t1: t1

selectOrSplit GR32Bit:%vreg210 [2900r,2916r:0)  0@2900r
assigning %vreg210 to %t0: t0

selectOrSplit GR32Bit:%vreg212 [2980r,2996r:0)  0@2980r
assigning %vreg212 to %t0: t0

selectOrSplit GR32Bit:%vreg214 [3060r,3076r:0)  0@3060r
assigning %vreg214 to %t0: t0

selectOrSplit GR32Bit:%vreg219 [3476r,3492r:0)  0@3476r
assigning %vreg219 to %t0: t0

selectOrSplit GR32Bit:%vreg221 [3556r,3572r:0)  0@3556r
assigning %vreg221 to %t0: t0

selectOrSplit GR32Bit:%vreg223 [3636r,3652r:0)  0@3636r
assigning %vreg223 to %t0: t0

selectOrSplit GR32Bit:%vreg228 [4044r,4060r:0)  0@4044r
assigning %vreg228 to %t0: t0

selectOrSplit GR32Bit:%vreg230 [4124r,4140r:0)  0@4124r
assigning %vreg230 to %t0: t0

selectOrSplit GR32Bit:%vreg232 [4204r,4220r:0)  0@4204r
assigning %vreg232 to %t0: t0

selectOrSplit GR32Bit:%vreg237 [4700r,4716r:0)  0@4700r
assigning %vreg237 to %t0: t0

selectOrSplit GR32Bit:%vreg239 [4780r,4796r:0)  0@4780r
assigning %vreg239 to %t0: t0

selectOrSplit GR32Bit:%vreg241 [4860r,4876r:0)  0@4860r
assigning %vreg241 to %t0: t0

selectOrSplit GR32Bit:%vreg264 [6404r,6420r:0)  0@6404r
assigning %vreg264 to %t1: t1

selectOrSplit FP32Bit:%vreg2 [228r,236r:0)  0@228r
assigning %vreg2 to %ft1: ft1

selectOrSplit FP32Bit:%vreg5 [244r,252r:0)  0@244r
assigning %vreg5 to %ft1: ft1

selectOrSplit GR32Bit:%vreg11 [276r,284r:0)  0@276r
assigning %vreg11 to %t0: t0

selectOrSplit GR32Bit:%vreg13 [1480r,1488r:0)  0@1480r
assigning %vreg13 to %t1: t1

selectOrSplit GR32Bit:%vreg14 [1488r,1496r:0)  0@1488r
assigning %vreg14 to %t1: t1

selectOrSplit GR32Bit:%vreg16 [1464r,1472r:0)  0@1464r
assigning %vreg16 to %t0: t0

selectOrSplit GR32Bit:%vreg18 [2096r,2104r:0)  0@2096r
assigning %vreg18 to %t1: t1

selectOrSplit GR32Bit:%vreg19 [2104r,2112r:0)  0@2104r
assigning %vreg19 to %t1: t1

selectOrSplit GR32Bit:%vreg21 [2080r,2088r:0)  0@2080r
assigning %vreg21 to %t0: t0

selectOrSplit GR32Bit:%vreg25 [2724r,2732r:0)  0@2724r
assigning %vreg25 to %t2: t2

selectOrSplit GR32Bit:%vreg27 [2732r,2740r:0)  0@2732r
assigning %vreg27 to %t0: t0

selectOrSplit FP32Bit:%vreg29 [2788r,2796r:0)  0@2788r
assigning %vreg29 to %ft2: ft2

selectOrSplit GR32Bit:%vreg31 [5356r,5364r:0)  0@5356r
assigning %vreg31 to %t0: t0

selectOrSplit GR32Bit:%vreg32 [5300r,5308r:0)  0@5300r
assigning %vreg32 to %t1: t1

selectOrSplit GR32Bit:%vreg34 [5308r,5316r:0)  0@5308r
assigning %vreg34 to %t0: t0

selectOrSplit GR32Bit:%vreg36 [5332r,5340r:0)  0@5332r
assigning %vreg36 to %t1: t1

selectOrSplit GR32Bit:%vreg37 [5340r,5348r:0)  0@5340r
assigning %vreg37 to %t0: t0

selectOrSplit GR32Bit:%vreg40 [3300r,3308r:0)  0@3300r
assigning %vreg40 to %t2: t2

selectOrSplit GR32Bit:%vreg42 [3308r,3316r:0)  0@3308r
assigning %vreg42 to %t0: t0

selectOrSplit FP32Bit:%vreg44 [3364r,3372r:0)  0@3364r
assigning %vreg44 to %ft2: ft2

selectOrSplit GR32Bit:%vreg48 [3876r,3884r:0)  0@3876r
assigning %vreg48 to %t2: t2

selectOrSplit GR32Bit:%vreg50 [3884r,3892r:0)  0@3884r
assigning %vreg50 to %t1: t1

selectOrSplit GR32Bit:%vreg54 [4468r,4476r:0)  0@4468r
assigning %vreg54 to %t2: t2

selectOrSplit GR32Bit:%vreg55 [4476r,4484r:0)  0@4476r
assigning %vreg55 to %t1: t1

selectOrSplit GR32Bit:%vreg60 [4532r,4540r:0)  0@4532r
assigning %vreg60 to %t2: t2

selectOrSplit GR32Bit:%vreg62 [4540r,4548r:0)  0@4540r
assigning %vreg62 to %t1: t1

selectOrSplit GR32Bit:%vreg66 [5100r,5108r:0)  0@5100r
assigning %vreg66 to %t2: t2

selectOrSplit GR32Bit:%vreg67 [5108r,5116r:0)  0@5108r
assigning %vreg67 to %t1: t1

selectOrSplit GR32Bit:%vreg71 [5672r,5680r:0)  0@5672r
assigning %vreg71 to %a1: a1

selectOrSplit GR32Bit:%vreg72 [5680r,5688r:0)  0@5680r
assigning %vreg72 to %a0: a0

selectOrSplit GR32Bit:%vreg77 [5736r,5744r:0)  0@5736r
assigning %vreg77 to %t1: t1

selectOrSplit FP32Bit:%vreg78 [5744r,5752r:0)  0@5744r
assigning %vreg78 to %ft1: ft1

selectOrSplit GR32Bit:%vreg91 [6084r,6092r:0)  0@6084r
assigning %vreg91 to %t2: t2

selectOrSplit GR32Bit:%vreg93 [6092r,6100r:0)  0@6092r
assigning %vreg93 to %t1: t1

selectOrSplit GR32Bit:%vreg94 [6032r,6040r:0)  0@6032r
assigning %vreg94 to %t1: t1

selectOrSplit GR32Bit:%vreg96 [6040r,6048r:0)  0@6040r
assigning %vreg96 to %t0: t0

selectOrSplit GR32Bit:%vreg97 [6212r,6220r:0)  0@6212r
assigning %vreg97 to %t1: t1

selectOrSplit GR32Bit:%vreg104 [20r,28r:0)  0@20r
assigning %vreg104 to %t1: t1

selectOrSplit GR32Bit:%vreg108 [52r,60r:0)  0@52r
assigning %vreg108 to %fp: fp

selectOrSplit GR32Bit:%vreg110 [68r,76r:0)  0@68r
assigning %vreg110 to %a0: a0

selectOrSplit GR32Bit:%vreg112 [84r,92r:0)  0@84r
assigning %vreg112 to %a1: a1

selectOrSplit GR32Bit:%vreg114 [100r,108r:0)  0@100r
assigning %vreg114 to %a1: a1

selectOrSplit GR32Bit:%vreg115 [108r,116r:0)  0@108r
assigning %vreg115 to %fp: fp

selectOrSplit GR32Bit:%vreg116 [116r,124r:0)  0@116r
assigning %vreg116 to %fp: fp

selectOrSplit GR32Bit:%vreg117 [124r,132r:0)  0@124r
assigning %vreg117 to %t2: t2

selectOrSplit GR32Bit:%vreg118 [132r,140r:0)  0@132r
assigning %vreg118 to %t1: t1

selectOrSplit GR32Bit:%vreg122 [404r,412r:0)  0@404r
assigning %vreg122 to %t1: t1

selectOrSplit GR32Bit:%vreg123 [412r,420r:0)  0@412r
assigning %vreg123 to %t1: t1

selectOrSplit GR32Bit:%vreg127 [444r,452r:0)  0@444r
assigning %vreg127 to %fp: fp

selectOrSplit GR32Bit:%vreg129 [460r,468r:0)  0@460r
assigning %vreg129 to %a0: a0

selectOrSplit GR32Bit:%vreg131 [476r,484r:0)  0@476r
assigning %vreg131 to %a1: a1

selectOrSplit GR32Bit:%vreg133 [492r,500r:0)  0@492r
assigning %vreg133 to %a1: a1

selectOrSplit GR32Bit:%vreg134 [500r,508r:0)  0@500r
assigning %vreg134 to %fp: fp

selectOrSplit GR32Bit:%vreg135 [508r,516r:0)  0@508r
assigning %vreg135 to %fp: fp

selectOrSplit GR32Bit:%vreg136 [516r,524r:0)  0@516r
assigning %vreg136 to %t2: t2

selectOrSplit GR32Bit:%vreg137 [524r,532r:0)  0@524r
assigning %vreg137 to %t1: t1

selectOrSplit GR32Bit:%vreg141 [620r,628r:0)  0@620r
assigning %vreg141 to %t1: t1

selectOrSplit GR32Bit:%vreg142 [628r,636r:0)  0@628r
assigning %vreg142 to %t1: t1

selectOrSplit GR32Bit:%vreg146 [660r,668r:0)  0@660r
assigning %vreg146 to %fp: fp

selectOrSplit GR32Bit:%vreg148 [676r,684r:0)  0@676r
assigning %vreg148 to %a0: a0

selectOrSplit GR32Bit:%vreg150 [692r,700r:0)  0@692r
assigning %vreg150 to %a1: a1

selectOrSplit GR32Bit:%vreg152 [708r,716r:0)  0@708r
assigning %vreg152 to %a1: a1

selectOrSplit GR32Bit:%vreg153 [716r,724r:0)  0@716r
assigning %vreg153 to %fp: fp

selectOrSplit GR32Bit:%vreg154 [724r,732r:0)  0@724r
assigning %vreg154 to %fp: fp

selectOrSplit GR32Bit:%vreg155 [732r,740r:0)  0@732r
assigning %vreg155 to %t2: t2

selectOrSplit GR32Bit:%vreg156 [740r,748r:0)  0@740r
assigning %vreg156 to %t1: t1

selectOrSplit GR32Bit:%vreg160 [836r,844r:0)  0@836r
assigning %vreg160 to %t1: t1

selectOrSplit GR32Bit:%vreg161 [844r,852r:0)  0@844r
assigning %vreg161 to %t1: t1

selectOrSplit GR32Bit:%vreg165 [876r,884r:0)  0@876r
assigning %vreg165 to %fp: fp

selectOrSplit GR32Bit:%vreg167 [892r,900r:0)  0@892r
assigning %vreg167 to %a0: a0

selectOrSplit GR32Bit:%vreg169 [908r,916r:0)  0@908r
assigning %vreg169 to %a1: a1

selectOrSplit GR32Bit:%vreg171 [924r,932r:0)  0@924r
assigning %vreg171 to %a1: a1

selectOrSplit GR32Bit:%vreg172 [932r,940r:0)  0@932r
assigning %vreg172 to %fp: fp

selectOrSplit GR32Bit:%vreg173 [940r,948r:0)  0@940r
assigning %vreg173 to %fp: fp

selectOrSplit GR32Bit:%vreg174 [948r,956r:0)  0@948r
assigning %vreg174 to %t2: t2

selectOrSplit GR32Bit:%vreg175 [956r,964r:0)  0@956r
assigning %vreg175 to %t1: t1

selectOrSplit GR32Bit:%vreg176 [292r,300r:0)  0@292r
assigning %vreg176 to %t1: t1

selectOrSplit GR32Bit:%vreg177 [540r,548r:0)  0@540r
assigning %vreg177 to %t0: t0

selectOrSplit GR32Bit:%vreg178 [308r,316r:0)  0@308r
assigning %vreg178 to %t1: t1

selectOrSplit GR32Bit:%vreg179 [756r,764r:0)  0@756r
assigning %vreg179 to %t0: t0

selectOrSplit GR32Bit:%vreg180 [324r,332r:0)  0@324r
assigning %vreg180 to %t1: t1

selectOrSplit GR32Bit:%vreg182 [548r,556r:0)  0@548r
assigning %vreg182 to %t0: t0

selectOrSplit GR32Bit:%vreg183 [764r,772r:0)  0@764r
assigning %vreg183 to %t0: t0

selectOrSplit GR32Bit:%vreg194 [1644r,1652r:0)  0@1644r
assigning %vreg194 to %t0: t0

selectOrSplit GR32Bit:%vreg195 [1732r,1740r:0)  0@1732r
assigning %vreg195 to %t0: t0

selectOrSplit GR32Bit:%vreg206 [2260r,2268r:0)  0@2260r
assigning %vreg206 to %t0: t0

selectOrSplit GR32Bit:%vreg207 [2348r,2356r:0)  0@2348r
assigning %vreg207 to %t0: t0

selectOrSplit GR32Bit:%vreg209 [2804r,2812r:0)  0@2804r
assigning %vreg209 to %t1: t1

selectOrSplit GR32Bit:%vreg211 [2820r,2828r:0)  0@2820r
assigning %vreg211 to %t1: t1

selectOrSplit GR32Bit:%vreg213 [2836r,2844r:0)  0@2836r
assigning %vreg213 to %t1: t1

selectOrSplit GR32Bit:%vreg215 [2916r,2924r:0)  0@2916r
assigning %vreg215 to %t0: t0

selectOrSplit GR32Bit:%vreg216 [2996r,3004r:0)  0@2996r
assigning %vreg216 to %t0: t0

selectOrSplit GR32Bit:%vreg218 [3380r,3388r:0)  0@3380r
assigning %vreg218 to %t1: t1

selectOrSplit GR32Bit:%vreg220 [3396r,3404r:0)  0@3396r
assigning %vreg220 to %t1: t1

selectOrSplit GR32Bit:%vreg222 [3412r,3420r:0)  0@3412r
assigning %vreg222 to %t1: t1

selectOrSplit GR32Bit:%vreg224 [3492r,3500r:0)  0@3492r
assigning %vreg224 to %t0: t0

selectOrSplit GR32Bit:%vreg225 [3572r,3580r:0)  0@3572r
assigning %vreg225 to %t0: t0

selectOrSplit GR32Bit:%vreg227 [3948r,3956r:0)  0@3948r
assigning %vreg227 to %t1: t1

selectOrSplit GR32Bit:%vreg229 [3964r,3972r:0)  0@3964r
assigning %vreg229 to %t1: t1

selectOrSplit GR32Bit:%vreg231 [3980r,3988r:0)  0@3980r
assigning %vreg231 to %t1: t1

selectOrSplit GR32Bit:%vreg233 [4060r,4068r:0)  0@4060r
assigning %vreg233 to %t0: t0

selectOrSplit GR32Bit:%vreg234 [4140r,4148r:0)  0@4140r
assigning %vreg234 to %t0: t0

selectOrSplit GR32Bit:%vreg236 [4604r,4612r:0)  0@4604r
assigning %vreg236 to %t1: t1

selectOrSplit GR32Bit:%vreg238 [4620r,4628r:0)  0@4620r
assigning %vreg238 to %t1: t1

selectOrSplit GR32Bit:%vreg240 [4636r,4644r:0)  0@4636r
assigning %vreg240 to %t1: t1

selectOrSplit GR32Bit:%vreg242 [4716r,4724r:0)  0@4716r
assigning %vreg242 to %t0: t0

selectOrSplit GR32Bit:%vreg243 [4796r,4804r:0)  0@4796r
assigning %vreg243 to %t0: t0

selectOrSplit GR32Bit:%vreg246 [6252r,6260r:0)  0@6252r
assigning %vreg246 to %t1: t1

selectOrSplit GR32Bit:%vreg248 [6276r,6284r:0)  0@6276r
assigning %vreg248 to %t2: t2

selectOrSplit GR32Bit:%vreg249 [6284r,6292r:0)  0@6284r
assigning %vreg249 to %t2: t2

selectOrSplit GR32Bit:%vreg253 [6316r,6324r:0)  0@6316r
assigning %vreg253 to %a0: a0

selectOrSplit GR32Bit:%vreg255 [6332r,6340r:0)  0@6332r
assigning %vreg255 to %a1: a1

selectOrSplit GR32Bit:%vreg257 [6348r,6356r:0)  0@6348r
assigning %vreg257 to %a2: a2

selectOrSplit GR32Bit:%vreg259 [6364r,6372r:0)  0@6364r
assigning %vreg259 to %a2: a2

selectOrSplit GR32Bit:%vreg260 [6372r,6380r:0)  0@6372r
assigning %vreg260 to %a0: a0

selectOrSplit GR32Bit:%vreg261 [6380r,6388r:0)  0@6380r
assigning %vreg261 to %a0: a0

selectOrSplit GR32Bit:%vreg262 [6388r,6396r:0)  0@6388r
assigning %vreg262 to %fp: fp

selectOrSplit GR32Bit:%vreg263 [6396r,6404r:0)  0@6396r
assigning %vreg263 to %t2: t2

selectOrSplit FP32Bit:%vreg265 [6412r,6420r:0)  0@6412r
assigning %vreg265 to %ft1: ft1

selectOrSplit GR32Bit:%vreg266 [6428r,6436r:0)  0@6428r
assigning %vreg266 to %t1: t1

selectOrSplit GR32Bit:%vreg267 [6476r,6484r:0)  0@6476r
assigning %vreg267 to %t0: t0

selectOrSplit GR32Bit:%vreg269 [6492r,6500r:0)  0@6492r
assigning %vreg269 to %t1: t1

selectOrSplit GR32Bit:%vreg103 [16r,20r:0)  0@16r
assigning %vreg103 to %t1: t1
********** REWRITE VIRTUAL REGISTERS **********
********** Function: startup_starter3
********** REGISTER MAP **********
[%vreg0 -> %t2] GR32Bit
[%vreg1 -> %a1] GR32Bit
[%vreg2 -> %ft1] FP32Bit
[%vreg3 -> %a4] GR32Bit
[%vreg4 -> %a2] GR32Bit
[%vreg5 -> %ft1] FP32Bit
[%vreg6 -> %fp] GR32Bit
[%vreg7 -> %a0] GR32Bit
[%vreg8 -> %a3] GR32Bit
[%vreg9 -> %t0] GR32Bit
[%vreg10 -> %t1] GR32Bit
[%vreg11 -> %t0] GR32Bit
[%vreg12 -> %t0] GR32Bit
[%vreg13 -> %t1] GR32Bit
[%vreg14 -> %t1] GR32Bit
[%vreg15 -> %t1] GR32Bit
[%vreg16 -> %t0] GR32Bit
[%vreg17 -> %t0] GR32Bit
[%vreg18 -> %t1] GR32Bit
[%vreg19 -> %t1] GR32Bit
[%vreg20 -> %t1] GR32Bit
[%vreg21 -> %t0] GR32Bit
[%vreg22 -> %t0] GR32Bit
[%vreg23 -> %t1] GR32Bit
[%vreg24 -> %ft1] FP32Bit
[%vreg25 -> %t2] GR32Bit
[%vreg26 -> %t0] GR32Bit
[%vreg27 -> %t0] GR32Bit
[%vreg28 -> %t0] GR32Bit
[%vreg29 -> %ft2] FP32Bit
[%vreg30 -> %t0] GR32Bit
[%vreg31 -> %t0] GR32Bit
[%vreg32 -> %t1] GR32Bit
[%vreg33 -> %t0] GR32Bit
[%vreg34 -> %t0] GR32Bit
[%vreg35 -> %t0] GR32Bit
[%vreg36 -> %t1] GR32Bit
[%vreg37 -> %t0] GR32Bit
[%vreg38 -> %t1] GR32Bit
[%vreg39 -> %ft1] FP32Bit
[%vreg40 -> %t2] GR32Bit
[%vreg41 -> %t0] GR32Bit
[%vreg42 -> %t0] GR32Bit
[%vreg43 -> %t0] GR32Bit
[%vreg44 -> %ft2] FP32Bit
[%vreg45 -> %t0] GR32Bit
[%vreg46 -> %t0] GR32Bit
[%vreg47 -> %ft2] FP32Bit
[%vreg48 -> %t2] GR32Bit
[%vreg49 -> %t1] GR32Bit
[%vreg50 -> %t1] GR32Bit
[%vreg51 -> %ft1] FP32Bit
[%vreg52 -> %t0] GR32Bit
[%vreg53 -> %t1] GR32Bit
[%vreg54 -> %t2] GR32Bit
[%vreg55 -> %t1] GR32Bit
[%vreg56 -> %ft1] FP32Bit
[%vreg57 -> %t0] GR32Bit
[%vreg58 -> %t0] GR32Bit
[%vreg59 -> %ft2] FP32Bit
[%vreg60 -> %t2] GR32Bit
[%vreg61 -> %t1] GR32Bit
[%vreg62 -> %t1] GR32Bit
[%vreg63 -> %ft1] FP32Bit
[%vreg64 -> %t0] GR32Bit
[%vreg65 -> %t1] GR32Bit
[%vreg66 -> %t2] GR32Bit
[%vreg67 -> %t1] GR32Bit
[%vreg68 -> %ft1] FP32Bit
[%vreg69 -> %t0] GR32Bit
[%vreg70 -> %a0] GR32Bit
[%vreg71 -> %a1] GR32Bit
[%vreg72 -> %a0] GR32Bit
[%vreg73 -> %ft2] FP32Bit
[%vreg74 -> %fp] GR32Bit
[%vreg75 -> %fp] GR32Bit
[%vreg76 -> %t2] GR32Bit
[%vreg77 -> %t1] GR32Bit
[%vreg78 -> %ft1] FP32Bit
[%vreg79 -> %ft1] FP32Bit
[%vreg80 -> %t2] GR32Bit
[%vreg81 -> %ft1] FP32Bit
[%vreg82 -> %ft3] FP32Bit
[%vreg83 -> %t0] GR32Bit
[%vreg84 -> %t0] GR32Bit
[%vreg85 -> %ft1] FP32Bit
[%vreg86 -> %t1] GR32Bit
[%vreg87 -> %t2] GR32Bit
[%vreg88 -> %t1] GR32Bit
[%vreg89 -> %t0] GR32Bit
[%vreg90 -> %t0] GR32Bit
[%vreg91 -> %t2] GR32Bit
[%vreg92 -> %t1] GR32Bit
[%vreg93 -> %t1] GR32Bit
[%vreg94 -> %t1] GR32Bit
[%vreg95 -> %t0] GR32Bit
[%vreg96 -> %t0] GR32Bit
[%vreg97 -> %t1] GR32Bit
[%vreg98 -> %ft1] FP32Bit
[%vreg99 -> %t0] GR32Bit
[%vreg102 -> %t0] GR32Bit
[%vreg103 -> %t1] GR32Bit
[%vreg104 -> %t1] GR32Bit
[%vreg105 -> %t0] GR32Bit
[%vreg106 -> %t1] GR32Bit
[%vreg107 -> %t2] GR32Bit
[%vreg108 -> %fp] GR32Bit
[%vreg109 -> %fp] GR32Bit
[%vreg110 -> %a0] GR32Bit
[%vreg111 -> %a0] GR32Bit
[%vreg112 -> %a1] GR32Bit
[%vreg113 -> %t2] GR32Bit
[%vreg114 -> %a1] GR32Bit
[%vreg115 -> %fp] GR32Bit
[%vreg116 -> %fp] GR32Bit
[%vreg117 -> %t2] GR32Bit
[%vreg118 -> %t1] GR32Bit
[%vreg121 -> %t0] GR32Bit
[%vreg122 -> %t1] GR32Bit
[%vreg123 -> %t1] GR32Bit
[%vreg124 -> %t0] GR32Bit
[%vreg125 -> %t1] GR32Bit
[%vreg126 -> %t2] GR32Bit
[%vreg127 -> %fp] GR32Bit
[%vreg128 -> %fp] GR32Bit
[%vreg129 -> %a0] GR32Bit
[%vreg130 -> %a0] GR32Bit
[%vreg131 -> %a1] GR32Bit
[%vreg132 -> %t2] GR32Bit
[%vreg133 -> %a1] GR32Bit
[%vreg134 -> %fp] GR32Bit
[%vreg135 -> %fp] GR32Bit
[%vreg136 -> %t2] GR32Bit
[%vreg137 -> %t1] GR32Bit
[%vreg140 -> %t0] GR32Bit
[%vreg141 -> %t1] GR32Bit
[%vreg142 -> %t1] GR32Bit
[%vreg143 -> %t0] GR32Bit
[%vreg144 -> %t1] GR32Bit
[%vreg145 -> %t2] GR32Bit
[%vreg146 -> %fp] GR32Bit
[%vreg147 -> %fp] GR32Bit
[%vreg148 -> %a0] GR32Bit
[%vreg149 -> %a0] GR32Bit
[%vreg150 -> %a1] GR32Bit
[%vreg151 -> %t2] GR32Bit
[%vreg152 -> %a1] GR32Bit
[%vreg153 -> %fp] GR32Bit
[%vreg154 -> %fp] GR32Bit
[%vreg155 -> %t2] GR32Bit
[%vreg156 -> %t1] GR32Bit
[%vreg159 -> %t0] GR32Bit
[%vreg160 -> %t1] GR32Bit
[%vreg161 -> %t1] GR32Bit
[%vreg162 -> %t0] GR32Bit
[%vreg163 -> %t1] GR32Bit
[%vreg164 -> %t2] GR32Bit
[%vreg165 -> %fp] GR32Bit
[%vreg166 -> %fp] GR32Bit
[%vreg167 -> %a0] GR32Bit
[%vreg168 -> %a0] GR32Bit
[%vreg169 -> %a1] GR32Bit
[%vreg170 -> %t2] GR32Bit
[%vreg171 -> %a1] GR32Bit
[%vreg172 -> %fp] GR32Bit
[%vreg173 -> %fp] GR32Bit
[%vreg174 -> %t2] GR32Bit
[%vreg175 -> %t1] GR32Bit
[%vreg176 -> %t1] GR32Bit
[%vreg177 -> %t0] GR32Bit
[%vreg178 -> %t1] GR32Bit
[%vreg179 -> %t0] GR32Bit
[%vreg180 -> %t1] GR32Bit
[%vreg181 -> %t0] GR32Bit
[%vreg182 -> %t0] GR32Bit
[%vreg183 -> %t0] GR32Bit
[%vreg184 -> %t0] GR32Bit
[%vreg185 -> %t2] GR32Bit
[%vreg186 -> %t0] GR32Bit
[%vreg187 -> %fp] GR32Bit
[%vreg188 -> %t0] GR32Bit
[%vreg189 -> %a0] GR32Bit
[%vreg190 -> %t1] GR32Bit
[%vreg191 -> %t1] GR32Bit
[%vreg192 -> %t1] GR32Bit
[%vreg193 -> %t0] GR32Bit
[%vreg194 -> %t0] GR32Bit
[%vreg195 -> %t0] GR32Bit
[%vreg196 -> %t1] GR32Bit
[%vreg197 -> %t2] GR32Bit
[%vreg198 -> %t0] GR32Bit
[%vreg199 -> %fp] GR32Bit
[%vreg200 -> %t0] GR32Bit
[%vreg201 -> %a0] GR32Bit
[%vreg202 -> %t1] GR32Bit
[%vreg203 -> %t1] GR32Bit
[%vreg204 -> %t1] GR32Bit
[%vreg205 -> %t0] GR32Bit
[%vreg206 -> %t0] GR32Bit
[%vreg207 -> %t0] GR32Bit
[%vreg208 -> %t1] GR32Bit
[%vreg209 -> %t1] GR32Bit
[%vreg210 -> %t0] GR32Bit
[%vreg211 -> %t1] GR32Bit
[%vreg212 -> %t0] GR32Bit
[%vreg213 -> %t1] GR32Bit
[%vreg214 -> %t0] GR32Bit
[%vreg215 -> %t0] GR32Bit
[%vreg216 -> %t0] GR32Bit
[%vreg217 -> %t0] GR32Bit
[%vreg218 -> %t1] GR32Bit
[%vreg219 -> %t0] GR32Bit
[%vreg220 -> %t1] GR32Bit
[%vreg221 -> %t0] GR32Bit
[%vreg222 -> %t1] GR32Bit
[%vreg223 -> %t0] GR32Bit
[%vreg224 -> %t0] GR32Bit
[%vreg225 -> %t0] GR32Bit
[%vreg226 -> %t0] GR32Bit
[%vreg227 -> %t1] GR32Bit
[%vreg228 -> %t0] GR32Bit
[%vreg229 -> %t1] GR32Bit
[%vreg230 -> %t0] GR32Bit
[%vreg231 -> %t1] GR32Bit
[%vreg232 -> %t0] GR32Bit
[%vreg233 -> %t0] GR32Bit
[%vreg234 -> %t0] GR32Bit
[%vreg235 -> %t0] GR32Bit
[%vreg236 -> %t1] GR32Bit
[%vreg237 -> %t0] GR32Bit
[%vreg238 -> %t1] GR32Bit
[%vreg239 -> %t0] GR32Bit
[%vreg240 -> %t1] GR32Bit
[%vreg241 -> %t0] GR32Bit
[%vreg242 -> %t0] GR32Bit
[%vreg243 -> %t0] GR32Bit
[%vreg244 -> %t0] GR32Bit
[%vreg245 -> %t0] GR32Bit
[%vreg246 -> %t1] GR32Bit
[%vreg247 -> %t1] GR32Bit
[%vreg248 -> %t2] GR32Bit
[%vreg249 -> %t2] GR32Bit
[%vreg250 -> %t1] GR32Bit
[%vreg251 -> %t2] GR32Bit
[%vreg252 -> %fp] GR32Bit
[%vreg253 -> %a0] GR32Bit
[%vreg254 -> %a0] GR32Bit
[%vreg255 -> %a1] GR32Bit
[%vreg256 -> %a1] GR32Bit
[%vreg257 -> %a2] GR32Bit
[%vreg258 -> %fp] GR32Bit
[%vreg259 -> %a2] GR32Bit
[%vreg260 -> %a0] GR32Bit
[%vreg261 -> %a0] GR32Bit
[%vreg262 -> %fp] GR32Bit
[%vreg263 -> %t2] GR32Bit
[%vreg264 -> %t1] GR32Bit
[%vreg265 -> %ft1] FP32Bit
[%vreg266 -> %t1] GR32Bit
[%vreg267 -> %t0] GR32Bit
[%vreg268 -> %t0] GR32Bit
[%vreg269 -> %t1] GR32Bit

0B	BB#0: derived from LLVM BB %startup_starter3.entry
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg102<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg102
4B		  * %vreg103<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg103
4B		  * %vreg104<def> = SRLI %vreg103<kill>, 12; GR32Bit:%vreg104,%vreg103
4B		  * %vreg105<def> = ADD %vreg102<kill>, %vreg104<kill>; GR32Bit:%vreg105,%vreg102,%vreg104
4B		  * %vreg106<def> = ADDI %zero, 28; GR32Bit:%vreg106
4B		  * %vreg107<def> = SRLI %t5, 22; GR32Bit:%vreg107
4B		  * %vreg108<def> = SRLI %t5, 12; GR32Bit:%vreg108
4B		  * %vreg109<def> = ANDI %vreg108<kill>, 15; GR32Bit:%vreg109,%vreg108
4B		  * %vreg110<def> = SRLI %t5, 6; GR32Bit:%vreg110
4B		  * %vreg111<def> = ANDI %vreg110<kill>, 63; GR32Bit:%vreg111,%vreg110
4B		  * %vreg112<def> = ADDI %zero, 832; GR32Bit:%vreg112
4B		  * %vreg113<def> = MUL %vreg107<kill>, %vreg112<kill>; GR32Bit:%vreg113,%vreg107,%vreg112
4B		  * %vreg114<def> = ADDI %zero, 52; GR32Bit:%vreg114
4B		  * %vreg115<def> = MUL %vreg109<kill>, %vreg114<kill>; GR32Bit:%vreg115,%vreg109,%vreg114
4B		  * %vreg116<def> = ADD %vreg115<kill>, %vreg111<kill>; GR32Bit:%vreg116,%vreg115,%vreg111
4B		  * %vreg117<def> = ADD %vreg116<kill>, %vreg113<kill>; GR32Bit:%vreg117,%vreg116,%vreg113
4B		  * %vreg118<def> = MUL %vreg117<kill>, %vreg106<kill>; GR32Bit:%vreg118,%vreg117,%vreg106
4B		  * %t5<def> = ADD %vreg105<kill>, %vreg118<kill>; GR32Bit:%vreg105,%vreg118
4B		  * %vreg9<def> = ADDI %t5, <fi#5>; GR32Bit:%vreg9
4B		  * %vreg10<def> = ADDI %zero, 850; GR32Bit:%vreg10
4B		  * %vreg6<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg6
4B		  * %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
4B		  * %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
4B		  * SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
4B		  * %vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
4B		  * %vreg7<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg7
4B		  * %vreg8<def> = ADDI %zero, 350; GR32Bit:%vreg8
4B		  * %vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
4B		  * %vreg2<def> = FLW %vreg1<kill>, 0; mem:LD4[%9](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
4B		  * FSW %vreg2<kill>, %vreg3<kill>, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
4B		  * %vreg5<def> = FLW %vreg4<kill>, 8; mem:LD4[%13] FP32Bit:%vreg5 GR32Bit:%vreg4
4B		  * FSW %vreg5<kill>, %vreg6<kill>, 0; mem:ST4[%4] FP32Bit:%vreg5 GR32Bit:%vreg6
4B		  * SW %vreg8<kill>, %vreg7<kill>, 0; mem:ST4[%5] GR32Bit:%vreg8,%vreg7
4B		  * SW %vreg10<kill>, %vreg9<kill>, 0; mem:ST4[%6] GR32Bit:%vreg10,%vreg9
4B		  * %vreg11<def> = LW %vreg0<kill>, 0; mem:LD4[%2] GR32Bit:%vreg11,%vreg0
4B		  * %vreg12<def> = LW %vreg11<kill>, 4; mem:LD4[%16] GR32Bit:%vreg12,%vreg11
4B		  * %vreg176<def> = LUI 1; GR32Bit:%vreg176
4B		  * WRITEPM %vreg176<kill>, %vreg12, 0; GR32Bit:%vreg176,%vreg12
4B		  * %vreg178<def> = LUI 2; GR32Bit:%vreg178
4B		  * WRITEPM %vreg178<kill>, %vreg12, 0; GR32Bit:%vreg178,%vreg12
4B		  * %vreg180<def> = LUI 3; GR32Bit:%vreg180
4B		  * WRITEPM %vreg180<kill>, %vreg12, 0; GR32Bit:%vreg180,%vreg12
4B		  * BEQ <BB#11>, %vreg12<kill>, %zero; GR32Bit:%vreg12
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
4B		  * JAL <BB#1>
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
388B		%t4<def> = ADD %t5, %zero
388B		  * %vreg121<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg121
388B		  * %vreg122<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg122
388B		  * %vreg123<def> = SRLI %vreg122<kill>, 12; GR32Bit:%vreg123,%vreg122
388B		  * %vreg124<def> = ADD %vreg121<kill>, %vreg123<kill>; GR32Bit:%vreg124,%vreg121,%vreg123
388B		  * %vreg125<def> = ADDI %zero, 28; GR32Bit:%vreg125
388B		  * %vreg126<def> = SRLI %t5, 22; GR32Bit:%vreg126
388B		  * %vreg127<def> = SRLI %t5, 12; GR32Bit:%vreg127
388B		  * %vreg128<def> = ANDI %vreg127<kill>, 15; GR32Bit:%vreg128,%vreg127
388B		  * %vreg129<def> = SRLI %t5, 6; GR32Bit:%vreg129
388B		  * %vreg130<def> = ANDI %vreg129<kill>, 63; GR32Bit:%vreg130,%vreg129
388B		  * %vreg131<def> = ADDI %zero, 832; GR32Bit:%vreg131
388B		  * %vreg132<def> = MUL %vreg126<kill>, %vreg131<kill>; GR32Bit:%vreg132,%vreg126,%vreg131
388B		  * %vreg133<def> = ADDI %zero, 52; GR32Bit:%vreg133
388B		  * %vreg134<def> = MUL %vreg128<kill>, %vreg133<kill>; GR32Bit:%vreg134,%vreg128,%vreg133
388B		  * %vreg135<def> = ADD %vreg134<kill>, %vreg130<kill>; GR32Bit:%vreg135,%vreg134,%vreg130
388B		  * %vreg136<def> = ADD %vreg135<kill>, %vreg132<kill>; GR32Bit:%vreg136,%vreg135,%vreg132
388B		  * %vreg137<def> = MUL %vreg136<kill>, %vreg125<kill>; GR32Bit:%vreg137,%vreg136,%vreg125
388B		  * %t5<def> = ADD %vreg124<kill>, %vreg137<kill>; GR32Bit:%vreg124,%vreg137
388B		  * %vreg177<def> = LUI 1; GR32Bit:%vreg177
388B		  * %vreg182<def> = DREADPM %vreg177<kill>, 0; GR32Bit:%vreg182,%vreg177
388B		  * BEQ <BB#11>, %vreg182<kill>, %zero; GR32Bit:%vreg182
388B		  * %zero<def> = ADDI %zero, 0
388B		  * %zero<def> = ADDI %zero, 0
388B		  * JAL <BB#1>
388B		  * %zero<def> = ADDI %zero, 0
388B		  * %zero<def> = ADDI %zero, 0
604B		%t4<def> = ADD %t5, %zero
604B		  * %vreg140<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg140
604B		  * %vreg141<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg141
604B		  * %vreg142<def> = SRLI %vreg141<kill>, 12; GR32Bit:%vreg142,%vreg141
604B		  * %vreg143<def> = ADD %vreg140<kill>, %vreg142<kill>; GR32Bit:%vreg143,%vreg140,%vreg142
604B		  * %vreg144<def> = ADDI %zero, 28; GR32Bit:%vreg144
604B		  * %vreg145<def> = SRLI %t5, 22; GR32Bit:%vreg145
604B		  * %vreg146<def> = SRLI %t5, 12; GR32Bit:%vreg146
604B		  * %vreg147<def> = ANDI %vreg146<kill>, 15; GR32Bit:%vreg147,%vreg146
604B		  * %vreg148<def> = SRLI %t5, 6; GR32Bit:%vreg148
604B		  * %vreg149<def> = ANDI %vreg148<kill>, 63; GR32Bit:%vreg149,%vreg148
604B		  * %vreg150<def> = ADDI %zero, 832; GR32Bit:%vreg150
604B		  * %vreg151<def> = MUL %vreg145<kill>, %vreg150<kill>; GR32Bit:%vreg151,%vreg145,%vreg150
604B		  * %vreg152<def> = ADDI %zero, 52; GR32Bit:%vreg152
604B		  * %vreg153<def> = MUL %vreg147<kill>, %vreg152<kill>; GR32Bit:%vreg153,%vreg147,%vreg152
604B		  * %vreg154<def> = ADD %vreg153<kill>, %vreg149<kill>; GR32Bit:%vreg154,%vreg153,%vreg149
604B		  * %vreg155<def> = ADD %vreg154<kill>, %vreg151<kill>; GR32Bit:%vreg155,%vreg154,%vreg151
604B		  * %vreg156<def> = MUL %vreg155<kill>, %vreg144<kill>; GR32Bit:%vreg156,%vreg155,%vreg144
604B		  * %t5<def> = ADD %vreg143<kill>, %vreg156<kill>; GR32Bit:%vreg143,%vreg156
604B		  * %vreg179<def> = LUI 2; GR32Bit:%vreg179
604B		  * %vreg183<def> = DREADPM %vreg179<kill>, 0; GR32Bit:%vreg183,%vreg179
604B		  * BEQ <BB#11>, %vreg183<kill>, %zero; GR32Bit:%vreg183
604B		  * %zero<def> = ADDI %zero, 0
604B		  * %zero<def> = ADDI %zero, 0
604B		  * JAL <BB#1>
604B		  * %zero<def> = ADDI %zero, 0
604B		  * %zero<def> = ADDI %zero, 0
820B		%t4<def> = ADD %t5, %zero
820B		  * %vreg159<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg159
820B		  * %vreg160<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg160
820B		  * %vreg161<def> = SRLI %vreg160<kill>, 12; GR32Bit:%vreg161,%vreg160
820B		  * %vreg162<def> = ADD %vreg159<kill>, %vreg161<kill>; GR32Bit:%vreg162,%vreg159,%vreg161
820B		  * %vreg163<def> = ADDI %zero, 28; GR32Bit:%vreg163
820B		  * %vreg164<def> = SRLI %t5, 22; GR32Bit:%vreg164
820B		  * %vreg165<def> = SRLI %t5, 12; GR32Bit:%vreg165
820B		  * %vreg166<def> = ANDI %vreg165<kill>, 15; GR32Bit:%vreg166,%vreg165
820B		  * %vreg167<def> = SRLI %t5, 6; GR32Bit:%vreg167
820B		  * %vreg168<def> = ANDI %vreg167<kill>, 63; GR32Bit:%vreg168,%vreg167
820B		  * %vreg169<def> = ADDI %zero, 832; GR32Bit:%vreg169
820B		  * %vreg170<def> = MUL %vreg164<kill>, %vreg169<kill>; GR32Bit:%vreg170,%vreg164,%vreg169
820B		  * %vreg171<def> = ADDI %zero, 52; GR32Bit:%vreg171
820B		  * %vreg172<def> = MUL %vreg166<kill>, %vreg171<kill>; GR32Bit:%vreg172,%vreg166,%vreg171
820B		  * %vreg173<def> = ADD %vreg172<kill>, %vreg168<kill>; GR32Bit:%vreg173,%vreg172,%vreg168
820B		  * %vreg174<def> = ADD %vreg173<kill>, %vreg170<kill>; GR32Bit:%vreg174,%vreg173,%vreg170
820B		  * %vreg175<def> = MUL %vreg174<kill>, %vreg163<kill>; GR32Bit:%vreg175,%vreg174,%vreg163
820B		  * %t5<def> = ADD %vreg162<kill>, %vreg175<kill>; GR32Bit:%vreg162,%vreg175
820B		  * %vreg181<def> = LUI 3; GR32Bit:%vreg181
820B		  * %vreg184<def> = DREADPM %vreg181<kill>, 0; GR32Bit:%vreg184,%vreg181
820B		  * BEQ <BB#11>, %vreg184<kill>, %zero; GR32Bit:%vreg184
820B		  * %zero<def> = ADDI %zero, 0
820B		  * %zero<def> = ADDI %zero, 0
820B		  * JAL <BB#1>
820B		  * %zero<def> = ADDI %zero, 0
820B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#11(12) BB#1(20)
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#2560")">
> %t1<def> = LUI <MCSym="%lo("ga#2560")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 28
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = ADDI %t5, <fi#5>
> %t1<def> = ADDI %zero, 850
> %fp<def> = ADDI %t5, <fi#3>
> %t2<def> = ADDI %t5, <fi#1>
> %a1<def> = ADDI %t5, <fi#-1>
> SW %a1, %t2, 0; mem:ST4[%2]
> %a2<def> = LW %t2, 0; mem:LD4[%2]
> %a0<def> = ADDI %t5, <fi#4>
> %a3<def> = ADDI %zero, 350
> %a4<def> = ADDI %t5, <fi#2>
> %ft1<def> = FLW %a1<kill>, 0; mem:LD4[%9](align=16)
> FSW %ft1<kill>, %a4<kill>, 0; mem:ST4[%3]
> %ft1<def> = FLW %a2<kill>, 8; mem:LD4[%13]
> FSW %ft1<kill>, %fp<kill>, 0; mem:ST4[%4]
> SW %a3<kill>, %a0<kill>, 0; mem:ST4[%5]
> SW %t1<kill>, %t0<kill>, 0; mem:ST4[%6]
> %t0<def> = LW %t2<kill>, 0; mem:LD4[%2]
> %t0<def> = LW %t0<kill>, 4; mem:LD4[%16]
> %t1<def> = LUI 1
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 2
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 3
> WRITEPM %t1<kill>, %t0, 0
> BEQ <BB#11>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#1>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#2560")">
> %t1<def> = LUI <MCSym="%lo("ga#2560")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 28
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = LUI 1
> %t0<def> = DREADPM %t0<kill>, 0
> BEQ <BB#11>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#1>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#2560")">
> %t1<def> = LUI <MCSym="%lo("ga#2560")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 28
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = LUI 2
> %t0<def> = DREADPM %t0<kill>, 0
> BEQ <BB#11>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#1>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#2560")">
> %t1<def> = LUI <MCSym="%lo("ga#2560")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 28
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = LUI 3
> %t0<def> = DREADPM %t0<kill>, 0
> BEQ <BB#11>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#1>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
1460B	BB#1: derived from LLVM BB %startup_starter3.if.else
	    Predecessors according to CFG: BB#0
1464B		%vreg16<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg16
1464B		  * %vreg17<def> = LW %vreg16<kill>, 0; mem:LD4[%5] GR32Bit:%vreg17,%vreg16
1464B		  * %vreg13<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg13
1464B		  * %vreg14<def> = LW %vreg13<kill>, 0; mem:LD4[%2] GR32Bit:%vreg14,%vreg13
1464B		  * %vreg15<def> = LW %vreg14<kill>, 4; mem:LD4[%20] GR32Bit:%vreg15,%vreg14
1464B		  * %vreg185<def> = LUI 1; GR32Bit:%vreg185
1464B		  * WRITEPM %vreg185, %vreg15, 0; GR32Bit:%vreg185,%vreg15
1464B		  * %vreg187<def> = LUI 2; GR32Bit:%vreg187
1464B		  * WRITEPM %vreg187, %vreg15, 0; GR32Bit:%vreg187,%vreg15
1464B		  * %vreg189<def> = LUI 3; GR32Bit:%vreg189
1464B		  * WRITEPM %vreg189, %vreg15, 0; GR32Bit:%vreg189,%vreg15
1464B		  * WRITEPM %vreg185<kill>, %vreg17, 4; GR32Bit:%vreg185,%vreg17
1464B		  * WRITEPM %vreg187<kill>, %vreg17, 4; GR32Bit:%vreg187,%vreg17
1464B		  * WRITEPM %vreg189<kill>, %vreg17, 4; GR32Bit:%vreg189,%vreg17
1464B		  * BLT <BB#12>, %vreg15<kill>, %vreg17<kill>; GR32Bit:%vreg15,%vreg17
1464B		  * %zero<def> = ADDI %zero, 0
1464B		  * %zero<def> = ADDI %zero, 0
1464B		  * JAL <BB#2>
1464B		  * %zero<def> = ADDI %zero, 0
1464B		  * %zero<def> = ADDI %zero, 0
1620B		%vreg186<def> = LUI 1; GR32Bit:%vreg186
1620B		  * %vreg191<def> = DREADPM %vreg186, 0; GR32Bit:%vreg191,%vreg186
1620B		  * %vreg194<def> = DREADPM %vreg186<kill>, 4; GR32Bit:%vreg194,%vreg186
1620B		  * BLT <BB#12>, %vreg191<kill>, %vreg194<kill>; GR32Bit:%vreg191,%vreg194
1620B		  * %zero<def> = ADDI %zero, 0
1620B		  * %zero<def> = ADDI %zero, 0
1620B		  * JAL <BB#2>
1620B		  * %zero<def> = ADDI %zero, 0
1620B		  * %zero<def> = ADDI %zero, 0
1708B		%vreg188<def> = LUI 2; GR32Bit:%vreg188
1708B		  * %vreg192<def> = DREADPM %vreg188, 0; GR32Bit:%vreg192,%vreg188
1708B		  * %vreg195<def> = DREADPM %vreg188<kill>, 4; GR32Bit:%vreg195,%vreg188
1708B		  * BLT <BB#12>, %vreg192<kill>, %vreg195<kill>; GR32Bit:%vreg192,%vreg195
1708B		  * %zero<def> = ADDI %zero, 0
1708B		  * %zero<def> = ADDI %zero, 0
1708B		  * JAL <BB#2>
1708B		  * %zero<def> = ADDI %zero, 0
1708B		  * %zero<def> = ADDI %zero, 0
1796B		%vreg190<def> = LUI 3; GR32Bit:%vreg190
1796B		  * %vreg193<def> = DREADPM %vreg190, 0; GR32Bit:%vreg193,%vreg190
1796B		  * %vreg196<def> = DREADPM %vreg190<kill>, 4; GR32Bit:%vreg196,%vreg190
1796B		  * BLT <BB#12>, %vreg193<kill>, %vreg196<kill>; GR32Bit:%vreg193,%vreg196
1796B		  * %zero<def> = ADDI %zero, 0
1796B		  * %zero<def> = ADDI %zero, 0
1796B		  * JAL <BB#2>
1796B		  * %zero<def> = ADDI %zero, 0
1796B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#12(16) BB#2(16)
> %t0<def> = ADDI %t5, <fi#4>
> %t0<def> = LW %t0<kill>, 0; mem:LD4[%5]
> %t1<def> = ADDI %t5, <fi#1>
> %t1<def> = LW %t1<kill>, 0; mem:LD4[%2]
> %t1<def> = LW %t1<kill>, 4; mem:LD4[%20]
> %t2<def> = LUI 1
> WRITEPM %t2, %t1, 0
> %fp<def> = LUI 2
> WRITEPM %fp, %t1, 0
> %a0<def> = LUI 3
> WRITEPM %a0, %t1, 0
> WRITEPM %t2<kill>, %t0, 4
> WRITEPM %fp<kill>, %t0, 4
> WRITEPM %a0<kill>, %t0, 4
> BLT <BB#12>, %t1<kill>, %t0<kill>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#2>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 1
> %t1<def> = DREADPM %t0, 0
> %t0<def> = DREADPM %t0<kill>, 4
> BLT <BB#12>, %t1<kill>, %t0<kill>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#2>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 2
> %t1<def> = DREADPM %t0, 0
> %t0<def> = DREADPM %t0<kill>, 4
> BLT <BB#12>, %t1<kill>, %t0<kill>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#2>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t1<def> = LUI 3
> %t0<def> = DREADPM %t1, 0
> %t1<def> = DREADPM %t1<kill>, 4
> BLT <BB#12>, %t0<kill>, %t1<kill>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#2>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
2076B	BB#2: derived from LLVM BB %startup_starter3.if.else6
	    Predecessors according to CFG: BB#1
2080B		%vreg21<def> = ADDI %t5, <fi#5>; GR32Bit:%vreg21
2080B		  * %vreg22<def> = LW %vreg21<kill>, 0; mem:LD4[%6] GR32Bit:%vreg22,%vreg21
2080B		  * %vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
2080B		  * %vreg19<def> = LW %vreg18<kill>, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
2080B		  * %vreg20<def> = LW %vreg19<kill>, 4; mem:LD4[%25] GR32Bit:%vreg20,%vreg19
2080B		  * %vreg197<def> = LUI 1; GR32Bit:%vreg197
2080B		  * WRITEPM %vreg197, %vreg20, 0; GR32Bit:%vreg197,%vreg20
2080B		  * %vreg199<def> = LUI 2; GR32Bit:%vreg199
2080B		  * WRITEPM %vreg199, %vreg20, 0; GR32Bit:%vreg199,%vreg20
2080B		  * %vreg201<def> = LUI 3; GR32Bit:%vreg201
2080B		  * WRITEPM %vreg201, %vreg20, 0; GR32Bit:%vreg201,%vreg20
2080B		  * WRITEPM %vreg197<kill>, %vreg22, 4; GR32Bit:%vreg197,%vreg22
2080B		  * WRITEPM %vreg199<kill>, %vreg22, 4; GR32Bit:%vreg199,%vreg22
2080B		  * WRITEPM %vreg201<kill>, %vreg22, 4; GR32Bit:%vreg201,%vreg22
2080B		  * BLE <BB#10>, %vreg20<kill>, %vreg22<kill>; GR32Bit:%vreg20,%vreg22
2080B		  * %zero<def> = ADDI %zero, 0
2080B		  * %zero<def> = ADDI %zero, 0
2080B		  * JAL <BB#3>
2080B		  * %zero<def> = ADDI %zero, 0
2080B		  * %zero<def> = ADDI %zero, 0
2236B		%vreg198<def> = LUI 1; GR32Bit:%vreg198
2236B		  * %vreg203<def> = DREADPM %vreg198, 0; GR32Bit:%vreg203,%vreg198
2236B		  * %vreg206<def> = DREADPM %vreg198<kill>, 4; GR32Bit:%vreg206,%vreg198
2236B		  * BLE <BB#10>, %vreg203<kill>, %vreg206<kill>; GR32Bit:%vreg203,%vreg206
2236B		  * %zero<def> = ADDI %zero, 0
2236B		  * %zero<def> = ADDI %zero, 0
2236B		  * JAL <BB#3>
2236B		  * %zero<def> = ADDI %zero, 0
2236B		  * %zero<def> = ADDI %zero, 0
2324B		%vreg200<def> = LUI 2; GR32Bit:%vreg200
2324B		  * %vreg204<def> = DREADPM %vreg200, 0; GR32Bit:%vreg204,%vreg200
2324B		  * %vreg207<def> = DREADPM %vreg200<kill>, 4; GR32Bit:%vreg207,%vreg200
2324B		  * BLE <BB#10>, %vreg204<kill>, %vreg207<kill>; GR32Bit:%vreg204,%vreg207
2324B		  * %zero<def> = ADDI %zero, 0
2324B		  * %zero<def> = ADDI %zero, 0
2324B		  * JAL <BB#3>
2324B		  * %zero<def> = ADDI %zero, 0
2324B		  * %zero<def> = ADDI %zero, 0
2412B		%vreg202<def> = LUI 3; GR32Bit:%vreg202
2412B		  * %vreg205<def> = DREADPM %vreg202, 0; GR32Bit:%vreg205,%vreg202
2412B		  * %vreg208<def> = DREADPM %vreg202<kill>, 4; GR32Bit:%vreg208,%vreg202
2412B		  * BLE <BB#10>, %vreg205<kill>, %vreg208<kill>; GR32Bit:%vreg205,%vreg208
2412B		  * %zero<def> = ADDI %zero, 0
2412B		  * %zero<def> = ADDI %zero, 0
2412B		  * JAL <BB#3>
2412B		  * %zero<def> = ADDI %zero, 0
2412B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#10(16) BB#3(16)
> %t0<def> = ADDI %t5, <fi#5>
> %t0<def> = LW %t0<kill>, 0; mem:LD4[%6]
> %t1<def> = ADDI %t5, <fi#1>
> %t1<def> = LW %t1<kill>, 0; mem:LD4[%2]
> %t1<def> = LW %t1<kill>, 4; mem:LD4[%25]
> %t2<def> = LUI 1
> WRITEPM %t2, %t1, 0
> %fp<def> = LUI 2
> WRITEPM %fp, %t1, 0
> %a0<def> = LUI 3
> WRITEPM %a0, %t1, 0
> WRITEPM %t2<kill>, %t0, 4
> WRITEPM %fp<kill>, %t0, 4
> WRITEPM %a0<kill>, %t0, 4
> BLE <BB#10>, %t1<kill>, %t0<kill>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#3>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 1
> %t1<def> = DREADPM %t0, 0
> %t0<def> = DREADPM %t0<kill>, 4
> BLE <BB#10>, %t1<kill>, %t0<kill>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#3>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 2
> %t1<def> = DREADPM %t0, 0
> %t0<def> = DREADPM %t0<kill>, 4
> BLE <BB#10>, %t1<kill>, %t0<kill>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#3>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t1<def> = LUI 3
> %t0<def> = DREADPM %t1, 0
> %t1<def> = DREADPM %t1<kill>, 4
> BLE <BB#10>, %t0<kill>, %t1<kill>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#3>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
2692B	BB#3: derived from LLVM BB %startup_starter3.if.else11
	    Predecessors according to CFG: BB#2
2700B		%vreg26<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg26
2700B		  * SRLI %vreg26, %vreg26, 12; GR32Bit:%vreg26
2700B		  * %vreg23<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg23
2700B		  * %vreg25<def> = LUI <ga:@NH_STARTER_SHUTOFF>[TF=2]; GR32Bit:%vreg25
2700B		  * %vreg27<def> = ADD %vreg26<kill>, %vreg25<kill>; GR32Bit:%vreg27,%vreg26,%vreg25
2700B		  * %vreg28<def> = LW %vreg27<kill>, 0; mem:LD4[@NH_STARTER_SHUTOFF] GR32Bit:%vreg28,%vreg27
2700B		  * %vreg24<def> = FLW %vreg23<kill>, 0; mem:LD4[%3] FP32Bit:%vreg24 GR32Bit:%vreg23
2700B		  * %vreg29<def> = FCVT_S_W_RDY %vreg28<kill>; FP32Bit:%vreg29 GR32Bit:%vreg28
2700B		  * %vreg30<def> = FULE_S %vreg24<kill>, %vreg29<kill>; GR32Bit:%vreg30 FP32Bit:%vreg24,%vreg29
2700B		  * %vreg209<def> = LUI 1; GR32Bit:%vreg209
2700B		  * WRITEPM %vreg209<kill>, %vreg30, 0; GR32Bit:%vreg209,%vreg30
2700B		  * %vreg211<def> = LUI 2; GR32Bit:%vreg211
2700B		  * WRITEPM %vreg211<kill>, %vreg30, 0; GR32Bit:%vreg211,%vreg30
2700B		  * %vreg213<def> = LUI 3; GR32Bit:%vreg213
2700B		  * WRITEPM %vreg213<kill>, %vreg30, 0; GR32Bit:%vreg213,%vreg30
2700B		  * BNE <BB#9>, %vreg30<kill>, %zero; GR32Bit:%vreg30
2700B		  * %zero<def> = ADDI %zero, 0
2700B		  * %zero<def> = ADDI %zero, 0
2700B		  * JAL <BB#4>
2700B		  * %zero<def> = ADDI %zero, 0
2700B		  * %zero<def> = ADDI %zero, 0
2900B		%vreg210<def> = LUI 1; GR32Bit:%vreg210
2900B		  * %vreg215<def> = DREADPM %vreg210<kill>, 0; GR32Bit:%vreg215,%vreg210
2900B		  * BNE <BB#9>, %vreg215<kill>, %zero; GR32Bit:%vreg215
2900B		  * %zero<def> = ADDI %zero, 0
2900B		  * %zero<def> = ADDI %zero, 0
2900B		  * JAL <BB#4>
2900B		  * %zero<def> = ADDI %zero, 0
2900B		  * %zero<def> = ADDI %zero, 0
2980B		%vreg212<def> = LUI 2; GR32Bit:%vreg212
2980B		  * %vreg216<def> = DREADPM %vreg212<kill>, 0; GR32Bit:%vreg216,%vreg212
2980B		  * BNE <BB#9>, %vreg216<kill>, %zero; GR32Bit:%vreg216
2980B		  * %zero<def> = ADDI %zero, 0
2980B		  * %zero<def> = ADDI %zero, 0
2980B		  * JAL <BB#4>
2980B		  * %zero<def> = ADDI %zero, 0
2980B		  * %zero<def> = ADDI %zero, 0
3060B		%vreg214<def> = LUI 3; GR32Bit:%vreg214
3060B		  * %vreg217<def> = DREADPM %vreg214<kill>, 0; GR32Bit:%vreg217,%vreg214
3060B		  * BNE <BB#9>, %vreg217<kill>, %zero; GR32Bit:%vreg217
3060B		  * %zero<def> = ADDI %zero, 0
3060B		  * %zero<def> = ADDI %zero, 0
3060B		  * JAL <BB#4>
3060B		  * %zero<def> = ADDI %zero, 0
3060B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#4(16) BB#9(16)
> %t0<def> = LUI <MCSym="%lo("ga#512")">
> SRLI %t0, %t0, 12
> %t1<def> = ADDI %t5, <fi#2>
> %t2<def> = LUI <ga:@NH_STARTER_SHUTOFF>[TF=2]
> %t0<def> = ADD %t0<kill>, %t2<kill>
> %t0<def> = LW %t0<kill>, 0; mem:LD4[@NH_STARTER_SHUTOFF]
> %ft1<def> = FLW %t1<kill>, 0; mem:LD4[%3]
> %ft2<def> = FCVT_S_W_RDY %t0<kill>
> %t0<def> = FULE_S %ft1<kill>, %ft2<kill>
> %t1<def> = LUI 1
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 2
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 3
> WRITEPM %t1<kill>, %t0, 0
> BNE <BB#9>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#4>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 1
> %t0<def> = DREADPM %t0<kill>, 0
> BNE <BB#9>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#4>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 2
> %t0<def> = DREADPM %t0<kill>, 0
> BNE <BB#9>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#4>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 3
> %t0<def> = DREADPM %t0<kill>, 0
> BNE <BB#9>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#4>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
3276B	BB#4: derived from LLVM BB %startup_starter3.if.then15
	    Predecessors according to CFG: BB#3
2708B		%vreg41<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg41
2708B		  * SRLI %vreg41, %vreg41, 12; GR32Bit:%vreg41
2708B		  * %vreg38<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg38
2708B		  * %vreg40<def> = LUI <ga:@SG_MAX_RPM>[TF=2]; GR32Bit:%vreg40
2708B		  * %vreg42<def> = ADD %vreg41<kill>, %vreg40<kill>; GR32Bit:%vreg42,%vreg41,%vreg40
2708B		  * %vreg43<def> = LW %vreg42<kill>, 0; mem:LD4[@SG_MAX_RPM] GR32Bit:%vreg43,%vreg42
2708B		  * %vreg39<def> = FLW %vreg38<kill>, 0; mem:LD4[%3] FP32Bit:%vreg39 GR32Bit:%vreg38
2708B		  * %vreg44<def> = FCVT_S_W_RDY %vreg43<kill>; FP32Bit:%vreg44 GR32Bit:%vreg43
2708B		  * %vreg45<def> = FULE_S %vreg39<kill>, %vreg44<kill>; GR32Bit:%vreg45 FP32Bit:%vreg39,%vreg44
2708B		  * %vreg218<def> = LUI 1; GR32Bit:%vreg218
2708B		  * WRITEPM %vreg218<kill>, %vreg45, 0; GR32Bit:%vreg218,%vreg45
2708B		  * %vreg220<def> = LUI 2; GR32Bit:%vreg220
2708B		  * WRITEPM %vreg220<kill>, %vreg45, 0; GR32Bit:%vreg220,%vreg45
2708B		  * %vreg222<def> = LUI 3; GR32Bit:%vreg222
2708B		  * WRITEPM %vreg222<kill>, %vreg45, 0; GR32Bit:%vreg222,%vreg45
2708B		  * BNE <BB#12>, %vreg45<kill>, %zero; GR32Bit:%vreg45
2708B		  * %zero<def> = ADDI %zero, 0
2708B		  * %zero<def> = ADDI %zero, 0
2708B		  * JAL <BB#5>
2708B		  * %zero<def> = ADDI %zero, 0
2708B		  * %zero<def> = ADDI %zero, 0
3476B		%vreg219<def> = LUI 1; GR32Bit:%vreg219
3476B		  * %vreg224<def> = DREADPM %vreg219<kill>, 0; GR32Bit:%vreg224,%vreg219
3476B		  * BNE <BB#12>, %vreg224<kill>, %zero; GR32Bit:%vreg224
3476B		  * %zero<def> = ADDI %zero, 0
3476B		  * %zero<def> = ADDI %zero, 0
3476B		  * JAL <BB#5>
3476B		  * %zero<def> = ADDI %zero, 0
3476B		  * %zero<def> = ADDI %zero, 0
3556B		%vreg221<def> = LUI 2; GR32Bit:%vreg221
3556B		  * %vreg225<def> = DREADPM %vreg221<kill>, 0; GR32Bit:%vreg225,%vreg221
3556B		  * BNE <BB#12>, %vreg225<kill>, %zero; GR32Bit:%vreg225
3556B		  * %zero<def> = ADDI %zero, 0
3556B		  * %zero<def> = ADDI %zero, 0
3556B		  * JAL <BB#5>
3556B		  * %zero<def> = ADDI %zero, 0
3556B		  * %zero<def> = ADDI %zero, 0
3636B		%vreg223<def> = LUI 3; GR32Bit:%vreg223
3636B		  * %vreg226<def> = DREADPM %vreg223<kill>, 0; GR32Bit:%vreg226,%vreg223
3636B		  * BNE <BB#12>, %vreg226<kill>, %zero; GR32Bit:%vreg226
3636B		  * %zero<def> = ADDI %zero, 0
3636B		  * %zero<def> = ADDI %zero, 0
3636B		  * JAL <BB#5>
3636B		  * %zero<def> = ADDI %zero, 0
3636B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#5(16) BB#12(16)
> %t0<def> = LUI <MCSym="%lo("ga#768")">
> SRLI %t0, %t0, 12
> %t1<def> = ADDI %t5, <fi#2>
> %t2<def> = LUI <ga:@SG_MAX_RPM>[TF=2]
> %t0<def> = ADD %t0<kill>, %t2<kill>
> %t0<def> = LW %t0<kill>, 0; mem:LD4[@SG_MAX_RPM]
> %ft1<def> = FLW %t1<kill>, 0; mem:LD4[%3]
> %ft2<def> = FCVT_S_W_RDY %t0<kill>
> %t0<def> = FULE_S %ft1<kill>, %ft2<kill>
> %t1<def> = LUI 1
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 2
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 3
> WRITEPM %t1<kill>, %t0, 0
> BNE <BB#12>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#5>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 1
> %t0<def> = DREADPM %t0<kill>, 0
> BNE <BB#12>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#5>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 2
> %t0<def> = DREADPM %t0<kill>, 0
> BNE <BB#12>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#5>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 3
> %t0<def> = DREADPM %t0<kill>, 0
> BNE <BB#12>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#5>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
3852B	BB#5: derived from LLVM BB %startup_starter3.if.then19
	    Predecessors according to CFG: BB#4
3284B		%vreg49<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg49
3284B		  * SRLI %vreg49, %vreg49, 12; GR32Bit:%vreg49
3284B		  * %vreg46<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg46
3284B		  * %vreg48<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg48
3284B		  * %vreg50<def> = ADD %vreg49<kill>, %vreg48<kill>; GR32Bit:%vreg50,%vreg49,%vreg48
3284B		  * %vreg51<def> = FLW %vreg50<kill>, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg51 GR32Bit:%vreg50
3284B		  * %vreg47<def> = FLW %vreg46<kill>, 0; mem:LD4[%4] FP32Bit:%vreg47 GR32Bit:%vreg46
3284B		  * %vreg52<def> = FULE_S %vreg47<kill>, %vreg51<kill>; GR32Bit:%vreg52 FP32Bit:%vreg47,%vreg51
3284B		  * %vreg227<def> = LUI 1; GR32Bit:%vreg227
3284B		  * WRITEPM %vreg227<kill>, %vreg52, 0; GR32Bit:%vreg227,%vreg52
3284B		  * %vreg229<def> = LUI 2; GR32Bit:%vreg229
3284B		  * WRITEPM %vreg229<kill>, %vreg52, 0; GR32Bit:%vreg229,%vreg52
3284B		  * %vreg231<def> = LUI 3; GR32Bit:%vreg231
3284B		  * WRITEPM %vreg231<kill>, %vreg52, 0; GR32Bit:%vreg231,%vreg52
3284B		  * BNE <BB#7>, %vreg52<kill>, %zero; GR32Bit:%vreg52
3284B		  * %zero<def> = ADDI %zero, 0
3284B		  * %zero<def> = ADDI %zero, 0
3284B		  * JAL <BB#6>
3284B		  * %zero<def> = ADDI %zero, 0
3284B		  * %zero<def> = ADDI %zero, 0
4044B		%vreg228<def> = LUI 1; GR32Bit:%vreg228
4044B		  * %vreg233<def> = DREADPM %vreg228<kill>, 0; GR32Bit:%vreg233,%vreg228
4044B		  * BNE <BB#7>, %vreg233<kill>, %zero; GR32Bit:%vreg233
4044B		  * %zero<def> = ADDI %zero, 0
4044B		  * %zero<def> = ADDI %zero, 0
4044B		  * JAL <BB#6>
4044B		  * %zero<def> = ADDI %zero, 0
4044B		  * %zero<def> = ADDI %zero, 0
4124B		%vreg230<def> = LUI 2; GR32Bit:%vreg230
4124B		  * %vreg234<def> = DREADPM %vreg230<kill>, 0; GR32Bit:%vreg234,%vreg230
4124B		  * BNE <BB#7>, %vreg234<kill>, %zero; GR32Bit:%vreg234
4124B		  * %zero<def> = ADDI %zero, 0
4124B		  * %zero<def> = ADDI %zero, 0
4124B		  * JAL <BB#6>
4124B		  * %zero<def> = ADDI %zero, 0
4124B		  * %zero<def> = ADDI %zero, 0
4204B		%vreg232<def> = LUI 3; GR32Bit:%vreg232
4204B		  * %vreg235<def> = DREADPM %vreg232<kill>, 0; GR32Bit:%vreg235,%vreg232
4204B		  * BNE <BB#7>, %vreg235<kill>, %zero; GR32Bit:%vreg235
4204B		  * %zero<def> = ADDI %zero, 0
4204B		  * %zero<def> = ADDI %zero, 0
4204B		  * JAL <BB#6>
4204B		  * %zero<def> = ADDI %zero, 0
4204B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#6(16) BB#7(16)
> %t1<def> = LUI <MCSym="%lo("ga#0")">
> SRLI %t1, %t1, 12
> %t0<def> = ADDI %t5, <fi#3>
> %t2<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]
> %t1<def> = ADD %t1<kill>, %t2<kill>
> %ft1<def> = FLW %t1<kill>, 0; mem:LD4[@SG_RAMP_MAX]
> %ft2<def> = FLW %t0<kill>, 0; mem:LD4[%4]
> %t0<def> = FULE_S %ft2<kill>, %ft1<kill>
> %t1<def> = LUI 1
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 2
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 3
> WRITEPM %t1<kill>, %t0, 0
> BNE <BB#7>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#6>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 1
> %t0<def> = DREADPM %t0<kill>, 0
> BNE <BB#7>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#6>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 2
> %t0<def> = DREADPM %t0<kill>, 0
> BNE <BB#7>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#6>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 3
> %t0<def> = DREADPM %t0<kill>, 0
> BNE <BB#7>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#6>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
4420B	BB#6: derived from LLVM BB %startup_starter3.if.then22
	    Predecessors according to CFG: BB#5
4428B		%vreg57<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg57
4428B		  * %vreg53<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg53
4428B		  * %vreg54<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg54
4428B		  * SRLI %vreg54, %vreg54, 12; GR32Bit:%vreg54
4428B		  * %vreg55<def> = ADD %vreg54<kill>, %vreg53<kill>; GR32Bit:%vreg55,%vreg54,%vreg53
4428B		  * %vreg56<def> = FLW %vreg55<kill>, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg56 GR32Bit:%vreg55
4428B		  * FSW %vreg56<kill>, %vreg57<kill>, 0; mem:ST4[%4] FP32Bit:%vreg56 GR32Bit:%vreg57
4436B		%zero<def> = ADDI %zero, 0
4444B		%zero<def> = ADDI %zero, 0
4452B		%zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#7
> %t0<def> = ADDI %t5, <fi#3>
> %t1<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]
> %t2<def> = LUI <MCSym="%lo("ga#0")">
> SRLI %t2, %t2, 12
> %t1<def> = ADD %t2<kill>, %t1<kill>
> %ft1<def> = FLW %t1<kill>, 0; mem:LD4[@SG_RAMP_MAX]
> FSW %ft1<kill>, %t0<kill>, 0; mem:ST4[%4]
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
4508B	BB#7: derived from LLVM BB %startup_starter3.if.end
	    Predecessors according to CFG: BB#5 BB#6
4468B		%vreg61<def> = LUI <MCSym="%lo("ga#256")">; GR32Bit:%vreg61
4468B		  * SRLI %vreg61, %vreg61, 12; GR32Bit:%vreg61
4468B		  * %vreg58<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg58
4468B		  * %vreg60<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg60
4468B		  * %vreg62<def> = ADD %vreg61<kill>, %vreg60<kill>; GR32Bit:%vreg62,%vreg61,%vreg60
4468B		  * %vreg63<def> = FLW %vreg62<kill>, 0; mem:LD4[@SG_MAX] FP32Bit:%vreg63 GR32Bit:%vreg62
4468B		  * %vreg59<def> = FLW %vreg58<kill>, 0; mem:LD4[%4] FP32Bit:%vreg59 GR32Bit:%vreg58
4468B		  * %vreg64<def> = FULE_S %vreg63<kill>, %vreg59<kill>; GR32Bit:%vreg64 FP32Bit:%vreg63,%vreg59
4468B		  * %vreg236<def> = LUI 1; GR32Bit:%vreg236
4468B		  * WRITEPM %vreg236<kill>, %vreg64, 0; GR32Bit:%vreg236,%vreg64
4468B		  * %vreg238<def> = LUI 2; GR32Bit:%vreg238
4468B		  * WRITEPM %vreg238<kill>, %vreg64, 0; GR32Bit:%vreg238,%vreg64
4468B		  * %vreg240<def> = LUI 3; GR32Bit:%vreg240
4468B		  * WRITEPM %vreg240<kill>, %vreg64, 0; GR32Bit:%vreg240,%vreg64
4468B		  * BNE <BB#12>, %vreg64<kill>, %zero; GR32Bit:%vreg64
4468B		  * %zero<def> = ADDI %zero, 0
4468B		  * %zero<def> = ADDI %zero, 0
4468B		  * JAL <BB#8>
4468B		  * %zero<def> = ADDI %zero, 0
4468B		  * %zero<def> = ADDI %zero, 0
4700B		%vreg237<def> = LUI 1; GR32Bit:%vreg237
4700B		  * %vreg242<def> = DREADPM %vreg237<kill>, 0; GR32Bit:%vreg242,%vreg237
4700B		  * BNE <BB#12>, %vreg242<kill>, %zero; GR32Bit:%vreg242
4700B		  * %zero<def> = ADDI %zero, 0
4700B		  * %zero<def> = ADDI %zero, 0
4700B		  * JAL <BB#8>
4700B		  * %zero<def> = ADDI %zero, 0
4700B		  * %zero<def> = ADDI %zero, 0
4780B		%vreg239<def> = LUI 2; GR32Bit:%vreg239
4780B		  * %vreg243<def> = DREADPM %vreg239<kill>, 0; GR32Bit:%vreg243,%vreg239
4780B		  * BNE <BB#12>, %vreg243<kill>, %zero; GR32Bit:%vreg243
4780B		  * %zero<def> = ADDI %zero, 0
4780B		  * %zero<def> = ADDI %zero, 0
4780B		  * JAL <BB#8>
4780B		  * %zero<def> = ADDI %zero, 0
4780B		  * %zero<def> = ADDI %zero, 0
4860B		%vreg241<def> = LUI 3; GR32Bit:%vreg241
4860B		  * %vreg244<def> = DREADPM %vreg241<kill>, 0; GR32Bit:%vreg244,%vreg241
4860B		  * BNE <BB#12>, %vreg244<kill>, %zero; GR32Bit:%vreg244
4860B		  * %zero<def> = ADDI %zero, 0
4860B		  * %zero<def> = ADDI %zero, 0
4860B		  * JAL <BB#8>
4860B		  * %zero<def> = ADDI %zero, 0
4860B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#8(16) BB#12(16)
> %t1<def> = LUI <MCSym="%lo("ga#256")">
> SRLI %t1, %t1, 12
> %t0<def> = ADDI %t5, <fi#3>
> %t2<def> = LUI <ga:@SG_MAX>[TF=2]
> %t1<def> = ADD %t1<kill>, %t2<kill>
> %ft1<def> = FLW %t1<kill>, 0; mem:LD4[@SG_MAX]
> %ft2<def> = FLW %t0<kill>, 0; mem:LD4[%4]
> %t0<def> = FULE_S %ft1<kill>, %ft2<kill>
> %t1<def> = LUI 1
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 2
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 3
> WRITEPM %t1<kill>, %t0, 0
> BNE <BB#12>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#8>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 1
> %t0<def> = DREADPM %t0<kill>, 0
> BNE <BB#12>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#8>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 2
> %t0<def> = DREADPM %t0<kill>, 0
> BNE <BB#12>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#8>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 3
> %t0<def> = DREADPM %t0<kill>, 0
> BNE <BB#12>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#8>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
5076B	BB#8: derived from LLVM BB %startup_starter3.if.then25
	    Predecessors according to CFG: BB#7
5084B		%vreg69<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg69
5084B		  * %vreg65<def> = LUI <ga:@SG_MAX>[TF=2]; GR32Bit:%vreg65
5084B		  * %vreg66<def> = LUI <MCSym="%lo("ga#256")">; GR32Bit:%vreg66
5084B		  * SRLI %vreg66, %vreg66, 12; GR32Bit:%vreg66
5084B		  * %vreg67<def> = ADD %vreg66<kill>, %vreg65<kill>; GR32Bit:%vreg67,%vreg66,%vreg65
5084B		  * %vreg68<def> = FLW %vreg67<kill>, 0; mem:LD4[@SG_MAX] FP32Bit:%vreg68 GR32Bit:%vreg67
5084B		  * FSW %vreg68<kill>, %vreg69<kill>, 0; mem:ST4[%4] FP32Bit:%vreg68 GR32Bit:%vreg69
5084B		  * JAL <BB#12>
5084B		  * %zero<def> = ADDI %zero, 0
5084B		  * %zero<def> = ADDI %zero, 0
5164B		JAL <BB#12>
5164B		  * %zero<def> = ADDI %zero, 0
5164B		  * %zero<def> = ADDI %zero, 0
5188B		JAL <BB#12>
5188B		  * %zero<def> = ADDI %zero, 0
5188B		  * %zero<def> = ADDI %zero, 0
5212B		JAL <BB#12>
5212B		  * %zero<def> = ADDI %zero, 0
5212B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#12
> %t0<def> = ADDI %t5, <fi#3>
> %t1<def> = LUI <ga:@SG_MAX>[TF=2]
> %t2<def> = LUI <MCSym="%lo("ga#256")">
> SRLI %t2, %t2, 12
> %t1<def> = ADD %t2<kill>, %t1<kill>
> %ft1<def> = FLW %t1<kill>, 0; mem:LD4[@SG_MAX]
> FSW %ft1<kill>, %t0<kill>, 0; mem:ST4[%4]
> JAL <BB#12>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#12>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#12>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#12>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
5284B	BB#9: derived from LLVM BB %startup_starter3.if.else28
	    Predecessors according to CFG: BB#3
5100B		%vreg33<def> = LUI <MCSym="%lo("ga#1024")">; GR32Bit:%vreg33
5100B		  * SRLI %vreg33, %vreg33, 12; GR32Bit:%vreg33
5100B		  * %vreg32<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg32
5100B		  * %vreg34<def> = ADD %vreg33<kill>, %vreg32<kill>; GR32Bit:%vreg34,%vreg33,%vreg32
5100B		  * SW %zero, %vreg34<kill>, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg34
5100B		  * %vreg35<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg35
5100B		  * %vreg36<def> = LUI <MCSym="%lo("ga#1280")">; GR32Bit:%vreg36
5100B		  * SRLI %vreg36, %vreg36, 12; GR32Bit:%vreg36
5100B		  * %vreg37<def> = ADD %vreg36<kill>, %vreg35<kill>; GR32Bit:%vreg37,%vreg36,%vreg35
5100B		  * SW %zero, %vreg37<kill>, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg37
5100B		  * %vreg31<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg31
5100B		  * SW %zero, %vreg31<kill>, 0; mem:ST4[%4] GR32Bit:%vreg31
5100B		  * JAL <BB#12>
5100B		  * %zero<def> = ADDI %zero, 0
5100B		  * %zero<def> = ADDI %zero, 0
5460B		JAL <BB#12>
5460B		  * %zero<def> = ADDI %zero, 0
5460B		  * %zero<def> = ADDI %zero, 0
5484B		JAL <BB#12>
5484B		  * %zero<def> = ADDI %zero, 0
5484B		  * %zero<def> = ADDI %zero, 0
5508B		JAL <BB#12>
5508B		  * %zero<def> = ADDI %zero, 0
5508B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#12
> %t0<def> = LUI <MCSym="%lo("ga#1024")">
> SRLI %t0, %t0, 12
> %t1<def> = LUI <ga:@glob_sg_bit0>[TF=2]
> %t0<def> = ADD %t0<kill>, %t1<kill>
> SW %zero, %t0<kill>, 0; mem:ST4[@glob_sg_bit0]
> %t0<def> = LUI <ga:@glob_sg_bit1>[TF=2]
> %t1<def> = LUI <MCSym="%lo("ga#1280")">
> SRLI %t1, %t1, 12
> %t0<def> = ADD %t1<kill>, %t0<kill>
> SW %zero, %t0<kill>, 0; mem:ST4[@glob_sg_bit1]
> %t0<def> = ADDI %t5, <fi#3>
> SW %zero, %t0<kill>, 0; mem:ST4[%4]
> JAL <BB#12>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#12>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#12>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#12>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
5580B	BB#10: derived from LLVM BB %startup_starter3.if.then9
	    Predecessors according to CFG: BB#2
5588B		%vreg86<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]; GR32Bit:%vreg86
5588B		  * %vreg84<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg84
5588B		  * %vreg87<def> = LUI <MCSym="%lo("ga#1536")">; GR32Bit:%vreg87
5588B		  * SRLI %vreg87, %vreg87, 12; GR32Bit:%vreg87
5588B		  * %vreg88<def> = ADD %vreg87<kill>, %vreg86<kill>; GR32Bit:%vreg88,%vreg87,%vreg86
5588B		  * %vreg85<def> = FLW %vreg84<kill>, 0; mem:LD4[%3] FP32Bit:%vreg85 GR32Bit:%vreg84
5588B		  * %vreg80<def> = LUI 278432; GR32Bit:%vreg80
5588B		  * %a5<def> = LUI 0
5588B		  * %a5<def> = SRLI %a5<internal>, 12
5588B		  * ADD %vreg80, %vreg80, %a5; GR32Bit:%vreg80
5588B		  * %vreg74<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg74
5588B		  * %vreg70<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]; GR32Bit:%vreg70
5588B		  * %vreg83<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg83
5588B		  * %vreg71<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg71
5588B		  * SRLI %vreg71, %vreg71, 12; GR32Bit:%vreg71
5588B		  * %vreg72<def> = ADD %vreg71<kill>, %vreg70<kill>; GR32Bit:%vreg72,%vreg71,%vreg70
5588B		  * %vreg73<def> = FLW %vreg72<kill>, 0; mem:LD4[@SG_RAMP_MAX] FP32Bit:%vreg73 GR32Bit:%vreg72
5588B		  * %vreg75<def> = LW %vreg74<kill>, 0; mem:LD4[%2] GR32Bit:%vreg75,%vreg74
5588B		  * %vreg82<def> = COPY %vreg80<kill>; FP32Bit:%vreg82 GR32Bit:%vreg80
5588B		  * %vreg76<def> = LW %vreg75<kill>, 4; mem:LD4[%47] GR32Bit:%vreg76,%vreg75
5588B		  * FSW %vreg85<kill>, %vreg88<kill>, 0; mem:ST4[@nh_fin_de_rampe] FP32Bit:%vreg85 GR32Bit:%vreg88
5588B		  * %vreg77<def> = ADDI %vreg76<kill>, -350; GR32Bit:%vreg77,%vreg76
5588B		  * %vreg78<def> = FCVT_S_W_RDY %vreg77<kill>; FP32Bit:%vreg78 GR32Bit:%vreg77
5588B		  * %vreg79<def> = FMUL_S_RDY %vreg78<kill>, %vreg73<kill>; FP32Bit:%vreg79,%vreg78,%vreg73
5588B		  * %vreg81<def> = FDIV_S_RDY %vreg82<kill>, %vreg79<kill>; FP32Bit:%vreg81,%vreg82,%vreg79
5588B		  * FSW %vreg81<kill>, %vreg83<kill>, 0; mem:ST4[%4] FP32Bit:%vreg81 GR32Bit:%vreg83
5588B		  * JAL <BB#12>
5588B		  * %zero<def> = ADDI %zero, 0
5588B		  * %zero<def> = ADDI %zero, 0
5872B		JAL <BB#12>
5872B		  * %zero<def> = ADDI %zero, 0
5872B		  * %zero<def> = ADDI %zero, 0
5896B		JAL <BB#12>
5896B		  * %zero<def> = ADDI %zero, 0
5896B		  * %zero<def> = ADDI %zero, 0
5920B		JAL <BB#12>
5920B		  * %zero<def> = ADDI %zero, 0
5920B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#12
> %t1<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]
> %t0<def> = ADDI %t5, <fi#2>
> %t2<def> = LUI <MCSym="%lo("ga#1536")">
> SRLI %t2, %t2, 12
> %t1<def> = ADD %t2<kill>, %t1<kill>
> %ft1<def> = FLW %t0<kill>, 0; mem:LD4[%3]
> %t2<def> = LUI 278432
> %a5<def> = LUI 0
> %a5<def> = SRLI %a5<internal>, 12
> ADD %t2, %t2, %a5
> %fp<def> = ADDI %t5, <fi#1>
> %a0<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]
> %t0<def> = ADDI %t5, <fi#3>
> %a1<def> = LUI <MCSym="%lo("ga#0")">
> SRLI %a1, %a1, 12
> %a0<def> = ADD %a1<kill>, %a0<kill>
> %ft2<def> = FLW %a0<kill>, 0; mem:LD4[@SG_RAMP_MAX]
> %fp<def> = LW %fp<kill>, 0; mem:LD4[%2]
> %ft3<def> = COPY %t2<kill>
> %t2<def> = LW %fp<kill>, 4; mem:LD4[%47]
> FSW %ft1<kill>, %t1<kill>, 0; mem:ST4[@nh_fin_de_rampe]
> %t1<def> = ADDI %t2<kill>, -350
> %ft1<def> = FCVT_S_W_RDY %t1<kill>
> %ft1<def> = FMUL_S_RDY %ft1<kill>, %ft2<kill>
> %ft1<def> = FDIV_S_RDY %ft3<kill>, %ft1<kill>
> FSW %ft1<kill>, %t0<kill>, 0; mem:ST4[%4]
> JAL <BB#12>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#12>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#12>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#12>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
5992B	BB#11: derived from LLVM BB %startup_starter3.if.then
	    Predecessors according to CFG: BB#0
5672B		%vreg95<def> = LUI <MCSym="%lo("ga#1280")">; GR32Bit:%vreg95
5672B		  * SRLI %vreg95, %vreg95, 12; GR32Bit:%vreg95
5672B		  * %vreg94<def> = LUI <ga:@glob_sg_bit1>[TF=2]; GR32Bit:%vreg94
5672B		  * %vreg96<def> = ADD %vreg95<kill>, %vreg94<kill>; GR32Bit:%vreg96,%vreg95,%vreg94
5672B		  * SW %zero, %vreg96<kill>, 0; mem:ST4[@glob_sg_bit1] GR32Bit:%vreg96
5672B		  * %vreg90<def> = ADDI %zero, 1; GR32Bit:%vreg90
5672B		  * %vreg92<def> = LUI <MCSym="%lo("ga#1024")">; GR32Bit:%vreg92
5672B		  * SRLI %vreg92, %vreg92, 12; GR32Bit:%vreg92
5672B		  * %vreg91<def> = LUI <ga:@glob_sg_bit0>[TF=2]; GR32Bit:%vreg91
5672B		  * %vreg93<def> = ADD %vreg92<kill>, %vreg91<kill>; GR32Bit:%vreg93,%vreg92,%vreg91
5672B		  * SW %vreg90<kill>, %vreg93<kill>, 0; mem:ST4[@glob_sg_bit0] GR32Bit:%vreg90,%vreg93
5672B		  * %vreg89<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg89
5672B		  * SW %zero, %vreg89<kill>, 0; mem:ST4[%4] GR32Bit:%vreg89
6008B		%zero<def> = ADDI %zero, 0
6016B		%zero<def> = ADDI %zero, 0
6024B		%zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#12
> %t0<def> = LUI <MCSym="%lo("ga#1280")">
> SRLI %t0, %t0, 12
> %t1<def> = LUI <ga:@glob_sg_bit1>[TF=2]
> %t0<def> = ADD %t0<kill>, %t1<kill>
> SW %zero, %t0<kill>, 0; mem:ST4[@glob_sg_bit1]
> %t0<def> = ADDI %zero, 1
> %t1<def> = LUI <MCSym="%lo("ga#1024")">
> SRLI %t1, %t1, 12
> %t2<def> = LUI <ga:@glob_sg_bit0>[TF=2]
> %t1<def> = ADD %t1<kill>, %t2<kill>
> SW %t0<kill>, %t1<kill>, 0; mem:ST4[@glob_sg_bit0]
> %t0<def> = ADDI %t5, <fi#3>
> SW %zero, %t0<kill>, 0; mem:ST4[%4]
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
6196B	BB#12: derived from LLVM BB %startup_starter3.return
	    Predecessors according to CFG: BB#1 BB#9 BB#4 BB#7 BB#8 BB#10 BB#11
6204B		%vreg99<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg99
6204B		  * %vreg97<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg97
6204B		  * %vreg98<def> = FLW %vreg97<kill>, 0; mem:LD4[%4] FP32Bit:%vreg98 GR32Bit:%vreg97
6204B		  * FSW %vreg98<kill>, %vreg99<kill>, 0; mem:ST4[%1] FP32Bit:%vreg98 GR32Bit:%vreg99
6204B		  * %vreg245<def> = ADDI %zero, 128; GR32Bit:%vreg245
6204B		  * %vreg246<def> = ADDI %zero, 1; GR32Bit:%vreg246
6204B		  * WRITECM %vreg245, %vreg246<kill>, 60; GR32Bit:%vreg245,%vreg246
6204B		  * %vreg247<def> = LUI <MCSym="%hi("ga#2560")">; GR32Bit:%vreg247
6204B		  * %vreg248<def> = LUI <MCSym="%lo("ga#2560")">; GR32Bit:%vreg248
6204B		  * %vreg249<def> = SRLI %vreg248<kill>, 12; GR32Bit:%vreg249,%vreg248
6204B		  * %vreg250<def> = ADD %vreg247<kill>, %vreg249<kill>; GR32Bit:%vreg250,%vreg247,%vreg249
6204B		  * %vreg251<def> = ADDI %zero, 28; GR32Bit:%vreg251
6204B		  * %vreg252<def> = SRLI %vreg245, 22; GR32Bit:%vreg252,%vreg245
6204B		  * %vreg253<def> = SRLI %vreg245, 12; GR32Bit:%vreg253,%vreg245
6204B		  * %vreg254<def> = ANDI %vreg253<kill>, 15; GR32Bit:%vreg254,%vreg253
6204B		  * %vreg255<def> = SRLI %vreg245, 6; GR32Bit:%vreg255,%vreg245
6204B		  * %vreg256<def> = ANDI %vreg255<kill>, 63; GR32Bit:%vreg256,%vreg255
6204B		  * %vreg257<def> = ADDI %zero, 832; GR32Bit:%vreg257
6204B		  * %vreg258<def> = MUL %vreg252<kill>, %vreg257<kill>; GR32Bit:%vreg258,%vreg252,%vreg257
6204B		  * %vreg259<def> = ADDI %zero, 52; GR32Bit:%vreg259
6204B		  * %vreg260<def> = MUL %vreg254<kill>, %vreg259<kill>; GR32Bit:%vreg260,%vreg254,%vreg259
6204B		  * %vreg261<def> = ADD %vreg260<kill>, %vreg256<kill>; GR32Bit:%vreg261,%vreg260,%vreg256
6204B		  * %vreg262<def> = ADD %vreg261<kill>, %vreg258<kill>; GR32Bit:%vreg262,%vreg261,%vreg258
6204B		  * %vreg263<def> = MUL %vreg262<kill>, %vreg251<kill>; GR32Bit:%vreg263,%vreg262,%vreg251
6204B		  * %vreg264<def> = ADD %vreg263<kill>, %vreg250<kill>; GR32Bit:%vreg264,%vreg263,%vreg250
6204B		  * %vreg265<def> = FLW %t5, 0; FP32Bit:%vreg265
6204B		  * FSW %vreg265<kill>, %vreg264<kill>, 0; FP32Bit:%vreg265 GR32Bit:%vreg264
6204B		  * %vreg266<def> = LUI 1; GR32Bit:%vreg266
6204B		  * WRITEPM %vreg266<kill>, %vreg245<kill>, 0; GR32Bit:%vreg266,%vreg245
6204B		  * FDELETE %t4, 0
6204B		  * END 0
6204B		  * %zero<def> = ADDI %zero, 0
6204B		  * %zero<def> = ADDI %zero, 0
6476B		%vreg267<def> = LUI 1; GR32Bit:%vreg267
6476B		  * %vreg268<def> = DREADPM %vreg267<kill>, 0; GR32Bit:%vreg268,%vreg267
6476B		  * %vreg269<def> = LUI 1048575; GR32Bit:%vreg269
6476B		  * %a5<def> = LUI 4095
6476B		  * %a5<def> = SRLI %a5<internal>, 12
6476B		  * ADD %vreg269, %vreg269, %a5; GR32Bit:%vreg269
6476B		  * SYNC %vreg268, %vreg269<kill>, 60; GR32Bit:%vreg268,%vreg269
6476B		  * END 0
6476B		  * %zero<def> = ADDI %zero, 0
6476B		  * %zero<def> = ADDI %zero, 0
6556B		END 0
6556B		  * %zero<def> = ADDI %zero, 0
6556B		  * %zero<def> = ADDI %zero, 0
6580B		END 0
6580B		  * %zero<def> = ADDI %zero, 0
6580B		  * %zero<def> = ADDI %zero, 0
> %t0<def> = ADDI %t5, <fi#0>
> %t1<def> = ADDI %t5, <fi#3>
> %ft1<def> = FLW %t1<kill>, 0; mem:LD4[%4]
> FSW %ft1<kill>, %t0<kill>, 0; mem:ST4[%1]
> %t0<def> = ADDI %zero, 128
> %t1<def> = ADDI %zero, 1
> WRITECM %t0, %t1<kill>, 60
> %t1<def> = LUI <MCSym="%hi("ga#2560")">
> %t2<def> = LUI <MCSym="%lo("ga#2560")">
> %t2<def> = SRLI %t2<kill>, 12
> %t1<def> = ADD %t1<kill>, %t2<kill>
> %t2<def> = ADDI %zero, 28
> %fp<def> = SRLI %t0, 22
> %a0<def> = SRLI %t0, 12
> %a0<def> = ANDI %a0<kill>, 15
> %a1<def> = SRLI %t0, 6
> %a1<def> = ANDI %a1<kill>, 63
> %a2<def> = ADDI %zero, 832
> %fp<def> = MUL %fp<kill>, %a2<kill>
> %a2<def> = ADDI %zero, 52
> %a0<def> = MUL %a0<kill>, %a2<kill>
> %a0<def> = ADD %a0<kill>, %a1<kill>
> %fp<def> = ADD %a0<kill>, %fp<kill>
> %t2<def> = MUL %fp<kill>, %t2<kill>
> %t1<def> = ADD %t2<kill>, %t1<kill>
> %ft1<def> = FLW %t5, 0
> FSW %ft1<kill>, %t1<kill>, 0
> %t1<def> = LUI 1
> WRITEPM %t1<kill>, %t0<kill>, 0
> FDELETE %t4, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 1
> %t0<def> = DREADPM %t0<kill>, 0
> %t1<def> = LUI 1048575
> %a5<def> = LUI 4095
> %a5<def> = SRLI %a5<internal>, 12
> ADD %t1, %t1, %a5
> SYNC %t0, %t1<kill>, 60
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
********** EMITTING LIVE DEBUG VARIABLES **********
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: startup_starter3
real copy:   %ft3<def> = COPY %t2<kill>
  %ft3<def> = COPY %t2<kill>
replaced by: %t1<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]
current state of mf:# Machine code for function startup_starter3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %startup_starter3.entry
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#2560")">
	  * %t1<def> = LUI <MCSym="%lo("ga#2560")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 28
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = ADDI %t5, <fi#5>
	  * %t1<def> = ADDI %zero, 850
	  * %fp<def> = ADDI %t5, <fi#3>
	  * %t2<def> = ADDI %t5, <fi#1>
	  * %a1<def> = ADDI %t5, <fi#-1>
	  * SW %a1, %t2, 0; mem:ST4[%2]
	  * %a2<def> = LW %t2, 0; mem:LD4[%2]
	  * %a0<def> = ADDI %t5, <fi#4>
	  * %a3<def> = ADDI %zero, 350
	  * %a4<def> = ADDI %t5, <fi#2>
	  * %ft1<def> = FLW %a1<kill>, 0; mem:LD4[%9](align=16)
	  * FSW %ft1<kill>, %a4<kill>, 0; mem:ST4[%3]
	  * %ft1<def> = FLW %a2<kill>, 8; mem:LD4[%13]
	  * FSW %ft1<kill>, %fp<kill>, 0; mem:ST4[%4]
	  * SW %a3<kill>, %a0<kill>, 0; mem:ST4[%5]
	  * SW %t1<kill>, %t0<kill>, 0; mem:ST4[%6]
	  * %t0<def> = LW %t2<kill>, 0; mem:LD4[%2]
	  * %t0<def> = LW %t0<kill>, 4; mem:LD4[%16]
	  * %t1<def> = LUI 1
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 2
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 3
	  * WRITEPM %t1<kill>, %t0, 0
	  * BEQ <BB#11>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#2560")">
	  * %t1<def> = LUI <MCSym="%lo("ga#2560")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 28
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = LUI 1
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BEQ <BB#11>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#2560")">
	  * %t1<def> = LUI <MCSym="%lo("ga#2560")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 28
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = LUI 2
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BEQ <BB#11>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#2560")">
	  * %t1<def> = LUI <MCSym="%lo("ga#2560")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 28
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = LUI 3
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BEQ <BB#11>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#11(12) BB#1(20)

BB#1: derived from LLVM BB %startup_starter3.if.else
    Predecessors according to CFG: BB#0
	%t0<def> = ADDI %t5, <fi#4>
	  * %t0<def> = LW %t0<kill>, 0; mem:LD4[%5]
	  * %t1<def> = ADDI %t5, <fi#1>
	  * %t1<def> = LW %t1<kill>, 0; mem:LD4[%2]
	  * %t1<def> = LW %t1<kill>, 4; mem:LD4[%20]
	  * %t2<def> = LUI 1
	  * WRITEPM %t2, %t1, 0
	  * %fp<def> = LUI 2
	  * WRITEPM %fp, %t1, 0
	  * %a0<def> = LUI 3
	  * WRITEPM %a0, %t1, 0
	  * WRITEPM %t2<kill>, %t0, 4
	  * WRITEPM %fp<kill>, %t0, 4
	  * WRITEPM %a0<kill>, %t0, 4
	  * BLT <BB#12>, %t1<kill>, %t0<kill>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 1
	  * %t1<def> = DREADPM %t0, 0
	  * %t0<def> = DREADPM %t0<kill>, 4
	  * BLT <BB#12>, %t1<kill>, %t0<kill>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 2
	  * %t1<def> = DREADPM %t0, 0
	  * %t0<def> = DREADPM %t0<kill>, 4
	  * BLT <BB#12>, %t1<kill>, %t0<kill>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t1<def> = LUI 3
	  * %t0<def> = DREADPM %t1, 0
	  * %t1<def> = DREADPM %t1<kill>, 4
	  * BLT <BB#12>, %t0<kill>, %t1<kill>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#12(16) BB#2(16)

BB#2: derived from LLVM BB %startup_starter3.if.else6
    Predecessors according to CFG: BB#1
	%t0<def> = ADDI %t5, <fi#5>
	  * %t0<def> = LW %t0<kill>, 0; mem:LD4[%6]
	  * %t1<def> = ADDI %t5, <fi#1>
	  * %t1<def> = LW %t1<kill>, 0; mem:LD4[%2]
	  * %t1<def> = LW %t1<kill>, 4; mem:LD4[%25]
	  * %t2<def> = LUI 1
	  * WRITEPM %t2, %t1, 0
	  * %fp<def> = LUI 2
	  * WRITEPM %fp, %t1, 0
	  * %a0<def> = LUI 3
	  * WRITEPM %a0, %t1, 0
	  * WRITEPM %t2<kill>, %t0, 4
	  * WRITEPM %fp<kill>, %t0, 4
	  * WRITEPM %a0<kill>, %t0, 4
	  * BLE <BB#10>, %t1<kill>, %t0<kill>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#3>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 1
	  * %t1<def> = DREADPM %t0, 0
	  * %t0<def> = DREADPM %t0<kill>, 4
	  * BLE <BB#10>, %t1<kill>, %t0<kill>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#3>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 2
	  * %t1<def> = DREADPM %t0, 0
	  * %t0<def> = DREADPM %t0<kill>, 4
	  * BLE <BB#10>, %t1<kill>, %t0<kill>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#3>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t1<def> = LUI 3
	  * %t0<def> = DREADPM %t1, 0
	  * %t1<def> = DREADPM %t1<kill>, 4
	  * BLE <BB#10>, %t0<kill>, %t1<kill>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#3>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#10(16) BB#3(16)

BB#3: derived from LLVM BB %startup_starter3.if.else11
    Predecessors according to CFG: BB#2
	%t0<def> = LUI <MCSym="%lo("ga#512")">
	  * SRLI %t0, %t0, 12
	  * %t1<def> = ADDI %t5, <fi#2>
	  * %t2<def> = LUI <ga:@NH_STARTER_SHUTOFF>[TF=2]
	  * %t0<def> = ADD %t0<kill>, %t2<kill>
	  * %t0<def> = LW %t0<kill>, 0; mem:LD4[@NH_STARTER_SHUTOFF]
	  * %ft1<def> = FLW %t1<kill>, 0; mem:LD4[%3]
	  * %ft2<def> = FCVT_S_W_RDY %t0<kill>
	  * %t0<def> = FULE_S %ft1<kill>, %ft2<kill>
	  * %t1<def> = LUI 1
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 2
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 3
	  * WRITEPM %t1<kill>, %t0, 0
	  * BNE <BB#9>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#4>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 1
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BNE <BB#9>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#4>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 2
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BNE <BB#9>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#4>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 3
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BNE <BB#9>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#4>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#4(16) BB#9(16)

BB#4: derived from LLVM BB %startup_starter3.if.then15
    Predecessors according to CFG: BB#3
	%t0<def> = LUI <MCSym="%lo("ga#768")">
	  * SRLI %t0, %t0, 12
	  * %t1<def> = ADDI %t5, <fi#2>
	  * %t2<def> = LUI <ga:@SG_MAX_RPM>[TF=2]
	  * %t0<def> = ADD %t0<kill>, %t2<kill>
	  * %t0<def> = LW %t0<kill>, 0; mem:LD4[@SG_MAX_RPM]
	  * %ft1<def> = FLW %t1<kill>, 0; mem:LD4[%3]
	  * %ft2<def> = FCVT_S_W_RDY %t0<kill>
	  * %t0<def> = FULE_S %ft1<kill>, %ft2<kill>
	  * %t1<def> = LUI 1
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 2
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 3
	  * WRITEPM %t1<kill>, %t0, 0
	  * BNE <BB#12>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#5>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 1
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BNE <BB#12>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#5>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 2
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BNE <BB#12>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#5>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 3
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BNE <BB#12>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#5>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#5(16) BB#12(16)

BB#5: derived from LLVM BB %startup_starter3.if.then19
    Predecessors according to CFG: BB#4
	%t1<def> = LUI <MCSym="%lo("ga#0")">
	  * SRLI %t1, %t1, 12
	  * %t0<def> = ADDI %t5, <fi#3>
	  * %t2<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]
	  * %t1<def> = ADD %t1<kill>, %t2<kill>
	  * %ft1<def> = FLW %t1<kill>, 0; mem:LD4[@SG_RAMP_MAX]
	  * %ft2<def> = FLW %t0<kill>, 0; mem:LD4[%4]
	  * %t0<def> = FULE_S %ft2<kill>, %ft1<kill>
	  * %t1<def> = LUI 1
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 2
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 3
	  * WRITEPM %t1<kill>, %t0, 0
	  * BNE <BB#7>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#6>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 1
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BNE <BB#7>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#6>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 2
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BNE <BB#7>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#6>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 3
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BNE <BB#7>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#6>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#6(16) BB#7(16)

BB#6: derived from LLVM BB %startup_starter3.if.then22
    Predecessors according to CFG: BB#5
	%t0<def> = ADDI %t5, <fi#3>
	  * %t1<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]
	  * %t2<def> = LUI <MCSym="%lo("ga#0")">
	  * SRLI %t2, %t2, 12
	  * %t1<def> = ADD %t2<kill>, %t1<kill>
	  * %ft1<def> = FLW %t1<kill>, 0; mem:LD4[@SG_RAMP_MAX]
	  * FSW %ft1<kill>, %t0<kill>, 0; mem:ST4[%4]
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#7

BB#7: derived from LLVM BB %startup_starter3.if.end
    Predecessors according to CFG: BB#5 BB#6
	%t1<def> = LUI <MCSym="%lo("ga#256")">
	  * SRLI %t1, %t1, 12
	  * %t0<def> = ADDI %t5, <fi#3>
	  * %t2<def> = LUI <ga:@SG_MAX>[TF=2]
	  * %t1<def> = ADD %t1<kill>, %t2<kill>
	  * %ft1<def> = FLW %t1<kill>, 0; mem:LD4[@SG_MAX]
	  * %ft2<def> = FLW %t0<kill>, 0; mem:LD4[%4]
	  * %t0<def> = FULE_S %ft1<kill>, %ft2<kill>
	  * %t1<def> = LUI 1
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 2
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 3
	  * WRITEPM %t1<kill>, %t0, 0
	  * BNE <BB#12>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#8>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 1
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BNE <BB#12>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#8>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 2
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BNE <BB#12>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#8>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 3
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BNE <BB#12>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#8>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#8(16) BB#12(16)

BB#8: derived from LLVM BB %startup_starter3.if.then25
    Predecessors according to CFG: BB#7
	%t0<def> = ADDI %t5, <fi#3>
	  * %t1<def> = LUI <ga:@SG_MAX>[TF=2]
	  * %t2<def> = LUI <MCSym="%lo("ga#256")">
	  * SRLI %t2, %t2, 12
	  * %t1<def> = ADD %t2<kill>, %t1<kill>
	  * %ft1<def> = FLW %t1<kill>, 0; mem:LD4[@SG_MAX]
	  * FSW %ft1<kill>, %t0<kill>, 0; mem:ST4[%4]
	  * JAL <BB#12>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#12>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#12>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#12>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#12

BB#9: derived from LLVM BB %startup_starter3.if.else28
    Predecessors according to CFG: BB#3
	%t0<def> = LUI <MCSym="%lo("ga#1024")">
	  * SRLI %t0, %t0, 12
	  * %t1<def> = LUI <ga:@glob_sg_bit0>[TF=2]
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * SW %zero, %t0<kill>, 0; mem:ST4[@glob_sg_bit0]
	  * %t0<def> = LUI <ga:@glob_sg_bit1>[TF=2]
	  * %t1<def> = LUI <MCSym="%lo("ga#1280")">
	  * SRLI %t1, %t1, 12
	  * %t0<def> = ADD %t1<kill>, %t0<kill>
	  * SW %zero, %t0<kill>, 0; mem:ST4[@glob_sg_bit1]
	  * %t0<def> = ADDI %t5, <fi#3>
	  * SW %zero, %t0<kill>, 0; mem:ST4[%4]
	  * JAL <BB#12>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#12>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#12>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#12>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#12

BB#10: derived from LLVM BB %startup_starter3.if.then9
    Predecessors according to CFG: BB#2
	%t1<def> = LUI <ga:@nh_fin_de_rampe>[TF=2]
	  * %t0<def> = ADDI %t5, <fi#2>
	  * %t2<def> = LUI <MCSym="%lo("ga#1536")">
	  * SRLI %t2, %t2, 12
	  * %t1<def> = ADD %t2<kill>, %t1<kill>
	  * %ft1<def> = FLW %t0<kill>, 0; mem:LD4[%3]
	  * %t2<def> = LUI 278432
	  * %a5<def> = LUI 0
	  * %a5<def> = SRLI %a5<internal>, 12
	  * ADD %t2, %t2, %a5
	  * %fp<def> = ADDI %t5, <fi#1>
	  * %a0<def> = LUI <ga:@SG_RAMP_MAX>[TF=2]
	  * %t0<def> = ADDI %t5, <fi#3>
	  * %a1<def> = LUI <MCSym="%lo("ga#0")">
	  * SRLI %a1, %a1, 12
	  * %a0<def> = ADD %a1<kill>, %a0<kill>
	  * %ft2<def> = FLW %a0<kill>, 0; mem:LD4[@SG_RAMP_MAX]
	  * %fp<def> = LW %fp<kill>, 0; mem:LD4[%2]
	  * %ft3<def> = FMV_S_X %t2<kill>
	  * %t2<def> = LW %fp<kill>, 4; mem:LD4[%47]
	  * FSW %ft1<kill>, %t1<kill>, 0; mem:ST4[@nh_fin_de_rampe]
	  * %t1<def> = ADDI %t2<kill>, -350
	  * %ft1<def> = FCVT_S_W_RDY %t1<kill>
	  * %ft1<def> = FMUL_S_RDY %ft1<kill>, %ft2<kill>
	  * %ft1<def> = FDIV_S_RDY %ft3<kill>, %ft1<kill>
	  * FSW %ft1<kill>, %t0<kill>, 0; mem:ST4[%4]
	  * JAL <BB#12>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#12>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#12>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#12>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#12

BB#11: derived from LLVM BB %startup_starter3.if.then
    Predecessors according to CFG: BB#0
	%t0<def> = LUI <MCSym="%lo("ga#1280")">
	  * SRLI %t0, %t0, 12
	  * %t1<def> = LUI <ga:@glob_sg_bit1>[TF=2]
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * SW %zero, %t0<kill>, 0; mem:ST4[@glob_sg_bit1]
	  * %t0<def> = ADDI %zero, 1
	  * %t1<def> = LUI <MCSym="%lo("ga#1024")">
	  * SRLI %t1, %t1, 12
	  * %t2<def> = LUI <ga:@glob_sg_bit0>[TF=2]
	  * %t1<def> = ADD %t1<kill>, %t2<kill>
	  * SW %t0<kill>, %t1<kill>, 0; mem:ST4[@glob_sg_bit0]
	  * %t0<def> = ADDI %t5, <fi#3>
	  * SW %zero, %t0<kill>, 0; mem:ST4[%4]
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#12

BB#12: derived from LLVM BB %startup_starter3.return
    Predecessors according to CFG: BB#1 BB#9 BB#4 BB#7 BB#8 BB#10 BB#11
	%t0<def> = ADDI %t5, <fi#0>
	  * %t1<def> = ADDI %t5, <fi#3>
	  * %ft1<def> = FLW %t1<kill>, 0; mem:LD4[%4]
	  * FSW %ft1<kill>, %t0<kill>, 0; mem:ST4[%1]
	  * %t0<def> = ADDI %zero, 128
	  * %t1<def> = ADDI %zero, 1
	  * WRITECM %t0, %t1<kill>, 60
	  * %t1<def> = LUI <MCSym="%hi("ga#2560")">
	  * %t2<def> = LUI <MCSym="%lo("ga#2560")">
	  * %t2<def> = SRLI %t2<kill>, 12
	  * %t1<def> = ADD %t1<kill>, %t2<kill>
	  * %t2<def> = ADDI %zero, 28
	  * %fp<def> = SRLI %t0, 22
	  * %a0<def> = SRLI %t0, 12
	  * %a0<def> = ANDI %a0<kill>, 15
	  * %a1<def> = SRLI %t0, 6
	  * %a1<def> = ANDI %a1<kill>, 63
	  * %a2<def> = ADDI %zero, 832
	  * %fp<def> = MUL %fp<kill>, %a2<kill>
	  * %a2<def> = ADDI %zero, 52
	  * %a0<def> = MUL %a0<kill>, %a2<kill>
	  * %a0<def> = ADD %a0<kill>, %a1<kill>
	  * %fp<def> = ADD %a0<kill>, %fp<kill>
	  * %t2<def> = MUL %fp<kill>, %t2<kill>
	  * %t1<def> = ADD %t2<kill>, %t1<kill>
	  * %ft1<def> = FLW %t5, 0
	  * FSW %ft1<kill>, %t1<kill>, 0
	  * %t1<def> = LUI 1
	  * WRITEPM %t1<kill>, %t0<kill>, 0
	  * FDELETE %t4, 0
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 1
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * %t1<def> = LUI 1048575
	  * %a5<def> = LUI 4095
	  * %a5<def> = SRLI %a5<internal>, 12
	  * ADD %t1, %t1, %a5
	  * SYNC %t0, %t1<kill>, 60
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0

# End machine code for function startup_starter3.

lowering frame index for func startup_starter3:5 TO VAL:20
lowering frame index for func startup_starter3:3 TO VAL:12
lowering frame index for func startup_starter3:1 TO VAL:4
lowering frame index for func startup_starter3:-1 TO VAL:24
lowering frame index for func startup_starter3:4 TO VAL:16
lowering frame index for func startup_starter3:2 TO VAL:8
lowering frame index for func startup_starter3:4 TO VAL:16
lowering frame index for func startup_starter3:1 TO VAL:4
lowering frame index for func startup_starter3:5 TO VAL:20
lowering frame index for func startup_starter3:1 TO VAL:4
lowering frame index for func startup_starter3:2 TO VAL:8
lowering frame index for func startup_starter3:2 TO VAL:8
lowering frame index for func startup_starter3:3 TO VAL:12
lowering frame index for func startup_starter3:3 TO VAL:12
lowering frame index for func startup_starter3:3 TO VAL:12
lowering frame index for func startup_starter3:3 TO VAL:12
lowering frame index for func startup_starter3:3 TO VAL:12
lowering frame index for func startup_starter3:2 TO VAL:8
lowering frame index for func startup_starter3:1 TO VAL:4
lowering frame index for func startup_starter3:3 TO VAL:12
lowering frame index for func startup_starter3:3 TO VAL:12
lowering frame index for func startup_starter3:0 TO VAL:0
lowering frame index for func startup_starter3:3 TO VAL:12
