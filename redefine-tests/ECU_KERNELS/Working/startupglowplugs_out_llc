Args: /home/arka/Workspace/work/Git_Compiler_Repo/redefine-tests/ECU_KERNELS/../../..//MM_Compiler_latest/build/Release+Asserts/bin/llc --mattr=+has4ce --mtriple redefine -debug ./Working/startupglowplugs_HyOpPass.ll -o ./Working/startupglowplugs.as 

Features:+has4ce
CPU:REDEFINE

CGP: Found      local addrmode: [Base:%0]
CGP: Found      local addrmode: [Base:%0]
Computing probabilities for redefine_start1.return
Computing probabilities for redefine_start1.entry
new hop:redefine_start1
new hyop#0:redefine_start1
new hop:redefine_start2
new hyop#1:redefine_start2
new hop:startup_glowplugs3
new hyop#2:startup_glowplugs3
problems setting inputs?
skipping abort
source hop:redefine_start1
frame size for hop redefine_start1:4
source hop:redefine_start2
frame size for hop redefine_start2:8
source hop:startup_glowplugs3
frame size for hop startup_glowplugs3:16
max mem frame size:16
digraph{
redefine_start1[label="Name:redefine_start1,Dom:NULL, PostDom:NULL,Map:0:0, Context frame:0,SyncCount:1"];
redefine_start1->startup_glowplugs3[label=localref];
redefine_start2[label="Name:redefine_start2,Dom:NULL, PostDom:NULL,Map:0:0, Context frame:0,SyncCount:0"];
startup_glowplugs3[label="Name:startup_glowplugs3,Dom:NULL, PostDom:NULL,Map:0:0, Context frame:0,SyncCount:0"];
startup_glowplugs3->redefine_start2[label=localref];
}
Setting domf of node redefine_start1 to size 0
Setting domf of node redefine_start2 to size 0
Setting domf of node startup_glowplugs3 to size 0
idom of node:redefine_start1
idom of node:startup_glowplugs3

------
forwarding address to redefine_start1:

------
forwarding address to redefine_start2:

------
forwarding address to startup_glowplugs3:

Dominant sequence computed:
redefine_start1->startup_glowplugs3->redefine_start2->

Dominant sequence computed:
redefine_start1->startup_glowplugs3->redefine_start2->
before merging, num of clusters:1
each cluster:
redefine_start1,startup_glowplugs3,redefine_start2,
Minimizing ordering edges
setting context frame id of redefine_start1 to 0
setting context frame id of startup_glowplugs3 to 1
setting context frame id of redefine_start2 to 2
Computing whether there is a control/scalar path between a pair of HyperOps communicating via memory and adding sync edges if there is no control path
adding a sync edge between redefine_start1 and startup_glowplugs3
adding a sync edge between startup_glowplugs3 and redefine_start2
If the producer and consumer are mapped to different CRs, treat them as localrefs only instead of scalars to avoid reconciles
problems setting inputs?
generated cfg:Setting domf of node redefine_start1 to size 0
Setting domf of node redefine_start2 to size 0
Setting domf of node startup_glowplugs3 to size 0
idom of node:redefine_start1
idom of node:startup_glowplugs3
Delivering reaching predicate with decrement count in case operands to be delivered are on the non taken path
before decrementing sync, graph:Decrementing sync count for nodes with sync edges coming from mutually exclusive paths
updating node with incoming sync edges redefine_start1
updating node with incoming sync edges redefine_start2
updating node with incoming sync edges startup_glowplugs3
after minimizing cluster and converting scalar edges to local refs, graph:digraph{
redefine_start1[label="Name:redefine_start1,Dom:NULL, PostDom:startup_glowplugs3,Map:0:0, Context frame:0,SyncCount:1"];
redefine_start1->startup_glowplugs3[label=sync];
redefine_start1->startup_glowplugs3[label=localref];
redefine_start2[label="Name:redefine_start2,Dom:startup_glowplugs3, PostDom:NULL,Map:0:0, Context frame:2,SyncCount:1"];
startup_glowplugs3[label="Name:startup_glowplugs3,Dom:redefine_start1, PostDom:redefine_start2,Map:0:0, Context frame:1,SyncCount:1"];
startup_glowplugs3->redefine_start2[label=localref];
startup_glowplugs3->redefine_start2[label=sync];
}
num of clusters:1
num constraints:0
setting target resource 0
setting target resource 0
setting target resource 0
digraph{
redefine_start1[label="Name:redefine_start1,Dom:NULL, PostDom:startup_glowplugs3,Map:0:0, Context frame:0,SyncCount:1"];
redefine_start1->startup_glowplugs3[label=sync];
redefine_start1->startup_glowplugs3[label=localref];
redefine_start2[label="Name:redefine_start2,Dom:startup_glowplugs3, PostDom:NULL,Map:0:0, Context frame:2,SyncCount:1"];
startup_glowplugs3[label="Name:startup_glowplugs3,Dom:redefine_start1, PostDom:redefine_start2,Map:0:0, Context frame:1,SyncCount:1"];
startup_glowplugs3->redefine_start2[label=localref];
startup_glowplugs3->redefine_start2[label=sync];
}



=== redefine_start1
store visit is after?  store i32* getelementptr inbounds ([4 x i32]* @redefine_in_a, i32 0, i32 0), i32** %0
I was here to add i32* getelementptr inbounds ([4 x i32]* @redefine_in_a, i32 0, i32 0)
I was here to add @redefine_in_a = common global [4 x i32] zeroinitializer, align 4
I was here to add   %0 = alloca i32*, align 4, !ConsumedBy !6
whats in dag after store?SelectionDAG has 6 nodes:
  0x2d31460: i32 = Constant<0>

    0x2d13c48: ch = EntryToken [ORD=2]

    0x2d31260: i32 = GlobalAddress<[4 x i32]* @redefine_in_a> 0 [ORD=1]

    0x2d31360: i32 = FrameIndex<0> [ORD=2]

    0x2d31560: i32 = undef [ORD=2]

  0x2d31660: ch = store 0x2d13c48, 0x2d31260, 0x2d31360, 0x2d31560<ST4[%0]> [ORD=2]


visiting load instruction   %1 = load i32** %0
with I type i32*and sd value :0x2d31360: i32 = FrameIndex<0>
new load?0x2d31760: i32,ch = load 0x2d31660, 0x2d31360, 0x2d31560<LD4[%0]>
dag after load is dealt with?SelectionDAG has 7 nodes:
  0x2d31360: i32 = FrameIndex<0> [ORD=2]

  0x2d31460: i32 = Constant<0>

  0x2d31560: i32 = undef [ORD=2]

      0x2d13c48: ch = EntryToken [ORD=2]

      0x2d31260: i32 = GlobalAddress<[4 x i32]* @redefine_in_a> 0 [ORD=1]

      0x2d31360: <multiple use>
      0x2d31560: <multiple use>
    0x2d31660: ch = store 0x2d13c48, 0x2d31260, 0x2d31360, 0x2d31560<ST4[%0]> [ORD=2]

    0x2d31360: <multiple use>
    0x2d31560: <multiple use>
  0x2d31760: i32,ch = load 0x2d31660, 0x2d31360, 0x2d31560<LD4[%0]>

    0x2d13c48: ch = EntryToken [ORD=2]

    0x2d31260: i32 = GlobalAddress<[4 x i32]* @redefine_in_a> 0 [ORD=1]

    0x2d31360: <multiple use>
    0x2d31560: <multiple use>
  0x2d31660: ch = store 0x2d13c48, 0x2d31260, 0x2d31360, 0x2d31560<ST4[%0]> [ORD=2]


Initial selection DAG: BB#0 'redefine_start1:redefine_start1.entry'
SelectionDAG has 7 nodes:
  0x2d31360: i32 = FrameIndex<0> [ORD=2]

  0x2d31460: i32 = Constant<0>

  0x2d31560: i32 = undef [ORD=2]

      0x2d13c48: ch = EntryToken [ORD=2]

      0x2d31260: i32 = GlobalAddress<[4 x i32]* @redefine_in_a> 0 [ORD=1]

      0x2d31360: <multiple use>
      0x2d31560: <multiple use>
    0x2d31660: ch = store 0x2d13c48, 0x2d31260, 0x2d31360, 0x2d31560<ST4[%0]> [ORD=2]

    0x2d31360: <multiple use>
    0x2d31560: <multiple use>
  0x2d31760: i32,ch = load 0x2d31660, 0x2d31360, 0x2d31560<LD4[%0]> [ORD=3]

    0x2d13c48: ch = EntryToken [ORD=2]

    0x2d31260: i32 = GlobalAddress<[4 x i32]* @redefine_in_a> 0 [ORD=1]

    0x2d31360: <multiple use>
    0x2d31560: <multiple use>
  0x2d31660: ch = store 0x2d13c48, 0x2d31260, 0x2d31360, 0x2d31560<ST4[%0]> [ORD=2]


Optimized lowered selection DAG: BB#0 'redefine_start1:redefine_start1.entry'
SelectionDAG has 5 nodes:
    0x2d13c48: ch = EntryToken [ORD=2]

    0x2d31260: i32 = GlobalAddress<[4 x i32]* @redefine_in_a> 0 [ORD=1]

    0x2d31360: i32 = FrameIndex<0> [ORD=2]

    0x2d31560: i32 = undef [ORD=2]

  0x2d31660: ch = store 0x2d13c48, 0x2d31260, 0x2d31360, 0x2d31560<ST4[%0]> [ORD=2]


Legally typed node: 0x2d31560: i32 = undef [ORD=2] [ID=0]

Legally typed node: 0x2d31360: i32 = FrameIndex<0> [ORD=2] [ID=0]

Legally typed node: 0x2d31260: i32 = GlobalAddress<[4 x i32]* @redefine_in_a> 0 [ORD=1] [ID=0]

Legally typed node: 0x2d13c48: ch = EntryToken [ORD=2] [ID=0]

Legally typed node: 0x2d31660: ch = store 0x2d13c48, 0x2d31260, 0x2d31360, 0x2d31560<ST4[%0]> [ORD=2] [ID=0]

Legally typed node: 0x7fff0c793220: ch = handlenode 0x2d31660 [ID=0]

Type-legalized selection DAG: BB#0 'redefine_start1:redefine_start1.entry'
SelectionDAG has 5 nodes:
    0x2d13c48: ch = EntryToken [ORD=2] [ID=-3]

    0x2d31260: i32 = GlobalAddress<[4 x i32]* @redefine_in_a> 0 [ORD=1] [ID=-3]

    0x2d31360: i32 = FrameIndex<0> [ORD=2] [ID=-3]

    0x2d31560: i32 = undef [ORD=2] [ID=-3]

  0x2d31660: ch = store 0x2d13c48, 0x2d31260, 0x2d31360, 0x2d31560<ST4[%0]> [ORD=2] [ID=-3]


Legalized selection DAG: BB#0 'redefine_start1:redefine_start1.entry'
SelectionDAG has 9 nodes:
    0x2d13c48: ch = EntryToken [ORD=2] [ID=0]

        0x2d31460: i32 = TargetGlobalAddress<[4 x i32]* @redefine_in_a> 0 [TF=2]

      0x2d31860: i32 = REDEFINEISD::Hi 0x2d31460

        0x2d31760: i32 = TargetGlobalAddress<[4 x i32]* @redefine_in_a> 0 [TF=3]

      0x2d31960: i32 = REDEFINEISD::Lo 0x2d31760

    0x2d31a60: i32 = add 0x2d31860, 0x2d31960

    0x2d31360: i32 = FrameIndex<0> [ORD=2] [ID=2]

    0x2d31560: i32 = undef [ORD=2] [ID=3]

  0x2d31660: ch = store 0x2d13c48, 0x2d31a60, 0x2d31360, 0x2d31560<ST4[%0]> [ORD=2] [ID=4]


Optimized legalized selection DAG: BB#0 'redefine_start1:redefine_start1.entry'
SelectionDAG has 9 nodes:
    0x2d13c48: ch = EntryToken [ORD=2] [ID=0]

        0x2d31460: i32 = TargetGlobalAddress<[4 x i32]* @redefine_in_a> 0 [TF=2]

      0x2d31860: i32 = REDEFINEISD::Hi 0x2d31460

        0x2d31760: i32 = TargetGlobalAddress<[4 x i32]* @redefine_in_a> 0 [TF=3]

      0x2d31960: i32 = REDEFINEISD::Lo 0x2d31760

    0x2d31a60: i32 = add 0x2d31860, 0x2d31960

    0x2d31360: i32 = FrameIndex<0> [ORD=2] [ID=2]

    0x2d31560: i32 = undef [ORD=2] [ID=3]

  0x2d31660: ch = store 0x2d13c48, 0x2d31a60, 0x2d31360, 0x2d31560<ST4[%0]> [ORD=2] [ID=4]


===== Instruction selection begins: BB#0 'redefine_start1.entry'
ISEL: Starting pattern match on root node: 0x2d31660: ch = store 0x2d13c48, 0x2d31a60, 0x2d31360, 0x2d31560<ST4[%0]> [ORD=2] [ID=8]

  Morphed node: 0x2d31660: ch = SW 0x2d31a60, 0x2d31360, 0x2d31260, 0x2d13c48<Mem:ST4[%0]> [ORD=2]

ISEL: Match complete!
=> 0x2d31660: ch = SW 0x2d31a60, 0x2d31360, 0x2d31260, 0x2d13c48<Mem:ST4[%0]> [ORD=2]

ISEL: Starting pattern match on root node: 0x2d31a60: i32 = add 0x2d31860, 0x2d31960 [ID=7]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x2d31a60: i32 = ADD 0x2d31960, 0x2d31860

ISEL: Match complete!
=> 0x2d31a60: i32 = ADD 0x2d31960, 0x2d31860

ISEL: Starting pattern match on root node: 0x2d31960: i32 = REDEFINEISD::Lo 0x2d31760 [ID=6]

  Initial Opcode index to 1204
  Morphed node: 0x2d31960: i32 = ADDI 0x2d31560, 0x2d31760

ISEL: Match complete!
=> 0x2d31960: i32 = ADDI 0x2d31560, 0x2d31760

ISEL: Starting pattern match on root node: 0x2d31860: i32 = REDEFINEISD::Hi 0x2d31460 [ID=5]

  Initial Opcode index to 1186
  Morphed node: 0x2d31860: i32 = LUI 0x2d31460

ISEL: Match complete!
=> 0x2d31860: i32 = LUI 0x2d31460

=> 0x2d31760: i32 = TargetGlobalAddress<[4 x i32]* @redefine_in_a> 0 [TF=3]

=> 0x2d31460: i32 = TargetGlobalAddress<[4 x i32]* @redefine_in_a> 0 [TF=2]

=> 0x2d13c48: ch = EntryToken [ORD=2]

===== Instruction selection ends:
Selected selection DAG: BB#0 'redefine_start1:redefine_start1.entry'
SelectionDAG has 12 nodes:
        0x2d31560: i32 = Register %zero

        0x2d31760: i32 = TargetGlobalAddress<[4 x i32]* @redefine_in_a> 0 [TF=3]

      0x2d31960: i32 = ADDI 0x2d31560, 0x2d31760

        0x2d31460: i32 = TargetGlobalAddress<[4 x i32]* @redefine_in_a> 0 [TF=2]

      0x2d31860: i32 = LUI 0x2d31460

    0x2d31a60: i32 = ADD 0x2d31960, 0x2d31860

      0x2d31b60: i32 = Register %t5

      0x2d31c60: i32 = TargetFrameIndex<0>

    0x2d31360: i32 = ADDI 0x2d31b60, 0x2d31c60 [ORD=2]

    0x2d31260: i32 = TargetConstant<0>

    0x2d13c48: ch = EntryToken [ORD=2]

  0x2d31660: ch = SW 0x2d31a60, 0x2d31360, 0x2d31260, 0x2d13c48<Mem:ST4[%0]> [ORD=2]


********** List Scheduling BB#0 'redefine_start1.entry' **********
SU(0): 0x2d31660: ch = SW 0x2d31a60, 0x2d31360, 0x2d31260, 0x2d13c48<Mem:ST4[%0]> [ORD=2] [ID=0]

  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
   val SU(2): Latency=1
   val SU(1): Latency=1

SU(1): 0x2d31360: i32 = ADDI 0x2d31b60, 0x2d31c60 [ORD=2] [ID=1]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
   val SU(0): Latency=1

SU(2): 0x2d31a60: i32 = ADD 0x2d31960, 0x2d31860 [ID=2]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
   val SU(4): Latency=1
   val SU(3): Latency=1
  Successors:
   val SU(0): Latency=1

SU(3): 0x2d31860: i32 = LUI 0x2d31460 [ID=3]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
   val SU(2): Latency=1

SU(4): 0x2d31960: i32 = ADDI 0x2d31560, 0x2d31760 [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
   val SU(2): Latency=1


Examining Available:
Height 0: SU(0): 0x2d31660: ch = SW 0x2d31a60, 0x2d31360, 0x2d31260, 0x2d13c48<Mem:ST4[%0]> [ORD=2] [ID=0]


*** Scheduling [0]: SU(0): 0x2d31660: ch = SW 0x2d31a60, 0x2d31360, 0x2d31260, 0x2d13c48<Mem:ST4[%0]> [ORD=2] [ID=0]


Examining Available:
Height 1: SU(2): 0x2d31a60: i32 = ADD 0x2d31960, 0x2d31860 [ID=2]

Height 1: SU(1): 0x2d31360: i32 = ADDI 0x2d31b60, 0x2d31c60 [ORD=2] [ID=1]


*** Scheduling [1]: SU(2): 0x2d31a60: i32 = ADD 0x2d31960, 0x2d31860 [ID=2]


Examining Available:
Height 2: SU(4): 0x2d31960: i32 = ADDI 0x2d31560, 0x2d31760 [ID=4]

Height 2: SU(3): 0x2d31860: i32 = LUI 0x2d31460 [ID=3]

Height 1: SU(1): 0x2d31360: i32 = ADDI 0x2d31b60, 0x2d31c60 [ORD=2] [ID=1]


*** Scheduling [2]: SU(4): 0x2d31960: i32 = ADDI 0x2d31560, 0x2d31760 [ID=4]


Examining Available:
Height 2: SU(3): 0x2d31860: i32 = LUI 0x2d31460 [ID=3]

Height 1: SU(1): 0x2d31360: i32 = ADDI 0x2d31b60, 0x2d31c60 [ORD=2] [ID=1]


*** Scheduling [3]: SU(3): 0x2d31860: i32 = LUI 0x2d31460 [ID=3]


Examining Available:
Height 1: SU(1): 0x2d31360: i32 = ADDI 0x2d31b60, 0x2d31c60 [ORD=2] [ID=1]


*** Scheduling [4]: SU(1): 0x2d31360: i32 = ADDI 0x2d31b60, 0x2d31c60 [ORD=2] [ID=1]

*** Final schedule ***
SU(1): 0x2d31360: i32 = ADDI 0x2d31b60, 0x2d31c60 [ORD=2] [ID=1]

SU(3): 0x2d31860: i32 = LUI 0x2d31460 [ID=3]

SU(4): 0x2d31960: i32 = ADDI 0x2d31560, 0x2d31760 [ID=4]

SU(2): 0x2d31a60: i32 = ADD 0x2d31960, 0x2d31860 [ID=2]

SU(0): 0x2d31660: ch = SW 0x2d31a60, 0x2d31360, 0x2d31260, 0x2d13c48<Mem:ST4[%0]> [ORD=2] [ID=0]


Total amount of phi nodes to update: 0
Initial selection DAG: BB#1 'redefine_start1:redefine_start1.return'
SelectionDAG has 1 nodes:
  0x2d13c48: ch = EntryToken


Optimized lowered selection DAG: BB#1 'redefine_start1:redefine_start1.return'
SelectionDAG has 1 nodes:
  0x2d13c48: ch = EntryToken


Legally typed node: 0x2d13c48: ch = EntryToken [ID=0]

Legally typed node: 0x7fff0c793220: ch = handlenode 0x2d13c48 [ID=0]

Type-legalized selection DAG: BB#1 'redefine_start1:redefine_start1.return'
SelectionDAG has 1 nodes:
  0x2d13c48: ch = EntryToken [ID=-3]


Legalized selection DAG: BB#1 'redefine_start1:redefine_start1.return'
SelectionDAG has 1 nodes:
  0x2d13c48: ch = EntryToken [ID=0]


Optimized legalized selection DAG: BB#1 'redefine_start1:redefine_start1.return'
SelectionDAG has 1 nodes:
  0x2d13c48: ch = EntryToken [ID=0]


===== Instruction selection begins: BB#1 'redefine_start1.return'
=> 0x2d13c48: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: BB#1 'redefine_start1:redefine_start1.return'
SelectionDAG has 1 nodes:
  0x2d13c48: ch = EntryToken


********** List Scheduling BB#1 'redefine_start1.return' **********
*** Final schedule ***

Total amount of phi nodes to update: 0

*** Tail-duplicating BB#1

Merging into block: BB#0: derived from LLVM BB %redefine_start1.entry
	%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
	%vreg1<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg1
	%vreg2<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg2
	%vreg3<def> = ADD %vreg2<kill>, %vreg1<kill>; GR32Bit:%vreg3,%vreg2,%vreg1
	SW %vreg3<kill>, %vreg0<kill>, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0
    Successors according to CFG: BB#1
From MBB: BB#1: derived from LLVM BB %redefine_start1.return
    Predecessors according to CFG: BB#0

Removing MBB: BB#1: derived from LLVM BB %redefine_start1.return
# Machine code for function redefine_start1: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start1.entry
16B		%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
32B		%vreg1<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg1
48B		%vreg2<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg2
64B		%vreg3<def> = ADD %vreg2<kill>, %vreg1<kill>; GR32Bit:%vreg3,%vreg2,%vreg1
80B		SW %vreg3<kill>, %vreg0<kill>, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0

# End machine code for function redefine_start1.

********** Stack Coloring **********
********** Function: redefine_start1
Found 0 markers and 1 slots
Slot structure:
Slot #0 - 4 bytes.
Total Stack size: 4 bytes

Will not try to merge slots.
Removed 0 markers.
******** Pre-regalloc Machine LICM: redefine_start1 ********
******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: redefine_start1
********** PROCESS IMPLICIT DEFS **********
********** Function: redefine_start1
********** REWRITING TWO-ADDR INSTRS **********
********** Function: redefine_start1
# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start1.entry
16B		%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
32B		%vreg1<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg1
48B		%vreg2<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg2
64B		%vreg3<def> = ADD %vreg2<kill>, %vreg1<kill>; GR32Bit:%vreg3,%vreg2,%vreg1
80B		SW %vreg3<kill>, %vreg0<kill>, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0

# End machine code for function redefine_start1.

Computing live-in reg-units in ABI blocks.
Created 0 new intervals.
********** INTERVALS **********
%vreg0 = [16r,80r:0)  0@16r
%vreg1 = [32r,64r:0)  0@32r
%vreg2 = [48r,64r:0)  0@48r
%vreg3 = [64r,80r:0)  0@64r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start1.entry
16B		%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
32B		%vreg1<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg1
48B		%vreg2<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg2
64B		%vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
80B		SW %vreg3, %vreg0, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0

# End machine code for function redefine_start1.

********** SIMPLE REGISTER COALESCING **********
********** Function: redefine_start1
********** JOINING INTERVALS ***********
redefine_start1.entry:
Trying to inflate 0 regs.
********** INTERVALS **********
%vreg0 = [16r,80r:0)  0@16r
%vreg1 = [32r,64r:0)  0@32r
%vreg2 = [48r,64r:0)  0@48r
%vreg3 = [64r,80r:0)  0@64r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start1.entry
16B		%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
32B		%vreg1<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg1
48B		%vreg2<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg2
64B		%vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
80B		SW %vreg3, %vreg0, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0

# End machine code for function redefine_start1.

Before MISched:
# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %redefine_start1.entry
	%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
	%vreg1<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg1
	%vreg2<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg2
	%vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
	SW %vreg3, %vreg0, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0

# End machine code for function redefine_start1.


-------------
Starting new basic block BB#0
********** MI Scheduling **********
redefine_start1:BB#0 redefine_start1.entry
  From: %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
    To: End Remaining: 0
Max Pressure: GR32Bit=3
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 3
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 0
SU(0):   %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(4): Latency=5 Reg=%vreg0

SU(1):   %vreg1<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
   val SU(3): Latency=5 Reg=%vreg1

SU(2):   %vreg2<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
   val SU(3): Latency=5 Reg=%vreg2

SU(3):   %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg2
   val SU(1): Latency=5 Reg=%vreg1
  Successors:
   val SU(4): Latency=4 Reg=%vreg3

SU(4):   SW %vreg3, %vreg0, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 9
  Height             : 0
  Predecessors:
   val SU(3): Latency=4 Reg=%vreg3
   val SU(0): Latency=5 Reg=%vreg0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(4): Latency=5 Reg=%vreg0

SU(1):   %vreg1<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
   val SU(3): Latency=5 Reg=%vreg1

SU(2):   %vreg2<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
   val SU(3): Latency=5 Reg=%vreg2

SU(3):   %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg2
   val SU(1): Latency=5 Reg=%vreg1
  Successors:
   val SU(4): Latency=4 Reg=%vreg3

SU(4):   SW %vreg3, %vreg0, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 9
  Height             : 0
  Predecessors:
   val SU(3): Latency=4 Reg=%vreg3
   val SU(0): Latency=5 Reg=%vreg0
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(2)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg2<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg2
handleMove 48B -> 8B: %vreg2<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg2
     %vreg2:	[48r,64r:0)  0@48r
        -->	[8r,64r:0)  0@8r
     zero:	EMPTY
        -->	EMPTY
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
Pick node SU(1)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg1<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg1
Pick node SU(3)  ILP: 3 / 6 = 0.5 Tree: 0 @0
Scheduling %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
Pick node SU(4)  ILP: 5 / 10 = 0.5 Tree: 0 @0
Scheduling SW %vreg3, %vreg0, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0
*** Final schedule for BB#0 ***
SU(2):   %vreg2<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg2
SU(0):   %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
SU(1):   %vreg1<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg1
SU(3):   %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
SU(4):   SW %vreg3, %vreg0, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0


*** Renumbered SlotIndexes 4-28 ***

*** Renumbered SlotIndexes 16-56 ***

*** Renumbered SlotIndexes 28-76 ***

*** Renumbered SlotIndexes 40-104 ***

*** Renumbered SlotIndexes 52-116 ***

*** Renumbered SlotIndexes 64-128 ***

*** Renumbered SlotIndexes 76-140 ***

*** Renumbered SlotIndexes 88-152 ***

*** Renumbered SlotIndexes 100-164 ***

*** Renumbered SlotIndexes 112-176 ***

*** Renumbered SlotIndexes 124-188 ***

*** Renumbered SlotIndexes 136-200 ***

*** Renumbered SlotIndexes 148-212 ***

*** Renumbered SlotIndexes 160-224 ***

*** Renumbered SlotIndexes 172-236 ***

*** Renumbered SlotIndexes 184-248 ***

*** Renumbered SlotIndexes 196-260 ***

*** Renumbered SlotIndexes 208-272 ***

*** Renumbered SlotIndexes 220-284 ***

*** Renumbered SlotIndexes 232-296 ***

*** Renumbered SlotIndexes 244-308 ***

*** Renumbered SlotIndexes 256-320 ***

*** Renumbered SlotIndexes 268-332 ***

*** Renumbered SlotIndexes 280-344 ***

*** Renumbered SlotIndexes 292-356 ***

*** Renumbered SlotIndexes 304-368 ***

*** Renumbered SlotIndexes 316-380 ***

*** Renumbered SlotIndexes 328-392 ***

*** Renumbered SlotIndexes 340-404 ***

*** Renumbered SlotIndexes 352-416 ***

*** Renumbered SlotIndexes 364-428 ***

*** Renumbered SlotIndexes 376-440 ***

*** Renumbered SlotIndexes 388-452 ***

*** Renumbered SlotIndexes 400-464 ***
Partitioning instructions of the region into multiple CEs
instr:  %vreg2<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg2
instr:  %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
instr:  %vreg1<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg1
instr:  %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
instr:  SW %vreg3, %vreg0, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
before falloc, state of bb0:BB#0: derived from LLVM BB %redefine_start1.entry
	%vreg4<def> = ADD %t5, %zero; GR32Bit:%vreg4
	%vreg6<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg6
	%vreg7<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg7
	%vreg8<def> = SRLI %vreg7, 12; GR32Bit:%vreg8,%vreg7
	%vreg9<def> = ADD %vreg6, %vreg8; GR32Bit:%vreg9,%vreg6,%vreg8
	%vreg10<def> = ADDI %zero, 16; GR32Bit:%vreg10
	%vreg11<def> = SRLI %t5, 22; GR32Bit:%vreg11
	%vreg12<def> = SRLI %t5, 12; GR32Bit:%vreg12
	%vreg13<def> = ANDI %vreg12, 15; GR32Bit:%vreg13,%vreg12
	%vreg14<def> = SRLI %t5, 6; GR32Bit:%vreg14
	%vreg15<def> = ANDI %vreg14, 63; GR32Bit:%vreg15,%vreg14
	%vreg16<def> = ADDI %zero, 832; GR32Bit:%vreg16
	%vreg17<def> = MUL %vreg11, %vreg16; GR32Bit:%vreg17,%vreg11,%vreg16
	%vreg18<def> = ADDI %zero, 52; GR32Bit:%vreg18
	%vreg19<def> = MUL %vreg13, %vreg18; GR32Bit:%vreg19,%vreg13,%vreg18
	%vreg20<def> = ADD %vreg19, %vreg15; GR32Bit:%vreg20,%vreg19,%vreg15
	%vreg21<def> = ADD %vreg20, %vreg17; GR32Bit:%vreg21,%vreg20,%vreg17
	%vreg22<def> = MUL %vreg21, %vreg10; GR32Bit:%vreg22,%vreg21,%vreg10
	%vreg5<def> = ADD %vreg9, %vreg22; GR32Bit:%vreg5,%vreg9,%vreg22
	%vreg2<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg2
	%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
	%vreg1<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg1
	%vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
	SW %vreg3, %vreg0, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0
	%vreg23<def> = ADD %t5, %zero; GR32Bit:%vreg23
	%vreg25<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg25
	%vreg26<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg26
	%vreg27<def> = SRLI %vreg26, 12; GR32Bit:%vreg27,%vreg26
	%vreg28<def> = ADD %vreg25, %vreg27; GR32Bit:%vreg28,%vreg25,%vreg27
	%vreg29<def> = ADDI %zero, 16; GR32Bit:%vreg29
	%vreg30<def> = SRLI %t5, 22; GR32Bit:%vreg30
	%vreg31<def> = SRLI %t5, 12; GR32Bit:%vreg31
	%vreg32<def> = ANDI %vreg31, 15; GR32Bit:%vreg32,%vreg31
	%vreg33<def> = SRLI %t5, 6; GR32Bit:%vreg33
	%vreg34<def> = ANDI %vreg33, 63; GR32Bit:%vreg34,%vreg33
	%vreg35<def> = ADDI %zero, 832; GR32Bit:%vreg35
	%vreg36<def> = MUL %vreg30, %vreg35; GR32Bit:%vreg36,%vreg30,%vreg35
	%vreg37<def> = ADDI %zero, 52; GR32Bit:%vreg37
	%vreg38<def> = MUL %vreg32, %vreg37; GR32Bit:%vreg38,%vreg32,%vreg37
	%vreg39<def> = ADD %vreg38, %vreg34; GR32Bit:%vreg39,%vreg38,%vreg34
	%vreg40<def> = ADD %vreg39, %vreg36; GR32Bit:%vreg40,%vreg39,%vreg36
	%vreg41<def> = MUL %vreg40, %vreg29; GR32Bit:%vreg41,%vreg40,%vreg29
	%vreg24<def> = ADD %vreg28, %vreg41; GR32Bit:%vreg24,%vreg28,%vreg41
	%vreg42<def> = ADD %t5, %zero; GR32Bit:%vreg42
	%vreg44<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg44
	%vreg45<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg45
	%vreg46<def> = SRLI %vreg45, 12; GR32Bit:%vreg46,%vreg45
	%vreg47<def> = ADD %vreg44, %vreg46; GR32Bit:%vreg47,%vreg44,%vreg46
	%vreg48<def> = ADDI %zero, 16; GR32Bit:%vreg48
	%vreg49<def> = SRLI %t5, 22; GR32Bit:%vreg49
	%vreg50<def> = SRLI %t5, 12; GR32Bit:%vreg50
	%vreg51<def> = ANDI %vreg50, 15; GR32Bit:%vreg51,%vreg50
	%vreg52<def> = SRLI %t5, 6; GR32Bit:%vreg52
	%vreg53<def> = ANDI %vreg52, 63; GR32Bit:%vreg53,%vreg52
	%vreg54<def> = ADDI %zero, 832; GR32Bit:%vreg54
	%vreg55<def> = MUL %vreg49, %vreg54; GR32Bit:%vreg55,%vreg49,%vreg54
	%vreg56<def> = ADDI %zero, 52; GR32Bit:%vreg56
	%vreg57<def> = MUL %vreg51, %vreg56; GR32Bit:%vreg57,%vreg51,%vreg56
	%vreg58<def> = ADD %vreg57, %vreg53; GR32Bit:%vreg58,%vreg57,%vreg53
	%vreg59<def> = ADD %vreg58, %vreg55; GR32Bit:%vreg59,%vreg58,%vreg55
	%vreg60<def> = MUL %vreg59, %vreg48; GR32Bit:%vreg60,%vreg59,%vreg48
	%vreg43<def> = ADD %vreg47, %vreg60; GR32Bit:%vreg43,%vreg47,%vreg60
	%vreg61<def> = ADD %t5, %zero; GR32Bit:%vreg61
	%vreg63<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg63
	%vreg64<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg64
	%vreg65<def> = SRLI %vreg64, 12; GR32Bit:%vreg65,%vreg64
	%vreg66<def> = ADD %vreg63, %vreg65; GR32Bit:%vreg66,%vreg63,%vreg65
	%vreg67<def> = ADDI %zero, 16; GR32Bit:%vreg67
	%vreg68<def> = SRLI %t5, 22; GR32Bit:%vreg68
	%vreg69<def> = SRLI %t5, 12; GR32Bit:%vreg69
	%vreg70<def> = ANDI %vreg69, 15; GR32Bit:%vreg70,%vreg69
	%vreg71<def> = SRLI %t5, 6; GR32Bit:%vreg71
	%vreg72<def> = ANDI %vreg71, 63; GR32Bit:%vreg72,%vreg71
	%vreg73<def> = ADDI %zero, 832; GR32Bit:%vreg73
	%vreg74<def> = MUL %vreg68, %vreg73; GR32Bit:%vreg74,%vreg68,%vreg73
	%vreg75<def> = ADDI %zero, 52; GR32Bit:%vreg75
	%vreg76<def> = MUL %vreg70, %vreg75; GR32Bit:%vreg76,%vreg70,%vreg75
	%vreg77<def> = ADD %vreg76, %vreg72; GR32Bit:%vreg77,%vreg76,%vreg72
	%vreg78<def> = ADD %vreg77, %vreg74; GR32Bit:%vreg78,%vreg77,%vreg74
	%vreg79<def> = MUL %vreg78, %vreg67; GR32Bit:%vreg79,%vreg78,%vreg67
	%vreg62<def> = ADD %vreg66, %vreg79; GR32Bit:%vreg62,%vreg66,%vreg79
Adding all fallocs first to avoid stalls due to sequential fallocs and fbinds
Adding writecm(for writing sync count to context frames) and fbind instructions
live end of child is itself
live end of child is itself
Adding localref sw instructions to hyperOp redefine_start1

*** Renumbered SlotIndexes 412-476 ***

*** Renumbered SlotIndexes 424-488 ***

*** Renumbered SlotIndexes 436-500 ***

*** Renumbered SlotIndexes 448-512 ***

*** Renumbered SlotIndexes 460-524 ***

*** Renumbered SlotIndexes 472-536 ***

*** Renumbered SlotIndexes 484-548 ***

*** Renumbered SlotIndexes 496-560 ***

*** Renumbered SlotIndexes 508-572 ***
localref sw to startup_glowplugs3:  SW %vreg100, %vreg99, 12; GR32Bit:%vreg100,%vreg99
Adding writecm instructions to hyperOp redefine_start1
Adding writecmp and sync instructions
problem with which child exactly?startup_glowplugs3 with edge of type:6

*** Renumbered SlotIndexes 520-584 ***

*** Renumbered SlotIndexes 532-596 ***

*** Renumbered SlotIndexes 544-608 ***
Adding endHyperOp instructions to each pHyperOp

*** Renumbered SlotIndexes 556-620 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 568-632 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 580-644 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 592-656 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 604-668 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 616-680 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0
After Shuffling regions of basic block, state of BB#0:
BB#0: derived from LLVM BB %redefine_start1.entry
	%vreg4<def> = ADD %t5, %zero; GR32Bit:%vreg4
	%vreg6<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg6
	%vreg7<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg7
	%vreg8<def> = SRLI %vreg7, 12; GR32Bit:%vreg8,%vreg7
	%vreg9<def> = ADD %vreg6, %vreg8; GR32Bit:%vreg9,%vreg6,%vreg8
	%vreg10<def> = ADDI %zero, 16; GR32Bit:%vreg10
	%vreg11<def> = SRLI %t5, 22; GR32Bit:%vreg11
	%vreg12<def> = SRLI %t5, 12; GR32Bit:%vreg12
	%vreg13<def> = ANDI %vreg12, 15; GR32Bit:%vreg13,%vreg12
	%vreg14<def> = SRLI %t5, 6; GR32Bit:%vreg14
	%vreg15<def> = ANDI %vreg14, 63; GR32Bit:%vreg15,%vreg14
	%vreg16<def> = ADDI %zero, 832; GR32Bit:%vreg16
	%vreg17<def> = MUL %vreg11, %vreg16; GR32Bit:%vreg17,%vreg11,%vreg16
	%vreg18<def> = ADDI %zero, 52; GR32Bit:%vreg18
	%vreg19<def> = MUL %vreg13, %vreg18; GR32Bit:%vreg19,%vreg13,%vreg18
	%vreg20<def> = ADD %vreg19, %vreg15; GR32Bit:%vreg20,%vreg19,%vreg15
	%vreg21<def> = ADD %vreg20, %vreg17; GR32Bit:%vreg21,%vreg20,%vreg17
	%vreg22<def> = MUL %vreg21, %vreg10; GR32Bit:%vreg22,%vreg21,%vreg10
	%vreg5<def> = ADD %vreg9, %vreg22; GR32Bit:%vreg5,%vreg9,%vreg22
	%vreg2<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg2
	%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
	%vreg1<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg1
	%vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
	SW %vreg3, %vreg0, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0
	%vreg80<def> = ADDI %zero, 64; GR32Bit:%vreg80
	%vreg81<def> = ADDI %zero, 1; GR32Bit:%vreg81
	WRITECM %vreg80, %vreg81, 60; GR32Bit:%vreg80,%vreg81
	%vreg82<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg82
	%vreg83<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg83
	%vreg84<def> = SRLI %vreg83, 12; GR32Bit:%vreg84,%vreg83
	%vreg85<def> = ADD %vreg82, %vreg84; GR32Bit:%vreg85,%vreg82,%vreg84
	%vreg86<def> = ADDI %zero, 16; GR32Bit:%vreg86
	%vreg87<def> = SRLI %vreg80, 22; GR32Bit:%vreg87,%vreg80
	%vreg88<def> = SRLI %vreg80, 12; GR32Bit:%vreg88,%vreg80
	%vreg89<def> = ANDI %vreg88, 15; GR32Bit:%vreg89,%vreg88
	%vreg90<def> = SRLI %vreg80, 6; GR32Bit:%vreg90,%vreg80
	%vreg91<def> = ANDI %vreg90, 63; GR32Bit:%vreg91,%vreg90
	%vreg92<def> = ADDI %zero, 832; GR32Bit:%vreg92
	%vreg93<def> = MUL %vreg87, %vreg92; GR32Bit:%vreg93,%vreg87,%vreg92
	%vreg94<def> = ADDI %zero, 52; GR32Bit:%vreg94
	%vreg95<def> = MUL %vreg89, %vreg94; GR32Bit:%vreg95,%vreg89,%vreg94
	%vreg96<def> = ADD %vreg95, %vreg91; GR32Bit:%vreg96,%vreg95,%vreg91
	%vreg97<def> = ADD %vreg96, %vreg93; GR32Bit:%vreg97,%vreg96,%vreg93
	%vreg98<def> = MUL %vreg97, %vreg86; GR32Bit:%vreg98,%vreg97,%vreg86
	%vreg99<def> = ADD %vreg98, %vreg85; GR32Bit:%vreg99,%vreg98,%vreg85
	%vreg100<def> = LW %t5, 0; GR32Bit:%vreg100
	SW %vreg100, %vreg99, 12; GR32Bit:%vreg100,%vreg99
	%vreg101<def> = LUI 1; GR32Bit:%vreg101
	WRITEPM %vreg101, %vreg80, 0; GR32Bit:%vreg101,%vreg80
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg23<def> = ADD %t5, %zero; GR32Bit:%vreg23
	%vreg25<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg25
	%vreg26<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg26
	%vreg27<def> = SRLI %vreg26, 12; GR32Bit:%vreg27,%vreg26
	%vreg28<def> = ADD %vreg25, %vreg27; GR32Bit:%vreg28,%vreg25,%vreg27
	%vreg29<def> = ADDI %zero, 16; GR32Bit:%vreg29
	%vreg30<def> = SRLI %t5, 22; GR32Bit:%vreg30
	%vreg31<def> = SRLI %t5, 12; GR32Bit:%vreg31
	%vreg32<def> = ANDI %vreg31, 15; GR32Bit:%vreg32,%vreg31
	%vreg33<def> = SRLI %t5, 6; GR32Bit:%vreg33
	%vreg34<def> = ANDI %vreg33, 63; GR32Bit:%vreg34,%vreg33
	%vreg35<def> = ADDI %zero, 832; GR32Bit:%vreg35
	%vreg36<def> = MUL %vreg30, %vreg35; GR32Bit:%vreg36,%vreg30,%vreg35
	%vreg37<def> = ADDI %zero, 52; GR32Bit:%vreg37
	%vreg38<def> = MUL %vreg32, %vreg37; GR32Bit:%vreg38,%vreg32,%vreg37
	%vreg39<def> = ADD %vreg38, %vreg34; GR32Bit:%vreg39,%vreg38,%vreg34
	%vreg40<def> = ADD %vreg39, %vreg36; GR32Bit:%vreg40,%vreg39,%vreg36
	%vreg41<def> = MUL %vreg40, %vreg29; GR32Bit:%vreg41,%vreg40,%vreg29
	%vreg24<def> = ADD %vreg28, %vreg41; GR32Bit:%vreg24,%vreg28,%vreg41
	%vreg102<def> = LUI 1; GR32Bit:%vreg102
	%vreg103<def> = DREADPM %vreg102, 0; GR32Bit:%vreg103,%vreg102
	%vreg104<def> = ADDI %zero, -1; GR32Bit:%vreg104
	SYNC %vreg103, %vreg104, 60; GR32Bit:%vreg103,%vreg104
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg42<def> = ADD %t5, %zero; GR32Bit:%vreg42
	%vreg44<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg44
	%vreg45<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg45
	%vreg46<def> = SRLI %vreg45, 12; GR32Bit:%vreg46,%vreg45
	%vreg47<def> = ADD %vreg44, %vreg46; GR32Bit:%vreg47,%vreg44,%vreg46
	%vreg48<def> = ADDI %zero, 16; GR32Bit:%vreg48
	%vreg49<def> = SRLI %t5, 22; GR32Bit:%vreg49
	%vreg50<def> = SRLI %t5, 12; GR32Bit:%vreg50
	%vreg51<def> = ANDI %vreg50, 15; GR32Bit:%vreg51,%vreg50
	%vreg52<def> = SRLI %t5, 6; GR32Bit:%vreg52
	%vreg53<def> = ANDI %vreg52, 63; GR32Bit:%vreg53,%vreg52
	%vreg54<def> = ADDI %zero, 832; GR32Bit:%vreg54
	%vreg55<def> = MUL %vreg49, %vreg54; GR32Bit:%vreg55,%vreg49,%vreg54
	%vreg56<def> = ADDI %zero, 52; GR32Bit:%vreg56
	%vreg57<def> = MUL %vreg51, %vreg56; GR32Bit:%vreg57,%vreg51,%vreg56
	%vreg58<def> = ADD %vreg57, %vreg53; GR32Bit:%vreg58,%vreg57,%vreg53
	%vreg59<def> = ADD %vreg58, %vreg55; GR32Bit:%vreg59,%vreg58,%vreg55
	%vreg60<def> = MUL %vreg59, %vreg48; GR32Bit:%vreg60,%vreg59,%vreg48
	%vreg43<def> = ADD %vreg47, %vreg60; GR32Bit:%vreg43,%vreg47,%vreg60
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg61<def> = ADD %t5, %zero; GR32Bit:%vreg61
	%vreg63<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg63
	%vreg64<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg64
	%vreg65<def> = SRLI %vreg64, 12; GR32Bit:%vreg65,%vreg64
	%vreg66<def> = ADD %vreg63, %vreg65; GR32Bit:%vreg66,%vreg63,%vreg65
	%vreg67<def> = ADDI %zero, 16; GR32Bit:%vreg67
	%vreg68<def> = SRLI %t5, 22; GR32Bit:%vreg68
	%vreg69<def> = SRLI %t5, 12; GR32Bit:%vreg69
	%vreg70<def> = ANDI %vreg69, 15; GR32Bit:%vreg70,%vreg69
	%vreg71<def> = SRLI %t5, 6; GR32Bit:%vreg71
	%vreg72<def> = ANDI %vreg71, 63; GR32Bit:%vreg72,%vreg71
	%vreg73<def> = ADDI %zero, 832; GR32Bit:%vreg73
	%vreg74<def> = MUL %vreg68, %vreg73; GR32Bit:%vreg74,%vreg68,%vreg73
	%vreg75<def> = ADDI %zero, 52; GR32Bit:%vreg75
	%vreg76<def> = MUL %vreg70, %vreg75; GR32Bit:%vreg76,%vreg70,%vreg75
	%vreg77<def> = ADD %vreg76, %vreg72; GR32Bit:%vreg77,%vreg76,%vreg72
	%vreg78<def> = ADD %vreg77, %vreg74; GR32Bit:%vreg78,%vreg77,%vreg74
	%vreg79<def> = MUL %vreg78, %vreg67; GR32Bit:%vreg79,%vreg78,%vreg67
	%vreg62<def> = ADD %vreg66, %vreg79; GR32Bit:%vreg62,%vreg66,%vreg79
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 316-804 ***

*** Renumbered SlotIndexes 304-824 ***

*** Renumbered SlotIndexes 216-872 ***

*** Renumbered SlotIndexes 204-892 ***

*** Renumbered SlotIndexes 204-908 ***

*** Renumbered SlotIndexes 204-924 ***

*** Renumbered SlotIndexes 204-940 ***

*** Renumbered SlotIndexes 112-984 ***

*** Renumbered SlotIndexes 100-1004 ***

*** Renumbered SlotIndexes 100-1020 ***

*** Renumbered SlotIndexes 100-1036 ***

*** Renumbered SlotIndexes 100-1052 ***

*** Renumbered SlotIndexes 100-1068 ***

*** Renumbered SlotIndexes 100-1084 ***

*** Renumbered SlotIndexes 100-1100 ***

*** Renumbered SlotIndexes 100-1116 ***

*** Renumbered SlotIndexes 100-1132 ***

*** Renumbered SlotIndexes 100-1148 ***

*** Renumbered SlotIndexes 100-1164 ***

*** Renumbered SlotIndexes 100-1180 ***

*** Renumbered SlotIndexes 100-1196 ***

*** Renumbered SlotIndexes 100-1212 ***

*** Renumbered SlotIndexes 100-1228 ***

*** Renumbered SlotIndexes 100-1244 ***

*** Renumbered SlotIndexes 12-1292 ***
Creating pHyperOp bundles for CEs for bb0
  %vreg23<def> = ADD %t5, %zero; GR32Bit:%vreg23
starting at   %vreg4<def> = ADD %t5, %zero; GR32Bit:%vreg4
  %vreg42<def> = ADD %t5, %zero; GR32Bit:%vreg42
starting at   %vreg23<def> = ADD %t5, %zero; GR32Bit:%vreg23
  %vreg61<def> = ADD %t5, %zero; GR32Bit:%vreg61
starting at   %vreg42<def> = ADD %t5, %zero; GR32Bit:%vreg42
starting at   %vreg61<def> = ADD %t5, %zero; GR32Bit:%vreg61
After bundling, state of BB0:BB#0: derived from LLVM BB %redefine_start1.entry
	%vreg4<def> = ADD %t5, %zero; GR32Bit:%vreg4
	  * %vreg6<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg6
	  * %vreg7<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg7
	  * %vreg8<def> = SRLI %vreg7, 12; GR32Bit:%vreg8,%vreg7
	  * %vreg9<def> = ADD %vreg6, %vreg8; GR32Bit:%vreg9,%vreg6,%vreg8
	  * %vreg10<def> = ADDI %zero, 16; GR32Bit:%vreg10
	  * %vreg11<def> = SRLI %t5, 22; GR32Bit:%vreg11
	  * %vreg12<def> = SRLI %t5, 12; GR32Bit:%vreg12
	  * %vreg13<def> = ANDI %vreg12, 15; GR32Bit:%vreg13,%vreg12
	  * %vreg14<def> = SRLI %t5, 6; GR32Bit:%vreg14
	  * %vreg15<def> = ANDI %vreg14, 63; GR32Bit:%vreg15,%vreg14
	  * %vreg16<def> = ADDI %zero, 832; GR32Bit:%vreg16
	  * %vreg17<def> = MUL %vreg11, %vreg16; GR32Bit:%vreg17,%vreg11,%vreg16
	  * %vreg18<def> = ADDI %zero, 52; GR32Bit:%vreg18
	  * %vreg19<def> = MUL %vreg13, %vreg18; GR32Bit:%vreg19,%vreg13,%vreg18
	  * %vreg20<def> = ADD %vreg19, %vreg15; GR32Bit:%vreg20,%vreg19,%vreg15
	  * %vreg21<def> = ADD %vreg20, %vreg17; GR32Bit:%vreg21,%vreg20,%vreg17
	  * %vreg22<def> = MUL %vreg21, %vreg10; GR32Bit:%vreg22,%vreg21,%vreg10
	  * %vreg5<def> = ADD %vreg9, %vreg22; GR32Bit:%vreg5,%vreg9,%vreg22
	  * %vreg2<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg2
	  * %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
	  * %vreg1<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg1
	  * %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
	  * SW %vreg3, %vreg0, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0
	  * %vreg80<def> = ADDI %zero, 64; GR32Bit:%vreg80
	  * %vreg81<def> = ADDI %zero, 1; GR32Bit:%vreg81
	  * WRITECM %vreg80, %vreg81, 60; GR32Bit:%vreg80,%vreg81
	  * %vreg82<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg82
	  * %vreg83<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg83
	  * %vreg84<def> = SRLI %vreg83, 12; GR32Bit:%vreg84,%vreg83
	  * %vreg85<def> = ADD %vreg82, %vreg84; GR32Bit:%vreg85,%vreg82,%vreg84
	  * %vreg86<def> = ADDI %zero, 16; GR32Bit:%vreg86
	  * %vreg87<def> = SRLI %vreg80, 22; GR32Bit:%vreg87,%vreg80
	  * %vreg88<def> = SRLI %vreg80, 12; GR32Bit:%vreg88,%vreg80
	  * %vreg89<def> = ANDI %vreg88, 15; GR32Bit:%vreg89,%vreg88
	  * %vreg90<def> = SRLI %vreg80, 6; GR32Bit:%vreg90,%vreg80
	  * %vreg91<def> = ANDI %vreg90, 63; GR32Bit:%vreg91,%vreg90
	  * %vreg92<def> = ADDI %zero, 832; GR32Bit:%vreg92
	  * %vreg93<def> = MUL %vreg87, %vreg92; GR32Bit:%vreg93,%vreg87,%vreg92
	  * %vreg94<def> = ADDI %zero, 52; GR32Bit:%vreg94
	  * %vreg95<def> = MUL %vreg89, %vreg94; GR32Bit:%vreg95,%vreg89,%vreg94
	  * %vreg96<def> = ADD %vreg95, %vreg91; GR32Bit:%vreg96,%vreg95,%vreg91
	  * %vreg97<def> = ADD %vreg96, %vreg93; GR32Bit:%vreg97,%vreg96,%vreg93
	  * %vreg98<def> = MUL %vreg97, %vreg86; GR32Bit:%vreg98,%vreg97,%vreg86
	  * %vreg99<def> = ADD %vreg98, %vreg85; GR32Bit:%vreg99,%vreg98,%vreg85
	  * %vreg100<def> = LW %t5, 0; GR32Bit:%vreg100
	  * SW %vreg100, %vreg99, 12; GR32Bit:%vreg100,%vreg99
	  * %vreg101<def> = LUI 1; GR32Bit:%vreg101
	  * WRITEPM %vreg101, %vreg80, 0; GR32Bit:%vreg101,%vreg80
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg23<def> = ADD %t5, %zero; GR32Bit:%vreg23
	  * %vreg25<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg25
	  * %vreg26<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg26
	  * %vreg27<def> = SRLI %vreg26, 12; GR32Bit:%vreg27,%vreg26
	  * %vreg28<def> = ADD %vreg25, %vreg27; GR32Bit:%vreg28,%vreg25,%vreg27
	  * %vreg29<def> = ADDI %zero, 16; GR32Bit:%vreg29
	  * %vreg30<def> = SRLI %t5, 22; GR32Bit:%vreg30
	  * %vreg31<def> = SRLI %t5, 12; GR32Bit:%vreg31
	  * %vreg32<def> = ANDI %vreg31, 15; GR32Bit:%vreg32,%vreg31
	  * %vreg33<def> = SRLI %t5, 6; GR32Bit:%vreg33
	  * %vreg34<def> = ANDI %vreg33, 63; GR32Bit:%vreg34,%vreg33
	  * %vreg35<def> = ADDI %zero, 832; GR32Bit:%vreg35
	  * %vreg36<def> = MUL %vreg30, %vreg35; GR32Bit:%vreg36,%vreg30,%vreg35
	  * %vreg37<def> = ADDI %zero, 52; GR32Bit:%vreg37
	  * %vreg38<def> = MUL %vreg32, %vreg37; GR32Bit:%vreg38,%vreg32,%vreg37
	  * %vreg39<def> = ADD %vreg38, %vreg34; GR32Bit:%vreg39,%vreg38,%vreg34
	  * %vreg40<def> = ADD %vreg39, %vreg36; GR32Bit:%vreg40,%vreg39,%vreg36
	  * %vreg41<def> = MUL %vreg40, %vreg29; GR32Bit:%vreg41,%vreg40,%vreg29
	  * %vreg24<def> = ADD %vreg28, %vreg41; GR32Bit:%vreg24,%vreg28,%vreg41
	  * %vreg102<def> = LUI 1; GR32Bit:%vreg102
	  * %vreg103<def> = DREADPM %vreg102, 0; GR32Bit:%vreg103,%vreg102
	  * %vreg104<def> = ADDI %zero, -1; GR32Bit:%vreg104
	  * SYNC %vreg103, %vreg104, 60; GR32Bit:%vreg103,%vreg104
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg42<def> = ADD %t5, %zero; GR32Bit:%vreg42
	  * %vreg44<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg44
	  * %vreg45<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg45
	  * %vreg46<def> = SRLI %vreg45, 12; GR32Bit:%vreg46,%vreg45
	  * %vreg47<def> = ADD %vreg44, %vreg46; GR32Bit:%vreg47,%vreg44,%vreg46
	  * %vreg48<def> = ADDI %zero, 16; GR32Bit:%vreg48
	  * %vreg49<def> = SRLI %t5, 22; GR32Bit:%vreg49
	  * %vreg50<def> = SRLI %t5, 12; GR32Bit:%vreg50
	  * %vreg51<def> = ANDI %vreg50, 15; GR32Bit:%vreg51,%vreg50
	  * %vreg52<def> = SRLI %t5, 6; GR32Bit:%vreg52
	  * %vreg53<def> = ANDI %vreg52, 63; GR32Bit:%vreg53,%vreg52
	  * %vreg54<def> = ADDI %zero, 832; GR32Bit:%vreg54
	  * %vreg55<def> = MUL %vreg49, %vreg54; GR32Bit:%vreg55,%vreg49,%vreg54
	  * %vreg56<def> = ADDI %zero, 52; GR32Bit:%vreg56
	  * %vreg57<def> = MUL %vreg51, %vreg56; GR32Bit:%vreg57,%vreg51,%vreg56
	  * %vreg58<def> = ADD %vreg57, %vreg53; GR32Bit:%vreg58,%vreg57,%vreg53
	  * %vreg59<def> = ADD %vreg58, %vreg55; GR32Bit:%vreg59,%vreg58,%vreg55
	  * %vreg60<def> = MUL %vreg59, %vreg48; GR32Bit:%vreg60,%vreg59,%vreg48
	  * %vreg43<def> = ADD %vreg47, %vreg60; GR32Bit:%vreg43,%vreg47,%vreg60
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg61<def> = ADD %t5, %zero; GR32Bit:%vreg61
	  * %vreg63<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg63
	  * %vreg64<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg64
	  * %vreg65<def> = SRLI %vreg64, 12; GR32Bit:%vreg65,%vreg64
	  * %vreg66<def> = ADD %vreg63, %vreg65; GR32Bit:%vreg66,%vreg63,%vreg65
	  * %vreg67<def> = ADDI %zero, 16; GR32Bit:%vreg67
	  * %vreg68<def> = SRLI %t5, 22; GR32Bit:%vreg68
	  * %vreg69<def> = SRLI %t5, 12; GR32Bit:%vreg69
	  * %vreg70<def> = ANDI %vreg69, 15; GR32Bit:%vreg70,%vreg69
	  * %vreg71<def> = SRLI %t5, 6; GR32Bit:%vreg71
	  * %vreg72<def> = ANDI %vreg71, 63; GR32Bit:%vreg72,%vreg71
	  * %vreg73<def> = ADDI %zero, 832; GR32Bit:%vreg73
	  * %vreg74<def> = MUL %vreg68, %vreg73; GR32Bit:%vreg74,%vreg68,%vreg73
	  * %vreg75<def> = ADDI %zero, 52; GR32Bit:%vreg75
	  * %vreg76<def> = MUL %vreg70, %vreg75; GR32Bit:%vreg76,%vreg70,%vreg75
	  * %vreg77<def> = ADD %vreg76, %vreg72; GR32Bit:%vreg77,%vreg76,%vreg72
	  * %vreg78<def> = ADD %vreg77, %vreg74; GR32Bit:%vreg78,%vreg77,%vreg74
	  * %vreg79<def> = MUL %vreg78, %vreg67; GR32Bit:%vreg79,%vreg78,%vreg67
	  * %vreg62<def> = ADD %vreg66, %vreg79; GR32Bit:%vreg62,%vreg66,%vreg79
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
Patching the instructions that are supposed to use the physical registers r30 and r31
Computing live-in reg-units in ABI blocks.
Created 0 new intervals.

*** Renumbered SlotIndexes 8-1312 ***

*** Renumbered SlotIndexes 172-1324 ***
********** INTERVALS **********
zero = EMPTY
%vreg0 = [188r,212r:0)  0@188r
%vreg1 = [196r,204r:0)  0@196r
%vreg2 = [168r,204r:0)  0@168r
%vreg3 = [204r,212r:0)  0@204r
%vreg4 = [4r,4d:0)  0@4r
%vreg5 = [160r,160d:0)  0@160r
%vreg6 = [24r,48r:0)  0@24r
%vreg7 = [32r,40r:0)  0@32r
%vreg8 = [40r,48r:0)  0@40r
%vreg9 = [48r,160r:0)  0@48r
%vreg10 = [56r,152r:0)  0@56r
%vreg11 = [64r,112r:0)  0@64r
%vreg12 = [72r,80r:0)  0@72r
%vreg13 = [80r,128r:0)  0@80r
%vreg14 = [88r,96r:0)  0@88r
%vreg15 = [96r,136r:0)  0@96r
%vreg16 = [104r,112r:0)  0@104r
%vreg17 = [112r,144r:0)  0@112r
%vreg18 = [120r,128r:0)  0@120r
%vreg19 = [128r,136r:0)  0@128r
%vreg20 = [136r,144r:0)  0@136r
%vreg21 = [144r,152r:0)  0@144r
%vreg22 = [152r,160r:0)  0@152r
%vreg23 = [444r,444d:0)  0@444r
%vreg24 = [588r,588d:0)  0@588r
%vreg25 = [452r,476r:0)  0@452r
%vreg26 = [460r,468r:0)  0@460r
%vreg27 = [468r,476r:0)  0@468r
%vreg28 = [476r,588r:0)  0@476r
%vreg29 = [484r,580r:0)  0@484r
%vreg30 = [492r,540r:0)  0@492r
%vreg31 = [500r,508r:0)  0@500r
%vreg32 = [508r,556r:0)  0@508r
%vreg33 = [516r,524r:0)  0@516r
%vreg34 = [524r,564r:0)  0@524r
%vreg35 = [532r,540r:0)  0@532r
%vreg36 = [540r,572r:0)  0@540r
%vreg37 = [548r,556r:0)  0@548r
%vreg38 = [556r,564r:0)  0@556r
%vreg39 = [564r,572r:0)  0@564r
%vreg40 = [572r,580r:0)  0@572r
%vreg41 = [580r,588r:0)  0@580r
%vreg42 = [652r,652d:0)  0@652r
%vreg43 = [796r,796d:0)  0@796r
%vreg44 = [660r,684r:0)  0@660r
%vreg45 = [668r,676r:0)  0@668r
%vreg46 = [676r,684r:0)  0@676r
%vreg47 = [684r,796r:0)  0@684r
%vreg48 = [692r,788r:0)  0@692r
%vreg49 = [700r,748r:0)  0@700r
%vreg50 = [708r,716r:0)  0@708r
%vreg51 = [716r,764r:0)  0@716r
%vreg52 = [724r,732r:0)  0@724r
%vreg53 = [732r,772r:0)  0@732r
%vreg54 = [740r,748r:0)  0@740r
%vreg55 = [748r,780r:0)  0@748r
%vreg56 = [756r,764r:0)  0@756r
%vreg57 = [764r,772r:0)  0@764r
%vreg58 = [772r,780r:0)  0@772r
%vreg59 = [780r,788r:0)  0@780r
%vreg60 = [788r,796r:0)  0@788r
%vreg61 = [828r,828d:0)  0@828r
%vreg62 = [972r,972d:0)  0@972r
%vreg63 = [836r,860r:0)  0@836r
%vreg64 = [844r,852r:0)  0@844r
%vreg65 = [852r,860r:0)  0@852r
%vreg66 = [860r,972r:0)  0@860r
%vreg67 = [868r,964r:0)  0@868r
%vreg68 = [876r,924r:0)  0@876r
%vreg69 = [884r,892r:0)  0@884r
%vreg70 = [892r,940r:0)  0@892r
%vreg71 = [900r,908r:0)  0@900r
%vreg72 = [908r,948r:0)  0@908r
%vreg73 = [916r,924r:0)  0@916r
%vreg74 = [924r,956r:0)  0@924r
%vreg75 = [932r,940r:0)  0@932r
%vreg76 = [940r,948r:0)  0@940r
%vreg77 = [948r,956r:0)  0@948r
%vreg78 = [956r,964r:0)  0@956r
%vreg79 = [964r,972r:0)  0@964r
%vreg80 = [220r,412r:0)  0@220r
%vreg81 = [228r,236r:0)  0@228r
%vreg82 = [244r,268r:0)  0@244r
%vreg83 = [252r,260r:0)  0@252r
%vreg84 = [260r,268r:0)  0@260r
%vreg85 = [268r,380r:0)  0@268r
%vreg86 = [276r,372r:0)  0@276r
%vreg87 = [284r,332r:0)  0@284r
%vreg88 = [292r,300r:0)  0@292r
%vreg89 = [300r,348r:0)  0@300r
%vreg90 = [308r,316r:0)  0@308r
%vreg91 = [316r,356r:0)  0@316r
%vreg92 = [324r,332r:0)  0@324r
%vreg93 = [332r,364r:0)  0@332r
%vreg94 = [340r,348r:0)  0@340r
%vreg95 = [348r,356r:0)  0@348r
%vreg96 = [356r,364r:0)  0@356r
%vreg97 = [364r,372r:0)  0@364r
%vreg98 = [372r,380r:0)  0@372r
%vreg99 = [380r,396r:0)  0@380r
%vreg100 = [388r,396r:0)  0@388r
%vreg101 = [404r,412r:0)  0@404r
%vreg102 = [596r,604r:0)  0@596r
%vreg103 = [604r,1324B:0)  0@604r
%vreg104 = [612r,620r:0)  0@612r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start1.entry
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg6<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg6
4B		  * %vreg7<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg7
4B		  * %vreg8<def> = SRLI %vreg7, 12; GR32Bit:%vreg8,%vreg7
4B		  * %vreg9<def> = ADD %vreg6, %vreg8; GR32Bit:%vreg9,%vreg6,%vreg8
4B		  * %vreg10<def> = ADDI %zero, 16; GR32Bit:%vreg10
4B		  * %vreg11<def> = SRLI %t5, 22; GR32Bit:%vreg11
4B		  * %vreg12<def> = SRLI %t5, 12; GR32Bit:%vreg12
4B		  * %vreg13<def> = ANDI %vreg12, 15; GR32Bit:%vreg13,%vreg12
4B		  * %vreg14<def> = SRLI %t5, 6; GR32Bit:%vreg14
4B		  * %vreg15<def> = ANDI %vreg14, 63; GR32Bit:%vreg15,%vreg14
4B		  * %vreg16<def> = ADDI %zero, 832; GR32Bit:%vreg16
4B		  * %vreg17<def> = MUL %vreg11, %vreg16; GR32Bit:%vreg17,%vreg11,%vreg16
4B		  * %vreg18<def> = ADDI %zero, 52; GR32Bit:%vreg18
4B		  * %vreg19<def> = MUL %vreg13, %vreg18; GR32Bit:%vreg19,%vreg13,%vreg18
4B		  * %vreg20<def> = ADD %vreg19, %vreg15; GR32Bit:%vreg20,%vreg19,%vreg15
4B		  * %vreg21<def> = ADD %vreg20, %vreg17; GR32Bit:%vreg21,%vreg20,%vreg17
4B		  * %vreg22<def> = MUL %vreg21, %vreg10; GR32Bit:%vreg22,%vreg21,%vreg10
4B		  * %t5<def> = ADD %vreg9, %vreg22; GR32Bit:%vreg9,%vreg22
4B		  * %vreg2<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg2
4B		  * SRLI %vreg2, %vreg2, 12; GR32Bit:%vreg2
4B		  * %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
4B		  * %vreg1<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg1
4B		  * %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
4B		  * SW %vreg3, %vreg0, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0
4B		  * %vreg80<def> = ADDI %zero, 64; GR32Bit:%vreg80
4B		  * %vreg81<def> = ADDI %zero, 1; GR32Bit:%vreg81
4B		  * WRITECM %vreg80, %vreg81, 60; GR32Bit:%vreg80,%vreg81
4B		  * %vreg82<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg82
4B		  * %vreg83<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg83
4B		  * %vreg84<def> = SRLI %vreg83, 12; GR32Bit:%vreg84,%vreg83
4B		  * %vreg85<def> = ADD %vreg82, %vreg84; GR32Bit:%vreg85,%vreg82,%vreg84
4B		  * %vreg86<def> = ADDI %zero, 16; GR32Bit:%vreg86
4B		  * %vreg87<def> = SRLI %vreg80, 22; GR32Bit:%vreg87,%vreg80
4B		  * %vreg88<def> = SRLI %vreg80, 12; GR32Bit:%vreg88,%vreg80
4B		  * %vreg89<def> = ANDI %vreg88, 15; GR32Bit:%vreg89,%vreg88
4B		  * %vreg90<def> = SRLI %vreg80, 6; GR32Bit:%vreg90,%vreg80
4B		  * %vreg91<def> = ANDI %vreg90, 63; GR32Bit:%vreg91,%vreg90
4B		  * %vreg92<def> = ADDI %zero, 832; GR32Bit:%vreg92
4B		  * %vreg93<def> = MUL %vreg87, %vreg92; GR32Bit:%vreg93,%vreg87,%vreg92
4B		  * %vreg94<def> = ADDI %zero, 52; GR32Bit:%vreg94
4B		  * %vreg95<def> = MUL %vreg89, %vreg94; GR32Bit:%vreg95,%vreg89,%vreg94
4B		  * %vreg96<def> = ADD %vreg95, %vreg91; GR32Bit:%vreg96,%vreg95,%vreg91
4B		  * %vreg97<def> = ADD %vreg96, %vreg93; GR32Bit:%vreg97,%vreg96,%vreg93
4B		  * %vreg98<def> = MUL %vreg97, %vreg86; GR32Bit:%vreg98,%vreg97,%vreg86
4B		  * %vreg99<def> = ADD %vreg98, %vreg85; GR32Bit:%vreg99,%vreg98,%vreg85
4B		  * %vreg100<def> = LW %t5, 0; GR32Bit:%vreg100
4B		  * SW %vreg100, %vreg99, 12; GR32Bit:%vreg100,%vreg99
4B		  * %vreg101<def> = LUI 1; GR32Bit:%vreg101
4B		  * WRITEPM %vreg101, %vreg80, 0; GR32Bit:%vreg101,%vreg80
4B		  * END 0
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
444B		%t4<def> = ADD %t5, %zero
444B		  * %vreg25<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg25
444B		  * %vreg26<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg26
444B		  * %vreg27<def> = SRLI %vreg26, 12; GR32Bit:%vreg27,%vreg26
444B		  * %vreg28<def> = ADD %vreg25, %vreg27; GR32Bit:%vreg28,%vreg25,%vreg27
444B		  * %vreg29<def> = ADDI %zero, 16; GR32Bit:%vreg29
444B		  * %vreg30<def> = SRLI %t5, 22; GR32Bit:%vreg30
444B		  * %vreg31<def> = SRLI %t5, 12; GR32Bit:%vreg31
444B		  * %vreg32<def> = ANDI %vreg31, 15; GR32Bit:%vreg32,%vreg31
444B		  * %vreg33<def> = SRLI %t5, 6; GR32Bit:%vreg33
444B		  * %vreg34<def> = ANDI %vreg33, 63; GR32Bit:%vreg34,%vreg33
444B		  * %vreg35<def> = ADDI %zero, 832; GR32Bit:%vreg35
444B		  * %vreg36<def> = MUL %vreg30, %vreg35; GR32Bit:%vreg36,%vreg30,%vreg35
444B		  * %vreg37<def> = ADDI %zero, 52; GR32Bit:%vreg37
444B		  * %vreg38<def> = MUL %vreg32, %vreg37; GR32Bit:%vreg38,%vreg32,%vreg37
444B		  * %vreg39<def> = ADD %vreg38, %vreg34; GR32Bit:%vreg39,%vreg38,%vreg34
444B		  * %vreg40<def> = ADD %vreg39, %vreg36; GR32Bit:%vreg40,%vreg39,%vreg36
444B		  * %vreg41<def> = MUL %vreg40, %vreg29; GR32Bit:%vreg41,%vreg40,%vreg29
444B		  * %t5<def> = ADD %vreg28, %vreg41; GR32Bit:%vreg28,%vreg41
444B		  * %vreg102<def> = LUI 1; GR32Bit:%vreg102
444B		  * %vreg103<def> = DREADPM %vreg102, 0; GR32Bit:%vreg103,%vreg102
444B		  * %vreg104<def> = LUI 1048575; GR32Bit:%vreg104
444B		  * %a5<def> = LUI 4095
444B		  * %a5<def> = SRLI %a5<internal>, 12
444B		  * ADD %vreg104, %vreg104, %a5; GR32Bit:%vreg104
444B		  * SYNC %vreg103, %vreg104, 60; GR32Bit:%vreg103,%vreg104
444B		  * END 0
444B		  * %zero<def> = ADDI %zero, 0
444B		  * %zero<def> = ADDI %zero, 0
652B		%t4<def> = ADD %t5, %zero
652B		  * %vreg44<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg44
652B		  * %vreg45<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg45
652B		  * %vreg46<def> = SRLI %vreg45, 12; GR32Bit:%vreg46,%vreg45
652B		  * %vreg47<def> = ADD %vreg44, %vreg46; GR32Bit:%vreg47,%vreg44,%vreg46
652B		  * %vreg48<def> = ADDI %zero, 16; GR32Bit:%vreg48
652B		  * %vreg49<def> = SRLI %t5, 22; GR32Bit:%vreg49
652B		  * %vreg50<def> = SRLI %t5, 12; GR32Bit:%vreg50
652B		  * %vreg51<def> = ANDI %vreg50, 15; GR32Bit:%vreg51,%vreg50
652B		  * %vreg52<def> = SRLI %t5, 6; GR32Bit:%vreg52
652B		  * %vreg53<def> = ANDI %vreg52, 63; GR32Bit:%vreg53,%vreg52
652B		  * %vreg54<def> = ADDI %zero, 832; GR32Bit:%vreg54
652B		  * %vreg55<def> = MUL %vreg49, %vreg54; GR32Bit:%vreg55,%vreg49,%vreg54
652B		  * %vreg56<def> = ADDI %zero, 52; GR32Bit:%vreg56
652B		  * %vreg57<def> = MUL %vreg51, %vreg56; GR32Bit:%vreg57,%vreg51,%vreg56
652B		  * %vreg58<def> = ADD %vreg57, %vreg53; GR32Bit:%vreg58,%vreg57,%vreg53
652B		  * %vreg59<def> = ADD %vreg58, %vreg55; GR32Bit:%vreg59,%vreg58,%vreg55
652B		  * %vreg60<def> = MUL %vreg59, %vreg48; GR32Bit:%vreg60,%vreg59,%vreg48
652B		  * %t5<def> = ADD %vreg47, %vreg60; GR32Bit:%vreg47,%vreg60
652B		  * END 0
652B		  * %zero<def> = ADDI %zero, 0
652B		  * %zero<def> = ADDI %zero, 0
828B		%t4<def> = ADD %t5, %zero
828B		  * %vreg63<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg63
828B		  * %vreg64<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg64
828B		  * %vreg65<def> = SRLI %vreg64, 12; GR32Bit:%vreg65,%vreg64
828B		  * %vreg66<def> = ADD %vreg63, %vreg65; GR32Bit:%vreg66,%vreg63,%vreg65
828B		  * %vreg67<def> = ADDI %zero, 16; GR32Bit:%vreg67
828B		  * %vreg68<def> = SRLI %t5, 22; GR32Bit:%vreg68
828B		  * %vreg69<def> = SRLI %t5, 12; GR32Bit:%vreg69
828B		  * %vreg70<def> = ANDI %vreg69, 15; GR32Bit:%vreg70,%vreg69
828B		  * %vreg71<def> = SRLI %t5, 6; GR32Bit:%vreg71
828B		  * %vreg72<def> = ANDI %vreg71, 63; GR32Bit:%vreg72,%vreg71
828B		  * %vreg73<def> = ADDI %zero, 832; GR32Bit:%vreg73
828B		  * %vreg74<def> = MUL %vreg68, %vreg73; GR32Bit:%vreg74,%vreg68,%vreg73
828B		  * %vreg75<def> = ADDI %zero, 52; GR32Bit:%vreg75
828B		  * %vreg76<def> = MUL %vreg70, %vreg75; GR32Bit:%vreg76,%vreg70,%vreg75
828B		  * %vreg77<def> = ADD %vreg76, %vreg72; GR32Bit:%vreg77,%vreg76,%vreg72
828B		  * %vreg78<def> = ADD %vreg77, %vreg74; GR32Bit:%vreg78,%vreg77,%vreg74
828B		  * %vreg79<def> = MUL %vreg78, %vreg67; GR32Bit:%vreg79,%vreg78,%vreg67
828B		  * %t5<def> = ADD %vreg66, %vreg79; GR32Bit:%vreg66,%vreg79
828B		  * END 0
828B		  * %zero<def> = ADDI %zero, 0
828B		  * %zero<def> = ADDI %zero, 0

# End machine code for function redefine_start1.

********** COMPUTING LIVE DEBUG VARIABLES: redefine_start1 **********
********** DEBUG VARIABLES **********
********** Compute Spill Weights **********
********** Function: redefine_start1
********** GREEDY REGISTER ALLOCATION **********
********** Function: redefine_start1

selectOrSplit GR32Bit:%vreg103 [604r,1324B:0)  0@604r
AllocationOrder(GR32Bit) = [ %t0 %t1 %t2 %fp %a0 %a1 %a2 %a3 %a4 %a6 %a7 %t3 %ra %sp %gp %tp %s0 %s1 %s2 %s3 %s4 %s5 %s6 %s7 %s8 %s9 %s10 %s11 ]
assigning %vreg103 to %t0: t0

selectOrSplit GR32Bit:%vreg80 [220r,412r:0)  0@220r
assigning %vreg80 to %t0: t0

selectOrSplit GR32Bit:%vreg9 [48r,160r:0)  0@48r
assigning %vreg9 to %t0: t0

selectOrSplit GR32Bit:%vreg28 [476r,588r:0)  0@476r
assigning %vreg28 to %t0: t0

selectOrSplit GR32Bit:%vreg47 [684r,796r:0)  0@684r
assigning %vreg47 to %t1: t1

selectOrSplit GR32Bit:%vreg66 [860r,972r:0)  0@860r
assigning %vreg66 to %t1: t1

selectOrSplit GR32Bit:%vreg85 [268r,380r:0)  0@268r
assigning %vreg85 to %t1: t1

selectOrSplit GR32Bit:%vreg10 [56r,152r:0)  0@56r
assigning %vreg10 to %t1: t1

selectOrSplit GR32Bit:%vreg29 [484r,580r:0)  0@484r
assigning %vreg29 to %t1: t1

selectOrSplit GR32Bit:%vreg48 [692r,788r:0)  0@692r
assigning %vreg48 to %t2: t2

selectOrSplit GR32Bit:%vreg67 [868r,964r:0)  0@868r
assigning %vreg67 to %t2: t2

selectOrSplit GR32Bit:%vreg86 [276r,372r:0)  0@276r
assigning %vreg86 to %t2: t2

selectOrSplit GR32Bit:%vreg11 [64r,112r:0)  0@64r
assigning %vreg11 to %t2: t2

selectOrSplit GR32Bit:%vreg13 [80r,128r:0)  0@80r
assigning %vreg13 to %fp: fp

selectOrSplit GR32Bit:%vreg30 [492r,540r:0)  0@492r
assigning %vreg30 to %t2: t2

selectOrSplit GR32Bit:%vreg32 [508r,556r:0)  0@508r
assigning %vreg32 to %fp: fp

selectOrSplit GR32Bit:%vreg49 [700r,748r:0)  0@700r
assigning %vreg49 to %fp: fp

selectOrSplit GR32Bit:%vreg51 [716r,764r:0)  0@716r
assigning %vreg51 to %a0: a0

selectOrSplit GR32Bit:%vreg68 [876r,924r:0)  0@876r
assigning %vreg68 to %fp: fp

selectOrSplit GR32Bit:%vreg70 [892r,940r:0)  0@892r
assigning %vreg70 to %a0: a0

selectOrSplit GR32Bit:%vreg87 [284r,332r:0)  0@284r
assigning %vreg87 to %fp: fp

selectOrSplit GR32Bit:%vreg89 [300r,348r:0)  0@300r
assigning %vreg89 to %a0: a0

selectOrSplit GR32Bit:%vreg15 [96r,136r:0)  0@96r
assigning %vreg15 to %a0: a0

selectOrSplit GR32Bit:%vreg34 [524r,564r:0)  0@524r
assigning %vreg34 to %a0: a0

selectOrSplit GR32Bit:%vreg53 [732r,772r:0)  0@732r
assigning %vreg53 to %a1: a1

selectOrSplit GR32Bit:%vreg72 [908r,948r:0)  0@908r
assigning %vreg72 to %a1: a1

selectOrSplit GR32Bit:%vreg91 [316r,356r:0)  0@316r
assigning %vreg91 to %a1: a1

selectOrSplit GR32Bit:%vreg2 [168r,204r:0)  0@168r
assigning %vreg2 to %t0: t0

selectOrSplit GR32Bit:%vreg17 [112r,144r:0)  0@112r
assigning %vreg17 to %t2: t2

selectOrSplit GR32Bit:%vreg36 [540r,572r:0)  0@540r
assigning %vreg36 to %t2: t2

selectOrSplit GR32Bit:%vreg55 [748r,780r:0)  0@748r
assigning %vreg55 to %fp: fp

selectOrSplit GR32Bit:%vreg74 [924r,956r:0)  0@924r
assigning %vreg74 to %fp: fp

selectOrSplit GR32Bit:%vreg93 [332r,364r:0)  0@332r
assigning %vreg93 to %fp: fp

selectOrSplit GR32Bit:%vreg0 [188r,212r:0)  0@188r
assigning %vreg0 to %t1: t1

selectOrSplit GR32Bit:%vreg6 [24r,48r:0)  0@24r
assigning %vreg6 to %t0: t0

selectOrSplit GR32Bit:%vreg25 [452r,476r:0)  0@452r
assigning %vreg25 to %t0: t0

selectOrSplit GR32Bit:%vreg44 [660r,684r:0)  0@660r
assigning %vreg44 to %t1: t1

selectOrSplit GR32Bit:%vreg63 [836r,860r:0)  0@836r
assigning %vreg63 to %t1: t1

selectOrSplit GR32Bit:%vreg82 [244r,268r:0)  0@244r
assigning %vreg82 to %t1: t1

selectOrSplit GR32Bit:%vreg99 [380r,396r:0)  0@380r
assigning %vreg99 to %t1: t1

selectOrSplit GR32Bit:%vreg1 [196r,204r:0)  0@196r
assigning %vreg1 to %t2: t2

selectOrSplit GR32Bit:%vreg3 [204r,212r:0)  0@204r
assigning %vreg3 to %t0: t0

selectOrSplit GR32Bit:%vreg7 [32r,40r:0)  0@32r
assigning %vreg7 to %t1: t1

selectOrSplit GR32Bit:%vreg8 [40r,48r:0)  0@40r
assigning %vreg8 to %t1: t1

selectOrSplit GR32Bit:%vreg12 [72r,80r:0)  0@72r
assigning %vreg12 to %fp: fp

selectOrSplit GR32Bit:%vreg14 [88r,96r:0)  0@88r
assigning %vreg14 to %a0: a0

selectOrSplit GR32Bit:%vreg16 [104r,112r:0)  0@104r
assigning %vreg16 to %a1: a1

selectOrSplit GR32Bit:%vreg18 [120r,128r:0)  0@120r
assigning %vreg18 to %a1: a1

selectOrSplit GR32Bit:%vreg19 [128r,136r:0)  0@128r
assigning %vreg19 to %fp: fp

selectOrSplit GR32Bit:%vreg20 [136r,144r:0)  0@136r
assigning %vreg20 to %fp: fp

selectOrSplit GR32Bit:%vreg21 [144r,152r:0)  0@144r
assigning %vreg21 to %t2: t2

selectOrSplit GR32Bit:%vreg22 [152r,160r:0)  0@152r
assigning %vreg22 to %t1: t1

selectOrSplit GR32Bit:%vreg26 [460r,468r:0)  0@460r
assigning %vreg26 to %t1: t1

selectOrSplit GR32Bit:%vreg27 [468r,476r:0)  0@468r
assigning %vreg27 to %t1: t1

selectOrSplit GR32Bit:%vreg31 [500r,508r:0)  0@500r
assigning %vreg31 to %fp: fp

selectOrSplit GR32Bit:%vreg33 [516r,524r:0)  0@516r
assigning %vreg33 to %a0: a0

selectOrSplit GR32Bit:%vreg35 [532r,540r:0)  0@532r
assigning %vreg35 to %a1: a1

selectOrSplit GR32Bit:%vreg37 [548r,556r:0)  0@548r
assigning %vreg37 to %a1: a1

selectOrSplit GR32Bit:%vreg38 [556r,564r:0)  0@556r
assigning %vreg38 to %fp: fp

selectOrSplit GR32Bit:%vreg39 [564r,572r:0)  0@564r
assigning %vreg39 to %fp: fp

selectOrSplit GR32Bit:%vreg40 [572r,580r:0)  0@572r
assigning %vreg40 to %t2: t2

selectOrSplit GR32Bit:%vreg41 [580r,588r:0)  0@580r
assigning %vreg41 to %t1: t1

selectOrSplit GR32Bit:%vreg45 [668r,676r:0)  0@668r
assigning %vreg45 to %t2: t2

selectOrSplit GR32Bit:%vreg46 [676r,684r:0)  0@676r
assigning %vreg46 to %t2: t2

selectOrSplit GR32Bit:%vreg50 [708r,716r:0)  0@708r
assigning %vreg50 to %a0: a0

selectOrSplit GR32Bit:%vreg52 [724r,732r:0)  0@724r
assigning %vreg52 to %a1: a1

selectOrSplit GR32Bit:%vreg54 [740r,748r:0)  0@740r
assigning %vreg54 to %a2: a2

selectOrSplit GR32Bit:%vreg56 [756r,764r:0)  0@756r
assigning %vreg56 to %a2: a2

selectOrSplit GR32Bit:%vreg57 [764r,772r:0)  0@764r
assigning %vreg57 to %a0: a0

selectOrSplit GR32Bit:%vreg58 [772r,780r:0)  0@772r
assigning %vreg58 to %a0: a0

selectOrSplit GR32Bit:%vreg59 [780r,788r:0)  0@780r
assigning %vreg59 to %fp: fp

selectOrSplit GR32Bit:%vreg60 [788r,796r:0)  0@788r
assigning %vreg60 to %t2: t2

selectOrSplit GR32Bit:%vreg64 [844r,852r:0)  0@844r
assigning %vreg64 to %t2: t2

selectOrSplit GR32Bit:%vreg65 [852r,860r:0)  0@852r
assigning %vreg65 to %t2: t2

selectOrSplit GR32Bit:%vreg69 [884r,892r:0)  0@884r
assigning %vreg69 to %a0: a0

selectOrSplit GR32Bit:%vreg71 [900r,908r:0)  0@900r
assigning %vreg71 to %a1: a1

selectOrSplit GR32Bit:%vreg73 [916r,924r:0)  0@916r
assigning %vreg73 to %a2: a2

selectOrSplit GR32Bit:%vreg75 [932r,940r:0)  0@932r
assigning %vreg75 to %a2: a2

selectOrSplit GR32Bit:%vreg76 [940r,948r:0)  0@940r
assigning %vreg76 to %a0: a0

selectOrSplit GR32Bit:%vreg77 [948r,956r:0)  0@948r
assigning %vreg77 to %a0: a0

selectOrSplit GR32Bit:%vreg78 [956r,964r:0)  0@956r
assigning %vreg78 to %fp: fp

selectOrSplit GR32Bit:%vreg79 [964r,972r:0)  0@964r
assigning %vreg79 to %t2: t2

selectOrSplit GR32Bit:%vreg81 [228r,236r:0)  0@228r
assigning %vreg81 to %t1: t1

selectOrSplit GR32Bit:%vreg83 [252r,260r:0)  0@252r
assigning %vreg83 to %t2: t2

selectOrSplit GR32Bit:%vreg84 [260r,268r:0)  0@260r
assigning %vreg84 to %t2: t2

selectOrSplit GR32Bit:%vreg88 [292r,300r:0)  0@292r
assigning %vreg88 to %a0: a0

selectOrSplit GR32Bit:%vreg90 [308r,316r:0)  0@308r
assigning %vreg90 to %a1: a1

selectOrSplit GR32Bit:%vreg92 [324r,332r:0)  0@324r
assigning %vreg92 to %a2: a2

selectOrSplit GR32Bit:%vreg94 [340r,348r:0)  0@340r
assigning %vreg94 to %a2: a2

selectOrSplit GR32Bit:%vreg95 [348r,356r:0)  0@348r
assigning %vreg95 to %a0: a0

selectOrSplit GR32Bit:%vreg96 [356r,364r:0)  0@356r
assigning %vreg96 to %a0: a0

selectOrSplit GR32Bit:%vreg97 [364r,372r:0)  0@364r
assigning %vreg97 to %fp: fp

selectOrSplit GR32Bit:%vreg98 [372r,380r:0)  0@372r
assigning %vreg98 to %t2: t2

selectOrSplit GR32Bit:%vreg100 [388r,396r:0)  0@388r
assigning %vreg100 to %t2: t2

selectOrSplit GR32Bit:%vreg101 [404r,412r:0)  0@404r
assigning %vreg101 to %t1: t1

selectOrSplit GR32Bit:%vreg102 [596r,604r:0)  0@596r
assigning %vreg102 to %t0: t0

selectOrSplit GR32Bit:%vreg104 [612r,620r:0)  0@612r
assigning %vreg104 to %t1: t1
********** REWRITE VIRTUAL REGISTERS **********
********** Function: redefine_start1
********** REGISTER MAP **********
[%vreg0 -> %t1] GR32Bit
[%vreg1 -> %t2] GR32Bit
[%vreg2 -> %t0] GR32Bit
[%vreg3 -> %t0] GR32Bit
[%vreg6 -> %t0] GR32Bit
[%vreg7 -> %t1] GR32Bit
[%vreg8 -> %t1] GR32Bit
[%vreg9 -> %t0] GR32Bit
[%vreg10 -> %t1] GR32Bit
[%vreg11 -> %t2] GR32Bit
[%vreg12 -> %fp] GR32Bit
[%vreg13 -> %fp] GR32Bit
[%vreg14 -> %a0] GR32Bit
[%vreg15 -> %a0] GR32Bit
[%vreg16 -> %a1] GR32Bit
[%vreg17 -> %t2] GR32Bit
[%vreg18 -> %a1] GR32Bit
[%vreg19 -> %fp] GR32Bit
[%vreg20 -> %fp] GR32Bit
[%vreg21 -> %t2] GR32Bit
[%vreg22 -> %t1] GR32Bit
[%vreg25 -> %t0] GR32Bit
[%vreg26 -> %t1] GR32Bit
[%vreg27 -> %t1] GR32Bit
[%vreg28 -> %t0] GR32Bit
[%vreg29 -> %t1] GR32Bit
[%vreg30 -> %t2] GR32Bit
[%vreg31 -> %fp] GR32Bit
[%vreg32 -> %fp] GR32Bit
[%vreg33 -> %a0] GR32Bit
[%vreg34 -> %a0] GR32Bit
[%vreg35 -> %a1] GR32Bit
[%vreg36 -> %t2] GR32Bit
[%vreg37 -> %a1] GR32Bit
[%vreg38 -> %fp] GR32Bit
[%vreg39 -> %fp] GR32Bit
[%vreg40 -> %t2] GR32Bit
[%vreg41 -> %t1] GR32Bit
[%vreg44 -> %t1] GR32Bit
[%vreg45 -> %t2] GR32Bit
[%vreg46 -> %t2] GR32Bit
[%vreg47 -> %t1] GR32Bit
[%vreg48 -> %t2] GR32Bit
[%vreg49 -> %fp] GR32Bit
[%vreg50 -> %a0] GR32Bit
[%vreg51 -> %a0] GR32Bit
[%vreg52 -> %a1] GR32Bit
[%vreg53 -> %a1] GR32Bit
[%vreg54 -> %a2] GR32Bit
[%vreg55 -> %fp] GR32Bit
[%vreg56 -> %a2] GR32Bit
[%vreg57 -> %a0] GR32Bit
[%vreg58 -> %a0] GR32Bit
[%vreg59 -> %fp] GR32Bit
[%vreg60 -> %t2] GR32Bit
[%vreg63 -> %t1] GR32Bit
[%vreg64 -> %t2] GR32Bit
[%vreg65 -> %t2] GR32Bit
[%vreg66 -> %t1] GR32Bit
[%vreg67 -> %t2] GR32Bit
[%vreg68 -> %fp] GR32Bit
[%vreg69 -> %a0] GR32Bit
[%vreg70 -> %a0] GR32Bit
[%vreg71 -> %a1] GR32Bit
[%vreg72 -> %a1] GR32Bit
[%vreg73 -> %a2] GR32Bit
[%vreg74 -> %fp] GR32Bit
[%vreg75 -> %a2] GR32Bit
[%vreg76 -> %a0] GR32Bit
[%vreg77 -> %a0] GR32Bit
[%vreg78 -> %fp] GR32Bit
[%vreg79 -> %t2] GR32Bit
[%vreg80 -> %t0] GR32Bit
[%vreg81 -> %t1] GR32Bit
[%vreg82 -> %t1] GR32Bit
[%vreg83 -> %t2] GR32Bit
[%vreg84 -> %t2] GR32Bit
[%vreg85 -> %t1] GR32Bit
[%vreg86 -> %t2] GR32Bit
[%vreg87 -> %fp] GR32Bit
[%vreg88 -> %a0] GR32Bit
[%vreg89 -> %a0] GR32Bit
[%vreg90 -> %a1] GR32Bit
[%vreg91 -> %a1] GR32Bit
[%vreg92 -> %a2] GR32Bit
[%vreg93 -> %fp] GR32Bit
[%vreg94 -> %a2] GR32Bit
[%vreg95 -> %a0] GR32Bit
[%vreg96 -> %a0] GR32Bit
[%vreg97 -> %fp] GR32Bit
[%vreg98 -> %t2] GR32Bit
[%vreg99 -> %t1] GR32Bit
[%vreg100 -> %t2] GR32Bit
[%vreg101 -> %t1] GR32Bit
[%vreg102 -> %t0] GR32Bit
[%vreg103 -> %t0] GR32Bit
[%vreg104 -> %t1] GR32Bit

0B	BB#0: derived from LLVM BB %redefine_start1.entry
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg6<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg6
4B		  * %vreg7<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg7
4B		  * %vreg8<def> = SRLI %vreg7<kill>, 12; GR32Bit:%vreg8,%vreg7
4B		  * %vreg9<def> = ADD %vreg6<kill>, %vreg8<kill>; GR32Bit:%vreg9,%vreg6,%vreg8
4B		  * %vreg10<def> = ADDI %zero, 16; GR32Bit:%vreg10
4B		  * %vreg11<def> = SRLI %t5, 22; GR32Bit:%vreg11
4B		  * %vreg12<def> = SRLI %t5, 12; GR32Bit:%vreg12
4B		  * %vreg13<def> = ANDI %vreg12<kill>, 15; GR32Bit:%vreg13,%vreg12
4B		  * %vreg14<def> = SRLI %t5, 6; GR32Bit:%vreg14
4B		  * %vreg15<def> = ANDI %vreg14<kill>, 63; GR32Bit:%vreg15,%vreg14
4B		  * %vreg16<def> = ADDI %zero, 832; GR32Bit:%vreg16
4B		  * %vreg17<def> = MUL %vreg11<kill>, %vreg16<kill>; GR32Bit:%vreg17,%vreg11,%vreg16
4B		  * %vreg18<def> = ADDI %zero, 52; GR32Bit:%vreg18
4B		  * %vreg19<def> = MUL %vreg13<kill>, %vreg18<kill>; GR32Bit:%vreg19,%vreg13,%vreg18
4B		  * %vreg20<def> = ADD %vreg19<kill>, %vreg15<kill>; GR32Bit:%vreg20,%vreg19,%vreg15
4B		  * %vreg21<def> = ADD %vreg20<kill>, %vreg17<kill>; GR32Bit:%vreg21,%vreg20,%vreg17
4B		  * %vreg22<def> = MUL %vreg21<kill>, %vreg10<kill>; GR32Bit:%vreg22,%vreg21,%vreg10
4B		  * %t5<def> = ADD %vreg9<kill>, %vreg22<kill>; GR32Bit:%vreg9,%vreg22
4B		  * %vreg2<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg2
4B		  * SRLI %vreg2, %vreg2, 12; GR32Bit:%vreg2
4B		  * %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
4B		  * %vreg1<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg1
4B		  * %vreg3<def> = ADD %vreg2<kill>, %vreg1<kill>; GR32Bit:%vreg3,%vreg2,%vreg1
4B		  * SW %vreg3<kill>, %vreg0<kill>, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0
4B		  * %vreg80<def> = ADDI %zero, 64; GR32Bit:%vreg80
4B		  * %vreg81<def> = ADDI %zero, 1; GR32Bit:%vreg81
4B		  * WRITECM %vreg80, %vreg81<kill>, 60; GR32Bit:%vreg80,%vreg81
4B		  * %vreg82<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg82
4B		  * %vreg83<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg83
4B		  * %vreg84<def> = SRLI %vreg83<kill>, 12; GR32Bit:%vreg84,%vreg83
4B		  * %vreg85<def> = ADD %vreg82<kill>, %vreg84<kill>; GR32Bit:%vreg85,%vreg82,%vreg84
4B		  * %vreg86<def> = ADDI %zero, 16; GR32Bit:%vreg86
4B		  * %vreg87<def> = SRLI %vreg80, 22; GR32Bit:%vreg87,%vreg80
4B		  * %vreg88<def> = SRLI %vreg80, 12; GR32Bit:%vreg88,%vreg80
4B		  * %vreg89<def> = ANDI %vreg88<kill>, 15; GR32Bit:%vreg89,%vreg88
4B		  * %vreg90<def> = SRLI %vreg80, 6; GR32Bit:%vreg90,%vreg80
4B		  * %vreg91<def> = ANDI %vreg90<kill>, 63; GR32Bit:%vreg91,%vreg90
4B		  * %vreg92<def> = ADDI %zero, 832; GR32Bit:%vreg92
4B		  * %vreg93<def> = MUL %vreg87<kill>, %vreg92<kill>; GR32Bit:%vreg93,%vreg87,%vreg92
4B		  * %vreg94<def> = ADDI %zero, 52; GR32Bit:%vreg94
4B		  * %vreg95<def> = MUL %vreg89<kill>, %vreg94<kill>; GR32Bit:%vreg95,%vreg89,%vreg94
4B		  * %vreg96<def> = ADD %vreg95<kill>, %vreg91<kill>; GR32Bit:%vreg96,%vreg95,%vreg91
4B		  * %vreg97<def> = ADD %vreg96<kill>, %vreg93<kill>; GR32Bit:%vreg97,%vreg96,%vreg93
4B		  * %vreg98<def> = MUL %vreg97<kill>, %vreg86<kill>; GR32Bit:%vreg98,%vreg97,%vreg86
4B		  * %vreg99<def> = ADD %vreg98<kill>, %vreg85<kill>; GR32Bit:%vreg99,%vreg98,%vreg85
4B		  * %vreg100<def> = LW %t5, 0; GR32Bit:%vreg100
4B		  * SW %vreg100<kill>, %vreg99<kill>, 12; GR32Bit:%vreg100,%vreg99
4B		  * %vreg101<def> = LUI 1; GR32Bit:%vreg101
4B		  * WRITEPM %vreg101<kill>, %vreg80<kill>, 0; GR32Bit:%vreg101,%vreg80
4B		  * END 0
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
444B		%t4<def> = ADD %t5, %zero
444B		  * %vreg25<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg25
444B		  * %vreg26<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg26
444B		  * %vreg27<def> = SRLI %vreg26<kill>, 12; GR32Bit:%vreg27,%vreg26
444B		  * %vreg28<def> = ADD %vreg25<kill>, %vreg27<kill>; GR32Bit:%vreg28,%vreg25,%vreg27
444B		  * %vreg29<def> = ADDI %zero, 16; GR32Bit:%vreg29
444B		  * %vreg30<def> = SRLI %t5, 22; GR32Bit:%vreg30
444B		  * %vreg31<def> = SRLI %t5, 12; GR32Bit:%vreg31
444B		  * %vreg32<def> = ANDI %vreg31<kill>, 15; GR32Bit:%vreg32,%vreg31
444B		  * %vreg33<def> = SRLI %t5, 6; GR32Bit:%vreg33
444B		  * %vreg34<def> = ANDI %vreg33<kill>, 63; GR32Bit:%vreg34,%vreg33
444B		  * %vreg35<def> = ADDI %zero, 832; GR32Bit:%vreg35
444B		  * %vreg36<def> = MUL %vreg30<kill>, %vreg35<kill>; GR32Bit:%vreg36,%vreg30,%vreg35
444B		  * %vreg37<def> = ADDI %zero, 52; GR32Bit:%vreg37
444B		  * %vreg38<def> = MUL %vreg32<kill>, %vreg37<kill>; GR32Bit:%vreg38,%vreg32,%vreg37
444B		  * %vreg39<def> = ADD %vreg38<kill>, %vreg34<kill>; GR32Bit:%vreg39,%vreg38,%vreg34
444B		  * %vreg40<def> = ADD %vreg39<kill>, %vreg36<kill>; GR32Bit:%vreg40,%vreg39,%vreg36
444B		  * %vreg41<def> = MUL %vreg40<kill>, %vreg29<kill>; GR32Bit:%vreg41,%vreg40,%vreg29
444B		  * %t5<def> = ADD %vreg28<kill>, %vreg41<kill>; GR32Bit:%vreg28,%vreg41
444B		  * %vreg102<def> = LUI 1; GR32Bit:%vreg102
444B		  * %vreg103<def> = DREADPM %vreg102<kill>, 0; GR32Bit:%vreg103,%vreg102
444B		  * %vreg104<def> = LUI 1048575; GR32Bit:%vreg104
444B		  * %a5<def> = LUI 4095
444B		  * %a5<def> = SRLI %a5<internal>, 12
444B		  * ADD %vreg104, %vreg104, %a5; GR32Bit:%vreg104
444B		  * SYNC %vreg103, %vreg104<kill>, 60; GR32Bit:%vreg103,%vreg104
444B		  * END 0
444B		  * %zero<def> = ADDI %zero, 0
444B		  * %zero<def> = ADDI %zero, 0
652B		%t4<def> = ADD %t5, %zero
652B		  * %vreg44<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg44
652B		  * %vreg45<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg45
652B		  * %vreg46<def> = SRLI %vreg45<kill>, 12; GR32Bit:%vreg46,%vreg45
652B		  * %vreg47<def> = ADD %vreg44<kill>, %vreg46<kill>; GR32Bit:%vreg47,%vreg44,%vreg46
652B		  * %vreg48<def> = ADDI %zero, 16; GR32Bit:%vreg48
652B		  * %vreg49<def> = SRLI %t5, 22; GR32Bit:%vreg49
652B		  * %vreg50<def> = SRLI %t5, 12; GR32Bit:%vreg50
652B		  * %vreg51<def> = ANDI %vreg50<kill>, 15; GR32Bit:%vreg51,%vreg50
652B		  * %vreg52<def> = SRLI %t5, 6; GR32Bit:%vreg52
652B		  * %vreg53<def> = ANDI %vreg52<kill>, 63; GR32Bit:%vreg53,%vreg52
652B		  * %vreg54<def> = ADDI %zero, 832; GR32Bit:%vreg54
652B		  * %vreg55<def> = MUL %vreg49<kill>, %vreg54<kill>; GR32Bit:%vreg55,%vreg49,%vreg54
652B		  * %vreg56<def> = ADDI %zero, 52; GR32Bit:%vreg56
652B		  * %vreg57<def> = MUL %vreg51<kill>, %vreg56<kill>; GR32Bit:%vreg57,%vreg51,%vreg56
652B		  * %vreg58<def> = ADD %vreg57<kill>, %vreg53<kill>; GR32Bit:%vreg58,%vreg57,%vreg53
652B		  * %vreg59<def> = ADD %vreg58<kill>, %vreg55<kill>; GR32Bit:%vreg59,%vreg58,%vreg55
652B		  * %vreg60<def> = MUL %vreg59<kill>, %vreg48<kill>; GR32Bit:%vreg60,%vreg59,%vreg48
652B		  * %t5<def> = ADD %vreg47<kill>, %vreg60<kill>; GR32Bit:%vreg47,%vreg60
652B		  * END 0
652B		  * %zero<def> = ADDI %zero, 0
652B		  * %zero<def> = ADDI %zero, 0
828B		%t4<def> = ADD %t5, %zero
828B		  * %vreg63<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg63
828B		  * %vreg64<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg64
828B		  * %vreg65<def> = SRLI %vreg64<kill>, 12; GR32Bit:%vreg65,%vreg64
828B		  * %vreg66<def> = ADD %vreg63<kill>, %vreg65<kill>; GR32Bit:%vreg66,%vreg63,%vreg65
828B		  * %vreg67<def> = ADDI %zero, 16; GR32Bit:%vreg67
828B		  * %vreg68<def> = SRLI %t5, 22; GR32Bit:%vreg68
828B		  * %vreg69<def> = SRLI %t5, 12; GR32Bit:%vreg69
828B		  * %vreg70<def> = ANDI %vreg69<kill>, 15; GR32Bit:%vreg70,%vreg69
828B		  * %vreg71<def> = SRLI %t5, 6; GR32Bit:%vreg71
828B		  * %vreg72<def> = ANDI %vreg71<kill>, 63; GR32Bit:%vreg72,%vreg71
828B		  * %vreg73<def> = ADDI %zero, 832; GR32Bit:%vreg73
828B		  * %vreg74<def> = MUL %vreg68<kill>, %vreg73<kill>; GR32Bit:%vreg74,%vreg68,%vreg73
828B		  * %vreg75<def> = ADDI %zero, 52; GR32Bit:%vreg75
828B		  * %vreg76<def> = MUL %vreg70<kill>, %vreg75<kill>; GR32Bit:%vreg76,%vreg70,%vreg75
828B		  * %vreg77<def> = ADD %vreg76<kill>, %vreg72<kill>; GR32Bit:%vreg77,%vreg76,%vreg72
828B		  * %vreg78<def> = ADD %vreg77<kill>, %vreg74<kill>; GR32Bit:%vreg78,%vreg77,%vreg74
828B		  * %vreg79<def> = MUL %vreg78<kill>, %vreg67<kill>; GR32Bit:%vreg79,%vreg78,%vreg67
828B		  * %t5<def> = ADD %vreg66<kill>, %vreg79<kill>; GR32Bit:%vreg66,%vreg79
828B		  * END 0
828B		  * %zero<def> = ADDI %zero, 0
828B		  * %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 16
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = LUI <MCSym="%lo("ga#0")">
> SRLI %t0, %t0, 12
> %t1<def> = ADDI %t5, <fi#0>
> %t2<def> = LUI <ga:@redefine_in_a>[TF=2]
> %t0<def> = ADD %t0<kill>, %t2<kill>
> SW %t0<kill>, %t1<kill>, 0; mem:ST4[%0]
> %t0<def> = ADDI %zero, 64
> %t1<def> = ADDI %zero, 1
> WRITECM %t0, %t1<kill>, 60
> %t1<def> = LUI <MCSym="%hi("ga#512")">
> %t2<def> = LUI <MCSym="%lo("ga#512")">
> %t2<def> = SRLI %t2<kill>, 12
> %t1<def> = ADD %t1<kill>, %t2<kill>
> %t2<def> = ADDI %zero, 16
> %fp<def> = SRLI %t0, 22
> %a0<def> = SRLI %t0, 12
> %a0<def> = ANDI %a0<kill>, 15
> %a1<def> = SRLI %t0, 6
> %a1<def> = ANDI %a1<kill>, 63
> %a2<def> = ADDI %zero, 832
> %fp<def> = MUL %fp<kill>, %a2<kill>
> %a2<def> = ADDI %zero, 52
> %a0<def> = MUL %a0<kill>, %a2<kill>
> %a0<def> = ADD %a0<kill>, %a1<kill>
> %fp<def> = ADD %a0<kill>, %fp<kill>
> %t2<def> = MUL %fp<kill>, %t2<kill>
> %t1<def> = ADD %t2<kill>, %t1<kill>
> %t2<def> = LW %t5, 0
> SW %t2<kill>, %t1<kill>, 12
> %t1<def> = LUI 1
> WRITEPM %t1<kill>, %t0<kill>, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 16
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = LUI 1
> %t0<def> = DREADPM %t0<kill>, 0
> %t1<def> = LUI 1048575
> %a5<def> = LUI 4095
> %a5<def> = SRLI %a5<internal>, 12
> ADD %t1, %t1, %a5
> SYNC %t0, %t1<kill>, 60
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t1<def> = LUI <MCSym="%hi("ga#512")">
> %t2<def> = LUI <MCSym="%lo("ga#512")">
> %t2<def> = SRLI %t2<kill>, 12
> %t1<def> = ADD %t1<kill>, %t2<kill>
> %t2<def> = ADDI %zero, 16
> %fp<def> = SRLI %t5, 22
> %a0<def> = SRLI %t5, 12
> %a0<def> = ANDI %a0<kill>, 15
> %a1<def> = SRLI %t5, 6
> %a1<def> = ANDI %a1<kill>, 63
> %a2<def> = ADDI %zero, 832
> %fp<def> = MUL %fp<kill>, %a2<kill>
> %a2<def> = ADDI %zero, 52
> %a0<def> = MUL %a0<kill>, %a2<kill>
> %a0<def> = ADD %a0<kill>, %a1<kill>
> %fp<def> = ADD %a0<kill>, %fp<kill>
> %t2<def> = MUL %fp<kill>, %t2<kill>
> %t5<def> = ADD %t1<kill>, %t2<kill>
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t1<def> = LUI <MCSym="%hi("ga#512")">
> %t2<def> = LUI <MCSym="%lo("ga#512")">
> %t2<def> = SRLI %t2<kill>, 12
> %t1<def> = ADD %t1<kill>, %t2<kill>
> %t2<def> = ADDI %zero, 16
> %fp<def> = SRLI %t5, 22
> %a0<def> = SRLI %t5, 12
> %a0<def> = ANDI %a0<kill>, 15
> %a1<def> = SRLI %t5, 6
> %a1<def> = ANDI %a1<kill>, 63
> %a2<def> = ADDI %zero, 832
> %fp<def> = MUL %fp<kill>, %a2<kill>
> %a2<def> = ADDI %zero, 52
> %a0<def> = MUL %a0<kill>, %a2<kill>
> %a0<def> = ADD %a0<kill>, %a1<kill>
> %fp<def> = ADD %a0<kill>, %fp<kill>
> %t2<def> = MUL %fp<kill>, %t2<kill>
> %t5<def> = ADD %t1<kill>, %t2<kill>
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
********** EMITTING LIVE DEBUG VARIABLES **********
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: redefine_start1
max x:0, min x:0
max y:0, min y:0
current state of mf:# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %redefine_start1.entry
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 16
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = LUI <MCSym="%lo("ga#0")">
	  * SRLI %t0, %t0, 12
	  * %t1<def> = ADDI %t5, <fi#0>
	  * %t2<def> = LUI <ga:@redefine_in_a>[TF=2]
	  * %t0<def> = ADD %t0<kill>, %t2<kill>
	  * SW %t0<kill>, %t1<kill>, 0; mem:ST4[%0]
	  * %t0<def> = ADDI %zero, 64
	  * %t1<def> = ADDI %zero, 1
	  * WRITECM %t0, %t1<kill>, 60
	  * %t1<def> = LUI <MCSym="%hi("ga#512")">
	  * %t2<def> = LUI <MCSym="%lo("ga#512")">
	  * %t2<def> = SRLI %t2<kill>, 12
	  * %t1<def> = ADD %t1<kill>, %t2<kill>
	  * %t2<def> = ADDI %zero, 16
	  * %fp<def> = SRLI %t0, 22
	  * %a0<def> = SRLI %t0, 12
	  * %a0<def> = ANDI %a0<kill>, 15
	  * %a1<def> = SRLI %t0, 6
	  * %a1<def> = ANDI %a1<kill>, 63
	  * %a2<def> = ADDI %zero, 832
	  * %fp<def> = MUL %fp<kill>, %a2<kill>
	  * %a2<def> = ADDI %zero, 52
	  * %a0<def> = MUL %a0<kill>, %a2<kill>
	  * %a0<def> = ADD %a0<kill>, %a1<kill>
	  * %fp<def> = ADD %a0<kill>, %fp<kill>
	  * %t2<def> = MUL %fp<kill>, %t2<kill>
	  * %t1<def> = ADD %t2<kill>, %t1<kill>
	  * %t2<def> = LW %t5, 0
	  * SW %t2<kill>, %t1<kill>, 12
	  * %t1<def> = LUI 1
	  * WRITEPM %t1<kill>, %t0<kill>, 0
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 16
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = LUI 1
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * %t1<def> = LUI 1048575
	  * %a5<def> = LUI 4095
	  * %a5<def> = SRLI %a5<internal>, 12
	  * ADD %t1, %t1, %a5
	  * SYNC %t0, %t1<kill>, 60
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t1<def> = LUI <MCSym="%hi("ga#512")">
	  * %t2<def> = LUI <MCSym="%lo("ga#512")">
	  * %t2<def> = SRLI %t2<kill>, 12
	  * %t1<def> = ADD %t1<kill>, %t2<kill>
	  * %t2<def> = ADDI %zero, 16
	  * %fp<def> = SRLI %t5, 22
	  * %a0<def> = SRLI %t5, 12
	  * %a0<def> = ANDI %a0<kill>, 15
	  * %a1<def> = SRLI %t5, 6
	  * %a1<def> = ANDI %a1<kill>, 63
	  * %a2<def> = ADDI %zero, 832
	  * %fp<def> = MUL %fp<kill>, %a2<kill>
	  * %a2<def> = ADDI %zero, 52
	  * %a0<def> = MUL %a0<kill>, %a2<kill>
	  * %a0<def> = ADD %a0<kill>, %a1<kill>
	  * %fp<def> = ADD %a0<kill>, %fp<kill>
	  * %t2<def> = MUL %fp<kill>, %t2<kill>
	  * %t5<def> = ADD %t1<kill>, %t2<kill>
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t1<def> = LUI <MCSym="%hi("ga#512")">
	  * %t2<def> = LUI <MCSym="%lo("ga#512")">
	  * %t2<def> = SRLI %t2<kill>, 12
	  * %t1<def> = ADD %t1<kill>, %t2<kill>
	  * %t2<def> = ADDI %zero, 16
	  * %fp<def> = SRLI %t5, 22
	  * %a0<def> = SRLI %t5, 12
	  * %a0<def> = ANDI %a0<kill>, 15
	  * %a1<def> = SRLI %t5, 6
	  * %a1<def> = ANDI %a1<kill>, 63
	  * %a2<def> = ADDI %zero, 832
	  * %fp<def> = MUL %fp<kill>, %a2<kill>
	  * %a2<def> = ADDI %zero, 52
	  * %a0<def> = MUL %a0<kill>, %a2<kill>
	  * %a0<def> = ADD %a0<kill>, %a1<kill>
	  * %fp<def> = ADD %a0<kill>, %fp<kill>
	  * %t2<def> = MUL %fp<kill>, %t2<kill>
	  * %t5<def> = ADD %t1<kill>, %t2<kill>
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0

# End machine code for function redefine_start1.

lowering frame index for func redefine_start1:0 TO VAL:0
CGP: Found      local addrmode: [Base:%1]
CGP: Found      local addrmode: [Base:%1]
CGP: Found      local addrmode: [8 + Base:%2]
CGP: Found      local addrmode: [Base:@redefine_out_b]
CGP: Found      local addrmode: [Base:%1]
CGP: Found      local addrmode: [12 + Base:%5]
CGP: Found      local addrmode: [4 + Base:@redefine_out_b]
Computing probabilities for redefine_start2.return
Computing probabilities for redefine_start2.newName01



=== redefine_start2
store visit is after?  store i32* %0, i32** %1, align 4
I was here to add i32* %0
arg match found with argIndex:-1
Argument does not have assigned frame index!
The value is an argument for which I am here to get arg frame index as:0
whats the index?-1
I was here to add   %1 = alloca i32*, align 4
whats in dag after store?SelectionDAG has 7 nodes:
  0x2d13c48: ch = EntryToken [ORD=4]

  0x2d31c60: i32 = FrameIndex<-1> [ORD=4]

  0x2d31b60: i32 = undef [ORD=4]

    0x2d13c48: <multiple use>
    0x2d31c60: <multiple use>
    0x2d31b60: <multiple use>
  0x2d31560: i32,ch = load 0x2d13c48, 0x2d31c60, 0x2d31b60<LD4[FixedStack-1]>

  0x2d31660: i32 = Constant<0>

    0x2d13c48: <multiple use>
    0x2d31c60: <multiple use>
    0x2d31260: i32 = FrameIndex<0> [ORD=4]

    0x2d31b60: <multiple use>
  0x2d31a60: ch = store 0x2d13c48, 0x2d31c60, 0x2d31260, 0x2d31b60<ST4[%1]> [ORD=4]


visiting load instruction   %2 = load i32** %1, align 4
with I type i32*and sd value :0x2d31260: i32 = FrameIndex<0>
new load?0x2d31960: i32,ch = load 0x2d31a60, 0x2d31260, 0x2d31b60<LD4[%1]>
dag after load is dealt with?SelectionDAG has 8 nodes:
  0x2d13c48: ch = EntryToken [ORD=4]

  0x2d31c60: i32 = FrameIndex<-1> [ORD=4]

  0x2d31b60: i32 = undef [ORD=4]

    0x2d13c48: <multiple use>
    0x2d31c60: <multiple use>
    0x2d31b60: <multiple use>
  0x2d31560: i32,ch = load 0x2d13c48, 0x2d31c60, 0x2d31b60<LD4[FixedStack-1]>

  0x2d31260: i32 = FrameIndex<0> [ORD=4]

  0x2d31660: i32 = Constant<0>

      0x2d13c48: <multiple use>
      0x2d31c60: <multiple use>
      0x2d31260: <multiple use>
      0x2d31b60: <multiple use>
    0x2d31a60: ch = store 0x2d13c48, 0x2d31c60, 0x2d31260, 0x2d31b60<ST4[%1]> [ORD=4]

    0x2d31260: <multiple use>
    0x2d31b60: <multiple use>
  0x2d31960: i32,ch = load 0x2d31a60, 0x2d31260, 0x2d31b60<LD4[%1]>

    0x2d13c48: <multiple use>
    0x2d31c60: <multiple use>
    0x2d31260: <multiple use>
    0x2d31b60: <multiple use>
  0x2d31a60: ch = store 0x2d13c48, 0x2d31c60, 0x2d31260, 0x2d31b60<ST4[%1]> [ORD=4]


visiting load instruction   %4 = load i32* %3, align 4
with I type i32and sd value :0x2d31460: i32 = add 0x2d31960, 0x2d31760
new load?0x2d31360: i32,ch = load 0x2d31a60, 0x2d31460, 0x2d31b60<LD4[%3]>
dag after load is dealt with?SelectionDAG has 12 nodes:
  0x2d13c48: ch = EntryToken [ORD=4]

  0x2d31c60: i32 = FrameIndex<-1> [ORD=4]

  0x2d31b60: i32 = undef [ORD=4]

    0x2d13c48: <multiple use>
    0x2d31c60: <multiple use>
    0x2d31b60: <multiple use>
  0x2d31560: i32,ch = load 0x2d13c48, 0x2d31c60, 0x2d31b60<LD4[FixedStack-1]>

  0x2d31260: i32 = FrameIndex<0> [ORD=4]

  0x2d31660: i32 = Constant<0>

  0x2d31860: i64 = Constant<8>

    0x2d31a60: <multiple use>
        0x2d31a60: <multiple use>
        0x2d31260: <multiple use>
        0x2d31b60: <multiple use>
      0x2d31960: i32,ch = load 0x2d31a60, 0x2d31260, 0x2d31b60<LD4[%1]> [ORD=5]

      0x2d31760: i32 = Constant<8> [ORD=6]

    0x2d31460: i32 = add 0x2d31960, 0x2d31760 [ORD=6]

    0x2d31b60: <multiple use>
  0x2d31360: i32,ch = load 0x2d31a60, 0x2d31460, 0x2d31b60<LD4[%3]>

    0x2d13c48: <multiple use>
    0x2d31c60: <multiple use>
    0x2d31260: <multiple use>
    0x2d31b60: <multiple use>
  0x2d31a60: ch = store 0x2d13c48, 0x2d31c60, 0x2d31260, 0x2d31b60<ST4[%1]> [ORD=4]


store visit is after?  store i32 %4, i32* getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0), align 4
I was here to add i32* getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)
I was here to add @redefine_out_b = common global [2 x i32] zeroinitializer, align 4
whats in dag after store?SelectionDAG has 15 nodes:
  0x2d13c48: ch = EntryToken [ORD=4]

  0x2d31c60: i32 = FrameIndex<-1> [ORD=4]

  0x2d31b60: i32 = undef [ORD=4]

    0x2d13c48: <multiple use>
    0x2d31c60: <multiple use>
    0x2d31b60: <multiple use>
  0x2d31560: i32,ch = load 0x2d13c48, 0x2d31c60, 0x2d31b60<LD4[FixedStack-1]>

  0x2d31260: i32 = FrameIndex<0> [ORD=4]

  0x2d31660: i32 = Constant<0>

    0x2d13c48: <multiple use>
    0x2d31c60: <multiple use>
    0x2d31260: <multiple use>
    0x2d31b60: <multiple use>
  0x2d31a60: ch = store 0x2d13c48, 0x2d31c60, 0x2d31260, 0x2d31b60<ST4[%1]> [ORD=4]

    0x2d31a60: <multiple use>
    0x2d31260: <multiple use>
    0x2d31b60: <multiple use>
  0x2d31960: i32,ch = load 0x2d31a60, 0x2d31260, 0x2d31b60<LD4[%1]> [ORD=5]

  0x2d31860: i64 = Constant<8>

    0x2d31a60: <multiple use>
      0x2d31960: <multiple use>
      0x2d31760: i32 = Constant<8> [ORD=6]

    0x2d31460: i32 = add 0x2d31960, 0x2d31760 [ORD=6]

    0x2d31b60: <multiple use>
  0x2d31360: i32,ch = load 0x2d31a60, 0x2d31460, 0x2d31b60<LD4[%3]> [ORD=7]

      0x2d31960: <multiple use>
      0x2d31360: <multiple use>
    0x2d31e60: ch = TokenFactor 0x2d31960:1, 0x2d31360:1 [ORD=9]

    0x2d31360: <multiple use>
    0x2d31d60: i32 = GlobalAddress<[2 x i32]* @redefine_out_b> 0 [ORD=8]

    0x2d31b60: <multiple use>
  0x2d31f60: ch = store 0x2d31e60, 0x2d31360, 0x2d31d60, 0x2d31b60<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9]


visiting load instruction   %5 = load i32** %1, align 4
with I type i32*and sd value :0x2d31260: i32 = FrameIndex<0>
new load?0x2d32060: i32,ch = load 0x2d31f60, 0x2d31260, 0x2d31b60<LD4[%1]>
dag after load is dealt with?SelectionDAG has 16 nodes:
  0x2d13c48: ch = EntryToken [ORD=4]

  0x2d31c60: i32 = FrameIndex<-1> [ORD=4]

  0x2d31b60: i32 = undef [ORD=4]

    0x2d13c48: <multiple use>
    0x2d31c60: <multiple use>
    0x2d31b60: <multiple use>
  0x2d31560: i32,ch = load 0x2d13c48, 0x2d31c60, 0x2d31b60<LD4[FixedStack-1]>

  0x2d31260: i32 = FrameIndex<0> [ORD=4]

  0x2d31660: i32 = Constant<0>

    0x2d13c48: <multiple use>
    0x2d31c60: <multiple use>
    0x2d31260: <multiple use>
    0x2d31b60: <multiple use>
  0x2d31a60: ch = store 0x2d13c48, 0x2d31c60, 0x2d31260, 0x2d31b60<ST4[%1]> [ORD=4]

    0x2d31a60: <multiple use>
    0x2d31260: <multiple use>
    0x2d31b60: <multiple use>
  0x2d31960: i32,ch = load 0x2d31a60, 0x2d31260, 0x2d31b60<LD4[%1]> [ORD=5]

  0x2d31860: i64 = Constant<8>

    0x2d31a60: <multiple use>
      0x2d31960: <multiple use>
      0x2d31760: i32 = Constant<8> [ORD=6]

    0x2d31460: i32 = add 0x2d31960, 0x2d31760 [ORD=6]

    0x2d31b60: <multiple use>
  0x2d31360: i32,ch = load 0x2d31a60, 0x2d31460, 0x2d31b60<LD4[%3]> [ORD=7]

        0x2d31960: <multiple use>
        0x2d31360: <multiple use>
      0x2d31e60: ch = TokenFactor 0x2d31960:1, 0x2d31360:1 [ORD=9]

      0x2d31360: <multiple use>
      0x2d31d60: i32 = GlobalAddress<[2 x i32]* @redefine_out_b> 0 [ORD=8]

      0x2d31b60: <multiple use>
    0x2d31f60: ch = store 0x2d31e60, 0x2d31360, 0x2d31d60, 0x2d31b60<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9]

    0x2d31260: <multiple use>
    0x2d31b60: <multiple use>
  0x2d32060: i32,ch = load 0x2d31f60, 0x2d31260, 0x2d31b60<LD4[%1]>

      0x2d31960: <multiple use>
      0x2d31360: <multiple use>
    0x2d31e60: ch = TokenFactor 0x2d31960:1, 0x2d31360:1 [ORD=9]

    0x2d31360: <multiple use>
    0x2d31d60: i32 = GlobalAddress<[2 x i32]* @redefine_out_b> 0 [ORD=8]

    0x2d31b60: <multiple use>
  0x2d31f60: ch = store 0x2d31e60, 0x2d31360, 0x2d31d60, 0x2d31b60<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9]


visiting load instruction   %7 = load i32* %6, align 4
with I type i32and sd value :0x2d3e0d0: i32 = add 0x2d32060, 0x2d3dfd0
new load?0x2d3e1d0: i32,ch = load 0x2d31f60, 0x2d3e0d0, 0x2d31b60<LD4[%6]>
dag after load is dealt with?SelectionDAG has 20 nodes:
  0x2d13c48: ch = EntryToken [ORD=4]

  0x2d31c60: i32 = FrameIndex<-1> [ORD=4]

  0x2d31b60: i32 = undef [ORD=4]

    0x2d13c48: <multiple use>
    0x2d31c60: <multiple use>
    0x2d31b60: <multiple use>
  0x2d31560: i32,ch = load 0x2d13c48, 0x2d31c60, 0x2d31b60<LD4[FixedStack-1]>

  0x2d31260: i32 = FrameIndex<0> [ORD=4]

  0x2d31660: i32 = Constant<0>

    0x2d13c48: <multiple use>
    0x2d31c60: <multiple use>
    0x2d31260: <multiple use>
    0x2d31b60: <multiple use>
  0x2d31a60: ch = store 0x2d13c48, 0x2d31c60, 0x2d31260, 0x2d31b60<ST4[%1]> [ORD=4]

    0x2d31a60: <multiple use>
    0x2d31260: <multiple use>
    0x2d31b60: <multiple use>
  0x2d31960: i32,ch = load 0x2d31a60, 0x2d31260, 0x2d31b60<LD4[%1]> [ORD=5]

  0x2d31860: i64 = Constant<8>

    0x2d31a60: <multiple use>
      0x2d31960: <multiple use>
      0x2d31760: i32 = Constant<8> [ORD=6]

    0x2d31460: i32 = add 0x2d31960, 0x2d31760 [ORD=6]

    0x2d31b60: <multiple use>
  0x2d31360: i32,ch = load 0x2d31a60, 0x2d31460, 0x2d31b60<LD4[%3]> [ORD=7]

  0x2d3ded0: i64 = Constant<12>

    0x2d31f60: <multiple use>
        0x2d31f60: <multiple use>
        0x2d31260: <multiple use>
        0x2d31b60: <multiple use>
      0x2d32060: i32,ch = load 0x2d31f60, 0x2d31260, 0x2d31b60<LD4[%1]> [ORD=10]

      0x2d3dfd0: i32 = Constant<12> [ORD=11]

    0x2d3e0d0: i32 = add 0x2d32060, 0x2d3dfd0 [ORD=11]

    0x2d31b60: <multiple use>
  0x2d3e1d0: i32,ch = load 0x2d31f60, 0x2d3e0d0, 0x2d31b60<LD4[%6]>

      0x2d31960: <multiple use>
      0x2d31360: <multiple use>
    0x2d31e60: ch = TokenFactor 0x2d31960:1, 0x2d31360:1 [ORD=9]

    0x2d31360: <multiple use>
    0x2d31d60: i32 = GlobalAddress<[2 x i32]* @redefine_out_b> 0 [ORD=8]

    0x2d31b60: <multiple use>
  0x2d31f60: ch = store 0x2d31e60, 0x2d31360, 0x2d31d60, 0x2d31b60<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9]


store visit is after?  store i32 %7, i32* getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1), align 4
I was here to add i32* getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)
whats in dag after store?SelectionDAG has 25 nodes:
  0x2d13c48: ch = EntryToken [ORD=4]

  0x2d31c60: i32 = FrameIndex<-1> [ORD=4]

  0x2d31b60: i32 = undef [ORD=4]

    0x2d13c48: <multiple use>
    0x2d31c60: <multiple use>
    0x2d31b60: <multiple use>
  0x2d31560: i32,ch = load 0x2d13c48, 0x2d31c60, 0x2d31b60<LD4[FixedStack-1]>

  0x2d31260: i32 = FrameIndex<0> [ORD=4]

  0x2d31660: i32 = Constant<0>

    0x2d13c48: <multiple use>
    0x2d31c60: <multiple use>
    0x2d31260: <multiple use>
    0x2d31b60: <multiple use>
  0x2d31a60: ch = store 0x2d13c48, 0x2d31c60, 0x2d31260, 0x2d31b60<ST4[%1]> [ORD=4]

    0x2d31a60: <multiple use>
    0x2d31260: <multiple use>
    0x2d31b60: <multiple use>
  0x2d31960: i32,ch = load 0x2d31a60, 0x2d31260, 0x2d31b60<LD4[%1]> [ORD=5]

  0x2d31860: i64 = Constant<8>

    0x2d31a60: <multiple use>
      0x2d31960: <multiple use>
      0x2d31760: i32 = Constant<8> [ORD=6]

    0x2d31460: i32 = add 0x2d31960, 0x2d31760 [ORD=6]

    0x2d31b60: <multiple use>
  0x2d31360: i32,ch = load 0x2d31a60, 0x2d31460, 0x2d31b60<LD4[%3]> [ORD=7]

  0x2d31d60: i32 = GlobalAddress<[2 x i32]* @redefine_out_b> 0 [ORD=8]

      0x2d31960: <multiple use>
      0x2d31360: <multiple use>
    0x2d31e60: ch = TokenFactor 0x2d31960:1, 0x2d31360:1 [ORD=9]

    0x2d31360: <multiple use>
    0x2d31d60: <multiple use>
    0x2d31b60: <multiple use>
  0x2d31f60: ch = store 0x2d31e60, 0x2d31360, 0x2d31d60, 0x2d31b60<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9]

    0x2d31f60: <multiple use>
    0x2d31260: <multiple use>
    0x2d31b60: <multiple use>
  0x2d32060: i32,ch = load 0x2d31f60, 0x2d31260, 0x2d31b60<LD4[%1]> [ORD=10]

  0x2d3ded0: i64 = Constant<12>

    0x2d31f60: <multiple use>
      0x2d32060: <multiple use>
      0x2d3dfd0: i32 = Constant<12> [ORD=11]

    0x2d3e0d0: i32 = add 0x2d32060, 0x2d3dfd0 [ORD=11]

    0x2d31b60: <multiple use>
  0x2d3e1d0: i32,ch = load 0x2d31f60, 0x2d3e0d0, 0x2d31b60<LD4[%6]> [ORD=12]

  0x2d3e2d0: i64 = Constant<4>

      0x2d32060: <multiple use>
      0x2d3e1d0: <multiple use>
    0x2d3e5d0: ch = TokenFactor 0x2d32060:1, 0x2d3e1d0:1 [ORD=14]

    0x2d3e1d0: <multiple use>
      0x2d31d60: <multiple use>
      0x2d3e3d0: i32 = Constant<4> [ORD=13]

    0x2d3e4d0: i32 = add 0x2d31d60, 0x2d3e3d0 [ORD=13]

    0x2d31b60: <multiple use>
  0x2d3e6d0: ch = store 0x2d3e5d0, 0x2d3e1d0, 0x2d3e4d0, 0x2d31b60<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=14]


Initial selection DAG: BB#0 'redefine_start2:redefine_start2.newName01'
SelectionDAG has 25 nodes:
  0x2d13c48: ch = EntryToken [ORD=4]

  0x2d31c60: i32 = FrameIndex<-1> [ORD=4]

  0x2d31b60: i32 = undef [ORD=4]

    0x2d13c48: <multiple use>
    0x2d31c60: <multiple use>
    0x2d31b60: <multiple use>
  0x2d31560: i32,ch = load 0x2d13c48, 0x2d31c60, 0x2d31b60<LD4[FixedStack-1]>

  0x2d31260: i32 = FrameIndex<0> [ORD=4]

  0x2d31660: i32 = Constant<0>

    0x2d13c48: <multiple use>
    0x2d31c60: <multiple use>
    0x2d31260: <multiple use>
    0x2d31b60: <multiple use>
  0x2d31a60: ch = store 0x2d13c48, 0x2d31c60, 0x2d31260, 0x2d31b60<ST4[%1]> [ORD=4]

    0x2d31a60: <multiple use>
    0x2d31260: <multiple use>
    0x2d31b60: <multiple use>
  0x2d31960: i32,ch = load 0x2d31a60, 0x2d31260, 0x2d31b60<LD4[%1]> [ORD=5]

  0x2d31860: i64 = Constant<8>

    0x2d31a60: <multiple use>
      0x2d31960: <multiple use>
      0x2d31760: i32 = Constant<8> [ORD=6]

    0x2d31460: i32 = add 0x2d31960, 0x2d31760 [ORD=6]

    0x2d31b60: <multiple use>
  0x2d31360: i32,ch = load 0x2d31a60, 0x2d31460, 0x2d31b60<LD4[%3]> [ORD=7]

  0x2d31d60: i32 = GlobalAddress<[2 x i32]* @redefine_out_b> 0 [ORD=8]

      0x2d31960: <multiple use>
      0x2d31360: <multiple use>
    0x2d31e60: ch = TokenFactor 0x2d31960:1, 0x2d31360:1 [ORD=9]

    0x2d31360: <multiple use>
    0x2d31d60: <multiple use>
    0x2d31b60: <multiple use>
  0x2d31f60: ch = store 0x2d31e60, 0x2d31360, 0x2d31d60, 0x2d31b60<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9]

    0x2d31f60: <multiple use>
    0x2d31260: <multiple use>
    0x2d31b60: <multiple use>
  0x2d32060: i32,ch = load 0x2d31f60, 0x2d31260, 0x2d31b60<LD4[%1]> [ORD=10]

  0x2d3ded0: i64 = Constant<12>

    0x2d31f60: <multiple use>
      0x2d32060: <multiple use>
      0x2d3dfd0: i32 = Constant<12> [ORD=11]

    0x2d3e0d0: i32 = add 0x2d32060, 0x2d3dfd0 [ORD=11]

    0x2d31b60: <multiple use>
  0x2d3e1d0: i32,ch = load 0x2d31f60, 0x2d3e0d0, 0x2d31b60<LD4[%6]> [ORD=12]

  0x2d3e2d0: i64 = Constant<4>

      0x2d32060: <multiple use>
      0x2d3e1d0: <multiple use>
    0x2d3e5d0: ch = TokenFactor 0x2d32060:1, 0x2d3e1d0:1 [ORD=14]

    0x2d3e1d0: <multiple use>
      0x2d31d60: <multiple use>
      0x2d3e3d0: i32 = Constant<4> [ORD=13]

    0x2d3e4d0: i32 = add 0x2d31d60, 0x2d3e3d0 [ORD=13]

    0x2d31b60: <multiple use>
  0x2d3e6d0: ch = store 0x2d3e5d0, 0x2d3e1d0, 0x2d3e4d0, 0x2d31b60<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=14]



Replacing.1 0x2d31960: i32,ch = load 0x2d31a60, 0x2d31260, 0x2d31b60<LD4[%1]> [ORD=5]

With: 0x2d31c60: i32 = FrameIndex<-1> [ORD=4]
 and 1 other values

Replacing.1 0x2d31360: i32,ch = load 0x2d31a60, 0x2d31460, 0x2d31b60<LD4[%3](align=8)> [ORD=7]

With: 0x2d31360: i32,ch = load 0x2d31a60, 0x2d31460, 0x2d31b60<LD4[%3](align=8)> [ORD=7]
 and 1 other values

Replacing.3 0x2d31e60: ch = TokenFactor 0x2d31a60, 0x2d31360:1 [ORD=9]

With: 0x2d31360: i32,ch = load 0x2d31a60, 0x2d31460, 0x2d31b60<LD4[%3](align=8)> [ORD=7]


Replacing.3 0x2d31460: i32 = add 0x2d31c60, 0x2d31760 [ORD=6]

With: 0x2d31560: i32 = or 0x2d31c60, 0x2d31760

Optimized lowered selection DAG: BB#0 'redefine_start2:redefine_start2.newName01'
SelectionDAG has 18 nodes:
  0x2d31c60: i32 = FrameIndex<-1> [ORD=4]

  0x2d31b60: i32 = undef [ORD=4]

  0x2d31260: i32 = FrameIndex<0> [ORD=4]

      0x2d13c48: ch = EntryToken [ORD=4]

      0x2d31c60: <multiple use>
      0x2d31260: <multiple use>
      0x2d31b60: <multiple use>
    0x2d31a60: ch = store 0x2d13c48, 0x2d31c60, 0x2d31260, 0x2d31b60<ST4[%1]> [ORD=4]

      0x2d31c60: <multiple use>
      0x2d31760: i32 = Constant<8> [ORD=6]

    0x2d31560: i32 = or 0x2d31c60, 0x2d31760

    0x2d31b60: <multiple use>
  0x2d31360: i32,ch = load 0x2d31a60, 0x2d31560, 0x2d31b60<LD4[%3](align=8)> [ORD=7]

  0x2d31d60: i32 = GlobalAddress<[2 x i32]* @redefine_out_b> 0 [ORD=8]

    0x2d31360: <multiple use>
    0x2d31360: <multiple use>
    0x2d31d60: <multiple use>
    0x2d31b60: <multiple use>
  0x2d31f60: ch = store 0x2d31360:1, 0x2d31360, 0x2d31d60, 0x2d31b60<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9]

    0x2d31f60: <multiple use>
    0x2d31260: <multiple use>
    0x2d31b60: <multiple use>
  0x2d32060: i32,ch = load 0x2d31f60, 0x2d31260, 0x2d31b60<LD4[%1]> [ORD=10]

    0x2d31f60: <multiple use>
      0x2d32060: <multiple use>
      0x2d3dfd0: i32 = Constant<12> [ORD=11]

    0x2d3e0d0: i32 = add 0x2d32060, 0x2d3dfd0 [ORD=11]

    0x2d31b60: <multiple use>
  0x2d3e1d0: i32,ch = load 0x2d31f60, 0x2d3e0d0, 0x2d31b60<LD4[%6]> [ORD=12]

      0x2d32060: <multiple use>
      0x2d3e1d0: <multiple use>
    0x2d3e5d0: ch = TokenFactor 0x2d32060:1, 0x2d3e1d0:1 [ORD=14]

    0x2d3e1d0: <multiple use>
      0x2d31d60: <multiple use>
      0x2d3e3d0: i32 = Constant<4> [ORD=13]

    0x2d3e4d0: i32 = add 0x2d31d60, 0x2d3e3d0 [ORD=13]

    0x2d31b60: <multiple use>
  0x2d3e6d0: ch = store 0x2d3e5d0, 0x2d3e1d0, 0x2d3e4d0, 0x2d31b60<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=14]


Legally typed node: 0x2d3e3d0: i32 = Constant<4> [ORD=13] [ID=0]

Legally typed node: 0x2d3dfd0: i32 = Constant<12> [ORD=11] [ID=0]

Legally typed node: 0x2d31d60: i32 = GlobalAddress<[2 x i32]* @redefine_out_b> 0 [ORD=8] [ID=0]

Legally typed node: 0x2d3e4d0: i32 = add 0x2d31d60, 0x2d3e3d0 [ORD=13] [ID=0]

Legally typed node: 0x2d31760: i32 = Constant<8> [ORD=6] [ID=0]

Legally typed node: 0x2d31260: i32 = FrameIndex<0> [ORD=4] [ID=0]

Legally typed node: 0x2d31b60: i32 = undef [ORD=4] [ID=0]

Legally typed node: 0x2d31c60: i32 = FrameIndex<-1> [ORD=4] [ID=0]

Legally typed node: 0x2d31560: i32 = or 0x2d31c60, 0x2d31760 [ID=0]

Legally typed node: 0x2d13c48: ch = EntryToken [ORD=4] [ID=0]

Legally typed node: 0x2d31a60: ch = store 0x2d13c48, 0x2d31c60, 0x2d31260, 0x2d31b60<ST4[%1]> [ORD=4] [ID=0]

Legally typed node: 0x2d31360: i32,ch = load 0x2d31a60, 0x2d31560, 0x2d31b60<LD4[%3](align=8)> [ORD=7] [ID=0]

Legally typed node: 0x2d31f60: ch = store 0x2d31360:1, 0x2d31360, 0x2d31d60, 0x2d31b60<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9] [ID=0]

Legally typed node: 0x2d32060: i32,ch = load 0x2d31f60, 0x2d31260, 0x2d31b60<LD4[%1]> [ORD=10] [ID=0]

Legally typed node: 0x2d3e0d0: i32 = add 0x2d32060, 0x2d3dfd0 [ORD=11] [ID=0]

Legally typed node: 0x2d3e1d0: i32,ch = load 0x2d31f60, 0x2d3e0d0, 0x2d31b60<LD4[%6]> [ORD=12] [ID=0]

Legally typed node: 0x2d3e5d0: ch = TokenFactor 0x2d32060:1, 0x2d3e1d0:1 [ORD=14] [ID=0]

Legally typed node: 0x2d3e6d0: ch = store 0x2d3e5d0, 0x2d3e1d0, 0x2d3e4d0, 0x2d31b60<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=14] [ID=0]

Legally typed node: 0x7fff0c793220: ch = handlenode 0x2d3e6d0 [ID=0]

Type-legalized selection DAG: BB#0 'redefine_start2:redefine_start2.newName01'
SelectionDAG has 18 nodes:
  0x2d31c60: i32 = FrameIndex<-1> [ORD=4] [ID=-3]

  0x2d31b60: i32 = undef [ORD=4] [ID=-3]

  0x2d31260: i32 = FrameIndex<0> [ORD=4] [ID=-3]

      0x2d13c48: ch = EntryToken [ORD=4] [ID=-3]

      0x2d31c60: <multiple use>
      0x2d31260: <multiple use>
      0x2d31b60: <multiple use>
    0x2d31a60: ch = store 0x2d13c48, 0x2d31c60, 0x2d31260, 0x2d31b60<ST4[%1]> [ORD=4] [ID=-3]

      0x2d31c60: <multiple use>
      0x2d31760: i32 = Constant<8> [ORD=6] [ID=-3]

    0x2d31560: i32 = or 0x2d31c60, 0x2d31760 [ID=-3]

    0x2d31b60: <multiple use>
  0x2d31360: i32,ch = load 0x2d31a60, 0x2d31560, 0x2d31b60<LD4[%3](align=8)> [ORD=7] [ID=-3]

  0x2d31d60: i32 = GlobalAddress<[2 x i32]* @redefine_out_b> 0 [ORD=8] [ID=-3]

    0x2d31360: <multiple use>
    0x2d31360: <multiple use>
    0x2d31d60: <multiple use>
    0x2d31b60: <multiple use>
  0x2d31f60: ch = store 0x2d31360:1, 0x2d31360, 0x2d31d60, 0x2d31b60<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9] [ID=-3]

    0x2d31f60: <multiple use>
    0x2d31260: <multiple use>
    0x2d31b60: <multiple use>
  0x2d32060: i32,ch = load 0x2d31f60, 0x2d31260, 0x2d31b60<LD4[%1]> [ORD=10] [ID=-3]

    0x2d31f60: <multiple use>
      0x2d32060: <multiple use>
      0x2d3dfd0: i32 = Constant<12> [ORD=11] [ID=-3]

    0x2d3e0d0: i32 = add 0x2d32060, 0x2d3dfd0 [ORD=11] [ID=-3]

    0x2d31b60: <multiple use>
  0x2d3e1d0: i32,ch = load 0x2d31f60, 0x2d3e0d0, 0x2d31b60<LD4[%6]> [ORD=12] [ID=-3]

      0x2d32060: <multiple use>
      0x2d3e1d0: <multiple use>
    0x2d3e5d0: ch = TokenFactor 0x2d32060:1, 0x2d3e1d0:1 [ORD=14] [ID=-3]

    0x2d3e1d0: <multiple use>
      0x2d31d60: <multiple use>
      0x2d3e3d0: i32 = Constant<4> [ORD=13] [ID=-3]

    0x2d3e4d0: i32 = add 0x2d31d60, 0x2d3e3d0 [ORD=13] [ID=-3]

    0x2d31b60: <multiple use>
  0x2d3e6d0: ch = store 0x2d3e5d0, 0x2d3e1d0, 0x2d3e4d0, 0x2d31b60<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=14] [ID=-3]


Legalized selection DAG: BB#0 'redefine_start2:redefine_start2.newName01'
SelectionDAG has 22 nodes:
  0x2d31c60: i32 = FrameIndex<-1> [ORD=4] [ID=1]

  0x2d31b60: i32 = undef [ORD=4] [ID=2]

  0x2d31260: i32 = FrameIndex<0> [ORD=4] [ID=3]

      0x2d13c48: ch = EntryToken [ORD=4] [ID=0]

      0x2d31c60: <multiple use>
      0x2d31260: <multiple use>
      0x2d31b60: <multiple use>
    0x2d31a60: ch = store 0x2d13c48, 0x2d31c60, 0x2d31260, 0x2d31b60<ST4[%1]> [ORD=4] [ID=8]

      0x2d31c60: <multiple use>
      0x2d31760: i32 = Constant<8> [ORD=6] [ID=4]

    0x2d31560: i32 = or 0x2d31c60, 0x2d31760 [ID=9]

    0x2d31b60: <multiple use>
  0x2d31360: i32,ch = load 0x2d31a60, 0x2d31560, 0x2d31b60<LD4[%3](align=8)> [ORD=7] [ID=11]

    0x2d31360: <multiple use>
    0x2d31360: <multiple use>
    0x2d31860: <multiple use>
    0x2d31b60: <multiple use>
  0x2d31f60: ch = store 0x2d31360:1, 0x2d31360, 0x2d31860, 0x2d31b60<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9] [ID=12]

    0x2d31f60: <multiple use>
    0x2d31260: <multiple use>
    0x2d31b60: <multiple use>
  0x2d32060: i32,ch = load 0x2d31f60, 0x2d31260, 0x2d31b60<LD4[%1]> [ORD=10] [ID=13]

    0x2d31f60: <multiple use>
      0x2d32060: <multiple use>
      0x2d3dfd0: i32 = Constant<12> [ORD=11] [ID=6]

    0x2d3e0d0: i32 = add 0x2d32060, 0x2d3dfd0 [ORD=11] [ID=14]

    0x2d31b60: <multiple use>
  0x2d3e1d0: i32,ch = load 0x2d31f60, 0x2d3e0d0, 0x2d31b60<LD4[%6]> [ORD=12] [ID=15]

      0x2d31660: i32 = TargetGlobalAddress<[2 x i32]* @redefine_out_b> 0 [TF=2]

    0x2d31e60: i32 = REDEFINEISD::Hi 0x2d31660

      0x2d31460: i32 = TargetGlobalAddress<[2 x i32]* @redefine_out_b> 0 [TF=3]

    0x2d31960: i32 = REDEFINEISD::Lo 0x2d31460

  0x2d31860: i32 = add 0x2d31e60, 0x2d31960

      0x2d32060: <multiple use>
      0x2d3e1d0: <multiple use>
    0x2d3e5d0: ch = TokenFactor 0x2d32060:1, 0x2d3e1d0:1 [ORD=14] [ID=16]

    0x2d3e1d0: <multiple use>
      0x2d31860: <multiple use>
      0x2d3e3d0: i32 = Constant<4> [ORD=13] [ID=7]

    0x2d3e4d0: i32 = add 0x2d31860, 0x2d3e3d0 [ORD=13] [ID=10]

    0x2d31b60: <multiple use>
  0x2d3e6d0: ch = store 0x2d3e5d0, 0x2d3e1d0, 0x2d3e4d0, 0x2d31b60<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=14] [ID=17]


Optimized legalized selection DAG: BB#0 'redefine_start2:redefine_start2.newName01'
SelectionDAG has 22 nodes:
  0x2d31c60: i32 = FrameIndex<-1> [ORD=4] [ID=1]

  0x2d31b60: i32 = undef [ORD=4] [ID=2]

  0x2d31260: i32 = FrameIndex<0> [ORD=4] [ID=3]

      0x2d13c48: ch = EntryToken [ORD=4] [ID=0]

      0x2d31c60: <multiple use>
      0x2d31260: <multiple use>
      0x2d31b60: <multiple use>
    0x2d31a60: ch = store 0x2d13c48, 0x2d31c60, 0x2d31260, 0x2d31b60<ST4[%1]> [ORD=4] [ID=8]

      0x2d31c60: <multiple use>
      0x2d31760: i32 = Constant<8> [ORD=6] [ID=4]

    0x2d31560: i32 = or 0x2d31c60, 0x2d31760 [ID=9]

    0x2d31b60: <multiple use>
  0x2d31360: i32,ch = load 0x2d31a60, 0x2d31560, 0x2d31b60<LD4[%3](align=8)> [ORD=7] [ID=11]

    0x2d31360: <multiple use>
    0x2d31360: <multiple use>
    0x2d31860: <multiple use>
    0x2d31b60: <multiple use>
  0x2d31f60: ch = store 0x2d31360:1, 0x2d31360, 0x2d31860, 0x2d31b60<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9] [ID=12]

    0x2d31f60: <multiple use>
    0x2d31260: <multiple use>
    0x2d31b60: <multiple use>
  0x2d32060: i32,ch = load 0x2d31f60, 0x2d31260, 0x2d31b60<LD4[%1]> [ORD=10] [ID=13]

    0x2d31f60: <multiple use>
      0x2d32060: <multiple use>
      0x2d3dfd0: i32 = Constant<12> [ORD=11] [ID=6]

    0x2d3e0d0: i32 = add 0x2d32060, 0x2d3dfd0 [ORD=11] [ID=14]

    0x2d31b60: <multiple use>
  0x2d3e1d0: i32,ch = load 0x2d31f60, 0x2d3e0d0, 0x2d31b60<LD4[%6]> [ORD=12] [ID=15]

      0x2d31660: i32 = TargetGlobalAddress<[2 x i32]* @redefine_out_b> 0 [TF=2]

    0x2d31e60: i32 = REDEFINEISD::Hi 0x2d31660

      0x2d31460: i32 = TargetGlobalAddress<[2 x i32]* @redefine_out_b> 0 [TF=3]

    0x2d31960: i32 = REDEFINEISD::Lo 0x2d31460

  0x2d31860: i32 = add 0x2d31e60, 0x2d31960

      0x2d32060: <multiple use>
      0x2d3e1d0: <multiple use>
    0x2d3e5d0: ch = TokenFactor 0x2d32060:1, 0x2d3e1d0:1 [ORD=14] [ID=16]

    0x2d3e1d0: <multiple use>
      0x2d31860: <multiple use>
      0x2d3e3d0: i32 = Constant<4> [ORD=13] [ID=7]

    0x2d3e4d0: i32 = add 0x2d31860, 0x2d3e3d0 [ORD=13] [ID=10]

    0x2d31b60: <multiple use>
  0x2d3e6d0: ch = store 0x2d3e5d0, 0x2d3e1d0, 0x2d3e4d0, 0x2d31b60<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=14] [ID=17]


===== Instruction selection begins: BB#0 'redefine_start2.newName01'
ISEL: Starting pattern match on root node: 0x2d3e6d0: ch = store 0x2d3e5d0, 0x2d3e1d0, 0x2d3e4d0, 0x2d31b60<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=14] [ID=21]

  Initial Opcode index to 178
  Morphed node: 0x2d3e6d0: ch = SW 0x2d3e1d0, 0x2d31860, 0x2d31d60, 0x2d3e5d0<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=14]

ISEL: Match complete!
=> 0x2d3e6d0: ch = SW 0x2d3e1d0, 0x2d31860, 0x2d31d60, 0x2d3e5d0<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=14]

=> 0x2d3e5d0: ch = TokenFactor 0x2d32060:1, 0x2d3e1d0:1 [ORD=14]

ISEL: Starting pattern match on root node: 0x2d3e1d0: i32,ch = load 0x2d31f60, 0x2d3e0d0, 0x2d31b60<LD4[%6]> [ORD=12] [ID=19]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2d3e1d0: i32,ch = LW 0x2d32060, 0x2d3e3d0, 0x2d31f60<Mem:LD4[%6]> [ORD=12]

ISEL: Match complete!
=> 0x2d3e1d0: i32,ch = LW 0x2d32060, 0x2d3e3d0, 0x2d31f60<Mem:LD4[%6]> [ORD=12]

ISEL: Starting pattern match on root node: 0x2d32060: i32,ch = load 0x2d31f60, 0x2d31260, 0x2d31b60<LD4[%1]> [ORD=10] [ID=17]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2d32060: i32,ch = LW 0x2d31260, 0x2d3dfd0, 0x2d31f60<Mem:LD4[%1]> [ORD=10]

ISEL: Match complete!
=> 0x2d32060: i32,ch = LW 0x2d31260, 0x2d3dfd0, 0x2d31f60<Mem:LD4[%1]> [ORD=10]

ISEL: Starting pattern match on root node: 0x2d31f60: ch = store 0x2d31360:1, 0x2d31360, 0x2d31860, 0x2d31b60<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9] [ID=15]

  Initial Opcode index to 178
  Morphed node: 0x2d31f60: ch = SW 0x2d31360, 0x2d31860, 0x2d3dfd0, 0x2d31360:1<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9]

ISEL: Match complete!
=> 0x2d31f60: ch = SW 0x2d31360, 0x2d31860, 0x2d3dfd0, 0x2d31360:1<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9]

ISEL: Starting pattern match on root node: 0x2d31860: i32 = add 0x2d31e60, 0x2d31960 [ID=14]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x2d31860: i32 = ADD 0x2d31960, 0x2d31e60

ISEL: Match complete!
=> 0x2d31860: i32 = ADD 0x2d31960, 0x2d31e60

ISEL: Starting pattern match on root node: 0x2d31360: i32,ch = load 0x2d31a60, 0x2d31560, 0x2d31b60<LD4[%3](align=8)> [ORD=7] [ID=13]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2d31360: i32,ch = LW 0x2d31c60, 0x2d3e2d0, 0x2d31a60<Mem:LD4[%3](align=8)> [ORD=7]

ISEL: Match complete!
=> 0x2d31360: i32,ch = LW 0x2d31c60, 0x2d3e2d0, 0x2d31a60<Mem:LD4[%3](align=8)> [ORD=7]

ISEL: Starting pattern match on root node: 0x2d31960: i32 = REDEFINEISD::Lo 0x2d31460 [ID=12]

  Initial Opcode index to 1204
  Morphed node: 0x2d31960: i32 = ADDI 0x2d31760, 0x2d31460

ISEL: Match complete!
=> 0x2d31960: i32 = ADDI 0x2d31760, 0x2d31460

ISEL: Starting pattern match on root node: 0x2d31e60: i32 = REDEFINEISD::Hi 0x2d31660 [ID=11]

  Initial Opcode index to 1186
  Morphed node: 0x2d31e60: i32 = LUI 0x2d31660

ISEL: Match complete!
=> 0x2d31e60: i32 = LUI 0x2d31660

ISEL: Starting pattern match on root node: 0x2d31a60: ch = store 0x2d13c48, 0x2d31c60, 0x2d31260, 0x2d31b60<ST4[%1]> [ORD=4] [ID=9]

  Initial Opcode index to 178
  Morphed node: 0x2d31a60: ch = SW 0x2d31c60, 0x2d31260, 0x2d3dfd0, 0x2d13c48<Mem:ST4[%1]> [ORD=4]

ISEL: Match complete!
=> 0x2d31a60: ch = SW 0x2d31c60, 0x2d31260, 0x2d3dfd0, 0x2d13c48<Mem:ST4[%1]> [ORD=4]

=> 0x2d31460: i32 = TargetGlobalAddress<[2 x i32]* @redefine_out_b> 0 [TF=3]

=> 0x2d31660: i32 = TargetGlobalAddress<[2 x i32]* @redefine_out_b> 0 [TF=2]

=> 0x2d13c48: ch = EntryToken [ORD=4]

===== Instruction selection ends:
Selected selection DAG: BB#0 'redefine_start2:redefine_start2.newName01'
SelectionDAG has 23 nodes:
    0x2d3ded0: <multiple use>
    0x2d3e2d0: i32 = TargetConstant<8>

      0x2d3ded0: <multiple use>
      0x2d31560: <multiple use>
      0x2d3dfd0: <multiple use>
      0x2d13c48: ch = EntryToken [ORD=4]

    0x2d31a60: ch = SW 0x2d3ded0, 0x2d31560, 0x2d3dfd0, 0x2d13c48<Mem:ST4[%1]> [ORD=4]

  0x2d31360: i32,ch = LW 0x2d3ded0, 0x2d3e2d0, 0x2d31a60<Mem:LD4[%3](align=8)> [ORD=7]

      0x2d31760: i32 = Register %zero

      0x2d31460: i32 = TargetGlobalAddress<[2 x i32]* @redefine_out_b> 0 [TF=3]

    0x2d31960: i32 = ADDI 0x2d31760, 0x2d31460

      0x2d31660: i32 = TargetGlobalAddress<[2 x i32]* @redefine_out_b> 0 [TF=2]

    0x2d31e60: i32 = LUI 0x2d31660

  0x2d31860: i32 = ADD 0x2d31960, 0x2d31e60

    0x2d31360: <multiple use>
    0x2d31860: <multiple use>
    0x2d3dfd0: <multiple use>
    0x2d31360: <multiple use>
  0x2d31f60: ch = SW 0x2d31360, 0x2d31860, 0x2d3dfd0, 0x2d31360:1<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9]

    0x2d31560: <multiple use>
    0x2d3dfd0: <multiple use>
    0x2d31f60: <multiple use>
  0x2d32060: i32,ch = LW 0x2d31560, 0x2d3dfd0, 0x2d31f60<Mem:LD4[%1]> [ORD=10]

    0x2d32060: <multiple use>
    0x2d3e3d0: i32 = TargetConstant<12>

    0x2d31f60: <multiple use>
  0x2d3e1d0: i32,ch = LW 0x2d32060, 0x2d3e3d0, 0x2d31f60<Mem:LD4[%6]> [ORD=12]

  0x2d3dfd0: i32 = TargetConstant<0>

  0x2d3e0d0: i32 = Register %t5

    0x2d3e0d0: <multiple use>
    0x2d3e4d0: i32 = TargetFrameIndex<-1>

  0x2d3ded0: i32 = ADDI 0x2d3e0d0, 0x2d3e4d0 [ORD=4]

    0x2d3e0d0: <multiple use>
    0x2d31b60: i32 = TargetFrameIndex<0>

  0x2d31560: i32 = ADDI 0x2d3e0d0, 0x2d31b60 [ORD=4]

    0x2d3e1d0: <multiple use>
    0x2d31860: <multiple use>
    0x2d31d60: i32 = TargetConstant<4>

      0x2d32060: <multiple use>
      0x2d3e1d0: <multiple use>
    0x2d3e5d0: ch = TokenFactor 0x2d32060:1, 0x2d3e1d0:1 [ORD=14]

  0x2d3e6d0: ch = SW 0x2d3e1d0, 0x2d31860, 0x2d31d60, 0x2d3e5d0<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=14]


********** List Scheduling BB#0 'redefine_start2.newName01' **********
SU(0): 0x2d3e6d0: ch = SW 0x2d3e1d0, 0x2d31860, 0x2d31d60, 0x2d3e5d0<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=14] [ID=0]

  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
   val SU(11): Latency=1
   val SU(8): Latency=1
   ch  SU(1): Latency=0

SU(1): 0x2d3e5d0: ch = TokenFactor 0x2d32060:1, 0x2d3e1d0:1 [ORD=14] [ID=1]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
   ch  SU(2): Latency=1
   ch  SU(11): Latency=1
  Successors:
   ch  SU(0): Latency=0

SU(2): 0x2d32060: i32,ch = LW 0x2d31560, 0x2d3dfd0, 0x2d31f60<Mem:LD4[%1]> [ORD=10] [ID=2]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
   val SU(7): Latency=1
   ch  SU(3): Latency=1
  Successors:
   ch  SU(1): Latency=1
   val SU(11): Latency=1

SU(3): 0x2d31f60: ch = SW 0x2d31360, 0x2d31860, 0x2d3dfd0, 0x2d31360:1<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9] [ID=3]

  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 3
  Predecessors:
   val SU(4): Latency=1
   val SU(8): Latency=1
   ch  SU(4): Latency=1
  Successors:
   ch  SU(2): Latency=1
   ch  SU(11): Latency=1

SU(4): 0x2d31360: i32,ch = LW 0x2d3ded0, 0x2d3e2d0, 0x2d31a60<Mem:LD4[%3](align=8)> [ORD=7] [ID=4]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 4
  Predecessors:
   val SU(6): Latency=1
   ch  SU(5): Latency=1
  Successors:
   val SU(3): Latency=1
   ch  SU(3): Latency=1

SU(5): 0x2d31a60: ch = SW 0x2d3ded0, 0x2d31560, 0x2d3dfd0, 0x2d13c48<Mem:ST4[%1]> [ORD=4] [ID=5]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 5
  Predecessors:
   val SU(6): Latency=1
   val SU(7): Latency=1
  Successors:
   ch  SU(4): Latency=1

SU(6): 0x2d3ded0: i32 = ADDI 0x2d3e0d0, 0x2d3e4d0 [ORD=4] [ID=6]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
   val SU(4): Latency=1
   val SU(5): Latency=1

SU(7): 0x2d31560: i32 = ADDI 0x2d3e0d0, 0x2d31b60 [ORD=4] [ID=7]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
   val SU(2): Latency=1
   val SU(5): Latency=1

SU(8): 0x2d31860: i32 = ADD 0x2d31960, 0x2d31e60 [ID=8]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
   val SU(10): Latency=1
   val SU(9): Latency=1
  Successors:
   val SU(0): Latency=1
   val SU(3): Latency=1

SU(9): 0x2d31e60: i32 = LUI 0x2d31660 [ID=9]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
   val SU(8): Latency=1

SU(10): 0x2d31960: i32 = ADDI 0x2d31760, 0x2d31460 [ID=10]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
   val SU(8): Latency=1

SU(11): 0x2d3e1d0: i32,ch = LW 0x2d32060, 0x2d3e3d0, 0x2d31f60<Mem:LD4[%6]> [ORD=12] [ID=11]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
   val SU(2): Latency=1
   ch  SU(3): Latency=1
  Successors:
   val SU(0): Latency=1
   ch  SU(1): Latency=1


Examining Available:
Height 0: SU(0): 0x2d3e6d0: ch = SW 0x2d3e1d0, 0x2d31860, 0x2d31d60, 0x2d3e5d0<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=14] [ID=0]


*** Scheduling [0]: SU(0): 0x2d3e6d0: ch = SW 0x2d3e1d0, 0x2d31860, 0x2d31d60, 0x2d3e5d0<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=14] [ID=0]


Examining Available:
Height 0: SU(1): 0x2d3e5d0: ch = TokenFactor 0x2d32060:1, 0x2d3e1d0:1 [ORD=14] [ID=1]


*** Scheduling [1]: SU(1): 0x2d3e5d0: ch = TokenFactor 0x2d32060:1, 0x2d3e1d0:1 [ORD=14] [ID=1]


Examining Available:
Height 2: SU(11): 0x2d3e1d0: i32,ch = LW 0x2d32060, 0x2d3e3d0, 0x2d31f60<Mem:LD4[%6]> [ORD=12] [ID=11]


*** Scheduling [2]: SU(11): 0x2d3e1d0: i32,ch = LW 0x2d32060, 0x2d3e3d0, 0x2d31f60<Mem:LD4[%6]> [ORD=12] [ID=11]


Examining Available:
Height 3: SU(2): 0x2d32060: i32,ch = LW 0x2d31560, 0x2d3dfd0, 0x2d31f60<Mem:LD4[%1]> [ORD=10] [ID=2]


*** Scheduling [3]: SU(2): 0x2d32060: i32,ch = LW 0x2d31560, 0x2d3dfd0, 0x2d31f60<Mem:LD4[%1]> [ORD=10] [ID=2]


Examining Available:
Height 4: SU(3): 0x2d31f60: ch = SW 0x2d31360, 0x2d31860, 0x2d3dfd0, 0x2d31360:1<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9] [ID=3]


*** Scheduling [4]: SU(3): 0x2d31f60: ch = SW 0x2d31360, 0x2d31860, 0x2d3dfd0, 0x2d31360:1<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9] [ID=3]


Examining Available:
Height 5: SU(8): 0x2d31860: i32 = ADD 0x2d31960, 0x2d31e60 [ID=8]

Height 5: SU(4): 0x2d31360: i32,ch = LW 0x2d3ded0, 0x2d3e2d0, 0x2d31a60<Mem:LD4[%3](align=8)> [ORD=7] [ID=4]


*** Scheduling [5]: SU(8): 0x2d31860: i32 = ADD 0x2d31960, 0x2d31e60 [ID=8]


Examining Available:
Height 6: SU(10): 0x2d31960: i32 = ADDI 0x2d31760, 0x2d31460 [ID=10]

Height 6: SU(9): 0x2d31e60: i32 = LUI 0x2d31660 [ID=9]

Height 5: SU(4): 0x2d31360: i32,ch = LW 0x2d3ded0, 0x2d3e2d0, 0x2d31a60<Mem:LD4[%3](align=8)> [ORD=7] [ID=4]


*** Scheduling [6]: SU(10): 0x2d31960: i32 = ADDI 0x2d31760, 0x2d31460 [ID=10]


Examining Available:
Height 6: SU(9): 0x2d31e60: i32 = LUI 0x2d31660 [ID=9]

Height 5: SU(4): 0x2d31360: i32,ch = LW 0x2d3ded0, 0x2d3e2d0, 0x2d31a60<Mem:LD4[%3](align=8)> [ORD=7] [ID=4]


*** Scheduling [7]: SU(9): 0x2d31e60: i32 = LUI 0x2d31660 [ID=9]


Examining Available:
Height 5: SU(4): 0x2d31360: i32,ch = LW 0x2d3ded0, 0x2d3e2d0, 0x2d31a60<Mem:LD4[%3](align=8)> [ORD=7] [ID=4]


*** Scheduling [8]: SU(4): 0x2d31360: i32,ch = LW 0x2d3ded0, 0x2d3e2d0, 0x2d31a60<Mem:LD4[%3](align=8)> [ORD=7] [ID=4]


Examining Available:
Height 9: SU(5): 0x2d31a60: ch = SW 0x2d3ded0, 0x2d31560, 0x2d3dfd0, 0x2d13c48<Mem:ST4[%1]> [ORD=4] [ID=5]


*** Scheduling [9]: SU(5): 0x2d31a60: ch = SW 0x2d3ded0, 0x2d31560, 0x2d3dfd0, 0x2d13c48<Mem:ST4[%1]> [ORD=4] [ID=5]


Examining Available:
Height 10: SU(6): 0x2d3ded0: i32 = ADDI 0x2d3e0d0, 0x2d3e4d0 [ORD=4] [ID=6]

Height 10: SU(7): 0x2d31560: i32 = ADDI 0x2d3e0d0, 0x2d31b60 [ORD=4] [ID=7]


*** Scheduling [10]: SU(6): 0x2d3ded0: i32 = ADDI 0x2d3e0d0, 0x2d3e4d0 [ORD=4] [ID=6]


Examining Available:
Height 10: SU(7): 0x2d31560: i32 = ADDI 0x2d3e0d0, 0x2d31b60 [ORD=4] [ID=7]


*** Scheduling [11]: SU(7): 0x2d31560: i32 = ADDI 0x2d3e0d0, 0x2d31b60 [ORD=4] [ID=7]

*** Final schedule ***
SU(7): 0x2d31560: i32 = ADDI 0x2d3e0d0, 0x2d31b60 [ORD=4] [ID=7]

SU(6): 0x2d3ded0: i32 = ADDI 0x2d3e0d0, 0x2d3e4d0 [ORD=4] [ID=6]

SU(5): 0x2d31a60: ch = SW 0x2d3ded0, 0x2d31560, 0x2d3dfd0, 0x2d13c48<Mem:ST4[%1]> [ORD=4] [ID=5]

SU(4): 0x2d31360: i32,ch = LW 0x2d3ded0, 0x2d3e2d0, 0x2d31a60<Mem:LD4[%3](align=8)> [ORD=7] [ID=4]

SU(9): 0x2d31e60: i32 = LUI 0x2d31660 [ID=9]

SU(10): 0x2d31960: i32 = ADDI 0x2d31760, 0x2d31460 [ID=10]

SU(8): 0x2d31860: i32 = ADD 0x2d31960, 0x2d31e60 [ID=8]

SU(3): 0x2d31f60: ch = SW 0x2d31360, 0x2d31860, 0x2d3dfd0, 0x2d31360:1<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9] [ID=3]

SU(2): 0x2d32060: i32,ch = LW 0x2d31560, 0x2d3dfd0, 0x2d31f60<Mem:LD4[%1]> [ORD=10] [ID=2]

SU(11): 0x2d3e1d0: i32,ch = LW 0x2d32060, 0x2d3e3d0, 0x2d31f60<Mem:LD4[%6]> [ORD=12] [ID=11]

SU(1): 0x2d3e5d0: ch = TokenFactor 0x2d32060:1, 0x2d3e1d0:1 [ORD=14] [ID=1]

SU(0): 0x2d3e6d0: ch = SW 0x2d3e1d0, 0x2d31860, 0x2d31d60, 0x2d3e5d0<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=14] [ID=0]


Total amount of phi nodes to update: 0
Initial selection DAG: BB#1 'redefine_start2:redefine_start2.return'
SelectionDAG has 1 nodes:
  0x2d13c48: ch = EntryToken


Optimized lowered selection DAG: BB#1 'redefine_start2:redefine_start2.return'
SelectionDAG has 1 nodes:
  0x2d13c48: ch = EntryToken


Legally typed node: 0x2d13c48: ch = EntryToken [ID=0]

Legally typed node: 0x7fff0c793220: ch = handlenode 0x2d13c48 [ID=0]

Type-legalized selection DAG: BB#1 'redefine_start2:redefine_start2.return'
SelectionDAG has 1 nodes:
  0x2d13c48: ch = EntryToken [ID=-3]


Legalized selection DAG: BB#1 'redefine_start2:redefine_start2.return'
SelectionDAG has 1 nodes:
  0x2d13c48: ch = EntryToken [ID=0]


Optimized legalized selection DAG: BB#1 'redefine_start2:redefine_start2.return'
SelectionDAG has 1 nodes:
  0x2d13c48: ch = EntryToken [ID=0]


===== Instruction selection begins: BB#1 'redefine_start2.return'
=> 0x2d13c48: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: BB#1 'redefine_start2:redefine_start2.return'
SelectionDAG has 1 nodes:
  0x2d13c48: ch = EntryToken


********** List Scheduling BB#1 'redefine_start2.return' **********
*** Final schedule ***

Total amount of phi nodes to update: 0

*** Tail-duplicating BB#1

Merging into block: BB#0: derived from LLVM BB %redefine_start2.newName01
	%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
	%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
	SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
	%vreg2<def> = LW %vreg1, 8; mem:LD4[%3](align=8) GR32Bit:%vreg2,%vreg1
	%vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
	%vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
	%vreg5<def> = ADD %vreg4<kill>, %vreg3<kill>; GR32Bit:%vreg5,%vreg4,%vreg3
	SW %vreg2<kill>, %vreg5, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
	%vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
	%vreg7<def> = LW %vreg6<kill>, 12; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
	SW %vreg7<kill>, %vreg5, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5
    Successors according to CFG: BB#1
From MBB: BB#1: derived from LLVM BB %redefine_start2.return
    Predecessors according to CFG: BB#0

Removing MBB: BB#1: derived from LLVM BB %redefine_start2.return
# Machine code for function redefine_start2: SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start2.newName01
16B		%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
48B		SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
64B		%vreg2<def> = LW %vreg1, 8; mem:LD4[%3](align=8) GR32Bit:%vreg2,%vreg1
80B		%vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
96B		%vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
112B		%vreg5<def> = ADD %vreg4<kill>, %vreg3<kill>; GR32Bit:%vreg5,%vreg4,%vreg3
128B		SW %vreg2<kill>, %vreg5, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
144B		%vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
160B		%vreg7<def> = LW %vreg6<kill>, 12; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
176B		SW %vreg7<kill>, %vreg5, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5

# End machine code for function redefine_start2.

********** Stack Coloring **********
********** Function: redefine_start2
Found 0 markers and 1 slots
Slot structure:
Slot #0 - 4 bytes.
Total Stack size: 4 bytes

Will not try to merge slots.
Removed 0 markers.
******** Pre-regalloc Machine LICM: redefine_start2 ********
******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: redefine_start2
********** PROCESS IMPLICIT DEFS **********
********** Function: redefine_start2
********** REWRITING TWO-ADDR INSTRS **********
********** Function: redefine_start2
# Machine code for function redefine_start2: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start2.newName01
16B		%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
48B		SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
64B		%vreg2<def> = LW %vreg1<kill>, 8; mem:LD4[%3](align=8) GR32Bit:%vreg2,%vreg1
80B		%vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
96B		%vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
112B		%vreg5<def> = ADD %vreg4<kill>, %vreg3<kill>; GR32Bit:%vreg5,%vreg4,%vreg3
128B		SW %vreg2<kill>, %vreg5, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
144B		%vreg6<def> = LW %vreg0<kill>, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
160B		%vreg7<def> = LW %vreg6<kill>, 12; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
176B		SW %vreg7<kill>, %vreg5<kill>, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5

# End machine code for function redefine_start2.

Computing live-in reg-units in ABI blocks.
Created 0 new intervals.
********** INTERVALS **********
%vreg0 = [16r,144r:0)  0@16r
%vreg1 = [32r,64r:0)  0@32r
%vreg2 = [64r,128r:0)  0@64r
%vreg3 = [80r,112r:0)  0@80r
%vreg4 = [96r,112r:0)  0@96r
%vreg5 = [112r,176r:0)  0@112r
%vreg6 = [144r,160r:0)  0@144r
%vreg7 = [160r,176r:0)  0@160r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start2: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start2.newName01
16B		%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
48B		SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
64B		%vreg2<def> = LW %vreg1, 8; mem:LD4[%3](align=8) GR32Bit:%vreg2,%vreg1
80B		%vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
96B		%vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
112B		%vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
128B		SW %vreg2, %vreg5, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
144B		%vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
160B		%vreg7<def> = LW %vreg6, 12; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
176B		SW %vreg7, %vreg5, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5

# End machine code for function redefine_start2.

********** SIMPLE REGISTER COALESCING **********
********** Function: redefine_start2
********** JOINING INTERVALS ***********
redefine_start2.newName01:
Trying to inflate 0 regs.
********** INTERVALS **********
%vreg0 = [16r,144r:0)  0@16r
%vreg1 = [32r,64r:0)  0@32r
%vreg2 = [64r,128r:0)  0@64r
%vreg3 = [80r,112r:0)  0@80r
%vreg4 = [96r,112r:0)  0@96r
%vreg5 = [112r,176r:0)  0@112r
%vreg6 = [144r,160r:0)  0@144r
%vreg7 = [160r,176r:0)  0@160r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start2: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start2.newName01
16B		%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
48B		SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
64B		%vreg2<def> = LW %vreg1, 8; mem:LD4[%3](align=8) GR32Bit:%vreg2,%vreg1
80B		%vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
96B		%vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
112B		%vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
128B		SW %vreg2, %vreg5, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
144B		%vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
160B		%vreg7<def> = LW %vreg6, 12; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
176B		SW %vreg7, %vreg5, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5

# End machine code for function redefine_start2.

Before MISched:
# Machine code for function redefine_start2: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %redefine_start2.newName01
	%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
	%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
	SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
	%vreg2<def> = LW %vreg1, 8; mem:LD4[%3](align=8) GR32Bit:%vreg2,%vreg1
	%vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
	%vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
	%vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
	SW %vreg2, %vreg5, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
	%vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
	%vreg7<def> = LW %vreg6, 12; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
	SW %vreg7, %vreg5, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5

# End machine code for function redefine_start2.


-------------
Starting new basic block BB#0
********** MI Scheduling **********
redefine_start2:BB#0 redefine_start2.newName01
  From: %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
    To: End Remaining: 0
Max Pressure: GR32Bit=4
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 4
Excess PSets: 
3 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 1
  SU(4) in tree 1
  SU(5) in tree 1
  SU(6) in tree 1
  SU(7) in tree 1
  SU(8) in tree 2
  SU(9) in tree 2
  SU(10) in tree 2
SU(0):   %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 23
  Successors:
   val SU(8): Latency=5 Reg=%vreg0
   val SU(2): Latency=5 Reg=%vreg0

SU(1):   %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
   val SU(3): Latency=5 Reg=%vreg1
   val SU(2): Latency=4 Reg=%vreg1

SU(2):   SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 13
  Depth              : 5
  Height             : 18
  Predecessors:
   val SU(1): Latency=4 Reg=%vreg1
   val SU(0): Latency=5 Reg=%vreg0
  Successors:
   ch  SU(8): Latency=1
   ch  SU(9): Latency=1
   ch  SU(3): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(3):   %vreg2<def> = LW %vreg1, 8; mem:LD4[%3](align=8) GR32Bit:%vreg2,%vreg1
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 6
  Height             : 5
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg1
   ch  SU(2): Latency=1
  Successors:
   val SU(7): Latency=2 Reg=%vreg2
   ch  SU(7): Latency=0

SU(4):   %vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
   val SU(6): Latency=5 Reg=%vreg3

SU(5):   %vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
   val SU(6): Latency=5 Reg=%vreg4

SU(6):   %vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 8
  Predecessors:
   val SU(5): Latency=5 Reg=%vreg4
   val SU(4): Latency=5 Reg=%vreg3
  Successors:
   val SU(10): Latency=5 Reg=%vreg5
   val SU(7): Latency=5 Reg=%vreg5

SU(7):   SW %vreg2, %vreg5, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 13
  Depth              : 10
  Height             : 3
  Predecessors:
   val SU(3): Latency=2 Reg=%vreg2
   val SU(6): Latency=5 Reg=%vreg5
   ch  SU(3): Latency=0
  Successors:
   ch  SU(10): Latency=0
   ch  SU(9): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(8):   %vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 6
  Height             : 17
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg0
   ch  SU(2): Latency=1
  Successors:
   val SU(9): Latency=15 Reg=%vreg6

SU(9):   %vreg7<def> = LW %vreg6, 12; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 21
  Height             : 2
  Predecessors:
   val SU(8): Latency=15 Reg=%vreg6
   ch  SU(7): Latency=1
   ch  SU(2): Latency=1
  Successors:
   val SU(10): Latency=2 Reg=%vreg7
   ch  SU(10): Latency=0

SU(10):   SW %vreg7, %vreg5, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 23
  Height             : 0
  Predecessors:
   val SU(9): Latency=2 Reg=%vreg7
   val SU(6): Latency=5 Reg=%vreg5
   ch  SU(9): Latency=0
   ch  SU(7): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 23
  Successors:
   val SU(8): Latency=5 Reg=%vreg0
   val SU(2): Latency=5 Reg=%vreg0

SU(1):   %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
   val SU(3): Latency=5 Reg=%vreg1
   val SU(2): Latency=4 Reg=%vreg1

SU(2):   SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 13
  Depth              : 5
  Height             : 18
  Predecessors:
   val SU(1): Latency=4 Reg=%vreg1
   val SU(0): Latency=5 Reg=%vreg0
  Successors:
   ch  SU(8): Latency=1
   ch  SU(9): Latency=1
   ch  SU(3): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(3):   %vreg2<def> = LW %vreg1, 8; mem:LD4[%3](align=8) GR32Bit:%vreg2,%vreg1
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 6
  Height             : 5
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg1
   ch  SU(2): Latency=1
  Successors:
   val SU(7): Latency=2 Reg=%vreg2
   ch  SU(7): Latency=0

SU(4):   %vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
   val SU(6): Latency=5 Reg=%vreg3

SU(5):   %vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
   val SU(6): Latency=5 Reg=%vreg4

SU(6):   %vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 8
  Predecessors:
   val SU(5): Latency=5 Reg=%vreg4
   val SU(4): Latency=5 Reg=%vreg3
  Successors:
   val SU(10): Latency=5 Reg=%vreg5
   val SU(7): Latency=5 Reg=%vreg5

SU(7):   SW %vreg2, %vreg5, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 10
  Height             : 3
  Predecessors:
   val SU(3): Latency=2 Reg=%vreg2
   val SU(6): Latency=5 Reg=%vreg5
   ch  SU(3): Latency=0
  Successors:
   ch  SU(10): Latency=0
   ch  SU(9): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(8):   %vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 6
  Height             : 17
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg0
   ch  SU(2): Latency=1
  Successors:
   val SU(9): Latency=15 Reg=%vreg6

SU(9):   %vreg7<def> = LW %vreg6, 12; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 21
  Height             : 2
  Predecessors:
   val SU(8): Latency=15 Reg=%vreg6
   ch  SU(7): Latency=1
   ch  SU(2): Latency=1
  Successors:
   val SU(10): Latency=2 Reg=%vreg7
   ch  SU(10): Latency=0

SU(10):   SW %vreg7, %vreg5, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 23
  Height             : 0
  Predecessors:
   val SU(9): Latency=2 Reg=%vreg7
   val SU(6): Latency=5 Reg=%vreg5
   ch  SU(9): Latency=0
   ch  SU(7): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(4)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
handleMove 80B -> 8B: %vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
     %vreg3:	[80r,112r:0)  0@80r
        -->	[8r,112r:0)  0@8r
  Tree: 2 @5
Pick node SU(5)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
handleMove 96B -> 12B: %vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
     %vreg4:	[96r,112r:0)  0@96r
        -->	[12r,112r:0)  0@12r
     zero:	EMPTY
        -->	EMPTY
Pick node SU(6)  ILP: 3 / 6 = 0.5 Tree: 1 @0
Scheduling %vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3

*** Renumbered SlotIndexes 12-28 ***
handleMove 112B -> 20B: %vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
     %vreg5:	[112r,176r:0)  0@112r
        -->	[20r,176r:0)  0@20r
     %vreg4:	[12r,112r:0)  0@12r
        -->	[12r,20r:0)  0@12r
     %vreg3:	[8r,112r:0)  0@8r
        -->	[8r,20r:0)  0@8r
Pick node SU(1)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
handleMove 32B -> 24B: %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
     %vreg1:	[32r,64r:0)  0@32r
        -->	[24r,64r:0)  0@24r
     t5:	EMPTY
        -->	EMPTY
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
Pick node SU(2)  ILP: 3 / 6 = 0.5 Tree: 0 @0
Scheduling SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
Pick node SU(3)  ILP: 1 / 7 = 0.142857 Tree: 1 @0
Scheduling %vreg2<def> = LW %vreg1, 8; mem:LD4[%3](align=8) GR32Bit:%vreg2,%vreg1
Pick node SU(7)  ILP: 5 / 11 = 0.454545 Tree: 1 @0
Scheduling SW %vreg2, %vreg5, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
Pick node SU(8)  ILP: 1 / 7 = 0.142857 Tree: 2 @5
Scheduling %vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
  Tree: 1 @5
Pick node SU(9)  ILP: 2 / 22 = 0.0909091 Tree: 2 @5
Scheduling %vreg7<def> = LW %vreg6, 12; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
Pick node SU(10)  ILP: 3 / 24 = 0.125 Tree: 2 @5
Scheduling SW %vreg7, %vreg5, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5
*** Final schedule for BB#0 ***
SU(4):   %vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
SU(5):   %vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
SU(6):   %vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
SU(1):   %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
SU(0):   %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
SU(2):   SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
SU(3):   %vreg2<def> = LW %vreg1, 8; mem:LD4[%3](align=8) GR32Bit:%vreg2,%vreg1
SU(7):   SW %vreg2, %vreg5, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
SU(8):   %vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
SU(9):   %vreg7<def> = LW %vreg6, 12; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
SU(10):   SW %vreg7, %vreg5, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5


*** Renumbered SlotIndexes 4-76 ***

*** Renumbered SlotIndexes 16-104 ***

*** Renumbered SlotIndexes 28-124 ***

*** Renumbered SlotIndexes 40-152 ***

*** Renumbered SlotIndexes 52-172 ***

*** Renumbered SlotIndexes 64-200 ***

*** Renumbered SlotIndexes 76-212 ***

*** Renumbered SlotIndexes 88-224 ***

*** Renumbered SlotIndexes 100-236 ***

*** Renumbered SlotIndexes 112-248 ***

*** Renumbered SlotIndexes 124-260 ***

*** Renumbered SlotIndexes 136-272 ***

*** Renumbered SlotIndexes 148-284 ***

*** Renumbered SlotIndexes 160-296 ***

*** Renumbered SlotIndexes 172-308 ***

*** Renumbered SlotIndexes 184-320 ***

*** Renumbered SlotIndexes 196-332 ***

*** Renumbered SlotIndexes 208-344 ***

*** Renumbered SlotIndexes 220-356 ***

*** Renumbered SlotIndexes 232-368 ***

*** Renumbered SlotIndexes 244-380 ***

*** Renumbered SlotIndexes 256-392 ***

*** Renumbered SlotIndexes 268-404 ***

*** Renumbered SlotIndexes 280-416 ***

*** Renumbered SlotIndexes 292-428 ***

*** Renumbered SlotIndexes 304-440 ***

*** Renumbered SlotIndexes 316-452 ***

*** Renumbered SlotIndexes 328-464 ***

*** Renumbered SlotIndexes 340-476 ***

*** Renumbered SlotIndexes 352-488 ***

*** Renumbered SlotIndexes 364-500 ***

*** Renumbered SlotIndexes 376-512 ***

*** Renumbered SlotIndexes 388-524 ***

*** Renumbered SlotIndexes 400-536 ***
Partitioning instructions of the region into multiple CEs
instr:  %vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
instr:  %vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
instr:  %vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
instr:  %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
instr:  %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
instr:  SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
instr:  %vreg2<def> = LW %vreg1, 8; mem:LD4[%3](align=8) GR32Bit:%vreg2,%vreg1
instr:  SW %vreg2, %vreg5, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
instr:  %vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
instr:  %vreg7<def> = LW %vreg6, 12; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
instr:  SW %vreg7, %vreg5, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
before falloc, state of bb0:BB#0: derived from LLVM BB %redefine_start2.newName01
	%vreg8<def> = ADD %t5, %zero; GR32Bit:%vreg8
	%vreg10<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg10
	%vreg11<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg11
	%vreg12<def> = SRLI %vreg11, 12; GR32Bit:%vreg12,%vreg11
	%vreg13<def> = ADD %vreg10, %vreg12; GR32Bit:%vreg13,%vreg10,%vreg12
	%vreg14<def> = ADDI %zero, 16; GR32Bit:%vreg14
	%vreg15<def> = SRLI %t5, 22; GR32Bit:%vreg15
	%vreg16<def> = SRLI %t5, 12; GR32Bit:%vreg16
	%vreg17<def> = ANDI %vreg16, 15; GR32Bit:%vreg17,%vreg16
	%vreg18<def> = SRLI %t5, 6; GR32Bit:%vreg18
	%vreg19<def> = ANDI %vreg18, 63; GR32Bit:%vreg19,%vreg18
	%vreg20<def> = ADDI %zero, 832; GR32Bit:%vreg20
	%vreg21<def> = MUL %vreg15, %vreg20; GR32Bit:%vreg21,%vreg15,%vreg20
	%vreg22<def> = ADDI %zero, 52; GR32Bit:%vreg22
	%vreg23<def> = MUL %vreg17, %vreg22; GR32Bit:%vreg23,%vreg17,%vreg22
	%vreg24<def> = ADD %vreg23, %vreg19; GR32Bit:%vreg24,%vreg23,%vreg19
	%vreg25<def> = ADD %vreg24, %vreg21; GR32Bit:%vreg25,%vreg24,%vreg21
	%vreg26<def> = MUL %vreg25, %vreg14; GR32Bit:%vreg26,%vreg25,%vreg14
	%vreg9<def> = ADD %vreg13, %vreg26; GR32Bit:%vreg9,%vreg13,%vreg26
	%vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
	%vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
	%vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
	%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
	%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
	SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
	%vreg2<def> = LW %vreg1, 8; mem:LD4[%3](align=8) GR32Bit:%vreg2,%vreg1
	SW %vreg2, %vreg5, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
	%vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
	%vreg7<def> = LW %vreg6, 12; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
	SW %vreg7, %vreg5, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5
	%vreg27<def> = ADD %t5, %zero; GR32Bit:%vreg27
	%vreg29<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg29
	%vreg30<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg30
	%vreg31<def> = SRLI %vreg30, 12; GR32Bit:%vreg31,%vreg30
	%vreg32<def> = ADD %vreg29, %vreg31; GR32Bit:%vreg32,%vreg29,%vreg31
	%vreg33<def> = ADDI %zero, 16; GR32Bit:%vreg33
	%vreg34<def> = SRLI %t5, 22; GR32Bit:%vreg34
	%vreg35<def> = SRLI %t5, 12; GR32Bit:%vreg35
	%vreg36<def> = ANDI %vreg35, 15; GR32Bit:%vreg36,%vreg35
	%vreg37<def> = SRLI %t5, 6; GR32Bit:%vreg37
	%vreg38<def> = ANDI %vreg37, 63; GR32Bit:%vreg38,%vreg37
	%vreg39<def> = ADDI %zero, 832; GR32Bit:%vreg39
	%vreg40<def> = MUL %vreg34, %vreg39; GR32Bit:%vreg40,%vreg34,%vreg39
	%vreg41<def> = ADDI %zero, 52; GR32Bit:%vreg41
	%vreg42<def> = MUL %vreg36, %vreg41; GR32Bit:%vreg42,%vreg36,%vreg41
	%vreg43<def> = ADD %vreg42, %vreg38; GR32Bit:%vreg43,%vreg42,%vreg38
	%vreg44<def> = ADD %vreg43, %vreg40; GR32Bit:%vreg44,%vreg43,%vreg40
	%vreg45<def> = MUL %vreg44, %vreg33; GR32Bit:%vreg45,%vreg44,%vreg33
	%vreg28<def> = ADD %vreg32, %vreg45; GR32Bit:%vreg28,%vreg32,%vreg45
	%vreg46<def> = ADD %t5, %zero; GR32Bit:%vreg46
	%vreg48<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg48
	%vreg49<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg49
	%vreg50<def> = SRLI %vreg49, 12; GR32Bit:%vreg50,%vreg49
	%vreg51<def> = ADD %vreg48, %vreg50; GR32Bit:%vreg51,%vreg48,%vreg50
	%vreg52<def> = ADDI %zero, 16; GR32Bit:%vreg52
	%vreg53<def> = SRLI %t5, 22; GR32Bit:%vreg53
	%vreg54<def> = SRLI %t5, 12; GR32Bit:%vreg54
	%vreg55<def> = ANDI %vreg54, 15; GR32Bit:%vreg55,%vreg54
	%vreg56<def> = SRLI %t5, 6; GR32Bit:%vreg56
	%vreg57<def> = ANDI %vreg56, 63; GR32Bit:%vreg57,%vreg56
	%vreg58<def> = ADDI %zero, 832; GR32Bit:%vreg58
	%vreg59<def> = MUL %vreg53, %vreg58; GR32Bit:%vreg59,%vreg53,%vreg58
	%vreg60<def> = ADDI %zero, 52; GR32Bit:%vreg60
	%vreg61<def> = MUL %vreg55, %vreg60; GR32Bit:%vreg61,%vreg55,%vreg60
	%vreg62<def> = ADD %vreg61, %vreg57; GR32Bit:%vreg62,%vreg61,%vreg57
	%vreg63<def> = ADD %vreg62, %vreg59; GR32Bit:%vreg63,%vreg62,%vreg59
	%vreg64<def> = MUL %vreg63, %vreg52; GR32Bit:%vreg64,%vreg63,%vreg52
	%vreg47<def> = ADD %vreg51, %vreg64; GR32Bit:%vreg47,%vreg51,%vreg64
	%vreg65<def> = ADD %t5, %zero; GR32Bit:%vreg65
	%vreg67<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg67
	%vreg68<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg68
	%vreg69<def> = SRLI %vreg68, 12; GR32Bit:%vreg69,%vreg68
	%vreg70<def> = ADD %vreg67, %vreg69; GR32Bit:%vreg70,%vreg67,%vreg69
	%vreg71<def> = ADDI %zero, 16; GR32Bit:%vreg71
	%vreg72<def> = SRLI %t5, 22; GR32Bit:%vreg72
	%vreg73<def> = SRLI %t5, 12; GR32Bit:%vreg73
	%vreg74<def> = ANDI %vreg73, 15; GR32Bit:%vreg74,%vreg73
	%vreg75<def> = SRLI %t5, 6; GR32Bit:%vreg75
	%vreg76<def> = ANDI %vreg75, 63; GR32Bit:%vreg76,%vreg75
	%vreg77<def> = ADDI %zero, 832; GR32Bit:%vreg77
	%vreg78<def> = MUL %vreg72, %vreg77; GR32Bit:%vreg78,%vreg72,%vreg77
	%vreg79<def> = ADDI %zero, 52; GR32Bit:%vreg79
	%vreg80<def> = MUL %vreg74, %vreg79; GR32Bit:%vreg80,%vreg74,%vreg79
	%vreg81<def> = ADD %vreg80, %vreg76; GR32Bit:%vreg81,%vreg80,%vreg76
	%vreg82<def> = ADD %vreg81, %vreg78; GR32Bit:%vreg82,%vreg81,%vreg78
	%vreg83<def> = MUL %vreg82, %vreg71; GR32Bit:%vreg83,%vreg82,%vreg71
	%vreg66<def> = ADD %vreg70, %vreg83; GR32Bit:%vreg66,%vreg70,%vreg83
Adding all fallocs first to avoid stalls due to sequential fallocs and fbinds
Adding writecm(for writing sync count to context frames) and fbind instructions
live end of child is itself
live end of child is itself
Adding localref sw instructions to hyperOp redefine_start2
Adding writecm instructions to hyperOp redefine_start2
Adding writecmp and sync instructions
Adding endHyperOp instructions to each pHyperOp

*** Renumbered SlotIndexes 412-548 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 424-560 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 436-572 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 448-584 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 460-596 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 472-608 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0
After Shuffling regions of basic block, state of BB#0:
BB#0: derived from LLVM BB %redefine_start2.newName01
	%vreg8<def> = ADD %t5, %zero; GR32Bit:%vreg8
	%vreg10<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg10
	%vreg11<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg11
	%vreg12<def> = SRLI %vreg11, 12; GR32Bit:%vreg12,%vreg11
	%vreg13<def> = ADD %vreg10, %vreg12; GR32Bit:%vreg13,%vreg10,%vreg12
	%vreg14<def> = ADDI %zero, 16; GR32Bit:%vreg14
	%vreg15<def> = SRLI %t5, 22; GR32Bit:%vreg15
	%vreg16<def> = SRLI %t5, 12; GR32Bit:%vreg16
	%vreg17<def> = ANDI %vreg16, 15; GR32Bit:%vreg17,%vreg16
	%vreg18<def> = SRLI %t5, 6; GR32Bit:%vreg18
	%vreg19<def> = ANDI %vreg18, 63; GR32Bit:%vreg19,%vreg18
	%vreg20<def> = ADDI %zero, 832; GR32Bit:%vreg20
	%vreg21<def> = MUL %vreg15, %vreg20; GR32Bit:%vreg21,%vreg15,%vreg20
	%vreg22<def> = ADDI %zero, 52; GR32Bit:%vreg22
	%vreg23<def> = MUL %vreg17, %vreg22; GR32Bit:%vreg23,%vreg17,%vreg22
	%vreg24<def> = ADD %vreg23, %vreg19; GR32Bit:%vreg24,%vreg23,%vreg19
	%vreg25<def> = ADD %vreg24, %vreg21; GR32Bit:%vreg25,%vreg24,%vreg21
	%vreg26<def> = MUL %vreg25, %vreg14; GR32Bit:%vreg26,%vreg25,%vreg14
	%vreg9<def> = ADD %vreg13, %vreg26; GR32Bit:%vreg9,%vreg13,%vreg26
	%vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
	%vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
	%vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
	%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
	%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
	SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
	%vreg2<def> = LW %vreg1, 8; mem:LD4[%3](align=8) GR32Bit:%vreg2,%vreg1
	SW %vreg2, %vreg5, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
	%vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
	%vreg7<def> = LW %vreg6, 12; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
	SW %vreg7, %vreg5, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5
	FDELETE %t4, 0
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg27<def> = ADD %t5, %zero; GR32Bit:%vreg27
	%vreg29<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg29
	%vreg30<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg30
	%vreg31<def> = SRLI %vreg30, 12; GR32Bit:%vreg31,%vreg30
	%vreg32<def> = ADD %vreg29, %vreg31; GR32Bit:%vreg32,%vreg29,%vreg31
	%vreg33<def> = ADDI %zero, 16; GR32Bit:%vreg33
	%vreg34<def> = SRLI %t5, 22; GR32Bit:%vreg34
	%vreg35<def> = SRLI %t5, 12; GR32Bit:%vreg35
	%vreg36<def> = ANDI %vreg35, 15; GR32Bit:%vreg36,%vreg35
	%vreg37<def> = SRLI %t5, 6; GR32Bit:%vreg37
	%vreg38<def> = ANDI %vreg37, 63; GR32Bit:%vreg38,%vreg37
	%vreg39<def> = ADDI %zero, 832; GR32Bit:%vreg39
	%vreg40<def> = MUL %vreg34, %vreg39; GR32Bit:%vreg40,%vreg34,%vreg39
	%vreg41<def> = ADDI %zero, 52; GR32Bit:%vreg41
	%vreg42<def> = MUL %vreg36, %vreg41; GR32Bit:%vreg42,%vreg36,%vreg41
	%vreg43<def> = ADD %vreg42, %vreg38; GR32Bit:%vreg43,%vreg42,%vreg38
	%vreg44<def> = ADD %vreg43, %vreg40; GR32Bit:%vreg44,%vreg43,%vreg40
	%vreg45<def> = MUL %vreg44, %vreg33; GR32Bit:%vreg45,%vreg44,%vreg33
	%vreg28<def> = ADD %vreg32, %vreg45; GR32Bit:%vreg28,%vreg32,%vreg45
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg46<def> = ADD %t5, %zero; GR32Bit:%vreg46
	%vreg48<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg48
	%vreg49<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg49
	%vreg50<def> = SRLI %vreg49, 12; GR32Bit:%vreg50,%vreg49
	%vreg51<def> = ADD %vreg48, %vreg50; GR32Bit:%vreg51,%vreg48,%vreg50
	%vreg52<def> = ADDI %zero, 16; GR32Bit:%vreg52
	%vreg53<def> = SRLI %t5, 22; GR32Bit:%vreg53
	%vreg54<def> = SRLI %t5, 12; GR32Bit:%vreg54
	%vreg55<def> = ANDI %vreg54, 15; GR32Bit:%vreg55,%vreg54
	%vreg56<def> = SRLI %t5, 6; GR32Bit:%vreg56
	%vreg57<def> = ANDI %vreg56, 63; GR32Bit:%vreg57,%vreg56
	%vreg58<def> = ADDI %zero, 832; GR32Bit:%vreg58
	%vreg59<def> = MUL %vreg53, %vreg58; GR32Bit:%vreg59,%vreg53,%vreg58
	%vreg60<def> = ADDI %zero, 52; GR32Bit:%vreg60
	%vreg61<def> = MUL %vreg55, %vreg60; GR32Bit:%vreg61,%vreg55,%vreg60
	%vreg62<def> = ADD %vreg61, %vreg57; GR32Bit:%vreg62,%vreg61,%vreg57
	%vreg63<def> = ADD %vreg62, %vreg59; GR32Bit:%vreg63,%vreg62,%vreg59
	%vreg64<def> = MUL %vreg63, %vreg52; GR32Bit:%vreg64,%vreg63,%vreg52
	%vreg47<def> = ADD %vreg51, %vreg64; GR32Bit:%vreg47,%vreg51,%vreg64
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg65<def> = ADD %t5, %zero; GR32Bit:%vreg65
	%vreg67<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg67
	%vreg68<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg68
	%vreg69<def> = SRLI %vreg68, 12; GR32Bit:%vreg69,%vreg68
	%vreg70<def> = ADD %vreg67, %vreg69; GR32Bit:%vreg70,%vreg67,%vreg69
	%vreg71<def> = ADDI %zero, 16; GR32Bit:%vreg71
	%vreg72<def> = SRLI %t5, 22; GR32Bit:%vreg72
	%vreg73<def> = SRLI %t5, 12; GR32Bit:%vreg73
	%vreg74<def> = ANDI %vreg73, 15; GR32Bit:%vreg74,%vreg73
	%vreg75<def> = SRLI %t5, 6; GR32Bit:%vreg75
	%vreg76<def> = ANDI %vreg75, 63; GR32Bit:%vreg76,%vreg75
	%vreg77<def> = ADDI %zero, 832; GR32Bit:%vreg77
	%vreg78<def> = MUL %vreg72, %vreg77; GR32Bit:%vreg78,%vreg72,%vreg77
	%vreg79<def> = ADDI %zero, 52; GR32Bit:%vreg79
	%vreg80<def> = MUL %vreg74, %vreg79; GR32Bit:%vreg80,%vreg74,%vreg79
	%vreg81<def> = ADD %vreg80, %vreg76; GR32Bit:%vreg81,%vreg80,%vreg76
	%vreg82<def> = ADD %vreg81, %vreg78; GR32Bit:%vreg82,%vreg81,%vreg78
	%vreg83<def> = MUL %vreg82, %vreg71; GR32Bit:%vreg83,%vreg82,%vreg71
	%vreg66<def> = ADD %vreg70, %vreg83; GR32Bit:%vreg66,%vreg70,%vreg83
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 316-684 ***

*** Renumbered SlotIndexes 304-704 ***

*** Renumbered SlotIndexes 216-752 ***

*** Renumbered SlotIndexes 204-772 ***

*** Renumbered SlotIndexes 204-788 ***

*** Renumbered SlotIndexes 112-832 ***

*** Renumbered SlotIndexes 100-852 ***

*** Renumbered SlotIndexes 100-868 ***

*** Renumbered SlotIndexes 100-884 ***

*** Renumbered SlotIndexes 100-900 ***

*** Renumbered SlotIndexes 100-916 ***

*** Renumbered SlotIndexes 100-932 ***

*** Renumbered SlotIndexes 100-948 ***

*** Renumbered SlotIndexes 12-996 ***
Creating pHyperOp bundles for CEs for bb0
  %vreg27<def> = ADD %t5, %zero; GR32Bit:%vreg27
starting at   %vreg8<def> = ADD %t5, %zero; GR32Bit:%vreg8
  %vreg46<def> = ADD %t5, %zero; GR32Bit:%vreg46
starting at   %vreg27<def> = ADD %t5, %zero; GR32Bit:%vreg27
  %vreg65<def> = ADD %t5, %zero; GR32Bit:%vreg65
starting at   %vreg46<def> = ADD %t5, %zero; GR32Bit:%vreg46
starting at   %vreg65<def> = ADD %t5, %zero; GR32Bit:%vreg65
After bundling, state of BB0:BB#0: derived from LLVM BB %redefine_start2.newName01
	%vreg8<def> = ADD %t5, %zero; GR32Bit:%vreg8
	  * %vreg10<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg10
	  * %vreg11<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg11
	  * %vreg12<def> = SRLI %vreg11, 12; GR32Bit:%vreg12,%vreg11
	  * %vreg13<def> = ADD %vreg10, %vreg12; GR32Bit:%vreg13,%vreg10,%vreg12
	  * %vreg14<def> = ADDI %zero, 16; GR32Bit:%vreg14
	  * %vreg15<def> = SRLI %t5, 22; GR32Bit:%vreg15
	  * %vreg16<def> = SRLI %t5, 12; GR32Bit:%vreg16
	  * %vreg17<def> = ANDI %vreg16, 15; GR32Bit:%vreg17,%vreg16
	  * %vreg18<def> = SRLI %t5, 6; GR32Bit:%vreg18
	  * %vreg19<def> = ANDI %vreg18, 63; GR32Bit:%vreg19,%vreg18
	  * %vreg20<def> = ADDI %zero, 832; GR32Bit:%vreg20
	  * %vreg21<def> = MUL %vreg15, %vreg20; GR32Bit:%vreg21,%vreg15,%vreg20
	  * %vreg22<def> = ADDI %zero, 52; GR32Bit:%vreg22
	  * %vreg23<def> = MUL %vreg17, %vreg22; GR32Bit:%vreg23,%vreg17,%vreg22
	  * %vreg24<def> = ADD %vreg23, %vreg19; GR32Bit:%vreg24,%vreg23,%vreg19
	  * %vreg25<def> = ADD %vreg24, %vreg21; GR32Bit:%vreg25,%vreg24,%vreg21
	  * %vreg26<def> = MUL %vreg25, %vreg14; GR32Bit:%vreg26,%vreg25,%vreg14
	  * %vreg9<def> = ADD %vreg13, %vreg26; GR32Bit:%vreg9,%vreg13,%vreg26
	  * %vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
	  * %vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
	  * %vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
	  * %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
	  * %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
	  * SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
	  * %vreg2<def> = LW %vreg1, 8; mem:LD4[%3](align=8) GR32Bit:%vreg2,%vreg1
	  * SW %vreg2, %vreg5, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
	  * %vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
	  * %vreg7<def> = LW %vreg6, 12; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
	  * SW %vreg7, %vreg5, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5
	  * FDELETE %t4, 0
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg27<def> = ADD %t5, %zero; GR32Bit:%vreg27
	  * %vreg29<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg29
	  * %vreg30<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg30
	  * %vreg31<def> = SRLI %vreg30, 12; GR32Bit:%vreg31,%vreg30
	  * %vreg32<def> = ADD %vreg29, %vreg31; GR32Bit:%vreg32,%vreg29,%vreg31
	  * %vreg33<def> = ADDI %zero, 16; GR32Bit:%vreg33
	  * %vreg34<def> = SRLI %t5, 22; GR32Bit:%vreg34
	  * %vreg35<def> = SRLI %t5, 12; GR32Bit:%vreg35
	  * %vreg36<def> = ANDI %vreg35, 15; GR32Bit:%vreg36,%vreg35
	  * %vreg37<def> = SRLI %t5, 6; GR32Bit:%vreg37
	  * %vreg38<def> = ANDI %vreg37, 63; GR32Bit:%vreg38,%vreg37
	  * %vreg39<def> = ADDI %zero, 832; GR32Bit:%vreg39
	  * %vreg40<def> = MUL %vreg34, %vreg39; GR32Bit:%vreg40,%vreg34,%vreg39
	  * %vreg41<def> = ADDI %zero, 52; GR32Bit:%vreg41
	  * %vreg42<def> = MUL %vreg36, %vreg41; GR32Bit:%vreg42,%vreg36,%vreg41
	  * %vreg43<def> = ADD %vreg42, %vreg38; GR32Bit:%vreg43,%vreg42,%vreg38
	  * %vreg44<def> = ADD %vreg43, %vreg40; GR32Bit:%vreg44,%vreg43,%vreg40
	  * %vreg45<def> = MUL %vreg44, %vreg33; GR32Bit:%vreg45,%vreg44,%vreg33
	  * %vreg28<def> = ADD %vreg32, %vreg45; GR32Bit:%vreg28,%vreg32,%vreg45
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg46<def> = ADD %t5, %zero; GR32Bit:%vreg46
	  * %vreg48<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg48
	  * %vreg49<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg49
	  * %vreg50<def> = SRLI %vreg49, 12; GR32Bit:%vreg50,%vreg49
	  * %vreg51<def> = ADD %vreg48, %vreg50; GR32Bit:%vreg51,%vreg48,%vreg50
	  * %vreg52<def> = ADDI %zero, 16; GR32Bit:%vreg52
	  * %vreg53<def> = SRLI %t5, 22; GR32Bit:%vreg53
	  * %vreg54<def> = SRLI %t5, 12; GR32Bit:%vreg54
	  * %vreg55<def> = ANDI %vreg54, 15; GR32Bit:%vreg55,%vreg54
	  * %vreg56<def> = SRLI %t5, 6; GR32Bit:%vreg56
	  * %vreg57<def> = ANDI %vreg56, 63; GR32Bit:%vreg57,%vreg56
	  * %vreg58<def> = ADDI %zero, 832; GR32Bit:%vreg58
	  * %vreg59<def> = MUL %vreg53, %vreg58; GR32Bit:%vreg59,%vreg53,%vreg58
	  * %vreg60<def> = ADDI %zero, 52; GR32Bit:%vreg60
	  * %vreg61<def> = MUL %vreg55, %vreg60; GR32Bit:%vreg61,%vreg55,%vreg60
	  * %vreg62<def> = ADD %vreg61, %vreg57; GR32Bit:%vreg62,%vreg61,%vreg57
	  * %vreg63<def> = ADD %vreg62, %vreg59; GR32Bit:%vreg63,%vreg62,%vreg59
	  * %vreg64<def> = MUL %vreg63, %vreg52; GR32Bit:%vreg64,%vreg63,%vreg52
	  * %vreg47<def> = ADD %vreg51, %vreg64; GR32Bit:%vreg47,%vreg51,%vreg64
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg65<def> = ADD %t5, %zero; GR32Bit:%vreg65
	  * %vreg67<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg67
	  * %vreg68<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg68
	  * %vreg69<def> = SRLI %vreg68, 12; GR32Bit:%vreg69,%vreg68
	  * %vreg70<def> = ADD %vreg67, %vreg69; GR32Bit:%vreg70,%vreg67,%vreg69
	  * %vreg71<def> = ADDI %zero, 16; GR32Bit:%vreg71
	  * %vreg72<def> = SRLI %t5, 22; GR32Bit:%vreg72
	  * %vreg73<def> = SRLI %t5, 12; GR32Bit:%vreg73
	  * %vreg74<def> = ANDI %vreg73, 15; GR32Bit:%vreg74,%vreg73
	  * %vreg75<def> = SRLI %t5, 6; GR32Bit:%vreg75
	  * %vreg76<def> = ANDI %vreg75, 63; GR32Bit:%vreg76,%vreg75
	  * %vreg77<def> = ADDI %zero, 832; GR32Bit:%vreg77
	  * %vreg78<def> = MUL %vreg72, %vreg77; GR32Bit:%vreg78,%vreg72,%vreg77
	  * %vreg79<def> = ADDI %zero, 52; GR32Bit:%vreg79
	  * %vreg80<def> = MUL %vreg74, %vreg79; GR32Bit:%vreg80,%vreg74,%vreg79
	  * %vreg81<def> = ADD %vreg80, %vreg76; GR32Bit:%vreg81,%vreg80,%vreg76
	  * %vreg82<def> = ADD %vreg81, %vreg78; GR32Bit:%vreg82,%vreg81,%vreg78
	  * %vreg83<def> = MUL %vreg82, %vreg71; GR32Bit:%vreg83,%vreg82,%vreg71
	  * %vreg66<def> = ADD %vreg70, %vreg83; GR32Bit:%vreg66,%vreg70,%vreg83
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
Patching the instructions that are supposed to use the physical registers r30 and r31
Computing live-in reg-units in ABI blocks.
Created 0 new intervals.

*** Renumbered SlotIndexes 8-1016 ***
********** INTERVALS **********
t5 = EMPTY
zero = EMPTY
%vreg0 = [200r,232r:0)  0@200r
%vreg1 = [192r,216r:0)  0@192r
%vreg2 = [216r,224r:0)  0@216r
%vreg3 = [168r,184r:0)  0@168r
%vreg4 = [176r,184r:0)  0@176r
%vreg5 = [184r,248r:0)  0@184r
%vreg6 = [232r,240r:0)  0@232r
%vreg7 = [240r,248r:0)  0@240r
%vreg8 = [4r,4d:0)  0@4r
%vreg9 = [160r,160d:0)  0@160r
%vreg10 = [24r,48r:0)  0@24r
%vreg11 = [32r,40r:0)  0@32r
%vreg12 = [40r,48r:0)  0@40r
%vreg13 = [48r,160r:0)  0@48r
%vreg14 = [56r,152r:0)  0@56r
%vreg15 = [64r,112r:0)  0@64r
%vreg16 = [72r,80r:0)  0@72r
%vreg17 = [80r,128r:0)  0@80r
%vreg18 = [88r,96r:0)  0@88r
%vreg19 = [96r,136r:0)  0@96r
%vreg20 = [104r,112r:0)  0@104r
%vreg21 = [112r,144r:0)  0@112r
%vreg22 = [120r,128r:0)  0@120r
%vreg23 = [128r,136r:0)  0@128r
%vreg24 = [136r,144r:0)  0@136r
%vreg25 = [144r,152r:0)  0@144r
%vreg26 = [152r,160r:0)  0@152r
%vreg27 = [288r,288d:0)  0@288r
%vreg28 = [432r,432d:0)  0@432r
%vreg29 = [296r,320r:0)  0@296r
%vreg30 = [304r,312r:0)  0@304r
%vreg31 = [312r,320r:0)  0@312r
%vreg32 = [320r,432r:0)  0@320r
%vreg33 = [328r,424r:0)  0@328r
%vreg34 = [336r,384r:0)  0@336r
%vreg35 = [344r,352r:0)  0@344r
%vreg36 = [352r,400r:0)  0@352r
%vreg37 = [360r,368r:0)  0@360r
%vreg38 = [368r,408r:0)  0@368r
%vreg39 = [376r,384r:0)  0@376r
%vreg40 = [384r,416r:0)  0@384r
%vreg41 = [392r,400r:0)  0@392r
%vreg42 = [400r,408r:0)  0@400r
%vreg43 = [408r,416r:0)  0@408r
%vreg44 = [416r,424r:0)  0@416r
%vreg45 = [424r,432r:0)  0@424r
%vreg46 = [464r,464d:0)  0@464r
%vreg47 = [608r,608d:0)  0@608r
%vreg48 = [472r,496r:0)  0@472r
%vreg49 = [480r,488r:0)  0@480r
%vreg50 = [488r,496r:0)  0@488r
%vreg51 = [496r,608r:0)  0@496r
%vreg52 = [504r,600r:0)  0@504r
%vreg53 = [512r,560r:0)  0@512r
%vreg54 = [520r,528r:0)  0@520r
%vreg55 = [528r,576r:0)  0@528r
%vreg56 = [536r,544r:0)  0@536r
%vreg57 = [544r,584r:0)  0@544r
%vreg58 = [552r,560r:0)  0@552r
%vreg59 = [560r,592r:0)  0@560r
%vreg60 = [568r,576r:0)  0@568r
%vreg61 = [576r,584r:0)  0@576r
%vreg62 = [584r,592r:0)  0@584r
%vreg63 = [592r,600r:0)  0@592r
%vreg64 = [600r,608r:0)  0@600r
%vreg65 = [640r,640d:0)  0@640r
%vreg66 = [784r,784d:0)  0@784r
%vreg67 = [648r,672r:0)  0@648r
%vreg68 = [656r,664r:0)  0@656r
%vreg69 = [664r,672r:0)  0@664r
%vreg70 = [672r,784r:0)  0@672r
%vreg71 = [680r,776r:0)  0@680r
%vreg72 = [688r,736r:0)  0@688r
%vreg73 = [696r,704r:0)  0@696r
%vreg74 = [704r,752r:0)  0@704r
%vreg75 = [712r,720r:0)  0@712r
%vreg76 = [720r,760r:0)  0@720r
%vreg77 = [728r,736r:0)  0@728r
%vreg78 = [736r,768r:0)  0@736r
%vreg79 = [744r,752r:0)  0@744r
%vreg80 = [752r,760r:0)  0@752r
%vreg81 = [760r,768r:0)  0@760r
%vreg82 = [768r,776r:0)  0@768r
%vreg83 = [776r,784r:0)  0@776r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start2: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start2.newName01
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg10<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg10
4B		  * %vreg11<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg11
4B		  * %vreg12<def> = SRLI %vreg11, 12; GR32Bit:%vreg12,%vreg11
4B		  * %vreg13<def> = ADD %vreg10, %vreg12; GR32Bit:%vreg13,%vreg10,%vreg12
4B		  * %vreg14<def> = ADDI %zero, 16; GR32Bit:%vreg14
4B		  * %vreg15<def> = SRLI %t5, 22; GR32Bit:%vreg15
4B		  * %vreg16<def> = SRLI %t5, 12; GR32Bit:%vreg16
4B		  * %vreg17<def> = ANDI %vreg16, 15; GR32Bit:%vreg17,%vreg16
4B		  * %vreg18<def> = SRLI %t5, 6; GR32Bit:%vreg18
4B		  * %vreg19<def> = ANDI %vreg18, 63; GR32Bit:%vreg19,%vreg18
4B		  * %vreg20<def> = ADDI %zero, 832; GR32Bit:%vreg20
4B		  * %vreg21<def> = MUL %vreg15, %vreg20; GR32Bit:%vreg21,%vreg15,%vreg20
4B		  * %vreg22<def> = ADDI %zero, 52; GR32Bit:%vreg22
4B		  * %vreg23<def> = MUL %vreg17, %vreg22; GR32Bit:%vreg23,%vreg17,%vreg22
4B		  * %vreg24<def> = ADD %vreg23, %vreg19; GR32Bit:%vreg24,%vreg23,%vreg19
4B		  * %vreg25<def> = ADD %vreg24, %vreg21; GR32Bit:%vreg25,%vreg24,%vreg21
4B		  * %vreg26<def> = MUL %vreg25, %vreg14; GR32Bit:%vreg26,%vreg25,%vreg14
4B		  * %t5<def> = ADD %vreg13, %vreg26; GR32Bit:%vreg13,%vreg26
4B		  * %vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
4B		  * %vreg4<def> = LUI <MCSym="%lo("ga#256")">; GR32Bit:%vreg4
4B		  * SRLI %vreg4, %vreg4, 12; GR32Bit:%vreg4
4B		  * %vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
4B		  * %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
4B		  * %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
4B		  * SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
4B		  * %vreg2<def> = LW %vreg1, 8; mem:LD4[%3](align=8) GR32Bit:%vreg2,%vreg1
4B		  * SW %vreg2, %vreg5, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
4B		  * %vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
4B		  * %vreg7<def> = LW %vreg6, 12; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
4B		  * SW %vreg7, %vreg5, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5
4B		  * FDELETE %t4, 0
4B		  * END 0
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
288B		%t4<def> = ADD %t5, %zero
288B		  * %vreg29<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg29
288B		  * %vreg30<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg30
288B		  * %vreg31<def> = SRLI %vreg30, 12; GR32Bit:%vreg31,%vreg30
288B		  * %vreg32<def> = ADD %vreg29, %vreg31; GR32Bit:%vreg32,%vreg29,%vreg31
288B		  * %vreg33<def> = ADDI %zero, 16; GR32Bit:%vreg33
288B		  * %vreg34<def> = SRLI %t5, 22; GR32Bit:%vreg34
288B		  * %vreg35<def> = SRLI %t5, 12; GR32Bit:%vreg35
288B		  * %vreg36<def> = ANDI %vreg35, 15; GR32Bit:%vreg36,%vreg35
288B		  * %vreg37<def> = SRLI %t5, 6; GR32Bit:%vreg37
288B		  * %vreg38<def> = ANDI %vreg37, 63; GR32Bit:%vreg38,%vreg37
288B		  * %vreg39<def> = ADDI %zero, 832; GR32Bit:%vreg39
288B		  * %vreg40<def> = MUL %vreg34, %vreg39; GR32Bit:%vreg40,%vreg34,%vreg39
288B		  * %vreg41<def> = ADDI %zero, 52; GR32Bit:%vreg41
288B		  * %vreg42<def> = MUL %vreg36, %vreg41; GR32Bit:%vreg42,%vreg36,%vreg41
288B		  * %vreg43<def> = ADD %vreg42, %vreg38; GR32Bit:%vreg43,%vreg42,%vreg38
288B		  * %vreg44<def> = ADD %vreg43, %vreg40; GR32Bit:%vreg44,%vreg43,%vreg40
288B		  * %vreg45<def> = MUL %vreg44, %vreg33; GR32Bit:%vreg45,%vreg44,%vreg33
288B		  * %t5<def> = ADD %vreg32, %vreg45; GR32Bit:%vreg32,%vreg45
288B		  * END 0
288B		  * %zero<def> = ADDI %zero, 0
288B		  * %zero<def> = ADDI %zero, 0
464B		%t4<def> = ADD %t5, %zero
464B		  * %vreg48<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg48
464B		  * %vreg49<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg49
464B		  * %vreg50<def> = SRLI %vreg49, 12; GR32Bit:%vreg50,%vreg49
464B		  * %vreg51<def> = ADD %vreg48, %vreg50; GR32Bit:%vreg51,%vreg48,%vreg50
464B		  * %vreg52<def> = ADDI %zero, 16; GR32Bit:%vreg52
464B		  * %vreg53<def> = SRLI %t5, 22; GR32Bit:%vreg53
464B		  * %vreg54<def> = SRLI %t5, 12; GR32Bit:%vreg54
464B		  * %vreg55<def> = ANDI %vreg54, 15; GR32Bit:%vreg55,%vreg54
464B		  * %vreg56<def> = SRLI %t5, 6; GR32Bit:%vreg56
464B		  * %vreg57<def> = ANDI %vreg56, 63; GR32Bit:%vreg57,%vreg56
464B		  * %vreg58<def> = ADDI %zero, 832; GR32Bit:%vreg58
464B		  * %vreg59<def> = MUL %vreg53, %vreg58; GR32Bit:%vreg59,%vreg53,%vreg58
464B		  * %vreg60<def> = ADDI %zero, 52; GR32Bit:%vreg60
464B		  * %vreg61<def> = MUL %vreg55, %vreg60; GR32Bit:%vreg61,%vreg55,%vreg60
464B		  * %vreg62<def> = ADD %vreg61, %vreg57; GR32Bit:%vreg62,%vreg61,%vreg57
464B		  * %vreg63<def> = ADD %vreg62, %vreg59; GR32Bit:%vreg63,%vreg62,%vreg59
464B		  * %vreg64<def> = MUL %vreg63, %vreg52; GR32Bit:%vreg64,%vreg63,%vreg52
464B		  * %t5<def> = ADD %vreg51, %vreg64; GR32Bit:%vreg51,%vreg64
464B		  * END 0
464B		  * %zero<def> = ADDI %zero, 0
464B		  * %zero<def> = ADDI %zero, 0
640B		%t4<def> = ADD %t5, %zero
640B		  * %vreg67<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg67
640B		  * %vreg68<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg68
640B		  * %vreg69<def> = SRLI %vreg68, 12; GR32Bit:%vreg69,%vreg68
640B		  * %vreg70<def> = ADD %vreg67, %vreg69; GR32Bit:%vreg70,%vreg67,%vreg69
640B		  * %vreg71<def> = ADDI %zero, 16; GR32Bit:%vreg71
640B		  * %vreg72<def> = SRLI %t5, 22; GR32Bit:%vreg72
640B		  * %vreg73<def> = SRLI %t5, 12; GR32Bit:%vreg73
640B		  * %vreg74<def> = ANDI %vreg73, 15; GR32Bit:%vreg74,%vreg73
640B		  * %vreg75<def> = SRLI %t5, 6; GR32Bit:%vreg75
640B		  * %vreg76<def> = ANDI %vreg75, 63; GR32Bit:%vreg76,%vreg75
640B		  * %vreg77<def> = ADDI %zero, 832; GR32Bit:%vreg77
640B		  * %vreg78<def> = MUL %vreg72, %vreg77; GR32Bit:%vreg78,%vreg72,%vreg77
640B		  * %vreg79<def> = ADDI %zero, 52; GR32Bit:%vreg79
640B		  * %vreg80<def> = MUL %vreg74, %vreg79; GR32Bit:%vreg80,%vreg74,%vreg79
640B		  * %vreg81<def> = ADD %vreg80, %vreg76; GR32Bit:%vreg81,%vreg80,%vreg76
640B		  * %vreg82<def> = ADD %vreg81, %vreg78; GR32Bit:%vreg82,%vreg81,%vreg78
640B		  * %vreg83<def> = MUL %vreg82, %vreg71; GR32Bit:%vreg83,%vreg82,%vreg71
640B		  * %t5<def> = ADD %vreg70, %vreg83; GR32Bit:%vreg70,%vreg83
640B		  * END 0
640B		  * %zero<def> = ADDI %zero, 0
640B		  * %zero<def> = ADDI %zero, 0

# End machine code for function redefine_start2.

********** COMPUTING LIVE DEBUG VARIABLES: redefine_start2 **********
********** DEBUG VARIABLES **********
********** Compute Spill Weights **********
********** Function: redefine_start2
********** GREEDY REGISTER ALLOCATION **********
********** Function: redefine_start2

selectOrSplit GR32Bit:%vreg13 [48r,160r:0)  0@48r
assigning %vreg13 to %t0: t0

selectOrSplit GR32Bit:%vreg32 [320r,432r:0)  0@320r
assigning %vreg32 to %t0: t0

selectOrSplit GR32Bit:%vreg51 [496r,608r:0)  0@496r
assigning %vreg51 to %t0: t0

selectOrSplit GR32Bit:%vreg70 [672r,784r:0)  0@672r
assigning %vreg70 to %t0: t0

selectOrSplit GR32Bit:%vreg14 [56r,152r:0)  0@56r
assigning %vreg14 to %t1: t1

selectOrSplit GR32Bit:%vreg33 [328r,424r:0)  0@328r
assigning %vreg33 to %t1: t1

selectOrSplit GR32Bit:%vreg52 [504r,600r:0)  0@504r
assigning %vreg52 to %t1: t1

selectOrSplit GR32Bit:%vreg71 [680r,776r:0)  0@680r
assigning %vreg71 to %t1: t1

selectOrSplit GR32Bit:%vreg5 [184r,248r:0)  0@184r
assigning %vreg5 to %t0: t0

selectOrSplit GR32Bit:%vreg15 [64r,112r:0)  0@64r
assigning %vreg15 to %t2: t2

selectOrSplit GR32Bit:%vreg17 [80r,128r:0)  0@80r
assigning %vreg17 to %fp: fp

selectOrSplit GR32Bit:%vreg34 [336r,384r:0)  0@336r
assigning %vreg34 to %t2: t2

selectOrSplit GR32Bit:%vreg36 [352r,400r:0)  0@352r
assigning %vreg36 to %fp: fp

selectOrSplit GR32Bit:%vreg53 [512r,560r:0)  0@512r
assigning %vreg53 to %t2: t2

selectOrSplit GR32Bit:%vreg55 [528r,576r:0)  0@528r
assigning %vreg55 to %fp: fp

selectOrSplit GR32Bit:%vreg72 [688r,736r:0)  0@688r
assigning %vreg72 to %t2: t2

selectOrSplit GR32Bit:%vreg74 [704r,752r:0)  0@704r
assigning %vreg74 to %fp: fp

selectOrSplit GR32Bit:%vreg19 [96r,136r:0)  0@96r
assigning %vreg19 to %a0: a0

selectOrSplit GR32Bit:%vreg38 [368r,408r:0)  0@368r
assigning %vreg38 to %a0: a0

selectOrSplit GR32Bit:%vreg57 [544r,584r:0)  0@544r
assigning %vreg57 to %a0: a0

selectOrSplit GR32Bit:%vreg76 [720r,760r:0)  0@720r
assigning %vreg76 to %a0: a0

selectOrSplit GR32Bit:%vreg0 [200r,232r:0)  0@200r
assigning %vreg0 to %t1: t1

selectOrSplit GR32Bit:%vreg21 [112r,144r:0)  0@112r
assigning %vreg21 to %t2: t2

selectOrSplit GR32Bit:%vreg40 [384r,416r:0)  0@384r
assigning %vreg40 to %t2: t2

selectOrSplit GR32Bit:%vreg59 [560r,592r:0)  0@560r
assigning %vreg59 to %t2: t2

selectOrSplit GR32Bit:%vreg78 [736r,768r:0)  0@736r
assigning %vreg78 to %t2: t2

selectOrSplit GR32Bit:%vreg1 [192r,216r:0)  0@192r
assigning %vreg1 to %t2: t2

selectOrSplit GR32Bit:%vreg10 [24r,48r:0)  0@24r
assigning %vreg10 to %t0: t0

selectOrSplit GR32Bit:%vreg29 [296r,320r:0)  0@296r
assigning %vreg29 to %t0: t0

selectOrSplit GR32Bit:%vreg48 [472r,496r:0)  0@472r
assigning %vreg48 to %t0: t0

selectOrSplit GR32Bit:%vreg67 [648r,672r:0)  0@648r
assigning %vreg67 to %t0: t0

selectOrSplit GR32Bit:%vreg3 [168r,184r:0)  0@168r
assigning %vreg3 to %t0: t0

selectOrSplit GR32Bit:%vreg2 [216r,224r:0)  0@216r
assigning %vreg2 to %t2: t2

selectOrSplit GR32Bit:%vreg4 [176r,184r:0)  0@176r
assigning %vreg4 to %t1: t1

selectOrSplit GR32Bit:%vreg6 [232r,240r:0)  0@232r
assigning %vreg6 to %t1: t1

selectOrSplit GR32Bit:%vreg7 [240r,248r:0)  0@240r
assigning %vreg7 to %t1: t1

selectOrSplit GR32Bit:%vreg11 [32r,40r:0)  0@32r
assigning %vreg11 to %t1: t1

selectOrSplit GR32Bit:%vreg12 [40r,48r:0)  0@40r
assigning %vreg12 to %t1: t1

selectOrSplit GR32Bit:%vreg16 [72r,80r:0)  0@72r
assigning %vreg16 to %fp: fp

selectOrSplit GR32Bit:%vreg18 [88r,96r:0)  0@88r
assigning %vreg18 to %a0: a0

selectOrSplit GR32Bit:%vreg20 [104r,112r:0)  0@104r
assigning %vreg20 to %a1: a1

selectOrSplit GR32Bit:%vreg22 [120r,128r:0)  0@120r
assigning %vreg22 to %a1: a1

selectOrSplit GR32Bit:%vreg23 [128r,136r:0)  0@128r
assigning %vreg23 to %fp: fp

selectOrSplit GR32Bit:%vreg24 [136r,144r:0)  0@136r
assigning %vreg24 to %fp: fp

selectOrSplit GR32Bit:%vreg25 [144r,152r:0)  0@144r
assigning %vreg25 to %t2: t2

selectOrSplit GR32Bit:%vreg26 [152r,160r:0)  0@152r
assigning %vreg26 to %t1: t1

selectOrSplit GR32Bit:%vreg30 [304r,312r:0)  0@304r
assigning %vreg30 to %t1: t1

selectOrSplit GR32Bit:%vreg31 [312r,320r:0)  0@312r
assigning %vreg31 to %t1: t1

selectOrSplit GR32Bit:%vreg35 [344r,352r:0)  0@344r
assigning %vreg35 to %fp: fp

selectOrSplit GR32Bit:%vreg37 [360r,368r:0)  0@360r
assigning %vreg37 to %a0: a0

selectOrSplit GR32Bit:%vreg39 [376r,384r:0)  0@376r
assigning %vreg39 to %a1: a1

selectOrSplit GR32Bit:%vreg41 [392r,400r:0)  0@392r
assigning %vreg41 to %a1: a1

selectOrSplit GR32Bit:%vreg42 [400r,408r:0)  0@400r
assigning %vreg42 to %fp: fp

selectOrSplit GR32Bit:%vreg43 [408r,416r:0)  0@408r
assigning %vreg43 to %fp: fp

selectOrSplit GR32Bit:%vreg44 [416r,424r:0)  0@416r
assigning %vreg44 to %t2: t2

selectOrSplit GR32Bit:%vreg45 [424r,432r:0)  0@424r
assigning %vreg45 to %t1: t1

selectOrSplit GR32Bit:%vreg49 [480r,488r:0)  0@480r
assigning %vreg49 to %t1: t1

selectOrSplit GR32Bit:%vreg50 [488r,496r:0)  0@488r
assigning %vreg50 to %t1: t1

selectOrSplit GR32Bit:%vreg54 [520r,528r:0)  0@520r
assigning %vreg54 to %fp: fp

selectOrSplit GR32Bit:%vreg56 [536r,544r:0)  0@536r
assigning %vreg56 to %a0: a0

selectOrSplit GR32Bit:%vreg58 [552r,560r:0)  0@552r
assigning %vreg58 to %a1: a1

selectOrSplit GR32Bit:%vreg60 [568r,576r:0)  0@568r
assigning %vreg60 to %a1: a1

selectOrSplit GR32Bit:%vreg61 [576r,584r:0)  0@576r
assigning %vreg61 to %fp: fp

selectOrSplit GR32Bit:%vreg62 [584r,592r:0)  0@584r
assigning %vreg62 to %fp: fp

selectOrSplit GR32Bit:%vreg63 [592r,600r:0)  0@592r
assigning %vreg63 to %t2: t2

selectOrSplit GR32Bit:%vreg64 [600r,608r:0)  0@600r
assigning %vreg64 to %t1: t1

selectOrSplit GR32Bit:%vreg68 [656r,664r:0)  0@656r
assigning %vreg68 to %t1: t1

selectOrSplit GR32Bit:%vreg69 [664r,672r:0)  0@664r
assigning %vreg69 to %t1: t1

selectOrSplit GR32Bit:%vreg73 [696r,704r:0)  0@696r
assigning %vreg73 to %fp: fp

selectOrSplit GR32Bit:%vreg75 [712r,720r:0)  0@712r
assigning %vreg75 to %a0: a0

selectOrSplit GR32Bit:%vreg77 [728r,736r:0)  0@728r
assigning %vreg77 to %a1: a1

selectOrSplit GR32Bit:%vreg79 [744r,752r:0)  0@744r
assigning %vreg79 to %a1: a1

selectOrSplit GR32Bit:%vreg80 [752r,760r:0)  0@752r
assigning %vreg80 to %fp: fp

selectOrSplit GR32Bit:%vreg81 [760r,768r:0)  0@760r
assigning %vreg81 to %fp: fp

selectOrSplit GR32Bit:%vreg82 [768r,776r:0)  0@768r
assigning %vreg82 to %t2: t2

selectOrSplit GR32Bit:%vreg83 [776r,784r:0)  0@776r
assigning %vreg83 to %t1: t1
********** REWRITE VIRTUAL REGISTERS **********
********** Function: redefine_start2
********** REGISTER MAP **********
[%vreg0 -> %t1] GR32Bit
[%vreg1 -> %t2] GR32Bit
[%vreg2 -> %t2] GR32Bit
[%vreg3 -> %t0] GR32Bit
[%vreg4 -> %t1] GR32Bit
[%vreg5 -> %t0] GR32Bit
[%vreg6 -> %t1] GR32Bit
[%vreg7 -> %t1] GR32Bit
[%vreg10 -> %t0] GR32Bit
[%vreg11 -> %t1] GR32Bit
[%vreg12 -> %t1] GR32Bit
[%vreg13 -> %t0] GR32Bit
[%vreg14 -> %t1] GR32Bit
[%vreg15 -> %t2] GR32Bit
[%vreg16 -> %fp] GR32Bit
[%vreg17 -> %fp] GR32Bit
[%vreg18 -> %a0] GR32Bit
[%vreg19 -> %a0] GR32Bit
[%vreg20 -> %a1] GR32Bit
[%vreg21 -> %t2] GR32Bit
[%vreg22 -> %a1] GR32Bit
[%vreg23 -> %fp] GR32Bit
[%vreg24 -> %fp] GR32Bit
[%vreg25 -> %t2] GR32Bit
[%vreg26 -> %t1] GR32Bit
[%vreg29 -> %t0] GR32Bit
[%vreg30 -> %t1] GR32Bit
[%vreg31 -> %t1] GR32Bit
[%vreg32 -> %t0] GR32Bit
[%vreg33 -> %t1] GR32Bit
[%vreg34 -> %t2] GR32Bit
[%vreg35 -> %fp] GR32Bit
[%vreg36 -> %fp] GR32Bit
[%vreg37 -> %a0] GR32Bit
[%vreg38 -> %a0] GR32Bit
[%vreg39 -> %a1] GR32Bit
[%vreg40 -> %t2] GR32Bit
[%vreg41 -> %a1] GR32Bit
[%vreg42 -> %fp] GR32Bit
[%vreg43 -> %fp] GR32Bit
[%vreg44 -> %t2] GR32Bit
[%vreg45 -> %t1] GR32Bit
[%vreg48 -> %t0] GR32Bit
[%vreg49 -> %t1] GR32Bit
[%vreg50 -> %t1] GR32Bit
[%vreg51 -> %t0] GR32Bit
[%vreg52 -> %t1] GR32Bit
[%vreg53 -> %t2] GR32Bit
[%vreg54 -> %fp] GR32Bit
[%vreg55 -> %fp] GR32Bit
[%vreg56 -> %a0] GR32Bit
[%vreg57 -> %a0] GR32Bit
[%vreg58 -> %a1] GR32Bit
[%vreg59 -> %t2] GR32Bit
[%vreg60 -> %a1] GR32Bit
[%vreg61 -> %fp] GR32Bit
[%vreg62 -> %fp] GR32Bit
[%vreg63 -> %t2] GR32Bit
[%vreg64 -> %t1] GR32Bit
[%vreg67 -> %t0] GR32Bit
[%vreg68 -> %t1] GR32Bit
[%vreg69 -> %t1] GR32Bit
[%vreg70 -> %t0] GR32Bit
[%vreg71 -> %t1] GR32Bit
[%vreg72 -> %t2] GR32Bit
[%vreg73 -> %fp] GR32Bit
[%vreg74 -> %fp] GR32Bit
[%vreg75 -> %a0] GR32Bit
[%vreg76 -> %a0] GR32Bit
[%vreg77 -> %a1] GR32Bit
[%vreg78 -> %t2] GR32Bit
[%vreg79 -> %a1] GR32Bit
[%vreg80 -> %fp] GR32Bit
[%vreg81 -> %fp] GR32Bit
[%vreg82 -> %t2] GR32Bit
[%vreg83 -> %t1] GR32Bit

0B	BB#0: derived from LLVM BB %redefine_start2.newName01
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg10<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg10
4B		  * %vreg11<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg11
4B		  * %vreg12<def> = SRLI %vreg11<kill>, 12; GR32Bit:%vreg12,%vreg11
4B		  * %vreg13<def> = ADD %vreg10<kill>, %vreg12<kill>; GR32Bit:%vreg13,%vreg10,%vreg12
4B		  * %vreg14<def> = ADDI %zero, 16; GR32Bit:%vreg14
4B		  * %vreg15<def> = SRLI %t5, 22; GR32Bit:%vreg15
4B		  * %vreg16<def> = SRLI %t5, 12; GR32Bit:%vreg16
4B		  * %vreg17<def> = ANDI %vreg16<kill>, 15; GR32Bit:%vreg17,%vreg16
4B		  * %vreg18<def> = SRLI %t5, 6; GR32Bit:%vreg18
4B		  * %vreg19<def> = ANDI %vreg18<kill>, 63; GR32Bit:%vreg19,%vreg18
4B		  * %vreg20<def> = ADDI %zero, 832; GR32Bit:%vreg20
4B		  * %vreg21<def> = MUL %vreg15<kill>, %vreg20<kill>; GR32Bit:%vreg21,%vreg15,%vreg20
4B		  * %vreg22<def> = ADDI %zero, 52; GR32Bit:%vreg22
4B		  * %vreg23<def> = MUL %vreg17<kill>, %vreg22<kill>; GR32Bit:%vreg23,%vreg17,%vreg22
4B		  * %vreg24<def> = ADD %vreg23<kill>, %vreg19<kill>; GR32Bit:%vreg24,%vreg23,%vreg19
4B		  * %vreg25<def> = ADD %vreg24<kill>, %vreg21<kill>; GR32Bit:%vreg25,%vreg24,%vreg21
4B		  * %vreg26<def> = MUL %vreg25<kill>, %vreg14<kill>; GR32Bit:%vreg26,%vreg25,%vreg14
4B		  * %t5<def> = ADD %vreg13<kill>, %vreg26<kill>; GR32Bit:%vreg13,%vreg26
4B		  * %vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
4B		  * %vreg4<def> = LUI <MCSym="%lo("ga#256")">; GR32Bit:%vreg4
4B		  * SRLI %vreg4, %vreg4, 12; GR32Bit:%vreg4
4B		  * %vreg5<def> = ADD %vreg4<kill>, %vreg3<kill>; GR32Bit:%vreg5,%vreg4,%vreg3
4B		  * %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
4B		  * %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
4B		  * SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
4B		  * %vreg2<def> = LW %vreg1<kill>, 8; mem:LD4[%3](align=8) GR32Bit:%vreg2,%vreg1
4B		  * SW %vreg2<kill>, %vreg5, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
4B		  * %vreg6<def> = LW %vreg0<kill>, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
4B		  * %vreg7<def> = LW %vreg6<kill>, 12; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
4B		  * SW %vreg7<kill>, %vreg5<kill>, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5
4B		  * FDELETE %t4, 0
4B		  * END 0
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
288B		%t4<def> = ADD %t5, %zero
288B		  * %vreg29<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg29
288B		  * %vreg30<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg30
288B		  * %vreg31<def> = SRLI %vreg30<kill>, 12; GR32Bit:%vreg31,%vreg30
288B		  * %vreg32<def> = ADD %vreg29<kill>, %vreg31<kill>; GR32Bit:%vreg32,%vreg29,%vreg31
288B		  * %vreg33<def> = ADDI %zero, 16; GR32Bit:%vreg33
288B		  * %vreg34<def> = SRLI %t5, 22; GR32Bit:%vreg34
288B		  * %vreg35<def> = SRLI %t5, 12; GR32Bit:%vreg35
288B		  * %vreg36<def> = ANDI %vreg35<kill>, 15; GR32Bit:%vreg36,%vreg35
288B		  * %vreg37<def> = SRLI %t5, 6; GR32Bit:%vreg37
288B		  * %vreg38<def> = ANDI %vreg37<kill>, 63; GR32Bit:%vreg38,%vreg37
288B		  * %vreg39<def> = ADDI %zero, 832; GR32Bit:%vreg39
288B		  * %vreg40<def> = MUL %vreg34<kill>, %vreg39<kill>; GR32Bit:%vreg40,%vreg34,%vreg39
288B		  * %vreg41<def> = ADDI %zero, 52; GR32Bit:%vreg41
288B		  * %vreg42<def> = MUL %vreg36<kill>, %vreg41<kill>; GR32Bit:%vreg42,%vreg36,%vreg41
288B		  * %vreg43<def> = ADD %vreg42<kill>, %vreg38<kill>; GR32Bit:%vreg43,%vreg42,%vreg38
288B		  * %vreg44<def> = ADD %vreg43<kill>, %vreg40<kill>; GR32Bit:%vreg44,%vreg43,%vreg40
288B		  * %vreg45<def> = MUL %vreg44<kill>, %vreg33<kill>; GR32Bit:%vreg45,%vreg44,%vreg33
288B		  * %t5<def> = ADD %vreg32<kill>, %vreg45<kill>; GR32Bit:%vreg32,%vreg45
288B		  * END 0
288B		  * %zero<def> = ADDI %zero, 0
288B		  * %zero<def> = ADDI %zero, 0
464B		%t4<def> = ADD %t5, %zero
464B		  * %vreg48<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg48
464B		  * %vreg49<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg49
464B		  * %vreg50<def> = SRLI %vreg49<kill>, 12; GR32Bit:%vreg50,%vreg49
464B		  * %vreg51<def> = ADD %vreg48<kill>, %vreg50<kill>; GR32Bit:%vreg51,%vreg48,%vreg50
464B		  * %vreg52<def> = ADDI %zero, 16; GR32Bit:%vreg52
464B		  * %vreg53<def> = SRLI %t5, 22; GR32Bit:%vreg53
464B		  * %vreg54<def> = SRLI %t5, 12; GR32Bit:%vreg54
464B		  * %vreg55<def> = ANDI %vreg54<kill>, 15; GR32Bit:%vreg55,%vreg54
464B		  * %vreg56<def> = SRLI %t5, 6; GR32Bit:%vreg56
464B		  * %vreg57<def> = ANDI %vreg56<kill>, 63; GR32Bit:%vreg57,%vreg56
464B		  * %vreg58<def> = ADDI %zero, 832; GR32Bit:%vreg58
464B		  * %vreg59<def> = MUL %vreg53<kill>, %vreg58<kill>; GR32Bit:%vreg59,%vreg53,%vreg58
464B		  * %vreg60<def> = ADDI %zero, 52; GR32Bit:%vreg60
464B		  * %vreg61<def> = MUL %vreg55<kill>, %vreg60<kill>; GR32Bit:%vreg61,%vreg55,%vreg60
464B		  * %vreg62<def> = ADD %vreg61<kill>, %vreg57<kill>; GR32Bit:%vreg62,%vreg61,%vreg57
464B		  * %vreg63<def> = ADD %vreg62<kill>, %vreg59<kill>; GR32Bit:%vreg63,%vreg62,%vreg59
464B		  * %vreg64<def> = MUL %vreg63<kill>, %vreg52<kill>; GR32Bit:%vreg64,%vreg63,%vreg52
464B		  * %t5<def> = ADD %vreg51<kill>, %vreg64<kill>; GR32Bit:%vreg51,%vreg64
464B		  * END 0
464B		  * %zero<def> = ADDI %zero, 0
464B		  * %zero<def> = ADDI %zero, 0
640B		%t4<def> = ADD %t5, %zero
640B		  * %vreg67<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg67
640B		  * %vreg68<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg68
640B		  * %vreg69<def> = SRLI %vreg68<kill>, 12; GR32Bit:%vreg69,%vreg68
640B		  * %vreg70<def> = ADD %vreg67<kill>, %vreg69<kill>; GR32Bit:%vreg70,%vreg67,%vreg69
640B		  * %vreg71<def> = ADDI %zero, 16; GR32Bit:%vreg71
640B		  * %vreg72<def> = SRLI %t5, 22; GR32Bit:%vreg72
640B		  * %vreg73<def> = SRLI %t5, 12; GR32Bit:%vreg73
640B		  * %vreg74<def> = ANDI %vreg73<kill>, 15; GR32Bit:%vreg74,%vreg73
640B		  * %vreg75<def> = SRLI %t5, 6; GR32Bit:%vreg75
640B		  * %vreg76<def> = ANDI %vreg75<kill>, 63; GR32Bit:%vreg76,%vreg75
640B		  * %vreg77<def> = ADDI %zero, 832; GR32Bit:%vreg77
640B		  * %vreg78<def> = MUL %vreg72<kill>, %vreg77<kill>; GR32Bit:%vreg78,%vreg72,%vreg77
640B		  * %vreg79<def> = ADDI %zero, 52; GR32Bit:%vreg79
640B		  * %vreg80<def> = MUL %vreg74<kill>, %vreg79<kill>; GR32Bit:%vreg80,%vreg74,%vreg79
640B		  * %vreg81<def> = ADD %vreg80<kill>, %vreg76<kill>; GR32Bit:%vreg81,%vreg80,%vreg76
640B		  * %vreg82<def> = ADD %vreg81<kill>, %vreg78<kill>; GR32Bit:%vreg82,%vreg81,%vreg78
640B		  * %vreg83<def> = MUL %vreg82<kill>, %vreg71<kill>; GR32Bit:%vreg83,%vreg82,%vreg71
640B		  * %t5<def> = ADD %vreg70<kill>, %vreg83<kill>; GR32Bit:%vreg70,%vreg83
640B		  * END 0
640B		  * %zero<def> = ADDI %zero, 0
640B		  * %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 16
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = LUI <ga:@redefine_out_b>[TF=2]
> %t1<def> = LUI <MCSym="%lo("ga#256")">
> SRLI %t1, %t1, 12
> %t0<def> = ADD %t1<kill>, %t0<kill>
> %t2<def> = ADDI %t5, <fi#-1>
> %t1<def> = ADDI %t5, <fi#0>
> SW %t2, %t1, 0; mem:ST4[%1]
> %t2<def> = LW %t2<kill>, 8; mem:LD4[%3](align=8)
> SW %t2<kill>, %t0, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]
> %t1<def> = LW %t1<kill>, 0; mem:LD4[%1]
> %t1<def> = LW %t1<kill>, 12; mem:LD4[%6]
> SW %t1<kill>, %t0<kill>, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)]
> FDELETE %t4, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 16
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 16
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 16
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
********** EMITTING LIVE DEBUG VARIABLES **********
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: redefine_start2
current state of mf:# Machine code for function redefine_start2: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %redefine_start2.newName01
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 16
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = LUI <ga:@redefine_out_b>[TF=2]
	  * %t1<def> = LUI <MCSym="%lo("ga#256")">
	  * SRLI %t1, %t1, 12
	  * %t0<def> = ADD %t1<kill>, %t0<kill>
	  * %t2<def> = ADDI %t5, <fi#-1>
	  * %t1<def> = ADDI %t5, <fi#0>
	  * SW %t2, %t1, 0; mem:ST4[%1]
	  * %t2<def> = LW %t2<kill>, 8; mem:LD4[%3](align=8)
	  * SW %t2<kill>, %t0, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]
	  * %t1<def> = LW %t1<kill>, 0; mem:LD4[%1]
	  * %t1<def> = LW %t1<kill>, 12; mem:LD4[%6]
	  * SW %t1<kill>, %t0<kill>, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)]
	  * FDELETE %t4, 0
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 16
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 16
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 16
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0

# End machine code for function redefine_start2.

lowering frame index for func redefine_start2:-1 TO VAL:4
lowering frame index for func redefine_start2:0 TO VAL:0
MERGING MOSTLY EMPTY BLOCKS - BEFORE:

startup_glowplugs3.if.then5:                      ; preds = %startup_glowplugs3.if.else
  br label %startup_glowplugs3.if.end

startup_glowplugs3.if.end:                        ; preds = %startup_glowplugs3.if.else6, %startup_glowplugs3.if.then5
  br label %startup_glowplugs3.if.end9
AFTER:

startup_glowplugs3.if.end:                        ; preds = %startup_glowplugs3.if.else, %startup_glowplugs3.if.else6
  br label %startup_glowplugs3.if.end9



MERGING MOSTLY EMPTY BLOCKS - BEFORE:

startup_glowplugs3.if.end:                        ; preds = %startup_glowplugs3.if.else, %startup_glowplugs3.if.else6
  br label %startup_glowplugs3.if.end9

startup_glowplugs3.if.end9:                       ; preds = %startup_glowplugs3.if.end, %startup_glowplugs3.if.then
  %22 = load i32** %2, align 4
  store i32* %22, i32** %1, align 4
  br label %startup_glowplugs3.return
AFTER:

startup_glowplugs3.if.end9:                       ; preds = %startup_glowplugs3.if.else6, %startup_glowplugs3.if.else, %startup_glowplugs3.if.then
  %22 = load i32** %2, align 4
  store i32* %22, i32** %1, align 4
  br label %startup_glowplugs3.return



CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:%5]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [4 + Base:%8]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [8 + Base:%14]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [12 + Base:%16]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [8 + Base:%18]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [12 + Base:%20]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:%1]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:%5]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [4 + Base:%8]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [8 + Base:%14]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [12 + Base:%16]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [8 + Base:%18]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [12 + Base:%20]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:%1]
To merge:

startup_glowplugs3.if.end9:                       ; preds = %startup_glowplugs3.if.else6, %startup_glowplugs3.if.else, %startup_glowplugs3.if.then
  %22 = load i32** %2, align 4
  store i32* %22, i32** %1, align 4
  br label %startup_glowplugs3.return



Computing probabilities for startup_glowplugs3.return
Computing probabilities for startup_glowplugs3.if.then
Computing probabilities for startup_glowplugs3.if.else6
Computing probabilities for startup_glowplugs3.if.else
Computing probabilities for startup_glowplugs3.entry
set edge startup_glowplugs3.entry -> 1 successor weight to 20
set edge startup_glowplugs3.entry -> 0 successor weight to 12



=== startup_glowplugs3
store visit is after?  store i32* %0, i32** %2, align 4
I was here to add i32* %0
arg match found with argIndex:-1
Argument does not have assigned frame index!
The value is an argument for which I am here to get arg frame index as:0
whats the index?-1
I was here to add   %2 = alloca i32*, align 4
whats in dag after store?SelectionDAG has 7 nodes:
  0x2d13c48: ch = EntryToken [ORD=15]

  0x2d31560: i32 = FrameIndex<-1> [ORD=15]

  0x2d31b60: i32 = undef [ORD=15]

    0x2d13c48: <multiple use>
    0x2d31560: <multiple use>
    0x2d31b60: <multiple use>
  0x2d31760: i32,ch = load 0x2d13c48, 0x2d31560, 0x2d31b60<LD4[FixedStack-1]>

  0x2d3ded0: i32 = Constant<0>

    0x2d13c48: <multiple use>
    0x2d31560: <multiple use>
    0x2d3e2d0: i32 = FrameIndex<1> [ORD=15]

    0x2d31b60: <multiple use>
  0x2d3e4d0: ch = store 0x2d13c48, 0x2d31560, 0x2d3e2d0, 0x2d31b60<ST4[%2]> [ORD=15]


visiting load instruction   %4 = load i32** %2, align 4
with I type i32*and sd value :0x2d3e2d0: i32 = FrameIndex<1>
new load?0x2d3e0d0: i32,ch = load 0x2d3e4d0, 0x2d3e2d0, 0x2d31b60<LD4[%2]>
dag after load is dealt with?SelectionDAG has 8 nodes:
  0x2d13c48: ch = EntryToken [ORD=15]

  0x2d31560: i32 = FrameIndex<-1> [ORD=15]

  0x2d31b60: i32 = undef [ORD=15]

    0x2d13c48: <multiple use>
    0x2d31560: <multiple use>
    0x2d31b60: <multiple use>
  0x2d31760: i32,ch = load 0x2d13c48, 0x2d31560, 0x2d31b60<LD4[FixedStack-1]>

  0x2d3e2d0: i32 = FrameIndex<1> [ORD=15]

  0x2d3ded0: i32 = Constant<0>

      0x2d13c48: <multiple use>
      0x2d31560: <multiple use>
      0x2d3e2d0: <multiple use>
      0x2d31b60: <multiple use>
    0x2d3e4d0: ch = store 0x2d13c48, 0x2d31560, 0x2d3e2d0, 0x2d31b60<ST4[%2]> [ORD=15]

    0x2d3e2d0: <multiple use>
    0x2d31b60: <multiple use>
  0x2d3e0d0: i32,ch = load 0x2d3e4d0, 0x2d3e2d0, 0x2d31b60<LD4[%2]>

    0x2d13c48: <multiple use>
    0x2d31560: <multiple use>
    0x2d3e2d0: <multiple use>
    0x2d31b60: <multiple use>
  0x2d3e4d0: ch = store 0x2d13c48, 0x2d31560, 0x2d3e2d0, 0x2d31b60<ST4[%2]> [ORD=15]


visiting load instruction   %7 = load float* %6, align 4
with I type floatand sd value :0x2d3e0d0: i32,ch = load 0x2d3e4d0, 0x2d3e2d0, 0x2d31b60<LD4[%2]>
new load?0x2d3dfd0: f32,ch = load 0x2d3e4d0, 0x2d3e0d0, 0x2d31b60<LD4[%6]>
dag after load is dealt with?SelectionDAG has 9 nodes:
  0x2d13c48: ch = EntryToken [ORD=15]

  0x2d31560: i32 = FrameIndex<-1> [ORD=15]

  0x2d31b60: i32 = undef [ORD=15]

    0x2d13c48: <multiple use>
    0x2d31560: <multiple use>
    0x2d31b60: <multiple use>
  0x2d31760: i32,ch = load 0x2d13c48, 0x2d31560, 0x2d31b60<LD4[FixedStack-1]>

  0x2d3e2d0: i32 = FrameIndex<1> [ORD=15]

  0x2d3ded0: i32 = Constant<0>

    0x2d3e4d0: <multiple use>
      0x2d3e4d0: <multiple use>
      0x2d3e2d0: <multiple use>
      0x2d31b60: <multiple use>
    0x2d3e0d0: i32,ch = load 0x2d3e4d0, 0x2d3e2d0, 0x2d31b60<LD4[%2]> [ORD=16]

    0x2d31b60: <multiple use>
  0x2d3dfd0: f32,ch = load 0x2d3e4d0, 0x2d3e0d0, 0x2d31b60<LD4[%6]>

    0x2d13c48: <multiple use>
    0x2d31560: <multiple use>
    0x2d3e2d0: <multiple use>
    0x2d31b60: <multiple use>
  0x2d3e4d0: ch = store 0x2d13c48, 0x2d31560, 0x2d3e2d0, 0x2d31b60<ST4[%2]> [ORD=15]


store visit is after?  store float %7, float* %3, align 4
I was here to add   %3 = alloca float, align 4
whats in dag after store?SelectionDAG has 12 nodes:
  0x2d13c48: ch = EntryToken [ORD=15]

  0x2d31560: i32 = FrameIndex<-1> [ORD=15]

  0x2d31b60: i32 = undef [ORD=15]

    0x2d13c48: <multiple use>
    0x2d31560: <multiple use>
    0x2d31b60: <multiple use>
  0x2d31760: i32,ch = load 0x2d13c48, 0x2d31560, 0x2d31b60<LD4[FixedStack-1]>

  0x2d3e2d0: i32 = FrameIndex<1> [ORD=15]

  0x2d3ded0: i32 = Constant<0>

    0x2d13c48: <multiple use>
    0x2d31560: <multiple use>
    0x2d3e2d0: <multiple use>
    0x2d31b60: <multiple use>
  0x2d3e4d0: ch = store 0x2d13c48, 0x2d31560, 0x2d3e2d0, 0x2d31b60<ST4[%2]> [ORD=15]

    0x2d3e4d0: <multiple use>
    0x2d3e2d0: <multiple use>
    0x2d31b60: <multiple use>
  0x2d3e0d0: i32,ch = load 0x2d3e4d0, 0x2d3e2d0, 0x2d31b60<LD4[%2]> [ORD=16]

    0x2d3e4d0: <multiple use>
    0x2d3e0d0: <multiple use>
    0x2d31b60: <multiple use>
  0x2d3dfd0: f32,ch = load 0x2d3e4d0, 0x2d3e0d0, 0x2d31b60<LD4[%6]> [ORD=19]

      0x2d3e0d0: <multiple use>
      0x2d3dfd0: <multiple use>
    0x2d31d60: ch = TokenFactor 0x2d3e0d0:1, 0x2d3dfd0:1 [ORD=20]

    0x2d3dfd0: <multiple use>
    0x2d3e3d0: i32 = FrameIndex<2> [ORD=20]

    0x2d31b60: <multiple use>
  0x2d3e6d0: ch = store 0x2d31d60, 0x2d3dfd0, 0x2d3e3d0, 0x2d31b60<ST4[%3]> [ORD=20]


visiting load instruction   %8 = load i32** %2, align 4
with I type i32*and sd value :0x2d3e2d0: i32 = FrameIndex<1>
new load?0x2d3e5d0: i32,ch = load 0x2d3e6d0, 0x2d3e2d0, 0x2d31b60<LD4[%2]>
dag after load is dealt with?SelectionDAG has 13 nodes:
  0x2d13c48: ch = EntryToken [ORD=15]

  0x2d31560: i32 = FrameIndex<-1> [ORD=15]

  0x2d31b60: i32 = undef [ORD=15]

    0x2d13c48: <multiple use>
    0x2d31560: <multiple use>
    0x2d31b60: <multiple use>
  0x2d31760: i32,ch = load 0x2d13c48, 0x2d31560, 0x2d31b60<LD4[FixedStack-1]>

  0x2d3e2d0: i32 = FrameIndex<1> [ORD=15]

  0x2d3ded0: i32 = Constant<0>

    0x2d13c48: <multiple use>
    0x2d31560: <multiple use>
    0x2d3e2d0: <multiple use>
    0x2d31b60: <multiple use>
  0x2d3e4d0: ch = store 0x2d13c48, 0x2d31560, 0x2d3e2d0, 0x2d31b60<ST4[%2]> [ORD=15]

    0x2d3e4d0: <multiple use>
    0x2d3e2d0: <multiple use>
    0x2d31b60: <multiple use>
  0x2d3e0d0: i32,ch = load 0x2d3e4d0, 0x2d3e2d0, 0x2d31b60<LD4[%2]> [ORD=16]

    0x2d3e4d0: <multiple use>
    0x2d3e0d0: <multiple use>
    0x2d31b60: <multiple use>
  0x2d3dfd0: f32,ch = load 0x2d3e4d0, 0x2d3e0d0, 0x2d31b60<LD4[%6]> [ORD=19]

        0x2d3e0d0: <multiple use>
        0x2d3dfd0: <multiple use>
      0x2d31d60: ch = TokenFactor 0x2d3e0d0:1, 0x2d3dfd0:1 [ORD=20]

      0x2d3dfd0: <multiple use>
      0x2d3e3d0: i32 = FrameIndex<2> [ORD=20]

      0x2d31b60: <multiple use>
    0x2d3e6d0: ch = store 0x2d31d60, 0x2d3dfd0, 0x2d3e3d0, 0x2d31b60<ST4[%3]> [ORD=20]

    0x2d3e2d0: <multiple use>
    0x2d31b60: <multiple use>
  0x2d3e5d0: i32,ch = load 0x2d3e6d0, 0x2d3e2d0, 0x2d31b60<LD4[%2]>

      0x2d3e0d0: <multiple use>
      0x2d3dfd0: <multiple use>
    0x2d31d60: ch = TokenFactor 0x2d3e0d0:1, 0x2d3dfd0:1 [ORD=20]

    0x2d3dfd0: <multiple use>
    0x2d3e3d0: i32 = FrameIndex<2> [ORD=20]

    0x2d31b60: <multiple use>
  0x2d3e6d0: ch = store 0x2d31d60, 0x2d3dfd0, 0x2d3e3d0, 0x2d31b60<ST4[%3]> [ORD=20]


visiting load instruction   %10 = load i32* %9, align 4
with I type i32and sd value :0x2d31f60: i32 = add 0x2d3e5d0, 0x2d32060
new load?0x2d31860: i32,ch = load 0x2d3e6d0, 0x2d31f60, 0x2d31b60<LD4[%9]>
dag after load is dealt with?SelectionDAG has 17 nodes:
  0x2d13c48: ch = EntryToken [ORD=15]

  0x2d31560: i32 = FrameIndex<-1> [ORD=15]

  0x2d31b60: i32 = undef [ORD=15]

    0x2d13c48: <multiple use>
    0x2d31560: <multiple use>
    0x2d31b60: <multiple use>
  0x2d31760: i32,ch = load 0x2d13c48, 0x2d31560, 0x2d31b60<LD4[FixedStack-1]>

  0x2d3e2d0: i32 = FrameIndex<1> [ORD=15]

  0x2d3ded0: i32 = Constant<0>

    0x2d13c48: <multiple use>
    0x2d31560: <multiple use>
    0x2d3e2d0: <multiple use>
    0x2d31b60: <multiple use>
  0x2d3e4d0: ch = store 0x2d13c48, 0x2d31560, 0x2d3e2d0, 0x2d31b60<ST4[%2]> [ORD=15]

    0x2d3e4d0: <multiple use>
    0x2d3e2d0: <multiple use>
    0x2d31b60: <multiple use>
  0x2d3e0d0: i32,ch = load 0x2d3e4d0, 0x2d3e2d0, 0x2d31b60<LD4[%2]> [ORD=16]

    0x2d3e4d0: <multiple use>
    0x2d3e0d0: <multiple use>
    0x2d31b60: <multiple use>
  0x2d3dfd0: f32,ch = load 0x2d3e4d0, 0x2d3e0d0, 0x2d31b60<LD4[%6]> [ORD=19]

  0x2d3e1d0: i64 = Constant<4>

    0x2d3e6d0: <multiple use>
        0x2d3e6d0: <multiple use>
        0x2d3e2d0: <multiple use>
        0x2d31b60: <multiple use>
      0x2d3e5d0: i32,ch = load 0x2d3e6d0, 0x2d3e2d0, 0x2d31b60<LD4[%2]> [ORD=21]

      0x2d32060: i32 = Constant<4> [ORD=22]

    0x2d31f60: i32 = add 0x2d3e5d0, 0x2d32060 [ORD=22]

    0x2d31b60: <multiple use>
  0x2d31860: i32,ch = load 0x2d3e6d0, 0x2d31f60, 0x2d31b60<LD4[%9]>

      0x2d3e0d0: <multiple use>
      0x2d3dfd0: <multiple use>
    0x2d31d60: ch = TokenFactor 0x2d3e0d0:1, 0x2d3dfd0:1 [ORD=20]

    0x2d3dfd0: <multiple use>
    0x2d3e3d0: i32 = FrameIndex<2> [ORD=20]

    0x2d31b60: <multiple use>
  0x2d3e6d0: ch = store 0x2d31d60, 0x2d3dfd0, 0x2d3e3d0, 0x2d31b60<ST4[%3]> [ORD=20]


I was here to add i32 0
Initial selection DAG: BB#0 'startup_glowplugs3:startup_glowplugs3.entry'
SelectionDAG has 23 nodes:
  0x2d13c48: ch = EntryToken [ORD=15]

  0x2d31560: i32 = FrameIndex<-1> [ORD=15]

  0x2d31b60: i32 = undef [ORD=15]

    0x2d13c48: <multiple use>
    0x2d31560: <multiple use>
    0x2d31b60: <multiple use>
  0x2d31760: i32,ch = load 0x2d13c48, 0x2d31560, 0x2d31b60<LD4[FixedStack-1]>

  0x2d3e2d0: i32 = FrameIndex<1> [ORD=15]

    0x2d13c48: <multiple use>
    0x2d31560: <multiple use>
    0x2d3e2d0: <multiple use>
    0x2d31b60: <multiple use>
  0x2d3e4d0: ch = store 0x2d13c48, 0x2d31560, 0x2d3e2d0, 0x2d31b60<ST4[%2]> [ORD=15]

    0x2d3e4d0: <multiple use>
    0x2d3e2d0: <multiple use>
    0x2d31b60: <multiple use>
  0x2d3e0d0: i32,ch = load 0x2d3e4d0, 0x2d3e2d0, 0x2d31b60<LD4[%2]> [ORD=16]

    0x2d3e4d0: <multiple use>
    0x2d3e0d0: <multiple use>
    0x2d31b60: <multiple use>
  0x2d3dfd0: f32,ch = load 0x2d3e4d0, 0x2d3e0d0, 0x2d31b60<LD4[%6]> [ORD=19]

      0x2d3e0d0: <multiple use>
      0x2d3dfd0: <multiple use>
    0x2d31d60: ch = TokenFactor 0x2d3e0d0:1, 0x2d3dfd0:1 [ORD=20]

    0x2d3dfd0: <multiple use>
    0x2d3e3d0: i32 = FrameIndex<2> [ORD=20]

    0x2d31b60: <multiple use>
  0x2d3e6d0: ch = store 0x2d31d60, 0x2d3dfd0, 0x2d3e3d0, 0x2d31b60<ST4[%3]> [ORD=20]

  0x2d3e1d0: i64 = Constant<4>

      0x2d3e6d0: <multiple use>
          0x2d3e6d0: <multiple use>
              0x2d3e6d0: <multiple use>
              0x2d3e2d0: <multiple use>
              0x2d31b60: <multiple use>
            0x2d3e5d0: i32,ch = load 0x2d3e6d0, 0x2d3e2d0, 0x2d31b60<LD4[%2]> [ORD=21]

            0x2d32060: i32 = Constant<4> [ORD=22]

          0x2d31f60: i32 = add 0x2d3e5d0, 0x2d32060 [ORD=22]

          0x2d31b60: <multiple use>
        0x2d31860: i32,ch = load 0x2d3e6d0, 0x2d31f60, 0x2d31b60<LD4[%9]> [ORD=23]

        0x2d3ded0: i32 = Constant<0> [ORD=24]

        0x2d31360: ch = seteq [ORD=24]

      0x2d31960: i1 = setcc 0x2d31860, 0x2d3ded0, 0x2d31360 [ORD=24]

      0x2d31e60: ch = BasicBlock<startup_glowplugs3.if.then 0x2d3f6b0>

    0x2d31a60: ch = brcond 0x2d3e6d0, 0x2d31960, 0x2d31e60

    0x2d31460: ch = BasicBlock<startup_glowplugs3.if.else 0x2d3f550>

  0x2d31660: ch = br 0x2d31a60, 0x2d31460



Replacing.1 0x2d3e0d0: i32,ch = load 0x2d3e4d0, 0x2d3e2d0, 0x2d31b60<LD4[%2]> [ORD=16]

With: 0x2d31560: i32 = FrameIndex<-1> [ORD=15]
 and 1 other values

Replacing.1 0x2d3dfd0: f32,ch = load 0x2d3e4d0, 0x2d31560, 0x2d31b60<LD4[%6](align=16)> [ORD=19]

With: 0x2d3dfd0: f32,ch = load 0x2d3e4d0, 0x2d31560, 0x2d31b60<LD4[%6](align=16)> [ORD=19]
 and 1 other values

Replacing.3 0x2d31d60: ch = TokenFactor 0x2d3e4d0, 0x2d3dfd0:1 [ORD=20]

With: 0x2d3dfd0: f32,ch = load 0x2d3e4d0, 0x2d31560, 0x2d31b60<LD4[%6](align=16)> [ORD=19]

Optimized lowered selection DAG: BB#0 'startup_glowplugs3:startup_glowplugs3.entry'
SelectionDAG has 19 nodes:
  0x2d31560: i32 = FrameIndex<-1> [ORD=15]

  0x2d31b60: i32 = undef [ORD=15]

  0x2d3e2d0: i32 = FrameIndex<1> [ORD=15]

      0x2d13c48: ch = EntryToken [ORD=15]

      0x2d31560: <multiple use>
      0x2d3e2d0: <multiple use>
      0x2d31b60: <multiple use>
    0x2d3e4d0: ch = store 0x2d13c48, 0x2d31560, 0x2d3e2d0, 0x2d31b60<ST4[%2]> [ORD=15]

    0x2d31560: <multiple use>
    0x2d31b60: <multiple use>
  0x2d3dfd0: f32,ch = load 0x2d3e4d0, 0x2d31560, 0x2d31b60<LD4[%6](align=16)> [ORD=19]

    0x2d3dfd0: <multiple use>
    0x2d3dfd0: <multiple use>
    0x2d3e3d0: i32 = FrameIndex<2> [ORD=20]

    0x2d31b60: <multiple use>
  0x2d3e6d0: ch = store 0x2d3dfd0:1, 0x2d3dfd0, 0x2d3e3d0, 0x2d31b60<ST4[%3]> [ORD=20]

      0x2d3e6d0: <multiple use>
          0x2d3e6d0: <multiple use>
              0x2d3e6d0: <multiple use>
              0x2d3e2d0: <multiple use>
              0x2d31b60: <multiple use>
            0x2d3e5d0: i32,ch = load 0x2d3e6d0, 0x2d3e2d0, 0x2d31b60<LD4[%2]> [ORD=21]

            0x2d32060: i32 = Constant<4> [ORD=22]

          0x2d31f60: i32 = add 0x2d3e5d0, 0x2d32060 [ORD=22]

          0x2d31b60: <multiple use>
        0x2d31860: i32,ch = load 0x2d3e6d0, 0x2d31f60, 0x2d31b60<LD4[%9]> [ORD=23]

        0x2d3ded0: i32 = Constant<0> [ORD=24]

        0x2d31360: ch = seteq [ORD=24]

      0x2d31960: i1 = setcc 0x2d31860, 0x2d3ded0, 0x2d31360 [ORD=24]

      0x2d31e60: ch = BasicBlock<startup_glowplugs3.if.then 0x2d3f6b0>

    0x2d31a60: ch = brcond 0x2d3e6d0, 0x2d31960, 0x2d31e60

    0x2d31460: ch = BasicBlock<startup_glowplugs3.if.else 0x2d3f550>

  0x2d31660: ch = br 0x2d31a60, 0x2d31460


Legally typed node: 0x2d31460: ch = BasicBlock<startup_glowplugs3.if.else 0x2d3f550> [ID=0]

Legally typed node: 0x2d31e60: ch = BasicBlock<startup_glowplugs3.if.then 0x2d3f6b0> [ID=0]

Legally typed node: 0x2d31360: ch = seteq [ORD=24] [ID=0]

Legally typed node: 0x2d32060: i32 = Constant<4> [ORD=22] [ID=0]

Legally typed node: 0x2d3e3d0: i32 = FrameIndex<2> [ORD=20] [ID=0]

Legally typed node: 0x2d3ded0: i32 = Constant<0> [ORD=24] [ID=0]

Legally typed node: 0x2d3e2d0: i32 = FrameIndex<1> [ORD=15] [ID=0]

Legally typed node: 0x2d31b60: i32 = undef [ORD=15] [ID=0]

Legally typed node: 0x2d31560: i32 = FrameIndex<-1> [ORD=15] [ID=0]

Legally typed node: 0x2d13c48: ch = EntryToken [ORD=15] [ID=0]

Legally typed node: 0x2d3e4d0: ch = store 0x2d13c48, 0x2d31560, 0x2d3e2d0, 0x2d31b60<ST4[%2]> [ORD=15] [ID=0]

Legally typed node: 0x2d3dfd0: f32,ch = load 0x2d3e4d0, 0x2d31560, 0x2d31b60<LD4[%6](align=16)> [ORD=19] [ID=0]

Legally typed node: 0x2d3e6d0: ch = store 0x2d3dfd0:1, 0x2d3dfd0, 0x2d3e3d0, 0x2d31b60<ST4[%3]> [ORD=20] [ID=0]

Legally typed node: 0x2d3e5d0: i32,ch = load 0x2d3e6d0, 0x2d3e2d0, 0x2d31b60<LD4[%2]> [ORD=21] [ID=0]

Legally typed node: 0x2d31f60: i32 = add 0x2d3e5d0, 0x2d32060 [ORD=22] [ID=0]

Legally typed node: 0x2d31860: i32,ch = load 0x2d3e6d0, 0x2d31f60, 0x2d31b60<LD4[%9]> [ORD=23] [ID=0]

Promote integer result: 0x2d31960: i1 = setcc 0x2d31860, 0x2d3ded0, 0x2d31360 [ORD=24] [ID=0]

Promote integer operand: 0x2d31a60: ch = brcond 0x2d3e6d0, 0x2d31960, 0x2d31e60 [ID=0]

Promote integer operand: 0x2d31d60: i32 = zero_extend 0x2d31960 [ID=0]

Legally typed node: 0x2d3e0d0: i32 = Constant<1> [ID=0]

Legally typed node: 0x2d31760: i32 = setcc 0x2d31860, 0x2d3ded0, 0x2d31360 [ORD=24] [ID=0]

Legally typed node: 0x2d3e1d0: i32 = and 0x2d31760, 0x2d3e0d0 [ID=0]

Legally typed node: 0x2d31a60: ch = brcond 0x2d3e6d0, 0x2d3e1d0, 0x2d31e60 [ID=0]

Legally typed node: 0x2d31660: ch = br 0x2d31a60, 0x2d31460 [ID=0]

Legally typed node: 0x7fff0c793220: ch = handlenode 0x2d31660 [ID=0]

Type-legalized selection DAG: BB#0 'startup_glowplugs3:startup_glowplugs3.entry'
SelectionDAG has 21 nodes:
  0x2d31560: i32 = FrameIndex<-1> [ORD=15] [ID=-3]

  0x2d31b60: i32 = undef [ORD=15] [ID=-3]

  0x2d3e2d0: i32 = FrameIndex<1> [ORD=15] [ID=-3]

      0x2d13c48: ch = EntryToken [ORD=15] [ID=-3]

      0x2d31560: <multiple use>
      0x2d3e2d0: <multiple use>
      0x2d31b60: <multiple use>
    0x2d3e4d0: ch = store 0x2d13c48, 0x2d31560, 0x2d3e2d0, 0x2d31b60<ST4[%2]> [ORD=15] [ID=-3]

    0x2d31560: <multiple use>
    0x2d31b60: <multiple use>
  0x2d3dfd0: f32,ch = load 0x2d3e4d0, 0x2d31560, 0x2d31b60<LD4[%6](align=16)> [ORD=19] [ID=-3]

    0x2d3dfd0: <multiple use>
    0x2d3dfd0: <multiple use>
    0x2d3e3d0: i32 = FrameIndex<2> [ORD=20] [ID=-3]

    0x2d31b60: <multiple use>
  0x2d3e6d0: ch = store 0x2d3dfd0:1, 0x2d3dfd0, 0x2d3e3d0, 0x2d31b60<ST4[%3]> [ORD=20] [ID=-3]

      0x2d3e6d0: <multiple use>
            0x2d3e6d0: <multiple use>
                0x2d3e6d0: <multiple use>
                0x2d3e2d0: <multiple use>
                0x2d31b60: <multiple use>
              0x2d3e5d0: i32,ch = load 0x2d3e6d0, 0x2d3e2d0, 0x2d31b60<LD4[%2]> [ORD=21] [ID=-3]

              0x2d32060: i32 = Constant<4> [ORD=22] [ID=-3]

            0x2d31f60: i32 = add 0x2d3e5d0, 0x2d32060 [ORD=22] [ID=-3]

            0x2d31b60: <multiple use>
          0x2d31860: i32,ch = load 0x2d3e6d0, 0x2d31f60, 0x2d31b60<LD4[%9]> [ORD=23] [ID=-3]

          0x2d3ded0: i32 = Constant<0> [ORD=24] [ID=-3]

          0x2d31360: ch = seteq [ORD=24] [ID=-3]

        0x2d31760: i32 = setcc 0x2d31860, 0x2d3ded0, 0x2d31360 [ORD=24] [ID=-3]

        0x2d3e0d0: i32 = Constant<1> [ID=-3]

      0x2d3e1d0: i32 = and 0x2d31760, 0x2d3e0d0 [ID=-3]

      0x2d31e60: ch = BasicBlock<startup_glowplugs3.if.then 0x2d3f6b0> [ID=-3]

    0x2d31a60: ch = brcond 0x2d3e6d0, 0x2d3e1d0, 0x2d31e60 [ID=-3]

    0x2d31460: ch = BasicBlock<startup_glowplugs3.if.else 0x2d3f550> [ID=-3]

  0x2d31660: ch = br 0x2d31a60, 0x2d31460 [ID=-3]



Replacing.2 0x2d3e1d0: i32 = and 0x2d31760, 0x2d3e0d0 [ID=-3]

With: 0x2d31760: i32 = setcc 0x2d31860, 0x2d3ded0, 0x2d31360 [ORD=24] [ID=-3]

Optimized type-legalized selection DAG: BB#0 'startup_glowplugs3:startup_glowplugs3.entry'
SelectionDAG has 19 nodes:
  0x2d31560: i32 = FrameIndex<-1> [ORD=15] [ID=-3]

  0x2d31b60: i32 = undef [ORD=15] [ID=-3]

  0x2d3e2d0: i32 = FrameIndex<1> [ORD=15] [ID=-3]

      0x2d13c48: ch = EntryToken [ORD=15] [ID=-3]

      0x2d31560: <multiple use>
      0x2d3e2d0: <multiple use>
      0x2d31b60: <multiple use>
    0x2d3e4d0: ch = store 0x2d13c48, 0x2d31560, 0x2d3e2d0, 0x2d31b60<ST4[%2]> [ORD=15] [ID=-3]

    0x2d31560: <multiple use>
    0x2d31b60: <multiple use>
  0x2d3dfd0: f32,ch = load 0x2d3e4d0, 0x2d31560, 0x2d31b60<LD4[%6](align=16)> [ORD=19] [ID=-3]

    0x2d3dfd0: <multiple use>
    0x2d3dfd0: <multiple use>
    0x2d3e3d0: i32 = FrameIndex<2> [ORD=20] [ID=-3]

    0x2d31b60: <multiple use>
  0x2d3e6d0: ch = store 0x2d3dfd0:1, 0x2d3dfd0, 0x2d3e3d0, 0x2d31b60<ST4[%3]> [ORD=20] [ID=-3]

      0x2d3e6d0: <multiple use>
          0x2d3e6d0: <multiple use>
              0x2d3e6d0: <multiple use>
              0x2d3e2d0: <multiple use>
              0x2d31b60: <multiple use>
            0x2d3e5d0: i32,ch = load 0x2d3e6d0, 0x2d3e2d0, 0x2d31b60<LD4[%2]> [ORD=21] [ID=-3]

            0x2d32060: i32 = Constant<4> [ORD=22] [ID=-3]

          0x2d31f60: i32 = add 0x2d3e5d0, 0x2d32060 [ORD=22] [ID=-3]

          0x2d31b60: <multiple use>
        0x2d31860: i32,ch = load 0x2d3e6d0, 0x2d31f60, 0x2d31b60<LD4[%9]> [ORD=23] [ID=-3]

        0x2d3ded0: i32 = Constant<0> [ORD=24] [ID=-3]

        0x2d31360: ch = seteq [ORD=24] [ID=-3]

      0x2d31760: i32 = setcc 0x2d31860, 0x2d3ded0, 0x2d31360 [ORD=24] [ID=-3]

      0x2d31e60: ch = BasicBlock<startup_glowplugs3.if.then 0x2d3f6b0> [ID=-3]

    0x2d31a60: ch = brcond 0x2d3e6d0, 0x2d31760, 0x2d31e60 [ID=-3]

    0x2d31460: ch = BasicBlock<startup_glowplugs3.if.else 0x2d3f550> [ID=-3]

  0x2d31660: ch = br 0x2d31a60, 0x2d31460 [ID=-3]


Legalized selection DAG: BB#0 'startup_glowplugs3:startup_glowplugs3.entry'
SelectionDAG has 19 nodes:
  0x2d31560: i32 = FrameIndex<-1> [ORD=15] [ID=1]

  0x2d31b60: i32 = undef [ORD=15] [ID=2]

  0x2d3e2d0: i32 = FrameIndex<1> [ORD=15] [ID=3]

      0x2d13c48: ch = EntryToken [ORD=15] [ID=0]

      0x2d31560: <multiple use>
      0x2d3e2d0: <multiple use>
      0x2d31b60: <multiple use>
    0x2d3e4d0: ch = store 0x2d13c48, 0x2d31560, 0x2d3e2d0, 0x2d31b60<ST4[%2]> [ORD=15] [ID=10]

    0x2d31560: <multiple use>
    0x2d31b60: <multiple use>
  0x2d3dfd0: f32,ch = load 0x2d3e4d0, 0x2d31560, 0x2d31b60<LD4[%6](align=16)> [ORD=19] [ID=11]

    0x2d3dfd0: <multiple use>
    0x2d3dfd0: <multiple use>
    0x2d3e3d0: i32 = FrameIndex<2> [ORD=20] [ID=5]

    0x2d31b60: <multiple use>
  0x2d3e6d0: ch = store 0x2d3dfd0:1, 0x2d3dfd0, 0x2d3e3d0, 0x2d31b60<ST4[%3]> [ORD=20] [ID=12]

      0x2d3e6d0: <multiple use>
          0x2d3e6d0: <multiple use>
              0x2d3e6d0: <multiple use>
              0x2d3e2d0: <multiple use>
              0x2d31b60: <multiple use>
            0x2d3e5d0: i32,ch = load 0x2d3e6d0, 0x2d3e2d0, 0x2d31b60<LD4[%2]> [ORD=21] [ID=13]

            0x2d32060: i32 = Constant<4> [ORD=22] [ID=6]

          0x2d31f60: i32 = add 0x2d3e5d0, 0x2d32060 [ORD=22] [ID=14]

          0x2d31b60: <multiple use>
        0x2d31860: i32,ch = load 0x2d3e6d0, 0x2d31f60, 0x2d31b60<LD4[%9]> [ORD=23] [ID=15]

        0x2d3ded0: i32 = Constant<0> [ORD=24] [ID=4]

        0x2d31360: ch = seteq [ORD=24] [ID=7]

      0x2d31760: i32 = setcc 0x2d31860, 0x2d3ded0, 0x2d31360 [ORD=24] [ID=16]

      0x2d31e60: ch = BasicBlock<startup_glowplugs3.if.then 0x2d3f6b0> [ID=8]

    0x2d31a60: ch = brcond 0x2d3e6d0, 0x2d31760, 0x2d31e60 [ID=17]

    0x2d31460: ch = BasicBlock<startup_glowplugs3.if.else 0x2d3f550> [ID=9]

  0x2d31660: ch = br 0x2d31a60, 0x2d31460 [ID=18]


Optimized legalized selection DAG: BB#0 'startup_glowplugs3:startup_glowplugs3.entry'
SelectionDAG has 19 nodes:
  0x2d31560: i32 = FrameIndex<-1> [ORD=15] [ID=1]

  0x2d31b60: i32 = undef [ORD=15] [ID=2]

  0x2d3e2d0: i32 = FrameIndex<1> [ORD=15] [ID=3]

      0x2d13c48: ch = EntryToken [ORD=15] [ID=0]

      0x2d31560: <multiple use>
      0x2d3e2d0: <multiple use>
      0x2d31b60: <multiple use>
    0x2d3e4d0: ch = store 0x2d13c48, 0x2d31560, 0x2d3e2d0, 0x2d31b60<ST4[%2]> [ORD=15] [ID=10]

    0x2d31560: <multiple use>
    0x2d31b60: <multiple use>
  0x2d3dfd0: f32,ch = load 0x2d3e4d0, 0x2d31560, 0x2d31b60<LD4[%6](align=16)> [ORD=19] [ID=11]

    0x2d3dfd0: <multiple use>
    0x2d3dfd0: <multiple use>
    0x2d3e3d0: i32 = FrameIndex<2> [ORD=20] [ID=5]

    0x2d31b60: <multiple use>
  0x2d3e6d0: ch = store 0x2d3dfd0:1, 0x2d3dfd0, 0x2d3e3d0, 0x2d31b60<ST4[%3]> [ORD=20] [ID=12]

      0x2d3e6d0: <multiple use>
          0x2d3e6d0: <multiple use>
              0x2d3e6d0: <multiple use>
              0x2d3e2d0: <multiple use>
              0x2d31b60: <multiple use>
            0x2d3e5d0: i32,ch = load 0x2d3e6d0, 0x2d3e2d0, 0x2d31b60<LD4[%2]> [ORD=21] [ID=13]

            0x2d32060: i32 = Constant<4> [ORD=22] [ID=6]

          0x2d31f60: i32 = add 0x2d3e5d0, 0x2d32060 [ORD=22] [ID=14]

          0x2d31b60: <multiple use>
        0x2d31860: i32,ch = load 0x2d3e6d0, 0x2d31f60, 0x2d31b60<LD4[%9]> [ORD=23] [ID=15]

        0x2d3ded0: i32 = Constant<0> [ORD=24] [ID=4]

        0x2d31360: ch = seteq [ORD=24] [ID=7]

      0x2d31760: i32 = setcc 0x2d31860, 0x2d3ded0, 0x2d31360 [ORD=24] [ID=16]

      0x2d31e60: ch = BasicBlock<startup_glowplugs3.if.then 0x2d3f6b0> [ID=8]

    0x2d31a60: ch = brcond 0x2d3e6d0, 0x2d31760, 0x2d31e60 [ID=17]

    0x2d31460: ch = BasicBlock<startup_glowplugs3.if.else 0x2d3f550> [ID=9]

  0x2d31660: ch = br 0x2d31a60, 0x2d31460 [ID=18]


===== Instruction selection begins: BB#0 'startup_glowplugs3.entry'
ISEL: Starting pattern match on root node: 0x2d31660: ch = br 0x2d31a60, 0x2d31460 [ID=18]

  Initial Opcode index to 1938
  Morphed node: 0x2d31660: ch = JAL 0x2d31460, 0x2d31a60

ISEL: Match complete!
=> 0x2d31660: ch = JAL 0x2d31460, 0x2d31a60

ISEL: Starting pattern match on root node: 0x2d31a60: ch = brcond 0x2d3e6d0, 0x2d31760, 0x2d31e60 [ID=17]

  Initial Opcode index to 1439
  Morphed node: 0x2d31a60: ch = BEQ 0x2d31e60, 0x2d31860, 0x2d3ded0, 0x2d3e6d0

ISEL: Match complete!
=> 0x2d31a60: ch = BEQ 0x2d31e60, 0x2d31860, 0x2d3ded0, 0x2d3e6d0

ISEL: Starting pattern match on root node: 0x2d31860: i32,ch = load 0x2d3e6d0, 0x2d31f60, 0x2d31b60<LD4[%9]> [ORD=23] [ID=15]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2d31860: i32,ch = LW 0x2d3e5d0, 0x2d31360, 0x2d3e6d0<Mem:LD4[%9]> [ORD=23]

ISEL: Match complete!
=> 0x2d31860: i32,ch = LW 0x2d3e5d0, 0x2d31360, 0x2d3e6d0<Mem:LD4[%9]> [ORD=23]

ISEL: Starting pattern match on root node: 0x2d3e5d0: i32,ch = load 0x2d3e6d0, 0x2d3e2d0, 0x2d31b60<LD4[%2]> [ORD=21] [ID=13]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2d3e5d0: i32,ch = LW 0x2d3e2d0, 0x2d32060, 0x2d3e6d0<Mem:LD4[%2]> [ORD=21]

ISEL: Match complete!
=> 0x2d3e5d0: i32,ch = LW 0x2d3e2d0, 0x2d32060, 0x2d3e6d0<Mem:LD4[%2]> [ORD=21]

ISEL: Starting pattern match on root node: 0x2d3e6d0: ch = store 0x2d3dfd0:1, 0x2d3dfd0, 0x2d3e3d0, 0x2d31b60<ST4[%3]> [ORD=20] [ID=12]

  Initial Opcode index to 178
  Skipped scope entry (due to false predicate) at index 183, continuing at 243
  Morphed node: 0x2d3e6d0: ch = FSW 0x2d3dfd0, 0x2d3e3d0, 0x2d32060, 0x2d3dfd0:1<Mem:ST4[%3]> [ORD=20]

ISEL: Match complete!
=> 0x2d3e6d0: ch = FSW 0x2d3dfd0, 0x2d3e3d0, 0x2d32060, 0x2d3dfd0:1<Mem:ST4[%3]> [ORD=20]

ISEL: Starting pattern match on root node: 0x2d3dfd0: f32,ch = load 0x2d3e4d0, 0x2d31560, 0x2d31b60<LD4[%6](align=16)> [ORD=19] [ID=11]

  Initial Opcode index to 5
  TypeSwitch[f32] from 10 to 159
  Morphed node: 0x2d3dfd0: f32,ch = FLW 0x2d31560, 0x2d32060, 0x2d3e4d0<Mem:LD4[%6](align=16)> [ORD=19]

ISEL: Match complete!
=> 0x2d3dfd0: f32,ch = FLW 0x2d31560, 0x2d32060, 0x2d3e4d0<Mem:LD4[%6](align=16)> [ORD=19]

ISEL: Starting pattern match on root node: 0x2d3e4d0: ch = store 0x2d13c48, 0x2d31560, 0x2d3e2d0, 0x2d31b60<ST4[%2]> [ORD=15] [ID=10]

  Initial Opcode index to 178
  Morphed node: 0x2d3e4d0: ch = SW 0x2d31560, 0x2d3e2d0, 0x2d32060, 0x2d13c48<Mem:ST4[%2]> [ORD=15]

ISEL: Match complete!
=> 0x2d3e4d0: ch = SW 0x2d31560, 0x2d3e2d0, 0x2d32060, 0x2d13c48<Mem:ST4[%2]> [ORD=15]

=> 0x2d31460: ch = BasicBlock<startup_glowplugs3.if.else 0x2d3f550>

=> 0x2d31e60: ch = BasicBlock<startup_glowplugs3.if.then 0x2d3f6b0>

ISEL: Starting pattern match on root node: 0x2d3ded0: i32 = Constant<0> [ORD=24] [ID=4]

  Initial Opcode index to 1226
comparing 0 and 0 and returning value:1
ISEL: Match complete!
=> 0x2d3ded0: i32 = Constant<0> [ORD=24] [ID=4]

=> 0x2d13c48: ch = EntryToken [ORD=15]

===== Instruction selection ends:
Selected selection DAG: BB#0 'startup_glowplugs3:startup_glowplugs3.entry'
SelectionDAG has 20 nodes:
    0x2d3e1d0: <multiple use>
    0x2d32060: <multiple use>
      0x2d3e1d0: <multiple use>
      0x2d3e0d0: <multiple use>
      0x2d32060: <multiple use>
      0x2d13c48: ch = EntryToken [ORD=15]

    0x2d3e4d0: ch = SW 0x2d3e1d0, 0x2d3e0d0, 0x2d32060, 0x2d13c48<Mem:ST4[%2]> [ORD=15]

  0x2d3dfd0: f32,ch = FLW 0x2d3e1d0, 0x2d32060, 0x2d3e4d0<Mem:LD4[%6](align=16)> [ORD=19]

    0x2d3dfd0: <multiple use>
      0x2d31b60: <multiple use>
      0x2d31f60: i32 = TargetFrameIndex<2>

    0x2d3e3d0: i32 = ADDI 0x2d31b60, 0x2d31f60 [ORD=20]

    0x2d32060: <multiple use>
    0x2d3dfd0: <multiple use>
  0x2d3e6d0: ch = FSW 0x2d3dfd0, 0x2d3e3d0, 0x2d32060, 0x2d3dfd0:1<Mem:ST4[%3]> [ORD=20]

  0x2d32060: i32 = TargetConstant<0>

  0x2d31b60: i32 = Register %t5

    0x2d31b60: <multiple use>
    0x2d3ded0: i32 = TargetFrameIndex<1>

  0x2d3e0d0: i32 = ADDI 0x2d31b60, 0x2d3ded0 [ORD=15]

    0x2d31b60: <multiple use>
    0x2d3e2d0: i32 = TargetFrameIndex<-1>

  0x2d3e1d0: i32 = ADDI 0x2d31b60, 0x2d3e2d0 [ORD=15]

    0x2d31460: ch = BasicBlock<startup_glowplugs3.if.else 0x2d3f550>

      0x2d31e60: ch = BasicBlock<startup_glowplugs3.if.then 0x2d3f6b0>

          0x2d3e0d0: <multiple use>
          0x2d32060: <multiple use>
          0x2d3e6d0: <multiple use>
        0x2d3e5d0: i32,ch = LW 0x2d3e0d0, 0x2d32060, 0x2d3e6d0<Mem:LD4[%2]> [ORD=21]

        0x2d31360: i32 = TargetConstant<4>

        0x2d3e6d0: <multiple use>
      0x2d31860: i32,ch = LW 0x2d3e5d0, 0x2d31360, 0x2d3e6d0<Mem:LD4[%9]> [ORD=23]

      0x2d31760: i32 = Register %zero

      0x2d3e6d0: <multiple use>
    0x2d31a60: ch = BEQ 0x2d31e60, 0x2d31860, 0x2d31760, 0x2d3e6d0

  0x2d31660: ch = JAL 0x2d31460, 0x2d31a60


********** List Scheduling BB#0 'startup_glowplugs3.entry' **********
SU(0): 0x2d31660: ch = JAL 0x2d31460, 0x2d31a60 [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x2d31a60: ch = BEQ 0x2d31e60, 0x2d31860, 0x2d31760, 0x2d3e6d0 [ID=1]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
   val SU(8): Latency=1
   ch  SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x2d3e6d0: ch = FSW 0x2d3dfd0, 0x2d3e3d0, 0x2d32060, 0x2d3dfd0:1<Mem:ST4[%3]> [ORD=20] [ID=2]

  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 4
  Predecessors:
   val SU(4): Latency=1
   val SU(3): Latency=1
   ch  SU(4): Latency=1
  Successors:
   ch  SU(1): Latency=1
   ch  SU(8): Latency=1
   ch  SU(9): Latency=1

SU(3): 0x2d3e3d0: i32 = ADDI 0x2d31b60, 0x2d31f60 [ORD=20] [ID=3]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
   val SU(2): Latency=1

SU(4): 0x2d3dfd0: f32,ch = FLW 0x2d3e1d0, 0x2d32060, 0x2d3e4d0<Mem:LD4[%6](align=16)> [ORD=19] [ID=4]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 5
  Predecessors:
   val SU(7): Latency=1
   ch  SU(5): Latency=1
  Successors:
   val SU(2): Latency=1
   ch  SU(2): Latency=1

SU(5): 0x2d3e4d0: ch = SW 0x2d3e1d0, 0x2d3e0d0, 0x2d32060, 0x2d13c48<Mem:ST4[%2]> [ORD=15] [ID=5]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 6
  Predecessors:
   val SU(7): Latency=1
   val SU(6): Latency=1
  Successors:
   ch  SU(4): Latency=1

SU(6): 0x2d3e0d0: i32 = ADDI 0x2d31b60, 0x2d3ded0 [ORD=15] [ID=6]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
   val SU(5): Latency=1
   val SU(9): Latency=1

SU(7): 0x2d3e1d0: i32 = ADDI 0x2d31b60, 0x2d3e2d0 [ORD=15] [ID=7]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
   val SU(4): Latency=1
   val SU(5): Latency=1

SU(8): 0x2d31860: i32,ch = LW 0x2d3e5d0, 0x2d31360, 0x2d3e6d0<Mem:LD4[%9]> [ORD=23] [ID=8]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
   val SU(9): Latency=1
   ch  SU(2): Latency=1
  Successors:
   val SU(1): Latency=1

SU(9): 0x2d3e5d0: i32,ch = LW 0x2d3e0d0, 0x2d32060, 0x2d3e6d0<Mem:LD4[%2]> [ORD=21] [ID=9]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
   val SU(6): Latency=1
   ch  SU(2): Latency=1
  Successors:
   val SU(8): Latency=1


Examining Available:
Height 0: SU(0): 0x2d31660: ch = JAL 0x2d31460, 0x2d31a60 [ID=0]


*** Scheduling [0]: SU(0): 0x2d31660: ch = JAL 0x2d31460, 0x2d31a60 [ID=0]


Examining Available:
Height 1: SU(1): 0x2d31a60: ch = BEQ 0x2d31e60, 0x2d31860, 0x2d31760, 0x2d3e6d0 [ID=1]


*** Scheduling [1]: SU(1): 0x2d31a60: ch = BEQ 0x2d31e60, 0x2d31860, 0x2d31760, 0x2d3e6d0 [ID=1]


Examining Available:
Height 2: SU(8): 0x2d31860: i32,ch = LW 0x2d3e5d0, 0x2d31360, 0x2d3e6d0<Mem:LD4[%9]> [ORD=23] [ID=8]


*** Scheduling [2]: SU(8): 0x2d31860: i32,ch = LW 0x2d3e5d0, 0x2d31360, 0x2d3e6d0<Mem:LD4[%9]> [ORD=23] [ID=8]


Examining Available:
Height 3: SU(9): 0x2d3e5d0: i32,ch = LW 0x2d3e0d0, 0x2d32060, 0x2d3e6d0<Mem:LD4[%2]> [ORD=21] [ID=9]


*** Scheduling [3]: SU(9): 0x2d3e5d0: i32,ch = LW 0x2d3e0d0, 0x2d32060, 0x2d3e6d0<Mem:LD4[%2]> [ORD=21] [ID=9]


Examining Available:
Height 4: SU(2): 0x2d3e6d0: ch = FSW 0x2d3dfd0, 0x2d3e3d0, 0x2d32060, 0x2d3dfd0:1<Mem:ST4[%3]> [ORD=20] [ID=2]


*** Scheduling [4]: SU(2): 0x2d3e6d0: ch = FSW 0x2d3dfd0, 0x2d3e3d0, 0x2d32060, 0x2d3dfd0:1<Mem:ST4[%3]> [ORD=20] [ID=2]


Examining Available:
Height 5: SU(3): 0x2d3e3d0: i32 = ADDI 0x2d31b60, 0x2d31f60 [ORD=20] [ID=3]

Height 5: SU(4): 0x2d3dfd0: f32,ch = FLW 0x2d3e1d0, 0x2d32060, 0x2d3e4d0<Mem:LD4[%6](align=16)> [ORD=19] [ID=4]


*** Scheduling [5]: SU(3): 0x2d3e3d0: i32 = ADDI 0x2d31b60, 0x2d31f60 [ORD=20] [ID=3]


Examining Available:
Height 5: SU(4): 0x2d3dfd0: f32,ch = FLW 0x2d3e1d0, 0x2d32060, 0x2d3e4d0<Mem:LD4[%6](align=16)> [ORD=19] [ID=4]


*** Scheduling [6]: SU(4): 0x2d3dfd0: f32,ch = FLW 0x2d3e1d0, 0x2d32060, 0x2d3e4d0<Mem:LD4[%6](align=16)> [ORD=19] [ID=4]


Examining Available:
Height 7: SU(5): 0x2d3e4d0: ch = SW 0x2d3e1d0, 0x2d3e0d0, 0x2d32060, 0x2d13c48<Mem:ST4[%2]> [ORD=15] [ID=5]


*** Scheduling [7]: SU(5): 0x2d3e4d0: ch = SW 0x2d3e1d0, 0x2d3e0d0, 0x2d32060, 0x2d13c48<Mem:ST4[%2]> [ORD=15] [ID=5]


Examining Available:
Height 8: SU(7): 0x2d3e1d0: i32 = ADDI 0x2d31b60, 0x2d3e2d0 [ORD=15] [ID=7]

Height 8: SU(6): 0x2d3e0d0: i32 = ADDI 0x2d31b60, 0x2d3ded0 [ORD=15] [ID=6]


*** Scheduling [8]: SU(7): 0x2d3e1d0: i32 = ADDI 0x2d31b60, 0x2d3e2d0 [ORD=15] [ID=7]


Examining Available:
Height 8: SU(6): 0x2d3e0d0: i32 = ADDI 0x2d31b60, 0x2d3ded0 [ORD=15] [ID=6]


*** Scheduling [9]: SU(6): 0x2d3e0d0: i32 = ADDI 0x2d31b60, 0x2d3ded0 [ORD=15] [ID=6]

*** Final schedule ***
SU(6): 0x2d3e0d0: i32 = ADDI 0x2d31b60, 0x2d3ded0 [ORD=15] [ID=6]

SU(7): 0x2d3e1d0: i32 = ADDI 0x2d31b60, 0x2d3e2d0 [ORD=15] [ID=7]

SU(5): 0x2d3e4d0: ch = SW 0x2d3e1d0, 0x2d3e0d0, 0x2d32060, 0x2d13c48<Mem:ST4[%2]> [ORD=15] [ID=5]

SU(4): 0x2d3dfd0: f32,ch = FLW 0x2d3e1d0, 0x2d32060, 0x2d3e4d0<Mem:LD4[%6](align=16)> [ORD=19] [ID=4]

SU(3): 0x2d3e3d0: i32 = ADDI 0x2d31b60, 0x2d31f60 [ORD=20] [ID=3]

SU(2): 0x2d3e6d0: ch = FSW 0x2d3dfd0, 0x2d3e3d0, 0x2d32060, 0x2d3dfd0:1<Mem:ST4[%3]> [ORD=20] [ID=2]

SU(9): 0x2d3e5d0: i32,ch = LW 0x2d3e0d0, 0x2d32060, 0x2d3e6d0<Mem:LD4[%2]> [ORD=21] [ID=9]

SU(8): 0x2d31860: i32,ch = LW 0x2d3e5d0, 0x2d31360, 0x2d3e6d0<Mem:LD4[%9]> [ORD=23] [ID=8]

SU(1): 0x2d31a60: ch = BEQ 0x2d31e60, 0x2d31860, 0x2d31760, 0x2d3e6d0 [ID=1]

SU(0): 0x2d31660: ch = JAL 0x2d31460, 0x2d31a60 [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %12 = load float* %3, align 4
I was here to add   %3 = alloca float, align 4
with I type floatand sd value :0x2d3e1d0: i32 = FrameIndex<2>
new load?0x2d3ded0: f32,ch = load 0x2d13c48, 0x2d3e1d0, 0x2d3e0d0<LD4[%3]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x2d3e2d0: i32 = Constant<0>

    0x2d13c48: ch = EntryToken

    0x2d3e1d0: i32 = FrameIndex<2>

    0x2d3e0d0: i32 = undef

  0x2d3ded0: f32,ch = load 0x2d13c48, 0x2d3e1d0, 0x2d3e0d0<LD4[%3]>

  0x2d13c48: ch = EntryToken


I was here to add float 1.500000e+04
Initial selection DAG: BB#1 'startup_glowplugs3:startup_glowplugs3.if.else'
SelectionDAG has 12 nodes:
  0x2d13c48: ch = EntryToken [ORD=25]

  0x2d3e2d0: i32 = Constant<0>

      0x2d13c48: <multiple use>
          0x2d13c48: <multiple use>
          0x2d3e1d0: i32 = FrameIndex<2> [ORD=25]

          0x2d3e0d0: i32 = undef [ORD=25]

        0x2d3ded0: f32,ch = load 0x2d13c48, 0x2d3e1d0, 0x2d3e0d0<LD4[%3]> [ORD=25]

        0x2d31760: f32 = ConstantFP<1.500000e+04> [ORD=26]

        0x2d31f60: ch = setolt [ORD=26]

      0x2d31b60: i1 = setcc 0x2d3ded0, 0x2d31760, 0x2d31f60 [ORD=26]

      0x2d32060: ch = BasicBlock<startup_glowplugs3.return 0x2d3f760>

    0x2d31360: ch = brcond 0x2d13c48, 0x2d31b60, 0x2d32060

    0x2d31660: ch = BasicBlock<startup_glowplugs3.if.else6 0x2d3f600>

  0x2d31a60: ch = br 0x2d31360, 0x2d31660


Optimized lowered selection DAG: BB#1 'startup_glowplugs3:startup_glowplugs3.if.else'
SelectionDAG has 11 nodes:
  0x2d13c48: ch = EntryToken [ORD=25]

      0x2d13c48: <multiple use>
          0x2d13c48: <multiple use>
          0x2d3e1d0: i32 = FrameIndex<2> [ORD=25]

          0x2d3e0d0: i32 = undef [ORD=25]

        0x2d3ded0: f32,ch = load 0x2d13c48, 0x2d3e1d0, 0x2d3e0d0<LD4[%3]> [ORD=25]

        0x2d31760: f32 = ConstantFP<1.500000e+04> [ORD=26]

        0x2d31f60: ch = setolt [ORD=26]

      0x2d31b60: i1 = setcc 0x2d3ded0, 0x2d31760, 0x2d31f60 [ORD=26]

      0x2d32060: ch = BasicBlock<startup_glowplugs3.return 0x2d3f760>

    0x2d31360: ch = brcond 0x2d13c48, 0x2d31b60, 0x2d32060

    0x2d31660: ch = BasicBlock<startup_glowplugs3.if.else6 0x2d3f600>

  0x2d31a60: ch = br 0x2d31360, 0x2d31660


Legally typed node: 0x2d31660: ch = BasicBlock<startup_glowplugs3.if.else6 0x2d3f600> [ID=0]

Legally typed node: 0x2d32060: ch = BasicBlock<startup_glowplugs3.return 0x2d3f760> [ID=0]

Legally typed node: 0x2d31f60: ch = setolt [ORD=26] [ID=0]

Legally typed node: 0x2d31760: f32 = ConstantFP<1.500000e+04> [ORD=26] [ID=0]

Legally typed node: 0x2d3e0d0: i32 = undef [ORD=25] [ID=0]

Legally typed node: 0x2d3e1d0: i32 = FrameIndex<2> [ORD=25] [ID=0]

Legally typed node: 0x2d13c48: ch = EntryToken [ORD=25] [ID=0]

Legally typed node: 0x2d3ded0: f32,ch = load 0x2d13c48, 0x2d3e1d0, 0x2d3e0d0<LD4[%3]> [ORD=25] [ID=0]

Promote integer result: 0x2d31b60: i1 = setcc 0x2d3ded0, 0x2d31760, 0x2d31f60 [ORD=26] [ID=0]

Promote integer operand: 0x2d31360: ch = brcond 0x2d13c48, 0x2d31b60, 0x2d32060 [ID=0]

Promote integer operand: 0x2d31860: i32 = zero_extend 0x2d31b60 [ID=0]

Legally typed node: 0x2d3e5d0: i32 = Constant<1> [ID=0]

Legally typed node: 0x2d3e2d0: i32 = setcc 0x2d3ded0, 0x2d31760, 0x2d31f60 [ORD=26] [ID=0]

Legally typed node: 0x2d3e6d0: i32 = and 0x2d3e2d0, 0x2d3e5d0 [ID=0]

Legally typed node: 0x2d31360: ch = brcond 0x2d13c48, 0x2d3e6d0, 0x2d32060 [ID=0]

Legally typed node: 0x2d31a60: ch = br 0x2d31360, 0x2d31660 [ID=0]

Legally typed node: 0x7fff0c793220: ch = handlenode 0x2d31a60 [ID=0]

Type-legalized selection DAG: BB#1 'startup_glowplugs3:startup_glowplugs3.if.else'
SelectionDAG has 13 nodes:
  0x2d13c48: ch = EntryToken [ORD=25] [ID=-3]

      0x2d13c48: <multiple use>
            0x2d13c48: <multiple use>
            0x2d3e1d0: i32 = FrameIndex<2> [ORD=25] [ID=-3]

            0x2d3e0d0: i32 = undef [ORD=25] [ID=-3]

          0x2d3ded0: f32,ch = load 0x2d13c48, 0x2d3e1d0, 0x2d3e0d0<LD4[%3]> [ORD=25] [ID=-3]

          0x2d31760: f32 = ConstantFP<1.500000e+04> [ORD=26] [ID=-3]

          0x2d31f60: ch = setolt [ORD=26] [ID=-3]

        0x2d3e2d0: i32 = setcc 0x2d3ded0, 0x2d31760, 0x2d31f60 [ORD=26] [ID=-3]

        0x2d3e5d0: i32 = Constant<1> [ID=-3]

      0x2d3e6d0: i32 = and 0x2d3e2d0, 0x2d3e5d0 [ID=-3]

      0x2d32060: ch = BasicBlock<startup_glowplugs3.return 0x2d3f760> [ID=-3]

    0x2d31360: ch = brcond 0x2d13c48, 0x2d3e6d0, 0x2d32060 [ID=-3]

    0x2d31660: ch = BasicBlock<startup_glowplugs3.if.else6 0x2d3f600> [ID=-3]

  0x2d31a60: ch = br 0x2d31360, 0x2d31660 [ID=-3]



Replacing.2 0x2d3e6d0: i32 = and 0x2d3e2d0, 0x2d3e5d0 [ID=-3]

With: 0x2d3e2d0: i32 = setcc 0x2d3ded0, 0x2d31760, 0x2d31f60 [ORD=26] [ID=-3]

Optimized type-legalized selection DAG: BB#1 'startup_glowplugs3:startup_glowplugs3.if.else'
SelectionDAG has 11 nodes:
  0x2d13c48: ch = EntryToken [ORD=25] [ID=-3]

      0x2d13c48: <multiple use>
          0x2d13c48: <multiple use>
          0x2d3e1d0: i32 = FrameIndex<2> [ORD=25] [ID=-3]

          0x2d3e0d0: i32 = undef [ORD=25] [ID=-3]

        0x2d3ded0: f32,ch = load 0x2d13c48, 0x2d3e1d0, 0x2d3e0d0<LD4[%3]> [ORD=25] [ID=-3]

        0x2d31760: f32 = ConstantFP<1.500000e+04> [ORD=26] [ID=-3]

        0x2d31f60: ch = setolt [ORD=26] [ID=-3]

      0x2d3e2d0: i32 = setcc 0x2d3ded0, 0x2d31760, 0x2d31f60 [ORD=26] [ID=-3]

      0x2d32060: ch = BasicBlock<startup_glowplugs3.return 0x2d3f760> [ID=-3]

    0x2d31360: ch = brcond 0x2d13c48, 0x2d3e2d0, 0x2d32060 [ID=-3]

    0x2d31660: ch = BasicBlock<startup_glowplugs3.if.else6 0x2d3f600> [ID=-3]

  0x2d31a60: ch = br 0x2d31360, 0x2d31660 [ID=-3]


Legalized selection DAG: BB#1 'startup_glowplugs3:startup_glowplugs3.if.else'
SelectionDAG has 11 nodes:
  0x2d13c48: ch = EntryToken [ORD=25] [ID=0]

      0x2d13c48: <multiple use>
          0x2d13c48: <multiple use>
          0x2d3e1d0: i32 = FrameIndex<2> [ORD=25] [ID=1]

          0x2d3e0d0: i32 = undef [ORD=25] [ID=2]

        0x2d3ded0: f32,ch = load 0x2d13c48, 0x2d3e1d0, 0x2d3e0d0<LD4[%3]> [ORD=25] [ID=7]

        0x2d3e5d0: i32 = Constant<1181376512>

        0x2d31f60: ch = setolt [ORD=26] [ID=4]

      0x2d3e2d0: i32 = setcc 0x2d3ded0, 0x2d3e5d0, 0x2d31f60 [ORD=26] [ID=8]

      0x2d32060: ch = BasicBlock<startup_glowplugs3.return 0x2d3f760> [ID=5]

    0x2d31360: ch = brcond 0x2d13c48, 0x2d3e2d0, 0x2d32060 [ID=9]

    0x2d31660: ch = BasicBlock<startup_glowplugs3.if.else6 0x2d3f600> [ID=6]

  0x2d31a60: ch = br 0x2d31360, 0x2d31660 [ID=10]


Optimized legalized selection DAG: BB#1 'startup_glowplugs3:startup_glowplugs3.if.else'
SelectionDAG has 11 nodes:
  0x2d13c48: ch = EntryToken [ORD=25] [ID=0]

      0x2d13c48: <multiple use>
          0x2d13c48: <multiple use>
          0x2d3e1d0: i32 = FrameIndex<2> [ORD=25] [ID=1]

          0x2d3e0d0: i32 = undef [ORD=25] [ID=2]

        0x2d3ded0: f32,ch = load 0x2d13c48, 0x2d3e1d0, 0x2d3e0d0<LD4[%3]> [ORD=25] [ID=7]

        0x2d3e5d0: i32 = Constant<1181376512>

        0x2d31f60: ch = setolt [ORD=26] [ID=4]

      0x2d3e2d0: i32 = setcc 0x2d3ded0, 0x2d3e5d0, 0x2d31f60 [ORD=26] [ID=8]

      0x2d32060: ch = BasicBlock<startup_glowplugs3.return 0x2d3f760> [ID=5]

    0x2d31360: ch = brcond 0x2d13c48, 0x2d3e2d0, 0x2d32060 [ID=9]

    0x2d31660: ch = BasicBlock<startup_glowplugs3.if.else6 0x2d3f600> [ID=6]

  0x2d31a60: ch = br 0x2d31360, 0x2d31660 [ID=10]


===== Instruction selection begins: BB#1 'startup_glowplugs3.if.else'
ISEL: Starting pattern match on root node: 0x2d31a60: ch = br 0x2d31360, 0x2d31660 [ID=10]

  Initial Opcode index to 1938
  Morphed node: 0x2d31a60: ch = JAL 0x2d31660, 0x2d31360

ISEL: Match complete!
=> 0x2d31a60: ch = JAL 0x2d31660, 0x2d31360

ISEL: Starting pattern match on root node: 0x2d31360: ch = brcond 0x2d13c48, 0x2d3e2d0, 0x2d32060 [ID=9]

  Initial Opcode index to 1439
  Match failed at index 1449
  Continuing at 1676
  Morphed node: 0x2d31360: ch = BNE 0x2d32060, 0x2d3e2d0, 0x2d31760, 0x2d13c48

ISEL: Match complete!
=> 0x2d31360: ch = BNE 0x2d32060, 0x2d3e2d0, 0x2d31760, 0x2d13c48

ISEL: Starting pattern match on root node: 0x2d3e2d0: i32 = setcc 0x2d3ded0, 0x2d3e5d0, 0x2d31f60 [ORD=26] [ID=8]

  Initial Opcode index to 642
  Match failed at index 651
  Continuing at 688
  Match failed at index 690
  Continuing at 899
  Skipped scope entry (due to false predicate) at index 908, continuing at 920
  Morphed node: 0x2d3e2d0: i32 = FLT_S 0x2d3e5d0, 0x2d3ded0 [ORD=26]

ISEL: Match complete!
=> 0x2d3e2d0: i32 = FLT_S 0x2d3e5d0, 0x2d3ded0 [ORD=26]

ISEL: Starting pattern match on root node: 0x2d3ded0: f32,ch = load 0x2d13c48, 0x2d3e1d0, 0x2d3e0d0<LD4[%3]> [ORD=25] [ID=7]

  Initial Opcode index to 5
  TypeSwitch[f32] from 10 to 159
  Morphed node: 0x2d3ded0: f32,ch = FLW 0x2d3e1d0, 0x2d31f60, 0x2d13c48<Mem:LD4[%3]> [ORD=25]

ISEL: Match complete!
=> 0x2d3ded0: f32,ch = FLW 0x2d3e1d0, 0x2d31f60, 0x2d13c48<Mem:LD4[%3]> [ORD=25]

ISEL: Starting pattern match on root node: 0x2d3e5d0: i32 = Constant<1181376512> [ID=6]

  Initial Opcode index to 1226
comparing 0 and 1181376512 and returning value:0
  Skipped scope entry (due to false predicate) at index 1228, continuing at 1236
  Skipped scope entry (due to false predicate) at index 1240, continuing at 1256
  Morphed node: 0x2d3e5d0: i32 = ADDI 0x2d31760, 0x2d3e0d0

ISEL: Match complete!
=> 0x2d3e5d0: i32 = ADDI 0x2d31760, 0x2d3e0d0

=> 0x2d31660: ch = BasicBlock<startup_glowplugs3.if.else6 0x2d3f600>

=> 0x2d32060: ch = BasicBlock<startup_glowplugs3.return 0x2d3f760>

=> 0x2d13c48: ch = EntryToken [ORD=25]

===== Instruction selection ends:
Selected selection DAG: BB#1 'startup_glowplugs3:startup_glowplugs3.if.else'
SelectionDAG has 14 nodes:
  0x2d13c48: ch = EntryToken [ORD=25]

  0x2d31760: i32 = Register %zero

    0x2d31660: ch = BasicBlock<startup_glowplugs3.if.else6 0x2d3f600>

      0x2d32060: ch = BasicBlock<startup_glowplugs3.return 0x2d3f760>

          0x2d31760: <multiple use>
          0x2d3e0d0: i32 = TargetConstant<1181376512>

        0x2d3e5d0: i32 = ADDI 0x2d31760, 0x2d3e0d0

            0x2d3e6d0: i32 = Register %t5

            0x2d31b60: i32 = TargetFrameIndex<2>

          0x2d3e1d0: i32 = ADDI 0x2d3e6d0, 0x2d31b60 [ORD=25]

          0x2d31f60: i32 = TargetConstant<0>

          0x2d13c48: <multiple use>
        0x2d3ded0: f32,ch = FLW 0x2d3e1d0, 0x2d31f60, 0x2d13c48<Mem:LD4[%3]> [ORD=25]

      0x2d3e2d0: i32 = FLT_S 0x2d3e5d0, 0x2d3ded0 [ORD=26]

      0x2d31760: <multiple use>
      0x2d13c48: <multiple use>
    0x2d31360: ch = BNE 0x2d32060, 0x2d3e2d0, 0x2d31760, 0x2d13c48

  0x2d31a60: ch = JAL 0x2d31660, 0x2d31360


********** List Scheduling BB#1 'startup_glowplugs3.if.else' **********
SU(0): 0x2d31a60: ch = JAL 0x2d31660, 0x2d31360 [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x2d31360: ch = BNE 0x2d32060, 0x2d3e2d0, 0x2d31760, 0x2d13c48 [ID=1]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x2d3e2d0: i32 = FLT_S 0x2d3e5d0, 0x2d3ded0 [ORD=26] [ID=2]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(5): Latency=1
   val SU(3): Latency=1
  Successors:
   val SU(1): Latency=1

SU(3): 0x2d3ded0: f32,ch = FLW 0x2d3e1d0, 0x2d31f60, 0x2d13c48<Mem:LD4[%3]> [ORD=25] [ID=3]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(4): Latency=1
  Successors:
   val SU(2): Latency=1

SU(4): 0x2d3e1d0: i32 = ADDI 0x2d3e6d0, 0x2d31b60 [ORD=25] [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(3): Latency=1

SU(5): 0x2d3e5d0: i32 = ADDI 0x2d31760, 0x2d3e0d0 [ID=5]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(2): Latency=1


Examining Available:
Height 0: SU(0): 0x2d31a60: ch = JAL 0x2d31660, 0x2d31360 [ID=0]


*** Scheduling [0]: SU(0): 0x2d31a60: ch = JAL 0x2d31660, 0x2d31360 [ID=0]


Examining Available:
Height 1: SU(1): 0x2d31360: ch = BNE 0x2d32060, 0x2d3e2d0, 0x2d31760, 0x2d13c48 [ID=1]


*** Scheduling [1]: SU(1): 0x2d31360: ch = BNE 0x2d32060, 0x2d3e2d0, 0x2d31760, 0x2d13c48 [ID=1]


Examining Available:
Height 2: SU(2): 0x2d3e2d0: i32 = FLT_S 0x2d3e5d0, 0x2d3ded0 [ORD=26] [ID=2]


*** Scheduling [2]: SU(2): 0x2d3e2d0: i32 = FLT_S 0x2d3e5d0, 0x2d3ded0 [ORD=26] [ID=2]


Examining Available:
Height 3: SU(5): 0x2d3e5d0: i32 = ADDI 0x2d31760, 0x2d3e0d0 [ID=5]

Height 3: SU(3): 0x2d3ded0: f32,ch = FLW 0x2d3e1d0, 0x2d31f60, 0x2d13c48<Mem:LD4[%3]> [ORD=25] [ID=3]


*** Scheduling [3]: SU(5): 0x2d3e5d0: i32 = ADDI 0x2d31760, 0x2d3e0d0 [ID=5]


Examining Available:
Height 3: SU(3): 0x2d3ded0: f32,ch = FLW 0x2d3e1d0, 0x2d31f60, 0x2d13c48<Mem:LD4[%3]> [ORD=25] [ID=3]


*** Scheduling [4]: SU(3): 0x2d3ded0: f32,ch = FLW 0x2d3e1d0, 0x2d31f60, 0x2d13c48<Mem:LD4[%3]> [ORD=25] [ID=3]


Examining Available:
Height 5: SU(4): 0x2d3e1d0: i32 = ADDI 0x2d3e6d0, 0x2d31b60 [ORD=25] [ID=4]


*** Scheduling [5]: SU(4): 0x2d3e1d0: i32 = ADDI 0x2d3e6d0, 0x2d31b60 [ORD=25] [ID=4]

*** Final schedule ***
SU(4): 0x2d3e1d0: i32 = ADDI 0x2d3e6d0, 0x2d31b60 [ORD=25] [ID=4]

SU(3): 0x2d3ded0: f32,ch = FLW 0x2d3e1d0, 0x2d31f60, 0x2d13c48<Mem:LD4[%3]> [ORD=25] [ID=3]

SU(5): 0x2d3e5d0: i32 = ADDI 0x2d31760, 0x2d3e0d0 [ID=5]

SU(2): 0x2d3e2d0: i32 = FLT_S 0x2d3e5d0, 0x2d3ded0 [ORD=26] [ID=2]

SU(1): 0x2d31360: ch = BNE 0x2d32060, 0x2d3e2d0, 0x2d31760, 0x2d13c48 [ID=1]

SU(0): 0x2d31a60: ch = JAL 0x2d31660, 0x2d31360 [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %14 = load i32** %2, align 4
I was here to add   %2 = alloca i32*, align 4
with I type i32*and sd value :0x2d31b60: i32 = FrameIndex<1>
new load?0x2d31f60: i32,ch = load 0x2d13c48, 0x2d31b60, 0x2d3e0d0<LD4[%2]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x2d3e6d0: i32 = Constant<0>

    0x2d13c48: ch = EntryToken

    0x2d31b60: i32 = FrameIndex<1>

    0x2d3e0d0: i32 = undef

  0x2d31f60: i32,ch = load 0x2d13c48, 0x2d31b60, 0x2d3e0d0<LD4[%2]>

  0x2d13c48: ch = EntryToken


store visit is after?  store i32 0, i32* %15, align 4
I was here to add i32 0
whats in dag after store?SelectionDAG has 9 nodes:
  0x2d3e0d0: i32 = undef [ORD=27]

    0x2d13c48: ch = EntryToken [ORD=27]

    0x2d31b60: i32 = FrameIndex<1> [ORD=27]

    0x2d3e0d0: <multiple use>
  0x2d31f60: i32,ch = load 0x2d13c48, 0x2d31b60, 0x2d3e0d0<LD4[%2]> [ORD=27]

  0x2d31760: i64 = Constant<8>

    0x2d31f60: <multiple use>
    0x2d3e6d0: i32 = Constant<0> [ORD=29]

      0x2d31f60: <multiple use>
      0x2d31a60: i32 = Constant<8> [ORD=28]

    0x2d31360: i32 = add 0x2d31f60, 0x2d31a60 [ORD=28]

    0x2d3e0d0: <multiple use>
  0x2d3e2d0: ch = store 0x2d31f60:1, 0x2d3e6d0, 0x2d31360, 0x2d3e0d0<ST4[%15]> [ORD=29]


visiting load instruction   %16 = load i32** %2, align 4
with I type i32*and sd value :0x2d31b60: i32 = FrameIndex<1>
new load?0x2d3ded0: i32,ch = load 0x2d3e2d0, 0x2d31b60, 0x2d3e0d0<LD4[%2]>
dag after load is dealt with?SelectionDAG has 10 nodes:
  0x2d31b60: i32 = FrameIndex<1> [ORD=27]

  0x2d3e0d0: i32 = undef [ORD=27]

    0x2d13c48: ch = EntryToken [ORD=27]

    0x2d31b60: <multiple use>
    0x2d3e0d0: <multiple use>
  0x2d31f60: i32,ch = load 0x2d13c48, 0x2d31b60, 0x2d3e0d0<LD4[%2]> [ORD=27]

  0x2d31760: i64 = Constant<8>

      0x2d31f60: <multiple use>
      0x2d3e6d0: i32 = Constant<0> [ORD=29]

        0x2d31f60: <multiple use>
        0x2d31a60: i32 = Constant<8> [ORD=28]

      0x2d31360: i32 = add 0x2d31f60, 0x2d31a60 [ORD=28]

      0x2d3e0d0: <multiple use>
    0x2d3e2d0: ch = store 0x2d31f60:1, 0x2d3e6d0, 0x2d31360, 0x2d3e0d0<ST4[%15]> [ORD=29]

    0x2d31b60: <multiple use>
    0x2d3e0d0: <multiple use>
  0x2d3ded0: i32,ch = load 0x2d3e2d0, 0x2d31b60, 0x2d3e0d0<LD4[%2]>

    0x2d31f60: <multiple use>
    0x2d3e6d0: i32 = Constant<0> [ORD=29]

      0x2d31f60: <multiple use>
      0x2d31a60: i32 = Constant<8> [ORD=28]

    0x2d31360: i32 = add 0x2d31f60, 0x2d31a60 [ORD=28]

    0x2d3e0d0: <multiple use>
  0x2d3e2d0: ch = store 0x2d31f60:1, 0x2d3e6d0, 0x2d31360, 0x2d3e0d0<ST4[%15]> [ORD=29]


store visit is after?  store i32 0, i32* %17, align 4
whats in dag after store?SelectionDAG has 14 nodes:
  0x2d31b60: i32 = FrameIndex<1> [ORD=27]

  0x2d3e6d0: i32 = Constant<0> [ORD=29]

  0x2d3e0d0: i32 = undef [ORD=27]

    0x2d13c48: ch = EntryToken [ORD=27]

    0x2d31b60: <multiple use>
    0x2d3e0d0: <multiple use>
  0x2d31f60: i32,ch = load 0x2d13c48, 0x2d31b60, 0x2d3e0d0<LD4[%2]> [ORD=27]

  0x2d31760: i64 = Constant<8>

      0x2d31f60: <multiple use>
      0x2d3e6d0: <multiple use>
        0x2d31f60: <multiple use>
        0x2d31a60: i32 = Constant<8> [ORD=28]

      0x2d31360: i32 = add 0x2d31f60, 0x2d31a60 [ORD=28]

      0x2d3e0d0: <multiple use>
    0x2d3e2d0: ch = store 0x2d31f60:1, 0x2d3e6d0, 0x2d31360, 0x2d3e0d0<ST4[%15]> [ORD=29]

    0x2d31b60: <multiple use>
    0x2d3e0d0: <multiple use>
  0x2d3ded0: i32,ch = load 0x2d3e2d0, 0x2d31b60, 0x2d3e0d0<LD4[%2]> [ORD=30]

  0x2d3e5d0: i64 = Constant<12>

    0x2d3ded0: <multiple use>
    0x2d3e6d0: <multiple use>
      0x2d3ded0: <multiple use>
      0x2d31660: i32 = Constant<12> [ORD=31]

    0x2d32060: i32 = add 0x2d3ded0, 0x2d31660 [ORD=31]

    0x2d3e0d0: <multiple use>
  0x2d3e1d0: ch = store 0x2d3ded0:1, 0x2d3e6d0, 0x2d32060, 0x2d3e0d0<ST4[%17]> [ORD=32]


Initial selection DAG: BB#2 'startup_glowplugs3:startup_glowplugs3.if.else6'
SelectionDAG has 16 nodes:
  0x2d31b60: i32 = FrameIndex<1> [ORD=27]

  0x2d3e6d0: i32 = Constant<0> [ORD=29]

  0x2d3e0d0: i32 = undef [ORD=27]

    0x2d13c48: ch = EntryToken [ORD=27]

    0x2d31b60: <multiple use>
    0x2d3e0d0: <multiple use>
  0x2d31f60: i32,ch = load 0x2d13c48, 0x2d31b60, 0x2d3e0d0<LD4[%2]> [ORD=27]

  0x2d31760: i64 = Constant<8>

      0x2d31f60: <multiple use>
      0x2d3e6d0: <multiple use>
        0x2d31f60: <multiple use>
        0x2d31a60: i32 = Constant<8> [ORD=28]

      0x2d31360: i32 = add 0x2d31f60, 0x2d31a60 [ORD=28]

      0x2d3e0d0: <multiple use>
    0x2d3e2d0: ch = store 0x2d31f60:1, 0x2d3e6d0, 0x2d31360, 0x2d3e0d0<ST4[%15]> [ORD=29]

    0x2d31b60: <multiple use>
    0x2d3e0d0: <multiple use>
  0x2d3ded0: i32,ch = load 0x2d3e2d0, 0x2d31b60, 0x2d3e0d0<LD4[%2]> [ORD=30]

  0x2d3e5d0: i64 = Constant<12>

      0x2d3ded0: <multiple use>
      0x2d3e6d0: <multiple use>
        0x2d3ded0: <multiple use>
        0x2d31660: i32 = Constant<12> [ORD=31]

      0x2d32060: i32 = add 0x2d3ded0, 0x2d31660 [ORD=31]

      0x2d3e0d0: <multiple use>
    0x2d3e1d0: ch = store 0x2d3ded0:1, 0x2d3e6d0, 0x2d32060, 0x2d3e0d0<ST4[%17]> [ORD=32]

    0x2d31860: ch = BasicBlock<startup_glowplugs3.return 0x2d3f760>

  0x2d3dfd0: ch = br 0x2d3e1d0, 0x2d31860


Optimized lowered selection DAG: BB#2 'startup_glowplugs3:startup_glowplugs3.if.else6'
SelectionDAG has 14 nodes:
  0x2d31b60: i32 = FrameIndex<1> [ORD=27]

  0x2d3e6d0: i32 = Constant<0> [ORD=29]

  0x2d3e0d0: i32 = undef [ORD=27]

    0x2d13c48: ch = EntryToken [ORD=27]

    0x2d31b60: <multiple use>
    0x2d3e0d0: <multiple use>
  0x2d31f60: i32,ch = load 0x2d13c48, 0x2d31b60, 0x2d3e0d0<LD4[%2]> [ORD=27]

      0x2d31f60: <multiple use>
      0x2d3e6d0: <multiple use>
        0x2d31f60: <multiple use>
        0x2d31a60: i32 = Constant<8> [ORD=28]

      0x2d31360: i32 = add 0x2d31f60, 0x2d31a60 [ORD=28]

      0x2d3e0d0: <multiple use>
    0x2d3e2d0: ch = store 0x2d31f60:1, 0x2d3e6d0, 0x2d31360, 0x2d3e0d0<ST4[%15]> [ORD=29]

    0x2d31b60: <multiple use>
    0x2d3e0d0: <multiple use>
  0x2d3ded0: i32,ch = load 0x2d3e2d0, 0x2d31b60, 0x2d3e0d0<LD4[%2]> [ORD=30]

      0x2d3ded0: <multiple use>
      0x2d3e6d0: <multiple use>
        0x2d3ded0: <multiple use>
        0x2d31660: i32 = Constant<12> [ORD=31]

      0x2d32060: i32 = add 0x2d3ded0, 0x2d31660 [ORD=31]

      0x2d3e0d0: <multiple use>
    0x2d3e1d0: ch = store 0x2d3ded0:1, 0x2d3e6d0, 0x2d32060, 0x2d3e0d0<ST4[%17]> [ORD=32]

    0x2d31860: ch = BasicBlock<startup_glowplugs3.return 0x2d3f760>

  0x2d3dfd0: ch = br 0x2d3e1d0, 0x2d31860


Legally typed node: 0x2d31860: ch = BasicBlock<startup_glowplugs3.return 0x2d3f760> [ID=0]

Legally typed node: 0x2d31660: i32 = Constant<12> [ORD=31] [ID=0]

Legally typed node: 0x2d31a60: i32 = Constant<8> [ORD=28] [ID=0]

Legally typed node: 0x2d3e0d0: i32 = undef [ORD=27] [ID=0]

Legally typed node: 0x2d3e6d0: i32 = Constant<0> [ORD=29] [ID=0]

Legally typed node: 0x2d31b60: i32 = FrameIndex<1> [ORD=27] [ID=0]

Legally typed node: 0x2d13c48: ch = EntryToken [ORD=27] [ID=0]

Legally typed node: 0x2d31f60: i32,ch = load 0x2d13c48, 0x2d31b60, 0x2d3e0d0<LD4[%2]> [ORD=27] [ID=0]

Legally typed node: 0x2d31360: i32 = add 0x2d31f60, 0x2d31a60 [ORD=28] [ID=0]

Legally typed node: 0x2d3e2d0: ch = store 0x2d31f60:1, 0x2d3e6d0, 0x2d31360, 0x2d3e0d0<ST4[%15]> [ORD=29] [ID=0]

Legally typed node: 0x2d3ded0: i32,ch = load 0x2d3e2d0, 0x2d31b60, 0x2d3e0d0<LD4[%2]> [ORD=30] [ID=0]

Legally typed node: 0x2d32060: i32 = add 0x2d3ded0, 0x2d31660 [ORD=31] [ID=0]

Legally typed node: 0x2d3e1d0: ch = store 0x2d3ded0:1, 0x2d3e6d0, 0x2d32060, 0x2d3e0d0<ST4[%17]> [ORD=32] [ID=0]

Legally typed node: 0x2d3dfd0: ch = br 0x2d3e1d0, 0x2d31860 [ID=0]

Legally typed node: 0x7fff0c793220: ch = handlenode 0x2d3dfd0 [ID=0]

Type-legalized selection DAG: BB#2 'startup_glowplugs3:startup_glowplugs3.if.else6'
SelectionDAG has 14 nodes:
  0x2d31b60: i32 = FrameIndex<1> [ORD=27] [ID=-3]

  0x2d3e6d0: i32 = Constant<0> [ORD=29] [ID=-3]

  0x2d3e0d0: i32 = undef [ORD=27] [ID=-3]

    0x2d13c48: ch = EntryToken [ORD=27] [ID=-3]

    0x2d31b60: <multiple use>
    0x2d3e0d0: <multiple use>
  0x2d31f60: i32,ch = load 0x2d13c48, 0x2d31b60, 0x2d3e0d0<LD4[%2]> [ORD=27] [ID=-3]

      0x2d31f60: <multiple use>
      0x2d3e6d0: <multiple use>
        0x2d31f60: <multiple use>
        0x2d31a60: i32 = Constant<8> [ORD=28] [ID=-3]

      0x2d31360: i32 = add 0x2d31f60, 0x2d31a60 [ORD=28] [ID=-3]

      0x2d3e0d0: <multiple use>
    0x2d3e2d0: ch = store 0x2d31f60:1, 0x2d3e6d0, 0x2d31360, 0x2d3e0d0<ST4[%15]> [ORD=29] [ID=-3]

    0x2d31b60: <multiple use>
    0x2d3e0d0: <multiple use>
  0x2d3ded0: i32,ch = load 0x2d3e2d0, 0x2d31b60, 0x2d3e0d0<LD4[%2]> [ORD=30] [ID=-3]

      0x2d3ded0: <multiple use>
      0x2d3e6d0: <multiple use>
        0x2d3ded0: <multiple use>
        0x2d31660: i32 = Constant<12> [ORD=31] [ID=-3]

      0x2d32060: i32 = add 0x2d3ded0, 0x2d31660 [ORD=31] [ID=-3]

      0x2d3e0d0: <multiple use>
    0x2d3e1d0: ch = store 0x2d3ded0:1, 0x2d3e6d0, 0x2d32060, 0x2d3e0d0<ST4[%17]> [ORD=32] [ID=-3]

    0x2d31860: ch = BasicBlock<startup_glowplugs3.return 0x2d3f760> [ID=-3]

  0x2d3dfd0: ch = br 0x2d3e1d0, 0x2d31860 [ID=-3]


Legalized selection DAG: BB#2 'startup_glowplugs3:startup_glowplugs3.if.else6'
SelectionDAG has 14 nodes:
  0x2d31b60: i32 = FrameIndex<1> [ORD=27] [ID=1]

  0x2d3e6d0: i32 = Constant<0> [ORD=29] [ID=2]

  0x2d3e0d0: i32 = undef [ORD=27] [ID=3]

    0x2d13c48: ch = EntryToken [ORD=27] [ID=0]

    0x2d31b60: <multiple use>
    0x2d3e0d0: <multiple use>
  0x2d31f60: i32,ch = load 0x2d13c48, 0x2d31b60, 0x2d3e0d0<LD4[%2]> [ORD=27] [ID=7]

      0x2d31f60: <multiple use>
      0x2d3e6d0: <multiple use>
        0x2d31f60: <multiple use>
        0x2d31a60: i32 = Constant<8> [ORD=28] [ID=4]

      0x2d31360: i32 = add 0x2d31f60, 0x2d31a60 [ORD=28] [ID=8]

      0x2d3e0d0: <multiple use>
    0x2d3e2d0: ch = store 0x2d31f60:1, 0x2d3e6d0, 0x2d31360, 0x2d3e0d0<ST4[%15]> [ORD=29] [ID=9]

    0x2d31b60: <multiple use>
    0x2d3e0d0: <multiple use>
  0x2d3ded0: i32,ch = load 0x2d3e2d0, 0x2d31b60, 0x2d3e0d0<LD4[%2]> [ORD=30] [ID=10]

      0x2d3ded0: <multiple use>
      0x2d3e6d0: <multiple use>
        0x2d3ded0: <multiple use>
        0x2d31660: i32 = Constant<12> [ORD=31] [ID=5]

      0x2d32060: i32 = add 0x2d3ded0, 0x2d31660 [ORD=31] [ID=11]

      0x2d3e0d0: <multiple use>
    0x2d3e1d0: ch = store 0x2d3ded0:1, 0x2d3e6d0, 0x2d32060, 0x2d3e0d0<ST4[%17]> [ORD=32] [ID=12]

    0x2d31860: ch = BasicBlock<startup_glowplugs3.return 0x2d3f760> [ID=6]

  0x2d3dfd0: ch = br 0x2d3e1d0, 0x2d31860 [ID=13]


Optimized legalized selection DAG: BB#2 'startup_glowplugs3:startup_glowplugs3.if.else6'
SelectionDAG has 14 nodes:
  0x2d31b60: i32 = FrameIndex<1> [ORD=27] [ID=1]

  0x2d3e6d0: i32 = Constant<0> [ORD=29] [ID=2]

  0x2d3e0d0: i32 = undef [ORD=27] [ID=3]

    0x2d13c48: ch = EntryToken [ORD=27] [ID=0]

    0x2d31b60: <multiple use>
    0x2d3e0d0: <multiple use>
  0x2d31f60: i32,ch = load 0x2d13c48, 0x2d31b60, 0x2d3e0d0<LD4[%2]> [ORD=27] [ID=7]

      0x2d31f60: <multiple use>
      0x2d3e6d0: <multiple use>
        0x2d31f60: <multiple use>
        0x2d31a60: i32 = Constant<8> [ORD=28] [ID=4]

      0x2d31360: i32 = add 0x2d31f60, 0x2d31a60 [ORD=28] [ID=8]

      0x2d3e0d0: <multiple use>
    0x2d3e2d0: ch = store 0x2d31f60:1, 0x2d3e6d0, 0x2d31360, 0x2d3e0d0<ST4[%15]> [ORD=29] [ID=9]

    0x2d31b60: <multiple use>
    0x2d3e0d0: <multiple use>
  0x2d3ded0: i32,ch = load 0x2d3e2d0, 0x2d31b60, 0x2d3e0d0<LD4[%2]> [ORD=30] [ID=10]

      0x2d3ded0: <multiple use>
      0x2d3e6d0: <multiple use>
        0x2d3ded0: <multiple use>
        0x2d31660: i32 = Constant<12> [ORD=31] [ID=5]

      0x2d32060: i32 = add 0x2d3ded0, 0x2d31660 [ORD=31] [ID=11]

      0x2d3e0d0: <multiple use>
    0x2d3e1d0: ch = store 0x2d3ded0:1, 0x2d3e6d0, 0x2d32060, 0x2d3e0d0<ST4[%17]> [ORD=32] [ID=12]

    0x2d31860: ch = BasicBlock<startup_glowplugs3.return 0x2d3f760> [ID=6]

  0x2d3dfd0: ch = br 0x2d3e1d0, 0x2d31860 [ID=13]


===== Instruction selection begins: BB#2 'startup_glowplugs3.if.else6'
ISEL: Starting pattern match on root node: 0x2d3dfd0: ch = br 0x2d3e1d0, 0x2d31860 [ID=13]

  Initial Opcode index to 1938
  Morphed node: 0x2d3dfd0: ch = JAL 0x2d31860, 0x2d3e1d0

ISEL: Match complete!
=> 0x2d3dfd0: ch = JAL 0x2d31860, 0x2d3e1d0

ISEL: Starting pattern match on root node: 0x2d3e1d0: ch = store 0x2d3ded0:1, 0x2d3e6d0, 0x2d32060, 0x2d3e0d0<ST4[%17]> [ORD=32] [ID=12]

  Initial Opcode index to 178
  Morphed node: 0x2d3e1d0: ch = SW 0x2d3e6d0, 0x2d3ded0, 0x2d31760, 0x2d3ded0:1<Mem:ST4[%17]> [ORD=32]

ISEL: Match complete!
=> 0x2d3e1d0: ch = SW 0x2d3e6d0, 0x2d3ded0, 0x2d31760, 0x2d3ded0:1<Mem:ST4[%17]> [ORD=32]

ISEL: Starting pattern match on root node: 0x2d3ded0: i32,ch = load 0x2d3e2d0, 0x2d31b60, 0x2d3e0d0<LD4[%2]> [ORD=30] [ID=10]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2d3ded0: i32,ch = LW 0x2d31b60, 0x2d31660, 0x2d3e2d0<Mem:LD4[%2]> [ORD=30]

ISEL: Match complete!
=> 0x2d3ded0: i32,ch = LW 0x2d31b60, 0x2d31660, 0x2d3e2d0<Mem:LD4[%2]> [ORD=30]

ISEL: Starting pattern match on root node: 0x2d3e2d0: ch = store 0x2d31f60:1, 0x2d3e6d0, 0x2d31360, 0x2d3e0d0<ST4[%15]> [ORD=29] [ID=9]

  Initial Opcode index to 178
  Morphed node: 0x2d3e2d0: ch = SW 0x2d3e6d0, 0x2d31f60, 0x2d32060, 0x2d31f60:1<Mem:ST4[%15]> [ORD=29]

ISEL: Match complete!
=> 0x2d3e2d0: ch = SW 0x2d3e6d0, 0x2d31f60, 0x2d32060, 0x2d31f60:1<Mem:ST4[%15]> [ORD=29]

ISEL: Starting pattern match on root node: 0x2d31f60: i32,ch = load 0x2d13c48, 0x2d31b60, 0x2d3e0d0<LD4[%2]> [ORD=27] [ID=7]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2d31f60: i32,ch = LW 0x2d31b60, 0x2d31660, 0x2d13c48<Mem:LD4[%2]> [ORD=27]

ISEL: Match complete!
=> 0x2d31f60: i32,ch = LW 0x2d31b60, 0x2d31660, 0x2d13c48<Mem:LD4[%2]> [ORD=27]

=> 0x2d31860: ch = BasicBlock<startup_glowplugs3.return 0x2d3f760>

ISEL: Starting pattern match on root node: 0x2d3e6d0: i32 = Constant<0> [ORD=29] [ID=2]

  Initial Opcode index to 1226
comparing 0 and 0 and returning value:1
ISEL: Match complete!
=> 0x2d3e6d0: i32 = Constant<0> [ORD=29] [ID=2]

=> 0x2d13c48: ch = EntryToken [ORD=27]

===== Instruction selection ends:
Selected selection DAG: BB#2 'startup_glowplugs3:startup_glowplugs3.if.else6'
SelectionDAG has 14 nodes:
    0x2d31360: <multiple use>
    0x2d31660: <multiple use>
    0x2d13c48: ch = EntryToken [ORD=27]

  0x2d31f60: i32,ch = LW 0x2d31360, 0x2d31660, 0x2d13c48<Mem:LD4[%2]> [ORD=27]

    0x2d31360: <multiple use>
    0x2d31660: <multiple use>
      0x2d3e0d0: <multiple use>
      0x2d31f60: <multiple use>
      0x2d32060: i32 = TargetConstant<8>

      0x2d31f60: <multiple use>
    0x2d3e2d0: ch = SW 0x2d3e0d0, 0x2d31f60, 0x2d32060, 0x2d31f60:1<Mem:ST4[%15]> [ORD=29]

  0x2d3ded0: i32,ch = LW 0x2d31360, 0x2d31660, 0x2d3e2d0<Mem:LD4[%2]> [ORD=30]

  0x2d31660: i32 = TargetConstant<0>

  0x2d3e0d0: i32 = Register %zero

    0x2d3e6d0: i32 = Register %t5

    0x2d31a60: i32 = TargetFrameIndex<1>

  0x2d31360: i32 = ADDI 0x2d3e6d0, 0x2d31a60 [ORD=27]

    0x2d31860: ch = BasicBlock<startup_glowplugs3.return 0x2d3f760>

      0x2d3e0d0: <multiple use>
      0x2d3ded0: <multiple use>
      0x2d31760: i32 = TargetConstant<12>

      0x2d3ded0: <multiple use>
    0x2d3e1d0: ch = SW 0x2d3e0d0, 0x2d3ded0, 0x2d31760, 0x2d3ded0:1<Mem:ST4[%17]> [ORD=32]

  0x2d3dfd0: ch = JAL 0x2d31860, 0x2d3e1d0


********** List Scheduling BB#2 'startup_glowplugs3.if.else6' **********
SU(0): 0x2d3dfd0: ch = JAL 0x2d31860, 0x2d3e1d0 [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x2d3e1d0: ch = SW 0x2d3e0d0, 0x2d3ded0, 0x2d31760, 0x2d3ded0:1<Mem:ST4[%17]> [ORD=32] [ID=1]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
   val SU(2): Latency=1
   ch  SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x2d3ded0: i32,ch = LW 0x2d31360, 0x2d31660, 0x2d3e2d0<Mem:LD4[%2]> [ORD=30] [ID=2]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 3
  Height             : 2
  Predecessors:
   val SU(5): Latency=1
   ch  SU(3): Latency=1
  Successors:
   val SU(1): Latency=1
   ch  SU(1): Latency=1

SU(3): 0x2d3e2d0: ch = SW 0x2d3e0d0, 0x2d31f60, 0x2d32060, 0x2d31f60:1<Mem:ST4[%15]> [ORD=29] [ID=3]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 3
  Predecessors:
   val SU(4): Latency=1
   ch  SU(4): Latency=1
  Successors:
   ch  SU(2): Latency=1

SU(4): 0x2d31f60: i32,ch = LW 0x2d31360, 0x2d31660, 0x2d13c48<Mem:LD4[%2]> [ORD=27] [ID=4]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
   val SU(5): Latency=1
  Successors:
   val SU(3): Latency=1
   ch  SU(3): Latency=1

SU(5): 0x2d31360: i32 = ADDI 0x2d3e6d0, 0x2d31a60 [ORD=27] [ID=5]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
   val SU(2): Latency=1
   val SU(4): Latency=1


Examining Available:
Height 0: SU(0): 0x2d3dfd0: ch = JAL 0x2d31860, 0x2d3e1d0 [ID=0]


*** Scheduling [0]: SU(0): 0x2d3dfd0: ch = JAL 0x2d31860, 0x2d3e1d0 [ID=0]


Examining Available:
Height 1: SU(1): 0x2d3e1d0: ch = SW 0x2d3e0d0, 0x2d3ded0, 0x2d31760, 0x2d3ded0:1<Mem:ST4[%17]> [ORD=32] [ID=1]


*** Scheduling [1]: SU(1): 0x2d3e1d0: ch = SW 0x2d3e0d0, 0x2d3ded0, 0x2d31760, 0x2d3ded0:1<Mem:ST4[%17]> [ORD=32] [ID=1]


Examining Available:
Height 2: SU(2): 0x2d3ded0: i32,ch = LW 0x2d31360, 0x2d31660, 0x2d3e2d0<Mem:LD4[%2]> [ORD=30] [ID=2]


*** Scheduling [2]: SU(2): 0x2d3ded0: i32,ch = LW 0x2d31360, 0x2d31660, 0x2d3e2d0<Mem:LD4[%2]> [ORD=30] [ID=2]


Examining Available:
Height 3: SU(3): 0x2d3e2d0: ch = SW 0x2d3e0d0, 0x2d31f60, 0x2d32060, 0x2d31f60:1<Mem:ST4[%15]> [ORD=29] [ID=3]


*** Scheduling [3]: SU(3): 0x2d3e2d0: ch = SW 0x2d3e0d0, 0x2d31f60, 0x2d32060, 0x2d31f60:1<Mem:ST4[%15]> [ORD=29] [ID=3]


Examining Available:
Height 4: SU(4): 0x2d31f60: i32,ch = LW 0x2d31360, 0x2d31660, 0x2d13c48<Mem:LD4[%2]> [ORD=27] [ID=4]


*** Scheduling [4]: SU(4): 0x2d31f60: i32,ch = LW 0x2d31360, 0x2d31660, 0x2d13c48<Mem:LD4[%2]> [ORD=27] [ID=4]


Examining Available:
Height 5: SU(5): 0x2d31360: i32 = ADDI 0x2d3e6d0, 0x2d31a60 [ORD=27] [ID=5]


*** Scheduling [5]: SU(5): 0x2d31360: i32 = ADDI 0x2d3e6d0, 0x2d31a60 [ORD=27] [ID=5]

*** Final schedule ***
SU(5): 0x2d31360: i32 = ADDI 0x2d3e6d0, 0x2d31a60 [ORD=27] [ID=5]

SU(4): 0x2d31f60: i32,ch = LW 0x2d31360, 0x2d31660, 0x2d13c48<Mem:LD4[%2]> [ORD=27] [ID=4]

SU(3): 0x2d3e2d0: ch = SW 0x2d3e0d0, 0x2d31f60, 0x2d32060, 0x2d31f60:1<Mem:ST4[%15]> [ORD=29] [ID=3]

SU(2): 0x2d3ded0: i32,ch = LW 0x2d31360, 0x2d31660, 0x2d3e2d0<Mem:LD4[%2]> [ORD=30] [ID=2]

SU(1): 0x2d3e1d0: ch = SW 0x2d3e0d0, 0x2d3ded0, 0x2d31760, 0x2d3ded0:1<Mem:ST4[%17]> [ORD=32] [ID=1]

SU(0): 0x2d3dfd0: ch = JAL 0x2d31860, 0x2d3e1d0 [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %18 = load i32** %2, align 4
I was here to add   %2 = alloca i32*, align 4
with I type i32*and sd value :0x2d31360: i32 = FrameIndex<1>
new load?0x2d3e0d0: i32,ch = load 0x2d13c48, 0x2d31360, 0x2d3e6d0<LD4[%2]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x2d31a60: i32 = Constant<0>

    0x2d13c48: ch = EntryToken

    0x2d31360: i32 = FrameIndex<1>

    0x2d3e6d0: i32 = undef

  0x2d3e0d0: i32,ch = load 0x2d13c48, 0x2d31360, 0x2d3e6d0<LD4[%2]>

  0x2d13c48: ch = EntryToken


store visit is after?  store i32 1, i32* %19, align 4
I was here to add i32 1
whats in dag after store?SelectionDAG has 10 nodes:
  0x2d31a60: i32 = Constant<0>

  0x2d3e6d0: i32 = undef [ORD=33]

    0x2d13c48: ch = EntryToken [ORD=33]

    0x2d31360: i32 = FrameIndex<1> [ORD=33]

    0x2d3e6d0: <multiple use>
  0x2d3e0d0: i32,ch = load 0x2d13c48, 0x2d31360, 0x2d3e6d0<LD4[%2]> [ORD=33]

  0x2d32060: i64 = Constant<8>

    0x2d3e0d0: <multiple use>
    0x2d3dfd0: i32 = Constant<1> [ORD=35]

      0x2d3e0d0: <multiple use>
      0x2d31660: i32 = Constant<8> [ORD=34]

    0x2d31760: i32 = add 0x2d3e0d0, 0x2d31660 [ORD=34]

    0x2d3e6d0: <multiple use>
  0x2d3e1d0: ch = store 0x2d3e0d0:1, 0x2d3dfd0, 0x2d31760, 0x2d3e6d0<ST4[%19]> [ORD=35]


visiting load instruction   %20 = load i32** %2, align 4
with I type i32*and sd value :0x2d31360: i32 = FrameIndex<1>
new load?0x2d3ded0: i32,ch = load 0x2d3e1d0, 0x2d31360, 0x2d3e6d0<LD4[%2]>
dag after load is dealt with?SelectionDAG has 11 nodes:
  0x2d31360: i32 = FrameIndex<1> [ORD=33]

  0x2d31a60: i32 = Constant<0>

  0x2d3e6d0: i32 = undef [ORD=33]

    0x2d13c48: ch = EntryToken [ORD=33]

    0x2d31360: <multiple use>
    0x2d3e6d0: <multiple use>
  0x2d3e0d0: i32,ch = load 0x2d13c48, 0x2d31360, 0x2d3e6d0<LD4[%2]> [ORD=33]

  0x2d32060: i64 = Constant<8>

      0x2d3e0d0: <multiple use>
      0x2d3dfd0: i32 = Constant<1> [ORD=35]

        0x2d3e0d0: <multiple use>
        0x2d31660: i32 = Constant<8> [ORD=34]

      0x2d31760: i32 = add 0x2d3e0d0, 0x2d31660 [ORD=34]

      0x2d3e6d0: <multiple use>
    0x2d3e1d0: ch = store 0x2d3e0d0:1, 0x2d3dfd0, 0x2d31760, 0x2d3e6d0<ST4[%19]> [ORD=35]

    0x2d31360: <multiple use>
    0x2d3e6d0: <multiple use>
  0x2d3ded0: i32,ch = load 0x2d3e1d0, 0x2d31360, 0x2d3e6d0<LD4[%2]>

    0x2d3e0d0: <multiple use>
    0x2d3dfd0: i32 = Constant<1> [ORD=35]

      0x2d3e0d0: <multiple use>
      0x2d31660: i32 = Constant<8> [ORD=34]

    0x2d31760: i32 = add 0x2d3e0d0, 0x2d31660 [ORD=34]

    0x2d3e6d0: <multiple use>
  0x2d3e1d0: ch = store 0x2d3e0d0:1, 0x2d3dfd0, 0x2d31760, 0x2d3e6d0<ST4[%19]> [ORD=35]


store visit is after?  store i32 1, i32* %21, align 4
whats in dag after store?SelectionDAG has 15 nodes:
  0x2d31360: i32 = FrameIndex<1> [ORD=33]

  0x2d31a60: i32 = Constant<0>

  0x2d3e6d0: i32 = undef [ORD=33]

    0x2d13c48: ch = EntryToken [ORD=33]

    0x2d31360: <multiple use>
    0x2d3e6d0: <multiple use>
  0x2d3e0d0: i32,ch = load 0x2d13c48, 0x2d31360, 0x2d3e6d0<LD4[%2]> [ORD=33]

  0x2d32060: i64 = Constant<8>

  0x2d3dfd0: i32 = Constant<1> [ORD=35]

      0x2d3e0d0: <multiple use>
      0x2d3dfd0: <multiple use>
        0x2d3e0d0: <multiple use>
        0x2d31660: i32 = Constant<8> [ORD=34]

      0x2d31760: i32 = add 0x2d3e0d0, 0x2d31660 [ORD=34]

      0x2d3e6d0: <multiple use>
    0x2d3e1d0: ch = store 0x2d3e0d0:1, 0x2d3dfd0, 0x2d31760, 0x2d3e6d0<ST4[%19]> [ORD=35]

    0x2d31360: <multiple use>
    0x2d3e6d0: <multiple use>
  0x2d3ded0: i32,ch = load 0x2d3e1d0, 0x2d31360, 0x2d3e6d0<LD4[%2]> [ORD=36]

  0x2d3e2d0: i64 = Constant<12>

    0x2d3ded0: <multiple use>
    0x2d3dfd0: <multiple use>
      0x2d3ded0: <multiple use>
      0x2d31f60: i32 = Constant<12> [ORD=37]

    0x2d31860: i32 = add 0x2d3ded0, 0x2d31f60 [ORD=37]

    0x2d3e6d0: <multiple use>
  0x2d31b60: ch = store 0x2d3ded0:1, 0x2d3dfd0, 0x2d31860, 0x2d3e6d0<ST4[%21]> [ORD=38]


Initial selection DAG: BB#3 'startup_glowplugs3:startup_glowplugs3.if.then'
SelectionDAG has 15 nodes:
  0x2d31360: i32 = FrameIndex<1> [ORD=33]

  0x2d31a60: i32 = Constant<0>

  0x2d3e6d0: i32 = undef [ORD=33]

    0x2d13c48: ch = EntryToken [ORD=33]

    0x2d31360: <multiple use>
    0x2d3e6d0: <multiple use>
  0x2d3e0d0: i32,ch = load 0x2d13c48, 0x2d31360, 0x2d3e6d0<LD4[%2]> [ORD=33]

  0x2d32060: i64 = Constant<8>

  0x2d3dfd0: i32 = Constant<1> [ORD=35]

      0x2d3e0d0: <multiple use>
      0x2d3dfd0: <multiple use>
        0x2d3e0d0: <multiple use>
        0x2d31660: i32 = Constant<8> [ORD=34]

      0x2d31760: i32 = add 0x2d3e0d0, 0x2d31660 [ORD=34]

      0x2d3e6d0: <multiple use>
    0x2d3e1d0: ch = store 0x2d3e0d0:1, 0x2d3dfd0, 0x2d31760, 0x2d3e6d0<ST4[%19]> [ORD=35]

    0x2d31360: <multiple use>
    0x2d3e6d0: <multiple use>
  0x2d3ded0: i32,ch = load 0x2d3e1d0, 0x2d31360, 0x2d3e6d0<LD4[%2]> [ORD=36]

  0x2d3e2d0: i64 = Constant<12>

    0x2d3ded0: <multiple use>
    0x2d3dfd0: <multiple use>
      0x2d3ded0: <multiple use>
      0x2d31f60: i32 = Constant<12> [ORD=37]

    0x2d31860: i32 = add 0x2d3ded0, 0x2d31f60 [ORD=37]

    0x2d3e6d0: <multiple use>
  0x2d31b60: ch = store 0x2d3ded0:1, 0x2d3dfd0, 0x2d31860, 0x2d3e6d0<ST4[%21]> [ORD=38]


Optimized lowered selection DAG: BB#3 'startup_glowplugs3:startup_glowplugs3.if.then'
SelectionDAG has 12 nodes:
  0x2d31360: i32 = FrameIndex<1> [ORD=33]

  0x2d3e6d0: i32 = undef [ORD=33]

    0x2d13c48: ch = EntryToken [ORD=33]

    0x2d31360: <multiple use>
    0x2d3e6d0: <multiple use>
  0x2d3e0d0: i32,ch = load 0x2d13c48, 0x2d31360, 0x2d3e6d0<LD4[%2]> [ORD=33]

  0x2d3dfd0: i32 = Constant<1> [ORD=35]

      0x2d3e0d0: <multiple use>
      0x2d3dfd0: <multiple use>
        0x2d3e0d0: <multiple use>
        0x2d31660: i32 = Constant<8> [ORD=34]

      0x2d31760: i32 = add 0x2d3e0d0, 0x2d31660 [ORD=34]

      0x2d3e6d0: <multiple use>
    0x2d3e1d0: ch = store 0x2d3e0d0:1, 0x2d3dfd0, 0x2d31760, 0x2d3e6d0<ST4[%19]> [ORD=35]

    0x2d31360: <multiple use>
    0x2d3e6d0: <multiple use>
  0x2d3ded0: i32,ch = load 0x2d3e1d0, 0x2d31360, 0x2d3e6d0<LD4[%2]> [ORD=36]

    0x2d3ded0: <multiple use>
    0x2d3dfd0: <multiple use>
      0x2d3ded0: <multiple use>
      0x2d31f60: i32 = Constant<12> [ORD=37]

    0x2d31860: i32 = add 0x2d3ded0, 0x2d31f60 [ORD=37]

    0x2d3e6d0: <multiple use>
  0x2d31b60: ch = store 0x2d3ded0:1, 0x2d3dfd0, 0x2d31860, 0x2d3e6d0<ST4[%21]> [ORD=38]


Legally typed node: 0x2d31f60: i32 = Constant<12> [ORD=37] [ID=0]

Legally typed node: 0x2d3dfd0: i32 = Constant<1> [ORD=35] [ID=0]

Legally typed node: 0x2d31660: i32 = Constant<8> [ORD=34] [ID=0]

Legally typed node: 0x2d3e6d0: i32 = undef [ORD=33] [ID=0]

Legally typed node: 0x2d31360: i32 = FrameIndex<1> [ORD=33] [ID=0]

Legally typed node: 0x2d13c48: ch = EntryToken [ORD=33] [ID=0]

Legally typed node: 0x2d3e0d0: i32,ch = load 0x2d13c48, 0x2d31360, 0x2d3e6d0<LD4[%2]> [ORD=33] [ID=0]

Legally typed node: 0x2d31760: i32 = add 0x2d3e0d0, 0x2d31660 [ORD=34] [ID=0]

Legally typed node: 0x2d3e1d0: ch = store 0x2d3e0d0:1, 0x2d3dfd0, 0x2d31760, 0x2d3e6d0<ST4[%19]> [ORD=35] [ID=0]

Legally typed node: 0x2d3ded0: i32,ch = load 0x2d3e1d0, 0x2d31360, 0x2d3e6d0<LD4[%2]> [ORD=36] [ID=0]

Legally typed node: 0x2d31860: i32 = add 0x2d3ded0, 0x2d31f60 [ORD=37] [ID=0]

Legally typed node: 0x2d31b60: ch = store 0x2d3ded0:1, 0x2d3dfd0, 0x2d31860, 0x2d3e6d0<ST4[%21]> [ORD=38] [ID=0]

Legally typed node: 0x7fff0c793220: ch = handlenode 0x2d31b60 [ID=0]

Type-legalized selection DAG: BB#3 'startup_glowplugs3:startup_glowplugs3.if.then'
SelectionDAG has 12 nodes:
  0x2d31360: i32 = FrameIndex<1> [ORD=33] [ID=-3]

  0x2d3e6d0: i32 = undef [ORD=33] [ID=-3]

    0x2d13c48: ch = EntryToken [ORD=33] [ID=-3]

    0x2d31360: <multiple use>
    0x2d3e6d0: <multiple use>
  0x2d3e0d0: i32,ch = load 0x2d13c48, 0x2d31360, 0x2d3e6d0<LD4[%2]> [ORD=33] [ID=-3]

  0x2d3dfd0: i32 = Constant<1> [ORD=35] [ID=-3]

      0x2d3e0d0: <multiple use>
      0x2d3dfd0: <multiple use>
        0x2d3e0d0: <multiple use>
        0x2d31660: i32 = Constant<8> [ORD=34] [ID=-3]

      0x2d31760: i32 = add 0x2d3e0d0, 0x2d31660 [ORD=34] [ID=-3]

      0x2d3e6d0: <multiple use>
    0x2d3e1d0: ch = store 0x2d3e0d0:1, 0x2d3dfd0, 0x2d31760, 0x2d3e6d0<ST4[%19]> [ORD=35] [ID=-3]

    0x2d31360: <multiple use>
    0x2d3e6d0: <multiple use>
  0x2d3ded0: i32,ch = load 0x2d3e1d0, 0x2d31360, 0x2d3e6d0<LD4[%2]> [ORD=36] [ID=-3]

    0x2d3ded0: <multiple use>
    0x2d3dfd0: <multiple use>
      0x2d3ded0: <multiple use>
      0x2d31f60: i32 = Constant<12> [ORD=37] [ID=-3]

    0x2d31860: i32 = add 0x2d3ded0, 0x2d31f60 [ORD=37] [ID=-3]

    0x2d3e6d0: <multiple use>
  0x2d31b60: ch = store 0x2d3ded0:1, 0x2d3dfd0, 0x2d31860, 0x2d3e6d0<ST4[%21]> [ORD=38] [ID=-3]


Legalized selection DAG: BB#3 'startup_glowplugs3:startup_glowplugs3.if.then'
SelectionDAG has 12 nodes:
  0x2d31360: i32 = FrameIndex<1> [ORD=33] [ID=1]

  0x2d3e6d0: i32 = undef [ORD=33] [ID=2]

  0x2d3dfd0: i32 = Constant<1> [ORD=35] [ID=4]

    0x2d13c48: ch = EntryToken [ORD=33] [ID=0]

    0x2d31360: <multiple use>
    0x2d3e6d0: <multiple use>
  0x2d3e0d0: i32,ch = load 0x2d13c48, 0x2d31360, 0x2d3e6d0<LD4[%2]> [ORD=33] [ID=6]

      0x2d3e0d0: <multiple use>
      0x2d3dfd0: <multiple use>
        0x2d3e0d0: <multiple use>
        0x2d31660: i32 = Constant<8> [ORD=34] [ID=3]

      0x2d31760: i32 = add 0x2d3e0d0, 0x2d31660 [ORD=34] [ID=7]

      0x2d3e6d0: <multiple use>
    0x2d3e1d0: ch = store 0x2d3e0d0:1, 0x2d3dfd0, 0x2d31760, 0x2d3e6d0<ST4[%19]> [ORD=35] [ID=8]

    0x2d31360: <multiple use>
    0x2d3e6d0: <multiple use>
  0x2d3ded0: i32,ch = load 0x2d3e1d0, 0x2d31360, 0x2d3e6d0<LD4[%2]> [ORD=36] [ID=9]

    0x2d3ded0: <multiple use>
    0x2d3dfd0: <multiple use>
      0x2d3ded0: <multiple use>
      0x2d31f60: i32 = Constant<12> [ORD=37] [ID=5]

    0x2d31860: i32 = add 0x2d3ded0, 0x2d31f60 [ORD=37] [ID=10]

    0x2d3e6d0: <multiple use>
  0x2d31b60: ch = store 0x2d3ded0:1, 0x2d3dfd0, 0x2d31860, 0x2d3e6d0<ST4[%21]> [ORD=38] [ID=11]


Optimized legalized selection DAG: BB#3 'startup_glowplugs3:startup_glowplugs3.if.then'
SelectionDAG has 12 nodes:
  0x2d31360: i32 = FrameIndex<1> [ORD=33] [ID=1]

  0x2d3e6d0: i32 = undef [ORD=33] [ID=2]

  0x2d3dfd0: i32 = Constant<1> [ORD=35] [ID=4]

    0x2d13c48: ch = EntryToken [ORD=33] [ID=0]

    0x2d31360: <multiple use>
    0x2d3e6d0: <multiple use>
  0x2d3e0d0: i32,ch = load 0x2d13c48, 0x2d31360, 0x2d3e6d0<LD4[%2]> [ORD=33] [ID=6]

      0x2d3e0d0: <multiple use>
      0x2d3dfd0: <multiple use>
        0x2d3e0d0: <multiple use>
        0x2d31660: i32 = Constant<8> [ORD=34] [ID=3]

      0x2d31760: i32 = add 0x2d3e0d0, 0x2d31660 [ORD=34] [ID=7]

      0x2d3e6d0: <multiple use>
    0x2d3e1d0: ch = store 0x2d3e0d0:1, 0x2d3dfd0, 0x2d31760, 0x2d3e6d0<ST4[%19]> [ORD=35] [ID=8]

    0x2d31360: <multiple use>
    0x2d3e6d0: <multiple use>
  0x2d3ded0: i32,ch = load 0x2d3e1d0, 0x2d31360, 0x2d3e6d0<LD4[%2]> [ORD=36] [ID=9]

    0x2d3ded0: <multiple use>
    0x2d3dfd0: <multiple use>
      0x2d3ded0: <multiple use>
      0x2d31f60: i32 = Constant<12> [ORD=37] [ID=5]

    0x2d31860: i32 = add 0x2d3ded0, 0x2d31f60 [ORD=37] [ID=10]

    0x2d3e6d0: <multiple use>
  0x2d31b60: ch = store 0x2d3ded0:1, 0x2d3dfd0, 0x2d31860, 0x2d3e6d0<ST4[%21]> [ORD=38] [ID=11]


===== Instruction selection begins: BB#3 'startup_glowplugs3.if.then'
ISEL: Starting pattern match on root node: 0x2d31b60: ch = store 0x2d3ded0:1, 0x2d3dfd0, 0x2d31860, 0x2d3e6d0<ST4[%21]> [ORD=38] [ID=11]

  Initial Opcode index to 178
  Morphed node: 0x2d31b60: ch = SW 0x2d3dfd0, 0x2d3ded0, 0x2d31a60, 0x2d3ded0:1<Mem:ST4[%21]> [ORD=38]

ISEL: Match complete!
=> 0x2d31b60: ch = SW 0x2d3dfd0, 0x2d3ded0, 0x2d31a60, 0x2d3ded0:1<Mem:ST4[%21]> [ORD=38]

ISEL: Starting pattern match on root node: 0x2d3ded0: i32,ch = load 0x2d3e1d0, 0x2d31360, 0x2d3e6d0<LD4[%2]> [ORD=36] [ID=9]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2d3ded0: i32,ch = LW 0x2d31360, 0x2d31f60, 0x2d3e1d0<Mem:LD4[%2]> [ORD=36]

ISEL: Match complete!
=> 0x2d3ded0: i32,ch = LW 0x2d31360, 0x2d31f60, 0x2d3e1d0<Mem:LD4[%2]> [ORD=36]

ISEL: Starting pattern match on root node: 0x2d3e1d0: ch = store 0x2d3e0d0:1, 0x2d3dfd0, 0x2d31760, 0x2d3e6d0<ST4[%19]> [ORD=35] [ID=8]

  Initial Opcode index to 178
  Morphed node: 0x2d3e1d0: ch = SW 0x2d3dfd0, 0x2d3e0d0, 0x2d31860, 0x2d3e0d0:1<Mem:ST4[%19]> [ORD=35]

ISEL: Match complete!
=> 0x2d3e1d0: ch = SW 0x2d3dfd0, 0x2d3e0d0, 0x2d31860, 0x2d3e0d0:1<Mem:ST4[%19]> [ORD=35]

ISEL: Starting pattern match on root node: 0x2d3e0d0: i32,ch = load 0x2d13c48, 0x2d31360, 0x2d3e6d0<LD4[%2]> [ORD=33] [ID=6]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2d3e0d0: i32,ch = LW 0x2d31360, 0x2d31f60, 0x2d13c48<Mem:LD4[%2]> [ORD=33]

ISEL: Match complete!
=> 0x2d3e0d0: i32,ch = LW 0x2d31360, 0x2d31f60, 0x2d13c48<Mem:LD4[%2]> [ORD=33]

ISEL: Starting pattern match on root node: 0x2d3dfd0: i32 = Constant<1> [ORD=35] [ID=4]

  Initial Opcode index to 1226
comparing 0 and 1 and returning value:0
  Skipped scope entry (due to false predicate) at index 1228, continuing at 1236
  Morphed node: 0x2d3dfd0: i32 = ADDI 0x2d3e6d0, 0x2d31660 [ORD=35]

ISEL: Match complete!
=> 0x2d3dfd0: i32 = ADDI 0x2d3e6d0, 0x2d31660 [ORD=35]

=> 0x2d13c48: ch = EntryToken [ORD=33]

===== Instruction selection ends:
Selected selection DAG: BB#3 'startup_glowplugs3:startup_glowplugs3.if.then'
SelectionDAG has 14 nodes:
    0x2d3e6d0: i32 = Register %zero

    0x2d31660: i32 = TargetConstant<1>

  0x2d3dfd0: i32 = ADDI 0x2d3e6d0, 0x2d31660 [ORD=35]

    0x2d3e2d0: <multiple use>
    0x2d31f60: <multiple use>
    0x2d13c48: ch = EntryToken [ORD=33]

  0x2d3e0d0: i32,ch = LW 0x2d3e2d0, 0x2d31f60, 0x2d13c48<Mem:LD4[%2]> [ORD=33]

    0x2d3e2d0: <multiple use>
    0x2d31f60: <multiple use>
      0x2d3dfd0: <multiple use>
      0x2d3e0d0: <multiple use>
      0x2d31860: i32 = TargetConstant<8>

      0x2d3e0d0: <multiple use>
    0x2d3e1d0: ch = SW 0x2d3dfd0, 0x2d3e0d0, 0x2d31860, 0x2d3e0d0:1<Mem:ST4[%19]> [ORD=35]

  0x2d3ded0: i32,ch = LW 0x2d3e2d0, 0x2d31f60, 0x2d3e1d0<Mem:LD4[%2]> [ORD=36]

  0x2d31f60: i32 = TargetConstant<0>

    0x2d31760: i32 = Register %t5

    0x2d32060: i32 = TargetFrameIndex<1>

  0x2d3e2d0: i32 = ADDI 0x2d31760, 0x2d32060 [ORD=33]

    0x2d3dfd0: <multiple use>
    0x2d3ded0: <multiple use>
    0x2d31a60: i32 = TargetConstant<12>

    0x2d3ded0: <multiple use>
  0x2d31b60: ch = SW 0x2d3dfd0, 0x2d3ded0, 0x2d31a60, 0x2d3ded0:1<Mem:ST4[%21]> [ORD=38]


********** List Scheduling BB#3 'startup_glowplugs3.if.then' **********
SU(0): 0x2d31b60: ch = SW 0x2d3dfd0, 0x2d3ded0, 0x2d31a60, 0x2d3ded0:1<Mem:ST4[%21]> [ORD=38] [ID=0]

  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
   val SU(5): Latency=1
   val SU(1): Latency=1
   ch  SU(1): Latency=1

SU(1): 0x2d3ded0: i32,ch = LW 0x2d3e2d0, 0x2d31f60, 0x2d3e1d0<Mem:LD4[%2]> [ORD=36] [ID=1]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(4): Latency=1
   ch  SU(2): Latency=1
  Successors:
   val SU(0): Latency=1
   ch  SU(0): Latency=1

SU(2): 0x2d3e1d0: ch = SW 0x2d3dfd0, 0x2d3e0d0, 0x2d31860, 0x2d3e0d0:1<Mem:ST4[%19]> [ORD=35] [ID=2]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(5): Latency=1
   val SU(3): Latency=1
   ch  SU(3): Latency=1
  Successors:
   ch  SU(1): Latency=1

SU(3): 0x2d3e0d0: i32,ch = LW 0x2d3e2d0, 0x2d31f60, 0x2d13c48<Mem:LD4[%2]> [ORD=33] [ID=3]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(4): Latency=1
  Successors:
   val SU(2): Latency=1
   ch  SU(2): Latency=1

SU(4): 0x2d3e2d0: i32 = ADDI 0x2d31760, 0x2d32060 [ORD=33] [ID=4]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(1): Latency=1
   val SU(3): Latency=1

SU(5): 0x2d3dfd0: i32 = ADDI 0x2d3e6d0, 0x2d31660 [ORD=35] [ID=5]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(0): Latency=1
   val SU(2): Latency=1


Examining Available:
Height 0: SU(0): 0x2d31b60: ch = SW 0x2d3dfd0, 0x2d3ded0, 0x2d31a60, 0x2d3ded0:1<Mem:ST4[%21]> [ORD=38] [ID=0]


*** Scheduling [0]: SU(0): 0x2d31b60: ch = SW 0x2d3dfd0, 0x2d3ded0, 0x2d31a60, 0x2d3ded0:1<Mem:ST4[%21]> [ORD=38] [ID=0]


Examining Available:
Height 1: SU(1): 0x2d3ded0: i32,ch = LW 0x2d3e2d0, 0x2d31f60, 0x2d3e1d0<Mem:LD4[%2]> [ORD=36] [ID=1]


*** Scheduling [1]: SU(1): 0x2d3ded0: i32,ch = LW 0x2d3e2d0, 0x2d31f60, 0x2d3e1d0<Mem:LD4[%2]> [ORD=36] [ID=1]


Examining Available:
Height 2: SU(2): 0x2d3e1d0: ch = SW 0x2d3dfd0, 0x2d3e0d0, 0x2d31860, 0x2d3e0d0:1<Mem:ST4[%19]> [ORD=35] [ID=2]


*** Scheduling [2]: SU(2): 0x2d3e1d0: ch = SW 0x2d3dfd0, 0x2d3e0d0, 0x2d31860, 0x2d3e0d0:1<Mem:ST4[%19]> [ORD=35] [ID=2]


Examining Available:
Height 3: SU(5): 0x2d3dfd0: i32 = ADDI 0x2d3e6d0, 0x2d31660 [ORD=35] [ID=5]

Height 3: SU(3): 0x2d3e0d0: i32,ch = LW 0x2d3e2d0, 0x2d31f60, 0x2d13c48<Mem:LD4[%2]> [ORD=33] [ID=3]


*** Scheduling [3]: SU(5): 0x2d3dfd0: i32 = ADDI 0x2d3e6d0, 0x2d31660 [ORD=35] [ID=5]


Examining Available:
Height 3: SU(3): 0x2d3e0d0: i32,ch = LW 0x2d3e2d0, 0x2d31f60, 0x2d13c48<Mem:LD4[%2]> [ORD=33] [ID=3]


*** Scheduling [4]: SU(3): 0x2d3e0d0: i32,ch = LW 0x2d3e2d0, 0x2d31f60, 0x2d13c48<Mem:LD4[%2]> [ORD=33] [ID=3]


Examining Available:
Height 5: SU(4): 0x2d3e2d0: i32 = ADDI 0x2d31760, 0x2d32060 [ORD=33] [ID=4]


*** Scheduling [5]: SU(4): 0x2d3e2d0: i32 = ADDI 0x2d31760, 0x2d32060 [ORD=33] [ID=4]

*** Final schedule ***
SU(4): 0x2d3e2d0: i32 = ADDI 0x2d31760, 0x2d32060 [ORD=33] [ID=4]

SU(3): 0x2d3e0d0: i32,ch = LW 0x2d3e2d0, 0x2d31f60, 0x2d13c48<Mem:LD4[%2]> [ORD=33] [ID=3]

SU(5): 0x2d3dfd0: i32 = ADDI 0x2d3e6d0, 0x2d31660 [ORD=35] [ID=5]

SU(2): 0x2d3e1d0: ch = SW 0x2d3dfd0, 0x2d3e0d0, 0x2d31860, 0x2d3e0d0:1<Mem:ST4[%19]> [ORD=35] [ID=2]

SU(1): 0x2d3ded0: i32,ch = LW 0x2d3e2d0, 0x2d31f60, 0x2d3e1d0<Mem:LD4[%2]> [ORD=36] [ID=1]

SU(0): 0x2d31b60: ch = SW 0x2d3dfd0, 0x2d3ded0, 0x2d31a60, 0x2d3ded0:1<Mem:ST4[%21]> [ORD=38] [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %22 = load i32** %2, align 4
I was here to add   %2 = alloca i32*, align 4
with I type i32*and sd value :0x2d3e2d0: i32 = FrameIndex<1>
new load?0x2d31660: i32,ch = load 0x2d13c48, 0x2d3e2d0, 0x2d31760<LD4[%2]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x2d32060: i32 = Constant<0>

    0x2d13c48: ch = EntryToken

    0x2d3e2d0: i32 = FrameIndex<1>

    0x2d31760: i32 = undef

  0x2d31660: i32,ch = load 0x2d13c48, 0x2d3e2d0, 0x2d31760<LD4[%2]>

  0x2d13c48: ch = EntryToken


store visit is after?  store i32* %22, i32** %1, align 4
I was here to add   %1 = alloca i32*, align 4, !ConsumedBy !6
whats in dag after store?SelectionDAG has 7 nodes:
  0x2d32060: i32 = Constant<0>

  0x2d31760: i32 = undef [ORD=39]

    0x2d13c48: ch = EntryToken [ORD=39]

    0x2d3e2d0: i32 = FrameIndex<1> [ORD=39]

    0x2d31760: <multiple use>
  0x2d31660: i32,ch = load 0x2d13c48, 0x2d3e2d0, 0x2d31760<LD4[%2]> [ORD=39]

    0x2d31660: <multiple use>
    0x2d31660: <multiple use>
    0x2d3e6d0: i32 = FrameIndex<0> [ORD=40]

    0x2d31760: <multiple use>
  0x2d31860: ch = store 0x2d31660:1, 0x2d31660, 0x2d3e6d0, 0x2d31760<ST4[%1]> [ORD=40]


Initial selection DAG: BB#4 'startup_glowplugs3:startup_glowplugs3.return'
SelectionDAG has 7 nodes:
  0x2d32060: i32 = Constant<0>

  0x2d31760: i32 = undef [ORD=39]

    0x2d13c48: ch = EntryToken [ORD=39]

    0x2d3e2d0: i32 = FrameIndex<1> [ORD=39]

    0x2d31760: <multiple use>
  0x2d31660: i32,ch = load 0x2d13c48, 0x2d3e2d0, 0x2d31760<LD4[%2]> [ORD=39]

    0x2d31660: <multiple use>
    0x2d31660: <multiple use>
    0x2d3e6d0: i32 = FrameIndex<0> [ORD=40]

    0x2d31760: <multiple use>
  0x2d31860: ch = store 0x2d31660:1, 0x2d31660, 0x2d3e6d0, 0x2d31760<ST4[%1]> [ORD=40]


Optimized lowered selection DAG: BB#4 'startup_glowplugs3:startup_glowplugs3.return'
SelectionDAG has 6 nodes:
  0x2d31760: i32 = undef [ORD=39]

    0x2d13c48: ch = EntryToken [ORD=39]

    0x2d3e2d0: i32 = FrameIndex<1> [ORD=39]

    0x2d31760: <multiple use>
  0x2d31660: i32,ch = load 0x2d13c48, 0x2d3e2d0, 0x2d31760<LD4[%2]> [ORD=39]

    0x2d31660: <multiple use>
    0x2d31660: <multiple use>
    0x2d3e6d0: i32 = FrameIndex<0> [ORD=40]

    0x2d31760: <multiple use>
  0x2d31860: ch = store 0x2d31660:1, 0x2d31660, 0x2d3e6d0, 0x2d31760<ST4[%1]> [ORD=40]


Legally typed node: 0x2d3e6d0: i32 = FrameIndex<0> [ORD=40] [ID=0]

Legally typed node: 0x2d31760: i32 = undef [ORD=39] [ID=0]

Legally typed node: 0x2d3e2d0: i32 = FrameIndex<1> [ORD=39] [ID=0]

Legally typed node: 0x2d13c48: ch = EntryToken [ORD=39] [ID=0]

Legally typed node: 0x2d31660: i32,ch = load 0x2d13c48, 0x2d3e2d0, 0x2d31760<LD4[%2]> [ORD=39] [ID=0]

Legally typed node: 0x2d31860: ch = store 0x2d31660:1, 0x2d31660, 0x2d3e6d0, 0x2d31760<ST4[%1]> [ORD=40] [ID=0]

Legally typed node: 0x7fff0c793220: ch = handlenode 0x2d31860 [ID=0]

Type-legalized selection DAG: BB#4 'startup_glowplugs3:startup_glowplugs3.return'
SelectionDAG has 6 nodes:
  0x2d31760: i32 = undef [ORD=39] [ID=-3]

    0x2d13c48: ch = EntryToken [ORD=39] [ID=-3]

    0x2d3e2d0: i32 = FrameIndex<1> [ORD=39] [ID=-3]

    0x2d31760: <multiple use>
  0x2d31660: i32,ch = load 0x2d13c48, 0x2d3e2d0, 0x2d31760<LD4[%2]> [ORD=39] [ID=-3]

    0x2d31660: <multiple use>
    0x2d31660: <multiple use>
    0x2d3e6d0: i32 = FrameIndex<0> [ORD=40] [ID=-3]

    0x2d31760: <multiple use>
  0x2d31860: ch = store 0x2d31660:1, 0x2d31660, 0x2d3e6d0, 0x2d31760<ST4[%1]> [ORD=40] [ID=-3]


Legalized selection DAG: BB#4 'startup_glowplugs3:startup_glowplugs3.return'
SelectionDAG has 6 nodes:
  0x2d31760: i32 = undef [ORD=39] [ID=2]

    0x2d13c48: ch = EntryToken [ORD=39] [ID=0]

    0x2d3e2d0: i32 = FrameIndex<1> [ORD=39] [ID=1]

    0x2d31760: <multiple use>
  0x2d31660: i32,ch = load 0x2d13c48, 0x2d3e2d0, 0x2d31760<LD4[%2]> [ORD=39] [ID=4]

    0x2d31660: <multiple use>
    0x2d31660: <multiple use>
    0x2d3e6d0: i32 = FrameIndex<0> [ORD=40] [ID=3]

    0x2d31760: <multiple use>
  0x2d31860: ch = store 0x2d31660:1, 0x2d31660, 0x2d3e6d0, 0x2d31760<ST4[%1]> [ORD=40] [ID=5]


Optimized legalized selection DAG: BB#4 'startup_glowplugs3:startup_glowplugs3.return'
SelectionDAG has 6 nodes:
  0x2d31760: i32 = undef [ORD=39] [ID=2]

    0x2d13c48: ch = EntryToken [ORD=39] [ID=0]

    0x2d3e2d0: i32 = FrameIndex<1> [ORD=39] [ID=1]

    0x2d31760: <multiple use>
  0x2d31660: i32,ch = load 0x2d13c48, 0x2d3e2d0, 0x2d31760<LD4[%2]> [ORD=39] [ID=4]

    0x2d31660: <multiple use>
    0x2d31660: <multiple use>
    0x2d3e6d0: i32 = FrameIndex<0> [ORD=40] [ID=3]

    0x2d31760: <multiple use>
  0x2d31860: ch = store 0x2d31660:1, 0x2d31660, 0x2d3e6d0, 0x2d31760<ST4[%1]> [ORD=40] [ID=5]


===== Instruction selection begins: BB#4 'startup_glowplugs3.return'
ISEL: Starting pattern match on root node: 0x2d31860: ch = store 0x2d31660:1, 0x2d31660, 0x2d3e6d0, 0x2d31760<ST4[%1]> [ORD=40] [ID=5]

  Initial Opcode index to 178
  Morphed node: 0x2d31860: ch = SW 0x2d31660, 0x2d3e6d0, 0x2d32060, 0x2d31660:1<Mem:ST4[%1]> [ORD=40]

ISEL: Match complete!
=> 0x2d31860: ch = SW 0x2d31660, 0x2d3e6d0, 0x2d32060, 0x2d31660:1<Mem:ST4[%1]> [ORD=40]

ISEL: Starting pattern match on root node: 0x2d31660: i32,ch = load 0x2d13c48, 0x2d3e2d0, 0x2d31760<LD4[%2]> [ORD=39] [ID=4]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2d31660: i32,ch = LW 0x2d3e2d0, 0x2d32060, 0x2d13c48<Mem:LD4[%2]> [ORD=39]

ISEL: Match complete!
=> 0x2d31660: i32,ch = LW 0x2d3e2d0, 0x2d32060, 0x2d13c48<Mem:LD4[%2]> [ORD=39]

=> 0x2d13c48: ch = EntryToken [ORD=39]

===== Instruction selection ends:
Selected selection DAG: BB#4 'startup_glowplugs3:startup_glowplugs3.return'
SelectionDAG has 9 nodes:
      0x2d31760: <multiple use>
      0x2d31a60: i32 = TargetFrameIndex<1>

    0x2d3e2d0: i32 = ADDI 0x2d31760, 0x2d31a60 [ORD=39]

    0x2d32060: <multiple use>
    0x2d13c48: ch = EntryToken [ORD=39]

  0x2d31660: i32,ch = LW 0x2d3e2d0, 0x2d32060, 0x2d13c48<Mem:LD4[%2]> [ORD=39]

  0x2d32060: i32 = TargetConstant<0>

  0x2d31760: i32 = Register %t5

    0x2d31660: <multiple use>
      0x2d31760: <multiple use>
      0x2d31f60: i32 = TargetFrameIndex<0>

    0x2d3e6d0: i32 = ADDI 0x2d31760, 0x2d31f60 [ORD=40]

    0x2d32060: <multiple use>
    0x2d31660: <multiple use>
  0x2d31860: ch = SW 0x2d31660, 0x2d3e6d0, 0x2d32060, 0x2d31660:1<Mem:ST4[%1]> [ORD=40]


********** List Scheduling BB#4 'startup_glowplugs3.return' **********
SU(0): 0x2d31860: ch = SW 0x2d31660, 0x2d3e6d0, 0x2d32060, 0x2d31660:1<Mem:ST4[%1]> [ORD=40] [ID=0]

  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
   val SU(2): Latency=1
   val SU(1): Latency=1
   ch  SU(2): Latency=1

SU(1): 0x2d3e6d0: i32 = ADDI 0x2d31760, 0x2d31f60 [ORD=40] [ID=1]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
   val SU(0): Latency=1

SU(2): 0x2d31660: i32,ch = LW 0x2d3e2d0, 0x2d32060, 0x2d13c48<Mem:LD4[%2]> [ORD=39] [ID=2]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
   val SU(3): Latency=1
  Successors:
   val SU(0): Latency=1
   ch  SU(0): Latency=1

SU(3): 0x2d3e2d0: i32 = ADDI 0x2d31760, 0x2d31a60 [ORD=39] [ID=3]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
   val SU(2): Latency=1


Examining Available:
Height 0: SU(0): 0x2d31860: ch = SW 0x2d31660, 0x2d3e6d0, 0x2d32060, 0x2d31660:1<Mem:ST4[%1]> [ORD=40] [ID=0]


*** Scheduling [0]: SU(0): 0x2d31860: ch = SW 0x2d31660, 0x2d3e6d0, 0x2d32060, 0x2d31660:1<Mem:ST4[%1]> [ORD=40] [ID=0]


Examining Available:
Height 1: SU(1): 0x2d3e6d0: i32 = ADDI 0x2d31760, 0x2d31f60 [ORD=40] [ID=1]

Height 1: SU(2): 0x2d31660: i32,ch = LW 0x2d3e2d0, 0x2d32060, 0x2d13c48<Mem:LD4[%2]> [ORD=39] [ID=2]


*** Scheduling [1]: SU(1): 0x2d3e6d0: i32 = ADDI 0x2d31760, 0x2d31f60 [ORD=40] [ID=1]


Examining Available:
Height 1: SU(2): 0x2d31660: i32,ch = LW 0x2d3e2d0, 0x2d32060, 0x2d13c48<Mem:LD4[%2]> [ORD=39] [ID=2]


*** Scheduling [2]: SU(2): 0x2d31660: i32,ch = LW 0x2d3e2d0, 0x2d32060, 0x2d13c48<Mem:LD4[%2]> [ORD=39] [ID=2]


Examining Available:
Height 3: SU(3): 0x2d3e2d0: i32 = ADDI 0x2d31760, 0x2d31a60 [ORD=39] [ID=3]


*** Scheduling [3]: SU(3): 0x2d3e2d0: i32 = ADDI 0x2d31760, 0x2d31a60 [ORD=39] [ID=3]

*** Final schedule ***
SU(3): 0x2d3e2d0: i32 = ADDI 0x2d31760, 0x2d31a60 [ORD=39] [ID=3]

SU(2): 0x2d31660: i32,ch = LW 0x2d3e2d0, 0x2d32060, 0x2d13c48<Mem:LD4[%2]> [ORD=39] [ID=2]

SU(1): 0x2d3e6d0: i32 = ADDI 0x2d31760, 0x2d31f60 [ORD=40] [ID=1]

SU(0): 0x2d31860: ch = SW 0x2d31660, 0x2d3e6d0, 0x2d32060, 0x2d31660:1<Mem:ST4[%1]> [ORD=40] [ID=0]


Total amount of phi nodes to update: 0
# Machine code for function startup_glowplugs3: SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %startup_glowplugs3.entry
16B		%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
48B		SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
64B		%vreg2<def> = FLW %vreg1, 0; mem:LD4[%6](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
80B		%vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
96B		FSW %vreg2<kill>, %vreg3<kill>, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
112B		%vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
128B		%vreg5<def> = LW %vreg4<kill>, 4; mem:LD4[%9] GR32Bit:%vreg5,%vreg4
144B		BEQ <BB#3>, %vreg5<kill>, %zero; GR32Bit:%vreg5
160B		JAL <BB#1>
	    Successors according to CFG: BB#3(12) BB#1(20)

176B	BB#1: derived from LLVM BB %startup_glowplugs3.if.else
	    Predecessors according to CFG: BB#0
192B		%vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
208B		%vreg7<def> = FLW %vreg6<kill>, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg6
224B		%vreg8<def> = ADDI %zero, 1181376512; GR32Bit:%vreg8
240B		%vreg10<def> = COPY %vreg8; FP32Bit:%vreg10 GR32Bit:%vreg8
256B		%vreg9<def> = FLT_S %vreg10<kill>, %vreg7<kill>; GR32Bit:%vreg9 FP32Bit:%vreg10,%vreg7
272B		BNE <BB#4>, %vreg9<kill>, %zero; GR32Bit:%vreg9
288B		JAL <BB#2>
	    Successors according to CFG: BB#4(16) BB#2(16)

304B	BB#2: derived from LLVM BB %startup_glowplugs3.if.else6
	    Predecessors according to CFG: BB#1
320B		%vreg11<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg11
336B		%vreg12<def> = LW %vreg11, 0; mem:LD4[%2] GR32Bit:%vreg12,%vreg11
352B		SW %zero, %vreg12<kill>, 8; mem:ST4[%15] GR32Bit:%vreg12
368B		%vreg13<def> = LW %vreg11, 0; mem:LD4[%2] GR32Bit:%vreg13,%vreg11
384B		SW %zero, %vreg13<kill>, 12; mem:ST4[%17] GR32Bit:%vreg13
400B		JAL <BB#4>
	    Successors according to CFG: BB#4

416B	BB#3: derived from LLVM BB %startup_glowplugs3.if.then
	    Predecessors according to CFG: BB#0
432B		%vreg14<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg14
448B		%vreg15<def> = LW %vreg14, 0; mem:LD4[%2] GR32Bit:%vreg15,%vreg14
464B		%vreg16<def> = ADDI %zero, 1; GR32Bit:%vreg16
480B		SW %vreg16, %vreg15<kill>, 8; mem:ST4[%19] GR32Bit:%vreg16,%vreg15
496B		%vreg17<def> = LW %vreg14, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg14
512B		SW %vreg16, %vreg17<kill>, 12; mem:ST4[%21] GR32Bit:%vreg16,%vreg17
	    Successors according to CFG: BB#4

528B	BB#4: derived from LLVM BB %startup_glowplugs3.return
	    Predecessors according to CFG: BB#1 BB#2 BB#3
544B		%vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
560B		%vreg19<def> = LW %vreg18<kill>, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
576B		%vreg20<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg20
592B		SW %vreg19<kill>, %vreg20<kill>, 0; mem:ST4[%1] GR32Bit:%vreg19,%vreg20

# End machine code for function startup_glowplugs3.

********** Stack Coloring **********
********** Function: startup_glowplugs3
Found 0 markers and 3 slots
Slot structure:
Slot #0 - 4 bytes.
Slot #1 - 4 bytes.
Slot #2 - 4 bytes.
Total Stack size: 12 bytes

Will not try to merge slots.
Removed 0 markers.
******** Pre-regalloc Machine LICM: startup_glowplugs3 ********
******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: startup_glowplugs3
********** PROCESS IMPLICIT DEFS **********
********** Function: startup_glowplugs3
********** REWRITING TWO-ADDR INSTRS **********
********** Function: startup_glowplugs3
# Machine code for function startup_glowplugs3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %startup_glowplugs3.entry
16B		%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
48B		SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
64B		%vreg2<def> = FLW %vreg1<kill>, 0; mem:LD4[%6](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
80B		%vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
96B		FSW %vreg2<kill>, %vreg3<kill>, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
112B		%vreg4<def> = LW %vreg0<kill>, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
128B		%vreg5<def> = LW %vreg4<kill>, 4; mem:LD4[%9] GR32Bit:%vreg5,%vreg4
144B		BEQ <BB#3>, %vreg5<kill>, %zero; GR32Bit:%vreg5
160B		JAL <BB#1>
	    Successors according to CFG: BB#3(12) BB#1(20)

176B	BB#1: derived from LLVM BB %startup_glowplugs3.if.else
	    Predecessors according to CFG: BB#0
192B		%vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
208B		%vreg7<def> = FLW %vreg6<kill>, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg6
224B		%vreg8<def> = ADDI %zero, 1181376512; GR32Bit:%vreg8
240B		%vreg10<def> = COPY %vreg8<kill>; FP32Bit:%vreg10 GR32Bit:%vreg8
256B		%vreg9<def> = FLT_S %vreg10<kill>, %vreg7<kill>; GR32Bit:%vreg9 FP32Bit:%vreg10,%vreg7
272B		BNE <BB#4>, %vreg9<kill>, %zero; GR32Bit:%vreg9
288B		JAL <BB#2>
	    Successors according to CFG: BB#4(16) BB#2(16)

304B	BB#2: derived from LLVM BB %startup_glowplugs3.if.else6
	    Predecessors according to CFG: BB#1
320B		%vreg11<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg11
336B		%vreg12<def> = LW %vreg11, 0; mem:LD4[%2] GR32Bit:%vreg12,%vreg11
352B		SW %zero, %vreg12<kill>, 8; mem:ST4[%15] GR32Bit:%vreg12
368B		%vreg13<def> = LW %vreg11<kill>, 0; mem:LD4[%2] GR32Bit:%vreg13,%vreg11
384B		SW %zero, %vreg13<kill>, 12; mem:ST4[%17] GR32Bit:%vreg13
400B		JAL <BB#4>
	    Successors according to CFG: BB#4

416B	BB#3: derived from LLVM BB %startup_glowplugs3.if.then
	    Predecessors according to CFG: BB#0
432B		%vreg14<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg14
448B		%vreg15<def> = LW %vreg14, 0; mem:LD4[%2] GR32Bit:%vreg15,%vreg14
464B		%vreg16<def> = ADDI %zero, 1; GR32Bit:%vreg16
480B		SW %vreg16, %vreg15<kill>, 8; mem:ST4[%19] GR32Bit:%vreg16,%vreg15
496B		%vreg17<def> = LW %vreg14<kill>, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg14
512B		SW %vreg16<kill>, %vreg17<kill>, 12; mem:ST4[%21] GR32Bit:%vreg16,%vreg17
	    Successors according to CFG: BB#4

528B	BB#4: derived from LLVM BB %startup_glowplugs3.return
	    Predecessors according to CFG: BB#1 BB#2 BB#3
544B		%vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
560B		%vreg19<def> = LW %vreg18<kill>, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
576B		%vreg20<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg20
592B		SW %vreg19<kill>, %vreg20<kill>, 0; mem:ST4[%1] GR32Bit:%vreg19,%vreg20

# End machine code for function startup_glowplugs3.

Computing live-in reg-units in ABI blocks.
Created 0 new intervals.
********** INTERVALS **********
%vreg0 = [16r,112r:0)  0@16r
%vreg1 = [32r,64r:0)  0@32r
%vreg2 = [64r,96r:0)  0@64r
%vreg3 = [80r,96r:0)  0@80r
%vreg4 = [112r,128r:0)  0@112r
%vreg5 = [128r,144r:0)  0@128r
%vreg6 = [192r,208r:0)  0@192r
%vreg7 = [208r,256r:0)  0@208r
%vreg8 = [224r,240r:0)  0@224r
%vreg9 = [256r,272r:0)  0@256r
%vreg10 = [240r,256r:0)  0@240r
%vreg11 = [320r,368r:0)  0@320r
%vreg12 = [336r,352r:0)  0@336r
%vreg13 = [368r,384r:0)  0@368r
%vreg14 = [432r,496r:0)  0@432r
%vreg15 = [448r,480r:0)  0@448r
%vreg16 = [464r,512r:0)  0@464r
%vreg17 = [496r,512r:0)  0@496r
%vreg18 = [544r,560r:0)  0@544r
%vreg19 = [560r,592r:0)  0@560r
%vreg20 = [576r,592r:0)  0@576r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function startup_glowplugs3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %startup_glowplugs3.entry
16B		%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
48B		SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
64B		%vreg2<def> = FLW %vreg1, 0; mem:LD4[%6](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
80B		%vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
96B		FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
112B		%vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
128B		%vreg5<def> = LW %vreg4, 4; mem:LD4[%9] GR32Bit:%vreg5,%vreg4
144B		BEQ <BB#3>, %vreg5, %zero; GR32Bit:%vreg5
160B		JAL <BB#1>
	    Successors according to CFG: BB#3(12) BB#1(20)

176B	BB#1: derived from LLVM BB %startup_glowplugs3.if.else
	    Predecessors according to CFG: BB#0
192B		%vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
208B		%vreg7<def> = FLW %vreg6, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg6
224B		%vreg8<def> = ADDI %zero, 1181376512; GR32Bit:%vreg8
240B		%vreg10<def> = COPY %vreg8; FP32Bit:%vreg10 GR32Bit:%vreg8
256B		%vreg9<def> = FLT_S %vreg10, %vreg7; GR32Bit:%vreg9 FP32Bit:%vreg10,%vreg7
272B		BNE <BB#4>, %vreg9, %zero; GR32Bit:%vreg9
288B		JAL <BB#2>
	    Successors according to CFG: BB#4(16) BB#2(16)

304B	BB#2: derived from LLVM BB %startup_glowplugs3.if.else6
	    Predecessors according to CFG: BB#1
320B		%vreg11<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg11
336B		%vreg12<def> = LW %vreg11, 0; mem:LD4[%2] GR32Bit:%vreg12,%vreg11
352B		SW %zero, %vreg12, 8; mem:ST4[%15] GR32Bit:%vreg12
368B		%vreg13<def> = LW %vreg11, 0; mem:LD4[%2] GR32Bit:%vreg13,%vreg11
384B		SW %zero, %vreg13, 12; mem:ST4[%17] GR32Bit:%vreg13
400B		JAL <BB#4>
	    Successors according to CFG: BB#4

416B	BB#3: derived from LLVM BB %startup_glowplugs3.if.then
	    Predecessors according to CFG: BB#0
432B		%vreg14<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg14
448B		%vreg15<def> = LW %vreg14, 0; mem:LD4[%2] GR32Bit:%vreg15,%vreg14
464B		%vreg16<def> = ADDI %zero, 1; GR32Bit:%vreg16
480B		SW %vreg16, %vreg15, 8; mem:ST4[%19] GR32Bit:%vreg16,%vreg15
496B		%vreg17<def> = LW %vreg14, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg14
512B		SW %vreg16, %vreg17, 12; mem:ST4[%21] GR32Bit:%vreg16,%vreg17
	    Successors according to CFG: BB#4

528B	BB#4: derived from LLVM BB %startup_glowplugs3.return
	    Predecessors according to CFG: BB#1 BB#2 BB#3
544B		%vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
560B		%vreg19<def> = LW %vreg18, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
576B		%vreg20<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg20
592B		SW %vreg19, %vreg20, 0; mem:ST4[%1] GR32Bit:%vreg19,%vreg20

# End machine code for function startup_glowplugs3.

********** SIMPLE REGISTER COALESCING **********
********** Function: startup_glowplugs3
********** JOINING INTERVALS ***********
startup_glowplugs3.if.else:
startup_glowplugs3.return:
startup_glowplugs3.entry:
startup_glowplugs3.if.else6:
startup_glowplugs3.if.then:
240B	%vreg10<def> = COPY %vreg8; FP32Bit:%vreg10 GR32Bit:%vreg8
	Not coalescable.
Trying to inflate 0 regs.
********** INTERVALS **********
%vreg0 = [16r,112r:0)  0@16r
%vreg1 = [32r,64r:0)  0@32r
%vreg2 = [64r,96r:0)  0@64r
%vreg3 = [80r,96r:0)  0@80r
%vreg4 = [112r,128r:0)  0@112r
%vreg5 = [128r,144r:0)  0@128r
%vreg6 = [192r,208r:0)  0@192r
%vreg7 = [208r,256r:0)  0@208r
%vreg8 = [224r,240r:0)  0@224r
%vreg9 = [256r,272r:0)  0@256r
%vreg10 = [240r,256r:0)  0@240r
%vreg11 = [320r,368r:0)  0@320r
%vreg12 = [336r,352r:0)  0@336r
%vreg13 = [368r,384r:0)  0@368r
%vreg14 = [432r,496r:0)  0@432r
%vreg15 = [448r,480r:0)  0@448r
%vreg16 = [464r,512r:0)  0@464r
%vreg17 = [496r,512r:0)  0@496r
%vreg18 = [544r,560r:0)  0@544r
%vreg19 = [560r,592r:0)  0@560r
%vreg20 = [576r,592r:0)  0@576r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function startup_glowplugs3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %startup_glowplugs3.entry
16B		%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
48B		SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
64B		%vreg2<def> = FLW %vreg1, 0; mem:LD4[%6](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
80B		%vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
96B		FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
112B		%vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
128B		%vreg5<def> = LW %vreg4, 4; mem:LD4[%9] GR32Bit:%vreg5,%vreg4
144B		BEQ <BB#3>, %vreg5, %zero; GR32Bit:%vreg5
160B		JAL <BB#1>
	    Successors according to CFG: BB#3(12) BB#1(20)

176B	BB#1: derived from LLVM BB %startup_glowplugs3.if.else
	    Predecessors according to CFG: BB#0
192B		%vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
208B		%vreg7<def> = FLW %vreg6, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg6
224B		%vreg8<def> = ADDI %zero, 1181376512; GR32Bit:%vreg8
240B		%vreg10<def> = COPY %vreg8; FP32Bit:%vreg10 GR32Bit:%vreg8
256B		%vreg9<def> = FLT_S %vreg10, %vreg7; GR32Bit:%vreg9 FP32Bit:%vreg10,%vreg7
272B		BNE <BB#4>, %vreg9, %zero; GR32Bit:%vreg9
288B		JAL <BB#2>
	    Successors according to CFG: BB#4(16) BB#2(16)

304B	BB#2: derived from LLVM BB %startup_glowplugs3.if.else6
	    Predecessors according to CFG: BB#1
320B		%vreg11<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg11
336B		%vreg12<def> = LW %vreg11, 0; mem:LD4[%2] GR32Bit:%vreg12,%vreg11
352B		SW %zero, %vreg12, 8; mem:ST4[%15] GR32Bit:%vreg12
368B		%vreg13<def> = LW %vreg11, 0; mem:LD4[%2] GR32Bit:%vreg13,%vreg11
384B		SW %zero, %vreg13, 12; mem:ST4[%17] GR32Bit:%vreg13
400B		JAL <BB#4>
	    Successors according to CFG: BB#4

416B	BB#3: derived from LLVM BB %startup_glowplugs3.if.then
	    Predecessors according to CFG: BB#0
432B		%vreg14<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg14
448B		%vreg15<def> = LW %vreg14, 0; mem:LD4[%2] GR32Bit:%vreg15,%vreg14
464B		%vreg16<def> = ADDI %zero, 1; GR32Bit:%vreg16
480B		SW %vreg16, %vreg15, 8; mem:ST4[%19] GR32Bit:%vreg16,%vreg15
496B		%vreg17<def> = LW %vreg14, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg14
512B		SW %vreg16, %vreg17, 12; mem:ST4[%21] GR32Bit:%vreg16,%vreg17
	    Successors according to CFG: BB#4

528B	BB#4: derived from LLVM BB %startup_glowplugs3.return
	    Predecessors according to CFG: BB#1 BB#2 BB#3
544B		%vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
560B		%vreg19<def> = LW %vreg18, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
576B		%vreg20<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg20
592B		SW %vreg19, %vreg20, 0; mem:ST4[%1] GR32Bit:%vreg19,%vreg20

# End machine code for function startup_glowplugs3.

Before MISched:
# Machine code for function startup_glowplugs3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %startup_glowplugs3.entry
	%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
	%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
	SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
	%vreg2<def> = FLW %vreg1, 0; mem:LD4[%6](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
	%vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
	FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
	%vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
	%vreg5<def> = LW %vreg4, 4; mem:LD4[%9] GR32Bit:%vreg5,%vreg4
	BEQ <BB#3>, %vreg5, %zero; GR32Bit:%vreg5
	JAL <BB#1>
    Successors according to CFG: BB#3(12) BB#1(20)

BB#1: derived from LLVM BB %startup_glowplugs3.if.else
    Predecessors according to CFG: BB#0
	%vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
	%vreg7<def> = FLW %vreg6, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg6
	%vreg8<def> = ADDI %zero, 1181376512; GR32Bit:%vreg8
	%vreg10<def> = COPY %vreg8; FP32Bit:%vreg10 GR32Bit:%vreg8
	%vreg9<def> = FLT_S %vreg10, %vreg7; GR32Bit:%vreg9 FP32Bit:%vreg10,%vreg7
	BNE <BB#4>, %vreg9, %zero; GR32Bit:%vreg9
	JAL <BB#2>
    Successors according to CFG: BB#4(16) BB#2(16)

BB#2: derived from LLVM BB %startup_glowplugs3.if.else6
    Predecessors according to CFG: BB#1
	%vreg11<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg11
	%vreg12<def> = LW %vreg11, 0; mem:LD4[%2] GR32Bit:%vreg12,%vreg11
	SW %zero, %vreg12, 8; mem:ST4[%15] GR32Bit:%vreg12
	%vreg13<def> = LW %vreg11, 0; mem:LD4[%2] GR32Bit:%vreg13,%vreg11
	SW %zero, %vreg13, 12; mem:ST4[%17] GR32Bit:%vreg13
	JAL <BB#4>
    Successors according to CFG: BB#4

BB#3: derived from LLVM BB %startup_glowplugs3.if.then
    Predecessors according to CFG: BB#0
	%vreg14<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg14
	%vreg15<def> = LW %vreg14, 0; mem:LD4[%2] GR32Bit:%vreg15,%vreg14
	%vreg16<def> = ADDI %zero, 1; GR32Bit:%vreg16
	SW %vreg16, %vreg15, 8; mem:ST4[%19] GR32Bit:%vreg16,%vreg15
	%vreg17<def> = LW %vreg14, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg14
	SW %vreg16, %vreg17, 12; mem:ST4[%21] GR32Bit:%vreg16,%vreg17
    Successors according to CFG: BB#4

BB#4: derived from LLVM BB %startup_glowplugs3.return
    Predecessors according to CFG: BB#1 BB#2 BB#3
	%vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
	%vreg19<def> = LW %vreg18, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
	%vreg20<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg20
	SW %vreg19, %vreg20, 0; mem:ST4[%1] GR32Bit:%vreg19,%vreg20

# End machine code for function startup_glowplugs3.


-------------
Starting new basic block BB#0
********** MI Scheduling **********
startup_glowplugs3:BB#0 startup_glowplugs3.entry
  From: JAL <BB#1>
    To: JAL <BB#1>
 Remaining: 9
Max Pressure: Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 0
Excess PSets: 
0 subtrees:
*** Final schedule for BB#0 ***

Partitioning instructions of the region into multiple CEs

*** Renumbered SlotIndexes 172-188 ***

*** Renumbered SlotIndexes 184-216 ***

*** Renumbered SlotIndexes 196-236 ***

*** Renumbered SlotIndexes 208-264 ***

*** Renumbered SlotIndexes 220-284 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
********** MI Scheduling **********
startup_glowplugs3:BB#0 startup_glowplugs3.entry
  From: %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
    To: BEQ <BB#3>, %vreg5, %zero; GR32Bit:%vreg5
 Remaining: 0
Max Pressure: FP32Bit=1
GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 1
GR32BitLimit 32 Actual 2
Excess PSets: 
3 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 1
  SU(4) in tree 1
  SU(5) in tree 1
  SU(6) in tree 2
  SU(7) in tree 2
SU(0):   %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 36
  Successors:
   val SU(6): Latency=5 Reg=%vreg0
   val SU(2): Latency=5 Reg=%vreg0

SU(1):   %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
   val SU(3): Latency=5 Reg=%vreg1
   val SU(2): Latency=4 Reg=%vreg1

SU(2):   SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 13
  Depth              : 5
  Height             : 31
  Predecessors:
   val SU(1): Latency=4 Reg=%vreg1
   val SU(0): Latency=5 Reg=%vreg0
  Successors:
   ch  SU(6): Latency=1
   ch  SU(7): Latency=1
   ch  SU(3): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(3):   %vreg2<def> = FLW %vreg1, 0; mem:LD4[%6](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 6
  Height             : 18
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg1
   ch  SU(2): Latency=1
  Successors:
   val SU(5): Latency=2 Reg=%vreg2
   ch  SU(5): Latency=0

SU(4):   %vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
   val SU(5): Latency=5 Reg=%vreg3

SU(5):   FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 8
  Height             : 16
  Predecessors:
   val SU(3): Latency=2 Reg=%vreg2
   val SU(4): Latency=5 Reg=%vreg3
   ch  SU(3): Latency=0
  Successors:
   ch  SU(7): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(6):   %vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 6
  Height             : 30
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg0
   ch  SU(2): Latency=1
  Successors:
   val SU(7): Latency=15 Reg=%vreg4

SU(7):   %vreg5<def> = LW %vreg4, 4; mem:LD4[%9] GR32Bit:%vreg5,%vreg4
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 21
  Height             : 15
  Predecessors:
   val SU(6): Latency=15 Reg=%vreg4
   ch  SU(5): Latency=1
   ch  SU(2): Latency=1
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg5

SU(0):   %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 36
  Successors:
   val SU(6): Latency=5 Reg=%vreg0
   val SU(2): Latency=5 Reg=%vreg0

SU(1):   %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
   val SU(3): Latency=5 Reg=%vreg1
   val SU(2): Latency=4 Reg=%vreg1

SU(2):   SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 13
  Depth              : 5
  Height             : 31
  Predecessors:
   val SU(1): Latency=4 Reg=%vreg1
   val SU(0): Latency=5 Reg=%vreg0
  Successors:
   ch  SU(6): Latency=1
   ch  SU(7): Latency=1
   ch  SU(3): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(3):   %vreg2<def> = FLW %vreg1, 0; mem:LD4[%6](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 6
  Height             : 18
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg1
   ch  SU(2): Latency=1
  Successors:
   val SU(5): Latency=2 Reg=%vreg2
   ch  SU(5): Latency=0

SU(4):   %vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
   val SU(5): Latency=5 Reg=%vreg3

SU(5):   FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 8
  Height             : 16
  Predecessors:
   val SU(3): Latency=2 Reg=%vreg2
   val SU(4): Latency=5 Reg=%vreg3
   ch  SU(3): Latency=0
  Successors:
   ch  SU(7): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(6):   %vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 6
  Height             : 30
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg0
   ch  SU(2): Latency=1
  Successors:
   val SU(7): Latency=15 Reg=%vreg4

SU(7):   %vreg5<def> = LW %vreg4, 4; mem:LD4[%9] GR32Bit:%vreg5,%vreg4
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 14
  Depth              : 21
  Height             : 15
  Predecessors:
   val SU(6): Latency=15 Reg=%vreg4
   ch  SU(5): Latency=1
   ch  SU(2): Latency=1
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg5

Pick node SU(4)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
handleMove 80B -> 8B: %vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
     %vreg3:	[80r,96r:0)  0@80r
        -->	[8r,96r:0)  0@8r
     t5:	EMPTY
        -->	EMPTY
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
Pick node SU(1)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
Pick node SU(2)  ILP: 3 / 6 = 0.5 Tree: 0 @0
Scheduling SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
Pick node SU(3)  ILP: 1 / 7 = 0.142857 Tree: 1 @0
Scheduling %vreg2<def> = FLW %vreg1, 0; mem:LD4[%6](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
Pick node SU(5)  ILP: 3 / 9 = 0.333333 Tree: 1 @0
Scheduling FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
Pick node SU(6)  ILP: 1 / 7 = 0.142857 Tree: 2 @0
Scheduling %vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
Pick node SU(7)  ILP: 2 / 22 = 0.0909091 Tree: 2 @0
Scheduling %vreg5<def> = LW %vreg4, 4; mem:LD4[%9] GR32Bit:%vreg5,%vreg4
*** Final schedule for BB#0 ***
SU(4):   %vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
SU(0):   %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
SU(1):   %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
SU(2):   SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
SU(3):   %vreg2<def> = FLW %vreg1, 0; mem:LD4[%6](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
SU(5):   FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
SU(6):   %vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
SU(7):   %vreg5<def> = LW %vreg4, 4; mem:LD4[%9] GR32Bit:%vreg5,%vreg4


*** Renumbered SlotIndexes 4-28 ***

*** Renumbered SlotIndexes 16-56 ***

*** Renumbered SlotIndexes 28-76 ***

*** Renumbered SlotIndexes 40-104 ***

*** Renumbered SlotIndexes 52-124 ***

*** Renumbered SlotIndexes 64-152 ***

*** Renumbered SlotIndexes 76-348 ***

*** Renumbered SlotIndexes 88-376 ***

*** Renumbered SlotIndexes 100-396 ***

*** Renumbered SlotIndexes 112-424 ***

*** Renumbered SlotIndexes 124-444 ***

*** Renumbered SlotIndexes 136-472 ***

*** Renumbered SlotIndexes 148-492 ***

*** Renumbered SlotIndexes 160-520 ***

*** Renumbered SlotIndexes 172-540 ***

*** Renumbered SlotIndexes 184-568 ***

*** Renumbered SlotIndexes 196-588 ***

*** Renumbered SlotIndexes 208-616 ***

*** Renumbered SlotIndexes 220-628 ***

*** Renumbered SlotIndexes 232-640 ***

*** Renumbered SlotIndexes 244-652 ***

*** Renumbered SlotIndexes 256-664 ***

*** Renumbered SlotIndexes 268-676 ***

*** Renumbered SlotIndexes 280-688 ***

*** Renumbered SlotIndexes 292-700 ***

*** Renumbered SlotIndexes 304-712 ***

*** Renumbered SlotIndexes 316-724 ***

*** Renumbered SlotIndexes 328-736 ***

*** Renumbered SlotIndexes 340-748 ***

*** Renumbered SlotIndexes 352-760 ***

*** Renumbered SlotIndexes 364-772 ***

*** Renumbered SlotIndexes 376-784 ***

*** Renumbered SlotIndexes 388-796 ***

*** Renumbered SlotIndexes 400-808 ***
Partitioning instructions of the region into multiple CEs
instr:  %vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
instr:  %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
instr:  %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
instr:  SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
instr:  %vreg2<def> = FLW %vreg1, 0; mem:LD4[%6](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
instr:  FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
instr:  %vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
instr:  %vreg5<def> = LW %vreg4, 4; mem:LD4[%9] GR32Bit:%vreg5,%vreg4

*** Renumbered SlotIndexes 484-820 ***

*** Renumbered SlotIndexes 496-832 ***

*** Renumbered SlotIndexes 508-844 ***

*** Renumbered SlotIndexes 520-856 ***

*** Renumbered SlotIndexes 532-868 ***

*** Renumbered SlotIndexes 544-880 ***

*** Renumbered SlotIndexes 564-892 ***

*** Renumbered SlotIndexes 576-904 ***

*** Renumbered SlotIndexes 588-916 ***

*** Renumbered SlotIndexes 600-928 ***

*** Renumbered SlotIndexes 612-940 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs

renaming register of operand that belongs to ce 1 but was defined in0
%vreg5<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg5<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg5<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg5
renaming register of operand that belongs to ce 2 but was defined in0
%vreg5
renaming register of operand that belongs to ce 3 but was defined in0
%vreg5After Shuffling regions of basic block, state of BB#0:
BB#0: derived from LLVM BB %startup_glowplugs3.entry
	%vreg21<def> = ADD %t5, %zero; GR32Bit:%vreg21
	%vreg23<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg23
	%vreg24<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg24
	%vreg25<def> = SRLI %vreg24, 12; GR32Bit:%vreg25,%vreg24
	%vreg26<def> = ADD %vreg23, %vreg25; GR32Bit:%vreg26,%vreg23,%vreg25
	%vreg27<def> = ADDI %zero, 16; GR32Bit:%vreg27
	%vreg28<def> = SRLI %t5, 22; GR32Bit:%vreg28
	%vreg29<def> = SRLI %t5, 12; GR32Bit:%vreg29
	%vreg30<def> = ANDI %vreg29, 15; GR32Bit:%vreg30,%vreg29
	%vreg31<def> = SRLI %t5, 6; GR32Bit:%vreg31
	%vreg32<def> = ANDI %vreg31, 63; GR32Bit:%vreg32,%vreg31
	%vreg33<def> = ADDI %zero, 832; GR32Bit:%vreg33
	%vreg34<def> = MUL %vreg28, %vreg33; GR32Bit:%vreg34,%vreg28,%vreg33
	%vreg35<def> = ADDI %zero, 52; GR32Bit:%vreg35
	%vreg36<def> = MUL %vreg30, %vreg35; GR32Bit:%vreg36,%vreg30,%vreg35
	%vreg37<def> = ADD %vreg36, %vreg32; GR32Bit:%vreg37,%vreg36,%vreg32
	%vreg38<def> = ADD %vreg37, %vreg34; GR32Bit:%vreg38,%vreg37,%vreg34
	%vreg39<def> = MUL %vreg38, %vreg27; GR32Bit:%vreg39,%vreg38,%vreg27
	%vreg22<def> = ADD %vreg26, %vreg39; GR32Bit:%vreg22,%vreg26,%vreg39
	%vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
	%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
	%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
	SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
	%vreg2<def> = FLW %vreg1, 0; mem:LD4[%6](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
	FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
	%vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
	%vreg5<def> = LW %vreg4, 4; mem:LD4[%9] GR32Bit:%vreg5,%vreg4
	%vreg97<def> = LUI 1; GR32Bit:%vreg97
	WRITEPM %vreg97, %vreg5, 0; GR32Bit:%vreg97,%vreg5
	%vreg99<def> = LUI 2; GR32Bit:%vreg99
	WRITEPM %vreg99, %vreg5, 0; GR32Bit:%vreg99,%vreg5
	%vreg101<def> = LUI 3; GR32Bit:%vreg101
	WRITEPM %vreg101, %vreg5, 0; GR32Bit:%vreg101,%vreg5
	BEQ <BB#3>, %vreg5, %zero; GR32Bit:%vreg5
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#1>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg40<def> = ADD %t5, %zero; GR32Bit:%vreg40
	%vreg42<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg42
	%vreg43<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg43
	%vreg44<def> = SRLI %vreg43, 12; GR32Bit:%vreg44,%vreg43
	%vreg45<def> = ADD %vreg42, %vreg44; GR32Bit:%vreg45,%vreg42,%vreg44
	%vreg46<def> = ADDI %zero, 16; GR32Bit:%vreg46
	%vreg47<def> = SRLI %t5, 22; GR32Bit:%vreg47
	%vreg48<def> = SRLI %t5, 12; GR32Bit:%vreg48
	%vreg49<def> = ANDI %vreg48, 15; GR32Bit:%vreg49,%vreg48
	%vreg50<def> = SRLI %t5, 6; GR32Bit:%vreg50
	%vreg51<def> = ANDI %vreg50, 63; GR32Bit:%vreg51,%vreg50
	%vreg52<def> = ADDI %zero, 832; GR32Bit:%vreg52
	%vreg53<def> = MUL %vreg47, %vreg52; GR32Bit:%vreg53,%vreg47,%vreg52
	%vreg54<def> = ADDI %zero, 52; GR32Bit:%vreg54
	%vreg55<def> = MUL %vreg49, %vreg54; GR32Bit:%vreg55,%vreg49,%vreg54
	%vreg56<def> = ADD %vreg55, %vreg51; GR32Bit:%vreg56,%vreg55,%vreg51
	%vreg57<def> = ADD %vreg56, %vreg53; GR32Bit:%vreg57,%vreg56,%vreg53
	%vreg58<def> = MUL %vreg57, %vreg46; GR32Bit:%vreg58,%vreg57,%vreg46
	%vreg41<def> = ADD %vreg45, %vreg58; GR32Bit:%vreg41,%vreg45,%vreg58
	%vreg98<def> = LUI 1; GR32Bit:%vreg98
	%vreg103<def> = DREADPM %vreg98, 0; GR32Bit:%vreg103,%vreg98
	BEQ <BB#3>, %vreg103, %zero; GR32Bit:%vreg103
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#1>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg59<def> = ADD %t5, %zero; GR32Bit:%vreg59
	%vreg61<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg61
	%vreg62<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg62
	%vreg63<def> = SRLI %vreg62, 12; GR32Bit:%vreg63,%vreg62
	%vreg64<def> = ADD %vreg61, %vreg63; GR32Bit:%vreg64,%vreg61,%vreg63
	%vreg65<def> = ADDI %zero, 16; GR32Bit:%vreg65
	%vreg66<def> = SRLI %t5, 22; GR32Bit:%vreg66
	%vreg67<def> = SRLI %t5, 12; GR32Bit:%vreg67
	%vreg68<def> = ANDI %vreg67, 15; GR32Bit:%vreg68,%vreg67
	%vreg69<def> = SRLI %t5, 6; GR32Bit:%vreg69
	%vreg70<def> = ANDI %vreg69, 63; GR32Bit:%vreg70,%vreg69
	%vreg71<def> = ADDI %zero, 832; GR32Bit:%vreg71
	%vreg72<def> = MUL %vreg66, %vreg71; GR32Bit:%vreg72,%vreg66,%vreg71
	%vreg73<def> = ADDI %zero, 52; GR32Bit:%vreg73
	%vreg74<def> = MUL %vreg68, %vreg73; GR32Bit:%vreg74,%vreg68,%vreg73
	%vreg75<def> = ADD %vreg74, %vreg70; GR32Bit:%vreg75,%vreg74,%vreg70
	%vreg76<def> = ADD %vreg75, %vreg72; GR32Bit:%vreg76,%vreg75,%vreg72
	%vreg77<def> = MUL %vreg76, %vreg65; GR32Bit:%vreg77,%vreg76,%vreg65
	%vreg60<def> = ADD %vreg64, %vreg77; GR32Bit:%vreg60,%vreg64,%vreg77
	%vreg100<def> = LUI 2; GR32Bit:%vreg100
	%vreg104<def> = DREADPM %vreg100, 0; GR32Bit:%vreg104,%vreg100
	BEQ <BB#3>, %vreg104, %zero; GR32Bit:%vreg104
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#1>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg78<def> = ADD %t5, %zero; GR32Bit:%vreg78
	%vreg80<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg80
	%vreg81<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg81
	%vreg82<def> = SRLI %vreg81, 12; GR32Bit:%vreg82,%vreg81
	%vreg83<def> = ADD %vreg80, %vreg82; GR32Bit:%vreg83,%vreg80,%vreg82
	%vreg84<def> = ADDI %zero, 16; GR32Bit:%vreg84
	%vreg85<def> = SRLI %t5, 22; GR32Bit:%vreg85
	%vreg86<def> = SRLI %t5, 12; GR32Bit:%vreg86
	%vreg87<def> = ANDI %vreg86, 15; GR32Bit:%vreg87,%vreg86
	%vreg88<def> = SRLI %t5, 6; GR32Bit:%vreg88
	%vreg89<def> = ANDI %vreg88, 63; GR32Bit:%vreg89,%vreg88
	%vreg90<def> = ADDI %zero, 832; GR32Bit:%vreg90
	%vreg91<def> = MUL %vreg85, %vreg90; GR32Bit:%vreg91,%vreg85,%vreg90
	%vreg92<def> = ADDI %zero, 52; GR32Bit:%vreg92
	%vreg93<def> = MUL %vreg87, %vreg92; GR32Bit:%vreg93,%vreg87,%vreg92
	%vreg94<def> = ADD %vreg93, %vreg89; GR32Bit:%vreg94,%vreg93,%vreg89
	%vreg95<def> = ADD %vreg94, %vreg91; GR32Bit:%vreg95,%vreg94,%vreg91
	%vreg96<def> = MUL %vreg95, %vreg84; GR32Bit:%vreg96,%vreg95,%vreg84
	%vreg79<def> = ADD %vreg83, %vreg96; GR32Bit:%vreg79,%vreg83,%vreg96
	%vreg102<def> = LUI 3; GR32Bit:%vreg102
	%vreg105<def> = DREADPM %vreg102, 0; GR32Bit:%vreg105,%vreg102
	BEQ <BB#3>, %vreg105, %zero; GR32Bit:%vreg105
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#1>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#3(12) BB#1(20)

*** Renumbered SlotIndexes 316-1036 ***

*** Renumbered SlotIndexes 304-1056 ***

*** Renumbered SlotIndexes 304-1072 ***

*** Renumbered SlotIndexes 304-1088 ***

*** Renumbered SlotIndexes 304-1104 ***

*** Renumbered SlotIndexes 216-1144 ***

*** Renumbered SlotIndexes 204-1164 ***

*** Renumbered SlotIndexes 204-1180 ***

*** Renumbered SlotIndexes 204-1196 ***

*** Renumbered SlotIndexes 204-1212 ***

*** Renumbered SlotIndexes 112-1264 ***

*** Renumbered SlotIndexes 100-1284 ***

*** Renumbered SlotIndexes 100-1300 ***

*** Renumbered SlotIndexes 100-1316 ***

*** Renumbered SlotIndexes 100-1332 ***

*** Renumbered SlotIndexes 100-1348 ***

*** Renumbered SlotIndexes 100-1364 ***

*** Renumbered SlotIndexes 100-1380 ***

*** Renumbered SlotIndexes 100-1396 ***

*** Renumbered SlotIndexes 100-1412 ***

*** Renumbered SlotIndexes 100-1428 ***

*** Renumbered SlotIndexes 12-1468 ***
Creating pHyperOp bundles for CEs for bb0
  %vreg40<def> = ADD %t5, %zero; GR32Bit:%vreg40
starting at   %vreg21<def> = ADD %t5, %zero; GR32Bit:%vreg21
  %vreg59<def> = ADD %t5, %zero; GR32Bit:%vreg59
starting at   %vreg40<def> = ADD %t5, %zero; GR32Bit:%vreg40
  %vreg78<def> = ADD %t5, %zero; GR32Bit:%vreg78
starting at   %vreg59<def> = ADD %t5, %zero; GR32Bit:%vreg59
starting at   %vreg78<def> = ADD %t5, %zero; GR32Bit:%vreg78
After bundling, state of BB0:BB#0: derived from LLVM BB %startup_glowplugs3.entry
	%vreg21<def> = ADD %t5, %zero; GR32Bit:%vreg21
	  * %vreg23<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg23
	  * %vreg24<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg24
	  * %vreg25<def> = SRLI %vreg24, 12; GR32Bit:%vreg25,%vreg24
	  * %vreg26<def> = ADD %vreg23, %vreg25; GR32Bit:%vreg26,%vreg23,%vreg25
	  * %vreg27<def> = ADDI %zero, 16; GR32Bit:%vreg27
	  * %vreg28<def> = SRLI %t5, 22; GR32Bit:%vreg28
	  * %vreg29<def> = SRLI %t5, 12; GR32Bit:%vreg29
	  * %vreg30<def> = ANDI %vreg29, 15; GR32Bit:%vreg30,%vreg29
	  * %vreg31<def> = SRLI %t5, 6; GR32Bit:%vreg31
	  * %vreg32<def> = ANDI %vreg31, 63; GR32Bit:%vreg32,%vreg31
	  * %vreg33<def> = ADDI %zero, 832; GR32Bit:%vreg33
	  * %vreg34<def> = MUL %vreg28, %vreg33; GR32Bit:%vreg34,%vreg28,%vreg33
	  * %vreg35<def> = ADDI %zero, 52; GR32Bit:%vreg35
	  * %vreg36<def> = MUL %vreg30, %vreg35; GR32Bit:%vreg36,%vreg30,%vreg35
	  * %vreg37<def> = ADD %vreg36, %vreg32; GR32Bit:%vreg37,%vreg36,%vreg32
	  * %vreg38<def> = ADD %vreg37, %vreg34; GR32Bit:%vreg38,%vreg37,%vreg34
	  * %vreg39<def> = MUL %vreg38, %vreg27; GR32Bit:%vreg39,%vreg38,%vreg27
	  * %vreg22<def> = ADD %vreg26, %vreg39; GR32Bit:%vreg22,%vreg26,%vreg39
	  * %vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
	  * %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
	  * %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
	  * SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
	  * %vreg2<def> = FLW %vreg1, 0; mem:LD4[%6](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
	  * FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
	  * %vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
	  * %vreg5<def> = LW %vreg4, 4; mem:LD4[%9] GR32Bit:%vreg5,%vreg4
	  * %vreg97<def> = LUI 1; GR32Bit:%vreg97
	  * WRITEPM %vreg97, %vreg5, 0; GR32Bit:%vreg97,%vreg5
	  * %vreg99<def> = LUI 2; GR32Bit:%vreg99
	  * WRITEPM %vreg99, %vreg5, 0; GR32Bit:%vreg99,%vreg5
	  * %vreg101<def> = LUI 3; GR32Bit:%vreg101
	  * WRITEPM %vreg101, %vreg5, 0; GR32Bit:%vreg101,%vreg5
	  * BEQ <BB#3>, %vreg5, %zero; GR32Bit:%vreg5
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg40<def> = ADD %t5, %zero; GR32Bit:%vreg40
	  * %vreg42<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg42
	  * %vreg43<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg43
	  * %vreg44<def> = SRLI %vreg43, 12; GR32Bit:%vreg44,%vreg43
	  * %vreg45<def> = ADD %vreg42, %vreg44; GR32Bit:%vreg45,%vreg42,%vreg44
	  * %vreg46<def> = ADDI %zero, 16; GR32Bit:%vreg46
	  * %vreg47<def> = SRLI %t5, 22; GR32Bit:%vreg47
	  * %vreg48<def> = SRLI %t5, 12; GR32Bit:%vreg48
	  * %vreg49<def> = ANDI %vreg48, 15; GR32Bit:%vreg49,%vreg48
	  * %vreg50<def> = SRLI %t5, 6; GR32Bit:%vreg50
	  * %vreg51<def> = ANDI %vreg50, 63; GR32Bit:%vreg51,%vreg50
	  * %vreg52<def> = ADDI %zero, 832; GR32Bit:%vreg52
	  * %vreg53<def> = MUL %vreg47, %vreg52; GR32Bit:%vreg53,%vreg47,%vreg52
	  * %vreg54<def> = ADDI %zero, 52; GR32Bit:%vreg54
	  * %vreg55<def> = MUL %vreg49, %vreg54; GR32Bit:%vreg55,%vreg49,%vreg54
	  * %vreg56<def> = ADD %vreg55, %vreg51; GR32Bit:%vreg56,%vreg55,%vreg51
	  * %vreg57<def> = ADD %vreg56, %vreg53; GR32Bit:%vreg57,%vreg56,%vreg53
	  * %vreg58<def> = MUL %vreg57, %vreg46; GR32Bit:%vreg58,%vreg57,%vreg46
	  * %vreg41<def> = ADD %vreg45, %vreg58; GR32Bit:%vreg41,%vreg45,%vreg58
	  * %vreg98<def> = LUI 1; GR32Bit:%vreg98
	  * %vreg103<def> = DREADPM %vreg98, 0; GR32Bit:%vreg103,%vreg98
	  * BEQ <BB#3>, %vreg103, %zero; GR32Bit:%vreg103
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg59<def> = ADD %t5, %zero; GR32Bit:%vreg59
	  * %vreg61<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg61
	  * %vreg62<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg62
	  * %vreg63<def> = SRLI %vreg62, 12; GR32Bit:%vreg63,%vreg62
	  * %vreg64<def> = ADD %vreg61, %vreg63; GR32Bit:%vreg64,%vreg61,%vreg63
	  * %vreg65<def> = ADDI %zero, 16; GR32Bit:%vreg65
	  * %vreg66<def> = SRLI %t5, 22; GR32Bit:%vreg66
	  * %vreg67<def> = SRLI %t5, 12; GR32Bit:%vreg67
	  * %vreg68<def> = ANDI %vreg67, 15; GR32Bit:%vreg68,%vreg67
	  * %vreg69<def> = SRLI %t5, 6; GR32Bit:%vreg69
	  * %vreg70<def> = ANDI %vreg69, 63; GR32Bit:%vreg70,%vreg69
	  * %vreg71<def> = ADDI %zero, 832; GR32Bit:%vreg71
	  * %vreg72<def> = MUL %vreg66, %vreg71; GR32Bit:%vreg72,%vreg66,%vreg71
	  * %vreg73<def> = ADDI %zero, 52; GR32Bit:%vreg73
	  * %vreg74<def> = MUL %vreg68, %vreg73; GR32Bit:%vreg74,%vreg68,%vreg73
	  * %vreg75<def> = ADD %vreg74, %vreg70; GR32Bit:%vreg75,%vreg74,%vreg70
	  * %vreg76<def> = ADD %vreg75, %vreg72; GR32Bit:%vreg76,%vreg75,%vreg72
	  * %vreg77<def> = MUL %vreg76, %vreg65; GR32Bit:%vreg77,%vreg76,%vreg65
	  * %vreg60<def> = ADD %vreg64, %vreg77; GR32Bit:%vreg60,%vreg64,%vreg77
	  * %vreg100<def> = LUI 2; GR32Bit:%vreg100
	  * %vreg104<def> = DREADPM %vreg100, 0; GR32Bit:%vreg104,%vreg100
	  * BEQ <BB#3>, %vreg104, %zero; GR32Bit:%vreg104
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg78<def> = ADD %t5, %zero; GR32Bit:%vreg78
	  * %vreg80<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg80
	  * %vreg81<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg81
	  * %vreg82<def> = SRLI %vreg81, 12; GR32Bit:%vreg82,%vreg81
	  * %vreg83<def> = ADD %vreg80, %vreg82; GR32Bit:%vreg83,%vreg80,%vreg82
	  * %vreg84<def> = ADDI %zero, 16; GR32Bit:%vreg84
	  * %vreg85<def> = SRLI %t5, 22; GR32Bit:%vreg85
	  * %vreg86<def> = SRLI %t5, 12; GR32Bit:%vreg86
	  * %vreg87<def> = ANDI %vreg86, 15; GR32Bit:%vreg87,%vreg86
	  * %vreg88<def> = SRLI %t5, 6; GR32Bit:%vreg88
	  * %vreg89<def> = ANDI %vreg88, 63; GR32Bit:%vreg89,%vreg88
	  * %vreg90<def> = ADDI %zero, 832; GR32Bit:%vreg90
	  * %vreg91<def> = MUL %vreg85, %vreg90; GR32Bit:%vreg91,%vreg85,%vreg90
	  * %vreg92<def> = ADDI %zero, 52; GR32Bit:%vreg92
	  * %vreg93<def> = MUL %vreg87, %vreg92; GR32Bit:%vreg93,%vreg87,%vreg92
	  * %vreg94<def> = ADD %vreg93, %vreg89; GR32Bit:%vreg94,%vreg93,%vreg89
	  * %vreg95<def> = ADD %vreg94, %vreg91; GR32Bit:%vreg95,%vreg94,%vreg91
	  * %vreg96<def> = MUL %vreg95, %vreg84; GR32Bit:%vreg96,%vreg95,%vreg84
	  * %vreg79<def> = ADD %vreg83, %vreg96; GR32Bit:%vreg79,%vreg83,%vreg96
	  * %vreg102<def> = LUI 3; GR32Bit:%vreg102
	  * %vreg105<def> = DREADPM %vreg102, 0; GR32Bit:%vreg105,%vreg102
	  * BEQ <BB#3>, %vreg105, %zero; GR32Bit:%vreg105
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#3(12) BB#1(20)

-------------
Starting new basic block BB#1
********** MI Scheduling **********
startup_glowplugs3:BB#1 startup_glowplugs3.if.else
  From: JAL <BB#2>
    To: JAL <BB#2>
 Remaining: 6
Max Pressure: Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 0
Excess PSets: 
0 subtrees:
*** Final schedule for BB#1 ***

Partitioning instructions of the region into multiple CEs

*** Renumbered SlotIndexes 1312-1480 ***

*** Renumbered SlotIndexes 1324-1492 ***

*** Renumbered SlotIndexes 1336-1504 ***

*** Renumbered SlotIndexes 1348-1516 ***

*** Renumbered SlotIndexes 1360-1528 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
********** MI Scheduling **********
startup_glowplugs3:BB#1 startup_glowplugs3.if.else
  From: %vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
    To: BNE <BB#4>, %vreg9, %zero; GR32Bit:%vreg9
 Remaining: 0
Max Pressure: FP32Bit=2
GR32Bit=1
Live In: 
Live Out: 
FP32BitLimit 32 Actual 2
GR32BitLimit 32 Actual 1
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 0
SU(0):   %vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 25
  Successors:
   val SU(1): Latency=5 Reg=%vreg6

SU(1):   %vreg7<def> = FLW %vreg6, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg6
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 20
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg6
  Successors:
   val SU(4): Latency=15 Reg=%vreg7

SU(2):   %vreg8<def> = ADDI %zero, 1181376512; GR32Bit:%vreg8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
   val SU(3): Latency=4 Reg=%vreg8

SU(3):   %vreg10<def> = COPY %vreg8; FP32Bit:%vreg10 GR32Bit:%vreg8
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 5
  Predecessors:
   val SU(2): Latency=4 Reg=%vreg8
  Successors:
   val SU(4): Latency=0 Reg=%vreg10

SU(4):   %vreg9<def> = FLT_S %vreg10, %vreg7; GR32Bit:%vreg9 FP32Bit:%vreg10,%vreg7
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 5
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg7
   val SU(3): Latency=0 Reg=%vreg10
  Successors:
   val SU(4294967295): Latency=5 Reg=%vreg9

SU(0):   %vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 25
  Successors:
   val SU(1): Latency=5 Reg=%vreg6

SU(1):   %vreg7<def> = FLW %vreg6, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg6
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 20
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg6
  Successors:
   val SU(4): Latency=15 Reg=%vreg7

SU(2):   %vreg8<def> = ADDI %zero, 1181376512; GR32Bit:%vreg8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
   val SU(3): Latency=4 Reg=%vreg8

SU(3):   %vreg10<def> = COPY %vreg8; FP32Bit:%vreg10 GR32Bit:%vreg8
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 5
  Predecessors:
   val SU(2): Latency=4 Reg=%vreg8
  Successors:
   val SU(4): Latency=0 Reg=%vreg10

SU(4):   %vreg9<def> = FLT_S %vreg10, %vreg7; GR32Bit:%vreg9 FP32Bit:%vreg10,%vreg7
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 5
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg7
   val SU(3): Latency=0 Reg=%vreg10
  Successors:
   val SU(4294967295): Latency=5 Reg=%vreg9

Pick node SU(2)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg8<def> = ADDI %zero, 1181376512; GR32Bit:%vreg8
handleMove 1276B -> 1256B: %vreg8<def> = ADDI %zero, 1181376512; GR32Bit:%vreg8
     %vreg8:	[1276r,1284r:0)  0@1276r
        -->	[1256r,1284r:0)  0@1256r
     zero:	[4r,4d:11)[308r,308d:10)[524r,524d:9)[740r,740d:8)[1332r,1332d:7)[1336r,1336d:6)[1344r,1344d:5)[1348r,1348d:4)[1356r,1356d:3)[1360r,1360d:2)[1368r,1368d:1)[1372r,1372d:0)  0@1372r 1@1368r 2@1360r 3@1356r 4@1348r 5@1344r 6@1336r 7@1332r 8@740r 9@524r 10@308r 11@4r
        -->	[4r,4d:11)[308r,308d:10)[524r,524d:9)[740r,740d:8)[1332r,1332d:7)[1336r,1336d:6)[1344r,1344d:5)[1348r,1348d:4)[1356r,1356d:3)[1360r,1360d:2)[1368r,1368d:1)[1372r,1372d:0)  0@1372r 1@1368r 2@1360r 3@1356r 4@1348r 5@1344r 6@1336r 7@1332r 8@740r 9@524r 10@308r 11@4r
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg7<def> = FLW %vreg6, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg6
Pick node SU(3)  ILP: 1 / 5 = 0.2 Tree: 0 @0
Scheduling %vreg10<def> = COPY %vreg8; FP32Bit:%vreg10 GR32Bit:%vreg8
Pick node SU(4)  ILP: 4 / 21 = 0.190476 Tree: 0 @0
Scheduling %vreg9<def> = FLT_S %vreg10, %vreg7; GR32Bit:%vreg9 FP32Bit:%vreg10,%vreg7
*** Final schedule for BB#1 ***
SU(2):   %vreg8<def> = ADDI %zero, 1181376512; GR32Bit:%vreg8
SU(0):   %vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
SU(1):   %vreg7<def> = FLW %vreg6, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg6
SU(3):   %vreg10<def> = COPY %vreg8; FP32Bit:%vreg10 GR32Bit:%vreg8
SU(4):   %vreg9<def> = FLT_S %vreg10, %vreg7; GR32Bit:%vreg9 FP32Bit:%vreg10,%vreg7

Partitioning instructions of the region into multiple CEs
instr:  %vreg8<def> = ADDI %zero, 1181376512; GR32Bit:%vreg8
instr:  %vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
instr:  %vreg7<def> = FLW %vreg6, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg6
instr:  %vreg10<def> = COPY %vreg8; FP32Bit:%vreg10 GR32Bit:%vreg8
instr:  %vreg9<def> = FLT_S %vreg10, %vreg7; GR32Bit:%vreg9 FP32Bit:%vreg10,%vreg7

*** Renumbered SlotIndexes 1296-1568 ***

*** Renumbered SlotIndexes 1308-1580 ***

*** Renumbered SlotIndexes 1320-1592 ***

*** Renumbered SlotIndexes 1332-1604 ***

*** Renumbered SlotIndexes 1344-1616 ***

*** Renumbered SlotIndexes 1356-1628 ***

*** Renumbered SlotIndexes 1376-1640 ***

*** Renumbered SlotIndexes 1388-1652 ***

*** Renumbered SlotIndexes 1400-1664 ***

*** Renumbered SlotIndexes 1412-1676 ***

*** Renumbered SlotIndexes 1424-1688 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs

renaming register of operand that belongs to ce 1 but was defined in0
%vreg9<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg9<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg9<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg9
renaming register of operand that belongs to ce 2 but was defined in0
%vreg9
renaming register of operand that belongs to ce 3 but was defined in0
%vreg9After Shuffling regions of basic block, state of BB#1:
BB#1: derived from LLVM BB %startup_glowplugs3.if.else
    Predecessors according to CFG: BB#0
	%vreg8<def> = ADDI %zero, 1181376512; GR32Bit:%vreg8
	%vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
	%vreg7<def> = FLW %vreg6, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg6
	%vreg10<def> = COPY %vreg8; FP32Bit:%vreg10 GR32Bit:%vreg8
	%vreg9<def> = FLT_S %vreg10, %vreg7; GR32Bit:%vreg9 FP32Bit:%vreg10,%vreg7
	%vreg106<def> = LUI 1; GR32Bit:%vreg106
	WRITEPM %vreg106, %vreg9, 0; GR32Bit:%vreg106,%vreg9
	%vreg108<def> = LUI 2; GR32Bit:%vreg108
	WRITEPM %vreg108, %vreg9, 0; GR32Bit:%vreg108,%vreg9
	%vreg110<def> = LUI 3; GR32Bit:%vreg110
	WRITEPM %vreg110, %vreg9, 0; GR32Bit:%vreg110,%vreg9
	BNE <BB#4>, %vreg9, %zero; GR32Bit:%vreg9
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#2>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg107<def> = LUI 1; GR32Bit:%vreg107
	%vreg112<def> = DREADPM %vreg107, 0; GR32Bit:%vreg112,%vreg107
	BNE <BB#4>, %vreg112, %zero; GR32Bit:%vreg112
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#2>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg109<def> = LUI 2; GR32Bit:%vreg109
	%vreg113<def> = DREADPM %vreg109, 0; GR32Bit:%vreg113,%vreg109
	BNE <BB#4>, %vreg113, %zero; GR32Bit:%vreg113
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#2>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg111<def> = LUI 3; GR32Bit:%vreg111
	%vreg114<def> = DREADPM %vreg111, 0; GR32Bit:%vreg114,%vreg111
	BNE <BB#4>, %vreg114, %zero; GR32Bit:%vreg114
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#2>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#4(16) BB#2(16)

*** Renumbered SlotIndexes 1340-1732 ***

*** Renumbered SlotIndexes 1340-1748 ***

*** Renumbered SlotIndexes 1340-1764 ***

*** Renumbered SlotIndexes 1316-1788 ***

*** Renumbered SlotIndexes 1316-1804 ***

*** Renumbered SlotIndexes 1316-1820 ***

*** Renumbered SlotIndexes 1296-1848 ***

*** Renumbered SlotIndexes 1296-1864 ***

*** Renumbered SlotIndexes 1296-1880 ***

*** Renumbered SlotIndexes 1296-1896 ***

*** Renumbered SlotIndexes 1296-1912 ***
Creating pHyperOp bundles for CEs for bb1
  %vreg107<def> = LUI 1; GR32Bit:%vreg107
starting at   %vreg8<def> = ADDI %zero, 1181376512; GR32Bit:%vreg8
  %vreg109<def> = LUI 2; GR32Bit:%vreg109
starting at   %vreg107<def> = LUI 1; GR32Bit:%vreg107
  %vreg111<def> = LUI 3; GR32Bit:%vreg111
starting at   %vreg109<def> = LUI 2; GR32Bit:%vreg109
starting at   %vreg111<def> = LUI 3; GR32Bit:%vreg111
After bundling, state of BB1:BB#1: derived from LLVM BB %startup_glowplugs3.if.else
    Predecessors according to CFG: BB#0
	%vreg8<def> = ADDI %zero, 1181376512; GR32Bit:%vreg8
	  * %vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
	  * %vreg7<def> = FLW %vreg6, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg6
	  * %vreg10<def> = COPY %vreg8; FP32Bit:%vreg10 GR32Bit:%vreg8
	  * %vreg9<def> = FLT_S %vreg10, %vreg7; GR32Bit:%vreg9 FP32Bit:%vreg10,%vreg7
	  * %vreg106<def> = LUI 1; GR32Bit:%vreg106
	  * WRITEPM %vreg106, %vreg9, 0; GR32Bit:%vreg106,%vreg9
	  * %vreg108<def> = LUI 2; GR32Bit:%vreg108
	  * WRITEPM %vreg108, %vreg9, 0; GR32Bit:%vreg108,%vreg9
	  * %vreg110<def> = LUI 3; GR32Bit:%vreg110
	  * WRITEPM %vreg110, %vreg9, 0; GR32Bit:%vreg110,%vreg9
	  * BNE <BB#4>, %vreg9, %zero; GR32Bit:%vreg9
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg107<def> = LUI 1; GR32Bit:%vreg107
	  * %vreg112<def> = DREADPM %vreg107, 0; GR32Bit:%vreg112,%vreg107
	  * BNE <BB#4>, %vreg112, %zero; GR32Bit:%vreg112
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg109<def> = LUI 2; GR32Bit:%vreg109
	  * %vreg113<def> = DREADPM %vreg109, 0; GR32Bit:%vreg113,%vreg109
	  * BNE <BB#4>, %vreg113, %zero; GR32Bit:%vreg113
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg111<def> = LUI 3; GR32Bit:%vreg111
	  * %vreg114<def> = DREADPM %vreg111, 0; GR32Bit:%vreg114,%vreg111
	  * BNE <BB#4>, %vreg114, %zero; GR32Bit:%vreg114
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#4(16) BB#2(16)

-------------
Starting new basic block BB#2
********** MI Scheduling **********
startup_glowplugs3:BB#2 startup_glowplugs3.if.else6
  From: %vreg11<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg11
    To: JAL <BB#4>
 Remaining: 0
Max Pressure: GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 2
Excess PSets: 
2 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 1
  SU(4) in tree 1
SU(0):   %vreg11<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg11
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 36
  Successors:
   val SU(3): Latency=5 Reg=%vreg11
   val SU(1): Latency=5 Reg=%vreg11

SU(1):   %vreg12<def> = LW %vreg11, 0; mem:LD4[%2] GR32Bit:%vreg12,%vreg11
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 31
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg11
  Successors:
   val SU(2): Latency=15 Reg=%vreg12
   ch  SU(2): Latency=0

SU(2):   SW %zero, %vreg12, 8; mem:ST4[%15] GR32Bit:%vreg12
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 20
  Height             : 16
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg12
   ch  SU(1): Latency=0
  Successors:
   ch  SU(4): Latency=0
   ch  SU(3): Latency=1

SU(3):   %vreg13<def> = LW %vreg11, 0; mem:LD4[%2] GR32Bit:%vreg13,%vreg11
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 21
  Height             : 15
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg11
   ch  SU(2): Latency=1
  Successors:
   val SU(4): Latency=15 Reg=%vreg13
   ch  SU(4): Latency=0

SU(4):   SW %zero, %vreg13, 12; mem:ST4[%17] GR32Bit:%vreg13
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 36
  Height             : 0
  Predecessors:
   val SU(3): Latency=15 Reg=%vreg13
   ch  SU(3): Latency=0
   ch  SU(2): Latency=0

SU(0):   %vreg11<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg11
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 36
  Successors:
   val SU(3): Latency=5 Reg=%vreg11
   val SU(1): Latency=5 Reg=%vreg11

SU(1):   %vreg12<def> = LW %vreg11, 0; mem:LD4[%2] GR32Bit:%vreg12,%vreg11
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 31
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg11
  Successors:
   val SU(2): Latency=15 Reg=%vreg12
   ch  SU(2): Latency=0

SU(2):   SW %zero, %vreg12, 8; mem:ST4[%15] GR32Bit:%vreg12
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 20
  Height             : 16
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg12
   ch  SU(1): Latency=0
  Successors:
   ch  SU(4): Latency=0
   ch  SU(3): Latency=1

SU(3):   %vreg13<def> = LW %vreg11, 0; mem:LD4[%2] GR32Bit:%vreg13,%vreg11
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 21
  Height             : 15
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg11
   ch  SU(2): Latency=1
  Successors:
   val SU(4): Latency=15 Reg=%vreg13
   ch  SU(4): Latency=0

SU(4):   SW %zero, %vreg13, 12; mem:ST4[%17] GR32Bit:%vreg13
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 36
  Height             : 0
  Predecessors:
   val SU(3): Latency=15 Reg=%vreg13
   ch  SU(3): Latency=0
   ch  SU(2): Latency=0

Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg11<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg11
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg12<def> = LW %vreg11, 0; mem:LD4[%2] GR32Bit:%vreg12,%vreg11
Pick node SU(2)  ILP: 3 / 21 = 0.142857 Tree: 0 @0
Scheduling SW %zero, %vreg12, 8; mem:ST4[%15] GR32Bit:%vreg12
Pick node SU(3)  ILP: 1 / 22 = 0.0454545 Tree: 1 @0
Scheduling %vreg13<def> = LW %vreg11, 0; mem:LD4[%2] GR32Bit:%vreg13,%vreg11
Pick node SU(4)  ILP: 2 / 37 = 0.0540541 Tree: 1 @0
Scheduling SW %zero, %vreg13, 12; mem:ST4[%17] GR32Bit:%vreg13
*** Final schedule for BB#2 ***
SU(0):   %vreg11<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg11
SU(1):   %vreg12<def> = LW %vreg11, 0; mem:LD4[%2] GR32Bit:%vreg12,%vreg11
SU(2):   SW %zero, %vreg12, 8; mem:ST4[%15] GR32Bit:%vreg12
SU(3):   %vreg13<def> = LW %vreg11, 0; mem:LD4[%2] GR32Bit:%vreg13,%vreg11
SU(4):   SW %zero, %vreg13, 12; mem:ST4[%17] GR32Bit:%vreg13

Partitioning instructions of the region into multiple CEs
instr:  %vreg11<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg11
instr:  %vreg12<def> = LW %vreg11, 0; mem:LD4[%2] GR32Bit:%vreg12,%vreg11
instr:  SW %zero, %vreg12, 8; mem:ST4[%15] GR32Bit:%vreg12
instr:  %vreg13<def> = LW %vreg11, 0; mem:LD4[%2] GR32Bit:%vreg13,%vreg11
instr:  SW %zero, %vreg13, 12; mem:ST4[%17] GR32Bit:%vreg13

*** Renumbered SlotIndexes 1812-1924 ***

*** Renumbered SlotIndexes 1824-1936 ***

*** Renumbered SlotIndexes 1836-1948 ***

*** Renumbered SlotIndexes 1848-1960 ***

*** Renumbered SlotIndexes 1860-1972 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
After Shuffling regions of basic block, state of BB#2:
BB#2: derived from LLVM BB %startup_glowplugs3.if.else6
    Predecessors according to CFG: BB#1
	%vreg11<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg11
	%vreg12<def> = LW %vreg11, 0; mem:LD4[%2] GR32Bit:%vreg12,%vreg11
	SW %zero, %vreg12, 8; mem:ST4[%15] GR32Bit:%vreg12
	%vreg13<def> = LW %vreg11, 0; mem:LD4[%2] GR32Bit:%vreg13,%vreg11
	SW %zero, %vreg13, 12; mem:ST4[%17] GR32Bit:%vreg13
	JAL <BB#4>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#4>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#4>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#4>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#4

*** Renumbered SlotIndexes 1820-2004 ***

*** Renumbered SlotIndexes 1812-2028 ***

*** Renumbered SlotIndexes 1808-2040 ***
Creating pHyperOp bundles for CEs for bb2
  JAL <BB#4>
starting at   %vreg11<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg11
  JAL <BB#4>
starting at   JAL <BB#4>
  JAL <BB#4>
starting at   JAL <BB#4>
starting at   JAL <BB#4>
After bundling, state of BB2:BB#2: derived from LLVM BB %startup_glowplugs3.if.else6
    Predecessors according to CFG: BB#1
	%vreg11<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg11
	  * %vreg12<def> = LW %vreg11, 0; mem:LD4[%2] GR32Bit:%vreg12,%vreg11
	  * SW %zero, %vreg12, 8; mem:ST4[%15] GR32Bit:%vreg12
	  * %vreg13<def> = LW %vreg11, 0; mem:LD4[%2] GR32Bit:%vreg13,%vreg11
	  * SW %zero, %vreg13, 12; mem:ST4[%17] GR32Bit:%vreg13
	  * JAL <BB#4>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#4>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#4>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#4>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#4

-------------
Starting new basic block BB#3
********** MI Scheduling **********
startup_glowplugs3:BB#3 startup_glowplugs3.if.then
  From: %vreg14<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg14
    To: End Remaining: 0
Max Pressure: GR32Bit=3
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 3
Excess PSets: 
2 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 1
  SU(5) in tree 1
SU(0):   %vreg14<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 36
  Successors:
   val SU(4): Latency=5 Reg=%vreg14
   val SU(1): Latency=5 Reg=%vreg14

SU(1):   %vreg15<def> = LW %vreg14, 0; mem:LD4[%2] GR32Bit:%vreg15,%vreg14
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 31
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg14
  Successors:
   val SU(3): Latency=15 Reg=%vreg15
   ch  SU(3): Latency=0

SU(2):   %vreg16<def> = ADDI %zero, 1; GR32Bit:%vreg16
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
   val SU(5): Latency=4 Reg=%vreg16
   val SU(3): Latency=4 Reg=%vreg16

SU(3):   SW %vreg16, %vreg15, 8; mem:ST4[%19] GR32Bit:%vreg16,%vreg15
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 20
  Height             : 16
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg15
   val SU(2): Latency=4 Reg=%vreg16
   ch  SU(1): Latency=0
  Successors:
   ch  SU(5): Latency=0
   ch  SU(4): Latency=1

SU(4):   %vreg17<def> = LW %vreg14, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg14
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 21
  Height             : 15
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg14
   ch  SU(3): Latency=1
  Successors:
   val SU(5): Latency=15 Reg=%vreg17
   ch  SU(5): Latency=0

SU(5):   SW %vreg16, %vreg17, 12; mem:ST4[%21] GR32Bit:%vreg16,%vreg17
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 36
  Height             : 0
  Predecessors:
   val SU(4): Latency=15 Reg=%vreg17
   val SU(2): Latency=4 Reg=%vreg16
   ch  SU(4): Latency=0
   ch  SU(3): Latency=0

SU(0):   %vreg14<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 36
  Successors:
   val SU(4): Latency=5 Reg=%vreg14
   val SU(1): Latency=5 Reg=%vreg14

SU(1):   %vreg15<def> = LW %vreg14, 0; mem:LD4[%2] GR32Bit:%vreg15,%vreg14
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 31
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg14
  Successors:
   val SU(3): Latency=15 Reg=%vreg15
   ch  SU(3): Latency=0

SU(2):   %vreg16<def> = ADDI %zero, 1; GR32Bit:%vreg16
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
   val SU(5): Latency=4 Reg=%vreg16
   val SU(3): Latency=4 Reg=%vreg16

SU(3):   SW %vreg16, %vreg15, 8; mem:ST4[%19] GR32Bit:%vreg16,%vreg15
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 20
  Height             : 16
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg15
   val SU(2): Latency=4 Reg=%vreg16
   ch  SU(1): Latency=0
  Successors:
   ch  SU(5): Latency=0
   ch  SU(4): Latency=1

SU(4):   %vreg17<def> = LW %vreg14, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg14
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 21
  Height             : 15
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg14
   ch  SU(3): Latency=1
  Successors:
   val SU(5): Latency=15 Reg=%vreg17
   ch  SU(5): Latency=0

SU(5):   SW %vreg16, %vreg17, 12; mem:ST4[%21] GR32Bit:%vreg16,%vreg17
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 36
  Height             : 0
  Predecessors:
   val SU(4): Latency=15 Reg=%vreg17
   val SU(2): Latency=4 Reg=%vreg16
   ch  SU(4): Latency=0
   ch  SU(3): Latency=0

Pick node SU(2)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg16<def> = ADDI %zero, 1; GR32Bit:%vreg16
handleMove 1968B -> 1948B: %vreg16<def> = ADDI %zero, 1; GR32Bit:%vreg16
     %vreg16:	[1968r,1992r:0)  0@1968r
        -->	[1948r,1992r:0)  0@1948r
     zero:	[4r,4d:11)[308r,308d:10)[524r,524d:9)[740r,740d:8)[1696r,1696d:7)[1704r,1704d:6)[1712r,1712d:5)[1720r,1720d:4)[1728r,1728d:3)[1736r,1736d:2)[1744r,1744d:1)[1752r,1752d:0)  0@1752r 1@1744r 2@1736r 3@1728r 4@1720r 5@1712r 6@1704r 7@1696r 8@740r 9@524r 10@308r 11@4r
        -->	[4r,4d:11)[308r,308d:10)[524r,524d:9)[740r,740d:8)[1696r,1696d:7)[1704r,1704d:6)[1712r,1712d:5)[1720r,1720d:4)[1728r,1728d:3)[1736r,1736d:2)[1744r,1744d:1)[1752r,1752d:0)  0@1752r 1@1744r 2@1736r 3@1728r 4@1720r 5@1712r 6@1704r 7@1696r 8@740r 9@524r 10@308r 11@4r
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg14<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg14
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg15<def> = LW %vreg14, 0; mem:LD4[%2] GR32Bit:%vreg15,%vreg14
Pick node SU(3)  ILP: 4 / 21 = 0.190476 Tree: 0 @0
Scheduling SW %vreg16, %vreg15, 8; mem:ST4[%19] GR32Bit:%vreg16,%vreg15
Pick node SU(4)  ILP: 1 / 22 = 0.0454545 Tree: 1 @0
Scheduling %vreg17<def> = LW %vreg14, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg14
Pick node SU(5)  ILP: 2 / 37 = 0.0540541 Tree: 1 @0
Scheduling SW %vreg16, %vreg17, 12; mem:ST4[%21] GR32Bit:%vreg16,%vreg17
*** Final schedule for BB#3 ***
SU(2):   %vreg16<def> = ADDI %zero, 1; GR32Bit:%vreg16
SU(0):   %vreg14<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg14
SU(1):   %vreg15<def> = LW %vreg14, 0; mem:LD4[%2] GR32Bit:%vreg15,%vreg14
SU(3):   SW %vreg16, %vreg15, 8; mem:ST4[%19] GR32Bit:%vreg16,%vreg15
SU(4):   %vreg17<def> = LW %vreg14, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg14
SU(5):   SW %vreg16, %vreg17, 12; mem:ST4[%21] GR32Bit:%vreg16,%vreg17

Partitioning instructions of the region into multiple CEs
instr:  %vreg16<def> = ADDI %zero, 1; GR32Bit:%vreg16
instr:  %vreg14<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg14
instr:  %vreg15<def> = LW %vreg14, 0; mem:LD4[%2] GR32Bit:%vreg15,%vreg14
instr:  SW %vreg16, %vreg15, 8; mem:ST4[%19] GR32Bit:%vreg16,%vreg15
instr:  %vreg17<def> = LW %vreg14, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg14
instr:  SW %vreg16, %vreg17, 12; mem:ST4[%21] GR32Bit:%vreg16,%vreg17
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
After Shuffling regions of basic block, state of BB#3:
BB#3: derived from LLVM BB %startup_glowplugs3.if.then
    Predecessors according to CFG: BB#0
	%vreg16<def> = ADDI %zero, 1; GR32Bit:%vreg16
	%vreg14<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg14
	%vreg15<def> = LW %vreg14, 0; mem:LD4[%2] GR32Bit:%vreg15,%vreg14
	SW %vreg16, %vreg15, 8; mem:ST4[%19] GR32Bit:%vreg16,%vreg15
	%vreg17<def> = LW %vreg14, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg14
	SW %vreg16, %vreg17, 12; mem:ST4[%21] GR32Bit:%vreg16,%vreg17
    Successors according to CFG: BB#4
Creating pHyperOp bundles for CEs for bb3
starting at   %vreg16<def> = ADDI %zero, 1; GR32Bit:%vreg16

*** Renumbered SlotIndexes 1948-2052 ***
starting at   %zero<def> = ADDI %zero, 0
starting at   %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 1960-2064 ***
starting at   %zero<def> = ADDI %zero, 0
After bundling, state of BB3:BB#3: derived from LLVM BB %startup_glowplugs3.if.then
    Predecessors according to CFG: BB#0
	%vreg16<def> = ADDI %zero, 1; GR32Bit:%vreg16
	  * %vreg14<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg14
	  * %vreg15<def> = LW %vreg14, 0; mem:LD4[%2] GR32Bit:%vreg15,%vreg14
	  * SW %vreg16, %vreg15, 8; mem:ST4[%19] GR32Bit:%vreg16,%vreg15
	  * %vreg17<def> = LW %vreg14, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg14
	  * SW %vreg16, %vreg17, 12; mem:ST4[%21] GR32Bit:%vreg16,%vreg17
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#4

-------------
Starting new basic block BB#4
********** MI Scheduling **********
startup_glowplugs3:BB#4 startup_glowplugs3.return
  From: %vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
    To: End Remaining: 0
Max Pressure: GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 2
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
SU(0):   %vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
   val SU(1): Latency=5 Reg=%vreg18

SU(1):   %vreg19<def> = LW %vreg18, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 2
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg18
  Successors:
   val SU(3): Latency=2 Reg=%vreg19

SU(2):   %vreg20<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(3): Latency=5 Reg=%vreg20

SU(3):   SW %vreg19, %vreg20, 0; mem:ST4[%1] GR32Bit:%vreg19,%vreg20
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 7
  Height             : 0
  Predecessors:
   val SU(1): Latency=2 Reg=%vreg19
   val SU(2): Latency=5 Reg=%vreg20
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
   val SU(1): Latency=5 Reg=%vreg18

SU(1):   %vreg19<def> = LW %vreg18, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 2
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg18
  Successors:
   val SU(3): Latency=2 Reg=%vreg19

SU(2):   %vreg20<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(3): Latency=5 Reg=%vreg20

SU(3):   SW %vreg19, %vreg20, 0; mem:ST4[%1] GR32Bit:%vreg19,%vreg20
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 7
  Height             : 0
  Predecessors:
   val SU(1): Latency=2 Reg=%vreg19
   val SU(2): Latency=5 Reg=%vreg20
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(2)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg20<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg20
handleMove 2048B -> 2028B: %vreg20<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg20
     %vreg20:	[2048r,2056r:0)  0@2048r
        -->	[2028r,2056r:0)  0@2028r
     t5:	EMPTY
        -->	EMPTY
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg19<def> = LW %vreg18, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
Pick node SU(3)  ILP: 4 / 8 = 0.5 Tree: 0 @0
Scheduling SW %vreg19, %vreg20, 0; mem:ST4[%1] GR32Bit:%vreg19,%vreg20
*** Final schedule for BB#4 ***
SU(2):   %vreg20<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg20
SU(0):   %vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
SU(1):   %vreg19<def> = LW %vreg18, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
SU(3):   SW %vreg19, %vreg20, 0; mem:ST4[%1] GR32Bit:%vreg19,%vreg20

Partitioning instructions of the region into multiple CEs
instr:  %vreg20<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg20
instr:  %vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
instr:  %vreg19<def> = LW %vreg18, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
instr:  SW %vreg19, %vreg20, 0; mem:ST4[%1] GR32Bit:%vreg19,%vreg20
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
before falloc, state of bb4:BB#4: derived from LLVM BB %startup_glowplugs3.return
    Predecessors according to CFG: BB#1 BB#2 BB#3
	%vreg20<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg20
	%vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
	%vreg19<def> = LW %vreg18, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
	SW %vreg19, %vreg20, 0; mem:ST4[%1] GR32Bit:%vreg19,%vreg20
Adding all fallocs first to avoid stalls due to sequential fallocs and fbinds
Adding writecm(for writing sync count to context frames) and fbind instructions
live end of child is itself
live end of child is itself
Adding localref sw instructions to hyperOp startup_glowplugs3

*** Renumbered SlotIndexes 2060-2076 ***

*** Renumbered SlotIndexes 2072-2088 ***

*** Renumbered SlotIndexes 2084-2100 ***

*** Renumbered SlotIndexes 2096-2112 ***

*** Renumbered SlotIndexes 2108-2124 ***

*** Renumbered SlotIndexes 2120-2136 ***

*** Renumbered SlotIndexes 2132-2148 ***

*** Renumbered SlotIndexes 2144-2160 ***

*** Renumbered SlotIndexes 2156-2172 ***
localref sw to redefine_start2:  SW %vreg135, %vreg134, 4; GR32Bit:%vreg135,%vreg134
Adding writecm instructions to hyperOp startup_glowplugs3
Adding writecmp and sync instructions
problem with which child exactly?redefine_start2 with edge of type:6

*** Renumbered SlotIndexes 2168-2184 ***

*** Renumbered SlotIndexes 2180-2196 ***

*** Renumbered SlotIndexes 2192-2208 ***

*** Renumbered SlotIndexes 2204-2220 ***
Adding endHyperOp instructions to each pHyperOp

*** Renumbered SlotIndexes 2208-2232 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 2220-2244 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 2232-2256 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 2244-2268 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 2256-2280 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 2268-2292 ***
  %zero<def> = ADDI %zero, 0
After Shuffling regions of basic block, state of BB#4:
BB#4: derived from LLVM BB %startup_glowplugs3.return
    Predecessors according to CFG: BB#1 BB#2 BB#3
	%vreg20<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg20
	%vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
	%vreg19<def> = LW %vreg18, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
	SW %vreg19, %vreg20, 0; mem:ST4[%1] GR32Bit:%vreg19,%vreg20
	%vreg115<def> = ADDI %zero, 128; GR32Bit:%vreg115
	%vreg116<def> = ADDI %zero, 1; GR32Bit:%vreg116
	WRITECM %vreg115, %vreg116, 60; GR32Bit:%vreg115,%vreg116
	%vreg117<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg117
	%vreg118<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg118
	%vreg119<def> = SRLI %vreg118, 12; GR32Bit:%vreg119,%vreg118
	%vreg120<def> = ADD %vreg117, %vreg119; GR32Bit:%vreg120,%vreg117,%vreg119
	%vreg121<def> = ADDI %zero, 16; GR32Bit:%vreg121
	%vreg122<def> = SRLI %vreg115, 22; GR32Bit:%vreg122,%vreg115
	%vreg123<def> = SRLI %vreg115, 12; GR32Bit:%vreg123,%vreg115
	%vreg124<def> = ANDI %vreg123, 15; GR32Bit:%vreg124,%vreg123
	%vreg125<def> = SRLI %vreg115, 6; GR32Bit:%vreg125,%vreg115
	%vreg126<def> = ANDI %vreg125, 63; GR32Bit:%vreg126,%vreg125
	%vreg127<def> = ADDI %zero, 832; GR32Bit:%vreg127
	%vreg128<def> = MUL %vreg122, %vreg127; GR32Bit:%vreg128,%vreg122,%vreg127
	%vreg129<def> = ADDI %zero, 52; GR32Bit:%vreg129
	%vreg130<def> = MUL %vreg124, %vreg129; GR32Bit:%vreg130,%vreg124,%vreg129
	%vreg131<def> = ADD %vreg130, %vreg126; GR32Bit:%vreg131,%vreg130,%vreg126
	%vreg132<def> = ADD %vreg131, %vreg128; GR32Bit:%vreg132,%vreg131,%vreg128
	%vreg133<def> = MUL %vreg132, %vreg121; GR32Bit:%vreg133,%vreg132,%vreg121
	%vreg134<def> = ADD %vreg133, %vreg120; GR32Bit:%vreg134,%vreg133,%vreg120
	%vreg135<def> = LW %t5, 0; GR32Bit:%vreg135
	SW %vreg135, %vreg134, 4; GR32Bit:%vreg135,%vreg134
	%vreg136<def> = LUI 1; GR32Bit:%vreg136
	WRITEPM %vreg136, %vreg115, 0; GR32Bit:%vreg136,%vreg115
	FDELETE %t4, 0
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg137<def> = LUI 1; GR32Bit:%vreg137
	%vreg138<def> = DREADPM %vreg137, 0; GR32Bit:%vreg138,%vreg137
	%vreg139<def> = ADDI %zero, -1; GR32Bit:%vreg139
	SYNC %vreg138, %vreg139, 60; GR32Bit:%vreg138,%vreg139
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 2180-2340 ***

*** Renumbered SlotIndexes 2180-2356 ***

*** Renumbered SlotIndexes 2068-2404 ***

*** Renumbered SlotIndexes 2056-2424 ***
Creating pHyperOp bundles for CEs for bb4
  %vreg137<def> = LUI 1; GR32Bit:%vreg137
starting at   %vreg20<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg20
  END 0
starting at   %vreg137<def> = LUI 1; GR32Bit:%vreg137
  END 0
starting at   END 0
starting at   END 0
After bundling, state of BB4:BB#4: derived from LLVM BB %startup_glowplugs3.return
    Predecessors according to CFG: BB#1 BB#2 BB#3
	%vreg20<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg20
	  * %vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
	  * %vreg19<def> = LW %vreg18, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
	  * SW %vreg19, %vreg20, 0; mem:ST4[%1] GR32Bit:%vreg19,%vreg20
	  * %vreg115<def> = ADDI %zero, 128; GR32Bit:%vreg115
	  * %vreg116<def> = ADDI %zero, 1; GR32Bit:%vreg116
	  * WRITECM %vreg115, %vreg116, 60; GR32Bit:%vreg115,%vreg116
	  * %vreg117<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg117
	  * %vreg118<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg118
	  * %vreg119<def> = SRLI %vreg118, 12; GR32Bit:%vreg119,%vreg118
	  * %vreg120<def> = ADD %vreg117, %vreg119; GR32Bit:%vreg120,%vreg117,%vreg119
	  * %vreg121<def> = ADDI %zero, 16; GR32Bit:%vreg121
	  * %vreg122<def> = SRLI %vreg115, 22; GR32Bit:%vreg122,%vreg115
	  * %vreg123<def> = SRLI %vreg115, 12; GR32Bit:%vreg123,%vreg115
	  * %vreg124<def> = ANDI %vreg123, 15; GR32Bit:%vreg124,%vreg123
	  * %vreg125<def> = SRLI %vreg115, 6; GR32Bit:%vreg125,%vreg115
	  * %vreg126<def> = ANDI %vreg125, 63; GR32Bit:%vreg126,%vreg125
	  * %vreg127<def> = ADDI %zero, 832; GR32Bit:%vreg127
	  * %vreg128<def> = MUL %vreg122, %vreg127; GR32Bit:%vreg128,%vreg122,%vreg127
	  * %vreg129<def> = ADDI %zero, 52; GR32Bit:%vreg129
	  * %vreg130<def> = MUL %vreg124, %vreg129; GR32Bit:%vreg130,%vreg124,%vreg129
	  * %vreg131<def> = ADD %vreg130, %vreg126; GR32Bit:%vreg131,%vreg130,%vreg126
	  * %vreg132<def> = ADD %vreg131, %vreg128; GR32Bit:%vreg132,%vreg131,%vreg128
	  * %vreg133<def> = MUL %vreg132, %vreg121; GR32Bit:%vreg133,%vreg132,%vreg121
	  * %vreg134<def> = ADD %vreg133, %vreg120; GR32Bit:%vreg134,%vreg133,%vreg120
	  * %vreg135<def> = LW %t5, 0; GR32Bit:%vreg135
	  * SW %vreg135, %vreg134, 4; GR32Bit:%vreg135,%vreg134
	  * %vreg136<def> = LUI 1; GR32Bit:%vreg136
	  * WRITEPM %vreg136, %vreg115, 0; GR32Bit:%vreg136,%vreg115
	  * FDELETE %t4, 0
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg137<def> = LUI 1; GR32Bit:%vreg137
	  * %vreg138<def> = DREADPM %vreg137, 0; GR32Bit:%vreg138,%vreg137
	  * %vreg139<def> = ADDI %zero, -1; GR32Bit:%vreg139
	  * SYNC %vreg138, %vreg139, 60; GR32Bit:%vreg138,%vreg139
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
Patching the instructions that are supposed to use the physical registers r30 and r31
Computing live-in reg-units in ABI blocks.
Created 0 new intervals.

*** Renumbered SlotIndexes 1252-2484 ***

*** Renumbered SlotIndexes 1264-2496 ***

*** Renumbered SlotIndexes 1284-2508 ***
********** INTERVALS **********
t5 = EMPTY
zero = [4r,4d:11)[308r,308d:10)[524r,524d:9)[740r,740d:8)[1748r,1748d:7)[1756r,1756d:6)[1764r,1764d:5)[1772r,1772d:4)[1780r,1780d:3)[1788r,1788d:2)[1796r,1796d:1)[1804r,1804d:0)  0@1804r 1@1796r 2@1788r 3@1780r 4@1772r 5@1764r 6@1756r 7@1748r 8@740r 9@524r 10@308r 11@4r
%vreg0 = [156r,196r:0)  0@156r
%vreg1 = [164r,180r:0)  0@164r
%vreg2 = [180r,188r:0)  0@180r
%vreg3 = [148r,188r:0)  0@148r
%vreg4 = [196r,204r:0)  0@196r
%vreg5 = [204r,260r:0)  0@204r
%vreg6 = [1300r,1308r:0)  0@1300r
%vreg7 = [1308r,1332r:0)  0@1308r
%vreg8 = [1280r,1324r:0)  0@1280r
%vreg9 = [1332r,1388r:0)  0@1332r
%vreg10 = [1324r,1332r:0)  0@1324r
%vreg11 = [1820r,1844r:0)  0@1820r
%vreg12 = [1828r,1836r:0)  0@1828r
%vreg13 = [1844r,1852r:0)  0@1844r
%vreg14 = [2044r,2076r:0)  0@2044r
%vreg15 = [2052r,2068r:0)  0@2052r
%vreg16 = [2012r,2084r:0)  0@2012r
%vreg17 = [2076r,2084r:0)  0@2076r
%vreg18 = [2108r,2116r:0)  0@2108r
%vreg19 = [2116r,2132r:0)  0@2116r
%vreg20 = [2100r,2132r:0)  0@2100r
%vreg21 = [4r,4d:0)  0@4r
%vreg22 = [140r,140d:0)  0@140r
%vreg23 = [12r,28r:0)  0@12r
%vreg24 = [16r,20r:0)  0@16r
%vreg25 = [20r,28r:0)  0@20r
%vreg26 = [28r,140r:0)  0@28r
%vreg27 = [36r,132r:0)  0@36r
%vreg28 = [44r,92r:0)  0@44r
%vreg29 = [52r,60r:0)  0@52r
%vreg30 = [60r,108r:0)  0@60r
%vreg31 = [68r,76r:0)  0@68r
%vreg32 = [76r,116r:0)  0@76r
%vreg33 = [84r,92r:0)  0@84r
%vreg34 = [92r,124r:0)  0@92r
%vreg35 = [100r,108r:0)  0@100r
%vreg36 = [108r,116r:0)  0@108r
%vreg37 = [116r,124r:0)  0@116r
%vreg38 = [124r,132r:0)  0@124r
%vreg39 = [132r,140r:0)  0@132r
%vreg40 = [308r,308d:0)  0@308r
%vreg41 = [452r,452d:0)  0@452r
%vreg42 = [316r,340r:0)  0@316r
%vreg43 = [324r,332r:0)  0@324r
%vreg44 = [332r,340r:0)  0@332r
%vreg45 = [340r,452r:0)  0@340r
%vreg46 = [348r,444r:0)  0@348r
%vreg47 = [356r,404r:0)  0@356r
%vreg48 = [364r,372r:0)  0@364r
%vreg49 = [372r,420r:0)  0@372r
%vreg50 = [380r,388r:0)  0@380r
%vreg51 = [388r,428r:0)  0@388r
%vreg52 = [396r,404r:0)  0@396r
%vreg53 = [404r,436r:0)  0@404r
%vreg54 = [412r,420r:0)  0@412r
%vreg55 = [420r,428r:0)  0@420r
%vreg56 = [428r,436r:0)  0@428r
%vreg57 = [436r,444r:0)  0@436r
%vreg58 = [444r,452r:0)  0@444r
%vreg59 = [524r,524d:0)  0@524r
%vreg60 = [668r,668d:0)  0@668r
%vreg61 = [532r,556r:0)  0@532r
%vreg62 = [540r,548r:0)  0@540r
%vreg63 = [548r,556r:0)  0@548r
%vreg64 = [556r,668r:0)  0@556r
%vreg65 = [564r,660r:0)  0@564r
%vreg66 = [572r,620r:0)  0@572r
%vreg67 = [580r,588r:0)  0@580r
%vreg68 = [588r,636r:0)  0@588r
%vreg69 = [596r,604r:0)  0@596r
%vreg70 = [604r,644r:0)  0@604r
%vreg71 = [612r,620r:0)  0@612r
%vreg72 = [620r,652r:0)  0@620r
%vreg73 = [628r,636r:0)  0@628r
%vreg74 = [636r,644r:0)  0@636r
%vreg75 = [644r,652r:0)  0@644r
%vreg76 = [652r,660r:0)  0@652r
%vreg77 = [660r,668r:0)  0@660r
%vreg78 = [740r,740d:0)  0@740r
%vreg79 = [884r,884d:0)  0@884r
%vreg80 = [748r,772r:0)  0@748r
%vreg81 = [756r,764r:0)  0@756r
%vreg82 = [764r,772r:0)  0@764r
%vreg83 = [772r,884r:0)  0@772r
%vreg84 = [780r,876r:0)  0@780r
%vreg85 = [788r,836r:0)  0@788r
%vreg86 = [796r,804r:0)  0@796r
%vreg87 = [804r,852r:0)  0@804r
%vreg88 = [812r,820r:0)  0@812r
%vreg89 = [820r,860r:0)  0@820r
%vreg90 = [828r,836r:0)  0@828r
%vreg91 = [836r,868r:0)  0@836r
%vreg92 = [844r,852r:0)  0@844r
%vreg93 = [852r,860r:0)  0@852r
%vreg94 = [860r,868r:0)  0@860r
%vreg95 = [868r,876r:0)  0@868r
%vreg96 = [876r,884r:0)  0@876r
%vreg97 = [212r,220r:0)  0@212r
%vreg98 = [460r,468r:0)  0@460r
%vreg99 = [228r,236r:0)  0@228r
%vreg100 = [676r,684r:0)  0@676r
%vreg101 = [244r,252r:0)  0@244r
%vreg102 = [1036r,1052r:0)  0@1036r
%vreg103 = [468r,476r:0)  0@468r
%vreg104 = [684r,692r:0)  0@684r
%vreg105 = [1052r,1084r:0)  0@1052r
%vreg106 = [1340r,1348r:0)  0@1340r
%vreg107 = [1436r,1452r:0)  0@1436r
%vreg108 = [1356r,1364r:0)  0@1356r
%vreg109 = [1516r,1532r:0)  0@1516r
%vreg110 = [1372r,1380r:0)  0@1372r
%vreg111 = [1596r,1612r:0)  0@1596r
%vreg112 = [1452r,1460r:0)  0@1452r
%vreg113 = [1532r,1540r:0)  0@1532r
%vreg114 = [1612r,1644r:0)  0@1612r
%vreg115 = [2140r,2332r:0)  0@2140r
%vreg116 = [2148r,2156r:0)  0@2148r
%vreg117 = [2164r,2188r:0)  0@2164r
%vreg118 = [2172r,2180r:0)  0@2172r
%vreg119 = [2180r,2188r:0)  0@2180r
%vreg120 = [2188r,2300r:0)  0@2188r
%vreg121 = [2196r,2292r:0)  0@2196r
%vreg122 = [2204r,2252r:0)  0@2204r
%vreg123 = [2212r,2220r:0)  0@2212r
%vreg124 = [2220r,2268r:0)  0@2220r
%vreg125 = [2228r,2236r:0)  0@2228r
%vreg126 = [2236r,2276r:0)  0@2236r
%vreg127 = [2244r,2252r:0)  0@2244r
%vreg128 = [2252r,2284r:0)  0@2252r
%vreg129 = [2260r,2268r:0)  0@2260r
%vreg130 = [2268r,2276r:0)  0@2268r
%vreg131 = [2276r,2284r:0)  0@2276r
%vreg132 = [2284r,2292r:0)  0@2284r
%vreg133 = [2292r,2300r:0)  0@2292r
%vreg134 = [2300r,2316r:0)  0@2300r
%vreg135 = [2308r,2316r:0)  0@2308r
%vreg136 = [2324r,2332r:0)  0@2324r
%vreg137 = [2372r,2380r:0)  0@2372r
%vreg138 = [2380r,2508B:0)  0@2380r
%vreg139 = [2388r,2396r:0)  0@2388r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function startup_glowplugs3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %startup_glowplugs3.entry
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg23<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg23
4B		  * %vreg24<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg24
4B		  * %vreg25<def> = SRLI %vreg24, 12; GR32Bit:%vreg25,%vreg24
4B		  * %vreg26<def> = ADD %vreg23, %vreg25; GR32Bit:%vreg26,%vreg23,%vreg25
4B		  * %vreg27<def> = ADDI %zero, 16; GR32Bit:%vreg27
4B		  * %vreg28<def> = SRLI %t5, 22; GR32Bit:%vreg28
4B		  * %vreg29<def> = SRLI %t5, 12; GR32Bit:%vreg29
4B		  * %vreg30<def> = ANDI %vreg29, 15; GR32Bit:%vreg30,%vreg29
4B		  * %vreg31<def> = SRLI %t5, 6; GR32Bit:%vreg31
4B		  * %vreg32<def> = ANDI %vreg31, 63; GR32Bit:%vreg32,%vreg31
4B		  * %vreg33<def> = ADDI %zero, 832; GR32Bit:%vreg33
4B		  * %vreg34<def> = MUL %vreg28, %vreg33; GR32Bit:%vreg34,%vreg28,%vreg33
4B		  * %vreg35<def> = ADDI %zero, 52; GR32Bit:%vreg35
4B		  * %vreg36<def> = MUL %vreg30, %vreg35; GR32Bit:%vreg36,%vreg30,%vreg35
4B		  * %vreg37<def> = ADD %vreg36, %vreg32; GR32Bit:%vreg37,%vreg36,%vreg32
4B		  * %vreg38<def> = ADD %vreg37, %vreg34; GR32Bit:%vreg38,%vreg37,%vreg34
4B		  * %vreg39<def> = MUL %vreg38, %vreg27; GR32Bit:%vreg39,%vreg38,%vreg27
4B		  * %t5<def> = ADD %vreg26, %vreg39; GR32Bit:%vreg26,%vreg39
4B		  * %vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
4B		  * %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
4B		  * %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
4B		  * SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
4B		  * %vreg2<def> = FLW %vreg1, 0; mem:LD4[%6](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
4B		  * FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
4B		  * %vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
4B		  * %vreg5<def> = LW %vreg4, 4; mem:LD4[%9] GR32Bit:%vreg5,%vreg4
4B		  * %vreg97<def> = LUI 1; GR32Bit:%vreg97
4B		  * WRITEPM %vreg97, %vreg5, 0; GR32Bit:%vreg97,%vreg5
4B		  * %vreg99<def> = LUI 2; GR32Bit:%vreg99
4B		  * WRITEPM %vreg99, %vreg5, 0; GR32Bit:%vreg99,%vreg5
4B		  * %vreg101<def> = LUI 3; GR32Bit:%vreg101
4B		  * WRITEPM %vreg101, %vreg5, 0; GR32Bit:%vreg101,%vreg5
4B		  * BEQ <BB#3>, %vreg5, %zero; GR32Bit:%vreg5
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
4B		  * JAL <BB#1>
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
308B		%t4<def> = ADD %t5, %zero
308B		  * %vreg42<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg42
308B		  * %vreg43<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg43
308B		  * %vreg44<def> = SRLI %vreg43, 12; GR32Bit:%vreg44,%vreg43
308B		  * %vreg45<def> = ADD %vreg42, %vreg44; GR32Bit:%vreg45,%vreg42,%vreg44
308B		  * %vreg46<def> = ADDI %zero, 16; GR32Bit:%vreg46
308B		  * %vreg47<def> = SRLI %t5, 22; GR32Bit:%vreg47
308B		  * %vreg48<def> = SRLI %t5, 12; GR32Bit:%vreg48
308B		  * %vreg49<def> = ANDI %vreg48, 15; GR32Bit:%vreg49,%vreg48
308B		  * %vreg50<def> = SRLI %t5, 6; GR32Bit:%vreg50
308B		  * %vreg51<def> = ANDI %vreg50, 63; GR32Bit:%vreg51,%vreg50
308B		  * %vreg52<def> = ADDI %zero, 832; GR32Bit:%vreg52
308B		  * %vreg53<def> = MUL %vreg47, %vreg52; GR32Bit:%vreg53,%vreg47,%vreg52
308B		  * %vreg54<def> = ADDI %zero, 52; GR32Bit:%vreg54
308B		  * %vreg55<def> = MUL %vreg49, %vreg54; GR32Bit:%vreg55,%vreg49,%vreg54
308B		  * %vreg56<def> = ADD %vreg55, %vreg51; GR32Bit:%vreg56,%vreg55,%vreg51
308B		  * %vreg57<def> = ADD %vreg56, %vreg53; GR32Bit:%vreg57,%vreg56,%vreg53
308B		  * %vreg58<def> = MUL %vreg57, %vreg46; GR32Bit:%vreg58,%vreg57,%vreg46
308B		  * %t5<def> = ADD %vreg45, %vreg58; GR32Bit:%vreg45,%vreg58
308B		  * %vreg98<def> = LUI 1; GR32Bit:%vreg98
308B		  * %vreg103<def> = DREADPM %vreg98, 0; GR32Bit:%vreg103,%vreg98
308B		  * BEQ <BB#3>, %vreg103, %zero; GR32Bit:%vreg103
308B		  * %zero<def> = ADDI %zero, 0
308B		  * %zero<def> = ADDI %zero, 0
308B		  * JAL <BB#1>
308B		  * %zero<def> = ADDI %zero, 0
308B		  * %zero<def> = ADDI %zero, 0
524B		%t4<def> = ADD %t5, %zero
524B		  * %vreg61<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg61
524B		  * %vreg62<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg62
524B		  * %vreg63<def> = SRLI %vreg62, 12; GR32Bit:%vreg63,%vreg62
524B		  * %vreg64<def> = ADD %vreg61, %vreg63; GR32Bit:%vreg64,%vreg61,%vreg63
524B		  * %vreg65<def> = ADDI %zero, 16; GR32Bit:%vreg65
524B		  * %vreg66<def> = SRLI %t5, 22; GR32Bit:%vreg66
524B		  * %vreg67<def> = SRLI %t5, 12; GR32Bit:%vreg67
524B		  * %vreg68<def> = ANDI %vreg67, 15; GR32Bit:%vreg68,%vreg67
524B		  * %vreg69<def> = SRLI %t5, 6; GR32Bit:%vreg69
524B		  * %vreg70<def> = ANDI %vreg69, 63; GR32Bit:%vreg70,%vreg69
524B		  * %vreg71<def> = ADDI %zero, 832; GR32Bit:%vreg71
524B		  * %vreg72<def> = MUL %vreg66, %vreg71; GR32Bit:%vreg72,%vreg66,%vreg71
524B		  * %vreg73<def> = ADDI %zero, 52; GR32Bit:%vreg73
524B		  * %vreg74<def> = MUL %vreg68, %vreg73; GR32Bit:%vreg74,%vreg68,%vreg73
524B		  * %vreg75<def> = ADD %vreg74, %vreg70; GR32Bit:%vreg75,%vreg74,%vreg70
524B		  * %vreg76<def> = ADD %vreg75, %vreg72; GR32Bit:%vreg76,%vreg75,%vreg72
524B		  * %vreg77<def> = MUL %vreg76, %vreg65; GR32Bit:%vreg77,%vreg76,%vreg65
524B		  * %t5<def> = ADD %vreg64, %vreg77; GR32Bit:%vreg64,%vreg77
524B		  * %vreg100<def> = LUI 2; GR32Bit:%vreg100
524B		  * %vreg104<def> = DREADPM %vreg100, 0; GR32Bit:%vreg104,%vreg100
524B		  * BEQ <BB#3>, %vreg104, %zero; GR32Bit:%vreg104
524B		  * %zero<def> = ADDI %zero, 0
524B		  * %zero<def> = ADDI %zero, 0
524B		  * JAL <BB#1>
524B		  * %zero<def> = ADDI %zero, 0
524B		  * %zero<def> = ADDI %zero, 0
740B		%t4<def> = ADD %t5, %zero
740B		  * %vreg80<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg80
740B		  * %vreg81<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg81
740B		  * %vreg82<def> = SRLI %vreg81, 12; GR32Bit:%vreg82,%vreg81
740B		  * %vreg83<def> = ADD %vreg80, %vreg82; GR32Bit:%vreg83,%vreg80,%vreg82
740B		  * %vreg84<def> = ADDI %zero, 16; GR32Bit:%vreg84
740B		  * %vreg85<def> = SRLI %t5, 22; GR32Bit:%vreg85
740B		  * %vreg86<def> = SRLI %t5, 12; GR32Bit:%vreg86
740B		  * %vreg87<def> = ANDI %vreg86, 15; GR32Bit:%vreg87,%vreg86
740B		  * %vreg88<def> = SRLI %t5, 6; GR32Bit:%vreg88
740B		  * %vreg89<def> = ANDI %vreg88, 63; GR32Bit:%vreg89,%vreg88
740B		  * %vreg90<def> = ADDI %zero, 832; GR32Bit:%vreg90
740B		  * %vreg91<def> = MUL %vreg85, %vreg90; GR32Bit:%vreg91,%vreg85,%vreg90
740B		  * %vreg92<def> = ADDI %zero, 52; GR32Bit:%vreg92
740B		  * %vreg93<def> = MUL %vreg87, %vreg92; GR32Bit:%vreg93,%vreg87,%vreg92
740B		  * %vreg94<def> = ADD %vreg93, %vreg89; GR32Bit:%vreg94,%vreg93,%vreg89
740B		  * %vreg95<def> = ADD %vreg94, %vreg91; GR32Bit:%vreg95,%vreg94,%vreg91
740B		  * %vreg96<def> = MUL %vreg95, %vreg84; GR32Bit:%vreg96,%vreg95,%vreg84
740B		  * %t5<def> = ADD %vreg83, %vreg96; GR32Bit:%vreg83,%vreg96
740B		  * %vreg102<def> = LUI 3; GR32Bit:%vreg102
740B		  * %vreg105<def> = DREADPM %vreg102, 0; GR32Bit:%vreg105,%vreg102
740B		  * BEQ <BB#3>, %vreg105, %zero; GR32Bit:%vreg105
740B		  * %zero<def> = ADDI %zero, 0
740B		  * %zero<def> = ADDI %zero, 0
740B		  * JAL <BB#1>
740B		  * %zero<def> = ADDI %zero, 0
740B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#3(12) BB#1(20)

1252B	BB#1: derived from LLVM BB %startup_glowplugs3.if.else
	    Predecessors according to CFG: BB#0
1260B		%vreg8<def> = LUI 288422; GR32Bit:%vreg8
1260B		  * %a5<def> = LUI 0
1260B		  * %a5<def> = SRLI %a5<internal>, 12
1260B		  * ADD %vreg8, %vreg8, %a5; GR32Bit:%vreg8
1260B		  * %vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
1260B		  * %vreg7<def> = FLW %vreg6, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg6
1260B		  * %vreg10<def> = COPY %vreg8; FP32Bit:%vreg10 GR32Bit:%vreg8
1260B		  * %vreg9<def> = FLT_S %vreg10, %vreg7; GR32Bit:%vreg9 FP32Bit:%vreg10,%vreg7
1260B		  * %vreg106<def> = LUI 1; GR32Bit:%vreg106
1260B		  * WRITEPM %vreg106, %vreg9, 0; GR32Bit:%vreg106,%vreg9
1260B		  * %vreg108<def> = LUI 2; GR32Bit:%vreg108
1260B		  * WRITEPM %vreg108, %vreg9, 0; GR32Bit:%vreg108,%vreg9
1260B		  * %vreg110<def> = LUI 3; GR32Bit:%vreg110
1260B		  * WRITEPM %vreg110, %vreg9, 0; GR32Bit:%vreg110,%vreg9
1260B		  * BNE <BB#4>, %vreg9, %zero; GR32Bit:%vreg9
1260B		  * %zero<def> = ADDI %zero, 0
1260B		  * %zero<def> = ADDI %zero, 0
1260B		  * JAL <BB#2>
1260B		  * %zero<def> = ADDI %zero, 0
1260B		  * %zero<def> = ADDI %zero, 0
1436B		%vreg107<def> = LUI 1; GR32Bit:%vreg107
1436B		  * %vreg112<def> = DREADPM %vreg107, 0; GR32Bit:%vreg112,%vreg107
1436B		  * BNE <BB#4>, %vreg112, %zero; GR32Bit:%vreg112
1436B		  * %zero<def> = ADDI %zero, 0
1436B		  * %zero<def> = ADDI %zero, 0
1436B		  * JAL <BB#2>
1436B		  * %zero<def> = ADDI %zero, 0
1436B		  * %zero<def> = ADDI %zero, 0
1516B		%vreg109<def> = LUI 2; GR32Bit:%vreg109
1516B		  * %vreg113<def> = DREADPM %vreg109, 0; GR32Bit:%vreg113,%vreg109
1516B		  * BNE <BB#4>, %vreg113, %zero; GR32Bit:%vreg113
1516B		  * %zero<def> = ADDI %zero, 0
1516B		  * %zero<def> = ADDI %zero, 0
1516B		  * JAL <BB#2>
1516B		  * %zero<def> = ADDI %zero, 0
1516B		  * %zero<def> = ADDI %zero, 0
1596B		%vreg111<def> = LUI 3; GR32Bit:%vreg111
1596B		  * %vreg114<def> = DREADPM %vreg111, 0; GR32Bit:%vreg114,%vreg111
1596B		  * BNE <BB#4>, %vreg114, %zero; GR32Bit:%vreg114
1596B		  * %zero<def> = ADDI %zero, 0
1596B		  * %zero<def> = ADDI %zero, 0
1596B		  * JAL <BB#2>
1596B		  * %zero<def> = ADDI %zero, 0
1596B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#4(16) BB#2(16)

1812B	BB#2: derived from LLVM BB %startup_glowplugs3.if.else6
	    Predecessors according to CFG: BB#1
1820B		%vreg11<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg11
1820B		  * %vreg12<def> = LW %vreg11, 0; mem:LD4[%2] GR32Bit:%vreg12,%vreg11
1820B		  * SW %zero, %vreg12, 8; mem:ST4[%15] GR32Bit:%vreg12
1820B		  * %vreg13<def> = LW %vreg11, 0; mem:LD4[%2] GR32Bit:%vreg13,%vreg11
1820B		  * SW %zero, %vreg13, 12; mem:ST4[%17] GR32Bit:%vreg13
1820B		  * JAL <BB#4>
1820B		  * %zero<def> = ADDI %zero, 0
1820B		  * %zero<def> = ADDI %zero, 0
1884B		JAL <BB#4>
1884B		  * %zero<def> = ADDI %zero, 0
1884B		  * %zero<def> = ADDI %zero, 0
1908B		JAL <BB#4>
1908B		  * %zero<def> = ADDI %zero, 0
1908B		  * %zero<def> = ADDI %zero, 0
1932B		JAL <BB#4>
1932B		  * %zero<def> = ADDI %zero, 0
1932B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#4

2004B	BB#3: derived from LLVM BB %startup_glowplugs3.if.then
	    Predecessors according to CFG: BB#0
2012B		%vreg16<def> = ADDI %zero, 1; GR32Bit:%vreg16
2012B		  * %vreg14<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg14
2012B		  * %vreg15<def> = LW %vreg14, 0; mem:LD4[%2] GR32Bit:%vreg15,%vreg14
2012B		  * SW %vreg16, %vreg15, 8; mem:ST4[%19] GR32Bit:%vreg16,%vreg15
2012B		  * %vreg17<def> = LW %vreg14, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg14
2012B		  * SW %vreg16, %vreg17, 12; mem:ST4[%21] GR32Bit:%vreg16,%vreg17
2020B		%zero<def> = ADDI %zero, 0
2028B		%zero<def> = ADDI %zero, 0
2036B		%zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#4

2092B	BB#4: derived from LLVM BB %startup_glowplugs3.return
	    Predecessors according to CFG: BB#1 BB#2 BB#3
2100B		%vreg20<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg20
2100B		  * %vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
2100B		  * %vreg19<def> = LW %vreg18, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
2100B		  * SW %vreg19, %vreg20, 0; mem:ST4[%1] GR32Bit:%vreg19,%vreg20
2100B		  * %vreg115<def> = ADDI %zero, 128; GR32Bit:%vreg115
2100B		  * %vreg116<def> = ADDI %zero, 1; GR32Bit:%vreg116
2100B		  * WRITECM %vreg115, %vreg116, 60; GR32Bit:%vreg115,%vreg116
2100B		  * %vreg117<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg117
2100B		  * %vreg118<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg118
2100B		  * %vreg119<def> = SRLI %vreg118, 12; GR32Bit:%vreg119,%vreg118
2100B		  * %vreg120<def> = ADD %vreg117, %vreg119; GR32Bit:%vreg120,%vreg117,%vreg119
2100B		  * %vreg121<def> = ADDI %zero, 16; GR32Bit:%vreg121
2100B		  * %vreg122<def> = SRLI %vreg115, 22; GR32Bit:%vreg122,%vreg115
2100B		  * %vreg123<def> = SRLI %vreg115, 12; GR32Bit:%vreg123,%vreg115
2100B		  * %vreg124<def> = ANDI %vreg123, 15; GR32Bit:%vreg124,%vreg123
2100B		  * %vreg125<def> = SRLI %vreg115, 6; GR32Bit:%vreg125,%vreg115
2100B		  * %vreg126<def> = ANDI %vreg125, 63; GR32Bit:%vreg126,%vreg125
2100B		  * %vreg127<def> = ADDI %zero, 832; GR32Bit:%vreg127
2100B		  * %vreg128<def> = MUL %vreg122, %vreg127; GR32Bit:%vreg128,%vreg122,%vreg127
2100B		  * %vreg129<def> = ADDI %zero, 52; GR32Bit:%vreg129
2100B		  * %vreg130<def> = MUL %vreg124, %vreg129; GR32Bit:%vreg130,%vreg124,%vreg129
2100B		  * %vreg131<def> = ADD %vreg130, %vreg126; GR32Bit:%vreg131,%vreg130,%vreg126
2100B		  * %vreg132<def> = ADD %vreg131, %vreg128; GR32Bit:%vreg132,%vreg131,%vreg128
2100B		  * %vreg133<def> = MUL %vreg132, %vreg121; GR32Bit:%vreg133,%vreg132,%vreg121
2100B		  * %vreg134<def> = ADD %vreg133, %vreg120; GR32Bit:%vreg134,%vreg133,%vreg120
2100B		  * %vreg135<def> = LW %t5, 0; GR32Bit:%vreg135
2100B		  * SW %vreg135, %vreg134, 4; GR32Bit:%vreg135,%vreg134
2100B		  * %vreg136<def> = LUI 1; GR32Bit:%vreg136
2100B		  * WRITEPM %vreg136, %vreg115, 0; GR32Bit:%vreg136,%vreg115
2100B		  * FDELETE %t4, 0
2100B		  * END 0
2100B		  * %zero<def> = ADDI %zero, 0
2100B		  * %zero<def> = ADDI %zero, 0
2372B		%vreg137<def> = LUI 1; GR32Bit:%vreg137
2372B		  * %vreg138<def> = DREADPM %vreg137, 0; GR32Bit:%vreg138,%vreg137
2372B		  * %vreg139<def> = LUI 1048575; GR32Bit:%vreg139
2372B		  * %a5<def> = LUI 4095
2372B		  * %a5<def> = SRLI %a5<internal>, 12
2372B		  * ADD %vreg139, %vreg139, %a5; GR32Bit:%vreg139
2372B		  * SYNC %vreg138, %vreg139, 60; GR32Bit:%vreg138,%vreg139
2372B		  * END 0
2372B		  * %zero<def> = ADDI %zero, 0
2372B		  * %zero<def> = ADDI %zero, 0
2452B		END 0
2452B		  * %zero<def> = ADDI %zero, 0
2452B		  * %zero<def> = ADDI %zero, 0
2476B		END 0
2476B		  * %zero<def> = ADDI %zero, 0
2476B		  * %zero<def> = ADDI %zero, 0

# End machine code for function startup_glowplugs3.

********** COMPUTING LIVE DEBUG VARIABLES: startup_glowplugs3 **********
********** DEBUG VARIABLES **********
********** Compute Spill Weights **********
********** Function: startup_glowplugs3
********** GREEDY REGISTER ALLOCATION **********
********** Function: startup_glowplugs3

selectOrSplit GR32Bit:%vreg115 [2140r,2332r:0)  0@2140r
assigning %vreg115 to %t0: t0

selectOrSplit GR32Bit:%vreg138 [2380r,2508B:0)  0@2380r
assigning %vreg138 to %t0: t0

selectOrSplit GR32Bit:%vreg26 [28r,140r:0)  0@28r
assigning %vreg26 to %t0: t0

selectOrSplit GR32Bit:%vreg45 [340r,452r:0)  0@340r
assigning %vreg45 to %t0: t0

selectOrSplit GR32Bit:%vreg64 [556r,668r:0)  0@556r
assigning %vreg64 to %t0: t0

selectOrSplit GR32Bit:%vreg83 [772r,884r:0)  0@772r
assigning %vreg83 to %t0: t0

selectOrSplit GR32Bit:%vreg120 [2188r,2300r:0)  0@2188r
assigning %vreg120 to %t1: t1

selectOrSplit GR32Bit:%vreg27 [36r,132r:0)  0@36r
assigning %vreg27 to %t1: t1

selectOrSplit GR32Bit:%vreg46 [348r,444r:0)  0@348r
assigning %vreg46 to %t1: t1

selectOrSplit GR32Bit:%vreg65 [564r,660r:0)  0@564r
assigning %vreg65 to %t1: t1

selectOrSplit GR32Bit:%vreg84 [780r,876r:0)  0@780r
assigning %vreg84 to %t1: t1

selectOrSplit GR32Bit:%vreg121 [2196r,2292r:0)  0@2196r
assigning %vreg121 to %t2: t2

selectOrSplit GR32Bit:%vreg16 [2012r,2084r:0)  0@2012r
assigning %vreg16 to %t0: t0

selectOrSplit GR32Bit:%vreg5 [204r,260r:0)  0@204r
assigning %vreg5 to %t0: t0

selectOrSplit GR32Bit:%vreg9 [1332r,1388r:0)  0@1332r
assigning %vreg9 to %t0: t0

selectOrSplit GR32Bit:%vreg28 [44r,92r:0)  0@44r
assigning %vreg28 to %t2: t2

selectOrSplit GR32Bit:%vreg30 [60r,108r:0)  0@60r
assigning %vreg30 to %fp: fp

selectOrSplit GR32Bit:%vreg47 [356r,404r:0)  0@356r
assigning %vreg47 to %t2: t2

selectOrSplit GR32Bit:%vreg49 [372r,420r:0)  0@372r
assigning %vreg49 to %fp: fp

selectOrSplit GR32Bit:%vreg66 [572r,620r:0)  0@572r
assigning %vreg66 to %t2: t2

selectOrSplit GR32Bit:%vreg68 [588r,636r:0)  0@588r
assigning %vreg68 to %fp: fp

selectOrSplit GR32Bit:%vreg85 [788r,836r:0)  0@788r
assigning %vreg85 to %t2: t2

selectOrSplit GR32Bit:%vreg87 [804r,852r:0)  0@804r
assigning %vreg87 to %fp: fp

selectOrSplit GR32Bit:%vreg122 [2204r,2252r:0)  0@2204r
assigning %vreg122 to %fp: fp

selectOrSplit GR32Bit:%vreg124 [2220r,2268r:0)  0@2220r
assigning %vreg124 to %a0: a0

selectOrSplit GR32Bit:%vreg8 [1280r,1324r:0)  0@1280r
assigning %vreg8 to %t0: t0

selectOrSplit GR32Bit:%vreg0 [156r,196r:0)  0@156r
assigning %vreg0 to %t0: t0

selectOrSplit GR32Bit:%vreg3 [148r,188r:0)  0@148r
assigning %vreg3 to %t1: t1

selectOrSplit GR32Bit:%vreg32 [76r,116r:0)  0@76r
assigning %vreg32 to %a0: a0

selectOrSplit GR32Bit:%vreg51 [388r,428r:0)  0@388r
assigning %vreg51 to %a0: a0

selectOrSplit GR32Bit:%vreg70 [604r,644r:0)  0@604r
assigning %vreg70 to %a0: a0

selectOrSplit GR32Bit:%vreg89 [820r,860r:0)  0@820r
assigning %vreg89 to %a0: a0

selectOrSplit GR32Bit:%vreg126 [2236r,2276r:0)  0@2236r
assigning %vreg126 to %a1: a1

selectOrSplit GR32Bit:%vreg14 [2044r,2076r:0)  0@2044r
assigning %vreg14 to %t1: t1

selectOrSplit GR32Bit:%vreg20 [2100r,2132r:0)  0@2100r
assigning %vreg20 to %t0: t0

selectOrSplit GR32Bit:%vreg34 [92r,124r:0)  0@92r
assigning %vreg34 to %t2: t2

selectOrSplit GR32Bit:%vreg53 [404r,436r:0)  0@404r
assigning %vreg53 to %t2: t2

selectOrSplit GR32Bit:%vreg72 [620r,652r:0)  0@620r
assigning %vreg72 to %t2: t2

selectOrSplit GR32Bit:%vreg91 [836r,868r:0)  0@836r
assigning %vreg91 to %t2: t2

selectOrSplit GR32Bit:%vreg105 [1052r,1084r:0)  0@1052r
assigning %vreg105 to %t0: t0

selectOrSplit GR32Bit:%vreg114 [1612r,1644r:0)  0@1612r
assigning %vreg114 to %t0: t0

selectOrSplit GR32Bit:%vreg128 [2252r,2284r:0)  0@2252r
assigning %vreg128 to %fp: fp

selectOrSplit FP32Bit:%vreg7 [1308r,1332r:0)  0@1308r
AllocationOrder(FP32Bit) = [ %ft1 %ft2 %ft3 %ft4 %ft5 %ft6 %ft7 %fs0 %fs1 %fa0 %fa1 %fa2 %fa3 %fa4 %fa5 %fa6 %fa7 %fs2 %fs3 %fs4 %fs5 %fs6 %fs7 %fs8 %fs9 %fs10 %fs11 %ft8 %ft9 %ft10 %ft11 ]
assigning %vreg7 to %ft1: ft1

selectOrSplit GR32Bit:%vreg11 [1820r,1844r:0)  0@1820r
assigning %vreg11 to %t0: t0

selectOrSplit GR32Bit:%vreg42 [316r,340r:0)  0@316r
assigning %vreg42 to %t0: t0

selectOrSplit GR32Bit:%vreg61 [532r,556r:0)  0@532r
assigning %vreg61 to %t0: t0

selectOrSplit GR32Bit:%vreg80 [748r,772r:0)  0@748r
assigning %vreg80 to %t0: t0

selectOrSplit GR32Bit:%vreg117 [2164r,2188r:0)  0@2164r
assigning %vreg117 to %t1: t1

selectOrSplit GR32Bit:%vreg1 [164r,180r:0)  0@164r
assigning %vreg1 to %t2: t2

selectOrSplit GR32Bit:%vreg15 [2052r,2068r:0)  0@2052r
assigning %vreg15 to %t2: t2

selectOrSplit GR32Bit:%vreg19 [2116r,2132r:0)  0@2116r
assigning %vreg19 to %t1: t1

selectOrSplit GR32Bit:%vreg23 [12r,28r:0)  0@12r
assigning %vreg23 to %t0: t0

selectOrSplit GR32Bit:%vreg102 [1036r,1052r:0)  0@1036r
assigning %vreg102 to %t0: t0

selectOrSplit GR32Bit:%vreg107 [1436r,1452r:0)  0@1436r
assigning %vreg107 to %t0: t0

selectOrSplit GR32Bit:%vreg109 [1516r,1532r:0)  0@1516r
assigning %vreg109 to %t0: t0

selectOrSplit GR32Bit:%vreg111 [1596r,1612r:0)  0@1596r
assigning %vreg111 to %t0: t0

selectOrSplit GR32Bit:%vreg134 [2300r,2316r:0)  0@2300r
assigning %vreg134 to %t1: t1

selectOrSplit FP32Bit:%vreg2 [180r,188r:0)  0@180r
assigning %vreg2 to %ft1: ft1

selectOrSplit GR32Bit:%vreg4 [196r,204r:0)  0@196r
assigning %vreg4 to %t0: t0

selectOrSplit GR32Bit:%vreg6 [1300r,1308r:0)  0@1300r
assigning %vreg6 to %t1: t1

selectOrSplit FP32Bit:%vreg10 [1324r,1332r:0)  0@1324r
assigning %vreg10 to %ft2: ft2

selectOrSplit GR32Bit:%vreg12 [1828r,1836r:0)  0@1828r
assigning %vreg12 to %t1: t1

selectOrSplit GR32Bit:%vreg13 [1844r,1852r:0)  0@1844r
assigning %vreg13 to %t0: t0

selectOrSplit GR32Bit:%vreg17 [2076r,2084r:0)  0@2076r
assigning %vreg17 to %t1: t1

selectOrSplit GR32Bit:%vreg18 [2108r,2116r:0)  0@2108r
assigning %vreg18 to %t1: t1

selectOrSplit GR32Bit:%vreg25 [20r,28r:0)  0@20r
assigning %vreg25 to %t1: t1

selectOrSplit GR32Bit:%vreg29 [52r,60r:0)  0@52r
assigning %vreg29 to %fp: fp

selectOrSplit GR32Bit:%vreg31 [68r,76r:0)  0@68r
assigning %vreg31 to %a0: a0

selectOrSplit GR32Bit:%vreg33 [84r,92r:0)  0@84r
assigning %vreg33 to %a1: a1

selectOrSplit GR32Bit:%vreg35 [100r,108r:0)  0@100r
assigning %vreg35 to %a1: a1

selectOrSplit GR32Bit:%vreg36 [108r,116r:0)  0@108r
assigning %vreg36 to %fp: fp

selectOrSplit GR32Bit:%vreg37 [116r,124r:0)  0@116r
assigning %vreg37 to %fp: fp

selectOrSplit GR32Bit:%vreg38 [124r,132r:0)  0@124r
assigning %vreg38 to %t2: t2

selectOrSplit GR32Bit:%vreg39 [132r,140r:0)  0@132r
assigning %vreg39 to %t1: t1

selectOrSplit GR32Bit:%vreg43 [324r,332r:0)  0@324r
assigning %vreg43 to %t1: t1

selectOrSplit GR32Bit:%vreg44 [332r,340r:0)  0@332r
assigning %vreg44 to %t1: t1

selectOrSplit GR32Bit:%vreg48 [364r,372r:0)  0@364r
assigning %vreg48 to %fp: fp

selectOrSplit GR32Bit:%vreg50 [380r,388r:0)  0@380r
assigning %vreg50 to %a0: a0

selectOrSplit GR32Bit:%vreg52 [396r,404r:0)  0@396r
assigning %vreg52 to %a1: a1

selectOrSplit GR32Bit:%vreg54 [412r,420r:0)  0@412r
assigning %vreg54 to %a1: a1

selectOrSplit GR32Bit:%vreg55 [420r,428r:0)  0@420r
assigning %vreg55 to %fp: fp

selectOrSplit GR32Bit:%vreg56 [428r,436r:0)  0@428r
assigning %vreg56 to %fp: fp

selectOrSplit GR32Bit:%vreg57 [436r,444r:0)  0@436r
assigning %vreg57 to %t2: t2

selectOrSplit GR32Bit:%vreg58 [444r,452r:0)  0@444r
assigning %vreg58 to %t1: t1

selectOrSplit GR32Bit:%vreg62 [540r,548r:0)  0@540r
assigning %vreg62 to %t1: t1

selectOrSplit GR32Bit:%vreg63 [548r,556r:0)  0@548r
assigning %vreg63 to %t1: t1

selectOrSplit GR32Bit:%vreg67 [580r,588r:0)  0@580r
assigning %vreg67 to %fp: fp

selectOrSplit GR32Bit:%vreg69 [596r,604r:0)  0@596r
assigning %vreg69 to %a0: a0

selectOrSplit GR32Bit:%vreg71 [612r,620r:0)  0@612r
assigning %vreg71 to %a1: a1

selectOrSplit GR32Bit:%vreg73 [628r,636r:0)  0@628r
assigning %vreg73 to %a1: a1

selectOrSplit GR32Bit:%vreg74 [636r,644r:0)  0@636r
assigning %vreg74 to %fp: fp

selectOrSplit GR32Bit:%vreg75 [644r,652r:0)  0@644r
assigning %vreg75 to %fp: fp

selectOrSplit GR32Bit:%vreg76 [652r,660r:0)  0@652r
assigning %vreg76 to %t2: t2

selectOrSplit GR32Bit:%vreg77 [660r,668r:0)  0@660r
assigning %vreg77 to %t1: t1

selectOrSplit GR32Bit:%vreg81 [756r,764r:0)  0@756r
assigning %vreg81 to %t1: t1

selectOrSplit GR32Bit:%vreg82 [764r,772r:0)  0@764r
assigning %vreg82 to %t1: t1

selectOrSplit GR32Bit:%vreg86 [796r,804r:0)  0@796r
assigning %vreg86 to %fp: fp

selectOrSplit GR32Bit:%vreg88 [812r,820r:0)  0@812r
assigning %vreg88 to %a0: a0

selectOrSplit GR32Bit:%vreg90 [828r,836r:0)  0@828r
assigning %vreg90 to %a1: a1

selectOrSplit GR32Bit:%vreg92 [844r,852r:0)  0@844r
assigning %vreg92 to %a1: a1

selectOrSplit GR32Bit:%vreg93 [852r,860r:0)  0@852r
assigning %vreg93 to %fp: fp

selectOrSplit GR32Bit:%vreg94 [860r,868r:0)  0@860r
assigning %vreg94 to %fp: fp

selectOrSplit GR32Bit:%vreg95 [868r,876r:0)  0@868r
assigning %vreg95 to %t2: t2

selectOrSplit GR32Bit:%vreg96 [876r,884r:0)  0@876r
assigning %vreg96 to %t1: t1

selectOrSplit GR32Bit:%vreg97 [212r,220r:0)  0@212r
assigning %vreg97 to %t1: t1

selectOrSplit GR32Bit:%vreg98 [460r,468r:0)  0@460r
assigning %vreg98 to %t0: t0

selectOrSplit GR32Bit:%vreg99 [228r,236r:0)  0@228r
assigning %vreg99 to %t1: t1

selectOrSplit GR32Bit:%vreg100 [676r,684r:0)  0@676r
assigning %vreg100 to %t0: t0

selectOrSplit GR32Bit:%vreg101 [244r,252r:0)  0@244r
assigning %vreg101 to %t1: t1

selectOrSplit GR32Bit:%vreg103 [468r,476r:0)  0@468r
assigning %vreg103 to %t0: t0

selectOrSplit GR32Bit:%vreg104 [684r,692r:0)  0@684r
assigning %vreg104 to %t0: t0

selectOrSplit GR32Bit:%vreg106 [1340r,1348r:0)  0@1340r
assigning %vreg106 to %t1: t1

selectOrSplit GR32Bit:%vreg108 [1356r,1364r:0)  0@1356r
assigning %vreg108 to %t1: t1

selectOrSplit GR32Bit:%vreg110 [1372r,1380r:0)  0@1372r
assigning %vreg110 to %t1: t1

selectOrSplit GR32Bit:%vreg112 [1452r,1460r:0)  0@1452r
assigning %vreg112 to %t0: t0

selectOrSplit GR32Bit:%vreg113 [1532r,1540r:0)  0@1532r
assigning %vreg113 to %t0: t0

selectOrSplit GR32Bit:%vreg116 [2148r,2156r:0)  0@2148r
assigning %vreg116 to %t1: t1

selectOrSplit GR32Bit:%vreg118 [2172r,2180r:0)  0@2172r
assigning %vreg118 to %t2: t2

selectOrSplit GR32Bit:%vreg119 [2180r,2188r:0)  0@2180r
assigning %vreg119 to %t2: t2

selectOrSplit GR32Bit:%vreg123 [2212r,2220r:0)  0@2212r
assigning %vreg123 to %a0: a0

selectOrSplit GR32Bit:%vreg125 [2228r,2236r:0)  0@2228r
assigning %vreg125 to %a1: a1

selectOrSplit GR32Bit:%vreg127 [2244r,2252r:0)  0@2244r
assigning %vreg127 to %a2: a2

selectOrSplit GR32Bit:%vreg129 [2260r,2268r:0)  0@2260r
assigning %vreg129 to %a2: a2

selectOrSplit GR32Bit:%vreg130 [2268r,2276r:0)  0@2268r
assigning %vreg130 to %a0: a0

selectOrSplit GR32Bit:%vreg131 [2276r,2284r:0)  0@2276r
assigning %vreg131 to %a0: a0

selectOrSplit GR32Bit:%vreg132 [2284r,2292r:0)  0@2284r
assigning %vreg132 to %fp: fp

selectOrSplit GR32Bit:%vreg133 [2292r,2300r:0)  0@2292r
assigning %vreg133 to %t2: t2

selectOrSplit GR32Bit:%vreg135 [2308r,2316r:0)  0@2308r
assigning %vreg135 to %t2: t2

selectOrSplit GR32Bit:%vreg136 [2324r,2332r:0)  0@2324r
assigning %vreg136 to %t1: t1

selectOrSplit GR32Bit:%vreg137 [2372r,2380r:0)  0@2372r
assigning %vreg137 to %t0: t0

selectOrSplit GR32Bit:%vreg139 [2388r,2396r:0)  0@2388r
assigning %vreg139 to %t1: t1

selectOrSplit GR32Bit:%vreg24 [16r,20r:0)  0@16r
assigning %vreg24 to %t1: t1
********** REWRITE VIRTUAL REGISTERS **********
********** Function: startup_glowplugs3
********** REGISTER MAP **********
[%vreg0 -> %t0] GR32Bit
[%vreg1 -> %t2] GR32Bit
[%vreg2 -> %ft1] FP32Bit
[%vreg3 -> %t1] GR32Bit
[%vreg4 -> %t0] GR32Bit
[%vreg5 -> %t0] GR32Bit
[%vreg6 -> %t1] GR32Bit
[%vreg7 -> %ft1] FP32Bit
[%vreg8 -> %t0] GR32Bit
[%vreg9 -> %t0] GR32Bit
[%vreg10 -> %ft2] FP32Bit
[%vreg11 -> %t0] GR32Bit
[%vreg12 -> %t1] GR32Bit
[%vreg13 -> %t0] GR32Bit
[%vreg14 -> %t1] GR32Bit
[%vreg15 -> %t2] GR32Bit
[%vreg16 -> %t0] GR32Bit
[%vreg17 -> %t1] GR32Bit
[%vreg18 -> %t1] GR32Bit
[%vreg19 -> %t1] GR32Bit
[%vreg20 -> %t0] GR32Bit
[%vreg23 -> %t0] GR32Bit
[%vreg24 -> %t1] GR32Bit
[%vreg25 -> %t1] GR32Bit
[%vreg26 -> %t0] GR32Bit
[%vreg27 -> %t1] GR32Bit
[%vreg28 -> %t2] GR32Bit
[%vreg29 -> %fp] GR32Bit
[%vreg30 -> %fp] GR32Bit
[%vreg31 -> %a0] GR32Bit
[%vreg32 -> %a0] GR32Bit
[%vreg33 -> %a1] GR32Bit
[%vreg34 -> %t2] GR32Bit
[%vreg35 -> %a1] GR32Bit
[%vreg36 -> %fp] GR32Bit
[%vreg37 -> %fp] GR32Bit
[%vreg38 -> %t2] GR32Bit
[%vreg39 -> %t1] GR32Bit
[%vreg42 -> %t0] GR32Bit
[%vreg43 -> %t1] GR32Bit
[%vreg44 -> %t1] GR32Bit
[%vreg45 -> %t0] GR32Bit
[%vreg46 -> %t1] GR32Bit
[%vreg47 -> %t2] GR32Bit
[%vreg48 -> %fp] GR32Bit
[%vreg49 -> %fp] GR32Bit
[%vreg50 -> %a0] GR32Bit
[%vreg51 -> %a0] GR32Bit
[%vreg52 -> %a1] GR32Bit
[%vreg53 -> %t2] GR32Bit
[%vreg54 -> %a1] GR32Bit
[%vreg55 -> %fp] GR32Bit
[%vreg56 -> %fp] GR32Bit
[%vreg57 -> %t2] GR32Bit
[%vreg58 -> %t1] GR32Bit
[%vreg61 -> %t0] GR32Bit
[%vreg62 -> %t1] GR32Bit
[%vreg63 -> %t1] GR32Bit
[%vreg64 -> %t0] GR32Bit
[%vreg65 -> %t1] GR32Bit
[%vreg66 -> %t2] GR32Bit
[%vreg67 -> %fp] GR32Bit
[%vreg68 -> %fp] GR32Bit
[%vreg69 -> %a0] GR32Bit
[%vreg70 -> %a0] GR32Bit
[%vreg71 -> %a1] GR32Bit
[%vreg72 -> %t2] GR32Bit
[%vreg73 -> %a1] GR32Bit
[%vreg74 -> %fp] GR32Bit
[%vreg75 -> %fp] GR32Bit
[%vreg76 -> %t2] GR32Bit
[%vreg77 -> %t1] GR32Bit
[%vreg80 -> %t0] GR32Bit
[%vreg81 -> %t1] GR32Bit
[%vreg82 -> %t1] GR32Bit
[%vreg83 -> %t0] GR32Bit
[%vreg84 -> %t1] GR32Bit
[%vreg85 -> %t2] GR32Bit
[%vreg86 -> %fp] GR32Bit
[%vreg87 -> %fp] GR32Bit
[%vreg88 -> %a0] GR32Bit
[%vreg89 -> %a0] GR32Bit
[%vreg90 -> %a1] GR32Bit
[%vreg91 -> %t2] GR32Bit
[%vreg92 -> %a1] GR32Bit
[%vreg93 -> %fp] GR32Bit
[%vreg94 -> %fp] GR32Bit
[%vreg95 -> %t2] GR32Bit
[%vreg96 -> %t1] GR32Bit
[%vreg97 -> %t1] GR32Bit
[%vreg98 -> %t0] GR32Bit
[%vreg99 -> %t1] GR32Bit
[%vreg100 -> %t0] GR32Bit
[%vreg101 -> %t1] GR32Bit
[%vreg102 -> %t0] GR32Bit
[%vreg103 -> %t0] GR32Bit
[%vreg104 -> %t0] GR32Bit
[%vreg105 -> %t0] GR32Bit
[%vreg106 -> %t1] GR32Bit
[%vreg107 -> %t0] GR32Bit
[%vreg108 -> %t1] GR32Bit
[%vreg109 -> %t0] GR32Bit
[%vreg110 -> %t1] GR32Bit
[%vreg111 -> %t0] GR32Bit
[%vreg112 -> %t0] GR32Bit
[%vreg113 -> %t0] GR32Bit
[%vreg114 -> %t0] GR32Bit
[%vreg115 -> %t0] GR32Bit
[%vreg116 -> %t1] GR32Bit
[%vreg117 -> %t1] GR32Bit
[%vreg118 -> %t2] GR32Bit
[%vreg119 -> %t2] GR32Bit
[%vreg120 -> %t1] GR32Bit
[%vreg121 -> %t2] GR32Bit
[%vreg122 -> %fp] GR32Bit
[%vreg123 -> %a0] GR32Bit
[%vreg124 -> %a0] GR32Bit
[%vreg125 -> %a1] GR32Bit
[%vreg126 -> %a1] GR32Bit
[%vreg127 -> %a2] GR32Bit
[%vreg128 -> %fp] GR32Bit
[%vreg129 -> %a2] GR32Bit
[%vreg130 -> %a0] GR32Bit
[%vreg131 -> %a0] GR32Bit
[%vreg132 -> %fp] GR32Bit
[%vreg133 -> %t2] GR32Bit
[%vreg134 -> %t1] GR32Bit
[%vreg135 -> %t2] GR32Bit
[%vreg136 -> %t1] GR32Bit
[%vreg137 -> %t0] GR32Bit
[%vreg138 -> %t0] GR32Bit
[%vreg139 -> %t1] GR32Bit

0B	BB#0: derived from LLVM BB %startup_glowplugs3.entry
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg23<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg23
4B		  * %vreg24<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg24
4B		  * %vreg25<def> = SRLI %vreg24<kill>, 12; GR32Bit:%vreg25,%vreg24
4B		  * %vreg26<def> = ADD %vreg23<kill>, %vreg25<kill>; GR32Bit:%vreg26,%vreg23,%vreg25
4B		  * %vreg27<def> = ADDI %zero, 16; GR32Bit:%vreg27
4B		  * %vreg28<def> = SRLI %t5, 22; GR32Bit:%vreg28
4B		  * %vreg29<def> = SRLI %t5, 12; GR32Bit:%vreg29
4B		  * %vreg30<def> = ANDI %vreg29<kill>, 15; GR32Bit:%vreg30,%vreg29
4B		  * %vreg31<def> = SRLI %t5, 6; GR32Bit:%vreg31
4B		  * %vreg32<def> = ANDI %vreg31<kill>, 63; GR32Bit:%vreg32,%vreg31
4B		  * %vreg33<def> = ADDI %zero, 832; GR32Bit:%vreg33
4B		  * %vreg34<def> = MUL %vreg28<kill>, %vreg33<kill>; GR32Bit:%vreg34,%vreg28,%vreg33
4B		  * %vreg35<def> = ADDI %zero, 52; GR32Bit:%vreg35
4B		  * %vreg36<def> = MUL %vreg30<kill>, %vreg35<kill>; GR32Bit:%vreg36,%vreg30,%vreg35
4B		  * %vreg37<def> = ADD %vreg36<kill>, %vreg32<kill>; GR32Bit:%vreg37,%vreg36,%vreg32
4B		  * %vreg38<def> = ADD %vreg37<kill>, %vreg34<kill>; GR32Bit:%vreg38,%vreg37,%vreg34
4B		  * %vreg39<def> = MUL %vreg38<kill>, %vreg27<kill>; GR32Bit:%vreg39,%vreg38,%vreg27
4B		  * %t5<def> = ADD %vreg26<kill>, %vreg39<kill>; GR32Bit:%vreg26,%vreg39
4B		  * %vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
4B		  * %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
4B		  * %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
4B		  * SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
4B		  * %vreg2<def> = FLW %vreg1<kill>, 0; mem:LD4[%6](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
4B		  * FSW %vreg2<kill>, %vreg3<kill>, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
4B		  * %vreg4<def> = LW %vreg0<kill>, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
4B		  * %vreg5<def> = LW %vreg4<kill>, 4; mem:LD4[%9] GR32Bit:%vreg5,%vreg4
4B		  * %vreg97<def> = LUI 1; GR32Bit:%vreg97
4B		  * WRITEPM %vreg97<kill>, %vreg5, 0; GR32Bit:%vreg97,%vreg5
4B		  * %vreg99<def> = LUI 2; GR32Bit:%vreg99
4B		  * WRITEPM %vreg99<kill>, %vreg5, 0; GR32Bit:%vreg99,%vreg5
4B		  * %vreg101<def> = LUI 3; GR32Bit:%vreg101
4B		  * WRITEPM %vreg101<kill>, %vreg5, 0; GR32Bit:%vreg101,%vreg5
4B		  * BEQ <BB#3>, %vreg5<kill>, %zero; GR32Bit:%vreg5
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
4B		  * JAL <BB#1>
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
308B		%t4<def> = ADD %t5, %zero
308B		  * %vreg42<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg42
308B		  * %vreg43<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg43
308B		  * %vreg44<def> = SRLI %vreg43<kill>, 12; GR32Bit:%vreg44,%vreg43
308B		  * %vreg45<def> = ADD %vreg42<kill>, %vreg44<kill>; GR32Bit:%vreg45,%vreg42,%vreg44
308B		  * %vreg46<def> = ADDI %zero, 16; GR32Bit:%vreg46
308B		  * %vreg47<def> = SRLI %t5, 22; GR32Bit:%vreg47
308B		  * %vreg48<def> = SRLI %t5, 12; GR32Bit:%vreg48
308B		  * %vreg49<def> = ANDI %vreg48<kill>, 15; GR32Bit:%vreg49,%vreg48
308B		  * %vreg50<def> = SRLI %t5, 6; GR32Bit:%vreg50
308B		  * %vreg51<def> = ANDI %vreg50<kill>, 63; GR32Bit:%vreg51,%vreg50
308B		  * %vreg52<def> = ADDI %zero, 832; GR32Bit:%vreg52
308B		  * %vreg53<def> = MUL %vreg47<kill>, %vreg52<kill>; GR32Bit:%vreg53,%vreg47,%vreg52
308B		  * %vreg54<def> = ADDI %zero, 52; GR32Bit:%vreg54
308B		  * %vreg55<def> = MUL %vreg49<kill>, %vreg54<kill>; GR32Bit:%vreg55,%vreg49,%vreg54
308B		  * %vreg56<def> = ADD %vreg55<kill>, %vreg51<kill>; GR32Bit:%vreg56,%vreg55,%vreg51
308B		  * %vreg57<def> = ADD %vreg56<kill>, %vreg53<kill>; GR32Bit:%vreg57,%vreg56,%vreg53
308B		  * %vreg58<def> = MUL %vreg57<kill>, %vreg46<kill>; GR32Bit:%vreg58,%vreg57,%vreg46
308B		  * %t5<def> = ADD %vreg45<kill>, %vreg58<kill>; GR32Bit:%vreg45,%vreg58
308B		  * %vreg98<def> = LUI 1; GR32Bit:%vreg98
308B		  * %vreg103<def> = DREADPM %vreg98<kill>, 0; GR32Bit:%vreg103,%vreg98
308B		  * BEQ <BB#3>, %vreg103<kill>, %zero; GR32Bit:%vreg103
308B		  * %zero<def> = ADDI %zero, 0
308B		  * %zero<def> = ADDI %zero, 0
308B		  * JAL <BB#1>
308B		  * %zero<def> = ADDI %zero, 0
308B		  * %zero<def> = ADDI %zero, 0
524B		%t4<def> = ADD %t5, %zero
524B		  * %vreg61<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg61
524B		  * %vreg62<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg62
524B		  * %vreg63<def> = SRLI %vreg62<kill>, 12; GR32Bit:%vreg63,%vreg62
524B		  * %vreg64<def> = ADD %vreg61<kill>, %vreg63<kill>; GR32Bit:%vreg64,%vreg61,%vreg63
524B		  * %vreg65<def> = ADDI %zero, 16; GR32Bit:%vreg65
524B		  * %vreg66<def> = SRLI %t5, 22; GR32Bit:%vreg66
524B		  * %vreg67<def> = SRLI %t5, 12; GR32Bit:%vreg67
524B		  * %vreg68<def> = ANDI %vreg67<kill>, 15; GR32Bit:%vreg68,%vreg67
524B		  * %vreg69<def> = SRLI %t5, 6; GR32Bit:%vreg69
524B		  * %vreg70<def> = ANDI %vreg69<kill>, 63; GR32Bit:%vreg70,%vreg69
524B		  * %vreg71<def> = ADDI %zero, 832; GR32Bit:%vreg71
524B		  * %vreg72<def> = MUL %vreg66<kill>, %vreg71<kill>; GR32Bit:%vreg72,%vreg66,%vreg71
524B		  * %vreg73<def> = ADDI %zero, 52; GR32Bit:%vreg73
524B		  * %vreg74<def> = MUL %vreg68<kill>, %vreg73<kill>; GR32Bit:%vreg74,%vreg68,%vreg73
524B		  * %vreg75<def> = ADD %vreg74<kill>, %vreg70<kill>; GR32Bit:%vreg75,%vreg74,%vreg70
524B		  * %vreg76<def> = ADD %vreg75<kill>, %vreg72<kill>; GR32Bit:%vreg76,%vreg75,%vreg72
524B		  * %vreg77<def> = MUL %vreg76<kill>, %vreg65<kill>; GR32Bit:%vreg77,%vreg76,%vreg65
524B		  * %t5<def> = ADD %vreg64<kill>, %vreg77<kill>; GR32Bit:%vreg64,%vreg77
524B		  * %vreg100<def> = LUI 2; GR32Bit:%vreg100
524B		  * %vreg104<def> = DREADPM %vreg100<kill>, 0; GR32Bit:%vreg104,%vreg100
524B		  * BEQ <BB#3>, %vreg104<kill>, %zero; GR32Bit:%vreg104
524B		  * %zero<def> = ADDI %zero, 0
524B		  * %zero<def> = ADDI %zero, 0
524B		  * JAL <BB#1>
524B		  * %zero<def> = ADDI %zero, 0
524B		  * %zero<def> = ADDI %zero, 0
740B		%t4<def> = ADD %t5, %zero
740B		  * %vreg80<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg80
740B		  * %vreg81<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg81
740B		  * %vreg82<def> = SRLI %vreg81<kill>, 12; GR32Bit:%vreg82,%vreg81
740B		  * %vreg83<def> = ADD %vreg80<kill>, %vreg82<kill>; GR32Bit:%vreg83,%vreg80,%vreg82
740B		  * %vreg84<def> = ADDI %zero, 16; GR32Bit:%vreg84
740B		  * %vreg85<def> = SRLI %t5, 22; GR32Bit:%vreg85
740B		  * %vreg86<def> = SRLI %t5, 12; GR32Bit:%vreg86
740B		  * %vreg87<def> = ANDI %vreg86<kill>, 15; GR32Bit:%vreg87,%vreg86
740B		  * %vreg88<def> = SRLI %t5, 6; GR32Bit:%vreg88
740B		  * %vreg89<def> = ANDI %vreg88<kill>, 63; GR32Bit:%vreg89,%vreg88
740B		  * %vreg90<def> = ADDI %zero, 832; GR32Bit:%vreg90
740B		  * %vreg91<def> = MUL %vreg85<kill>, %vreg90<kill>; GR32Bit:%vreg91,%vreg85,%vreg90
740B		  * %vreg92<def> = ADDI %zero, 52; GR32Bit:%vreg92
740B		  * %vreg93<def> = MUL %vreg87<kill>, %vreg92<kill>; GR32Bit:%vreg93,%vreg87,%vreg92
740B		  * %vreg94<def> = ADD %vreg93<kill>, %vreg89<kill>; GR32Bit:%vreg94,%vreg93,%vreg89
740B		  * %vreg95<def> = ADD %vreg94<kill>, %vreg91<kill>; GR32Bit:%vreg95,%vreg94,%vreg91
740B		  * %vreg96<def> = MUL %vreg95<kill>, %vreg84<kill>; GR32Bit:%vreg96,%vreg95,%vreg84
740B		  * %t5<def> = ADD %vreg83<kill>, %vreg96<kill>; GR32Bit:%vreg83,%vreg96
740B		  * %vreg102<def> = LUI 3; GR32Bit:%vreg102
740B		  * %vreg105<def> = DREADPM %vreg102<kill>, 0; GR32Bit:%vreg105,%vreg102
740B		  * BEQ <BB#3>, %vreg105<kill>, %zero; GR32Bit:%vreg105
740B		  * %zero<def> = ADDI %zero, 0
740B		  * %zero<def> = ADDI %zero, 0
740B		  * JAL <BB#1>
740B		  * %zero<def> = ADDI %zero, 0
740B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#3(12) BB#1(20)
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 16
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %t5, <fi#2>
> %t0<def> = ADDI %t5, <fi#1>
> %t2<def> = ADDI %t5, <fi#-1>
> SW %t2, %t0, 0; mem:ST4[%2]
> %ft1<def> = FLW %t2<kill>, 0; mem:LD4[%6](align=16)
> FSW %ft1<kill>, %t1<kill>, 0; mem:ST4[%3]
> %t0<def> = LW %t0<kill>, 0; mem:LD4[%2]
> %t0<def> = LW %t0<kill>, 4; mem:LD4[%9]
> %t1<def> = LUI 1
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 2
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 3
> WRITEPM %t1<kill>, %t0, 0
> BEQ <BB#3>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#1>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 16
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = LUI 1
> %t0<def> = DREADPM %t0<kill>, 0
> BEQ <BB#3>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#1>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 16
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = LUI 2
> %t0<def> = DREADPM %t0<kill>, 0
> BEQ <BB#3>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#1>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 16
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = LUI 3
> %t0<def> = DREADPM %t0<kill>, 0
> BEQ <BB#3>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#1>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
1252B	BB#1: derived from LLVM BB %startup_glowplugs3.if.else
	    Predecessors according to CFG: BB#0
1260B		%vreg8<def> = LUI 288422; GR32Bit:%vreg8
1260B		  * %a5<def> = LUI 0
1260B		  * %a5<def> = SRLI %a5<internal>, 12
1260B		  * ADD %vreg8, %vreg8, %a5; GR32Bit:%vreg8
1260B		  * %vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
1260B		  * %vreg7<def> = FLW %vreg6<kill>, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg6
1260B		  * %vreg10<def> = COPY %vreg8<kill>; FP32Bit:%vreg10 GR32Bit:%vreg8
1260B		  * %vreg9<def> = FLT_S %vreg10<kill>, %vreg7<kill>; GR32Bit:%vreg9 FP32Bit:%vreg10,%vreg7
1260B		  * %vreg106<def> = LUI 1; GR32Bit:%vreg106
1260B		  * WRITEPM %vreg106<kill>, %vreg9, 0; GR32Bit:%vreg106,%vreg9
1260B		  * %vreg108<def> = LUI 2; GR32Bit:%vreg108
1260B		  * WRITEPM %vreg108<kill>, %vreg9, 0; GR32Bit:%vreg108,%vreg9
1260B		  * %vreg110<def> = LUI 3; GR32Bit:%vreg110
1260B		  * WRITEPM %vreg110<kill>, %vreg9, 0; GR32Bit:%vreg110,%vreg9
1260B		  * BNE <BB#4>, %vreg9<kill>, %zero; GR32Bit:%vreg9
1260B		  * %zero<def> = ADDI %zero, 0
1260B		  * %zero<def> = ADDI %zero, 0
1260B		  * JAL <BB#2>
1260B		  * %zero<def> = ADDI %zero, 0
1260B		  * %zero<def> = ADDI %zero, 0
1436B		%vreg107<def> = LUI 1; GR32Bit:%vreg107
1436B		  * %vreg112<def> = DREADPM %vreg107<kill>, 0; GR32Bit:%vreg112,%vreg107
1436B		  * BNE <BB#4>, %vreg112<kill>, %zero; GR32Bit:%vreg112
1436B		  * %zero<def> = ADDI %zero, 0
1436B		  * %zero<def> = ADDI %zero, 0
1436B		  * JAL <BB#2>
1436B		  * %zero<def> = ADDI %zero, 0
1436B		  * %zero<def> = ADDI %zero, 0
1516B		%vreg109<def> = LUI 2; GR32Bit:%vreg109
1516B		  * %vreg113<def> = DREADPM %vreg109<kill>, 0; GR32Bit:%vreg113,%vreg109
1516B		  * BNE <BB#4>, %vreg113<kill>, %zero; GR32Bit:%vreg113
1516B		  * %zero<def> = ADDI %zero, 0
1516B		  * %zero<def> = ADDI %zero, 0
1516B		  * JAL <BB#2>
1516B		  * %zero<def> = ADDI %zero, 0
1516B		  * %zero<def> = ADDI %zero, 0
1596B		%vreg111<def> = LUI 3; GR32Bit:%vreg111
1596B		  * %vreg114<def> = DREADPM %vreg111<kill>, 0; GR32Bit:%vreg114,%vreg111
1596B		  * BNE <BB#4>, %vreg114<kill>, %zero; GR32Bit:%vreg114
1596B		  * %zero<def> = ADDI %zero, 0
1596B		  * %zero<def> = ADDI %zero, 0
1596B		  * JAL <BB#2>
1596B		  * %zero<def> = ADDI %zero, 0
1596B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#4(16) BB#2(16)
> %t0<def> = LUI 288422
> %a5<def> = LUI 0
> %a5<def> = SRLI %a5<internal>, 12
> ADD %t0, %t0, %a5
> %t1<def> = ADDI %t5, <fi#2>
> %ft1<def> = FLW %t1<kill>, 0; mem:LD4[%3]
> %ft2<def> = COPY %t0<kill>
> %t0<def> = FLT_S %ft2<kill>, %ft1<kill>
> %t1<def> = LUI 1
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 2
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 3
> WRITEPM %t1<kill>, %t0, 0
> BNE <BB#4>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#2>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 1
> %t0<def> = DREADPM %t0<kill>, 0
> BNE <BB#4>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#2>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 2
> %t0<def> = DREADPM %t0<kill>, 0
> BNE <BB#4>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#2>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 3
> %t0<def> = DREADPM %t0<kill>, 0
> BNE <BB#4>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#2>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
1812B	BB#2: derived from LLVM BB %startup_glowplugs3.if.else6
	    Predecessors according to CFG: BB#1
1820B		%vreg11<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg11
1820B		  * %vreg12<def> = LW %vreg11, 0; mem:LD4[%2] GR32Bit:%vreg12,%vreg11
1820B		  * SW %zero, %vreg12<kill>, 8; mem:ST4[%15] GR32Bit:%vreg12
1820B		  * %vreg13<def> = LW %vreg11<kill>, 0; mem:LD4[%2] GR32Bit:%vreg13,%vreg11
1820B		  * SW %zero, %vreg13<kill>, 12; mem:ST4[%17] GR32Bit:%vreg13
1820B		  * JAL <BB#4>
1820B		  * %zero<def> = ADDI %zero, 0
1820B		  * %zero<def> = ADDI %zero, 0
1884B		JAL <BB#4>
1884B		  * %zero<def> = ADDI %zero, 0
1884B		  * %zero<def> = ADDI %zero, 0
1908B		JAL <BB#4>
1908B		  * %zero<def> = ADDI %zero, 0
1908B		  * %zero<def> = ADDI %zero, 0
1932B		JAL <BB#4>
1932B		  * %zero<def> = ADDI %zero, 0
1932B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#4
> %t0<def> = ADDI %t5, <fi#1>
> %t1<def> = LW %t0, 0; mem:LD4[%2]
> SW %zero, %t1<kill>, 8; mem:ST4[%15]
> %t0<def> = LW %t0<kill>, 0; mem:LD4[%2]
> SW %zero, %t0<kill>, 12; mem:ST4[%17]
> JAL <BB#4>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#4>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#4>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#4>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
2004B	BB#3: derived from LLVM BB %startup_glowplugs3.if.then
	    Predecessors according to CFG: BB#0
2012B		%vreg16<def> = ADDI %zero, 1; GR32Bit:%vreg16
2012B		  * %vreg14<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg14
2012B		  * %vreg15<def> = LW %vreg14, 0; mem:LD4[%2] GR32Bit:%vreg15,%vreg14
2012B		  * SW %vreg16, %vreg15<kill>, 8; mem:ST4[%19] GR32Bit:%vreg16,%vreg15
2012B		  * %vreg17<def> = LW %vreg14<kill>, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg14
2012B		  * SW %vreg16<kill>, %vreg17<kill>, 12; mem:ST4[%21] GR32Bit:%vreg16,%vreg17
2020B		%zero<def> = ADDI %zero, 0
2028B		%zero<def> = ADDI %zero, 0
2036B		%zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#4
> %t0<def> = ADDI %zero, 1
> %t1<def> = ADDI %t5, <fi#1>
> %t2<def> = LW %t1, 0; mem:LD4[%2]
> SW %t0, %t2<kill>, 8; mem:ST4[%19]
> %t1<def> = LW %t1<kill>, 0; mem:LD4[%2]
> SW %t0<kill>, %t1<kill>, 12; mem:ST4[%21]
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
2092B	BB#4: derived from LLVM BB %startup_glowplugs3.return
	    Predecessors according to CFG: BB#1 BB#2 BB#3
2100B		%vreg20<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg20
2100B		  * %vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
2100B		  * %vreg19<def> = LW %vreg18<kill>, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
2100B		  * SW %vreg19<kill>, %vreg20<kill>, 0; mem:ST4[%1] GR32Bit:%vreg19,%vreg20
2100B		  * %vreg115<def> = ADDI %zero, 128; GR32Bit:%vreg115
2100B		  * %vreg116<def> = ADDI %zero, 1; GR32Bit:%vreg116
2100B		  * WRITECM %vreg115, %vreg116<kill>, 60; GR32Bit:%vreg115,%vreg116
2100B		  * %vreg117<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg117
2100B		  * %vreg118<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg118
2100B		  * %vreg119<def> = SRLI %vreg118<kill>, 12; GR32Bit:%vreg119,%vreg118
2100B		  * %vreg120<def> = ADD %vreg117<kill>, %vreg119<kill>; GR32Bit:%vreg120,%vreg117,%vreg119
2100B		  * %vreg121<def> = ADDI %zero, 16; GR32Bit:%vreg121
2100B		  * %vreg122<def> = SRLI %vreg115, 22; GR32Bit:%vreg122,%vreg115
2100B		  * %vreg123<def> = SRLI %vreg115, 12; GR32Bit:%vreg123,%vreg115
2100B		  * %vreg124<def> = ANDI %vreg123<kill>, 15; GR32Bit:%vreg124,%vreg123
2100B		  * %vreg125<def> = SRLI %vreg115, 6; GR32Bit:%vreg125,%vreg115
2100B		  * %vreg126<def> = ANDI %vreg125<kill>, 63; GR32Bit:%vreg126,%vreg125
2100B		  * %vreg127<def> = ADDI %zero, 832; GR32Bit:%vreg127
2100B		  * %vreg128<def> = MUL %vreg122<kill>, %vreg127<kill>; GR32Bit:%vreg128,%vreg122,%vreg127
2100B		  * %vreg129<def> = ADDI %zero, 52; GR32Bit:%vreg129
2100B		  * %vreg130<def> = MUL %vreg124<kill>, %vreg129<kill>; GR32Bit:%vreg130,%vreg124,%vreg129
2100B		  * %vreg131<def> = ADD %vreg130<kill>, %vreg126<kill>; GR32Bit:%vreg131,%vreg130,%vreg126
2100B		  * %vreg132<def> = ADD %vreg131<kill>, %vreg128<kill>; GR32Bit:%vreg132,%vreg131,%vreg128
2100B		  * %vreg133<def> = MUL %vreg132<kill>, %vreg121<kill>; GR32Bit:%vreg133,%vreg132,%vreg121
2100B		  * %vreg134<def> = ADD %vreg133<kill>, %vreg120<kill>; GR32Bit:%vreg134,%vreg133,%vreg120
2100B		  * %vreg135<def> = LW %t5, 0; GR32Bit:%vreg135
2100B		  * SW %vreg135<kill>, %vreg134<kill>, 4; GR32Bit:%vreg135,%vreg134
2100B		  * %vreg136<def> = LUI 1; GR32Bit:%vreg136
2100B		  * WRITEPM %vreg136<kill>, %vreg115<kill>, 0; GR32Bit:%vreg136,%vreg115
2100B		  * FDELETE %t4, 0
2100B		  * END 0
2100B		  * %zero<def> = ADDI %zero, 0
2100B		  * %zero<def> = ADDI %zero, 0
2372B		%vreg137<def> = LUI 1; GR32Bit:%vreg137
2372B		  * %vreg138<def> = DREADPM %vreg137<kill>, 0; GR32Bit:%vreg138,%vreg137
2372B		  * %vreg139<def> = LUI 1048575; GR32Bit:%vreg139
2372B		  * %a5<def> = LUI 4095
2372B		  * %a5<def> = SRLI %a5<internal>, 12
2372B		  * ADD %vreg139, %vreg139, %a5; GR32Bit:%vreg139
2372B		  * SYNC %vreg138, %vreg139<kill>, 60; GR32Bit:%vreg138,%vreg139
2372B		  * END 0
2372B		  * %zero<def> = ADDI %zero, 0
2372B		  * %zero<def> = ADDI %zero, 0
2452B		END 0
2452B		  * %zero<def> = ADDI %zero, 0
2452B		  * %zero<def> = ADDI %zero, 0
2476B		END 0
2476B		  * %zero<def> = ADDI %zero, 0
2476B		  * %zero<def> = ADDI %zero, 0
> %t0<def> = ADDI %t5, <fi#0>
> %t1<def> = ADDI %t5, <fi#1>
> %t1<def> = LW %t1<kill>, 0; mem:LD4[%2]
> SW %t1<kill>, %t0<kill>, 0; mem:ST4[%1]
> %t0<def> = ADDI %zero, 128
> %t1<def> = ADDI %zero, 1
> WRITECM %t0, %t1<kill>, 60
> %t1<def> = LUI <MCSym="%hi("ga#512")">
> %t2<def> = LUI <MCSym="%lo("ga#512")">
> %t2<def> = SRLI %t2<kill>, 12
> %t1<def> = ADD %t1<kill>, %t2<kill>
> %t2<def> = ADDI %zero, 16
> %fp<def> = SRLI %t0, 22
> %a0<def> = SRLI %t0, 12
> %a0<def> = ANDI %a0<kill>, 15
> %a1<def> = SRLI %t0, 6
> %a1<def> = ANDI %a1<kill>, 63
> %a2<def> = ADDI %zero, 832
> %fp<def> = MUL %fp<kill>, %a2<kill>
> %a2<def> = ADDI %zero, 52
> %a0<def> = MUL %a0<kill>, %a2<kill>
> %a0<def> = ADD %a0<kill>, %a1<kill>
> %fp<def> = ADD %a0<kill>, %fp<kill>
> %t2<def> = MUL %fp<kill>, %t2<kill>
> %t1<def> = ADD %t2<kill>, %t1<kill>
> %t2<def> = LW %t5, 0
> SW %t2<kill>, %t1<kill>, 4
> %t1<def> = LUI 1
> WRITEPM %t1<kill>, %t0<kill>, 0
> FDELETE %t4, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 1
> %t0<def> = DREADPM %t0<kill>, 0
> %t1<def> = LUI 1048575
> %a5<def> = LUI 4095
> %a5<def> = SRLI %a5<internal>, 12
> ADD %t1, %t1, %a5
> SYNC %t0, %t1<kill>, 60
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
********** EMITTING LIVE DEBUG VARIABLES **********
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: startup_glowplugs3
real copy:   %ft2<def> = COPY %t0<kill>
  %ft2<def> = COPY %t0<kill>
replaced by: %t0<def> = LUI 288422
current state of mf:# Machine code for function startup_glowplugs3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %startup_glowplugs3.entry
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 16
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %t5, <fi#2>
	  * %t0<def> = ADDI %t5, <fi#1>
	  * %t2<def> = ADDI %t5, <fi#-1>
	  * SW %t2, %t0, 0; mem:ST4[%2]
	  * %ft1<def> = FLW %t2<kill>, 0; mem:LD4[%6](align=16)
	  * FSW %ft1<kill>, %t1<kill>, 0; mem:ST4[%3]
	  * %t0<def> = LW %t0<kill>, 0; mem:LD4[%2]
	  * %t0<def> = LW %t0<kill>, 4; mem:LD4[%9]
	  * %t1<def> = LUI 1
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 2
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 3
	  * WRITEPM %t1<kill>, %t0, 0
	  * BEQ <BB#3>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 16
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = LUI 1
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BEQ <BB#3>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 16
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = LUI 2
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BEQ <BB#3>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 16
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = LUI 3
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BEQ <BB#3>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#3(12) BB#1(20)

BB#1: derived from LLVM BB %startup_glowplugs3.if.else
    Predecessors according to CFG: BB#0
	%t0<def> = LUI 288422
	  * %a5<def> = LUI 0
	  * %a5<def> = SRLI %a5<internal>, 12
	  * ADD %t0, %t0, %a5
	  * %t1<def> = ADDI %t5, <fi#2>
	  * %ft1<def> = FLW %t1<kill>, 0; mem:LD4[%3]
	  * %ft2<def> = FMV_S_X %t0<kill>
	  * %t0<def> = FLT_S %ft2<kill>, %ft1<kill>
	  * %t1<def> = LUI 1
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 2
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 3
	  * WRITEPM %t1<kill>, %t0, 0
	  * BNE <BB#4>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 1
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BNE <BB#4>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 2
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BNE <BB#4>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 3
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BNE <BB#4>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#4(16) BB#2(16)

BB#2: derived from LLVM BB %startup_glowplugs3.if.else6
    Predecessors according to CFG: BB#1
	%t0<def> = ADDI %t5, <fi#1>
	  * %t1<def> = LW %t0, 0; mem:LD4[%2]
	  * SW %zero, %t1<kill>, 8; mem:ST4[%15]
	  * %t0<def> = LW %t0<kill>, 0; mem:LD4[%2]
	  * SW %zero, %t0<kill>, 12; mem:ST4[%17]
	  * JAL <BB#4>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#4>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#4>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#4>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#4

BB#3: derived from LLVM BB %startup_glowplugs3.if.then
    Predecessors according to CFG: BB#0
	%t0<def> = ADDI %zero, 1
	  * %t1<def> = ADDI %t5, <fi#1>
	  * %t2<def> = LW %t1, 0; mem:LD4[%2]
	  * SW %t0, %t2<kill>, 8; mem:ST4[%19]
	  * %t1<def> = LW %t1<kill>, 0; mem:LD4[%2]
	  * SW %t0<kill>, %t1<kill>, 12; mem:ST4[%21]
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#4

BB#4: derived from LLVM BB %startup_glowplugs3.return
    Predecessors according to CFG: BB#1 BB#2 BB#3
	%t0<def> = ADDI %t5, <fi#0>
	  * %t1<def> = ADDI %t5, <fi#1>
	  * %t1<def> = LW %t1<kill>, 0; mem:LD4[%2]
	  * SW %t1<kill>, %t0<kill>, 0; mem:ST4[%1]
	  * %t0<def> = ADDI %zero, 128
	  * %t1<def> = ADDI %zero, 1
	  * WRITECM %t0, %t1<kill>, 60
	  * %t1<def> = LUI <MCSym="%hi("ga#512")">
	  * %t2<def> = LUI <MCSym="%lo("ga#512")">
	  * %t2<def> = SRLI %t2<kill>, 12
	  * %t1<def> = ADD %t1<kill>, %t2<kill>
	  * %t2<def> = ADDI %zero, 16
	  * %fp<def> = SRLI %t0, 22
	  * %a0<def> = SRLI %t0, 12
	  * %a0<def> = ANDI %a0<kill>, 15
	  * %a1<def> = SRLI %t0, 6
	  * %a1<def> = ANDI %a1<kill>, 63
	  * %a2<def> = ADDI %zero, 832
	  * %fp<def> = MUL %fp<kill>, %a2<kill>
	  * %a2<def> = ADDI %zero, 52
	  * %a0<def> = MUL %a0<kill>, %a2<kill>
	  * %a0<def> = ADD %a0<kill>, %a1<kill>
	  * %fp<def> = ADD %a0<kill>, %fp<kill>
	  * %t2<def> = MUL %fp<kill>, %t2<kill>
	  * %t1<def> = ADD %t2<kill>, %t1<kill>
	  * %t2<def> = LW %t5, 0
	  * SW %t2<kill>, %t1<kill>, 4
	  * %t1<def> = LUI 1
	  * WRITEPM %t1<kill>, %t0<kill>, 0
	  * FDELETE %t4, 0
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 1
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * %t1<def> = LUI 1048575
	  * %a5<def> = LUI 4095
	  * %a5<def> = SRLI %a5<internal>, 12
	  * ADD %t1, %t1, %a5
	  * SYNC %t0, %t1<kill>, 60
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0

# End machine code for function startup_glowplugs3.

lowering frame index for func startup_glowplugs3:2 TO VAL:8
lowering frame index for func startup_glowplugs3:1 TO VAL:4
lowering frame index for func startup_glowplugs3:-1 TO VAL:12
lowering frame index for func startup_glowplugs3:2 TO VAL:8
lowering frame index for func startup_glowplugs3:1 TO VAL:4
lowering frame index for func startup_glowplugs3:1 TO VAL:4
lowering frame index for func startup_glowplugs3:0 TO VAL:0
lowering frame index for func startup_glowplugs3:1 TO VAL:4
