Args: /home/arka/Workspace/work/Git_Compiler_Repo/redefine-tests/ECU_KERNELS/../../..//MM_Compiler_latest/build/Release+Asserts/bin/llc --mattr=+has4ce --mtriple redefine -debug ./Working/data_acquisition_HyOpPass.ll -o ./Working/data_acquisition.as 

Features:+has4ce
CPU:REDEFINE

CGP: Found      local addrmode: [Base:%0]
CGP: Found      local addrmode: [Base:%0]
Computing probabilities for redefine_start1.return
Computing probabilities for redefine_start1.entry
new hop:redefine_start1
new hyop#0:redefine_start1
new hop:redefine_start2
new hyop#1:redefine_start2
new hop:po_calculation3
new hyop#2:po_calculation3
problems setting inputs?
skipping abort
source hop:redefine_start1
frame size for hop redefine_start1:4
source hop:redefine_start2
source hop:po_calculation3
frame size for hop po_calculation3:20
max mem frame size:20
digraph{
redefine_start1[label="Name:redefine_start1,Dom:NULL, PostDom:NULL,Map:0:0, Context frame:0,SyncCount:1"];
redefine_start1->po_calculation3[label=localref];
redefine_start2[label="Name:redefine_start2,Dom:NULL, PostDom:NULL,Map:0:0, Context frame:0,SyncCount:0"];
po_calculation3[label="Name:po_calculation3,Dom:NULL, PostDom:NULL,Map:0:0, Context frame:0,SyncCount:0"];
po_calculation3->redefine_start2[label=localref];
}
Setting domf of node redefine_start1 to size 0
Setting domf of node redefine_start2 to size 0
Setting domf of node po_calculation3 to size 0
idom of node:redefine_start1
idom of node:po_calculation3

------
forwarding address to redefine_start1:

------
forwarding address to redefine_start2:

------
forwarding address to po_calculation3:

Dominant sequence computed:
redefine_start1->po_calculation3->redefine_start2->

Dominant sequence computed:
redefine_start1->po_calculation3->redefine_start2->
before merging, num of clusters:1
each cluster:
redefine_start1,po_calculation3,redefine_start2,
Minimizing ordering edges
setting context frame id of redefine_start1 to 0
setting context frame id of po_calculation3 to 1
setting context frame id of redefine_start2 to 2
Computing whether there is a control/scalar path between a pair of HyperOps communicating via memory and adding sync edges if there is no control path
adding a sync edge between redefine_start1 and po_calculation3
adding a sync edge between po_calculation3 and redefine_start2
If the producer and consumer are mapped to different CRs, treat them as localrefs only instead of scalars to avoid reconciles
problems setting inputs?
generated cfg:Setting domf of node redefine_start1 to size 0
Setting domf of node redefine_start2 to size 0
Setting domf of node po_calculation3 to size 0
idom of node:redefine_start1
idom of node:po_calculation3
Delivering reaching predicate with decrement count in case operands to be delivered are on the non taken path
before decrementing sync, graph:Decrementing sync count for nodes with sync edges coming from mutually exclusive paths
updating node with incoming sync edges redefine_start1
updating node with incoming sync edges redefine_start2
updating node with incoming sync edges po_calculation3
after minimizing cluster and converting scalar edges to local refs, graph:digraph{
redefine_start1[label="Name:redefine_start1,Dom:NULL, PostDom:po_calculation3,Map:0:0, Context frame:0,SyncCount:1"];
redefine_start1->po_calculation3[label=localref];
redefine_start1->po_calculation3[label=sync];
redefine_start2[label="Name:redefine_start2,Dom:po_calculation3, PostDom:NULL,Map:0:0, Context frame:2,SyncCount:1"];
po_calculation3[label="Name:po_calculation3,Dom:redefine_start1, PostDom:redefine_start2,Map:0:0, Context frame:1,SyncCount:1"];
po_calculation3->redefine_start2[label=localref];
po_calculation3->redefine_start2[label=sync];
}
num of clusters:1
num constraints:0
setting target resource 0
setting target resource 0
setting target resource 0
digraph{
redefine_start1[label="Name:redefine_start1,Dom:NULL, PostDom:po_calculation3,Map:0:0, Context frame:0,SyncCount:1"];
redefine_start1->po_calculation3[label=localref];
redefine_start1->po_calculation3[label=sync];
redefine_start2[label="Name:redefine_start2,Dom:po_calculation3, PostDom:NULL,Map:0:0, Context frame:2,SyncCount:1"];
po_calculation3[label="Name:po_calculation3,Dom:redefine_start1, PostDom:redefine_start2,Map:0:0, Context frame:1,SyncCount:1"];
po_calculation3->redefine_start2[label=localref];
po_calculation3->redefine_start2[label=sync];
}



=== redefine_start1
store visit is after?  store float* getelementptr inbounds ([25 x float]* @redefine_in_array, i32 0, i32 0), float** %0
I was here to add float* getelementptr inbounds ([25 x float]* @redefine_in_array, i32 0, i32 0)
I was here to add @redefine_in_array = common global [25 x float] zeroinitializer, align 4
I was here to add   %0 = alloca float*, align 4, !ConsumedBy !6
whats in dag after store?SelectionDAG has 6 nodes:
  0x389c900: i32 = Constant<0>

    0x387f108: ch = EntryToken [ORD=2]

    0x389c700: i32 = GlobalAddress<[25 x float]* @redefine_in_array> 0 [ORD=1]

    0x389c800: i32 = FrameIndex<0> [ORD=2]

    0x389ca00: i32 = undef [ORD=2]

  0x389cb00: ch = store 0x387f108, 0x389c700, 0x389c800, 0x389ca00<ST4[%0]> [ORD=2]


visiting load instruction   %1 = load float** %0
with I type float*and sd value :0x389c800: i32 = FrameIndex<0>
new load?0x389cc00: i32,ch = load 0x389cb00, 0x389c800, 0x389ca00<LD4[%0]>
dag after load is dealt with?SelectionDAG has 7 nodes:
  0x389c800: i32 = FrameIndex<0> [ORD=2]

  0x389c900: i32 = Constant<0>

  0x389ca00: i32 = undef [ORD=2]

      0x387f108: ch = EntryToken [ORD=2]

      0x389c700: i32 = GlobalAddress<[25 x float]* @redefine_in_array> 0 [ORD=1]

      0x389c800: <multiple use>
      0x389ca00: <multiple use>
    0x389cb00: ch = store 0x387f108, 0x389c700, 0x389c800, 0x389ca00<ST4[%0]> [ORD=2]

    0x389c800: <multiple use>
    0x389ca00: <multiple use>
  0x389cc00: i32,ch = load 0x389cb00, 0x389c800, 0x389ca00<LD4[%0]>

    0x387f108: ch = EntryToken [ORD=2]

    0x389c700: i32 = GlobalAddress<[25 x float]* @redefine_in_array> 0 [ORD=1]

    0x389c800: <multiple use>
    0x389ca00: <multiple use>
  0x389cb00: ch = store 0x387f108, 0x389c700, 0x389c800, 0x389ca00<ST4[%0]> [ORD=2]


Initial selection DAG: BB#0 'redefine_start1:redefine_start1.entry'
SelectionDAG has 7 nodes:
  0x389c800: i32 = FrameIndex<0> [ORD=2]

  0x389c900: i32 = Constant<0>

  0x389ca00: i32 = undef [ORD=2]

      0x387f108: ch = EntryToken [ORD=2]

      0x389c700: i32 = GlobalAddress<[25 x float]* @redefine_in_array> 0 [ORD=1]

      0x389c800: <multiple use>
      0x389ca00: <multiple use>
    0x389cb00: ch = store 0x387f108, 0x389c700, 0x389c800, 0x389ca00<ST4[%0]> [ORD=2]

    0x389c800: <multiple use>
    0x389ca00: <multiple use>
  0x389cc00: i32,ch = load 0x389cb00, 0x389c800, 0x389ca00<LD4[%0]> [ORD=3]

    0x387f108: ch = EntryToken [ORD=2]

    0x389c700: i32 = GlobalAddress<[25 x float]* @redefine_in_array> 0 [ORD=1]

    0x389c800: <multiple use>
    0x389ca00: <multiple use>
  0x389cb00: ch = store 0x387f108, 0x389c700, 0x389c800, 0x389ca00<ST4[%0]> [ORD=2]


Optimized lowered selection DAG: BB#0 'redefine_start1:redefine_start1.entry'
SelectionDAG has 5 nodes:
    0x387f108: ch = EntryToken [ORD=2]

    0x389c700: i32 = GlobalAddress<[25 x float]* @redefine_in_array> 0 [ORD=1]

    0x389c800: i32 = FrameIndex<0> [ORD=2]

    0x389ca00: i32 = undef [ORD=2]

  0x389cb00: ch = store 0x387f108, 0x389c700, 0x389c800, 0x389ca00<ST4[%0]> [ORD=2]


Legally typed node: 0x389ca00: i32 = undef [ORD=2] [ID=0]

Legally typed node: 0x389c800: i32 = FrameIndex<0> [ORD=2] [ID=0]

Legally typed node: 0x389c700: i32 = GlobalAddress<[25 x float]* @redefine_in_array> 0 [ORD=1] [ID=0]

Legally typed node: 0x387f108: ch = EntryToken [ORD=2] [ID=0]

Legally typed node: 0x389cb00: ch = store 0x387f108, 0x389c700, 0x389c800, 0x389ca00<ST4[%0]> [ORD=2] [ID=0]

Legally typed node: 0x7fff6fb15090: ch = handlenode 0x389cb00 [ID=0]

Type-legalized selection DAG: BB#0 'redefine_start1:redefine_start1.entry'
SelectionDAG has 5 nodes:
    0x387f108: ch = EntryToken [ORD=2] [ID=-3]

    0x389c700: i32 = GlobalAddress<[25 x float]* @redefine_in_array> 0 [ORD=1] [ID=-3]

    0x389c800: i32 = FrameIndex<0> [ORD=2] [ID=-3]

    0x389ca00: i32 = undef [ORD=2] [ID=-3]

  0x389cb00: ch = store 0x387f108, 0x389c700, 0x389c800, 0x389ca00<ST4[%0]> [ORD=2] [ID=-3]


Legalized selection DAG: BB#0 'redefine_start1:redefine_start1.entry'
SelectionDAG has 9 nodes:
    0x387f108: ch = EntryToken [ORD=2] [ID=0]

        0x389c900: i32 = TargetGlobalAddress<[25 x float]* @redefine_in_array> 0 [TF=2]

      0x389cd00: i32 = REDEFINEISD::Hi 0x389c900

        0x389cc00: i32 = TargetGlobalAddress<[25 x float]* @redefine_in_array> 0 [TF=3]

      0x389ce00: i32 = REDEFINEISD::Lo 0x389cc00

    0x389cf00: i32 = add 0x389cd00, 0x389ce00

    0x389c800: i32 = FrameIndex<0> [ORD=2] [ID=2]

    0x389ca00: i32 = undef [ORD=2] [ID=3]

  0x389cb00: ch = store 0x387f108, 0x389cf00, 0x389c800, 0x389ca00<ST4[%0]> [ORD=2] [ID=4]


Optimized legalized selection DAG: BB#0 'redefine_start1:redefine_start1.entry'
SelectionDAG has 9 nodes:
    0x387f108: ch = EntryToken [ORD=2] [ID=0]

        0x389c900: i32 = TargetGlobalAddress<[25 x float]* @redefine_in_array> 0 [TF=2]

      0x389cd00: i32 = REDEFINEISD::Hi 0x389c900

        0x389cc00: i32 = TargetGlobalAddress<[25 x float]* @redefine_in_array> 0 [TF=3]

      0x389ce00: i32 = REDEFINEISD::Lo 0x389cc00

    0x389cf00: i32 = add 0x389cd00, 0x389ce00

    0x389c800: i32 = FrameIndex<0> [ORD=2] [ID=2]

    0x389ca00: i32 = undef [ORD=2] [ID=3]

  0x389cb00: ch = store 0x387f108, 0x389cf00, 0x389c800, 0x389ca00<ST4[%0]> [ORD=2] [ID=4]


===== Instruction selection begins: BB#0 'redefine_start1.entry'
ISEL: Starting pattern match on root node: 0x389cb00: ch = store 0x387f108, 0x389cf00, 0x389c800, 0x389ca00<ST4[%0]> [ORD=2] [ID=8]

  Morphed node: 0x389cb00: ch = SW 0x389cf00, 0x389c800, 0x389c700, 0x387f108<Mem:ST4[%0]> [ORD=2]

ISEL: Match complete!
=> 0x389cb00: ch = SW 0x389cf00, 0x389c800, 0x389c700, 0x387f108<Mem:ST4[%0]> [ORD=2]

ISEL: Starting pattern match on root node: 0x389cf00: i32 = add 0x389cd00, 0x389ce00 [ID=7]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x389cf00: i32 = ADD 0x389ce00, 0x389cd00

ISEL: Match complete!
=> 0x389cf00: i32 = ADD 0x389ce00, 0x389cd00

ISEL: Starting pattern match on root node: 0x389ce00: i32 = REDEFINEISD::Lo 0x389cc00 [ID=6]

  Initial Opcode index to 1204
  Morphed node: 0x389ce00: i32 = ADDI 0x389ca00, 0x389cc00

ISEL: Match complete!
=> 0x389ce00: i32 = ADDI 0x389ca00, 0x389cc00

ISEL: Starting pattern match on root node: 0x389cd00: i32 = REDEFINEISD::Hi 0x389c900 [ID=5]

  Initial Opcode index to 1186
  Morphed node: 0x389cd00: i32 = LUI 0x389c900

ISEL: Match complete!
=> 0x389cd00: i32 = LUI 0x389c900

=> 0x389cc00: i32 = TargetGlobalAddress<[25 x float]* @redefine_in_array> 0 [TF=3]

=> 0x389c900: i32 = TargetGlobalAddress<[25 x float]* @redefine_in_array> 0 [TF=2]

=> 0x387f108: ch = EntryToken [ORD=2]

===== Instruction selection ends:
Selected selection DAG: BB#0 'redefine_start1:redefine_start1.entry'
SelectionDAG has 12 nodes:
        0x389ca00: i32 = Register %zero

        0x389cc00: i32 = TargetGlobalAddress<[25 x float]* @redefine_in_array> 0 [TF=3]

      0x389ce00: i32 = ADDI 0x389ca00, 0x389cc00

        0x389c900: i32 = TargetGlobalAddress<[25 x float]* @redefine_in_array> 0 [TF=2]

      0x389cd00: i32 = LUI 0x389c900

    0x389cf00: i32 = ADD 0x389ce00, 0x389cd00

      0x389d000: i32 = Register %t5

      0x389d100: i32 = TargetFrameIndex<0>

    0x389c800: i32 = ADDI 0x389d000, 0x389d100 [ORD=2]

    0x389c700: i32 = TargetConstant<0>

    0x387f108: ch = EntryToken [ORD=2]

  0x389cb00: ch = SW 0x389cf00, 0x389c800, 0x389c700, 0x387f108<Mem:ST4[%0]> [ORD=2]


********** List Scheduling BB#0 'redefine_start1.entry' **********
SU(0): 0x389cb00: ch = SW 0x389cf00, 0x389c800, 0x389c700, 0x387f108<Mem:ST4[%0]> [ORD=2] [ID=0]

  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
   val SU(2): Latency=1
   val SU(1): Latency=1

SU(1): 0x389c800: i32 = ADDI 0x389d000, 0x389d100 [ORD=2] [ID=1]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
   val SU(0): Latency=1

SU(2): 0x389cf00: i32 = ADD 0x389ce00, 0x389cd00 [ID=2]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
   val SU(4): Latency=1
   val SU(3): Latency=1
  Successors:
   val SU(0): Latency=1

SU(3): 0x389cd00: i32 = LUI 0x389c900 [ID=3]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
   val SU(2): Latency=1

SU(4): 0x389ce00: i32 = ADDI 0x389ca00, 0x389cc00 [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
   val SU(2): Latency=1


Examining Available:
Height 0: SU(0): 0x389cb00: ch = SW 0x389cf00, 0x389c800, 0x389c700, 0x387f108<Mem:ST4[%0]> [ORD=2] [ID=0]


*** Scheduling [0]: SU(0): 0x389cb00: ch = SW 0x389cf00, 0x389c800, 0x389c700, 0x387f108<Mem:ST4[%0]> [ORD=2] [ID=0]


Examining Available:
Height 1: SU(2): 0x389cf00: i32 = ADD 0x389ce00, 0x389cd00 [ID=2]

Height 1: SU(1): 0x389c800: i32 = ADDI 0x389d000, 0x389d100 [ORD=2] [ID=1]


*** Scheduling [1]: SU(2): 0x389cf00: i32 = ADD 0x389ce00, 0x389cd00 [ID=2]


Examining Available:
Height 2: SU(4): 0x389ce00: i32 = ADDI 0x389ca00, 0x389cc00 [ID=4]

Height 2: SU(3): 0x389cd00: i32 = LUI 0x389c900 [ID=3]

Height 1: SU(1): 0x389c800: i32 = ADDI 0x389d000, 0x389d100 [ORD=2] [ID=1]


*** Scheduling [2]: SU(4): 0x389ce00: i32 = ADDI 0x389ca00, 0x389cc00 [ID=4]


Examining Available:
Height 2: SU(3): 0x389cd00: i32 = LUI 0x389c900 [ID=3]

Height 1: SU(1): 0x389c800: i32 = ADDI 0x389d000, 0x389d100 [ORD=2] [ID=1]


*** Scheduling [3]: SU(3): 0x389cd00: i32 = LUI 0x389c900 [ID=3]


Examining Available:
Height 1: SU(1): 0x389c800: i32 = ADDI 0x389d000, 0x389d100 [ORD=2] [ID=1]


*** Scheduling [4]: SU(1): 0x389c800: i32 = ADDI 0x389d000, 0x389d100 [ORD=2] [ID=1]

*** Final schedule ***
SU(1): 0x389c800: i32 = ADDI 0x389d000, 0x389d100 [ORD=2] [ID=1]

SU(3): 0x389cd00: i32 = LUI 0x389c900 [ID=3]

SU(4): 0x389ce00: i32 = ADDI 0x389ca00, 0x389cc00 [ID=4]

SU(2): 0x389cf00: i32 = ADD 0x389ce00, 0x389cd00 [ID=2]

SU(0): 0x389cb00: ch = SW 0x389cf00, 0x389c800, 0x389c700, 0x387f108<Mem:ST4[%0]> [ORD=2] [ID=0]


Total amount of phi nodes to update: 0
Initial selection DAG: BB#1 'redefine_start1:redefine_start1.return'
SelectionDAG has 1 nodes:
  0x387f108: ch = EntryToken


Optimized lowered selection DAG: BB#1 'redefine_start1:redefine_start1.return'
SelectionDAG has 1 nodes:
  0x387f108: ch = EntryToken


Legally typed node: 0x387f108: ch = EntryToken [ID=0]

Legally typed node: 0x7fff6fb15090: ch = handlenode 0x387f108 [ID=0]

Type-legalized selection DAG: BB#1 'redefine_start1:redefine_start1.return'
SelectionDAG has 1 nodes:
  0x387f108: ch = EntryToken [ID=-3]


Legalized selection DAG: BB#1 'redefine_start1:redefine_start1.return'
SelectionDAG has 1 nodes:
  0x387f108: ch = EntryToken [ID=0]


Optimized legalized selection DAG: BB#1 'redefine_start1:redefine_start1.return'
SelectionDAG has 1 nodes:
  0x387f108: ch = EntryToken [ID=0]


===== Instruction selection begins: BB#1 'redefine_start1.return'
=> 0x387f108: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: BB#1 'redefine_start1:redefine_start1.return'
SelectionDAG has 1 nodes:
  0x387f108: ch = EntryToken


********** List Scheduling BB#1 'redefine_start1.return' **********
*** Final schedule ***

Total amount of phi nodes to update: 0

*** Tail-duplicating BB#1

Merging into block: BB#0: derived from LLVM BB %redefine_start1.entry
	%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
	%vreg1<def> = LUI <ga:@redefine_in_array>[TF=2]; GR32Bit:%vreg1
	%vreg2<def> = ADDI %zero, <ga:@redefine_in_array>[TF=3]; GR32Bit:%vreg2
	%vreg3<def> = ADD %vreg2<kill>, %vreg1<kill>; GR32Bit:%vreg3,%vreg2,%vreg1
	SW %vreg3<kill>, %vreg0<kill>, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0
    Successors according to CFG: BB#1
From MBB: BB#1: derived from LLVM BB %redefine_start1.return
    Predecessors according to CFG: BB#0

Removing MBB: BB#1: derived from LLVM BB %redefine_start1.return
# Machine code for function redefine_start1: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start1.entry
16B		%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
32B		%vreg1<def> = LUI <ga:@redefine_in_array>[TF=2]; GR32Bit:%vreg1
48B		%vreg2<def> = ADDI %zero, <ga:@redefine_in_array>[TF=3]; GR32Bit:%vreg2
64B		%vreg3<def> = ADD %vreg2<kill>, %vreg1<kill>; GR32Bit:%vreg3,%vreg2,%vreg1
80B		SW %vreg3<kill>, %vreg0<kill>, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0

# End machine code for function redefine_start1.

********** Stack Coloring **********
********** Function: redefine_start1
Found 0 markers and 1 slots
Slot structure:
Slot #0 - 4 bytes.
Total Stack size: 4 bytes

Will not try to merge slots.
Removed 0 markers.
******** Pre-regalloc Machine LICM: redefine_start1 ********
******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: redefine_start1
********** PROCESS IMPLICIT DEFS **********
********** Function: redefine_start1
********** REWRITING TWO-ADDR INSTRS **********
********** Function: redefine_start1
# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start1.entry
16B		%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
32B		%vreg1<def> = LUI <ga:@redefine_in_array>[TF=2]; GR32Bit:%vreg1
48B		%vreg2<def> = ADDI %zero, <ga:@redefine_in_array>[TF=3]; GR32Bit:%vreg2
64B		%vreg3<def> = ADD %vreg2<kill>, %vreg1<kill>; GR32Bit:%vreg3,%vreg2,%vreg1
80B		SW %vreg3<kill>, %vreg0<kill>, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0

# End machine code for function redefine_start1.

Computing live-in reg-units in ABI blocks.
Created 0 new intervals.
********** INTERVALS **********
%vreg0 = [16r,80r:0)  0@16r
%vreg1 = [32r,64r:0)  0@32r
%vreg2 = [48r,64r:0)  0@48r
%vreg3 = [64r,80r:0)  0@64r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start1.entry
16B		%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
32B		%vreg1<def> = LUI <ga:@redefine_in_array>[TF=2]; GR32Bit:%vreg1
48B		%vreg2<def> = ADDI %zero, <ga:@redefine_in_array>[TF=3]; GR32Bit:%vreg2
64B		%vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
80B		SW %vreg3, %vreg0, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0

# End machine code for function redefine_start1.

********** SIMPLE REGISTER COALESCING **********
********** Function: redefine_start1
********** JOINING INTERVALS ***********
redefine_start1.entry:
Trying to inflate 0 regs.
********** INTERVALS **********
%vreg0 = [16r,80r:0)  0@16r
%vreg1 = [32r,64r:0)  0@32r
%vreg2 = [48r,64r:0)  0@48r
%vreg3 = [64r,80r:0)  0@64r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start1.entry
16B		%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
32B		%vreg1<def> = LUI <ga:@redefine_in_array>[TF=2]; GR32Bit:%vreg1
48B		%vreg2<def> = ADDI %zero, <ga:@redefine_in_array>[TF=3]; GR32Bit:%vreg2
64B		%vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
80B		SW %vreg3, %vreg0, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0

# End machine code for function redefine_start1.

Before MISched:
# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %redefine_start1.entry
	%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
	%vreg1<def> = LUI <ga:@redefine_in_array>[TF=2]; GR32Bit:%vreg1
	%vreg2<def> = ADDI %zero, <ga:@redefine_in_array>[TF=3]; GR32Bit:%vreg2
	%vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
	SW %vreg3, %vreg0, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0

# End machine code for function redefine_start1.


-------------
Starting new basic block BB#0
********** MI Scheduling **********
redefine_start1:BB#0 redefine_start1.entry
  From: %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
    To: End Remaining: 0
Max Pressure: GR32Bit=3
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 3
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 0
SU(0):   %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(4): Latency=5 Reg=%vreg0

SU(1):   %vreg1<def> = LUI <ga:@redefine_in_array>[TF=2]; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
   val SU(3): Latency=5 Reg=%vreg1

SU(2):   %vreg2<def> = ADDI %zero, <ga:@redefine_in_array>[TF=3]; GR32Bit:%vreg2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
   val SU(3): Latency=5 Reg=%vreg2

SU(3):   %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg2
   val SU(1): Latency=5 Reg=%vreg1
  Successors:
   val SU(4): Latency=4 Reg=%vreg3

SU(4):   SW %vreg3, %vreg0, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 9
  Height             : 0
  Predecessors:
   val SU(3): Latency=4 Reg=%vreg3
   val SU(0): Latency=5 Reg=%vreg0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(4): Latency=5 Reg=%vreg0

SU(1):   %vreg1<def> = LUI <ga:@redefine_in_array>[TF=2]; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
   val SU(3): Latency=5 Reg=%vreg1

SU(2):   %vreg2<def> = ADDI %zero, <ga:@redefine_in_array>[TF=3]; GR32Bit:%vreg2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
   val SU(3): Latency=5 Reg=%vreg2

SU(3):   %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg2
   val SU(1): Latency=5 Reg=%vreg1
  Successors:
   val SU(4): Latency=4 Reg=%vreg3

SU(4):   SW %vreg3, %vreg0, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 9
  Height             : 0
  Predecessors:
   val SU(3): Latency=4 Reg=%vreg3
   val SU(0): Latency=5 Reg=%vreg0
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(2)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg2<def> = ADDI %zero, <ga:@redefine_in_array>[TF=3]; GR32Bit:%vreg2
handleMove 48B -> 8B: %vreg2<def> = ADDI %zero, <ga:@redefine_in_array>[TF=3]; GR32Bit:%vreg2
     %vreg2:	[48r,64r:0)  0@48r
        -->	[8r,64r:0)  0@8r
     zero:	EMPTY
        -->	EMPTY
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
Pick node SU(1)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg1<def> = LUI <ga:@redefine_in_array>[TF=2]; GR32Bit:%vreg1
Pick node SU(3)  ILP: 3 / 6 = 0.5 Tree: 0 @0
Scheduling %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
Pick node SU(4)  ILP: 5 / 10 = 0.5 Tree: 0 @0
Scheduling SW %vreg3, %vreg0, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0
*** Final schedule for BB#0 ***
SU(2):   %vreg2<def> = ADDI %zero, <ga:@redefine_in_array>[TF=3]; GR32Bit:%vreg2
SU(0):   %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
SU(1):   %vreg1<def> = LUI <ga:@redefine_in_array>[TF=2]; GR32Bit:%vreg1
SU(3):   %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
SU(4):   SW %vreg3, %vreg0, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0


*** Renumbered SlotIndexes 4-28 ***

*** Renumbered SlotIndexes 16-56 ***

*** Renumbered SlotIndexes 28-76 ***

*** Renumbered SlotIndexes 40-104 ***

*** Renumbered SlotIndexes 52-116 ***

*** Renumbered SlotIndexes 64-128 ***

*** Renumbered SlotIndexes 76-140 ***

*** Renumbered SlotIndexes 88-152 ***

*** Renumbered SlotIndexes 100-164 ***

*** Renumbered SlotIndexes 112-176 ***

*** Renumbered SlotIndexes 124-188 ***

*** Renumbered SlotIndexes 136-200 ***

*** Renumbered SlotIndexes 148-212 ***

*** Renumbered SlotIndexes 160-224 ***

*** Renumbered SlotIndexes 172-236 ***

*** Renumbered SlotIndexes 184-248 ***

*** Renumbered SlotIndexes 196-260 ***

*** Renumbered SlotIndexes 208-272 ***

*** Renumbered SlotIndexes 220-284 ***

*** Renumbered SlotIndexes 232-296 ***

*** Renumbered SlotIndexes 244-308 ***

*** Renumbered SlotIndexes 256-320 ***

*** Renumbered SlotIndexes 268-332 ***

*** Renumbered SlotIndexes 280-344 ***

*** Renumbered SlotIndexes 292-356 ***

*** Renumbered SlotIndexes 304-368 ***

*** Renumbered SlotIndexes 316-380 ***

*** Renumbered SlotIndexes 328-392 ***

*** Renumbered SlotIndexes 340-404 ***

*** Renumbered SlotIndexes 352-416 ***

*** Renumbered SlotIndexes 364-428 ***

*** Renumbered SlotIndexes 376-440 ***

*** Renumbered SlotIndexes 388-452 ***

*** Renumbered SlotIndexes 400-464 ***
Partitioning instructions of the region into multiple CEs
instr:  %vreg2<def> = ADDI %zero, <ga:@redefine_in_array>[TF=3]; GR32Bit:%vreg2
instr:  %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
instr:  %vreg1<def> = LUI <ga:@redefine_in_array>[TF=2]; GR32Bit:%vreg1
instr:  %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
instr:  SW %vreg3, %vreg0, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
before falloc, state of bb0:BB#0: derived from LLVM BB %redefine_start1.entry
	%vreg4<def> = ADD %t5, %zero; GR32Bit:%vreg4
	%vreg6<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg6
	%vreg7<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg7
	%vreg8<def> = SRLI %vreg7, 12; GR32Bit:%vreg8,%vreg7
	%vreg9<def> = ADD %vreg6, %vreg8; GR32Bit:%vreg9,%vreg6,%vreg8
	%vreg10<def> = ADDI %zero, 20; GR32Bit:%vreg10
	%vreg11<def> = SRLI %t5, 22; GR32Bit:%vreg11
	%vreg12<def> = SRLI %t5, 12; GR32Bit:%vreg12
	%vreg13<def> = ANDI %vreg12, 15; GR32Bit:%vreg13,%vreg12
	%vreg14<def> = SRLI %t5, 6; GR32Bit:%vreg14
	%vreg15<def> = ANDI %vreg14, 63; GR32Bit:%vreg15,%vreg14
	%vreg16<def> = ADDI %zero, 832; GR32Bit:%vreg16
	%vreg17<def> = MUL %vreg11, %vreg16; GR32Bit:%vreg17,%vreg11,%vreg16
	%vreg18<def> = ADDI %zero, 52; GR32Bit:%vreg18
	%vreg19<def> = MUL %vreg13, %vreg18; GR32Bit:%vreg19,%vreg13,%vreg18
	%vreg20<def> = ADD %vreg19, %vreg15; GR32Bit:%vreg20,%vreg19,%vreg15
	%vreg21<def> = ADD %vreg20, %vreg17; GR32Bit:%vreg21,%vreg20,%vreg17
	%vreg22<def> = MUL %vreg21, %vreg10; GR32Bit:%vreg22,%vreg21,%vreg10
	%vreg5<def> = ADD %vreg9, %vreg22; GR32Bit:%vreg5,%vreg9,%vreg22
	%vreg2<def> = ADDI %zero, <ga:@redefine_in_array>[TF=3]; GR32Bit:%vreg2
	%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
	%vreg1<def> = LUI <ga:@redefine_in_array>[TF=2]; GR32Bit:%vreg1
	%vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
	SW %vreg3, %vreg0, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0
	%vreg23<def> = ADD %t5, %zero; GR32Bit:%vreg23
	%vreg25<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg25
	%vreg26<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg26
	%vreg27<def> = SRLI %vreg26, 12; GR32Bit:%vreg27,%vreg26
	%vreg28<def> = ADD %vreg25, %vreg27; GR32Bit:%vreg28,%vreg25,%vreg27
	%vreg29<def> = ADDI %zero, 20; GR32Bit:%vreg29
	%vreg30<def> = SRLI %t5, 22; GR32Bit:%vreg30
	%vreg31<def> = SRLI %t5, 12; GR32Bit:%vreg31
	%vreg32<def> = ANDI %vreg31, 15; GR32Bit:%vreg32,%vreg31
	%vreg33<def> = SRLI %t5, 6; GR32Bit:%vreg33
	%vreg34<def> = ANDI %vreg33, 63; GR32Bit:%vreg34,%vreg33
	%vreg35<def> = ADDI %zero, 832; GR32Bit:%vreg35
	%vreg36<def> = MUL %vreg30, %vreg35; GR32Bit:%vreg36,%vreg30,%vreg35
	%vreg37<def> = ADDI %zero, 52; GR32Bit:%vreg37
	%vreg38<def> = MUL %vreg32, %vreg37; GR32Bit:%vreg38,%vreg32,%vreg37
	%vreg39<def> = ADD %vreg38, %vreg34; GR32Bit:%vreg39,%vreg38,%vreg34
	%vreg40<def> = ADD %vreg39, %vreg36; GR32Bit:%vreg40,%vreg39,%vreg36
	%vreg41<def> = MUL %vreg40, %vreg29; GR32Bit:%vreg41,%vreg40,%vreg29
	%vreg24<def> = ADD %vreg28, %vreg41; GR32Bit:%vreg24,%vreg28,%vreg41
	%vreg42<def> = ADD %t5, %zero; GR32Bit:%vreg42
	%vreg44<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg44
	%vreg45<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg45
	%vreg46<def> = SRLI %vreg45, 12; GR32Bit:%vreg46,%vreg45
	%vreg47<def> = ADD %vreg44, %vreg46; GR32Bit:%vreg47,%vreg44,%vreg46
	%vreg48<def> = ADDI %zero, 20; GR32Bit:%vreg48
	%vreg49<def> = SRLI %t5, 22; GR32Bit:%vreg49
	%vreg50<def> = SRLI %t5, 12; GR32Bit:%vreg50
	%vreg51<def> = ANDI %vreg50, 15; GR32Bit:%vreg51,%vreg50
	%vreg52<def> = SRLI %t5, 6; GR32Bit:%vreg52
	%vreg53<def> = ANDI %vreg52, 63; GR32Bit:%vreg53,%vreg52
	%vreg54<def> = ADDI %zero, 832; GR32Bit:%vreg54
	%vreg55<def> = MUL %vreg49, %vreg54; GR32Bit:%vreg55,%vreg49,%vreg54
	%vreg56<def> = ADDI %zero, 52; GR32Bit:%vreg56
	%vreg57<def> = MUL %vreg51, %vreg56; GR32Bit:%vreg57,%vreg51,%vreg56
	%vreg58<def> = ADD %vreg57, %vreg53; GR32Bit:%vreg58,%vreg57,%vreg53
	%vreg59<def> = ADD %vreg58, %vreg55; GR32Bit:%vreg59,%vreg58,%vreg55
	%vreg60<def> = MUL %vreg59, %vreg48; GR32Bit:%vreg60,%vreg59,%vreg48
	%vreg43<def> = ADD %vreg47, %vreg60; GR32Bit:%vreg43,%vreg47,%vreg60
	%vreg61<def> = ADD %t5, %zero; GR32Bit:%vreg61
	%vreg63<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg63
	%vreg64<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg64
	%vreg65<def> = SRLI %vreg64, 12; GR32Bit:%vreg65,%vreg64
	%vreg66<def> = ADD %vreg63, %vreg65; GR32Bit:%vreg66,%vreg63,%vreg65
	%vreg67<def> = ADDI %zero, 20; GR32Bit:%vreg67
	%vreg68<def> = SRLI %t5, 22; GR32Bit:%vreg68
	%vreg69<def> = SRLI %t5, 12; GR32Bit:%vreg69
	%vreg70<def> = ANDI %vreg69, 15; GR32Bit:%vreg70,%vreg69
	%vreg71<def> = SRLI %t5, 6; GR32Bit:%vreg71
	%vreg72<def> = ANDI %vreg71, 63; GR32Bit:%vreg72,%vreg71
	%vreg73<def> = ADDI %zero, 832; GR32Bit:%vreg73
	%vreg74<def> = MUL %vreg68, %vreg73; GR32Bit:%vreg74,%vreg68,%vreg73
	%vreg75<def> = ADDI %zero, 52; GR32Bit:%vreg75
	%vreg76<def> = MUL %vreg70, %vreg75; GR32Bit:%vreg76,%vreg70,%vreg75
	%vreg77<def> = ADD %vreg76, %vreg72; GR32Bit:%vreg77,%vreg76,%vreg72
	%vreg78<def> = ADD %vreg77, %vreg74; GR32Bit:%vreg78,%vreg77,%vreg74
	%vreg79<def> = MUL %vreg78, %vreg67; GR32Bit:%vreg79,%vreg78,%vreg67
	%vreg62<def> = ADD %vreg66, %vreg79; GR32Bit:%vreg62,%vreg66,%vreg79
Adding all fallocs first to avoid stalls due to sequential fallocs and fbinds
Adding writecm(for writing sync count to context frames) and fbind instructions
live end of child is itself
live end of child is itself
Adding localref sw instructions to hyperOp redefine_start1

*** Renumbered SlotIndexes 412-476 ***

*** Renumbered SlotIndexes 424-488 ***

*** Renumbered SlotIndexes 436-500 ***

*** Renumbered SlotIndexes 448-512 ***

*** Renumbered SlotIndexes 460-524 ***

*** Renumbered SlotIndexes 472-536 ***

*** Renumbered SlotIndexes 484-548 ***

*** Renumbered SlotIndexes 496-560 ***

*** Renumbered SlotIndexes 508-572 ***
localref sw to po_calculation3:  SW %vreg100, %vreg99, 16; GR32Bit:%vreg100,%vreg99
Adding writecm instructions to hyperOp redefine_start1
Adding writecmp and sync instructions
problem with which child exactly?po_calculation3 with edge of type:6

*** Renumbered SlotIndexes 520-584 ***

*** Renumbered SlotIndexes 532-596 ***

*** Renumbered SlotIndexes 544-608 ***
Adding endHyperOp instructions to each pHyperOp

*** Renumbered SlotIndexes 556-620 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 568-632 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 580-644 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 592-656 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 604-668 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 616-680 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0
After Shuffling regions of basic block, state of BB#0:
BB#0: derived from LLVM BB %redefine_start1.entry
	%vreg4<def> = ADD %t5, %zero; GR32Bit:%vreg4
	%vreg6<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg6
	%vreg7<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg7
	%vreg8<def> = SRLI %vreg7, 12; GR32Bit:%vreg8,%vreg7
	%vreg9<def> = ADD %vreg6, %vreg8; GR32Bit:%vreg9,%vreg6,%vreg8
	%vreg10<def> = ADDI %zero, 20; GR32Bit:%vreg10
	%vreg11<def> = SRLI %t5, 22; GR32Bit:%vreg11
	%vreg12<def> = SRLI %t5, 12; GR32Bit:%vreg12
	%vreg13<def> = ANDI %vreg12, 15; GR32Bit:%vreg13,%vreg12
	%vreg14<def> = SRLI %t5, 6; GR32Bit:%vreg14
	%vreg15<def> = ANDI %vreg14, 63; GR32Bit:%vreg15,%vreg14
	%vreg16<def> = ADDI %zero, 832; GR32Bit:%vreg16
	%vreg17<def> = MUL %vreg11, %vreg16; GR32Bit:%vreg17,%vreg11,%vreg16
	%vreg18<def> = ADDI %zero, 52; GR32Bit:%vreg18
	%vreg19<def> = MUL %vreg13, %vreg18; GR32Bit:%vreg19,%vreg13,%vreg18
	%vreg20<def> = ADD %vreg19, %vreg15; GR32Bit:%vreg20,%vreg19,%vreg15
	%vreg21<def> = ADD %vreg20, %vreg17; GR32Bit:%vreg21,%vreg20,%vreg17
	%vreg22<def> = MUL %vreg21, %vreg10; GR32Bit:%vreg22,%vreg21,%vreg10
	%vreg5<def> = ADD %vreg9, %vreg22; GR32Bit:%vreg5,%vreg9,%vreg22
	%vreg2<def> = ADDI %zero, <ga:@redefine_in_array>[TF=3]; GR32Bit:%vreg2
	%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
	%vreg1<def> = LUI <ga:@redefine_in_array>[TF=2]; GR32Bit:%vreg1
	%vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
	SW %vreg3, %vreg0, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0
	%vreg80<def> = ADDI %zero, 64; GR32Bit:%vreg80
	%vreg81<def> = ADDI %zero, 1; GR32Bit:%vreg81
	WRITECM %vreg80, %vreg81, 60; GR32Bit:%vreg80,%vreg81
	%vreg82<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg82
	%vreg83<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg83
	%vreg84<def> = SRLI %vreg83, 12; GR32Bit:%vreg84,%vreg83
	%vreg85<def> = ADD %vreg82, %vreg84; GR32Bit:%vreg85,%vreg82,%vreg84
	%vreg86<def> = ADDI %zero, 20; GR32Bit:%vreg86
	%vreg87<def> = SRLI %vreg80, 22; GR32Bit:%vreg87,%vreg80
	%vreg88<def> = SRLI %vreg80, 12; GR32Bit:%vreg88,%vreg80
	%vreg89<def> = ANDI %vreg88, 15; GR32Bit:%vreg89,%vreg88
	%vreg90<def> = SRLI %vreg80, 6; GR32Bit:%vreg90,%vreg80
	%vreg91<def> = ANDI %vreg90, 63; GR32Bit:%vreg91,%vreg90
	%vreg92<def> = ADDI %zero, 832; GR32Bit:%vreg92
	%vreg93<def> = MUL %vreg87, %vreg92; GR32Bit:%vreg93,%vreg87,%vreg92
	%vreg94<def> = ADDI %zero, 52; GR32Bit:%vreg94
	%vreg95<def> = MUL %vreg89, %vreg94; GR32Bit:%vreg95,%vreg89,%vreg94
	%vreg96<def> = ADD %vreg95, %vreg91; GR32Bit:%vreg96,%vreg95,%vreg91
	%vreg97<def> = ADD %vreg96, %vreg93; GR32Bit:%vreg97,%vreg96,%vreg93
	%vreg98<def> = MUL %vreg97, %vreg86; GR32Bit:%vreg98,%vreg97,%vreg86
	%vreg99<def> = ADD %vreg98, %vreg85; GR32Bit:%vreg99,%vreg98,%vreg85
	%vreg100<def> = LW %t5, 0; GR32Bit:%vreg100
	SW %vreg100, %vreg99, 16; GR32Bit:%vreg100,%vreg99
	%vreg101<def> = LUI 1; GR32Bit:%vreg101
	WRITEPM %vreg101, %vreg80, 0; GR32Bit:%vreg101,%vreg80
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg23<def> = ADD %t5, %zero; GR32Bit:%vreg23
	%vreg25<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg25
	%vreg26<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg26
	%vreg27<def> = SRLI %vreg26, 12; GR32Bit:%vreg27,%vreg26
	%vreg28<def> = ADD %vreg25, %vreg27; GR32Bit:%vreg28,%vreg25,%vreg27
	%vreg29<def> = ADDI %zero, 20; GR32Bit:%vreg29
	%vreg30<def> = SRLI %t5, 22; GR32Bit:%vreg30
	%vreg31<def> = SRLI %t5, 12; GR32Bit:%vreg31
	%vreg32<def> = ANDI %vreg31, 15; GR32Bit:%vreg32,%vreg31
	%vreg33<def> = SRLI %t5, 6; GR32Bit:%vreg33
	%vreg34<def> = ANDI %vreg33, 63; GR32Bit:%vreg34,%vreg33
	%vreg35<def> = ADDI %zero, 832; GR32Bit:%vreg35
	%vreg36<def> = MUL %vreg30, %vreg35; GR32Bit:%vreg36,%vreg30,%vreg35
	%vreg37<def> = ADDI %zero, 52; GR32Bit:%vreg37
	%vreg38<def> = MUL %vreg32, %vreg37; GR32Bit:%vreg38,%vreg32,%vreg37
	%vreg39<def> = ADD %vreg38, %vreg34; GR32Bit:%vreg39,%vreg38,%vreg34
	%vreg40<def> = ADD %vreg39, %vreg36; GR32Bit:%vreg40,%vreg39,%vreg36
	%vreg41<def> = MUL %vreg40, %vreg29; GR32Bit:%vreg41,%vreg40,%vreg29
	%vreg24<def> = ADD %vreg28, %vreg41; GR32Bit:%vreg24,%vreg28,%vreg41
	%vreg102<def> = LUI 1; GR32Bit:%vreg102
	%vreg103<def> = DREADPM %vreg102, 0; GR32Bit:%vreg103,%vreg102
	%vreg104<def> = ADDI %zero, -1; GR32Bit:%vreg104
	SYNC %vreg103, %vreg104, 60; GR32Bit:%vreg103,%vreg104
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg42<def> = ADD %t5, %zero; GR32Bit:%vreg42
	%vreg44<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg44
	%vreg45<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg45
	%vreg46<def> = SRLI %vreg45, 12; GR32Bit:%vreg46,%vreg45
	%vreg47<def> = ADD %vreg44, %vreg46; GR32Bit:%vreg47,%vreg44,%vreg46
	%vreg48<def> = ADDI %zero, 20; GR32Bit:%vreg48
	%vreg49<def> = SRLI %t5, 22; GR32Bit:%vreg49
	%vreg50<def> = SRLI %t5, 12; GR32Bit:%vreg50
	%vreg51<def> = ANDI %vreg50, 15; GR32Bit:%vreg51,%vreg50
	%vreg52<def> = SRLI %t5, 6; GR32Bit:%vreg52
	%vreg53<def> = ANDI %vreg52, 63; GR32Bit:%vreg53,%vreg52
	%vreg54<def> = ADDI %zero, 832; GR32Bit:%vreg54
	%vreg55<def> = MUL %vreg49, %vreg54; GR32Bit:%vreg55,%vreg49,%vreg54
	%vreg56<def> = ADDI %zero, 52; GR32Bit:%vreg56
	%vreg57<def> = MUL %vreg51, %vreg56; GR32Bit:%vreg57,%vreg51,%vreg56
	%vreg58<def> = ADD %vreg57, %vreg53; GR32Bit:%vreg58,%vreg57,%vreg53
	%vreg59<def> = ADD %vreg58, %vreg55; GR32Bit:%vreg59,%vreg58,%vreg55
	%vreg60<def> = MUL %vreg59, %vreg48; GR32Bit:%vreg60,%vreg59,%vreg48
	%vreg43<def> = ADD %vreg47, %vreg60; GR32Bit:%vreg43,%vreg47,%vreg60
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg61<def> = ADD %t5, %zero; GR32Bit:%vreg61
	%vreg63<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg63
	%vreg64<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg64
	%vreg65<def> = SRLI %vreg64, 12; GR32Bit:%vreg65,%vreg64
	%vreg66<def> = ADD %vreg63, %vreg65; GR32Bit:%vreg66,%vreg63,%vreg65
	%vreg67<def> = ADDI %zero, 20; GR32Bit:%vreg67
	%vreg68<def> = SRLI %t5, 22; GR32Bit:%vreg68
	%vreg69<def> = SRLI %t5, 12; GR32Bit:%vreg69
	%vreg70<def> = ANDI %vreg69, 15; GR32Bit:%vreg70,%vreg69
	%vreg71<def> = SRLI %t5, 6; GR32Bit:%vreg71
	%vreg72<def> = ANDI %vreg71, 63; GR32Bit:%vreg72,%vreg71
	%vreg73<def> = ADDI %zero, 832; GR32Bit:%vreg73
	%vreg74<def> = MUL %vreg68, %vreg73; GR32Bit:%vreg74,%vreg68,%vreg73
	%vreg75<def> = ADDI %zero, 52; GR32Bit:%vreg75
	%vreg76<def> = MUL %vreg70, %vreg75; GR32Bit:%vreg76,%vreg70,%vreg75
	%vreg77<def> = ADD %vreg76, %vreg72; GR32Bit:%vreg77,%vreg76,%vreg72
	%vreg78<def> = ADD %vreg77, %vreg74; GR32Bit:%vreg78,%vreg77,%vreg74
	%vreg79<def> = MUL %vreg78, %vreg67; GR32Bit:%vreg79,%vreg78,%vreg67
	%vreg62<def> = ADD %vreg66, %vreg79; GR32Bit:%vreg62,%vreg66,%vreg79
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 316-804 ***

*** Renumbered SlotIndexes 304-824 ***

*** Renumbered SlotIndexes 216-872 ***

*** Renumbered SlotIndexes 204-892 ***

*** Renumbered SlotIndexes 204-908 ***

*** Renumbered SlotIndexes 204-924 ***

*** Renumbered SlotIndexes 204-940 ***

*** Renumbered SlotIndexes 112-984 ***

*** Renumbered SlotIndexes 100-1004 ***

*** Renumbered SlotIndexes 100-1020 ***

*** Renumbered SlotIndexes 100-1036 ***

*** Renumbered SlotIndexes 100-1052 ***

*** Renumbered SlotIndexes 100-1068 ***

*** Renumbered SlotIndexes 100-1084 ***

*** Renumbered SlotIndexes 100-1100 ***

*** Renumbered SlotIndexes 100-1116 ***

*** Renumbered SlotIndexes 100-1132 ***

*** Renumbered SlotIndexes 100-1148 ***

*** Renumbered SlotIndexes 100-1164 ***

*** Renumbered SlotIndexes 100-1180 ***

*** Renumbered SlotIndexes 100-1196 ***

*** Renumbered SlotIndexes 100-1212 ***

*** Renumbered SlotIndexes 100-1228 ***

*** Renumbered SlotIndexes 100-1244 ***

*** Renumbered SlotIndexes 12-1292 ***
Creating pHyperOp bundles for CEs for bb0
  %vreg23<def> = ADD %t5, %zero; GR32Bit:%vreg23
starting at   %vreg4<def> = ADD %t5, %zero; GR32Bit:%vreg4
  %vreg42<def> = ADD %t5, %zero; GR32Bit:%vreg42
starting at   %vreg23<def> = ADD %t5, %zero; GR32Bit:%vreg23
  %vreg61<def> = ADD %t5, %zero; GR32Bit:%vreg61
starting at   %vreg42<def> = ADD %t5, %zero; GR32Bit:%vreg42
starting at   %vreg61<def> = ADD %t5, %zero; GR32Bit:%vreg61
After bundling, state of BB0:BB#0: derived from LLVM BB %redefine_start1.entry
	%vreg4<def> = ADD %t5, %zero; GR32Bit:%vreg4
	  * %vreg6<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg6
	  * %vreg7<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg7
	  * %vreg8<def> = SRLI %vreg7, 12; GR32Bit:%vreg8,%vreg7
	  * %vreg9<def> = ADD %vreg6, %vreg8; GR32Bit:%vreg9,%vreg6,%vreg8
	  * %vreg10<def> = ADDI %zero, 20; GR32Bit:%vreg10
	  * %vreg11<def> = SRLI %t5, 22; GR32Bit:%vreg11
	  * %vreg12<def> = SRLI %t5, 12; GR32Bit:%vreg12
	  * %vreg13<def> = ANDI %vreg12, 15; GR32Bit:%vreg13,%vreg12
	  * %vreg14<def> = SRLI %t5, 6; GR32Bit:%vreg14
	  * %vreg15<def> = ANDI %vreg14, 63; GR32Bit:%vreg15,%vreg14
	  * %vreg16<def> = ADDI %zero, 832; GR32Bit:%vreg16
	  * %vreg17<def> = MUL %vreg11, %vreg16; GR32Bit:%vreg17,%vreg11,%vreg16
	  * %vreg18<def> = ADDI %zero, 52; GR32Bit:%vreg18
	  * %vreg19<def> = MUL %vreg13, %vreg18; GR32Bit:%vreg19,%vreg13,%vreg18
	  * %vreg20<def> = ADD %vreg19, %vreg15; GR32Bit:%vreg20,%vreg19,%vreg15
	  * %vreg21<def> = ADD %vreg20, %vreg17; GR32Bit:%vreg21,%vreg20,%vreg17
	  * %vreg22<def> = MUL %vreg21, %vreg10; GR32Bit:%vreg22,%vreg21,%vreg10
	  * %vreg5<def> = ADD %vreg9, %vreg22; GR32Bit:%vreg5,%vreg9,%vreg22
	  * %vreg2<def> = ADDI %zero, <ga:@redefine_in_array>[TF=3]; GR32Bit:%vreg2
	  * %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
	  * %vreg1<def> = LUI <ga:@redefine_in_array>[TF=2]; GR32Bit:%vreg1
	  * %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
	  * SW %vreg3, %vreg0, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0
	  * %vreg80<def> = ADDI %zero, 64; GR32Bit:%vreg80
	  * %vreg81<def> = ADDI %zero, 1; GR32Bit:%vreg81
	  * WRITECM %vreg80, %vreg81, 60; GR32Bit:%vreg80,%vreg81
	  * %vreg82<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg82
	  * %vreg83<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg83
	  * %vreg84<def> = SRLI %vreg83, 12; GR32Bit:%vreg84,%vreg83
	  * %vreg85<def> = ADD %vreg82, %vreg84; GR32Bit:%vreg85,%vreg82,%vreg84
	  * %vreg86<def> = ADDI %zero, 20; GR32Bit:%vreg86
	  * %vreg87<def> = SRLI %vreg80, 22; GR32Bit:%vreg87,%vreg80
	  * %vreg88<def> = SRLI %vreg80, 12; GR32Bit:%vreg88,%vreg80
	  * %vreg89<def> = ANDI %vreg88, 15; GR32Bit:%vreg89,%vreg88
	  * %vreg90<def> = SRLI %vreg80, 6; GR32Bit:%vreg90,%vreg80
	  * %vreg91<def> = ANDI %vreg90, 63; GR32Bit:%vreg91,%vreg90
	  * %vreg92<def> = ADDI %zero, 832; GR32Bit:%vreg92
	  * %vreg93<def> = MUL %vreg87, %vreg92; GR32Bit:%vreg93,%vreg87,%vreg92
	  * %vreg94<def> = ADDI %zero, 52; GR32Bit:%vreg94
	  * %vreg95<def> = MUL %vreg89, %vreg94; GR32Bit:%vreg95,%vreg89,%vreg94
	  * %vreg96<def> = ADD %vreg95, %vreg91; GR32Bit:%vreg96,%vreg95,%vreg91
	  * %vreg97<def> = ADD %vreg96, %vreg93; GR32Bit:%vreg97,%vreg96,%vreg93
	  * %vreg98<def> = MUL %vreg97, %vreg86; GR32Bit:%vreg98,%vreg97,%vreg86
	  * %vreg99<def> = ADD %vreg98, %vreg85; GR32Bit:%vreg99,%vreg98,%vreg85
	  * %vreg100<def> = LW %t5, 0; GR32Bit:%vreg100
	  * SW %vreg100, %vreg99, 16; GR32Bit:%vreg100,%vreg99
	  * %vreg101<def> = LUI 1; GR32Bit:%vreg101
	  * WRITEPM %vreg101, %vreg80, 0; GR32Bit:%vreg101,%vreg80
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg23<def> = ADD %t5, %zero; GR32Bit:%vreg23
	  * %vreg25<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg25
	  * %vreg26<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg26
	  * %vreg27<def> = SRLI %vreg26, 12; GR32Bit:%vreg27,%vreg26
	  * %vreg28<def> = ADD %vreg25, %vreg27; GR32Bit:%vreg28,%vreg25,%vreg27
	  * %vreg29<def> = ADDI %zero, 20; GR32Bit:%vreg29
	  * %vreg30<def> = SRLI %t5, 22; GR32Bit:%vreg30
	  * %vreg31<def> = SRLI %t5, 12; GR32Bit:%vreg31
	  * %vreg32<def> = ANDI %vreg31, 15; GR32Bit:%vreg32,%vreg31
	  * %vreg33<def> = SRLI %t5, 6; GR32Bit:%vreg33
	  * %vreg34<def> = ANDI %vreg33, 63; GR32Bit:%vreg34,%vreg33
	  * %vreg35<def> = ADDI %zero, 832; GR32Bit:%vreg35
	  * %vreg36<def> = MUL %vreg30, %vreg35; GR32Bit:%vreg36,%vreg30,%vreg35
	  * %vreg37<def> = ADDI %zero, 52; GR32Bit:%vreg37
	  * %vreg38<def> = MUL %vreg32, %vreg37; GR32Bit:%vreg38,%vreg32,%vreg37
	  * %vreg39<def> = ADD %vreg38, %vreg34; GR32Bit:%vreg39,%vreg38,%vreg34
	  * %vreg40<def> = ADD %vreg39, %vreg36; GR32Bit:%vreg40,%vreg39,%vreg36
	  * %vreg41<def> = MUL %vreg40, %vreg29; GR32Bit:%vreg41,%vreg40,%vreg29
	  * %vreg24<def> = ADD %vreg28, %vreg41; GR32Bit:%vreg24,%vreg28,%vreg41
	  * %vreg102<def> = LUI 1; GR32Bit:%vreg102
	  * %vreg103<def> = DREADPM %vreg102, 0; GR32Bit:%vreg103,%vreg102
	  * %vreg104<def> = ADDI %zero, -1; GR32Bit:%vreg104
	  * SYNC %vreg103, %vreg104, 60; GR32Bit:%vreg103,%vreg104
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg42<def> = ADD %t5, %zero; GR32Bit:%vreg42
	  * %vreg44<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg44
	  * %vreg45<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg45
	  * %vreg46<def> = SRLI %vreg45, 12; GR32Bit:%vreg46,%vreg45
	  * %vreg47<def> = ADD %vreg44, %vreg46; GR32Bit:%vreg47,%vreg44,%vreg46
	  * %vreg48<def> = ADDI %zero, 20; GR32Bit:%vreg48
	  * %vreg49<def> = SRLI %t5, 22; GR32Bit:%vreg49
	  * %vreg50<def> = SRLI %t5, 12; GR32Bit:%vreg50
	  * %vreg51<def> = ANDI %vreg50, 15; GR32Bit:%vreg51,%vreg50
	  * %vreg52<def> = SRLI %t5, 6; GR32Bit:%vreg52
	  * %vreg53<def> = ANDI %vreg52, 63; GR32Bit:%vreg53,%vreg52
	  * %vreg54<def> = ADDI %zero, 832; GR32Bit:%vreg54
	  * %vreg55<def> = MUL %vreg49, %vreg54; GR32Bit:%vreg55,%vreg49,%vreg54
	  * %vreg56<def> = ADDI %zero, 52; GR32Bit:%vreg56
	  * %vreg57<def> = MUL %vreg51, %vreg56; GR32Bit:%vreg57,%vreg51,%vreg56
	  * %vreg58<def> = ADD %vreg57, %vreg53; GR32Bit:%vreg58,%vreg57,%vreg53
	  * %vreg59<def> = ADD %vreg58, %vreg55; GR32Bit:%vreg59,%vreg58,%vreg55
	  * %vreg60<def> = MUL %vreg59, %vreg48; GR32Bit:%vreg60,%vreg59,%vreg48
	  * %vreg43<def> = ADD %vreg47, %vreg60; GR32Bit:%vreg43,%vreg47,%vreg60
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg61<def> = ADD %t5, %zero; GR32Bit:%vreg61
	  * %vreg63<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg63
	  * %vreg64<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg64
	  * %vreg65<def> = SRLI %vreg64, 12; GR32Bit:%vreg65,%vreg64
	  * %vreg66<def> = ADD %vreg63, %vreg65; GR32Bit:%vreg66,%vreg63,%vreg65
	  * %vreg67<def> = ADDI %zero, 20; GR32Bit:%vreg67
	  * %vreg68<def> = SRLI %t5, 22; GR32Bit:%vreg68
	  * %vreg69<def> = SRLI %t5, 12; GR32Bit:%vreg69
	  * %vreg70<def> = ANDI %vreg69, 15; GR32Bit:%vreg70,%vreg69
	  * %vreg71<def> = SRLI %t5, 6; GR32Bit:%vreg71
	  * %vreg72<def> = ANDI %vreg71, 63; GR32Bit:%vreg72,%vreg71
	  * %vreg73<def> = ADDI %zero, 832; GR32Bit:%vreg73
	  * %vreg74<def> = MUL %vreg68, %vreg73; GR32Bit:%vreg74,%vreg68,%vreg73
	  * %vreg75<def> = ADDI %zero, 52; GR32Bit:%vreg75
	  * %vreg76<def> = MUL %vreg70, %vreg75; GR32Bit:%vreg76,%vreg70,%vreg75
	  * %vreg77<def> = ADD %vreg76, %vreg72; GR32Bit:%vreg77,%vreg76,%vreg72
	  * %vreg78<def> = ADD %vreg77, %vreg74; GR32Bit:%vreg78,%vreg77,%vreg74
	  * %vreg79<def> = MUL %vreg78, %vreg67; GR32Bit:%vreg79,%vreg78,%vreg67
	  * %vreg62<def> = ADD %vreg66, %vreg79; GR32Bit:%vreg62,%vreg66,%vreg79
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
Patching the instructions that are supposed to use the physical registers r30 and r31
Computing live-in reg-units in ABI blocks.
Created 0 new intervals.

*** Renumbered SlotIndexes 8-1312 ***

*** Renumbered SlotIndexes 172-1324 ***
********** INTERVALS **********
zero = EMPTY
%vreg0 = [188r,212r:0)  0@188r
%vreg1 = [196r,204r:0)  0@196r
%vreg2 = [168r,204r:0)  0@168r
%vreg3 = [204r,212r:0)  0@204r
%vreg4 = [4r,4d:0)  0@4r
%vreg5 = [160r,160d:0)  0@160r
%vreg6 = [24r,48r:0)  0@24r
%vreg7 = [32r,40r:0)  0@32r
%vreg8 = [40r,48r:0)  0@40r
%vreg9 = [48r,160r:0)  0@48r
%vreg10 = [56r,152r:0)  0@56r
%vreg11 = [64r,112r:0)  0@64r
%vreg12 = [72r,80r:0)  0@72r
%vreg13 = [80r,128r:0)  0@80r
%vreg14 = [88r,96r:0)  0@88r
%vreg15 = [96r,136r:0)  0@96r
%vreg16 = [104r,112r:0)  0@104r
%vreg17 = [112r,144r:0)  0@112r
%vreg18 = [120r,128r:0)  0@120r
%vreg19 = [128r,136r:0)  0@128r
%vreg20 = [136r,144r:0)  0@136r
%vreg21 = [144r,152r:0)  0@144r
%vreg22 = [152r,160r:0)  0@152r
%vreg23 = [444r,444d:0)  0@444r
%vreg24 = [588r,588d:0)  0@588r
%vreg25 = [452r,476r:0)  0@452r
%vreg26 = [460r,468r:0)  0@460r
%vreg27 = [468r,476r:0)  0@468r
%vreg28 = [476r,588r:0)  0@476r
%vreg29 = [484r,580r:0)  0@484r
%vreg30 = [492r,540r:0)  0@492r
%vreg31 = [500r,508r:0)  0@500r
%vreg32 = [508r,556r:0)  0@508r
%vreg33 = [516r,524r:0)  0@516r
%vreg34 = [524r,564r:0)  0@524r
%vreg35 = [532r,540r:0)  0@532r
%vreg36 = [540r,572r:0)  0@540r
%vreg37 = [548r,556r:0)  0@548r
%vreg38 = [556r,564r:0)  0@556r
%vreg39 = [564r,572r:0)  0@564r
%vreg40 = [572r,580r:0)  0@572r
%vreg41 = [580r,588r:0)  0@580r
%vreg42 = [652r,652d:0)  0@652r
%vreg43 = [796r,796d:0)  0@796r
%vreg44 = [660r,684r:0)  0@660r
%vreg45 = [668r,676r:0)  0@668r
%vreg46 = [676r,684r:0)  0@676r
%vreg47 = [684r,796r:0)  0@684r
%vreg48 = [692r,788r:0)  0@692r
%vreg49 = [700r,748r:0)  0@700r
%vreg50 = [708r,716r:0)  0@708r
%vreg51 = [716r,764r:0)  0@716r
%vreg52 = [724r,732r:0)  0@724r
%vreg53 = [732r,772r:0)  0@732r
%vreg54 = [740r,748r:0)  0@740r
%vreg55 = [748r,780r:0)  0@748r
%vreg56 = [756r,764r:0)  0@756r
%vreg57 = [764r,772r:0)  0@764r
%vreg58 = [772r,780r:0)  0@772r
%vreg59 = [780r,788r:0)  0@780r
%vreg60 = [788r,796r:0)  0@788r
%vreg61 = [828r,828d:0)  0@828r
%vreg62 = [972r,972d:0)  0@972r
%vreg63 = [836r,860r:0)  0@836r
%vreg64 = [844r,852r:0)  0@844r
%vreg65 = [852r,860r:0)  0@852r
%vreg66 = [860r,972r:0)  0@860r
%vreg67 = [868r,964r:0)  0@868r
%vreg68 = [876r,924r:0)  0@876r
%vreg69 = [884r,892r:0)  0@884r
%vreg70 = [892r,940r:0)  0@892r
%vreg71 = [900r,908r:0)  0@900r
%vreg72 = [908r,948r:0)  0@908r
%vreg73 = [916r,924r:0)  0@916r
%vreg74 = [924r,956r:0)  0@924r
%vreg75 = [932r,940r:0)  0@932r
%vreg76 = [940r,948r:0)  0@940r
%vreg77 = [948r,956r:0)  0@948r
%vreg78 = [956r,964r:0)  0@956r
%vreg79 = [964r,972r:0)  0@964r
%vreg80 = [220r,412r:0)  0@220r
%vreg81 = [228r,236r:0)  0@228r
%vreg82 = [244r,268r:0)  0@244r
%vreg83 = [252r,260r:0)  0@252r
%vreg84 = [260r,268r:0)  0@260r
%vreg85 = [268r,380r:0)  0@268r
%vreg86 = [276r,372r:0)  0@276r
%vreg87 = [284r,332r:0)  0@284r
%vreg88 = [292r,300r:0)  0@292r
%vreg89 = [300r,348r:0)  0@300r
%vreg90 = [308r,316r:0)  0@308r
%vreg91 = [316r,356r:0)  0@316r
%vreg92 = [324r,332r:0)  0@324r
%vreg93 = [332r,364r:0)  0@332r
%vreg94 = [340r,348r:0)  0@340r
%vreg95 = [348r,356r:0)  0@348r
%vreg96 = [356r,364r:0)  0@356r
%vreg97 = [364r,372r:0)  0@364r
%vreg98 = [372r,380r:0)  0@372r
%vreg99 = [380r,396r:0)  0@380r
%vreg100 = [388r,396r:0)  0@388r
%vreg101 = [404r,412r:0)  0@404r
%vreg102 = [596r,604r:0)  0@596r
%vreg103 = [604r,1324B:0)  0@604r
%vreg104 = [612r,620r:0)  0@612r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start1.entry
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg6<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg6
4B		  * %vreg7<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg7
4B		  * %vreg8<def> = SRLI %vreg7, 12; GR32Bit:%vreg8,%vreg7
4B		  * %vreg9<def> = ADD %vreg6, %vreg8; GR32Bit:%vreg9,%vreg6,%vreg8
4B		  * %vreg10<def> = ADDI %zero, 20; GR32Bit:%vreg10
4B		  * %vreg11<def> = SRLI %t5, 22; GR32Bit:%vreg11
4B		  * %vreg12<def> = SRLI %t5, 12; GR32Bit:%vreg12
4B		  * %vreg13<def> = ANDI %vreg12, 15; GR32Bit:%vreg13,%vreg12
4B		  * %vreg14<def> = SRLI %t5, 6; GR32Bit:%vreg14
4B		  * %vreg15<def> = ANDI %vreg14, 63; GR32Bit:%vreg15,%vreg14
4B		  * %vreg16<def> = ADDI %zero, 832; GR32Bit:%vreg16
4B		  * %vreg17<def> = MUL %vreg11, %vreg16; GR32Bit:%vreg17,%vreg11,%vreg16
4B		  * %vreg18<def> = ADDI %zero, 52; GR32Bit:%vreg18
4B		  * %vreg19<def> = MUL %vreg13, %vreg18; GR32Bit:%vreg19,%vreg13,%vreg18
4B		  * %vreg20<def> = ADD %vreg19, %vreg15; GR32Bit:%vreg20,%vreg19,%vreg15
4B		  * %vreg21<def> = ADD %vreg20, %vreg17; GR32Bit:%vreg21,%vreg20,%vreg17
4B		  * %vreg22<def> = MUL %vreg21, %vreg10; GR32Bit:%vreg22,%vreg21,%vreg10
4B		  * %t5<def> = ADD %vreg9, %vreg22; GR32Bit:%vreg9,%vreg22
4B		  * %vreg2<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg2
4B		  * SRLI %vreg2, %vreg2, 12; GR32Bit:%vreg2
4B		  * %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
4B		  * %vreg1<def> = LUI <ga:@redefine_in_array>[TF=2]; GR32Bit:%vreg1
4B		  * %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
4B		  * SW %vreg3, %vreg0, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0
4B		  * %vreg80<def> = ADDI %zero, 64; GR32Bit:%vreg80
4B		  * %vreg81<def> = ADDI %zero, 1; GR32Bit:%vreg81
4B		  * WRITECM %vreg80, %vreg81, 60; GR32Bit:%vreg80,%vreg81
4B		  * %vreg82<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg82
4B		  * %vreg83<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg83
4B		  * %vreg84<def> = SRLI %vreg83, 12; GR32Bit:%vreg84,%vreg83
4B		  * %vreg85<def> = ADD %vreg82, %vreg84; GR32Bit:%vreg85,%vreg82,%vreg84
4B		  * %vreg86<def> = ADDI %zero, 20; GR32Bit:%vreg86
4B		  * %vreg87<def> = SRLI %vreg80, 22; GR32Bit:%vreg87,%vreg80
4B		  * %vreg88<def> = SRLI %vreg80, 12; GR32Bit:%vreg88,%vreg80
4B		  * %vreg89<def> = ANDI %vreg88, 15; GR32Bit:%vreg89,%vreg88
4B		  * %vreg90<def> = SRLI %vreg80, 6; GR32Bit:%vreg90,%vreg80
4B		  * %vreg91<def> = ANDI %vreg90, 63; GR32Bit:%vreg91,%vreg90
4B		  * %vreg92<def> = ADDI %zero, 832; GR32Bit:%vreg92
4B		  * %vreg93<def> = MUL %vreg87, %vreg92; GR32Bit:%vreg93,%vreg87,%vreg92
4B		  * %vreg94<def> = ADDI %zero, 52; GR32Bit:%vreg94
4B		  * %vreg95<def> = MUL %vreg89, %vreg94; GR32Bit:%vreg95,%vreg89,%vreg94
4B		  * %vreg96<def> = ADD %vreg95, %vreg91; GR32Bit:%vreg96,%vreg95,%vreg91
4B		  * %vreg97<def> = ADD %vreg96, %vreg93; GR32Bit:%vreg97,%vreg96,%vreg93
4B		  * %vreg98<def> = MUL %vreg97, %vreg86; GR32Bit:%vreg98,%vreg97,%vreg86
4B		  * %vreg99<def> = ADD %vreg98, %vreg85; GR32Bit:%vreg99,%vreg98,%vreg85
4B		  * %vreg100<def> = LW %t5, 0; GR32Bit:%vreg100
4B		  * SW %vreg100, %vreg99, 16; GR32Bit:%vreg100,%vreg99
4B		  * %vreg101<def> = LUI 1; GR32Bit:%vreg101
4B		  * WRITEPM %vreg101, %vreg80, 0; GR32Bit:%vreg101,%vreg80
4B		  * END 0
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
444B		%t4<def> = ADD %t5, %zero
444B		  * %vreg25<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg25
444B		  * %vreg26<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg26
444B		  * %vreg27<def> = SRLI %vreg26, 12; GR32Bit:%vreg27,%vreg26
444B		  * %vreg28<def> = ADD %vreg25, %vreg27; GR32Bit:%vreg28,%vreg25,%vreg27
444B		  * %vreg29<def> = ADDI %zero, 20; GR32Bit:%vreg29
444B		  * %vreg30<def> = SRLI %t5, 22; GR32Bit:%vreg30
444B		  * %vreg31<def> = SRLI %t5, 12; GR32Bit:%vreg31
444B		  * %vreg32<def> = ANDI %vreg31, 15; GR32Bit:%vreg32,%vreg31
444B		  * %vreg33<def> = SRLI %t5, 6; GR32Bit:%vreg33
444B		  * %vreg34<def> = ANDI %vreg33, 63; GR32Bit:%vreg34,%vreg33
444B		  * %vreg35<def> = ADDI %zero, 832; GR32Bit:%vreg35
444B		  * %vreg36<def> = MUL %vreg30, %vreg35; GR32Bit:%vreg36,%vreg30,%vreg35
444B		  * %vreg37<def> = ADDI %zero, 52; GR32Bit:%vreg37
444B		  * %vreg38<def> = MUL %vreg32, %vreg37; GR32Bit:%vreg38,%vreg32,%vreg37
444B		  * %vreg39<def> = ADD %vreg38, %vreg34; GR32Bit:%vreg39,%vreg38,%vreg34
444B		  * %vreg40<def> = ADD %vreg39, %vreg36; GR32Bit:%vreg40,%vreg39,%vreg36
444B		  * %vreg41<def> = MUL %vreg40, %vreg29; GR32Bit:%vreg41,%vreg40,%vreg29
444B		  * %t5<def> = ADD %vreg28, %vreg41; GR32Bit:%vreg28,%vreg41
444B		  * %vreg102<def> = LUI 1; GR32Bit:%vreg102
444B		  * %vreg103<def> = DREADPM %vreg102, 0; GR32Bit:%vreg103,%vreg102
444B		  * %vreg104<def> = LUI 1048575; GR32Bit:%vreg104
444B		  * %a5<def> = LUI 4095
444B		  * %a5<def> = SRLI %a5<internal>, 12
444B		  * ADD %vreg104, %vreg104, %a5; GR32Bit:%vreg104
444B		  * SYNC %vreg103, %vreg104, 60; GR32Bit:%vreg103,%vreg104
444B		  * END 0
444B		  * %zero<def> = ADDI %zero, 0
444B		  * %zero<def> = ADDI %zero, 0
652B		%t4<def> = ADD %t5, %zero
652B		  * %vreg44<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg44
652B		  * %vreg45<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg45
652B		  * %vreg46<def> = SRLI %vreg45, 12; GR32Bit:%vreg46,%vreg45
652B		  * %vreg47<def> = ADD %vreg44, %vreg46; GR32Bit:%vreg47,%vreg44,%vreg46
652B		  * %vreg48<def> = ADDI %zero, 20; GR32Bit:%vreg48
652B		  * %vreg49<def> = SRLI %t5, 22; GR32Bit:%vreg49
652B		  * %vreg50<def> = SRLI %t5, 12; GR32Bit:%vreg50
652B		  * %vreg51<def> = ANDI %vreg50, 15; GR32Bit:%vreg51,%vreg50
652B		  * %vreg52<def> = SRLI %t5, 6; GR32Bit:%vreg52
652B		  * %vreg53<def> = ANDI %vreg52, 63; GR32Bit:%vreg53,%vreg52
652B		  * %vreg54<def> = ADDI %zero, 832; GR32Bit:%vreg54
652B		  * %vreg55<def> = MUL %vreg49, %vreg54; GR32Bit:%vreg55,%vreg49,%vreg54
652B		  * %vreg56<def> = ADDI %zero, 52; GR32Bit:%vreg56
652B		  * %vreg57<def> = MUL %vreg51, %vreg56; GR32Bit:%vreg57,%vreg51,%vreg56
652B		  * %vreg58<def> = ADD %vreg57, %vreg53; GR32Bit:%vreg58,%vreg57,%vreg53
652B		  * %vreg59<def> = ADD %vreg58, %vreg55; GR32Bit:%vreg59,%vreg58,%vreg55
652B		  * %vreg60<def> = MUL %vreg59, %vreg48; GR32Bit:%vreg60,%vreg59,%vreg48
652B		  * %t5<def> = ADD %vreg47, %vreg60; GR32Bit:%vreg47,%vreg60
652B		  * END 0
652B		  * %zero<def> = ADDI %zero, 0
652B		  * %zero<def> = ADDI %zero, 0
828B		%t4<def> = ADD %t5, %zero
828B		  * %vreg63<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg63
828B		  * %vreg64<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg64
828B		  * %vreg65<def> = SRLI %vreg64, 12; GR32Bit:%vreg65,%vreg64
828B		  * %vreg66<def> = ADD %vreg63, %vreg65; GR32Bit:%vreg66,%vreg63,%vreg65
828B		  * %vreg67<def> = ADDI %zero, 20; GR32Bit:%vreg67
828B		  * %vreg68<def> = SRLI %t5, 22; GR32Bit:%vreg68
828B		  * %vreg69<def> = SRLI %t5, 12; GR32Bit:%vreg69
828B		  * %vreg70<def> = ANDI %vreg69, 15; GR32Bit:%vreg70,%vreg69
828B		  * %vreg71<def> = SRLI %t5, 6; GR32Bit:%vreg71
828B		  * %vreg72<def> = ANDI %vreg71, 63; GR32Bit:%vreg72,%vreg71
828B		  * %vreg73<def> = ADDI %zero, 832; GR32Bit:%vreg73
828B		  * %vreg74<def> = MUL %vreg68, %vreg73; GR32Bit:%vreg74,%vreg68,%vreg73
828B		  * %vreg75<def> = ADDI %zero, 52; GR32Bit:%vreg75
828B		  * %vreg76<def> = MUL %vreg70, %vreg75; GR32Bit:%vreg76,%vreg70,%vreg75
828B		  * %vreg77<def> = ADD %vreg76, %vreg72; GR32Bit:%vreg77,%vreg76,%vreg72
828B		  * %vreg78<def> = ADD %vreg77, %vreg74; GR32Bit:%vreg78,%vreg77,%vreg74
828B		  * %vreg79<def> = MUL %vreg78, %vreg67; GR32Bit:%vreg79,%vreg78,%vreg67
828B		  * %t5<def> = ADD %vreg66, %vreg79; GR32Bit:%vreg66,%vreg79
828B		  * END 0
828B		  * %zero<def> = ADDI %zero, 0
828B		  * %zero<def> = ADDI %zero, 0

# End machine code for function redefine_start1.

********** COMPUTING LIVE DEBUG VARIABLES: redefine_start1 **********
********** DEBUG VARIABLES **********
********** Compute Spill Weights **********
********** Function: redefine_start1
********** GREEDY REGISTER ALLOCATION **********
********** Function: redefine_start1

selectOrSplit GR32Bit:%vreg103 [604r,1324B:0)  0@604r
AllocationOrder(GR32Bit) = [ %t0 %t1 %t2 %fp %a0 %a1 %a2 %a3 %a4 %a6 %a7 %t3 %ra %sp %gp %tp %s0 %s1 %s2 %s3 %s4 %s5 %s6 %s7 %s8 %s9 %s10 %s11 ]
assigning %vreg103 to %t0: t0

selectOrSplit GR32Bit:%vreg80 [220r,412r:0)  0@220r
assigning %vreg80 to %t0: t0

selectOrSplit GR32Bit:%vreg9 [48r,160r:0)  0@48r
assigning %vreg9 to %t0: t0

selectOrSplit GR32Bit:%vreg28 [476r,588r:0)  0@476r
assigning %vreg28 to %t0: t0

selectOrSplit GR32Bit:%vreg47 [684r,796r:0)  0@684r
assigning %vreg47 to %t1: t1

selectOrSplit GR32Bit:%vreg66 [860r,972r:0)  0@860r
assigning %vreg66 to %t1: t1

selectOrSplit GR32Bit:%vreg85 [268r,380r:0)  0@268r
assigning %vreg85 to %t1: t1

selectOrSplit GR32Bit:%vreg10 [56r,152r:0)  0@56r
assigning %vreg10 to %t1: t1

selectOrSplit GR32Bit:%vreg29 [484r,580r:0)  0@484r
assigning %vreg29 to %t1: t1

selectOrSplit GR32Bit:%vreg48 [692r,788r:0)  0@692r
assigning %vreg48 to %t2: t2

selectOrSplit GR32Bit:%vreg67 [868r,964r:0)  0@868r
assigning %vreg67 to %t2: t2

selectOrSplit GR32Bit:%vreg86 [276r,372r:0)  0@276r
assigning %vreg86 to %t2: t2

selectOrSplit GR32Bit:%vreg11 [64r,112r:0)  0@64r
assigning %vreg11 to %t2: t2

selectOrSplit GR32Bit:%vreg13 [80r,128r:0)  0@80r
assigning %vreg13 to %fp: fp

selectOrSplit GR32Bit:%vreg30 [492r,540r:0)  0@492r
assigning %vreg30 to %t2: t2

selectOrSplit GR32Bit:%vreg32 [508r,556r:0)  0@508r
assigning %vreg32 to %fp: fp

selectOrSplit GR32Bit:%vreg49 [700r,748r:0)  0@700r
assigning %vreg49 to %fp: fp

selectOrSplit GR32Bit:%vreg51 [716r,764r:0)  0@716r
assigning %vreg51 to %a0: a0

selectOrSplit GR32Bit:%vreg68 [876r,924r:0)  0@876r
assigning %vreg68 to %fp: fp

selectOrSplit GR32Bit:%vreg70 [892r,940r:0)  0@892r
assigning %vreg70 to %a0: a0

selectOrSplit GR32Bit:%vreg87 [284r,332r:0)  0@284r
assigning %vreg87 to %fp: fp

selectOrSplit GR32Bit:%vreg89 [300r,348r:0)  0@300r
assigning %vreg89 to %a0: a0

selectOrSplit GR32Bit:%vreg15 [96r,136r:0)  0@96r
assigning %vreg15 to %a0: a0

selectOrSplit GR32Bit:%vreg34 [524r,564r:0)  0@524r
assigning %vreg34 to %a0: a0

selectOrSplit GR32Bit:%vreg53 [732r,772r:0)  0@732r
assigning %vreg53 to %a1: a1

selectOrSplit GR32Bit:%vreg72 [908r,948r:0)  0@908r
assigning %vreg72 to %a1: a1

selectOrSplit GR32Bit:%vreg91 [316r,356r:0)  0@316r
assigning %vreg91 to %a1: a1

selectOrSplit GR32Bit:%vreg2 [168r,204r:0)  0@168r
assigning %vreg2 to %t0: t0

selectOrSplit GR32Bit:%vreg17 [112r,144r:0)  0@112r
assigning %vreg17 to %t2: t2

selectOrSplit GR32Bit:%vreg36 [540r,572r:0)  0@540r
assigning %vreg36 to %t2: t2

selectOrSplit GR32Bit:%vreg55 [748r,780r:0)  0@748r
assigning %vreg55 to %fp: fp

selectOrSplit GR32Bit:%vreg74 [924r,956r:0)  0@924r
assigning %vreg74 to %fp: fp

selectOrSplit GR32Bit:%vreg93 [332r,364r:0)  0@332r
assigning %vreg93 to %fp: fp

selectOrSplit GR32Bit:%vreg0 [188r,212r:0)  0@188r
assigning %vreg0 to %t1: t1

selectOrSplit GR32Bit:%vreg6 [24r,48r:0)  0@24r
assigning %vreg6 to %t0: t0

selectOrSplit GR32Bit:%vreg25 [452r,476r:0)  0@452r
assigning %vreg25 to %t0: t0

selectOrSplit GR32Bit:%vreg44 [660r,684r:0)  0@660r
assigning %vreg44 to %t1: t1

selectOrSplit GR32Bit:%vreg63 [836r,860r:0)  0@836r
assigning %vreg63 to %t1: t1

selectOrSplit GR32Bit:%vreg82 [244r,268r:0)  0@244r
assigning %vreg82 to %t1: t1

selectOrSplit GR32Bit:%vreg99 [380r,396r:0)  0@380r
assigning %vreg99 to %t1: t1

selectOrSplit GR32Bit:%vreg1 [196r,204r:0)  0@196r
assigning %vreg1 to %t2: t2

selectOrSplit GR32Bit:%vreg3 [204r,212r:0)  0@204r
assigning %vreg3 to %t0: t0

selectOrSplit GR32Bit:%vreg7 [32r,40r:0)  0@32r
assigning %vreg7 to %t1: t1

selectOrSplit GR32Bit:%vreg8 [40r,48r:0)  0@40r
assigning %vreg8 to %t1: t1

selectOrSplit GR32Bit:%vreg12 [72r,80r:0)  0@72r
assigning %vreg12 to %fp: fp

selectOrSplit GR32Bit:%vreg14 [88r,96r:0)  0@88r
assigning %vreg14 to %a0: a0

selectOrSplit GR32Bit:%vreg16 [104r,112r:0)  0@104r
assigning %vreg16 to %a1: a1

selectOrSplit GR32Bit:%vreg18 [120r,128r:0)  0@120r
assigning %vreg18 to %a1: a1

selectOrSplit GR32Bit:%vreg19 [128r,136r:0)  0@128r
assigning %vreg19 to %fp: fp

selectOrSplit GR32Bit:%vreg20 [136r,144r:0)  0@136r
assigning %vreg20 to %fp: fp

selectOrSplit GR32Bit:%vreg21 [144r,152r:0)  0@144r
assigning %vreg21 to %t2: t2

selectOrSplit GR32Bit:%vreg22 [152r,160r:0)  0@152r
assigning %vreg22 to %t1: t1

selectOrSplit GR32Bit:%vreg26 [460r,468r:0)  0@460r
assigning %vreg26 to %t1: t1

selectOrSplit GR32Bit:%vreg27 [468r,476r:0)  0@468r
assigning %vreg27 to %t1: t1

selectOrSplit GR32Bit:%vreg31 [500r,508r:0)  0@500r
assigning %vreg31 to %fp: fp

selectOrSplit GR32Bit:%vreg33 [516r,524r:0)  0@516r
assigning %vreg33 to %a0: a0

selectOrSplit GR32Bit:%vreg35 [532r,540r:0)  0@532r
assigning %vreg35 to %a1: a1

selectOrSplit GR32Bit:%vreg37 [548r,556r:0)  0@548r
assigning %vreg37 to %a1: a1

selectOrSplit GR32Bit:%vreg38 [556r,564r:0)  0@556r
assigning %vreg38 to %fp: fp

selectOrSplit GR32Bit:%vreg39 [564r,572r:0)  0@564r
assigning %vreg39 to %fp: fp

selectOrSplit GR32Bit:%vreg40 [572r,580r:0)  0@572r
assigning %vreg40 to %t2: t2

selectOrSplit GR32Bit:%vreg41 [580r,588r:0)  0@580r
assigning %vreg41 to %t1: t1

selectOrSplit GR32Bit:%vreg45 [668r,676r:0)  0@668r
assigning %vreg45 to %t2: t2

selectOrSplit GR32Bit:%vreg46 [676r,684r:0)  0@676r
assigning %vreg46 to %t2: t2

selectOrSplit GR32Bit:%vreg50 [708r,716r:0)  0@708r
assigning %vreg50 to %a0: a0

selectOrSplit GR32Bit:%vreg52 [724r,732r:0)  0@724r
assigning %vreg52 to %a1: a1

selectOrSplit GR32Bit:%vreg54 [740r,748r:0)  0@740r
assigning %vreg54 to %a2: a2

selectOrSplit GR32Bit:%vreg56 [756r,764r:0)  0@756r
assigning %vreg56 to %a2: a2

selectOrSplit GR32Bit:%vreg57 [764r,772r:0)  0@764r
assigning %vreg57 to %a0: a0

selectOrSplit GR32Bit:%vreg58 [772r,780r:0)  0@772r
assigning %vreg58 to %a0: a0

selectOrSplit GR32Bit:%vreg59 [780r,788r:0)  0@780r
assigning %vreg59 to %fp: fp

selectOrSplit GR32Bit:%vreg60 [788r,796r:0)  0@788r
assigning %vreg60 to %t2: t2

selectOrSplit GR32Bit:%vreg64 [844r,852r:0)  0@844r
assigning %vreg64 to %t2: t2

selectOrSplit GR32Bit:%vreg65 [852r,860r:0)  0@852r
assigning %vreg65 to %t2: t2

selectOrSplit GR32Bit:%vreg69 [884r,892r:0)  0@884r
assigning %vreg69 to %a0: a0

selectOrSplit GR32Bit:%vreg71 [900r,908r:0)  0@900r
assigning %vreg71 to %a1: a1

selectOrSplit GR32Bit:%vreg73 [916r,924r:0)  0@916r
assigning %vreg73 to %a2: a2

selectOrSplit GR32Bit:%vreg75 [932r,940r:0)  0@932r
assigning %vreg75 to %a2: a2

selectOrSplit GR32Bit:%vreg76 [940r,948r:0)  0@940r
assigning %vreg76 to %a0: a0

selectOrSplit GR32Bit:%vreg77 [948r,956r:0)  0@948r
assigning %vreg77 to %a0: a0

selectOrSplit GR32Bit:%vreg78 [956r,964r:0)  0@956r
assigning %vreg78 to %fp: fp

selectOrSplit GR32Bit:%vreg79 [964r,972r:0)  0@964r
assigning %vreg79 to %t2: t2

selectOrSplit GR32Bit:%vreg81 [228r,236r:0)  0@228r
assigning %vreg81 to %t1: t1

selectOrSplit GR32Bit:%vreg83 [252r,260r:0)  0@252r
assigning %vreg83 to %t2: t2

selectOrSplit GR32Bit:%vreg84 [260r,268r:0)  0@260r
assigning %vreg84 to %t2: t2

selectOrSplit GR32Bit:%vreg88 [292r,300r:0)  0@292r
assigning %vreg88 to %a0: a0

selectOrSplit GR32Bit:%vreg90 [308r,316r:0)  0@308r
assigning %vreg90 to %a1: a1

selectOrSplit GR32Bit:%vreg92 [324r,332r:0)  0@324r
assigning %vreg92 to %a2: a2

selectOrSplit GR32Bit:%vreg94 [340r,348r:0)  0@340r
assigning %vreg94 to %a2: a2

selectOrSplit GR32Bit:%vreg95 [348r,356r:0)  0@348r
assigning %vreg95 to %a0: a0

selectOrSplit GR32Bit:%vreg96 [356r,364r:0)  0@356r
assigning %vreg96 to %a0: a0

selectOrSplit GR32Bit:%vreg97 [364r,372r:0)  0@364r
assigning %vreg97 to %fp: fp

selectOrSplit GR32Bit:%vreg98 [372r,380r:0)  0@372r
assigning %vreg98 to %t2: t2

selectOrSplit GR32Bit:%vreg100 [388r,396r:0)  0@388r
assigning %vreg100 to %t2: t2

selectOrSplit GR32Bit:%vreg101 [404r,412r:0)  0@404r
assigning %vreg101 to %t1: t1

selectOrSplit GR32Bit:%vreg102 [596r,604r:0)  0@596r
assigning %vreg102 to %t0: t0

selectOrSplit GR32Bit:%vreg104 [612r,620r:0)  0@612r
assigning %vreg104 to %t1: t1
********** REWRITE VIRTUAL REGISTERS **********
********** Function: redefine_start1
********** REGISTER MAP **********
[%vreg0 -> %t1] GR32Bit
[%vreg1 -> %t2] GR32Bit
[%vreg2 -> %t0] GR32Bit
[%vreg3 -> %t0] GR32Bit
[%vreg6 -> %t0] GR32Bit
[%vreg7 -> %t1] GR32Bit
[%vreg8 -> %t1] GR32Bit
[%vreg9 -> %t0] GR32Bit
[%vreg10 -> %t1] GR32Bit
[%vreg11 -> %t2] GR32Bit
[%vreg12 -> %fp] GR32Bit
[%vreg13 -> %fp] GR32Bit
[%vreg14 -> %a0] GR32Bit
[%vreg15 -> %a0] GR32Bit
[%vreg16 -> %a1] GR32Bit
[%vreg17 -> %t2] GR32Bit
[%vreg18 -> %a1] GR32Bit
[%vreg19 -> %fp] GR32Bit
[%vreg20 -> %fp] GR32Bit
[%vreg21 -> %t2] GR32Bit
[%vreg22 -> %t1] GR32Bit
[%vreg25 -> %t0] GR32Bit
[%vreg26 -> %t1] GR32Bit
[%vreg27 -> %t1] GR32Bit
[%vreg28 -> %t0] GR32Bit
[%vreg29 -> %t1] GR32Bit
[%vreg30 -> %t2] GR32Bit
[%vreg31 -> %fp] GR32Bit
[%vreg32 -> %fp] GR32Bit
[%vreg33 -> %a0] GR32Bit
[%vreg34 -> %a0] GR32Bit
[%vreg35 -> %a1] GR32Bit
[%vreg36 -> %t2] GR32Bit
[%vreg37 -> %a1] GR32Bit
[%vreg38 -> %fp] GR32Bit
[%vreg39 -> %fp] GR32Bit
[%vreg40 -> %t2] GR32Bit
[%vreg41 -> %t1] GR32Bit
[%vreg44 -> %t1] GR32Bit
[%vreg45 -> %t2] GR32Bit
[%vreg46 -> %t2] GR32Bit
[%vreg47 -> %t1] GR32Bit
[%vreg48 -> %t2] GR32Bit
[%vreg49 -> %fp] GR32Bit
[%vreg50 -> %a0] GR32Bit
[%vreg51 -> %a0] GR32Bit
[%vreg52 -> %a1] GR32Bit
[%vreg53 -> %a1] GR32Bit
[%vreg54 -> %a2] GR32Bit
[%vreg55 -> %fp] GR32Bit
[%vreg56 -> %a2] GR32Bit
[%vreg57 -> %a0] GR32Bit
[%vreg58 -> %a0] GR32Bit
[%vreg59 -> %fp] GR32Bit
[%vreg60 -> %t2] GR32Bit
[%vreg63 -> %t1] GR32Bit
[%vreg64 -> %t2] GR32Bit
[%vreg65 -> %t2] GR32Bit
[%vreg66 -> %t1] GR32Bit
[%vreg67 -> %t2] GR32Bit
[%vreg68 -> %fp] GR32Bit
[%vreg69 -> %a0] GR32Bit
[%vreg70 -> %a0] GR32Bit
[%vreg71 -> %a1] GR32Bit
[%vreg72 -> %a1] GR32Bit
[%vreg73 -> %a2] GR32Bit
[%vreg74 -> %fp] GR32Bit
[%vreg75 -> %a2] GR32Bit
[%vreg76 -> %a0] GR32Bit
[%vreg77 -> %a0] GR32Bit
[%vreg78 -> %fp] GR32Bit
[%vreg79 -> %t2] GR32Bit
[%vreg80 -> %t0] GR32Bit
[%vreg81 -> %t1] GR32Bit
[%vreg82 -> %t1] GR32Bit
[%vreg83 -> %t2] GR32Bit
[%vreg84 -> %t2] GR32Bit
[%vreg85 -> %t1] GR32Bit
[%vreg86 -> %t2] GR32Bit
[%vreg87 -> %fp] GR32Bit
[%vreg88 -> %a0] GR32Bit
[%vreg89 -> %a0] GR32Bit
[%vreg90 -> %a1] GR32Bit
[%vreg91 -> %a1] GR32Bit
[%vreg92 -> %a2] GR32Bit
[%vreg93 -> %fp] GR32Bit
[%vreg94 -> %a2] GR32Bit
[%vreg95 -> %a0] GR32Bit
[%vreg96 -> %a0] GR32Bit
[%vreg97 -> %fp] GR32Bit
[%vreg98 -> %t2] GR32Bit
[%vreg99 -> %t1] GR32Bit
[%vreg100 -> %t2] GR32Bit
[%vreg101 -> %t1] GR32Bit
[%vreg102 -> %t0] GR32Bit
[%vreg103 -> %t0] GR32Bit
[%vreg104 -> %t1] GR32Bit

0B	BB#0: derived from LLVM BB %redefine_start1.entry
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg6<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg6
4B		  * %vreg7<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg7
4B		  * %vreg8<def> = SRLI %vreg7<kill>, 12; GR32Bit:%vreg8,%vreg7
4B		  * %vreg9<def> = ADD %vreg6<kill>, %vreg8<kill>; GR32Bit:%vreg9,%vreg6,%vreg8
4B		  * %vreg10<def> = ADDI %zero, 20; GR32Bit:%vreg10
4B		  * %vreg11<def> = SRLI %t5, 22; GR32Bit:%vreg11
4B		  * %vreg12<def> = SRLI %t5, 12; GR32Bit:%vreg12
4B		  * %vreg13<def> = ANDI %vreg12<kill>, 15; GR32Bit:%vreg13,%vreg12
4B		  * %vreg14<def> = SRLI %t5, 6; GR32Bit:%vreg14
4B		  * %vreg15<def> = ANDI %vreg14<kill>, 63; GR32Bit:%vreg15,%vreg14
4B		  * %vreg16<def> = ADDI %zero, 832; GR32Bit:%vreg16
4B		  * %vreg17<def> = MUL %vreg11<kill>, %vreg16<kill>; GR32Bit:%vreg17,%vreg11,%vreg16
4B		  * %vreg18<def> = ADDI %zero, 52; GR32Bit:%vreg18
4B		  * %vreg19<def> = MUL %vreg13<kill>, %vreg18<kill>; GR32Bit:%vreg19,%vreg13,%vreg18
4B		  * %vreg20<def> = ADD %vreg19<kill>, %vreg15<kill>; GR32Bit:%vreg20,%vreg19,%vreg15
4B		  * %vreg21<def> = ADD %vreg20<kill>, %vreg17<kill>; GR32Bit:%vreg21,%vreg20,%vreg17
4B		  * %vreg22<def> = MUL %vreg21<kill>, %vreg10<kill>; GR32Bit:%vreg22,%vreg21,%vreg10
4B		  * %t5<def> = ADD %vreg9<kill>, %vreg22<kill>; GR32Bit:%vreg9,%vreg22
4B		  * %vreg2<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg2
4B		  * SRLI %vreg2, %vreg2, 12; GR32Bit:%vreg2
4B		  * %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
4B		  * %vreg1<def> = LUI <ga:@redefine_in_array>[TF=2]; GR32Bit:%vreg1
4B		  * %vreg3<def> = ADD %vreg2<kill>, %vreg1<kill>; GR32Bit:%vreg3,%vreg2,%vreg1
4B		  * SW %vreg3<kill>, %vreg0<kill>, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0
4B		  * %vreg80<def> = ADDI %zero, 64; GR32Bit:%vreg80
4B		  * %vreg81<def> = ADDI %zero, 1; GR32Bit:%vreg81
4B		  * WRITECM %vreg80, %vreg81<kill>, 60; GR32Bit:%vreg80,%vreg81
4B		  * %vreg82<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg82
4B		  * %vreg83<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg83
4B		  * %vreg84<def> = SRLI %vreg83<kill>, 12; GR32Bit:%vreg84,%vreg83
4B		  * %vreg85<def> = ADD %vreg82<kill>, %vreg84<kill>; GR32Bit:%vreg85,%vreg82,%vreg84
4B		  * %vreg86<def> = ADDI %zero, 20; GR32Bit:%vreg86
4B		  * %vreg87<def> = SRLI %vreg80, 22; GR32Bit:%vreg87,%vreg80
4B		  * %vreg88<def> = SRLI %vreg80, 12; GR32Bit:%vreg88,%vreg80
4B		  * %vreg89<def> = ANDI %vreg88<kill>, 15; GR32Bit:%vreg89,%vreg88
4B		  * %vreg90<def> = SRLI %vreg80, 6; GR32Bit:%vreg90,%vreg80
4B		  * %vreg91<def> = ANDI %vreg90<kill>, 63; GR32Bit:%vreg91,%vreg90
4B		  * %vreg92<def> = ADDI %zero, 832; GR32Bit:%vreg92
4B		  * %vreg93<def> = MUL %vreg87<kill>, %vreg92<kill>; GR32Bit:%vreg93,%vreg87,%vreg92
4B		  * %vreg94<def> = ADDI %zero, 52; GR32Bit:%vreg94
4B		  * %vreg95<def> = MUL %vreg89<kill>, %vreg94<kill>; GR32Bit:%vreg95,%vreg89,%vreg94
4B		  * %vreg96<def> = ADD %vreg95<kill>, %vreg91<kill>; GR32Bit:%vreg96,%vreg95,%vreg91
4B		  * %vreg97<def> = ADD %vreg96<kill>, %vreg93<kill>; GR32Bit:%vreg97,%vreg96,%vreg93
4B		  * %vreg98<def> = MUL %vreg97<kill>, %vreg86<kill>; GR32Bit:%vreg98,%vreg97,%vreg86
4B		  * %vreg99<def> = ADD %vreg98<kill>, %vreg85<kill>; GR32Bit:%vreg99,%vreg98,%vreg85
4B		  * %vreg100<def> = LW %t5, 0; GR32Bit:%vreg100
4B		  * SW %vreg100<kill>, %vreg99<kill>, 16; GR32Bit:%vreg100,%vreg99
4B		  * %vreg101<def> = LUI 1; GR32Bit:%vreg101
4B		  * WRITEPM %vreg101<kill>, %vreg80<kill>, 0; GR32Bit:%vreg101,%vreg80
4B		  * END 0
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
444B		%t4<def> = ADD %t5, %zero
444B		  * %vreg25<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg25
444B		  * %vreg26<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg26
444B		  * %vreg27<def> = SRLI %vreg26<kill>, 12; GR32Bit:%vreg27,%vreg26
444B		  * %vreg28<def> = ADD %vreg25<kill>, %vreg27<kill>; GR32Bit:%vreg28,%vreg25,%vreg27
444B		  * %vreg29<def> = ADDI %zero, 20; GR32Bit:%vreg29
444B		  * %vreg30<def> = SRLI %t5, 22; GR32Bit:%vreg30
444B		  * %vreg31<def> = SRLI %t5, 12; GR32Bit:%vreg31
444B		  * %vreg32<def> = ANDI %vreg31<kill>, 15; GR32Bit:%vreg32,%vreg31
444B		  * %vreg33<def> = SRLI %t5, 6; GR32Bit:%vreg33
444B		  * %vreg34<def> = ANDI %vreg33<kill>, 63; GR32Bit:%vreg34,%vreg33
444B		  * %vreg35<def> = ADDI %zero, 832; GR32Bit:%vreg35
444B		  * %vreg36<def> = MUL %vreg30<kill>, %vreg35<kill>; GR32Bit:%vreg36,%vreg30,%vreg35
444B		  * %vreg37<def> = ADDI %zero, 52; GR32Bit:%vreg37
444B		  * %vreg38<def> = MUL %vreg32<kill>, %vreg37<kill>; GR32Bit:%vreg38,%vreg32,%vreg37
444B		  * %vreg39<def> = ADD %vreg38<kill>, %vreg34<kill>; GR32Bit:%vreg39,%vreg38,%vreg34
444B		  * %vreg40<def> = ADD %vreg39<kill>, %vreg36<kill>; GR32Bit:%vreg40,%vreg39,%vreg36
444B		  * %vreg41<def> = MUL %vreg40<kill>, %vreg29<kill>; GR32Bit:%vreg41,%vreg40,%vreg29
444B		  * %t5<def> = ADD %vreg28<kill>, %vreg41<kill>; GR32Bit:%vreg28,%vreg41
444B		  * %vreg102<def> = LUI 1; GR32Bit:%vreg102
444B		  * %vreg103<def> = DREADPM %vreg102<kill>, 0; GR32Bit:%vreg103,%vreg102
444B		  * %vreg104<def> = LUI 1048575; GR32Bit:%vreg104
444B		  * %a5<def> = LUI 4095
444B		  * %a5<def> = SRLI %a5<internal>, 12
444B		  * ADD %vreg104, %vreg104, %a5; GR32Bit:%vreg104
444B		  * SYNC %vreg103, %vreg104<kill>, 60; GR32Bit:%vreg103,%vreg104
444B		  * END 0
444B		  * %zero<def> = ADDI %zero, 0
444B		  * %zero<def> = ADDI %zero, 0
652B		%t4<def> = ADD %t5, %zero
652B		  * %vreg44<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg44
652B		  * %vreg45<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg45
652B		  * %vreg46<def> = SRLI %vreg45<kill>, 12; GR32Bit:%vreg46,%vreg45
652B		  * %vreg47<def> = ADD %vreg44<kill>, %vreg46<kill>; GR32Bit:%vreg47,%vreg44,%vreg46
652B		  * %vreg48<def> = ADDI %zero, 20; GR32Bit:%vreg48
652B		  * %vreg49<def> = SRLI %t5, 22; GR32Bit:%vreg49
652B		  * %vreg50<def> = SRLI %t5, 12; GR32Bit:%vreg50
652B		  * %vreg51<def> = ANDI %vreg50<kill>, 15; GR32Bit:%vreg51,%vreg50
652B		  * %vreg52<def> = SRLI %t5, 6; GR32Bit:%vreg52
652B		  * %vreg53<def> = ANDI %vreg52<kill>, 63; GR32Bit:%vreg53,%vreg52
652B		  * %vreg54<def> = ADDI %zero, 832; GR32Bit:%vreg54
652B		  * %vreg55<def> = MUL %vreg49<kill>, %vreg54<kill>; GR32Bit:%vreg55,%vreg49,%vreg54
652B		  * %vreg56<def> = ADDI %zero, 52; GR32Bit:%vreg56
652B		  * %vreg57<def> = MUL %vreg51<kill>, %vreg56<kill>; GR32Bit:%vreg57,%vreg51,%vreg56
652B		  * %vreg58<def> = ADD %vreg57<kill>, %vreg53<kill>; GR32Bit:%vreg58,%vreg57,%vreg53
652B		  * %vreg59<def> = ADD %vreg58<kill>, %vreg55<kill>; GR32Bit:%vreg59,%vreg58,%vreg55
652B		  * %vreg60<def> = MUL %vreg59<kill>, %vreg48<kill>; GR32Bit:%vreg60,%vreg59,%vreg48
652B		  * %t5<def> = ADD %vreg47<kill>, %vreg60<kill>; GR32Bit:%vreg47,%vreg60
652B		  * END 0
652B		  * %zero<def> = ADDI %zero, 0
652B		  * %zero<def> = ADDI %zero, 0
828B		%t4<def> = ADD %t5, %zero
828B		  * %vreg63<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg63
828B		  * %vreg64<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg64
828B		  * %vreg65<def> = SRLI %vreg64<kill>, 12; GR32Bit:%vreg65,%vreg64
828B		  * %vreg66<def> = ADD %vreg63<kill>, %vreg65<kill>; GR32Bit:%vreg66,%vreg63,%vreg65
828B		  * %vreg67<def> = ADDI %zero, 20; GR32Bit:%vreg67
828B		  * %vreg68<def> = SRLI %t5, 22; GR32Bit:%vreg68
828B		  * %vreg69<def> = SRLI %t5, 12; GR32Bit:%vreg69
828B		  * %vreg70<def> = ANDI %vreg69<kill>, 15; GR32Bit:%vreg70,%vreg69
828B		  * %vreg71<def> = SRLI %t5, 6; GR32Bit:%vreg71
828B		  * %vreg72<def> = ANDI %vreg71<kill>, 63; GR32Bit:%vreg72,%vreg71
828B		  * %vreg73<def> = ADDI %zero, 832; GR32Bit:%vreg73
828B		  * %vreg74<def> = MUL %vreg68<kill>, %vreg73<kill>; GR32Bit:%vreg74,%vreg68,%vreg73
828B		  * %vreg75<def> = ADDI %zero, 52; GR32Bit:%vreg75
828B		  * %vreg76<def> = MUL %vreg70<kill>, %vreg75<kill>; GR32Bit:%vreg76,%vreg70,%vreg75
828B		  * %vreg77<def> = ADD %vreg76<kill>, %vreg72<kill>; GR32Bit:%vreg77,%vreg76,%vreg72
828B		  * %vreg78<def> = ADD %vreg77<kill>, %vreg74<kill>; GR32Bit:%vreg78,%vreg77,%vreg74
828B		  * %vreg79<def> = MUL %vreg78<kill>, %vreg67<kill>; GR32Bit:%vreg79,%vreg78,%vreg67
828B		  * %t5<def> = ADD %vreg66<kill>, %vreg79<kill>; GR32Bit:%vreg66,%vreg79
828B		  * END 0
828B		  * %zero<def> = ADDI %zero, 0
828B		  * %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 20
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = LUI <MCSym="%lo("ga#0")">
> SRLI %t0, %t0, 12
> %t1<def> = ADDI %t5, <fi#0>
> %t2<def> = LUI <ga:@redefine_in_array>[TF=2]
> %t0<def> = ADD %t0<kill>, %t2<kill>
> SW %t0<kill>, %t1<kill>, 0; mem:ST4[%0]
> %t0<def> = ADDI %zero, 64
> %t1<def> = ADDI %zero, 1
> WRITECM %t0, %t1<kill>, 60
> %t1<def> = LUI <MCSym="%hi("ga#512")">
> %t2<def> = LUI <MCSym="%lo("ga#512")">
> %t2<def> = SRLI %t2<kill>, 12
> %t1<def> = ADD %t1<kill>, %t2<kill>
> %t2<def> = ADDI %zero, 20
> %fp<def> = SRLI %t0, 22
> %a0<def> = SRLI %t0, 12
> %a0<def> = ANDI %a0<kill>, 15
> %a1<def> = SRLI %t0, 6
> %a1<def> = ANDI %a1<kill>, 63
> %a2<def> = ADDI %zero, 832
> %fp<def> = MUL %fp<kill>, %a2<kill>
> %a2<def> = ADDI %zero, 52
> %a0<def> = MUL %a0<kill>, %a2<kill>
> %a0<def> = ADD %a0<kill>, %a1<kill>
> %fp<def> = ADD %a0<kill>, %fp<kill>
> %t2<def> = MUL %fp<kill>, %t2<kill>
> %t1<def> = ADD %t2<kill>, %t1<kill>
> %t2<def> = LW %t5, 0
> SW %t2<kill>, %t1<kill>, 16
> %t1<def> = LUI 1
> WRITEPM %t1<kill>, %t0<kill>, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 20
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = LUI 1
> %t0<def> = DREADPM %t0<kill>, 0
> %t1<def> = LUI 1048575
> %a5<def> = LUI 4095
> %a5<def> = SRLI %a5<internal>, 12
> ADD %t1, %t1, %a5
> SYNC %t0, %t1<kill>, 60
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t1<def> = LUI <MCSym="%hi("ga#512")">
> %t2<def> = LUI <MCSym="%lo("ga#512")">
> %t2<def> = SRLI %t2<kill>, 12
> %t1<def> = ADD %t1<kill>, %t2<kill>
> %t2<def> = ADDI %zero, 20
> %fp<def> = SRLI %t5, 22
> %a0<def> = SRLI %t5, 12
> %a0<def> = ANDI %a0<kill>, 15
> %a1<def> = SRLI %t5, 6
> %a1<def> = ANDI %a1<kill>, 63
> %a2<def> = ADDI %zero, 832
> %fp<def> = MUL %fp<kill>, %a2<kill>
> %a2<def> = ADDI %zero, 52
> %a0<def> = MUL %a0<kill>, %a2<kill>
> %a0<def> = ADD %a0<kill>, %a1<kill>
> %fp<def> = ADD %a0<kill>, %fp<kill>
> %t2<def> = MUL %fp<kill>, %t2<kill>
> %t5<def> = ADD %t1<kill>, %t2<kill>
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t1<def> = LUI <MCSym="%hi("ga#512")">
> %t2<def> = LUI <MCSym="%lo("ga#512")">
> %t2<def> = SRLI %t2<kill>, 12
> %t1<def> = ADD %t1<kill>, %t2<kill>
> %t2<def> = ADDI %zero, 20
> %fp<def> = SRLI %t5, 22
> %a0<def> = SRLI %t5, 12
> %a0<def> = ANDI %a0<kill>, 15
> %a1<def> = SRLI %t5, 6
> %a1<def> = ANDI %a1<kill>, 63
> %a2<def> = ADDI %zero, 832
> %fp<def> = MUL %fp<kill>, %a2<kill>
> %a2<def> = ADDI %zero, 52
> %a0<def> = MUL %a0<kill>, %a2<kill>
> %a0<def> = ADD %a0<kill>, %a1<kill>
> %fp<def> = ADD %a0<kill>, %fp<kill>
> %t2<def> = MUL %fp<kill>, %t2<kill>
> %t5<def> = ADD %t1<kill>, %t2<kill>
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
********** EMITTING LIVE DEBUG VARIABLES **********
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: redefine_start1
max x:0, min x:0
max y:0, min y:0
current state of mf:# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %redefine_start1.entry
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 20
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = LUI <MCSym="%lo("ga#0")">
	  * SRLI %t0, %t0, 12
	  * %t1<def> = ADDI %t5, <fi#0>
	  * %t2<def> = LUI <ga:@redefine_in_array>[TF=2]
	  * %t0<def> = ADD %t0<kill>, %t2<kill>
	  * SW %t0<kill>, %t1<kill>, 0; mem:ST4[%0]
	  * %t0<def> = ADDI %zero, 64
	  * %t1<def> = ADDI %zero, 1
	  * WRITECM %t0, %t1<kill>, 60
	  * %t1<def> = LUI <MCSym="%hi("ga#512")">
	  * %t2<def> = LUI <MCSym="%lo("ga#512")">
	  * %t2<def> = SRLI %t2<kill>, 12
	  * %t1<def> = ADD %t1<kill>, %t2<kill>
	  * %t2<def> = ADDI %zero, 20
	  * %fp<def> = SRLI %t0, 22
	  * %a0<def> = SRLI %t0, 12
	  * %a0<def> = ANDI %a0<kill>, 15
	  * %a1<def> = SRLI %t0, 6
	  * %a1<def> = ANDI %a1<kill>, 63
	  * %a2<def> = ADDI %zero, 832
	  * %fp<def> = MUL %fp<kill>, %a2<kill>
	  * %a2<def> = ADDI %zero, 52
	  * %a0<def> = MUL %a0<kill>, %a2<kill>
	  * %a0<def> = ADD %a0<kill>, %a1<kill>
	  * %fp<def> = ADD %a0<kill>, %fp<kill>
	  * %t2<def> = MUL %fp<kill>, %t2<kill>
	  * %t1<def> = ADD %t2<kill>, %t1<kill>
	  * %t2<def> = LW %t5, 0
	  * SW %t2<kill>, %t1<kill>, 16
	  * %t1<def> = LUI 1
	  * WRITEPM %t1<kill>, %t0<kill>, 0
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 20
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = LUI 1
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * %t1<def> = LUI 1048575
	  * %a5<def> = LUI 4095
	  * %a5<def> = SRLI %a5<internal>, 12
	  * ADD %t1, %t1, %a5
	  * SYNC %t0, %t1<kill>, 60
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t1<def> = LUI <MCSym="%hi("ga#512")">
	  * %t2<def> = LUI <MCSym="%lo("ga#512")">
	  * %t2<def> = SRLI %t2<kill>, 12
	  * %t1<def> = ADD %t1<kill>, %t2<kill>
	  * %t2<def> = ADDI %zero, 20
	  * %fp<def> = SRLI %t5, 22
	  * %a0<def> = SRLI %t5, 12
	  * %a0<def> = ANDI %a0<kill>, 15
	  * %a1<def> = SRLI %t5, 6
	  * %a1<def> = ANDI %a1<kill>, 63
	  * %a2<def> = ADDI %zero, 832
	  * %fp<def> = MUL %fp<kill>, %a2<kill>
	  * %a2<def> = ADDI %zero, 52
	  * %a0<def> = MUL %a0<kill>, %a2<kill>
	  * %a0<def> = ADD %a0<kill>, %a1<kill>
	  * %fp<def> = ADD %a0<kill>, %fp<kill>
	  * %t2<def> = MUL %fp<kill>, %t2<kill>
	  * %t5<def> = ADD %t1<kill>, %t2<kill>
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t1<def> = LUI <MCSym="%hi("ga#512")">
	  * %t2<def> = LUI <MCSym="%lo("ga#512")">
	  * %t2<def> = SRLI %t2<kill>, 12
	  * %t1<def> = ADD %t1<kill>, %t2<kill>
	  * %t2<def> = ADDI %zero, 20
	  * %fp<def> = SRLI %t5, 22
	  * %a0<def> = SRLI %t5, 12
	  * %a0<def> = ANDI %a0<kill>, 15
	  * %a1<def> = SRLI %t5, 6
	  * %a1<def> = ANDI %a1<kill>, 63
	  * %a2<def> = ADDI %zero, 832
	  * %fp<def> = MUL %fp<kill>, %a2<kill>
	  * %a2<def> = ADDI %zero, 52
	  * %a0<def> = MUL %a0<kill>, %a2<kill>
	  * %a0<def> = ADD %a0<kill>, %a1<kill>
	  * %fp<def> = ADD %a0<kill>, %fp<kill>
	  * %t2<def> = MUL %fp<kill>, %t2<kill>
	  * %t5<def> = ADD %t1<kill>, %t2<kill>
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0

# End machine code for function redefine_start1.

lowering frame index for func redefine_start1:0 TO VAL:0
CGP: Found      local addrmode: [Base:%0]
CGP: Found      local addrmode: [Base:@redefine_out_parameter]
Computing probabilities for redefine_start2.return
Computing probabilities for redefine_start2.newName01



=== redefine_start2
visiting load instruction   %1 = load float* %0
I was here to add float* %0
arg match found with argIndex:-1
Argument does not have assigned frame index!
The value is an argument for which I am here to get arg frame index as:0
whats the index?-1
with I type floatand sd value :0x389d100: i32 = FrameIndex<-1>
new load?0x389cb00: f32,ch = load 0x387f108, 0x389d100, 0x389d000<LD4[%0]>
dag after load is dealt with?SelectionDAG has 6 nodes:
  0x389d100: i32 = FrameIndex<-1>

  0x389d000: i32 = undef

    0x387f108: <multiple use>
    0x389d100: <multiple use>
    0x389d000: <multiple use>
  0x389ca00: i32,ch = load 0x387f108, 0x389d100, 0x389d000<LD4[FixedStack-1]>

  0x389c700: i32 = Constant<0>

    0x387f108: <multiple use>
    0x389d100: <multiple use>
    0x389d000: <multiple use>
  0x389cb00: f32,ch = load 0x387f108, 0x389d100, 0x389d000<LD4[%0]>

  0x387f108: ch = EntryToken


store visit is after?  store float %1, float* @redefine_out_parameter, align 4
I was here to add @redefine_out_parameter = common global float 0.000000e+00, align 4
whats in dag after store?SelectionDAG has 8 nodes:
  0x387f108: ch = EntryToken [ORD=4]

  0x389d100: i32 = FrameIndex<-1> [ORD=4]

  0x389d000: i32 = undef [ORD=4]

    0x387f108: <multiple use>
    0x389d100: <multiple use>
    0x389d000: <multiple use>
  0x389ca00: i32,ch = load 0x387f108, 0x389d100, 0x389d000<LD4[FixedStack-1]>

  0x389c700: i32 = Constant<0>

    0x387f108: <multiple use>
      0x387f108: <multiple use>
      0x389d100: <multiple use>
      0x389d000: <multiple use>
    0x389cb00: f32,ch = load 0x387f108, 0x389d100, 0x389d000<LD4[%0]> [ORD=4]

    0x389cf00: i32 = GlobalAddress<float* @redefine_out_parameter> 0 [ORD=5]

    0x389d000: <multiple use>
  0x389ce00: ch = store 0x387f108, 0x389cb00, 0x389cf00, 0x389d000<ST4[@redefine_out_parameter]> [ORD=5]


Initial selection DAG: BB#0 'redefine_start2:redefine_start2.newName01'
SelectionDAG has 8 nodes:
  0x387f108: ch = EntryToken [ORD=4]

  0x389d100: i32 = FrameIndex<-1> [ORD=4]

  0x389d000: i32 = undef [ORD=4]

    0x387f108: <multiple use>
    0x389d100: <multiple use>
    0x389d000: <multiple use>
  0x389ca00: i32,ch = load 0x387f108, 0x389d100, 0x389d000<LD4[FixedStack-1]>

  0x389c700: i32 = Constant<0>

    0x387f108: <multiple use>
      0x387f108: <multiple use>
      0x389d100: <multiple use>
      0x389d000: <multiple use>
    0x389cb00: f32,ch = load 0x387f108, 0x389d100, 0x389d000<LD4[%0]> [ORD=4]

    0x389cf00: i32 = GlobalAddress<float* @redefine_out_parameter> 0 [ORD=5]

    0x389d000: <multiple use>
  0x389ce00: ch = store 0x387f108, 0x389cb00, 0x389cf00, 0x389d000<ST4[@redefine_out_parameter]> [ORD=5]



Replacing.1 0x389cb00: f32,ch = load 0x387f108, 0x389d100, 0x389d000<LD4[%0](align=16)> [ORD=4]

With: 0x389cb00: f32,ch = load 0x387f108, 0x389d100, 0x389d000<LD4[%0](align=16)> [ORD=4]
 and 1 other values
Optimized lowered selection DAG: BB#0 'redefine_start2:redefine_start2.newName01'
SelectionDAG has 6 nodes:
  0x387f108: ch = EntryToken [ORD=4]

  0x389d000: i32 = undef [ORD=4]

    0x387f108: <multiple use>
      0x387f108: <multiple use>
      0x389d100: i32 = FrameIndex<-1> [ORD=4]

      0x389d000: <multiple use>
    0x389cb00: f32,ch = load 0x387f108, 0x389d100, 0x389d000<LD4[%0](align=16)> [ORD=4]

    0x389cf00: i32 = GlobalAddress<float* @redefine_out_parameter> 0 [ORD=5]

    0x389d000: <multiple use>
  0x389ce00: ch = store 0x387f108, 0x389cb00, 0x389cf00, 0x389d000<ST4[@redefine_out_parameter]> [ORD=5]


Legally typed node: 0x389cf00: i32 = GlobalAddress<float* @redefine_out_parameter> 0 [ORD=5] [ID=0]

Legally typed node: 0x389d000: i32 = undef [ORD=4] [ID=0]

Legally typed node: 0x389d100: i32 = FrameIndex<-1> [ORD=4] [ID=0]

Legally typed node: 0x387f108: ch = EntryToken [ORD=4] [ID=0]

Legally typed node: 0x389cb00: f32,ch = load 0x387f108, 0x389d100, 0x389d000<LD4[%0](align=16)> [ORD=4] [ID=0]

Legally typed node: 0x389ce00: ch = store 0x387f108, 0x389cb00, 0x389cf00, 0x389d000<ST4[@redefine_out_parameter]> [ORD=5] [ID=0]

Legally typed node: 0x7fff6fb15090: ch = handlenode 0x389ce00 [ID=0]

Type-legalized selection DAG: BB#0 'redefine_start2:redefine_start2.newName01'
SelectionDAG has 6 nodes:
  0x387f108: ch = EntryToken [ORD=4] [ID=-3]

  0x389d000: i32 = undef [ORD=4] [ID=-3]

    0x387f108: <multiple use>
      0x387f108: <multiple use>
      0x389d100: i32 = FrameIndex<-1> [ORD=4] [ID=-3]

      0x389d000: <multiple use>
    0x389cb00: f32,ch = load 0x387f108, 0x389d100, 0x389d000<LD4[%0](align=16)> [ORD=4] [ID=-3]

    0x389cf00: i32 = GlobalAddress<float* @redefine_out_parameter> 0 [ORD=5] [ID=-3]

    0x389d000: <multiple use>
  0x389ce00: ch = store 0x387f108, 0x389cb00, 0x389cf00, 0x389d000<ST4[@redefine_out_parameter]> [ORD=5] [ID=-3]


Legalized selection DAG: BB#0 'redefine_start2:redefine_start2.newName01'
SelectionDAG has 10 nodes:
  0x387f108: ch = EntryToken [ORD=4] [ID=0]

  0x389d000: i32 = undef [ORD=4] [ID=2]

    0x387f108: <multiple use>
      0x387f108: <multiple use>
      0x389d100: i32 = FrameIndex<-1> [ORD=4] [ID=1]

      0x389d000: <multiple use>
    0x389cb00: f32,ch = load 0x387f108, 0x389d100, 0x389d000<LD4[%0](align=16)> [ORD=4] [ID=4]

        0x389ca00: i32 = TargetGlobalAddress<float* @redefine_out_parameter> 0 [TF=2]

      0x389cd00: i32 = REDEFINEISD::Hi 0x389ca00

        0x389c700: i32 = TargetGlobalAddress<float* @redefine_out_parameter> 0 [TF=3]

      0x389cc00: i32 = REDEFINEISD::Lo 0x389c700

    0x389c900: i32 = add 0x389cd00, 0x389cc00

    0x389d000: <multiple use>
  0x389ce00: ch = store 0x387f108, 0x389cb00, 0x389c900, 0x389d000<ST4[@redefine_out_parameter]> [ORD=5] [ID=5]


Optimized legalized selection DAG: BB#0 'redefine_start2:redefine_start2.newName01'
SelectionDAG has 10 nodes:
  0x387f108: ch = EntryToken [ORD=4] [ID=0]

  0x389d000: i32 = undef [ORD=4] [ID=2]

    0x387f108: <multiple use>
      0x387f108: <multiple use>
      0x389d100: i32 = FrameIndex<-1> [ORD=4] [ID=1]

      0x389d000: <multiple use>
    0x389cb00: f32,ch = load 0x387f108, 0x389d100, 0x389d000<LD4[%0](align=16)> [ORD=4] [ID=4]

        0x389ca00: i32 = TargetGlobalAddress<float* @redefine_out_parameter> 0 [TF=2]

      0x389cd00: i32 = REDEFINEISD::Hi 0x389ca00

        0x389c700: i32 = TargetGlobalAddress<float* @redefine_out_parameter> 0 [TF=3]

      0x389cc00: i32 = REDEFINEISD::Lo 0x389c700

    0x389c900: i32 = add 0x389cd00, 0x389cc00

    0x389d000: <multiple use>
  0x389ce00: ch = store 0x387f108, 0x389cb00, 0x389c900, 0x389d000<ST4[@redefine_out_parameter]> [ORD=5] [ID=5]


===== Instruction selection begins: BB#0 'redefine_start2.newName01'
ISEL: Starting pattern match on root node: 0x389ce00: ch = store 0x387f108, 0x389cb00, 0x389c900, 0x389d000<ST4[@redefine_out_parameter]> [ORD=5] [ID=9]

  Initial Opcode index to 178
  Skipped scope entry (due to false predicate) at index 183, continuing at 243
  Morphed node: 0x389ce00: ch = FSW 0x389cb00, 0x389c900, 0x389cf00, 0x387f108<Mem:ST4[@redefine_out_parameter]> [ORD=5]

ISEL: Match complete!
=> 0x389ce00: ch = FSW 0x389cb00, 0x389c900, 0x389cf00, 0x387f108<Mem:ST4[@redefine_out_parameter]> [ORD=5]

ISEL: Starting pattern match on root node: 0x389c900: i32 = add 0x389cd00, 0x389cc00 [ID=8]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x389c900: i32 = ADD 0x389cc00, 0x389cd00

ISEL: Match complete!
=> 0x389c900: i32 = ADD 0x389cc00, 0x389cd00

ISEL: Starting pattern match on root node: 0x389cc00: i32 = REDEFINEISD::Lo 0x389c700 [ID=7]

  Initial Opcode index to 1204
  Morphed node: 0x389cc00: i32 = ADDI 0x389c800, 0x389c700

ISEL: Match complete!
=> 0x389cc00: i32 = ADDI 0x389c800, 0x389c700

ISEL: Starting pattern match on root node: 0x389cd00: i32 = REDEFINEISD::Hi 0x389ca00 [ID=6]

  Initial Opcode index to 1186
  Morphed node: 0x389cd00: i32 = LUI 0x389ca00

ISEL: Match complete!
=> 0x389cd00: i32 = LUI 0x389ca00

ISEL: Starting pattern match on root node: 0x389cb00: f32,ch = load 0x387f108, 0x389d100, 0x389d000<LD4[%0](align=16)> [ORD=4] [ID=5]

  Initial Opcode index to 5
  TypeSwitch[f32] from 10 to 159
  Morphed node: 0x389cb00: f32,ch = FLW 0x389d100, 0x389cf00, 0x387f108<Mem:LD4[%0](align=16)> [ORD=4]

ISEL: Match complete!
=> 0x389cb00: f32,ch = FLW 0x389d100, 0x389cf00, 0x387f108<Mem:LD4[%0](align=16)> [ORD=4]

=> 0x389c700: i32 = TargetGlobalAddress<float* @redefine_out_parameter> 0 [TF=3]

=> 0x389ca00: i32 = TargetGlobalAddress<float* @redefine_out_parameter> 0 [TF=2]

=> 0x387f108: ch = EntryToken [ORD=4]

===== Instruction selection ends:
Selected selection DAG: BB#0 'redefine_start2:redefine_start2.newName01'
SelectionDAG has 13 nodes:
  0x387f108: ch = EntryToken [ORD=4]

  0x389cf00: i32 = TargetConstant<0>

        0x389d000: i32 = Register %t5

        0x389d200: i32 = TargetFrameIndex<-1>

      0x389d100: i32 = ADDI 0x389d000, 0x389d200 [ORD=4]

      0x389cf00: <multiple use>
      0x387f108: <multiple use>
    0x389cb00: f32,ch = FLW 0x389d100, 0x389cf00, 0x387f108<Mem:LD4[%0](align=16)> [ORD=4]

        0x389c800: i32 = Register %zero

        0x389c700: i32 = TargetGlobalAddress<float* @redefine_out_parameter> 0 [TF=3]

      0x389cc00: i32 = ADDI 0x389c800, 0x389c700

        0x389ca00: i32 = TargetGlobalAddress<float* @redefine_out_parameter> 0 [TF=2]

      0x389cd00: i32 = LUI 0x389ca00

    0x389c900: i32 = ADD 0x389cc00, 0x389cd00

    0x389cf00: <multiple use>
    0x387f108: <multiple use>
  0x389ce00: ch = FSW 0x389cb00, 0x389c900, 0x389cf00, 0x387f108<Mem:ST4[@redefine_out_parameter]> [ORD=5]


********** List Scheduling BB#0 'redefine_start2.newName01' **********
SU(0): 0x389ce00: ch = FSW 0x389cb00, 0x389c900, 0x389cf00, 0x387f108<Mem:ST4[@redefine_out_parameter]> [ORD=5] [ID=0]

  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
   val SU(4): Latency=1
   val SU(1): Latency=1

SU(1): 0x389c900: i32 = ADD 0x389cc00, 0x389cd00 [ID=1]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
   val SU(3): Latency=1
   val SU(2): Latency=1
  Successors:
   val SU(0): Latency=1

SU(2): 0x389cd00: i32 = LUI 0x389ca00 [ID=2]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
   val SU(1): Latency=1

SU(3): 0x389cc00: i32 = ADDI 0x389c800, 0x389c700 [ID=3]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
   val SU(1): Latency=1

SU(4): 0x389cb00: f32,ch = FLW 0x389d100, 0x389cf00, 0x387f108<Mem:LD4[%0](align=16)> [ORD=4] [ID=4]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
   val SU(5): Latency=1
  Successors:
   val SU(0): Latency=1

SU(5): 0x389d100: i32 = ADDI 0x389d000, 0x389d200 [ORD=4] [ID=5]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
   val SU(4): Latency=1


Examining Available:
Height 0: SU(0): 0x389ce00: ch = FSW 0x389cb00, 0x389c900, 0x389cf00, 0x387f108<Mem:ST4[@redefine_out_parameter]> [ORD=5] [ID=0]


*** Scheduling [0]: SU(0): 0x389ce00: ch = FSW 0x389cb00, 0x389c900, 0x389cf00, 0x387f108<Mem:ST4[@redefine_out_parameter]> [ORD=5] [ID=0]


Examining Available:
Height 1: SU(1): 0x389c900: i32 = ADD 0x389cc00, 0x389cd00 [ID=1]

Height 1: SU(4): 0x389cb00: f32,ch = FLW 0x389d100, 0x389cf00, 0x387f108<Mem:LD4[%0](align=16)> [ORD=4] [ID=4]


*** Scheduling [1]: SU(1): 0x389c900: i32 = ADD 0x389cc00, 0x389cd00 [ID=1]


Examining Available:
Height 2: SU(3): 0x389cc00: i32 = ADDI 0x389c800, 0x389c700 [ID=3]

Height 2: SU(2): 0x389cd00: i32 = LUI 0x389ca00 [ID=2]

Height 1: SU(4): 0x389cb00: f32,ch = FLW 0x389d100, 0x389cf00, 0x387f108<Mem:LD4[%0](align=16)> [ORD=4] [ID=4]


*** Scheduling [2]: SU(3): 0x389cc00: i32 = ADDI 0x389c800, 0x389c700 [ID=3]


Examining Available:
Height 2: SU(2): 0x389cd00: i32 = LUI 0x389ca00 [ID=2]

Height 1: SU(4): 0x389cb00: f32,ch = FLW 0x389d100, 0x389cf00, 0x387f108<Mem:LD4[%0](align=16)> [ORD=4] [ID=4]


*** Scheduling [3]: SU(2): 0x389cd00: i32 = LUI 0x389ca00 [ID=2]


Examining Available:
Height 1: SU(4): 0x389cb00: f32,ch = FLW 0x389d100, 0x389cf00, 0x387f108<Mem:LD4[%0](align=16)> [ORD=4] [ID=4]


*** Scheduling [4]: SU(4): 0x389cb00: f32,ch = FLW 0x389d100, 0x389cf00, 0x387f108<Mem:LD4[%0](align=16)> [ORD=4] [ID=4]


Examining Available:
Height 5: SU(5): 0x389d100: i32 = ADDI 0x389d000, 0x389d200 [ORD=4] [ID=5]


*** Scheduling [5]: SU(5): 0x389d100: i32 = ADDI 0x389d000, 0x389d200 [ORD=4] [ID=5]

*** Final schedule ***
SU(5): 0x389d100: i32 = ADDI 0x389d000, 0x389d200 [ORD=4] [ID=5]

SU(4): 0x389cb00: f32,ch = FLW 0x389d100, 0x389cf00, 0x387f108<Mem:LD4[%0](align=16)> [ORD=4] [ID=4]

SU(2): 0x389cd00: i32 = LUI 0x389ca00 [ID=2]

SU(3): 0x389cc00: i32 = ADDI 0x389c800, 0x389c700 [ID=3]

SU(1): 0x389c900: i32 = ADD 0x389cc00, 0x389cd00 [ID=1]

SU(0): 0x389ce00: ch = FSW 0x389cb00, 0x389c900, 0x389cf00, 0x387f108<Mem:ST4[@redefine_out_parameter]> [ORD=5] [ID=0]


Total amount of phi nodes to update: 0
Initial selection DAG: BB#1 'redefine_start2:redefine_start2.return'
SelectionDAG has 1 nodes:
  0x387f108: ch = EntryToken


Optimized lowered selection DAG: BB#1 'redefine_start2:redefine_start2.return'
SelectionDAG has 1 nodes:
  0x387f108: ch = EntryToken


Legally typed node: 0x387f108: ch = EntryToken [ID=0]

Legally typed node: 0x7fff6fb15090: ch = handlenode 0x387f108 [ID=0]

Type-legalized selection DAG: BB#1 'redefine_start2:redefine_start2.return'
SelectionDAG has 1 nodes:
  0x387f108: ch = EntryToken [ID=-3]


Legalized selection DAG: BB#1 'redefine_start2:redefine_start2.return'
SelectionDAG has 1 nodes:
  0x387f108: ch = EntryToken [ID=0]


Optimized legalized selection DAG: BB#1 'redefine_start2:redefine_start2.return'
SelectionDAG has 1 nodes:
  0x387f108: ch = EntryToken [ID=0]


===== Instruction selection begins: BB#1 'redefine_start2.return'
=> 0x387f108: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: BB#1 'redefine_start2:redefine_start2.return'
SelectionDAG has 1 nodes:
  0x387f108: ch = EntryToken


********** List Scheduling BB#1 'redefine_start2.return' **********
*** Final schedule ***

Total amount of phi nodes to update: 0

*** Tail-duplicating BB#1

Merging into block: BB#0: derived from LLVM BB %redefine_start2.newName01
	%vreg0<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg0
	%vreg1<def> = FLW %vreg0<kill>, 0; mem:LD4[%0](align=16) FP32Bit:%vreg1 GR32Bit:%vreg0
	%vreg2<def> = LUI <ga:@redefine_out_parameter>[TF=2]; GR32Bit:%vreg2
	%vreg3<def> = ADDI %zero, <ga:@redefine_out_parameter>[TF=3]; GR32Bit:%vreg3
	%vreg4<def> = ADD %vreg3<kill>, %vreg2<kill>; GR32Bit:%vreg4,%vreg3,%vreg2
	FSW %vreg1<kill>, %vreg4<kill>, 0; mem:ST4[@redefine_out_parameter] FP32Bit:%vreg1 GR32Bit:%vreg4
    Successors according to CFG: BB#1
From MBB: BB#1: derived from LLVM BB %redefine_start2.return
    Predecessors according to CFG: BB#0

Removing MBB: BB#1: derived from LLVM BB %redefine_start2.return
# Machine code for function redefine_start2: SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start2.newName01
16B		%vreg0<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg0
32B		%vreg1<def> = FLW %vreg0<kill>, 0; mem:LD4[%0](align=16) FP32Bit:%vreg1 GR32Bit:%vreg0
48B		%vreg2<def> = LUI <ga:@redefine_out_parameter>[TF=2]; GR32Bit:%vreg2
64B		%vreg3<def> = ADDI %zero, <ga:@redefine_out_parameter>[TF=3]; GR32Bit:%vreg3
80B		%vreg4<def> = ADD %vreg3<kill>, %vreg2<kill>; GR32Bit:%vreg4,%vreg3,%vreg2
96B		FSW %vreg1<kill>, %vreg4<kill>, 0; mem:ST4[@redefine_out_parameter] FP32Bit:%vreg1 GR32Bit:%vreg4

# End machine code for function redefine_start2.

********** Stack Coloring **********
********** Function: redefine_start2
******** Pre-regalloc Machine LICM: redefine_start2 ********
******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: redefine_start2
********** PROCESS IMPLICIT DEFS **********
********** Function: redefine_start2
********** REWRITING TWO-ADDR INSTRS **********
********** Function: redefine_start2
# Machine code for function redefine_start2: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start2.newName01
16B		%vreg0<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg0
32B		%vreg1<def> = FLW %vreg0<kill>, 0; mem:LD4[%0](align=16) FP32Bit:%vreg1 GR32Bit:%vreg0
48B		%vreg2<def> = LUI <ga:@redefine_out_parameter>[TF=2]; GR32Bit:%vreg2
64B		%vreg3<def> = ADDI %zero, <ga:@redefine_out_parameter>[TF=3]; GR32Bit:%vreg3
80B		%vreg4<def> = ADD %vreg3<kill>, %vreg2<kill>; GR32Bit:%vreg4,%vreg3,%vreg2
96B		FSW %vreg1<kill>, %vreg4<kill>, 0; mem:ST4[@redefine_out_parameter] FP32Bit:%vreg1 GR32Bit:%vreg4

# End machine code for function redefine_start2.

Computing live-in reg-units in ABI blocks.
Created 0 new intervals.
********** INTERVALS **********
%vreg0 = [16r,32r:0)  0@16r
%vreg1 = [32r,96r:0)  0@32r
%vreg2 = [48r,80r:0)  0@48r
%vreg3 = [64r,80r:0)  0@64r
%vreg4 = [80r,96r:0)  0@80r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start2: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start2.newName01
16B		%vreg0<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg0
32B		%vreg1<def> = FLW %vreg0, 0; mem:LD4[%0](align=16) FP32Bit:%vreg1 GR32Bit:%vreg0
48B		%vreg2<def> = LUI <ga:@redefine_out_parameter>[TF=2]; GR32Bit:%vreg2
64B		%vreg3<def> = ADDI %zero, <ga:@redefine_out_parameter>[TF=3]; GR32Bit:%vreg3
80B		%vreg4<def> = ADD %vreg3, %vreg2; GR32Bit:%vreg4,%vreg3,%vreg2
96B		FSW %vreg1, %vreg4, 0; mem:ST4[@redefine_out_parameter] FP32Bit:%vreg1 GR32Bit:%vreg4

# End machine code for function redefine_start2.

********** SIMPLE REGISTER COALESCING **********
********** Function: redefine_start2
********** JOINING INTERVALS ***********
redefine_start2.newName01:
Trying to inflate 0 regs.
********** INTERVALS **********
%vreg0 = [16r,32r:0)  0@16r
%vreg1 = [32r,96r:0)  0@32r
%vreg2 = [48r,80r:0)  0@48r
%vreg3 = [64r,80r:0)  0@64r
%vreg4 = [80r,96r:0)  0@80r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start2: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start2.newName01
16B		%vreg0<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg0
32B		%vreg1<def> = FLW %vreg0, 0; mem:LD4[%0](align=16) FP32Bit:%vreg1 GR32Bit:%vreg0
48B		%vreg2<def> = LUI <ga:@redefine_out_parameter>[TF=2]; GR32Bit:%vreg2
64B		%vreg3<def> = ADDI %zero, <ga:@redefine_out_parameter>[TF=3]; GR32Bit:%vreg3
80B		%vreg4<def> = ADD %vreg3, %vreg2; GR32Bit:%vreg4,%vreg3,%vreg2
96B		FSW %vreg1, %vreg4, 0; mem:ST4[@redefine_out_parameter] FP32Bit:%vreg1 GR32Bit:%vreg4

# End machine code for function redefine_start2.

Before MISched:
# Machine code for function redefine_start2: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]

BB#0: derived from LLVM BB %redefine_start2.newName01
	%vreg0<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg0
	%vreg1<def> = FLW %vreg0, 0; mem:LD4[%0](align=16) FP32Bit:%vreg1 GR32Bit:%vreg0
	%vreg2<def> = LUI <ga:@redefine_out_parameter>[TF=2]; GR32Bit:%vreg2
	%vreg3<def> = ADDI %zero, <ga:@redefine_out_parameter>[TF=3]; GR32Bit:%vreg3
	%vreg4<def> = ADD %vreg3, %vreg2; GR32Bit:%vreg4,%vreg3,%vreg2
	FSW %vreg1, %vreg4, 0; mem:ST4[@redefine_out_parameter] FP32Bit:%vreg1 GR32Bit:%vreg4

# End machine code for function redefine_start2.


-------------
Starting new basic block BB#0
********** MI Scheduling **********
redefine_start2:BB#0 redefine_start2.newName01
  From: %vreg0<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg0
    To: End Remaining: 0
Max Pressure: FP32Bit=1
GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 1
GR32BitLimit 32 Actual 2
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 0
  SU(5) in tree 0
SU(0):   %vreg0<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
   val SU(1): Latency=5 Reg=%vreg0

SU(1):   %vreg1<def> = FLW %vreg0, 0; mem:LD4[%0](align=16) FP32Bit:%vreg1 GR32Bit:%vreg0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 2
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg0
  Successors:
   val SU(5): Latency=2 Reg=%vreg1

SU(2):   %vreg2<def> = LUI <ga:@redefine_out_parameter>[TF=2]; GR32Bit:%vreg2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(4): Latency=5 Reg=%vreg2

SU(3):   %vreg3<def> = ADDI %zero, <ga:@redefine_out_parameter>[TF=3]; GR32Bit:%vreg3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(4): Latency=5 Reg=%vreg3

SU(4):   %vreg4<def> = ADD %vreg3, %vreg2; GR32Bit:%vreg4,%vreg3,%vreg2
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
   val SU(3): Latency=5 Reg=%vreg3
   val SU(2): Latency=5 Reg=%vreg2
  Successors:
   val SU(5): Latency=5 Reg=%vreg4

SU(5):   FSW %vreg1, %vreg4, 0; mem:ST4[@redefine_out_parameter] FP32Bit:%vreg1 GR32Bit:%vreg4
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 10
  Height             : 0
  Predecessors:
   val SU(1): Latency=2 Reg=%vreg1
   val SU(4): Latency=5 Reg=%vreg4
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg0<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
   val SU(1): Latency=5 Reg=%vreg0

SU(1):   %vreg1<def> = FLW %vreg0, 0; mem:LD4[%0](align=16) FP32Bit:%vreg1 GR32Bit:%vreg0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 2
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg0
  Successors:
   val SU(5): Latency=2 Reg=%vreg1

SU(2):   %vreg2<def> = LUI <ga:@redefine_out_parameter>[TF=2]; GR32Bit:%vreg2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(4): Latency=5 Reg=%vreg2

SU(3):   %vreg3<def> = ADDI %zero, <ga:@redefine_out_parameter>[TF=3]; GR32Bit:%vreg3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(4): Latency=5 Reg=%vreg3

SU(4):   %vreg4<def> = ADD %vreg3, %vreg2; GR32Bit:%vreg4,%vreg3,%vreg2
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
   val SU(3): Latency=5 Reg=%vreg3
   val SU(2): Latency=5 Reg=%vreg2
  Successors:
   val SU(5): Latency=5 Reg=%vreg4

SU(5):   FSW %vreg1, %vreg4, 0; mem:ST4[@redefine_out_parameter] FP32Bit:%vreg1 GR32Bit:%vreg4
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 10
  Height             : 0
  Predecessors:
   val SU(1): Latency=2 Reg=%vreg1
   val SU(4): Latency=5 Reg=%vreg4
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(3)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg3<def> = ADDI %zero, <ga:@redefine_out_parameter>[TF=3]; GR32Bit:%vreg3
handleMove 64B -> 8B: %vreg3<def> = ADDI %zero, <ga:@redefine_out_parameter>[TF=3]; GR32Bit:%vreg3
     %vreg3:	[64r,80r:0)  0@64r
        -->	[8r,80r:0)  0@8r
     zero:	EMPTY
        -->	EMPTY
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg0<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg0
Pick node SU(2)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg2<def> = LUI <ga:@redefine_out_parameter>[TF=2]; GR32Bit:%vreg2
handleMove 48B -> 24B: %vreg2<def> = LUI <ga:@redefine_out_parameter>[TF=2]; GR32Bit:%vreg2
     %vreg2:	[48r,80r:0)  0@48r
        -->	[24r,80r:0)  0@24r
Pick node SU(4)  ILP: 3 / 6 = 0.5 Tree: 0 @0
Scheduling %vreg4<def> = ADD %vreg3, %vreg2; GR32Bit:%vreg4,%vreg3,%vreg2
handleMove 80B -> 28B: %vreg4<def> = ADD %vreg3, %vreg2; GR32Bit:%vreg4,%vreg3,%vreg2
     %vreg4:	[80r,96r:0)  0@80r
        -->	[28r,96r:0)  0@28r
     %vreg3:	[8r,80r:0)  0@8r
        -->	[8r,28r:0)  0@8r
     %vreg2:	[24r,80r:0)  0@24r
        -->	[24r,28r:0)  0@24r
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg1<def> = FLW %vreg0, 0; mem:LD4[%0](align=16) FP32Bit:%vreg1 GR32Bit:%vreg0
Pick node SU(5)  ILP: 6 / 11 = 0.545455 Tree: 0 @0
Scheduling FSW %vreg1, %vreg4, 0; mem:ST4[@redefine_out_parameter] FP32Bit:%vreg1 GR32Bit:%vreg4
*** Final schedule for BB#0 ***
SU(3):   %vreg3<def> = ADDI %zero, <ga:@redefine_out_parameter>[TF=3]; GR32Bit:%vreg3
SU(0):   %vreg0<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg0
SU(2):   %vreg2<def> = LUI <ga:@redefine_out_parameter>[TF=2]; GR32Bit:%vreg2
SU(4):   %vreg4<def> = ADD %vreg3, %vreg2; GR32Bit:%vreg4,%vreg3,%vreg2
SU(1):   %vreg1<def> = FLW %vreg0, 0; mem:LD4[%0](align=16) FP32Bit:%vreg1 GR32Bit:%vreg0
SU(5):   FSW %vreg1, %vreg4, 0; mem:ST4[@redefine_out_parameter] FP32Bit:%vreg1 GR32Bit:%vreg4


*** Renumbered SlotIndexes 4-60 ***

*** Renumbered SlotIndexes 16-88 ***

*** Renumbered SlotIndexes 28-108 ***

*** Renumbered SlotIndexes 40-128 ***

*** Renumbered SlotIndexes 52-140 ***

*** Renumbered SlotIndexes 64-152 ***

*** Renumbered SlotIndexes 76-164 ***

*** Renumbered SlotIndexes 88-176 ***

*** Renumbered SlotIndexes 100-188 ***

*** Renumbered SlotIndexes 112-200 ***

*** Renumbered SlotIndexes 124-212 ***

*** Renumbered SlotIndexes 136-224 ***

*** Renumbered SlotIndexes 148-236 ***

*** Renumbered SlotIndexes 160-248 ***

*** Renumbered SlotIndexes 172-260 ***

*** Renumbered SlotIndexes 184-272 ***

*** Renumbered SlotIndexes 196-284 ***

*** Renumbered SlotIndexes 208-296 ***

*** Renumbered SlotIndexes 220-308 ***

*** Renumbered SlotIndexes 232-320 ***

*** Renumbered SlotIndexes 244-332 ***

*** Renumbered SlotIndexes 256-344 ***

*** Renumbered SlotIndexes 268-356 ***

*** Renumbered SlotIndexes 280-368 ***

*** Renumbered SlotIndexes 292-380 ***

*** Renumbered SlotIndexes 304-392 ***

*** Renumbered SlotIndexes 316-404 ***

*** Renumbered SlotIndexes 328-416 ***

*** Renumbered SlotIndexes 340-428 ***

*** Renumbered SlotIndexes 352-440 ***

*** Renumbered SlotIndexes 364-452 ***

*** Renumbered SlotIndexes 376-464 ***

*** Renumbered SlotIndexes 388-476 ***

*** Renumbered SlotIndexes 400-488 ***
Partitioning instructions of the region into multiple CEs
instr:  %vreg3<def> = ADDI %zero, <ga:@redefine_out_parameter>[TF=3]; GR32Bit:%vreg3
instr:  %vreg0<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg0
instr:  %vreg2<def> = LUI <ga:@redefine_out_parameter>[TF=2]; GR32Bit:%vreg2
instr:  %vreg4<def> = ADD %vreg3, %vreg2; GR32Bit:%vreg4,%vreg3,%vreg2
instr:  %vreg1<def> = FLW %vreg0, 0; mem:LD4[%0](align=16) FP32Bit:%vreg1 GR32Bit:%vreg0
instr:  FSW %vreg1, %vreg4, 0; mem:ST4[@redefine_out_parameter] FP32Bit:%vreg1 GR32Bit:%vreg4
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
before falloc, state of bb0:BB#0: derived from LLVM BB %redefine_start2.newName01
	%vreg5<def> = ADD %t5, %zero; GR32Bit:%vreg5
	%vreg7<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg7
	%vreg8<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg8
	%vreg9<def> = SRLI %vreg8, 12; GR32Bit:%vreg9,%vreg8
	%vreg10<def> = ADD %vreg7, %vreg9; GR32Bit:%vreg10,%vreg7,%vreg9
	%vreg11<def> = ADDI %zero, 20; GR32Bit:%vreg11
	%vreg12<def> = SRLI %t5, 22; GR32Bit:%vreg12
	%vreg13<def> = SRLI %t5, 12; GR32Bit:%vreg13
	%vreg14<def> = ANDI %vreg13, 15; GR32Bit:%vreg14,%vreg13
	%vreg15<def> = SRLI %t5, 6; GR32Bit:%vreg15
	%vreg16<def> = ANDI %vreg15, 63; GR32Bit:%vreg16,%vreg15
	%vreg17<def> = ADDI %zero, 832; GR32Bit:%vreg17
	%vreg18<def> = MUL %vreg12, %vreg17; GR32Bit:%vreg18,%vreg12,%vreg17
	%vreg19<def> = ADDI %zero, 52; GR32Bit:%vreg19
	%vreg20<def> = MUL %vreg14, %vreg19; GR32Bit:%vreg20,%vreg14,%vreg19
	%vreg21<def> = ADD %vreg20, %vreg16; GR32Bit:%vreg21,%vreg20,%vreg16
	%vreg22<def> = ADD %vreg21, %vreg18; GR32Bit:%vreg22,%vreg21,%vreg18
	%vreg23<def> = MUL %vreg22, %vreg11; GR32Bit:%vreg23,%vreg22,%vreg11
	%vreg6<def> = ADD %vreg10, %vreg23; GR32Bit:%vreg6,%vreg10,%vreg23
	%vreg3<def> = ADDI %zero, <ga:@redefine_out_parameter>[TF=3]; GR32Bit:%vreg3
	%vreg0<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg0
	%vreg2<def> = LUI <ga:@redefine_out_parameter>[TF=2]; GR32Bit:%vreg2
	%vreg4<def> = ADD %vreg3, %vreg2; GR32Bit:%vreg4,%vreg3,%vreg2
	%vreg1<def> = FLW %vreg0, 0; mem:LD4[%0](align=16) FP32Bit:%vreg1 GR32Bit:%vreg0
	FSW %vreg1, %vreg4, 0; mem:ST4[@redefine_out_parameter] FP32Bit:%vreg1 GR32Bit:%vreg4
	%vreg24<def> = ADD %t5, %zero; GR32Bit:%vreg24
	%vreg26<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg26
	%vreg27<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg27
	%vreg28<def> = SRLI %vreg27, 12; GR32Bit:%vreg28,%vreg27
	%vreg29<def> = ADD %vreg26, %vreg28; GR32Bit:%vreg29,%vreg26,%vreg28
	%vreg30<def> = ADDI %zero, 20; GR32Bit:%vreg30
	%vreg31<def> = SRLI %t5, 22; GR32Bit:%vreg31
	%vreg32<def> = SRLI %t5, 12; GR32Bit:%vreg32
	%vreg33<def> = ANDI %vreg32, 15; GR32Bit:%vreg33,%vreg32
	%vreg34<def> = SRLI %t5, 6; GR32Bit:%vreg34
	%vreg35<def> = ANDI %vreg34, 63; GR32Bit:%vreg35,%vreg34
	%vreg36<def> = ADDI %zero, 832; GR32Bit:%vreg36
	%vreg37<def> = MUL %vreg31, %vreg36; GR32Bit:%vreg37,%vreg31,%vreg36
	%vreg38<def> = ADDI %zero, 52; GR32Bit:%vreg38
	%vreg39<def> = MUL %vreg33, %vreg38; GR32Bit:%vreg39,%vreg33,%vreg38
	%vreg40<def> = ADD %vreg39, %vreg35; GR32Bit:%vreg40,%vreg39,%vreg35
	%vreg41<def> = ADD %vreg40, %vreg37; GR32Bit:%vreg41,%vreg40,%vreg37
	%vreg42<def> = MUL %vreg41, %vreg30; GR32Bit:%vreg42,%vreg41,%vreg30
	%vreg25<def> = ADD %vreg29, %vreg42; GR32Bit:%vreg25,%vreg29,%vreg42
	%vreg43<def> = ADD %t5, %zero; GR32Bit:%vreg43
	%vreg45<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg45
	%vreg46<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg46
	%vreg47<def> = SRLI %vreg46, 12; GR32Bit:%vreg47,%vreg46
	%vreg48<def> = ADD %vreg45, %vreg47; GR32Bit:%vreg48,%vreg45,%vreg47
	%vreg49<def> = ADDI %zero, 20; GR32Bit:%vreg49
	%vreg50<def> = SRLI %t5, 22; GR32Bit:%vreg50
	%vreg51<def> = SRLI %t5, 12; GR32Bit:%vreg51
	%vreg52<def> = ANDI %vreg51, 15; GR32Bit:%vreg52,%vreg51
	%vreg53<def> = SRLI %t5, 6; GR32Bit:%vreg53
	%vreg54<def> = ANDI %vreg53, 63; GR32Bit:%vreg54,%vreg53
	%vreg55<def> = ADDI %zero, 832; GR32Bit:%vreg55
	%vreg56<def> = MUL %vreg50, %vreg55; GR32Bit:%vreg56,%vreg50,%vreg55
	%vreg57<def> = ADDI %zero, 52; GR32Bit:%vreg57
	%vreg58<def> = MUL %vreg52, %vreg57; GR32Bit:%vreg58,%vreg52,%vreg57
	%vreg59<def> = ADD %vreg58, %vreg54; GR32Bit:%vreg59,%vreg58,%vreg54
	%vreg60<def> = ADD %vreg59, %vreg56; GR32Bit:%vreg60,%vreg59,%vreg56
	%vreg61<def> = MUL %vreg60, %vreg49; GR32Bit:%vreg61,%vreg60,%vreg49
	%vreg44<def> = ADD %vreg48, %vreg61; GR32Bit:%vreg44,%vreg48,%vreg61
	%vreg62<def> = ADD %t5, %zero; GR32Bit:%vreg62
	%vreg64<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg64
	%vreg65<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg65
	%vreg66<def> = SRLI %vreg65, 12; GR32Bit:%vreg66,%vreg65
	%vreg67<def> = ADD %vreg64, %vreg66; GR32Bit:%vreg67,%vreg64,%vreg66
	%vreg68<def> = ADDI %zero, 20; GR32Bit:%vreg68
	%vreg69<def> = SRLI %t5, 22; GR32Bit:%vreg69
	%vreg70<def> = SRLI %t5, 12; GR32Bit:%vreg70
	%vreg71<def> = ANDI %vreg70, 15; GR32Bit:%vreg71,%vreg70
	%vreg72<def> = SRLI %t5, 6; GR32Bit:%vreg72
	%vreg73<def> = ANDI %vreg72, 63; GR32Bit:%vreg73,%vreg72
	%vreg74<def> = ADDI %zero, 832; GR32Bit:%vreg74
	%vreg75<def> = MUL %vreg69, %vreg74; GR32Bit:%vreg75,%vreg69,%vreg74
	%vreg76<def> = ADDI %zero, 52; GR32Bit:%vreg76
	%vreg77<def> = MUL %vreg71, %vreg76; GR32Bit:%vreg77,%vreg71,%vreg76
	%vreg78<def> = ADD %vreg77, %vreg73; GR32Bit:%vreg78,%vreg77,%vreg73
	%vreg79<def> = ADD %vreg78, %vreg75; GR32Bit:%vreg79,%vreg78,%vreg75
	%vreg80<def> = MUL %vreg79, %vreg68; GR32Bit:%vreg80,%vreg79,%vreg68
	%vreg63<def> = ADD %vreg67, %vreg80; GR32Bit:%vreg63,%vreg67,%vreg80
Adding all fallocs first to avoid stalls due to sequential fallocs and fbinds
Adding writecm(for writing sync count to context frames) and fbind instructions
live end of child is itself
live end of child is itself
Adding localref sw instructions to hyperOp redefine_start2
Adding writecm instructions to hyperOp redefine_start2
Adding writecmp and sync instructions
Adding endHyperOp instructions to each pHyperOp

*** Renumbered SlotIndexes 412-500 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 424-512 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 436-524 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 448-536 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 460-548 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 472-560 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0
After Shuffling regions of basic block, state of BB#0:
BB#0: derived from LLVM BB %redefine_start2.newName01
	%vreg5<def> = ADD %t5, %zero; GR32Bit:%vreg5
	%vreg7<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg7
	%vreg8<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg8
	%vreg9<def> = SRLI %vreg8, 12; GR32Bit:%vreg9,%vreg8
	%vreg10<def> = ADD %vreg7, %vreg9; GR32Bit:%vreg10,%vreg7,%vreg9
	%vreg11<def> = ADDI %zero, 20; GR32Bit:%vreg11
	%vreg12<def> = SRLI %t5, 22; GR32Bit:%vreg12
	%vreg13<def> = SRLI %t5, 12; GR32Bit:%vreg13
	%vreg14<def> = ANDI %vreg13, 15; GR32Bit:%vreg14,%vreg13
	%vreg15<def> = SRLI %t5, 6; GR32Bit:%vreg15
	%vreg16<def> = ANDI %vreg15, 63; GR32Bit:%vreg16,%vreg15
	%vreg17<def> = ADDI %zero, 832; GR32Bit:%vreg17
	%vreg18<def> = MUL %vreg12, %vreg17; GR32Bit:%vreg18,%vreg12,%vreg17
	%vreg19<def> = ADDI %zero, 52; GR32Bit:%vreg19
	%vreg20<def> = MUL %vreg14, %vreg19; GR32Bit:%vreg20,%vreg14,%vreg19
	%vreg21<def> = ADD %vreg20, %vreg16; GR32Bit:%vreg21,%vreg20,%vreg16
	%vreg22<def> = ADD %vreg21, %vreg18; GR32Bit:%vreg22,%vreg21,%vreg18
	%vreg23<def> = MUL %vreg22, %vreg11; GR32Bit:%vreg23,%vreg22,%vreg11
	%vreg6<def> = ADD %vreg10, %vreg23; GR32Bit:%vreg6,%vreg10,%vreg23
	%vreg3<def> = ADDI %zero, <ga:@redefine_out_parameter>[TF=3]; GR32Bit:%vreg3
	%vreg0<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg0
	%vreg2<def> = LUI <ga:@redefine_out_parameter>[TF=2]; GR32Bit:%vreg2
	%vreg4<def> = ADD %vreg3, %vreg2; GR32Bit:%vreg4,%vreg3,%vreg2
	%vreg1<def> = FLW %vreg0, 0; mem:LD4[%0](align=16) FP32Bit:%vreg1 GR32Bit:%vreg0
	FSW %vreg1, %vreg4, 0; mem:ST4[@redefine_out_parameter] FP32Bit:%vreg1 GR32Bit:%vreg4
	FDELETE %t4, 0
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg24<def> = ADD %t5, %zero; GR32Bit:%vreg24
	%vreg26<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg26
	%vreg27<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg27
	%vreg28<def> = SRLI %vreg27, 12; GR32Bit:%vreg28,%vreg27
	%vreg29<def> = ADD %vreg26, %vreg28; GR32Bit:%vreg29,%vreg26,%vreg28
	%vreg30<def> = ADDI %zero, 20; GR32Bit:%vreg30
	%vreg31<def> = SRLI %t5, 22; GR32Bit:%vreg31
	%vreg32<def> = SRLI %t5, 12; GR32Bit:%vreg32
	%vreg33<def> = ANDI %vreg32, 15; GR32Bit:%vreg33,%vreg32
	%vreg34<def> = SRLI %t5, 6; GR32Bit:%vreg34
	%vreg35<def> = ANDI %vreg34, 63; GR32Bit:%vreg35,%vreg34
	%vreg36<def> = ADDI %zero, 832; GR32Bit:%vreg36
	%vreg37<def> = MUL %vreg31, %vreg36; GR32Bit:%vreg37,%vreg31,%vreg36
	%vreg38<def> = ADDI %zero, 52; GR32Bit:%vreg38
	%vreg39<def> = MUL %vreg33, %vreg38; GR32Bit:%vreg39,%vreg33,%vreg38
	%vreg40<def> = ADD %vreg39, %vreg35; GR32Bit:%vreg40,%vreg39,%vreg35
	%vreg41<def> = ADD %vreg40, %vreg37; GR32Bit:%vreg41,%vreg40,%vreg37
	%vreg42<def> = MUL %vreg41, %vreg30; GR32Bit:%vreg42,%vreg41,%vreg30
	%vreg25<def> = ADD %vreg29, %vreg42; GR32Bit:%vreg25,%vreg29,%vreg42
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg43<def> = ADD %t5, %zero; GR32Bit:%vreg43
	%vreg45<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg45
	%vreg46<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg46
	%vreg47<def> = SRLI %vreg46, 12; GR32Bit:%vreg47,%vreg46
	%vreg48<def> = ADD %vreg45, %vreg47; GR32Bit:%vreg48,%vreg45,%vreg47
	%vreg49<def> = ADDI %zero, 20; GR32Bit:%vreg49
	%vreg50<def> = SRLI %t5, 22; GR32Bit:%vreg50
	%vreg51<def> = SRLI %t5, 12; GR32Bit:%vreg51
	%vreg52<def> = ANDI %vreg51, 15; GR32Bit:%vreg52,%vreg51
	%vreg53<def> = SRLI %t5, 6; GR32Bit:%vreg53
	%vreg54<def> = ANDI %vreg53, 63; GR32Bit:%vreg54,%vreg53
	%vreg55<def> = ADDI %zero, 832; GR32Bit:%vreg55
	%vreg56<def> = MUL %vreg50, %vreg55; GR32Bit:%vreg56,%vreg50,%vreg55
	%vreg57<def> = ADDI %zero, 52; GR32Bit:%vreg57
	%vreg58<def> = MUL %vreg52, %vreg57; GR32Bit:%vreg58,%vreg52,%vreg57
	%vreg59<def> = ADD %vreg58, %vreg54; GR32Bit:%vreg59,%vreg58,%vreg54
	%vreg60<def> = ADD %vreg59, %vreg56; GR32Bit:%vreg60,%vreg59,%vreg56
	%vreg61<def> = MUL %vreg60, %vreg49; GR32Bit:%vreg61,%vreg60,%vreg49
	%vreg44<def> = ADD %vreg48, %vreg61; GR32Bit:%vreg44,%vreg48,%vreg61
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg62<def> = ADD %t5, %zero; GR32Bit:%vreg62
	%vreg64<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg64
	%vreg65<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg65
	%vreg66<def> = SRLI %vreg65, 12; GR32Bit:%vreg66,%vreg65
	%vreg67<def> = ADD %vreg64, %vreg66; GR32Bit:%vreg67,%vreg64,%vreg66
	%vreg68<def> = ADDI %zero, 20; GR32Bit:%vreg68
	%vreg69<def> = SRLI %t5, 22; GR32Bit:%vreg69
	%vreg70<def> = SRLI %t5, 12; GR32Bit:%vreg70
	%vreg71<def> = ANDI %vreg70, 15; GR32Bit:%vreg71,%vreg70
	%vreg72<def> = SRLI %t5, 6; GR32Bit:%vreg72
	%vreg73<def> = ANDI %vreg72, 63; GR32Bit:%vreg73,%vreg72
	%vreg74<def> = ADDI %zero, 832; GR32Bit:%vreg74
	%vreg75<def> = MUL %vreg69, %vreg74; GR32Bit:%vreg75,%vreg69,%vreg74
	%vreg76<def> = ADDI %zero, 52; GR32Bit:%vreg76
	%vreg77<def> = MUL %vreg71, %vreg76; GR32Bit:%vreg77,%vreg71,%vreg76
	%vreg78<def> = ADD %vreg77, %vreg73; GR32Bit:%vreg78,%vreg77,%vreg73
	%vreg79<def> = ADD %vreg78, %vreg75; GR32Bit:%vreg79,%vreg78,%vreg75
	%vreg80<def> = MUL %vreg79, %vreg68; GR32Bit:%vreg80,%vreg79,%vreg68
	%vreg63<def> = ADD %vreg67, %vreg80; GR32Bit:%vreg63,%vreg67,%vreg80
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 316-636 ***

*** Renumbered SlotIndexes 304-656 ***

*** Renumbered SlotIndexes 216-704 ***

*** Renumbered SlotIndexes 204-724 ***

*** Renumbered SlotIndexes 204-740 ***

*** Renumbered SlotIndexes 112-784 ***

*** Renumbered SlotIndexes 100-804 ***

*** Renumbered SlotIndexes 100-820 ***

*** Renumbered SlotIndexes 100-836 ***

*** Renumbered SlotIndexes 100-852 ***

*** Renumbered SlotIndexes 100-868 ***

*** Renumbered SlotIndexes 12-908 ***
Creating pHyperOp bundles for CEs for bb0
  %vreg24<def> = ADD %t5, %zero; GR32Bit:%vreg24
starting at   %vreg5<def> = ADD %t5, %zero; GR32Bit:%vreg5
  %vreg43<def> = ADD %t5, %zero; GR32Bit:%vreg43
starting at   %vreg24<def> = ADD %t5, %zero; GR32Bit:%vreg24
  %vreg62<def> = ADD %t5, %zero; GR32Bit:%vreg62
starting at   %vreg43<def> = ADD %t5, %zero; GR32Bit:%vreg43
starting at   %vreg62<def> = ADD %t5, %zero; GR32Bit:%vreg62
After bundling, state of BB0:BB#0: derived from LLVM BB %redefine_start2.newName01
	%vreg5<def> = ADD %t5, %zero; GR32Bit:%vreg5
	  * %vreg7<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg7
	  * %vreg8<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg8
	  * %vreg9<def> = SRLI %vreg8, 12; GR32Bit:%vreg9,%vreg8
	  * %vreg10<def> = ADD %vreg7, %vreg9; GR32Bit:%vreg10,%vreg7,%vreg9
	  * %vreg11<def> = ADDI %zero, 20; GR32Bit:%vreg11
	  * %vreg12<def> = SRLI %t5, 22; GR32Bit:%vreg12
	  * %vreg13<def> = SRLI %t5, 12; GR32Bit:%vreg13
	  * %vreg14<def> = ANDI %vreg13, 15; GR32Bit:%vreg14,%vreg13
	  * %vreg15<def> = SRLI %t5, 6; GR32Bit:%vreg15
	  * %vreg16<def> = ANDI %vreg15, 63; GR32Bit:%vreg16,%vreg15
	  * %vreg17<def> = ADDI %zero, 832; GR32Bit:%vreg17
	  * %vreg18<def> = MUL %vreg12, %vreg17; GR32Bit:%vreg18,%vreg12,%vreg17
	  * %vreg19<def> = ADDI %zero, 52; GR32Bit:%vreg19
	  * %vreg20<def> = MUL %vreg14, %vreg19; GR32Bit:%vreg20,%vreg14,%vreg19
	  * %vreg21<def> = ADD %vreg20, %vreg16; GR32Bit:%vreg21,%vreg20,%vreg16
	  * %vreg22<def> = ADD %vreg21, %vreg18; GR32Bit:%vreg22,%vreg21,%vreg18
	  * %vreg23<def> = MUL %vreg22, %vreg11; GR32Bit:%vreg23,%vreg22,%vreg11
	  * %vreg6<def> = ADD %vreg10, %vreg23; GR32Bit:%vreg6,%vreg10,%vreg23
	  * %vreg3<def> = ADDI %zero, <ga:@redefine_out_parameter>[TF=3]; GR32Bit:%vreg3
	  * %vreg0<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg0
	  * %vreg2<def> = LUI <ga:@redefine_out_parameter>[TF=2]; GR32Bit:%vreg2
	  * %vreg4<def> = ADD %vreg3, %vreg2; GR32Bit:%vreg4,%vreg3,%vreg2
	  * %vreg1<def> = FLW %vreg0, 0; mem:LD4[%0](align=16) FP32Bit:%vreg1 GR32Bit:%vreg0
	  * FSW %vreg1, %vreg4, 0; mem:ST4[@redefine_out_parameter] FP32Bit:%vreg1 GR32Bit:%vreg4
	  * FDELETE %t4, 0
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg24<def> = ADD %t5, %zero; GR32Bit:%vreg24
	  * %vreg26<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg26
	  * %vreg27<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg27
	  * %vreg28<def> = SRLI %vreg27, 12; GR32Bit:%vreg28,%vreg27
	  * %vreg29<def> = ADD %vreg26, %vreg28; GR32Bit:%vreg29,%vreg26,%vreg28
	  * %vreg30<def> = ADDI %zero, 20; GR32Bit:%vreg30
	  * %vreg31<def> = SRLI %t5, 22; GR32Bit:%vreg31
	  * %vreg32<def> = SRLI %t5, 12; GR32Bit:%vreg32
	  * %vreg33<def> = ANDI %vreg32, 15; GR32Bit:%vreg33,%vreg32
	  * %vreg34<def> = SRLI %t5, 6; GR32Bit:%vreg34
	  * %vreg35<def> = ANDI %vreg34, 63; GR32Bit:%vreg35,%vreg34
	  * %vreg36<def> = ADDI %zero, 832; GR32Bit:%vreg36
	  * %vreg37<def> = MUL %vreg31, %vreg36; GR32Bit:%vreg37,%vreg31,%vreg36
	  * %vreg38<def> = ADDI %zero, 52; GR32Bit:%vreg38
	  * %vreg39<def> = MUL %vreg33, %vreg38; GR32Bit:%vreg39,%vreg33,%vreg38
	  * %vreg40<def> = ADD %vreg39, %vreg35; GR32Bit:%vreg40,%vreg39,%vreg35
	  * %vreg41<def> = ADD %vreg40, %vreg37; GR32Bit:%vreg41,%vreg40,%vreg37
	  * %vreg42<def> = MUL %vreg41, %vreg30; GR32Bit:%vreg42,%vreg41,%vreg30
	  * %vreg25<def> = ADD %vreg29, %vreg42; GR32Bit:%vreg25,%vreg29,%vreg42
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg43<def> = ADD %t5, %zero; GR32Bit:%vreg43
	  * %vreg45<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg45
	  * %vreg46<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg46
	  * %vreg47<def> = SRLI %vreg46, 12; GR32Bit:%vreg47,%vreg46
	  * %vreg48<def> = ADD %vreg45, %vreg47; GR32Bit:%vreg48,%vreg45,%vreg47
	  * %vreg49<def> = ADDI %zero, 20; GR32Bit:%vreg49
	  * %vreg50<def> = SRLI %t5, 22; GR32Bit:%vreg50
	  * %vreg51<def> = SRLI %t5, 12; GR32Bit:%vreg51
	  * %vreg52<def> = ANDI %vreg51, 15; GR32Bit:%vreg52,%vreg51
	  * %vreg53<def> = SRLI %t5, 6; GR32Bit:%vreg53
	  * %vreg54<def> = ANDI %vreg53, 63; GR32Bit:%vreg54,%vreg53
	  * %vreg55<def> = ADDI %zero, 832; GR32Bit:%vreg55
	  * %vreg56<def> = MUL %vreg50, %vreg55; GR32Bit:%vreg56,%vreg50,%vreg55
	  * %vreg57<def> = ADDI %zero, 52; GR32Bit:%vreg57
	  * %vreg58<def> = MUL %vreg52, %vreg57; GR32Bit:%vreg58,%vreg52,%vreg57
	  * %vreg59<def> = ADD %vreg58, %vreg54; GR32Bit:%vreg59,%vreg58,%vreg54
	  * %vreg60<def> = ADD %vreg59, %vreg56; GR32Bit:%vreg60,%vreg59,%vreg56
	  * %vreg61<def> = MUL %vreg60, %vreg49; GR32Bit:%vreg61,%vreg60,%vreg49
	  * %vreg44<def> = ADD %vreg48, %vreg61; GR32Bit:%vreg44,%vreg48,%vreg61
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg62<def> = ADD %t5, %zero; GR32Bit:%vreg62
	  * %vreg64<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg64
	  * %vreg65<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg65
	  * %vreg66<def> = SRLI %vreg65, 12; GR32Bit:%vreg66,%vreg65
	  * %vreg67<def> = ADD %vreg64, %vreg66; GR32Bit:%vreg67,%vreg64,%vreg66
	  * %vreg68<def> = ADDI %zero, 20; GR32Bit:%vreg68
	  * %vreg69<def> = SRLI %t5, 22; GR32Bit:%vreg69
	  * %vreg70<def> = SRLI %t5, 12; GR32Bit:%vreg70
	  * %vreg71<def> = ANDI %vreg70, 15; GR32Bit:%vreg71,%vreg70
	  * %vreg72<def> = SRLI %t5, 6; GR32Bit:%vreg72
	  * %vreg73<def> = ANDI %vreg72, 63; GR32Bit:%vreg73,%vreg72
	  * %vreg74<def> = ADDI %zero, 832; GR32Bit:%vreg74
	  * %vreg75<def> = MUL %vreg69, %vreg74; GR32Bit:%vreg75,%vreg69,%vreg74
	  * %vreg76<def> = ADDI %zero, 52; GR32Bit:%vreg76
	  * %vreg77<def> = MUL %vreg71, %vreg76; GR32Bit:%vreg77,%vreg71,%vreg76
	  * %vreg78<def> = ADD %vreg77, %vreg73; GR32Bit:%vreg78,%vreg77,%vreg73
	  * %vreg79<def> = ADD %vreg78, %vreg75; GR32Bit:%vreg79,%vreg78,%vreg75
	  * %vreg80<def> = MUL %vreg79, %vreg68; GR32Bit:%vreg80,%vreg79,%vreg68
	  * %vreg63<def> = ADD %vreg67, %vreg80; GR32Bit:%vreg63,%vreg67,%vreg80
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
Patching the instructions that are supposed to use the physical registers r30 and r31
Computing live-in reg-units in ABI blocks.
Created 0 new intervals.

*** Renumbered SlotIndexes 8-928 ***
********** INTERVALS **********
zero = EMPTY
%vreg0 = [176r,200r:0)  0@176r
%vreg1 = [200r,208r:0)  0@200r
%vreg2 = [184r,192r:0)  0@184r
%vreg3 = [168r,192r:0)  0@168r
%vreg4 = [192r,208r:0)  0@192r
%vreg5 = [4r,4d:0)  0@4r
%vreg6 = [160r,160d:0)  0@160r
%vreg7 = [24r,48r:0)  0@24r
%vreg8 = [32r,40r:0)  0@32r
%vreg9 = [40r,48r:0)  0@40r
%vreg10 = [48r,160r:0)  0@48r
%vreg11 = [56r,152r:0)  0@56r
%vreg12 = [64r,112r:0)  0@64r
%vreg13 = [72r,80r:0)  0@72r
%vreg14 = [80r,128r:0)  0@80r
%vreg15 = [88r,96r:0)  0@88r
%vreg16 = [96r,136r:0)  0@96r
%vreg17 = [104r,112r:0)  0@104r
%vreg18 = [112r,144r:0)  0@112r
%vreg19 = [120r,128r:0)  0@120r
%vreg20 = [128r,136r:0)  0@128r
%vreg21 = [136r,144r:0)  0@136r
%vreg22 = [144r,152r:0)  0@144r
%vreg23 = [152r,160r:0)  0@152r
%vreg24 = [248r,248d:0)  0@248r
%vreg25 = [392r,392d:0)  0@392r
%vreg26 = [256r,280r:0)  0@256r
%vreg27 = [264r,272r:0)  0@264r
%vreg28 = [272r,280r:0)  0@272r
%vreg29 = [280r,392r:0)  0@280r
%vreg30 = [288r,384r:0)  0@288r
%vreg31 = [296r,344r:0)  0@296r
%vreg32 = [304r,312r:0)  0@304r
%vreg33 = [312r,360r:0)  0@312r
%vreg34 = [320r,328r:0)  0@320r
%vreg35 = [328r,368r:0)  0@328r
%vreg36 = [336r,344r:0)  0@336r
%vreg37 = [344r,376r:0)  0@344r
%vreg38 = [352r,360r:0)  0@352r
%vreg39 = [360r,368r:0)  0@360r
%vreg40 = [368r,376r:0)  0@368r
%vreg41 = [376r,384r:0)  0@376r
%vreg42 = [384r,392r:0)  0@384r
%vreg43 = [424r,424d:0)  0@424r
%vreg44 = [568r,568d:0)  0@568r
%vreg45 = [432r,456r:0)  0@432r
%vreg46 = [440r,448r:0)  0@440r
%vreg47 = [448r,456r:0)  0@448r
%vreg48 = [456r,568r:0)  0@456r
%vreg49 = [464r,560r:0)  0@464r
%vreg50 = [472r,520r:0)  0@472r
%vreg51 = [480r,488r:0)  0@480r
%vreg52 = [488r,536r:0)  0@488r
%vreg53 = [496r,504r:0)  0@496r
%vreg54 = [504r,544r:0)  0@504r
%vreg55 = [512r,520r:0)  0@512r
%vreg56 = [520r,552r:0)  0@520r
%vreg57 = [528r,536r:0)  0@528r
%vreg58 = [536r,544r:0)  0@536r
%vreg59 = [544r,552r:0)  0@544r
%vreg60 = [552r,560r:0)  0@552r
%vreg61 = [560r,568r:0)  0@560r
%vreg62 = [600r,600d:0)  0@600r
%vreg63 = [744r,744d:0)  0@744r
%vreg64 = [608r,632r:0)  0@608r
%vreg65 = [616r,624r:0)  0@616r
%vreg66 = [624r,632r:0)  0@624r
%vreg67 = [632r,744r:0)  0@632r
%vreg68 = [640r,736r:0)  0@640r
%vreg69 = [648r,696r:0)  0@648r
%vreg70 = [656r,664r:0)  0@656r
%vreg71 = [664r,712r:0)  0@664r
%vreg72 = [672r,680r:0)  0@672r
%vreg73 = [680r,720r:0)  0@680r
%vreg74 = [688r,696r:0)  0@688r
%vreg75 = [696r,728r:0)  0@696r
%vreg76 = [704r,712r:0)  0@704r
%vreg77 = [712r,720r:0)  0@712r
%vreg78 = [720r,728r:0)  0@720r
%vreg79 = [728r,736r:0)  0@728r
%vreg80 = [736r,744r:0)  0@736r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start2: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start2.newName01
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg7<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg7
4B		  * %vreg8<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg8
4B		  * %vreg9<def> = SRLI %vreg8, 12; GR32Bit:%vreg9,%vreg8
4B		  * %vreg10<def> = ADD %vreg7, %vreg9; GR32Bit:%vreg10,%vreg7,%vreg9
4B		  * %vreg11<def> = ADDI %zero, 20; GR32Bit:%vreg11
4B		  * %vreg12<def> = SRLI %t5, 22; GR32Bit:%vreg12
4B		  * %vreg13<def> = SRLI %t5, 12; GR32Bit:%vreg13
4B		  * %vreg14<def> = ANDI %vreg13, 15; GR32Bit:%vreg14,%vreg13
4B		  * %vreg15<def> = SRLI %t5, 6; GR32Bit:%vreg15
4B		  * %vreg16<def> = ANDI %vreg15, 63; GR32Bit:%vreg16,%vreg15
4B		  * %vreg17<def> = ADDI %zero, 832; GR32Bit:%vreg17
4B		  * %vreg18<def> = MUL %vreg12, %vreg17; GR32Bit:%vreg18,%vreg12,%vreg17
4B		  * %vreg19<def> = ADDI %zero, 52; GR32Bit:%vreg19
4B		  * %vreg20<def> = MUL %vreg14, %vreg19; GR32Bit:%vreg20,%vreg14,%vreg19
4B		  * %vreg21<def> = ADD %vreg20, %vreg16; GR32Bit:%vreg21,%vreg20,%vreg16
4B		  * %vreg22<def> = ADD %vreg21, %vreg18; GR32Bit:%vreg22,%vreg21,%vreg18
4B		  * %vreg23<def> = MUL %vreg22, %vreg11; GR32Bit:%vreg23,%vreg22,%vreg11
4B		  * %t5<def> = ADD %vreg10, %vreg23; GR32Bit:%vreg10,%vreg23
4B		  * %vreg3<def> = LUI <MCSym="%lo("ga#256")">; GR32Bit:%vreg3
4B		  * SRLI %vreg3, %vreg3, 12; GR32Bit:%vreg3
4B		  * %vreg0<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg0
4B		  * %vreg2<def> = LUI <ga:@redefine_out_parameter>[TF=2]; GR32Bit:%vreg2
4B		  * %vreg4<def> = ADD %vreg3, %vreg2; GR32Bit:%vreg4,%vreg3,%vreg2
4B		  * %vreg1<def> = FLW %vreg0, 0; mem:LD4[%0](align=16) FP32Bit:%vreg1 GR32Bit:%vreg0
4B		  * FSW %vreg1, %vreg4, 0; mem:ST4[@redefine_out_parameter] FP32Bit:%vreg1 GR32Bit:%vreg4
4B		  * FDELETE %t4, 0
4B		  * END 0
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
248B		%t4<def> = ADD %t5, %zero
248B		  * %vreg26<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg26
248B		  * %vreg27<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg27
248B		  * %vreg28<def> = SRLI %vreg27, 12; GR32Bit:%vreg28,%vreg27
248B		  * %vreg29<def> = ADD %vreg26, %vreg28; GR32Bit:%vreg29,%vreg26,%vreg28
248B		  * %vreg30<def> = ADDI %zero, 20; GR32Bit:%vreg30
248B		  * %vreg31<def> = SRLI %t5, 22; GR32Bit:%vreg31
248B		  * %vreg32<def> = SRLI %t5, 12; GR32Bit:%vreg32
248B		  * %vreg33<def> = ANDI %vreg32, 15; GR32Bit:%vreg33,%vreg32
248B		  * %vreg34<def> = SRLI %t5, 6; GR32Bit:%vreg34
248B		  * %vreg35<def> = ANDI %vreg34, 63; GR32Bit:%vreg35,%vreg34
248B		  * %vreg36<def> = ADDI %zero, 832; GR32Bit:%vreg36
248B		  * %vreg37<def> = MUL %vreg31, %vreg36; GR32Bit:%vreg37,%vreg31,%vreg36
248B		  * %vreg38<def> = ADDI %zero, 52; GR32Bit:%vreg38
248B		  * %vreg39<def> = MUL %vreg33, %vreg38; GR32Bit:%vreg39,%vreg33,%vreg38
248B		  * %vreg40<def> = ADD %vreg39, %vreg35; GR32Bit:%vreg40,%vreg39,%vreg35
248B		  * %vreg41<def> = ADD %vreg40, %vreg37; GR32Bit:%vreg41,%vreg40,%vreg37
248B		  * %vreg42<def> = MUL %vreg41, %vreg30; GR32Bit:%vreg42,%vreg41,%vreg30
248B		  * %t5<def> = ADD %vreg29, %vreg42; GR32Bit:%vreg29,%vreg42
248B		  * END 0
248B		  * %zero<def> = ADDI %zero, 0
248B		  * %zero<def> = ADDI %zero, 0
424B		%t4<def> = ADD %t5, %zero
424B		  * %vreg45<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg45
424B		  * %vreg46<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg46
424B		  * %vreg47<def> = SRLI %vreg46, 12; GR32Bit:%vreg47,%vreg46
424B		  * %vreg48<def> = ADD %vreg45, %vreg47; GR32Bit:%vreg48,%vreg45,%vreg47
424B		  * %vreg49<def> = ADDI %zero, 20; GR32Bit:%vreg49
424B		  * %vreg50<def> = SRLI %t5, 22; GR32Bit:%vreg50
424B		  * %vreg51<def> = SRLI %t5, 12; GR32Bit:%vreg51
424B		  * %vreg52<def> = ANDI %vreg51, 15; GR32Bit:%vreg52,%vreg51
424B		  * %vreg53<def> = SRLI %t5, 6; GR32Bit:%vreg53
424B		  * %vreg54<def> = ANDI %vreg53, 63; GR32Bit:%vreg54,%vreg53
424B		  * %vreg55<def> = ADDI %zero, 832; GR32Bit:%vreg55
424B		  * %vreg56<def> = MUL %vreg50, %vreg55; GR32Bit:%vreg56,%vreg50,%vreg55
424B		  * %vreg57<def> = ADDI %zero, 52; GR32Bit:%vreg57
424B		  * %vreg58<def> = MUL %vreg52, %vreg57; GR32Bit:%vreg58,%vreg52,%vreg57
424B		  * %vreg59<def> = ADD %vreg58, %vreg54; GR32Bit:%vreg59,%vreg58,%vreg54
424B		  * %vreg60<def> = ADD %vreg59, %vreg56; GR32Bit:%vreg60,%vreg59,%vreg56
424B		  * %vreg61<def> = MUL %vreg60, %vreg49; GR32Bit:%vreg61,%vreg60,%vreg49
424B		  * %t5<def> = ADD %vreg48, %vreg61; GR32Bit:%vreg48,%vreg61
424B		  * END 0
424B		  * %zero<def> = ADDI %zero, 0
424B		  * %zero<def> = ADDI %zero, 0
600B		%t4<def> = ADD %t5, %zero
600B		  * %vreg64<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg64
600B		  * %vreg65<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg65
600B		  * %vreg66<def> = SRLI %vreg65, 12; GR32Bit:%vreg66,%vreg65
600B		  * %vreg67<def> = ADD %vreg64, %vreg66; GR32Bit:%vreg67,%vreg64,%vreg66
600B		  * %vreg68<def> = ADDI %zero, 20; GR32Bit:%vreg68
600B		  * %vreg69<def> = SRLI %t5, 22; GR32Bit:%vreg69
600B		  * %vreg70<def> = SRLI %t5, 12; GR32Bit:%vreg70
600B		  * %vreg71<def> = ANDI %vreg70, 15; GR32Bit:%vreg71,%vreg70
600B		  * %vreg72<def> = SRLI %t5, 6; GR32Bit:%vreg72
600B		  * %vreg73<def> = ANDI %vreg72, 63; GR32Bit:%vreg73,%vreg72
600B		  * %vreg74<def> = ADDI %zero, 832; GR32Bit:%vreg74
600B		  * %vreg75<def> = MUL %vreg69, %vreg74; GR32Bit:%vreg75,%vreg69,%vreg74
600B		  * %vreg76<def> = ADDI %zero, 52; GR32Bit:%vreg76
600B		  * %vreg77<def> = MUL %vreg71, %vreg76; GR32Bit:%vreg77,%vreg71,%vreg76
600B		  * %vreg78<def> = ADD %vreg77, %vreg73; GR32Bit:%vreg78,%vreg77,%vreg73
600B		  * %vreg79<def> = ADD %vreg78, %vreg75; GR32Bit:%vreg79,%vreg78,%vreg75
600B		  * %vreg80<def> = MUL %vreg79, %vreg68; GR32Bit:%vreg80,%vreg79,%vreg68
600B		  * %t5<def> = ADD %vreg67, %vreg80; GR32Bit:%vreg67,%vreg80
600B		  * END 0
600B		  * %zero<def> = ADDI %zero, 0
600B		  * %zero<def> = ADDI %zero, 0

# End machine code for function redefine_start2.

********** COMPUTING LIVE DEBUG VARIABLES: redefine_start2 **********
********** DEBUG VARIABLES **********
********** Compute Spill Weights **********
********** Function: redefine_start2
********** GREEDY REGISTER ALLOCATION **********
********** Function: redefine_start2

selectOrSplit GR32Bit:%vreg10 [48r,160r:0)  0@48r
assigning %vreg10 to %t0: t0

selectOrSplit GR32Bit:%vreg29 [280r,392r:0)  0@280r
assigning %vreg29 to %t0: t0

selectOrSplit GR32Bit:%vreg48 [456r,568r:0)  0@456r
assigning %vreg48 to %t0: t0

selectOrSplit GR32Bit:%vreg67 [632r,744r:0)  0@632r
assigning %vreg67 to %t0: t0

selectOrSplit GR32Bit:%vreg11 [56r,152r:0)  0@56r
assigning %vreg11 to %t1: t1

selectOrSplit GR32Bit:%vreg30 [288r,384r:0)  0@288r
assigning %vreg30 to %t1: t1

selectOrSplit GR32Bit:%vreg49 [464r,560r:0)  0@464r
assigning %vreg49 to %t1: t1

selectOrSplit GR32Bit:%vreg68 [640r,736r:0)  0@640r
assigning %vreg68 to %t1: t1

selectOrSplit GR32Bit:%vreg12 [64r,112r:0)  0@64r
assigning %vreg12 to %t2: t2

selectOrSplit GR32Bit:%vreg14 [80r,128r:0)  0@80r
assigning %vreg14 to %fp: fp

selectOrSplit GR32Bit:%vreg31 [296r,344r:0)  0@296r
assigning %vreg31 to %t2: t2

selectOrSplit GR32Bit:%vreg33 [312r,360r:0)  0@312r
assigning %vreg33 to %fp: fp

selectOrSplit GR32Bit:%vreg50 [472r,520r:0)  0@472r
assigning %vreg50 to %t2: t2

selectOrSplit GR32Bit:%vreg52 [488r,536r:0)  0@488r
assigning %vreg52 to %fp: fp

selectOrSplit GR32Bit:%vreg69 [648r,696r:0)  0@648r
assigning %vreg69 to %t2: t2

selectOrSplit GR32Bit:%vreg71 [664r,712r:0)  0@664r
assigning %vreg71 to %fp: fp

selectOrSplit GR32Bit:%vreg16 [96r,136r:0)  0@96r
assigning %vreg16 to %a0: a0

selectOrSplit GR32Bit:%vreg35 [328r,368r:0)  0@328r
assigning %vreg35 to %a0: a0

selectOrSplit GR32Bit:%vreg54 [504r,544r:0)  0@504r
assigning %vreg54 to %a0: a0

selectOrSplit GR32Bit:%vreg73 [680r,720r:0)  0@680r
assigning %vreg73 to %a0: a0

selectOrSplit GR32Bit:%vreg18 [112r,144r:0)  0@112r
assigning %vreg18 to %t2: t2

selectOrSplit GR32Bit:%vreg37 [344r,376r:0)  0@344r
assigning %vreg37 to %t2: t2

selectOrSplit GR32Bit:%vreg56 [520r,552r:0)  0@520r
assigning %vreg56 to %t2: t2

selectOrSplit GR32Bit:%vreg75 [696r,728r:0)  0@696r
assigning %vreg75 to %t2: t2

selectOrSplit GR32Bit:%vreg0 [176r,200r:0)  0@176r
assigning %vreg0 to %t0: t0

selectOrSplit GR32Bit:%vreg3 [168r,192r:0)  0@168r
assigning %vreg3 to %t1: t1

selectOrSplit GR32Bit:%vreg7 [24r,48r:0)  0@24r
assigning %vreg7 to %t0: t0

selectOrSplit GR32Bit:%vreg26 [256r,280r:0)  0@256r
assigning %vreg26 to %t0: t0

selectOrSplit GR32Bit:%vreg45 [432r,456r:0)  0@432r
assigning %vreg45 to %t0: t0

selectOrSplit GR32Bit:%vreg64 [608r,632r:0)  0@608r
assigning %vreg64 to %t0: t0

selectOrSplit GR32Bit:%vreg4 [192r,208r:0)  0@192r
assigning %vreg4 to %t1: t1

selectOrSplit FP32Bit:%vreg1 [200r,208r:0)  0@200r
AllocationOrder(FP32Bit) = [ %ft1 %ft2 %ft3 %ft4 %ft5 %ft6 %ft7 %fs0 %fs1 %fa0 %fa1 %fa2 %fa3 %fa4 %fa5 %fa6 %fa7 %fs2 %fs3 %fs4 %fs5 %fs6 %fs7 %fs8 %fs9 %fs10 %fs11 %ft8 %ft9 %ft10 %ft11 ]
assigning %vreg1 to %ft1: ft1

selectOrSplit GR32Bit:%vreg2 [184r,192r:0)  0@184r
assigning %vreg2 to %t2: t2

selectOrSplit GR32Bit:%vreg8 [32r,40r:0)  0@32r
assigning %vreg8 to %t1: t1

selectOrSplit GR32Bit:%vreg9 [40r,48r:0)  0@40r
assigning %vreg9 to %t1: t1

selectOrSplit GR32Bit:%vreg13 [72r,80r:0)  0@72r
assigning %vreg13 to %fp: fp

selectOrSplit GR32Bit:%vreg15 [88r,96r:0)  0@88r
assigning %vreg15 to %a0: a0

selectOrSplit GR32Bit:%vreg17 [104r,112r:0)  0@104r
assigning %vreg17 to %a1: a1

selectOrSplit GR32Bit:%vreg19 [120r,128r:0)  0@120r
assigning %vreg19 to %a1: a1

selectOrSplit GR32Bit:%vreg20 [128r,136r:0)  0@128r
assigning %vreg20 to %fp: fp

selectOrSplit GR32Bit:%vreg21 [136r,144r:0)  0@136r
assigning %vreg21 to %fp: fp

selectOrSplit GR32Bit:%vreg22 [144r,152r:0)  0@144r
assigning %vreg22 to %t2: t2

selectOrSplit GR32Bit:%vreg23 [152r,160r:0)  0@152r
assigning %vreg23 to %t1: t1

selectOrSplit GR32Bit:%vreg27 [264r,272r:0)  0@264r
assigning %vreg27 to %t1: t1

selectOrSplit GR32Bit:%vreg28 [272r,280r:0)  0@272r
assigning %vreg28 to %t1: t1

selectOrSplit GR32Bit:%vreg32 [304r,312r:0)  0@304r
assigning %vreg32 to %fp: fp

selectOrSplit GR32Bit:%vreg34 [320r,328r:0)  0@320r
assigning %vreg34 to %a0: a0

selectOrSplit GR32Bit:%vreg36 [336r,344r:0)  0@336r
assigning %vreg36 to %a1: a1

selectOrSplit GR32Bit:%vreg38 [352r,360r:0)  0@352r
assigning %vreg38 to %a1: a1

selectOrSplit GR32Bit:%vreg39 [360r,368r:0)  0@360r
assigning %vreg39 to %fp: fp

selectOrSplit GR32Bit:%vreg40 [368r,376r:0)  0@368r
assigning %vreg40 to %fp: fp

selectOrSplit GR32Bit:%vreg41 [376r,384r:0)  0@376r
assigning %vreg41 to %t2: t2

selectOrSplit GR32Bit:%vreg42 [384r,392r:0)  0@384r
assigning %vreg42 to %t1: t1

selectOrSplit GR32Bit:%vreg46 [440r,448r:0)  0@440r
assigning %vreg46 to %t1: t1

selectOrSplit GR32Bit:%vreg47 [448r,456r:0)  0@448r
assigning %vreg47 to %t1: t1

selectOrSplit GR32Bit:%vreg51 [480r,488r:0)  0@480r
assigning %vreg51 to %fp: fp

selectOrSplit GR32Bit:%vreg53 [496r,504r:0)  0@496r
assigning %vreg53 to %a0: a0

selectOrSplit GR32Bit:%vreg55 [512r,520r:0)  0@512r
assigning %vreg55 to %a1: a1

selectOrSplit GR32Bit:%vreg57 [528r,536r:0)  0@528r
assigning %vreg57 to %a1: a1

selectOrSplit GR32Bit:%vreg58 [536r,544r:0)  0@536r
assigning %vreg58 to %fp: fp

selectOrSplit GR32Bit:%vreg59 [544r,552r:0)  0@544r
assigning %vreg59 to %fp: fp

selectOrSplit GR32Bit:%vreg60 [552r,560r:0)  0@552r
assigning %vreg60 to %t2: t2

selectOrSplit GR32Bit:%vreg61 [560r,568r:0)  0@560r
assigning %vreg61 to %t1: t1

selectOrSplit GR32Bit:%vreg65 [616r,624r:0)  0@616r
assigning %vreg65 to %t1: t1

selectOrSplit GR32Bit:%vreg66 [624r,632r:0)  0@624r
assigning %vreg66 to %t1: t1

selectOrSplit GR32Bit:%vreg70 [656r,664r:0)  0@656r
assigning %vreg70 to %fp: fp

selectOrSplit GR32Bit:%vreg72 [672r,680r:0)  0@672r
assigning %vreg72 to %a0: a0

selectOrSplit GR32Bit:%vreg74 [688r,696r:0)  0@688r
assigning %vreg74 to %a1: a1

selectOrSplit GR32Bit:%vreg76 [704r,712r:0)  0@704r
assigning %vreg76 to %a1: a1

selectOrSplit GR32Bit:%vreg77 [712r,720r:0)  0@712r
assigning %vreg77 to %fp: fp

selectOrSplit GR32Bit:%vreg78 [720r,728r:0)  0@720r
assigning %vreg78 to %fp: fp

selectOrSplit GR32Bit:%vreg79 [728r,736r:0)  0@728r
assigning %vreg79 to %t2: t2

selectOrSplit GR32Bit:%vreg80 [736r,744r:0)  0@736r
assigning %vreg80 to %t1: t1
********** REWRITE VIRTUAL REGISTERS **********
********** Function: redefine_start2
********** REGISTER MAP **********
[%vreg0 -> %t0] GR32Bit
[%vreg1 -> %ft1] FP32Bit
[%vreg2 -> %t2] GR32Bit
[%vreg3 -> %t1] GR32Bit
[%vreg4 -> %t1] GR32Bit
[%vreg7 -> %t0] GR32Bit
[%vreg8 -> %t1] GR32Bit
[%vreg9 -> %t1] GR32Bit
[%vreg10 -> %t0] GR32Bit
[%vreg11 -> %t1] GR32Bit
[%vreg12 -> %t2] GR32Bit
[%vreg13 -> %fp] GR32Bit
[%vreg14 -> %fp] GR32Bit
[%vreg15 -> %a0] GR32Bit
[%vreg16 -> %a0] GR32Bit
[%vreg17 -> %a1] GR32Bit
[%vreg18 -> %t2] GR32Bit
[%vreg19 -> %a1] GR32Bit
[%vreg20 -> %fp] GR32Bit
[%vreg21 -> %fp] GR32Bit
[%vreg22 -> %t2] GR32Bit
[%vreg23 -> %t1] GR32Bit
[%vreg26 -> %t0] GR32Bit
[%vreg27 -> %t1] GR32Bit
[%vreg28 -> %t1] GR32Bit
[%vreg29 -> %t0] GR32Bit
[%vreg30 -> %t1] GR32Bit
[%vreg31 -> %t2] GR32Bit
[%vreg32 -> %fp] GR32Bit
[%vreg33 -> %fp] GR32Bit
[%vreg34 -> %a0] GR32Bit
[%vreg35 -> %a0] GR32Bit
[%vreg36 -> %a1] GR32Bit
[%vreg37 -> %t2] GR32Bit
[%vreg38 -> %a1] GR32Bit
[%vreg39 -> %fp] GR32Bit
[%vreg40 -> %fp] GR32Bit
[%vreg41 -> %t2] GR32Bit
[%vreg42 -> %t1] GR32Bit
[%vreg45 -> %t0] GR32Bit
[%vreg46 -> %t1] GR32Bit
[%vreg47 -> %t1] GR32Bit
[%vreg48 -> %t0] GR32Bit
[%vreg49 -> %t1] GR32Bit
[%vreg50 -> %t2] GR32Bit
[%vreg51 -> %fp] GR32Bit
[%vreg52 -> %fp] GR32Bit
[%vreg53 -> %a0] GR32Bit
[%vreg54 -> %a0] GR32Bit
[%vreg55 -> %a1] GR32Bit
[%vreg56 -> %t2] GR32Bit
[%vreg57 -> %a1] GR32Bit
[%vreg58 -> %fp] GR32Bit
[%vreg59 -> %fp] GR32Bit
[%vreg60 -> %t2] GR32Bit
[%vreg61 -> %t1] GR32Bit
[%vreg64 -> %t0] GR32Bit
[%vreg65 -> %t1] GR32Bit
[%vreg66 -> %t1] GR32Bit
[%vreg67 -> %t0] GR32Bit
[%vreg68 -> %t1] GR32Bit
[%vreg69 -> %t2] GR32Bit
[%vreg70 -> %fp] GR32Bit
[%vreg71 -> %fp] GR32Bit
[%vreg72 -> %a0] GR32Bit
[%vreg73 -> %a0] GR32Bit
[%vreg74 -> %a1] GR32Bit
[%vreg75 -> %t2] GR32Bit
[%vreg76 -> %a1] GR32Bit
[%vreg77 -> %fp] GR32Bit
[%vreg78 -> %fp] GR32Bit
[%vreg79 -> %t2] GR32Bit
[%vreg80 -> %t1] GR32Bit

0B	BB#0: derived from LLVM BB %redefine_start2.newName01
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg7<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg7
4B		  * %vreg8<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg8
4B		  * %vreg9<def> = SRLI %vreg8<kill>, 12; GR32Bit:%vreg9,%vreg8
4B		  * %vreg10<def> = ADD %vreg7<kill>, %vreg9<kill>; GR32Bit:%vreg10,%vreg7,%vreg9
4B		  * %vreg11<def> = ADDI %zero, 20; GR32Bit:%vreg11
4B		  * %vreg12<def> = SRLI %t5, 22; GR32Bit:%vreg12
4B		  * %vreg13<def> = SRLI %t5, 12; GR32Bit:%vreg13
4B		  * %vreg14<def> = ANDI %vreg13<kill>, 15; GR32Bit:%vreg14,%vreg13
4B		  * %vreg15<def> = SRLI %t5, 6; GR32Bit:%vreg15
4B		  * %vreg16<def> = ANDI %vreg15<kill>, 63; GR32Bit:%vreg16,%vreg15
4B		  * %vreg17<def> = ADDI %zero, 832; GR32Bit:%vreg17
4B		  * %vreg18<def> = MUL %vreg12<kill>, %vreg17<kill>; GR32Bit:%vreg18,%vreg12,%vreg17
4B		  * %vreg19<def> = ADDI %zero, 52; GR32Bit:%vreg19
4B		  * %vreg20<def> = MUL %vreg14<kill>, %vreg19<kill>; GR32Bit:%vreg20,%vreg14,%vreg19
4B		  * %vreg21<def> = ADD %vreg20<kill>, %vreg16<kill>; GR32Bit:%vreg21,%vreg20,%vreg16
4B		  * %vreg22<def> = ADD %vreg21<kill>, %vreg18<kill>; GR32Bit:%vreg22,%vreg21,%vreg18
4B		  * %vreg23<def> = MUL %vreg22<kill>, %vreg11<kill>; GR32Bit:%vreg23,%vreg22,%vreg11
4B		  * %t5<def> = ADD %vreg10<kill>, %vreg23<kill>; GR32Bit:%vreg10,%vreg23
4B		  * %vreg3<def> = LUI <MCSym="%lo("ga#256")">; GR32Bit:%vreg3
4B		  * SRLI %vreg3, %vreg3, 12; GR32Bit:%vreg3
4B		  * %vreg0<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg0
4B		  * %vreg2<def> = LUI <ga:@redefine_out_parameter>[TF=2]; GR32Bit:%vreg2
4B		  * %vreg4<def> = ADD %vreg3<kill>, %vreg2<kill>; GR32Bit:%vreg4,%vreg3,%vreg2
4B		  * %vreg1<def> = FLW %vreg0<kill>, 0; mem:LD4[%0](align=16) FP32Bit:%vreg1 GR32Bit:%vreg0
4B		  * FSW %vreg1<kill>, %vreg4<kill>, 0; mem:ST4[@redefine_out_parameter] FP32Bit:%vreg1 GR32Bit:%vreg4
4B		  * FDELETE %t4, 0
4B		  * END 0
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
248B		%t4<def> = ADD %t5, %zero
248B		  * %vreg26<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg26
248B		  * %vreg27<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg27
248B		  * %vreg28<def> = SRLI %vreg27<kill>, 12; GR32Bit:%vreg28,%vreg27
248B		  * %vreg29<def> = ADD %vreg26<kill>, %vreg28<kill>; GR32Bit:%vreg29,%vreg26,%vreg28
248B		  * %vreg30<def> = ADDI %zero, 20; GR32Bit:%vreg30
248B		  * %vreg31<def> = SRLI %t5, 22; GR32Bit:%vreg31
248B		  * %vreg32<def> = SRLI %t5, 12; GR32Bit:%vreg32
248B		  * %vreg33<def> = ANDI %vreg32<kill>, 15; GR32Bit:%vreg33,%vreg32
248B		  * %vreg34<def> = SRLI %t5, 6; GR32Bit:%vreg34
248B		  * %vreg35<def> = ANDI %vreg34<kill>, 63; GR32Bit:%vreg35,%vreg34
248B		  * %vreg36<def> = ADDI %zero, 832; GR32Bit:%vreg36
248B		  * %vreg37<def> = MUL %vreg31<kill>, %vreg36<kill>; GR32Bit:%vreg37,%vreg31,%vreg36
248B		  * %vreg38<def> = ADDI %zero, 52; GR32Bit:%vreg38
248B		  * %vreg39<def> = MUL %vreg33<kill>, %vreg38<kill>; GR32Bit:%vreg39,%vreg33,%vreg38
248B		  * %vreg40<def> = ADD %vreg39<kill>, %vreg35<kill>; GR32Bit:%vreg40,%vreg39,%vreg35
248B		  * %vreg41<def> = ADD %vreg40<kill>, %vreg37<kill>; GR32Bit:%vreg41,%vreg40,%vreg37
248B		  * %vreg42<def> = MUL %vreg41<kill>, %vreg30<kill>; GR32Bit:%vreg42,%vreg41,%vreg30
248B		  * %t5<def> = ADD %vreg29<kill>, %vreg42<kill>; GR32Bit:%vreg29,%vreg42
248B		  * END 0
248B		  * %zero<def> = ADDI %zero, 0
248B		  * %zero<def> = ADDI %zero, 0
424B		%t4<def> = ADD %t5, %zero
424B		  * %vreg45<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg45
424B		  * %vreg46<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg46
424B		  * %vreg47<def> = SRLI %vreg46<kill>, 12; GR32Bit:%vreg47,%vreg46
424B		  * %vreg48<def> = ADD %vreg45<kill>, %vreg47<kill>; GR32Bit:%vreg48,%vreg45,%vreg47
424B		  * %vreg49<def> = ADDI %zero, 20; GR32Bit:%vreg49
424B		  * %vreg50<def> = SRLI %t5, 22; GR32Bit:%vreg50
424B		  * %vreg51<def> = SRLI %t5, 12; GR32Bit:%vreg51
424B		  * %vreg52<def> = ANDI %vreg51<kill>, 15; GR32Bit:%vreg52,%vreg51
424B		  * %vreg53<def> = SRLI %t5, 6; GR32Bit:%vreg53
424B		  * %vreg54<def> = ANDI %vreg53<kill>, 63; GR32Bit:%vreg54,%vreg53
424B		  * %vreg55<def> = ADDI %zero, 832; GR32Bit:%vreg55
424B		  * %vreg56<def> = MUL %vreg50<kill>, %vreg55<kill>; GR32Bit:%vreg56,%vreg50,%vreg55
424B		  * %vreg57<def> = ADDI %zero, 52; GR32Bit:%vreg57
424B		  * %vreg58<def> = MUL %vreg52<kill>, %vreg57<kill>; GR32Bit:%vreg58,%vreg52,%vreg57
424B		  * %vreg59<def> = ADD %vreg58<kill>, %vreg54<kill>; GR32Bit:%vreg59,%vreg58,%vreg54
424B		  * %vreg60<def> = ADD %vreg59<kill>, %vreg56<kill>; GR32Bit:%vreg60,%vreg59,%vreg56
424B		  * %vreg61<def> = MUL %vreg60<kill>, %vreg49<kill>; GR32Bit:%vreg61,%vreg60,%vreg49
424B		  * %t5<def> = ADD %vreg48<kill>, %vreg61<kill>; GR32Bit:%vreg48,%vreg61
424B		  * END 0
424B		  * %zero<def> = ADDI %zero, 0
424B		  * %zero<def> = ADDI %zero, 0
600B		%t4<def> = ADD %t5, %zero
600B		  * %vreg64<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg64
600B		  * %vreg65<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg65
600B		  * %vreg66<def> = SRLI %vreg65<kill>, 12; GR32Bit:%vreg66,%vreg65
600B		  * %vreg67<def> = ADD %vreg64<kill>, %vreg66<kill>; GR32Bit:%vreg67,%vreg64,%vreg66
600B		  * %vreg68<def> = ADDI %zero, 20; GR32Bit:%vreg68
600B		  * %vreg69<def> = SRLI %t5, 22; GR32Bit:%vreg69
600B		  * %vreg70<def> = SRLI %t5, 12; GR32Bit:%vreg70
600B		  * %vreg71<def> = ANDI %vreg70<kill>, 15; GR32Bit:%vreg71,%vreg70
600B		  * %vreg72<def> = SRLI %t5, 6; GR32Bit:%vreg72
600B		  * %vreg73<def> = ANDI %vreg72<kill>, 63; GR32Bit:%vreg73,%vreg72
600B		  * %vreg74<def> = ADDI %zero, 832; GR32Bit:%vreg74
600B		  * %vreg75<def> = MUL %vreg69<kill>, %vreg74<kill>; GR32Bit:%vreg75,%vreg69,%vreg74
600B		  * %vreg76<def> = ADDI %zero, 52; GR32Bit:%vreg76
600B		  * %vreg77<def> = MUL %vreg71<kill>, %vreg76<kill>; GR32Bit:%vreg77,%vreg71,%vreg76
600B		  * %vreg78<def> = ADD %vreg77<kill>, %vreg73<kill>; GR32Bit:%vreg78,%vreg77,%vreg73
600B		  * %vreg79<def> = ADD %vreg78<kill>, %vreg75<kill>; GR32Bit:%vreg79,%vreg78,%vreg75
600B		  * %vreg80<def> = MUL %vreg79<kill>, %vreg68<kill>; GR32Bit:%vreg80,%vreg79,%vreg68
600B		  * %t5<def> = ADD %vreg67<kill>, %vreg80<kill>; GR32Bit:%vreg67,%vreg80
600B		  * END 0
600B		  * %zero<def> = ADDI %zero, 0
600B		  * %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 20
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = LUI <MCSym="%lo("ga#256")">
> SRLI %t1, %t1, 12
> %t0<def> = ADDI %t5, <fi#-1>
> %t2<def> = LUI <ga:@redefine_out_parameter>[TF=2]
> %t1<def> = ADD %t1<kill>, %t2<kill>
> %ft1<def> = FLW %t0<kill>, 0; mem:LD4[%0](align=16)
> FSW %ft1<kill>, %t1<kill>, 0; mem:ST4[@redefine_out_parameter]
> FDELETE %t4, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 20
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 20
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 20
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
********** EMITTING LIVE DEBUG VARIABLES **********
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: redefine_start2
current state of mf:# Machine code for function redefine_start2: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]

BB#0: derived from LLVM BB %redefine_start2.newName01
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 20
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = LUI <MCSym="%lo("ga#256")">
	  * SRLI %t1, %t1, 12
	  * %t0<def> = ADDI %t5, <fi#-1>
	  * %t2<def> = LUI <ga:@redefine_out_parameter>[TF=2]
	  * %t1<def> = ADD %t1<kill>, %t2<kill>
	  * %ft1<def> = FLW %t0<kill>, 0; mem:LD4[%0](align=16)
	  * FSW %ft1<kill>, %t1<kill>, 0; mem:ST4[@redefine_out_parameter]
	  * FDELETE %t4, 0
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 20
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 20
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 20
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0

# End machine code for function redefine_start2.

lowering frame index for func redefine_start2:-1 TO VAL:0
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%4]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:%8 + 4*%7]
CGP: Found      local addrmode: [Base:%4]
CGP: Found      local addrmode: [Base:%4]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%4]
CGP: Found      local addrmode: [Base:%4]
CGP: Found      local addrmode: [Base:%4]
CGP: Found      local addrmode: [Base:%1]
Computing probabilities for po_calculation3.for.inc
set edge po_calculation3.for.inc -> 0 successor weight to 124
Computing probabilities for po_calculation3.for.body
set edge po_calculation3.for.body -> 0 successor weight to 124
Computing probabilities for po_calculation3.return
Computing probabilities for po_calculation3.for.end
Computing probabilities for po_calculation3.for.cond
set edge po_calculation3.for.cond -> 0 successor weight to 124
set edge po_calculation3.for.cond -> 1 successor weight to 4
Computing probabilities for po_calculation3.entry



=== po_calculation3
store visit is after?  store float* %0, float** %2, align 4
I was here to add float* %0
arg match found with argIndex:-1
Argument does not have assigned frame index!
The value is an argument for which I am here to get arg frame index as:0
whats the index?-1
I was here to add   %2 = alloca float*, align 4
whats in dag after store?SelectionDAG has 7 nodes:
  0x387f108: ch = EntryToken [ORD=6]

  0x389d200: i32 = FrameIndex<-1> [ORD=6]

  0x389d000: i32 = undef [ORD=6]

    0x387f108: <multiple use>
    0x389d200: <multiple use>
    0x389d000: <multiple use>
  0x389c800: i32,ch = load 0x387f108, 0x389d200, 0x389d000<LD4[FixedStack-1]>

  0x389ce00: i32 = Constant<0>

    0x387f108: <multiple use>
    0x389d200: <multiple use>
    0x389cf00: i32 = FrameIndex<1> [ORD=6]

    0x389d000: <multiple use>
  0x389c900: ch = store 0x387f108, 0x389d200, 0x389cf00, 0x389d000<ST4[%2]> [ORD=6]


store visit is after?  store i32 0, i32* %3, align 4
I was here to add i32 0
I was here to add   %3 = alloca i32, align 4
whats in dag after store?SelectionDAG has 9 nodes:
  0x387f108: ch = EntryToken [ORD=6]

  0x389d200: i32 = FrameIndex<-1> [ORD=6]

  0x389d000: i32 = undef [ORD=6]

    0x387f108: <multiple use>
    0x389d200: <multiple use>
    0x389d000: <multiple use>
  0x389c800: i32,ch = load 0x387f108, 0x389d200, 0x389d000<LD4[FixedStack-1]>

      0x387f108: <multiple use>
      0x389d200: <multiple use>
      0x389cf00: i32 = FrameIndex<1> [ORD=6]

      0x389d000: <multiple use>
    0x389c900: ch = store 0x387f108, 0x389d200, 0x389cf00, 0x389d000<ST4[%2]> [ORD=6]

    0x389ce00: i32 = Constant<0> [ORD=7]

    0x389cc00: i32 = FrameIndex<2> [ORD=7]

    0x389d000: <multiple use>
  0x389cd00: ch = store 0x389c900, 0x389ce00, 0x389cc00, 0x389d000<ST4[%3]> [ORD=7]


store visit is after?  store i32 0, i32* %4, align 4
I was here to add   %4 = alloca i32, align 4
whats in dag after store?SelectionDAG has 11 nodes:
  0x387f108: ch = EntryToken [ORD=6]

  0x389d200: i32 = FrameIndex<-1> [ORD=6]

  0x389d000: i32 = undef [ORD=6]

    0x387f108: <multiple use>
    0x389d200: <multiple use>
    0x389d000: <multiple use>
  0x389c800: i32,ch = load 0x387f108, 0x389d200, 0x389d000<LD4[FixedStack-1]>

  0x389ce00: i32 = Constant<0> [ORD=7]

        0x387f108: <multiple use>
        0x389d200: <multiple use>
        0x389cf00: i32 = FrameIndex<1> [ORD=6]

        0x389d000: <multiple use>
      0x389c900: ch = store 0x387f108, 0x389d200, 0x389cf00, 0x389d000<ST4[%2]> [ORD=6]

      0x389ce00: <multiple use>
      0x389cc00: i32 = FrameIndex<2> [ORD=7]

      0x389d000: <multiple use>
    0x389cd00: ch = store 0x389c900, 0x389ce00, 0x389cc00, 0x389d000<ST4[%3]> [ORD=7]

    0x389ce00: <multiple use>
    0x389cb00: i32 = FrameIndex<3> [ORD=8]

    0x389d000: <multiple use>
  0x389c700: ch = store 0x389cd00, 0x389ce00, 0x389cb00, 0x389d000<ST4[%4]> [ORD=8]


Initial selection DAG: BB#0 'po_calculation3:po_calculation3.entry'
SelectionDAG has 11 nodes:
  0x387f108: ch = EntryToken [ORD=6]

  0x389d200: i32 = FrameIndex<-1> [ORD=6]

  0x389d000: i32 = undef [ORD=6]

    0x387f108: <multiple use>
    0x389d200: <multiple use>
    0x389d000: <multiple use>
  0x389c800: i32,ch = load 0x387f108, 0x389d200, 0x389d000<LD4[FixedStack-1]>

  0x389ce00: i32 = Constant<0> [ORD=7]

        0x387f108: <multiple use>
        0x389d200: <multiple use>
        0x389cf00: i32 = FrameIndex<1> [ORD=6]

        0x389d000: <multiple use>
      0x389c900: ch = store 0x387f108, 0x389d200, 0x389cf00, 0x389d000<ST4[%2]> [ORD=6]

      0x389ce00: <multiple use>
      0x389cc00: i32 = FrameIndex<2> [ORD=7]

      0x389d000: <multiple use>
    0x389cd00: ch = store 0x389c900, 0x389ce00, 0x389cc00, 0x389d000<ST4[%3]> [ORD=7]

    0x389ce00: <multiple use>
    0x389cb00: i32 = FrameIndex<3> [ORD=8]

    0x389d000: <multiple use>
  0x389c700: ch = store 0x389cd00, 0x389ce00, 0x389cb00, 0x389d000<ST4[%4]> [ORD=8]


Optimized lowered selection DAG: BB#0 'po_calculation3:po_calculation3.entry'
SelectionDAG has 10 nodes:
  0x389d000: i32 = undef [ORD=6]

  0x389ce00: i32 = Constant<0> [ORD=7]

        0x387f108: ch = EntryToken [ORD=6]

        0x389d200: i32 = FrameIndex<-1> [ORD=6]

        0x389cf00: i32 = FrameIndex<1> [ORD=6]

        0x389d000: <multiple use>
      0x389c900: ch = store 0x387f108, 0x389d200, 0x389cf00, 0x389d000<ST4[%2]> [ORD=6]

      0x389ce00: <multiple use>
      0x389cc00: i32 = FrameIndex<2> [ORD=7]

      0x389d000: <multiple use>
    0x389cd00: ch = store 0x389c900, 0x389ce00, 0x389cc00, 0x389d000<ST4[%3]> [ORD=7]

    0x389ce00: <multiple use>
    0x389cb00: i32 = FrameIndex<3> [ORD=8]

    0x389d000: <multiple use>
  0x389c700: ch = store 0x389cd00, 0x389ce00, 0x389cb00, 0x389d000<ST4[%4]> [ORD=8]


Legally typed node: 0x389cb00: i32 = FrameIndex<3> [ORD=8] [ID=0]

Legally typed node: 0x389cc00: i32 = FrameIndex<2> [ORD=7] [ID=0]

Legally typed node: 0x389ce00: i32 = Constant<0> [ORD=7] [ID=0]

Legally typed node: 0x389cf00: i32 = FrameIndex<1> [ORD=6] [ID=0]

Legally typed node: 0x389d000: i32 = undef [ORD=6] [ID=0]

Legally typed node: 0x389d200: i32 = FrameIndex<-1> [ORD=6] [ID=0]

Legally typed node: 0x387f108: ch = EntryToken [ORD=6] [ID=0]

Legally typed node: 0x389c900: ch = store 0x387f108, 0x389d200, 0x389cf00, 0x389d000<ST4[%2]> [ORD=6] [ID=0]

Legally typed node: 0x389cd00: ch = store 0x389c900, 0x389ce00, 0x389cc00, 0x389d000<ST4[%3]> [ORD=7] [ID=0]

Legally typed node: 0x389c700: ch = store 0x389cd00, 0x389ce00, 0x389cb00, 0x389d000<ST4[%4]> [ORD=8] [ID=0]

Legally typed node: 0x7fff6fb15090: ch = handlenode 0x389c700 [ID=0]

Type-legalized selection DAG: BB#0 'po_calculation3:po_calculation3.entry'
SelectionDAG has 10 nodes:
  0x389d000: i32 = undef [ORD=6] [ID=-3]

  0x389ce00: i32 = Constant<0> [ORD=7] [ID=-3]

        0x387f108: ch = EntryToken [ORD=6] [ID=-3]

        0x389d200: i32 = FrameIndex<-1> [ORD=6] [ID=-3]

        0x389cf00: i32 = FrameIndex<1> [ORD=6] [ID=-3]

        0x389d000: <multiple use>
      0x389c900: ch = store 0x387f108, 0x389d200, 0x389cf00, 0x389d000<ST4[%2]> [ORD=6] [ID=-3]

      0x389ce00: <multiple use>
      0x389cc00: i32 = FrameIndex<2> [ORD=7] [ID=-3]

      0x389d000: <multiple use>
    0x389cd00: ch = store 0x389c900, 0x389ce00, 0x389cc00, 0x389d000<ST4[%3]> [ORD=7] [ID=-3]

    0x389ce00: <multiple use>
    0x389cb00: i32 = FrameIndex<3> [ORD=8] [ID=-3]

    0x389d000: <multiple use>
  0x389c700: ch = store 0x389cd00, 0x389ce00, 0x389cb00, 0x389d000<ST4[%4]> [ORD=8] [ID=-3]


Legalized selection DAG: BB#0 'po_calculation3:po_calculation3.entry'
SelectionDAG has 10 nodes:
  0x389d000: i32 = undef [ORD=6] [ID=2]

  0x389ce00: i32 = Constant<0> [ORD=7] [ID=4]

        0x387f108: ch = EntryToken [ORD=6] [ID=0]

        0x389d200: i32 = FrameIndex<-1> [ORD=6] [ID=1]

        0x389cf00: i32 = FrameIndex<1> [ORD=6] [ID=3]

        0x389d000: <multiple use>
      0x389c900: ch = store 0x387f108, 0x389d200, 0x389cf00, 0x389d000<ST4[%2]> [ORD=6] [ID=7]

      0x389ce00: <multiple use>
      0x389cc00: i32 = FrameIndex<2> [ORD=7] [ID=5]

      0x389d000: <multiple use>
    0x389cd00: ch = store 0x389c900, 0x389ce00, 0x389cc00, 0x389d000<ST4[%3]> [ORD=7] [ID=8]

    0x389ce00: <multiple use>
    0x389cb00: i32 = FrameIndex<3> [ORD=8] [ID=6]

    0x389d000: <multiple use>
  0x389c700: ch = store 0x389cd00, 0x389ce00, 0x389cb00, 0x389d000<ST4[%4]> [ORD=8] [ID=9]


Optimized legalized selection DAG: BB#0 'po_calculation3:po_calculation3.entry'
SelectionDAG has 10 nodes:
  0x389d000: i32 = undef [ORD=6] [ID=2]

  0x389ce00: i32 = Constant<0> [ORD=7] [ID=4]

        0x387f108: ch = EntryToken [ORD=6] [ID=0]

        0x389d200: i32 = FrameIndex<-1> [ORD=6] [ID=1]

        0x389cf00: i32 = FrameIndex<1> [ORD=6] [ID=3]

        0x389d000: <multiple use>
      0x389c900: ch = store 0x387f108, 0x389d200, 0x389cf00, 0x389d000<ST4[%2]> [ORD=6] [ID=7]

      0x389ce00: <multiple use>
      0x389cc00: i32 = FrameIndex<2> [ORD=7] [ID=5]

      0x389d000: <multiple use>
    0x389cd00: ch = store 0x389c900, 0x389ce00, 0x389cc00, 0x389d000<ST4[%3]> [ORD=7] [ID=8]

    0x389ce00: <multiple use>
    0x389cb00: i32 = FrameIndex<3> [ORD=8] [ID=6]

    0x389d000: <multiple use>
  0x389c700: ch = store 0x389cd00, 0x389ce00, 0x389cb00, 0x389d000<ST4[%4]> [ORD=8] [ID=9]


===== Instruction selection begins: BB#0 'po_calculation3.entry'
ISEL: Starting pattern match on root node: 0x389c700: ch = store 0x389cd00, 0x389ce00, 0x389cb00, 0x389d000<ST4[%4]> [ORD=8] [ID=9]

  Initial Opcode index to 178
  Morphed node: 0x389c700: ch = SW 0x389ce00, 0x389cb00, 0x389c800, 0x389cd00<Mem:ST4[%4]> [ORD=8]

ISEL: Match complete!
=> 0x389c700: ch = SW 0x389ce00, 0x389cb00, 0x389c800, 0x389cd00<Mem:ST4[%4]> [ORD=8]

ISEL: Starting pattern match on root node: 0x389cd00: ch = store 0x389c900, 0x389ce00, 0x389cc00, 0x389d000<ST4[%3]> [ORD=7] [ID=8]

  Initial Opcode index to 178
  Morphed node: 0x389cd00: ch = SW 0x389ce00, 0x389cc00, 0x389c800, 0x389c900<Mem:ST4[%3]> [ORD=7]

ISEL: Match complete!
=> 0x389cd00: ch = SW 0x389ce00, 0x389cc00, 0x389c800, 0x389c900<Mem:ST4[%3]> [ORD=7]

ISEL: Starting pattern match on root node: 0x389c900: ch = store 0x387f108, 0x389d200, 0x389cf00, 0x389d000<ST4[%2]> [ORD=6] [ID=7]

  Initial Opcode index to 178
  Morphed node: 0x389c900: ch = SW 0x389d200, 0x389cf00, 0x389c800, 0x387f108<Mem:ST4[%2]> [ORD=6]

ISEL: Match complete!
=> 0x389c900: ch = SW 0x389d200, 0x389cf00, 0x389c800, 0x387f108<Mem:ST4[%2]> [ORD=6]

ISEL: Starting pattern match on root node: 0x389ce00: i32 = Constant<0> [ORD=7] [ID=4]

  Initial Opcode index to 1226
comparing 0 and 0 and returning value:1
ISEL: Match complete!
=> 0x389ce00: i32 = Constant<0> [ORD=7] [ID=4]

=> 0x387f108: ch = EntryToken [ORD=6]

===== Instruction selection ends:
Selected selection DAG: BB#0 'po_calculation3:po_calculation3.entry'
SelectionDAG has 15 nodes:
  0x389c800: i32 = TargetConstant<0>

  0x389d000: i32 = Register %t5

  0x389d300: i32 = Register %zero

    0x389d300: <multiple use>
      0x389d000: <multiple use>
      0x389ca00: i32 = TargetFrameIndex<3>

    0x389cb00: i32 = ADDI 0x389d000, 0x389ca00 [ORD=8]

    0x389c800: <multiple use>
      0x389d300: <multiple use>
        0x389d000: <multiple use>
        0x389d100: i32 = TargetFrameIndex<2>

      0x389cc00: i32 = ADDI 0x389d000, 0x389d100 [ORD=7]

      0x389c800: <multiple use>
          0x389d000: <multiple use>
          0x389d400: i32 = TargetFrameIndex<-1>

        0x389d200: i32 = ADDI 0x389d000, 0x389d400 [ORD=6]

          0x389d000: <multiple use>
          0x389ce00: i32 = TargetFrameIndex<1>

        0x389cf00: i32 = ADDI 0x389d000, 0x389ce00 [ORD=6]

        0x389c800: <multiple use>
        0x387f108: ch = EntryToken [ORD=6]

      0x389c900: ch = SW 0x389d200, 0x389cf00, 0x389c800, 0x387f108<Mem:ST4[%2]> [ORD=6]

    0x389cd00: ch = SW 0x389d300, 0x389cc00, 0x389c800, 0x389c900<Mem:ST4[%3]> [ORD=7]

  0x389c700: ch = SW 0x389d300, 0x389cb00, 0x389c800, 0x389cd00<Mem:ST4[%4]> [ORD=8]


********** List Scheduling BB#0 'po_calculation3.entry' **********
SU(0): 0x389c700: ch = SW 0x389d300, 0x389cb00, 0x389c800, 0x389cd00<Mem:ST4[%4]> [ORD=8] [ID=0]

  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 0
  Predecessors:
   val SU(6): Latency=1
   ch  SU(1): Latency=1

SU(1): 0x389cd00: ch = SW 0x389d300, 0x389cc00, 0x389c800, 0x389c900<Mem:ST4[%3]> [ORD=7] [ID=1]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
   val SU(5): Latency=1
   ch  SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x389c900: ch = SW 0x389d200, 0x389cf00, 0x389c800, 0x387f108<Mem:ST4[%2]> [ORD=6] [ID=2]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
   val SU(4): Latency=1
   val SU(3): Latency=1
  Successors:
   ch  SU(1): Latency=1

SU(3): 0x389cf00: i32 = ADDI 0x389d000, 0x389ce00 [ORD=6] [ID=3]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(2): Latency=1

SU(4): 0x389d200: i32 = ADDI 0x389d000, 0x389d400 [ORD=6] [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(2): Latency=1

SU(5): 0x389cc00: i32 = ADDI 0x389d000, 0x389d100 [ORD=7] [ID=5]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
   val SU(1): Latency=1

SU(6): 0x389cb00: i32 = ADDI 0x389d000, 0x389ca00 [ORD=8] [ID=6]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
   val SU(0): Latency=1


Examining Available:
Height 0: SU(0): 0x389c700: ch = SW 0x389d300, 0x389cb00, 0x389c800, 0x389cd00<Mem:ST4[%4]> [ORD=8] [ID=0]


*** Scheduling [0]: SU(0): 0x389c700: ch = SW 0x389d300, 0x389cb00, 0x389c800, 0x389cd00<Mem:ST4[%4]> [ORD=8] [ID=0]


Examining Available:
Height 1: SU(6): 0x389cb00: i32 = ADDI 0x389d000, 0x389ca00 [ORD=8] [ID=6]

Height 1: SU(1): 0x389cd00: ch = SW 0x389d300, 0x389cc00, 0x389c800, 0x389c900<Mem:ST4[%3]> [ORD=7] [ID=1]


*** Scheduling [1]: SU(6): 0x389cb00: i32 = ADDI 0x389d000, 0x389ca00 [ORD=8] [ID=6]


Examining Available:
Height 1: SU(1): 0x389cd00: ch = SW 0x389d300, 0x389cc00, 0x389c800, 0x389c900<Mem:ST4[%3]> [ORD=7] [ID=1]


*** Scheduling [2]: SU(1): 0x389cd00: ch = SW 0x389d300, 0x389cc00, 0x389c800, 0x389c900<Mem:ST4[%3]> [ORD=7] [ID=1]


Examining Available:
Height 3: SU(5): 0x389cc00: i32 = ADDI 0x389d000, 0x389d100 [ORD=7] [ID=5]

Height 3: SU(2): 0x389c900: ch = SW 0x389d200, 0x389cf00, 0x389c800, 0x387f108<Mem:ST4[%2]> [ORD=6] [ID=2]


*** Scheduling [3]: SU(5): 0x389cc00: i32 = ADDI 0x389d000, 0x389d100 [ORD=7] [ID=5]


Examining Available:
Height 3: SU(2): 0x389c900: ch = SW 0x389d200, 0x389cf00, 0x389c800, 0x387f108<Mem:ST4[%2]> [ORD=6] [ID=2]


*** Scheduling [4]: SU(2): 0x389c900: ch = SW 0x389d200, 0x389cf00, 0x389c800, 0x387f108<Mem:ST4[%2]> [ORD=6] [ID=2]


Examining Available:
Height 5: SU(4): 0x389d200: i32 = ADDI 0x389d000, 0x389d400 [ORD=6] [ID=4]

Height 5: SU(3): 0x389cf00: i32 = ADDI 0x389d000, 0x389ce00 [ORD=6] [ID=3]


*** Scheduling [5]: SU(4): 0x389d200: i32 = ADDI 0x389d000, 0x389d400 [ORD=6] [ID=4]


Examining Available:
Height 5: SU(3): 0x389cf00: i32 = ADDI 0x389d000, 0x389ce00 [ORD=6] [ID=3]


*** Scheduling [6]: SU(3): 0x389cf00: i32 = ADDI 0x389d000, 0x389ce00 [ORD=6] [ID=3]

*** Final schedule ***
SU(3): 0x389cf00: i32 = ADDI 0x389d000, 0x389ce00 [ORD=6] [ID=3]

SU(4): 0x389d200: i32 = ADDI 0x389d000, 0x389d400 [ORD=6] [ID=4]

SU(2): 0x389c900: ch = SW 0x389d200, 0x389cf00, 0x389c800, 0x387f108<Mem:ST4[%2]> [ORD=6] [ID=2]

SU(5): 0x389cc00: i32 = ADDI 0x389d000, 0x389d100 [ORD=7] [ID=5]

SU(1): 0x389cd00: ch = SW 0x389d300, 0x389cc00, 0x389c800, 0x389c900<Mem:ST4[%3]> [ORD=7] [ID=1]

SU(6): 0x389cb00: i32 = ADDI 0x389d000, 0x389ca00 [ORD=8] [ID=6]

SU(0): 0x389c700: ch = SW 0x389d300, 0x389cb00, 0x389c800, 0x389cd00<Mem:ST4[%4]> [ORD=8] [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %5 = load i32* %3, align 4
I was here to add   %3 = alloca i32, align 4
with I type i32and sd value :0x389d400: i32 = FrameIndex<2>
new load?0x389d100: i32,ch = load 0x387f108, 0x389d400, 0x389d300<LD4[%3]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x389ce00: i32 = Constant<0>

    0x387f108: ch = EntryToken

    0x389d400: i32 = FrameIndex<2>

    0x389d300: i32 = undef

  0x389d100: i32,ch = load 0x387f108, 0x389d400, 0x389d300<LD4[%3]>

  0x387f108: ch = EntryToken


I was here to add i32 25
Initial selection DAG: BB#1 'po_calculation3:po_calculation3.for.cond'
SelectionDAG has 14 nodes:
  0x387f108: ch = EntryToken [ORD=9]

  0x389ce00: i32 = Constant<0>

      0x387f108: <multiple use>
            0x387f108: <multiple use>
            0x389d400: i32 = FrameIndex<2> [ORD=9]

            0x389d300: i32 = undef [ORD=9]

          0x389d100: i32,ch = load 0x387f108, 0x389d400, 0x389d300<LD4[%3]> [ORD=9]

          0x389ca00: i32 = Constant<25> [ORD=10]

          0x389d000: ch = setlt [ORD=10]

        0x389c800: i1 = setcc 0x389d100, 0x389ca00, 0x389d000 [ORD=10]

        0x389c700: i1 = Constant<-1>

      0x389cd00: i1 = xor 0x389c800, 0x389c700

      0x389c900: ch = BasicBlock<po_calculation3.for.end 0x38a4870>

    0x389cb00: ch = brcond 0x387f108, 0x389cd00, 0x389c900

    0x389cc00: ch = BasicBlock<po_calculation3.for.body 0x38a4710>

  0x389cf00: ch = br 0x389cb00, 0x389cc00



Replacing.3 0x389cd00: i1 = xor 0x389c800, 0x389c700

With: 0x389d500: i1 = setcc 0x389d100, 0x389ca00, 0x389d200


Replacing.3 0x389d500: i1 = setcc 0x389d100, 0x389ca00, 0x389d200

With: 0x389c700: i1 = setcc 0x389d100, 0x389d000, 0x389c800

Optimized lowered selection DAG: BB#1 'po_calculation3:po_calculation3.for.cond'
SelectionDAG has 11 nodes:
  0x387f108: ch = EntryToken [ORD=9]

      0x387f108: <multiple use>
          0x387f108: <multiple use>
          0x389d400: i32 = FrameIndex<2> [ORD=9]

          0x389d300: i32 = undef [ORD=9]

        0x389d100: i32,ch = load 0x387f108, 0x389d400, 0x389d300<LD4[%3]> [ORD=9]

        0x389d000: i32 = Constant<24>

        0x389c800: ch = setgt

      0x389c700: i1 = setcc 0x389d100, 0x389d000, 0x389c800

      0x389c900: ch = BasicBlock<po_calculation3.for.end 0x38a4870>

    0x389cb00: ch = brcond 0x387f108, 0x389c700, 0x389c900

    0x389cc00: ch = BasicBlock<po_calculation3.for.body 0x38a4710>

  0x389cf00: ch = br 0x389cb00, 0x389cc00


Legally typed node: 0x389c800: ch = setgt [ID=0]

Legally typed node: 0x389d000: i32 = Constant<24> [ID=0]

Legally typed node: 0x389cc00: ch = BasicBlock<po_calculation3.for.body 0x38a4710> [ID=0]

Legally typed node: 0x389c900: ch = BasicBlock<po_calculation3.for.end 0x38a4870> [ID=0]

Legally typed node: 0x389d300: i32 = undef [ORD=9] [ID=0]

Legally typed node: 0x389d400: i32 = FrameIndex<2> [ORD=9] [ID=0]

Legally typed node: 0x387f108: ch = EntryToken [ORD=9] [ID=0]

Legally typed node: 0x389d100: i32,ch = load 0x387f108, 0x389d400, 0x389d300<LD4[%3]> [ORD=9] [ID=0]

Promote integer result: 0x389c700: i1 = setcc 0x389d100, 0x389d000, 0x389c800 [ID=0]

Promote integer operand: 0x389cb00: ch = brcond 0x387f108, 0x389c700, 0x389c900 [ID=0]

Promote integer operand: 0x389ca00: i32 = zero_extend 0x389c700 [ID=0]

Legally typed node: 0x389d200: i32 = Constant<1> [ID=0]

Legally typed node: 0x389ce00: i32 = setcc 0x389d100, 0x389d000, 0x389c800 [ID=0]

Legally typed node: 0x389d500: i32 = and 0x389ce00, 0x389d200 [ID=0]

Legally typed node: 0x389cb00: ch = brcond 0x387f108, 0x389d500, 0x389c900 [ID=0]

Legally typed node: 0x389cf00: ch = br 0x389cb00, 0x389cc00 [ID=0]

Legally typed node: 0x7fff6fb15090: ch = handlenode 0x389cf00 [ID=0]

Type-legalized selection DAG: BB#1 'po_calculation3:po_calculation3.for.cond'
SelectionDAG has 13 nodes:
  0x387f108: ch = EntryToken [ORD=9] [ID=-3]

      0x387f108: <multiple use>
            0x387f108: <multiple use>
            0x389d400: i32 = FrameIndex<2> [ORD=9] [ID=-3]

            0x389d300: i32 = undef [ORD=9] [ID=-3]

          0x389d100: i32,ch = load 0x387f108, 0x389d400, 0x389d300<LD4[%3]> [ORD=9] [ID=-3]

          0x389d000: i32 = Constant<24> [ID=-3]

          0x389c800: ch = setgt [ID=-3]

        0x389ce00: i32 = setcc 0x389d100, 0x389d000, 0x389c800 [ID=-3]

        0x389d200: i32 = Constant<1> [ID=-3]

      0x389d500: i32 = and 0x389ce00, 0x389d200 [ID=-3]

      0x389c900: ch = BasicBlock<po_calculation3.for.end 0x38a4870> [ID=-3]

    0x389cb00: ch = brcond 0x387f108, 0x389d500, 0x389c900 [ID=-3]

    0x389cc00: ch = BasicBlock<po_calculation3.for.body 0x38a4710> [ID=-3]

  0x389cf00: ch = br 0x389cb00, 0x389cc00 [ID=-3]



Replacing.2 0x389d500: i32 = and 0x389ce00, 0x389d200 [ID=-3]

With: 0x389ce00: i32 = setcc 0x389d100, 0x389d000, 0x389c800 [ID=-3]

Optimized type-legalized selection DAG: BB#1 'po_calculation3:po_calculation3.for.cond'
SelectionDAG has 11 nodes:
  0x387f108: ch = EntryToken [ORD=9] [ID=-3]

      0x387f108: <multiple use>
          0x387f108: <multiple use>
          0x389d400: i32 = FrameIndex<2> [ORD=9] [ID=-3]

          0x389d300: i32 = undef [ORD=9] [ID=-3]

        0x389d100: i32,ch = load 0x387f108, 0x389d400, 0x389d300<LD4[%3]> [ORD=9] [ID=-3]

        0x389d000: i32 = Constant<24> [ID=-3]

        0x389c800: ch = setgt [ID=-3]

      0x389ce00: i32 = setcc 0x389d100, 0x389d000, 0x389c800 [ID=-3]

      0x389c900: ch = BasicBlock<po_calculation3.for.end 0x38a4870> [ID=-3]

    0x389cb00: ch = brcond 0x387f108, 0x389ce00, 0x389c900 [ID=-3]

    0x389cc00: ch = BasicBlock<po_calculation3.for.body 0x38a4710> [ID=-3]

  0x389cf00: ch = br 0x389cb00, 0x389cc00 [ID=-3]


Legalized selection DAG: BB#1 'po_calculation3:po_calculation3.for.cond'
SelectionDAG has 11 nodes:
  0x387f108: ch = EntryToken [ORD=9] [ID=0]

      0x387f108: <multiple use>
          0x387f108: <multiple use>
          0x389d400: i32 = FrameIndex<2> [ORD=9] [ID=1]

          0x389d300: i32 = undef [ORD=9] [ID=2]

        0x389d100: i32,ch = load 0x387f108, 0x389d400, 0x389d300<LD4[%3]> [ORD=9] [ID=7]

        0x389d000: i32 = Constant<24> [ID=5]

        0x389c800: ch = setgt [ID=6]

      0x389ce00: i32 = setcc 0x389d100, 0x389d000, 0x389c800 [ID=8]

      0x389c900: ch = BasicBlock<po_calculation3.for.end 0x38a4870> [ID=3]

    0x389cb00: ch = brcond 0x387f108, 0x389ce00, 0x389c900 [ID=9]

    0x389cc00: ch = BasicBlock<po_calculation3.for.body 0x38a4710> [ID=4]

  0x389cf00: ch = br 0x389cb00, 0x389cc00 [ID=10]


Optimized legalized selection DAG: BB#1 'po_calculation3:po_calculation3.for.cond'
SelectionDAG has 11 nodes:
  0x387f108: ch = EntryToken [ORD=9] [ID=0]

      0x387f108: <multiple use>
          0x387f108: <multiple use>
          0x389d400: i32 = FrameIndex<2> [ORD=9] [ID=1]

          0x389d300: i32 = undef [ORD=9] [ID=2]

        0x389d100: i32,ch = load 0x387f108, 0x389d400, 0x389d300<LD4[%3]> [ORD=9] [ID=7]

        0x389d000: i32 = Constant<24> [ID=5]

        0x389c800: ch = setgt [ID=6]

      0x389ce00: i32 = setcc 0x389d100, 0x389d000, 0x389c800 [ID=8]

      0x389c900: ch = BasicBlock<po_calculation3.for.end 0x38a4870> [ID=3]

    0x389cb00: ch = brcond 0x387f108, 0x389ce00, 0x389c900 [ID=9]

    0x389cc00: ch = BasicBlock<po_calculation3.for.body 0x38a4710> [ID=4]

  0x389cf00: ch = br 0x389cb00, 0x389cc00 [ID=10]


===== Instruction selection begins: BB#1 'po_calculation3.for.cond'
ISEL: Starting pattern match on root node: 0x389cf00: ch = br 0x389cb00, 0x389cc00 [ID=10]

  Initial Opcode index to 1938
  Morphed node: 0x389cf00: ch = JAL 0x389cc00, 0x389cb00

ISEL: Match complete!
=> 0x389cf00: ch = JAL 0x389cc00, 0x389cb00

ISEL: Starting pattern match on root node: 0x389cb00: ch = brcond 0x387f108, 0x389ce00, 0x389c900 [ID=9]

  Initial Opcode index to 1439
  Skipped scope entry (due to false predicate) at index 1456, continuing at 1477
  Skipped scope entry (due to false predicate) at index 1478, continuing at 1499
  Skipped scope entry (due to false predicate) at index 1500, continuing at 1521
  Skipped scope entry (due to false predicate) at index 1522, continuing at 1543
  Skipped scope entry (due to false predicate) at index 1544, continuing at 1565
  Skipped scope entry (due to false predicate) at index 1566, continuing at 1587
  Morphed node: 0x389cb00: ch = BGT 0x389c900, 0x389d100, 0x389d000, 0x387f108

ISEL: Match complete!
=> 0x389cb00: ch = BGT 0x389c900, 0x389d100, 0x389d000, 0x387f108

ISEL: Starting pattern match on root node: 0x389d100: i32,ch = load 0x387f108, 0x389d400, 0x389d300<LD4[%3]> [ORD=9] [ID=7]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x389d100: i32,ch = LW 0x389d400, 0x389c800, 0x387f108<Mem:LD4[%3]> [ORD=9]

ISEL: Match complete!
=> 0x389d100: i32,ch = LW 0x389d400, 0x389c800, 0x387f108<Mem:LD4[%3]> [ORD=9]

ISEL: Starting pattern match on root node: 0x389d000: i32 = Constant<24> [ID=5]

  Initial Opcode index to 1226
comparing 0 and 24 and returning value:0
  Skipped scope entry (due to false predicate) at index 1228, continuing at 1236
  Morphed node: 0x389d000: i32 = ADDI 0x389d300, 0x389ce00

ISEL: Match complete!
=> 0x389d000: i32 = ADDI 0x389d300, 0x389ce00

=> 0x389cc00: ch = BasicBlock<po_calculation3.for.body 0x38a4710>

=> 0x389c900: ch = BasicBlock<po_calculation3.for.end 0x38a4870>

=> 0x387f108: ch = EntryToken [ORD=9]

===== Instruction selection ends:
Selected selection DAG: BB#1 'po_calculation3:po_calculation3.for.cond'
SelectionDAG has 13 nodes:
  0x387f108: ch = EntryToken [ORD=9]

    0x389cc00: ch = BasicBlock<po_calculation3.for.body 0x38a4710>

      0x389c900: ch = BasicBlock<po_calculation3.for.end 0x38a4870>

          0x389d200: i32 = Register %t5

          0x389d500: i32 = TargetFrameIndex<2>

        0x389d400: i32 = ADDI 0x389d200, 0x389d500 [ORD=9]

        0x389c800: i32 = TargetConstant<0>

        0x387f108: <multiple use>
      0x389d100: i32,ch = LW 0x389d400, 0x389c800, 0x387f108<Mem:LD4[%3]> [ORD=9]

        0x389d300: i32 = Register %zero

        0x389ce00: i32 = TargetConstant<24>

      0x389d000: i32 = ADDI 0x389d300, 0x389ce00

      0x387f108: <multiple use>
    0x389cb00: ch = BGT 0x389c900, 0x389d100, 0x389d000, 0x387f108

  0x389cf00: ch = JAL 0x389cc00, 0x389cb00


********** List Scheduling BB#1 'po_calculation3.for.cond' **********
SU(0): 0x389cf00: ch = JAL 0x389cc00, 0x389cb00 [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x389cb00: ch = BGT 0x389c900, 0x389d100, 0x389d000, 0x387f108 [ID=1]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
   val SU(3): Latency=1
   val SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x389d000: i32 = ADDI 0x389d300, 0x389ce00 [ID=2]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
   val SU(1): Latency=1

SU(3): 0x389d100: i32,ch = LW 0x389d400, 0x389c800, 0x387f108<Mem:LD4[%3]> [ORD=9] [ID=3]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
   val SU(4): Latency=1
  Successors:
   val SU(1): Latency=1

SU(4): 0x389d400: i32 = ADDI 0x389d200, 0x389d500 [ORD=9] [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(3): Latency=1


Examining Available:
Height 0: SU(0): 0x389cf00: ch = JAL 0x389cc00, 0x389cb00 [ID=0]


*** Scheduling [0]: SU(0): 0x389cf00: ch = JAL 0x389cc00, 0x389cb00 [ID=0]


Examining Available:
Height 1: SU(1): 0x389cb00: ch = BGT 0x389c900, 0x389d100, 0x389d000, 0x387f108 [ID=1]


*** Scheduling [1]: SU(1): 0x389cb00: ch = BGT 0x389c900, 0x389d100, 0x389d000, 0x387f108 [ID=1]


Examining Available:
Height 2: SU(2): 0x389d000: i32 = ADDI 0x389d300, 0x389ce00 [ID=2]

Height 2: SU(3): 0x389d100: i32,ch = LW 0x389d400, 0x389c800, 0x387f108<Mem:LD4[%3]> [ORD=9] [ID=3]


*** Scheduling [2]: SU(2): 0x389d000: i32 = ADDI 0x389d300, 0x389ce00 [ID=2]


Examining Available:
Height 2: SU(3): 0x389d100: i32,ch = LW 0x389d400, 0x389c800, 0x387f108<Mem:LD4[%3]> [ORD=9] [ID=3]


*** Scheduling [3]: SU(3): 0x389d100: i32,ch = LW 0x389d400, 0x389c800, 0x387f108<Mem:LD4[%3]> [ORD=9] [ID=3]


Examining Available:
Height 4: SU(4): 0x389d400: i32 = ADDI 0x389d200, 0x389d500 [ORD=9] [ID=4]


*** Scheduling [4]: SU(4): 0x389d400: i32 = ADDI 0x389d200, 0x389d500 [ORD=9] [ID=4]

*** Final schedule ***
SU(4): 0x389d400: i32 = ADDI 0x389d200, 0x389d500 [ORD=9] [ID=4]

SU(3): 0x389d100: i32,ch = LW 0x389d400, 0x389c800, 0x387f108<Mem:LD4[%3]> [ORD=9] [ID=3]

SU(2): 0x389d000: i32 = ADDI 0x389d300, 0x389ce00 [ID=2]

SU(1): 0x389cb00: ch = BGT 0x389c900, 0x389d100, 0x389d000, 0x387f108 [ID=1]

SU(0): 0x389cf00: ch = JAL 0x389cc00, 0x389cb00 [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %17 = load i32* %4, align 4
I was here to add   %4 = alloca i32, align 4
with I type i32and sd value :0x389d500: i32 = FrameIndex<3>
new load?0x389d300: i32,ch = load 0x387f108, 0x389d500, 0x389ce00<LD4[%4]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x389d200: i32 = Constant<0>

    0x387f108: ch = EntryToken

    0x389d500: i32 = FrameIndex<3>

    0x389ce00: i32 = undef

  0x389d300: i32,ch = load 0x387f108, 0x389d500, 0x389ce00<LD4[%4]>

  0x387f108: ch = EntryToken


I was here to add i32 25
store visit is after?  store i32 %18, i32* %4, align 4
whats in dag after store?SelectionDAG has 8 nodes:
  0x389d500: i32 = FrameIndex<3> [ORD=11]

  0x389d200: i32 = Constant<0>

  0x389ce00: i32 = undef [ORD=11]

    0x387f108: ch = EntryToken [ORD=11]

    0x389d500: <multiple use>
    0x389ce00: <multiple use>
  0x389d300: i32,ch = load 0x387f108, 0x389d500, 0x389ce00<LD4[%4]> [ORD=11]

    0x389d300: <multiple use>
      0x389d300: <multiple use>
      0x389c800: i32 = Constant<25> [ORD=12]

    0x389cf00: i32 = mul 0x389d300, 0x389c800 [ORD=12]

    0x389d500: <multiple use>
    0x389ce00: <multiple use>
  0x389cb00: ch = store 0x389d300:1, 0x389cf00, 0x389d500, 0x389ce00<ST4[%4]> [ORD=13]


visiting load instruction   %19 = load i32* %4, align 4
with I type i32and sd value :0x389d500: i32 = FrameIndex<3>
new load?0x389d100: i32,ch = load 0x389cb00, 0x389d500, 0x389ce00<LD4[%4]>
dag after load is dealt with?SelectionDAG has 9 nodes:
  0x389d500: i32 = FrameIndex<3> [ORD=11]

  0x389d200: i32 = Constant<0>

  0x389ce00: i32 = undef [ORD=11]

    0x387f108: ch = EntryToken [ORD=11]

    0x389d500: <multiple use>
    0x389ce00: <multiple use>
  0x389d300: i32,ch = load 0x387f108, 0x389d500, 0x389ce00<LD4[%4]> [ORD=11]

      0x389d300: <multiple use>
        0x389d300: <multiple use>
        0x389c800: i32 = Constant<25> [ORD=12]

      0x389cf00: i32 = mul 0x389d300, 0x389c800 [ORD=12]

      0x389d500: <multiple use>
      0x389ce00: <multiple use>
    0x389cb00: ch = store 0x389d300:1, 0x389cf00, 0x389d500, 0x389ce00<ST4[%4]> [ORD=13]

    0x389d500: <multiple use>
    0x389ce00: <multiple use>
  0x389d100: i32,ch = load 0x389cb00, 0x389d500, 0x389ce00<LD4[%4]>

    0x389d300: <multiple use>
      0x389d300: <multiple use>
      0x389c800: i32 = Constant<25> [ORD=12]

    0x389cf00: i32 = mul 0x389d300, 0x389c800 [ORD=12]

    0x389d500: <multiple use>
    0x389ce00: <multiple use>
  0x389cb00: ch = store 0x389d300:1, 0x389cf00, 0x389d500, 0x389ce00<ST4[%4]> [ORD=13]


store visit is after?  store float %20, float* %1, align 4
I was here to add   %1 = alloca float, align 4, !ConsumedBy !6
whats in dag after store?SelectionDAG has 12 nodes:
  0x389d500: i32 = FrameIndex<3> [ORD=11]

  0x389d200: i32 = Constant<0>

  0x389ce00: i32 = undef [ORD=11]

    0x387f108: ch = EntryToken [ORD=11]

    0x389d500: <multiple use>
    0x389ce00: <multiple use>
  0x389d300: i32,ch = load 0x387f108, 0x389d500, 0x389ce00<LD4[%4]> [ORD=11]

      0x389d300: <multiple use>
        0x389d300: <multiple use>
        0x389c800: i32 = Constant<25> [ORD=12]

      0x389cf00: i32 = mul 0x389d300, 0x389c800 [ORD=12]

      0x389d500: <multiple use>
      0x389ce00: <multiple use>
    0x389cb00: ch = store 0x389d300:1, 0x389cf00, 0x389d500, 0x389ce00<ST4[%4]> [ORD=13]

    0x389d500: <multiple use>
    0x389ce00: <multiple use>
  0x389d100: i32,ch = load 0x389cb00, 0x389d500, 0x389ce00<LD4[%4]> [ORD=14]

    0x389d100: <multiple use>
      0x389d100: <multiple use>
    0x389d000: f32 = sint_to_fp 0x389d100 [ORD=15]

    0x389cc00: i32 = FrameIndex<0> [ORD=16]

    0x389ce00: <multiple use>
  0x389c900: ch = store 0x389d100:1, 0x389d000, 0x389cc00, 0x389ce00<ST4[%1]> [ORD=16]


Initial selection DAG: BB#4 'po_calculation3:po_calculation3.for.end'
SelectionDAG has 12 nodes:
  0x389d500: i32 = FrameIndex<3> [ORD=11]

  0x389d200: i32 = Constant<0>

  0x389ce00: i32 = undef [ORD=11]

    0x387f108: ch = EntryToken [ORD=11]

    0x389d500: <multiple use>
    0x389ce00: <multiple use>
  0x389d300: i32,ch = load 0x387f108, 0x389d500, 0x389ce00<LD4[%4]> [ORD=11]

      0x389d300: <multiple use>
        0x389d300: <multiple use>
        0x389c800: i32 = Constant<25> [ORD=12]

      0x389cf00: i32 = mul 0x389d300, 0x389c800 [ORD=12]

      0x389d500: <multiple use>
      0x389ce00: <multiple use>
    0x389cb00: ch = store 0x389d300:1, 0x389cf00, 0x389d500, 0x389ce00<ST4[%4]> [ORD=13]

    0x389d500: <multiple use>
    0x389ce00: <multiple use>
  0x389d100: i32,ch = load 0x389cb00, 0x389d500, 0x389ce00<LD4[%4]> [ORD=14]

    0x389d100: <multiple use>
      0x389d100: <multiple use>
    0x389d000: f32 = sint_to_fp 0x389d100 [ORD=15]

    0x389cc00: i32 = FrameIndex<0> [ORD=16]

    0x389ce00: <multiple use>
  0x389c900: ch = store 0x389d100:1, 0x389d000, 0x389cc00, 0x389ce00<ST4[%1]> [ORD=16]



Replacing.1 0x389d100: i32,ch = load 0x389cb00, 0x389d500, 0x389ce00<LD4[%4]> [ORD=14]

With: 0x389cf00: i32 = mul 0x389d300, 0x389c800 [ORD=12]
 and 1 other values
Optimized lowered selection DAG: BB#4 'po_calculation3:po_calculation3.for.end'
SelectionDAG has 10 nodes:
  0x389d500: i32 = FrameIndex<3> [ORD=11]

  0x389ce00: i32 = undef [ORD=11]

    0x387f108: ch = EntryToken [ORD=11]

    0x389d500: <multiple use>
    0x389ce00: <multiple use>
  0x389d300: i32,ch = load 0x387f108, 0x389d500, 0x389ce00<LD4[%4]> [ORD=11]

    0x389d300: <multiple use>
    0x389c800: i32 = Constant<25> [ORD=12]

  0x389cf00: i32 = mul 0x389d300, 0x389c800 [ORD=12]

      0x389d300: <multiple use>
      0x389cf00: <multiple use>
      0x389d500: <multiple use>
      0x389ce00: <multiple use>
    0x389cb00: ch = store 0x389d300:1, 0x389cf00, 0x389d500, 0x389ce00<ST4[%4]> [ORD=13]

      0x389cf00: <multiple use>
    0x389d000: f32 = sint_to_fp 0x389cf00 [ORD=15]

    0x389cc00: i32 = FrameIndex<0> [ORD=16]

    0x389ce00: <multiple use>
  0x389c900: ch = store 0x389cb00, 0x389d000, 0x389cc00, 0x389ce00<ST4[%1]> [ORD=16]


Legally typed node: 0x389cc00: i32 = FrameIndex<0> [ORD=16] [ID=0]

Legally typed node: 0x389c800: i32 = Constant<25> [ORD=12] [ID=0]

Legally typed node: 0x389ce00: i32 = undef [ORD=11] [ID=0]

Legally typed node: 0x389d500: i32 = FrameIndex<3> [ORD=11] [ID=0]

Legally typed node: 0x387f108: ch = EntryToken [ORD=11] [ID=0]

Legally typed node: 0x389d300: i32,ch = load 0x387f108, 0x389d500, 0x389ce00<LD4[%4]> [ORD=11] [ID=0]

Legally typed node: 0x389cf00: i32 = mul 0x389d300, 0x389c800 [ORD=12] [ID=0]

Legally typed node: 0x389cb00: ch = store 0x389d300:1, 0x389cf00, 0x389d500, 0x389ce00<ST4[%4]> [ORD=13] [ID=0]

Legally typed node: 0x389d000: f32 = sint_to_fp 0x389cf00 [ORD=15] [ID=0]

Legally typed node: 0x389c900: ch = store 0x389cb00, 0x389d000, 0x389cc00, 0x389ce00<ST4[%1]> [ORD=16] [ID=0]

Legally typed node: 0x7fff6fb15090: ch = handlenode 0x389c900 [ID=0]

Type-legalized selection DAG: BB#4 'po_calculation3:po_calculation3.for.end'
SelectionDAG has 10 nodes:
  0x389d500: i32 = FrameIndex<3> [ORD=11] [ID=-3]

  0x389ce00: i32 = undef [ORD=11] [ID=-3]

    0x387f108: ch = EntryToken [ORD=11] [ID=-3]

    0x389d500: <multiple use>
    0x389ce00: <multiple use>
  0x389d300: i32,ch = load 0x387f108, 0x389d500, 0x389ce00<LD4[%4]> [ORD=11] [ID=-3]

    0x389d300: <multiple use>
    0x389c800: i32 = Constant<25> [ORD=12] [ID=-3]

  0x389cf00: i32 = mul 0x389d300, 0x389c800 [ORD=12] [ID=-3]

      0x389d300: <multiple use>
      0x389cf00: <multiple use>
      0x389d500: <multiple use>
      0x389ce00: <multiple use>
    0x389cb00: ch = store 0x389d300:1, 0x389cf00, 0x389d500, 0x389ce00<ST4[%4]> [ORD=13] [ID=-3]

      0x389cf00: <multiple use>
    0x389d000: f32 = sint_to_fp 0x389cf00 [ORD=15] [ID=-3]

    0x389cc00: i32 = FrameIndex<0> [ORD=16] [ID=-3]

    0x389ce00: <multiple use>
  0x389c900: ch = store 0x389cb00, 0x389d000, 0x389cc00, 0x389ce00<ST4[%1]> [ORD=16] [ID=-3]


Legalized selection DAG: BB#4 'po_calculation3:po_calculation3.for.end'
SelectionDAG has 10 nodes:
  0x389d500: i32 = FrameIndex<3> [ORD=11] [ID=1]

  0x389ce00: i32 = undef [ORD=11] [ID=2]

    0x387f108: ch = EntryToken [ORD=11] [ID=0]

    0x389d500: <multiple use>
    0x389ce00: <multiple use>
  0x389d300: i32,ch = load 0x387f108, 0x389d500, 0x389ce00<LD4[%4]> [ORD=11] [ID=5]

    0x389d300: <multiple use>
    0x389c800: i32 = Constant<25> [ORD=12] [ID=3]

  0x389cf00: i32 = mul 0x389d300, 0x389c800 [ORD=12] [ID=6]

      0x389d300: <multiple use>
      0x389cf00: <multiple use>
      0x389d500: <multiple use>
      0x389ce00: <multiple use>
    0x389cb00: ch = store 0x389d300:1, 0x389cf00, 0x389d500, 0x389ce00<ST4[%4]> [ORD=13] [ID=8]

      0x389cf00: <multiple use>
    0x389d000: f32 = sint_to_fp 0x389cf00 [ORD=15] [ID=7]

    0x389cc00: i32 = FrameIndex<0> [ORD=16] [ID=4]

    0x389ce00: <multiple use>
  0x389c900: ch = store 0x389cb00, 0x389d000, 0x389cc00, 0x389ce00<ST4[%1]> [ORD=16] [ID=9]


Optimized legalized selection DAG: BB#4 'po_calculation3:po_calculation3.for.end'
SelectionDAG has 10 nodes:
  0x389d500: i32 = FrameIndex<3> [ORD=11] [ID=1]

  0x389ce00: i32 = undef [ORD=11] [ID=2]

    0x387f108: ch = EntryToken [ORD=11] [ID=0]

    0x389d500: <multiple use>
    0x389ce00: <multiple use>
  0x389d300: i32,ch = load 0x387f108, 0x389d500, 0x389ce00<LD4[%4]> [ORD=11] [ID=5]

    0x389d300: <multiple use>
    0x389c800: i32 = Constant<25> [ORD=12] [ID=3]

  0x389cf00: i32 = mul 0x389d300, 0x389c800 [ORD=12] [ID=6]

      0x389d300: <multiple use>
      0x389cf00: <multiple use>
      0x389d500: <multiple use>
      0x389ce00: <multiple use>
    0x389cb00: ch = store 0x389d300:1, 0x389cf00, 0x389d500, 0x389ce00<ST4[%4]> [ORD=13] [ID=8]

      0x389cf00: <multiple use>
    0x389d000: f32 = sint_to_fp 0x389cf00 [ORD=15] [ID=7]

    0x389cc00: i32 = FrameIndex<0> [ORD=16] [ID=4]

    0x389ce00: <multiple use>
  0x389c900: ch = store 0x389cb00, 0x389d000, 0x389cc00, 0x389ce00<ST4[%1]> [ORD=16] [ID=9]


===== Instruction selection begins: BB#4 'po_calculation3.for.end'
ISEL: Starting pattern match on root node: 0x389c900: ch = store 0x389cb00, 0x389d000, 0x389cc00, 0x389ce00<ST4[%1]> [ORD=16] [ID=9]

  Initial Opcode index to 178
  Skipped scope entry (due to false predicate) at index 183, continuing at 243
  Morphed node: 0x389c900: ch = FSW 0x389d000, 0x389cc00, 0x389d200, 0x389cb00<Mem:ST4[%1]> [ORD=16]

ISEL: Match complete!
=> 0x389c900: ch = FSW 0x389d000, 0x389cc00, 0x389d200, 0x389cb00<Mem:ST4[%1]> [ORD=16]

ISEL: Starting pattern match on root node: 0x389cb00: ch = store 0x389d300:1, 0x389cf00, 0x389d500, 0x389ce00<ST4[%4]> [ORD=13] [ID=8]

  Initial Opcode index to 178
  Morphed node: 0x389cb00: ch = SW 0x389cf00, 0x389d500, 0x389d200, 0x389d300:1<Mem:ST4[%4]> [ORD=13]

ISEL: Match complete!
=> 0x389cb00: ch = SW 0x389cf00, 0x389d500, 0x389d200, 0x389d300:1<Mem:ST4[%4]> [ORD=13]

ISEL: Starting pattern match on root node: 0x389d000: f32 = sint_to_fp 0x389cf00 [ORD=15] [ID=7]

  Initial Opcode index to 2155
  Morphed node: 0x389d000: f32 = FCVT_S_W_RDY 0x389cf00 [ORD=15]

ISEL: Match complete!
=> 0x389d000: f32 = FCVT_S_W_RDY 0x389cf00 [ORD=15]

ISEL: Starting pattern match on root node: 0x389cf00: i32 = mul 0x389d300, 0x389c800 [ORD=12] [ID=6]

  Initial Opcode index to 1290
  Morphed node: 0x389cf00: i32 = MUL 0x389c800, 0x389d300 [ORD=12]

ISEL: Match complete!
=> 0x389cf00: i32 = MUL 0x389c800, 0x389d300 [ORD=12]

ISEL: Starting pattern match on root node: 0x389d300: i32,ch = load 0x387f108, 0x389d500, 0x389ce00<LD4[%4]> [ORD=11] [ID=5]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x389d300: i32,ch = LW 0x389d500, 0x389d200, 0x387f108<Mem:LD4[%4]> [ORD=11]

ISEL: Match complete!
=> 0x389d300: i32,ch = LW 0x389d500, 0x389d200, 0x387f108<Mem:LD4[%4]> [ORD=11]

ISEL: Starting pattern match on root node: 0x389c800: i32 = Constant<25> [ORD=12] [ID=3]

  Initial Opcode index to 1226
comparing 0 and 25 and returning value:0
  Skipped scope entry (due to false predicate) at index 1228, continuing at 1236
  Morphed node: 0x389c800: i32 = ADDI 0x389d400, 0x389c700 [ORD=12]

ISEL: Match complete!
=> 0x389c800: i32 = ADDI 0x389d400, 0x389c700 [ORD=12]

=> 0x387f108: ch = EntryToken [ORD=11]

===== Instruction selection ends:
Selected selection DAG: BB#4 'po_calculation3:po_calculation3.for.end'
SelectionDAG has 15 nodes:
    0x389cd00: <multiple use>
    0x389d200: <multiple use>
    0x387f108: ch = EntryToken [ORD=11]

  0x389d300: i32,ch = LW 0x389cd00, 0x389d200, 0x387f108<Mem:LD4[%4]> [ORD=11]

      0x389d400: i32 = Register %zero

      0x389c700: i32 = TargetConstant<25>

    0x389c800: i32 = ADDI 0x389d400, 0x389c700 [ORD=12]

    0x389d300: <multiple use>
  0x389cf00: i32 = MUL 0x389c800, 0x389d300 [ORD=12]

  0x389d200: i32 = TargetConstant<0>

  0x389ce00: i32 = Register %t5

    0x389ce00: <multiple use>
    0x389ca00: i32 = TargetFrameIndex<3>

  0x389cd00: i32 = ADDI 0x389ce00, 0x389ca00 [ORD=11]

      0x389cf00: <multiple use>
    0x389d000: f32 = FCVT_S_W_RDY 0x389cf00 [ORD=15]

      0x389ce00: <multiple use>
      0x389d100: i32 = TargetFrameIndex<0>

    0x389cc00: i32 = ADDI 0x389ce00, 0x389d100 [ORD=16]

    0x389d200: <multiple use>
      0x389cf00: <multiple use>
      0x389cd00: <multiple use>
      0x389d200: <multiple use>
      0x389d300: <multiple use>
    0x389cb00: ch = SW 0x389cf00, 0x389cd00, 0x389d200, 0x389d300:1<Mem:ST4[%4]> [ORD=13]

  0x389c900: ch = FSW 0x389d000, 0x389cc00, 0x389d200, 0x389cb00<Mem:ST4[%1]> [ORD=16]


********** List Scheduling BB#4 'po_calculation3.for.end' **********
SU(0): 0x389c900: ch = FSW 0x389d000, 0x389cc00, 0x389d200, 0x389cb00<Mem:ST4[%1]> [ORD=16] [ID=0]

  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
   val SU(7): Latency=1
   val SU(6): Latency=1
   ch  SU(1): Latency=1

SU(1): 0x389cb00: ch = SW 0x389cf00, 0x389cd00, 0x389d200, 0x389d300:1<Mem:ST4[%4]> [ORD=13] [ID=1]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(4): Latency=1
   val SU(3): Latency=1
   ch  SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x389d300: i32,ch = LW 0x389cd00, 0x389d200, 0x387f108<Mem:LD4[%4]> [ORD=11] [ID=2]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(3): Latency=1
  Successors:
   ch  SU(1): Latency=1
   val SU(4): Latency=1

SU(3): 0x389cd00: i32 = ADDI 0x389ce00, 0x389ca00 [ORD=11] [ID=3]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(1): Latency=1
   val SU(2): Latency=1

SU(4): 0x389cf00: i32 = MUL 0x389c800, 0x389d300 [ORD=12] [ID=4]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(5): Latency=1
   val SU(2): Latency=1
  Successors:
   val SU(1): Latency=1
   val SU(7): Latency=1

SU(5): 0x389c800: i32 = ADDI 0x389d400, 0x389c700 [ORD=12] [ID=5]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(4): Latency=1

SU(6): 0x389cc00: i32 = ADDI 0x389ce00, 0x389d100 [ORD=16] [ID=6]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
   val SU(0): Latency=1

SU(7): 0x389d000: f32 = FCVT_S_W_RDY 0x389cf00 [ORD=15] [ID=7]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(4): Latency=1
  Successors:
   val SU(0): Latency=1


Examining Available:
Height 0: SU(0): 0x389c900: ch = FSW 0x389d000, 0x389cc00, 0x389d200, 0x389cb00<Mem:ST4[%1]> [ORD=16] [ID=0]


*** Scheduling [0]: SU(0): 0x389c900: ch = FSW 0x389d000, 0x389cc00, 0x389d200, 0x389cb00<Mem:ST4[%1]> [ORD=16] [ID=0]


Examining Available:
Height 1: SU(6): 0x389cc00: i32 = ADDI 0x389ce00, 0x389d100 [ORD=16] [ID=6]

Height 1: SU(7): 0x389d000: f32 = FCVT_S_W_RDY 0x389cf00 [ORD=15] [ID=7]

Height 1: SU(1): 0x389cb00: ch = SW 0x389cf00, 0x389cd00, 0x389d200, 0x389d300:1<Mem:ST4[%4]> [ORD=13] [ID=1]


*** Scheduling [1]: SU(6): 0x389cc00: i32 = ADDI 0x389ce00, 0x389d100 [ORD=16] [ID=6]


Examining Available:
Height 1: SU(7): 0x389d000: f32 = FCVT_S_W_RDY 0x389cf00 [ORD=15] [ID=7]

Height 1: SU(1): 0x389cb00: ch = SW 0x389cf00, 0x389cd00, 0x389d200, 0x389d300:1<Mem:ST4[%4]> [ORD=13] [ID=1]


*** Scheduling [2]: SU(7): 0x389d000: f32 = FCVT_S_W_RDY 0x389cf00 [ORD=15] [ID=7]


Examining Available:
Height 1: SU(1): 0x389cb00: ch = SW 0x389cf00, 0x389cd00, 0x389d200, 0x389d300:1<Mem:ST4[%4]> [ORD=13] [ID=1]


*** Scheduling [3]: SU(1): 0x389cb00: ch = SW 0x389cf00, 0x389cd00, 0x389d200, 0x389d300:1<Mem:ST4[%4]> [ORD=13] [ID=1]


Examining Available:
Height 4: SU(4): 0x389cf00: i32 = MUL 0x389c800, 0x389d300 [ORD=12] [ID=4]


*** Scheduling [4]: SU(4): 0x389cf00: i32 = MUL 0x389c800, 0x389d300 [ORD=12] [ID=4]


Examining Available:
Height 5: SU(5): 0x389c800: i32 = ADDI 0x389d400, 0x389c700 [ORD=12] [ID=5]

Height 5: SU(2): 0x389d300: i32,ch = LW 0x389cd00, 0x389d200, 0x387f108<Mem:LD4[%4]> [ORD=11] [ID=2]


*** Scheduling [5]: SU(5): 0x389c800: i32 = ADDI 0x389d400, 0x389c700 [ORD=12] [ID=5]


Examining Available:
Height 5: SU(2): 0x389d300: i32,ch = LW 0x389cd00, 0x389d200, 0x387f108<Mem:LD4[%4]> [ORD=11] [ID=2]


*** Scheduling [6]: SU(2): 0x389d300: i32,ch = LW 0x389cd00, 0x389d200, 0x387f108<Mem:LD4[%4]> [ORD=11] [ID=2]


Examining Available:
Height 7: SU(3): 0x389cd00: i32 = ADDI 0x389ce00, 0x389ca00 [ORD=11] [ID=3]


*** Scheduling [7]: SU(3): 0x389cd00: i32 = ADDI 0x389ce00, 0x389ca00 [ORD=11] [ID=3]

*** Final schedule ***
SU(3): 0x389cd00: i32 = ADDI 0x389ce00, 0x389ca00 [ORD=11] [ID=3]

SU(2): 0x389d300: i32,ch = LW 0x389cd00, 0x389d200, 0x387f108<Mem:LD4[%4]> [ORD=11] [ID=2]

SU(5): 0x389c800: i32 = ADDI 0x389d400, 0x389c700 [ORD=12] [ID=5]

SU(4): 0x389cf00: i32 = MUL 0x389c800, 0x389d300 [ORD=12] [ID=4]

SU(1): 0x389cb00: ch = SW 0x389cf00, 0x389cd00, 0x389d200, 0x389d300:1<Mem:ST4[%4]> [ORD=13] [ID=1]

SU(7): 0x389d000: f32 = FCVT_S_W_RDY 0x389cf00 [ORD=15] [ID=7]

SU(6): 0x389cc00: i32 = ADDI 0x389ce00, 0x389d100 [ORD=16] [ID=6]

SU(0): 0x389c900: ch = FSW 0x389d000, 0x389cc00, 0x389d200, 0x389cb00<Mem:ST4[%1]> [ORD=16] [ID=0]


Total amount of phi nodes to update: 0
Initial selection DAG: BB#5 'po_calculation3:po_calculation3.return'
SelectionDAG has 1 nodes:
  0x387f108: ch = EntryToken


Optimized lowered selection DAG: BB#5 'po_calculation3:po_calculation3.return'
SelectionDAG has 1 nodes:
  0x387f108: ch = EntryToken


Legally typed node: 0x387f108: ch = EntryToken [ID=0]

Legally typed node: 0x7fff6fb15090: ch = handlenode 0x387f108 [ID=0]

Type-legalized selection DAG: BB#5 'po_calculation3:po_calculation3.return'
SelectionDAG has 1 nodes:
  0x387f108: ch = EntryToken [ID=-3]


Legalized selection DAG: BB#5 'po_calculation3:po_calculation3.return'
SelectionDAG has 1 nodes:
  0x387f108: ch = EntryToken [ID=0]


Optimized legalized selection DAG: BB#5 'po_calculation3:po_calculation3.return'
SelectionDAG has 1 nodes:
  0x387f108: ch = EntryToken [ID=0]


===== Instruction selection begins: BB#5 'po_calculation3.return'
=> 0x387f108: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: BB#5 'po_calculation3:po_calculation3.return'
SelectionDAG has 1 nodes:
  0x387f108: ch = EntryToken


********** List Scheduling BB#5 'po_calculation3.return' **********
*** Final schedule ***

Total amount of phi nodes to update: 0
visiting load instruction   %7 = load i32* %3, align 4
I was here to add   %3 = alloca i32, align 4
with I type i32and sd value :0x389cd00: i32 = FrameIndex<2>
new load?0x389d400: i32,ch = load 0x387f108, 0x389cd00, 0x389c700<LD4[%3]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x389ca00: i32 = Constant<0>

    0x387f108: ch = EntryToken

    0x389cd00: i32 = FrameIndex<2>

    0x389c700: i32 = undef

  0x389d400: i32,ch = load 0x387f108, 0x389cd00, 0x389c700<LD4[%3]>

  0x387f108: ch = EntryToken


visiting load instruction   %8 = load float** %2, align 4
I was here to add   %2 = alloca float*, align 4
with I type float*and sd value :0x389d100: i32 = FrameIndex<1>
new load?0x389ce00: i32,ch = load 0x387f108, 0x389d100, 0x389c700<LD4[%2]>
dag after load is dealt with?SelectionDAG has 7 nodes:
  0x389ca00: i32 = Constant<0>

  0x389c700: i32 = undef [ORD=17]

    0x387f108: <multiple use>
    0x389cd00: i32 = FrameIndex<2> [ORD=17]

    0x389c700: <multiple use>
  0x389d400: i32,ch = load 0x387f108, 0x389cd00, 0x389c700<LD4[%3]> [ORD=17]

    0x387f108: <multiple use>
    0x389d100: i32 = FrameIndex<1>

    0x389c700: <multiple use>
  0x389ce00: i32,ch = load 0x387f108, 0x389d100, 0x389c700<LD4[%2]>

  0x387f108: ch = EntryToken [ORD=17]


visiting load instruction   %10 = load float* %9, align 4
with I type floatand sd value :0x389cb00: i32 = add 0x389ce00, 0x389c900
new load?0x389d000: f32,ch = load 0x387f108, 0x389cb00, 0x389c700<LD4[%9]>
dag after load is dealt with?SelectionDAG has 11 nodes:
  0x389ca00: i32 = Constant<0>

  0x389c700: i32 = undef [ORD=17]

    0x387f108: <multiple use>
        0x387f108: <multiple use>
        0x389d100: i32 = FrameIndex<1> [ORD=18]

        0x389c700: <multiple use>
      0x389ce00: i32,ch = load 0x387f108, 0x389d100, 0x389c700<LD4[%2]> [ORD=18]

          0x387f108: <multiple use>
          0x389cd00: i32 = FrameIndex<2> [ORD=17]

          0x389c700: <multiple use>
        0x389d400: i32,ch = load 0x387f108, 0x389cd00, 0x389c700<LD4[%3]> [ORD=17]

        0x389d200: i32 = Constant<2> [ORD=19]

      0x389c900: i32 = shl 0x389d400, 0x389d200 [ORD=19]

    0x389cb00: i32 = add 0x389ce00, 0x389c900 [ORD=19]

    0x389c700: <multiple use>
  0x389d000: f32,ch = load 0x387f108, 0x389cb00, 0x389c700<LD4[%9]>

  0x387f108: ch = EntryToken [ORD=17]


visiting load instruction   %11 = load i32* %4, align 4
I was here to add   %4 = alloca i32, align 4
with I type i32and sd value :0x389cf00: i32 = FrameIndex<3>
new load?0x389d300: i32,ch = load 0x387f108, 0x389cf00, 0x389c700<LD4[%4]>
dag after load is dealt with?SelectionDAG has 13 nodes:
  0x389ca00: i32 = Constant<0>

  0x389c700: i32 = undef [ORD=17]

    0x387f108: <multiple use>
        0x387f108: <multiple use>
        0x389d100: i32 = FrameIndex<1> [ORD=18]

        0x389c700: <multiple use>
      0x389ce00: i32,ch = load 0x387f108, 0x389d100, 0x389c700<LD4[%2]> [ORD=18]

          0x387f108: <multiple use>
          0x389cd00: i32 = FrameIndex<2> [ORD=17]

          0x389c700: <multiple use>
        0x389d400: i32,ch = load 0x387f108, 0x389cd00, 0x389c700<LD4[%3]> [ORD=17]

        0x389d200: i32 = Constant<2> [ORD=19]

      0x389c900: i32 = shl 0x389d400, 0x389d200 [ORD=19]

    0x389cb00: i32 = add 0x389ce00, 0x389c900 [ORD=19]

    0x389c700: <multiple use>
  0x389d000: f32,ch = load 0x387f108, 0x389cb00, 0x389c700<LD4[%9]> [ORD=20]

    0x387f108: <multiple use>
    0x389cf00: i32 = FrameIndex<3>

    0x389c700: <multiple use>
  0x389d300: i32,ch = load 0x387f108, 0x389cf00, 0x389c700<LD4[%4]>

  0x387f108: ch = EntryToken [ORD=17]


store visit is after?  store i32 %14, i32* %4, align 4
whats in dag after store?SelectionDAG has 18 nodes:
  0x387f108: ch = EntryToken [ORD=17]

  0x389ca00: i32 = Constant<0>

  0x389c700: i32 = undef [ORD=17]

    0x387f108: <multiple use>
    0x389cd00: i32 = FrameIndex<2> [ORD=17]

    0x389c700: <multiple use>
  0x389d400: i32,ch = load 0x387f108, 0x389cd00, 0x389c700<LD4[%3]> [ORD=17]

    0x387f108: <multiple use>
    0x389d100: i32 = FrameIndex<1> [ORD=18]

    0x389c700: <multiple use>
  0x389ce00: i32,ch = load 0x387f108, 0x389d100, 0x389c700<LD4[%2]> [ORD=18]

    0x387f108: <multiple use>
      0x389ce00: <multiple use>
        0x389d400: <multiple use>
        0x389d200: i32 = Constant<2> [ORD=19]

      0x389c900: i32 = shl 0x389d400, 0x389d200 [ORD=19]

    0x389cb00: i32 = add 0x389ce00, 0x389c900 [ORD=19]

    0x389c700: <multiple use>
  0x389d000: f32,ch = load 0x387f108, 0x389cb00, 0x389c700<LD4[%9]> [ORD=20]

  0x389cf00: i32 = FrameIndex<3> [ORD=21]

    0x387f108: <multiple use>
    0x389cf00: <multiple use>
    0x389c700: <multiple use>
  0x389d300: i32,ch = load 0x387f108, 0x389cf00, 0x389c700<LD4[%4]> [ORD=21]

      0x389d400: <multiple use>
      0x389ce00: <multiple use>
      0x389d000: <multiple use>
      0x389d300: <multiple use>
    0x38aa5b0: ch = TokenFactor 0x389d400:1, 0x389ce00:1, 0x389d000:1, 0x389d300:1 [ORD=25]

          0x389d300: <multiple use>
        0x389cc00: f32 = sint_to_fp 0x389d300 [ORD=22]

        0x389d000: <multiple use>
      0x389c800: f32 = fadd 0x389cc00, 0x389d000 [ORD=23]

    0x389d500: i32 = fp_to_sint 0x389c800 [ORD=24]

    0x389cf00: <multiple use>
    0x389c700: <multiple use>
  0x38aa6b0: ch = store 0x38aa5b0, 0x389d500, 0x389cf00, 0x389c700<ST4[%4]> [ORD=25]


Initial selection DAG: BB#2 'po_calculation3:po_calculation3.for.body'
SelectionDAG has 18 nodes:
  0x387f108: ch = EntryToken [ORD=17]

  0x389ca00: i32 = Constant<0>

  0x389c700: i32 = undef [ORD=17]

    0x387f108: <multiple use>
    0x389cd00: i32 = FrameIndex<2> [ORD=17]

    0x389c700: <multiple use>
  0x389d400: i32,ch = load 0x387f108, 0x389cd00, 0x389c700<LD4[%3]> [ORD=17]

    0x387f108: <multiple use>
    0x389d100: i32 = FrameIndex<1> [ORD=18]

    0x389c700: <multiple use>
  0x389ce00: i32,ch = load 0x387f108, 0x389d100, 0x389c700<LD4[%2]> [ORD=18]

    0x387f108: <multiple use>
      0x389ce00: <multiple use>
        0x389d400: <multiple use>
        0x389d200: i32 = Constant<2> [ORD=19]

      0x389c900: i32 = shl 0x389d400, 0x389d200 [ORD=19]

    0x389cb00: i32 = add 0x389ce00, 0x389c900 [ORD=19]

    0x389c700: <multiple use>
  0x389d000: f32,ch = load 0x387f108, 0x389cb00, 0x389c700<LD4[%9]> [ORD=20]

  0x389cf00: i32 = FrameIndex<3> [ORD=21]

    0x387f108: <multiple use>
    0x389cf00: <multiple use>
    0x389c700: <multiple use>
  0x389d300: i32,ch = load 0x387f108, 0x389cf00, 0x389c700<LD4[%4]> [ORD=21]

      0x389d400: <multiple use>
      0x389ce00: <multiple use>
      0x389d000: <multiple use>
      0x389d300: <multiple use>
    0x38aa5b0: ch = TokenFactor 0x389d400:1, 0x389ce00:1, 0x389d000:1, 0x389d300:1 [ORD=25]

          0x389d300: <multiple use>
        0x389cc00: f32 = sint_to_fp 0x389d300 [ORD=22]

        0x389d000: <multiple use>
      0x389c800: f32 = fadd 0x389cc00, 0x389d000 [ORD=23]

    0x389d500: i32 = fp_to_sint 0x389c800 [ORD=24]

    0x389cf00: <multiple use>
    0x389c700: <multiple use>
  0x38aa6b0: ch = store 0x38aa5b0, 0x389d500, 0x389cf00, 0x389c700<ST4[%4]> [ORD=25]


Optimized lowered selection DAG: BB#2 'po_calculation3:po_calculation3.for.body'
SelectionDAG has 17 nodes:
  0x387f108: ch = EntryToken [ORD=17]

  0x389c700: i32 = undef [ORD=17]

    0x387f108: <multiple use>
    0x389cd00: i32 = FrameIndex<2> [ORD=17]

    0x389c700: <multiple use>
  0x389d400: i32,ch = load 0x387f108, 0x389cd00, 0x389c700<LD4[%3]> [ORD=17]

    0x387f108: <multiple use>
    0x389d100: i32 = FrameIndex<1> [ORD=18]

    0x389c700: <multiple use>
  0x389ce00: i32,ch = load 0x387f108, 0x389d100, 0x389c700<LD4[%2]> [ORD=18]

    0x387f108: <multiple use>
      0x389ce00: <multiple use>
        0x389d400: <multiple use>
        0x389d200: i32 = Constant<2> [ORD=19]

      0x389c900: i32 = shl 0x389d400, 0x389d200 [ORD=19]

    0x389cb00: i32 = add 0x389ce00, 0x389c900 [ORD=19]

    0x389c700: <multiple use>
  0x389d000: f32,ch = load 0x387f108, 0x389cb00, 0x389c700<LD4[%9]> [ORD=20]

  0x389cf00: i32 = FrameIndex<3> [ORD=21]

    0x387f108: <multiple use>
    0x389cf00: <multiple use>
    0x389c700: <multiple use>
  0x389d300: i32,ch = load 0x387f108, 0x389cf00, 0x389c700<LD4[%4]> [ORD=21]

      0x389d400: <multiple use>
      0x389ce00: <multiple use>
      0x389d000: <multiple use>
      0x389d300: <multiple use>
    0x38aa5b0: ch = TokenFactor 0x389d400:1, 0x389ce00:1, 0x389d000:1, 0x389d300:1 [ORD=25]

          0x389d300: <multiple use>
        0x389cc00: f32 = sint_to_fp 0x389d300 [ORD=22]

        0x389d000: <multiple use>
      0x389c800: f32 = fadd 0x389cc00, 0x389d000 [ORD=23]

    0x389d500: i32 = fp_to_sint 0x389c800 [ORD=24]

    0x389cf00: <multiple use>
    0x389c700: <multiple use>
  0x38aa6b0: ch = store 0x38aa5b0, 0x389d500, 0x389cf00, 0x389c700<ST4[%4]> [ORD=25]


Legally typed node: 0x389cf00: i32 = FrameIndex<3> [ORD=21] [ID=0]

Legally typed node: 0x389d200: i32 = Constant<2> [ORD=19] [ID=0]

Legally typed node: 0x389d100: i32 = FrameIndex<1> [ORD=18] [ID=0]

Legally typed node: 0x389c700: i32 = undef [ORD=17] [ID=0]

Legally typed node: 0x389cd00: i32 = FrameIndex<2> [ORD=17] [ID=0]

Legally typed node: 0x387f108: ch = EntryToken [ORD=17] [ID=0]

Legally typed node: 0x389d400: i32,ch = load 0x387f108, 0x389cd00, 0x389c700<LD4[%3]> [ORD=17] [ID=0]

Legally typed node: 0x389c900: i32 = shl 0x389d400, 0x389d200 [ORD=19] [ID=0]

Legally typed node: 0x389ce00: i32,ch = load 0x387f108, 0x389d100, 0x389c700<LD4[%2]> [ORD=18] [ID=0]

Legally typed node: 0x389cb00: i32 = add 0x389ce00, 0x389c900 [ORD=19] [ID=0]

Legally typed node: 0x389d000: f32,ch = load 0x387f108, 0x389cb00, 0x389c700<LD4[%9]> [ORD=20] [ID=0]

Legally typed node: 0x389d300: i32,ch = load 0x387f108, 0x389cf00, 0x389c700<LD4[%4]> [ORD=21] [ID=0]

Legally typed node: 0x389cc00: f32 = sint_to_fp 0x389d300 [ORD=22] [ID=0]

Legally typed node: 0x389c800: f32 = fadd 0x389cc00, 0x389d000 [ORD=23] [ID=0]

Legally typed node: 0x389d500: i32 = fp_to_sint 0x389c800 [ORD=24] [ID=0]

Legally typed node: 0x38aa5b0: ch = TokenFactor 0x389d400:1, 0x389ce00:1, 0x389d000:1, 0x389d300:1 [ORD=25] [ID=0]

Legally typed node: 0x38aa6b0: ch = store 0x38aa5b0, 0x389d500, 0x389cf00, 0x389c700<ST4[%4]> [ORD=25] [ID=0]

Legally typed node: 0x7fff6fb15090: ch = handlenode 0x38aa6b0 [ID=0]

Type-legalized selection DAG: BB#2 'po_calculation3:po_calculation3.for.body'
SelectionDAG has 17 nodes:
  0x387f108: ch = EntryToken [ORD=17] [ID=-3]

  0x389c700: i32 = undef [ORD=17] [ID=-3]

    0x387f108: <multiple use>
    0x389cd00: i32 = FrameIndex<2> [ORD=17] [ID=-3]

    0x389c700: <multiple use>
  0x389d400: i32,ch = load 0x387f108, 0x389cd00, 0x389c700<LD4[%3]> [ORD=17] [ID=-3]

    0x387f108: <multiple use>
    0x389d100: i32 = FrameIndex<1> [ORD=18] [ID=-3]

    0x389c700: <multiple use>
  0x389ce00: i32,ch = load 0x387f108, 0x389d100, 0x389c700<LD4[%2]> [ORD=18] [ID=-3]

    0x387f108: <multiple use>
      0x389ce00: <multiple use>
        0x389d400: <multiple use>
        0x389d200: i32 = Constant<2> [ORD=19] [ID=-3]

      0x389c900: i32 = shl 0x389d400, 0x389d200 [ORD=19] [ID=-3]

    0x389cb00: i32 = add 0x389ce00, 0x389c900 [ORD=19] [ID=-3]

    0x389c700: <multiple use>
  0x389d000: f32,ch = load 0x387f108, 0x389cb00, 0x389c700<LD4[%9]> [ORD=20] [ID=-3]

  0x389cf00: i32 = FrameIndex<3> [ORD=21] [ID=-3]

    0x387f108: <multiple use>
    0x389cf00: <multiple use>
    0x389c700: <multiple use>
  0x389d300: i32,ch = load 0x387f108, 0x389cf00, 0x389c700<LD4[%4]> [ORD=21] [ID=-3]

      0x389d400: <multiple use>
      0x389ce00: <multiple use>
      0x389d000: <multiple use>
      0x389d300: <multiple use>
    0x38aa5b0: ch = TokenFactor 0x389d400:1, 0x389ce00:1, 0x389d000:1, 0x389d300:1 [ORD=25] [ID=-3]

          0x389d300: <multiple use>
        0x389cc00: f32 = sint_to_fp 0x389d300 [ORD=22] [ID=-3]

        0x389d000: <multiple use>
      0x389c800: f32 = fadd 0x389cc00, 0x389d000 [ORD=23] [ID=-3]

    0x389d500: i32 = fp_to_sint 0x389c800 [ORD=24] [ID=-3]

    0x389cf00: <multiple use>
    0x389c700: <multiple use>
  0x38aa6b0: ch = store 0x38aa5b0, 0x389d500, 0x389cf00, 0x389c700<ST4[%4]> [ORD=25] [ID=-3]


Legalized selection DAG: BB#2 'po_calculation3:po_calculation3.for.body'
SelectionDAG has 17 nodes:
  0x387f108: ch = EntryToken [ORD=17] [ID=0]

  0x389c700: i32 = undef [ORD=17] [ID=2]

  0x389cf00: i32 = FrameIndex<3> [ORD=21] [ID=5]

    0x387f108: <multiple use>
    0x389cd00: i32 = FrameIndex<2> [ORD=17] [ID=1]

    0x389c700: <multiple use>
  0x389d400: i32,ch = load 0x387f108, 0x389cd00, 0x389c700<LD4[%3]> [ORD=17] [ID=6]

    0x387f108: <multiple use>
    0x389d100: i32 = FrameIndex<1> [ORD=18] [ID=3]

    0x389c700: <multiple use>
  0x389ce00: i32,ch = load 0x387f108, 0x389d100, 0x389c700<LD4[%2]> [ORD=18] [ID=7]

    0x387f108: <multiple use>
    0x389cf00: <multiple use>
    0x389c700: <multiple use>
  0x389d300: i32,ch = load 0x387f108, 0x389cf00, 0x389c700<LD4[%4]> [ORD=21] [ID=8]

    0x387f108: <multiple use>
      0x389ce00: <multiple use>
        0x389d400: <multiple use>
        0x389d200: i32 = Constant<2> [ORD=19] [ID=4]

      0x389c900: i32 = shl 0x389d400, 0x389d200 [ORD=19] [ID=9]

    0x389cb00: i32 = add 0x389ce00, 0x389c900 [ORD=19] [ID=11]

    0x389c700: <multiple use>
  0x389d000: f32,ch = load 0x387f108, 0x389cb00, 0x389c700<LD4[%9]> [ORD=20] [ID=12]

      0x389d400: <multiple use>
      0x389ce00: <multiple use>
      0x389d000: <multiple use>
      0x389d300: <multiple use>
    0x38aa5b0: ch = TokenFactor 0x389d400:1, 0x389ce00:1, 0x389d000:1, 0x389d300:1 [ORD=25] [ID=13]

          0x389d300: <multiple use>
        0x389cc00: f32 = sint_to_fp 0x389d300 [ORD=22] [ID=10]

        0x389d000: <multiple use>
      0x389c800: f32 = fadd 0x389cc00, 0x389d000 [ORD=23] [ID=14]

    0x389d500: i32 = fp_to_sint 0x389c800 [ORD=24] [ID=15]

    0x389cf00: <multiple use>
    0x389c700: <multiple use>
  0x38aa6b0: ch = store 0x38aa5b0, 0x389d500, 0x389cf00, 0x389c700<ST4[%4]> [ORD=25] [ID=16]


Optimized legalized selection DAG: BB#2 'po_calculation3:po_calculation3.for.body'
SelectionDAG has 17 nodes:
  0x387f108: ch = EntryToken [ORD=17] [ID=0]

  0x389c700: i32 = undef [ORD=17] [ID=2]

  0x389cf00: i32 = FrameIndex<3> [ORD=21] [ID=5]

    0x387f108: <multiple use>
    0x389cd00: i32 = FrameIndex<2> [ORD=17] [ID=1]

    0x389c700: <multiple use>
  0x389d400: i32,ch = load 0x387f108, 0x389cd00, 0x389c700<LD4[%3]> [ORD=17] [ID=6]

    0x387f108: <multiple use>
    0x389d100: i32 = FrameIndex<1> [ORD=18] [ID=3]

    0x389c700: <multiple use>
  0x389ce00: i32,ch = load 0x387f108, 0x389d100, 0x389c700<LD4[%2]> [ORD=18] [ID=7]

    0x387f108: <multiple use>
    0x389cf00: <multiple use>
    0x389c700: <multiple use>
  0x389d300: i32,ch = load 0x387f108, 0x389cf00, 0x389c700<LD4[%4]> [ORD=21] [ID=8]

    0x387f108: <multiple use>
      0x389ce00: <multiple use>
        0x389d400: <multiple use>
        0x389d200: i32 = Constant<2> [ORD=19] [ID=4]

      0x389c900: i32 = shl 0x389d400, 0x389d200 [ORD=19] [ID=9]

    0x389cb00: i32 = add 0x389ce00, 0x389c900 [ORD=19] [ID=11]

    0x389c700: <multiple use>
  0x389d000: f32,ch = load 0x387f108, 0x389cb00, 0x389c700<LD4[%9]> [ORD=20] [ID=12]

      0x389d400: <multiple use>
      0x389ce00: <multiple use>
      0x389d000: <multiple use>
      0x389d300: <multiple use>
    0x38aa5b0: ch = TokenFactor 0x389d400:1, 0x389ce00:1, 0x389d000:1, 0x389d300:1 [ORD=25] [ID=13]

          0x389d300: <multiple use>
        0x389cc00: f32 = sint_to_fp 0x389d300 [ORD=22] [ID=10]

        0x389d000: <multiple use>
      0x389c800: f32 = fadd 0x389cc00, 0x389d000 [ORD=23] [ID=14]

    0x389d500: i32 = fp_to_sint 0x389c800 [ORD=24] [ID=15]

    0x389cf00: <multiple use>
    0x389c700: <multiple use>
  0x38aa6b0: ch = store 0x38aa5b0, 0x389d500, 0x389cf00, 0x389c700<ST4[%4]> [ORD=25] [ID=16]


===== Instruction selection begins: BB#2 'po_calculation3.for.body'
ISEL: Starting pattern match on root node: 0x38aa6b0: ch = store 0x38aa5b0, 0x389d500, 0x389cf00, 0x389c700<ST4[%4]> [ORD=25] [ID=16]

  Initial Opcode index to 178
  Morphed node: 0x38aa6b0: ch = SW 0x389d500, 0x389cf00, 0x389ca00, 0x38aa5b0<Mem:ST4[%4]> [ORD=25]

ISEL: Match complete!
=> 0x38aa6b0: ch = SW 0x389d500, 0x389cf00, 0x389ca00, 0x38aa5b0<Mem:ST4[%4]> [ORD=25]

ISEL: Starting pattern match on root node: 0x389d500: i32 = fp_to_sint 0x389c800 [ORD=24] [ID=15]

  Initial Opcode index to 1374
  Morphed node: 0x389d500: i32 = FCVT_W_S_RTZ 0x389c800 [ORD=24]

ISEL: Match complete!
=> 0x389d500: i32 = FCVT_W_S_RTZ 0x389c800 [ORD=24]

ISEL: Starting pattern match on root node: 0x389c800: f32 = fadd 0x389cc00, 0x389d000 [ORD=23] [ID=14]

  Initial Opcode index to 1736
  Match failed at index 1740
  Continuing at 1757
  Match failed at index 1763
  Continuing at 1779
  Morphed node: 0x389c800: f32 = FADD_S_RDY 0x389d000, 0x389cc00 [ORD=23]

ISEL: Match complete!
=> 0x389c800: f32 = FADD_S_RDY 0x389d000, 0x389cc00 [ORD=23]

=> 0x38aa5b0: ch = TokenFactor 0x389d400:1, 0x389ce00:1, 0x389d000:1, 0x389d300:1 [ORD=25]

ISEL: Starting pattern match on root node: 0x389d000: f32,ch = load 0x387f108, 0x389cb00, 0x389c700<LD4[%9]> [ORD=20] [ID=12]

  Initial Opcode index to 5
  TypeSwitch[f32] from 10 to 159
  Morphed node: 0x389d000: f32,ch = FLW 0x389cb00, 0x389ca00, 0x387f108<Mem:LD4[%9]> [ORD=20]

ISEL: Match complete!
=> 0x389d000: f32,ch = FLW 0x389cb00, 0x389ca00, 0x387f108<Mem:LD4[%9]> [ORD=20]

ISEL: Starting pattern match on root node: 0x389cb00: i32 = add 0x389ce00, 0x389c900 [ORD=19] [ID=11]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x389cb00: i32 = ADD 0x389c900, 0x389ce00 [ORD=19]

ISEL: Match complete!
=> 0x389cb00: i32 = ADD 0x389c900, 0x389ce00 [ORD=19]

ISEL: Starting pattern match on root node: 0x389cc00: f32 = sint_to_fp 0x389d300 [ORD=22] [ID=10]

  Initial Opcode index to 2155
  Morphed node: 0x389cc00: f32 = FCVT_S_W_RDY 0x389d300 [ORD=22]

ISEL: Match complete!
=> 0x389cc00: f32 = FCVT_S_W_RDY 0x389d300 [ORD=22]

ISEL: Starting pattern match on root node: 0x389c900: i32 = shl 0x389d400, 0x389d200 [ORD=19] [ID=9]

  Initial Opcode index to 268
  Match failed at index 273
  Continuing at 294
  Morphed node: 0x389c900: i32 = SLLI 0x389d400, 0x38aa7b0 [ORD=19]

ISEL: Match complete!
=> 0x389c900: i32 = SLLI 0x389d400, 0x38aa7b0 [ORD=19]

ISEL: Starting pattern match on root node: 0x389d300: i32,ch = load 0x387f108, 0x389cf00, 0x389c700<LD4[%4]> [ORD=21] [ID=8]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x389d300: i32,ch = LW 0x389cf00, 0x389ca00, 0x387f108<Mem:LD4[%4]> [ORD=21]

ISEL: Match complete!
=> 0x389d300: i32,ch = LW 0x389cf00, 0x389ca00, 0x387f108<Mem:LD4[%4]> [ORD=21]

ISEL: Starting pattern match on root node: 0x389ce00: i32,ch = load 0x387f108, 0x389d100, 0x389c700<LD4[%2]> [ORD=18] [ID=7]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x389ce00: i32,ch = LW 0x389d100, 0x389ca00, 0x387f108<Mem:LD4[%2]> [ORD=18]

ISEL: Match complete!
=> 0x389ce00: i32,ch = LW 0x389d100, 0x389ca00, 0x387f108<Mem:LD4[%2]> [ORD=18]

ISEL: Starting pattern match on root node: 0x389d400: i32,ch = load 0x387f108, 0x389cd00, 0x389c700<LD4[%3]> [ORD=17] [ID=6]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x389d400: i32,ch = LW 0x389cd00, 0x389ca00, 0x387f108<Mem:LD4[%3]> [ORD=17]

ISEL: Match complete!
=> 0x389d400: i32,ch = LW 0x389cd00, 0x389ca00, 0x387f108<Mem:LD4[%3]> [ORD=17]

=> 0x387f108: ch = EntryToken [ORD=17]

===== Instruction selection ends:
Selected selection DAG: BB#2 'po_calculation3:po_calculation3.for.body'
SelectionDAG has 21 nodes:
  0x387f108: ch = EntryToken [ORD=17]

      0x389c700: <multiple use>
      0x38aa9b0: i32 = TargetFrameIndex<2>

    0x389cd00: i32 = ADDI 0x389c700, 0x38aa9b0 [ORD=17]

    0x389ca00: <multiple use>
    0x387f108: <multiple use>
  0x389d400: i32,ch = LW 0x389cd00, 0x389ca00, 0x387f108<Mem:LD4[%3]> [ORD=17]

      0x389c700: <multiple use>
      0x389cf00: i32 = TargetFrameIndex<1>

    0x389d100: i32 = ADDI 0x389c700, 0x389cf00 [ORD=18]

    0x389ca00: <multiple use>
    0x387f108: <multiple use>
  0x389ce00: i32,ch = LW 0x389d100, 0x389ca00, 0x387f108<Mem:LD4[%2]> [ORD=18]

    0x38aa8b0: <multiple use>
    0x389ca00: <multiple use>
    0x387f108: <multiple use>
  0x389d300: i32,ch = LW 0x38aa8b0, 0x389ca00, 0x387f108<Mem:LD4[%4]> [ORD=21]

        0x389d400: <multiple use>
        0x38aa7b0: i32 = TargetConstant<2>

      0x389c900: i32 = SLLI 0x389d400, 0x38aa7b0 [ORD=19]

      0x389ce00: <multiple use>
    0x389cb00: i32 = ADD 0x389c900, 0x389ce00 [ORD=19]

    0x389ca00: <multiple use>
    0x387f108: <multiple use>
  0x389d000: f32,ch = FLW 0x389cb00, 0x389ca00, 0x387f108<Mem:LD4[%9]> [ORD=20]

  0x389ca00: i32 = TargetConstant<0>

  0x389c700: i32 = Register %t5

    0x389c700: <multiple use>
    0x389d200: i32 = TargetFrameIndex<3>

  0x38aa8b0: i32 = ADDI 0x389c700, 0x389d200 [ORD=21]

        0x389d000: <multiple use>
          0x389d300: <multiple use>
        0x389cc00: f32 = FCVT_S_W_RDY 0x389d300 [ORD=22]

      0x389c800: f32 = FADD_S_RDY 0x389d000, 0x389cc00 [ORD=23]

    0x389d500: i32 = FCVT_W_S_RTZ 0x389c800 [ORD=24]

    0x38aa8b0: <multiple use>
    0x389ca00: <multiple use>
      0x389d400: <multiple use>
      0x389ce00: <multiple use>
      0x389d000: <multiple use>
      0x389d300: <multiple use>
    0x38aa5b0: ch = TokenFactor 0x389d400:1, 0x389ce00:1, 0x389d000:1, 0x389d300:1 [ORD=25]

  0x38aa6b0: ch = SW 0x389d500, 0x38aa8b0, 0x389ca00, 0x38aa5b0<Mem:ST4[%4]> [ORD=25]


********** List Scheduling BB#2 'po_calculation3.for.body' **********
SU(0): 0x38aa6b0: ch = SW 0x389d500, 0x38aa8b0, 0x389ca00, 0x38aa5b0<Mem:ST4[%4]> [ORD=25] [ID=0]

  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
   val SU(11): Latency=1
   val SU(10): Latency=1
   ch  SU(1): Latency=0

SU(1): 0x38aa5b0: ch = TokenFactor 0x389d400:1, 0x389ce00:1, 0x389d000:1, 0x389d300:1 [ORD=25] [ID=1]

  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
   ch  SU(8): Latency=1
   ch  SU(6): Latency=1
   ch  SU(3): Latency=1
   ch  SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=0

SU(2): 0x389d300: i32,ch = LW 0x38aa8b0, 0x389ca00, 0x387f108<Mem:LD4[%4]> [ORD=21] [ID=2]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
   val SU(10): Latency=1
  Successors:
   ch  SU(1): Latency=1
   val SU(13): Latency=1

SU(3): 0x389d000: f32,ch = FLW 0x389cb00, 0x389ca00, 0x387f108<Mem:LD4[%9]> [ORD=20] [ID=3]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
   val SU(4): Latency=1
  Successors:
   ch  SU(1): Latency=1
   val SU(12): Latency=1

SU(4): 0x389cb00: i32 = ADD 0x389c900, 0x389ce00 [ORD=19] [ID=4]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 3
  Height             : 4
  Predecessors:
   val SU(5): Latency=1
   val SU(6): Latency=1
  Successors:
   val SU(3): Latency=1

SU(5): 0x389c900: i32 = SLLI 0x389d400, 0x38aa7b0 [ORD=19] [ID=5]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 5
  Predecessors:
   val SU(8): Latency=1
  Successors:
   val SU(4): Latency=1

SU(6): 0x389ce00: i32,ch = LW 0x389d100, 0x389ca00, 0x387f108<Mem:LD4[%2]> [ORD=18] [ID=6]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 5
  Predecessors:
   val SU(7): Latency=1
  Successors:
   ch  SU(1): Latency=1
   val SU(4): Latency=1

SU(7): 0x389d100: i32 = ADDI 0x389c700, 0x389cf00 [ORD=18] [ID=7]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
   val SU(6): Latency=1

SU(8): 0x389d400: i32,ch = LW 0x389cd00, 0x389ca00, 0x387f108<Mem:LD4[%3]> [ORD=17] [ID=8]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 6
  Predecessors:
   val SU(9): Latency=1
  Successors:
   ch  SU(1): Latency=1
   val SU(5): Latency=1

SU(9): 0x389cd00: i32 = ADDI 0x389c700, 0x38aa9b0 [ORD=17] [ID=9]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
   val SU(8): Latency=1

SU(10): 0x38aa8b0: i32 = ADDI 0x389c700, 0x389d200 [ORD=21] [ID=10]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
   val SU(0): Latency=1
   val SU(2): Latency=1

SU(11): 0x389d500: i32 = FCVT_W_S_RTZ 0x389c800 [ORD=24] [ID=11]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
   val SU(12): Latency=1
  Successors:
   val SU(0): Latency=1

SU(12): 0x389c800: f32 = FADD_S_RDY 0x389d000, 0x389cc00 [ORD=23] [ID=12]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
   val SU(3): Latency=1
   val SU(13): Latency=1
  Successors:
   val SU(11): Latency=1

SU(13): 0x389cc00: f32 = FCVT_S_W_RDY 0x389d300 [ORD=22] [ID=13]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 3
  Predecessors:
   val SU(2): Latency=1
  Successors:
   val SU(12): Latency=1


Examining Available:
Height 0: SU(0): 0x38aa6b0: ch = SW 0x389d500, 0x38aa8b0, 0x389ca00, 0x38aa5b0<Mem:ST4[%4]> [ORD=25] [ID=0]


*** Scheduling [0]: SU(0): 0x38aa6b0: ch = SW 0x389d500, 0x38aa8b0, 0x389ca00, 0x38aa5b0<Mem:ST4[%4]> [ORD=25] [ID=0]


Examining Available:
Height 0: SU(1): 0x38aa5b0: ch = TokenFactor 0x389d400:1, 0x389ce00:1, 0x389d000:1, 0x389d300:1 [ORD=25] [ID=1]

Height 1: SU(11): 0x389d500: i32 = FCVT_W_S_RTZ 0x389c800 [ORD=24] [ID=11]


*** Scheduling [1]: SU(1): 0x38aa5b0: ch = TokenFactor 0x389d400:1, 0x389ce00:1, 0x389d000:1, 0x389d300:1 [ORD=25] [ID=1]


Examining Available:
Height 1: SU(11): 0x389d500: i32 = FCVT_W_S_RTZ 0x389c800 [ORD=24] [ID=11]


*** Scheduling [2]: SU(11): 0x389d500: i32 = FCVT_W_S_RTZ 0x389c800 [ORD=24] [ID=11]


Examining Available:
Height 3: SU(12): 0x389c800: f32 = FADD_S_RDY 0x389d000, 0x389cc00 [ORD=23] [ID=12]


*** Scheduling [3]: SU(12): 0x389c800: f32 = FADD_S_RDY 0x389d000, 0x389cc00 [ORD=23] [ID=12]


Examining Available:
Height 4: SU(13): 0x389cc00: f32 = FCVT_S_W_RDY 0x389d300 [ORD=22] [ID=13]

Height 4: SU(3): 0x389d000: f32,ch = FLW 0x389cb00, 0x389ca00, 0x387f108<Mem:LD4[%9]> [ORD=20] [ID=3]


*** Scheduling [4]: SU(13): 0x389cc00: f32 = FCVT_S_W_RDY 0x389d300 [ORD=22] [ID=13]


Examining Available:
Height 5: SU(2): 0x389d300: i32,ch = LW 0x38aa8b0, 0x389ca00, 0x387f108<Mem:LD4[%4]> [ORD=21] [ID=2]

Height 4: SU(3): 0x389d000: f32,ch = FLW 0x389cb00, 0x389ca00, 0x387f108<Mem:LD4[%9]> [ORD=20] [ID=3]


*** Scheduling [5]: SU(2): 0x389d300: i32,ch = LW 0x38aa8b0, 0x389ca00, 0x387f108<Mem:LD4[%4]> [ORD=21] [ID=2]


Examining Available:
Height 6: SU(10): 0x38aa8b0: i32 = ADDI 0x389c700, 0x389d200 [ORD=21] [ID=10]

Height 4: SU(3): 0x389d000: f32,ch = FLW 0x389cb00, 0x389ca00, 0x387f108<Mem:LD4[%9]> [ORD=20] [ID=3]


*** Scheduling [6]: SU(10): 0x38aa8b0: i32 = ADDI 0x389c700, 0x389d200 [ORD=21] [ID=10]


Examining Available:
Height 4: SU(3): 0x389d000: f32,ch = FLW 0x389cb00, 0x389ca00, 0x387f108<Mem:LD4[%9]> [ORD=20] [ID=3]


*** Scheduling [7]: SU(3): 0x389d000: f32,ch = FLW 0x389cb00, 0x389ca00, 0x387f108<Mem:LD4[%9]> [ORD=20] [ID=3]


Examining Available:
Height 8: SU(4): 0x389cb00: i32 = ADD 0x389c900, 0x389ce00 [ORD=19] [ID=4]


*** Scheduling [8]: SU(4): 0x389cb00: i32 = ADD 0x389c900, 0x389ce00 [ORD=19] [ID=4]


Examining Available:
Height 9: SU(5): 0x389c900: i32 = SLLI 0x389d400, 0x38aa7b0 [ORD=19] [ID=5]

Height 9: SU(6): 0x389ce00: i32,ch = LW 0x389d100, 0x389ca00, 0x387f108<Mem:LD4[%2]> [ORD=18] [ID=6]


*** Scheduling [9]: SU(5): 0x389c900: i32 = SLLI 0x389d400, 0x38aa7b0 [ORD=19] [ID=5]


Examining Available:
Height 9: SU(6): 0x389ce00: i32,ch = LW 0x389d100, 0x389ca00, 0x387f108<Mem:LD4[%2]> [ORD=18] [ID=6]

Height 10: SU(8): 0x389d400: i32,ch = LW 0x389cd00, 0x389ca00, 0x387f108<Mem:LD4[%3]> [ORD=17] [ID=8]


*** Scheduling [10]: SU(6): 0x389ce00: i32,ch = LW 0x389d100, 0x389ca00, 0x387f108<Mem:LD4[%2]> [ORD=18] [ID=6]


Examining Available:
Height 11: SU(7): 0x389d100: i32 = ADDI 0x389c700, 0x389cf00 [ORD=18] [ID=7]

Height 10: SU(8): 0x389d400: i32,ch = LW 0x389cd00, 0x389ca00, 0x387f108<Mem:LD4[%3]> [ORD=17] [ID=8]


*** Scheduling [11]: SU(7): 0x389d100: i32 = ADDI 0x389c700, 0x389cf00 [ORD=18] [ID=7]


Examining Available:
Height 10: SU(8): 0x389d400: i32,ch = LW 0x389cd00, 0x389ca00, 0x387f108<Mem:LD4[%3]> [ORD=17] [ID=8]


*** Scheduling [12]: SU(8): 0x389d400: i32,ch = LW 0x389cd00, 0x389ca00, 0x387f108<Mem:LD4[%3]> [ORD=17] [ID=8]


Examining Available:
Height 13: SU(9): 0x389cd00: i32 = ADDI 0x389c700, 0x38aa9b0 [ORD=17] [ID=9]


*** Scheduling [13]: SU(9): 0x389cd00: i32 = ADDI 0x389c700, 0x38aa9b0 [ORD=17] [ID=9]

*** Final schedule ***
SU(9): 0x389cd00: i32 = ADDI 0x389c700, 0x38aa9b0 [ORD=17] [ID=9]

SU(8): 0x389d400: i32,ch = LW 0x389cd00, 0x389ca00, 0x387f108<Mem:LD4[%3]> [ORD=17] [ID=8]

SU(7): 0x389d100: i32 = ADDI 0x389c700, 0x389cf00 [ORD=18] [ID=7]

SU(6): 0x389ce00: i32,ch = LW 0x389d100, 0x389ca00, 0x387f108<Mem:LD4[%2]> [ORD=18] [ID=6]

SU(5): 0x389c900: i32 = SLLI 0x389d400, 0x38aa7b0 [ORD=19] [ID=5]

SU(4): 0x389cb00: i32 = ADD 0x389c900, 0x389ce00 [ORD=19] [ID=4]

SU(3): 0x389d000: f32,ch = FLW 0x389cb00, 0x389ca00, 0x387f108<Mem:LD4[%9]> [ORD=20] [ID=3]

SU(10): 0x38aa8b0: i32 = ADDI 0x389c700, 0x389d200 [ORD=21] [ID=10]

SU(2): 0x389d300: i32,ch = LW 0x38aa8b0, 0x389ca00, 0x387f108<Mem:LD4[%4]> [ORD=21] [ID=2]

SU(13): 0x389cc00: f32 = FCVT_S_W_RDY 0x389d300 [ORD=22] [ID=13]

SU(12): 0x389c800: f32 = FADD_S_RDY 0x389d000, 0x389cc00 [ORD=23] [ID=12]

SU(11): 0x389d500: i32 = FCVT_W_S_RTZ 0x389c800 [ORD=24] [ID=11]

SU(1): 0x38aa5b0: ch = TokenFactor 0x389d400:1, 0x389ce00:1, 0x389d000:1, 0x389d300:1 [ORD=25] [ID=1]

SU(0): 0x38aa6b0: ch = SW 0x389d500, 0x38aa8b0, 0x389ca00, 0x38aa5b0<Mem:ST4[%4]> [ORD=25] [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %15 = load i32* %3, align 4
I was here to add   %3 = alloca i32, align 4
with I type i32and sd value :0x38aa9b0: i32 = FrameIndex<2>
new load?0x389d200: i32,ch = load 0x387f108, 0x38aa9b0, 0x38aa8b0<LD4[%3]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x389cf00: i32 = Constant<0>

    0x387f108: ch = EntryToken

    0x38aa9b0: i32 = FrameIndex<2>

    0x38aa8b0: i32 = undef

  0x389d200: i32,ch = load 0x387f108, 0x38aa9b0, 0x38aa8b0<LD4[%3]>

  0x387f108: ch = EntryToken


I was here to add i32 1
store visit is after?  store i32 %16, i32* %3, align 4
whats in dag after store?SelectionDAG has 8 nodes:
  0x38aa9b0: i32 = FrameIndex<2> [ORD=26]

  0x389cf00: i32 = Constant<0>

  0x38aa8b0: i32 = undef [ORD=26]

    0x387f108: ch = EntryToken [ORD=26]

    0x38aa9b0: <multiple use>
    0x38aa8b0: <multiple use>
  0x389d200: i32,ch = load 0x387f108, 0x38aa9b0, 0x38aa8b0<LD4[%3]> [ORD=26]

    0x389d200: <multiple use>
      0x389d200: <multiple use>
      0x389c700: i32 = Constant<1> [ORD=27]

    0x38aa7b0: i32 = add 0x389d200, 0x389c700 [ORD=27]

    0x38aa9b0: <multiple use>
    0x38aa8b0: <multiple use>
  0x389ca00: ch = store 0x389d200:1, 0x38aa7b0, 0x38aa9b0, 0x38aa8b0<ST4[%3]> [ORD=28]


Initial selection DAG: BB#3 'po_calculation3:po_calculation3.for.inc'
SelectionDAG has 10 nodes:
  0x38aa9b0: i32 = FrameIndex<2> [ORD=26]

  0x389cf00: i32 = Constant<0>

  0x38aa8b0: i32 = undef [ORD=26]

    0x387f108: ch = EntryToken [ORD=26]

    0x38aa9b0: <multiple use>
    0x38aa8b0: <multiple use>
  0x389d200: i32,ch = load 0x387f108, 0x38aa9b0, 0x38aa8b0<LD4[%3]> [ORD=26]

      0x389d200: <multiple use>
        0x389d200: <multiple use>
        0x389c700: i32 = Constant<1> [ORD=27]

      0x38aa7b0: i32 = add 0x389d200, 0x389c700 [ORD=27]

      0x38aa9b0: <multiple use>
      0x38aa8b0: <multiple use>
    0x389ca00: ch = store 0x389d200:1, 0x38aa7b0, 0x38aa9b0, 0x38aa8b0<ST4[%3]> [ORD=28]

    0x38aa6b0: ch = BasicBlock<po_calculation3.for.cond 0x38a4660>

  0x389d500: ch = br 0x389ca00, 0x38aa6b0


Optimized lowered selection DAG: BB#3 'po_calculation3:po_calculation3.for.inc'
SelectionDAG has 9 nodes:
  0x38aa9b0: i32 = FrameIndex<2> [ORD=26]

  0x38aa8b0: i32 = undef [ORD=26]

    0x387f108: ch = EntryToken [ORD=26]

    0x38aa9b0: <multiple use>
    0x38aa8b0: <multiple use>
  0x389d200: i32,ch = load 0x387f108, 0x38aa9b0, 0x38aa8b0<LD4[%3]> [ORD=26]

      0x389d200: <multiple use>
        0x389d200: <multiple use>
        0x389c700: i32 = Constant<1> [ORD=27]

      0x38aa7b0: i32 = add 0x389d200, 0x389c700 [ORD=27]

      0x38aa9b0: <multiple use>
      0x38aa8b0: <multiple use>
    0x389ca00: ch = store 0x389d200:1, 0x38aa7b0, 0x38aa9b0, 0x38aa8b0<ST4[%3]> [ORD=28]

    0x38aa6b0: ch = BasicBlock<po_calculation3.for.cond 0x38a4660>

  0x389d500: ch = br 0x389ca00, 0x38aa6b0


Legally typed node: 0x38aa6b0: ch = BasicBlock<po_calculation3.for.cond 0x38a4660> [ID=0]

Legally typed node: 0x389c700: i32 = Constant<1> [ORD=27] [ID=0]

Legally typed node: 0x38aa8b0: i32 = undef [ORD=26] [ID=0]

Legally typed node: 0x38aa9b0: i32 = FrameIndex<2> [ORD=26] [ID=0]

Legally typed node: 0x387f108: ch = EntryToken [ORD=26] [ID=0]

Legally typed node: 0x389d200: i32,ch = load 0x387f108, 0x38aa9b0, 0x38aa8b0<LD4[%3]> [ORD=26] [ID=0]

Legally typed node: 0x38aa7b0: i32 = add 0x389d200, 0x389c700 [ORD=27] [ID=0]

Legally typed node: 0x389ca00: ch = store 0x389d200:1, 0x38aa7b0, 0x38aa9b0, 0x38aa8b0<ST4[%3]> [ORD=28] [ID=0]

Legally typed node: 0x389d500: ch = br 0x389ca00, 0x38aa6b0 [ID=0]

Legally typed node: 0x7fff6fb15090: ch = handlenode 0x389d500 [ID=0]

Type-legalized selection DAG: BB#3 'po_calculation3:po_calculation3.for.inc'
SelectionDAG has 9 nodes:
  0x38aa9b0: i32 = FrameIndex<2> [ORD=26] [ID=-3]

  0x38aa8b0: i32 = undef [ORD=26] [ID=-3]

    0x387f108: ch = EntryToken [ORD=26] [ID=-3]

    0x38aa9b0: <multiple use>
    0x38aa8b0: <multiple use>
  0x389d200: i32,ch = load 0x387f108, 0x38aa9b0, 0x38aa8b0<LD4[%3]> [ORD=26] [ID=-3]

      0x389d200: <multiple use>
        0x389d200: <multiple use>
        0x389c700: i32 = Constant<1> [ORD=27] [ID=-3]

      0x38aa7b0: i32 = add 0x389d200, 0x389c700 [ORD=27] [ID=-3]

      0x38aa9b0: <multiple use>
      0x38aa8b0: <multiple use>
    0x389ca00: ch = store 0x389d200:1, 0x38aa7b0, 0x38aa9b0, 0x38aa8b0<ST4[%3]> [ORD=28] [ID=-3]

    0x38aa6b0: ch = BasicBlock<po_calculation3.for.cond 0x38a4660> [ID=-3]

  0x389d500: ch = br 0x389ca00, 0x38aa6b0 [ID=-3]


Legalized selection DAG: BB#3 'po_calculation3:po_calculation3.for.inc'
SelectionDAG has 9 nodes:
  0x38aa9b0: i32 = FrameIndex<2> [ORD=26] [ID=1]

  0x38aa8b0: i32 = undef [ORD=26] [ID=2]

    0x387f108: ch = EntryToken [ORD=26] [ID=0]

    0x38aa9b0: <multiple use>
    0x38aa8b0: <multiple use>
  0x389d200: i32,ch = load 0x387f108, 0x38aa9b0, 0x38aa8b0<LD4[%3]> [ORD=26] [ID=5]

      0x389d200: <multiple use>
        0x389d200: <multiple use>
        0x389c700: i32 = Constant<1> [ORD=27] [ID=3]

      0x38aa7b0: i32 = add 0x389d200, 0x389c700 [ORD=27] [ID=6]

      0x38aa9b0: <multiple use>
      0x38aa8b0: <multiple use>
    0x389ca00: ch = store 0x389d200:1, 0x38aa7b0, 0x38aa9b0, 0x38aa8b0<ST4[%3]> [ORD=28] [ID=7]

    0x38aa6b0: ch = BasicBlock<po_calculation3.for.cond 0x38a4660> [ID=4]

  0x389d500: ch = br 0x389ca00, 0x38aa6b0 [ID=8]


Optimized legalized selection DAG: BB#3 'po_calculation3:po_calculation3.for.inc'
SelectionDAG has 9 nodes:
  0x38aa9b0: i32 = FrameIndex<2> [ORD=26] [ID=1]

  0x38aa8b0: i32 = undef [ORD=26] [ID=2]

    0x387f108: ch = EntryToken [ORD=26] [ID=0]

    0x38aa9b0: <multiple use>
    0x38aa8b0: <multiple use>
  0x389d200: i32,ch = load 0x387f108, 0x38aa9b0, 0x38aa8b0<LD4[%3]> [ORD=26] [ID=5]

      0x389d200: <multiple use>
        0x389d200: <multiple use>
        0x389c700: i32 = Constant<1> [ORD=27] [ID=3]

      0x38aa7b0: i32 = add 0x389d200, 0x389c700 [ORD=27] [ID=6]

      0x38aa9b0: <multiple use>
      0x38aa8b0: <multiple use>
    0x389ca00: ch = store 0x389d200:1, 0x38aa7b0, 0x38aa9b0, 0x38aa8b0<ST4[%3]> [ORD=28] [ID=7]

    0x38aa6b0: ch = BasicBlock<po_calculation3.for.cond 0x38a4660> [ID=4]

  0x389d500: ch = br 0x389ca00, 0x38aa6b0 [ID=8]


===== Instruction selection begins: BB#3 'po_calculation3.for.inc'
ISEL: Starting pattern match on root node: 0x389d500: ch = br 0x389ca00, 0x38aa6b0 [ID=8]

  Initial Opcode index to 1938
  Morphed node: 0x389d500: ch = JAL 0x38aa6b0, 0x389ca00

ISEL: Match complete!
=> 0x389d500: ch = JAL 0x38aa6b0, 0x389ca00

ISEL: Starting pattern match on root node: 0x389ca00: ch = store 0x389d200:1, 0x38aa7b0, 0x38aa9b0, 0x38aa8b0<ST4[%3]> [ORD=28] [ID=7]

  Initial Opcode index to 178
  Morphed node: 0x389ca00: ch = SW 0x38aa7b0, 0x38aa9b0, 0x389cf00, 0x389d200:1<Mem:ST4[%3]> [ORD=28]

ISEL: Match complete!
=> 0x389ca00: ch = SW 0x38aa7b0, 0x38aa9b0, 0x389cf00, 0x389d200:1<Mem:ST4[%3]> [ORD=28]

ISEL: Starting pattern match on root node: 0x38aa7b0: i32 = add 0x389d200, 0x389c700 [ORD=27] [ID=6]

  Initial Opcode index to 493
  Morphed node: 0x38aa7b0: i32 = ADDI 0x389d200, 0x389c800 [ORD=27]

ISEL: Match complete!
=> 0x38aa7b0: i32 = ADDI 0x389d200, 0x389c800 [ORD=27]

ISEL: Starting pattern match on root node: 0x389d200: i32,ch = load 0x387f108, 0x38aa9b0, 0x38aa8b0<LD4[%3]> [ORD=26] [ID=5]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x389d200: i32,ch = LW 0x38aa9b0, 0x389cf00, 0x387f108<Mem:LD4[%3]> [ORD=26]

ISEL: Match complete!
=> 0x389d200: i32,ch = LW 0x38aa9b0, 0x389cf00, 0x387f108<Mem:LD4[%3]> [ORD=26]

=> 0x38aa6b0: ch = BasicBlock<po_calculation3.for.cond 0x38a4660>

=> 0x387f108: ch = EntryToken [ORD=26]

===== Instruction selection ends:
Selected selection DAG: BB#3 'po_calculation3:po_calculation3.for.inc'
SelectionDAG has 11 nodes:
    0x38aa5b0: <multiple use>
    0x389cf00: <multiple use>
    0x387f108: ch = EntryToken [ORD=26]

  0x389d200: i32,ch = LW 0x38aa5b0, 0x389cf00, 0x387f108<Mem:LD4[%3]> [ORD=26]

  0x389cf00: i32 = TargetConstant<0>

    0x38aa8b0: i32 = Register %t5

    0x389c700: i32 = TargetFrameIndex<2>

  0x38aa5b0: i32 = ADDI 0x38aa8b0, 0x389c700 [ORD=26]

    0x38aa6b0: ch = BasicBlock<po_calculation3.for.cond 0x38a4660>

        0x389d200: <multiple use>
        0x389c800: i32 = TargetConstant<1>

      0x38aa7b0: i32 = ADDI 0x389d200, 0x389c800 [ORD=27]

      0x38aa5b0: <multiple use>
      0x389cf00: <multiple use>
      0x389d200: <multiple use>
    0x389ca00: ch = SW 0x38aa7b0, 0x38aa5b0, 0x389cf00, 0x389d200:1<Mem:ST4[%3]> [ORD=28]

  0x389d500: ch = JAL 0x38aa6b0, 0x389ca00


********** List Scheduling BB#3 'po_calculation3.for.inc' **********
SU(0): 0x389d500: ch = JAL 0x38aa6b0, 0x389ca00 [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x389ca00: ch = SW 0x38aa7b0, 0x38aa5b0, 0x389cf00, 0x389d200:1<Mem:ST4[%3]> [ORD=28] [ID=1]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(4): Latency=1
   val SU(3): Latency=1
   ch  SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x389d200: i32,ch = LW 0x38aa5b0, 0x389cf00, 0x387f108<Mem:LD4[%3]> [ORD=26] [ID=2]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(3): Latency=1
  Successors:
   ch  SU(1): Latency=1
   val SU(4): Latency=1

SU(3): 0x38aa5b0: i32 = ADDI 0x38aa8b0, 0x389c700 [ORD=26] [ID=3]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(1): Latency=1
   val SU(2): Latency=1

SU(4): 0x38aa7b0: i32 = ADDI 0x389d200, 0x389c800 [ORD=27] [ID=4]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(2): Latency=1
  Successors:
   val SU(1): Latency=1


Examining Available:
Height 0: SU(0): 0x389d500: ch = JAL 0x38aa6b0, 0x389ca00 [ID=0]


*** Scheduling [0]: SU(0): 0x389d500: ch = JAL 0x38aa6b0, 0x389ca00 [ID=0]


Examining Available:
Height 1: SU(1): 0x389ca00: ch = SW 0x38aa7b0, 0x38aa5b0, 0x389cf00, 0x389d200:1<Mem:ST4[%3]> [ORD=28] [ID=1]


*** Scheduling [1]: SU(1): 0x389ca00: ch = SW 0x38aa7b0, 0x38aa5b0, 0x389cf00, 0x389d200:1<Mem:ST4[%3]> [ORD=28] [ID=1]


Examining Available:
Height 2: SU(4): 0x38aa7b0: i32 = ADDI 0x389d200, 0x389c800 [ORD=27] [ID=4]


*** Scheduling [2]: SU(4): 0x38aa7b0: i32 = ADDI 0x389d200, 0x389c800 [ORD=27] [ID=4]


Examining Available:
Height 3: SU(2): 0x389d200: i32,ch = LW 0x38aa5b0, 0x389cf00, 0x387f108<Mem:LD4[%3]> [ORD=26] [ID=2]


*** Scheduling [3]: SU(2): 0x389d200: i32,ch = LW 0x38aa5b0, 0x389cf00, 0x387f108<Mem:LD4[%3]> [ORD=26] [ID=2]


Examining Available:
Height 4: SU(3): 0x38aa5b0: i32 = ADDI 0x38aa8b0, 0x389c700 [ORD=26] [ID=3]


*** Scheduling [4]: SU(3): 0x38aa5b0: i32 = ADDI 0x38aa8b0, 0x389c700 [ORD=26] [ID=3]

*** Final schedule ***
SU(3): 0x38aa5b0: i32 = ADDI 0x38aa8b0, 0x389c700 [ORD=26] [ID=3]

SU(2): 0x389d200: i32,ch = LW 0x38aa5b0, 0x389cf00, 0x387f108<Mem:LD4[%3]> [ORD=26] [ID=2]

SU(4): 0x38aa7b0: i32 = ADDI 0x389d200, 0x389c800 [ORD=27] [ID=4]

SU(1): 0x389ca00: ch = SW 0x38aa7b0, 0x38aa5b0, 0x389cf00, 0x389d200:1<Mem:ST4[%3]> [ORD=28] [ID=1]

SU(0): 0x389d500: ch = JAL 0x38aa6b0, 0x389ca00 [ID=0]


Total amount of phi nodes to update: 0

*** Tail-duplicating BB#5

Merging into block: BB#4: derived from LLVM BB %po_calculation3.for.end
    Predecessors according to CFG: BB#1
	%vreg7<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg7
	%vreg8<def> = LW %vreg7, 0; mem:LD4[%4] GR32Bit:%vreg8,%vreg7
	%vreg9<def> = ADDI %zero, 25; GR32Bit:%vreg9
	%vreg10<def> = MUL %vreg9<kill>, %vreg8<kill>; GR32Bit:%vreg10,%vreg9,%vreg8
	SW %vreg10, %vreg7, 0; mem:ST4[%4] GR32Bit:%vreg10,%vreg7
	%vreg11<def> = FCVT_S_W_RDY %vreg10; FP32Bit:%vreg11 GR32Bit:%vreg10
	%vreg12<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg12
	FSW %vreg11<kill>, %vreg12<kill>, 0; mem:ST4[%1] FP32Bit:%vreg11 GR32Bit:%vreg12
    Successors according to CFG: BB#5
From MBB: BB#5: derived from LLVM BB %po_calculation3.return
    Predecessors according to CFG: BB#4

Removing MBB: BB#5: derived from LLVM BB %po_calculation3.return
# Machine code for function po_calculation3: SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %po_calculation3.entry
16B		%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
48B		SW %vreg1<kill>, %vreg0<kill>, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
64B		%vreg2<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg2
80B		SW %zero, %vreg2<kill>, 0; mem:ST4[%3] GR32Bit:%vreg2
96B		%vreg3<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg3
112B		SW %zero, %vreg3<kill>, 0; mem:ST4[%4] GR32Bit:%vreg3
	    Successors according to CFG: BB#1

128B	BB#1: derived from LLVM BB %po_calculation3.for.cond
	    Predecessors according to CFG: BB#0 BB#3
144B		%vreg4<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg4
160B		%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[%3] GR32Bit:%vreg5,%vreg4
176B		%vreg6<def> = ADDI %zero, 24; GR32Bit:%vreg6
192B		BGT <BB#4>, %vreg5<kill>, %vreg6<kill>; GR32Bit:%vreg5,%vreg6
208B		JAL <BB#2>
	    Successors according to CFG: BB#2(124) BB#4(4)

224B	BB#2: derived from LLVM BB %po_calculation3.for.body
	    Predecessors according to CFG: BB#1
240B		%vreg13<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg13
256B		%vreg14<def> = LW %vreg13<kill>, 0; mem:LD4[%3] GR32Bit:%vreg14,%vreg13
272B		%vreg15<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg15
288B		%vreg16<def> = LW %vreg15<kill>, 0; mem:LD4[%2] GR32Bit:%vreg16,%vreg15
304B		%vreg17<def> = SLLI %vreg14<kill>, 2; GR32Bit:%vreg17,%vreg14
320B		%vreg18<def> = ADD %vreg17<kill>, %vreg16<kill>; GR32Bit:%vreg18,%vreg17,%vreg16
336B		%vreg19<def> = FLW %vreg18<kill>, 0; mem:LD4[%9] FP32Bit:%vreg19 GR32Bit:%vreg18
352B		%vreg20<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg20
368B		%vreg21<def> = LW %vreg20, 0; mem:LD4[%4] GR32Bit:%vreg21,%vreg20
384B		%vreg22<def> = FCVT_S_W_RDY %vreg21<kill>; FP32Bit:%vreg22 GR32Bit:%vreg21
400B		%vreg23<def> = FADD_S_RDY %vreg19<kill>, %vreg22<kill>; FP32Bit:%vreg23,%vreg19,%vreg22
416B		%vreg24<def> = FCVT_W_S_RTZ %vreg23<kill>; GR32Bit:%vreg24 FP32Bit:%vreg23
432B		SW %vreg24<kill>, %vreg20, 0; mem:ST4[%4] GR32Bit:%vreg24,%vreg20
	    Successors according to CFG: BB#3

448B	BB#3: derived from LLVM BB %po_calculation3.for.inc
	    Predecessors according to CFG: BB#2
464B		%vreg25<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg25
480B		%vreg26<def> = LW %vreg25, 0; mem:LD4[%3] GR32Bit:%vreg26,%vreg25
496B		%vreg27<def> = ADDI %vreg26<kill>, 1; GR32Bit:%vreg27,%vreg26
512B		SW %vreg27<kill>, %vreg25, 0; mem:ST4[%3] GR32Bit:%vreg27,%vreg25
528B		JAL <BB#1>
	    Successors according to CFG: BB#1

544B	BB#4: derived from LLVM BB %po_calculation3.for.end
	    Predecessors according to CFG: BB#1
560B		%vreg7<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg7
576B		%vreg8<def> = LW %vreg7, 0; mem:LD4[%4] GR32Bit:%vreg8,%vreg7
592B		%vreg9<def> = ADDI %zero, 25; GR32Bit:%vreg9
608B		%vreg10<def> = MUL %vreg9<kill>, %vreg8<kill>; GR32Bit:%vreg10,%vreg9,%vreg8
624B		SW %vreg10, %vreg7, 0; mem:ST4[%4] GR32Bit:%vreg10,%vreg7
640B		%vreg11<def> = FCVT_S_W_RDY %vreg10; FP32Bit:%vreg11 GR32Bit:%vreg10
656B		%vreg12<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg12
672B		FSW %vreg11<kill>, %vreg12<kill>, 0; mem:ST4[%1] FP32Bit:%vreg11 GR32Bit:%vreg12

# End machine code for function po_calculation3.

********** Stack Coloring **********
********** Function: po_calculation3
Found 0 markers and 4 slots
Slot structure:
Slot #0 - 4 bytes.
Slot #1 - 4 bytes.
Slot #2 - 4 bytes.
Slot #3 - 4 bytes.
Total Stack size: 16 bytes

Will not try to merge slots.
Removed 0 markers.
******** Pre-regalloc Machine LICM: po_calculation3 ********
Entering: po_calculation3.for.cond
Can't remat / high reg-pressure: %vreg4<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg4
Can't remat / high reg-pressure: %vreg6<def> = ADDI %zero, 24; GR32Bit:%vreg6
Entering: po_calculation3.for.body
Won't speculate: %vreg13<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg13
Won't speculate: %vreg15<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg15
Won't speculate: %vreg20<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg20
Entering: po_calculation3.for.inc
Won't speculate: %vreg25<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg25
Exiting: po_calculation3.for.inc
Exiting: po_calculation3.for.body
******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: po_calculation3
********** PROCESS IMPLICIT DEFS **********
********** Function: po_calculation3
********** REWRITING TWO-ADDR INSTRS **********
********** Function: po_calculation3
# Machine code for function po_calculation3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %po_calculation3.entry
16B		%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
48B		SW %vreg1<kill>, %vreg0<kill>, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
64B		%vreg2<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg2
80B		SW %zero, %vreg2<kill>, 0; mem:ST4[%3] GR32Bit:%vreg2
96B		%vreg3<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg3
112B		SW %zero, %vreg3<kill>, 0; mem:ST4[%4] GR32Bit:%vreg3
	    Successors according to CFG: BB#1

128B	BB#1: derived from LLVM BB %po_calculation3.for.cond
	    Predecessors according to CFG: BB#0 BB#3
144B		%vreg4<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg4
160B		%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[%3] GR32Bit:%vreg5,%vreg4
176B		%vreg6<def> = ADDI %zero, 24; GR32Bit:%vreg6
192B		BGT <BB#4>, %vreg5<kill>, %vreg6<kill>; GR32Bit:%vreg5,%vreg6
208B		JAL <BB#2>
	    Successors according to CFG: BB#2(124) BB#4(4)

224B	BB#2: derived from LLVM BB %po_calculation3.for.body
	    Predecessors according to CFG: BB#1
240B		%vreg13<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg13
256B		%vreg14<def> = LW %vreg13<kill>, 0; mem:LD4[%3] GR32Bit:%vreg14,%vreg13
272B		%vreg15<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg15
288B		%vreg16<def> = LW %vreg15<kill>, 0; mem:LD4[%2] GR32Bit:%vreg16,%vreg15
304B		%vreg17<def> = SLLI %vreg14<kill>, 2; GR32Bit:%vreg17,%vreg14
320B		%vreg18<def> = ADD %vreg17<kill>, %vreg16<kill>; GR32Bit:%vreg18,%vreg17,%vreg16
336B		%vreg19<def> = FLW %vreg18<kill>, 0; mem:LD4[%9] FP32Bit:%vreg19 GR32Bit:%vreg18
352B		%vreg20<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg20
368B		%vreg21<def> = LW %vreg20, 0; mem:LD4[%4] GR32Bit:%vreg21,%vreg20
384B		%vreg22<def> = FCVT_S_W_RDY %vreg21<kill>; FP32Bit:%vreg22 GR32Bit:%vreg21
400B		%vreg23<def> = FADD_S_RDY %vreg19<kill>, %vreg22<kill>; FP32Bit:%vreg23,%vreg19,%vreg22
416B		%vreg24<def> = FCVT_W_S_RTZ %vreg23<kill>; GR32Bit:%vreg24 FP32Bit:%vreg23
432B		SW %vreg24<kill>, %vreg20<kill>, 0; mem:ST4[%4] GR32Bit:%vreg24,%vreg20
	    Successors according to CFG: BB#3

448B	BB#3: derived from LLVM BB %po_calculation3.for.inc
	    Predecessors according to CFG: BB#2
464B		%vreg25<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg25
480B		%vreg26<def> = LW %vreg25, 0; mem:LD4[%3] GR32Bit:%vreg26,%vreg25
496B		%vreg27<def> = ADDI %vreg26<kill>, 1; GR32Bit:%vreg27,%vreg26
512B		SW %vreg27<kill>, %vreg25<kill>, 0; mem:ST4[%3] GR32Bit:%vreg27,%vreg25
528B		JAL <BB#1>
	    Successors according to CFG: BB#1

544B	BB#4: derived from LLVM BB %po_calculation3.for.end
	    Predecessors according to CFG: BB#1
560B		%vreg7<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg7
576B		%vreg8<def> = LW %vreg7, 0; mem:LD4[%4] GR32Bit:%vreg8,%vreg7
592B		%vreg9<def> = ADDI %zero, 25; GR32Bit:%vreg9
608B		%vreg10<def> = MUL %vreg9<kill>, %vreg8<kill>; GR32Bit:%vreg10,%vreg9,%vreg8
624B		SW %vreg10, %vreg7<kill>, 0; mem:ST4[%4] GR32Bit:%vreg10,%vreg7
640B		%vreg11<def> = FCVT_S_W_RDY %vreg10<kill>; FP32Bit:%vreg11 GR32Bit:%vreg10
656B		%vreg12<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg12
672B		FSW %vreg11<kill>, %vreg12<kill>, 0; mem:ST4[%1] FP32Bit:%vreg11 GR32Bit:%vreg12

# End machine code for function po_calculation3.

Computing live-in reg-units in ABI blocks.
Created 0 new intervals.
********** INTERVALS **********
%vreg0 = [16r,48r:0)  0@16r
%vreg1 = [32r,48r:0)  0@32r
%vreg2 = [64r,80r:0)  0@64r
%vreg3 = [96r,112r:0)  0@96r
%vreg4 = [144r,160r:0)  0@144r
%vreg5 = [160r,192r:0)  0@160r
%vreg6 = [176r,192r:0)  0@176r
%vreg7 = [560r,624r:0)  0@560r
%vreg8 = [576r,608r:0)  0@576r
%vreg9 = [592r,608r:0)  0@592r
%vreg10 = [608r,640r:0)  0@608r
%vreg11 = [640r,672r:0)  0@640r
%vreg12 = [656r,672r:0)  0@656r
%vreg13 = [240r,256r:0)  0@240r
%vreg14 = [256r,304r:0)  0@256r
%vreg15 = [272r,288r:0)  0@272r
%vreg16 = [288r,320r:0)  0@288r
%vreg17 = [304r,320r:0)  0@304r
%vreg18 = [320r,336r:0)  0@320r
%vreg19 = [336r,400r:0)  0@336r
%vreg20 = [352r,432r:0)  0@352r
%vreg21 = [368r,384r:0)  0@368r
%vreg22 = [384r,400r:0)  0@384r
%vreg23 = [400r,416r:0)  0@400r
%vreg24 = [416r,432r:0)  0@416r
%vreg25 = [464r,512r:0)  0@464r
%vreg26 = [480r,496r:0)  0@480r
%vreg27 = [496r,512r:0)  0@496r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function po_calculation3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %po_calculation3.entry
16B		%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
48B		SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
64B		%vreg2<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg2
80B		SW %zero, %vreg2, 0; mem:ST4[%3] GR32Bit:%vreg2
96B		%vreg3<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg3
112B		SW %zero, %vreg3, 0; mem:ST4[%4] GR32Bit:%vreg3
	    Successors according to CFG: BB#1

128B	BB#1: derived from LLVM BB %po_calculation3.for.cond
	    Predecessors according to CFG: BB#0 BB#3
144B		%vreg4<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg4
160B		%vreg5<def> = LW %vreg4, 0; mem:LD4[%3] GR32Bit:%vreg5,%vreg4
176B		%vreg6<def> = ADDI %zero, 24; GR32Bit:%vreg6
192B		BGT <BB#4>, %vreg5, %vreg6; GR32Bit:%vreg5,%vreg6
208B		JAL <BB#2>
	    Successors according to CFG: BB#2(124) BB#4(4)

224B	BB#2: derived from LLVM BB %po_calculation3.for.body
	    Predecessors according to CFG: BB#1
240B		%vreg13<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg13
256B		%vreg14<def> = LW %vreg13, 0; mem:LD4[%3] GR32Bit:%vreg14,%vreg13
272B		%vreg15<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg15
288B		%vreg16<def> = LW %vreg15, 0; mem:LD4[%2] GR32Bit:%vreg16,%vreg15
304B		%vreg17<def> = SLLI %vreg14, 2; GR32Bit:%vreg17,%vreg14
320B		%vreg18<def> = ADD %vreg17, %vreg16; GR32Bit:%vreg18,%vreg17,%vreg16
336B		%vreg19<def> = FLW %vreg18, 0; mem:LD4[%9] FP32Bit:%vreg19 GR32Bit:%vreg18
352B		%vreg20<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg20
368B		%vreg21<def> = LW %vreg20, 0; mem:LD4[%4] GR32Bit:%vreg21,%vreg20
384B		%vreg22<def> = FCVT_S_W_RDY %vreg21; FP32Bit:%vreg22 GR32Bit:%vreg21
400B		%vreg23<def> = FADD_S_RDY %vreg19, %vreg22; FP32Bit:%vreg23,%vreg19,%vreg22
416B		%vreg24<def> = FCVT_W_S_RTZ %vreg23; GR32Bit:%vreg24 FP32Bit:%vreg23
432B		SW %vreg24, %vreg20, 0; mem:ST4[%4] GR32Bit:%vreg24,%vreg20
	    Successors according to CFG: BB#3

448B	BB#3: derived from LLVM BB %po_calculation3.for.inc
	    Predecessors according to CFG: BB#2
464B		%vreg25<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg25
480B		%vreg26<def> = LW %vreg25, 0; mem:LD4[%3] GR32Bit:%vreg26,%vreg25
496B		%vreg27<def> = ADDI %vreg26, 1; GR32Bit:%vreg27,%vreg26
512B		SW %vreg27, %vreg25, 0; mem:ST4[%3] GR32Bit:%vreg27,%vreg25
528B		JAL <BB#1>
	    Successors according to CFG: BB#1

544B	BB#4: derived from LLVM BB %po_calculation3.for.end
	    Predecessors according to CFG: BB#1
560B		%vreg7<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg7
576B		%vreg8<def> = LW %vreg7, 0; mem:LD4[%4] GR32Bit:%vreg8,%vreg7
592B		%vreg9<def> = ADDI %zero, 25; GR32Bit:%vreg9
608B		%vreg10<def> = MUL %vreg9, %vreg8; GR32Bit:%vreg10,%vreg9,%vreg8
624B		SW %vreg10, %vreg7, 0; mem:ST4[%4] GR32Bit:%vreg10,%vreg7
640B		%vreg11<def> = FCVT_S_W_RDY %vreg10; FP32Bit:%vreg11 GR32Bit:%vreg10
656B		%vreg12<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg12
672B		FSW %vreg11, %vreg12, 0; mem:ST4[%1] FP32Bit:%vreg11 GR32Bit:%vreg12

# End machine code for function po_calculation3.

********** SIMPLE REGISTER COALESCING **********
********** Function: po_calculation3
********** JOINING INTERVALS ***********
po_calculation3.for.cond:
po_calculation3.for.body:
po_calculation3.for.inc:
po_calculation3.entry:
po_calculation3.for.end:
Trying to inflate 0 regs.
********** INTERVALS **********
%vreg0 = [16r,48r:0)  0@16r
%vreg1 = [32r,48r:0)  0@32r
%vreg2 = [64r,80r:0)  0@64r
%vreg3 = [96r,112r:0)  0@96r
%vreg4 = [144r,160r:0)  0@144r
%vreg5 = [160r,192r:0)  0@160r
%vreg6 = [176r,192r:0)  0@176r
%vreg7 = [560r,624r:0)  0@560r
%vreg8 = [576r,608r:0)  0@576r
%vreg9 = [592r,608r:0)  0@592r
%vreg10 = [608r,640r:0)  0@608r
%vreg11 = [640r,672r:0)  0@640r
%vreg12 = [656r,672r:0)  0@656r
%vreg13 = [240r,256r:0)  0@240r
%vreg14 = [256r,304r:0)  0@256r
%vreg15 = [272r,288r:0)  0@272r
%vreg16 = [288r,320r:0)  0@288r
%vreg17 = [304r,320r:0)  0@304r
%vreg18 = [320r,336r:0)  0@320r
%vreg19 = [336r,400r:0)  0@336r
%vreg20 = [352r,432r:0)  0@352r
%vreg21 = [368r,384r:0)  0@368r
%vreg22 = [384r,400r:0)  0@384r
%vreg23 = [400r,416r:0)  0@400r
%vreg24 = [416r,432r:0)  0@416r
%vreg25 = [464r,512r:0)  0@464r
%vreg26 = [480r,496r:0)  0@480r
%vreg27 = [496r,512r:0)  0@496r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function po_calculation3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %po_calculation3.entry
16B		%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
48B		SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
64B		%vreg2<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg2
80B		SW %zero, %vreg2, 0; mem:ST4[%3] GR32Bit:%vreg2
96B		%vreg3<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg3
112B		SW %zero, %vreg3, 0; mem:ST4[%4] GR32Bit:%vreg3
	    Successors according to CFG: BB#1

128B	BB#1: derived from LLVM BB %po_calculation3.for.cond
	    Predecessors according to CFG: BB#0 BB#3
144B		%vreg4<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg4
160B		%vreg5<def> = LW %vreg4, 0; mem:LD4[%3] GR32Bit:%vreg5,%vreg4
176B		%vreg6<def> = ADDI %zero, 24; GR32Bit:%vreg6
192B		BGT <BB#4>, %vreg5, %vreg6; GR32Bit:%vreg5,%vreg6
208B		JAL <BB#2>
	    Successors according to CFG: BB#2(124) BB#4(4)

224B	BB#2: derived from LLVM BB %po_calculation3.for.body
	    Predecessors according to CFG: BB#1
240B		%vreg13<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg13
256B		%vreg14<def> = LW %vreg13, 0; mem:LD4[%3] GR32Bit:%vreg14,%vreg13
272B		%vreg15<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg15
288B		%vreg16<def> = LW %vreg15, 0; mem:LD4[%2] GR32Bit:%vreg16,%vreg15
304B		%vreg17<def> = SLLI %vreg14, 2; GR32Bit:%vreg17,%vreg14
320B		%vreg18<def> = ADD %vreg17, %vreg16; GR32Bit:%vreg18,%vreg17,%vreg16
336B		%vreg19<def> = FLW %vreg18, 0; mem:LD4[%9] FP32Bit:%vreg19 GR32Bit:%vreg18
352B		%vreg20<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg20
368B		%vreg21<def> = LW %vreg20, 0; mem:LD4[%4] GR32Bit:%vreg21,%vreg20
384B		%vreg22<def> = FCVT_S_W_RDY %vreg21; FP32Bit:%vreg22 GR32Bit:%vreg21
400B		%vreg23<def> = FADD_S_RDY %vreg19, %vreg22; FP32Bit:%vreg23,%vreg19,%vreg22
416B		%vreg24<def> = FCVT_W_S_RTZ %vreg23; GR32Bit:%vreg24 FP32Bit:%vreg23
432B		SW %vreg24, %vreg20, 0; mem:ST4[%4] GR32Bit:%vreg24,%vreg20
	    Successors according to CFG: BB#3

448B	BB#3: derived from LLVM BB %po_calculation3.for.inc
	    Predecessors according to CFG: BB#2
464B		%vreg25<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg25
480B		%vreg26<def> = LW %vreg25, 0; mem:LD4[%3] GR32Bit:%vreg26,%vreg25
496B		%vreg27<def> = ADDI %vreg26, 1; GR32Bit:%vreg27,%vreg26
512B		SW %vreg27, %vreg25, 0; mem:ST4[%3] GR32Bit:%vreg27,%vreg25
528B		JAL <BB#1>
	    Successors according to CFG: BB#1

544B	BB#4: derived from LLVM BB %po_calculation3.for.end
	    Predecessors according to CFG: BB#1
560B		%vreg7<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg7
576B		%vreg8<def> = LW %vreg7, 0; mem:LD4[%4] GR32Bit:%vreg8,%vreg7
592B		%vreg9<def> = ADDI %zero, 25; GR32Bit:%vreg9
608B		%vreg10<def> = MUL %vreg9, %vreg8; GR32Bit:%vreg10,%vreg9,%vreg8
624B		SW %vreg10, %vreg7, 0; mem:ST4[%4] GR32Bit:%vreg10,%vreg7
640B		%vreg11<def> = FCVT_S_W_RDY %vreg10; FP32Bit:%vreg11 GR32Bit:%vreg10
656B		%vreg12<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg12
672B		FSW %vreg11, %vreg12, 0; mem:ST4[%1] FP32Bit:%vreg11 GR32Bit:%vreg12

# End machine code for function po_calculation3.

Before MISched:
# Machine code for function po_calculation3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %po_calculation3.entry
	%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
	%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
	SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
	%vreg2<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg2
	SW %zero, %vreg2, 0; mem:ST4[%3] GR32Bit:%vreg2
	%vreg3<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg3
	SW %zero, %vreg3, 0; mem:ST4[%4] GR32Bit:%vreg3
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %po_calculation3.for.cond
    Predecessors according to CFG: BB#0 BB#3
	%vreg4<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg4
	%vreg5<def> = LW %vreg4, 0; mem:LD4[%3] GR32Bit:%vreg5,%vreg4
	%vreg6<def> = ADDI %zero, 24; GR32Bit:%vreg6
	BGT <BB#4>, %vreg5, %vreg6; GR32Bit:%vreg5,%vreg6
	JAL <BB#2>
    Successors according to CFG: BB#2(124) BB#4(4)

BB#2: derived from LLVM BB %po_calculation3.for.body
    Predecessors according to CFG: BB#1
	%vreg13<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg13
	%vreg14<def> = LW %vreg13, 0; mem:LD4[%3] GR32Bit:%vreg14,%vreg13
	%vreg15<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg15
	%vreg16<def> = LW %vreg15, 0; mem:LD4[%2] GR32Bit:%vreg16,%vreg15
	%vreg17<def> = SLLI %vreg14, 2; GR32Bit:%vreg17,%vreg14
	%vreg18<def> = ADD %vreg17, %vreg16; GR32Bit:%vreg18,%vreg17,%vreg16
	%vreg19<def> = FLW %vreg18, 0; mem:LD4[%9] FP32Bit:%vreg19 GR32Bit:%vreg18
	%vreg20<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg20
	%vreg21<def> = LW %vreg20, 0; mem:LD4[%4] GR32Bit:%vreg21,%vreg20
	%vreg22<def> = FCVT_S_W_RDY %vreg21; FP32Bit:%vreg22 GR32Bit:%vreg21
	%vreg23<def> = FADD_S_RDY %vreg19, %vreg22; FP32Bit:%vreg23,%vreg19,%vreg22
	%vreg24<def> = FCVT_W_S_RTZ %vreg23; GR32Bit:%vreg24 FP32Bit:%vreg23
	SW %vreg24, %vreg20, 0; mem:ST4[%4] GR32Bit:%vreg24,%vreg20
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %po_calculation3.for.inc
    Predecessors according to CFG: BB#2
	%vreg25<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg25
	%vreg26<def> = LW %vreg25, 0; mem:LD4[%3] GR32Bit:%vreg26,%vreg25
	%vreg27<def> = ADDI %vreg26, 1; GR32Bit:%vreg27,%vreg26
	SW %vreg27, %vreg25, 0; mem:ST4[%3] GR32Bit:%vreg27,%vreg25
	JAL <BB#1>
    Successors according to CFG: BB#1

BB#4: derived from LLVM BB %po_calculation3.for.end
    Predecessors according to CFG: BB#1
	%vreg7<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg7
	%vreg8<def> = LW %vreg7, 0; mem:LD4[%4] GR32Bit:%vreg8,%vreg7
	%vreg9<def> = ADDI %zero, 25; GR32Bit:%vreg9
	%vreg10<def> = MUL %vreg9, %vreg8; GR32Bit:%vreg10,%vreg9,%vreg8
	SW %vreg10, %vreg7, 0; mem:ST4[%4] GR32Bit:%vreg10,%vreg7
	%vreg11<def> = FCVT_S_W_RDY %vreg10; FP32Bit:%vreg11 GR32Bit:%vreg10
	%vreg12<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg12
	FSW %vreg11, %vreg12, 0; mem:ST4[%1] FP32Bit:%vreg11 GR32Bit:%vreg12

# End machine code for function po_calculation3.


-------------
Starting new basic block BB#0
********** MI Scheduling **********
po_calculation3:BB#0 po_calculation3.entry
  From: %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
    To: End Remaining: 0
Max Pressure: GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 2
Excess PSets: 
3 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 1
  SU(4) in tree 1
  SU(5) in tree 2
  SU(6) in tree 2
SU(0):   %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(2): Latency=5 Reg=%vreg0

SU(1):   %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
   val SU(2): Latency=4 Reg=%vreg1

SU(2):   SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 5
  Height             : 0
  Predecessors:
   val SU(1): Latency=4 Reg=%vreg1
   val SU(0): Latency=5 Reg=%vreg0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(3):   %vreg2<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(4): Latency=5 Reg=%vreg2

SU(4):   SW %zero, %vreg2, 0; mem:ST4[%3] GR32Bit:%vreg2
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 5
  Height             : 0
  Predecessors:
   val SU(3): Latency=5 Reg=%vreg2
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(5):   %vreg3<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(6): Latency=5 Reg=%vreg3

SU(6):   SW %zero, %vreg3, 0; mem:ST4[%4] GR32Bit:%vreg3
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 5
  Height             : 0
  Predecessors:
   val SU(5): Latency=5 Reg=%vreg3
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(2): Latency=5 Reg=%vreg0

SU(1):   %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
   val SU(2): Latency=4 Reg=%vreg1

SU(2):   SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 5
  Height             : 0
  Predecessors:
   val SU(1): Latency=4 Reg=%vreg1
   val SU(0): Latency=5 Reg=%vreg0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(3):   %vreg2<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(4): Latency=5 Reg=%vreg2

SU(4):   SW %zero, %vreg2, 0; mem:ST4[%3] GR32Bit:%vreg2
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 5
  Height             : 0
  Predecessors:
   val SU(3): Latency=5 Reg=%vreg2
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(5):   %vreg3<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(6): Latency=5 Reg=%vreg3

SU(6):   SW %zero, %vreg3, 0; mem:ST4[%4] GR32Bit:%vreg3
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 5
  Height             : 0
  Predecessors:
   val SU(5): Latency=5 Reg=%vreg3
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(3)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg2<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg2
handleMove 64B -> 8B: %vreg2<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg2
     %vreg2:	[64r,80r:0)  0@64r
        -->	[8r,80r:0)  0@8r
     t5:	EMPTY
        -->	EMPTY
Pick node SU(4)  ILP: 2 / 6 = 0.333333 Tree: 1 @0
Scheduling SW %zero, %vreg2, 0; mem:ST4[%3] GR32Bit:%vreg2
handleMove 80B -> 12B: SW %zero, %vreg2, 0; mem:ST4[%3] GR32Bit:%vreg2
     zero:	EMPTY
        -->	EMPTY
     %vreg2:	[8r,80r:0)  0@8r
        -->	[8r,12r:0)  0@8r
Pick node SU(1)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1

*** Renumbered SlotIndexes 12-28 ***
handleMove 32B -> 20B: %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
     %vreg1:	[32r,48r:0)  0@32r
        -->	[20r,48r:0)  0@20r
     t5:	EMPTY
        -->	EMPTY
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
Pick node SU(2)  ILP: 3 / 6 = 0.5 Tree: 0 @0
Scheduling SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
Pick node SU(5)  ILP: 1 / 1 = 1 Tree: 2 @0
Scheduling %vreg3<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg3
Pick node SU(6)  ILP: 2 / 6 = 0.333333 Tree: 2 @0
Scheduling SW %zero, %vreg3, 0; mem:ST4[%4] GR32Bit:%vreg3
*** Final schedule for BB#0 ***
SU(3):   %vreg2<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg2
SU(4):   SW %zero, %vreg2, 0; mem:ST4[%3] GR32Bit:%vreg2
SU(1):   %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
SU(0):   %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
SU(2):   SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
SU(5):   %vreg3<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg3
SU(6):   SW %zero, %vreg3, 0; mem:ST4[%4] GR32Bit:%vreg3


*** Renumbered SlotIndexes 4-60 ***

*** Renumbered SlotIndexes 16-88 ***

*** Renumbered SlotIndexes 28-108 ***

*** Renumbered SlotIndexes 40-136 ***

*** Renumbered SlotIndexes 52-156 ***

*** Renumbered SlotIndexes 64-184 ***

*** Renumbered SlotIndexes 76-204 ***

*** Renumbered SlotIndexes 88-232 ***

*** Renumbered SlotIndexes 100-252 ***

*** Renumbered SlotIndexes 112-280 ***

*** Renumbered SlotIndexes 124-300 ***

*** Renumbered SlotIndexes 136-328 ***

*** Renumbered SlotIndexes 148-348 ***

*** Renumbered SlotIndexes 160-376 ***

*** Renumbered SlotIndexes 172-396 ***

*** Renumbered SlotIndexes 184-424 ***

*** Renumbered SlotIndexes 196-444 ***

*** Renumbered SlotIndexes 208-472 ***

*** Renumbered SlotIndexes 220-492 ***

*** Renumbered SlotIndexes 232-520 ***

*** Renumbered SlotIndexes 244-540 ***

*** Renumbered SlotIndexes 256-568 ***

*** Renumbered SlotIndexes 268-588 ***

*** Renumbered SlotIndexes 280-616 ***

*** Renumbered SlotIndexes 292-636 ***

*** Renumbered SlotIndexes 304-664 ***

*** Renumbered SlotIndexes 316-684 ***

*** Renumbered SlotIndexes 328-704 ***

*** Renumbered SlotIndexes 340-716 ***

*** Renumbered SlotIndexes 352-728 ***

*** Renumbered SlotIndexes 364-740 ***

*** Renumbered SlotIndexes 376-752 ***

*** Renumbered SlotIndexes 388-764 ***

*** Renumbered SlotIndexes 400-776 ***
Partitioning instructions of the region into multiple CEs
instr:  %vreg2<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg2
instr:  SW %zero, %vreg2, 0; mem:ST4[%3] GR32Bit:%vreg2
instr:  %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
instr:  %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
instr:  SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
instr:  %vreg3<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg3
instr:  SW %zero, %vreg3, 0; mem:ST4[%4] GR32Bit:%vreg3
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
After Shuffling regions of basic block, state of BB#0:
BB#0: derived from LLVM BB %po_calculation3.entry
	%vreg28<def> = ADD %t5, %zero; GR32Bit:%vreg28
	%vreg30<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg30
	%vreg31<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg31
	%vreg32<def> = SRLI %vreg31, 12; GR32Bit:%vreg32,%vreg31
	%vreg33<def> = ADD %vreg30, %vreg32; GR32Bit:%vreg33,%vreg30,%vreg32
	%vreg34<def> = ADDI %zero, 20; GR32Bit:%vreg34
	%vreg35<def> = SRLI %t5, 22; GR32Bit:%vreg35
	%vreg36<def> = SRLI %t5, 12; GR32Bit:%vreg36
	%vreg37<def> = ANDI %vreg36, 15; GR32Bit:%vreg37,%vreg36
	%vreg38<def> = SRLI %t5, 6; GR32Bit:%vreg38
	%vreg39<def> = ANDI %vreg38, 63; GR32Bit:%vreg39,%vreg38
	%vreg40<def> = ADDI %zero, 832; GR32Bit:%vreg40
	%vreg41<def> = MUL %vreg35, %vreg40; GR32Bit:%vreg41,%vreg35,%vreg40
	%vreg42<def> = ADDI %zero, 52; GR32Bit:%vreg42
	%vreg43<def> = MUL %vreg37, %vreg42; GR32Bit:%vreg43,%vreg37,%vreg42
	%vreg44<def> = ADD %vreg43, %vreg39; GR32Bit:%vreg44,%vreg43,%vreg39
	%vreg45<def> = ADD %vreg44, %vreg41; GR32Bit:%vreg45,%vreg44,%vreg41
	%vreg46<def> = MUL %vreg45, %vreg34; GR32Bit:%vreg46,%vreg45,%vreg34
	%vreg29<def> = ADD %vreg33, %vreg46; GR32Bit:%vreg29,%vreg33,%vreg46
	%vreg2<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg2
	SW %zero, %vreg2, 0; mem:ST4[%3] GR32Bit:%vreg2
	%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
	%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
	SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
	%vreg3<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg3
	SW %zero, %vreg3, 0; mem:ST4[%4] GR32Bit:%vreg3
	%vreg47<def> = ADD %t5, %zero; GR32Bit:%vreg47
	%vreg49<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg49
	%vreg50<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg50
	%vreg51<def> = SRLI %vreg50, 12; GR32Bit:%vreg51,%vreg50
	%vreg52<def> = ADD %vreg49, %vreg51; GR32Bit:%vreg52,%vreg49,%vreg51
	%vreg53<def> = ADDI %zero, 20; GR32Bit:%vreg53
	%vreg54<def> = SRLI %t5, 22; GR32Bit:%vreg54
	%vreg55<def> = SRLI %t5, 12; GR32Bit:%vreg55
	%vreg56<def> = ANDI %vreg55, 15; GR32Bit:%vreg56,%vreg55
	%vreg57<def> = SRLI %t5, 6; GR32Bit:%vreg57
	%vreg58<def> = ANDI %vreg57, 63; GR32Bit:%vreg58,%vreg57
	%vreg59<def> = ADDI %zero, 832; GR32Bit:%vreg59
	%vreg60<def> = MUL %vreg54, %vreg59; GR32Bit:%vreg60,%vreg54,%vreg59
	%vreg61<def> = ADDI %zero, 52; GR32Bit:%vreg61
	%vreg62<def> = MUL %vreg56, %vreg61; GR32Bit:%vreg62,%vreg56,%vreg61
	%vreg63<def> = ADD %vreg62, %vreg58; GR32Bit:%vreg63,%vreg62,%vreg58
	%vreg64<def> = ADD %vreg63, %vreg60; GR32Bit:%vreg64,%vreg63,%vreg60
	%vreg65<def> = MUL %vreg64, %vreg53; GR32Bit:%vreg65,%vreg64,%vreg53
	%vreg48<def> = ADD %vreg52, %vreg65; GR32Bit:%vreg48,%vreg52,%vreg65
	%vreg66<def> = ADD %t5, %zero; GR32Bit:%vreg66
	%vreg68<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg68
	%vreg69<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg69
	%vreg70<def> = SRLI %vreg69, 12; GR32Bit:%vreg70,%vreg69
	%vreg71<def> = ADD %vreg68, %vreg70; GR32Bit:%vreg71,%vreg68,%vreg70
	%vreg72<def> = ADDI %zero, 20; GR32Bit:%vreg72
	%vreg73<def> = SRLI %t5, 22; GR32Bit:%vreg73
	%vreg74<def> = SRLI %t5, 12; GR32Bit:%vreg74
	%vreg75<def> = ANDI %vreg74, 15; GR32Bit:%vreg75,%vreg74
	%vreg76<def> = SRLI %t5, 6; GR32Bit:%vreg76
	%vreg77<def> = ANDI %vreg76, 63; GR32Bit:%vreg77,%vreg76
	%vreg78<def> = ADDI %zero, 832; GR32Bit:%vreg78
	%vreg79<def> = MUL %vreg73, %vreg78; GR32Bit:%vreg79,%vreg73,%vreg78
	%vreg80<def> = ADDI %zero, 52; GR32Bit:%vreg80
	%vreg81<def> = MUL %vreg75, %vreg80; GR32Bit:%vreg81,%vreg75,%vreg80
	%vreg82<def> = ADD %vreg81, %vreg77; GR32Bit:%vreg82,%vreg81,%vreg77
	%vreg83<def> = ADD %vreg82, %vreg79; GR32Bit:%vreg83,%vreg82,%vreg79
	%vreg84<def> = MUL %vreg83, %vreg72; GR32Bit:%vreg84,%vreg83,%vreg72
	%vreg67<def> = ADD %vreg71, %vreg84; GR32Bit:%vreg67,%vreg71,%vreg84
	%vreg85<def> = ADD %t5, %zero; GR32Bit:%vreg85
	%vreg87<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg87
	%vreg88<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg88
	%vreg89<def> = SRLI %vreg88, 12; GR32Bit:%vreg89,%vreg88
	%vreg90<def> = ADD %vreg87, %vreg89; GR32Bit:%vreg90,%vreg87,%vreg89
	%vreg91<def> = ADDI %zero, 20; GR32Bit:%vreg91
	%vreg92<def> = SRLI %t5, 22; GR32Bit:%vreg92
	%vreg93<def> = SRLI %t5, 12; GR32Bit:%vreg93
	%vreg94<def> = ANDI %vreg93, 15; GR32Bit:%vreg94,%vreg93
	%vreg95<def> = SRLI %t5, 6; GR32Bit:%vreg95
	%vreg96<def> = ANDI %vreg95, 63; GR32Bit:%vreg96,%vreg95
	%vreg97<def> = ADDI %zero, 832; GR32Bit:%vreg97
	%vreg98<def> = MUL %vreg92, %vreg97; GR32Bit:%vreg98,%vreg92,%vreg97
	%vreg99<def> = ADDI %zero, 52; GR32Bit:%vreg99
	%vreg100<def> = MUL %vreg94, %vreg99; GR32Bit:%vreg100,%vreg94,%vreg99
	%vreg101<def> = ADD %vreg100, %vreg96; GR32Bit:%vreg101,%vreg100,%vreg96
	%vreg102<def> = ADD %vreg101, %vreg98; GR32Bit:%vreg102,%vreg101,%vreg98
	%vreg103<def> = MUL %vreg102, %vreg91; GR32Bit:%vreg103,%vreg102,%vreg91
	%vreg86<def> = ADD %vreg90, %vreg103; GR32Bit:%vreg86,%vreg90,%vreg103
    Successors according to CFG: BB#1

*** Renumbered SlotIndexes 316-820 ***

*** Renumbered SlotIndexes 216-864 ***

*** Renumbered SlotIndexes 112-920 ***

*** Renumbered SlotIndexes 100-940 ***

*** Renumbered SlotIndexes 100-956 ***

*** Renumbered SlotIndexes 100-972 ***

*** Renumbered SlotIndexes 12-1020 ***
Creating pHyperOp bundles for CEs for bb0
  %vreg47<def> = ADD %t5, %zero; GR32Bit:%vreg47
starting at   %vreg28<def> = ADD %t5, %zero; GR32Bit:%vreg28
  %vreg66<def> = ADD %t5, %zero; GR32Bit:%vreg66
starting at   %vreg47<def> = ADD %t5, %zero; GR32Bit:%vreg47
  %vreg85<def> = ADD %t5, %zero; GR32Bit:%vreg85
starting at   %vreg66<def> = ADD %t5, %zero; GR32Bit:%vreg66
starting at   %vreg85<def> = ADD %t5, %zero; GR32Bit:%vreg85
After bundling, state of BB0:BB#0: derived from LLVM BB %po_calculation3.entry
	%vreg28<def> = ADD %t5, %zero; GR32Bit:%vreg28
	  * %vreg30<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg30
	  * %vreg31<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg31
	  * %vreg32<def> = SRLI %vreg31, 12; GR32Bit:%vreg32,%vreg31
	  * %vreg33<def> = ADD %vreg30, %vreg32; GR32Bit:%vreg33,%vreg30,%vreg32
	  * %vreg34<def> = ADDI %zero, 20; GR32Bit:%vreg34
	  * %vreg35<def> = SRLI %t5, 22; GR32Bit:%vreg35
	  * %vreg36<def> = SRLI %t5, 12; GR32Bit:%vreg36
	  * %vreg37<def> = ANDI %vreg36, 15; GR32Bit:%vreg37,%vreg36
	  * %vreg38<def> = SRLI %t5, 6; GR32Bit:%vreg38
	  * %vreg39<def> = ANDI %vreg38, 63; GR32Bit:%vreg39,%vreg38
	  * %vreg40<def> = ADDI %zero, 832; GR32Bit:%vreg40
	  * %vreg41<def> = MUL %vreg35, %vreg40; GR32Bit:%vreg41,%vreg35,%vreg40
	  * %vreg42<def> = ADDI %zero, 52; GR32Bit:%vreg42
	  * %vreg43<def> = MUL %vreg37, %vreg42; GR32Bit:%vreg43,%vreg37,%vreg42
	  * %vreg44<def> = ADD %vreg43, %vreg39; GR32Bit:%vreg44,%vreg43,%vreg39
	  * %vreg45<def> = ADD %vreg44, %vreg41; GR32Bit:%vreg45,%vreg44,%vreg41
	  * %vreg46<def> = MUL %vreg45, %vreg34; GR32Bit:%vreg46,%vreg45,%vreg34
	  * %vreg29<def> = ADD %vreg33, %vreg46; GR32Bit:%vreg29,%vreg33,%vreg46
	  * %vreg2<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg2
	  * SW %zero, %vreg2, 0; mem:ST4[%3] GR32Bit:%vreg2
	  * %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
	  * %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
	  * SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
	  * %vreg3<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg3
	  * SW %zero, %vreg3, 0; mem:ST4[%4] GR32Bit:%vreg3
	%vreg47<def> = ADD %t5, %zero; GR32Bit:%vreg47
	  * %vreg49<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg49
	  * %vreg50<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg50
	  * %vreg51<def> = SRLI %vreg50, 12; GR32Bit:%vreg51,%vreg50
	  * %vreg52<def> = ADD %vreg49, %vreg51; GR32Bit:%vreg52,%vreg49,%vreg51
	  * %vreg53<def> = ADDI %zero, 20; GR32Bit:%vreg53
	  * %vreg54<def> = SRLI %t5, 22; GR32Bit:%vreg54
	  * %vreg55<def> = SRLI %t5, 12; GR32Bit:%vreg55
	  * %vreg56<def> = ANDI %vreg55, 15; GR32Bit:%vreg56,%vreg55
	  * %vreg57<def> = SRLI %t5, 6; GR32Bit:%vreg57
	  * %vreg58<def> = ANDI %vreg57, 63; GR32Bit:%vreg58,%vreg57
	  * %vreg59<def> = ADDI %zero, 832; GR32Bit:%vreg59
	  * %vreg60<def> = MUL %vreg54, %vreg59; GR32Bit:%vreg60,%vreg54,%vreg59
	  * %vreg61<def> = ADDI %zero, 52; GR32Bit:%vreg61
	  * %vreg62<def> = MUL %vreg56, %vreg61; GR32Bit:%vreg62,%vreg56,%vreg61
	  * %vreg63<def> = ADD %vreg62, %vreg58; GR32Bit:%vreg63,%vreg62,%vreg58
	  * %vreg64<def> = ADD %vreg63, %vreg60; GR32Bit:%vreg64,%vreg63,%vreg60
	  * %vreg65<def> = MUL %vreg64, %vreg53; GR32Bit:%vreg65,%vreg64,%vreg53
	  * %vreg48<def> = ADD %vreg52, %vreg65; GR32Bit:%vreg48,%vreg52,%vreg65
	%vreg66<def> = ADD %t5, %zero; GR32Bit:%vreg66
	  * %vreg68<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg68
	  * %vreg69<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg69
	  * %vreg70<def> = SRLI %vreg69, 12; GR32Bit:%vreg70,%vreg69
	  * %vreg71<def> = ADD %vreg68, %vreg70; GR32Bit:%vreg71,%vreg68,%vreg70
	  * %vreg72<def> = ADDI %zero, 20; GR32Bit:%vreg72
	  * %vreg73<def> = SRLI %t5, 22; GR32Bit:%vreg73
	  * %vreg74<def> = SRLI %t5, 12; GR32Bit:%vreg74
	  * %vreg75<def> = ANDI %vreg74, 15; GR32Bit:%vreg75,%vreg74
	  * %vreg76<def> = SRLI %t5, 6; GR32Bit:%vreg76
	  * %vreg77<def> = ANDI %vreg76, 63; GR32Bit:%vreg77,%vreg76
	  * %vreg78<def> = ADDI %zero, 832; GR32Bit:%vreg78
	  * %vreg79<def> = MUL %vreg73, %vreg78; GR32Bit:%vreg79,%vreg73,%vreg78
	  * %vreg80<def> = ADDI %zero, 52; GR32Bit:%vreg80
	  * %vreg81<def> = MUL %vreg75, %vreg80; GR32Bit:%vreg81,%vreg75,%vreg80
	  * %vreg82<def> = ADD %vreg81, %vreg77; GR32Bit:%vreg82,%vreg81,%vreg77
	  * %vreg83<def> = ADD %vreg82, %vreg79; GR32Bit:%vreg83,%vreg82,%vreg79
	  * %vreg84<def> = MUL %vreg83, %vreg72; GR32Bit:%vreg84,%vreg83,%vreg72
	  * %vreg67<def> = ADD %vreg71, %vreg84; GR32Bit:%vreg67,%vreg71,%vreg84
	%vreg85<def> = ADD %t5, %zero; GR32Bit:%vreg85
	  * %vreg87<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg87
	  * %vreg88<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg88
	  * %vreg89<def> = SRLI %vreg88, 12; GR32Bit:%vreg89,%vreg88
	  * %vreg90<def> = ADD %vreg87, %vreg89; GR32Bit:%vreg90,%vreg87,%vreg89
	  * %vreg91<def> = ADDI %zero, 20; GR32Bit:%vreg91
	  * %vreg92<def> = SRLI %t5, 22; GR32Bit:%vreg92
	  * %vreg93<def> = SRLI %t5, 12; GR32Bit:%vreg93
	  * %vreg94<def> = ANDI %vreg93, 15; GR32Bit:%vreg94,%vreg93
	  * %vreg95<def> = SRLI %t5, 6; GR32Bit:%vreg95
	  * %vreg96<def> = ANDI %vreg95, 63; GR32Bit:%vreg96,%vreg95
	  * %vreg97<def> = ADDI %zero, 832; GR32Bit:%vreg97
	  * %vreg98<def> = MUL %vreg92, %vreg97; GR32Bit:%vreg98,%vreg92,%vreg97
	  * %vreg99<def> = ADDI %zero, 52; GR32Bit:%vreg99
	  * %vreg100<def> = MUL %vreg94, %vreg99; GR32Bit:%vreg100,%vreg94,%vreg99
	  * %vreg101<def> = ADD %vreg100, %vreg96; GR32Bit:%vreg101,%vreg100,%vreg96
	  * %vreg102<def> = ADD %vreg101, %vreg98; GR32Bit:%vreg102,%vreg101,%vreg98
	  * %vreg103<def> = MUL %vreg102, %vreg91; GR32Bit:%vreg103,%vreg102,%vreg91
	  * %vreg86<def> = ADD %vreg90, %vreg103; GR32Bit:%vreg86,%vreg90,%vreg103
    Successors according to CFG: BB#1

-------------
Starting new basic block BB#1
********** MI Scheduling **********
po_calculation3:BB#1 po_calculation3.for.cond
  From: JAL <BB#2>
    To: JAL <BB#2>
 Remaining: 4
Max Pressure: Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 0
Excess PSets: 
0 subtrees:
*** Final schedule for BB#1 ***

Partitioning instructions of the region into multiple CEs

*** Renumbered SlotIndexes 776-1032 ***

*** Renumbered SlotIndexes 788-1044 ***

*** Renumbered SlotIndexes 800-1056 ***

*** Renumbered SlotIndexes 812-1068 ***

*** Renumbered SlotIndexes 824-1080 ***

*** Renumbered SlotIndexes 836-1092 ***

*** Renumbered SlotIndexes 848-1104 ***

*** Renumbered SlotIndexes 860-1116 ***

*** Renumbered SlotIndexes 872-1128 ***

*** Renumbered SlotIndexes 884-1140 ***

*** Renumbered SlotIndexes 896-1152 ***

*** Renumbered SlotIndexes 908-1164 ***

*** Renumbered SlotIndexes 928-1176 ***

*** Renumbered SlotIndexes 940-1188 ***

*** Renumbered SlotIndexes 952-1200 ***

*** Renumbered SlotIndexes 964-1212 ***

*** Renumbered SlotIndexes 976-1224 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
********** MI Scheduling **********
po_calculation3:BB#1 po_calculation3.for.cond
  From: %vreg4<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg4
    To: BGT <BB#4>, %vreg5, %vreg6; GR32Bit:%vreg5,%vreg6
 Remaining: 0
Max Pressure: GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 2
Excess PSets: 
2 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 1
SU(0):   %vreg4<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
   val SU(1): Latency=5 Reg=%vreg4

SU(1):   %vreg5<def> = LW %vreg4, 0; mem:LD4[%3] GR32Bit:%vreg5,%vreg4
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 15
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg4
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg5

SU(2):   %vreg6<def> = ADDI %zero, 24; GR32Bit:%vreg6
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(4294967295): Latency=5 Reg=%vreg6

SU(0):   %vreg4<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
   val SU(1): Latency=5 Reg=%vreg4

SU(1):   %vreg5<def> = LW %vreg4, 0; mem:LD4[%3] GR32Bit:%vreg5,%vreg4
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 15
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg4
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg5

SU(2):   %vreg6<def> = ADDI %zero, 24; GR32Bit:%vreg6
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(4294967295): Latency=5 Reg=%vreg6

Pick node SU(2)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg6<def> = ADDI %zero, 24; GR32Bit:%vreg6
handleMove 764B -> 744B: %vreg6<def> = ADDI %zero, 24; GR32Bit:%vreg6
     %vreg6:	[764r,772r:0)  0@764r
        -->	[744r,772r:0)  0@744r
     zero:	EMPTY
        -->	EMPTY
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg4<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg4
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg5<def> = LW %vreg4, 0; mem:LD4[%3] GR32Bit:%vreg5,%vreg4
*** Final schedule for BB#1 ***
SU(2):   %vreg6<def> = ADDI %zero, 24; GR32Bit:%vreg6
SU(0):   %vreg4<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg4
SU(1):   %vreg5<def> = LW %vreg4, 0; mem:LD4[%3] GR32Bit:%vreg5,%vreg4

Partitioning instructions of the region into multiple CEs
instr:  %vreg6<def> = ADDI %zero, 24; GR32Bit:%vreg6
instr:  %vreg4<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg4
instr:  %vreg5<def> = LW %vreg4, 0; mem:LD4[%3] GR32Bit:%vreg5,%vreg4

*** Renumbered SlotIndexes 760-1312 ***

*** Renumbered SlotIndexes 772-1324 ***

*** Renumbered SlotIndexes 784-1336 ***

*** Renumbered SlotIndexes 796-1348 ***

*** Renumbered SlotIndexes 808-1360 ***

*** Renumbered SlotIndexes 820-1372 ***

*** Renumbered SlotIndexes 832-1384 ***

*** Renumbered SlotIndexes 844-1396 ***

*** Renumbered SlotIndexes 856-1408 ***

*** Renumbered SlotIndexes 884-1420 ***

*** Renumbered SlotIndexes 896-1432 ***

*** Renumbered SlotIndexes 908-1444 ***

*** Renumbered SlotIndexes 920-1456 ***

*** Renumbered SlotIndexes 932-1468 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs

renaming register of operand that belongs to ce 1 but was defined in0
%vreg5<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg5<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg5<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg6<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg6<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg6<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg5
renaming register of operand that belongs to ce 1 but was defined in0
%vreg6
renaming register of operand that belongs to ce 2 but was defined in0
%vreg5
renaming register of operand that belongs to ce 2 but was defined in0
%vreg6
renaming register of operand that belongs to ce 3 but was defined in0
%vreg5
renaming register of operand that belongs to ce 3 but was defined in0
%vreg6After Shuffling regions of basic block, state of BB#1:
BB#1: derived from LLVM BB %po_calculation3.for.cond
    Predecessors according to CFG: BB#0 BB#3
	%vreg6<def> = ADDI %zero, 24; GR32Bit:%vreg6
	%vreg4<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg4
	%vreg5<def> = LW %vreg4, 0; mem:LD4[%3] GR32Bit:%vreg5,%vreg4
	%vreg122<def> = LUI 1; GR32Bit:%vreg122
	WRITEPM %vreg122, %vreg5, 0; GR32Bit:%vreg122,%vreg5
	%vreg124<def> = LUI 2; GR32Bit:%vreg124
	WRITEPM %vreg124, %vreg5, 0; GR32Bit:%vreg124,%vreg5
	%vreg126<def> = LUI 3; GR32Bit:%vreg126
	WRITEPM %vreg126, %vreg5, 0; GR32Bit:%vreg126,%vreg5
	WRITEPM %vreg122, %vreg6, 4; GR32Bit:%vreg122,%vreg6
	WRITEPM %vreg124, %vreg6, 4; GR32Bit:%vreg124,%vreg6
	WRITEPM %vreg126, %vreg6, 4; GR32Bit:%vreg126,%vreg6
	BGT <BB#4>, %vreg5, %vreg6; GR32Bit:%vreg5,%vreg6
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg104<def> = LUI 1; GR32Bit:%vreg104
	WRITEPM %vreg104, %vreg104, 192; GR32Bit:%vreg104
	%vreg105<def> = LUI 0; GR32Bit:%vreg105
	%vreg106<def> = DREADPM %vreg105, 188; GR32Bit:%vreg106,%vreg105
	%vreg116<def> = LUI 2; GR32Bit:%vreg116
	WRITEPM %vreg116, %vreg116, 176; GR32Bit:%vreg116
	%vreg117<def> = LUI 0; GR32Bit:%vreg117
	%vreg118<def> = DREADPM %vreg117, 168; GR32Bit:%vreg118,%vreg117
	JAL <BB#2>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg123<def> = LUI 1; GR32Bit:%vreg123
	%vreg128<def> = DREADPM %vreg123, 0; GR32Bit:%vreg128,%vreg123
	%vreg131<def> = DREADPM %vreg123, 4; GR32Bit:%vreg131,%vreg123
	BGT <BB#4>, %vreg128, %vreg131; GR32Bit:%vreg128,%vreg131
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg107<def> = LUI 0; GR32Bit:%vreg107
	WRITEPM %vreg107, %vreg107, 188; GR32Bit:%vreg107
	%vreg108<def> = LUI 1; GR32Bit:%vreg108
	%vreg109<def> = DREADPM %vreg108, 192; GR32Bit:%vreg109,%vreg108
	JAL <BB#2>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg125<def> = LUI 2; GR32Bit:%vreg125
	%vreg129<def> = DREADPM %vreg125, 0; GR32Bit:%vreg129,%vreg125
	%vreg132<def> = DREADPM %vreg125, 4; GR32Bit:%vreg132,%vreg125
	BGT <BB#4>, %vreg129, %vreg132; GR32Bit:%vreg129,%vreg132
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg110<def> = LUI 3; GR32Bit:%vreg110
	WRITEPM %vreg110, %vreg110, 184; GR32Bit:%vreg110
	%vreg111<def> = LUI 2; GR32Bit:%vreg111
	%vreg112<def> = DREADPM %vreg111, 180; GR32Bit:%vreg112,%vreg111
	%vreg119<def> = LUI 0; GR32Bit:%vreg119
	WRITEPM %vreg119, %vreg119, 168; GR32Bit:%vreg119
	%vreg120<def> = LUI 2; GR32Bit:%vreg120
	%vreg121<def> = DREADPM %vreg120, 176; GR32Bit:%vreg121,%vreg120
	JAL <BB#2>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg127<def> = LUI 3; GR32Bit:%vreg127
	%vreg130<def> = DREADPM %vreg127, 0; GR32Bit:%vreg130,%vreg127
	%vreg133<def> = DREADPM %vreg127, 4; GR32Bit:%vreg133,%vreg127
	BGT <BB#4>, %vreg130, %vreg133; GR32Bit:%vreg130,%vreg133
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg113<def> = LUI 2; GR32Bit:%vreg113
	WRITEPM %vreg113, %vreg113, 180; GR32Bit:%vreg113
	%vreg114<def> = LUI 3; GR32Bit:%vreg114
	%vreg115<def> = DREADPM %vreg114, 184; GR32Bit:%vreg115,%vreg114
	JAL <BB#2>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#2(124) BB#4(4)

*** Renumbered SlotIndexes 804-1524 ***

*** Renumbered SlotIndexes 804-1540 ***

*** Renumbered SlotIndexes 804-1556 ***

*** Renumbered SlotIndexes 804-1572 ***

*** Renumbered SlotIndexes 804-1588 ***

*** Renumbered SlotIndexes 804-1604 ***

*** Renumbered SlotIndexes 804-1620 ***

*** Renumbered SlotIndexes 804-1636 ***

*** Renumbered SlotIndexes 780-1652 ***

*** Renumbered SlotIndexes 780-1668 ***

*** Renumbered SlotIndexes 780-1684 ***

*** Renumbered SlotIndexes 780-1700 ***

*** Renumbered SlotIndexes 780-1716 ***

*** Renumbered SlotIndexes 780-1732 ***

*** Renumbered SlotIndexes 760-1752 ***

*** Renumbered SlotIndexes 760-1768 ***

*** Renumbered SlotIndexes 760-1784 ***

*** Renumbered SlotIndexes 760-1800 ***

*** Renumbered SlotIndexes 760-1816 ***

*** Renumbered SlotIndexes 760-1832 ***

*** Renumbered SlotIndexes 760-1848 ***

*** Renumbered SlotIndexes 760-1864 ***

*** Renumbered SlotIndexes 760-1880 ***

*** Renumbered SlotIndexes 760-1896 ***

*** Renumbered SlotIndexes 760-1912 ***
Creating pHyperOp bundles for CEs for bb1
  %vreg123<def> = LUI 1; GR32Bit:%vreg123
starting at   %vreg6<def> = ADDI %zero, 24; GR32Bit:%vreg6
  %vreg125<def> = LUI 2; GR32Bit:%vreg125
starting at   %vreg123<def> = LUI 1; GR32Bit:%vreg123
  %vreg127<def> = LUI 3; GR32Bit:%vreg127
starting at   %vreg125<def> = LUI 2; GR32Bit:%vreg125
starting at   %vreg127<def> = LUI 3; GR32Bit:%vreg127
After bundling, state of BB1:BB#1: derived from LLVM BB %po_calculation3.for.cond
    Predecessors according to CFG: BB#0 BB#3
	%vreg6<def> = ADDI %zero, 24; GR32Bit:%vreg6
	  * %vreg4<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg4
	  * %vreg5<def> = LW %vreg4, 0; mem:LD4[%3] GR32Bit:%vreg5,%vreg4
	  * %vreg122<def> = LUI 1; GR32Bit:%vreg122
	  * WRITEPM %vreg122, %vreg5, 0; GR32Bit:%vreg122,%vreg5
	  * %vreg124<def> = LUI 2; GR32Bit:%vreg124
	  * WRITEPM %vreg124, %vreg5, 0; GR32Bit:%vreg124,%vreg5
	  * %vreg126<def> = LUI 3; GR32Bit:%vreg126
	  * WRITEPM %vreg126, %vreg5, 0; GR32Bit:%vreg126,%vreg5
	  * WRITEPM %vreg122, %vreg6, 4; GR32Bit:%vreg122,%vreg6
	  * WRITEPM %vreg124, %vreg6, 4; GR32Bit:%vreg124,%vreg6
	  * WRITEPM %vreg126, %vreg6, 4; GR32Bit:%vreg126,%vreg6
	  * BGT <BB#4>, %vreg5, %vreg6; GR32Bit:%vreg5,%vreg6
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * %vreg104<def> = LUI 1; GR32Bit:%vreg104
	  * WRITEPM %vreg104, %vreg104, 192; GR32Bit:%vreg104
	  * %vreg105<def> = LUI 0; GR32Bit:%vreg105
	  * %vreg106<def> = DREADPM %vreg105, 188; GR32Bit:%vreg106,%vreg105
	  * %vreg116<def> = LUI 2; GR32Bit:%vreg116
	  * WRITEPM %vreg116, %vreg116, 176; GR32Bit:%vreg116
	  * %vreg117<def> = LUI 0; GR32Bit:%vreg117
	  * %vreg118<def> = DREADPM %vreg117, 168; GR32Bit:%vreg118,%vreg117
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg123<def> = LUI 1; GR32Bit:%vreg123
	  * %vreg128<def> = DREADPM %vreg123, 0; GR32Bit:%vreg128,%vreg123
	  * %vreg131<def> = DREADPM %vreg123, 4; GR32Bit:%vreg131,%vreg123
	  * BGT <BB#4>, %vreg128, %vreg131; GR32Bit:%vreg128,%vreg131
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * %vreg107<def> = LUI 0; GR32Bit:%vreg107
	  * WRITEPM %vreg107, %vreg107, 188; GR32Bit:%vreg107
	  * %vreg108<def> = LUI 1; GR32Bit:%vreg108
	  * %vreg109<def> = DREADPM %vreg108, 192; GR32Bit:%vreg109,%vreg108
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg125<def> = LUI 2; GR32Bit:%vreg125
	  * %vreg129<def> = DREADPM %vreg125, 0; GR32Bit:%vreg129,%vreg125
	  * %vreg132<def> = DREADPM %vreg125, 4; GR32Bit:%vreg132,%vreg125
	  * BGT <BB#4>, %vreg129, %vreg132; GR32Bit:%vreg129,%vreg132
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * %vreg110<def> = LUI 3; GR32Bit:%vreg110
	  * WRITEPM %vreg110, %vreg110, 184; GR32Bit:%vreg110
	  * %vreg111<def> = LUI 2; GR32Bit:%vreg111
	  * %vreg112<def> = DREADPM %vreg111, 180; GR32Bit:%vreg112,%vreg111
	  * %vreg119<def> = LUI 0; GR32Bit:%vreg119
	  * WRITEPM %vreg119, %vreg119, 168; GR32Bit:%vreg119
	  * %vreg120<def> = LUI 2; GR32Bit:%vreg120
	  * %vreg121<def> = DREADPM %vreg120, 176; GR32Bit:%vreg121,%vreg120
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg127<def> = LUI 3; GR32Bit:%vreg127
	  * %vreg130<def> = DREADPM %vreg127, 0; GR32Bit:%vreg130,%vreg127
	  * %vreg133<def> = DREADPM %vreg127, 4; GR32Bit:%vreg133,%vreg127
	  * BGT <BB#4>, %vreg130, %vreg133; GR32Bit:%vreg130,%vreg133
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * %vreg113<def> = LUI 2; GR32Bit:%vreg113
	  * WRITEPM %vreg113, %vreg113, 180; GR32Bit:%vreg113
	  * %vreg114<def> = LUI 3; GR32Bit:%vreg114
	  * %vreg115<def> = DREADPM %vreg114, 184; GR32Bit:%vreg115,%vreg114
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#2(124) BB#4(4)

-------------
Starting new basic block BB#2
********** MI Scheduling **********
po_calculation3:BB#2 po_calculation3.for.body
  From: %vreg13<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg13
    To: End Remaining: 0
Max Pressure: FP32Bit=2
GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 2
GR32BitLimit 32 Actual 2
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 0
  SU(5) in tree 0
  SU(6) in tree 0
  SU(7) in tree 0
  SU(8) in tree 0
  SU(9) in tree 0
  SU(10) in tree 0
  SU(11) in tree 0
  SU(12) in tree 0
SU(0):   %vreg13<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 54
  Successors:
   val SU(1): Latency=5 Reg=%vreg13

SU(1):   %vreg14<def> = LW %vreg13, 0; mem:LD4[%3] GR32Bit:%vreg14,%vreg13
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 49
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg13
  Successors:
   val SU(4): Latency=15 Reg=%vreg14

SU(2):   %vreg15<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 49
  Successors:
   val SU(3): Latency=5 Reg=%vreg15

SU(3):   %vreg16<def> = LW %vreg15, 0; mem:LD4[%2] GR32Bit:%vreg16,%vreg15
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 44
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg15
  Successors:
   val SU(5): Latency=15 Reg=%vreg16

SU(4):   %vreg17<def> = SLLI %vreg14, 2; GR32Bit:%vreg17,%vreg14
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 34
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg14
  Successors:
   val SU(5): Latency=5 Reg=%vreg17

SU(5):   %vreg18<def> = ADD %vreg17, %vreg16; GR32Bit:%vreg18,%vreg17,%vreg16
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 29
  Predecessors:
   val SU(4): Latency=5 Reg=%vreg17
   val SU(3): Latency=15 Reg=%vreg16
  Successors:
   val SU(6): Latency=5 Reg=%vreg18

SU(6):   %vreg19<def> = FLW %vreg18, 0; mem:LD4[%9] FP32Bit:%vreg19 GR32Bit:%vreg18
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 30
  Height             : 24
  Predecessors:
   val SU(5): Latency=5 Reg=%vreg18
  Successors:
   val SU(10): Latency=15 Reg=%vreg19
   ch  SU(12): Latency=0

SU(7):   %vreg20<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg20
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 34
  Successors:
   val SU(12): Latency=5 Reg=%vreg20
   val SU(8): Latency=5 Reg=%vreg20

SU(8):   %vreg21<def> = LW %vreg20, 0; mem:LD4[%4] GR32Bit:%vreg21,%vreg20
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 29
  Predecessors:
   val SU(7): Latency=5 Reg=%vreg20
  Successors:
   val SU(9): Latency=15 Reg=%vreg21
   ch  SU(12): Latency=0

SU(9):   %vreg22<def> = FCVT_S_W_RDY %vreg21; FP32Bit:%vreg22 GR32Bit:%vreg21
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 14
  Predecessors:
   val SU(8): Latency=15 Reg=%vreg21
  Successors:
   val SU(10): Latency=5 Reg=%vreg22

SU(10):   %vreg23<def> = FADD_S_RDY %vreg19, %vreg22; FP32Bit:%vreg23,%vreg19,%vreg22
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 45
  Height             : 9
  Predecessors:
   val SU(6): Latency=15 Reg=%vreg19
   val SU(9): Latency=5 Reg=%vreg22
  Successors:
   val SU(11): Latency=5 Reg=%vreg23

SU(11):   %vreg24<def> = FCVT_W_S_RTZ %vreg23; GR32Bit:%vreg24 FP32Bit:%vreg23
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 50
  Height             : 4
  Predecessors:
   val SU(10): Latency=5 Reg=%vreg23
  Successors:
   val SU(12): Latency=4 Reg=%vreg24

SU(12):   SW %vreg24, %vreg20, 0; mem:ST4[%4] GR32Bit:%vreg24,%vreg20
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 54
  Height             : 0
  Predecessors:
   val SU(11): Latency=4 Reg=%vreg24
   val SU(7): Latency=5 Reg=%vreg20
   ch  SU(8): Latency=0
   ch  SU(6): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg13<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 54
  Successors:
   val SU(1): Latency=5 Reg=%vreg13

SU(1):   %vreg14<def> = LW %vreg13, 0; mem:LD4[%3] GR32Bit:%vreg14,%vreg13
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 49
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg13
  Successors:
   val SU(4): Latency=15 Reg=%vreg14

SU(2):   %vreg15<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 49
  Successors:
   val SU(3): Latency=5 Reg=%vreg15

SU(3):   %vreg16<def> = LW %vreg15, 0; mem:LD4[%2] GR32Bit:%vreg16,%vreg15
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 44
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg15
  Successors:
   val SU(5): Latency=15 Reg=%vreg16

SU(4):   %vreg17<def> = SLLI %vreg14, 2; GR32Bit:%vreg17,%vreg14
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 34
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg14
  Successors:
   val SU(5): Latency=5 Reg=%vreg17

SU(5):   %vreg18<def> = ADD %vreg17, %vreg16; GR32Bit:%vreg18,%vreg17,%vreg16
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 29
  Predecessors:
   val SU(4): Latency=5 Reg=%vreg17
   val SU(3): Latency=15 Reg=%vreg16
  Successors:
   val SU(6): Latency=5 Reg=%vreg18

SU(6):   %vreg19<def> = FLW %vreg18, 0; mem:LD4[%9] FP32Bit:%vreg19 GR32Bit:%vreg18
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 30
  Height             : 24
  Predecessors:
   val SU(5): Latency=5 Reg=%vreg18
  Successors:
   val SU(10): Latency=15 Reg=%vreg19
   ch  SU(12): Latency=0

SU(7):   %vreg20<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg20
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 34
  Successors:
   val SU(12): Latency=5 Reg=%vreg20
   val SU(8): Latency=5 Reg=%vreg20

SU(8):   %vreg21<def> = LW %vreg20, 0; mem:LD4[%4] GR32Bit:%vreg21,%vreg20
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 29
  Predecessors:
   val SU(7): Latency=5 Reg=%vreg20
  Successors:
   val SU(9): Latency=15 Reg=%vreg21
   ch  SU(12): Latency=0

SU(9):   %vreg22<def> = FCVT_S_W_RDY %vreg21; FP32Bit:%vreg22 GR32Bit:%vreg21
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 14
  Predecessors:
   val SU(8): Latency=15 Reg=%vreg21
  Successors:
   val SU(10): Latency=5 Reg=%vreg22

SU(10):   %vreg23<def> = FADD_S_RDY %vreg19, %vreg22; FP32Bit:%vreg23,%vreg19,%vreg22
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 45
  Height             : 9
  Predecessors:
   val SU(6): Latency=15 Reg=%vreg19
   val SU(9): Latency=5 Reg=%vreg22
  Successors:
   val SU(11): Latency=5 Reg=%vreg23

SU(11):   %vreg24<def> = FCVT_W_S_RTZ %vreg23; GR32Bit:%vreg24 FP32Bit:%vreg23
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 50
  Height             : 4
  Predecessors:
   val SU(10): Latency=5 Reg=%vreg23
  Successors:
   val SU(12): Latency=4 Reg=%vreg24

SU(12):   SW %vreg24, %vreg20, 0; mem:ST4[%4] GR32Bit:%vreg24,%vreg20
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 54
  Height             : 0
  Predecessors:
   val SU(11): Latency=4 Reg=%vreg24
   val SU(7): Latency=5 Reg=%vreg20
   ch  SU(8): Latency=0
   ch  SU(6): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(7)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg20<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg20
handleMove 1744B -> 1684B: %vreg20<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg20
     %vreg20:	[1744r,1784r:0)  0@1744r
        -->	[1684r,1784r:0)  0@1684r
     t5:	EMPTY
        -->	EMPTY
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg13<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg13
Pick node SU(2)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg15<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg15
handleMove 1704B -> 1692B: %vreg15<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg15
     %vreg15:	[1704r,1712r:0)  0@1704r
        -->	[1692r,1712r:0)  0@1692r
     t5:	EMPTY
        -->	EMPTY
Pick node SU(8)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg21<def> = LW %vreg20, 0; mem:LD4[%4] GR32Bit:%vreg21,%vreg20

*** Renumbered SlotIndexes 1692-1924 ***
handleMove 1764B -> 1700B: %vreg21<def> = LW %vreg20, 0; mem:LD4[%4] GR32Bit:%vreg21,%vreg20
     %vreg21:	[1764r,1772r:0)  0@1764r
        -->	[1700r,1772r:0)  0@1700r
     %vreg20:	[1684r,1796r:0)  0@1684r
        -->	[1684r,1796r:0)  0@1684r
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg14<def> = LW %vreg13, 0; mem:LD4[%3] GR32Bit:%vreg14,%vreg13
Pick node SU(3)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg16<def> = LW %vreg15, 0; mem:LD4[%2] GR32Bit:%vreg16,%vreg15
Pick node SU(9)  ILP: 3 / 21 = 0.142857 Tree: 0 @0
Scheduling %vreg22<def> = FCVT_S_W_RDY %vreg21; FP32Bit:%vreg22 GR32Bit:%vreg21
handleMove 1772B -> 1728B: %vreg22<def> = FCVT_S_W_RDY %vreg21; FP32Bit:%vreg22 GR32Bit:%vreg21
     %vreg22:	[1772r,1780r:0)  0@1772r
        -->	[1728r,1780r:0)  0@1728r
     %vreg21:	[1700r,1772r:0)  0@1700r
        -->	[1700r,1728r:0)  0@1700r
Pick node SU(4)  ILP: 3 / 21 = 0.142857 Tree: 0 @0
Scheduling %vreg17<def> = SLLI %vreg14, 2; GR32Bit:%vreg17,%vreg14
Pick node SU(5)  ILP: 6 / 26 = 0.230769 Tree: 0 @0
Scheduling %vreg18<def> = ADD %vreg17, %vreg16; GR32Bit:%vreg18,%vreg17,%vreg16
Pick node SU(6)  ILP: 7 / 31 = 0.225806 Tree: 0 @0
Scheduling %vreg19<def> = FLW %vreg18, 0; mem:LD4[%9] FP32Bit:%vreg19 GR32Bit:%vreg18
Pick node SU(10)  ILP: 11 / 46 = 0.23913 Tree: 0 @0
Scheduling %vreg23<def> = FADD_S_RDY %vreg19, %vreg22; FP32Bit:%vreg23,%vreg19,%vreg22
Pick node SU(11)  ILP: 12 / 51 = 0.235294 Tree: 0 @0
Scheduling %vreg24<def> = FCVT_W_S_RTZ %vreg23; GR32Bit:%vreg24 FP32Bit:%vreg23
Pick node SU(12)  ILP: 13 / 55 = 0.236364 Tree: 0 @0
Scheduling SW %vreg24, %vreg20, 0; mem:ST4[%4] GR32Bit:%vreg24,%vreg20
*** Final schedule for BB#2 ***
SU(7):   %vreg20<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg20
SU(0):   %vreg13<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg13
SU(2):   %vreg15<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg15
SU(8):   %vreg21<def> = LW %vreg20, 0; mem:LD4[%4] GR32Bit:%vreg21,%vreg20
SU(1):   %vreg14<def> = LW %vreg13, 0; mem:LD4[%3] GR32Bit:%vreg14,%vreg13
SU(3):   %vreg16<def> = LW %vreg15, 0; mem:LD4[%2] GR32Bit:%vreg16,%vreg15
SU(9):   %vreg22<def> = FCVT_S_W_RDY %vreg21; FP32Bit:%vreg22 GR32Bit:%vreg21
SU(4):   %vreg17<def> = SLLI %vreg14, 2; GR32Bit:%vreg17,%vreg14
SU(5):   %vreg18<def> = ADD %vreg17, %vreg16; GR32Bit:%vreg18,%vreg17,%vreg16
SU(6):   %vreg19<def> = FLW %vreg18, 0; mem:LD4[%9] FP32Bit:%vreg19 GR32Bit:%vreg18
SU(10):   %vreg23<def> = FADD_S_RDY %vreg19, %vreg22; FP32Bit:%vreg23,%vreg19,%vreg22
SU(11):   %vreg24<def> = FCVT_W_S_RTZ %vreg23; GR32Bit:%vreg24 FP32Bit:%vreg23
SU(12):   SW %vreg24, %vreg20, 0; mem:ST4[%4] GR32Bit:%vreg24,%vreg20

Partitioning instructions of the region into multiple CEs
instr:  %vreg20<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg20
instr:  %vreg13<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg13
instr:  %vreg15<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg15
instr:  %vreg21<def> = LW %vreg20, 0; mem:LD4[%4] GR32Bit:%vreg21,%vreg20
instr:  %vreg14<def> = LW %vreg13, 0; mem:LD4[%3] GR32Bit:%vreg14,%vreg13
instr:  %vreg16<def> = LW %vreg15, 0; mem:LD4[%2] GR32Bit:%vreg16,%vreg15
instr:  %vreg22<def> = FCVT_S_W_RDY %vreg21; FP32Bit:%vreg22 GR32Bit:%vreg21
instr:  %vreg17<def> = SLLI %vreg14, 2; GR32Bit:%vreg17,%vreg14
instr:  %vreg18<def> = ADD %vreg17, %vreg16; GR32Bit:%vreg18,%vreg17,%vreg16
instr:  %vreg19<def> = FLW %vreg18, 0; mem:LD4[%9] FP32Bit:%vreg19 GR32Bit:%vreg18
instr:  %vreg23<def> = FADD_S_RDY %vreg19, %vreg22; FP32Bit:%vreg23,%vreg19,%vreg22
instr:  %vreg24<def> = FCVT_W_S_RTZ %vreg23; GR32Bit:%vreg24 FP32Bit:%vreg23
instr:  SW %vreg24, %vreg20, 0; mem:ST4[%4] GR32Bit:%vreg24,%vreg20
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
After Shuffling regions of basic block, state of BB#2:
BB#2: derived from LLVM BB %po_calculation3.for.body
    Predecessors according to CFG: BB#1
	%vreg20<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg20
	%vreg13<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg13
	%vreg15<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg15
	%vreg21<def> = LW %vreg20, 0; mem:LD4[%4] GR32Bit:%vreg21,%vreg20
	%vreg14<def> = LW %vreg13, 0; mem:LD4[%3] GR32Bit:%vreg14,%vreg13
	%vreg16<def> = LW %vreg15, 0; mem:LD4[%2] GR32Bit:%vreg16,%vreg15
	%vreg22<def> = FCVT_S_W_RDY %vreg21; FP32Bit:%vreg22 GR32Bit:%vreg21
	%vreg17<def> = SLLI %vreg14, 2; GR32Bit:%vreg17,%vreg14
	%vreg18<def> = ADD %vreg17, %vreg16; GR32Bit:%vreg18,%vreg17,%vreg16
	%vreg19<def> = FLW %vreg18, 0; mem:LD4[%9] FP32Bit:%vreg19 GR32Bit:%vreg18
	%vreg23<def> = FADD_S_RDY %vreg19, %vreg22; FP32Bit:%vreg23,%vreg19,%vreg22
	%vreg24<def> = FCVT_W_S_RTZ %vreg23; GR32Bit:%vreg24 FP32Bit:%vreg23
	SW %vreg24, %vreg20, 0; mem:ST4[%4] GR32Bit:%vreg24,%vreg20
    Successors according to CFG: BB#3
Creating pHyperOp bundles for CEs for bb2
starting at   %vreg20<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg20

*** Renumbered SlotIndexes 1684-1948 ***
starting at   %zero<def> = ADDI %zero, 0
starting at   %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 1696-1960 ***
starting at   %zero<def> = ADDI %zero, 0
After bundling, state of BB2:BB#2: derived from LLVM BB %po_calculation3.for.body
    Predecessors according to CFG: BB#1
	%vreg20<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg20
	  * %vreg13<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg13
	  * %vreg15<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg15
	  * %vreg21<def> = LW %vreg20, 0; mem:LD4[%4] GR32Bit:%vreg21,%vreg20
	  * %vreg14<def> = LW %vreg13, 0; mem:LD4[%3] GR32Bit:%vreg14,%vreg13
	  * %vreg16<def> = LW %vreg15, 0; mem:LD4[%2] GR32Bit:%vreg16,%vreg15
	  * %vreg22<def> = FCVT_S_W_RDY %vreg21; FP32Bit:%vreg22 GR32Bit:%vreg21
	  * %vreg17<def> = SLLI %vreg14, 2; GR32Bit:%vreg17,%vreg14
	  * %vreg18<def> = ADD %vreg17, %vreg16; GR32Bit:%vreg18,%vreg17,%vreg16
	  * %vreg19<def> = FLW %vreg18, 0; mem:LD4[%9] FP32Bit:%vreg19 GR32Bit:%vreg18
	  * %vreg23<def> = FADD_S_RDY %vreg19, %vreg22; FP32Bit:%vreg23,%vreg19,%vreg22
	  * %vreg24<def> = FCVT_W_S_RTZ %vreg23; GR32Bit:%vreg24 FP32Bit:%vreg23
	  * SW %vreg24, %vreg20, 0; mem:ST4[%4] GR32Bit:%vreg24,%vreg20
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#3

-------------
Starting new basic block BB#3
********** MI Scheduling **********
po_calculation3:BB#3 po_calculation3.for.inc
  From: %vreg25<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg25
    To: JAL <BB#1>
 Remaining: 0
Max Pressure: GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 2
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
SU(0):   %vreg25<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 24
  Successors:
   val SU(3): Latency=5 Reg=%vreg25
   val SU(1): Latency=5 Reg=%vreg25

SU(1):   %vreg26<def> = LW %vreg25, 0; mem:LD4[%3] GR32Bit:%vreg26,%vreg25
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 19
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg25
  Successors:
   val SU(2): Latency=15 Reg=%vreg26
   ch  SU(3): Latency=0

SU(2):   %vreg27<def> = ADDI %vreg26, 1; GR32Bit:%vreg27,%vreg26
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 4
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg26
  Successors:
   val SU(3): Latency=4 Reg=%vreg27

SU(3):   SW %vreg27, %vreg25, 0; mem:ST4[%3] GR32Bit:%vreg27,%vreg25
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 24
  Height             : 0
  Predecessors:
   val SU(2): Latency=4 Reg=%vreg27
   val SU(0): Latency=5 Reg=%vreg25
   ch  SU(1): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg25<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 24
  Successors:
   val SU(3): Latency=5 Reg=%vreg25
   val SU(1): Latency=5 Reg=%vreg25

SU(1):   %vreg26<def> = LW %vreg25, 0; mem:LD4[%3] GR32Bit:%vreg26,%vreg25
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 19
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg25
  Successors:
   val SU(2): Latency=15 Reg=%vreg26
   ch  SU(3): Latency=0

SU(2):   %vreg27<def> = ADDI %vreg26, 1; GR32Bit:%vreg27,%vreg26
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 4
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg26
  Successors:
   val SU(3): Latency=4 Reg=%vreg27

SU(3):   SW %vreg27, %vreg25, 0; mem:ST4[%3] GR32Bit:%vreg27,%vreg25
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 24
  Height             : 0
  Predecessors:
   val SU(2): Latency=4 Reg=%vreg27
   val SU(0): Latency=5 Reg=%vreg25
   ch  SU(1): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg25<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg25
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg26<def> = LW %vreg25, 0; mem:LD4[%3] GR32Bit:%vreg26,%vreg25
Pick node SU(2)  ILP: 3 / 21 = 0.142857 Tree: 0 @0
Scheduling %vreg27<def> = ADDI %vreg26, 1; GR32Bit:%vreg27,%vreg26
Pick node SU(3)  ILP: 4 / 25 = 0.16 Tree: 0 @0
Scheduling SW %vreg27, %vreg25, 0; mem:ST4[%3] GR32Bit:%vreg27,%vreg25
*** Final schedule for BB#3 ***
SU(0):   %vreg25<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg25
SU(1):   %vreg26<def> = LW %vreg25, 0; mem:LD4[%3] GR32Bit:%vreg26,%vreg25
SU(2):   %vreg27<def> = ADDI %vreg26, 1; GR32Bit:%vreg27,%vreg26
SU(3):   SW %vreg27, %vreg25, 0; mem:ST4[%3] GR32Bit:%vreg27,%vreg25

Partitioning instructions of the region into multiple CEs
instr:  %vreg25<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg25
instr:  %vreg26<def> = LW %vreg25, 0; mem:LD4[%3] GR32Bit:%vreg26,%vreg25
instr:  %vreg27<def> = ADDI %vreg26, 1; GR32Bit:%vreg27,%vreg26
instr:  SW %vreg27, %vreg25, 0; mem:ST4[%3] GR32Bit:%vreg27,%vreg25

*** Renumbered SlotIndexes 1884-1972 ***

*** Renumbered SlotIndexes 1896-1984 ***

*** Renumbered SlotIndexes 1908-1996 ***

*** Renumbered SlotIndexes 1920-2008 ***

*** Renumbered SlotIndexes 1932-2020 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
After Shuffling regions of basic block, state of BB#3:
BB#3: derived from LLVM BB %po_calculation3.for.inc
    Predecessors according to CFG: BB#2
	%vreg25<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg25
	%vreg26<def> = LW %vreg25, 0; mem:LD4[%3] GR32Bit:%vreg26,%vreg25
	%vreg27<def> = ADDI %vreg26, 1; GR32Bit:%vreg27,%vreg26
	SW %vreg27, %vreg25, 0; mem:ST4[%3] GR32Bit:%vreg27,%vreg25
	JAL <BB#1>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#1>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#1>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#1>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#1

*** Renumbered SlotIndexes 1892-2052 ***

*** Renumbered SlotIndexes 1884-2076 ***

*** Renumbered SlotIndexes 1880-2088 ***
Creating pHyperOp bundles for CEs for bb3
  JAL <BB#1>
starting at   %vreg25<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg25
  JAL <BB#1>
starting at   JAL <BB#1>
  JAL <BB#1>
starting at   JAL <BB#1>
starting at   JAL <BB#1>
After bundling, state of BB3:BB#3: derived from LLVM BB %po_calculation3.for.inc
    Predecessors according to CFG: BB#2
	%vreg25<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg25
	  * %vreg26<def> = LW %vreg25, 0; mem:LD4[%3] GR32Bit:%vreg26,%vreg25
	  * %vreg27<def> = ADDI %vreg26, 1; GR32Bit:%vreg27,%vreg26
	  * SW %vreg27, %vreg25, 0; mem:ST4[%3] GR32Bit:%vreg27,%vreg25
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#1

-------------
Starting new basic block BB#4
********** MI Scheduling **********
po_calculation3:BB#4 po_calculation3.for.end
  From: %vreg7<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg7
    To: End Remaining: 0
Max Pressure: FP32Bit=1
GR32Bit=3
Live In: 
Live Out: 
FP32BitLimit 32 Actual 1
GR32BitLimit 32 Actual 3
Excess PSets: 
2 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 0
  SU(5) in tree 1
  SU(6) in tree 1
  SU(7) in tree 1
SU(0):   %vreg7<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg7
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
   val SU(4): Latency=5 Reg=%vreg7
   val SU(1): Latency=5 Reg=%vreg7

SU(1):   %vreg8<def> = LW %vreg7, 0; mem:LD4[%4] GR32Bit:%vreg8,%vreg7
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 24
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg7
  Successors:
   val SU(3): Latency=15 Reg=%vreg8
   ch  SU(4): Latency=0

SU(2):   %vreg9<def> = ADDI %zero, 25; GR32Bit:%vreg9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
   val SU(3): Latency=5 Reg=%vreg9

SU(3):   %vreg10<def> = MUL %vreg9, %vreg8; GR32Bit:%vreg10,%vreg9,%vreg8
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 9
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg8
   val SU(2): Latency=5 Reg=%vreg9
  Successors:
   val SU(5): Latency=5 Reg=%vreg10
   val SU(4): Latency=4 Reg=%vreg10

SU(4):   SW %vreg10, %vreg7, 0; mem:ST4[%4] GR32Bit:%vreg10,%vreg7
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 24
  Height             : 0
  Predecessors:
   val SU(3): Latency=4 Reg=%vreg10
   val SU(0): Latency=5 Reg=%vreg7
   ch  SU(1): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(5):   %vreg11<def> = FCVT_S_W_RDY %vreg10; FP32Bit:%vreg11 GR32Bit:%vreg10
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 4
  Predecessors:
   val SU(3): Latency=5 Reg=%vreg10
  Successors:
   val SU(7): Latency=4 Reg=%vreg11

SU(6):   %vreg12<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(7): Latency=5 Reg=%vreg12

SU(7):   FSW %vreg11, %vreg12, 0; mem:ST4[%1] FP32Bit:%vreg11 GR32Bit:%vreg12
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 29
  Height             : 0
  Predecessors:
   val SU(5): Latency=4 Reg=%vreg11
   val SU(6): Latency=5 Reg=%vreg12
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg7<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg7
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
   val SU(4): Latency=5 Reg=%vreg7
   val SU(1): Latency=5 Reg=%vreg7

SU(1):   %vreg8<def> = LW %vreg7, 0; mem:LD4[%4] GR32Bit:%vreg8,%vreg7
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 24
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg7
  Successors:
   val SU(3): Latency=15 Reg=%vreg8
   ch  SU(4): Latency=0

SU(2):   %vreg9<def> = ADDI %zero, 25; GR32Bit:%vreg9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
   val SU(3): Latency=5 Reg=%vreg9

SU(3):   %vreg10<def> = MUL %vreg9, %vreg8; GR32Bit:%vreg10,%vreg9,%vreg8
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 9
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg8
   val SU(2): Latency=5 Reg=%vreg9
  Successors:
   val SU(5): Latency=5 Reg=%vreg10
   val SU(4): Latency=4 Reg=%vreg10

SU(4):   SW %vreg10, %vreg7, 0; mem:ST4[%4] GR32Bit:%vreg10,%vreg7
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 24
  Height             : 0
  Predecessors:
   val SU(3): Latency=4 Reg=%vreg10
   val SU(0): Latency=5 Reg=%vreg7
   ch  SU(1): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(5):   %vreg11<def> = FCVT_S_W_RDY %vreg10; FP32Bit:%vreg11 GR32Bit:%vreg10
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 4
  Predecessors:
   val SU(3): Latency=5 Reg=%vreg10
  Successors:
   val SU(7): Latency=4 Reg=%vreg11

SU(6):   %vreg12<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(7): Latency=5 Reg=%vreg12

SU(7):   FSW %vreg11, %vreg12, 0; mem:ST4[%1] FP32Bit:%vreg11 GR32Bit:%vreg12
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 29
  Height             : 0
  Predecessors:
   val SU(5): Latency=4 Reg=%vreg11
   val SU(6): Latency=5 Reg=%vreg12
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(6)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg12<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg12
handleMove 2072B -> 2020B: %vreg12<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg12
     %vreg12:	[2072r,2080r:0)  0@2072r
        -->	[2020r,2080r:0)  0@2020r
     t5:	EMPTY
        -->	EMPTY
  Tree: 0 @20
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @20
Scheduling %vreg7<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg7
  Tree: 1 @20
Pick node SU(2)  ILP: 1 / 1 = 1 Tree: 0 @20
Scheduling %vreg9<def> = ADDI %zero, 25; GR32Bit:%vreg9
handleMove 2040B -> 2028B: %vreg9<def> = ADDI %zero, 25; GR32Bit:%vreg9
     %vreg9:	[2040r,2048r:0)  0@2040r
        -->	[2028r,2048r:0)  0@2028r
     zero:	EMPTY
        -->	EMPTY
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @20
Scheduling %vreg8<def> = LW %vreg7, 0; mem:LD4[%4] GR32Bit:%vreg8,%vreg7
Pick node SU(3)  ILP: 4 / 21 = 0.190476 Tree: 0 @20
Scheduling %vreg10<def> = MUL %vreg9, %vreg8; GR32Bit:%vreg10,%vreg9,%vreg8
Pick node SU(4)  ILP: 5 / 25 = 0.2 Tree: 0 @20
Scheduling SW %vreg10, %vreg7, 0; mem:ST4[%4] GR32Bit:%vreg10,%vreg7
Pick node SU(5)  ILP: 1 / 26 = 0.0384615 Tree: 1 @20
Scheduling %vreg11<def> = FCVT_S_W_RDY %vreg10; FP32Bit:%vreg11 GR32Bit:%vreg10
Pick node SU(7)  ILP: 3 / 30 = 0.1 Tree: 1 @20
Scheduling FSW %vreg11, %vreg12, 0; mem:ST4[%1] FP32Bit:%vreg11 GR32Bit:%vreg12
*** Final schedule for BB#4 ***
SU(6):   %vreg12<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg12
SU(0):   %vreg7<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg7
SU(2):   %vreg9<def> = ADDI %zero, 25; GR32Bit:%vreg9
SU(1):   %vreg8<def> = LW %vreg7, 0; mem:LD4[%4] GR32Bit:%vreg8,%vreg7
SU(3):   %vreg10<def> = MUL %vreg9, %vreg8; GR32Bit:%vreg10,%vreg9,%vreg8
SU(4):   SW %vreg10, %vreg7, 0; mem:ST4[%4] GR32Bit:%vreg10,%vreg7
SU(5):   %vreg11<def> = FCVT_S_W_RDY %vreg10; FP32Bit:%vreg11 GR32Bit:%vreg10
SU(7):   FSW %vreg11, %vreg12, 0; mem:ST4[%1] FP32Bit:%vreg11 GR32Bit:%vreg12

Partitioning instructions of the region into multiple CEs
instr:  %vreg12<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg12
instr:  %vreg7<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg7
instr:  %vreg9<def> = ADDI %zero, 25; GR32Bit:%vreg9
instr:  %vreg8<def> = LW %vreg7, 0; mem:LD4[%4] GR32Bit:%vreg8,%vreg7
instr:  %vreg10<def> = MUL %vreg9, %vreg8; GR32Bit:%vreg10,%vreg9,%vreg8
instr:  SW %vreg10, %vreg7, 0; mem:ST4[%4] GR32Bit:%vreg10,%vreg7
instr:  %vreg11<def> = FCVT_S_W_RDY %vreg10; FP32Bit:%vreg11 GR32Bit:%vreg10
instr:  FSW %vreg11, %vreg12, 0; mem:ST4[%1] FP32Bit:%vreg11 GR32Bit:%vreg12
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
before falloc, state of bb4:BB#4: derived from LLVM BB %po_calculation3.for.end
    Predecessors according to CFG: BB#1
	%vreg12<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg12
	%vreg7<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg7
	%vreg9<def> = ADDI %zero, 25; GR32Bit:%vreg9
	%vreg8<def> = LW %vreg7, 0; mem:LD4[%4] GR32Bit:%vreg8,%vreg7
	%vreg10<def> = MUL %vreg9, %vreg8; GR32Bit:%vreg10,%vreg9,%vreg8
	SW %vreg10, %vreg7, 0; mem:ST4[%4] GR32Bit:%vreg10,%vreg7
	%vreg11<def> = FCVT_S_W_RDY %vreg10; FP32Bit:%vreg11 GR32Bit:%vreg10
	FSW %vreg11, %vreg12, 0; mem:ST4[%1] FP32Bit:%vreg11 GR32Bit:%vreg12
Adding all fallocs first to avoid stalls due to sequential fallocs and fbinds
Adding writecm(for writing sync count to context frames) and fbind instructions
live end of child is itself
live end of child is itself
Adding localref sw instructions to hyperOp po_calculation3

*** Renumbered SlotIndexes 2084-2100 ***

*** Renumbered SlotIndexes 2096-2112 ***

*** Renumbered SlotIndexes 2108-2124 ***

*** Renumbered SlotIndexes 2120-2136 ***

*** Renumbered SlotIndexes 2132-2148 ***

*** Renumbered SlotIndexes 2144-2160 ***

*** Renumbered SlotIndexes 2156-2172 ***

*** Renumbered SlotIndexes 2168-2184 ***

*** Renumbered SlotIndexes 2180-2196 ***
Adding writecm instructions to hyperOp po_calculation3
Adding writecmp and sync instructions
problem with which child exactly?redefine_start2 with edge of type:6

*** Renumbered SlotIndexes 2192-2208 ***

*** Renumbered SlotIndexes 2204-2220 ***

*** Renumbered SlotIndexes 2216-2232 ***

*** Renumbered SlotIndexes 2228-2244 ***
Adding endHyperOp instructions to each pHyperOp

*** Renumbered SlotIndexes 2232-2256 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 2244-2268 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 2256-2280 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 2268-2292 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 2280-2304 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 2292-2316 ***
  %zero<def> = ADDI %zero, 0
After Shuffling regions of basic block, state of BB#4:
BB#4: derived from LLVM BB %po_calculation3.for.end
    Predecessors according to CFG: BB#1
	%vreg12<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg12
	%vreg7<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg7
	%vreg9<def> = ADDI %zero, 25; GR32Bit:%vreg9
	%vreg8<def> = LW %vreg7, 0; mem:LD4[%4] GR32Bit:%vreg8,%vreg7
	%vreg10<def> = MUL %vreg9, %vreg8; GR32Bit:%vreg10,%vreg9,%vreg8
	SW %vreg10, %vreg7, 0; mem:ST4[%4] GR32Bit:%vreg10,%vreg7
	%vreg11<def> = FCVT_S_W_RDY %vreg10; FP32Bit:%vreg11 GR32Bit:%vreg10
	FSW %vreg11, %vreg12, 0; mem:ST4[%1] FP32Bit:%vreg11 GR32Bit:%vreg12
	%vreg134<def> = ADDI %zero, 128; GR32Bit:%vreg134
	%vreg135<def> = ADDI %zero, 1; GR32Bit:%vreg135
	WRITECM %vreg134, %vreg135, 60; GR32Bit:%vreg134,%vreg135
	%vreg136<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg136
	%vreg137<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg137
	%vreg138<def> = SRLI %vreg137, 12; GR32Bit:%vreg138,%vreg137
	%vreg139<def> = ADD %vreg136, %vreg138; GR32Bit:%vreg139,%vreg136,%vreg138
	%vreg140<def> = ADDI %zero, 20; GR32Bit:%vreg140
	%vreg141<def> = SRLI %vreg134, 22; GR32Bit:%vreg141,%vreg134
	%vreg142<def> = SRLI %vreg134, 12; GR32Bit:%vreg142,%vreg134
	%vreg143<def> = ANDI %vreg142, 15; GR32Bit:%vreg143,%vreg142
	%vreg144<def> = SRLI %vreg134, 6; GR32Bit:%vreg144,%vreg134
	%vreg145<def> = ANDI %vreg144, 63; GR32Bit:%vreg145,%vreg144
	%vreg146<def> = ADDI %zero, 832; GR32Bit:%vreg146
	%vreg147<def> = MUL %vreg141, %vreg146; GR32Bit:%vreg147,%vreg141,%vreg146
	%vreg148<def> = ADDI %zero, 52; GR32Bit:%vreg148
	%vreg149<def> = MUL %vreg143, %vreg148; GR32Bit:%vreg149,%vreg143,%vreg148
	%vreg150<def> = ADD %vreg149, %vreg145; GR32Bit:%vreg150,%vreg149,%vreg145
	%vreg151<def> = ADD %vreg150, %vreg147; GR32Bit:%vreg151,%vreg150,%vreg147
	%vreg152<def> = MUL %vreg151, %vreg140; GR32Bit:%vreg152,%vreg151,%vreg140
	%vreg153<def> = ADD %vreg152, %vreg139; GR32Bit:%vreg153,%vreg152,%vreg139
	%vreg154<def> = FLW %vreg29, 0; FP32Bit:%vreg154 GR32Bit:%vreg29
	FSW %vreg154, %vreg153, 0; FP32Bit:%vreg154 GR32Bit:%vreg153
	%vreg155<def> = LUI 1; GR32Bit:%vreg155
	WRITEPM %vreg155, %vreg134, 0; GR32Bit:%vreg155,%vreg134
	FDELETE %t4, 0
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg156<def> = LUI 1; GR32Bit:%vreg156
	%vreg157<def> = DREADPM %vreg156, 0; GR32Bit:%vreg157,%vreg156
	%vreg158<def> = ADDI %zero, -1; GR32Bit:%vreg158
	SYNC %vreg157, %vreg158, 60; GR32Bit:%vreg157,%vreg158
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 2204-2364 ***

*** Renumbered SlotIndexes 2204-2380 ***

*** Renumbered SlotIndexes 2092-2428 ***

*** Renumbered SlotIndexes 2080-2448 ***
Creating pHyperOp bundles for CEs for bb4
  %vreg156<def> = LUI 1; GR32Bit:%vreg156
starting at   %vreg12<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg12
  END 0
starting at   %vreg156<def> = LUI 1; GR32Bit:%vreg156
  END 0
starting at   END 0
starting at   END 0
After bundling, state of BB4:BB#4: derived from LLVM BB %po_calculation3.for.end
    Predecessors according to CFG: BB#1
	%vreg12<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg12
	  * %vreg7<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg7
	  * %vreg9<def> = ADDI %zero, 25; GR32Bit:%vreg9
	  * %vreg8<def> = LW %vreg7, 0; mem:LD4[%4] GR32Bit:%vreg8,%vreg7
	  * %vreg10<def> = MUL %vreg9, %vreg8; GR32Bit:%vreg10,%vreg9,%vreg8
	  * SW %vreg10, %vreg7, 0; mem:ST4[%4] GR32Bit:%vreg10,%vreg7
	  * %vreg11<def> = FCVT_S_W_RDY %vreg10; FP32Bit:%vreg11 GR32Bit:%vreg10
	  * FSW %vreg11, %vreg12, 0; mem:ST4[%1] FP32Bit:%vreg11 GR32Bit:%vreg12
	  * %vreg134<def> = ADDI %zero, 128; GR32Bit:%vreg134
	  * %vreg135<def> = ADDI %zero, 1; GR32Bit:%vreg135
	  * WRITECM %vreg134, %vreg135, 60; GR32Bit:%vreg134,%vreg135
	  * %vreg136<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg136
	  * %vreg137<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg137
	  * %vreg138<def> = SRLI %vreg137, 12; GR32Bit:%vreg138,%vreg137
	  * %vreg139<def> = ADD %vreg136, %vreg138; GR32Bit:%vreg139,%vreg136,%vreg138
	  * %vreg140<def> = ADDI %zero, 20; GR32Bit:%vreg140
	  * %vreg141<def> = SRLI %vreg134, 22; GR32Bit:%vreg141,%vreg134
	  * %vreg142<def> = SRLI %vreg134, 12; GR32Bit:%vreg142,%vreg134
	  * %vreg143<def> = ANDI %vreg142, 15; GR32Bit:%vreg143,%vreg142
	  * %vreg144<def> = SRLI %vreg134, 6; GR32Bit:%vreg144,%vreg134
	  * %vreg145<def> = ANDI %vreg144, 63; GR32Bit:%vreg145,%vreg144
	  * %vreg146<def> = ADDI %zero, 832; GR32Bit:%vreg146
	  * %vreg147<def> = MUL %vreg141, %vreg146; GR32Bit:%vreg147,%vreg141,%vreg146
	  * %vreg148<def> = ADDI %zero, 52; GR32Bit:%vreg148
	  * %vreg149<def> = MUL %vreg143, %vreg148; GR32Bit:%vreg149,%vreg143,%vreg148
	  * %vreg150<def> = ADD %vreg149, %vreg145; GR32Bit:%vreg150,%vreg149,%vreg145
	  * %vreg151<def> = ADD %vreg150, %vreg147; GR32Bit:%vreg151,%vreg150,%vreg147
	  * %vreg152<def> = MUL %vreg151, %vreg140; GR32Bit:%vreg152,%vreg151,%vreg140
	  * %vreg153<def> = ADD %vreg152, %vreg139; GR32Bit:%vreg153,%vreg152,%vreg139
	  * %vreg154<def> = FLW %vreg29, 0; FP32Bit:%vreg154 GR32Bit:%vreg29
	  * FSW %vreg154, %vreg153, 0; FP32Bit:%vreg154 GR32Bit:%vreg153
	  * %vreg155<def> = LUI 1; GR32Bit:%vreg155
	  * WRITEPM %vreg155, %vreg134, 0; GR32Bit:%vreg155,%vreg134
	  * FDELETE %t4, 0
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg156<def> = LUI 1; GR32Bit:%vreg156
	  * %vreg157<def> = DREADPM %vreg156, 0; GR32Bit:%vreg157,%vreg156
	  * %vreg158<def> = ADDI %zero, -1; GR32Bit:%vreg158
	  * SYNC %vreg157, %vreg158, 60; GR32Bit:%vreg157,%vreg158
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
Patching the instructions that are supposed to use the physical registers r30 and r31
Computing live-in reg-units in ABI blocks.
Created 0 new intervals.

*** Renumbered SlotIndexes 2316-2460 ***

*** Renumbered SlotIndexes 2328-2472 ***
********** INTERVALS **********
t5 = EMPTY
zero = EMPTY
%vreg0 = [172r,180r:0)  0@172r
%vreg1 = [164r,180r:0)  0@164r
%vreg2 = [148r,156r:0)  0@148r
%vreg3 = [188r,196r:0)  0@188r
%vreg4 = [748r,756r:0)  0@748r
%vreg5 = [756r,832r:0)  0@756r
%vreg6 = [744r,832r:0)  0@744r
%vreg7 = [2024r,2056r:0)  0@2024r
%vreg8 = [2032r,2048r:0)  0@2032r
%vreg9 = [2028r,2048r:0)  0@2028r
%vreg10 = [2048r,2064r:0)  0@2048r
%vreg11 = [2064r,2080r:0)  0@2064r
%vreg12 = [2020r,2080r:0)  0@2020r
%vreg13 = [1712r,1736r:0)  0@1712r
%vreg14 = [1736r,1768r:0)  0@1736r
%vreg15 = [1720r,1752r:0)  0@1720r
%vreg16 = [1752r,1776r:0)  0@1752r
%vreg17 = [1768r,1776r:0)  0@1768r
%vreg18 = [1776r,1784r:0)  0@1776r
%vreg19 = [1784r,1816r:0)  0@1784r
%vreg20 = [1684r,1832r:0)  0@1684r
%vreg21 = [1728r,1760r:0)  0@1728r
%vreg22 = [1760r,1816r:0)  0@1760r
%vreg23 = [1816r,1824r:0)  0@1816r
%vreg24 = [1824r,1832r:0)  0@1824r
%vreg25 = [1848r,1872r:0)  0@1848r
%vreg26 = [1856r,1864r:0)  0@1856r
%vreg27 = [1864r,1872r:0)  0@1864r
%vreg28 = [4r,4d:0)  0@4r
%vreg29 = [140r,140d:0)  0@140r
%vreg30 = [12r,28r:0)  0@12r
%vreg31 = [16r,20r:0)  0@16r
%vreg32 = [20r,28r:0)  0@20r
%vreg33 = [28r,140r:0)  0@28r
%vreg34 = [36r,132r:0)  0@36r
%vreg35 = [44r,92r:0)  0@44r
%vreg36 = [52r,60r:0)  0@52r
%vreg37 = [60r,108r:0)  0@60r
%vreg38 = [68r,76r:0)  0@68r
%vreg39 = [76r,116r:0)  0@76r
%vreg40 = [84r,92r:0)  0@84r
%vreg41 = [92r,124r:0)  0@92r
%vreg42 = [100r,108r:0)  0@100r
%vreg43 = [108r,116r:0)  0@108r
%vreg44 = [116r,124r:0)  0@116r
%vreg45 = [124r,132r:0)  0@124r
%vreg46 = [132r,140r:0)  0@132r
%vreg47 = [204r,204d:0)  0@204r
%vreg48 = [348r,348d:0)  0@348r
%vreg49 = [212r,236r:0)  0@212r
%vreg50 = [220r,228r:0)  0@220r
%vreg51 = [228r,236r:0)  0@228r
%vreg52 = [236r,348r:0)  0@236r
%vreg53 = [244r,340r:0)  0@244r
%vreg54 = [252r,300r:0)  0@252r
%vreg55 = [260r,268r:0)  0@260r
%vreg56 = [268r,316r:0)  0@268r
%vreg57 = [276r,284r:0)  0@276r
%vreg58 = [284r,324r:0)  0@284r
%vreg59 = [292r,300r:0)  0@292r
%vreg60 = [300r,332r:0)  0@300r
%vreg61 = [308r,316r:0)  0@308r
%vreg62 = [316r,324r:0)  0@316r
%vreg63 = [324r,332r:0)  0@324r
%vreg64 = [332r,340r:0)  0@332r
%vreg65 = [340r,348r:0)  0@340r
%vreg66 = [356r,356d:0)  0@356r
%vreg67 = [500r,500d:0)  0@500r
%vreg68 = [364r,388r:0)  0@364r
%vreg69 = [372r,380r:0)  0@372r
%vreg70 = [380r,388r:0)  0@380r
%vreg71 = [388r,500r:0)  0@388r
%vreg72 = [396r,492r:0)  0@396r
%vreg73 = [404r,452r:0)  0@404r
%vreg74 = [412r,420r:0)  0@412r
%vreg75 = [420r,468r:0)  0@420r
%vreg76 = [428r,436r:0)  0@428r
%vreg77 = [436r,476r:0)  0@436r
%vreg78 = [444r,452r:0)  0@444r
%vreg79 = [452r,484r:0)  0@452r
%vreg80 = [460r,468r:0)  0@460r
%vreg81 = [468r,476r:0)  0@468r
%vreg82 = [476r,484r:0)  0@476r
%vreg83 = [484r,492r:0)  0@484r
%vreg84 = [492r,500r:0)  0@492r
%vreg85 = [508r,508d:0)  0@508r
%vreg86 = [652r,652d:0)  0@652r
%vreg87 = [516r,540r:0)  0@516r
%vreg88 = [524r,532r:0)  0@524r
%vreg89 = [532r,540r:0)  0@532r
%vreg90 = [540r,652r:0)  0@540r
%vreg91 = [548r,644r:0)  0@548r
%vreg92 = [556r,604r:0)  0@556r
%vreg93 = [564r,572r:0)  0@564r
%vreg94 = [572r,620r:0)  0@572r
%vreg95 = [580r,588r:0)  0@580r
%vreg96 = [588r,628r:0)  0@588r
%vreg97 = [596r,604r:0)  0@596r
%vreg98 = [604r,636r:0)  0@604r
%vreg99 = [612r,620r:0)  0@612r
%vreg100 = [620r,628r:0)  0@620r
%vreg101 = [628r,636r:0)  0@628r
%vreg102 = [636r,644r:0)  0@636r
%vreg103 = [644r,652r:0)  0@644r
%vreg104 = [856r,864r:0)  0@856r
%vreg105 = [872r,880r:0)  0@872r
%vreg106 = [880r,1680B:0)  0@880r
%vreg107 = [1000r,1008r:0)  0@1000r
%vreg108 = [1016r,1024r:0)  0@1016r
%vreg109 = [1024r,1680B:0)  0@1024r
%vreg110 = [1120r,1128r:0)  0@1120r
%vreg111 = [1136r,1144r:0)  0@1136r
%vreg112 = [1144r,1680B:0)  0@1144r
%vreg113 = [1488r,1496r:0)  0@1488r
%vreg114 = [1504r,1512r:0)  0@1504r
%vreg115 = [1512r,1680B:0)  0@1512r
%vreg116 = [888r,896r:0)  0@888r
%vreg117 = [904r,912r:0)  0@904r
%vreg118 = [912r,1680B:0)  0@912r
%vreg119 = [1152r,1160r:0)  0@1152r
%vreg120 = [1168r,1176r:0)  0@1168r
%vreg121 = [1176r,1680B:0)  0@1176r
%vreg122 = [760r,808r:0)  0@760r
%vreg123 = [944r,968r:0)  0@944r
%vreg124 = [776r,816r:0)  0@776r
%vreg125 = [1064r,1088r:0)  0@1064r
%vreg126 = [792r,824r:0)  0@792r
%vreg127 = [1216r,1280r:0)  0@1216r
%vreg128 = [960r,976r:0)  0@960r
%vreg129 = [1080r,1096r:0)  0@1080r
%vreg130 = [1232r,1320r:0)  0@1232r
%vreg131 = [968r,976r:0)  0@968r
%vreg132 = [1088r,1096r:0)  0@1088r
%vreg133 = [1280r,1320r:0)  0@1280r
%vreg134 = [2084r,2272r:0)  0@2084r
%vreg135 = [2088r,2096r:0)  0@2088r
%vreg136 = [2104r,2128r:0)  0@2104r
%vreg137 = [2112r,2120r:0)  0@2112r
%vreg138 = [2120r,2128r:0)  0@2120r
%vreg139 = [2128r,2240r:0)  0@2128r
%vreg140 = [2136r,2232r:0)  0@2136r
%vreg141 = [2144r,2192r:0)  0@2144r
%vreg142 = [2152r,2160r:0)  0@2152r
%vreg143 = [2160r,2208r:0)  0@2160r
%vreg144 = [2168r,2176r:0)  0@2168r
%vreg145 = [2176r,2216r:0)  0@2176r
%vreg146 = [2184r,2192r:0)  0@2184r
%vreg147 = [2192r,2224r:0)  0@2192r
%vreg148 = [2200r,2208r:0)  0@2200r
%vreg149 = [2208r,2216r:0)  0@2208r
%vreg150 = [2216r,2224r:0)  0@2216r
%vreg151 = [2224r,2232r:0)  0@2224r
%vreg152 = [2232r,2240r:0)  0@2232r
%vreg153 = [2240r,2256r:0)  0@2240r
%vreg154 = [2248r,2256r:0)  0@2248r
%vreg155 = [2264r,2272r:0)  0@2264r
%vreg156 = [2312r,2344r:0)  0@2312r
%vreg157 = [2344r,2472B:0)  0@2344r
%vreg158 = [2352r,2360r:0)  0@2352r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function po_calculation3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %po_calculation3.entry
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg30<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg30
4B		  * %vreg31<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg31
4B		  * %vreg32<def> = SRLI %vreg31, 12; GR32Bit:%vreg32,%vreg31
4B		  * %vreg33<def> = ADD %vreg30, %vreg32; GR32Bit:%vreg33,%vreg30,%vreg32
4B		  * %vreg34<def> = ADDI %zero, 20; GR32Bit:%vreg34
4B		  * %vreg35<def> = SRLI %t5, 22; GR32Bit:%vreg35
4B		  * %vreg36<def> = SRLI %t5, 12; GR32Bit:%vreg36
4B		  * %vreg37<def> = ANDI %vreg36, 15; GR32Bit:%vreg37,%vreg36
4B		  * %vreg38<def> = SRLI %t5, 6; GR32Bit:%vreg38
4B		  * %vreg39<def> = ANDI %vreg38, 63; GR32Bit:%vreg39,%vreg38
4B		  * %vreg40<def> = ADDI %zero, 832; GR32Bit:%vreg40
4B		  * %vreg41<def> = MUL %vreg35, %vreg40; GR32Bit:%vreg41,%vreg35,%vreg40
4B		  * %vreg42<def> = ADDI %zero, 52; GR32Bit:%vreg42
4B		  * %vreg43<def> = MUL %vreg37, %vreg42; GR32Bit:%vreg43,%vreg37,%vreg42
4B		  * %vreg44<def> = ADD %vreg43, %vreg39; GR32Bit:%vreg44,%vreg43,%vreg39
4B		  * %vreg45<def> = ADD %vreg44, %vreg41; GR32Bit:%vreg45,%vreg44,%vreg41
4B		  * %vreg46<def> = MUL %vreg45, %vreg34; GR32Bit:%vreg46,%vreg45,%vreg34
4B		  * %t5<def> = ADD %vreg33, %vreg46; GR32Bit:%vreg33,%vreg46
4B		  * %vreg2<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg2
4B		  * SW %zero, %vreg2, 0; mem:ST4[%3] GR32Bit:%vreg2
4B		  * %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
4B		  * %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
4B		  * SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
4B		  * %vreg3<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg3
4B		  * SW %zero, %vreg3, 0; mem:ST4[%4] GR32Bit:%vreg3
204B		%t4<def> = ADD %t5, %zero
204B		  * %vreg49<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg49
204B		  * %vreg50<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg50
204B		  * %vreg51<def> = SRLI %vreg50, 12; GR32Bit:%vreg51,%vreg50
204B		  * %vreg52<def> = ADD %vreg49, %vreg51; GR32Bit:%vreg52,%vreg49,%vreg51
204B		  * %vreg53<def> = ADDI %zero, 20; GR32Bit:%vreg53
204B		  * %vreg54<def> = SRLI %t5, 22; GR32Bit:%vreg54
204B		  * %vreg55<def> = SRLI %t5, 12; GR32Bit:%vreg55
204B		  * %vreg56<def> = ANDI %vreg55, 15; GR32Bit:%vreg56,%vreg55
204B		  * %vreg57<def> = SRLI %t5, 6; GR32Bit:%vreg57
204B		  * %vreg58<def> = ANDI %vreg57, 63; GR32Bit:%vreg58,%vreg57
204B		  * %vreg59<def> = ADDI %zero, 832; GR32Bit:%vreg59
204B		  * %vreg60<def> = MUL %vreg54, %vreg59; GR32Bit:%vreg60,%vreg54,%vreg59
204B		  * %vreg61<def> = ADDI %zero, 52; GR32Bit:%vreg61
204B		  * %vreg62<def> = MUL %vreg56, %vreg61; GR32Bit:%vreg62,%vreg56,%vreg61
204B		  * %vreg63<def> = ADD %vreg62, %vreg58; GR32Bit:%vreg63,%vreg62,%vreg58
204B		  * %vreg64<def> = ADD %vreg63, %vreg60; GR32Bit:%vreg64,%vreg63,%vreg60
204B		  * %vreg65<def> = MUL %vreg64, %vreg53; GR32Bit:%vreg65,%vreg64,%vreg53
204B		  * %t5<def> = ADD %vreg52, %vreg65; GR32Bit:%vreg52,%vreg65
356B		%t4<def> = ADD %t5, %zero
356B		  * %vreg68<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg68
356B		  * %vreg69<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg69
356B		  * %vreg70<def> = SRLI %vreg69, 12; GR32Bit:%vreg70,%vreg69
356B		  * %vreg71<def> = ADD %vreg68, %vreg70; GR32Bit:%vreg71,%vreg68,%vreg70
356B		  * %vreg72<def> = ADDI %zero, 20; GR32Bit:%vreg72
356B		  * %vreg73<def> = SRLI %t5, 22; GR32Bit:%vreg73
356B		  * %vreg74<def> = SRLI %t5, 12; GR32Bit:%vreg74
356B		  * %vreg75<def> = ANDI %vreg74, 15; GR32Bit:%vreg75,%vreg74
356B		  * %vreg76<def> = SRLI %t5, 6; GR32Bit:%vreg76
356B		  * %vreg77<def> = ANDI %vreg76, 63; GR32Bit:%vreg77,%vreg76
356B		  * %vreg78<def> = ADDI %zero, 832; GR32Bit:%vreg78
356B		  * %vreg79<def> = MUL %vreg73, %vreg78; GR32Bit:%vreg79,%vreg73,%vreg78
356B		  * %vreg80<def> = ADDI %zero, 52; GR32Bit:%vreg80
356B		  * %vreg81<def> = MUL %vreg75, %vreg80; GR32Bit:%vreg81,%vreg75,%vreg80
356B		  * %vreg82<def> = ADD %vreg81, %vreg77; GR32Bit:%vreg82,%vreg81,%vreg77
356B		  * %vreg83<def> = ADD %vreg82, %vreg79; GR32Bit:%vreg83,%vreg82,%vreg79
356B		  * %vreg84<def> = MUL %vreg83, %vreg72; GR32Bit:%vreg84,%vreg83,%vreg72
356B		  * %t5<def> = ADD %vreg71, %vreg84; GR32Bit:%vreg71,%vreg84
508B		%t4<def> = ADD %t5, %zero
508B		  * %vreg87<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg87
508B		  * %vreg88<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg88
508B		  * %vreg89<def> = SRLI %vreg88, 12; GR32Bit:%vreg89,%vreg88
508B		  * %vreg90<def> = ADD %vreg87, %vreg89; GR32Bit:%vreg90,%vreg87,%vreg89
508B		  * %vreg91<def> = ADDI %zero, 20; GR32Bit:%vreg91
508B		  * %vreg92<def> = SRLI %t5, 22; GR32Bit:%vreg92
508B		  * %vreg93<def> = SRLI %t5, 12; GR32Bit:%vreg93
508B		  * %vreg94<def> = ANDI %vreg93, 15; GR32Bit:%vreg94,%vreg93
508B		  * %vreg95<def> = SRLI %t5, 6; GR32Bit:%vreg95
508B		  * %vreg96<def> = ANDI %vreg95, 63; GR32Bit:%vreg96,%vreg95
508B		  * %vreg97<def> = ADDI %zero, 832; GR32Bit:%vreg97
508B		  * %vreg98<def> = MUL %vreg92, %vreg97; GR32Bit:%vreg98,%vreg92,%vreg97
508B		  * %vreg99<def> = ADDI %zero, 52; GR32Bit:%vreg99
508B		  * %vreg100<def> = MUL %vreg94, %vreg99; GR32Bit:%vreg100,%vreg94,%vreg99
508B		  * %vreg101<def> = ADD %vreg100, %vreg96; GR32Bit:%vreg101,%vreg100,%vreg96
508B		  * %vreg102<def> = ADD %vreg101, %vreg98; GR32Bit:%vreg102,%vreg101,%vreg98
508B		  * %vreg103<def> = MUL %vreg102, %vreg91; GR32Bit:%vreg103,%vreg102,%vreg91
508B		  * %t5<def> = ADD %vreg90, %vreg103; GR32Bit:%vreg90,%vreg103
	    Successors according to CFG: BB#1

740B	BB#1: derived from LLVM BB %po_calculation3.for.cond
	    Predecessors according to CFG: BB#0 BB#3
744B		%vreg6<def> = ADDI %zero, 24; GR32Bit:%vreg6
744B		  * %vreg4<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg4
744B		  * %vreg5<def> = LW %vreg4, 0; mem:LD4[%3] GR32Bit:%vreg5,%vreg4
744B		  * %vreg122<def> = LUI 1; GR32Bit:%vreg122
744B		  * WRITEPM %vreg122, %vreg5, 0; GR32Bit:%vreg122,%vreg5
744B		  * %vreg124<def> = LUI 2; GR32Bit:%vreg124
744B		  * WRITEPM %vreg124, %vreg5, 0; GR32Bit:%vreg124,%vreg5
744B		  * %vreg126<def> = LUI 3; GR32Bit:%vreg126
744B		  * WRITEPM %vreg126, %vreg5, 0; GR32Bit:%vreg126,%vreg5
744B		  * WRITEPM %vreg122, %vreg6, 4; GR32Bit:%vreg122,%vreg6
744B		  * WRITEPM %vreg124, %vreg6, 4; GR32Bit:%vreg124,%vreg6
744B		  * WRITEPM %vreg126, %vreg6, 4; GR32Bit:%vreg126,%vreg6
744B		  * BGT <BB#4>, %vreg5, %vreg6; GR32Bit:%vreg5,%vreg6
744B		  * %zero<def> = ADDI %zero, 0
744B		  * %zero<def> = ADDI %zero, 0
744B		  * %vreg104<def> = LUI 1; GR32Bit:%vreg104
744B		  * WRITEPM %vreg104, %vreg104, 192; GR32Bit:%vreg104
744B		  * %vreg105<def> = LUI 0; GR32Bit:%vreg105
744B		  * %vreg106<def> = DREADPM %vreg105, 188; GR32Bit:%vreg106,%vreg105
744B		  * %vreg116<def> = LUI 2; GR32Bit:%vreg116
744B		  * WRITEPM %vreg116, %vreg116, 176; GR32Bit:%vreg116
744B		  * %vreg117<def> = LUI 0; GR32Bit:%vreg117
744B		  * %vreg118<def> = DREADPM %vreg117, 168; GR32Bit:%vreg118,%vreg117
744B		  * JAL <BB#2>
744B		  * %zero<def> = ADDI %zero, 0
744B		  * %zero<def> = ADDI %zero, 0
944B		%vreg123<def> = LUI 1; GR32Bit:%vreg123
944B		  * %vreg128<def> = DREADPM %vreg123, 0; GR32Bit:%vreg128,%vreg123
944B		  * %vreg131<def> = DREADPM %vreg123, 4; GR32Bit:%vreg131,%vreg123
944B		  * BGT <BB#4>, %vreg128, %vreg131; GR32Bit:%vreg128,%vreg131
944B		  * %zero<def> = ADDI %zero, 0
944B		  * %zero<def> = ADDI %zero, 0
944B		  * %vreg107<def> = LUI 0; GR32Bit:%vreg107
944B		  * WRITEPM %vreg107, %vreg107, 188; GR32Bit:%vreg107
944B		  * %vreg108<def> = LUI 1; GR32Bit:%vreg108
944B		  * %vreg109<def> = DREADPM %vreg108, 192; GR32Bit:%vreg109,%vreg108
944B		  * JAL <BB#2>
944B		  * %zero<def> = ADDI %zero, 0
944B		  * %zero<def> = ADDI %zero, 0
1064B		%vreg125<def> = LUI 2; GR32Bit:%vreg125
1064B		  * %vreg129<def> = DREADPM %vreg125, 0; GR32Bit:%vreg129,%vreg125
1064B		  * %vreg132<def> = DREADPM %vreg125, 4; GR32Bit:%vreg132,%vreg125
1064B		  * BGT <BB#4>, %vreg129, %vreg132; GR32Bit:%vreg129,%vreg132
1064B		  * %zero<def> = ADDI %zero, 0
1064B		  * %zero<def> = ADDI %zero, 0
1064B		  * %vreg110<def> = LUI 3; GR32Bit:%vreg110
1064B		  * WRITEPM %vreg110, %vreg110, 184; GR32Bit:%vreg110
1064B		  * %vreg111<def> = LUI 2; GR32Bit:%vreg111
1064B		  * %vreg112<def> = DREADPM %vreg111, 180; GR32Bit:%vreg112,%vreg111
1064B		  * %vreg119<def> = LUI 0; GR32Bit:%vreg119
1064B		  * WRITEPM %vreg119, %vreg119, 168; GR32Bit:%vreg119
1064B		  * %vreg120<def> = LUI 2; GR32Bit:%vreg120
1064B		  * %vreg121<def> = DREADPM %vreg120, 176; GR32Bit:%vreg121,%vreg120
1064B		  * JAL <BB#2>
1064B		  * %zero<def> = ADDI %zero, 0
1064B		  * %zero<def> = ADDI %zero, 0
1216B		%vreg127<def> = LUI 3; GR32Bit:%vreg127
1216B		  * %vreg130<def> = DREADPM %vreg127, 0; GR32Bit:%vreg130,%vreg127
1216B		  * %vreg133<def> = DREADPM %vreg127, 4; GR32Bit:%vreg133,%vreg127
1216B		  * BGT <BB#4>, %vreg130, %vreg133; GR32Bit:%vreg130,%vreg133
1216B		  * %zero<def> = ADDI %zero, 0
1216B		  * %zero<def> = ADDI %zero, 0
1216B		  * %vreg113<def> = LUI 2; GR32Bit:%vreg113
1216B		  * WRITEPM %vreg113, %vreg113, 180; GR32Bit:%vreg113
1216B		  * %vreg114<def> = LUI 3; GR32Bit:%vreg114
1216B		  * %vreg115<def> = DREADPM %vreg114, 184; GR32Bit:%vreg115,%vreg114
1216B		  * JAL <BB#2>
1216B		  * %zero<def> = ADDI %zero, 0
1216B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#2(124) BB#4(4)

1680B	BB#2: derived from LLVM BB %po_calculation3.for.body
	    Predecessors according to CFG: BB#1
1684B		%vreg20<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg20
1684B		  * %vreg13<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg13
1684B		  * %vreg15<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg15
1684B		  * %vreg21<def> = LW %vreg20, 0; mem:LD4[%4] GR32Bit:%vreg21,%vreg20
1684B		  * %vreg14<def> = LW %vreg13, 0; mem:LD4[%3] GR32Bit:%vreg14,%vreg13
1684B		  * %vreg16<def> = LW %vreg15, 0; mem:LD4[%2] GR32Bit:%vreg16,%vreg15
1684B		  * %vreg22<def> = FCVT_S_W_RDY %vreg21; FP32Bit:%vreg22 GR32Bit:%vreg21
1684B		  * %vreg17<def> = SLLI %vreg14, 2; GR32Bit:%vreg17,%vreg14
1684B		  * %vreg18<def> = ADD %vreg17, %vreg16; GR32Bit:%vreg18,%vreg17,%vreg16
1684B		  * %vreg19<def> = FLW %vreg18, 0; mem:LD4[%9] FP32Bit:%vreg19 GR32Bit:%vreg18
1684B		  * %vreg23<def> = FADD_S_RDY %vreg19, %vreg22; FP32Bit:%vreg23,%vreg19,%vreg22
1684B		  * %vreg24<def> = FCVT_W_S_RTZ %vreg23; GR32Bit:%vreg24 FP32Bit:%vreg23
1684B		  * SW %vreg24, %vreg20, 0; mem:ST4[%4] GR32Bit:%vreg24,%vreg20
1692B		%zero<def> = ADDI %zero, 0
1696B		%zero<def> = ADDI %zero, 0
1704B		%zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#3

1840B	BB#3: derived from LLVM BB %po_calculation3.for.inc
	    Predecessors according to CFG: BB#2
1848B		%vreg25<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg25
1848B		  * %vreg26<def> = LW %vreg25, 0; mem:LD4[%3] GR32Bit:%vreg26,%vreg25
1848B		  * %vreg27<def> = ADDI %vreg26, 1; GR32Bit:%vreg27,%vreg26
1848B		  * SW %vreg27, %vreg25, 0; mem:ST4[%3] GR32Bit:%vreg27,%vreg25
1848B		  * JAL <BB#1>
1848B		  * %zero<def> = ADDI %zero, 0
1848B		  * %zero<def> = ADDI %zero, 0
1896B		JAL <BB#1>
1896B		  * %zero<def> = ADDI %zero, 0
1896B		  * %zero<def> = ADDI %zero, 0
1920B		JAL <BB#1>
1920B		  * %zero<def> = ADDI %zero, 0
1920B		  * %zero<def> = ADDI %zero, 0
1944B		JAL <BB#1>
1944B		  * %zero<def> = ADDI %zero, 0
1944B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#1

2016B	BB#4: derived from LLVM BB %po_calculation3.for.end
	    Predecessors according to CFG: BB#1
2020B		%vreg12<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg12
2020B		  * %vreg7<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg7
2020B		  * %vreg9<def> = ADDI %zero, 25; GR32Bit:%vreg9
2020B		  * %vreg8<def> = LW %vreg7, 0; mem:LD4[%4] GR32Bit:%vreg8,%vreg7
2020B		  * %vreg10<def> = MUL %vreg9, %vreg8; GR32Bit:%vreg10,%vreg9,%vreg8
2020B		  * SW %vreg10, %vreg7, 0; mem:ST4[%4] GR32Bit:%vreg10,%vreg7
2020B		  * %vreg11<def> = FCVT_S_W_RDY %vreg10; FP32Bit:%vreg11 GR32Bit:%vreg10
2020B		  * FSW %vreg11, %vreg12, 0; mem:ST4[%1] FP32Bit:%vreg11 GR32Bit:%vreg12
2020B		  * %vreg134<def> = ADDI %zero, 128; GR32Bit:%vreg134
2020B		  * %vreg135<def> = ADDI %zero, 1; GR32Bit:%vreg135
2020B		  * WRITECM %vreg134, %vreg135, 60; GR32Bit:%vreg134,%vreg135
2020B		  * %vreg136<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg136
2020B		  * %vreg137<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg137
2020B		  * %vreg138<def> = SRLI %vreg137, 12; GR32Bit:%vreg138,%vreg137
2020B		  * %vreg139<def> = ADD %vreg136, %vreg138; GR32Bit:%vreg139,%vreg136,%vreg138
2020B		  * %vreg140<def> = ADDI %zero, 20; GR32Bit:%vreg140
2020B		  * %vreg141<def> = SRLI %vreg134, 22; GR32Bit:%vreg141,%vreg134
2020B		  * %vreg142<def> = SRLI %vreg134, 12; GR32Bit:%vreg142,%vreg134
2020B		  * %vreg143<def> = ANDI %vreg142, 15; GR32Bit:%vreg143,%vreg142
2020B		  * %vreg144<def> = SRLI %vreg134, 6; GR32Bit:%vreg144,%vreg134
2020B		  * %vreg145<def> = ANDI %vreg144, 63; GR32Bit:%vreg145,%vreg144
2020B		  * %vreg146<def> = ADDI %zero, 832; GR32Bit:%vreg146
2020B		  * %vreg147<def> = MUL %vreg141, %vreg146; GR32Bit:%vreg147,%vreg141,%vreg146
2020B		  * %vreg148<def> = ADDI %zero, 52; GR32Bit:%vreg148
2020B		  * %vreg149<def> = MUL %vreg143, %vreg148; GR32Bit:%vreg149,%vreg143,%vreg148
2020B		  * %vreg150<def> = ADD %vreg149, %vreg145; GR32Bit:%vreg150,%vreg149,%vreg145
2020B		  * %vreg151<def> = ADD %vreg150, %vreg147; GR32Bit:%vreg151,%vreg150,%vreg147
2020B		  * %vreg152<def> = MUL %vreg151, %vreg140; GR32Bit:%vreg152,%vreg151,%vreg140
2020B		  * %vreg153<def> = ADD %vreg152, %vreg139; GR32Bit:%vreg153,%vreg152,%vreg139
2020B		  * %vreg154<def> = FLW %t5, 0; FP32Bit:%vreg154
2020B		  * FSW %vreg154, %vreg153, 0; FP32Bit:%vreg154 GR32Bit:%vreg153
2020B		  * %vreg155<def> = LUI 1; GR32Bit:%vreg155
2020B		  * WRITEPM %vreg155, %vreg134, 0; GR32Bit:%vreg155,%vreg134
2020B		  * FDELETE %t4, 0
2020B		  * END 0
2020B		  * %zero<def> = ADDI %zero, 0
2020B		  * %zero<def> = ADDI %zero, 0
2312B		%vreg156<def> = LUI 1; GR32Bit:%vreg156
2312B		  * %vreg157<def> = DREADPM %vreg156, 0; GR32Bit:%vreg157,%vreg156
2312B		  * %vreg158<def> = LUI 1048575; GR32Bit:%vreg158
2312B		  * %a5<def> = LUI 4095
2312B		  * %a5<def> = SRLI %a5<internal>, 12
2312B		  * ADD %vreg158, %vreg158, %a5; GR32Bit:%vreg158
2312B		  * SYNC %vreg157, %vreg158, 60; GR32Bit:%vreg157,%vreg158
2312B		  * END 0
2312B		  * %zero<def> = ADDI %zero, 0
2312B		  * %zero<def> = ADDI %zero, 0
2416B		END 0
2416B		  * %zero<def> = ADDI %zero, 0
2416B		  * %zero<def> = ADDI %zero, 0
2440B		END 0
2440B		  * %zero<def> = ADDI %zero, 0
2440B		  * %zero<def> = ADDI %zero, 0

# End machine code for function po_calculation3.

********** COMPUTING LIVE DEBUG VARIABLES: po_calculation3 **********
********** DEBUG VARIABLES **********
********** Compute Spill Weights **********
********** Function: po_calculation3
********** GREEDY REGISTER ALLOCATION **********
********** Function: po_calculation3

selectOrSplit GR32Bit:%vreg106 [880r,1680B:0)  0@880r
assigning %vreg106 to %t0: t0

selectOrSplit GR32Bit:%vreg118 [912r,1680B:0)  0@912r
assigning %vreg118 to %t1: t1

selectOrSplit GR32Bit:%vreg109 [1024r,1680B:0)  0@1024r
assigning %vreg109 to %t2: t2

selectOrSplit GR32Bit:%vreg112 [1144r,1680B:0)  0@1144r
assigning %vreg112 to %fp: fp

selectOrSplit GR32Bit:%vreg121 [1176r,1680B:0)  0@1176r
assigning %vreg121 to %a0: a0

selectOrSplit GR32Bit:%vreg134 [2084r,2272r:0)  0@2084r
assigning %vreg134 to %t0: t0

selectOrSplit GR32Bit:%vreg115 [1512r,1680B:0)  0@1512r
assigning %vreg115 to %a1: a1

selectOrSplit GR32Bit:%vreg20 [1684r,1832r:0)  0@1684r
assigning %vreg20 to %t0: t0

selectOrSplit GR32Bit:%vreg157 [2344r,2472B:0)  0@2344r
assigning %vreg157 to %t0: t0

selectOrSplit GR32Bit:%vreg33 [28r,140r:0)  0@28r
assigning %vreg33 to %t0: t0

selectOrSplit GR32Bit:%vreg52 [236r,348r:0)  0@236r
assigning %vreg52 to %t0: t0

selectOrSplit GR32Bit:%vreg71 [388r,500r:0)  0@388r
assigning %vreg71 to %t0: t0

selectOrSplit GR32Bit:%vreg90 [540r,652r:0)  0@540r
assigning %vreg90 to %t0: t0

selectOrSplit GR32Bit:%vreg139 [2128r,2240r:0)  0@2128r
assigning %vreg139 to %t1: t1

selectOrSplit GR32Bit:%vreg34 [36r,132r:0)  0@36r
assigning %vreg34 to %t1: t1

selectOrSplit GR32Bit:%vreg53 [244r,340r:0)  0@244r
assigning %vreg53 to %t1: t1

selectOrSplit GR32Bit:%vreg72 [396r,492r:0)  0@396r
assigning %vreg72 to %t1: t1

selectOrSplit GR32Bit:%vreg91 [548r,644r:0)  0@548r
assigning %vreg91 to %t1: t1

selectOrSplit GR32Bit:%vreg140 [2136r,2232r:0)  0@2136r
assigning %vreg140 to %t2: t2

selectOrSplit GR32Bit:%vreg6 [744r,832r:0)  0@744r
assigning %vreg6 to %t0: t0

selectOrSplit GR32Bit:%vreg130 [1232r,1320r:0)  0@1232r
assigning %vreg130 to %a1: a1

selectOrSplit GR32Bit:%vreg5 [756r,832r:0)  0@756r
assigning %vreg5 to %t1: t1

selectOrSplit GR32Bit:%vreg127 [1216r,1280r:0)  0@1216r
assigning %vreg127 to %a2: a2

selectOrSplit GR32Bit:%vreg12 [2020r,2080r:0)  0@2020r
assigning %vreg12 to %t0: t0

selectOrSplit FP32Bit:%vreg22 [1760r,1816r:0)  0@1760r
assigning %vreg22 to %ft1: ft1

selectOrSplit GR32Bit:%vreg35 [44r,92r:0)  0@44r
assigning %vreg35 to %t2: t2

selectOrSplit GR32Bit:%vreg37 [60r,108r:0)  0@60r
assigning %vreg37 to %fp: fp

selectOrSplit GR32Bit:%vreg54 [252r,300r:0)  0@252r
assigning %vreg54 to %t2: t2

selectOrSplit GR32Bit:%vreg56 [268r,316r:0)  0@268r
assigning %vreg56 to %fp: fp

selectOrSplit GR32Bit:%vreg73 [404r,452r:0)  0@404r
assigning %vreg73 to %t2: t2

selectOrSplit GR32Bit:%vreg75 [420r,468r:0)  0@420r
assigning %vreg75 to %fp: fp

selectOrSplit GR32Bit:%vreg92 [556r,604r:0)  0@556r
assigning %vreg92 to %t2: t2

selectOrSplit GR32Bit:%vreg94 [572r,620r:0)  0@572r
assigning %vreg94 to %fp: fp

selectOrSplit GR32Bit:%vreg122 [760r,808r:0)  0@760r
assigning %vreg122 to %t2: t2

selectOrSplit GR32Bit:%vreg141 [2144r,2192r:0)  0@2144r
assigning %vreg141 to %fp: fp

selectOrSplit GR32Bit:%vreg143 [2160r,2208r:0)  0@2160r
assigning %vreg143 to %a0: a0

selectOrSplit GR32Bit:%vreg39 [76r,116r:0)  0@76r
assigning %vreg39 to %a0: a0

selectOrSplit GR32Bit:%vreg58 [284r,324r:0)  0@284r
assigning %vreg58 to %a0: a0

selectOrSplit GR32Bit:%vreg77 [436r,476r:0)  0@436r
assigning %vreg77 to %a0: a0

selectOrSplit GR32Bit:%vreg96 [588r,628r:0)  0@588r
assigning %vreg96 to %a0: a0

selectOrSplit GR32Bit:%vreg124 [776r,816r:0)  0@776r
assigning %vreg124 to %fp: fp

selectOrSplit GR32Bit:%vreg133 [1280r,1320r:0)  0@1280r
assigning %vreg133 to %a2: a2

selectOrSplit GR32Bit:%vreg145 [2176r,2216r:0)  0@2176r
assigning %vreg145 to %a1: a1

selectOrSplit GR32Bit:%vreg7 [2024r,2056r:0)  0@2024r
assigning %vreg7 to %t1: t1

selectOrSplit GR32Bit:%vreg14 [1736r,1768r:0)  0@1736r
assigning %vreg14 to %t1: t1

selectOrSplit GR32Bit:%vreg15 [1720r,1752r:0)  0@1720r
assigning %vreg15 to %t2: t2

selectOrSplit FP32Bit:%vreg19 [1784r,1816r:0)  0@1784r
assigning %vreg19 to %ft2: ft2

selectOrSplit GR32Bit:%vreg21 [1728r,1760r:0)  0@1728r
assigning %vreg21 to %fp: fp

selectOrSplit GR32Bit:%vreg41 [92r,124r:0)  0@92r
assigning %vreg41 to %t2: t2

selectOrSplit GR32Bit:%vreg60 [300r,332r:0)  0@300r
assigning %vreg60 to %t2: t2

selectOrSplit GR32Bit:%vreg79 [452r,484r:0)  0@452r
assigning %vreg79 to %t2: t2

selectOrSplit GR32Bit:%vreg98 [604r,636r:0)  0@604r
assigning %vreg98 to %t2: t2

selectOrSplit GR32Bit:%vreg126 [792r,824r:0)  0@792r
assigning %vreg126 to %a0: a0

selectOrSplit GR32Bit:%vreg147 [2192r,2224r:0)  0@2192r
assigning %vreg147 to %fp: fp

selectOrSplit GR32Bit:%vreg156 [2312r,2344r:0)  0@2312r
assigning %vreg156 to %t0: t0

selectOrSplit GR32Bit:%vreg13 [1712r,1736r:0)  0@1712r
assigning %vreg13 to %t1: t1

selectOrSplit GR32Bit:%vreg16 [1752r,1776r:0)  0@1752r
assigning %vreg16 to %t2: t2

selectOrSplit GR32Bit:%vreg25 [1848r,1872r:0)  0@1848r
assigning %vreg25 to %t0: t0

selectOrSplit GR32Bit:%vreg49 [212r,236r:0)  0@212r
assigning %vreg49 to %t0: t0

selectOrSplit GR32Bit:%vreg68 [364r,388r:0)  0@364r
assigning %vreg68 to %t0: t0

selectOrSplit GR32Bit:%vreg87 [516r,540r:0)  0@516r
assigning %vreg87 to %t0: t0

selectOrSplit GR32Bit:%vreg123 [944r,968r:0)  0@944r
assigning %vreg123 to %t2: t2

selectOrSplit GR32Bit:%vreg125 [1064r,1088r:0)  0@1064r
assigning %vreg125 to %fp: fp

selectOrSplit GR32Bit:%vreg136 [2104r,2128r:0)  0@2104r
assigning %vreg136 to %t1: t1

selectOrSplit GR32Bit:%vreg9 [2028r,2048r:0)  0@2028r
assigning %vreg9 to %t2: t2

selectOrSplit GR32Bit:%vreg1 [164r,180r:0)  0@164r
assigning %vreg1 to %t0: t0

selectOrSplit GR32Bit:%vreg8 [2032r,2048r:0)  0@2032r
assigning %vreg8 to %fp: fp

selectOrSplit GR32Bit:%vreg10 [2048r,2064r:0)  0@2048r
assigning %vreg10 to %t2: t2

selectOrSplit FP32Bit:%vreg11 [2064r,2080r:0)  0@2064r
assigning %vreg11 to %ft1: ft1

selectOrSplit GR32Bit:%vreg30 [12r,28r:0)  0@12r
assigning %vreg30 to %t0: t0

selectOrSplit GR32Bit:%vreg128 [960r,976r:0)  0@960r
assigning %vreg128 to %fp: fp

selectOrSplit GR32Bit:%vreg129 [1080r,1096r:0)  0@1080r
assigning %vreg129 to %a0: a0

selectOrSplit GR32Bit:%vreg153 [2240r,2256r:0)  0@2240r
assigning %vreg153 to %t1: t1

selectOrSplit GR32Bit:%vreg0 [172r,180r:0)  0@172r
assigning %vreg0 to %t1: t1

selectOrSplit GR32Bit:%vreg2 [148r,156r:0)  0@148r
assigning %vreg2 to %t0: t0

selectOrSplit GR32Bit:%vreg3 [188r,196r:0)  0@188r
assigning %vreg3 to %t0: t0

selectOrSplit GR32Bit:%vreg4 [748r,756r:0)  0@748r
assigning %vreg4 to %t1: t1

selectOrSplit GR32Bit:%vreg17 [1768r,1776r:0)  0@1768r
assigning %vreg17 to %t1: t1

selectOrSplit GR32Bit:%vreg18 [1776r,1784r:0)  0@1776r
assigning %vreg18 to %t1: t1

selectOrSplit FP32Bit:%vreg23 [1816r,1824r:0)  0@1816r
assigning %vreg23 to %ft1: ft1

selectOrSplit GR32Bit:%vreg24 [1824r,1832r:0)  0@1824r
assigning %vreg24 to %t1: t1

selectOrSplit GR32Bit:%vreg26 [1856r,1864r:0)  0@1856r
assigning %vreg26 to %t1: t1

selectOrSplit GR32Bit:%vreg27 [1864r,1872r:0)  0@1864r
assigning %vreg27 to %t1: t1

selectOrSplit GR32Bit:%vreg32 [20r,28r:0)  0@20r
assigning %vreg32 to %t1: t1

selectOrSplit GR32Bit:%vreg36 [52r,60r:0)  0@52r
assigning %vreg36 to %fp: fp

selectOrSplit GR32Bit:%vreg38 [68r,76r:0)  0@68r
assigning %vreg38 to %a0: a0

selectOrSplit GR32Bit:%vreg40 [84r,92r:0)  0@84r
assigning %vreg40 to %a1: a1

selectOrSplit GR32Bit:%vreg42 [100r,108r:0)  0@100r
assigning %vreg42 to %a1: a1

selectOrSplit GR32Bit:%vreg43 [108r,116r:0)  0@108r
assigning %vreg43 to %fp: fp

selectOrSplit GR32Bit:%vreg44 [116r,124r:0)  0@116r
assigning %vreg44 to %fp: fp

selectOrSplit GR32Bit:%vreg45 [124r,132r:0)  0@124r
assigning %vreg45 to %t2: t2

selectOrSplit GR32Bit:%vreg46 [132r,140r:0)  0@132r
assigning %vreg46 to %t1: t1

selectOrSplit GR32Bit:%vreg50 [220r,228r:0)  0@220r
assigning %vreg50 to %t1: t1

selectOrSplit GR32Bit:%vreg51 [228r,236r:0)  0@228r
assigning %vreg51 to %t1: t1

selectOrSplit GR32Bit:%vreg55 [260r,268r:0)  0@260r
assigning %vreg55 to %fp: fp

selectOrSplit GR32Bit:%vreg57 [276r,284r:0)  0@276r
assigning %vreg57 to %a0: a0

selectOrSplit GR32Bit:%vreg59 [292r,300r:0)  0@292r
assigning %vreg59 to %a1: a1

selectOrSplit GR32Bit:%vreg61 [308r,316r:0)  0@308r
assigning %vreg61 to %a1: a1

selectOrSplit GR32Bit:%vreg62 [316r,324r:0)  0@316r
assigning %vreg62 to %fp: fp

selectOrSplit GR32Bit:%vreg63 [324r,332r:0)  0@324r
assigning %vreg63 to %fp: fp

selectOrSplit GR32Bit:%vreg64 [332r,340r:0)  0@332r
assigning %vreg64 to %t2: t2

selectOrSplit GR32Bit:%vreg65 [340r,348r:0)  0@340r
assigning %vreg65 to %t1: t1

selectOrSplit GR32Bit:%vreg69 [372r,380r:0)  0@372r
assigning %vreg69 to %t1: t1

selectOrSplit GR32Bit:%vreg70 [380r,388r:0)  0@380r
assigning %vreg70 to %t1: t1

selectOrSplit GR32Bit:%vreg74 [412r,420r:0)  0@412r
assigning %vreg74 to %fp: fp

selectOrSplit GR32Bit:%vreg76 [428r,436r:0)  0@428r
assigning %vreg76 to %a0: a0

selectOrSplit GR32Bit:%vreg78 [444r,452r:0)  0@444r
assigning %vreg78 to %a1: a1

selectOrSplit GR32Bit:%vreg80 [460r,468r:0)  0@460r
assigning %vreg80 to %a1: a1

selectOrSplit GR32Bit:%vreg81 [468r,476r:0)  0@468r
assigning %vreg81 to %fp: fp

selectOrSplit GR32Bit:%vreg82 [476r,484r:0)  0@476r
assigning %vreg82 to %fp: fp

selectOrSplit GR32Bit:%vreg83 [484r,492r:0)  0@484r
assigning %vreg83 to %t2: t2

selectOrSplit GR32Bit:%vreg84 [492r,500r:0)  0@492r
assigning %vreg84 to %t1: t1

selectOrSplit GR32Bit:%vreg88 [524r,532r:0)  0@524r
assigning %vreg88 to %t1: t1

selectOrSplit GR32Bit:%vreg89 [532r,540r:0)  0@532r
assigning %vreg89 to %t1: t1

selectOrSplit GR32Bit:%vreg93 [564r,572r:0)  0@564r
assigning %vreg93 to %fp: fp

selectOrSplit GR32Bit:%vreg95 [580r,588r:0)  0@580r
assigning %vreg95 to %a0: a0

selectOrSplit GR32Bit:%vreg97 [596r,604r:0)  0@596r
assigning %vreg97 to %a1: a1

selectOrSplit GR32Bit:%vreg99 [612r,620r:0)  0@612r
assigning %vreg99 to %a1: a1

selectOrSplit GR32Bit:%vreg100 [620r,628r:0)  0@620r
assigning %vreg100 to %fp: fp

selectOrSplit GR32Bit:%vreg101 [628r,636r:0)  0@628r
assigning %vreg101 to %fp: fp

selectOrSplit GR32Bit:%vreg102 [636r,644r:0)  0@636r
assigning %vreg102 to %t2: t2

selectOrSplit GR32Bit:%vreg103 [644r,652r:0)  0@644r
assigning %vreg103 to %t1: t1

selectOrSplit GR32Bit:%vreg104 [856r,864r:0)  0@856r
assigning %vreg104 to %t0: t0

selectOrSplit GR32Bit:%vreg105 [872r,880r:0)  0@872r
assigning %vreg105 to %t0: t0

selectOrSplit GR32Bit:%vreg107 [1000r,1008r:0)  0@1000r
assigning %vreg107 to %t2: t2

selectOrSplit GR32Bit:%vreg108 [1016r,1024r:0)  0@1016r
assigning %vreg108 to %t2: t2

selectOrSplit GR32Bit:%vreg110 [1120r,1128r:0)  0@1120r
assigning %vreg110 to %fp: fp

selectOrSplit GR32Bit:%vreg111 [1136r,1144r:0)  0@1136r
assigning %vreg111 to %fp: fp

selectOrSplit GR32Bit:%vreg113 [1488r,1496r:0)  0@1488r
assigning %vreg113 to %a1: a1

selectOrSplit GR32Bit:%vreg114 [1504r,1512r:0)  0@1504r
assigning %vreg114 to %a1: a1

selectOrSplit GR32Bit:%vreg116 [888r,896r:0)  0@888r
assigning %vreg116 to %t1: t1

selectOrSplit GR32Bit:%vreg117 [904r,912r:0)  0@904r
assigning %vreg117 to %t1: t1

selectOrSplit GR32Bit:%vreg119 [1152r,1160r:0)  0@1152r
assigning %vreg119 to %a0: a0

selectOrSplit GR32Bit:%vreg120 [1168r,1176r:0)  0@1168r
assigning %vreg120 to %a0: a0

selectOrSplit GR32Bit:%vreg131 [968r,976r:0)  0@968r
assigning %vreg131 to %t2: t2

selectOrSplit GR32Bit:%vreg132 [1088r,1096r:0)  0@1088r
assigning %vreg132 to %fp: fp

selectOrSplit GR32Bit:%vreg135 [2088r,2096r:0)  0@2088r
assigning %vreg135 to %t1: t1

selectOrSplit GR32Bit:%vreg137 [2112r,2120r:0)  0@2112r
assigning %vreg137 to %t2: t2

selectOrSplit GR32Bit:%vreg138 [2120r,2128r:0)  0@2120r
assigning %vreg138 to %t2: t2

selectOrSplit GR32Bit:%vreg142 [2152r,2160r:0)  0@2152r
assigning %vreg142 to %a0: a0

selectOrSplit GR32Bit:%vreg144 [2168r,2176r:0)  0@2168r
assigning %vreg144 to %a1: a1

selectOrSplit GR32Bit:%vreg146 [2184r,2192r:0)  0@2184r
assigning %vreg146 to %a2: a2

selectOrSplit GR32Bit:%vreg148 [2200r,2208r:0)  0@2200r
assigning %vreg148 to %a2: a2

selectOrSplit GR32Bit:%vreg149 [2208r,2216r:0)  0@2208r
assigning %vreg149 to %a0: a0

selectOrSplit GR32Bit:%vreg150 [2216r,2224r:0)  0@2216r
assigning %vreg150 to %a0: a0

selectOrSplit GR32Bit:%vreg151 [2224r,2232r:0)  0@2224r
assigning %vreg151 to %fp: fp

selectOrSplit GR32Bit:%vreg152 [2232r,2240r:0)  0@2232r
assigning %vreg152 to %t2: t2

selectOrSplit FP32Bit:%vreg154 [2248r,2256r:0)  0@2248r
assigning %vreg154 to %ft1: ft1

selectOrSplit GR32Bit:%vreg155 [2264r,2272r:0)  0@2264r
assigning %vreg155 to %t1: t1

selectOrSplit GR32Bit:%vreg158 [2352r,2360r:0)  0@2352r
assigning %vreg158 to %t1: t1

selectOrSplit GR32Bit:%vreg31 [16r,20r:0)  0@16r
assigning %vreg31 to %t1: t1
********** REWRITE VIRTUAL REGISTERS **********
********** Function: po_calculation3
********** REGISTER MAP **********
[%vreg0 -> %t1] GR32Bit
[%vreg1 -> %t0] GR32Bit
[%vreg2 -> %t0] GR32Bit
[%vreg3 -> %t0] GR32Bit
[%vreg4 -> %t1] GR32Bit
[%vreg5 -> %t1] GR32Bit
[%vreg6 -> %t0] GR32Bit
[%vreg7 -> %t1] GR32Bit
[%vreg8 -> %fp] GR32Bit
[%vreg9 -> %t2] GR32Bit
[%vreg10 -> %t2] GR32Bit
[%vreg11 -> %ft1] FP32Bit
[%vreg12 -> %t0] GR32Bit
[%vreg13 -> %t1] GR32Bit
[%vreg14 -> %t1] GR32Bit
[%vreg15 -> %t2] GR32Bit
[%vreg16 -> %t2] GR32Bit
[%vreg17 -> %t1] GR32Bit
[%vreg18 -> %t1] GR32Bit
[%vreg19 -> %ft2] FP32Bit
[%vreg20 -> %t0] GR32Bit
[%vreg21 -> %fp] GR32Bit
[%vreg22 -> %ft1] FP32Bit
[%vreg23 -> %ft1] FP32Bit
[%vreg24 -> %t1] GR32Bit
[%vreg25 -> %t0] GR32Bit
[%vreg26 -> %t1] GR32Bit
[%vreg27 -> %t1] GR32Bit
[%vreg30 -> %t0] GR32Bit
[%vreg31 -> %t1] GR32Bit
[%vreg32 -> %t1] GR32Bit
[%vreg33 -> %t0] GR32Bit
[%vreg34 -> %t1] GR32Bit
[%vreg35 -> %t2] GR32Bit
[%vreg36 -> %fp] GR32Bit
[%vreg37 -> %fp] GR32Bit
[%vreg38 -> %a0] GR32Bit
[%vreg39 -> %a0] GR32Bit
[%vreg40 -> %a1] GR32Bit
[%vreg41 -> %t2] GR32Bit
[%vreg42 -> %a1] GR32Bit
[%vreg43 -> %fp] GR32Bit
[%vreg44 -> %fp] GR32Bit
[%vreg45 -> %t2] GR32Bit
[%vreg46 -> %t1] GR32Bit
[%vreg49 -> %t0] GR32Bit
[%vreg50 -> %t1] GR32Bit
[%vreg51 -> %t1] GR32Bit
[%vreg52 -> %t0] GR32Bit
[%vreg53 -> %t1] GR32Bit
[%vreg54 -> %t2] GR32Bit
[%vreg55 -> %fp] GR32Bit
[%vreg56 -> %fp] GR32Bit
[%vreg57 -> %a0] GR32Bit
[%vreg58 -> %a0] GR32Bit
[%vreg59 -> %a1] GR32Bit
[%vreg60 -> %t2] GR32Bit
[%vreg61 -> %a1] GR32Bit
[%vreg62 -> %fp] GR32Bit
[%vreg63 -> %fp] GR32Bit
[%vreg64 -> %t2] GR32Bit
[%vreg65 -> %t1] GR32Bit
[%vreg68 -> %t0] GR32Bit
[%vreg69 -> %t1] GR32Bit
[%vreg70 -> %t1] GR32Bit
[%vreg71 -> %t0] GR32Bit
[%vreg72 -> %t1] GR32Bit
[%vreg73 -> %t2] GR32Bit
[%vreg74 -> %fp] GR32Bit
[%vreg75 -> %fp] GR32Bit
[%vreg76 -> %a0] GR32Bit
[%vreg77 -> %a0] GR32Bit
[%vreg78 -> %a1] GR32Bit
[%vreg79 -> %t2] GR32Bit
[%vreg80 -> %a1] GR32Bit
[%vreg81 -> %fp] GR32Bit
[%vreg82 -> %fp] GR32Bit
[%vreg83 -> %t2] GR32Bit
[%vreg84 -> %t1] GR32Bit
[%vreg87 -> %t0] GR32Bit
[%vreg88 -> %t1] GR32Bit
[%vreg89 -> %t1] GR32Bit
[%vreg90 -> %t0] GR32Bit
[%vreg91 -> %t1] GR32Bit
[%vreg92 -> %t2] GR32Bit
[%vreg93 -> %fp] GR32Bit
[%vreg94 -> %fp] GR32Bit
[%vreg95 -> %a0] GR32Bit
[%vreg96 -> %a0] GR32Bit
[%vreg97 -> %a1] GR32Bit
[%vreg98 -> %t2] GR32Bit
[%vreg99 -> %a1] GR32Bit
[%vreg100 -> %fp] GR32Bit
[%vreg101 -> %fp] GR32Bit
[%vreg102 -> %t2] GR32Bit
[%vreg103 -> %t1] GR32Bit
[%vreg104 -> %t0] GR32Bit
[%vreg105 -> %t0] GR32Bit
[%vreg106 -> %t0] GR32Bit
[%vreg107 -> %t2] GR32Bit
[%vreg108 -> %t2] GR32Bit
[%vreg109 -> %t2] GR32Bit
[%vreg110 -> %fp] GR32Bit
[%vreg111 -> %fp] GR32Bit
[%vreg112 -> %fp] GR32Bit
[%vreg113 -> %a1] GR32Bit
[%vreg114 -> %a1] GR32Bit
[%vreg115 -> %a1] GR32Bit
[%vreg116 -> %t1] GR32Bit
[%vreg117 -> %t1] GR32Bit
[%vreg118 -> %t1] GR32Bit
[%vreg119 -> %a0] GR32Bit
[%vreg120 -> %a0] GR32Bit
[%vreg121 -> %a0] GR32Bit
[%vreg122 -> %t2] GR32Bit
[%vreg123 -> %t2] GR32Bit
[%vreg124 -> %fp] GR32Bit
[%vreg125 -> %fp] GR32Bit
[%vreg126 -> %a0] GR32Bit
[%vreg127 -> %a2] GR32Bit
[%vreg128 -> %fp] GR32Bit
[%vreg129 -> %a0] GR32Bit
[%vreg130 -> %a1] GR32Bit
[%vreg131 -> %t2] GR32Bit
[%vreg132 -> %fp] GR32Bit
[%vreg133 -> %a2] GR32Bit
[%vreg134 -> %t0] GR32Bit
[%vreg135 -> %t1] GR32Bit
[%vreg136 -> %t1] GR32Bit
[%vreg137 -> %t2] GR32Bit
[%vreg138 -> %t2] GR32Bit
[%vreg139 -> %t1] GR32Bit
[%vreg140 -> %t2] GR32Bit
[%vreg141 -> %fp] GR32Bit
[%vreg142 -> %a0] GR32Bit
[%vreg143 -> %a0] GR32Bit
[%vreg144 -> %a1] GR32Bit
[%vreg145 -> %a1] GR32Bit
[%vreg146 -> %a2] GR32Bit
[%vreg147 -> %fp] GR32Bit
[%vreg148 -> %a2] GR32Bit
[%vreg149 -> %a0] GR32Bit
[%vreg150 -> %a0] GR32Bit
[%vreg151 -> %fp] GR32Bit
[%vreg152 -> %t2] GR32Bit
[%vreg153 -> %t1] GR32Bit
[%vreg154 -> %ft1] FP32Bit
[%vreg155 -> %t1] GR32Bit
[%vreg156 -> %t0] GR32Bit
[%vreg157 -> %t0] GR32Bit
[%vreg158 -> %t1] GR32Bit

0B	BB#0: derived from LLVM BB %po_calculation3.entry
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg30<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg30
4B		  * %vreg31<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg31
4B		  * %vreg32<def> = SRLI %vreg31<kill>, 12; GR32Bit:%vreg32,%vreg31
4B		  * %vreg33<def> = ADD %vreg30<kill>, %vreg32<kill>; GR32Bit:%vreg33,%vreg30,%vreg32
4B		  * %vreg34<def> = ADDI %zero, 20; GR32Bit:%vreg34
4B		  * %vreg35<def> = SRLI %t5, 22; GR32Bit:%vreg35
4B		  * %vreg36<def> = SRLI %t5, 12; GR32Bit:%vreg36
4B		  * %vreg37<def> = ANDI %vreg36<kill>, 15; GR32Bit:%vreg37,%vreg36
4B		  * %vreg38<def> = SRLI %t5, 6; GR32Bit:%vreg38
4B		  * %vreg39<def> = ANDI %vreg38<kill>, 63; GR32Bit:%vreg39,%vreg38
4B		  * %vreg40<def> = ADDI %zero, 832; GR32Bit:%vreg40
4B		  * %vreg41<def> = MUL %vreg35<kill>, %vreg40<kill>; GR32Bit:%vreg41,%vreg35,%vreg40
4B		  * %vreg42<def> = ADDI %zero, 52; GR32Bit:%vreg42
4B		  * %vreg43<def> = MUL %vreg37<kill>, %vreg42<kill>; GR32Bit:%vreg43,%vreg37,%vreg42
4B		  * %vreg44<def> = ADD %vreg43<kill>, %vreg39<kill>; GR32Bit:%vreg44,%vreg43,%vreg39
4B		  * %vreg45<def> = ADD %vreg44<kill>, %vreg41<kill>; GR32Bit:%vreg45,%vreg44,%vreg41
4B		  * %vreg46<def> = MUL %vreg45<kill>, %vreg34<kill>; GR32Bit:%vreg46,%vreg45,%vreg34
4B		  * %t5<def> = ADD %vreg33<kill>, %vreg46<kill>; GR32Bit:%vreg33,%vreg46
4B		  * %vreg2<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg2
4B		  * SW %zero, %vreg2<kill>, 0; mem:ST4[%3] GR32Bit:%vreg2
4B		  * %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
4B		  * %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
4B		  * SW %vreg1<kill>, %vreg0<kill>, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
4B		  * %vreg3<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg3
4B		  * SW %zero, %vreg3<kill>, 0; mem:ST4[%4] GR32Bit:%vreg3
204B		%t4<def> = ADD %t5, %zero
204B		  * %vreg49<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg49
204B		  * %vreg50<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg50
204B		  * %vreg51<def> = SRLI %vreg50<kill>, 12; GR32Bit:%vreg51,%vreg50
204B		  * %vreg52<def> = ADD %vreg49<kill>, %vreg51<kill>; GR32Bit:%vreg52,%vreg49,%vreg51
204B		  * %vreg53<def> = ADDI %zero, 20; GR32Bit:%vreg53
204B		  * %vreg54<def> = SRLI %t5, 22; GR32Bit:%vreg54
204B		  * %vreg55<def> = SRLI %t5, 12; GR32Bit:%vreg55
204B		  * %vreg56<def> = ANDI %vreg55<kill>, 15; GR32Bit:%vreg56,%vreg55
204B		  * %vreg57<def> = SRLI %t5, 6; GR32Bit:%vreg57
204B		  * %vreg58<def> = ANDI %vreg57<kill>, 63; GR32Bit:%vreg58,%vreg57
204B		  * %vreg59<def> = ADDI %zero, 832; GR32Bit:%vreg59
204B		  * %vreg60<def> = MUL %vreg54<kill>, %vreg59<kill>; GR32Bit:%vreg60,%vreg54,%vreg59
204B		  * %vreg61<def> = ADDI %zero, 52; GR32Bit:%vreg61
204B		  * %vreg62<def> = MUL %vreg56<kill>, %vreg61<kill>; GR32Bit:%vreg62,%vreg56,%vreg61
204B		  * %vreg63<def> = ADD %vreg62<kill>, %vreg58<kill>; GR32Bit:%vreg63,%vreg62,%vreg58
204B		  * %vreg64<def> = ADD %vreg63<kill>, %vreg60<kill>; GR32Bit:%vreg64,%vreg63,%vreg60
204B		  * %vreg65<def> = MUL %vreg64<kill>, %vreg53<kill>; GR32Bit:%vreg65,%vreg64,%vreg53
204B		  * %t5<def> = ADD %vreg52<kill>, %vreg65<kill>; GR32Bit:%vreg52,%vreg65
356B		%t4<def> = ADD %t5, %zero
356B		  * %vreg68<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg68
356B		  * %vreg69<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg69
356B		  * %vreg70<def> = SRLI %vreg69<kill>, 12; GR32Bit:%vreg70,%vreg69
356B		  * %vreg71<def> = ADD %vreg68<kill>, %vreg70<kill>; GR32Bit:%vreg71,%vreg68,%vreg70
356B		  * %vreg72<def> = ADDI %zero, 20; GR32Bit:%vreg72
356B		  * %vreg73<def> = SRLI %t5, 22; GR32Bit:%vreg73
356B		  * %vreg74<def> = SRLI %t5, 12; GR32Bit:%vreg74
356B		  * %vreg75<def> = ANDI %vreg74<kill>, 15; GR32Bit:%vreg75,%vreg74
356B		  * %vreg76<def> = SRLI %t5, 6; GR32Bit:%vreg76
356B		  * %vreg77<def> = ANDI %vreg76<kill>, 63; GR32Bit:%vreg77,%vreg76
356B		  * %vreg78<def> = ADDI %zero, 832; GR32Bit:%vreg78
356B		  * %vreg79<def> = MUL %vreg73<kill>, %vreg78<kill>; GR32Bit:%vreg79,%vreg73,%vreg78
356B		  * %vreg80<def> = ADDI %zero, 52; GR32Bit:%vreg80
356B		  * %vreg81<def> = MUL %vreg75<kill>, %vreg80<kill>; GR32Bit:%vreg81,%vreg75,%vreg80
356B		  * %vreg82<def> = ADD %vreg81<kill>, %vreg77<kill>; GR32Bit:%vreg82,%vreg81,%vreg77
356B		  * %vreg83<def> = ADD %vreg82<kill>, %vreg79<kill>; GR32Bit:%vreg83,%vreg82,%vreg79
356B		  * %vreg84<def> = MUL %vreg83<kill>, %vreg72<kill>; GR32Bit:%vreg84,%vreg83,%vreg72
356B		  * %t5<def> = ADD %vreg71<kill>, %vreg84<kill>; GR32Bit:%vreg71,%vreg84
508B		%t4<def> = ADD %t5, %zero
508B		  * %vreg87<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg87
508B		  * %vreg88<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg88
508B		  * %vreg89<def> = SRLI %vreg88<kill>, 12; GR32Bit:%vreg89,%vreg88
508B		  * %vreg90<def> = ADD %vreg87<kill>, %vreg89<kill>; GR32Bit:%vreg90,%vreg87,%vreg89
508B		  * %vreg91<def> = ADDI %zero, 20; GR32Bit:%vreg91
508B		  * %vreg92<def> = SRLI %t5, 22; GR32Bit:%vreg92
508B		  * %vreg93<def> = SRLI %t5, 12; GR32Bit:%vreg93
508B		  * %vreg94<def> = ANDI %vreg93<kill>, 15; GR32Bit:%vreg94,%vreg93
508B		  * %vreg95<def> = SRLI %t5, 6; GR32Bit:%vreg95
508B		  * %vreg96<def> = ANDI %vreg95<kill>, 63; GR32Bit:%vreg96,%vreg95
508B		  * %vreg97<def> = ADDI %zero, 832; GR32Bit:%vreg97
508B		  * %vreg98<def> = MUL %vreg92<kill>, %vreg97<kill>; GR32Bit:%vreg98,%vreg92,%vreg97
508B		  * %vreg99<def> = ADDI %zero, 52; GR32Bit:%vreg99
508B		  * %vreg100<def> = MUL %vreg94<kill>, %vreg99<kill>; GR32Bit:%vreg100,%vreg94,%vreg99
508B		  * %vreg101<def> = ADD %vreg100<kill>, %vreg96<kill>; GR32Bit:%vreg101,%vreg100,%vreg96
508B		  * %vreg102<def> = ADD %vreg101<kill>, %vreg98<kill>; GR32Bit:%vreg102,%vreg101,%vreg98
508B		  * %vreg103<def> = MUL %vreg102<kill>, %vreg91<kill>; GR32Bit:%vreg103,%vreg102,%vreg91
508B		  * %t5<def> = ADD %vreg90<kill>, %vreg103<kill>; GR32Bit:%vreg90,%vreg103
	    Successors according to CFG: BB#1
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 20
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = ADDI %t5, <fi#2>
> SW %zero, %t0<kill>, 0; mem:ST4[%3]
> %t0<def> = ADDI %t5, <fi#-1>
> %t1<def> = ADDI %t5, <fi#1>
> SW %t0<kill>, %t1<kill>, 0; mem:ST4[%2]
> %t0<def> = ADDI %t5, <fi#3>
> SW %zero, %t0<kill>, 0; mem:ST4[%4]
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 20
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 20
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 20
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
740B	BB#1: derived from LLVM BB %po_calculation3.for.cond
	    Predecessors according to CFG: BB#0 BB#3
744B		%vreg6<def> = ADDI %zero, 24; GR32Bit:%vreg6
744B		  * %vreg4<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg4
744B		  * %vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[%3] GR32Bit:%vreg5,%vreg4
744B		  * %vreg122<def> = LUI 1; GR32Bit:%vreg122
744B		  * WRITEPM %vreg122, %vreg5, 0; GR32Bit:%vreg122,%vreg5
744B		  * %vreg124<def> = LUI 2; GR32Bit:%vreg124
744B		  * WRITEPM %vreg124, %vreg5, 0; GR32Bit:%vreg124,%vreg5
744B		  * %vreg126<def> = LUI 3; GR32Bit:%vreg126
744B		  * WRITEPM %vreg126, %vreg5, 0; GR32Bit:%vreg126,%vreg5
744B		  * WRITEPM %vreg122<kill>, %vreg6, 4; GR32Bit:%vreg122,%vreg6
744B		  * WRITEPM %vreg124<kill>, %vreg6, 4; GR32Bit:%vreg124,%vreg6
744B		  * WRITEPM %vreg126<kill>, %vreg6, 4; GR32Bit:%vreg126,%vreg6
744B		  * BGT <BB#4>, %vreg5<kill>, %vreg6<kill>; GR32Bit:%vreg5,%vreg6
744B		  * %zero<def> = ADDI %zero, 0
744B		  * %zero<def> = ADDI %zero, 0
744B		  * %vreg104<def> = LUI 1; GR32Bit:%vreg104
744B		  * WRITEPM %vreg104<kill>, %vreg104, 192; GR32Bit:%vreg104
744B		  * %vreg105<def> = LUI 0; GR32Bit:%vreg105
744B		  * %vreg106<def> = DREADPM %vreg105<kill>, 188; GR32Bit:%vreg106,%vreg105
744B		  * %vreg116<def> = LUI 2; GR32Bit:%vreg116
744B		  * WRITEPM %vreg116<kill>, %vreg116, 176; GR32Bit:%vreg116
744B		  * %vreg117<def> = LUI 0; GR32Bit:%vreg117
744B		  * %vreg118<def> = DREADPM %vreg117<kill>, 168; GR32Bit:%vreg118,%vreg117
744B		  * JAL <BB#2>
744B		  * %zero<def> = ADDI %zero, 0
744B		  * %zero<def> = ADDI %zero, 0
944B		%vreg123<def> = LUI 1; GR32Bit:%vreg123
944B		  * %vreg128<def> = DREADPM %vreg123, 0; GR32Bit:%vreg128,%vreg123
944B		  * %vreg131<def> = DREADPM %vreg123<kill>, 4; GR32Bit:%vreg131,%vreg123
944B		  * BGT <BB#4>, %vreg128<kill>, %vreg131<kill>; GR32Bit:%vreg128,%vreg131
944B		  * %zero<def> = ADDI %zero, 0
944B		  * %zero<def> = ADDI %zero, 0
944B		  * %vreg107<def> = LUI 0; GR32Bit:%vreg107
944B		  * WRITEPM %vreg107<kill>, %vreg107, 188; GR32Bit:%vreg107
944B		  * %vreg108<def> = LUI 1; GR32Bit:%vreg108
944B		  * %vreg109<def> = DREADPM %vreg108<kill>, 192; GR32Bit:%vreg109,%vreg108
944B		  * JAL <BB#2>
944B		  * %zero<def> = ADDI %zero, 0
944B		  * %zero<def> = ADDI %zero, 0
1064B		%vreg125<def> = LUI 2; GR32Bit:%vreg125
1064B		  * %vreg129<def> = DREADPM %vreg125, 0; GR32Bit:%vreg129,%vreg125
1064B		  * %vreg132<def> = DREADPM %vreg125<kill>, 4; GR32Bit:%vreg132,%vreg125
1064B		  * BGT <BB#4>, %vreg129<kill>, %vreg132<kill>; GR32Bit:%vreg129,%vreg132
1064B		  * %zero<def> = ADDI %zero, 0
1064B		  * %zero<def> = ADDI %zero, 0
1064B		  * %vreg110<def> = LUI 3; GR32Bit:%vreg110
1064B		  * WRITEPM %vreg110<kill>, %vreg110, 184; GR32Bit:%vreg110
1064B		  * %vreg111<def> = LUI 2; GR32Bit:%vreg111
1064B		  * %vreg112<def> = DREADPM %vreg111<kill>, 180; GR32Bit:%vreg112,%vreg111
1064B		  * %vreg119<def> = LUI 0; GR32Bit:%vreg119
1064B		  * WRITEPM %vreg119<kill>, %vreg119, 168; GR32Bit:%vreg119
1064B		  * %vreg120<def> = LUI 2; GR32Bit:%vreg120
1064B		  * %vreg121<def> = DREADPM %vreg120<kill>, 176; GR32Bit:%vreg121,%vreg120
1064B		  * JAL <BB#2>
1064B		  * %zero<def> = ADDI %zero, 0
1064B		  * %zero<def> = ADDI %zero, 0
1216B		%vreg127<def> = LUI 3; GR32Bit:%vreg127
1216B		  * %vreg130<def> = DREADPM %vreg127, 0; GR32Bit:%vreg130,%vreg127
1216B		  * %vreg133<def> = DREADPM %vreg127<kill>, 4; GR32Bit:%vreg133,%vreg127
1216B		  * BGT <BB#4>, %vreg130<kill>, %vreg133<kill>; GR32Bit:%vreg130,%vreg133
1216B		  * %zero<def> = ADDI %zero, 0
1216B		  * %zero<def> = ADDI %zero, 0
1216B		  * %vreg113<def> = LUI 2; GR32Bit:%vreg113
1216B		  * WRITEPM %vreg113<kill>, %vreg113, 180; GR32Bit:%vreg113
1216B		  * %vreg114<def> = LUI 3; GR32Bit:%vreg114
1216B		  * %vreg115<def> = DREADPM %vreg114<kill>, 184; GR32Bit:%vreg115,%vreg114
1216B		  * JAL <BB#2>
1216B		  * %zero<def> = ADDI %zero, 0
1216B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#2(124) BB#4(4)
> %t0<def> = ADDI %zero, 24
> %t1<def> = ADDI %t5, <fi#2>
> %t1<def> = LW %t1<kill>, 0; mem:LD4[%3]
> %t2<def> = LUI 1
> WRITEPM %t2, %t1, 0
> %fp<def> = LUI 2
> WRITEPM %fp, %t1, 0
> %a0<def> = LUI 3
> WRITEPM %a0, %t1, 0
> WRITEPM %t2<kill>, %t0, 4
> WRITEPM %fp<kill>, %t0, 4
> WRITEPM %a0<kill>, %t0, 4
> BGT <BB#4>, %t1<kill>, %t0<kill>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 1
> WRITEPM %t0<kill>, %t0, 192
> %t0<def> = LUI 0
> %t0<def> = DREADPM %t0<kill>, 188
> %t1<def> = LUI 2
> WRITEPM %t1<kill>, %t1, 176
> %t1<def> = LUI 0
> %t1<def> = DREADPM %t1<kill>, 168
> JAL <BB#2>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t2<def> = LUI 1
> %fp<def> = DREADPM %t2, 0
> %t2<def> = DREADPM %t2<kill>, 4
> BGT <BB#4>, %fp<kill>, %t2<kill>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t2<def> = LUI 0
> WRITEPM %t2<kill>, %t2, 188
> %t2<def> = LUI 1
> %t2<def> = DREADPM %t2<kill>, 192
> JAL <BB#2>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %fp<def> = LUI 2
> %a0<def> = DREADPM %fp, 0
> %fp<def> = DREADPM %fp<kill>, 4
> BGT <BB#4>, %a0<kill>, %fp<kill>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %fp<def> = LUI 3
> WRITEPM %fp<kill>, %fp, 184
> %fp<def> = LUI 2
> %fp<def> = DREADPM %fp<kill>, 180
> %a0<def> = LUI 0
> WRITEPM %a0<kill>, %a0, 168
> %a0<def> = LUI 2
> %a0<def> = DREADPM %a0<kill>, 176
> JAL <BB#2>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %a2<def> = LUI 3
> %a1<def> = DREADPM %a2, 0
> %a2<def> = DREADPM %a2<kill>, 4
> BGT <BB#4>, %a1<kill>, %a2<kill>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %a1<def> = LUI 2
> WRITEPM %a1<kill>, %a1, 180
> %a1<def> = LUI 3
> %a1<def> = DREADPM %a1<kill>, 184
> JAL <BB#2>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
1680B	BB#2: derived from LLVM BB %po_calculation3.for.body
	    Predecessors according to CFG: BB#1
1684B		%vreg20<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg20
1684B		  * %vreg13<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg13
1684B		  * %vreg15<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg15
1684B		  * %vreg21<def> = LW %vreg20, 0; mem:LD4[%4] GR32Bit:%vreg21,%vreg20
1684B		  * %vreg14<def> = LW %vreg13<kill>, 0; mem:LD4[%3] GR32Bit:%vreg14,%vreg13
1684B		  * %vreg16<def> = LW %vreg15<kill>, 0; mem:LD4[%2] GR32Bit:%vreg16,%vreg15
1684B		  * %vreg22<def> = FCVT_S_W_RDY %vreg21<kill>; FP32Bit:%vreg22 GR32Bit:%vreg21
1684B		  * %vreg17<def> = SLLI %vreg14<kill>, 2; GR32Bit:%vreg17,%vreg14
1684B		  * %vreg18<def> = ADD %vreg17<kill>, %vreg16<kill>; GR32Bit:%vreg18,%vreg17,%vreg16
1684B		  * %vreg19<def> = FLW %vreg18<kill>, 0; mem:LD4[%9] FP32Bit:%vreg19 GR32Bit:%vreg18
1684B		  * %vreg23<def> = FADD_S_RDY %vreg19<kill>, %vreg22<kill>; FP32Bit:%vreg23,%vreg19,%vreg22
1684B		  * %vreg24<def> = FCVT_W_S_RTZ %vreg23<kill>; GR32Bit:%vreg24 FP32Bit:%vreg23
1684B		  * SW %vreg24<kill>, %vreg20<kill>, 0; mem:ST4[%4] GR32Bit:%vreg24,%vreg20
1692B		%zero<def> = ADDI %zero, 0
1696B		%zero<def> = ADDI %zero, 0
1704B		%zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#3
> %t0<def> = ADDI %t5, <fi#3>
> %t1<def> = ADDI %t5, <fi#2>
> %t2<def> = ADDI %t5, <fi#1>
> %fp<def> = LW %t0, 0; mem:LD4[%4]
> %t1<def> = LW %t1<kill>, 0; mem:LD4[%3]
> %t2<def> = LW %t2<kill>, 0; mem:LD4[%2]
> %ft1<def> = FCVT_S_W_RDY %fp<kill>
> %t1<def> = SLLI %t1<kill>, 2
> %t1<def> = ADD %t1<kill>, %t2<kill>
> %ft2<def> = FLW %t1<kill>, 0; mem:LD4[%9]
> %ft1<def> = FADD_S_RDY %ft2<kill>, %ft1<kill>
> %t1<def> = FCVT_W_S_RTZ %ft1<kill>
> SW %t1<kill>, %t0<kill>, 0; mem:ST4[%4]
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
1840B	BB#3: derived from LLVM BB %po_calculation3.for.inc
	    Predecessors according to CFG: BB#2
1848B		%vreg25<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg25
1848B		  * %vreg26<def> = LW %vreg25, 0; mem:LD4[%3] GR32Bit:%vreg26,%vreg25
1848B		  * %vreg27<def> = ADDI %vreg26<kill>, 1; GR32Bit:%vreg27,%vreg26
1848B		  * SW %vreg27<kill>, %vreg25<kill>, 0; mem:ST4[%3] GR32Bit:%vreg27,%vreg25
1848B		  * JAL <BB#1>
1848B		  * %zero<def> = ADDI %zero, 0
1848B		  * %zero<def> = ADDI %zero, 0
1896B		JAL <BB#1>
1896B		  * %zero<def> = ADDI %zero, 0
1896B		  * %zero<def> = ADDI %zero, 0
1920B		JAL <BB#1>
1920B		  * %zero<def> = ADDI %zero, 0
1920B		  * %zero<def> = ADDI %zero, 0
1944B		JAL <BB#1>
1944B		  * %zero<def> = ADDI %zero, 0
1944B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#1
> %t0<def> = ADDI %t5, <fi#2>
> %t1<def> = LW %t0, 0; mem:LD4[%3]
> %t1<def> = ADDI %t1<kill>, 1
> SW %t1<kill>, %t0<kill>, 0; mem:ST4[%3]
> JAL <BB#1>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#1>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#1>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#1>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
2016B	BB#4: derived from LLVM BB %po_calculation3.for.end
	    Predecessors according to CFG: BB#1
2020B		%vreg12<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg12
2020B		  * %vreg7<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg7
2020B		  * %vreg9<def> = ADDI %zero, 25; GR32Bit:%vreg9
2020B		  * %vreg8<def> = LW %vreg7, 0; mem:LD4[%4] GR32Bit:%vreg8,%vreg7
2020B		  * %vreg10<def> = MUL %vreg9<kill>, %vreg8<kill>; GR32Bit:%vreg10,%vreg9,%vreg8
2020B		  * SW %vreg10, %vreg7<kill>, 0; mem:ST4[%4] GR32Bit:%vreg10,%vreg7
2020B		  * %vreg11<def> = FCVT_S_W_RDY %vreg10<kill>; FP32Bit:%vreg11 GR32Bit:%vreg10
2020B		  * FSW %vreg11<kill>, %vreg12<kill>, 0; mem:ST4[%1] FP32Bit:%vreg11 GR32Bit:%vreg12
2020B		  * %vreg134<def> = ADDI %zero, 128; GR32Bit:%vreg134
2020B		  * %vreg135<def> = ADDI %zero, 1; GR32Bit:%vreg135
2020B		  * WRITECM %vreg134, %vreg135<kill>, 60; GR32Bit:%vreg134,%vreg135
2020B		  * %vreg136<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg136
2020B		  * %vreg137<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg137
2020B		  * %vreg138<def> = SRLI %vreg137<kill>, 12; GR32Bit:%vreg138,%vreg137
2020B		  * %vreg139<def> = ADD %vreg136<kill>, %vreg138<kill>; GR32Bit:%vreg139,%vreg136,%vreg138
2020B		  * %vreg140<def> = ADDI %zero, 20; GR32Bit:%vreg140
2020B		  * %vreg141<def> = SRLI %vreg134, 22; GR32Bit:%vreg141,%vreg134
2020B		  * %vreg142<def> = SRLI %vreg134, 12; GR32Bit:%vreg142,%vreg134
2020B		  * %vreg143<def> = ANDI %vreg142<kill>, 15; GR32Bit:%vreg143,%vreg142
2020B		  * %vreg144<def> = SRLI %vreg134, 6; GR32Bit:%vreg144,%vreg134
2020B		  * %vreg145<def> = ANDI %vreg144<kill>, 63; GR32Bit:%vreg145,%vreg144
2020B		  * %vreg146<def> = ADDI %zero, 832; GR32Bit:%vreg146
2020B		  * %vreg147<def> = MUL %vreg141<kill>, %vreg146<kill>; GR32Bit:%vreg147,%vreg141,%vreg146
2020B		  * %vreg148<def> = ADDI %zero, 52; GR32Bit:%vreg148
2020B		  * %vreg149<def> = MUL %vreg143<kill>, %vreg148<kill>; GR32Bit:%vreg149,%vreg143,%vreg148
2020B		  * %vreg150<def> = ADD %vreg149<kill>, %vreg145<kill>; GR32Bit:%vreg150,%vreg149,%vreg145
2020B		  * %vreg151<def> = ADD %vreg150<kill>, %vreg147<kill>; GR32Bit:%vreg151,%vreg150,%vreg147
2020B		  * %vreg152<def> = MUL %vreg151<kill>, %vreg140<kill>; GR32Bit:%vreg152,%vreg151,%vreg140
2020B		  * %vreg153<def> = ADD %vreg152<kill>, %vreg139<kill>; GR32Bit:%vreg153,%vreg152,%vreg139
2020B		  * %vreg154<def> = FLW %t5, 0; FP32Bit:%vreg154
2020B		  * FSW %vreg154<kill>, %vreg153<kill>, 0; FP32Bit:%vreg154 GR32Bit:%vreg153
2020B		  * %vreg155<def> = LUI 1; GR32Bit:%vreg155
2020B		  * WRITEPM %vreg155<kill>, %vreg134<kill>, 0; GR32Bit:%vreg155,%vreg134
2020B		  * FDELETE %t4, 0
2020B		  * END 0
2020B		  * %zero<def> = ADDI %zero, 0
2020B		  * %zero<def> = ADDI %zero, 0
2312B		%vreg156<def> = LUI 1; GR32Bit:%vreg156
2312B		  * %vreg157<def> = DREADPM %vreg156<kill>, 0; GR32Bit:%vreg157,%vreg156
2312B		  * %vreg158<def> = LUI 1048575; GR32Bit:%vreg158
2312B		  * %a5<def> = LUI 4095
2312B		  * %a5<def> = SRLI %a5<internal>, 12
2312B		  * ADD %vreg158, %vreg158, %a5; GR32Bit:%vreg158
2312B		  * SYNC %vreg157, %vreg158<kill>, 60; GR32Bit:%vreg157,%vreg158
2312B		  * END 0
2312B		  * %zero<def> = ADDI %zero, 0
2312B		  * %zero<def> = ADDI %zero, 0
2416B		END 0
2416B		  * %zero<def> = ADDI %zero, 0
2416B		  * %zero<def> = ADDI %zero, 0
2440B		END 0
2440B		  * %zero<def> = ADDI %zero, 0
2440B		  * %zero<def> = ADDI %zero, 0
> %t0<def> = ADDI %t5, <fi#0>
> %t1<def> = ADDI %t5, <fi#3>
> %t2<def> = ADDI %zero, 25
> %fp<def> = LW %t1, 0; mem:LD4[%4]
> %t2<def> = MUL %t2<kill>, %fp<kill>
> SW %t2, %t1<kill>, 0; mem:ST4[%4]
> %ft1<def> = FCVT_S_W_RDY %t2<kill>
> FSW %ft1<kill>, %t0<kill>, 0; mem:ST4[%1]
> %t0<def> = ADDI %zero, 128
> %t1<def> = ADDI %zero, 1
> WRITECM %t0, %t1<kill>, 60
> %t1<def> = LUI <MCSym="%hi("ga#512")">
> %t2<def> = LUI <MCSym="%lo("ga#512")">
> %t2<def> = SRLI %t2<kill>, 12
> %t1<def> = ADD %t1<kill>, %t2<kill>
> %t2<def> = ADDI %zero, 20
> %fp<def> = SRLI %t0, 22
> %a0<def> = SRLI %t0, 12
> %a0<def> = ANDI %a0<kill>, 15
> %a1<def> = SRLI %t0, 6
> %a1<def> = ANDI %a1<kill>, 63
> %a2<def> = ADDI %zero, 832
> %fp<def> = MUL %fp<kill>, %a2<kill>
> %a2<def> = ADDI %zero, 52
> %a0<def> = MUL %a0<kill>, %a2<kill>
> %a0<def> = ADD %a0<kill>, %a1<kill>
> %fp<def> = ADD %a0<kill>, %fp<kill>
> %t2<def> = MUL %fp<kill>, %t2<kill>
> %t1<def> = ADD %t2<kill>, %t1<kill>
> %ft1<def> = FLW %t5, 0
> FSW %ft1<kill>, %t1<kill>, 0
> %t1<def> = LUI 1
> WRITEPM %t1<kill>, %t0<kill>, 0
> FDELETE %t4, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 1
> %t0<def> = DREADPM %t0<kill>, 0
> %t1<def> = LUI 1048575
> %a5<def> = LUI 4095
> %a5<def> = SRLI %a5<internal>, 12
> ADD %t1, %t1, %a5
> SYNC %t0, %t1<kill>, 60
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
********** EMITTING LIVE DEBUG VARIABLES **********
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: po_calculation3
current state of mf:# Machine code for function po_calculation3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %po_calculation3.entry
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 20
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = ADDI %t5, <fi#2>
	  * SW %zero, %t0<kill>, 0; mem:ST4[%3]
	  * %t0<def> = ADDI %t5, <fi#-1>
	  * %t1<def> = ADDI %t5, <fi#1>
	  * SW %t0<kill>, %t1<kill>, 0; mem:ST4[%2]
	  * %t0<def> = ADDI %t5, <fi#3>
	  * SW %zero, %t0<kill>, 0; mem:ST4[%4]
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 20
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 20
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 20
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %po_calculation3.for.cond
    Predecessors according to CFG: BB#0 BB#3
	%t0<def> = ADDI %zero, 24
	  * %t1<def> = ADDI %t5, <fi#2>
	  * %t1<def> = LW %t1<kill>, 0; mem:LD4[%3]
	  * %t2<def> = LUI 1
	  * WRITEPM %t2, %t1, 0
	  * %fp<def> = LUI 2
	  * WRITEPM %fp, %t1, 0
	  * %a0<def> = LUI 3
	  * WRITEPM %a0, %t1, 0
	  * WRITEPM %t2<kill>, %t0, 4
	  * WRITEPM %fp<kill>, %t0, 4
	  * WRITEPM %a0<kill>, %t0, 4
	  * BGT <BB#4>, %t1<kill>, %t0<kill>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * %t0<def> = LUI 1
	  * WRITEPM %t0<kill>, %t0, 192
	  * %t0<def> = LUI 0
	  * %t0<def> = DREADPM %t0<kill>, 188
	  * %t1<def> = LUI 2
	  * WRITEPM %t1<kill>, %t1, 176
	  * %t1<def> = LUI 0
	  * %t1<def> = DREADPM %t1<kill>, 168
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t2<def> = LUI 1
	  * %fp<def> = DREADPM %t2, 0
	  * %t2<def> = DREADPM %t2<kill>, 4
	  * BGT <BB#4>, %fp<kill>, %t2<kill>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * %t2<def> = LUI 0
	  * WRITEPM %t2<kill>, %t2, 188
	  * %t2<def> = LUI 1
	  * %t2<def> = DREADPM %t2<kill>, 192
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%fp<def> = LUI 2
	  * %a0<def> = DREADPM %fp, 0
	  * %fp<def> = DREADPM %fp<kill>, 4
	  * BGT <BB#4>, %a0<kill>, %fp<kill>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * %fp<def> = LUI 3
	  * WRITEPM %fp<kill>, %fp, 184
	  * %fp<def> = LUI 2
	  * %fp<def> = DREADPM %fp<kill>, 180
	  * %a0<def> = LUI 0
	  * WRITEPM %a0<kill>, %a0, 168
	  * %a0<def> = LUI 2
	  * %a0<def> = DREADPM %a0<kill>, 176
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%a2<def> = LUI 3
	  * %a1<def> = DREADPM %a2, 0
	  * %a2<def> = DREADPM %a2<kill>, 4
	  * BGT <BB#4>, %a1<kill>, %a2<kill>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * %a1<def> = LUI 2
	  * WRITEPM %a1<kill>, %a1, 180
	  * %a1<def> = LUI 3
	  * %a1<def> = DREADPM %a1<kill>, 184
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#2(124) BB#4(4)

BB#2: derived from LLVM BB %po_calculation3.for.body
    Predecessors according to CFG: BB#1
	%t0<def> = ADDI %t5, <fi#3>
	  * %t1<def> = ADDI %t5, <fi#2>
	  * %t2<def> = ADDI %t5, <fi#1>
	  * %fp<def> = LW %t0, 0; mem:LD4[%4]
	  * %t1<def> = LW %t1<kill>, 0; mem:LD4[%3]
	  * %t2<def> = LW %t2<kill>, 0; mem:LD4[%2]
	  * %ft1<def> = FCVT_S_W_RDY %fp<kill>
	  * %t1<def> = SLLI %t1<kill>, 2
	  * %t1<def> = ADD %t1<kill>, %t2<kill>
	  * %ft2<def> = FLW %t1<kill>, 0; mem:LD4[%9]
	  * %ft1<def> = FADD_S_RDY %ft2<kill>, %ft1<kill>
	  * %t1<def> = FCVT_W_S_RTZ %ft1<kill>
	  * SW %t1<kill>, %t0<kill>, 0; mem:ST4[%4]
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %po_calculation3.for.inc
    Predecessors according to CFG: BB#2
	%t0<def> = ADDI %t5, <fi#2>
	  * %t1<def> = LW %t0, 0; mem:LD4[%3]
	  * %t1<def> = ADDI %t1<kill>, 1
	  * SW %t1<kill>, %t0<kill>, 0; mem:ST4[%3]
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#1

BB#4: derived from LLVM BB %po_calculation3.for.end
    Predecessors according to CFG: BB#1
	%t0<def> = ADDI %t5, <fi#0>
	  * %t1<def> = ADDI %t5, <fi#3>
	  * %t2<def> = ADDI %zero, 25
	  * %fp<def> = LW %t1, 0; mem:LD4[%4]
	  * %t2<def> = MUL %t2<kill>, %fp<kill>
	  * SW %t2, %t1<kill>, 0; mem:ST4[%4]
	  * %ft1<def> = FCVT_S_W_RDY %t2<kill>
	  * FSW %ft1<kill>, %t0<kill>, 0; mem:ST4[%1]
	  * %t0<def> = ADDI %zero, 128
	  * %t1<def> = ADDI %zero, 1
	  * WRITECM %t0, %t1<kill>, 60
	  * %t1<def> = LUI <MCSym="%hi("ga#512")">
	  * %t2<def> = LUI <MCSym="%lo("ga#512")">
	  * %t2<def> = SRLI %t2<kill>, 12
	  * %t1<def> = ADD %t1<kill>, %t2<kill>
	  * %t2<def> = ADDI %zero, 20
	  * %fp<def> = SRLI %t0, 22
	  * %a0<def> = SRLI %t0, 12
	  * %a0<def> = ANDI %a0<kill>, 15
	  * %a1<def> = SRLI %t0, 6
	  * %a1<def> = ANDI %a1<kill>, 63
	  * %a2<def> = ADDI %zero, 832
	  * %fp<def> = MUL %fp<kill>, %a2<kill>
	  * %a2<def> = ADDI %zero, 52
	  * %a0<def> = MUL %a0<kill>, %a2<kill>
	  * %a0<def> = ADD %a0<kill>, %a1<kill>
	  * %fp<def> = ADD %a0<kill>, %fp<kill>
	  * %t2<def> = MUL %fp<kill>, %t2<kill>
	  * %t1<def> = ADD %t2<kill>, %t1<kill>
	  * %ft1<def> = FLW %t5, 0
	  * FSW %ft1<kill>, %t1<kill>, 0
	  * %t1<def> = LUI 1
	  * WRITEPM %t1<kill>, %t0<kill>, 0
	  * FDELETE %t4, 0
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 1
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * %t1<def> = LUI 1048575
	  * %a5<def> = LUI 4095
	  * %a5<def> = SRLI %a5<internal>, 12
	  * ADD %t1, %t1, %a5
	  * SYNC %t0, %t1<kill>, 60
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0

# End machine code for function po_calculation3.

lowering frame index for func po_calculation3:2 TO VAL:8
lowering frame index for func po_calculation3:-1 TO VAL:16
lowering frame index for func po_calculation3:1 TO VAL:4
lowering frame index for func po_calculation3:3 TO VAL:12
lowering frame index for func po_calculation3:2 TO VAL:8
lowering frame index for func po_calculation3:3 TO VAL:12
lowering frame index for func po_calculation3:2 TO VAL:8
lowering frame index for func po_calculation3:1 TO VAL:4
lowering frame index for func po_calculation3:2 TO VAL:8
lowering frame index for func po_calculation3:0 TO VAL:0
lowering frame index for func po_calculation3:3 TO VAL:12
