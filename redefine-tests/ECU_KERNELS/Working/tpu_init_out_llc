Args: /home/arka/Workspace/work/Git_Compiler_Repo/redefine-tests/ECU_KERNELS/../../..//MM_Compiler_latest/build/Release+Asserts/bin/llc --mattr=+has4ce --mtriple redefine -debug ./Working/tpu_init_HyOpPass.ll -o ./Working/tpu_init.as 

Features:+has4ce
CPU:REDEFINE

CGP: Found      local addrmode: [Base:%0]
Computing probabilities for redefine_start1.return
Computing probabilities for redefine_start1.entry
new hop:redefine_start1
new hyop#0:redefine_start1
new hop:redefine_start2
new hyop#1:redefine_start2
new hop:trp_init3
new hyop#2:trp_init3
problems setting inputs?
skipping abort
source hop:redefine_start1
frame size for hop redefine_start1:4
source hop:redefine_start2
source hop:trp_init3
frame size for hop trp_init3:32
max mem frame size:32
digraph{
redefine_start1[label="Name:redefine_start1,Dom:NULL, PostDom:NULL,Map:0:0, Context frame:0,SyncCount:1"];
redefine_start1->trp_init3[label=localref];
redefine_start2[label="Name:redefine_start2,Dom:NULL, PostDom:NULL,Map:0:0, Context frame:0,SyncCount:0"];
trp_init3[label="Name:trp_init3,Dom:NULL, PostDom:NULL,Map:0:0, Context frame:0,SyncCount:0"];
trp_init3->redefine_start2[label=scalar0];
}
Setting domf of node redefine_start1 to size 0
Setting domf of node redefine_start2 to size 0
Setting domf of node trp_init3 to size 0
idom of node:redefine_start1
idom of node:trp_init3

------
forwarding address to redefine_start1:

------
forwarding address to redefine_start2:

------
forwarding address to trp_init3:

Dominant sequence computed:
redefine_start1->trp_init3->redefine_start2->

Dominant sequence computed:
redefine_start1->trp_init3->redefine_start2->
before merging, num of clusters:1
each cluster:
redefine_start1,trp_init3,redefine_start2,
Minimizing ordering edges
setting context frame id of redefine_start1 to 0
setting context frame id of trp_init3 to 1
setting context frame id of redefine_start2 to 2
Computing whether there is a control/scalar path between a pair of HyperOps communicating via memory and adding sync edges if there is no control path
adding a sync edge between redefine_start1 and trp_init3
If the producer and consumer are mapped to different CRs, treat them as localrefs only instead of scalars to avoid reconciles
problems setting inputs?
generated cfg:Setting domf of node redefine_start1 to size 0
Setting domf of node redefine_start2 to size 0
Setting domf of node trp_init3 to size 0
idom of node:redefine_start1
idom of node:trp_init3
Delivering reaching predicate with decrement count in case operands to be delivered are on the non taken path
before decrementing sync, graph:Decrementing sync count for nodes with sync edges coming from mutually exclusive paths
updating node with incoming sync edges redefine_start1
updating node with incoming sync edges trp_init3
after minimizing cluster and converting scalar edges to local refs, graph:digraph{
redefine_start1[label="Name:redefine_start1,Dom:NULL, PostDom:trp_init3,Map:0:0, Context frame:0,SyncCount:1"];
redefine_start1->trp_init3[label=localref];
redefine_start1->trp_init3[label=sync];
redefine_start2[label="Name:redefine_start2,Dom:trp_init3, PostDom:NULL,Map:0:0, Context frame:2,SyncCount:0"];
trp_init3[label="Name:trp_init3,Dom:redefine_start1, PostDom:redefine_start2,Map:0:0, Context frame:1,SyncCount:1"];
trp_init3->redefine_start2[label=scalar0];
}
num of clusters:1
num constraints:0
setting target resource 0
setting target resource 0
setting target resource 0
digraph{
redefine_start1[label="Name:redefine_start1,Dom:NULL, PostDom:trp_init3,Map:0:0, Context frame:0,SyncCount:1"];
redefine_start1->trp_init3[label=localref];
redefine_start1->trp_init3[label=sync];
redefine_start2[label="Name:redefine_start2,Dom:trp_init3, PostDom:NULL,Map:0:0, Context frame:2,SyncCount:0"];
trp_init3[label="Name:trp_init3,Dom:redefine_start1, PostDom:redefine_start2,Map:0:0, Context frame:1,SyncCount:1"];
trp_init3->redefine_start2[label=scalar0];
}



=== redefine_start1
visiting load instruction   %1 = load %struct.TP3_TAG** %0, align 4
I was here to add   %0 = alloca %struct.TP3_TAG*, align 4, !ConsumedBy !6
with I type %struct.TP3_TAG*and sd value :0x3878c80: i32 = FrameIndex<0>
new load?0x3878f80: i32,ch = load 0x385c078, 0x3878c80, 0x3878e80<LD4[%0]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x3878d80: i32 = Constant<0>

    0x385c078: ch = EntryToken

    0x3878c80: i32 = FrameIndex<0>

    0x3878e80: i32 = undef

  0x3878f80: i32,ch = load 0x385c078, 0x3878c80, 0x3878e80<LD4[%0]>

  0x385c078: ch = EntryToken


Initial selection DAG: BB#0 'redefine_start1:redefine_start1.entry'
SelectionDAG has 5 nodes:
  0x3878d80: i32 = Constant<0>

    0x385c078: ch = EntryToken [ORD=1]

    0x3878c80: i32 = FrameIndex<0> [ORD=1]

    0x3878e80: i32 = undef [ORD=1]

  0x3878f80: i32,ch = load 0x385c078, 0x3878c80, 0x3878e80<LD4[%0]> [ORD=1]

  0x385c078: ch = EntryToken [ORD=1]


Optimized lowered selection DAG: BB#0 'redefine_start1:redefine_start1.entry'
SelectionDAG has 1 nodes:
  0x385c078: ch = EntryToken [ORD=1]


Legally typed node: 0x385c078: ch = EntryToken [ORD=1] [ID=0]

Legally typed node: 0x7fff1ed032b0: ch = handlenode 0x385c078 [ID=0]

Type-legalized selection DAG: BB#0 'redefine_start1:redefine_start1.entry'
SelectionDAG has 1 nodes:
  0x385c078: ch = EntryToken [ORD=1] [ID=-3]


Legalized selection DAG: BB#0 'redefine_start1:redefine_start1.entry'
SelectionDAG has 1 nodes:
  0x385c078: ch = EntryToken [ORD=1] [ID=0]


Optimized legalized selection DAG: BB#0 'redefine_start1:redefine_start1.entry'
SelectionDAG has 1 nodes:
  0x385c078: ch = EntryToken [ORD=1] [ID=0]


===== Instruction selection begins: BB#0 'redefine_start1.entry'
=> 0x385c078: ch = EntryToken [ORD=1]

===== Instruction selection ends:
Selected selection DAG: BB#0 'redefine_start1:redefine_start1.entry'
SelectionDAG has 1 nodes:
  0x385c078: ch = EntryToken [ORD=1]


********** List Scheduling BB#0 'redefine_start1.entry' **********
*** Final schedule ***

Total amount of phi nodes to update: 0
Initial selection DAG: BB#1 'redefine_start1:redefine_start1.return'
SelectionDAG has 1 nodes:
  0x385c078: ch = EntryToken


Optimized lowered selection DAG: BB#1 'redefine_start1:redefine_start1.return'
SelectionDAG has 1 nodes:
  0x385c078: ch = EntryToken


Legally typed node: 0x385c078: ch = EntryToken [ID=0]

Legally typed node: 0x7fff1ed032b0: ch = handlenode 0x385c078 [ID=0]

Type-legalized selection DAG: BB#1 'redefine_start1:redefine_start1.return'
SelectionDAG has 1 nodes:
  0x385c078: ch = EntryToken [ID=-3]


Legalized selection DAG: BB#1 'redefine_start1:redefine_start1.return'
SelectionDAG has 1 nodes:
  0x385c078: ch = EntryToken [ID=0]


Optimized legalized selection DAG: BB#1 'redefine_start1:redefine_start1.return'
SelectionDAG has 1 nodes:
  0x385c078: ch = EntryToken [ID=0]


===== Instruction selection begins: BB#1 'redefine_start1.return'
=> 0x385c078: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: BB#1 'redefine_start1:redefine_start1.return'
SelectionDAG has 1 nodes:
  0x385c078: ch = EntryToken


********** List Scheduling BB#1 'redefine_start1.return' **********
*** Final schedule ***

Total amount of phi nodes to update: 0

*** Tail-duplicating BB#1

Merging into block: BB#0: derived from LLVM BB %redefine_start1.entry
    Successors according to CFG: BB#1
From MBB: BB#1: derived from LLVM BB %redefine_start1.return
    Predecessors according to CFG: BB#0

Removing MBB: BB#1: derived from LLVM BB %redefine_start1.return
# Machine code for function redefine_start1: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start1.entry

# End machine code for function redefine_start1.

********** Stack Coloring **********
********** Function: redefine_start1
Found 0 markers and 1 slots
Slot structure:
Slot #0 - 4 bytes.
Total Stack size: 4 bytes

Will not try to merge slots.
Removed 0 markers.
******** Pre-regalloc Machine LICM: redefine_start1 ********
******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: redefine_start1
********** PROCESS IMPLICIT DEFS **********
********** Function: redefine_start1
********** REWRITING TWO-ADDR INSTRS **********
********** Function: redefine_start1
# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start1.entry

# End machine code for function redefine_start1.

Computing live-in reg-units in ABI blocks.
Created 0 new intervals.
********** INTERVALS **********
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start1.entry

# End machine code for function redefine_start1.

********** SIMPLE REGISTER COALESCING **********
********** Function: redefine_start1
********** JOINING INTERVALS ***********
redefine_start1.entry:
Trying to inflate 0 regs.
********** INTERVALS **********
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start1.entry

# End machine code for function redefine_start1.

Before MISched:
# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %redefine_start1.entry

# End machine code for function redefine_start1.


-------------
Starting new basic block BB#0

*** Renumbered SlotIndexes 12-28 ***

*** Renumbered SlotIndexes 24-40 ***

*** Renumbered SlotIndexes 36-52 ***

*** Renumbered SlotIndexes 48-64 ***

*** Renumbered SlotIndexes 60-76 ***

*** Renumbered SlotIndexes 72-88 ***

*** Renumbered SlotIndexes 84-100 ***

*** Renumbered SlotIndexes 96-112 ***

*** Renumbered SlotIndexes 108-124 ***

*** Renumbered SlotIndexes 120-136 ***

*** Renumbered SlotIndexes 132-148 ***

*** Renumbered SlotIndexes 144-160 ***

*** Renumbered SlotIndexes 156-172 ***

*** Renumbered SlotIndexes 168-184 ***

*** Renumbered SlotIndexes 180-196 ***

*** Renumbered SlotIndexes 192-208 ***

*** Renumbered SlotIndexes 204-220 ***

*** Renumbered SlotIndexes 216-232 ***

*** Renumbered SlotIndexes 228-244 ***

*** Renumbered SlotIndexes 240-256 ***

*** Renumbered SlotIndexes 252-268 ***

*** Renumbered SlotIndexes 264-280 ***

*** Renumbered SlotIndexes 276-292 ***

*** Renumbered SlotIndexes 288-304 ***

*** Renumbered SlotIndexes 300-316 ***

*** Renumbered SlotIndexes 312-328 ***

*** Renumbered SlotIndexes 324-340 ***

*** Renumbered SlotIndexes 336-352 ***

*** Renumbered SlotIndexes 348-364 ***

*** Renumbered SlotIndexes 360-376 ***

*** Renumbered SlotIndexes 372-388 ***

*** Renumbered SlotIndexes 384-400 ***

*** Renumbered SlotIndexes 396-412 ***
before falloc, state of bb0:BB#0: derived from LLVM BB %redefine_start1.entry
	%vreg0<def> = ADD %t5, %zero; GR32Bit:%vreg0
	%vreg2<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg2
	%vreg3<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg3
	%vreg4<def> = SRLI %vreg3, 12; GR32Bit:%vreg4,%vreg3
	%vreg5<def> = ADD %vreg2, %vreg4; GR32Bit:%vreg5,%vreg2,%vreg4
	%vreg6<def> = ADDI %zero, 32; GR32Bit:%vreg6
	%vreg7<def> = SRLI %t5, 22; GR32Bit:%vreg7
	%vreg8<def> = SRLI %t5, 12; GR32Bit:%vreg8
	%vreg9<def> = ANDI %vreg8, 15; GR32Bit:%vreg9,%vreg8
	%vreg10<def> = SRLI %t5, 6; GR32Bit:%vreg10
	%vreg11<def> = ANDI %vreg10, 63; GR32Bit:%vreg11,%vreg10
	%vreg12<def> = ADDI %zero, 832; GR32Bit:%vreg12
	%vreg13<def> = MUL %vreg7, %vreg12; GR32Bit:%vreg13,%vreg7,%vreg12
	%vreg14<def> = ADDI %zero, 52; GR32Bit:%vreg14
	%vreg15<def> = MUL %vreg9, %vreg14; GR32Bit:%vreg15,%vreg9,%vreg14
	%vreg16<def> = ADD %vreg15, %vreg11; GR32Bit:%vreg16,%vreg15,%vreg11
	%vreg17<def> = ADD %vreg16, %vreg13; GR32Bit:%vreg17,%vreg16,%vreg13
	%vreg18<def> = MUL %vreg17, %vreg6; GR32Bit:%vreg18,%vreg17,%vreg6
	%vreg1<def> = ADD %vreg5, %vreg18; GR32Bit:%vreg1,%vreg5,%vreg18
	%vreg19<def> = ADD %t5, %zero; GR32Bit:%vreg19
	%vreg21<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg21
	%vreg22<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg22
	%vreg23<def> = SRLI %vreg22, 12; GR32Bit:%vreg23,%vreg22
	%vreg24<def> = ADD %vreg21, %vreg23; GR32Bit:%vreg24,%vreg21,%vreg23
	%vreg25<def> = ADDI %zero, 32; GR32Bit:%vreg25
	%vreg26<def> = SRLI %t5, 22; GR32Bit:%vreg26
	%vreg27<def> = SRLI %t5, 12; GR32Bit:%vreg27
	%vreg28<def> = ANDI %vreg27, 15; GR32Bit:%vreg28,%vreg27
	%vreg29<def> = SRLI %t5, 6; GR32Bit:%vreg29
	%vreg30<def> = ANDI %vreg29, 63; GR32Bit:%vreg30,%vreg29
	%vreg31<def> = ADDI %zero, 832; GR32Bit:%vreg31
	%vreg32<def> = MUL %vreg26, %vreg31; GR32Bit:%vreg32,%vreg26,%vreg31
	%vreg33<def> = ADDI %zero, 52; GR32Bit:%vreg33
	%vreg34<def> = MUL %vreg28, %vreg33; GR32Bit:%vreg34,%vreg28,%vreg33
	%vreg35<def> = ADD %vreg34, %vreg30; GR32Bit:%vreg35,%vreg34,%vreg30
	%vreg36<def> = ADD %vreg35, %vreg32; GR32Bit:%vreg36,%vreg35,%vreg32
	%vreg37<def> = MUL %vreg36, %vreg25; GR32Bit:%vreg37,%vreg36,%vreg25
	%vreg20<def> = ADD %vreg24, %vreg37; GR32Bit:%vreg20,%vreg24,%vreg37
	%vreg38<def> = ADD %t5, %zero; GR32Bit:%vreg38
	%vreg40<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg40
	%vreg41<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg41
	%vreg42<def> = SRLI %vreg41, 12; GR32Bit:%vreg42,%vreg41
	%vreg43<def> = ADD %vreg40, %vreg42; GR32Bit:%vreg43,%vreg40,%vreg42
	%vreg44<def> = ADDI %zero, 32; GR32Bit:%vreg44
	%vreg45<def> = SRLI %t5, 22; GR32Bit:%vreg45
	%vreg46<def> = SRLI %t5, 12; GR32Bit:%vreg46
	%vreg47<def> = ANDI %vreg46, 15; GR32Bit:%vreg47,%vreg46
	%vreg48<def> = SRLI %t5, 6; GR32Bit:%vreg48
	%vreg49<def> = ANDI %vreg48, 63; GR32Bit:%vreg49,%vreg48
	%vreg50<def> = ADDI %zero, 832; GR32Bit:%vreg50
	%vreg51<def> = MUL %vreg45, %vreg50; GR32Bit:%vreg51,%vreg45,%vreg50
	%vreg52<def> = ADDI %zero, 52; GR32Bit:%vreg52
	%vreg53<def> = MUL %vreg47, %vreg52; GR32Bit:%vreg53,%vreg47,%vreg52
	%vreg54<def> = ADD %vreg53, %vreg49; GR32Bit:%vreg54,%vreg53,%vreg49
	%vreg55<def> = ADD %vreg54, %vreg51; GR32Bit:%vreg55,%vreg54,%vreg51
	%vreg56<def> = MUL %vreg55, %vreg44; GR32Bit:%vreg56,%vreg55,%vreg44
	%vreg39<def> = ADD %vreg43, %vreg56; GR32Bit:%vreg39,%vreg43,%vreg56
	%vreg57<def> = ADD %t5, %zero; GR32Bit:%vreg57
	%vreg59<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg59
	%vreg60<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg60
	%vreg61<def> = SRLI %vreg60, 12; GR32Bit:%vreg61,%vreg60
	%vreg62<def> = ADD %vreg59, %vreg61; GR32Bit:%vreg62,%vreg59,%vreg61
	%vreg63<def> = ADDI %zero, 32; GR32Bit:%vreg63
	%vreg64<def> = SRLI %t5, 22; GR32Bit:%vreg64
	%vreg65<def> = SRLI %t5, 12; GR32Bit:%vreg65
	%vreg66<def> = ANDI %vreg65, 15; GR32Bit:%vreg66,%vreg65
	%vreg67<def> = SRLI %t5, 6; GR32Bit:%vreg67
	%vreg68<def> = ANDI %vreg67, 63; GR32Bit:%vreg68,%vreg67
	%vreg69<def> = ADDI %zero, 832; GR32Bit:%vreg69
	%vreg70<def> = MUL %vreg64, %vreg69; GR32Bit:%vreg70,%vreg64,%vreg69
	%vreg71<def> = ADDI %zero, 52; GR32Bit:%vreg71
	%vreg72<def> = MUL %vreg66, %vreg71; GR32Bit:%vreg72,%vreg66,%vreg71
	%vreg73<def> = ADD %vreg72, %vreg68; GR32Bit:%vreg73,%vreg72,%vreg68
	%vreg74<def> = ADD %vreg73, %vreg70; GR32Bit:%vreg74,%vreg73,%vreg70
	%vreg75<def> = MUL %vreg74, %vreg63; GR32Bit:%vreg75,%vreg74,%vreg63
	%vreg58<def> = ADD %vreg62, %vreg75; GR32Bit:%vreg58,%vreg62,%vreg75
Adding all fallocs first to avoid stalls due to sequential fallocs and fbinds
Adding writecm(for writing sync count to context frames) and fbind instructions
live end of child is itself

*** Renumbered SlotIndexes 408-424 ***
live end of child is itself
Adding localref sw instructions to hyperOp redefine_start1

*** Renumbered SlotIndexes 420-436 ***

*** Renumbered SlotIndexes 432-448 ***

*** Renumbered SlotIndexes 444-460 ***

*** Renumbered SlotIndexes 456-472 ***

*** Renumbered SlotIndexes 468-484 ***

*** Renumbered SlotIndexes 480-496 ***

*** Renumbered SlotIndexes 492-508 ***

*** Renumbered SlotIndexes 504-520 ***
localref sw to trp_init3:  SW %vreg96, %vreg95, 28; GR32Bit:%vreg96,%vreg95

*** Renumbered SlotIndexes 516-532 ***
Adding writecm instructions to hyperOp redefine_start1
Adding writecmp and sync instructions
problem with which child exactly?trp_init3 with edge of type:6

*** Renumbered SlotIndexes 528-544 ***

*** Renumbered SlotIndexes 540-556 ***

*** Renumbered SlotIndexes 552-568 ***
Adding endHyperOp instructions to each pHyperOp

*** Renumbered SlotIndexes 412-628 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 424-640 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 436-652 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 448-664 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 460-676 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 472-688 ***
  %zero<def> = ADDI %zero, 0
After Shuffling regions of basic block, state of BB#0:
BB#0: derived from LLVM BB %redefine_start1.entry
	%vreg0<def> = ADD %t5, %zero; GR32Bit:%vreg0
	%vreg2<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg2
	%vreg3<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg3
	%vreg4<def> = SRLI %vreg3, 12; GR32Bit:%vreg4,%vreg3
	%vreg5<def> = ADD %vreg2, %vreg4; GR32Bit:%vreg5,%vreg2,%vreg4
	%vreg6<def> = ADDI %zero, 32; GR32Bit:%vreg6
	%vreg7<def> = SRLI %t5, 22; GR32Bit:%vreg7
	%vreg8<def> = SRLI %t5, 12; GR32Bit:%vreg8
	%vreg9<def> = ANDI %vreg8, 15; GR32Bit:%vreg9,%vreg8
	%vreg10<def> = SRLI %t5, 6; GR32Bit:%vreg10
	%vreg11<def> = ANDI %vreg10, 63; GR32Bit:%vreg11,%vreg10
	%vreg12<def> = ADDI %zero, 832; GR32Bit:%vreg12
	%vreg13<def> = MUL %vreg7, %vreg12; GR32Bit:%vreg13,%vreg7,%vreg12
	%vreg14<def> = ADDI %zero, 52; GR32Bit:%vreg14
	%vreg15<def> = MUL %vreg9, %vreg14; GR32Bit:%vreg15,%vreg9,%vreg14
	%vreg16<def> = ADD %vreg15, %vreg11; GR32Bit:%vreg16,%vreg15,%vreg11
	%vreg17<def> = ADD %vreg16, %vreg13; GR32Bit:%vreg17,%vreg16,%vreg13
	%vreg18<def> = MUL %vreg17, %vreg6; GR32Bit:%vreg18,%vreg17,%vreg6
	%vreg1<def> = ADD %vreg5, %vreg18; GR32Bit:%vreg1,%vreg5,%vreg18
	%vreg76<def> = ADDI %zero, 64; GR32Bit:%vreg76
	%vreg77<def> = ADDI %zero, 1; GR32Bit:%vreg77
	WRITECM %vreg76, %vreg77, 60; GR32Bit:%vreg76,%vreg77
	%vreg78<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg78
	%vreg79<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg79
	%vreg80<def> = SRLI %vreg79, 12; GR32Bit:%vreg80,%vreg79
	%vreg81<def> = ADD %vreg78, %vreg80; GR32Bit:%vreg81,%vreg78,%vreg80
	%vreg82<def> = ADDI %zero, 32; GR32Bit:%vreg82
	%vreg83<def> = SRLI %vreg76, 22; GR32Bit:%vreg83,%vreg76
	%vreg84<def> = SRLI %vreg76, 12; GR32Bit:%vreg84,%vreg76
	%vreg85<def> = ANDI %vreg84, 15; GR32Bit:%vreg85,%vreg84
	%vreg86<def> = SRLI %vreg76, 6; GR32Bit:%vreg86,%vreg76
	%vreg87<def> = ANDI %vreg86, 63; GR32Bit:%vreg87,%vreg86
	%vreg88<def> = ADDI %zero, 832; GR32Bit:%vreg88
	%vreg89<def> = MUL %vreg83, %vreg88; GR32Bit:%vreg89,%vreg83,%vreg88
	%vreg90<def> = ADDI %zero, 52; GR32Bit:%vreg90
	%vreg91<def> = MUL %vreg85, %vreg90; GR32Bit:%vreg91,%vreg85,%vreg90
	%vreg92<def> = ADD %vreg91, %vreg87; GR32Bit:%vreg92,%vreg91,%vreg87
	%vreg93<def> = ADD %vreg92, %vreg89; GR32Bit:%vreg93,%vreg92,%vreg89
	%vreg94<def> = MUL %vreg93, %vreg82; GR32Bit:%vreg94,%vreg93,%vreg82
	%vreg95<def> = ADD %vreg94, %vreg81; GR32Bit:%vreg95,%vreg94,%vreg81
	%vreg96<def> = LW %t5, 0; GR32Bit:%vreg96
	SW %vreg96, %vreg95, 28; GR32Bit:%vreg96,%vreg95
	%vreg97<def> = LUI 1; GR32Bit:%vreg97
	WRITEPM %vreg97, %vreg76, 0; GR32Bit:%vreg97,%vreg76
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg19<def> = ADD %t5, %zero; GR32Bit:%vreg19
	%vreg21<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg21
	%vreg22<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg22
	%vreg23<def> = SRLI %vreg22, 12; GR32Bit:%vreg23,%vreg22
	%vreg24<def> = ADD %vreg21, %vreg23; GR32Bit:%vreg24,%vreg21,%vreg23
	%vreg25<def> = ADDI %zero, 32; GR32Bit:%vreg25
	%vreg26<def> = SRLI %t5, 22; GR32Bit:%vreg26
	%vreg27<def> = SRLI %t5, 12; GR32Bit:%vreg27
	%vreg28<def> = ANDI %vreg27, 15; GR32Bit:%vreg28,%vreg27
	%vreg29<def> = SRLI %t5, 6; GR32Bit:%vreg29
	%vreg30<def> = ANDI %vreg29, 63; GR32Bit:%vreg30,%vreg29
	%vreg31<def> = ADDI %zero, 832; GR32Bit:%vreg31
	%vreg32<def> = MUL %vreg26, %vreg31; GR32Bit:%vreg32,%vreg26,%vreg31
	%vreg33<def> = ADDI %zero, 52; GR32Bit:%vreg33
	%vreg34<def> = MUL %vreg28, %vreg33; GR32Bit:%vreg34,%vreg28,%vreg33
	%vreg35<def> = ADD %vreg34, %vreg30; GR32Bit:%vreg35,%vreg34,%vreg30
	%vreg36<def> = ADD %vreg35, %vreg32; GR32Bit:%vreg36,%vreg35,%vreg32
	%vreg37<def> = MUL %vreg36, %vreg25; GR32Bit:%vreg37,%vreg36,%vreg25
	%vreg20<def> = ADD %vreg24, %vreg37; GR32Bit:%vreg20,%vreg24,%vreg37
	%vreg98<def> = LUI 1; GR32Bit:%vreg98
	%vreg99<def> = DREADPM %vreg98, 0; GR32Bit:%vreg99,%vreg98
	%vreg100<def> = ADDI %zero, -1; GR32Bit:%vreg100
	SYNC %vreg99, %vreg100, 60; GR32Bit:%vreg99,%vreg100
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg38<def> = ADD %t5, %zero; GR32Bit:%vreg38
	%vreg40<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg40
	%vreg41<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg41
	%vreg42<def> = SRLI %vreg41, 12; GR32Bit:%vreg42,%vreg41
	%vreg43<def> = ADD %vreg40, %vreg42; GR32Bit:%vreg43,%vreg40,%vreg42
	%vreg44<def> = ADDI %zero, 32; GR32Bit:%vreg44
	%vreg45<def> = SRLI %t5, 22; GR32Bit:%vreg45
	%vreg46<def> = SRLI %t5, 12; GR32Bit:%vreg46
	%vreg47<def> = ANDI %vreg46, 15; GR32Bit:%vreg47,%vreg46
	%vreg48<def> = SRLI %t5, 6; GR32Bit:%vreg48
	%vreg49<def> = ANDI %vreg48, 63; GR32Bit:%vreg49,%vreg48
	%vreg50<def> = ADDI %zero, 832; GR32Bit:%vreg50
	%vreg51<def> = MUL %vreg45, %vreg50; GR32Bit:%vreg51,%vreg45,%vreg50
	%vreg52<def> = ADDI %zero, 52; GR32Bit:%vreg52
	%vreg53<def> = MUL %vreg47, %vreg52; GR32Bit:%vreg53,%vreg47,%vreg52
	%vreg54<def> = ADD %vreg53, %vreg49; GR32Bit:%vreg54,%vreg53,%vreg49
	%vreg55<def> = ADD %vreg54, %vreg51; GR32Bit:%vreg55,%vreg54,%vreg51
	%vreg56<def> = MUL %vreg55, %vreg44; GR32Bit:%vreg56,%vreg55,%vreg44
	%vreg39<def> = ADD %vreg43, %vreg56; GR32Bit:%vreg39,%vreg43,%vreg56
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg57<def> = ADD %t5, %zero; GR32Bit:%vreg57
	%vreg59<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg59
	%vreg60<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg60
	%vreg61<def> = SRLI %vreg60, 12; GR32Bit:%vreg61,%vreg60
	%vreg62<def> = ADD %vreg59, %vreg61; GR32Bit:%vreg62,%vreg59,%vreg61
	%vreg63<def> = ADDI %zero, 32; GR32Bit:%vreg63
	%vreg64<def> = SRLI %t5, 22; GR32Bit:%vreg64
	%vreg65<def> = SRLI %t5, 12; GR32Bit:%vreg65
	%vreg66<def> = ANDI %vreg65, 15; GR32Bit:%vreg66,%vreg65
	%vreg67<def> = SRLI %t5, 6; GR32Bit:%vreg67
	%vreg68<def> = ANDI %vreg67, 63; GR32Bit:%vreg68,%vreg67
	%vreg69<def> = ADDI %zero, 832; GR32Bit:%vreg69
	%vreg70<def> = MUL %vreg64, %vreg69; GR32Bit:%vreg70,%vreg64,%vreg69
	%vreg71<def> = ADDI %zero, 52; GR32Bit:%vreg71
	%vreg72<def> = MUL %vreg66, %vreg71; GR32Bit:%vreg72,%vreg66,%vreg71
	%vreg73<def> = ADD %vreg72, %vreg68; GR32Bit:%vreg73,%vreg72,%vreg68
	%vreg74<def> = ADD %vreg73, %vreg70; GR32Bit:%vreg74,%vreg73,%vreg70
	%vreg75<def> = MUL %vreg74, %vreg63; GR32Bit:%vreg75,%vreg74,%vreg63
	%vreg58<def> = ADD %vreg62, %vreg75; GR32Bit:%vreg58,%vreg62,%vreg75
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 320-752 ***

*** Renumbered SlotIndexes 308-772 ***

*** Renumbered SlotIndexes 308-788 ***

*** Renumbered SlotIndexes 216-832 ***

*** Renumbered SlotIndexes 204-852 ***

*** Renumbered SlotIndexes 204-868 ***

*** Renumbered SlotIndexes 204-884 ***

*** Renumbered SlotIndexes 116-932 ***

*** Renumbered SlotIndexes 104-952 ***

*** Renumbered SlotIndexes 104-968 ***

*** Renumbered SlotIndexes 104-984 ***

*** Renumbered SlotIndexes 104-1000 ***

*** Renumbered SlotIndexes 104-1016 ***

*** Renumbered SlotIndexes 104-1032 ***

*** Renumbered SlotIndexes 104-1048 ***

*** Renumbered SlotIndexes 104-1064 ***

*** Renumbered SlotIndexes 104-1080 ***

*** Renumbered SlotIndexes 104-1096 ***

*** Renumbered SlotIndexes 104-1112 ***

*** Renumbered SlotIndexes 104-1128 ***

*** Renumbered SlotIndexes 104-1144 ***

*** Renumbered SlotIndexes 104-1160 ***

*** Renumbered SlotIndexes 12-1212 ***
Creating pHyperOp bundles for CEs for bb0
  %vreg19<def> = ADD %t5, %zero; GR32Bit:%vreg19
starting at   %vreg0<def> = ADD %t5, %zero; GR32Bit:%vreg0
  %vreg38<def> = ADD %t5, %zero; GR32Bit:%vreg38
starting at   %vreg19<def> = ADD %t5, %zero; GR32Bit:%vreg19
  %vreg57<def> = ADD %t5, %zero; GR32Bit:%vreg57
starting at   %vreg38<def> = ADD %t5, %zero; GR32Bit:%vreg38
starting at   %vreg57<def> = ADD %t5, %zero; GR32Bit:%vreg57
After bundling, state of BB0:BB#0: derived from LLVM BB %redefine_start1.entry
	%vreg0<def> = ADD %t5, %zero; GR32Bit:%vreg0
	  * %vreg2<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg2
	  * %vreg3<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg3
	  * %vreg4<def> = SRLI %vreg3, 12; GR32Bit:%vreg4,%vreg3
	  * %vreg5<def> = ADD %vreg2, %vreg4; GR32Bit:%vreg5,%vreg2,%vreg4
	  * %vreg6<def> = ADDI %zero, 32; GR32Bit:%vreg6
	  * %vreg7<def> = SRLI %t5, 22; GR32Bit:%vreg7
	  * %vreg8<def> = SRLI %t5, 12; GR32Bit:%vreg8
	  * %vreg9<def> = ANDI %vreg8, 15; GR32Bit:%vreg9,%vreg8
	  * %vreg10<def> = SRLI %t5, 6; GR32Bit:%vreg10
	  * %vreg11<def> = ANDI %vreg10, 63; GR32Bit:%vreg11,%vreg10
	  * %vreg12<def> = ADDI %zero, 832; GR32Bit:%vreg12
	  * %vreg13<def> = MUL %vreg7, %vreg12; GR32Bit:%vreg13,%vreg7,%vreg12
	  * %vreg14<def> = ADDI %zero, 52; GR32Bit:%vreg14
	  * %vreg15<def> = MUL %vreg9, %vreg14; GR32Bit:%vreg15,%vreg9,%vreg14
	  * %vreg16<def> = ADD %vreg15, %vreg11; GR32Bit:%vreg16,%vreg15,%vreg11
	  * %vreg17<def> = ADD %vreg16, %vreg13; GR32Bit:%vreg17,%vreg16,%vreg13
	  * %vreg18<def> = MUL %vreg17, %vreg6; GR32Bit:%vreg18,%vreg17,%vreg6
	  * %vreg1<def> = ADD %vreg5, %vreg18; GR32Bit:%vreg1,%vreg5,%vreg18
	  * %vreg76<def> = ADDI %zero, 64; GR32Bit:%vreg76
	  * %vreg77<def> = ADDI %zero, 1; GR32Bit:%vreg77
	  * WRITECM %vreg76, %vreg77, 60; GR32Bit:%vreg76,%vreg77
	  * %vreg78<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg78
	  * %vreg79<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg79
	  * %vreg80<def> = SRLI %vreg79, 12; GR32Bit:%vreg80,%vreg79
	  * %vreg81<def> = ADD %vreg78, %vreg80; GR32Bit:%vreg81,%vreg78,%vreg80
	  * %vreg82<def> = ADDI %zero, 32; GR32Bit:%vreg82
	  * %vreg83<def> = SRLI %vreg76, 22; GR32Bit:%vreg83,%vreg76
	  * %vreg84<def> = SRLI %vreg76, 12; GR32Bit:%vreg84,%vreg76
	  * %vreg85<def> = ANDI %vreg84, 15; GR32Bit:%vreg85,%vreg84
	  * %vreg86<def> = SRLI %vreg76, 6; GR32Bit:%vreg86,%vreg76
	  * %vreg87<def> = ANDI %vreg86, 63; GR32Bit:%vreg87,%vreg86
	  * %vreg88<def> = ADDI %zero, 832; GR32Bit:%vreg88
	  * %vreg89<def> = MUL %vreg83, %vreg88; GR32Bit:%vreg89,%vreg83,%vreg88
	  * %vreg90<def> = ADDI %zero, 52; GR32Bit:%vreg90
	  * %vreg91<def> = MUL %vreg85, %vreg90; GR32Bit:%vreg91,%vreg85,%vreg90
	  * %vreg92<def> = ADD %vreg91, %vreg87; GR32Bit:%vreg92,%vreg91,%vreg87
	  * %vreg93<def> = ADD %vreg92, %vreg89; GR32Bit:%vreg93,%vreg92,%vreg89
	  * %vreg94<def> = MUL %vreg93, %vreg82; GR32Bit:%vreg94,%vreg93,%vreg82
	  * %vreg95<def> = ADD %vreg94, %vreg81; GR32Bit:%vreg95,%vreg94,%vreg81
	  * %vreg96<def> = LW %t5, 0; GR32Bit:%vreg96
	  * SW %vreg96, %vreg95, 28; GR32Bit:%vreg96,%vreg95
	  * %vreg97<def> = LUI 1; GR32Bit:%vreg97
	  * WRITEPM %vreg97, %vreg76, 0; GR32Bit:%vreg97,%vreg76
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg19<def> = ADD %t5, %zero; GR32Bit:%vreg19
	  * %vreg21<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg21
	  * %vreg22<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg22
	  * %vreg23<def> = SRLI %vreg22, 12; GR32Bit:%vreg23,%vreg22
	  * %vreg24<def> = ADD %vreg21, %vreg23; GR32Bit:%vreg24,%vreg21,%vreg23
	  * %vreg25<def> = ADDI %zero, 32; GR32Bit:%vreg25
	  * %vreg26<def> = SRLI %t5, 22; GR32Bit:%vreg26
	  * %vreg27<def> = SRLI %t5, 12; GR32Bit:%vreg27
	  * %vreg28<def> = ANDI %vreg27, 15; GR32Bit:%vreg28,%vreg27
	  * %vreg29<def> = SRLI %t5, 6; GR32Bit:%vreg29
	  * %vreg30<def> = ANDI %vreg29, 63; GR32Bit:%vreg30,%vreg29
	  * %vreg31<def> = ADDI %zero, 832; GR32Bit:%vreg31
	  * %vreg32<def> = MUL %vreg26, %vreg31; GR32Bit:%vreg32,%vreg26,%vreg31
	  * %vreg33<def> = ADDI %zero, 52; GR32Bit:%vreg33
	  * %vreg34<def> = MUL %vreg28, %vreg33; GR32Bit:%vreg34,%vreg28,%vreg33
	  * %vreg35<def> = ADD %vreg34, %vreg30; GR32Bit:%vreg35,%vreg34,%vreg30
	  * %vreg36<def> = ADD %vreg35, %vreg32; GR32Bit:%vreg36,%vreg35,%vreg32
	  * %vreg37<def> = MUL %vreg36, %vreg25; GR32Bit:%vreg37,%vreg36,%vreg25
	  * %vreg20<def> = ADD %vreg24, %vreg37; GR32Bit:%vreg20,%vreg24,%vreg37
	  * %vreg98<def> = LUI 1; GR32Bit:%vreg98
	  * %vreg99<def> = DREADPM %vreg98, 0; GR32Bit:%vreg99,%vreg98
	  * %vreg100<def> = ADDI %zero, -1; GR32Bit:%vreg100
	  * SYNC %vreg99, %vreg100, 60; GR32Bit:%vreg99,%vreg100
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg38<def> = ADD %t5, %zero; GR32Bit:%vreg38
	  * %vreg40<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg40
	  * %vreg41<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg41
	  * %vreg42<def> = SRLI %vreg41, 12; GR32Bit:%vreg42,%vreg41
	  * %vreg43<def> = ADD %vreg40, %vreg42; GR32Bit:%vreg43,%vreg40,%vreg42
	  * %vreg44<def> = ADDI %zero, 32; GR32Bit:%vreg44
	  * %vreg45<def> = SRLI %t5, 22; GR32Bit:%vreg45
	  * %vreg46<def> = SRLI %t5, 12; GR32Bit:%vreg46
	  * %vreg47<def> = ANDI %vreg46, 15; GR32Bit:%vreg47,%vreg46
	  * %vreg48<def> = SRLI %t5, 6; GR32Bit:%vreg48
	  * %vreg49<def> = ANDI %vreg48, 63; GR32Bit:%vreg49,%vreg48
	  * %vreg50<def> = ADDI %zero, 832; GR32Bit:%vreg50
	  * %vreg51<def> = MUL %vreg45, %vreg50; GR32Bit:%vreg51,%vreg45,%vreg50
	  * %vreg52<def> = ADDI %zero, 52; GR32Bit:%vreg52
	  * %vreg53<def> = MUL %vreg47, %vreg52; GR32Bit:%vreg53,%vreg47,%vreg52
	  * %vreg54<def> = ADD %vreg53, %vreg49; GR32Bit:%vreg54,%vreg53,%vreg49
	  * %vreg55<def> = ADD %vreg54, %vreg51; GR32Bit:%vreg55,%vreg54,%vreg51
	  * %vreg56<def> = MUL %vreg55, %vreg44; GR32Bit:%vreg56,%vreg55,%vreg44
	  * %vreg39<def> = ADD %vreg43, %vreg56; GR32Bit:%vreg39,%vreg43,%vreg56
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg57<def> = ADD %t5, %zero; GR32Bit:%vreg57
	  * %vreg59<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg59
	  * %vreg60<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg60
	  * %vreg61<def> = SRLI %vreg60, 12; GR32Bit:%vreg61,%vreg60
	  * %vreg62<def> = ADD %vreg59, %vreg61; GR32Bit:%vreg62,%vreg59,%vreg61
	  * %vreg63<def> = ADDI %zero, 32; GR32Bit:%vreg63
	  * %vreg64<def> = SRLI %t5, 22; GR32Bit:%vreg64
	  * %vreg65<def> = SRLI %t5, 12; GR32Bit:%vreg65
	  * %vreg66<def> = ANDI %vreg65, 15; GR32Bit:%vreg66,%vreg65
	  * %vreg67<def> = SRLI %t5, 6; GR32Bit:%vreg67
	  * %vreg68<def> = ANDI %vreg67, 63; GR32Bit:%vreg68,%vreg67
	  * %vreg69<def> = ADDI %zero, 832; GR32Bit:%vreg69
	  * %vreg70<def> = MUL %vreg64, %vreg69; GR32Bit:%vreg70,%vreg64,%vreg69
	  * %vreg71<def> = ADDI %zero, 52; GR32Bit:%vreg71
	  * %vreg72<def> = MUL %vreg66, %vreg71; GR32Bit:%vreg72,%vreg66,%vreg71
	  * %vreg73<def> = ADD %vreg72, %vreg68; GR32Bit:%vreg73,%vreg72,%vreg68
	  * %vreg74<def> = ADD %vreg73, %vreg70; GR32Bit:%vreg74,%vreg73,%vreg70
	  * %vreg75<def> = MUL %vreg74, %vreg63; GR32Bit:%vreg75,%vreg74,%vreg63
	  * %vreg58<def> = ADD %vreg62, %vreg75; GR32Bit:%vreg58,%vreg62,%vreg75
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
Patching the instructions that are supposed to use the physical registers r30 and r31
Computing live-in reg-units in ABI blocks.
Created 0 new intervals.

*** Renumbered SlotIndexes 384-1224 ***

*** Renumbered SlotIndexes 396-1236 ***
********** INTERVALS **********
%vreg0 = [8r,8d:0)  0@8r
%vreg1 = [148r,148d:0)  0@148r
%vreg2 = [12r,36r:0)  0@12r
%vreg3 = [20r,28r:0)  0@20r
%vreg4 = [28r,36r:0)  0@28r
%vreg5 = [36r,148r:0)  0@36r
%vreg6 = [44r,140r:0)  0@44r
%vreg7 = [52r,100r:0)  0@52r
%vreg8 = [60r,68r:0)  0@60r
%vreg9 = [68r,116r:0)  0@68r
%vreg10 = [76r,84r:0)  0@76r
%vreg11 = [84r,124r:0)  0@84r
%vreg12 = [92r,100r:0)  0@92r
%vreg13 = [100r,132r:0)  0@100r
%vreg14 = [108r,116r:0)  0@108r
%vreg15 = [116r,124r:0)  0@116r
%vreg16 = [124r,132r:0)  0@124r
%vreg17 = [132r,140r:0)  0@132r
%vreg18 = [140r,148r:0)  0@140r
%vreg19 = [380r,380d:0)  0@380r
%vreg20 = [548r,548d:0)  0@548r
%vreg21 = [412r,436r:0)  0@412r
%vreg22 = [420r,428r:0)  0@420r
%vreg23 = [428r,436r:0)  0@428r
%vreg24 = [436r,548r:0)  0@436r
%vreg25 = [444r,540r:0)  0@444r
%vreg26 = [452r,500r:0)  0@452r
%vreg27 = [460r,468r:0)  0@460r
%vreg28 = [468r,516r:0)  0@468r
%vreg29 = [476r,484r:0)  0@476r
%vreg30 = [484r,524r:0)  0@484r
%vreg31 = [492r,500r:0)  0@492r
%vreg32 = [500r,532r:0)  0@500r
%vreg33 = [508r,516r:0)  0@508r
%vreg34 = [516r,524r:0)  0@516r
%vreg35 = [524r,532r:0)  0@524r
%vreg36 = [532r,540r:0)  0@532r
%vreg37 = [540r,548r:0)  0@540r
%vreg38 = [612r,612d:0)  0@612r
%vreg39 = [756r,756d:0)  0@756r
%vreg40 = [620r,644r:0)  0@620r
%vreg41 = [628r,636r:0)  0@628r
%vreg42 = [636r,644r:0)  0@636r
%vreg43 = [644r,756r:0)  0@644r
%vreg44 = [652r,748r:0)  0@652r
%vreg45 = [660r,708r:0)  0@660r
%vreg46 = [668r,676r:0)  0@668r
%vreg47 = [676r,724r:0)  0@676r
%vreg48 = [684r,692r:0)  0@684r
%vreg49 = [692r,732r:0)  0@692r
%vreg50 = [700r,708r:0)  0@700r
%vreg51 = [708r,740r:0)  0@708r
%vreg52 = [716r,724r:0)  0@716r
%vreg53 = [724r,732r:0)  0@724r
%vreg54 = [732r,740r:0)  0@732r
%vreg55 = [740r,748r:0)  0@740r
%vreg56 = [748r,756r:0)  0@748r
%vreg57 = [788r,788d:0)  0@788r
%vreg58 = [932r,932d:0)  0@932r
%vreg59 = [796r,820r:0)  0@796r
%vreg60 = [804r,812r:0)  0@804r
%vreg61 = [812r,820r:0)  0@812r
%vreg62 = [820r,932r:0)  0@820r
%vreg63 = [828r,924r:0)  0@828r
%vreg64 = [836r,884r:0)  0@836r
%vreg65 = [844r,852r:0)  0@844r
%vreg66 = [852r,900r:0)  0@852r
%vreg67 = [860r,868r:0)  0@860r
%vreg68 = [868r,908r:0)  0@868r
%vreg69 = [876r,884r:0)  0@876r
%vreg70 = [884r,916r:0)  0@884r
%vreg71 = [892r,900r:0)  0@892r
%vreg72 = [900r,908r:0)  0@900r
%vreg73 = [908r,916r:0)  0@908r
%vreg74 = [916r,924r:0)  0@916r
%vreg75 = [924r,932r:0)  0@924r
%vreg76 = [156r,348r:0)  0@156r
%vreg77 = [164r,172r:0)  0@164r
%vreg78 = [180r,204r:0)  0@180r
%vreg79 = [188r,196r:0)  0@188r
%vreg80 = [196r,204r:0)  0@196r
%vreg81 = [204r,316r:0)  0@204r
%vreg82 = [212r,308r:0)  0@212r
%vreg83 = [220r,268r:0)  0@220r
%vreg84 = [228r,236r:0)  0@228r
%vreg85 = [236r,284r:0)  0@236r
%vreg86 = [244r,252r:0)  0@244r
%vreg87 = [252r,292r:0)  0@252r
%vreg88 = [260r,268r:0)  0@260r
%vreg89 = [268r,300r:0)  0@268r
%vreg90 = [276r,284r:0)  0@276r
%vreg91 = [284r,292r:0)  0@284r
%vreg92 = [292r,300r:0)  0@292r
%vreg93 = [300r,308r:0)  0@300r
%vreg94 = [308r,316r:0)  0@308r
%vreg95 = [316r,332r:0)  0@316r
%vreg96 = [324r,332r:0)  0@324r
%vreg97 = [340r,348r:0)  0@340r
%vreg98 = [556r,564r:0)  0@556r
%vreg99 = [564r,1236B:0)  0@564r
%vreg100 = [572r,580r:0)  0@572r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start1.entry
8B		%t4<def> = ADD %t5, %zero
8B		  * %vreg2<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg2
8B		  * %vreg3<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg3
8B		  * %vreg4<def> = SRLI %vreg3, 12; GR32Bit:%vreg4,%vreg3
8B		  * %vreg5<def> = ADD %vreg2, %vreg4; GR32Bit:%vreg5,%vreg2,%vreg4
8B		  * %vreg6<def> = ADDI %zero, 32; GR32Bit:%vreg6
8B		  * %vreg7<def> = SRLI %t5, 22; GR32Bit:%vreg7
8B		  * %vreg8<def> = SRLI %t5, 12; GR32Bit:%vreg8
8B		  * %vreg9<def> = ANDI %vreg8, 15; GR32Bit:%vreg9,%vreg8
8B		  * %vreg10<def> = SRLI %t5, 6; GR32Bit:%vreg10
8B		  * %vreg11<def> = ANDI %vreg10, 63; GR32Bit:%vreg11,%vreg10
8B		  * %vreg12<def> = ADDI %zero, 832; GR32Bit:%vreg12
8B		  * %vreg13<def> = MUL %vreg7, %vreg12; GR32Bit:%vreg13,%vreg7,%vreg12
8B		  * %vreg14<def> = ADDI %zero, 52; GR32Bit:%vreg14
8B		  * %vreg15<def> = MUL %vreg9, %vreg14; GR32Bit:%vreg15,%vreg9,%vreg14
8B		  * %vreg16<def> = ADD %vreg15, %vreg11; GR32Bit:%vreg16,%vreg15,%vreg11
8B		  * %vreg17<def> = ADD %vreg16, %vreg13; GR32Bit:%vreg17,%vreg16,%vreg13
8B		  * %vreg18<def> = MUL %vreg17, %vreg6; GR32Bit:%vreg18,%vreg17,%vreg6
8B		  * %t5<def> = ADD %vreg5, %vreg18; GR32Bit:%vreg5,%vreg18
8B		  * %vreg76<def> = ADDI %zero, 64; GR32Bit:%vreg76
8B		  * %vreg77<def> = ADDI %zero, 1; GR32Bit:%vreg77
8B		  * WRITECM %vreg76, %vreg77, 60; GR32Bit:%vreg76,%vreg77
8B		  * %vreg78<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg78
8B		  * %vreg79<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg79
8B		  * %vreg80<def> = SRLI %vreg79, 12; GR32Bit:%vreg80,%vreg79
8B		  * %vreg81<def> = ADD %vreg78, %vreg80; GR32Bit:%vreg81,%vreg78,%vreg80
8B		  * %vreg82<def> = ADDI %zero, 32; GR32Bit:%vreg82
8B		  * %vreg83<def> = SRLI %vreg76, 22; GR32Bit:%vreg83,%vreg76
8B		  * %vreg84<def> = SRLI %vreg76, 12; GR32Bit:%vreg84,%vreg76
8B		  * %vreg85<def> = ANDI %vreg84, 15; GR32Bit:%vreg85,%vreg84
8B		  * %vreg86<def> = SRLI %vreg76, 6; GR32Bit:%vreg86,%vreg76
8B		  * %vreg87<def> = ANDI %vreg86, 63; GR32Bit:%vreg87,%vreg86
8B		  * %vreg88<def> = ADDI %zero, 832; GR32Bit:%vreg88
8B		  * %vreg89<def> = MUL %vreg83, %vreg88; GR32Bit:%vreg89,%vreg83,%vreg88
8B		  * %vreg90<def> = ADDI %zero, 52; GR32Bit:%vreg90
8B		  * %vreg91<def> = MUL %vreg85, %vreg90; GR32Bit:%vreg91,%vreg85,%vreg90
8B		  * %vreg92<def> = ADD %vreg91, %vreg87; GR32Bit:%vreg92,%vreg91,%vreg87
8B		  * %vreg93<def> = ADD %vreg92, %vreg89; GR32Bit:%vreg93,%vreg92,%vreg89
8B		  * %vreg94<def> = MUL %vreg93, %vreg82; GR32Bit:%vreg94,%vreg93,%vreg82
8B		  * %vreg95<def> = ADD %vreg94, %vreg81; GR32Bit:%vreg95,%vreg94,%vreg81
8B		  * %vreg96<def> = LW %t5, 0; GR32Bit:%vreg96
8B		  * SW %vreg96, %vreg95, 28; GR32Bit:%vreg96,%vreg95
8B		  * %vreg97<def> = LUI 1; GR32Bit:%vreg97
8B		  * WRITEPM %vreg97, %vreg76, 0; GR32Bit:%vreg97,%vreg76
8B		  * END 0
8B		  * %zero<def> = ADDI %zero, 0
8B		  * %zero<def> = ADDI %zero, 0
380B		%t4<def> = ADD %t5, %zero
380B		  * %vreg21<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg21
380B		  * %vreg22<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg22
380B		  * %vreg23<def> = SRLI %vreg22, 12; GR32Bit:%vreg23,%vreg22
380B		  * %vreg24<def> = ADD %vreg21, %vreg23; GR32Bit:%vreg24,%vreg21,%vreg23
380B		  * %vreg25<def> = ADDI %zero, 32; GR32Bit:%vreg25
380B		  * %vreg26<def> = SRLI %t5, 22; GR32Bit:%vreg26
380B		  * %vreg27<def> = SRLI %t5, 12; GR32Bit:%vreg27
380B		  * %vreg28<def> = ANDI %vreg27, 15; GR32Bit:%vreg28,%vreg27
380B		  * %vreg29<def> = SRLI %t5, 6; GR32Bit:%vreg29
380B		  * %vreg30<def> = ANDI %vreg29, 63; GR32Bit:%vreg30,%vreg29
380B		  * %vreg31<def> = ADDI %zero, 832; GR32Bit:%vreg31
380B		  * %vreg32<def> = MUL %vreg26, %vreg31; GR32Bit:%vreg32,%vreg26,%vreg31
380B		  * %vreg33<def> = ADDI %zero, 52; GR32Bit:%vreg33
380B		  * %vreg34<def> = MUL %vreg28, %vreg33; GR32Bit:%vreg34,%vreg28,%vreg33
380B		  * %vreg35<def> = ADD %vreg34, %vreg30; GR32Bit:%vreg35,%vreg34,%vreg30
380B		  * %vreg36<def> = ADD %vreg35, %vreg32; GR32Bit:%vreg36,%vreg35,%vreg32
380B		  * %vreg37<def> = MUL %vreg36, %vreg25; GR32Bit:%vreg37,%vreg36,%vreg25
380B		  * %t5<def> = ADD %vreg24, %vreg37; GR32Bit:%vreg24,%vreg37
380B		  * %vreg98<def> = LUI 1; GR32Bit:%vreg98
380B		  * %vreg99<def> = DREADPM %vreg98, 0; GR32Bit:%vreg99,%vreg98
380B		  * %vreg100<def> = LUI 1048575; GR32Bit:%vreg100
380B		  * %a5<def> = LUI 4095
380B		  * %a5<def> = SRLI %a5<internal>, 12
380B		  * ADD %vreg100, %vreg100, %a5; GR32Bit:%vreg100
380B		  * SYNC %vreg99, %vreg100, 60; GR32Bit:%vreg99,%vreg100
380B		  * END 0
380B		  * %zero<def> = ADDI %zero, 0
380B		  * %zero<def> = ADDI %zero, 0
612B		%t4<def> = ADD %t5, %zero
612B		  * %vreg40<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg40
612B		  * %vreg41<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg41
612B		  * %vreg42<def> = SRLI %vreg41, 12; GR32Bit:%vreg42,%vreg41
612B		  * %vreg43<def> = ADD %vreg40, %vreg42; GR32Bit:%vreg43,%vreg40,%vreg42
612B		  * %vreg44<def> = ADDI %zero, 32; GR32Bit:%vreg44
612B		  * %vreg45<def> = SRLI %t5, 22; GR32Bit:%vreg45
612B		  * %vreg46<def> = SRLI %t5, 12; GR32Bit:%vreg46
612B		  * %vreg47<def> = ANDI %vreg46, 15; GR32Bit:%vreg47,%vreg46
612B		  * %vreg48<def> = SRLI %t5, 6; GR32Bit:%vreg48
612B		  * %vreg49<def> = ANDI %vreg48, 63; GR32Bit:%vreg49,%vreg48
612B		  * %vreg50<def> = ADDI %zero, 832; GR32Bit:%vreg50
612B		  * %vreg51<def> = MUL %vreg45, %vreg50; GR32Bit:%vreg51,%vreg45,%vreg50
612B		  * %vreg52<def> = ADDI %zero, 52; GR32Bit:%vreg52
612B		  * %vreg53<def> = MUL %vreg47, %vreg52; GR32Bit:%vreg53,%vreg47,%vreg52
612B		  * %vreg54<def> = ADD %vreg53, %vreg49; GR32Bit:%vreg54,%vreg53,%vreg49
612B		  * %vreg55<def> = ADD %vreg54, %vreg51; GR32Bit:%vreg55,%vreg54,%vreg51
612B		  * %vreg56<def> = MUL %vreg55, %vreg44; GR32Bit:%vreg56,%vreg55,%vreg44
612B		  * %t5<def> = ADD %vreg43, %vreg56; GR32Bit:%vreg43,%vreg56
612B		  * END 0
612B		  * %zero<def> = ADDI %zero, 0
612B		  * %zero<def> = ADDI %zero, 0
788B		%t4<def> = ADD %t5, %zero
788B		  * %vreg59<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg59
788B		  * %vreg60<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg60
788B		  * %vreg61<def> = SRLI %vreg60, 12; GR32Bit:%vreg61,%vreg60
788B		  * %vreg62<def> = ADD %vreg59, %vreg61; GR32Bit:%vreg62,%vreg59,%vreg61
788B		  * %vreg63<def> = ADDI %zero, 32; GR32Bit:%vreg63
788B		  * %vreg64<def> = SRLI %t5, 22; GR32Bit:%vreg64
788B		  * %vreg65<def> = SRLI %t5, 12; GR32Bit:%vreg65
788B		  * %vreg66<def> = ANDI %vreg65, 15; GR32Bit:%vreg66,%vreg65
788B		  * %vreg67<def> = SRLI %t5, 6; GR32Bit:%vreg67
788B		  * %vreg68<def> = ANDI %vreg67, 63; GR32Bit:%vreg68,%vreg67
788B		  * %vreg69<def> = ADDI %zero, 832; GR32Bit:%vreg69
788B		  * %vreg70<def> = MUL %vreg64, %vreg69; GR32Bit:%vreg70,%vreg64,%vreg69
788B		  * %vreg71<def> = ADDI %zero, 52; GR32Bit:%vreg71
788B		  * %vreg72<def> = MUL %vreg66, %vreg71; GR32Bit:%vreg72,%vreg66,%vreg71
788B		  * %vreg73<def> = ADD %vreg72, %vreg68; GR32Bit:%vreg73,%vreg72,%vreg68
788B		  * %vreg74<def> = ADD %vreg73, %vreg70; GR32Bit:%vreg74,%vreg73,%vreg70
788B		  * %vreg75<def> = MUL %vreg74, %vreg63; GR32Bit:%vreg75,%vreg74,%vreg63
788B		  * %t5<def> = ADD %vreg62, %vreg75; GR32Bit:%vreg62,%vreg75
788B		  * END 0
788B		  * %zero<def> = ADDI %zero, 0
788B		  * %zero<def> = ADDI %zero, 0

# End machine code for function redefine_start1.

********** COMPUTING LIVE DEBUG VARIABLES: redefine_start1 **********
********** DEBUG VARIABLES **********
********** Compute Spill Weights **********
********** Function: redefine_start1
********** GREEDY REGISTER ALLOCATION **********
********** Function: redefine_start1

selectOrSplit GR32Bit:%vreg99 [564r,1236B:0)  0@564r
AllocationOrder(GR32Bit) = [ %t0 %t1 %t2 %fp %a0 %a1 %a2 %a3 %a4 %a6 %a7 %t3 %ra %sp %gp %tp %s0 %s1 %s2 %s3 %s4 %s5 %s6 %s7 %s8 %s9 %s10 %s11 ]
assigning %vreg99 to %t0: t0

selectOrSplit GR32Bit:%vreg76 [156r,348r:0)  0@156r
assigning %vreg76 to %t0: t0

selectOrSplit GR32Bit:%vreg5 [36r,148r:0)  0@36r
assigning %vreg5 to %t0: t0

selectOrSplit GR32Bit:%vreg24 [436r,548r:0)  0@436r
assigning %vreg24 to %t0: t0

selectOrSplit GR32Bit:%vreg43 [644r,756r:0)  0@644r
assigning %vreg43 to %t1: t1

selectOrSplit GR32Bit:%vreg62 [820r,932r:0)  0@820r
assigning %vreg62 to %t1: t1

selectOrSplit GR32Bit:%vreg81 [204r,316r:0)  0@204r
assigning %vreg81 to %t1: t1

selectOrSplit GR32Bit:%vreg6 [44r,140r:0)  0@44r
assigning %vreg6 to %t1: t1

selectOrSplit GR32Bit:%vreg25 [444r,540r:0)  0@444r
assigning %vreg25 to %t1: t1

selectOrSplit GR32Bit:%vreg44 [652r,748r:0)  0@652r
assigning %vreg44 to %t2: t2

selectOrSplit GR32Bit:%vreg63 [828r,924r:0)  0@828r
assigning %vreg63 to %t2: t2

selectOrSplit GR32Bit:%vreg82 [212r,308r:0)  0@212r
assigning %vreg82 to %t2: t2

selectOrSplit GR32Bit:%vreg7 [52r,100r:0)  0@52r
assigning %vreg7 to %t2: t2

selectOrSplit GR32Bit:%vreg9 [68r,116r:0)  0@68r
assigning %vreg9 to %fp: fp

selectOrSplit GR32Bit:%vreg26 [452r,500r:0)  0@452r
assigning %vreg26 to %t2: t2

selectOrSplit GR32Bit:%vreg28 [468r,516r:0)  0@468r
assigning %vreg28 to %fp: fp

selectOrSplit GR32Bit:%vreg45 [660r,708r:0)  0@660r
assigning %vreg45 to %fp: fp

selectOrSplit GR32Bit:%vreg47 [676r,724r:0)  0@676r
assigning %vreg47 to %a0: a0

selectOrSplit GR32Bit:%vreg64 [836r,884r:0)  0@836r
assigning %vreg64 to %fp: fp

selectOrSplit GR32Bit:%vreg66 [852r,900r:0)  0@852r
assigning %vreg66 to %a0: a0

selectOrSplit GR32Bit:%vreg83 [220r,268r:0)  0@220r
assigning %vreg83 to %fp: fp

selectOrSplit GR32Bit:%vreg85 [236r,284r:0)  0@236r
assigning %vreg85 to %a0: a0

selectOrSplit GR32Bit:%vreg11 [84r,124r:0)  0@84r
assigning %vreg11 to %a0: a0

selectOrSplit GR32Bit:%vreg30 [484r,524r:0)  0@484r
assigning %vreg30 to %a0: a0

selectOrSplit GR32Bit:%vreg49 [692r,732r:0)  0@692r
assigning %vreg49 to %a1: a1

selectOrSplit GR32Bit:%vreg68 [868r,908r:0)  0@868r
assigning %vreg68 to %a1: a1

selectOrSplit GR32Bit:%vreg87 [252r,292r:0)  0@252r
assigning %vreg87 to %a1: a1

selectOrSplit GR32Bit:%vreg13 [100r,132r:0)  0@100r
assigning %vreg13 to %t2: t2

selectOrSplit GR32Bit:%vreg32 [500r,532r:0)  0@500r
assigning %vreg32 to %t2: t2

selectOrSplit GR32Bit:%vreg51 [708r,740r:0)  0@708r
assigning %vreg51 to %fp: fp

selectOrSplit GR32Bit:%vreg70 [884r,916r:0)  0@884r
assigning %vreg70 to %fp: fp

selectOrSplit GR32Bit:%vreg89 [268r,300r:0)  0@268r
assigning %vreg89 to %fp: fp

selectOrSplit GR32Bit:%vreg2 [12r,36r:0)  0@12r
assigning %vreg2 to %t0: t0

selectOrSplit GR32Bit:%vreg21 [412r,436r:0)  0@412r
assigning %vreg21 to %t0: t0

selectOrSplit GR32Bit:%vreg40 [620r,644r:0)  0@620r
assigning %vreg40 to %t1: t1

selectOrSplit GR32Bit:%vreg59 [796r,820r:0)  0@796r
assigning %vreg59 to %t1: t1

selectOrSplit GR32Bit:%vreg78 [180r,204r:0)  0@180r
assigning %vreg78 to %t1: t1

selectOrSplit GR32Bit:%vreg95 [316r,332r:0)  0@316r
assigning %vreg95 to %t1: t1

selectOrSplit GR32Bit:%vreg3 [20r,28r:0)  0@20r
assigning %vreg3 to %t1: t1

selectOrSplit GR32Bit:%vreg4 [28r,36r:0)  0@28r
assigning %vreg4 to %t1: t1

selectOrSplit GR32Bit:%vreg8 [60r,68r:0)  0@60r
assigning %vreg8 to %fp: fp

selectOrSplit GR32Bit:%vreg10 [76r,84r:0)  0@76r
assigning %vreg10 to %a0: a0

selectOrSplit GR32Bit:%vreg12 [92r,100r:0)  0@92r
assigning %vreg12 to %a1: a1

selectOrSplit GR32Bit:%vreg14 [108r,116r:0)  0@108r
assigning %vreg14 to %a1: a1

selectOrSplit GR32Bit:%vreg15 [116r,124r:0)  0@116r
assigning %vreg15 to %fp: fp

selectOrSplit GR32Bit:%vreg16 [124r,132r:0)  0@124r
assigning %vreg16 to %fp: fp

selectOrSplit GR32Bit:%vreg17 [132r,140r:0)  0@132r
assigning %vreg17 to %t2: t2

selectOrSplit GR32Bit:%vreg18 [140r,148r:0)  0@140r
assigning %vreg18 to %t1: t1

selectOrSplit GR32Bit:%vreg22 [420r,428r:0)  0@420r
assigning %vreg22 to %t1: t1

selectOrSplit GR32Bit:%vreg23 [428r,436r:0)  0@428r
assigning %vreg23 to %t1: t1

selectOrSplit GR32Bit:%vreg27 [460r,468r:0)  0@460r
assigning %vreg27 to %fp: fp

selectOrSplit GR32Bit:%vreg29 [476r,484r:0)  0@476r
assigning %vreg29 to %a0: a0

selectOrSplit GR32Bit:%vreg31 [492r,500r:0)  0@492r
assigning %vreg31 to %a1: a1

selectOrSplit GR32Bit:%vreg33 [508r,516r:0)  0@508r
assigning %vreg33 to %a1: a1

selectOrSplit GR32Bit:%vreg34 [516r,524r:0)  0@516r
assigning %vreg34 to %fp: fp

selectOrSplit GR32Bit:%vreg35 [524r,532r:0)  0@524r
assigning %vreg35 to %fp: fp

selectOrSplit GR32Bit:%vreg36 [532r,540r:0)  0@532r
assigning %vreg36 to %t2: t2

selectOrSplit GR32Bit:%vreg37 [540r,548r:0)  0@540r
assigning %vreg37 to %t1: t1

selectOrSplit GR32Bit:%vreg41 [628r,636r:0)  0@628r
assigning %vreg41 to %t2: t2

selectOrSplit GR32Bit:%vreg42 [636r,644r:0)  0@636r
assigning %vreg42 to %t2: t2

selectOrSplit GR32Bit:%vreg46 [668r,676r:0)  0@668r
assigning %vreg46 to %a0: a0

selectOrSplit GR32Bit:%vreg48 [684r,692r:0)  0@684r
assigning %vreg48 to %a1: a1

selectOrSplit GR32Bit:%vreg50 [700r,708r:0)  0@700r
assigning %vreg50 to %a2: a2

selectOrSplit GR32Bit:%vreg52 [716r,724r:0)  0@716r
assigning %vreg52 to %a2: a2

selectOrSplit GR32Bit:%vreg53 [724r,732r:0)  0@724r
assigning %vreg53 to %a0: a0

selectOrSplit GR32Bit:%vreg54 [732r,740r:0)  0@732r
assigning %vreg54 to %a0: a0

selectOrSplit GR32Bit:%vreg55 [740r,748r:0)  0@740r
assigning %vreg55 to %fp: fp

selectOrSplit GR32Bit:%vreg56 [748r,756r:0)  0@748r
assigning %vreg56 to %t2: t2

selectOrSplit GR32Bit:%vreg60 [804r,812r:0)  0@804r
assigning %vreg60 to %t2: t2

selectOrSplit GR32Bit:%vreg61 [812r,820r:0)  0@812r
assigning %vreg61 to %t2: t2

selectOrSplit GR32Bit:%vreg65 [844r,852r:0)  0@844r
assigning %vreg65 to %a0: a0

selectOrSplit GR32Bit:%vreg67 [860r,868r:0)  0@860r
assigning %vreg67 to %a1: a1

selectOrSplit GR32Bit:%vreg69 [876r,884r:0)  0@876r
assigning %vreg69 to %a2: a2

selectOrSplit GR32Bit:%vreg71 [892r,900r:0)  0@892r
assigning %vreg71 to %a2: a2

selectOrSplit GR32Bit:%vreg72 [900r,908r:0)  0@900r
assigning %vreg72 to %a0: a0

selectOrSplit GR32Bit:%vreg73 [908r,916r:0)  0@908r
assigning %vreg73 to %a0: a0

selectOrSplit GR32Bit:%vreg74 [916r,924r:0)  0@916r
assigning %vreg74 to %fp: fp

selectOrSplit GR32Bit:%vreg75 [924r,932r:0)  0@924r
assigning %vreg75 to %t2: t2

selectOrSplit GR32Bit:%vreg77 [164r,172r:0)  0@164r
assigning %vreg77 to %t1: t1

selectOrSplit GR32Bit:%vreg79 [188r,196r:0)  0@188r
assigning %vreg79 to %t2: t2

selectOrSplit GR32Bit:%vreg80 [196r,204r:0)  0@196r
assigning %vreg80 to %t2: t2

selectOrSplit GR32Bit:%vreg84 [228r,236r:0)  0@228r
assigning %vreg84 to %a0: a0

selectOrSplit GR32Bit:%vreg86 [244r,252r:0)  0@244r
assigning %vreg86 to %a1: a1

selectOrSplit GR32Bit:%vreg88 [260r,268r:0)  0@260r
assigning %vreg88 to %a2: a2

selectOrSplit GR32Bit:%vreg90 [276r,284r:0)  0@276r
assigning %vreg90 to %a2: a2

selectOrSplit GR32Bit:%vreg91 [284r,292r:0)  0@284r
assigning %vreg91 to %a0: a0

selectOrSplit GR32Bit:%vreg92 [292r,300r:0)  0@292r
assigning %vreg92 to %a0: a0

selectOrSplit GR32Bit:%vreg93 [300r,308r:0)  0@300r
assigning %vreg93 to %fp: fp

selectOrSplit GR32Bit:%vreg94 [308r,316r:0)  0@308r
assigning %vreg94 to %t2: t2

selectOrSplit GR32Bit:%vreg96 [324r,332r:0)  0@324r
assigning %vreg96 to %t2: t2

selectOrSplit GR32Bit:%vreg97 [340r,348r:0)  0@340r
assigning %vreg97 to %t1: t1

selectOrSplit GR32Bit:%vreg98 [556r,564r:0)  0@556r
assigning %vreg98 to %t0: t0

selectOrSplit GR32Bit:%vreg100 [572r,580r:0)  0@572r
assigning %vreg100 to %t1: t1
********** REWRITE VIRTUAL REGISTERS **********
********** Function: redefine_start1
********** REGISTER MAP **********
[%vreg2 -> %t0] GR32Bit
[%vreg3 -> %t1] GR32Bit
[%vreg4 -> %t1] GR32Bit
[%vreg5 -> %t0] GR32Bit
[%vreg6 -> %t1] GR32Bit
[%vreg7 -> %t2] GR32Bit
[%vreg8 -> %fp] GR32Bit
[%vreg9 -> %fp] GR32Bit
[%vreg10 -> %a0] GR32Bit
[%vreg11 -> %a0] GR32Bit
[%vreg12 -> %a1] GR32Bit
[%vreg13 -> %t2] GR32Bit
[%vreg14 -> %a1] GR32Bit
[%vreg15 -> %fp] GR32Bit
[%vreg16 -> %fp] GR32Bit
[%vreg17 -> %t2] GR32Bit
[%vreg18 -> %t1] GR32Bit
[%vreg21 -> %t0] GR32Bit
[%vreg22 -> %t1] GR32Bit
[%vreg23 -> %t1] GR32Bit
[%vreg24 -> %t0] GR32Bit
[%vreg25 -> %t1] GR32Bit
[%vreg26 -> %t2] GR32Bit
[%vreg27 -> %fp] GR32Bit
[%vreg28 -> %fp] GR32Bit
[%vreg29 -> %a0] GR32Bit
[%vreg30 -> %a0] GR32Bit
[%vreg31 -> %a1] GR32Bit
[%vreg32 -> %t2] GR32Bit
[%vreg33 -> %a1] GR32Bit
[%vreg34 -> %fp] GR32Bit
[%vreg35 -> %fp] GR32Bit
[%vreg36 -> %t2] GR32Bit
[%vreg37 -> %t1] GR32Bit
[%vreg40 -> %t1] GR32Bit
[%vreg41 -> %t2] GR32Bit
[%vreg42 -> %t2] GR32Bit
[%vreg43 -> %t1] GR32Bit
[%vreg44 -> %t2] GR32Bit
[%vreg45 -> %fp] GR32Bit
[%vreg46 -> %a0] GR32Bit
[%vreg47 -> %a0] GR32Bit
[%vreg48 -> %a1] GR32Bit
[%vreg49 -> %a1] GR32Bit
[%vreg50 -> %a2] GR32Bit
[%vreg51 -> %fp] GR32Bit
[%vreg52 -> %a2] GR32Bit
[%vreg53 -> %a0] GR32Bit
[%vreg54 -> %a0] GR32Bit
[%vreg55 -> %fp] GR32Bit
[%vreg56 -> %t2] GR32Bit
[%vreg59 -> %t1] GR32Bit
[%vreg60 -> %t2] GR32Bit
[%vreg61 -> %t2] GR32Bit
[%vreg62 -> %t1] GR32Bit
[%vreg63 -> %t2] GR32Bit
[%vreg64 -> %fp] GR32Bit
[%vreg65 -> %a0] GR32Bit
[%vreg66 -> %a0] GR32Bit
[%vreg67 -> %a1] GR32Bit
[%vreg68 -> %a1] GR32Bit
[%vreg69 -> %a2] GR32Bit
[%vreg70 -> %fp] GR32Bit
[%vreg71 -> %a2] GR32Bit
[%vreg72 -> %a0] GR32Bit
[%vreg73 -> %a0] GR32Bit
[%vreg74 -> %fp] GR32Bit
[%vreg75 -> %t2] GR32Bit
[%vreg76 -> %t0] GR32Bit
[%vreg77 -> %t1] GR32Bit
[%vreg78 -> %t1] GR32Bit
[%vreg79 -> %t2] GR32Bit
[%vreg80 -> %t2] GR32Bit
[%vreg81 -> %t1] GR32Bit
[%vreg82 -> %t2] GR32Bit
[%vreg83 -> %fp] GR32Bit
[%vreg84 -> %a0] GR32Bit
[%vreg85 -> %a0] GR32Bit
[%vreg86 -> %a1] GR32Bit
[%vreg87 -> %a1] GR32Bit
[%vreg88 -> %a2] GR32Bit
[%vreg89 -> %fp] GR32Bit
[%vreg90 -> %a2] GR32Bit
[%vreg91 -> %a0] GR32Bit
[%vreg92 -> %a0] GR32Bit
[%vreg93 -> %fp] GR32Bit
[%vreg94 -> %t2] GR32Bit
[%vreg95 -> %t1] GR32Bit
[%vreg96 -> %t2] GR32Bit
[%vreg97 -> %t1] GR32Bit
[%vreg98 -> %t0] GR32Bit
[%vreg99 -> %t0] GR32Bit
[%vreg100 -> %t1] GR32Bit

0B	BB#0: derived from LLVM BB %redefine_start1.entry
8B		%t4<def> = ADD %t5, %zero
8B		  * %vreg2<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg2
8B		  * %vreg3<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg3
8B		  * %vreg4<def> = SRLI %vreg3<kill>, 12; GR32Bit:%vreg4,%vreg3
8B		  * %vreg5<def> = ADD %vreg2<kill>, %vreg4<kill>; GR32Bit:%vreg5,%vreg2,%vreg4
8B		  * %vreg6<def> = ADDI %zero, 32; GR32Bit:%vreg6
8B		  * %vreg7<def> = SRLI %t5, 22; GR32Bit:%vreg7
8B		  * %vreg8<def> = SRLI %t5, 12; GR32Bit:%vreg8
8B		  * %vreg9<def> = ANDI %vreg8<kill>, 15; GR32Bit:%vreg9,%vreg8
8B		  * %vreg10<def> = SRLI %t5, 6; GR32Bit:%vreg10
8B		  * %vreg11<def> = ANDI %vreg10<kill>, 63; GR32Bit:%vreg11,%vreg10
8B		  * %vreg12<def> = ADDI %zero, 832; GR32Bit:%vreg12
8B		  * %vreg13<def> = MUL %vreg7<kill>, %vreg12<kill>; GR32Bit:%vreg13,%vreg7,%vreg12
8B		  * %vreg14<def> = ADDI %zero, 52; GR32Bit:%vreg14
8B		  * %vreg15<def> = MUL %vreg9<kill>, %vreg14<kill>; GR32Bit:%vreg15,%vreg9,%vreg14
8B		  * %vreg16<def> = ADD %vreg15<kill>, %vreg11<kill>; GR32Bit:%vreg16,%vreg15,%vreg11
8B		  * %vreg17<def> = ADD %vreg16<kill>, %vreg13<kill>; GR32Bit:%vreg17,%vreg16,%vreg13
8B		  * %vreg18<def> = MUL %vreg17<kill>, %vreg6<kill>; GR32Bit:%vreg18,%vreg17,%vreg6
8B		  * %t5<def> = ADD %vreg5<kill>, %vreg18<kill>; GR32Bit:%vreg5,%vreg18
8B		  * %vreg76<def> = ADDI %zero, 64; GR32Bit:%vreg76
8B		  * %vreg77<def> = ADDI %zero, 1; GR32Bit:%vreg77
8B		  * WRITECM %vreg76, %vreg77<kill>, 60; GR32Bit:%vreg76,%vreg77
8B		  * %vreg78<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg78
8B		  * %vreg79<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg79
8B		  * %vreg80<def> = SRLI %vreg79<kill>, 12; GR32Bit:%vreg80,%vreg79
8B		  * %vreg81<def> = ADD %vreg78<kill>, %vreg80<kill>; GR32Bit:%vreg81,%vreg78,%vreg80
8B		  * %vreg82<def> = ADDI %zero, 32; GR32Bit:%vreg82
8B		  * %vreg83<def> = SRLI %vreg76, 22; GR32Bit:%vreg83,%vreg76
8B		  * %vreg84<def> = SRLI %vreg76, 12; GR32Bit:%vreg84,%vreg76
8B		  * %vreg85<def> = ANDI %vreg84<kill>, 15; GR32Bit:%vreg85,%vreg84
8B		  * %vreg86<def> = SRLI %vreg76, 6; GR32Bit:%vreg86,%vreg76
8B		  * %vreg87<def> = ANDI %vreg86<kill>, 63; GR32Bit:%vreg87,%vreg86
8B		  * %vreg88<def> = ADDI %zero, 832; GR32Bit:%vreg88
8B		  * %vreg89<def> = MUL %vreg83<kill>, %vreg88<kill>; GR32Bit:%vreg89,%vreg83,%vreg88
8B		  * %vreg90<def> = ADDI %zero, 52; GR32Bit:%vreg90
8B		  * %vreg91<def> = MUL %vreg85<kill>, %vreg90<kill>; GR32Bit:%vreg91,%vreg85,%vreg90
8B		  * %vreg92<def> = ADD %vreg91<kill>, %vreg87<kill>; GR32Bit:%vreg92,%vreg91,%vreg87
8B		  * %vreg93<def> = ADD %vreg92<kill>, %vreg89<kill>; GR32Bit:%vreg93,%vreg92,%vreg89
8B		  * %vreg94<def> = MUL %vreg93<kill>, %vreg82<kill>; GR32Bit:%vreg94,%vreg93,%vreg82
8B		  * %vreg95<def> = ADD %vreg94<kill>, %vreg81<kill>; GR32Bit:%vreg95,%vreg94,%vreg81
8B		  * %vreg96<def> = LW %t5, 0; GR32Bit:%vreg96
8B		  * SW %vreg96<kill>, %vreg95<kill>, 28; GR32Bit:%vreg96,%vreg95
8B		  * %vreg97<def> = LUI 1; GR32Bit:%vreg97
8B		  * WRITEPM %vreg97<kill>, %vreg76<kill>, 0; GR32Bit:%vreg97,%vreg76
8B		  * END 0
8B		  * %zero<def> = ADDI %zero, 0
8B		  * %zero<def> = ADDI %zero, 0
380B		%t4<def> = ADD %t5, %zero
380B		  * %vreg21<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg21
380B		  * %vreg22<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg22
380B		  * %vreg23<def> = SRLI %vreg22<kill>, 12; GR32Bit:%vreg23,%vreg22
380B		  * %vreg24<def> = ADD %vreg21<kill>, %vreg23<kill>; GR32Bit:%vreg24,%vreg21,%vreg23
380B		  * %vreg25<def> = ADDI %zero, 32; GR32Bit:%vreg25
380B		  * %vreg26<def> = SRLI %t5, 22; GR32Bit:%vreg26
380B		  * %vreg27<def> = SRLI %t5, 12; GR32Bit:%vreg27
380B		  * %vreg28<def> = ANDI %vreg27<kill>, 15; GR32Bit:%vreg28,%vreg27
380B		  * %vreg29<def> = SRLI %t5, 6; GR32Bit:%vreg29
380B		  * %vreg30<def> = ANDI %vreg29<kill>, 63; GR32Bit:%vreg30,%vreg29
380B		  * %vreg31<def> = ADDI %zero, 832; GR32Bit:%vreg31
380B		  * %vreg32<def> = MUL %vreg26<kill>, %vreg31<kill>; GR32Bit:%vreg32,%vreg26,%vreg31
380B		  * %vreg33<def> = ADDI %zero, 52; GR32Bit:%vreg33
380B		  * %vreg34<def> = MUL %vreg28<kill>, %vreg33<kill>; GR32Bit:%vreg34,%vreg28,%vreg33
380B		  * %vreg35<def> = ADD %vreg34<kill>, %vreg30<kill>; GR32Bit:%vreg35,%vreg34,%vreg30
380B		  * %vreg36<def> = ADD %vreg35<kill>, %vreg32<kill>; GR32Bit:%vreg36,%vreg35,%vreg32
380B		  * %vreg37<def> = MUL %vreg36<kill>, %vreg25<kill>; GR32Bit:%vreg37,%vreg36,%vreg25
380B		  * %t5<def> = ADD %vreg24<kill>, %vreg37<kill>; GR32Bit:%vreg24,%vreg37
380B		  * %vreg98<def> = LUI 1; GR32Bit:%vreg98
380B		  * %vreg99<def> = DREADPM %vreg98<kill>, 0; GR32Bit:%vreg99,%vreg98
380B		  * %vreg100<def> = LUI 1048575; GR32Bit:%vreg100
380B		  * %a5<def> = LUI 4095
380B		  * %a5<def> = SRLI %a5<internal>, 12
380B		  * ADD %vreg100, %vreg100, %a5; GR32Bit:%vreg100
380B		  * SYNC %vreg99, %vreg100<kill>, 60; GR32Bit:%vreg99,%vreg100
380B		  * END 0
380B		  * %zero<def> = ADDI %zero, 0
380B		  * %zero<def> = ADDI %zero, 0
612B		%t4<def> = ADD %t5, %zero
612B		  * %vreg40<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg40
612B		  * %vreg41<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg41
612B		  * %vreg42<def> = SRLI %vreg41<kill>, 12; GR32Bit:%vreg42,%vreg41
612B		  * %vreg43<def> = ADD %vreg40<kill>, %vreg42<kill>; GR32Bit:%vreg43,%vreg40,%vreg42
612B		  * %vreg44<def> = ADDI %zero, 32; GR32Bit:%vreg44
612B		  * %vreg45<def> = SRLI %t5, 22; GR32Bit:%vreg45
612B		  * %vreg46<def> = SRLI %t5, 12; GR32Bit:%vreg46
612B		  * %vreg47<def> = ANDI %vreg46<kill>, 15; GR32Bit:%vreg47,%vreg46
612B		  * %vreg48<def> = SRLI %t5, 6; GR32Bit:%vreg48
612B		  * %vreg49<def> = ANDI %vreg48<kill>, 63; GR32Bit:%vreg49,%vreg48
612B		  * %vreg50<def> = ADDI %zero, 832; GR32Bit:%vreg50
612B		  * %vreg51<def> = MUL %vreg45<kill>, %vreg50<kill>; GR32Bit:%vreg51,%vreg45,%vreg50
612B		  * %vreg52<def> = ADDI %zero, 52; GR32Bit:%vreg52
612B		  * %vreg53<def> = MUL %vreg47<kill>, %vreg52<kill>; GR32Bit:%vreg53,%vreg47,%vreg52
612B		  * %vreg54<def> = ADD %vreg53<kill>, %vreg49<kill>; GR32Bit:%vreg54,%vreg53,%vreg49
612B		  * %vreg55<def> = ADD %vreg54<kill>, %vreg51<kill>; GR32Bit:%vreg55,%vreg54,%vreg51
612B		  * %vreg56<def> = MUL %vreg55<kill>, %vreg44<kill>; GR32Bit:%vreg56,%vreg55,%vreg44
612B		  * %t5<def> = ADD %vreg43<kill>, %vreg56<kill>; GR32Bit:%vreg43,%vreg56
612B		  * END 0
612B		  * %zero<def> = ADDI %zero, 0
612B		  * %zero<def> = ADDI %zero, 0
788B		%t4<def> = ADD %t5, %zero
788B		  * %vreg59<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg59
788B		  * %vreg60<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg60
788B		  * %vreg61<def> = SRLI %vreg60<kill>, 12; GR32Bit:%vreg61,%vreg60
788B		  * %vreg62<def> = ADD %vreg59<kill>, %vreg61<kill>; GR32Bit:%vreg62,%vreg59,%vreg61
788B		  * %vreg63<def> = ADDI %zero, 32; GR32Bit:%vreg63
788B		  * %vreg64<def> = SRLI %t5, 22; GR32Bit:%vreg64
788B		  * %vreg65<def> = SRLI %t5, 12; GR32Bit:%vreg65
788B		  * %vreg66<def> = ANDI %vreg65<kill>, 15; GR32Bit:%vreg66,%vreg65
788B		  * %vreg67<def> = SRLI %t5, 6; GR32Bit:%vreg67
788B		  * %vreg68<def> = ANDI %vreg67<kill>, 63; GR32Bit:%vreg68,%vreg67
788B		  * %vreg69<def> = ADDI %zero, 832; GR32Bit:%vreg69
788B		  * %vreg70<def> = MUL %vreg64<kill>, %vreg69<kill>; GR32Bit:%vreg70,%vreg64,%vreg69
788B		  * %vreg71<def> = ADDI %zero, 52; GR32Bit:%vreg71
788B		  * %vreg72<def> = MUL %vreg66<kill>, %vreg71<kill>; GR32Bit:%vreg72,%vreg66,%vreg71
788B		  * %vreg73<def> = ADD %vreg72<kill>, %vreg68<kill>; GR32Bit:%vreg73,%vreg72,%vreg68
788B		  * %vreg74<def> = ADD %vreg73<kill>, %vreg70<kill>; GR32Bit:%vreg74,%vreg73,%vreg70
788B		  * %vreg75<def> = MUL %vreg74<kill>, %vreg63<kill>; GR32Bit:%vreg75,%vreg74,%vreg63
788B		  * %t5<def> = ADD %vreg62<kill>, %vreg75<kill>; GR32Bit:%vreg62,%vreg75
788B		  * END 0
788B		  * %zero<def> = ADDI %zero, 0
788B		  * %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 32
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = ADDI %zero, 64
> %t1<def> = ADDI %zero, 1
> WRITECM %t0, %t1<kill>, 60
> %t1<def> = LUI <MCSym="%hi("ga#512")">
> %t2<def> = LUI <MCSym="%lo("ga#512")">
> %t2<def> = SRLI %t2<kill>, 12
> %t1<def> = ADD %t1<kill>, %t2<kill>
> %t2<def> = ADDI %zero, 32
> %fp<def> = SRLI %t0, 22
> %a0<def> = SRLI %t0, 12
> %a0<def> = ANDI %a0<kill>, 15
> %a1<def> = SRLI %t0, 6
> %a1<def> = ANDI %a1<kill>, 63
> %a2<def> = ADDI %zero, 832
> %fp<def> = MUL %fp<kill>, %a2<kill>
> %a2<def> = ADDI %zero, 52
> %a0<def> = MUL %a0<kill>, %a2<kill>
> %a0<def> = ADD %a0<kill>, %a1<kill>
> %fp<def> = ADD %a0<kill>, %fp<kill>
> %t2<def> = MUL %fp<kill>, %t2<kill>
> %t1<def> = ADD %t2<kill>, %t1<kill>
> %t2<def> = LW %t5, 0
> SW %t2<kill>, %t1<kill>, 28
> %t1<def> = LUI 1
> WRITEPM %t1<kill>, %t0<kill>, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 32
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = LUI 1
> %t0<def> = DREADPM %t0<kill>, 0
> %t1<def> = LUI 1048575
> %a5<def> = LUI 4095
> %a5<def> = SRLI %a5<internal>, 12
> ADD %t1, %t1, %a5
> SYNC %t0, %t1<kill>, 60
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t1<def> = LUI <MCSym="%hi("ga#512")">
> %t2<def> = LUI <MCSym="%lo("ga#512")">
> %t2<def> = SRLI %t2<kill>, 12
> %t1<def> = ADD %t1<kill>, %t2<kill>
> %t2<def> = ADDI %zero, 32
> %fp<def> = SRLI %t5, 22
> %a0<def> = SRLI %t5, 12
> %a0<def> = ANDI %a0<kill>, 15
> %a1<def> = SRLI %t5, 6
> %a1<def> = ANDI %a1<kill>, 63
> %a2<def> = ADDI %zero, 832
> %fp<def> = MUL %fp<kill>, %a2<kill>
> %a2<def> = ADDI %zero, 52
> %a0<def> = MUL %a0<kill>, %a2<kill>
> %a0<def> = ADD %a0<kill>, %a1<kill>
> %fp<def> = ADD %a0<kill>, %fp<kill>
> %t2<def> = MUL %fp<kill>, %t2<kill>
> %t5<def> = ADD %t1<kill>, %t2<kill>
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t1<def> = LUI <MCSym="%hi("ga#512")">
> %t2<def> = LUI <MCSym="%lo("ga#512")">
> %t2<def> = SRLI %t2<kill>, 12
> %t1<def> = ADD %t1<kill>, %t2<kill>
> %t2<def> = ADDI %zero, 32
> %fp<def> = SRLI %t5, 22
> %a0<def> = SRLI %t5, 12
> %a0<def> = ANDI %a0<kill>, 15
> %a1<def> = SRLI %t5, 6
> %a1<def> = ANDI %a1<kill>, 63
> %a2<def> = ADDI %zero, 832
> %fp<def> = MUL %fp<kill>, %a2<kill>
> %a2<def> = ADDI %zero, 52
> %a0<def> = MUL %a0<kill>, %a2<kill>
> %a0<def> = ADD %a0<kill>, %a1<kill>
> %fp<def> = ADD %a0<kill>, %fp<kill>
> %t2<def> = MUL %fp<kill>, %t2<kill>
> %t5<def> = ADD %t1<kill>, %t2<kill>
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
********** EMITTING LIVE DEBUG VARIABLES **********
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: redefine_start1
max x:0, min x:0
max y:0, min y:0
current state of mf:# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %redefine_start1.entry
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 32
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = ADDI %zero, 64
	  * %t1<def> = ADDI %zero, 1
	  * WRITECM %t0, %t1<kill>, 60
	  * %t1<def> = LUI <MCSym="%hi("ga#512")">
	  * %t2<def> = LUI <MCSym="%lo("ga#512")">
	  * %t2<def> = SRLI %t2<kill>, 12
	  * %t1<def> = ADD %t1<kill>, %t2<kill>
	  * %t2<def> = ADDI %zero, 32
	  * %fp<def> = SRLI %t0, 22
	  * %a0<def> = SRLI %t0, 12
	  * %a0<def> = ANDI %a0<kill>, 15
	  * %a1<def> = SRLI %t0, 6
	  * %a1<def> = ANDI %a1<kill>, 63
	  * %a2<def> = ADDI %zero, 832
	  * %fp<def> = MUL %fp<kill>, %a2<kill>
	  * %a2<def> = ADDI %zero, 52
	  * %a0<def> = MUL %a0<kill>, %a2<kill>
	  * %a0<def> = ADD %a0<kill>, %a1<kill>
	  * %fp<def> = ADD %a0<kill>, %fp<kill>
	  * %t2<def> = MUL %fp<kill>, %t2<kill>
	  * %t1<def> = ADD %t2<kill>, %t1<kill>
	  * %t2<def> = LW %t5, 0
	  * SW %t2<kill>, %t1<kill>, 28
	  * %t1<def> = LUI 1
	  * WRITEPM %t1<kill>, %t0<kill>, 0
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 32
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = LUI 1
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * %t1<def> = LUI 1048575
	  * %a5<def> = LUI 4095
	  * %a5<def> = SRLI %a5<internal>, 12
	  * ADD %t1, %t1, %a5
	  * SYNC %t0, %t1<kill>, 60
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t1<def> = LUI <MCSym="%hi("ga#512")">
	  * %t2<def> = LUI <MCSym="%lo("ga#512")">
	  * %t2<def> = SRLI %t2<kill>, 12
	  * %t1<def> = ADD %t1<kill>, %t2<kill>
	  * %t2<def> = ADDI %zero, 32
	  * %fp<def> = SRLI %t5, 22
	  * %a0<def> = SRLI %t5, 12
	  * %a0<def> = ANDI %a0<kill>, 15
	  * %a1<def> = SRLI %t5, 6
	  * %a1<def> = ANDI %a1<kill>, 63
	  * %a2<def> = ADDI %zero, 832
	  * %fp<def> = MUL %fp<kill>, %a2<kill>
	  * %a2<def> = ADDI %zero, 52
	  * %a0<def> = MUL %a0<kill>, %a2<kill>
	  * %a0<def> = ADD %a0<kill>, %a1<kill>
	  * %fp<def> = ADD %a0<kill>, %fp<kill>
	  * %t2<def> = MUL %fp<kill>, %t2<kill>
	  * %t5<def> = ADD %t1<kill>, %t2<kill>
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t1<def> = LUI <MCSym="%hi("ga#512")">
	  * %t2<def> = LUI <MCSym="%lo("ga#512")">
	  * %t2<def> = SRLI %t2<kill>, 12
	  * %t1<def> = ADD %t1<kill>, %t2<kill>
	  * %t2<def> = ADDI %zero, 32
	  * %fp<def> = SRLI %t5, 22
	  * %a0<def> = SRLI %t5, 12
	  * %a0<def> = ANDI %a0<kill>, 15
	  * %a1<def> = SRLI %t5, 6
	  * %a1<def> = ANDI %a1<kill>, 63
	  * %a2<def> = ADDI %zero, 832
	  * %fp<def> = MUL %fp<kill>, %a2<kill>
	  * %a2<def> = ADDI %zero, 52
	  * %a0<def> = MUL %a0<kill>, %a2<kill>
	  * %a0<def> = ADD %a0<kill>, %a1<kill>
	  * %fp<def> = ADD %a0<kill>, %fp<kill>
	  * %t2<def> = MUL %fp<kill>, %t2<kill>
	  * %t5<def> = ADD %t1<kill>, %t2<kill>
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0

# End machine code for function redefine_start1.

CGP: Found      local addrmode: [4 + Base:@redefine_out_TPUMCR]
CGP: Found      local addrmode: [Base:%1]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:@redefine_out_TPUMCR]
CGP: Found      local addrmode: [4 + Base:@redefine_out_TPUMCR]
CGP: Found      local addrmode: [Base:%1]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:@redefine_out_TPUMCR]
To merge:

redefine_start2.newName01:
  store i32 %0, i32* getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1), align 4
  %2 = load %struct.TP3_TAG** %1, align 4
  %3 = bitcast %struct.TP3_TAG* %2 to i32*
  %4 = load i32* %3, align 4
  store i32 %4, i32* getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0), align 4
  br label %redefine_start2.return



Computing probabilities for redefine_start2.return



=== redefine_start2
store visit is after?  store i32 %0, i32* getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1), align 4
I was here to add i32* getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1)
I was here to add @redefine_out_TPUMCR = common global [2 x i32] zeroinitializer, align 4
whats in dag after store?SelectionDAG has 12 nodes:
  0x385c078: ch = EntryToken [ORD=3]

  0x3878f80: i32 = undef [ORD=3]

    0x385c078: <multiple use>
    0x3878e80: i32 = FrameIndex<-1>

    0x3878f80: <multiple use>
  0x3879080: i32,ch = load 0x385c078, 0x3878e80, 0x3878f80<LD4[FixedStack-1]>

  0x3879280: i64 = Constant<4>

  0x3879580: i32 = Constant<0>

    0x385c078: <multiple use>
      0x385c078: <multiple use>
      0x3878d80: i32 = Register %vreg0 [ORD=3]

    0x3878c80: i32,ch = CopyFromReg 0x385c078, 0x3878d80 [ORD=3]

      0x3879180: i32 = GlobalAddress<[2 x i32]* @redefine_out_TPUMCR> 0 [ORD=2]

      0x3879380: i32 = Constant<4> [ORD=2]

    0x3879480: i32 = add 0x3879180, 0x3879380 [ORD=2]

    0x3878f80: <multiple use>
  0x3879680: ch = store 0x385c078, 0x3878c80, 0x3879480, 0x3878f80<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1)]> [ORD=3]


visiting load instruction   %2 = load %struct.TP3_TAG** %1, align 4
I was here to add %struct.TP3_TAG** %1
arg match found with argIndex:-1
Argument does not have assigned frame index!
The value is an argument for which I am here to get arg frame index as:0
whats the index?-1
with I type %struct.TP3_TAG*and sd value :0x3878e80: i32 = FrameIndex<-1>
new load?0x3879080: i32,ch = load 0x385c078, 0x3878e80, 0x3878f80<LD4[%1]>
dag after load is dealt with?SelectionDAG has 12 nodes:
  0x385c078: ch = EntryToken [ORD=3]

  0x3878f80: i32 = undef [ORD=3]

    0x385c078: <multiple use>
    0x3878e80: i32 = FrameIndex<-1>

    0x3878f80: <multiple use>
  0x3879080: i32,ch = load 0x385c078, 0x3878e80, 0x3878f80<LD4[%1]>

  0x3879280: i64 = Constant<4>

  0x3879580: i32 = Constant<0>

    0x385c078: <multiple use>
      0x385c078: <multiple use>
      0x3878d80: i32 = Register %vreg0 [ORD=3]

    0x3878c80: i32,ch = CopyFromReg 0x385c078, 0x3878d80 [ORD=3]

      0x3879180: i32 = GlobalAddress<[2 x i32]* @redefine_out_TPUMCR> 0 [ORD=2]

      0x3879380: i32 = Constant<4> [ORD=2]

    0x3879480: i32 = add 0x3879180, 0x3879380 [ORD=2]

    0x3878f80: <multiple use>
  0x3879680: ch = store 0x385c078, 0x3878c80, 0x3879480, 0x3878f80<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1)]> [ORD=3]


visiting load instruction   %4 = load i32* %3, align 4
with I type i32and sd value :0x3879080: i32,ch = load 0x385c078, 0x3878e80, 0x3878f80<LD4[%1]>
new load?0x3879780: i32,ch = load 0x3879680, 0x3879080, 0x3878f80<LD4[%3]>
dag after load is dealt with?SelectionDAG has 13 nodes:
  0x385c078: ch = EntryToken [ORD=3]

  0x3878f80: i32 = undef [ORD=3]

  0x3879280: i64 = Constant<4>

  0x3879580: i32 = Constant<0>

      0x385c078: <multiple use>
        0x385c078: <multiple use>
        0x3878d80: i32 = Register %vreg0 [ORD=3]

      0x3878c80: i32,ch = CopyFromReg 0x385c078, 0x3878d80 [ORD=3]

        0x3879180: i32 = GlobalAddress<[2 x i32]* @redefine_out_TPUMCR> 0 [ORD=2]

        0x3879380: i32 = Constant<4> [ORD=2]

      0x3879480: i32 = add 0x3879180, 0x3879380 [ORD=2]

      0x3878f80: <multiple use>
    0x3879680: ch = store 0x385c078, 0x3878c80, 0x3879480, 0x3878f80<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1)]> [ORD=3]

      0x385c078: <multiple use>
      0x3878e80: i32 = FrameIndex<-1> [ORD=4]

      0x3878f80: <multiple use>
    0x3879080: i32,ch = load 0x385c078, 0x3878e80, 0x3878f80<LD4[%1]> [ORD=4]

    0x3878f80: <multiple use>
  0x3879780: i32,ch = load 0x3879680, 0x3879080, 0x3878f80<LD4[%3]>

    0x385c078: <multiple use>
      0x385c078: <multiple use>
      0x3878d80: i32 = Register %vreg0 [ORD=3]

    0x3878c80: i32,ch = CopyFromReg 0x385c078, 0x3878d80 [ORD=3]

      0x3879180: i32 = GlobalAddress<[2 x i32]* @redefine_out_TPUMCR> 0 [ORD=2]

      0x3879380: i32 = Constant<4> [ORD=2]

    0x3879480: i32 = add 0x3879180, 0x3879380 [ORD=2]

    0x3878f80: <multiple use>
  0x3879680: ch = store 0x385c078, 0x3878c80, 0x3879480, 0x3878f80<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1)]> [ORD=3]


store visit is after?  store i32 %4, i32* getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0), align 4
I was here to add i32* getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0)
whats in dag after store?SelectionDAG has 14 nodes:
  0x385c078: ch = EntryToken [ORD=3]

  0x3878f80: i32 = undef [ORD=3]

  0x3879180: i32 = GlobalAddress<[2 x i32]* @redefine_out_TPUMCR> 0 [ORD=2]

  0x3879280: i64 = Constant<4>

  0x3879580: i32 = Constant<0>

      0x385c078: <multiple use>
        0x385c078: <multiple use>
        0x3878d80: i32 = Register %vreg0 [ORD=3]

      0x3878c80: i32,ch = CopyFromReg 0x385c078, 0x3878d80 [ORD=3]

        0x3879180: <multiple use>
        0x3879380: i32 = Constant<4> [ORD=2]

      0x3879480: i32 = add 0x3879180, 0x3879380 [ORD=2]

      0x3878f80: <multiple use>
    0x3879680: ch = store 0x385c078, 0x3878c80, 0x3879480, 0x3878f80<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1)]> [ORD=3]

      0x385c078: <multiple use>
      0x3878e80: i32 = FrameIndex<-1> [ORD=4]

      0x3878f80: <multiple use>
    0x3879080: i32,ch = load 0x385c078, 0x3878e80, 0x3878f80<LD4[%1]> [ORD=4]

    0x3878f80: <multiple use>
  0x3879780: i32,ch = load 0x3879680, 0x3879080, 0x3878f80<LD4[%3]> [ORD=6]

    0x3879780: <multiple use>
    0x3879780: <multiple use>
    0x3879180: <multiple use>
    0x3878f80: <multiple use>
  0x3879880: ch = store 0x3879780:1, 0x3879780, 0x3879180, 0x3878f80<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0)]> [ORD=8]


Initial selection DAG: BB#0 'redefine_start2:redefine_start2.return'
SelectionDAG has 14 nodes:
  0x385c078: ch = EntryToken [ORD=3]

  0x3878f80: i32 = undef [ORD=3]

  0x3879180: i32 = GlobalAddress<[2 x i32]* @redefine_out_TPUMCR> 0 [ORD=2]

  0x3879280: i64 = Constant<4>

  0x3879580: i32 = Constant<0>

      0x385c078: <multiple use>
        0x385c078: <multiple use>
        0x3878d80: i32 = Register %vreg0 [ORD=3]

      0x3878c80: i32,ch = CopyFromReg 0x385c078, 0x3878d80 [ORD=3]

        0x3879180: <multiple use>
        0x3879380: i32 = Constant<4> [ORD=2]

      0x3879480: i32 = add 0x3879180, 0x3879380 [ORD=2]

      0x3878f80: <multiple use>
    0x3879680: ch = store 0x385c078, 0x3878c80, 0x3879480, 0x3878f80<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1)]> [ORD=3]

      0x385c078: <multiple use>
      0x3878e80: i32 = FrameIndex<-1> [ORD=4]

      0x3878f80: <multiple use>
    0x3879080: i32,ch = load 0x385c078, 0x3878e80, 0x3878f80<LD4[%1]> [ORD=4]

    0x3878f80: <multiple use>
  0x3879780: i32,ch = load 0x3879680, 0x3879080, 0x3878f80<LD4[%3]> [ORD=6]

    0x3879780: <multiple use>
    0x3879780: <multiple use>
    0x3879180: <multiple use>
    0x3878f80: <multiple use>
  0x3879880: ch = store 0x3879780:1, 0x3879780, 0x3879180, 0x3878f80<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0)]> [ORD=8]



Replacing.1 0x3879080: i32,ch = load 0x385c078, 0x3878e80, 0x3878f80<LD4[%1](align=16)> [ORD=4]

With: 0x3879080: i32,ch = load 0x385c078, 0x3878e80, 0x3878f80<LD4[%1](align=16)> [ORD=4]
 and 1 other values
Optimized lowered selection DAG: BB#0 'redefine_start2:redefine_start2.return'
SelectionDAG has 12 nodes:
  0x385c078: ch = EntryToken [ORD=3]

  0x3878f80: i32 = undef [ORD=3]

  0x3879180: i32 = GlobalAddress<[2 x i32]* @redefine_out_TPUMCR> 0 [ORD=2]

      0x385c078: <multiple use>
        0x385c078: <multiple use>
        0x3878d80: i32 = Register %vreg0 [ORD=3]

      0x3878c80: i32,ch = CopyFromReg 0x385c078, 0x3878d80 [ORD=3]

        0x3879180: <multiple use>
        0x3879380: i32 = Constant<4> [ORD=2]

      0x3879480: i32 = add 0x3879180, 0x3879380 [ORD=2]

      0x3878f80: <multiple use>
    0x3879680: ch = store 0x385c078, 0x3878c80, 0x3879480, 0x3878f80<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1)]> [ORD=3]

      0x385c078: <multiple use>
      0x3878e80: i32 = FrameIndex<-1> [ORD=4]

      0x3878f80: <multiple use>
    0x3879080: i32,ch = load 0x385c078, 0x3878e80, 0x3878f80<LD4[%1](align=16)> [ORD=4]

    0x3878f80: <multiple use>
  0x3879780: i32,ch = load 0x3879680, 0x3879080, 0x3878f80<LD4[%3]> [ORD=6]

    0x3879780: <multiple use>
    0x3879780: <multiple use>
    0x3879180: <multiple use>
    0x3878f80: <multiple use>
  0x3879880: ch = store 0x3879780:1, 0x3879780, 0x3879180, 0x3878f80<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0)]> [ORD=8]


Legally typed node: 0x3879380: i32 = Constant<4> [ORD=2] [ID=0]

Legally typed node: 0x3879180: i32 = GlobalAddress<[2 x i32]* @redefine_out_TPUMCR> 0 [ORD=2] [ID=0]

Legally typed node: 0x3879480: i32 = add 0x3879180, 0x3879380 [ORD=2] [ID=0]

Legally typed node: 0x3878f80: i32 = undef [ORD=3] [ID=0]

Legally typed node: 0x3878e80: i32 = FrameIndex<-1> [ORD=4] [ID=0]

Legally typed node: 0x3878d80: i32 = Register %vreg0 [ORD=3] [ID=0]

Legally typed node: 0x385c078: ch = EntryToken [ORD=3] [ID=0]

Legally typed node: 0x3878c80: i32,ch = CopyFromReg 0x385c078, 0x3878d80 [ORD=3] [ID=0]

Legally typed node: 0x3879680: ch = store 0x385c078, 0x3878c80, 0x3879480, 0x3878f80<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1)]> [ORD=3] [ID=0]

Legally typed node: 0x3879080: i32,ch = load 0x385c078, 0x3878e80, 0x3878f80<LD4[%1](align=16)> [ORD=4] [ID=0]

Legally typed node: 0x3879780: i32,ch = load 0x3879680, 0x3879080, 0x3878f80<LD4[%3]> [ORD=6] [ID=0]

Legally typed node: 0x3879880: ch = store 0x3879780:1, 0x3879780, 0x3879180, 0x3878f80<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0)]> [ORD=8] [ID=0]

Legally typed node: 0x7fff1ed032b0: ch = handlenode 0x3879880 [ID=0]

Type-legalized selection DAG: BB#0 'redefine_start2:redefine_start2.return'
SelectionDAG has 12 nodes:
  0x385c078: ch = EntryToken [ORD=3] [ID=-3]

  0x3878f80: i32 = undef [ORD=3] [ID=-3]

  0x3879180: i32 = GlobalAddress<[2 x i32]* @redefine_out_TPUMCR> 0 [ORD=2] [ID=-3]

      0x385c078: <multiple use>
        0x385c078: <multiple use>
        0x3878d80: i32 = Register %vreg0 [ORD=3] [ID=-3]

      0x3878c80: i32,ch = CopyFromReg 0x385c078, 0x3878d80 [ORD=3] [ID=-3]

        0x3879180: <multiple use>
        0x3879380: i32 = Constant<4> [ORD=2] [ID=-3]

      0x3879480: i32 = add 0x3879180, 0x3879380 [ORD=2] [ID=-3]

      0x3878f80: <multiple use>
    0x3879680: ch = store 0x385c078, 0x3878c80, 0x3879480, 0x3878f80<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1)]> [ORD=3] [ID=-3]

      0x385c078: <multiple use>
      0x3878e80: i32 = FrameIndex<-1> [ORD=4] [ID=-3]

      0x3878f80: <multiple use>
    0x3879080: i32,ch = load 0x385c078, 0x3878e80, 0x3878f80<LD4[%1](align=16)> [ORD=4] [ID=-3]

    0x3878f80: <multiple use>
  0x3879780: i32,ch = load 0x3879680, 0x3879080, 0x3878f80<LD4[%3]> [ORD=6] [ID=-3]

    0x3879780: <multiple use>
    0x3879780: <multiple use>
    0x3879180: <multiple use>
    0x3878f80: <multiple use>
  0x3879880: ch = store 0x3879780:1, 0x3879780, 0x3879180, 0x3878f80<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0)]> [ORD=8] [ID=-3]


Legalized selection DAG: BB#0 'redefine_start2:redefine_start2.return'
SelectionDAG has 16 nodes:
  0x385c078: ch = EntryToken [ORD=3] [ID=0]

  0x3878f80: i32 = undef [ORD=3] [ID=3]

      0x385c078: <multiple use>
        0x385c078: <multiple use>
        0x3878d80: i32 = Register %vreg0 [ORD=3] [ID=1]

      0x3878c80: i32,ch = CopyFromReg 0x385c078, 0x3878d80 [ORD=3] [ID=6]

        0x3883230: <multiple use>
        0x3879380: i32 = Constant<4> [ORD=2] [ID=5]

      0x3879480: i32 = add 0x3883230, 0x3879380 [ORD=2] [ID=8]

      0x3878f80: <multiple use>
    0x3879680: ch = store 0x385c078, 0x3878c80, 0x3879480, 0x3878f80<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1)]> [ORD=3] [ID=9]

      0x385c078: <multiple use>
      0x3878e80: i32 = FrameIndex<-1> [ORD=4] [ID=2]

      0x3878f80: <multiple use>
    0x3879080: i32,ch = load 0x385c078, 0x3878e80, 0x3878f80<LD4[%1](align=16)> [ORD=4] [ID=7]

    0x3878f80: <multiple use>
  0x3879780: i32,ch = load 0x3879680, 0x3879080, 0x3878f80<LD4[%3]> [ORD=6] [ID=10]

      0x3879280: i32 = TargetGlobalAddress<[2 x i32]* @redefine_out_TPUMCR> 0 [TF=2]

    0x3879980: i32 = REDEFINEISD::Hi 0x3879280

      0x3879580: i32 = TargetGlobalAddress<[2 x i32]* @redefine_out_TPUMCR> 0 [TF=3]

    0x3879a80: i32 = REDEFINEISD::Lo 0x3879580

  0x3883230: i32 = add 0x3879980, 0x3879a80

    0x3879780: <multiple use>
    0x3879780: <multiple use>
    0x3883230: <multiple use>
    0x3878f80: <multiple use>
  0x3879880: ch = store 0x3879780:1, 0x3879780, 0x3883230, 0x3878f80<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0)]> [ORD=8] [ID=11]


Optimized legalized selection DAG: BB#0 'redefine_start2:redefine_start2.return'
SelectionDAG has 16 nodes:
  0x385c078: ch = EntryToken [ORD=3] [ID=0]

  0x3878f80: i32 = undef [ORD=3] [ID=3]

      0x385c078: <multiple use>
        0x385c078: <multiple use>
        0x3878d80: i32 = Register %vreg0 [ORD=3] [ID=1]

      0x3878c80: i32,ch = CopyFromReg 0x385c078, 0x3878d80 [ORD=3] [ID=6]

        0x3883230: <multiple use>
        0x3879380: i32 = Constant<4> [ORD=2] [ID=5]

      0x3879480: i32 = add 0x3883230, 0x3879380 [ORD=2] [ID=8]

      0x3878f80: <multiple use>
    0x3879680: ch = store 0x385c078, 0x3878c80, 0x3879480, 0x3878f80<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1)]> [ORD=3] [ID=9]

      0x385c078: <multiple use>
      0x3878e80: i32 = FrameIndex<-1> [ORD=4] [ID=2]

      0x3878f80: <multiple use>
    0x3879080: i32,ch = load 0x385c078, 0x3878e80, 0x3878f80<LD4[%1](align=16)> [ORD=4] [ID=7]

    0x3878f80: <multiple use>
  0x3879780: i32,ch = load 0x3879680, 0x3879080, 0x3878f80<LD4[%3]> [ORD=6] [ID=10]

      0x3879280: i32 = TargetGlobalAddress<[2 x i32]* @redefine_out_TPUMCR> 0 [TF=2]

    0x3879980: i32 = REDEFINEISD::Hi 0x3879280

      0x3879580: i32 = TargetGlobalAddress<[2 x i32]* @redefine_out_TPUMCR> 0 [TF=3]

    0x3879a80: i32 = REDEFINEISD::Lo 0x3879580

  0x3883230: i32 = add 0x3879980, 0x3879a80

    0x3879780: <multiple use>
    0x3879780: <multiple use>
    0x3883230: <multiple use>
    0x3878f80: <multiple use>
  0x3879880: ch = store 0x3879780:1, 0x3879780, 0x3883230, 0x3878f80<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0)]> [ORD=8] [ID=11]


===== Instruction selection begins: BB#0 'redefine_start2.return'
ISEL: Starting pattern match on root node: 0x3879880: ch = store 0x3879780:1, 0x3879780, 0x3883230, 0x3878f80<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0)]> [ORD=8] [ID=15]

  Morphed node: 0x3879880: ch = SW 0x3879780, 0x3883230, 0x3879180, 0x3879780:1<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0)]> [ORD=8]

ISEL: Match complete!
=> 0x3879880: ch = SW 0x3879780, 0x3883230, 0x3879180, 0x3879780:1<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0)]> [ORD=8]

ISEL: Starting pattern match on root node: 0x3879780: i32,ch = load 0x3879680, 0x3879080, 0x3878f80<LD4[%3]> [ORD=6] [ID=14]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x3879780: i32,ch = LW 0x3879080, 0x3879180, 0x3879680<Mem:LD4[%3]> [ORD=6]

ISEL: Match complete!
=> 0x3879780: i32,ch = LW 0x3879080, 0x3879180, 0x3879680<Mem:LD4[%3]> [ORD=6]

ISEL: Starting pattern match on root node: 0x3879680: ch = store 0x385c078, 0x3878c80, 0x3879480, 0x3878f80<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1)]> [ORD=3] [ID=13]

  Initial Opcode index to 178
  Morphed node: 0x3879680: ch = SW 0x3878c80, 0x3883230, 0x3883330, 0x385c078<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1)]> [ORD=3]

ISEL: Match complete!
=> 0x3879680: ch = SW 0x3878c80, 0x3883230, 0x3883330, 0x385c078<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1)]> [ORD=3]

ISEL: Starting pattern match on root node: 0x3883230: i32 = add 0x3879980, 0x3879a80 [ID=11]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x3883230: i32 = ADD 0x3879a80, 0x3879980

ISEL: Match complete!
=> 0x3883230: i32 = ADD 0x3879a80, 0x3879980

ISEL: Starting pattern match on root node: 0x3879a80: i32 = REDEFINEISD::Lo 0x3879580 [ID=10]

  Initial Opcode index to 1204
  Morphed node: 0x3879a80: i32 = ADDI 0x3879380, 0x3879580

ISEL: Match complete!
=> 0x3879a80: i32 = ADDI 0x3879380, 0x3879580

ISEL: Starting pattern match on root node: 0x3879980: i32 = REDEFINEISD::Hi 0x3879280 [ID=9]

  Initial Opcode index to 1186
  Morphed node: 0x3879980: i32 = LUI 0x3879280

ISEL: Match complete!
=> 0x3879980: i32 = LUI 0x3879280

ISEL: Starting pattern match on root node: 0x3879080: i32,ch = load 0x385c078, 0x3878e80, 0x3878f80<LD4[%1](align=16)> [ORD=4] [ID=8]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x3879080: i32,ch = LW 0x3878e80, 0x3879180, 0x385c078<Mem:LD4[%1](align=16)> [ORD=4]

ISEL: Match complete!
=> 0x3879080: i32,ch = LW 0x3878e80, 0x3879180, 0x385c078<Mem:LD4[%1](align=16)> [ORD=4]

=> 0x3878c80: i32,ch = CopyFromReg 0x385c078, 0x3878d80 [ORD=3]

=> 0x3879580: i32 = TargetGlobalAddress<[2 x i32]* @redefine_out_TPUMCR> 0 [TF=3]

=> 0x3879280: i32 = TargetGlobalAddress<[2 x i32]* @redefine_out_TPUMCR> 0 [TF=2]

=> 0x3878d80: i32 = Register %vreg0 [ORD=3]

=> 0x385c078: ch = EntryToken [ORD=3]

===== Instruction selection ends:
Selected selection DAG: BB#0 'redefine_start2:redefine_start2.return'
SelectionDAG has 18 nodes:
  0x385c078: ch = EntryToken [ORD=3]

      0x3879380: i32 = Register %zero

      0x3879580: i32 = TargetGlobalAddress<[2 x i32]* @redefine_out_TPUMCR> 0 [TF=3]

    0x3879a80: i32 = ADDI 0x3879380, 0x3879580

      0x3879280: i32 = TargetGlobalAddress<[2 x i32]* @redefine_out_TPUMCR> 0 [TF=2]

    0x3879980: i32 = LUI 0x3879280

  0x3883230: i32 = ADD 0x3879a80, 0x3879980

        0x3878f80: i32 = Register %t5

        0x3879480: i32 = TargetFrameIndex<-1>

      0x3878e80: i32 = ADDI 0x3878f80, 0x3879480 [ORD=4]

      0x3879180: <multiple use>
      0x385c078: <multiple use>
    0x3879080: i32,ch = LW 0x3878e80, 0x3879180, 0x385c078<Mem:LD4[%1](align=16)> [ORD=4]

    0x3879180: <multiple use>
        0x385c078: <multiple use>
        0x3878d80: i32 = Register %vreg0 [ORD=3]

      0x3878c80: i32,ch = CopyFromReg 0x385c078, 0x3878d80 [ORD=3]

      0x3883230: <multiple use>
      0x3883330: i32 = TargetConstant<4>

      0x385c078: <multiple use>
    0x3879680: ch = SW 0x3878c80, 0x3883230, 0x3883330, 0x385c078<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1)]> [ORD=3]

  0x3879780: i32,ch = LW 0x3879080, 0x3879180, 0x3879680<Mem:LD4[%3]> [ORD=6]

  0x3879180: i32 = TargetConstant<0>

    0x3879780: <multiple use>
    0x3883230: <multiple use>
    0x3879180: <multiple use>
    0x3879780: <multiple use>
  0x3879880: ch = SW 0x3879780, 0x3883230, 0x3879180, 0x3879780:1<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0)]> [ORD=8]


********** List Scheduling BB#0 'redefine_start2.return' **********
SU(0): 0x3879880: ch = SW 0x3879780, 0x3883230, 0x3879180, 0x3879780:1<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0)]> [ORD=8] [ID=0]

  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
   val SU(4): Latency=1
   val SU(1): Latency=1
   ch  SU(4): Latency=1

SU(1): 0x3883230: i32 = ADD 0x3879a80, 0x3879980 [ID=1]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(3): Latency=1
   val SU(2): Latency=1
  Successors:
   val SU(0): Latency=1
   val SU(5): Latency=1

SU(2): 0x3879980: i32 = LUI 0x3879280 [ID=2]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(1): Latency=1

SU(3): 0x3879a80: i32 = ADDI 0x3879380, 0x3879580 [ID=3]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(1): Latency=1

SU(4): 0x3879780: i32,ch = LW 0x3879080, 0x3879180, 0x3879680<Mem:LD4[%3]> [ORD=6] [ID=4]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(7): Latency=1
   ch  SU(5): Latency=1
  Successors:
   val SU(0): Latency=1
   ch  SU(0): Latency=1

SU(5): 0x3879680: ch = SW 0x3878c80, 0x3883230, 0x3883330, 0x385c078<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1)]> [ORD=3] [ID=5]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(6): Latency=1
   val SU(1): Latency=1
  Successors:
   ch  SU(4): Latency=1

SU(6): 0x3878c80: i32,ch = CopyFromReg 0x385c078, 0x3878d80 [ORD=3] [ID=6]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(5): Latency=1

SU(7): 0x3879080: i32,ch = LW 0x3878e80, 0x3879180, 0x385c078<Mem:LD4[%1](align=16)> [ORD=4] [ID=7]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
   val SU(8): Latency=1
  Successors:
   val SU(4): Latency=1

SU(8): 0x3878e80: i32 = ADDI 0x3878f80, 0x3879480 [ORD=4] [ID=8]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(7): Latency=1


Examining Available:
Height 0: SU(0): 0x3879880: ch = SW 0x3879780, 0x3883230, 0x3879180, 0x3879780:1<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0)]> [ORD=8] [ID=0]


*** Scheduling [0]: SU(0): 0x3879880: ch = SW 0x3879780, 0x3883230, 0x3879180, 0x3879780:1<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0)]> [ORD=8] [ID=0]


Examining Available:
Height 1: SU(4): 0x3879780: i32,ch = LW 0x3879080, 0x3879180, 0x3879680<Mem:LD4[%3]> [ORD=6] [ID=4]


*** Scheduling [1]: SU(4): 0x3879780: i32,ch = LW 0x3879080, 0x3879180, 0x3879680<Mem:LD4[%3]> [ORD=6] [ID=4]


Examining Available:
Height 2: SU(7): 0x3879080: i32,ch = LW 0x3878e80, 0x3879180, 0x385c078<Mem:LD4[%1](align=16)> [ORD=4] [ID=7]

Height 2: SU(5): 0x3879680: ch = SW 0x3878c80, 0x3883230, 0x3883330, 0x385c078<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1)]> [ORD=3] [ID=5]


*** Scheduling [2]: SU(7): 0x3879080: i32,ch = LW 0x3878e80, 0x3879180, 0x385c078<Mem:LD4[%1](align=16)> [ORD=4] [ID=7]


Examining Available:
Height 3: SU(8): 0x3878e80: i32 = ADDI 0x3878f80, 0x3879480 [ORD=4] [ID=8]

Height 2: SU(5): 0x3879680: ch = SW 0x3878c80, 0x3883230, 0x3883330, 0x385c078<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1)]> [ORD=3] [ID=5]


*** Scheduling [3]: SU(8): 0x3878e80: i32 = ADDI 0x3878f80, 0x3879480 [ORD=4] [ID=8]


Examining Available:
Height 2: SU(5): 0x3879680: ch = SW 0x3878c80, 0x3883230, 0x3883330, 0x385c078<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1)]> [ORD=3] [ID=5]


*** Scheduling [4]: SU(5): 0x3879680: ch = SW 0x3878c80, 0x3883230, 0x3883330, 0x385c078<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1)]> [ORD=3] [ID=5]


Examining Available:
Height 5: SU(1): 0x3883230: i32 = ADD 0x3879a80, 0x3879980 [ID=1]

Height 5: SU(6): 0x3878c80: i32,ch = CopyFromReg 0x385c078, 0x3878d80 [ORD=3] [ID=6]


*** Scheduling [5]: SU(1): 0x3883230: i32 = ADD 0x3879a80, 0x3879980 [ID=1]


Examining Available:
Height 6: SU(3): 0x3879a80: i32 = ADDI 0x3879380, 0x3879580 [ID=3]

Height 6: SU(2): 0x3879980: i32 = LUI 0x3879280 [ID=2]

Height 5: SU(6): 0x3878c80: i32,ch = CopyFromReg 0x385c078, 0x3878d80 [ORD=3] [ID=6]


*** Scheduling [6]: SU(3): 0x3879a80: i32 = ADDI 0x3879380, 0x3879580 [ID=3]


Examining Available:
Height 6: SU(2): 0x3879980: i32 = LUI 0x3879280 [ID=2]

Height 5: SU(6): 0x3878c80: i32,ch = CopyFromReg 0x385c078, 0x3878d80 [ORD=3] [ID=6]


*** Scheduling [7]: SU(2): 0x3879980: i32 = LUI 0x3879280 [ID=2]


Examining Available:
Height 5: SU(6): 0x3878c80: i32,ch = CopyFromReg 0x385c078, 0x3878d80 [ORD=3] [ID=6]


*** Scheduling [8]: SU(6): 0x3878c80: i32,ch = CopyFromReg 0x385c078, 0x3878d80 [ORD=3] [ID=6]

*** Final schedule ***
SU(6): 0x3878c80: i32,ch = CopyFromReg 0x385c078, 0x3878d80 [ORD=3] [ID=6]

SU(2): 0x3879980: i32 = LUI 0x3879280 [ID=2]

SU(3): 0x3879a80: i32 = ADDI 0x3879380, 0x3879580 [ID=3]

SU(1): 0x3883230: i32 = ADD 0x3879a80, 0x3879980 [ID=1]

SU(5): 0x3879680: ch = SW 0x3878c80, 0x3883230, 0x3883330, 0x385c078<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1)]> [ORD=3] [ID=5]

SU(8): 0x3878e80: i32 = ADDI 0x3878f80, 0x3879480 [ORD=4] [ID=8]

SU(7): 0x3879080: i32,ch = LW 0x3878e80, 0x3879180, 0x385c078<Mem:LD4[%1](align=16)> [ORD=4] [ID=7]

SU(4): 0x3879780: i32,ch = LW 0x3879080, 0x3879180, 0x3879680<Mem:LD4[%3]> [ORD=6] [ID=4]

SU(0): 0x3879880: ch = SW 0x3879780, 0x3883230, 0x3879180, 0x3879780:1<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0)]> [ORD=8] [ID=0]


Total amount of phi nodes to update: 0
# Machine code for function redefine_start2: SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
Function Live Ins: %ra in %vreg0

0B	BB#0: derived from LLVM BB %redefine_start2.return
	    Live Ins: %ra
16B		%vreg0<def> = COPY %ra; GR32Bit:%vreg0
32B		%vreg1<def> = LUI <ga:@redefine_out_TPUMCR>[TF=2]; GR32Bit:%vreg1
48B		%vreg2<def> = ADDI %zero, <ga:@redefine_out_TPUMCR>[TF=3]; GR32Bit:%vreg2
64B		%vreg3<def> = ADD %vreg2<kill>, %vreg1<kill>; GR32Bit:%vreg3,%vreg2,%vreg1
80B		SW %vreg0, %vreg3, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1)] GR32Bit:%vreg0,%vreg3
96B		%vreg4<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg4
112B		%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[%1](align=16) GR32Bit:%vreg5,%vreg4
128B		%vreg6<def> = LW %vreg5<kill>, 0; mem:LD4[%3] GR32Bit:%vreg6,%vreg5
144B		SW %vreg6<kill>, %vreg3, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0)] GR32Bit:%vreg6,%vreg3

# End machine code for function redefine_start2.

********** Stack Coloring **********
********** Function: redefine_start2
******** Pre-regalloc Machine LICM: redefine_start2 ********
******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: redefine_start2
********** PROCESS IMPLICIT DEFS **********
********** Function: redefine_start2
********** REWRITING TWO-ADDR INSTRS **********
********** Function: redefine_start2
# Machine code for function redefine_start2: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
Function Live Ins: %ra in %vreg0

0B	BB#0: derived from LLVM BB %redefine_start2.return
	    Live Ins: %ra
16B		%vreg0<def> = COPY %ra<kill>; GR32Bit:%vreg0
32B		%vreg1<def> = LUI <ga:@redefine_out_TPUMCR>[TF=2]; GR32Bit:%vreg1
48B		%vreg2<def> = ADDI %zero, <ga:@redefine_out_TPUMCR>[TF=3]; GR32Bit:%vreg2
64B		%vreg3<def> = ADD %vreg2<kill>, %vreg1<kill>; GR32Bit:%vreg3,%vreg2,%vreg1
80B		SW %vreg0<kill>, %vreg3, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1)] GR32Bit:%vreg0,%vreg3
96B		%vreg4<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg4
112B		%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[%1](align=16) GR32Bit:%vreg5,%vreg4
128B		%vreg6<def> = LW %vreg5<kill>, 0; mem:LD4[%3] GR32Bit:%vreg6,%vreg5
144B		SW %vreg6<kill>, %vreg3<kill>, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0)] GR32Bit:%vreg6,%vreg3

# End machine code for function redefine_start2.

Computing live-in reg-units in ABI blocks.
0B	BB#0 ra#0
Created 1 new intervals.
********** INTERVALS **********
ra = [0B,16r:0)  0@0B-phi
%vreg0 = [16r,80r:0)  0@16r
%vreg1 = [32r,64r:0)  0@32r
%vreg2 = [48r,64r:0)  0@48r
%vreg3 = [64r,144r:0)  0@64r
%vreg4 = [96r,112r:0)  0@96r
%vreg5 = [112r,128r:0)  0@112r
%vreg6 = [128r,144r:0)  0@128r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start2: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
Function Live Ins: %ra in %vreg0

0B	BB#0: derived from LLVM BB %redefine_start2.return
	    Live Ins: %ra
16B		%vreg0<def> = COPY %ra; GR32Bit:%vreg0
32B		%vreg1<def> = LUI <ga:@redefine_out_TPUMCR>[TF=2]; GR32Bit:%vreg1
48B		%vreg2<def> = ADDI %zero, <ga:@redefine_out_TPUMCR>[TF=3]; GR32Bit:%vreg2
64B		%vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
80B		SW %vreg0, %vreg3, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1)] GR32Bit:%vreg0,%vreg3
96B		%vreg4<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg4
112B		%vreg5<def> = LW %vreg4, 0; mem:LD4[%1](align=16) GR32Bit:%vreg5,%vreg4
128B		%vreg6<def> = LW %vreg5, 0; mem:LD4[%3] GR32Bit:%vreg6,%vreg5
144B		SW %vreg6, %vreg3, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0)] GR32Bit:%vreg6,%vreg3

# End machine code for function redefine_start2.

********** SIMPLE REGISTER COALESCING **********
********** Function: redefine_start2
********** JOINING INTERVALS ***********
redefine_start2.return:
16B	%vreg0<def> = COPY %ra; GR32Bit:%vreg0
	Considering merging %vreg0 with %ra
	Can only merge into reserved registers.
Trying to inflate 0 regs.
********** INTERVALS **********
ra = [0B,16r:0)  0@0B-phi
%vreg0 = [16r,80r:0)  0@16r
%vreg1 = [32r,64r:0)  0@32r
%vreg2 = [48r,64r:0)  0@48r
%vreg3 = [64r,144r:0)  0@64r
%vreg4 = [96r,112r:0)  0@96r
%vreg5 = [112r,128r:0)  0@112r
%vreg6 = [128r,144r:0)  0@128r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start2: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
Function Live Ins: %ra in %vreg0

0B	BB#0: derived from LLVM BB %redefine_start2.return
	    Live Ins: %ra
16B		%vreg0<def> = COPY %ra; GR32Bit:%vreg0
32B		%vreg1<def> = LUI <ga:@redefine_out_TPUMCR>[TF=2]; GR32Bit:%vreg1
48B		%vreg2<def> = ADDI %zero, <ga:@redefine_out_TPUMCR>[TF=3]; GR32Bit:%vreg2
64B		%vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
80B		SW %vreg0, %vreg3, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1)] GR32Bit:%vreg0,%vreg3
96B		%vreg4<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg4
112B		%vreg5<def> = LW %vreg4, 0; mem:LD4[%1](align=16) GR32Bit:%vreg5,%vreg4
128B		%vreg6<def> = LW %vreg5, 0; mem:LD4[%3] GR32Bit:%vreg6,%vreg5
144B		SW %vreg6, %vreg3, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0)] GR32Bit:%vreg6,%vreg3

# End machine code for function redefine_start2.

Before MISched:
# Machine code for function redefine_start2: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
Function Live Ins: %ra in %vreg0

BB#0: derived from LLVM BB %redefine_start2.return
    Live Ins: %ra
	%vreg0<def> = COPY %ra; GR32Bit:%vreg0
	%vreg1<def> = LUI <ga:@redefine_out_TPUMCR>[TF=2]; GR32Bit:%vreg1
	%vreg2<def> = ADDI %zero, <ga:@redefine_out_TPUMCR>[TF=3]; GR32Bit:%vreg2
	%vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
	SW %vreg0, %vreg3, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1)] GR32Bit:%vreg0,%vreg3
	%vreg4<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg4
	%vreg5<def> = LW %vreg4, 0; mem:LD4[%1](align=16) GR32Bit:%vreg5,%vreg4
	%vreg6<def> = LW %vreg5, 0; mem:LD4[%3] GR32Bit:%vreg6,%vreg5
	SW %vreg6, %vreg3, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0)] GR32Bit:%vreg6,%vreg3

# End machine code for function redefine_start2.


-------------
Starting new basic block BB#0
********** MI Scheduling **********
redefine_start2:BB#0 redefine_start2.return
  From: %vreg0<def> = COPY %ra; GR32Bit:%vreg0
    To: End Remaining: 0
Max Pressure: GR32Bit=3
Live In: %gp 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 3
Excess PSets: 
2 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 0
  SU(5) in tree 1
  SU(6) in tree 1
  SU(7) in tree 1
  SU(8) in tree 1
SU(0):   %vreg0<def> = COPY %ra; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 3
  Successors:
   val SU(4): Latency=0 Reg=%vreg0

SU(1):   %vreg1<def> = LUI <ga:@redefine_out_TPUMCR>[TF=2]; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
   val SU(3): Latency=5 Reg=%vreg1

SU(2):   %vreg2<def> = ADDI %zero, <ga:@redefine_out_TPUMCR>[TF=3]; GR32Bit:%vreg2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
   val SU(3): Latency=5 Reg=%vreg2

SU(3):   %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 8
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg2
   val SU(1): Latency=5 Reg=%vreg1
  Successors:
   val SU(8): Latency=5 Reg=%vreg3
   val SU(4): Latency=5 Reg=%vreg3

SU(4):   SW %vreg0, %vreg3, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1)] GR32Bit:%vreg0,%vreg3
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 13
  Depth              : 10
  Height             : 3
  Predecessors:
   val SU(3): Latency=5 Reg=%vreg3
   val SU(0): Latency=0 Reg=%vreg0
  Successors:
   ch  SU(8): Latency=0
   ch  SU(7): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(5):   %vreg4<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
   val SU(6): Latency=5 Reg=%vreg4

SU(6):   %vreg5<def> = LW %vreg4, 0; mem:LD4[%1](align=16) GR32Bit:%vreg5,%vreg4
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 17
  Predecessors:
   val SU(5): Latency=5 Reg=%vreg4
  Successors:
   val SU(7): Latency=15 Reg=%vreg5

SU(7):   %vreg6<def> = LW %vreg5, 0; mem:LD4[%3] GR32Bit:%vreg6,%vreg5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 20
  Height             : 2
  Predecessors:
   val SU(6): Latency=15 Reg=%vreg5
   ch  SU(4): Latency=1
  Successors:
   val SU(8): Latency=2 Reg=%vreg6
   ch  SU(8): Latency=0

SU(8):   SW %vreg6, %vreg3, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0)] GR32Bit:%vreg6,%vreg3
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 22
  Height             : 0
  Predecessors:
   val SU(7): Latency=2 Reg=%vreg6
   val SU(3): Latency=5 Reg=%vreg3
   ch  SU(7): Latency=0
   ch  SU(4): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg0<def> = COPY %ra; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 3
  Successors:
   val SU(4): Latency=0 Reg=%vreg0

SU(1):   %vreg1<def> = LUI <ga:@redefine_out_TPUMCR>[TF=2]; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
   val SU(3): Latency=5 Reg=%vreg1

SU(2):   %vreg2<def> = ADDI %zero, <ga:@redefine_out_TPUMCR>[TF=3]; GR32Bit:%vreg2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
   val SU(3): Latency=5 Reg=%vreg2

SU(3):   %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 8
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg2
   val SU(1): Latency=5 Reg=%vreg1
  Successors:
   val SU(8): Latency=5 Reg=%vreg3
   val SU(4): Latency=5 Reg=%vreg3

SU(4):   SW %vreg0, %vreg3, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1)] GR32Bit:%vreg0,%vreg3
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 10
  Height             : 3
  Predecessors:
   val SU(3): Latency=5 Reg=%vreg3
   val SU(0): Latency=0 Reg=%vreg0
  Successors:
   ch  SU(8): Latency=0
   ch  SU(7): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(5):   %vreg4<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
   val SU(6): Latency=5 Reg=%vreg4

SU(6):   %vreg5<def> = LW %vreg4, 0; mem:LD4[%1](align=16) GR32Bit:%vreg5,%vreg4
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 17
  Predecessors:
   val SU(5): Latency=5 Reg=%vreg4
  Successors:
   val SU(7): Latency=15 Reg=%vreg5

SU(7):   %vreg6<def> = LW %vreg5, 0; mem:LD4[%3] GR32Bit:%vreg6,%vreg5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 20
  Height             : 2
  Predecessors:
   val SU(6): Latency=15 Reg=%vreg5
   ch  SU(4): Latency=1
  Successors:
   val SU(8): Latency=2 Reg=%vreg6
   ch  SU(8): Latency=0

SU(8):   SW %vreg6, %vreg3, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0)] GR32Bit:%vreg6,%vreg3
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 22
  Height             : 0
  Predecessors:
   val SU(7): Latency=2 Reg=%vreg6
   val SU(3): Latency=5 Reg=%vreg3
   ch  SU(7): Latency=0
   ch  SU(4): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(2)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg2<def> = ADDI %zero, <ga:@redefine_out_TPUMCR>[TF=3]; GR32Bit:%vreg2
handleMove 48B -> 8B: %vreg2<def> = ADDI %zero, <ga:@redefine_out_TPUMCR>[TF=3]; GR32Bit:%vreg2
     %vreg2:	[48r,64r:0)  0@48r
        -->	[8r,64r:0)  0@8r
     zero:	EMPTY
        -->	EMPTY
  Tree: 1 @5
Pick node SU(1)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg1<def> = LUI <ga:@redefine_out_TPUMCR>[TF=2]; GR32Bit:%vreg1
handleMove 32B -> 12B: %vreg1<def> = LUI <ga:@redefine_out_TPUMCR>[TF=2]; GR32Bit:%vreg1
     %vreg1:	[32r,64r:0)  0@32r
        -->	[12r,64r:0)  0@12r
Pick node SU(3)  ILP: 3 / 6 = 0.5 Tree: 0 @0
Scheduling %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1

*** Renumbered SlotIndexes 12-28 ***
handleMove 64B -> 20B: %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
     %vreg3:	[64r,144r:0)  0@64r
        -->	[20r,144r:0)  0@20r
     %vreg2:	[8r,64r:0)  0@8r
        -->	[8r,20r:0)  0@8r
     %vreg1:	[12r,64r:0)  0@12r
        -->	[12r,20r:0)  0@12r
Pick node SU(0)  ILP: 0 / 1 = 0 Tree: 0 @0
Scheduling %vreg0<def> = COPY %ra; GR32Bit:%vreg0
Pick node SU(4)  ILP: 4 / 11 = 0.363636 Tree: 0 @0
Scheduling SW %vreg0, %vreg3, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1)] GR32Bit:%vreg0,%vreg3
Pick node SU(5)  ILP: 1 / 1 = 1 Tree: 1 @5
Scheduling %vreg4<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg4
  Tree: 0 @5
Pick node SU(6)  ILP: 2 / 6 = 0.333333 Tree: 1 @5
Scheduling %vreg5<def> = LW %vreg4, 0; mem:LD4[%1](align=16) GR32Bit:%vreg5,%vreg4
Pick node SU(7)  ILP: 3 / 21 = 0.142857 Tree: 1 @5
Scheduling %vreg6<def> = LW %vreg5, 0; mem:LD4[%3] GR32Bit:%vreg6,%vreg5
Pick node SU(8)  ILP: 4 / 23 = 0.173913 Tree: 1 @5
Scheduling SW %vreg6, %vreg3, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0)] GR32Bit:%vreg6,%vreg3
*** Final schedule for BB#0 ***
SU(2):   %vreg2<def> = ADDI %zero, <ga:@redefine_out_TPUMCR>[TF=3]; GR32Bit:%vreg2
SU(1):   %vreg1<def> = LUI <ga:@redefine_out_TPUMCR>[TF=2]; GR32Bit:%vreg1
SU(3):   %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
SU(0):   %vreg0<def> = COPY %ra; GR32Bit:%vreg0
SU(4):   SW %vreg0, %vreg3, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1)] GR32Bit:%vreg0,%vreg3
SU(5):   %vreg4<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg4
SU(6):   %vreg5<def> = LW %vreg4, 0; mem:LD4[%1](align=16) GR32Bit:%vreg5,%vreg4
SU(7):   %vreg6<def> = LW %vreg5, 0; mem:LD4[%3] GR32Bit:%vreg6,%vreg5
SU(8):   SW %vreg6, %vreg3, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0)] GR32Bit:%vreg6,%vreg3


*** Renumbered SlotIndexes 4-60 ***

*** Renumbered SlotIndexes 16-88 ***

*** Renumbered SlotIndexes 28-108 ***

*** Renumbered SlotIndexes 40-136 ***

*** Renumbered SlotIndexes 52-156 ***

*** Renumbered SlotIndexes 64-176 ***

*** Renumbered SlotIndexes 76-188 ***

*** Renumbered SlotIndexes 88-200 ***

*** Renumbered SlotIndexes 100-212 ***

*** Renumbered SlotIndexes 112-224 ***

*** Renumbered SlotIndexes 124-236 ***

*** Renumbered SlotIndexes 136-248 ***

*** Renumbered SlotIndexes 148-260 ***

*** Renumbered SlotIndexes 160-272 ***

*** Renumbered SlotIndexes 172-284 ***

*** Renumbered SlotIndexes 184-296 ***

*** Renumbered SlotIndexes 196-308 ***

*** Renumbered SlotIndexes 208-320 ***

*** Renumbered SlotIndexes 220-332 ***

*** Renumbered SlotIndexes 232-344 ***

*** Renumbered SlotIndexes 244-356 ***

*** Renumbered SlotIndexes 256-368 ***

*** Renumbered SlotIndexes 268-380 ***

*** Renumbered SlotIndexes 280-392 ***

*** Renumbered SlotIndexes 292-404 ***

*** Renumbered SlotIndexes 304-416 ***

*** Renumbered SlotIndexes 316-428 ***

*** Renumbered SlotIndexes 328-440 ***

*** Renumbered SlotIndexes 340-452 ***

*** Renumbered SlotIndexes 352-464 ***

*** Renumbered SlotIndexes 364-476 ***

*** Renumbered SlotIndexes 376-488 ***

*** Renumbered SlotIndexes 388-500 ***

*** Renumbered SlotIndexes 400-512 ***
Partitioning instructions of the region into multiple CEs
instr:  %vreg2<def> = ADDI %zero, <ga:@redefine_out_TPUMCR>[TF=3]; GR32Bit:%vreg2
instr:  %vreg1<def> = LUI <ga:@redefine_out_TPUMCR>[TF=2]; GR32Bit:%vreg1
instr:  %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
instr:  %vreg0<def> = COPY %ra; GR32Bit:%vreg0
instr:  SW %vreg0, %vreg3, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1)] GR32Bit:%vreg0,%vreg3
instr:  %vreg4<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg4
instr:  %vreg5<def> = LW %vreg4, 0; mem:LD4[%1](align=16) GR32Bit:%vreg5,%vreg4
instr:  %vreg6<def> = LW %vreg5, 0; mem:LD4[%3] GR32Bit:%vreg6,%vreg5
instr:  SW %vreg6, %vreg3, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0)] GR32Bit:%vreg6,%vreg3
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
before falloc, state of bb0:BB#0: derived from LLVM BB %redefine_start2.return
    Live Ins: %ra
	%vreg7<def> = ADD %t5, %zero; GR32Bit:%vreg7
	%vreg9<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg9
	%vreg10<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg10
	%vreg11<def> = SRLI %vreg10, 12; GR32Bit:%vreg11,%vreg10
	%vreg12<def> = ADD %vreg9, %vreg11; GR32Bit:%vreg12,%vreg9,%vreg11
	%vreg13<def> = ADDI %zero, 32; GR32Bit:%vreg13
	%vreg14<def> = SRLI %t5, 22; GR32Bit:%vreg14
	%vreg15<def> = SRLI %t5, 12; GR32Bit:%vreg15
	%vreg16<def> = ANDI %vreg15, 15; GR32Bit:%vreg16,%vreg15
	%vreg17<def> = SRLI %t5, 6; GR32Bit:%vreg17
	%vreg18<def> = ANDI %vreg17, 63; GR32Bit:%vreg18,%vreg17
	%vreg19<def> = ADDI %zero, 832; GR32Bit:%vreg19
	%vreg20<def> = MUL %vreg14, %vreg19; GR32Bit:%vreg20,%vreg14,%vreg19
	%vreg21<def> = ADDI %zero, 52; GR32Bit:%vreg21
	%vreg22<def> = MUL %vreg16, %vreg21; GR32Bit:%vreg22,%vreg16,%vreg21
	%vreg23<def> = ADD %vreg22, %vreg18; GR32Bit:%vreg23,%vreg22,%vreg18
	%vreg24<def> = ADD %vreg23, %vreg20; GR32Bit:%vreg24,%vreg23,%vreg20
	%vreg25<def> = MUL %vreg24, %vreg13; GR32Bit:%vreg25,%vreg24,%vreg13
	%vreg8<def> = ADD %vreg12, %vreg25; GR32Bit:%vreg8,%vreg12,%vreg25
	%vreg2<def> = ADDI %zero, <ga:@redefine_out_TPUMCR>[TF=3]; GR32Bit:%vreg2
	%vreg1<def> = LUI <ga:@redefine_out_TPUMCR>[TF=2]; GR32Bit:%vreg1
	%vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
	%vreg0<def> = COPY %ra; GR32Bit:%vreg0
	SW %vreg0, %vreg3, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1)] GR32Bit:%vreg0,%vreg3
	%vreg4<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg4
	%vreg5<def> = LW %vreg4, 0; mem:LD4[%1](align=16) GR32Bit:%vreg5,%vreg4
	%vreg6<def> = LW %vreg5, 0; mem:LD4[%3] GR32Bit:%vreg6,%vreg5
	SW %vreg6, %vreg3, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0)] GR32Bit:%vreg6,%vreg3
	%vreg26<def> = ADD %t5, %zero; GR32Bit:%vreg26
	%vreg28<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg28
	%vreg29<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg29
	%vreg30<def> = SRLI %vreg29, 12; GR32Bit:%vreg30,%vreg29
	%vreg31<def> = ADD %vreg28, %vreg30; GR32Bit:%vreg31,%vreg28,%vreg30
	%vreg32<def> = ADDI %zero, 32; GR32Bit:%vreg32
	%vreg33<def> = SRLI %t5, 22; GR32Bit:%vreg33
	%vreg34<def> = SRLI %t5, 12; GR32Bit:%vreg34
	%vreg35<def> = ANDI %vreg34, 15; GR32Bit:%vreg35,%vreg34
	%vreg36<def> = SRLI %t5, 6; GR32Bit:%vreg36
	%vreg37<def> = ANDI %vreg36, 63; GR32Bit:%vreg37,%vreg36
	%vreg38<def> = ADDI %zero, 832; GR32Bit:%vreg38
	%vreg39<def> = MUL %vreg33, %vreg38; GR32Bit:%vreg39,%vreg33,%vreg38
	%vreg40<def> = ADDI %zero, 52; GR32Bit:%vreg40
	%vreg41<def> = MUL %vreg35, %vreg40; GR32Bit:%vreg41,%vreg35,%vreg40
	%vreg42<def> = ADD %vreg41, %vreg37; GR32Bit:%vreg42,%vreg41,%vreg37
	%vreg43<def> = ADD %vreg42, %vreg39; GR32Bit:%vreg43,%vreg42,%vreg39
	%vreg44<def> = MUL %vreg43, %vreg32; GR32Bit:%vreg44,%vreg43,%vreg32
	%vreg27<def> = ADD %vreg31, %vreg44; GR32Bit:%vreg27,%vreg31,%vreg44
	%vreg45<def> = ADD %t5, %zero; GR32Bit:%vreg45
	%vreg47<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg47
	%vreg48<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg48
	%vreg49<def> = SRLI %vreg48, 12; GR32Bit:%vreg49,%vreg48
	%vreg50<def> = ADD %vreg47, %vreg49; GR32Bit:%vreg50,%vreg47,%vreg49
	%vreg51<def> = ADDI %zero, 32; GR32Bit:%vreg51
	%vreg52<def> = SRLI %t5, 22; GR32Bit:%vreg52
	%vreg53<def> = SRLI %t5, 12; GR32Bit:%vreg53
	%vreg54<def> = ANDI %vreg53, 15; GR32Bit:%vreg54,%vreg53
	%vreg55<def> = SRLI %t5, 6; GR32Bit:%vreg55
	%vreg56<def> = ANDI %vreg55, 63; GR32Bit:%vreg56,%vreg55
	%vreg57<def> = ADDI %zero, 832; GR32Bit:%vreg57
	%vreg58<def> = MUL %vreg52, %vreg57; GR32Bit:%vreg58,%vreg52,%vreg57
	%vreg59<def> = ADDI %zero, 52; GR32Bit:%vreg59
	%vreg60<def> = MUL %vreg54, %vreg59; GR32Bit:%vreg60,%vreg54,%vreg59
	%vreg61<def> = ADD %vreg60, %vreg56; GR32Bit:%vreg61,%vreg60,%vreg56
	%vreg62<def> = ADD %vreg61, %vreg58; GR32Bit:%vreg62,%vreg61,%vreg58
	%vreg63<def> = MUL %vreg62, %vreg51; GR32Bit:%vreg63,%vreg62,%vreg51
	%vreg46<def> = ADD %vreg50, %vreg63; GR32Bit:%vreg46,%vreg50,%vreg63
	%vreg64<def> = ADD %t5, %zero; GR32Bit:%vreg64
	%vreg66<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg66
	%vreg67<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg67
	%vreg68<def> = SRLI %vreg67, 12; GR32Bit:%vreg68,%vreg67
	%vreg69<def> = ADD %vreg66, %vreg68; GR32Bit:%vreg69,%vreg66,%vreg68
	%vreg70<def> = ADDI %zero, 32; GR32Bit:%vreg70
	%vreg71<def> = SRLI %t5, 22; GR32Bit:%vreg71
	%vreg72<def> = SRLI %t5, 12; GR32Bit:%vreg72
	%vreg73<def> = ANDI %vreg72, 15; GR32Bit:%vreg73,%vreg72
	%vreg74<def> = SRLI %t5, 6; GR32Bit:%vreg74
	%vreg75<def> = ANDI %vreg74, 63; GR32Bit:%vreg75,%vreg74
	%vreg76<def> = ADDI %zero, 832; GR32Bit:%vreg76
	%vreg77<def> = MUL %vreg71, %vreg76; GR32Bit:%vreg77,%vreg71,%vreg76
	%vreg78<def> = ADDI %zero, 52; GR32Bit:%vreg78
	%vreg79<def> = MUL %vreg73, %vreg78; GR32Bit:%vreg79,%vreg73,%vreg78
	%vreg80<def> = ADD %vreg79, %vreg75; GR32Bit:%vreg80,%vreg79,%vreg75
	%vreg81<def> = ADD %vreg80, %vreg77; GR32Bit:%vreg81,%vreg80,%vreg77
	%vreg82<def> = MUL %vreg81, %vreg70; GR32Bit:%vreg82,%vreg81,%vreg70
	%vreg65<def> = ADD %vreg69, %vreg82; GR32Bit:%vreg65,%vreg69,%vreg82
Adding all fallocs first to avoid stalls due to sequential fallocs and fbinds
Adding writecm(for writing sync count to context frames) and fbind instructions
live end of child is itself
live end of child is itself
Adding localref sw instructions to hyperOp redefine_start2
Adding writecm instructions to hyperOp redefine_start2
Adding writecmp and sync instructions
Adding endHyperOp instructions to each pHyperOp

*** Renumbered SlotIndexes 412-524 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 424-536 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 436-548 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 448-560 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 460-572 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 472-584 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0
After Shuffling regions of basic block, state of BB#0:
BB#0: derived from LLVM BB %redefine_start2.return
    Live Ins: %ra
	%vreg7<def> = ADD %t5, %zero; GR32Bit:%vreg7
	%vreg9<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg9
	%vreg10<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg10
	%vreg11<def> = SRLI %vreg10, 12; GR32Bit:%vreg11,%vreg10
	%vreg12<def> = ADD %vreg9, %vreg11; GR32Bit:%vreg12,%vreg9,%vreg11
	%vreg13<def> = ADDI %zero, 32; GR32Bit:%vreg13
	%vreg14<def> = SRLI %t5, 22; GR32Bit:%vreg14
	%vreg15<def> = SRLI %t5, 12; GR32Bit:%vreg15
	%vreg16<def> = ANDI %vreg15, 15; GR32Bit:%vreg16,%vreg15
	%vreg17<def> = SRLI %t5, 6; GR32Bit:%vreg17
	%vreg18<def> = ANDI %vreg17, 63; GR32Bit:%vreg18,%vreg17
	%vreg19<def> = ADDI %zero, 832; GR32Bit:%vreg19
	%vreg20<def> = MUL %vreg14, %vreg19; GR32Bit:%vreg20,%vreg14,%vreg19
	%vreg21<def> = ADDI %zero, 52; GR32Bit:%vreg21
	%vreg22<def> = MUL %vreg16, %vreg21; GR32Bit:%vreg22,%vreg16,%vreg21
	%vreg23<def> = ADD %vreg22, %vreg18; GR32Bit:%vreg23,%vreg22,%vreg18
	%vreg24<def> = ADD %vreg23, %vreg20; GR32Bit:%vreg24,%vreg23,%vreg20
	%vreg25<def> = MUL %vreg24, %vreg13; GR32Bit:%vreg25,%vreg24,%vreg13
	%vreg8<def> = ADD %vreg12, %vreg25; GR32Bit:%vreg8,%vreg12,%vreg25
	%vreg2<def> = ADDI %zero, <ga:@redefine_out_TPUMCR>[TF=3]; GR32Bit:%vreg2
	%vreg1<def> = LUI <ga:@redefine_out_TPUMCR>[TF=2]; GR32Bit:%vreg1
	%vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
	%vreg0<def> = COPY %ra; GR32Bit:%vreg0
	SW %vreg0, %vreg3, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1)] GR32Bit:%vreg0,%vreg3
	%vreg4<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg4
	%vreg5<def> = LW %vreg4, 0; mem:LD4[%1](align=16) GR32Bit:%vreg5,%vreg4
	%vreg6<def> = LW %vreg5, 0; mem:LD4[%3] GR32Bit:%vreg6,%vreg5
	SW %vreg6, %vreg3, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0)] GR32Bit:%vreg6,%vreg3
	FDELETE %t4, 0
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg26<def> = ADD %t5, %zero; GR32Bit:%vreg26
	%vreg28<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg28
	%vreg29<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg29
	%vreg30<def> = SRLI %vreg29, 12; GR32Bit:%vreg30,%vreg29
	%vreg31<def> = ADD %vreg28, %vreg30; GR32Bit:%vreg31,%vreg28,%vreg30
	%vreg32<def> = ADDI %zero, 32; GR32Bit:%vreg32
	%vreg33<def> = SRLI %t5, 22; GR32Bit:%vreg33
	%vreg34<def> = SRLI %t5, 12; GR32Bit:%vreg34
	%vreg35<def> = ANDI %vreg34, 15; GR32Bit:%vreg35,%vreg34
	%vreg36<def> = SRLI %t5, 6; GR32Bit:%vreg36
	%vreg37<def> = ANDI %vreg36, 63; GR32Bit:%vreg37,%vreg36
	%vreg38<def> = ADDI %zero, 832; GR32Bit:%vreg38
	%vreg39<def> = MUL %vreg33, %vreg38; GR32Bit:%vreg39,%vreg33,%vreg38
	%vreg40<def> = ADDI %zero, 52; GR32Bit:%vreg40
	%vreg41<def> = MUL %vreg35, %vreg40; GR32Bit:%vreg41,%vreg35,%vreg40
	%vreg42<def> = ADD %vreg41, %vreg37; GR32Bit:%vreg42,%vreg41,%vreg37
	%vreg43<def> = ADD %vreg42, %vreg39; GR32Bit:%vreg43,%vreg42,%vreg39
	%vreg44<def> = MUL %vreg43, %vreg32; GR32Bit:%vreg44,%vreg43,%vreg32
	%vreg27<def> = ADD %vreg31, %vreg44; GR32Bit:%vreg27,%vreg31,%vreg44
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg45<def> = ADD %t5, %zero; GR32Bit:%vreg45
	%vreg47<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg47
	%vreg48<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg48
	%vreg49<def> = SRLI %vreg48, 12; GR32Bit:%vreg49,%vreg48
	%vreg50<def> = ADD %vreg47, %vreg49; GR32Bit:%vreg50,%vreg47,%vreg49
	%vreg51<def> = ADDI %zero, 32; GR32Bit:%vreg51
	%vreg52<def> = SRLI %t5, 22; GR32Bit:%vreg52
	%vreg53<def> = SRLI %t5, 12; GR32Bit:%vreg53
	%vreg54<def> = ANDI %vreg53, 15; GR32Bit:%vreg54,%vreg53
	%vreg55<def> = SRLI %t5, 6; GR32Bit:%vreg55
	%vreg56<def> = ANDI %vreg55, 63; GR32Bit:%vreg56,%vreg55
	%vreg57<def> = ADDI %zero, 832; GR32Bit:%vreg57
	%vreg58<def> = MUL %vreg52, %vreg57; GR32Bit:%vreg58,%vreg52,%vreg57
	%vreg59<def> = ADDI %zero, 52; GR32Bit:%vreg59
	%vreg60<def> = MUL %vreg54, %vreg59; GR32Bit:%vreg60,%vreg54,%vreg59
	%vreg61<def> = ADD %vreg60, %vreg56; GR32Bit:%vreg61,%vreg60,%vreg56
	%vreg62<def> = ADD %vreg61, %vreg58; GR32Bit:%vreg62,%vreg61,%vreg58
	%vreg63<def> = MUL %vreg62, %vreg51; GR32Bit:%vreg63,%vreg62,%vreg51
	%vreg46<def> = ADD %vreg50, %vreg63; GR32Bit:%vreg46,%vreg50,%vreg63
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg64<def> = ADD %t5, %zero; GR32Bit:%vreg64
	%vreg66<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg66
	%vreg67<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg67
	%vreg68<def> = SRLI %vreg67, 12; GR32Bit:%vreg68,%vreg67
	%vreg69<def> = ADD %vreg66, %vreg68; GR32Bit:%vreg69,%vreg66,%vreg68
	%vreg70<def> = ADDI %zero, 32; GR32Bit:%vreg70
	%vreg71<def> = SRLI %t5, 22; GR32Bit:%vreg71
	%vreg72<def> = SRLI %t5, 12; GR32Bit:%vreg72
	%vreg73<def> = ANDI %vreg72, 15; GR32Bit:%vreg73,%vreg72
	%vreg74<def> = SRLI %t5, 6; GR32Bit:%vreg74
	%vreg75<def> = ANDI %vreg74, 63; GR32Bit:%vreg75,%vreg74
	%vreg76<def> = ADDI %zero, 832; GR32Bit:%vreg76
	%vreg77<def> = MUL %vreg71, %vreg76; GR32Bit:%vreg77,%vreg71,%vreg76
	%vreg78<def> = ADDI %zero, 52; GR32Bit:%vreg78
	%vreg79<def> = MUL %vreg73, %vreg78; GR32Bit:%vreg79,%vreg73,%vreg78
	%vreg80<def> = ADD %vreg79, %vreg75; GR32Bit:%vreg80,%vreg79,%vreg75
	%vreg81<def> = ADD %vreg80, %vreg77; GR32Bit:%vreg81,%vreg80,%vreg77
	%vreg82<def> = MUL %vreg81, %vreg70; GR32Bit:%vreg82,%vreg81,%vreg70
	%vreg65<def> = ADD %vreg69, %vreg82; GR32Bit:%vreg65,%vreg69,%vreg82
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 316-660 ***

*** Renumbered SlotIndexes 304-680 ***

*** Renumbered SlotIndexes 216-728 ***

*** Renumbered SlotIndexes 204-748 ***

*** Renumbered SlotIndexes 204-764 ***

*** Renumbered SlotIndexes 112-808 ***

*** Renumbered SlotIndexes 100-828 ***

*** Renumbered SlotIndexes 100-844 ***

*** Renumbered SlotIndexes 100-860 ***

*** Renumbered SlotIndexes 100-876 ***

*** Renumbered SlotIndexes 100-892 ***

*** Renumbered SlotIndexes 100-908 ***

*** Renumbered SlotIndexes 12-956 ***
Creating pHyperOp bundles for CEs for bb0
  %vreg26<def> = ADD %t5, %zero; GR32Bit:%vreg26
starting at   %vreg7<def> = ADD %t5, %zero; GR32Bit:%vreg7
  %vreg45<def> = ADD %t5, %zero; GR32Bit:%vreg45
starting at   %vreg26<def> = ADD %t5, %zero; GR32Bit:%vreg26
  %vreg64<def> = ADD %t5, %zero; GR32Bit:%vreg64
starting at   %vreg45<def> = ADD %t5, %zero; GR32Bit:%vreg45
starting at   %vreg64<def> = ADD %t5, %zero; GR32Bit:%vreg64
After bundling, state of BB0:BB#0: derived from LLVM BB %redefine_start2.return
    Live Ins: %ra
	%vreg7<def> = ADD %t5, %zero; GR32Bit:%vreg7
	  * %vreg9<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg9
	  * %vreg10<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg10
	  * %vreg11<def> = SRLI %vreg10, 12; GR32Bit:%vreg11,%vreg10
	  * %vreg12<def> = ADD %vreg9, %vreg11; GR32Bit:%vreg12,%vreg9,%vreg11
	  * %vreg13<def> = ADDI %zero, 32; GR32Bit:%vreg13
	  * %vreg14<def> = SRLI %t5, 22; GR32Bit:%vreg14
	  * %vreg15<def> = SRLI %t5, 12; GR32Bit:%vreg15
	  * %vreg16<def> = ANDI %vreg15, 15; GR32Bit:%vreg16,%vreg15
	  * %vreg17<def> = SRLI %t5, 6; GR32Bit:%vreg17
	  * %vreg18<def> = ANDI %vreg17, 63; GR32Bit:%vreg18,%vreg17
	  * %vreg19<def> = ADDI %zero, 832; GR32Bit:%vreg19
	  * %vreg20<def> = MUL %vreg14, %vreg19; GR32Bit:%vreg20,%vreg14,%vreg19
	  * %vreg21<def> = ADDI %zero, 52; GR32Bit:%vreg21
	  * %vreg22<def> = MUL %vreg16, %vreg21; GR32Bit:%vreg22,%vreg16,%vreg21
	  * %vreg23<def> = ADD %vreg22, %vreg18; GR32Bit:%vreg23,%vreg22,%vreg18
	  * %vreg24<def> = ADD %vreg23, %vreg20; GR32Bit:%vreg24,%vreg23,%vreg20
	  * %vreg25<def> = MUL %vreg24, %vreg13; GR32Bit:%vreg25,%vreg24,%vreg13
	  * %vreg8<def> = ADD %vreg12, %vreg25; GR32Bit:%vreg8,%vreg12,%vreg25
	  * %vreg2<def> = ADDI %zero, <ga:@redefine_out_TPUMCR>[TF=3]; GR32Bit:%vreg2
	  * %vreg1<def> = LUI <ga:@redefine_out_TPUMCR>[TF=2]; GR32Bit:%vreg1
	  * %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
	  * %vreg0<def> = COPY %ra; GR32Bit:%vreg0
	  * SW %vreg0, %vreg3, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1)] GR32Bit:%vreg0,%vreg3
	  * %vreg4<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg4
	  * %vreg5<def> = LW %vreg4, 0; mem:LD4[%1](align=16) GR32Bit:%vreg5,%vreg4
	  * %vreg6<def> = LW %vreg5, 0; mem:LD4[%3] GR32Bit:%vreg6,%vreg5
	  * SW %vreg6, %vreg3, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0)] GR32Bit:%vreg6,%vreg3
	  * FDELETE %t4, 0
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg26<def> = ADD %t5, %zero; GR32Bit:%vreg26
	  * %vreg28<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg28
	  * %vreg29<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg29
	  * %vreg30<def> = SRLI %vreg29, 12; GR32Bit:%vreg30,%vreg29
	  * %vreg31<def> = ADD %vreg28, %vreg30; GR32Bit:%vreg31,%vreg28,%vreg30
	  * %vreg32<def> = ADDI %zero, 32; GR32Bit:%vreg32
	  * %vreg33<def> = SRLI %t5, 22; GR32Bit:%vreg33
	  * %vreg34<def> = SRLI %t5, 12; GR32Bit:%vreg34
	  * %vreg35<def> = ANDI %vreg34, 15; GR32Bit:%vreg35,%vreg34
	  * %vreg36<def> = SRLI %t5, 6; GR32Bit:%vreg36
	  * %vreg37<def> = ANDI %vreg36, 63; GR32Bit:%vreg37,%vreg36
	  * %vreg38<def> = ADDI %zero, 832; GR32Bit:%vreg38
	  * %vreg39<def> = MUL %vreg33, %vreg38; GR32Bit:%vreg39,%vreg33,%vreg38
	  * %vreg40<def> = ADDI %zero, 52; GR32Bit:%vreg40
	  * %vreg41<def> = MUL %vreg35, %vreg40; GR32Bit:%vreg41,%vreg35,%vreg40
	  * %vreg42<def> = ADD %vreg41, %vreg37; GR32Bit:%vreg42,%vreg41,%vreg37
	  * %vreg43<def> = ADD %vreg42, %vreg39; GR32Bit:%vreg43,%vreg42,%vreg39
	  * %vreg44<def> = MUL %vreg43, %vreg32; GR32Bit:%vreg44,%vreg43,%vreg32
	  * %vreg27<def> = ADD %vreg31, %vreg44; GR32Bit:%vreg27,%vreg31,%vreg44
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg45<def> = ADD %t5, %zero; GR32Bit:%vreg45
	  * %vreg47<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg47
	  * %vreg48<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg48
	  * %vreg49<def> = SRLI %vreg48, 12; GR32Bit:%vreg49,%vreg48
	  * %vreg50<def> = ADD %vreg47, %vreg49; GR32Bit:%vreg50,%vreg47,%vreg49
	  * %vreg51<def> = ADDI %zero, 32; GR32Bit:%vreg51
	  * %vreg52<def> = SRLI %t5, 22; GR32Bit:%vreg52
	  * %vreg53<def> = SRLI %t5, 12; GR32Bit:%vreg53
	  * %vreg54<def> = ANDI %vreg53, 15; GR32Bit:%vreg54,%vreg53
	  * %vreg55<def> = SRLI %t5, 6; GR32Bit:%vreg55
	  * %vreg56<def> = ANDI %vreg55, 63; GR32Bit:%vreg56,%vreg55
	  * %vreg57<def> = ADDI %zero, 832; GR32Bit:%vreg57
	  * %vreg58<def> = MUL %vreg52, %vreg57; GR32Bit:%vreg58,%vreg52,%vreg57
	  * %vreg59<def> = ADDI %zero, 52; GR32Bit:%vreg59
	  * %vreg60<def> = MUL %vreg54, %vreg59; GR32Bit:%vreg60,%vreg54,%vreg59
	  * %vreg61<def> = ADD %vreg60, %vreg56; GR32Bit:%vreg61,%vreg60,%vreg56
	  * %vreg62<def> = ADD %vreg61, %vreg58; GR32Bit:%vreg62,%vreg61,%vreg58
	  * %vreg63<def> = MUL %vreg62, %vreg51; GR32Bit:%vreg63,%vreg62,%vreg51
	  * %vreg46<def> = ADD %vreg50, %vreg63; GR32Bit:%vreg46,%vreg50,%vreg63
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg64<def> = ADD %t5, %zero; GR32Bit:%vreg64
	  * %vreg66<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg66
	  * %vreg67<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg67
	  * %vreg68<def> = SRLI %vreg67, 12; GR32Bit:%vreg68,%vreg67
	  * %vreg69<def> = ADD %vreg66, %vreg68; GR32Bit:%vreg69,%vreg66,%vreg68
	  * %vreg70<def> = ADDI %zero, 32; GR32Bit:%vreg70
	  * %vreg71<def> = SRLI %t5, 22; GR32Bit:%vreg71
	  * %vreg72<def> = SRLI %t5, 12; GR32Bit:%vreg72
	  * %vreg73<def> = ANDI %vreg72, 15; GR32Bit:%vreg73,%vreg72
	  * %vreg74<def> = SRLI %t5, 6; GR32Bit:%vreg74
	  * %vreg75<def> = ANDI %vreg74, 63; GR32Bit:%vreg75,%vreg74
	  * %vreg76<def> = ADDI %zero, 832; GR32Bit:%vreg76
	  * %vreg77<def> = MUL %vreg71, %vreg76; GR32Bit:%vreg77,%vreg71,%vreg76
	  * %vreg78<def> = ADDI %zero, 52; GR32Bit:%vreg78
	  * %vreg79<def> = MUL %vreg73, %vreg78; GR32Bit:%vreg79,%vreg73,%vreg78
	  * %vreg80<def> = ADD %vreg79, %vreg75; GR32Bit:%vreg80,%vreg79,%vreg75
	  * %vreg81<def> = ADD %vreg80, %vreg77; GR32Bit:%vreg81,%vreg80,%vreg77
	  * %vreg82<def> = MUL %vreg81, %vreg70; GR32Bit:%vreg82,%vreg81,%vreg70
	  * %vreg65<def> = ADD %vreg69, %vreg82; GR32Bit:%vreg65,%vreg69,%vreg82
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
%physreg43,Patching the instructions that are supposed to use the physical registers r30 and r31
Computing live-in reg-units in ABI blocks.
0B	BB#0 ra#0
Created 0 new intervals.

*** Renumbered SlotIndexes 8-976 ***
********** INTERVALS **********
ra = [0B,904r:0)  0@0B-phi
zero = EMPTY
%vreg0 = [192r,200r:0)  0@192r
%vreg1 = [176r,184r:0)  0@176r
%vreg2 = [168r,184r:0)  0@168r
%vreg3 = [184r,232r:0)  0@184r
%vreg4 = [208r,216r:0)  0@208r
%vreg5 = [216r,224r:0)  0@216r
%vreg6 = [224r,232r:0)  0@224r
%vreg7 = [4r,4d:0)  0@4r
%vreg8 = [160r,160d:0)  0@160r
%vreg9 = [24r,48r:0)  0@24r
%vreg10 = [32r,40r:0)  0@32r
%vreg11 = [40r,48r:0)  0@40r
%vreg12 = [48r,160r:0)  0@48r
%vreg13 = [56r,152r:0)  0@56r
%vreg14 = [64r,112r:0)  0@64r
%vreg15 = [72r,80r:0)  0@72r
%vreg16 = [80r,128r:0)  0@80r
%vreg17 = [88r,96r:0)  0@88r
%vreg18 = [96r,136r:0)  0@96r
%vreg19 = [104r,112r:0)  0@104r
%vreg20 = [112r,144r:0)  0@112r
%vreg21 = [120r,128r:0)  0@120r
%vreg22 = [128r,136r:0)  0@128r
%vreg23 = [136r,144r:0)  0@136r
%vreg24 = [144r,152r:0)  0@144r
%vreg25 = [152r,160r:0)  0@152r
%vreg26 = [272r,272d:0)  0@272r
%vreg27 = [416r,416d:0)  0@416r
%vreg28 = [280r,304r:0)  0@280r
%vreg29 = [288r,296r:0)  0@288r
%vreg30 = [296r,304r:0)  0@296r
%vreg31 = [304r,416r:0)  0@304r
%vreg32 = [312r,408r:0)  0@312r
%vreg33 = [320r,368r:0)  0@320r
%vreg34 = [328r,336r:0)  0@328r
%vreg35 = [336r,384r:0)  0@336r
%vreg36 = [344r,352r:0)  0@344r
%vreg37 = [352r,392r:0)  0@352r
%vreg38 = [360r,368r:0)  0@360r
%vreg39 = [368r,400r:0)  0@368r
%vreg40 = [376r,384r:0)  0@376r
%vreg41 = [384r,392r:0)  0@384r
%vreg42 = [392r,400r:0)  0@392r
%vreg43 = [400r,408r:0)  0@400r
%vreg44 = [408r,416r:0)  0@408r
%vreg45 = [448r,448d:0)  0@448r
%vreg46 = [592r,592d:0)  0@592r
%vreg47 = [456r,480r:0)  0@456r
%vreg48 = [464r,472r:0)  0@464r
%vreg49 = [472r,480r:0)  0@472r
%vreg50 = [480r,592r:0)  0@480r
%vreg51 = [488r,584r:0)  0@488r
%vreg52 = [496r,544r:0)  0@496r
%vreg53 = [504r,512r:0)  0@504r
%vreg54 = [512r,560r:0)  0@512r
%vreg55 = [520r,528r:0)  0@520r
%vreg56 = [528r,568r:0)  0@528r
%vreg57 = [536r,544r:0)  0@536r
%vreg58 = [544r,576r:0)  0@544r
%vreg59 = [552r,560r:0)  0@552r
%vreg60 = [560r,568r:0)  0@560r
%vreg61 = [568r,576r:0)  0@568r
%vreg62 = [576r,584r:0)  0@576r
%vreg63 = [584r,592r:0)  0@584r
%vreg64 = [624r,624d:0)  0@624r
%vreg65 = [768r,768d:0)  0@768r
%vreg66 = [632r,656r:0)  0@632r
%vreg67 = [640r,648r:0)  0@640r
%vreg68 = [648r,656r:0)  0@648r
%vreg69 = [656r,768r:0)  0@656r
%vreg70 = [664r,760r:0)  0@664r
%vreg71 = [672r,720r:0)  0@672r
%vreg72 = [680r,688r:0)  0@680r
%vreg73 = [688r,736r:0)  0@688r
%vreg74 = [696r,704r:0)  0@696r
%vreg75 = [704r,744r:0)  0@704r
%vreg76 = [712r,720r:0)  0@712r
%vreg77 = [720r,752r:0)  0@720r
%vreg78 = [728r,736r:0)  0@728r
%vreg79 = [736r,744r:0)  0@736r
%vreg80 = [744r,752r:0)  0@744r
%vreg81 = [752r,760r:0)  0@752r
%vreg82 = [760r,768r:0)  0@760r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start2: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
Function Live Ins: %ra in %vreg0

0B	BB#0: derived from LLVM BB %redefine_start2.return
	    Live Ins: %ra
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg9<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg9
4B		  * %vreg10<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg10
4B		  * %vreg11<def> = SRLI %vreg10, 12; GR32Bit:%vreg11,%vreg10
4B		  * %vreg12<def> = ADD %vreg9, %vreg11; GR32Bit:%vreg12,%vreg9,%vreg11
4B		  * %vreg13<def> = ADDI %zero, 32; GR32Bit:%vreg13
4B		  * %vreg14<def> = SRLI %t5, 22; GR32Bit:%vreg14
4B		  * %vreg15<def> = SRLI %t5, 12; GR32Bit:%vreg15
4B		  * %vreg16<def> = ANDI %vreg15, 15; GR32Bit:%vreg16,%vreg15
4B		  * %vreg17<def> = SRLI %t5, 6; GR32Bit:%vreg17
4B		  * %vreg18<def> = ANDI %vreg17, 63; GR32Bit:%vreg18,%vreg17
4B		  * %vreg19<def> = ADDI %zero, 832; GR32Bit:%vreg19
4B		  * %vreg20<def> = MUL %vreg14, %vreg19; GR32Bit:%vreg20,%vreg14,%vreg19
4B		  * %vreg21<def> = ADDI %zero, 52; GR32Bit:%vreg21
4B		  * %vreg22<def> = MUL %vreg16, %vreg21; GR32Bit:%vreg22,%vreg16,%vreg21
4B		  * %vreg23<def> = ADD %vreg22, %vreg18; GR32Bit:%vreg23,%vreg22,%vreg18
4B		  * %vreg24<def> = ADD %vreg23, %vreg20; GR32Bit:%vreg24,%vreg23,%vreg20
4B		  * %vreg25<def> = MUL %vreg24, %vreg13; GR32Bit:%vreg25,%vreg24,%vreg13
4B		  * %t5<def> = ADD %vreg12, %vreg25; GR32Bit:%vreg12,%vreg25
4B		  * %vreg2<def> = LUI <MCSym="%lo("ga#256")">; GR32Bit:%vreg2
4B		  * SRLI %vreg2, %vreg2, 12; GR32Bit:%vreg2
4B		  * %vreg1<def> = LUI <ga:@redefine_out_TPUMCR>[TF=2]; GR32Bit:%vreg1
4B		  * %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
4B		  * %vreg0<def> = COPY %ra; GR32Bit:%vreg0
4B		  * SW %vreg0, %vreg3, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1)] GR32Bit:%vreg0,%vreg3
4B		  * %vreg4<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg4
4B		  * %vreg5<def> = LW %vreg4, 0; mem:LD4[%1](align=16) GR32Bit:%vreg5,%vreg4
4B		  * %vreg6<def> = LW %vreg5, 0; mem:LD4[%3] GR32Bit:%vreg6,%vreg5
4B		  * SW %vreg6, %vreg3, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0)] GR32Bit:%vreg6,%vreg3
4B		  * FDELETE %t4, 0
4B		  * END 0
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
272B		%t4<def> = ADD %t5, %zero
272B		  * %vreg28<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg28
272B		  * %vreg29<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg29
272B		  * %vreg30<def> = SRLI %vreg29, 12; GR32Bit:%vreg30,%vreg29
272B		  * %vreg31<def> = ADD %vreg28, %vreg30; GR32Bit:%vreg31,%vreg28,%vreg30
272B		  * %vreg32<def> = ADDI %zero, 32; GR32Bit:%vreg32
272B		  * %vreg33<def> = SRLI %t5, 22; GR32Bit:%vreg33
272B		  * %vreg34<def> = SRLI %t5, 12; GR32Bit:%vreg34
272B		  * %vreg35<def> = ANDI %vreg34, 15; GR32Bit:%vreg35,%vreg34
272B		  * %vreg36<def> = SRLI %t5, 6; GR32Bit:%vreg36
272B		  * %vreg37<def> = ANDI %vreg36, 63; GR32Bit:%vreg37,%vreg36
272B		  * %vreg38<def> = ADDI %zero, 832; GR32Bit:%vreg38
272B		  * %vreg39<def> = MUL %vreg33, %vreg38; GR32Bit:%vreg39,%vreg33,%vreg38
272B		  * %vreg40<def> = ADDI %zero, 52; GR32Bit:%vreg40
272B		  * %vreg41<def> = MUL %vreg35, %vreg40; GR32Bit:%vreg41,%vreg35,%vreg40
272B		  * %vreg42<def> = ADD %vreg41, %vreg37; GR32Bit:%vreg42,%vreg41,%vreg37
272B		  * %vreg43<def> = ADD %vreg42, %vreg39; GR32Bit:%vreg43,%vreg42,%vreg39
272B		  * %vreg44<def> = MUL %vreg43, %vreg32; GR32Bit:%vreg44,%vreg43,%vreg32
272B		  * %t5<def> = ADD %vreg31, %vreg44; GR32Bit:%vreg31,%vreg44
272B		  * END 0
272B		  * %zero<def> = ADDI %zero, 0
272B		  * %zero<def> = ADDI %zero, 0
448B		%t4<def> = ADD %t5, %zero
448B		  * %vreg47<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg47
448B		  * %vreg48<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg48
448B		  * %vreg49<def> = SRLI %vreg48, 12; GR32Bit:%vreg49,%vreg48
448B		  * %vreg50<def> = ADD %vreg47, %vreg49; GR32Bit:%vreg50,%vreg47,%vreg49
448B		  * %vreg51<def> = ADDI %zero, 32; GR32Bit:%vreg51
448B		  * %vreg52<def> = SRLI %t5, 22; GR32Bit:%vreg52
448B		  * %vreg53<def> = SRLI %t5, 12; GR32Bit:%vreg53
448B		  * %vreg54<def> = ANDI %vreg53, 15; GR32Bit:%vreg54,%vreg53
448B		  * %vreg55<def> = SRLI %t5, 6; GR32Bit:%vreg55
448B		  * %vreg56<def> = ANDI %vreg55, 63; GR32Bit:%vreg56,%vreg55
448B		  * %vreg57<def> = ADDI %zero, 832; GR32Bit:%vreg57
448B		  * %vreg58<def> = MUL %vreg52, %vreg57; GR32Bit:%vreg58,%vreg52,%vreg57
448B		  * %vreg59<def> = ADDI %zero, 52; GR32Bit:%vreg59
448B		  * %vreg60<def> = MUL %vreg54, %vreg59; GR32Bit:%vreg60,%vreg54,%vreg59
448B		  * %vreg61<def> = ADD %vreg60, %vreg56; GR32Bit:%vreg61,%vreg60,%vreg56
448B		  * %vreg62<def> = ADD %vreg61, %vreg58; GR32Bit:%vreg62,%vreg61,%vreg58
448B		  * %vreg63<def> = MUL %vreg62, %vreg51; GR32Bit:%vreg63,%vreg62,%vreg51
448B		  * %t5<def> = ADD %vreg50, %vreg63; GR32Bit:%vreg50,%vreg63
448B		  * END 0
448B		  * %zero<def> = ADDI %zero, 0
448B		  * %zero<def> = ADDI %zero, 0
624B		%t4<def> = ADD %t5, %zero
624B		  * %vreg66<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg66
624B		  * %vreg67<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg67
624B		  * %vreg68<def> = SRLI %vreg67, 12; GR32Bit:%vreg68,%vreg67
624B		  * %vreg69<def> = ADD %vreg66, %vreg68; GR32Bit:%vreg69,%vreg66,%vreg68
624B		  * %vreg70<def> = ADDI %zero, 32; GR32Bit:%vreg70
624B		  * %vreg71<def> = SRLI %t5, 22; GR32Bit:%vreg71
624B		  * %vreg72<def> = SRLI %t5, 12; GR32Bit:%vreg72
624B		  * %vreg73<def> = ANDI %vreg72, 15; GR32Bit:%vreg73,%vreg72
624B		  * %vreg74<def> = SRLI %t5, 6; GR32Bit:%vreg74
624B		  * %vreg75<def> = ANDI %vreg74, 63; GR32Bit:%vreg75,%vreg74
624B		  * %vreg76<def> = ADDI %zero, 832; GR32Bit:%vreg76
624B		  * %vreg77<def> = MUL %vreg71, %vreg76; GR32Bit:%vreg77,%vreg71,%vreg76
624B		  * %vreg78<def> = ADDI %zero, 52; GR32Bit:%vreg78
624B		  * %vreg79<def> = MUL %vreg73, %vreg78; GR32Bit:%vreg79,%vreg73,%vreg78
624B		  * %vreg80<def> = ADD %vreg79, %vreg75; GR32Bit:%vreg80,%vreg79,%vreg75
624B		  * %vreg81<def> = ADD %vreg80, %vreg77; GR32Bit:%vreg81,%vreg80,%vreg77
624B		  * %vreg82<def> = MUL %vreg81, %vreg70; GR32Bit:%vreg82,%vreg81,%vreg70
624B		  * %t5<def> = ADD %vreg69, %vreg82; GR32Bit:%vreg69,%vreg82
624B		  * END 0
624B		  * %zero<def> = ADDI %zero, 0
624B		  * %zero<def> = ADDI %zero, 0

# End machine code for function redefine_start2.

********** COMPUTING LIVE DEBUG VARIABLES: redefine_start2 **********
********** DEBUG VARIABLES **********
********** Compute Spill Weights **********
********** Function: redefine_start2
********** GREEDY REGISTER ALLOCATION **********
********** Function: redefine_start2
Replacing 43 with 43 for instruction%vreg0<def> = COPY %ra; GR32Bit:%vreg0

selectOrSplit GR32Bit:%vreg0 [192r,200r:0)  0@192r
hints: %ra
reg 2147483648 that was live-in gets phys reg:43 instead of phys reg:43
assigning %vreg0 to %ra: ra

selectOrSplit GR32Bit:%vreg12 [48r,160r:0)  0@48r
assigning %vreg12 to %t0: t0

selectOrSplit GR32Bit:%vreg31 [304r,416r:0)  0@304r
assigning %vreg31 to %t0: t0

selectOrSplit GR32Bit:%vreg50 [480r,592r:0)  0@480r
assigning %vreg50 to %t0: t0

selectOrSplit GR32Bit:%vreg69 [656r,768r:0)  0@656r
assigning %vreg69 to %t0: t0

selectOrSplit GR32Bit:%vreg13 [56r,152r:0)  0@56r
assigning %vreg13 to %t1: t1

selectOrSplit GR32Bit:%vreg32 [312r,408r:0)  0@312r
assigning %vreg32 to %t1: t1

selectOrSplit GR32Bit:%vreg51 [488r,584r:0)  0@488r
assigning %vreg51 to %t1: t1

selectOrSplit GR32Bit:%vreg70 [664r,760r:0)  0@664r
assigning %vreg70 to %t1: t1

selectOrSplit GR32Bit:%vreg3 [184r,232r:0)  0@184r
assigning %vreg3 to %t0: t0

selectOrSplit GR32Bit:%vreg14 [64r,112r:0)  0@64r
assigning %vreg14 to %t2: t2

selectOrSplit GR32Bit:%vreg16 [80r,128r:0)  0@80r
assigning %vreg16 to %fp: fp

selectOrSplit GR32Bit:%vreg33 [320r,368r:0)  0@320r
assigning %vreg33 to %t2: t2

selectOrSplit GR32Bit:%vreg35 [336r,384r:0)  0@336r
assigning %vreg35 to %fp: fp

selectOrSplit GR32Bit:%vreg52 [496r,544r:0)  0@496r
assigning %vreg52 to %t2: t2

selectOrSplit GR32Bit:%vreg54 [512r,560r:0)  0@512r
assigning %vreg54 to %fp: fp

selectOrSplit GR32Bit:%vreg71 [672r,720r:0)  0@672r
assigning %vreg71 to %t2: t2

selectOrSplit GR32Bit:%vreg73 [688r,736r:0)  0@688r
assigning %vreg73 to %fp: fp

selectOrSplit GR32Bit:%vreg18 [96r,136r:0)  0@96r
assigning %vreg18 to %a0: a0

selectOrSplit GR32Bit:%vreg37 [352r,392r:0)  0@352r
assigning %vreg37 to %a0: a0

selectOrSplit GR32Bit:%vreg56 [528r,568r:0)  0@528r
assigning %vreg56 to %a0: a0

selectOrSplit GR32Bit:%vreg75 [704r,744r:0)  0@704r
assigning %vreg75 to %a0: a0

selectOrSplit GR32Bit:%vreg20 [112r,144r:0)  0@112r
assigning %vreg20 to %t2: t2

selectOrSplit GR32Bit:%vreg39 [368r,400r:0)  0@368r
assigning %vreg39 to %t2: t2

selectOrSplit GR32Bit:%vreg58 [544r,576r:0)  0@544r
assigning %vreg58 to %t2: t2

selectOrSplit GR32Bit:%vreg77 [720r,752r:0)  0@720r
assigning %vreg77 to %t2: t2

selectOrSplit GR32Bit:%vreg9 [24r,48r:0)  0@24r
assigning %vreg9 to %t0: t0

selectOrSplit GR32Bit:%vreg28 [280r,304r:0)  0@280r
assigning %vreg28 to %t0: t0

selectOrSplit GR32Bit:%vreg47 [456r,480r:0)  0@456r
assigning %vreg47 to %t0: t0

selectOrSplit GR32Bit:%vreg66 [632r,656r:0)  0@632r
assigning %vreg66 to %t0: t0

selectOrSplit GR32Bit:%vreg2 [168r,184r:0)  0@168r
assigning %vreg2 to %t0: t0

selectOrSplit GR32Bit:%vreg1 [176r,184r:0)  0@176r
assigning %vreg1 to %t1: t1

selectOrSplit GR32Bit:%vreg4 [208r,216r:0)  0@208r
assigning %vreg4 to %t1: t1

selectOrSplit GR32Bit:%vreg5 [216r,224r:0)  0@216r
assigning %vreg5 to %t1: t1

selectOrSplit GR32Bit:%vreg6 [224r,232r:0)  0@224r
assigning %vreg6 to %t1: t1

selectOrSplit GR32Bit:%vreg10 [32r,40r:0)  0@32r
assigning %vreg10 to %t1: t1

selectOrSplit GR32Bit:%vreg11 [40r,48r:0)  0@40r
assigning %vreg11 to %t1: t1

selectOrSplit GR32Bit:%vreg15 [72r,80r:0)  0@72r
assigning %vreg15 to %fp: fp

selectOrSplit GR32Bit:%vreg17 [88r,96r:0)  0@88r
assigning %vreg17 to %a0: a0

selectOrSplit GR32Bit:%vreg19 [104r,112r:0)  0@104r
assigning %vreg19 to %a1: a1

selectOrSplit GR32Bit:%vreg21 [120r,128r:0)  0@120r
assigning %vreg21 to %a1: a1

selectOrSplit GR32Bit:%vreg22 [128r,136r:0)  0@128r
assigning %vreg22 to %fp: fp

selectOrSplit GR32Bit:%vreg23 [136r,144r:0)  0@136r
assigning %vreg23 to %fp: fp

selectOrSplit GR32Bit:%vreg24 [144r,152r:0)  0@144r
assigning %vreg24 to %t2: t2

selectOrSplit GR32Bit:%vreg25 [152r,160r:0)  0@152r
assigning %vreg25 to %t1: t1

selectOrSplit GR32Bit:%vreg29 [288r,296r:0)  0@288r
assigning %vreg29 to %t1: t1

selectOrSplit GR32Bit:%vreg30 [296r,304r:0)  0@296r
assigning %vreg30 to %t1: t1

selectOrSplit GR32Bit:%vreg34 [328r,336r:0)  0@328r
assigning %vreg34 to %fp: fp

selectOrSplit GR32Bit:%vreg36 [344r,352r:0)  0@344r
assigning %vreg36 to %a0: a0

selectOrSplit GR32Bit:%vreg38 [360r,368r:0)  0@360r
assigning %vreg38 to %a1: a1

selectOrSplit GR32Bit:%vreg40 [376r,384r:0)  0@376r
assigning %vreg40 to %a1: a1

selectOrSplit GR32Bit:%vreg41 [384r,392r:0)  0@384r
assigning %vreg41 to %fp: fp

selectOrSplit GR32Bit:%vreg42 [392r,400r:0)  0@392r
assigning %vreg42 to %fp: fp

selectOrSplit GR32Bit:%vreg43 [400r,408r:0)  0@400r
assigning %vreg43 to %t2: t2

selectOrSplit GR32Bit:%vreg44 [408r,416r:0)  0@408r
assigning %vreg44 to %t1: t1

selectOrSplit GR32Bit:%vreg48 [464r,472r:0)  0@464r
assigning %vreg48 to %t1: t1

selectOrSplit GR32Bit:%vreg49 [472r,480r:0)  0@472r
assigning %vreg49 to %t1: t1

selectOrSplit GR32Bit:%vreg53 [504r,512r:0)  0@504r
assigning %vreg53 to %fp: fp

selectOrSplit GR32Bit:%vreg55 [520r,528r:0)  0@520r
assigning %vreg55 to %a0: a0

selectOrSplit GR32Bit:%vreg57 [536r,544r:0)  0@536r
assigning %vreg57 to %a1: a1

selectOrSplit GR32Bit:%vreg59 [552r,560r:0)  0@552r
assigning %vreg59 to %a1: a1

selectOrSplit GR32Bit:%vreg60 [560r,568r:0)  0@560r
assigning %vreg60 to %fp: fp

selectOrSplit GR32Bit:%vreg61 [568r,576r:0)  0@568r
assigning %vreg61 to %fp: fp

selectOrSplit GR32Bit:%vreg62 [576r,584r:0)  0@576r
assigning %vreg62 to %t2: t2

selectOrSplit GR32Bit:%vreg63 [584r,592r:0)  0@584r
assigning %vreg63 to %t1: t1

selectOrSplit GR32Bit:%vreg67 [640r,648r:0)  0@640r
assigning %vreg67 to %t1: t1

selectOrSplit GR32Bit:%vreg68 [648r,656r:0)  0@648r
assigning %vreg68 to %t1: t1

selectOrSplit GR32Bit:%vreg72 [680r,688r:0)  0@680r
assigning %vreg72 to %fp: fp

selectOrSplit GR32Bit:%vreg74 [696r,704r:0)  0@696r
assigning %vreg74 to %a0: a0

selectOrSplit GR32Bit:%vreg76 [712r,720r:0)  0@712r
assigning %vreg76 to %a1: a1

selectOrSplit GR32Bit:%vreg78 [728r,736r:0)  0@728r
assigning %vreg78 to %a1: a1

selectOrSplit GR32Bit:%vreg79 [736r,744r:0)  0@736r
assigning %vreg79 to %fp: fp

selectOrSplit GR32Bit:%vreg80 [744r,752r:0)  0@744r
assigning %vreg80 to %fp: fp

selectOrSplit GR32Bit:%vreg81 [752r,760r:0)  0@752r
assigning %vreg81 to %t2: t2

selectOrSplit GR32Bit:%vreg82 [760r,768r:0)  0@760r
assigning %vreg82 to %t1: t1
********** REWRITE VIRTUAL REGISTERS **********
********** Function: redefine_start2
********** REGISTER MAP **********
[%vreg0 -> %ra] GR32Bit
[%vreg1 -> %t1] GR32Bit
[%vreg2 -> %t0] GR32Bit
[%vreg3 -> %t0] GR32Bit
[%vreg4 -> %t1] GR32Bit
[%vreg5 -> %t1] GR32Bit
[%vreg6 -> %t1] GR32Bit
[%vreg9 -> %t0] GR32Bit
[%vreg10 -> %t1] GR32Bit
[%vreg11 -> %t1] GR32Bit
[%vreg12 -> %t0] GR32Bit
[%vreg13 -> %t1] GR32Bit
[%vreg14 -> %t2] GR32Bit
[%vreg15 -> %fp] GR32Bit
[%vreg16 -> %fp] GR32Bit
[%vreg17 -> %a0] GR32Bit
[%vreg18 -> %a0] GR32Bit
[%vreg19 -> %a1] GR32Bit
[%vreg20 -> %t2] GR32Bit
[%vreg21 -> %a1] GR32Bit
[%vreg22 -> %fp] GR32Bit
[%vreg23 -> %fp] GR32Bit
[%vreg24 -> %t2] GR32Bit
[%vreg25 -> %t1] GR32Bit
[%vreg28 -> %t0] GR32Bit
[%vreg29 -> %t1] GR32Bit
[%vreg30 -> %t1] GR32Bit
[%vreg31 -> %t0] GR32Bit
[%vreg32 -> %t1] GR32Bit
[%vreg33 -> %t2] GR32Bit
[%vreg34 -> %fp] GR32Bit
[%vreg35 -> %fp] GR32Bit
[%vreg36 -> %a0] GR32Bit
[%vreg37 -> %a0] GR32Bit
[%vreg38 -> %a1] GR32Bit
[%vreg39 -> %t2] GR32Bit
[%vreg40 -> %a1] GR32Bit
[%vreg41 -> %fp] GR32Bit
[%vreg42 -> %fp] GR32Bit
[%vreg43 -> %t2] GR32Bit
[%vreg44 -> %t1] GR32Bit
[%vreg47 -> %t0] GR32Bit
[%vreg48 -> %t1] GR32Bit
[%vreg49 -> %t1] GR32Bit
[%vreg50 -> %t0] GR32Bit
[%vreg51 -> %t1] GR32Bit
[%vreg52 -> %t2] GR32Bit
[%vreg53 -> %fp] GR32Bit
[%vreg54 -> %fp] GR32Bit
[%vreg55 -> %a0] GR32Bit
[%vreg56 -> %a0] GR32Bit
[%vreg57 -> %a1] GR32Bit
[%vreg58 -> %t2] GR32Bit
[%vreg59 -> %a1] GR32Bit
[%vreg60 -> %fp] GR32Bit
[%vreg61 -> %fp] GR32Bit
[%vreg62 -> %t2] GR32Bit
[%vreg63 -> %t1] GR32Bit
[%vreg66 -> %t0] GR32Bit
[%vreg67 -> %t1] GR32Bit
[%vreg68 -> %t1] GR32Bit
[%vreg69 -> %t0] GR32Bit
[%vreg70 -> %t1] GR32Bit
[%vreg71 -> %t2] GR32Bit
[%vreg72 -> %fp] GR32Bit
[%vreg73 -> %fp] GR32Bit
[%vreg74 -> %a0] GR32Bit
[%vreg75 -> %a0] GR32Bit
[%vreg76 -> %a1] GR32Bit
[%vreg77 -> %t2] GR32Bit
[%vreg78 -> %a1] GR32Bit
[%vreg79 -> %fp] GR32Bit
[%vreg80 -> %fp] GR32Bit
[%vreg81 -> %t2] GR32Bit
[%vreg82 -> %t1] GR32Bit

0B	BB#0: derived from LLVM BB %redefine_start2.return
	    Live Ins: %ra
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg9<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg9
4B		  * %vreg10<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg10
4B		  * %vreg11<def> = SRLI %vreg10<kill>, 12; GR32Bit:%vreg11,%vreg10
4B		  * %vreg12<def> = ADD %vreg9<kill>, %vreg11<kill>; GR32Bit:%vreg12,%vreg9,%vreg11
4B		  * %vreg13<def> = ADDI %zero, 32; GR32Bit:%vreg13
4B		  * %vreg14<def> = SRLI %t5, 22; GR32Bit:%vreg14
4B		  * %vreg15<def> = SRLI %t5, 12; GR32Bit:%vreg15
4B		  * %vreg16<def> = ANDI %vreg15<kill>, 15; GR32Bit:%vreg16,%vreg15
4B		  * %vreg17<def> = SRLI %t5, 6; GR32Bit:%vreg17
4B		  * %vreg18<def> = ANDI %vreg17<kill>, 63; GR32Bit:%vreg18,%vreg17
4B		  * %vreg19<def> = ADDI %zero, 832; GR32Bit:%vreg19
4B		  * %vreg20<def> = MUL %vreg14<kill>, %vreg19<kill>; GR32Bit:%vreg20,%vreg14,%vreg19
4B		  * %vreg21<def> = ADDI %zero, 52; GR32Bit:%vreg21
4B		  * %vreg22<def> = MUL %vreg16<kill>, %vreg21<kill>; GR32Bit:%vreg22,%vreg16,%vreg21
4B		  * %vreg23<def> = ADD %vreg22<kill>, %vreg18<kill>; GR32Bit:%vreg23,%vreg22,%vreg18
4B		  * %vreg24<def> = ADD %vreg23<kill>, %vreg20<kill>; GR32Bit:%vreg24,%vreg23,%vreg20
4B		  * %vreg25<def> = MUL %vreg24<kill>, %vreg13<kill>; GR32Bit:%vreg25,%vreg24,%vreg13
4B		  * %t5<def> = ADD %vreg12<kill>, %vreg25<kill>; GR32Bit:%vreg12,%vreg25
4B		  * %vreg2<def> = LUI <MCSym="%lo("ga#256")">; GR32Bit:%vreg2
4B		  * SRLI %vreg2, %vreg2, 12; GR32Bit:%vreg2
4B		  * %vreg1<def> = LUI <ga:@redefine_out_TPUMCR>[TF=2]; GR32Bit:%vreg1
4B		  * %vreg3<def> = ADD %vreg2<kill>, %vreg1<kill>; GR32Bit:%vreg3,%vreg2,%vreg1
4B		  * %vreg0<def> = COPY %ra; GR32Bit:%vreg0
4B		  * SW %vreg0, %vreg3, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1)] GR32Bit:%vreg0,%vreg3
4B		  * %vreg4<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg4
4B		  * %vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[%1](align=16) GR32Bit:%vreg5,%vreg4
4B		  * %vreg6<def> = LW %vreg5<kill>, 0; mem:LD4[%3] GR32Bit:%vreg6,%vreg5
4B		  * SW %vreg6<kill>, %vreg3<kill>, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0)] GR32Bit:%vreg6,%vreg3
4B		  * FDELETE %t4, 0
4B		  * END 0
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
272B		%t4<def> = ADD %t5, %zero
272B		  * %vreg28<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg28
272B		  * %vreg29<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg29
272B		  * %vreg30<def> = SRLI %vreg29<kill>, 12; GR32Bit:%vreg30,%vreg29
272B		  * %vreg31<def> = ADD %vreg28<kill>, %vreg30<kill>; GR32Bit:%vreg31,%vreg28,%vreg30
272B		  * %vreg32<def> = ADDI %zero, 32; GR32Bit:%vreg32
272B		  * %vreg33<def> = SRLI %t5, 22; GR32Bit:%vreg33
272B		  * %vreg34<def> = SRLI %t5, 12; GR32Bit:%vreg34
272B		  * %vreg35<def> = ANDI %vreg34<kill>, 15; GR32Bit:%vreg35,%vreg34
272B		  * %vreg36<def> = SRLI %t5, 6; GR32Bit:%vreg36
272B		  * %vreg37<def> = ANDI %vreg36<kill>, 63; GR32Bit:%vreg37,%vreg36
272B		  * %vreg38<def> = ADDI %zero, 832; GR32Bit:%vreg38
272B		  * %vreg39<def> = MUL %vreg33<kill>, %vreg38<kill>; GR32Bit:%vreg39,%vreg33,%vreg38
272B		  * %vreg40<def> = ADDI %zero, 52; GR32Bit:%vreg40
272B		  * %vreg41<def> = MUL %vreg35<kill>, %vreg40<kill>; GR32Bit:%vreg41,%vreg35,%vreg40
272B		  * %vreg42<def> = ADD %vreg41<kill>, %vreg37<kill>; GR32Bit:%vreg42,%vreg41,%vreg37
272B		  * %vreg43<def> = ADD %vreg42<kill>, %vreg39<kill>; GR32Bit:%vreg43,%vreg42,%vreg39
272B		  * %vreg44<def> = MUL %vreg43<kill>, %vreg32<kill>; GR32Bit:%vreg44,%vreg43,%vreg32
272B		  * %t5<def> = ADD %vreg31<kill>, %vreg44<kill>; GR32Bit:%vreg31,%vreg44
272B		  * END 0
272B		  * %zero<def> = ADDI %zero, 0
272B		  * %zero<def> = ADDI %zero, 0
448B		%t4<def> = ADD %t5, %zero
448B		  * %vreg47<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg47
448B		  * %vreg48<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg48
448B		  * %vreg49<def> = SRLI %vreg48<kill>, 12; GR32Bit:%vreg49,%vreg48
448B		  * %vreg50<def> = ADD %vreg47<kill>, %vreg49<kill>; GR32Bit:%vreg50,%vreg47,%vreg49
448B		  * %vreg51<def> = ADDI %zero, 32; GR32Bit:%vreg51
448B		  * %vreg52<def> = SRLI %t5, 22; GR32Bit:%vreg52
448B		  * %vreg53<def> = SRLI %t5, 12; GR32Bit:%vreg53
448B		  * %vreg54<def> = ANDI %vreg53<kill>, 15; GR32Bit:%vreg54,%vreg53
448B		  * %vreg55<def> = SRLI %t5, 6; GR32Bit:%vreg55
448B		  * %vreg56<def> = ANDI %vreg55<kill>, 63; GR32Bit:%vreg56,%vreg55
448B		  * %vreg57<def> = ADDI %zero, 832; GR32Bit:%vreg57
448B		  * %vreg58<def> = MUL %vreg52<kill>, %vreg57<kill>; GR32Bit:%vreg58,%vreg52,%vreg57
448B		  * %vreg59<def> = ADDI %zero, 52; GR32Bit:%vreg59
448B		  * %vreg60<def> = MUL %vreg54<kill>, %vreg59<kill>; GR32Bit:%vreg60,%vreg54,%vreg59
448B		  * %vreg61<def> = ADD %vreg60<kill>, %vreg56<kill>; GR32Bit:%vreg61,%vreg60,%vreg56
448B		  * %vreg62<def> = ADD %vreg61<kill>, %vreg58<kill>; GR32Bit:%vreg62,%vreg61,%vreg58
448B		  * %vreg63<def> = MUL %vreg62<kill>, %vreg51<kill>; GR32Bit:%vreg63,%vreg62,%vreg51
448B		  * %t5<def> = ADD %vreg50<kill>, %vreg63<kill>; GR32Bit:%vreg50,%vreg63
448B		  * END 0
448B		  * %zero<def> = ADDI %zero, 0
448B		  * %zero<def> = ADDI %zero, 0
624B		%t4<def> = ADD %t5, %zero
624B		  * %vreg66<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg66
624B		  * %vreg67<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg67
624B		  * %vreg68<def> = SRLI %vreg67<kill>, 12; GR32Bit:%vreg68,%vreg67
624B		  * %vreg69<def> = ADD %vreg66<kill>, %vreg68<kill>; GR32Bit:%vreg69,%vreg66,%vreg68
624B		  * %vreg70<def> = ADDI %zero, 32; GR32Bit:%vreg70
624B		  * %vreg71<def> = SRLI %t5, 22; GR32Bit:%vreg71
624B		  * %vreg72<def> = SRLI %t5, 12; GR32Bit:%vreg72
624B		  * %vreg73<def> = ANDI %vreg72<kill>, 15; GR32Bit:%vreg73,%vreg72
624B		  * %vreg74<def> = SRLI %t5, 6; GR32Bit:%vreg74
624B		  * %vreg75<def> = ANDI %vreg74<kill>, 63; GR32Bit:%vreg75,%vreg74
624B		  * %vreg76<def> = ADDI %zero, 832; GR32Bit:%vreg76
624B		  * %vreg77<def> = MUL %vreg71<kill>, %vreg76<kill>; GR32Bit:%vreg77,%vreg71,%vreg76
624B		  * %vreg78<def> = ADDI %zero, 52; GR32Bit:%vreg78
624B		  * %vreg79<def> = MUL %vreg73<kill>, %vreg78<kill>; GR32Bit:%vreg79,%vreg73,%vreg78
624B		  * %vreg80<def> = ADD %vreg79<kill>, %vreg75<kill>; GR32Bit:%vreg80,%vreg79,%vreg75
624B		  * %vreg81<def> = ADD %vreg80<kill>, %vreg77<kill>; GR32Bit:%vreg81,%vreg80,%vreg77
624B		  * %vreg82<def> = MUL %vreg81<kill>, %vreg70<kill>; GR32Bit:%vreg82,%vreg81,%vreg70
624B		  * %t5<def> = ADD %vreg69<kill>, %vreg82<kill>; GR32Bit:%vreg69,%vreg82
624B		  * END 0
624B		  * %zero<def> = ADDI %zero, 0
624B		  * %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 32
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = LUI <MCSym="%lo("ga#256")">
> SRLI %t0, %t0, 12
> %t1<def> = LUI <ga:@redefine_out_TPUMCR>[TF=2]
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %ra<def> = COPY %ra
Deleting identity copy.
> SW %ra, %t0, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1)]
> %t1<def> = ADDI %t5, <fi#-1>
> %t1<def> = LW %t1<kill>, 0; mem:LD4[%1](align=16)
> %t1<def> = LW %t1<kill>, 0; mem:LD4[%3]
> SW %t1<kill>, %t0<kill>, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0)]
> FDELETE %t4, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 32
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 32
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 32
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
********** EMITTING LIVE DEBUG VARIABLES **********
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: redefine_start2
current state of mf:# Machine code for function redefine_start2: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
Function Live Ins: %ra in %vreg0

BB#0: derived from LLVM BB %redefine_start2.return
    Live Ins: %ra
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 32
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = LUI <MCSym="%lo("ga#256")">
	  * SRLI %t0, %t0, 12
	  * %t1<def> = LUI <ga:@redefine_out_TPUMCR>[TF=2]
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * SW %ra, %t0, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1)]
	  * %t1<def> = ADDI %t5, <fi#-1>
	  * %t1<def> = LW %t1<kill>, 0; mem:LD4[%1](align=16)
	  * %t1<def> = LW %t1<kill>, 0; mem:LD4[%3]
	  * SW %t1<kill>, %t0<kill>, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0)]
	  * FDELETE %t4, 0
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 32
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 32
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 32
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0

# End machine code for function redefine_start2.

lowering frame index for func redefine_start2:-1 TO VAL:0
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:@redefine_in_placeholder]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:%7]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [4 + Base:%9]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [8 + Base:%11]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%5]
CGP: Found      local addrmode: [Base:%5]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%5]
CGP: Found      local addrmode: [Base:%5]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%1]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:@redefine_in_placeholder]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:%7]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [4 + Base:%9]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [8 + Base:%11]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%5]
CGP: Found      local addrmode: [Base:%5]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%5]
CGP: Found      local addrmode: [Base:%5]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%1]
To merge:

trp_init3.for.body:                               ; preds = %trp_init3.for.cond
  %15 = load i32* %3, align 4
  %16 = add nsw i32 %15, 1
  store i32 %16, i32* %3, align 4
  br label %trp_init3.for.inc



To merge:

trp_init3.for.end:                                ; preds = %trp_init3.for.cond
  %19 = load i32* %3, align 4
  %20 = and i32 %19, 2
  store i32 %20, i32* %3, align 4
  %21 = load i32* %3, align 4
  store i32 %21, i32* %1, align 4
  br label %trp_init3.return



Computing probabilities for trp_init3.for.inc
set edge trp_init3.for.inc -> 0 successor weight to 124
Computing probabilities for trp_init3.return
Computing probabilities for trp_init3.for.cond
set edge trp_init3.for.cond -> 0 successor weight to 124
set edge trp_init3.for.cond -> 1 successor weight to 4
Computing probabilities for trp_init3.entry



=== trp_init3
store visit is after?  store %struct.TP3_TAG* %0, %struct.TP3_TAG** %2, align 4
I was here to add %struct.TP3_TAG* %0
arg match found with argIndex:-1
Argument does not have assigned frame index!
The value is an argument for which I am here to get arg frame index as:0
whats the index?-1
I was here to add   %2 = alloca %struct.TP3_TAG*, align 4
whats in dag after store?SelectionDAG has 7 nodes:
  0x385c078: ch = EntryToken [ORD=9]

  0x3879480: i32 = FrameIndex<-1> [ORD=9]

  0x3878f80: i32 = undef [ORD=9]

    0x385c078: <multiple use>
    0x3879480: <multiple use>
    0x3878f80: <multiple use>
  0x3879380: i32,ch = load 0x385c078, 0x3879480, 0x3878f80<LD4[FixedStack-1]>

  0x3879180: i32 = Constant<0>

    0x385c078: <multiple use>
    0x3879480: <multiple use>
    0x3883330: i32 = FrameIndex<1> [ORD=9]

    0x3878f80: <multiple use>
  0x3879880: ch = store 0x385c078, 0x3879480, 0x3883330, 0x3878f80<ST4[%2]> [ORD=9]


visiting load instruction   %6 = load i32* @redefine_in_placeholder, align 4
I was here to add @redefine_in_placeholder = common global i32 0, align 4
with I type i32and sd value :0x3879780: i32 = GlobalAddress<i32* @redefine_in_placeholder> 0
new load?0x3879680: i32,ch = load 0x3879880, 0x3879780, 0x3878f80<LD4[@redefine_in_placeholder]>
dag after load is dealt with?SelectionDAG has 9 nodes:
  0x385c078: ch = EntryToken [ORD=9]

  0x3879480: i32 = FrameIndex<-1> [ORD=9]

  0x3878f80: i32 = undef [ORD=9]

    0x385c078: <multiple use>
    0x3879480: <multiple use>
    0x3878f80: <multiple use>
  0x3879380: i32,ch = load 0x385c078, 0x3879480, 0x3878f80<LD4[FixedStack-1]>

  0x3879180: i32 = Constant<0>

      0x385c078: <multiple use>
      0x3879480: <multiple use>
      0x3883330: i32 = FrameIndex<1> [ORD=9]

      0x3878f80: <multiple use>
    0x3879880: ch = store 0x385c078, 0x3879480, 0x3883330, 0x3878f80<ST4[%2]> [ORD=9]

    0x3879780: i32 = GlobalAddress<i32* @redefine_in_placeholder> 0

    0x3878f80: <multiple use>
  0x3879680: i32,ch = load 0x3879880, 0x3879780, 0x3878f80<LD4[@redefine_in_placeholder]>

    0x385c078: <multiple use>
    0x3879480: <multiple use>
    0x3883330: i32 = FrameIndex<1> [ORD=9]

    0x3878f80: <multiple use>
  0x3879880: ch = store 0x385c078, 0x3879480, 0x3883330, 0x3878f80<ST4[%2]> [ORD=9]


visiting load instruction   %7 = load %struct.TP3_TAG** %2, align 4
with I type %struct.TP3_TAG*and sd value :0x3883330: i32 = FrameIndex<1>
new load?0x3883230: i32,ch = load 0x3879880, 0x3883330, 0x3878f80<LD4[%2]>
dag after load is dealt with?SelectionDAG has 10 nodes:
  0x385c078: ch = EntryToken [ORD=9]

  0x3879480: i32 = FrameIndex<-1> [ORD=9]

  0x3878f80: i32 = undef [ORD=9]

    0x385c078: <multiple use>
    0x3879480: <multiple use>
    0x3878f80: <multiple use>
  0x3879380: i32,ch = load 0x385c078, 0x3879480, 0x3878f80<LD4[FixedStack-1]>

  0x3883330: i32 = FrameIndex<1> [ORD=9]

  0x3879180: i32 = Constant<0>

    0x3879880: <multiple use>
    0x3879780: i32 = GlobalAddress<i32* @redefine_in_placeholder> 0 [ORD=10]

    0x3878f80: <multiple use>
  0x3879680: i32,ch = load 0x3879880, 0x3879780, 0x3878f80<LD4[@redefine_in_placeholder]> [ORD=10]

    0x3879880: <multiple use>
    0x3883330: <multiple use>
    0x3878f80: <multiple use>
  0x3883230: i32,ch = load 0x3879880, 0x3883330, 0x3878f80<LD4[%2]>

    0x385c078: <multiple use>
    0x3879480: <multiple use>
    0x3883330: <multiple use>
    0x3878f80: <multiple use>
  0x3879880: ch = store 0x385c078, 0x3879480, 0x3883330, 0x3878f80<ST4[%2]> [ORD=9]


store visit is after?  store i32 %6, i32* %8, align 4
whats in dag after store?SelectionDAG has 12 nodes:
  0x385c078: ch = EntryToken [ORD=9]

  0x3879480: i32 = FrameIndex<-1> [ORD=9]

  0x3878f80: i32 = undef [ORD=9]

    0x385c078: <multiple use>
    0x3879480: <multiple use>
    0x3878f80: <multiple use>
  0x3879380: i32,ch = load 0x385c078, 0x3879480, 0x3878f80<LD4[FixedStack-1]>

  0x3883330: i32 = FrameIndex<1> [ORD=9]

  0x3879180: i32 = Constant<0>

    0x385c078: <multiple use>
    0x3879480: <multiple use>
    0x3883330: <multiple use>
    0x3878f80: <multiple use>
  0x3879880: ch = store 0x385c078, 0x3879480, 0x3883330, 0x3878f80<ST4[%2]> [ORD=9]

    0x3879880: <multiple use>
    0x3879780: i32 = GlobalAddress<i32* @redefine_in_placeholder> 0 [ORD=10]

    0x3878f80: <multiple use>
  0x3879680: i32,ch = load 0x3879880, 0x3879780, 0x3878f80<LD4[@redefine_in_placeholder]> [ORD=10]

    0x3879880: <multiple use>
    0x3883330: <multiple use>
    0x3878f80: <multiple use>
  0x3883230: i32,ch = load 0x3879880, 0x3883330, 0x3878f80<LD4[%2]> [ORD=11]

      0x3879680: <multiple use>
      0x3883230: <multiple use>
    0x3879a80: ch = TokenFactor 0x3879680:1, 0x3883230:1 [ORD=13]

    0x3879680: <multiple use>
    0x3883230: <multiple use>
    0x3878f80: <multiple use>
  0x3879980: ch = store 0x3879a80, 0x3879680, 0x3883230, 0x3878f80<ST4[%8]> [ORD=13]


visiting load instruction   %9 = load %struct.TP3_TAG** %2, align 4
with I type %struct.TP3_TAG*and sd value :0x3883330: i32 = FrameIndex<1>
new load?0x3879080: i32,ch = load 0x3879980, 0x3883330, 0x3878f80<LD4[%2]>
dag after load is dealt with?SelectionDAG has 13 nodes:
  0x385c078: ch = EntryToken [ORD=9]

  0x3879480: i32 = FrameIndex<-1> [ORD=9]

  0x3878f80: i32 = undef [ORD=9]

    0x385c078: <multiple use>
    0x3879480: <multiple use>
    0x3878f80: <multiple use>
  0x3879380: i32,ch = load 0x385c078, 0x3879480, 0x3878f80<LD4[FixedStack-1]>

  0x3883330: i32 = FrameIndex<1> [ORD=9]

  0x3879180: i32 = Constant<0>

    0x385c078: <multiple use>
    0x3879480: <multiple use>
    0x3883330: <multiple use>
    0x3878f80: <multiple use>
  0x3879880: ch = store 0x385c078, 0x3879480, 0x3883330, 0x3878f80<ST4[%2]> [ORD=9]

    0x3879880: <multiple use>
    0x3879780: i32 = GlobalAddress<i32* @redefine_in_placeholder> 0 [ORD=10]

    0x3878f80: <multiple use>
  0x3879680: i32,ch = load 0x3879880, 0x3879780, 0x3878f80<LD4[@redefine_in_placeholder]> [ORD=10]

    0x3879880: <multiple use>
    0x3883330: <multiple use>
    0x3878f80: <multiple use>
  0x3883230: i32,ch = load 0x3879880, 0x3883330, 0x3878f80<LD4[%2]> [ORD=11]

        0x3879680: <multiple use>
        0x3883230: <multiple use>
      0x3879a80: ch = TokenFactor 0x3879680:1, 0x3883230:1 [ORD=13]

      0x3879680: <multiple use>
      0x3883230: <multiple use>
      0x3878f80: <multiple use>
    0x3879980: ch = store 0x3879a80, 0x3879680, 0x3883230, 0x3878f80<ST4[%8]> [ORD=13]

    0x3883330: <multiple use>
    0x3878f80: <multiple use>
  0x3879080: i32,ch = load 0x3879980, 0x3883330, 0x3878f80<LD4[%2]>

      0x3879680: <multiple use>
      0x3883230: <multiple use>
    0x3879a80: ch = TokenFactor 0x3879680:1, 0x3883230:1 [ORD=13]

    0x3879680: <multiple use>
    0x3883230: <multiple use>
    0x3878f80: <multiple use>
  0x3879980: ch = store 0x3879a80, 0x3879680, 0x3883230, 0x3878f80<ST4[%8]> [ORD=13]


store visit is after?  store i32 0, i32* %10, align 4
I was here to add i32 0
whats in dag after store?SelectionDAG has 16 nodes:
  0x385c078: ch = EntryToken [ORD=9]

  0x3879480: i32 = FrameIndex<-1> [ORD=9]

  0x3878f80: i32 = undef [ORD=9]

    0x385c078: <multiple use>
    0x3879480: <multiple use>
    0x3878f80: <multiple use>
  0x3879380: i32,ch = load 0x385c078, 0x3879480, 0x3878f80<LD4[FixedStack-1]>

  0x3883330: i32 = FrameIndex<1> [ORD=9]

    0x385c078: <multiple use>
    0x3879480: <multiple use>
    0x3883330: <multiple use>
    0x3878f80: <multiple use>
  0x3879880: ch = store 0x385c078, 0x3879480, 0x3883330, 0x3878f80<ST4[%2]> [ORD=9]

    0x3879880: <multiple use>
    0x3879780: i32 = GlobalAddress<i32* @redefine_in_placeholder> 0 [ORD=10]

    0x3878f80: <multiple use>
  0x3879680: i32,ch = load 0x3879880, 0x3879780, 0x3878f80<LD4[@redefine_in_placeholder]> [ORD=10]

    0x3879880: <multiple use>
    0x3883330: <multiple use>
    0x3878f80: <multiple use>
  0x3883230: i32,ch = load 0x3879880, 0x3883330, 0x3878f80<LD4[%2]> [ORD=11]

        0x3879680: <multiple use>
        0x3883230: <multiple use>
      0x3879a80: ch = TokenFactor 0x3879680:1, 0x3883230:1 [ORD=13]

      0x3879680: <multiple use>
      0x3883230: <multiple use>
      0x3878f80: <multiple use>
    0x3879980: ch = store 0x3879a80, 0x3879680, 0x3883230, 0x3878f80<ST4[%8]> [ORD=13]

    0x3883330: <multiple use>
    0x3878f80: <multiple use>
  0x3879080: i32,ch = load 0x3879980, 0x3883330, 0x3878f80<LD4[%2]> [ORD=14]

    0x3879080: <multiple use>
    0x3879180: i32 = Constant<0> [ORD=16]

      0x3879080: <multiple use>
      0x3878c80: i32 = Constant<4> [ORD=15]

    0x3879580: i32 = add 0x3879080, 0x3878c80 [ORD=15]

    0x3878f80: <multiple use>
  0x3879280: ch = store 0x3879080:1, 0x3879180, 0x3879580, 0x3878f80<ST4[%10]> [ORD=16]


visiting load instruction   %11 = load %struct.TP3_TAG** %2, align 4
with I type %struct.TP3_TAG*and sd value :0x3883330: i32 = FrameIndex<1>
new load?0x3878e80: i32,ch = load 0x3879280, 0x3883330, 0x3878f80<LD4[%2]>
dag after load is dealt with?SelectionDAG has 17 nodes:
  0x385c078: ch = EntryToken [ORD=9]

  0x3879480: i32 = FrameIndex<-1> [ORD=9]

  0x3878f80: i32 = undef [ORD=9]

    0x385c078: <multiple use>
    0x3879480: <multiple use>
    0x3878f80: <multiple use>
  0x3879380: i32,ch = load 0x385c078, 0x3879480, 0x3878f80<LD4[FixedStack-1]>

  0x3883330: i32 = FrameIndex<1> [ORD=9]

    0x385c078: <multiple use>
    0x3879480: <multiple use>
    0x3883330: <multiple use>
    0x3878f80: <multiple use>
  0x3879880: ch = store 0x385c078, 0x3879480, 0x3883330, 0x3878f80<ST4[%2]> [ORD=9]

    0x3879880: <multiple use>
    0x3879780: i32 = GlobalAddress<i32* @redefine_in_placeholder> 0 [ORD=10]

    0x3878f80: <multiple use>
  0x3879680: i32,ch = load 0x3879880, 0x3879780, 0x3878f80<LD4[@redefine_in_placeholder]> [ORD=10]

    0x3879880: <multiple use>
    0x3883330: <multiple use>
    0x3878f80: <multiple use>
  0x3883230: i32,ch = load 0x3879880, 0x3883330, 0x3878f80<LD4[%2]> [ORD=11]

        0x3879680: <multiple use>
        0x3883230: <multiple use>
      0x3879a80: ch = TokenFactor 0x3879680:1, 0x3883230:1 [ORD=13]

      0x3879680: <multiple use>
      0x3883230: <multiple use>
      0x3878f80: <multiple use>
    0x3879980: ch = store 0x3879a80, 0x3879680, 0x3883230, 0x3878f80<ST4[%8]> [ORD=13]

    0x3883330: <multiple use>
    0x3878f80: <multiple use>
  0x3879080: i32,ch = load 0x3879980, 0x3883330, 0x3878f80<LD4[%2]> [ORD=14]

      0x3879080: <multiple use>
      0x3879180: i32 = Constant<0> [ORD=16]

        0x3879080: <multiple use>
        0x3878c80: i32 = Constant<4> [ORD=15]

      0x3879580: i32 = add 0x3879080, 0x3878c80 [ORD=15]

      0x3878f80: <multiple use>
    0x3879280: ch = store 0x3879080:1, 0x3879180, 0x3879580, 0x3878f80<ST4[%10]> [ORD=16]

    0x3883330: <multiple use>
    0x3878f80: <multiple use>
  0x3878e80: i32,ch = load 0x3879280, 0x3883330, 0x3878f80<LD4[%2]>

    0x3879080: <multiple use>
    0x3879180: i32 = Constant<0> [ORD=16]

      0x3879080: <multiple use>
      0x3878c80: i32 = Constant<4> [ORD=15]

    0x3879580: i32 = add 0x3879080, 0x3878c80 [ORD=15]

    0x3878f80: <multiple use>
  0x3879280: ch = store 0x3879080:1, 0x3879180, 0x3879580, 0x3878f80<ST4[%10]> [ORD=16]


store visit is after?  store i32 1, i32* %12, align 4
I was here to add i32 1
whats in dag after store?SelectionDAG has 21 nodes:
  0x385c078: ch = EntryToken [ORD=9]

  0x3879480: i32 = FrameIndex<-1> [ORD=9]

  0x3878f80: i32 = undef [ORD=9]

    0x385c078: <multiple use>
    0x3879480: <multiple use>
    0x3878f80: <multiple use>
  0x3879380: i32,ch = load 0x385c078, 0x3879480, 0x3878f80<LD4[FixedStack-1]>

  0x3883330: i32 = FrameIndex<1> [ORD=9]

    0x385c078: <multiple use>
    0x3879480: <multiple use>
    0x3883330: <multiple use>
    0x3878f80: <multiple use>
  0x3879880: ch = store 0x385c078, 0x3879480, 0x3883330, 0x3878f80<ST4[%2]> [ORD=9]

    0x3879880: <multiple use>
    0x3879780: i32 = GlobalAddress<i32* @redefine_in_placeholder> 0 [ORD=10]

    0x3878f80: <multiple use>
  0x3879680: i32,ch = load 0x3879880, 0x3879780, 0x3878f80<LD4[@redefine_in_placeholder]> [ORD=10]

    0x3879880: <multiple use>
    0x3883330: <multiple use>
    0x3878f80: <multiple use>
  0x3883230: i32,ch = load 0x3879880, 0x3883330, 0x3878f80<LD4[%2]> [ORD=11]

        0x3879680: <multiple use>
        0x3883230: <multiple use>
      0x3879a80: ch = TokenFactor 0x3879680:1, 0x3883230:1 [ORD=13]

      0x3879680: <multiple use>
      0x3883230: <multiple use>
      0x3878f80: <multiple use>
    0x3879980: ch = store 0x3879a80, 0x3879680, 0x3883230, 0x3878f80<ST4[%8]> [ORD=13]

    0x3883330: <multiple use>
    0x3878f80: <multiple use>
  0x3879080: i32,ch = load 0x3879980, 0x3883330, 0x3878f80<LD4[%2]> [ORD=14]

      0x3879080: <multiple use>
      0x3879180: i32 = Constant<0> [ORD=16]

        0x3879080: <multiple use>
        0x3878c80: i32 = Constant<4> [ORD=15]

      0x3879580: i32 = add 0x3879080, 0x3878c80 [ORD=15]

      0x3878f80: <multiple use>
    0x3879280: ch = store 0x3879080:1, 0x3879180, 0x3879580, 0x3878f80<ST4[%10]> [ORD=16]

    0x3883330: <multiple use>
    0x3878f80: <multiple use>
  0x3878e80: i32,ch = load 0x3879280, 0x3883330, 0x3878f80<LD4[%2]> [ORD=17]

    0x3878e80: <multiple use>
    0x3883530: i32 = Constant<1> [ORD=19]

      0x3878e80: <multiple use>
      0x3878d80: i32 = Constant<8> [ORD=18]

    0x3883430: i32 = add 0x3878e80, 0x3878d80 [ORD=18]

    0x3878f80: <multiple use>
  0x3883630: ch = store 0x3878e80:1, 0x3883530, 0x3883430, 0x3878f80<ST4[%12]> [ORD=19]


store visit is after?  store i32 0, i32* %3, align 4
I was here to add   %3 = alloca i32, align 4
whats in dag after store?SelectionDAG has 23 nodes:
  0x385c078: ch = EntryToken [ORD=9]

  0x3879480: i32 = FrameIndex<-1> [ORD=9]

  0x3878f80: i32 = undef [ORD=9]

    0x385c078: <multiple use>
    0x3879480: <multiple use>
    0x3878f80: <multiple use>
  0x3879380: i32,ch = load 0x385c078, 0x3879480, 0x3878f80<LD4[FixedStack-1]>

  0x3883330: i32 = FrameIndex<1> [ORD=9]

  0x3879180: i32 = Constant<0> [ORD=16]

    0x385c078: <multiple use>
    0x3879480: <multiple use>
    0x3883330: <multiple use>
    0x3878f80: <multiple use>
  0x3879880: ch = store 0x385c078, 0x3879480, 0x3883330, 0x3878f80<ST4[%2]> [ORD=9]

    0x3879880: <multiple use>
    0x3879780: i32 = GlobalAddress<i32* @redefine_in_placeholder> 0 [ORD=10]

    0x3878f80: <multiple use>
  0x3879680: i32,ch = load 0x3879880, 0x3879780, 0x3878f80<LD4[@redefine_in_placeholder]> [ORD=10]

    0x3879880: <multiple use>
    0x3883330: <multiple use>
    0x3878f80: <multiple use>
  0x3883230: i32,ch = load 0x3879880, 0x3883330, 0x3878f80<LD4[%2]> [ORD=11]

        0x3879680: <multiple use>
        0x3883230: <multiple use>
      0x3879a80: ch = TokenFactor 0x3879680:1, 0x3883230:1 [ORD=13]

      0x3879680: <multiple use>
      0x3883230: <multiple use>
      0x3878f80: <multiple use>
    0x3879980: ch = store 0x3879a80, 0x3879680, 0x3883230, 0x3878f80<ST4[%8]> [ORD=13]

    0x3883330: <multiple use>
    0x3878f80: <multiple use>
  0x3879080: i32,ch = load 0x3879980, 0x3883330, 0x3878f80<LD4[%2]> [ORD=14]

      0x3879080: <multiple use>
      0x3879180: <multiple use>
        0x3879080: <multiple use>
        0x3878c80: i32 = Constant<4> [ORD=15]

      0x3879580: i32 = add 0x3879080, 0x3878c80 [ORD=15]

      0x3878f80: <multiple use>
    0x3879280: ch = store 0x3879080:1, 0x3879180, 0x3879580, 0x3878f80<ST4[%10]> [ORD=16]

    0x3883330: <multiple use>
    0x3878f80: <multiple use>
  0x3878e80: i32,ch = load 0x3879280, 0x3883330, 0x3878f80<LD4[%2]> [ORD=17]

      0x3878e80: <multiple use>
      0x3883530: i32 = Constant<1> [ORD=19]

        0x3878e80: <multiple use>
        0x3878d80: i32 = Constant<8> [ORD=18]

      0x3883430: i32 = add 0x3878e80, 0x3878d80 [ORD=18]

      0x3878f80: <multiple use>
    0x3883630: ch = store 0x3878e80:1, 0x3883530, 0x3883430, 0x3878f80<ST4[%12]> [ORD=19]

    0x3879180: <multiple use>
    0x3883730: i32 = FrameIndex<2> [ORD=20]

    0x3878f80: <multiple use>
  0x3883830: ch = store 0x3883630, 0x3879180, 0x3883730, 0x3878f80<ST4[%3]> [ORD=20]


store visit is after?  store i32 0, i32* %5, align 4
I was here to add   %5 = alloca i32, align 4
whats in dag after store?SelectionDAG has 25 nodes:
  0x385c078: ch = EntryToken [ORD=9]

  0x3879480: i32 = FrameIndex<-1> [ORD=9]

  0x3878f80: i32 = undef [ORD=9]

    0x385c078: <multiple use>
    0x3879480: <multiple use>
    0x3878f80: <multiple use>
  0x3879380: i32,ch = load 0x385c078, 0x3879480, 0x3878f80<LD4[FixedStack-1]>

  0x3883330: i32 = FrameIndex<1> [ORD=9]

  0x3879180: i32 = Constant<0> [ORD=16]

    0x385c078: <multiple use>
    0x3879480: <multiple use>
    0x3883330: <multiple use>
    0x3878f80: <multiple use>
  0x3879880: ch = store 0x385c078, 0x3879480, 0x3883330, 0x3878f80<ST4[%2]> [ORD=9]

    0x3879880: <multiple use>
    0x3879780: i32 = GlobalAddress<i32* @redefine_in_placeholder> 0 [ORD=10]

    0x3878f80: <multiple use>
  0x3879680: i32,ch = load 0x3879880, 0x3879780, 0x3878f80<LD4[@redefine_in_placeholder]> [ORD=10]

    0x3879880: <multiple use>
    0x3883330: <multiple use>
    0x3878f80: <multiple use>
  0x3883230: i32,ch = load 0x3879880, 0x3883330, 0x3878f80<LD4[%2]> [ORD=11]

        0x3879680: <multiple use>
        0x3883230: <multiple use>
      0x3879a80: ch = TokenFactor 0x3879680:1, 0x3883230:1 [ORD=13]

      0x3879680: <multiple use>
      0x3883230: <multiple use>
      0x3878f80: <multiple use>
    0x3879980: ch = store 0x3879a80, 0x3879680, 0x3883230, 0x3878f80<ST4[%8]> [ORD=13]

    0x3883330: <multiple use>
    0x3878f80: <multiple use>
  0x3879080: i32,ch = load 0x3879980, 0x3883330, 0x3878f80<LD4[%2]> [ORD=14]

      0x3879080: <multiple use>
      0x3879180: <multiple use>
        0x3879080: <multiple use>
        0x3878c80: i32 = Constant<4> [ORD=15]

      0x3879580: i32 = add 0x3879080, 0x3878c80 [ORD=15]

      0x3878f80: <multiple use>
    0x3879280: ch = store 0x3879080:1, 0x3879180, 0x3879580, 0x3878f80<ST4[%10]> [ORD=16]

    0x3883330: <multiple use>
    0x3878f80: <multiple use>
  0x3878e80: i32,ch = load 0x3879280, 0x3883330, 0x3878f80<LD4[%2]> [ORD=17]

        0x3878e80: <multiple use>
        0x3883530: i32 = Constant<1> [ORD=19]

          0x3878e80: <multiple use>
          0x3878d80: i32 = Constant<8> [ORD=18]

        0x3883430: i32 = add 0x3878e80, 0x3878d80 [ORD=18]

        0x3878f80: <multiple use>
      0x3883630: ch = store 0x3878e80:1, 0x3883530, 0x3883430, 0x3878f80<ST4[%12]> [ORD=19]

      0x3879180: <multiple use>
      0x3883730: i32 = FrameIndex<2> [ORD=20]

      0x3878f80: <multiple use>
    0x3883830: ch = store 0x3883630, 0x3879180, 0x3883730, 0x3878f80<ST4[%3]> [ORD=20]

    0x3879180: <multiple use>
    0x3883930: i32 = FrameIndex<4> [ORD=21]

    0x3878f80: <multiple use>
  0x3883a30: ch = store 0x3883830, 0x3879180, 0x3883930, 0x3878f80<ST4[%5]> [ORD=21]


Initial selection DAG: BB#0 'trp_init3:trp_init3.entry'
SelectionDAG has 25 nodes:
  0x385c078: ch = EntryToken [ORD=9]

  0x3879480: i32 = FrameIndex<-1> [ORD=9]

  0x3878f80: i32 = undef [ORD=9]

    0x385c078: <multiple use>
    0x3879480: <multiple use>
    0x3878f80: <multiple use>
  0x3879380: i32,ch = load 0x385c078, 0x3879480, 0x3878f80<LD4[FixedStack-1]>

  0x3883330: i32 = FrameIndex<1> [ORD=9]

  0x3879180: i32 = Constant<0> [ORD=16]

    0x385c078: <multiple use>
    0x3879480: <multiple use>
    0x3883330: <multiple use>
    0x3878f80: <multiple use>
  0x3879880: ch = store 0x385c078, 0x3879480, 0x3883330, 0x3878f80<ST4[%2]> [ORD=9]

    0x3879880: <multiple use>
    0x3879780: i32 = GlobalAddress<i32* @redefine_in_placeholder> 0 [ORD=10]

    0x3878f80: <multiple use>
  0x3879680: i32,ch = load 0x3879880, 0x3879780, 0x3878f80<LD4[@redefine_in_placeholder]> [ORD=10]

    0x3879880: <multiple use>
    0x3883330: <multiple use>
    0x3878f80: <multiple use>
  0x3883230: i32,ch = load 0x3879880, 0x3883330, 0x3878f80<LD4[%2]> [ORD=11]

        0x3879680: <multiple use>
        0x3883230: <multiple use>
      0x3879a80: ch = TokenFactor 0x3879680:1, 0x3883230:1 [ORD=13]

      0x3879680: <multiple use>
      0x3883230: <multiple use>
      0x3878f80: <multiple use>
    0x3879980: ch = store 0x3879a80, 0x3879680, 0x3883230, 0x3878f80<ST4[%8]> [ORD=13]

    0x3883330: <multiple use>
    0x3878f80: <multiple use>
  0x3879080: i32,ch = load 0x3879980, 0x3883330, 0x3878f80<LD4[%2]> [ORD=14]

      0x3879080: <multiple use>
      0x3879180: <multiple use>
        0x3879080: <multiple use>
        0x3878c80: i32 = Constant<4> [ORD=15]

      0x3879580: i32 = add 0x3879080, 0x3878c80 [ORD=15]

      0x3878f80: <multiple use>
    0x3879280: ch = store 0x3879080:1, 0x3879180, 0x3879580, 0x3878f80<ST4[%10]> [ORD=16]

    0x3883330: <multiple use>
    0x3878f80: <multiple use>
  0x3878e80: i32,ch = load 0x3879280, 0x3883330, 0x3878f80<LD4[%2]> [ORD=17]

        0x3878e80: <multiple use>
        0x3883530: i32 = Constant<1> [ORD=19]

          0x3878e80: <multiple use>
          0x3878d80: i32 = Constant<8> [ORD=18]

        0x3883430: i32 = add 0x3878e80, 0x3878d80 [ORD=18]

        0x3878f80: <multiple use>
      0x3883630: ch = store 0x3878e80:1, 0x3883530, 0x3883430, 0x3878f80<ST4[%12]> [ORD=19]

      0x3879180: <multiple use>
      0x3883730: i32 = FrameIndex<2> [ORD=20]

      0x3878f80: <multiple use>
    0x3883830: ch = store 0x3883630, 0x3879180, 0x3883730, 0x3878f80<ST4[%3]> [ORD=20]

    0x3879180: <multiple use>
    0x3883930: i32 = FrameIndex<4> [ORD=21]

    0x3878f80: <multiple use>
  0x3883a30: ch = store 0x3883830, 0x3879180, 0x3883930, 0x3878f80<ST4[%5]> [ORD=21]



Replacing.1 0x3883230: i32,ch = load 0x3879880, 0x3883330, 0x3878f80<LD4[%2]> [ORD=11]

With: 0x3879480: i32 = FrameIndex<-1> [ORD=9]
 and 1 other values

Replacing.3 0x3879a80: ch = TokenFactor 0x3879680:1, 0x3879880 [ORD=13]

With: 0x3879680: i32,ch = load 0x3879880, 0x3879780, 0x3878f80<LD4[@redefine_in_placeholder]> [ORD=10]

Optimized lowered selection DAG: BB#0 'trp_init3:trp_init3.entry'
SelectionDAG has 22 nodes:
  0x3879480: i32 = FrameIndex<-1> [ORD=9]

  0x3878f80: i32 = undef [ORD=9]

  0x3883330: i32 = FrameIndex<1> [ORD=9]

  0x3879180: i32 = Constant<0> [ORD=16]

      0x385c078: ch = EntryToken [ORD=9]

      0x3879480: <multiple use>
      0x3883330: <multiple use>
      0x3878f80: <multiple use>
    0x3879880: ch = store 0x385c078, 0x3879480, 0x3883330, 0x3878f80<ST4[%2]> [ORD=9]

    0x3879780: i32 = GlobalAddress<i32* @redefine_in_placeholder> 0 [ORD=10]

    0x3878f80: <multiple use>
  0x3879680: i32,ch = load 0x3879880, 0x3879780, 0x3878f80<LD4[@redefine_in_placeholder]> [ORD=10]

      0x3879680: <multiple use>
      0x3879680: <multiple use>
      0x3879480: <multiple use>
      0x3878f80: <multiple use>
    0x3879980: ch = store 0x3879680:1, 0x3879680, 0x3879480, 0x3878f80<ST4[%8](align=16)> [ORD=13]

    0x3883330: <multiple use>
    0x3878f80: <multiple use>
  0x3879080: i32,ch = load 0x3879980, 0x3883330, 0x3878f80<LD4[%2]> [ORD=14]

      0x3879080: <multiple use>
      0x3879180: <multiple use>
        0x3879080: <multiple use>
        0x3878c80: i32 = Constant<4> [ORD=15]

      0x3879580: i32 = add 0x3879080, 0x3878c80 [ORD=15]

      0x3878f80: <multiple use>
    0x3879280: ch = store 0x3879080:1, 0x3879180, 0x3879580, 0x3878f80<ST4[%10]> [ORD=16]

    0x3883330: <multiple use>
    0x3878f80: <multiple use>
  0x3878e80: i32,ch = load 0x3879280, 0x3883330, 0x3878f80<LD4[%2]> [ORD=17]

        0x3878e80: <multiple use>
        0x3883530: i32 = Constant<1> [ORD=19]

          0x3878e80: <multiple use>
          0x3878d80: i32 = Constant<8> [ORD=18]

        0x3883430: i32 = add 0x3878e80, 0x3878d80 [ORD=18]

        0x3878f80: <multiple use>
      0x3883630: ch = store 0x3878e80:1, 0x3883530, 0x3883430, 0x3878f80<ST4[%12]> [ORD=19]

      0x3879180: <multiple use>
      0x3883730: i32 = FrameIndex<2> [ORD=20]

      0x3878f80: <multiple use>
    0x3883830: ch = store 0x3883630, 0x3879180, 0x3883730, 0x3878f80<ST4[%3]> [ORD=20]

    0x3879180: <multiple use>
    0x3883930: i32 = FrameIndex<4> [ORD=21]

    0x3878f80: <multiple use>
  0x3883a30: ch = store 0x3883830, 0x3879180, 0x3883930, 0x3878f80<ST4[%5]> [ORD=21]


Legally typed node: 0x3883930: i32 = FrameIndex<4> [ORD=21] [ID=0]

Legally typed node: 0x3883730: i32 = FrameIndex<2> [ORD=20] [ID=0]

Legally typed node: 0x3883530: i32 = Constant<1> [ORD=19] [ID=0]

Legally typed node: 0x3878d80: i32 = Constant<8> [ORD=18] [ID=0]

Legally typed node: 0x3878c80: i32 = Constant<4> [ORD=15] [ID=0]

Legally typed node: 0x3879780: i32 = GlobalAddress<i32* @redefine_in_placeholder> 0 [ORD=10] [ID=0]

Legally typed node: 0x3879180: i32 = Constant<0> [ORD=16] [ID=0]

Legally typed node: 0x3883330: i32 = FrameIndex<1> [ORD=9] [ID=0]

Legally typed node: 0x3878f80: i32 = undef [ORD=9] [ID=0]

Legally typed node: 0x3879480: i32 = FrameIndex<-1> [ORD=9] [ID=0]

Legally typed node: 0x385c078: ch = EntryToken [ORD=9] [ID=0]

Legally typed node: 0x3879880: ch = store 0x385c078, 0x3879480, 0x3883330, 0x3878f80<ST4[%2]> [ORD=9] [ID=0]

Legally typed node: 0x3879680: i32,ch = load 0x3879880, 0x3879780, 0x3878f80<LD4[@redefine_in_placeholder]> [ORD=10] [ID=0]

Legally typed node: 0x3879980: ch = store 0x3879680:1, 0x3879680, 0x3879480, 0x3878f80<ST4[%8](align=16)> [ORD=13] [ID=0]

Legally typed node: 0x3879080: i32,ch = load 0x3879980, 0x3883330, 0x3878f80<LD4[%2]> [ORD=14] [ID=0]

Legally typed node: 0x3879580: i32 = add 0x3879080, 0x3878c80 [ORD=15] [ID=0]

Legally typed node: 0x3879280: ch = store 0x3879080:1, 0x3879180, 0x3879580, 0x3878f80<ST4[%10]> [ORD=16] [ID=0]

Legally typed node: 0x3878e80: i32,ch = load 0x3879280, 0x3883330, 0x3878f80<LD4[%2]> [ORD=17] [ID=0]

Legally typed node: 0x3883430: i32 = add 0x3878e80, 0x3878d80 [ORD=18] [ID=0]

Legally typed node: 0x3883630: ch = store 0x3878e80:1, 0x3883530, 0x3883430, 0x3878f80<ST4[%12]> [ORD=19] [ID=0]

Legally typed node: 0x3883830: ch = store 0x3883630, 0x3879180, 0x3883730, 0x3878f80<ST4[%3]> [ORD=20] [ID=0]

Legally typed node: 0x3883a30: ch = store 0x3883830, 0x3879180, 0x3883930, 0x3878f80<ST4[%5]> [ORD=21] [ID=0]

Legally typed node: 0x7fff1ed032b0: ch = handlenode 0x3883a30 [ID=0]

Type-legalized selection DAG: BB#0 'trp_init3:trp_init3.entry'
SelectionDAG has 22 nodes:
  0x3879480: i32 = FrameIndex<-1> [ORD=9] [ID=-3]

  0x3878f80: i32 = undef [ORD=9] [ID=-3]

  0x3883330: i32 = FrameIndex<1> [ORD=9] [ID=-3]

  0x3879180: i32 = Constant<0> [ORD=16] [ID=-3]

      0x385c078: ch = EntryToken [ORD=9] [ID=-3]

      0x3879480: <multiple use>
      0x3883330: <multiple use>
      0x3878f80: <multiple use>
    0x3879880: ch = store 0x385c078, 0x3879480, 0x3883330, 0x3878f80<ST4[%2]> [ORD=9] [ID=-3]

    0x3879780: i32 = GlobalAddress<i32* @redefine_in_placeholder> 0 [ORD=10] [ID=-3]

    0x3878f80: <multiple use>
  0x3879680: i32,ch = load 0x3879880, 0x3879780, 0x3878f80<LD4[@redefine_in_placeholder]> [ORD=10] [ID=-3]

      0x3879680: <multiple use>
      0x3879680: <multiple use>
      0x3879480: <multiple use>
      0x3878f80: <multiple use>
    0x3879980: ch = store 0x3879680:1, 0x3879680, 0x3879480, 0x3878f80<ST4[%8](align=16)> [ORD=13] [ID=-3]

    0x3883330: <multiple use>
    0x3878f80: <multiple use>
  0x3879080: i32,ch = load 0x3879980, 0x3883330, 0x3878f80<LD4[%2]> [ORD=14] [ID=-3]

      0x3879080: <multiple use>
      0x3879180: <multiple use>
        0x3879080: <multiple use>
        0x3878c80: i32 = Constant<4> [ORD=15] [ID=-3]

      0x3879580: i32 = add 0x3879080, 0x3878c80 [ORD=15] [ID=-3]

      0x3878f80: <multiple use>
    0x3879280: ch = store 0x3879080:1, 0x3879180, 0x3879580, 0x3878f80<ST4[%10]> [ORD=16] [ID=-3]

    0x3883330: <multiple use>
    0x3878f80: <multiple use>
  0x3878e80: i32,ch = load 0x3879280, 0x3883330, 0x3878f80<LD4[%2]> [ORD=17] [ID=-3]

        0x3878e80: <multiple use>
        0x3883530: i32 = Constant<1> [ORD=19] [ID=-3]

          0x3878e80: <multiple use>
          0x3878d80: i32 = Constant<8> [ORD=18] [ID=-3]

        0x3883430: i32 = add 0x3878e80, 0x3878d80 [ORD=18] [ID=-3]

        0x3878f80: <multiple use>
      0x3883630: ch = store 0x3878e80:1, 0x3883530, 0x3883430, 0x3878f80<ST4[%12]> [ORD=19] [ID=-3]

      0x3879180: <multiple use>
      0x3883730: i32 = FrameIndex<2> [ORD=20] [ID=-3]

      0x3878f80: <multiple use>
    0x3883830: ch = store 0x3883630, 0x3879180, 0x3883730, 0x3878f80<ST4[%3]> [ORD=20] [ID=-3]

    0x3879180: <multiple use>
    0x3883930: i32 = FrameIndex<4> [ORD=21] [ID=-3]

    0x3878f80: <multiple use>
  0x3883a30: ch = store 0x3883830, 0x3879180, 0x3883930, 0x3878f80<ST4[%5]> [ORD=21] [ID=-3]


Legalized selection DAG: BB#0 'trp_init3:trp_init3.entry'
SelectionDAG has 26 nodes:
  0x3879480: i32 = FrameIndex<-1> [ORD=9] [ID=1]

  0x3878f80: i32 = undef [ORD=9] [ID=2]

  0x3883330: i32 = FrameIndex<1> [ORD=9] [ID=3]

  0x3879180: i32 = Constant<0> [ORD=16] [ID=4]

      0x385c078: ch = EntryToken [ORD=9] [ID=0]

      0x3879480: <multiple use>
      0x3883330: <multiple use>
      0x3878f80: <multiple use>
    0x3879880: ch = store 0x385c078, 0x3879480, 0x3883330, 0x3878f80<ST4[%2]> [ORD=9] [ID=11]

        0x3879380: i32 = TargetGlobalAddress<i32* @redefine_in_placeholder> 0 [TF=2]

      0x3883230: i32 = REDEFINEISD::Hi 0x3879380

        0x3879a80: i32 = TargetGlobalAddress<i32* @redefine_in_placeholder> 0 [TF=3]

      0x3883b30: i32 = REDEFINEISD::Lo 0x3879a80

    0x3883c30: i32 = add 0x3883230, 0x3883b30

    0x3878f80: <multiple use>
  0x3879680: i32,ch = load 0x3879880, 0x3883c30, 0x3878f80<LD4[@redefine_in_placeholder]> [ORD=10] [ID=12]

      0x3879680: <multiple use>
      0x3879680: <multiple use>
      0x3879480: <multiple use>
      0x3878f80: <multiple use>
    0x3879980: ch = store 0x3879680:1, 0x3879680, 0x3879480, 0x3878f80<ST4[%8](align=16)> [ORD=13] [ID=13]

    0x3883330: <multiple use>
    0x3878f80: <multiple use>
  0x3879080: i32,ch = load 0x3879980, 0x3883330, 0x3878f80<LD4[%2]> [ORD=14] [ID=14]

      0x3879080: <multiple use>
      0x3879180: <multiple use>
        0x3879080: <multiple use>
        0x3878c80: i32 = Constant<4> [ORD=15] [ID=6]

      0x3879580: i32 = add 0x3879080, 0x3878c80 [ORD=15] [ID=15]

      0x3878f80: <multiple use>
    0x3879280: ch = store 0x3879080:1, 0x3879180, 0x3879580, 0x3878f80<ST4[%10]> [ORD=16] [ID=16]

    0x3883330: <multiple use>
    0x3878f80: <multiple use>
  0x3878e80: i32,ch = load 0x3879280, 0x3883330, 0x3878f80<LD4[%2]> [ORD=17] [ID=17]

        0x3878e80: <multiple use>
        0x3883530: i32 = Constant<1> [ORD=19] [ID=8]

          0x3878e80: <multiple use>
          0x3878d80: i32 = Constant<8> [ORD=18] [ID=7]

        0x3883430: i32 = add 0x3878e80, 0x3878d80 [ORD=18] [ID=18]

        0x3878f80: <multiple use>
      0x3883630: ch = store 0x3878e80:1, 0x3883530, 0x3883430, 0x3878f80<ST4[%12]> [ORD=19] [ID=19]

      0x3879180: <multiple use>
      0x3883730: i32 = FrameIndex<2> [ORD=20] [ID=9]

      0x3878f80: <multiple use>
    0x3883830: ch = store 0x3883630, 0x3879180, 0x3883730, 0x3878f80<ST4[%3]> [ORD=20] [ID=20]

    0x3879180: <multiple use>
    0x3883930: i32 = FrameIndex<4> [ORD=21] [ID=10]

    0x3878f80: <multiple use>
  0x3883a30: ch = store 0x3883830, 0x3879180, 0x3883930, 0x3878f80<ST4[%5]> [ORD=21] [ID=21]


Optimized legalized selection DAG: BB#0 'trp_init3:trp_init3.entry'
SelectionDAG has 26 nodes:
  0x3879480: i32 = FrameIndex<-1> [ORD=9] [ID=1]

  0x3878f80: i32 = undef [ORD=9] [ID=2]

  0x3883330: i32 = FrameIndex<1> [ORD=9] [ID=3]

  0x3879180: i32 = Constant<0> [ORD=16] [ID=4]

      0x385c078: ch = EntryToken [ORD=9] [ID=0]

      0x3879480: <multiple use>
      0x3883330: <multiple use>
      0x3878f80: <multiple use>
    0x3879880: ch = store 0x385c078, 0x3879480, 0x3883330, 0x3878f80<ST4[%2]> [ORD=9] [ID=11]

        0x3879380: i32 = TargetGlobalAddress<i32* @redefine_in_placeholder> 0 [TF=2]

      0x3883230: i32 = REDEFINEISD::Hi 0x3879380

        0x3879a80: i32 = TargetGlobalAddress<i32* @redefine_in_placeholder> 0 [TF=3]

      0x3883b30: i32 = REDEFINEISD::Lo 0x3879a80

    0x3883c30: i32 = add 0x3883230, 0x3883b30

    0x3878f80: <multiple use>
  0x3879680: i32,ch = load 0x3879880, 0x3883c30, 0x3878f80<LD4[@redefine_in_placeholder]> [ORD=10] [ID=12]

      0x3879680: <multiple use>
      0x3879680: <multiple use>
      0x3879480: <multiple use>
      0x3878f80: <multiple use>
    0x3879980: ch = store 0x3879680:1, 0x3879680, 0x3879480, 0x3878f80<ST4[%8](align=16)> [ORD=13] [ID=13]

    0x3883330: <multiple use>
    0x3878f80: <multiple use>
  0x3879080: i32,ch = load 0x3879980, 0x3883330, 0x3878f80<LD4[%2]> [ORD=14] [ID=14]

      0x3879080: <multiple use>
      0x3879180: <multiple use>
        0x3879080: <multiple use>
        0x3878c80: i32 = Constant<4> [ORD=15] [ID=6]

      0x3879580: i32 = add 0x3879080, 0x3878c80 [ORD=15] [ID=15]

      0x3878f80: <multiple use>
    0x3879280: ch = store 0x3879080:1, 0x3879180, 0x3879580, 0x3878f80<ST4[%10]> [ORD=16] [ID=16]

    0x3883330: <multiple use>
    0x3878f80: <multiple use>
  0x3878e80: i32,ch = load 0x3879280, 0x3883330, 0x3878f80<LD4[%2]> [ORD=17] [ID=17]

        0x3878e80: <multiple use>
        0x3883530: i32 = Constant<1> [ORD=19] [ID=8]

          0x3878e80: <multiple use>
          0x3878d80: i32 = Constant<8> [ORD=18] [ID=7]

        0x3883430: i32 = add 0x3878e80, 0x3878d80 [ORD=18] [ID=18]

        0x3878f80: <multiple use>
      0x3883630: ch = store 0x3878e80:1, 0x3883530, 0x3883430, 0x3878f80<ST4[%12]> [ORD=19] [ID=19]

      0x3879180: <multiple use>
      0x3883730: i32 = FrameIndex<2> [ORD=20] [ID=9]

      0x3878f80: <multiple use>
    0x3883830: ch = store 0x3883630, 0x3879180, 0x3883730, 0x3878f80<ST4[%3]> [ORD=20] [ID=20]

    0x3879180: <multiple use>
    0x3883930: i32 = FrameIndex<4> [ORD=21] [ID=10]

    0x3878f80: <multiple use>
  0x3883a30: ch = store 0x3883830, 0x3879180, 0x3883930, 0x3878f80<ST4[%5]> [ORD=21] [ID=21]


===== Instruction selection begins: BB#0 'trp_init3.entry'
ISEL: Starting pattern match on root node: 0x3883a30: ch = store 0x3883830, 0x3879180, 0x3883930, 0x3878f80<ST4[%5]> [ORD=21] [ID=25]

  Initial Opcode index to 178
  Morphed node: 0x3883a30: ch = SW 0x3879180, 0x3883930, 0x3879780, 0x3883830<Mem:ST4[%5]> [ORD=21]

ISEL: Match complete!
=> 0x3883a30: ch = SW 0x3879180, 0x3883930, 0x3879780, 0x3883830<Mem:ST4[%5]> [ORD=21]

ISEL: Starting pattern match on root node: 0x3883830: ch = store 0x3883630, 0x3879180, 0x3883730, 0x3878f80<ST4[%3]> [ORD=20] [ID=24]

  Initial Opcode index to 178
  Morphed node: 0x3883830: ch = SW 0x3879180, 0x3883730, 0x3879780, 0x3883630<Mem:ST4[%3]> [ORD=20]

ISEL: Match complete!
=> 0x3883830: ch = SW 0x3879180, 0x3883730, 0x3879780, 0x3883630<Mem:ST4[%3]> [ORD=20]

ISEL: Starting pattern match on root node: 0x3883630: ch = store 0x3878e80:1, 0x3883530, 0x3883430, 0x3878f80<ST4[%12]> [ORD=19] [ID=23]

  Initial Opcode index to 178
  Morphed node: 0x3883630: ch = SW 0x3883530, 0x3878e80, 0x3883d30, 0x3878e80:1<Mem:ST4[%12]> [ORD=19]

ISEL: Match complete!
=> 0x3883630: ch = SW 0x3883530, 0x3878e80, 0x3883d30, 0x3878e80:1<Mem:ST4[%12]> [ORD=19]

ISEL: Starting pattern match on root node: 0x3878e80: i32,ch = load 0x3879280, 0x3883330, 0x3878f80<LD4[%2]> [ORD=17] [ID=21]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x3878e80: i32,ch = LW 0x3883330, 0x3879780, 0x3879280<Mem:LD4[%2]> [ORD=17]

ISEL: Match complete!
=> 0x3878e80: i32,ch = LW 0x3883330, 0x3879780, 0x3879280<Mem:LD4[%2]> [ORD=17]

ISEL: Starting pattern match on root node: 0x3879280: ch = store 0x3879080:1, 0x3879180, 0x3879580, 0x3878f80<ST4[%10]> [ORD=16] [ID=20]

  Initial Opcode index to 178
  Morphed node: 0x3879280: ch = SW 0x3879180, 0x3879080, 0x3878d80, 0x3879080:1<Mem:ST4[%10]> [ORD=16]

ISEL: Match complete!
=> 0x3879280: ch = SW 0x3879180, 0x3879080, 0x3878d80, 0x3879080:1<Mem:ST4[%10]> [ORD=16]

ISEL: Starting pattern match on root node: 0x3879080: i32,ch = load 0x3879980, 0x3883330, 0x3878f80<LD4[%2]> [ORD=14] [ID=18]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x3879080: i32,ch = LW 0x3883330, 0x3879780, 0x3879980<Mem:LD4[%2]> [ORD=14]

ISEL: Match complete!
=> 0x3879080: i32,ch = LW 0x3883330, 0x3879780, 0x3879980<Mem:LD4[%2]> [ORD=14]

ISEL: Starting pattern match on root node: 0x3879980: ch = store 0x3879680:1, 0x3879680, 0x3879480, 0x3878f80<ST4[%8](align=16)> [ORD=13] [ID=17]

  Initial Opcode index to 178
  Morphed node: 0x3879980: ch = SW 0x3879680, 0x3879480, 0x3879780, 0x3879680:1<Mem:ST4[%8](align=16)> [ORD=13]

ISEL: Match complete!
=> 0x3879980: ch = SW 0x3879680, 0x3879480, 0x3879780, 0x3879680:1<Mem:ST4[%8](align=16)> [ORD=13]

ISEL: Starting pattern match on root node: 0x3879680: i32,ch = load 0x3879880, 0x3883c30, 0x3878f80<LD4[@redefine_in_placeholder]> [ORD=10] [ID=16]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x3879680: i32,ch = LW 0x3883c30, 0x3879780, 0x3879880<Mem:LD4[@redefine_in_placeholder]> [ORD=10]

ISEL: Match complete!
=> 0x3879680: i32,ch = LW 0x3883c30, 0x3879780, 0x3879880<Mem:LD4[@redefine_in_placeholder]> [ORD=10]

ISEL: Starting pattern match on root node: 0x3883c30: i32 = add 0x3883230, 0x3883b30 [ID=15]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x3883c30: i32 = ADD 0x3883b30, 0x3883230

ISEL: Match complete!
=> 0x3883c30: i32 = ADD 0x3883b30, 0x3883230

ISEL: Starting pattern match on root node: 0x3883b30: i32 = REDEFINEISD::Lo 0x3879a80 [ID=14]

  Initial Opcode index to 1204
  Morphed node: 0x3883b30: i32 = ADDI 0x3878c80, 0x3879a80

ISEL: Match complete!
=> 0x3883b30: i32 = ADDI 0x3878c80, 0x3879a80

ISEL: Starting pattern match on root node: 0x3883230: i32 = REDEFINEISD::Hi 0x3879380 [ID=13]

  Initial Opcode index to 1186
  Morphed node: 0x3883230: i32 = LUI 0x3879380

ISEL: Match complete!
=> 0x3883230: i32 = LUI 0x3879380

ISEL: Starting pattern match on root node: 0x3879880: ch = store 0x385c078, 0x3879480, 0x3883330, 0x3878f80<ST4[%2]> [ORD=9] [ID=12]

  Initial Opcode index to 178
  Morphed node: 0x3879880: ch = SW 0x3879480, 0x3883330, 0x3879780, 0x385c078<Mem:ST4[%2]> [ORD=9]

ISEL: Match complete!
=> 0x3879880: ch = SW 0x3879480, 0x3883330, 0x3879780, 0x385c078<Mem:ST4[%2]> [ORD=9]

=> 0x3879a80: i32 = TargetGlobalAddress<i32* @redefine_in_placeholder> 0 [TF=3]

=> 0x3879380: i32 = TargetGlobalAddress<i32* @redefine_in_placeholder> 0 [TF=2]

ISEL: Starting pattern match on root node: 0x3883530: i32 = Constant<1> [ORD=19] [ID=7]

  Initial Opcode index to 1226
comparing 0 and 1 and returning value:0
  Skipped scope entry (due to false predicate) at index 1228, continuing at 1236
  Morphed node: 0x3883530: i32 = ADDI 0x3878c80, 0x3883e30 [ORD=19]

ISEL: Match complete!
=> 0x3883530: i32 = ADDI 0x3878c80, 0x3883e30 [ORD=19]

ISEL: Starting pattern match on root node: 0x3879180: i32 = Constant<0> [ORD=16] [ID=4]

  Initial Opcode index to 1226
comparing 0 and 0 and returning value:1
ISEL: Match complete!
=> 0x3879180: i32 = Constant<0> [ORD=16] [ID=4]

=> 0x385c078: ch = EntryToken [ORD=9]

===== Instruction selection ends:
Selected selection DAG: BB#0 'trp_init3:trp_init3.entry'
SelectionDAG has 30 nodes:
        0x3878c80: <multiple use>
        0x3879a80: i32 = TargetGlobalAddress<i32* @redefine_in_placeholder> 0 [TF=3]

      0x3883b30: i32 = ADDI 0x3878c80, 0x3879a80

        0x3879380: i32 = TargetGlobalAddress<i32* @redefine_in_placeholder> 0 [TF=2]

      0x3883230: i32 = LUI 0x3879380

    0x3883c30: i32 = ADD 0x3883b30, 0x3883230

    0x3879780: <multiple use>
      0x3884030: <multiple use>
      0x3883f30: <multiple use>
      0x3879780: <multiple use>
      0x385c078: ch = EntryToken [ORD=9]

    0x3879880: ch = SW 0x3884030, 0x3883f30, 0x3879780, 0x385c078<Mem:ST4[%2]> [ORD=9]

  0x3879680: i32,ch = LW 0x3883c30, 0x3879780, 0x3879880<Mem:LD4[@redefine_in_placeholder]> [ORD=10]

    0x3883f30: <multiple use>
    0x3879780: <multiple use>
      0x3879680: <multiple use>
      0x3884030: <multiple use>
      0x3879780: <multiple use>
      0x3879680: <multiple use>
    0x3879980: ch = SW 0x3879680, 0x3884030, 0x3879780, 0x3879680:1<Mem:ST4[%8](align=16)> [ORD=13]

  0x3879080: i32,ch = LW 0x3883f30, 0x3879780, 0x3879980<Mem:LD4[%2]> [ORD=14]

    0x3883f30: <multiple use>
    0x3879780: <multiple use>
      0x3878c80: <multiple use>
      0x3879080: <multiple use>
      0x3878d80: i32 = TargetConstant<4>

      0x3879080: <multiple use>
    0x3879280: ch = SW 0x3878c80, 0x3879080, 0x3878d80, 0x3879080:1<Mem:ST4[%10]> [ORD=16]

  0x3878e80: i32,ch = LW 0x3883f30, 0x3879780, 0x3879280<Mem:LD4[%2]> [ORD=17]

  0x3879780: i32 = TargetConstant<0>

  0x3878c80: i32 = Register %zero

  0x3878f80: i32 = Register %t5

    0x3878f80: <multiple use>
    0x3879180: i32 = TargetFrameIndex<1>

  0x3883f30: i32 = ADDI 0x3878f80, 0x3879180 [ORD=9]

    0x3878f80: <multiple use>
    0x3883330: i32 = TargetFrameIndex<-1>

  0x3884030: i32 = ADDI 0x3878f80, 0x3883330 [ORD=9]

    0x3878c80: <multiple use>
      0x3878f80: <multiple use>
      0x3879580: i32 = TargetFrameIndex<4>

    0x3883930: i32 = ADDI 0x3878f80, 0x3879580 [ORD=21]

    0x3879780: <multiple use>
      0x3878c80: <multiple use>
        0x3878f80: <multiple use>
        0x3883430: i32 = TargetFrameIndex<2>

      0x3883730: i32 = ADDI 0x3878f80, 0x3883430 [ORD=20]

      0x3879780: <multiple use>
          0x3878c80: <multiple use>
          0x3883e30: i32 = TargetConstant<1>

        0x3883530: i32 = ADDI 0x3878c80, 0x3883e30 [ORD=19]

        0x3878e80: <multiple use>
        0x3883d30: i32 = TargetConstant<8>

        0x3878e80: <multiple use>
      0x3883630: ch = SW 0x3883530, 0x3878e80, 0x3883d30, 0x3878e80:1<Mem:ST4[%12]> [ORD=19]

    0x3883830: ch = SW 0x3878c80, 0x3883730, 0x3879780, 0x3883630<Mem:ST4[%3]> [ORD=20]

  0x3883a30: ch = SW 0x3878c80, 0x3883930, 0x3879780, 0x3883830<Mem:ST4[%5]> [ORD=21]


********** List Scheduling BB#0 'trp_init3.entry' **********
SU(0): 0x3883a30: ch = SW 0x3878c80, 0x3883930, 0x3879780, 0x3883830<Mem:ST4[%5]> [ORD=21] [ID=0]

  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
   val SU(16): Latency=1
   ch  SU(1): Latency=1

SU(1): 0x3883830: ch = SW 0x3878c80, 0x3883730, 0x3879780, 0x3883630<Mem:ST4[%3]> [ORD=20] [ID=1]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
   val SU(15): Latency=1
   ch  SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x3883630: ch = SW 0x3883530, 0x3878e80, 0x3883d30, 0x3878e80:1<Mem:ST4[%12]> [ORD=19] [ID=2]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 2
  Predecessors:
   val SU(14): Latency=1
   val SU(3): Latency=1
   ch  SU(3): Latency=1
  Successors:
   ch  SU(1): Latency=1

SU(3): 0x3878e80: i32,ch = LW 0x3883f30, 0x3879780, 0x3879280<Mem:LD4[%2]> [ORD=17] [ID=3]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 6
  Height             : 3
  Predecessors:
   val SU(13): Latency=1
   ch  SU(4): Latency=1
  Successors:
   val SU(2): Latency=1
   ch  SU(2): Latency=1

SU(4): 0x3879280: ch = SW 0x3878c80, 0x3879080, 0x3878d80, 0x3879080:1<Mem:ST4[%10]> [ORD=16] [ID=4]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 4
  Predecessors:
   val SU(5): Latency=1
   ch  SU(5): Latency=1
  Successors:
   ch  SU(3): Latency=1

SU(5): 0x3879080: i32,ch = LW 0x3883f30, 0x3879780, 0x3879980<Mem:LD4[%2]> [ORD=14] [ID=5]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
   val SU(13): Latency=1
   ch  SU(6): Latency=1
  Successors:
   val SU(4): Latency=1
   ch  SU(4): Latency=1

SU(6): 0x3879980: ch = SW 0x3879680, 0x3884030, 0x3879780, 0x3879680:1<Mem:ST4[%8](align=16)> [ORD=13] [ID=6]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 6
  Predecessors:
   val SU(8): Latency=1
   val SU(7): Latency=1
   ch  SU(8): Latency=1
  Successors:
   ch  SU(5): Latency=1

SU(7): 0x3884030: i32 = ADDI 0x3878f80, 0x3883330 [ORD=9] [ID=7]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 9
  Successors:
   val SU(6): Latency=1
   val SU(9): Latency=1

SU(8): 0x3879680: i32,ch = LW 0x3883c30, 0x3879780, 0x3879880<Mem:LD4[@redefine_in_placeholder]> [ORD=10] [ID=8]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 7
  Predecessors:
   val SU(10): Latency=1
   ch  SU(9): Latency=1
  Successors:
   val SU(6): Latency=1
   ch  SU(6): Latency=1

SU(9): 0x3879880: ch = SW 0x3884030, 0x3883f30, 0x3879780, 0x385c078<Mem:ST4[%2]> [ORD=9] [ID=9]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 8
  Predecessors:
   val SU(7): Latency=1
   val SU(13): Latency=1
  Successors:
   ch  SU(8): Latency=1

SU(10): 0x3883c30: i32 = ADD 0x3883b30, 0x3883230 [ID=10]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 8
  Predecessors:
   val SU(12): Latency=1
   val SU(11): Latency=1
  Successors:
   val SU(8): Latency=1

SU(11): 0x3883230: i32 = LUI 0x3879380 [ID=11]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 9
  Successors:
   val SU(10): Latency=1

SU(12): 0x3883b30: i32 = ADDI 0x3878c80, 0x3879a80 [ID=12]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 9
  Successors:
   val SU(10): Latency=1

SU(13): 0x3883f30: i32 = ADDI 0x3878f80, 0x3879180 [ORD=9] [ID=13]

  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 9
  Successors:
   val SU(3): Latency=1
   val SU(5): Latency=1
   val SU(9): Latency=1

SU(14): 0x3883530: i32 = ADDI 0x3878c80, 0x3883e30 [ORD=19] [ID=14]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(2): Latency=1

SU(15): 0x3883730: i32 = ADDI 0x3878f80, 0x3883430 [ORD=20] [ID=15]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
   val SU(1): Latency=1

SU(16): 0x3883930: i32 = ADDI 0x3878f80, 0x3879580 [ORD=21] [ID=16]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
   val SU(0): Latency=1


Examining Available:
Height 0: SU(0): 0x3883a30: ch = SW 0x3878c80, 0x3883930, 0x3879780, 0x3883830<Mem:ST4[%5]> [ORD=21] [ID=0]


*** Scheduling [0]: SU(0): 0x3883a30: ch = SW 0x3878c80, 0x3883930, 0x3879780, 0x3883830<Mem:ST4[%5]> [ORD=21] [ID=0]


Examining Available:
Height 1: SU(16): 0x3883930: i32 = ADDI 0x3878f80, 0x3879580 [ORD=21] [ID=16]

Height 1: SU(1): 0x3883830: ch = SW 0x3878c80, 0x3883730, 0x3879780, 0x3883630<Mem:ST4[%3]> [ORD=20] [ID=1]


*** Scheduling [1]: SU(16): 0x3883930: i32 = ADDI 0x3878f80, 0x3879580 [ORD=21] [ID=16]


Examining Available:
Height 1: SU(1): 0x3883830: ch = SW 0x3878c80, 0x3883730, 0x3879780, 0x3883630<Mem:ST4[%3]> [ORD=20] [ID=1]


*** Scheduling [2]: SU(1): 0x3883830: ch = SW 0x3878c80, 0x3883730, 0x3879780, 0x3883630<Mem:ST4[%3]> [ORD=20] [ID=1]


Examining Available:
Height 3: SU(15): 0x3883730: i32 = ADDI 0x3878f80, 0x3883430 [ORD=20] [ID=15]

Height 3: SU(2): 0x3883630: ch = SW 0x3883530, 0x3878e80, 0x3883d30, 0x3878e80:1<Mem:ST4[%12]> [ORD=19] [ID=2]


*** Scheduling [3]: SU(15): 0x3883730: i32 = ADDI 0x3878f80, 0x3883430 [ORD=20] [ID=15]


Examining Available:
Height 3: SU(2): 0x3883630: ch = SW 0x3883530, 0x3878e80, 0x3883d30, 0x3878e80:1<Mem:ST4[%12]> [ORD=19] [ID=2]


*** Scheduling [4]: SU(2): 0x3883630: ch = SW 0x3883530, 0x3878e80, 0x3883d30, 0x3878e80:1<Mem:ST4[%12]> [ORD=19] [ID=2]


Examining Available:
Height 5: SU(14): 0x3883530: i32 = ADDI 0x3878c80, 0x3883e30 [ORD=19] [ID=14]

Height 5: SU(3): 0x3878e80: i32,ch = LW 0x3883f30, 0x3879780, 0x3879280<Mem:LD4[%2]> [ORD=17] [ID=3]


*** Scheduling [5]: SU(14): 0x3883530: i32 = ADDI 0x3878c80, 0x3883e30 [ORD=19] [ID=14]


Examining Available:
Height 5: SU(3): 0x3878e80: i32,ch = LW 0x3883f30, 0x3879780, 0x3879280<Mem:LD4[%2]> [ORD=17] [ID=3]


*** Scheduling [6]: SU(3): 0x3878e80: i32,ch = LW 0x3883f30, 0x3879780, 0x3879280<Mem:LD4[%2]> [ORD=17] [ID=3]


Examining Available:
Height 7: SU(4): 0x3879280: ch = SW 0x3878c80, 0x3879080, 0x3878d80, 0x3879080:1<Mem:ST4[%10]> [ORD=16] [ID=4]


*** Scheduling [7]: SU(4): 0x3879280: ch = SW 0x3878c80, 0x3879080, 0x3878d80, 0x3879080:1<Mem:ST4[%10]> [ORD=16] [ID=4]


Examining Available:
Height 8: SU(5): 0x3879080: i32,ch = LW 0x3883f30, 0x3879780, 0x3879980<Mem:LD4[%2]> [ORD=14] [ID=5]


*** Scheduling [8]: SU(5): 0x3879080: i32,ch = LW 0x3883f30, 0x3879780, 0x3879980<Mem:LD4[%2]> [ORD=14] [ID=5]


Examining Available:
Height 9: SU(6): 0x3879980: ch = SW 0x3879680, 0x3884030, 0x3879780, 0x3879680:1<Mem:ST4[%8](align=16)> [ORD=13] [ID=6]


*** Scheduling [9]: SU(6): 0x3879980: ch = SW 0x3879680, 0x3884030, 0x3879780, 0x3879680:1<Mem:ST4[%8](align=16)> [ORD=13] [ID=6]


Examining Available:
Height 10: SU(8): 0x3879680: i32,ch = LW 0x3883c30, 0x3879780, 0x3879880<Mem:LD4[@redefine_in_placeholder]> [ORD=10] [ID=8]


*** Scheduling [10]: SU(8): 0x3879680: i32,ch = LW 0x3883c30, 0x3879780, 0x3879880<Mem:LD4[@redefine_in_placeholder]> [ORD=10] [ID=8]


Examining Available:
Height 11: SU(10): 0x3883c30: i32 = ADD 0x3883b30, 0x3883230 [ID=10]

Height 11: SU(9): 0x3879880: ch = SW 0x3884030, 0x3883f30, 0x3879780, 0x385c078<Mem:ST4[%2]> [ORD=9] [ID=9]


*** Scheduling [11]: SU(10): 0x3883c30: i32 = ADD 0x3883b30, 0x3883230 [ID=10]


Examining Available:
Height 12: SU(12): 0x3883b30: i32 = ADDI 0x3878c80, 0x3879a80 [ID=12]

Height 12: SU(11): 0x3883230: i32 = LUI 0x3879380 [ID=11]

Height 11: SU(9): 0x3879880: ch = SW 0x3884030, 0x3883f30, 0x3879780, 0x385c078<Mem:ST4[%2]> [ORD=9] [ID=9]


*** Scheduling [12]: SU(12): 0x3883b30: i32 = ADDI 0x3878c80, 0x3879a80 [ID=12]


Examining Available:
Height 12: SU(11): 0x3883230: i32 = LUI 0x3879380 [ID=11]

Height 11: SU(9): 0x3879880: ch = SW 0x3884030, 0x3883f30, 0x3879780, 0x385c078<Mem:ST4[%2]> [ORD=9] [ID=9]


*** Scheduling [13]: SU(11): 0x3883230: i32 = LUI 0x3879380 [ID=11]


Examining Available:
Height 11: SU(9): 0x3879880: ch = SW 0x3884030, 0x3883f30, 0x3879780, 0x385c078<Mem:ST4[%2]> [ORD=9] [ID=9]


*** Scheduling [14]: SU(9): 0x3879880: ch = SW 0x3884030, 0x3883f30, 0x3879780, 0x385c078<Mem:ST4[%2]> [ORD=9] [ID=9]


Examining Available:
Height 15: SU(7): 0x3884030: i32 = ADDI 0x3878f80, 0x3883330 [ORD=9] [ID=7]

Height 15: SU(13): 0x3883f30: i32 = ADDI 0x3878f80, 0x3879180 [ORD=9] [ID=13]


*** Scheduling [15]: SU(7): 0x3884030: i32 = ADDI 0x3878f80, 0x3883330 [ORD=9] [ID=7]


Examining Available:
Height 15: SU(13): 0x3883f30: i32 = ADDI 0x3878f80, 0x3879180 [ORD=9] [ID=13]


*** Scheduling [16]: SU(13): 0x3883f30: i32 = ADDI 0x3878f80, 0x3879180 [ORD=9] [ID=13]

*** Final schedule ***
SU(13): 0x3883f30: i32 = ADDI 0x3878f80, 0x3879180 [ORD=9] [ID=13]

SU(7): 0x3884030: i32 = ADDI 0x3878f80, 0x3883330 [ORD=9] [ID=7]

SU(9): 0x3879880: ch = SW 0x3884030, 0x3883f30, 0x3879780, 0x385c078<Mem:ST4[%2]> [ORD=9] [ID=9]

SU(11): 0x3883230: i32 = LUI 0x3879380 [ID=11]

SU(12): 0x3883b30: i32 = ADDI 0x3878c80, 0x3879a80 [ID=12]

SU(10): 0x3883c30: i32 = ADD 0x3883b30, 0x3883230 [ID=10]

SU(8): 0x3879680: i32,ch = LW 0x3883c30, 0x3879780, 0x3879880<Mem:LD4[@redefine_in_placeholder]> [ORD=10] [ID=8]

SU(6): 0x3879980: ch = SW 0x3879680, 0x3884030, 0x3879780, 0x3879680:1<Mem:ST4[%8](align=16)> [ORD=13] [ID=6]

SU(5): 0x3879080: i32,ch = LW 0x3883f30, 0x3879780, 0x3879980<Mem:LD4[%2]> [ORD=14] [ID=5]

SU(4): 0x3879280: ch = SW 0x3878c80, 0x3879080, 0x3878d80, 0x3879080:1<Mem:ST4[%10]> [ORD=16] [ID=4]

SU(3): 0x3878e80: i32,ch = LW 0x3883f30, 0x3879780, 0x3879280<Mem:LD4[%2]> [ORD=17] [ID=3]

SU(14): 0x3883530: i32 = ADDI 0x3878c80, 0x3883e30 [ORD=19] [ID=14]

SU(2): 0x3883630: ch = SW 0x3883530, 0x3878e80, 0x3883d30, 0x3878e80:1<Mem:ST4[%12]> [ORD=19] [ID=2]

SU(15): 0x3883730: i32 = ADDI 0x3878f80, 0x3883430 [ORD=20] [ID=15]

SU(1): 0x3883830: ch = SW 0x3878c80, 0x3883730, 0x3879780, 0x3883630<Mem:ST4[%3]> [ORD=20] [ID=1]

SU(16): 0x3883930: i32 = ADDI 0x3878f80, 0x3879580 [ORD=21] [ID=16]

SU(0): 0x3883a30: ch = SW 0x3878c80, 0x3883930, 0x3879780, 0x3883830<Mem:ST4[%5]> [ORD=21] [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %13 = load i32* %5, align 4
I was here to add   %5 = alloca i32, align 4
with I type i32and sd value :0x3884030: i32 = FrameIndex<4>
new load?0x3879180: i32,ch = load 0x385c078, 0x3884030, 0x3883f30<LD4[%5]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x3883330: i32 = Constant<0>

    0x385c078: ch = EntryToken

    0x3884030: i32 = FrameIndex<4>

    0x3883f30: i32 = undef

  0x3879180: i32,ch = load 0x385c078, 0x3884030, 0x3883f30<LD4[%5]>

  0x385c078: ch = EntryToken


I was here to add i32 5
Initial selection DAG: BB#1 'trp_init3:trp_init3.for.cond'
SelectionDAG has 14 nodes:
  0x385c078: ch = EntryToken [ORD=22]

  0x3883330: i32 = Constant<0>

      0x385c078: <multiple use>
            0x385c078: <multiple use>
            0x3884030: i32 = FrameIndex<4> [ORD=22]

            0x3883f30: i32 = undef [ORD=22]

          0x3879180: i32,ch = load 0x385c078, 0x3884030, 0x3883f30<LD4[%5]> [ORD=22]

          0x3883e30: i32 = Constant<5> [ORD=23]

          0x3883430: ch = setlt [ORD=23]

        0x3879580: i1 = setcc 0x3879180, 0x3883e30, 0x3883430 [ORD=23]

        0x3878f80: i1 = Constant<-1>

      0x3878c80: i1 = xor 0x3879580, 0x3878f80

      0x3878d80: ch = BasicBlock<trp_init3.return 0x387f4c0>

    0x3883d30: ch = brcond 0x385c078, 0x3878c80, 0x3878d80

    0x3879780: ch = BasicBlock<trp_init3.for.inc 0x387f410>

  0x3883a30: ch = br 0x3883d30, 0x3879780



Replacing.3 0x3878c80: i1 = xor 0x3879580, 0x3878f80

With: 0x3883630: i1 = setcc 0x3879180, 0x3883e30, 0x3883830


Replacing.3 0x3883630: i1 = setcc 0x3879180, 0x3883e30, 0x3883830

With: 0x3878f80: i1 = setcc 0x3879180, 0x3883430, 0x3879580

Optimized lowered selection DAG: BB#1 'trp_init3:trp_init3.for.cond'
SelectionDAG has 11 nodes:
  0x385c078: ch = EntryToken [ORD=22]

      0x385c078: <multiple use>
          0x385c078: <multiple use>
          0x3884030: i32 = FrameIndex<4> [ORD=22]

          0x3883f30: i32 = undef [ORD=22]

        0x3879180: i32,ch = load 0x385c078, 0x3884030, 0x3883f30<LD4[%5]> [ORD=22]

        0x3883430: i32 = Constant<4>

        0x3879580: ch = setgt

      0x3878f80: i1 = setcc 0x3879180, 0x3883430, 0x3879580

      0x3878d80: ch = BasicBlock<trp_init3.return 0x387f4c0>

    0x3883d30: ch = brcond 0x385c078, 0x3878f80, 0x3878d80

    0x3879780: ch = BasicBlock<trp_init3.for.inc 0x387f410>

  0x3883a30: ch = br 0x3883d30, 0x3879780


Legally typed node: 0x3879580: ch = setgt [ID=0]

Legally typed node: 0x3883430: i32 = Constant<4> [ID=0]

Legally typed node: 0x3879780: ch = BasicBlock<trp_init3.for.inc 0x387f410> [ID=0]

Legally typed node: 0x3878d80: ch = BasicBlock<trp_init3.return 0x387f4c0> [ID=0]

Legally typed node: 0x3883f30: i32 = undef [ORD=22] [ID=0]

Legally typed node: 0x3884030: i32 = FrameIndex<4> [ORD=22] [ID=0]

Legally typed node: 0x385c078: ch = EntryToken [ORD=22] [ID=0]

Legally typed node: 0x3879180: i32,ch = load 0x385c078, 0x3884030, 0x3883f30<LD4[%5]> [ORD=22] [ID=0]

Promote integer result: 0x3878f80: i1 = setcc 0x3879180, 0x3883430, 0x3879580 [ID=0]

Promote integer operand: 0x3883d30: ch = brcond 0x385c078, 0x3878f80, 0x3878d80 [ID=0]

Promote integer operand: 0x3883e30: i32 = zero_extend 0x3878f80 [ID=0]

Legally typed node: 0x3883830: i32 = Constant<1> [ID=0]

Legally typed node: 0x3883330: i32 = setcc 0x3879180, 0x3883430, 0x3879580 [ID=0]

Legally typed node: 0x3883630: i32 = and 0x3883330, 0x3883830 [ID=0]

Legally typed node: 0x3883d30: ch = brcond 0x385c078, 0x3883630, 0x3878d80 [ID=0]

Legally typed node: 0x3883a30: ch = br 0x3883d30, 0x3879780 [ID=0]

Legally typed node: 0x7fff1ed032b0: ch = handlenode 0x3883a30 [ID=0]

Type-legalized selection DAG: BB#1 'trp_init3:trp_init3.for.cond'
SelectionDAG has 13 nodes:
  0x385c078: ch = EntryToken [ORD=22] [ID=-3]

      0x385c078: <multiple use>
            0x385c078: <multiple use>
            0x3884030: i32 = FrameIndex<4> [ORD=22] [ID=-3]

            0x3883f30: i32 = undef [ORD=22] [ID=-3]

          0x3879180: i32,ch = load 0x385c078, 0x3884030, 0x3883f30<LD4[%5]> [ORD=22] [ID=-3]

          0x3883430: i32 = Constant<4> [ID=-3]

          0x3879580: ch = setgt [ID=-3]

        0x3883330: i32 = setcc 0x3879180, 0x3883430, 0x3879580 [ID=-3]

        0x3883830: i32 = Constant<1> [ID=-3]

      0x3883630: i32 = and 0x3883330, 0x3883830 [ID=-3]

      0x3878d80: ch = BasicBlock<trp_init3.return 0x387f4c0> [ID=-3]

    0x3883d30: ch = brcond 0x385c078, 0x3883630, 0x3878d80 [ID=-3]

    0x3879780: ch = BasicBlock<trp_init3.for.inc 0x387f410> [ID=-3]

  0x3883a30: ch = br 0x3883d30, 0x3879780 [ID=-3]



Replacing.2 0x3883630: i32 = and 0x3883330, 0x3883830 [ID=-3]

With: 0x3883330: i32 = setcc 0x3879180, 0x3883430, 0x3879580 [ID=-3]

Optimized type-legalized selection DAG: BB#1 'trp_init3:trp_init3.for.cond'
SelectionDAG has 11 nodes:
  0x385c078: ch = EntryToken [ORD=22] [ID=-3]

      0x385c078: <multiple use>
          0x385c078: <multiple use>
          0x3884030: i32 = FrameIndex<4> [ORD=22] [ID=-3]

          0x3883f30: i32 = undef [ORD=22] [ID=-3]

        0x3879180: i32,ch = load 0x385c078, 0x3884030, 0x3883f30<LD4[%5]> [ORD=22] [ID=-3]

        0x3883430: i32 = Constant<4> [ID=-3]

        0x3879580: ch = setgt [ID=-3]

      0x3883330: i32 = setcc 0x3879180, 0x3883430, 0x3879580 [ID=-3]

      0x3878d80: ch = BasicBlock<trp_init3.return 0x387f4c0> [ID=-3]

    0x3883d30: ch = brcond 0x385c078, 0x3883330, 0x3878d80 [ID=-3]

    0x3879780: ch = BasicBlock<trp_init3.for.inc 0x387f410> [ID=-3]

  0x3883a30: ch = br 0x3883d30, 0x3879780 [ID=-3]


Legalized selection DAG: BB#1 'trp_init3:trp_init3.for.cond'
SelectionDAG has 11 nodes:
  0x385c078: ch = EntryToken [ORD=22] [ID=0]

      0x385c078: <multiple use>
          0x385c078: <multiple use>
          0x3884030: i32 = FrameIndex<4> [ORD=22] [ID=1]

          0x3883f30: i32 = undef [ORD=22] [ID=2]

        0x3879180: i32,ch = load 0x385c078, 0x3884030, 0x3883f30<LD4[%5]> [ORD=22] [ID=7]

        0x3883430: i32 = Constant<4> [ID=5]

        0x3879580: ch = setgt [ID=6]

      0x3883330: i32 = setcc 0x3879180, 0x3883430, 0x3879580 [ID=8]

      0x3878d80: ch = BasicBlock<trp_init3.return 0x387f4c0> [ID=3]

    0x3883d30: ch = brcond 0x385c078, 0x3883330, 0x3878d80 [ID=9]

    0x3879780: ch = BasicBlock<trp_init3.for.inc 0x387f410> [ID=4]

  0x3883a30: ch = br 0x3883d30, 0x3879780 [ID=10]


Optimized legalized selection DAG: BB#1 'trp_init3:trp_init3.for.cond'
SelectionDAG has 11 nodes:
  0x385c078: ch = EntryToken [ORD=22] [ID=0]

      0x385c078: <multiple use>
          0x385c078: <multiple use>
          0x3884030: i32 = FrameIndex<4> [ORD=22] [ID=1]

          0x3883f30: i32 = undef [ORD=22] [ID=2]

        0x3879180: i32,ch = load 0x385c078, 0x3884030, 0x3883f30<LD4[%5]> [ORD=22] [ID=7]

        0x3883430: i32 = Constant<4> [ID=5]

        0x3879580: ch = setgt [ID=6]

      0x3883330: i32 = setcc 0x3879180, 0x3883430, 0x3879580 [ID=8]

      0x3878d80: ch = BasicBlock<trp_init3.return 0x387f4c0> [ID=3]

    0x3883d30: ch = brcond 0x385c078, 0x3883330, 0x3878d80 [ID=9]

    0x3879780: ch = BasicBlock<trp_init3.for.inc 0x387f410> [ID=4]

  0x3883a30: ch = br 0x3883d30, 0x3879780 [ID=10]


===== Instruction selection begins: BB#1 'trp_init3.for.cond'
ISEL: Starting pattern match on root node: 0x3883a30: ch = br 0x3883d30, 0x3879780 [ID=10]

  Initial Opcode index to 1938
  Morphed node: 0x3883a30: ch = JAL 0x3879780, 0x3883d30

ISEL: Match complete!
=> 0x3883a30: ch = JAL 0x3879780, 0x3883d30

ISEL: Starting pattern match on root node: 0x3883d30: ch = brcond 0x385c078, 0x3883330, 0x3878d80 [ID=9]

  Initial Opcode index to 1439
  Skipped scope entry (due to false predicate) at index 1456, continuing at 1477
  Skipped scope entry (due to false predicate) at index 1478, continuing at 1499
  Skipped scope entry (due to false predicate) at index 1500, continuing at 1521
  Skipped scope entry (due to false predicate) at index 1522, continuing at 1543
  Skipped scope entry (due to false predicate) at index 1544, continuing at 1565
  Skipped scope entry (due to false predicate) at index 1566, continuing at 1587
  Morphed node: 0x3883d30: ch = BGT 0x3878d80, 0x3879180, 0x3883430, 0x385c078

ISEL: Match complete!
=> 0x3883d30: ch = BGT 0x3878d80, 0x3879180, 0x3883430, 0x385c078

ISEL: Starting pattern match on root node: 0x3879180: i32,ch = load 0x385c078, 0x3884030, 0x3883f30<LD4[%5]> [ORD=22] [ID=7]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x3879180: i32,ch = LW 0x3884030, 0x3879580, 0x385c078<Mem:LD4[%5]> [ORD=22]

ISEL: Match complete!
=> 0x3879180: i32,ch = LW 0x3884030, 0x3879580, 0x385c078<Mem:LD4[%5]> [ORD=22]

ISEL: Starting pattern match on root node: 0x3883430: i32 = Constant<4> [ID=5]

  Initial Opcode index to 1226
comparing 0 and 4 and returning value:0
  Skipped scope entry (due to false predicate) at index 1228, continuing at 1236
  Morphed node: 0x3883430: i32 = ADDI 0x3883f30, 0x3883330

ISEL: Match complete!
=> 0x3883430: i32 = ADDI 0x3883f30, 0x3883330

=> 0x3879780: ch = BasicBlock<trp_init3.for.inc 0x387f410>

=> 0x3878d80: ch = BasicBlock<trp_init3.return 0x387f4c0>

=> 0x385c078: ch = EntryToken [ORD=22]

===== Instruction selection ends:
Selected selection DAG: BB#1 'trp_init3:trp_init3.for.cond'
SelectionDAG has 13 nodes:
  0x385c078: ch = EntryToken [ORD=22]

    0x3879780: ch = BasicBlock<trp_init3.for.inc 0x387f410>

      0x3878d80: ch = BasicBlock<trp_init3.return 0x387f4c0>

          0x3883830: i32 = Register %t5

          0x3883630: i32 = TargetFrameIndex<4>

        0x3884030: i32 = ADDI 0x3883830, 0x3883630 [ORD=22]

        0x3879580: i32 = TargetConstant<0>

        0x385c078: <multiple use>
      0x3879180: i32,ch = LW 0x3884030, 0x3879580, 0x385c078<Mem:LD4[%5]> [ORD=22]

        0x3883f30: i32 = Register %zero

        0x3883330: i32 = TargetConstant<4>

      0x3883430: i32 = ADDI 0x3883f30, 0x3883330

      0x385c078: <multiple use>
    0x3883d30: ch = BGT 0x3878d80, 0x3879180, 0x3883430, 0x385c078

  0x3883a30: ch = JAL 0x3879780, 0x3883d30


********** List Scheduling BB#1 'trp_init3.for.cond' **********
SU(0): 0x3883a30: ch = JAL 0x3879780, 0x3883d30 [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x3883d30: ch = BGT 0x3878d80, 0x3879180, 0x3883430, 0x385c078 [ID=1]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
   val SU(3): Latency=1
   val SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x3883430: i32 = ADDI 0x3883f30, 0x3883330 [ID=2]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
   val SU(1): Latency=1

SU(3): 0x3879180: i32,ch = LW 0x3884030, 0x3879580, 0x385c078<Mem:LD4[%5]> [ORD=22] [ID=3]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
   val SU(4): Latency=1
  Successors:
   val SU(1): Latency=1

SU(4): 0x3884030: i32 = ADDI 0x3883830, 0x3883630 [ORD=22] [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(3): Latency=1


Examining Available:
Height 0: SU(0): 0x3883a30: ch = JAL 0x3879780, 0x3883d30 [ID=0]


*** Scheduling [0]: SU(0): 0x3883a30: ch = JAL 0x3879780, 0x3883d30 [ID=0]


Examining Available:
Height 1: SU(1): 0x3883d30: ch = BGT 0x3878d80, 0x3879180, 0x3883430, 0x385c078 [ID=1]


*** Scheduling [1]: SU(1): 0x3883d30: ch = BGT 0x3878d80, 0x3879180, 0x3883430, 0x385c078 [ID=1]


Examining Available:
Height 2: SU(2): 0x3883430: i32 = ADDI 0x3883f30, 0x3883330 [ID=2]

Height 2: SU(3): 0x3879180: i32,ch = LW 0x3884030, 0x3879580, 0x385c078<Mem:LD4[%5]> [ORD=22] [ID=3]


*** Scheduling [2]: SU(2): 0x3883430: i32 = ADDI 0x3883f30, 0x3883330 [ID=2]


Examining Available:
Height 2: SU(3): 0x3879180: i32,ch = LW 0x3884030, 0x3879580, 0x385c078<Mem:LD4[%5]> [ORD=22] [ID=3]


*** Scheduling [3]: SU(3): 0x3879180: i32,ch = LW 0x3884030, 0x3879580, 0x385c078<Mem:LD4[%5]> [ORD=22] [ID=3]


Examining Available:
Height 4: SU(4): 0x3884030: i32 = ADDI 0x3883830, 0x3883630 [ORD=22] [ID=4]


*** Scheduling [4]: SU(4): 0x3884030: i32 = ADDI 0x3883830, 0x3883630 [ORD=22] [ID=4]

*** Final schedule ***
SU(4): 0x3884030: i32 = ADDI 0x3883830, 0x3883630 [ORD=22] [ID=4]

SU(3): 0x3879180: i32,ch = LW 0x3884030, 0x3879580, 0x385c078<Mem:LD4[%5]> [ORD=22] [ID=3]

SU(2): 0x3883430: i32 = ADDI 0x3883f30, 0x3883330 [ID=2]

SU(1): 0x3883d30: ch = BGT 0x3878d80, 0x3879180, 0x3883430, 0x385c078 [ID=1]

SU(0): 0x3883a30: ch = JAL 0x3879780, 0x3883d30 [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %19 = load i32* %3, align 4
I was here to add   %3 = alloca i32, align 4
with I type i32and sd value :0x3883630: i32 = FrameIndex<2>
new load?0x3883f30: i32,ch = load 0x385c078, 0x3883630, 0x3883330<LD4[%3]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x3883830: i32 = Constant<0>

    0x385c078: ch = EntryToken

    0x3883630: i32 = FrameIndex<2>

    0x3883330: i32 = undef

  0x3883f30: i32,ch = load 0x385c078, 0x3883630, 0x3883330<LD4[%3]>

  0x385c078: ch = EntryToken


I was here to add i32 2
store visit is after?  store i32 %20, i32* %3, align 4
whats in dag after store?SelectionDAG has 8 nodes:
  0x3883630: i32 = FrameIndex<2> [ORD=24]

  0x3883830: i32 = Constant<0>

  0x3883330: i32 = undef [ORD=24]

    0x385c078: ch = EntryToken [ORD=24]

    0x3883630: <multiple use>
    0x3883330: <multiple use>
  0x3883f30: i32,ch = load 0x385c078, 0x3883630, 0x3883330<LD4[%3]> [ORD=24]

    0x3883f30: <multiple use>
      0x3883f30: <multiple use>
      0x3879580: i32 = Constant<2> [ORD=25]

    0x3883a30: i32 = and 0x3883f30, 0x3879580 [ORD=25]

    0x3883630: <multiple use>
    0x3883330: <multiple use>
  0x3883d30: ch = store 0x3883f30:1, 0x3883a30, 0x3883630, 0x3883330<ST4[%3]> [ORD=26]


visiting load instruction   %21 = load i32* %3, align 4
with I type i32and sd value :0x3883630: i32 = FrameIndex<2>
new load?0x3879180: i32,ch = load 0x3883d30, 0x3883630, 0x3883330<LD4[%3]>
dag after load is dealt with?SelectionDAG has 9 nodes:
  0x3883630: i32 = FrameIndex<2> [ORD=24]

  0x3883830: i32 = Constant<0>

  0x3883330: i32 = undef [ORD=24]

    0x385c078: ch = EntryToken [ORD=24]

    0x3883630: <multiple use>
    0x3883330: <multiple use>
  0x3883f30: i32,ch = load 0x385c078, 0x3883630, 0x3883330<LD4[%3]> [ORD=24]

      0x3883f30: <multiple use>
        0x3883f30: <multiple use>
        0x3879580: i32 = Constant<2> [ORD=25]

      0x3883a30: i32 = and 0x3883f30, 0x3879580 [ORD=25]

      0x3883630: <multiple use>
      0x3883330: <multiple use>
    0x3883d30: ch = store 0x3883f30:1, 0x3883a30, 0x3883630, 0x3883330<ST4[%3]> [ORD=26]

    0x3883630: <multiple use>
    0x3883330: <multiple use>
  0x3879180: i32,ch = load 0x3883d30, 0x3883630, 0x3883330<LD4[%3]>

    0x3883f30: <multiple use>
      0x3883f30: <multiple use>
      0x3879580: i32 = Constant<2> [ORD=25]

    0x3883a30: i32 = and 0x3883f30, 0x3879580 [ORD=25]

    0x3883630: <multiple use>
    0x3883330: <multiple use>
  0x3883d30: ch = store 0x3883f30:1, 0x3883a30, 0x3883630, 0x3883330<ST4[%3]> [ORD=26]


store visit is after?  store i32 %21, i32* %1, align 4
I was here to add   %1 = alloca i32, align 4, !ConsumedBy !6
whats in dag after store?SelectionDAG has 11 nodes:
  0x3883630: i32 = FrameIndex<2> [ORD=24]

  0x3883830: i32 = Constant<0>

  0x3883330: i32 = undef [ORD=24]

    0x385c078: ch = EntryToken [ORD=24]

    0x3883630: <multiple use>
    0x3883330: <multiple use>
  0x3883f30: i32,ch = load 0x385c078, 0x3883630, 0x3883330<LD4[%3]> [ORD=24]

      0x3883f30: <multiple use>
        0x3883f30: <multiple use>
        0x3879580: i32 = Constant<2> [ORD=25]

      0x3883a30: i32 = and 0x3883f30, 0x3879580 [ORD=25]

      0x3883630: <multiple use>
      0x3883330: <multiple use>
    0x3883d30: ch = store 0x3883f30:1, 0x3883a30, 0x3883630, 0x3883330<ST4[%3]> [ORD=26]

    0x3883630: <multiple use>
    0x3883330: <multiple use>
  0x3879180: i32,ch = load 0x3883d30, 0x3883630, 0x3883330<LD4[%3]> [ORD=27]

    0x3879180: <multiple use>
    0x3879180: <multiple use>
    0x3883430: i32 = FrameIndex<0> [ORD=28]

    0x3883330: <multiple use>
  0x3879780: ch = store 0x3879180:1, 0x3879180, 0x3883430, 0x3883330<ST4[%1]> [ORD=28]


Initial selection DAG: BB#3 'trp_init3:trp_init3.return'
SelectionDAG has 11 nodes:
  0x3883630: i32 = FrameIndex<2> [ORD=24]

  0x3883830: i32 = Constant<0>

  0x3883330: i32 = undef [ORD=24]

    0x385c078: ch = EntryToken [ORD=24]

    0x3883630: <multiple use>
    0x3883330: <multiple use>
  0x3883f30: i32,ch = load 0x385c078, 0x3883630, 0x3883330<LD4[%3]> [ORD=24]

      0x3883f30: <multiple use>
        0x3883f30: <multiple use>
        0x3879580: i32 = Constant<2> [ORD=25]

      0x3883a30: i32 = and 0x3883f30, 0x3879580 [ORD=25]

      0x3883630: <multiple use>
      0x3883330: <multiple use>
    0x3883d30: ch = store 0x3883f30:1, 0x3883a30, 0x3883630, 0x3883330<ST4[%3]> [ORD=26]

    0x3883630: <multiple use>
    0x3883330: <multiple use>
  0x3879180: i32,ch = load 0x3883d30, 0x3883630, 0x3883330<LD4[%3]> [ORD=27]

    0x3879180: <multiple use>
    0x3879180: <multiple use>
    0x3883430: i32 = FrameIndex<0> [ORD=28]

    0x3883330: <multiple use>
  0x3879780: ch = store 0x3879180:1, 0x3879180, 0x3883430, 0x3883330<ST4[%1]> [ORD=28]



Replacing.1 0x3879180: i32,ch = load 0x3883d30, 0x3883630, 0x3883330<LD4[%3]> [ORD=27]

With: 0x3883a30: i32 = and 0x3883f30, 0x3879580 [ORD=25]
 and 1 other values
Optimized lowered selection DAG: BB#3 'trp_init3:trp_init3.return'
SelectionDAG has 9 nodes:
  0x3883630: i32 = FrameIndex<2> [ORD=24]

  0x3883330: i32 = undef [ORD=24]

    0x385c078: ch = EntryToken [ORD=24]

    0x3883630: <multiple use>
    0x3883330: <multiple use>
  0x3883f30: i32,ch = load 0x385c078, 0x3883630, 0x3883330<LD4[%3]> [ORD=24]

    0x3883f30: <multiple use>
    0x3879580: i32 = Constant<2> [ORD=25]

  0x3883a30: i32 = and 0x3883f30, 0x3879580 [ORD=25]

      0x3883f30: <multiple use>
      0x3883a30: <multiple use>
      0x3883630: <multiple use>
      0x3883330: <multiple use>
    0x3883d30: ch = store 0x3883f30:1, 0x3883a30, 0x3883630, 0x3883330<ST4[%3]> [ORD=26]

    0x3883a30: <multiple use>
    0x3883430: i32 = FrameIndex<0> [ORD=28]

    0x3883330: <multiple use>
  0x3879780: ch = store 0x3883d30, 0x3883a30, 0x3883430, 0x3883330<ST4[%1]> [ORD=28]


Legally typed node: 0x3883430: i32 = FrameIndex<0> [ORD=28] [ID=0]

Legally typed node: 0x3879580: i32 = Constant<2> [ORD=25] [ID=0]

Legally typed node: 0x3883330: i32 = undef [ORD=24] [ID=0]

Legally typed node: 0x3883630: i32 = FrameIndex<2> [ORD=24] [ID=0]

Legally typed node: 0x385c078: ch = EntryToken [ORD=24] [ID=0]

Legally typed node: 0x3883f30: i32,ch = load 0x385c078, 0x3883630, 0x3883330<LD4[%3]> [ORD=24] [ID=0]

Legally typed node: 0x3883a30: i32 = and 0x3883f30, 0x3879580 [ORD=25] [ID=0]

Legally typed node: 0x3883d30: ch = store 0x3883f30:1, 0x3883a30, 0x3883630, 0x3883330<ST4[%3]> [ORD=26] [ID=0]

Legally typed node: 0x3879780: ch = store 0x3883d30, 0x3883a30, 0x3883430, 0x3883330<ST4[%1]> [ORD=28] [ID=0]

Legally typed node: 0x7fff1ed032b0: ch = handlenode 0x3879780 [ID=0]

Type-legalized selection DAG: BB#3 'trp_init3:trp_init3.return'
SelectionDAG has 9 nodes:
  0x3883630: i32 = FrameIndex<2> [ORD=24] [ID=-3]

  0x3883330: i32 = undef [ORD=24] [ID=-3]

    0x385c078: ch = EntryToken [ORD=24] [ID=-3]

    0x3883630: <multiple use>
    0x3883330: <multiple use>
  0x3883f30: i32,ch = load 0x385c078, 0x3883630, 0x3883330<LD4[%3]> [ORD=24] [ID=-3]

    0x3883f30: <multiple use>
    0x3879580: i32 = Constant<2> [ORD=25] [ID=-3]

  0x3883a30: i32 = and 0x3883f30, 0x3879580 [ORD=25] [ID=-3]

      0x3883f30: <multiple use>
      0x3883a30: <multiple use>
      0x3883630: <multiple use>
      0x3883330: <multiple use>
    0x3883d30: ch = store 0x3883f30:1, 0x3883a30, 0x3883630, 0x3883330<ST4[%3]> [ORD=26] [ID=-3]

    0x3883a30: <multiple use>
    0x3883430: i32 = FrameIndex<0> [ORD=28] [ID=-3]

    0x3883330: <multiple use>
  0x3879780: ch = store 0x3883d30, 0x3883a30, 0x3883430, 0x3883330<ST4[%1]> [ORD=28] [ID=-3]


Legalized selection DAG: BB#3 'trp_init3:trp_init3.return'
SelectionDAG has 9 nodes:
  0x3883630: i32 = FrameIndex<2> [ORD=24] [ID=1]

  0x3883330: i32 = undef [ORD=24] [ID=2]

    0x385c078: ch = EntryToken [ORD=24] [ID=0]

    0x3883630: <multiple use>
    0x3883330: <multiple use>
  0x3883f30: i32,ch = load 0x385c078, 0x3883630, 0x3883330<LD4[%3]> [ORD=24] [ID=5]

    0x3883f30: <multiple use>
    0x3879580: i32 = Constant<2> [ORD=25] [ID=3]

  0x3883a30: i32 = and 0x3883f30, 0x3879580 [ORD=25] [ID=6]

      0x3883f30: <multiple use>
      0x3883a30: <multiple use>
      0x3883630: <multiple use>
      0x3883330: <multiple use>
    0x3883d30: ch = store 0x3883f30:1, 0x3883a30, 0x3883630, 0x3883330<ST4[%3]> [ORD=26] [ID=7]

    0x3883a30: <multiple use>
    0x3883430: i32 = FrameIndex<0> [ORD=28] [ID=4]

    0x3883330: <multiple use>
  0x3879780: ch = store 0x3883d30, 0x3883a30, 0x3883430, 0x3883330<ST4[%1]> [ORD=28] [ID=8]


Optimized legalized selection DAG: BB#3 'trp_init3:trp_init3.return'
SelectionDAG has 9 nodes:
  0x3883630: i32 = FrameIndex<2> [ORD=24] [ID=1]

  0x3883330: i32 = undef [ORD=24] [ID=2]

    0x385c078: ch = EntryToken [ORD=24] [ID=0]

    0x3883630: <multiple use>
    0x3883330: <multiple use>
  0x3883f30: i32,ch = load 0x385c078, 0x3883630, 0x3883330<LD4[%3]> [ORD=24] [ID=5]

    0x3883f30: <multiple use>
    0x3879580: i32 = Constant<2> [ORD=25] [ID=3]

  0x3883a30: i32 = and 0x3883f30, 0x3879580 [ORD=25] [ID=6]

      0x3883f30: <multiple use>
      0x3883a30: <multiple use>
      0x3883630: <multiple use>
      0x3883330: <multiple use>
    0x3883d30: ch = store 0x3883f30:1, 0x3883a30, 0x3883630, 0x3883330<ST4[%3]> [ORD=26] [ID=7]

    0x3883a30: <multiple use>
    0x3883430: i32 = FrameIndex<0> [ORD=28] [ID=4]

    0x3883330: <multiple use>
  0x3879780: ch = store 0x3883d30, 0x3883a30, 0x3883430, 0x3883330<ST4[%1]> [ORD=28] [ID=8]


===== Instruction selection begins: BB#3 'trp_init3.return'
ISEL: Starting pattern match on root node: 0x3879780: ch = store 0x3883d30, 0x3883a30, 0x3883430, 0x3883330<ST4[%1]> [ORD=28] [ID=8]

  Initial Opcode index to 178
  Morphed node: 0x3879780: ch = SW 0x3883a30, 0x3883430, 0x3883830, 0x3883d30<Mem:ST4[%1]> [ORD=28]

ISEL: Match complete!
=> 0x3879780: ch = SW 0x3883a30, 0x3883430, 0x3883830, 0x3883d30<Mem:ST4[%1]> [ORD=28]

ISEL: Starting pattern match on root node: 0x3883d30: ch = store 0x3883f30:1, 0x3883a30, 0x3883630, 0x3883330<ST4[%3]> [ORD=26] [ID=7]

  Initial Opcode index to 178
  Morphed node: 0x3883d30: ch = SW 0x3883a30, 0x3883630, 0x3883830, 0x3883f30:1<Mem:ST4[%3]> [ORD=26]

ISEL: Match complete!
=> 0x3883d30: ch = SW 0x3883a30, 0x3883630, 0x3883830, 0x3883f30:1<Mem:ST4[%3]> [ORD=26]

ISEL: Starting pattern match on root node: 0x3883a30: i32 = and 0x3883f30, 0x3879580 [ORD=25] [ID=6]

  Initial Opcode index to 604
  Morphed node: 0x3883a30: i32 = ANDI 0x3883f30, 0x3879180 [ORD=25]

ISEL: Match complete!
=> 0x3883a30: i32 = ANDI 0x3883f30, 0x3879180 [ORD=25]

ISEL: Starting pattern match on root node: 0x3883f30: i32,ch = load 0x385c078, 0x3883630, 0x3883330<LD4[%3]> [ORD=24] [ID=5]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x3883f30: i32,ch = LW 0x3883630, 0x3883830, 0x385c078<Mem:LD4[%3]> [ORD=24]

ISEL: Match complete!
=> 0x3883f30: i32,ch = LW 0x3883630, 0x3883830, 0x385c078<Mem:LD4[%3]> [ORD=24]

=> 0x385c078: ch = EntryToken [ORD=24]

===== Instruction selection ends:
Selected selection DAG: BB#3 'trp_init3:trp_init3.return'
SelectionDAG has 12 nodes:
    0x3884030: <multiple use>
    0x3883830: <multiple use>
    0x385c078: ch = EntryToken [ORD=24]

  0x3883f30: i32,ch = LW 0x3884030, 0x3883830, 0x385c078<Mem:LD4[%3]> [ORD=24]

    0x3883f30: <multiple use>
    0x3879180: i32 = TargetConstant<2>

  0x3883a30: i32 = ANDI 0x3883f30, 0x3879180 [ORD=25]

  0x3883830: i32 = TargetConstant<0>

  0x3883330: i32 = Register %t5

    0x3883330: <multiple use>
    0x3878d80: i32 = TargetFrameIndex<2>

  0x3884030: i32 = ADDI 0x3883330, 0x3878d80 [ORD=24]

    0x3883a30: <multiple use>
      0x3883330: <multiple use>
      0x3879580: i32 = TargetFrameIndex<0>

    0x3883430: i32 = ADDI 0x3883330, 0x3879580 [ORD=28]

    0x3883830: <multiple use>
      0x3883a30: <multiple use>
      0x3884030: <multiple use>
      0x3883830: <multiple use>
      0x3883f30: <multiple use>
    0x3883d30: ch = SW 0x3883a30, 0x3884030, 0x3883830, 0x3883f30:1<Mem:ST4[%3]> [ORD=26]

  0x3879780: ch = SW 0x3883a30, 0x3883430, 0x3883830, 0x3883d30<Mem:ST4[%1]> [ORD=28]


********** List Scheduling BB#3 'trp_init3.return' **********
SU(0): 0x3879780: ch = SW 0x3883a30, 0x3883430, 0x3883830, 0x3883d30<Mem:ST4[%1]> [ORD=28] [ID=0]

  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
   val SU(5): Latency=1
   val SU(4): Latency=1
   ch  SU(1): Latency=1

SU(1): 0x3883d30: ch = SW 0x3883a30, 0x3884030, 0x3883830, 0x3883f30:1<Mem:ST4[%3]> [ORD=26] [ID=1]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(5): Latency=1
   val SU(3): Latency=1
   ch  SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x3883f30: i32,ch = LW 0x3884030, 0x3883830, 0x385c078<Mem:LD4[%3]> [ORD=24] [ID=2]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(3): Latency=1
  Successors:
   ch  SU(1): Latency=1
   val SU(5): Latency=1

SU(3): 0x3884030: i32 = ADDI 0x3883330, 0x3878d80 [ORD=24] [ID=3]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(1): Latency=1
   val SU(2): Latency=1

SU(4): 0x3883430: i32 = ADDI 0x3883330, 0x3879580 [ORD=28] [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
   val SU(0): Latency=1

SU(5): 0x3883a30: i32 = ANDI 0x3883f30, 0x3879180 [ORD=25] [ID=5]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(2): Latency=1
  Successors:
   val SU(0): Latency=1
   val SU(1): Latency=1


Examining Available:
Height 0: SU(0): 0x3879780: ch = SW 0x3883a30, 0x3883430, 0x3883830, 0x3883d30<Mem:ST4[%1]> [ORD=28] [ID=0]


*** Scheduling [0]: SU(0): 0x3879780: ch = SW 0x3883a30, 0x3883430, 0x3883830, 0x3883d30<Mem:ST4[%1]> [ORD=28] [ID=0]


Examining Available:
Height 1: SU(4): 0x3883430: i32 = ADDI 0x3883330, 0x3879580 [ORD=28] [ID=4]

Height 1: SU(1): 0x3883d30: ch = SW 0x3883a30, 0x3884030, 0x3883830, 0x3883f30:1<Mem:ST4[%3]> [ORD=26] [ID=1]


*** Scheduling [1]: SU(4): 0x3883430: i32 = ADDI 0x3883330, 0x3879580 [ORD=28] [ID=4]


Examining Available:
Height 1: SU(1): 0x3883d30: ch = SW 0x3883a30, 0x3884030, 0x3883830, 0x3883f30:1<Mem:ST4[%3]> [ORD=26] [ID=1]


*** Scheduling [2]: SU(1): 0x3883d30: ch = SW 0x3883a30, 0x3884030, 0x3883830, 0x3883f30:1<Mem:ST4[%3]> [ORD=26] [ID=1]


Examining Available:
Height 3: SU(5): 0x3883a30: i32 = ANDI 0x3883f30, 0x3879180 [ORD=25] [ID=5]


*** Scheduling [3]: SU(5): 0x3883a30: i32 = ANDI 0x3883f30, 0x3879180 [ORD=25] [ID=5]


Examining Available:
Height 4: SU(2): 0x3883f30: i32,ch = LW 0x3884030, 0x3883830, 0x385c078<Mem:LD4[%3]> [ORD=24] [ID=2]


*** Scheduling [4]: SU(2): 0x3883f30: i32,ch = LW 0x3884030, 0x3883830, 0x385c078<Mem:LD4[%3]> [ORD=24] [ID=2]


Examining Available:
Height 5: SU(3): 0x3884030: i32 = ADDI 0x3883330, 0x3878d80 [ORD=24] [ID=3]


*** Scheduling [5]: SU(3): 0x3884030: i32 = ADDI 0x3883330, 0x3878d80 [ORD=24] [ID=3]

*** Final schedule ***
SU(3): 0x3884030: i32 = ADDI 0x3883330, 0x3878d80 [ORD=24] [ID=3]

SU(2): 0x3883f30: i32,ch = LW 0x3884030, 0x3883830, 0x385c078<Mem:LD4[%3]> [ORD=24] [ID=2]

SU(5): 0x3883a30: i32 = ANDI 0x3883f30, 0x3879180 [ORD=25] [ID=5]

SU(1): 0x3883d30: ch = SW 0x3883a30, 0x3884030, 0x3883830, 0x3883f30:1<Mem:ST4[%3]> [ORD=26] [ID=1]

SU(4): 0x3883430: i32 = ADDI 0x3883330, 0x3879580 [ORD=28] [ID=4]

SU(0): 0x3879780: ch = SW 0x3883a30, 0x3883430, 0x3883830, 0x3883d30<Mem:ST4[%1]> [ORD=28] [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %15 = load i32* %3, align 4
I was here to add   %3 = alloca i32, align 4
with I type i32and sd value :0x3884030: i32 = FrameIndex<2>
new load?0x3883330: i32,ch = load 0x385c078, 0x3884030, 0x3879580<LD4[%3]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x3878d80: i32 = Constant<0>

    0x385c078: ch = EntryToken

    0x3884030: i32 = FrameIndex<2>

    0x3879580: i32 = undef

  0x3883330: i32,ch = load 0x385c078, 0x3884030, 0x3879580<LD4[%3]>

  0x385c078: ch = EntryToken


I was here to add i32 1
store visit is after?  store i32 %16, i32* %3, align 4
whats in dag after store?SelectionDAG has 8 nodes:
  0x3884030: i32 = FrameIndex<2> [ORD=29]

  0x3878d80: i32 = Constant<0>

  0x3879580: i32 = undef [ORD=29]

    0x385c078: ch = EntryToken [ORD=29]

    0x3884030: <multiple use>
    0x3879580: <multiple use>
  0x3883330: i32,ch = load 0x385c078, 0x3884030, 0x3879580<LD4[%3]> [ORD=29]

    0x3883330: <multiple use>
      0x3883330: <multiple use>
      0x3879180: i32 = Constant<1> [ORD=30]

    0x3883830: i32 = add 0x3883330, 0x3879180 [ORD=30]

    0x3884030: <multiple use>
    0x3879580: <multiple use>
  0x3879780: ch = store 0x3883330:1, 0x3883830, 0x3884030, 0x3879580<ST4[%3]> [ORD=31]


visiting load instruction   %17 = load i32* %5, align 4
I was here to add   %5 = alloca i32, align 4
with I type i32and sd value :0x3883d30: i32 = FrameIndex<4>
new load?0x3883a30: i32,ch = load 0x3879780, 0x3883d30, 0x3879580<LD4[%5]>
dag after load is dealt with?SelectionDAG has 10 nodes:
  0x3884030: i32 = FrameIndex<2> [ORD=29]

  0x3878d80: i32 = Constant<0>

  0x3879580: i32 = undef [ORD=29]

    0x385c078: ch = EntryToken [ORD=29]

    0x3884030: <multiple use>
    0x3879580: <multiple use>
  0x3883330: i32,ch = load 0x385c078, 0x3884030, 0x3879580<LD4[%3]> [ORD=29]

      0x3883330: <multiple use>
        0x3883330: <multiple use>
        0x3879180: i32 = Constant<1> [ORD=30]

      0x3883830: i32 = add 0x3883330, 0x3879180 [ORD=30]

      0x3884030: <multiple use>
      0x3879580: <multiple use>
    0x3879780: ch = store 0x3883330:1, 0x3883830, 0x3884030, 0x3879580<ST4[%3]> [ORD=31]

    0x3883d30: i32 = FrameIndex<4>

    0x3879580: <multiple use>
  0x3883a30: i32,ch = load 0x3879780, 0x3883d30, 0x3879580<LD4[%5]>

    0x3883330: <multiple use>
      0x3883330: <multiple use>
      0x3879180: i32 = Constant<1> [ORD=30]

    0x3883830: i32 = add 0x3883330, 0x3879180 [ORD=30]

    0x3884030: <multiple use>
    0x3879580: <multiple use>
  0x3879780: ch = store 0x3883330:1, 0x3883830, 0x3884030, 0x3879580<ST4[%3]> [ORD=31]


store visit is after?  store i32 %18, i32* %5, align 4
whats in dag after store?SelectionDAG has 12 nodes:
  0x3884030: i32 = FrameIndex<2> [ORD=29]

  0x3878d80: i32 = Constant<0>

  0x3879580: i32 = undef [ORD=29]

    0x385c078: ch = EntryToken [ORD=29]

    0x3884030: <multiple use>
    0x3879580: <multiple use>
  0x3883330: i32,ch = load 0x385c078, 0x3884030, 0x3879580<LD4[%3]> [ORD=29]

  0x3879180: i32 = Constant<1> [ORD=30]

  0x3883d30: i32 = FrameIndex<4> [ORD=32]

      0x3883330: <multiple use>
        0x3883330: <multiple use>
        0x3879180: <multiple use>
      0x3883830: i32 = add 0x3883330, 0x3879180 [ORD=30]

      0x3884030: <multiple use>
      0x3879580: <multiple use>
    0x3879780: ch = store 0x3883330:1, 0x3883830, 0x3884030, 0x3879580<ST4[%3]> [ORD=31]

    0x3883d30: <multiple use>
    0x3879580: <multiple use>
  0x3883a30: i32,ch = load 0x3879780, 0x3883d30, 0x3879580<LD4[%5]> [ORD=32]

    0x3883a30: <multiple use>
      0x3883a30: <multiple use>
      0x3879180: <multiple use>
    0x3883f30: i32 = add 0x3883a30, 0x3879180 [ORD=33]

    0x3883d30: <multiple use>
    0x3879580: <multiple use>
  0x3883430: ch = store 0x3883a30:1, 0x3883f30, 0x3883d30, 0x3879580<ST4[%5]> [ORD=34]


Initial selection DAG: BB#2 'trp_init3:trp_init3.for.inc'
SelectionDAG has 14 nodes:
  0x3884030: i32 = FrameIndex<2> [ORD=29]

  0x3878d80: i32 = Constant<0>

  0x3879580: i32 = undef [ORD=29]

    0x385c078: ch = EntryToken [ORD=29]

    0x3884030: <multiple use>
    0x3879580: <multiple use>
  0x3883330: i32,ch = load 0x385c078, 0x3884030, 0x3879580<LD4[%3]> [ORD=29]

  0x3879180: i32 = Constant<1> [ORD=30]

  0x3883d30: i32 = FrameIndex<4> [ORD=32]

      0x3883330: <multiple use>
        0x3883330: <multiple use>
        0x3879180: <multiple use>
      0x3883830: i32 = add 0x3883330, 0x3879180 [ORD=30]

      0x3884030: <multiple use>
      0x3879580: <multiple use>
    0x3879780: ch = store 0x3883330:1, 0x3883830, 0x3884030, 0x3879580<ST4[%3]> [ORD=31]

    0x3883d30: <multiple use>
    0x3879580: <multiple use>
  0x3883a30: i32,ch = load 0x3879780, 0x3883d30, 0x3879580<LD4[%5]> [ORD=32]

      0x3883a30: <multiple use>
        0x3883a30: <multiple use>
        0x3879180: <multiple use>
      0x3883f30: i32 = add 0x3883a30, 0x3879180 [ORD=33]

      0x3883d30: <multiple use>
      0x3879580: <multiple use>
    0x3883430: ch = store 0x3883a30:1, 0x3883f30, 0x3883d30, 0x3879580<ST4[%5]> [ORD=34]

    0x3883630: ch = BasicBlock<trp_init3.for.cond 0x387f360>

  0x3878f80: ch = br 0x3883430, 0x3883630


Optimized lowered selection DAG: BB#2 'trp_init3:trp_init3.for.inc'
SelectionDAG has 13 nodes:
  0x3884030: i32 = FrameIndex<2> [ORD=29]

  0x3879580: i32 = undef [ORD=29]

    0x385c078: ch = EntryToken [ORD=29]

    0x3884030: <multiple use>
    0x3879580: <multiple use>
  0x3883330: i32,ch = load 0x385c078, 0x3884030, 0x3879580<LD4[%3]> [ORD=29]

  0x3879180: i32 = Constant<1> [ORD=30]

  0x3883d30: i32 = FrameIndex<4> [ORD=32]

      0x3883330: <multiple use>
        0x3883330: <multiple use>
        0x3879180: <multiple use>
      0x3883830: i32 = add 0x3883330, 0x3879180 [ORD=30]

      0x3884030: <multiple use>
      0x3879580: <multiple use>
    0x3879780: ch = store 0x3883330:1, 0x3883830, 0x3884030, 0x3879580<ST4[%3]> [ORD=31]

    0x3883d30: <multiple use>
    0x3879580: <multiple use>
  0x3883a30: i32,ch = load 0x3879780, 0x3883d30, 0x3879580<LD4[%5]> [ORD=32]

      0x3883a30: <multiple use>
        0x3883a30: <multiple use>
        0x3879180: <multiple use>
      0x3883f30: i32 = add 0x3883a30, 0x3879180 [ORD=33]

      0x3883d30: <multiple use>
      0x3879580: <multiple use>
    0x3883430: ch = store 0x3883a30:1, 0x3883f30, 0x3883d30, 0x3879580<ST4[%5]> [ORD=34]

    0x3883630: ch = BasicBlock<trp_init3.for.cond 0x387f360>

  0x3878f80: ch = br 0x3883430, 0x3883630


Legally typed node: 0x3883630: ch = BasicBlock<trp_init3.for.cond 0x387f360> [ID=0]

Legally typed node: 0x3883d30: i32 = FrameIndex<4> [ORD=32] [ID=0]

Legally typed node: 0x3879180: i32 = Constant<1> [ORD=30] [ID=0]

Legally typed node: 0x3879580: i32 = undef [ORD=29] [ID=0]

Legally typed node: 0x3884030: i32 = FrameIndex<2> [ORD=29] [ID=0]

Legally typed node: 0x385c078: ch = EntryToken [ORD=29] [ID=0]

Legally typed node: 0x3883330: i32,ch = load 0x385c078, 0x3884030, 0x3879580<LD4[%3]> [ORD=29] [ID=0]

Legally typed node: 0x3883830: i32 = add 0x3883330, 0x3879180 [ORD=30] [ID=0]

Legally typed node: 0x3879780: ch = store 0x3883330:1, 0x3883830, 0x3884030, 0x3879580<ST4[%3]> [ORD=31] [ID=0]

Legally typed node: 0x3883a30: i32,ch = load 0x3879780, 0x3883d30, 0x3879580<LD4[%5]> [ORD=32] [ID=0]

Legally typed node: 0x3883f30: i32 = add 0x3883a30, 0x3879180 [ORD=33] [ID=0]

Legally typed node: 0x3883430: ch = store 0x3883a30:1, 0x3883f30, 0x3883d30, 0x3879580<ST4[%5]> [ORD=34] [ID=0]

Legally typed node: 0x3878f80: ch = br 0x3883430, 0x3883630 [ID=0]

Legally typed node: 0x7fff1ed032b0: ch = handlenode 0x3878f80 [ID=0]

Type-legalized selection DAG: BB#2 'trp_init3:trp_init3.for.inc'
SelectionDAG has 13 nodes:
  0x3884030: i32 = FrameIndex<2> [ORD=29] [ID=-3]

  0x3879580: i32 = undef [ORD=29] [ID=-3]

    0x385c078: ch = EntryToken [ORD=29] [ID=-3]

    0x3884030: <multiple use>
    0x3879580: <multiple use>
  0x3883330: i32,ch = load 0x385c078, 0x3884030, 0x3879580<LD4[%3]> [ORD=29] [ID=-3]

  0x3879180: i32 = Constant<1> [ORD=30] [ID=-3]

  0x3883d30: i32 = FrameIndex<4> [ORD=32] [ID=-3]

      0x3883330: <multiple use>
        0x3883330: <multiple use>
        0x3879180: <multiple use>
      0x3883830: i32 = add 0x3883330, 0x3879180 [ORD=30] [ID=-3]

      0x3884030: <multiple use>
      0x3879580: <multiple use>
    0x3879780: ch = store 0x3883330:1, 0x3883830, 0x3884030, 0x3879580<ST4[%3]> [ORD=31] [ID=-3]

    0x3883d30: <multiple use>
    0x3879580: <multiple use>
  0x3883a30: i32,ch = load 0x3879780, 0x3883d30, 0x3879580<LD4[%5]> [ORD=32] [ID=-3]

      0x3883a30: <multiple use>
        0x3883a30: <multiple use>
        0x3879180: <multiple use>
      0x3883f30: i32 = add 0x3883a30, 0x3879180 [ORD=33] [ID=-3]

      0x3883d30: <multiple use>
      0x3879580: <multiple use>
    0x3883430: ch = store 0x3883a30:1, 0x3883f30, 0x3883d30, 0x3879580<ST4[%5]> [ORD=34] [ID=-3]

    0x3883630: ch = BasicBlock<trp_init3.for.cond 0x387f360> [ID=-3]

  0x3878f80: ch = br 0x3883430, 0x3883630 [ID=-3]


Legalized selection DAG: BB#2 'trp_init3:trp_init3.for.inc'
SelectionDAG has 13 nodes:
  0x3884030: i32 = FrameIndex<2> [ORD=29] [ID=1]

  0x3879580: i32 = undef [ORD=29] [ID=2]

  0x3879180: i32 = Constant<1> [ORD=30] [ID=3]

  0x3883d30: i32 = FrameIndex<4> [ORD=32] [ID=4]

    0x385c078: ch = EntryToken [ORD=29] [ID=0]

    0x3884030: <multiple use>
    0x3879580: <multiple use>
  0x3883330: i32,ch = load 0x385c078, 0x3884030, 0x3879580<LD4[%3]> [ORD=29] [ID=6]

      0x3883330: <multiple use>
        0x3883330: <multiple use>
        0x3879180: <multiple use>
      0x3883830: i32 = add 0x3883330, 0x3879180 [ORD=30] [ID=7]

      0x3884030: <multiple use>
      0x3879580: <multiple use>
    0x3879780: ch = store 0x3883330:1, 0x3883830, 0x3884030, 0x3879580<ST4[%3]> [ORD=31] [ID=8]

    0x3883d30: <multiple use>
    0x3879580: <multiple use>
  0x3883a30: i32,ch = load 0x3879780, 0x3883d30, 0x3879580<LD4[%5]> [ORD=32] [ID=9]

      0x3883a30: <multiple use>
        0x3883a30: <multiple use>
        0x3879180: <multiple use>
      0x3883f30: i32 = add 0x3883a30, 0x3879180 [ORD=33] [ID=10]

      0x3883d30: <multiple use>
      0x3879580: <multiple use>
    0x3883430: ch = store 0x3883a30:1, 0x3883f30, 0x3883d30, 0x3879580<ST4[%5]> [ORD=34] [ID=11]

    0x3883630: ch = BasicBlock<trp_init3.for.cond 0x387f360> [ID=5]

  0x3878f80: ch = br 0x3883430, 0x3883630 [ID=12]


Optimized legalized selection DAG: BB#2 'trp_init3:trp_init3.for.inc'
SelectionDAG has 13 nodes:
  0x3884030: i32 = FrameIndex<2> [ORD=29] [ID=1]

  0x3879580: i32 = undef [ORD=29] [ID=2]

  0x3879180: i32 = Constant<1> [ORD=30] [ID=3]

  0x3883d30: i32 = FrameIndex<4> [ORD=32] [ID=4]

    0x385c078: ch = EntryToken [ORD=29] [ID=0]

    0x3884030: <multiple use>
    0x3879580: <multiple use>
  0x3883330: i32,ch = load 0x385c078, 0x3884030, 0x3879580<LD4[%3]> [ORD=29] [ID=6]

      0x3883330: <multiple use>
        0x3883330: <multiple use>
        0x3879180: <multiple use>
      0x3883830: i32 = add 0x3883330, 0x3879180 [ORD=30] [ID=7]

      0x3884030: <multiple use>
      0x3879580: <multiple use>
    0x3879780: ch = store 0x3883330:1, 0x3883830, 0x3884030, 0x3879580<ST4[%3]> [ORD=31] [ID=8]

    0x3883d30: <multiple use>
    0x3879580: <multiple use>
  0x3883a30: i32,ch = load 0x3879780, 0x3883d30, 0x3879580<LD4[%5]> [ORD=32] [ID=9]

      0x3883a30: <multiple use>
        0x3883a30: <multiple use>
        0x3879180: <multiple use>
      0x3883f30: i32 = add 0x3883a30, 0x3879180 [ORD=33] [ID=10]

      0x3883d30: <multiple use>
      0x3879580: <multiple use>
    0x3883430: ch = store 0x3883a30:1, 0x3883f30, 0x3883d30, 0x3879580<ST4[%5]> [ORD=34] [ID=11]

    0x3883630: ch = BasicBlock<trp_init3.for.cond 0x387f360> [ID=5]

  0x3878f80: ch = br 0x3883430, 0x3883630 [ID=12]


===== Instruction selection begins: BB#2 'trp_init3.for.inc'
ISEL: Starting pattern match on root node: 0x3878f80: ch = br 0x3883430, 0x3883630 [ID=12]

  Initial Opcode index to 1938
  Morphed node: 0x3878f80: ch = JAL 0x3883630, 0x3883430

ISEL: Match complete!
=> 0x3878f80: ch = JAL 0x3883630, 0x3883430

ISEL: Starting pattern match on root node: 0x3883430: ch = store 0x3883a30:1, 0x3883f30, 0x3883d30, 0x3879580<ST4[%5]> [ORD=34] [ID=11]

  Initial Opcode index to 178
  Morphed node: 0x3883430: ch = SW 0x3883f30, 0x3883d30, 0x3878d80, 0x3883a30:1<Mem:ST4[%5]> [ORD=34]

ISEL: Match complete!
=> 0x3883430: ch = SW 0x3883f30, 0x3883d30, 0x3878d80, 0x3883a30:1<Mem:ST4[%5]> [ORD=34]

ISEL: Starting pattern match on root node: 0x3883f30: i32 = add 0x3883a30, 0x3879180 [ORD=33] [ID=10]

  Initial Opcode index to 493
  Morphed node: 0x3883f30: i32 = ADDI 0x3883a30, 0x3883e30 [ORD=33]

ISEL: Match complete!
=> 0x3883f30: i32 = ADDI 0x3883a30, 0x3883e30 [ORD=33]

ISEL: Starting pattern match on root node: 0x3883a30: i32,ch = load 0x3879780, 0x3883d30, 0x3879580<LD4[%5]> [ORD=32] [ID=9]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x3883a30: i32,ch = LW 0x3883d30, 0x3878d80, 0x3879780<Mem:LD4[%5]> [ORD=32]

ISEL: Match complete!
=> 0x3883a30: i32,ch = LW 0x3883d30, 0x3878d80, 0x3879780<Mem:LD4[%5]> [ORD=32]

ISEL: Starting pattern match on root node: 0x3879780: ch = store 0x3883330:1, 0x3883830, 0x3884030, 0x3879580<ST4[%3]> [ORD=31] [ID=8]

  Initial Opcode index to 178
  Morphed node: 0x3879780: ch = SW 0x3883830, 0x3884030, 0x3878d80, 0x3883330:1<Mem:ST4[%3]> [ORD=31]

ISEL: Match complete!
=> 0x3879780: ch = SW 0x3883830, 0x3884030, 0x3878d80, 0x3883330:1<Mem:ST4[%3]> [ORD=31]

ISEL: Starting pattern match on root node: 0x3883830: i32 = add 0x3883330, 0x3879180 [ORD=30] [ID=7]

  Initial Opcode index to 493
  Morphed node: 0x3883830: i32 = ADDI 0x3883330, 0x3883e30 [ORD=30]

ISEL: Match complete!
=> 0x3883830: i32 = ADDI 0x3883330, 0x3883e30 [ORD=30]

ISEL: Starting pattern match on root node: 0x3883330: i32,ch = load 0x385c078, 0x3884030, 0x3879580<LD4[%3]> [ORD=29] [ID=6]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x3883330: i32,ch = LW 0x3884030, 0x3878d80, 0x385c078<Mem:LD4[%3]> [ORD=29]

ISEL: Match complete!
=> 0x3883330: i32,ch = LW 0x3884030, 0x3878d80, 0x385c078<Mem:LD4[%3]> [ORD=29]

=> 0x3883630: ch = BasicBlock<trp_init3.for.cond 0x387f360>

=> 0x385c078: ch = EntryToken [ORD=29]

===== Instruction selection ends:
Selected selection DAG: BB#2 'trp_init3:trp_init3.for.inc'
SelectionDAG has 16 nodes:
    0x3878e80: <multiple use>
    0x3878d80: <multiple use>
    0x385c078: ch = EntryToken [ORD=29]

  0x3883330: i32,ch = LW 0x3878e80, 0x3878d80, 0x385c078<Mem:LD4[%3]> [ORD=29]

    0x3878c80: <multiple use>
    0x3878d80: <multiple use>
        0x3883330: <multiple use>
        0x3883e30: <multiple use>
      0x3883830: i32 = ADDI 0x3883330, 0x3883e30 [ORD=30]

      0x3878e80: <multiple use>
      0x3878d80: <multiple use>
      0x3883330: <multiple use>
    0x3879780: ch = SW 0x3883830, 0x3878e80, 0x3878d80, 0x3883330:1<Mem:ST4[%3]> [ORD=31]

  0x3883a30: i32,ch = LW 0x3878c80, 0x3878d80, 0x3879780<Mem:LD4[%5]> [ORD=32]

  0x3878d80: i32 = TargetConstant<0>

  0x3883e30: i32 = TargetConstant<1>

  0x3879580: i32 = Register %t5

    0x3879580: <multiple use>
    0x3879180: i32 = TargetFrameIndex<4>

  0x3878c80: i32 = ADDI 0x3879580, 0x3879180 [ORD=32]

    0x3879580: <multiple use>
    0x3883d30: i32 = TargetFrameIndex<2>

  0x3878e80: i32 = ADDI 0x3879580, 0x3883d30 [ORD=29]

    0x3883630: ch = BasicBlock<trp_init3.for.cond 0x387f360>

        0x3883a30: <multiple use>
        0x3883e30: <multiple use>
      0x3883f30: i32 = ADDI 0x3883a30, 0x3883e30 [ORD=33]

      0x3878c80: <multiple use>
      0x3878d80: <multiple use>
      0x3883a30: <multiple use>
    0x3883430: ch = SW 0x3883f30, 0x3878c80, 0x3878d80, 0x3883a30:1<Mem:ST4[%5]> [ORD=34]

  0x3878f80: ch = JAL 0x3883630, 0x3883430


********** List Scheduling BB#2 'trp_init3.for.inc' **********
SU(0): 0x3878f80: ch = JAL 0x3883630, 0x3883430 [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x3883430: ch = SW 0x3883f30, 0x3878c80, 0x3878d80, 0x3883a30:1<Mem:ST4[%5]> [ORD=34] [ID=1]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
   val SU(8): Latency=1
   val SU(7): Latency=1
   ch  SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x3883a30: i32,ch = LW 0x3878c80, 0x3878d80, 0x3879780<Mem:LD4[%5]> [ORD=32] [ID=2]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
   val SU(7): Latency=1
   ch  SU(3): Latency=1
  Successors:
   ch  SU(1): Latency=1
   val SU(8): Latency=1

SU(3): 0x3879780: ch = SW 0x3883830, 0x3878e80, 0x3878d80, 0x3883330:1<Mem:ST4[%3]> [ORD=31] [ID=3]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 4
  Predecessors:
   val SU(6): Latency=1
   val SU(5): Latency=1
   ch  SU(4): Latency=1
  Successors:
   ch  SU(2): Latency=1

SU(4): 0x3883330: i32,ch = LW 0x3878e80, 0x3878d80, 0x385c078<Mem:LD4[%3]> [ORD=29] [ID=4]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 6
  Predecessors:
   val SU(5): Latency=1
  Successors:
   ch  SU(3): Latency=1
   val SU(6): Latency=1

SU(5): 0x3878e80: i32 = ADDI 0x3879580, 0x3883d30 [ORD=29] [ID=5]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
   val SU(3): Latency=1
   val SU(4): Latency=1

SU(6): 0x3883830: i32 = ADDI 0x3883330, 0x3883e30 [ORD=30] [ID=6]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 5
  Predecessors:
   val SU(4): Latency=1
  Successors:
   val SU(3): Latency=1

SU(7): 0x3878c80: i32 = ADDI 0x3879580, 0x3879180 [ORD=32] [ID=7]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(1): Latency=1
   val SU(2): Latency=1

SU(8): 0x3883f30: i32 = ADDI 0x3883a30, 0x3883e30 [ORD=33] [ID=8]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
   val SU(2): Latency=1
  Successors:
   val SU(1): Latency=1


Examining Available:
Height 0: SU(0): 0x3878f80: ch = JAL 0x3883630, 0x3883430 [ID=0]


*** Scheduling [0]: SU(0): 0x3878f80: ch = JAL 0x3883630, 0x3883430 [ID=0]


Examining Available:
Height 1: SU(1): 0x3883430: ch = SW 0x3883f30, 0x3878c80, 0x3878d80, 0x3883a30:1<Mem:ST4[%5]> [ORD=34] [ID=1]


*** Scheduling [1]: SU(1): 0x3883430: ch = SW 0x3883f30, 0x3878c80, 0x3878d80, 0x3883a30:1<Mem:ST4[%5]> [ORD=34] [ID=1]


Examining Available:
Height 2: SU(8): 0x3883f30: i32 = ADDI 0x3883a30, 0x3883e30 [ORD=33] [ID=8]


*** Scheduling [2]: SU(8): 0x3883f30: i32 = ADDI 0x3883a30, 0x3883e30 [ORD=33] [ID=8]


Examining Available:
Height 3: SU(2): 0x3883a30: i32,ch = LW 0x3878c80, 0x3878d80, 0x3879780<Mem:LD4[%5]> [ORD=32] [ID=2]


*** Scheduling [3]: SU(2): 0x3883a30: i32,ch = LW 0x3878c80, 0x3878d80, 0x3879780<Mem:LD4[%5]> [ORD=32] [ID=2]


Examining Available:
Height 4: SU(7): 0x3878c80: i32 = ADDI 0x3879580, 0x3879180 [ORD=32] [ID=7]

Height 4: SU(3): 0x3879780: ch = SW 0x3883830, 0x3878e80, 0x3878d80, 0x3883330:1<Mem:ST4[%3]> [ORD=31] [ID=3]


*** Scheduling [4]: SU(7): 0x3878c80: i32 = ADDI 0x3879580, 0x3879180 [ORD=32] [ID=7]


Examining Available:
Height 4: SU(3): 0x3879780: ch = SW 0x3883830, 0x3878e80, 0x3878d80, 0x3883330:1<Mem:ST4[%3]> [ORD=31] [ID=3]


*** Scheduling [5]: SU(3): 0x3879780: ch = SW 0x3883830, 0x3878e80, 0x3878d80, 0x3883330:1<Mem:ST4[%3]> [ORD=31] [ID=3]


Examining Available:
Height 6: SU(6): 0x3883830: i32 = ADDI 0x3883330, 0x3883e30 [ORD=30] [ID=6]


*** Scheduling [6]: SU(6): 0x3883830: i32 = ADDI 0x3883330, 0x3883e30 [ORD=30] [ID=6]


Examining Available:
Height 7: SU(4): 0x3883330: i32,ch = LW 0x3878e80, 0x3878d80, 0x385c078<Mem:LD4[%3]> [ORD=29] [ID=4]


*** Scheduling [7]: SU(4): 0x3883330: i32,ch = LW 0x3878e80, 0x3878d80, 0x385c078<Mem:LD4[%3]> [ORD=29] [ID=4]


Examining Available:
Height 8: SU(5): 0x3878e80: i32 = ADDI 0x3879580, 0x3883d30 [ORD=29] [ID=5]


*** Scheduling [8]: SU(5): 0x3878e80: i32 = ADDI 0x3879580, 0x3883d30 [ORD=29] [ID=5]

*** Final schedule ***
SU(5): 0x3878e80: i32 = ADDI 0x3879580, 0x3883d30 [ORD=29] [ID=5]

SU(4): 0x3883330: i32,ch = LW 0x3878e80, 0x3878d80, 0x385c078<Mem:LD4[%3]> [ORD=29] [ID=4]

SU(6): 0x3883830: i32 = ADDI 0x3883330, 0x3883e30 [ORD=30] [ID=6]

SU(3): 0x3879780: ch = SW 0x3883830, 0x3878e80, 0x3878d80, 0x3883330:1<Mem:ST4[%3]> [ORD=31] [ID=3]

SU(7): 0x3878c80: i32 = ADDI 0x3879580, 0x3879180 [ORD=32] [ID=7]

SU(2): 0x3883a30: i32,ch = LW 0x3878c80, 0x3878d80, 0x3879780<Mem:LD4[%5]> [ORD=32] [ID=2]

SU(8): 0x3883f30: i32 = ADDI 0x3883a30, 0x3883e30 [ORD=33] [ID=8]

SU(1): 0x3883430: ch = SW 0x3883f30, 0x3878c80, 0x3878d80, 0x3883a30:1<Mem:ST4[%5]> [ORD=34] [ID=1]

SU(0): 0x3878f80: ch = JAL 0x3883630, 0x3883430 [ID=0]


Total amount of phi nodes to update: 0
# Machine code for function trp_init3: SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %trp_init3.entry
16B		%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
48B		SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
64B		%vreg2<def> = LUI <ga:@redefine_in_placeholder>[TF=2]; GR32Bit:%vreg2
80B		%vreg3<def> = ADDI %zero, <ga:@redefine_in_placeholder>[TF=3]; GR32Bit:%vreg3
96B		%vreg4<def> = ADD %vreg3<kill>, %vreg2<kill>; GR32Bit:%vreg4,%vreg3,%vreg2
112B		%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[@redefine_in_placeholder] GR32Bit:%vreg5,%vreg4
128B		SW %vreg5<kill>, %vreg1, 0; mem:ST4[%8](align=16) GR32Bit:%vreg5,%vreg1
144B		%vreg6<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg6,%vreg0
160B		SW %zero, %vreg6<kill>, 4; mem:ST4[%10] GR32Bit:%vreg6
176B		%vreg7<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg7,%vreg0
192B		%vreg8<def> = ADDI %zero, 1; GR32Bit:%vreg8
208B		SW %vreg8<kill>, %vreg7<kill>, 8; mem:ST4[%12] GR32Bit:%vreg8,%vreg7
224B		%vreg9<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg9
240B		SW %zero, %vreg9<kill>, 0; mem:ST4[%3] GR32Bit:%vreg9
256B		%vreg10<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg10
272B		SW %zero, %vreg10<kill>, 0; mem:ST4[%5] GR32Bit:%vreg10
	    Successors according to CFG: BB#1

288B	BB#1: derived from LLVM BB %trp_init3.for.cond
	    Predecessors according to CFG: BB#0 BB#2
304B		%vreg11<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg11
320B		%vreg12<def> = LW %vreg11<kill>, 0; mem:LD4[%5] GR32Bit:%vreg12,%vreg11
336B		%vreg13<def> = ADDI %zero, 4; GR32Bit:%vreg13
352B		BGT <BB#3>, %vreg12<kill>, %vreg13<kill>; GR32Bit:%vreg12,%vreg13
368B		JAL <BB#2>
	    Successors according to CFG: BB#2(124) BB#3(4)

384B	BB#2: derived from LLVM BB %trp_init3.for.inc
	    Predecessors according to CFG: BB#1
400B		%vreg18<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg18
416B		%vreg19<def> = LW %vreg18, 0; mem:LD4[%3] GR32Bit:%vreg19,%vreg18
432B		%vreg20<def> = ADDI %vreg19<kill>, 1; GR32Bit:%vreg20,%vreg19
448B		SW %vreg20<kill>, %vreg18, 0; mem:ST4[%3] GR32Bit:%vreg20,%vreg18
464B		%vreg21<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg21
480B		%vreg22<def> = LW %vreg21, 0; mem:LD4[%5] GR32Bit:%vreg22,%vreg21
496B		%vreg23<def> = ADDI %vreg22<kill>, 1; GR32Bit:%vreg23,%vreg22
512B		SW %vreg23<kill>, %vreg21, 0; mem:ST4[%5] GR32Bit:%vreg23,%vreg21
528B		JAL <BB#1>
	    Successors according to CFG: BB#1

544B	BB#3: derived from LLVM BB %trp_init3.return
	    Predecessors according to CFG: BB#1
560B		%vreg14<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg14
576B		%vreg15<def> = LW %vreg14, 0; mem:LD4[%3] GR32Bit:%vreg15,%vreg14
592B		%vreg16<def> = ANDI %vreg15<kill>, 2; GR32Bit:%vreg16,%vreg15
608B		SW %vreg16, %vreg14, 0; mem:ST4[%3] GR32Bit:%vreg16,%vreg14
624B		%vreg17<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg17
640B		SW %vreg16, %vreg17<kill>, 0; mem:ST4[%1] GR32Bit:%vreg16,%vreg17

# End machine code for function trp_init3.

********** Stack Coloring **********
********** Function: trp_init3
Found 0 markers and 5 slots
Slot structure:
Slot #0 - 4 bytes.
Slot #1 - 4 bytes.
Slot #2 - 4 bytes.
Slot #3 - 4 bytes.
Slot #4 - 4 bytes.
Total Stack size: 20 bytes

Will not try to merge slots.
Removed 0 markers.
******** Pre-regalloc Machine LICM: trp_init3 ********
Entering: trp_init3.for.cond
Can't remat / high reg-pressure: %vreg11<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg11
Can't remat / high reg-pressure: %vreg13<def> = ADDI %zero, 4; GR32Bit:%vreg13
Entering: trp_init3.for.inc
Won't speculate: %vreg18<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg18
Won't speculate: %vreg21<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg21
Exiting: trp_init3.for.inc
******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: trp_init3
********** PROCESS IMPLICIT DEFS **********
********** Function: trp_init3
********** REWRITING TWO-ADDR INSTRS **********
********** Function: trp_init3
# Machine code for function trp_init3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %trp_init3.entry
16B		%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
48B		SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
64B		%vreg2<def> = LUI <ga:@redefine_in_placeholder>[TF=2]; GR32Bit:%vreg2
80B		%vreg3<def> = ADDI %zero, <ga:@redefine_in_placeholder>[TF=3]; GR32Bit:%vreg3
96B		%vreg4<def> = ADD %vreg3<kill>, %vreg2<kill>; GR32Bit:%vreg4,%vreg3,%vreg2
112B		%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[@redefine_in_placeholder] GR32Bit:%vreg5,%vreg4
128B		SW %vreg5<kill>, %vreg1<kill>, 0; mem:ST4[%8](align=16) GR32Bit:%vreg5,%vreg1
144B		%vreg6<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg6,%vreg0
160B		SW %zero, %vreg6<kill>, 4; mem:ST4[%10] GR32Bit:%vreg6
176B		%vreg7<def> = LW %vreg0<kill>, 0; mem:LD4[%2] GR32Bit:%vreg7,%vreg0
192B		%vreg8<def> = ADDI %zero, 1; GR32Bit:%vreg8
208B		SW %vreg8<kill>, %vreg7<kill>, 8; mem:ST4[%12] GR32Bit:%vreg8,%vreg7
224B		%vreg9<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg9
240B		SW %zero, %vreg9<kill>, 0; mem:ST4[%3] GR32Bit:%vreg9
256B		%vreg10<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg10
272B		SW %zero, %vreg10<kill>, 0; mem:ST4[%5] GR32Bit:%vreg10
	    Successors according to CFG: BB#1

288B	BB#1: derived from LLVM BB %trp_init3.for.cond
	    Predecessors according to CFG: BB#0 BB#2
304B		%vreg11<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg11
320B		%vreg12<def> = LW %vreg11<kill>, 0; mem:LD4[%5] GR32Bit:%vreg12,%vreg11
336B		%vreg13<def> = ADDI %zero, 4; GR32Bit:%vreg13
352B		BGT <BB#3>, %vreg12<kill>, %vreg13<kill>; GR32Bit:%vreg12,%vreg13
368B		JAL <BB#2>
	    Successors according to CFG: BB#2(124) BB#3(4)

384B	BB#2: derived from LLVM BB %trp_init3.for.inc
	    Predecessors according to CFG: BB#1
400B		%vreg18<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg18
416B		%vreg19<def> = LW %vreg18, 0; mem:LD4[%3] GR32Bit:%vreg19,%vreg18
432B		%vreg20<def> = ADDI %vreg19<kill>, 1; GR32Bit:%vreg20,%vreg19
448B		SW %vreg20<kill>, %vreg18<kill>, 0; mem:ST4[%3] GR32Bit:%vreg20,%vreg18
464B		%vreg21<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg21
480B		%vreg22<def> = LW %vreg21, 0; mem:LD4[%5] GR32Bit:%vreg22,%vreg21
496B		%vreg23<def> = ADDI %vreg22<kill>, 1; GR32Bit:%vreg23,%vreg22
512B		SW %vreg23<kill>, %vreg21<kill>, 0; mem:ST4[%5] GR32Bit:%vreg23,%vreg21
528B		JAL <BB#1>
	    Successors according to CFG: BB#1

544B	BB#3: derived from LLVM BB %trp_init3.return
	    Predecessors according to CFG: BB#1
560B		%vreg14<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg14
576B		%vreg15<def> = LW %vreg14, 0; mem:LD4[%3] GR32Bit:%vreg15,%vreg14
592B		%vreg16<def> = ANDI %vreg15<kill>, 2; GR32Bit:%vreg16,%vreg15
608B		SW %vreg16, %vreg14<kill>, 0; mem:ST4[%3] GR32Bit:%vreg16,%vreg14
624B		%vreg17<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg17
640B		SW %vreg16<kill>, %vreg17<kill>, 0; mem:ST4[%1] GR32Bit:%vreg16,%vreg17

# End machine code for function trp_init3.

Computing live-in reg-units in ABI blocks.
Created 0 new intervals.
********** INTERVALS **********
%vreg0 = [16r,176r:0)  0@16r
%vreg1 = [32r,128r:0)  0@32r
%vreg2 = [64r,96r:0)  0@64r
%vreg3 = [80r,96r:0)  0@80r
%vreg4 = [96r,112r:0)  0@96r
%vreg5 = [112r,128r:0)  0@112r
%vreg6 = [144r,160r:0)  0@144r
%vreg7 = [176r,208r:0)  0@176r
%vreg8 = [192r,208r:0)  0@192r
%vreg9 = [224r,240r:0)  0@224r
%vreg10 = [256r,272r:0)  0@256r
%vreg11 = [304r,320r:0)  0@304r
%vreg12 = [320r,352r:0)  0@320r
%vreg13 = [336r,352r:0)  0@336r
%vreg14 = [560r,608r:0)  0@560r
%vreg15 = [576r,592r:0)  0@576r
%vreg16 = [592r,640r:0)  0@592r
%vreg17 = [624r,640r:0)  0@624r
%vreg18 = [400r,448r:0)  0@400r
%vreg19 = [416r,432r:0)  0@416r
%vreg20 = [432r,448r:0)  0@432r
%vreg21 = [464r,512r:0)  0@464r
%vreg22 = [480r,496r:0)  0@480r
%vreg23 = [496r,512r:0)  0@496r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function trp_init3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %trp_init3.entry
16B		%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
48B		SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
64B		%vreg2<def> = LUI <ga:@redefine_in_placeholder>[TF=2]; GR32Bit:%vreg2
80B		%vreg3<def> = ADDI %zero, <ga:@redefine_in_placeholder>[TF=3]; GR32Bit:%vreg3
96B		%vreg4<def> = ADD %vreg3, %vreg2; GR32Bit:%vreg4,%vreg3,%vreg2
112B		%vreg5<def> = LW %vreg4, 0; mem:LD4[@redefine_in_placeholder] GR32Bit:%vreg5,%vreg4
128B		SW %vreg5, %vreg1, 0; mem:ST4[%8](align=16) GR32Bit:%vreg5,%vreg1
144B		%vreg6<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg6,%vreg0
160B		SW %zero, %vreg6, 4; mem:ST4[%10] GR32Bit:%vreg6
176B		%vreg7<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg7,%vreg0
192B		%vreg8<def> = ADDI %zero, 1; GR32Bit:%vreg8
208B		SW %vreg8, %vreg7, 8; mem:ST4[%12] GR32Bit:%vreg8,%vreg7
224B		%vreg9<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg9
240B		SW %zero, %vreg9, 0; mem:ST4[%3] GR32Bit:%vreg9
256B		%vreg10<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg10
272B		SW %zero, %vreg10, 0; mem:ST4[%5] GR32Bit:%vreg10
	    Successors according to CFG: BB#1

288B	BB#1: derived from LLVM BB %trp_init3.for.cond
	    Predecessors according to CFG: BB#0 BB#2
304B		%vreg11<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg11
320B		%vreg12<def> = LW %vreg11, 0; mem:LD4[%5] GR32Bit:%vreg12,%vreg11
336B		%vreg13<def> = ADDI %zero, 4; GR32Bit:%vreg13
352B		BGT <BB#3>, %vreg12, %vreg13; GR32Bit:%vreg12,%vreg13
368B		JAL <BB#2>
	    Successors according to CFG: BB#2(124) BB#3(4)

384B	BB#2: derived from LLVM BB %trp_init3.for.inc
	    Predecessors according to CFG: BB#1
400B		%vreg18<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg18
416B		%vreg19<def> = LW %vreg18, 0; mem:LD4[%3] GR32Bit:%vreg19,%vreg18
432B		%vreg20<def> = ADDI %vreg19, 1; GR32Bit:%vreg20,%vreg19
448B		SW %vreg20, %vreg18, 0; mem:ST4[%3] GR32Bit:%vreg20,%vreg18
464B		%vreg21<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg21
480B		%vreg22<def> = LW %vreg21, 0; mem:LD4[%5] GR32Bit:%vreg22,%vreg21
496B		%vreg23<def> = ADDI %vreg22, 1; GR32Bit:%vreg23,%vreg22
512B		SW %vreg23, %vreg21, 0; mem:ST4[%5] GR32Bit:%vreg23,%vreg21
528B		JAL <BB#1>
	    Successors according to CFG: BB#1

544B	BB#3: derived from LLVM BB %trp_init3.return
	    Predecessors according to CFG: BB#1
560B		%vreg14<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg14
576B		%vreg15<def> = LW %vreg14, 0; mem:LD4[%3] GR32Bit:%vreg15,%vreg14
592B		%vreg16<def> = ANDI %vreg15, 2; GR32Bit:%vreg16,%vreg15
608B		SW %vreg16, %vreg14, 0; mem:ST4[%3] GR32Bit:%vreg16,%vreg14
624B		%vreg17<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg17
640B		SW %vreg16, %vreg17, 0; mem:ST4[%1] GR32Bit:%vreg16,%vreg17

# End machine code for function trp_init3.

********** SIMPLE REGISTER COALESCING **********
********** Function: trp_init3
********** JOINING INTERVALS ***********
trp_init3.for.cond:
trp_init3.for.inc:
trp_init3.entry:
trp_init3.return:
Trying to inflate 0 regs.
********** INTERVALS **********
%vreg0 = [16r,176r:0)  0@16r
%vreg1 = [32r,128r:0)  0@32r
%vreg2 = [64r,96r:0)  0@64r
%vreg3 = [80r,96r:0)  0@80r
%vreg4 = [96r,112r:0)  0@96r
%vreg5 = [112r,128r:0)  0@112r
%vreg6 = [144r,160r:0)  0@144r
%vreg7 = [176r,208r:0)  0@176r
%vreg8 = [192r,208r:0)  0@192r
%vreg9 = [224r,240r:0)  0@224r
%vreg10 = [256r,272r:0)  0@256r
%vreg11 = [304r,320r:0)  0@304r
%vreg12 = [320r,352r:0)  0@320r
%vreg13 = [336r,352r:0)  0@336r
%vreg14 = [560r,608r:0)  0@560r
%vreg15 = [576r,592r:0)  0@576r
%vreg16 = [592r,640r:0)  0@592r
%vreg17 = [624r,640r:0)  0@624r
%vreg18 = [400r,448r:0)  0@400r
%vreg19 = [416r,432r:0)  0@416r
%vreg20 = [432r,448r:0)  0@432r
%vreg21 = [464r,512r:0)  0@464r
%vreg22 = [480r,496r:0)  0@480r
%vreg23 = [496r,512r:0)  0@496r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function trp_init3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %trp_init3.entry
16B		%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
48B		SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
64B		%vreg2<def> = LUI <ga:@redefine_in_placeholder>[TF=2]; GR32Bit:%vreg2
80B		%vreg3<def> = ADDI %zero, <ga:@redefine_in_placeholder>[TF=3]; GR32Bit:%vreg3
96B		%vreg4<def> = ADD %vreg3, %vreg2; GR32Bit:%vreg4,%vreg3,%vreg2
112B		%vreg5<def> = LW %vreg4, 0; mem:LD4[@redefine_in_placeholder] GR32Bit:%vreg5,%vreg4
128B		SW %vreg5, %vreg1, 0; mem:ST4[%8](align=16) GR32Bit:%vreg5,%vreg1
144B		%vreg6<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg6,%vreg0
160B		SW %zero, %vreg6, 4; mem:ST4[%10] GR32Bit:%vreg6
176B		%vreg7<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg7,%vreg0
192B		%vreg8<def> = ADDI %zero, 1; GR32Bit:%vreg8
208B		SW %vreg8, %vreg7, 8; mem:ST4[%12] GR32Bit:%vreg8,%vreg7
224B		%vreg9<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg9
240B		SW %zero, %vreg9, 0; mem:ST4[%3] GR32Bit:%vreg9
256B		%vreg10<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg10
272B		SW %zero, %vreg10, 0; mem:ST4[%5] GR32Bit:%vreg10
	    Successors according to CFG: BB#1

288B	BB#1: derived from LLVM BB %trp_init3.for.cond
	    Predecessors according to CFG: BB#0 BB#2
304B		%vreg11<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg11
320B		%vreg12<def> = LW %vreg11, 0; mem:LD4[%5] GR32Bit:%vreg12,%vreg11
336B		%vreg13<def> = ADDI %zero, 4; GR32Bit:%vreg13
352B		BGT <BB#3>, %vreg12, %vreg13; GR32Bit:%vreg12,%vreg13
368B		JAL <BB#2>
	    Successors according to CFG: BB#2(124) BB#3(4)

384B	BB#2: derived from LLVM BB %trp_init3.for.inc
	    Predecessors according to CFG: BB#1
400B		%vreg18<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg18
416B		%vreg19<def> = LW %vreg18, 0; mem:LD4[%3] GR32Bit:%vreg19,%vreg18
432B		%vreg20<def> = ADDI %vreg19, 1; GR32Bit:%vreg20,%vreg19
448B		SW %vreg20, %vreg18, 0; mem:ST4[%3] GR32Bit:%vreg20,%vreg18
464B		%vreg21<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg21
480B		%vreg22<def> = LW %vreg21, 0; mem:LD4[%5] GR32Bit:%vreg22,%vreg21
496B		%vreg23<def> = ADDI %vreg22, 1; GR32Bit:%vreg23,%vreg22
512B		SW %vreg23, %vreg21, 0; mem:ST4[%5] GR32Bit:%vreg23,%vreg21
528B		JAL <BB#1>
	    Successors according to CFG: BB#1

544B	BB#3: derived from LLVM BB %trp_init3.return
	    Predecessors according to CFG: BB#1
560B		%vreg14<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg14
576B		%vreg15<def> = LW %vreg14, 0; mem:LD4[%3] GR32Bit:%vreg15,%vreg14
592B		%vreg16<def> = ANDI %vreg15, 2; GR32Bit:%vreg16,%vreg15
608B		SW %vreg16, %vreg14, 0; mem:ST4[%3] GR32Bit:%vreg16,%vreg14
624B		%vreg17<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg17
640B		SW %vreg16, %vreg17, 0; mem:ST4[%1] GR32Bit:%vreg16,%vreg17

# End machine code for function trp_init3.

Before MISched:
# Machine code for function trp_init3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %trp_init3.entry
	%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
	%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
	SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
	%vreg2<def> = LUI <ga:@redefine_in_placeholder>[TF=2]; GR32Bit:%vreg2
	%vreg3<def> = ADDI %zero, <ga:@redefine_in_placeholder>[TF=3]; GR32Bit:%vreg3
	%vreg4<def> = ADD %vreg3, %vreg2; GR32Bit:%vreg4,%vreg3,%vreg2
	%vreg5<def> = LW %vreg4, 0; mem:LD4[@redefine_in_placeholder] GR32Bit:%vreg5,%vreg4
	SW %vreg5, %vreg1, 0; mem:ST4[%8](align=16) GR32Bit:%vreg5,%vreg1
	%vreg6<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg6,%vreg0
	SW %zero, %vreg6, 4; mem:ST4[%10] GR32Bit:%vreg6
	%vreg7<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg7,%vreg0
	%vreg8<def> = ADDI %zero, 1; GR32Bit:%vreg8
	SW %vreg8, %vreg7, 8; mem:ST4[%12] GR32Bit:%vreg8,%vreg7
	%vreg9<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg9
	SW %zero, %vreg9, 0; mem:ST4[%3] GR32Bit:%vreg9
	%vreg10<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg10
	SW %zero, %vreg10, 0; mem:ST4[%5] GR32Bit:%vreg10
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %trp_init3.for.cond
    Predecessors according to CFG: BB#0 BB#2
	%vreg11<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg11
	%vreg12<def> = LW %vreg11, 0; mem:LD4[%5] GR32Bit:%vreg12,%vreg11
	%vreg13<def> = ADDI %zero, 4; GR32Bit:%vreg13
	BGT <BB#3>, %vreg12, %vreg13; GR32Bit:%vreg12,%vreg13
	JAL <BB#2>
    Successors according to CFG: BB#2(124) BB#3(4)

BB#2: derived from LLVM BB %trp_init3.for.inc
    Predecessors according to CFG: BB#1
	%vreg18<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg18
	%vreg19<def> = LW %vreg18, 0; mem:LD4[%3] GR32Bit:%vreg19,%vreg18
	%vreg20<def> = ADDI %vreg19, 1; GR32Bit:%vreg20,%vreg19
	SW %vreg20, %vreg18, 0; mem:ST4[%3] GR32Bit:%vreg20,%vreg18
	%vreg21<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg21
	%vreg22<def> = LW %vreg21, 0; mem:LD4[%5] GR32Bit:%vreg22,%vreg21
	%vreg23<def> = ADDI %vreg22, 1; GR32Bit:%vreg23,%vreg22
	SW %vreg23, %vreg21, 0; mem:ST4[%5] GR32Bit:%vreg23,%vreg21
	JAL <BB#1>
    Successors according to CFG: BB#1

BB#3: derived from LLVM BB %trp_init3.return
    Predecessors according to CFG: BB#1
	%vreg14<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg14
	%vreg15<def> = LW %vreg14, 0; mem:LD4[%3] GR32Bit:%vreg15,%vreg14
	%vreg16<def> = ANDI %vreg15, 2; GR32Bit:%vreg16,%vreg15
	SW %vreg16, %vreg14, 0; mem:ST4[%3] GR32Bit:%vreg16,%vreg14
	%vreg17<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg17
	SW %vreg16, %vreg17, 0; mem:ST4[%1] GR32Bit:%vreg16,%vreg17

# End machine code for function trp_init3.


-------------
Starting new basic block BB#0
********** MI Scheduling **********
trp_init3:BB#0 trp_init3.entry
  From: %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
    To: End Remaining: 0
Max Pressure: GR32Bit=4
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 4
Excess PSets: 
6 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 1
  SU(4) in tree 1
  SU(5) in tree 1
  SU(6) in tree 1
  SU(7) in tree 1
  SU(8) in tree 2
  SU(9) in tree 2
  SU(10) in tree 3
  SU(11) in tree 3
  SU(12) in tree 3
  SU(13) in tree 4
  SU(14) in tree 4
  SU(15) in tree 5
  SU(16) in tree 5
SU(0):   %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 37
  Successors:
   val SU(10): Latency=5 Reg=%vreg0
   val SU(8): Latency=5 Reg=%vreg0
   val SU(2): Latency=5 Reg=%vreg0

SU(1):   %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 37
  Successors:
   val SU(7): Latency=5 Reg=%vreg1
   val SU(2): Latency=4 Reg=%vreg1

SU(2):   SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 5
  Height             : 32
  Predecessors:
   val SU(1): Latency=4 Reg=%vreg1
   val SU(0): Latency=5 Reg=%vreg0
  Successors:
   ch  SU(7): Latency=0
   ch  SU(4294967295) *: Latency=0

SU(3):   %vreg2<def> = LUI <ga:@redefine_in_placeholder>[TF=2]; GR32Bit:%vreg2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 44
  Successors:
   val SU(5): Latency=5 Reg=%vreg2

SU(4):   %vreg3<def> = ADDI %zero, <ga:@redefine_in_placeholder>[TF=3]; GR32Bit:%vreg3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 44
  Successors:
   val SU(5): Latency=5 Reg=%vreg3

SU(5):   %vreg4<def> = ADD %vreg3, %vreg2; GR32Bit:%vreg4,%vreg3,%vreg2
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 39
  Predecessors:
   val SU(4): Latency=5 Reg=%vreg3
   val SU(3): Latency=5 Reg=%vreg2
  Successors:
   val SU(6): Latency=5 Reg=%vreg4

SU(6):   %vreg5<def> = LW %vreg4, 0; mem:LD4[@redefine_in_placeholder] GR32Bit:%vreg5,%vreg4
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 34
  Predecessors:
   val SU(5): Latency=5 Reg=%vreg4
  Successors:
   val SU(7): Latency=2 Reg=%vreg5
   ch  SU(7): Latency=0

SU(7):   SW %vreg5, %vreg1, 0; mem:ST4[%8](align=16) GR32Bit:%vreg5,%vreg1
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 12
  Height             : 32
  Predecessors:
   val SU(6): Latency=2 Reg=%vreg5
   val SU(1): Latency=5 Reg=%vreg1
   ch  SU(6): Latency=0
   ch  SU(2): Latency=0
  Successors:
   ch  SU(9): Latency=0
   ch  SU(8): Latency=1

SU(8):   %vreg6<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg6,%vreg0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 13
  Height             : 31
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg0
   ch  SU(7): Latency=1
  Successors:
   val SU(9): Latency=15 Reg=%vreg6
   ch  SU(9): Latency=0

SU(9):   SW %zero, %vreg6, 4; mem:ST4[%10] GR32Bit:%vreg6
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 28
  Height             : 16
  Predecessors:
   val SU(8): Latency=15 Reg=%vreg6
   ch  SU(8): Latency=0
   ch  SU(7): Latency=0
  Successors:
   ch  SU(12): Latency=0
   ch  SU(10): Latency=1

SU(10):   %vreg7<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg7,%vreg0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 29
  Height             : 15
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg0
   ch  SU(9): Latency=1
  Successors:
   val SU(12): Latency=15 Reg=%vreg7
   ch  SU(12): Latency=0

SU(11):   %vreg8<def> = ADDI %zero, 1; GR32Bit:%vreg8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
   val SU(12): Latency=4 Reg=%vreg8

SU(12):   SW %vreg8, %vreg7, 8; mem:ST4[%12] GR32Bit:%vreg8,%vreg7
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 44
  Height             : 0
  Predecessors:
   val SU(10): Latency=15 Reg=%vreg7
   val SU(11): Latency=4 Reg=%vreg8
   ch  SU(10): Latency=0
   ch  SU(9): Latency=0
  Successors:
   ch  SU(16): Latency=0
   ch  SU(14): Latency=0

SU(13):   %vreg9<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(14): Latency=5 Reg=%vreg9

SU(14):   SW %zero, %vreg9, 0; mem:ST4[%3] GR32Bit:%vreg9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 44
  Height             : 0
  Predecessors:
   val SU(13): Latency=5 Reg=%vreg9
   ch  SU(12): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(15):   %vreg10<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg10
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(16): Latency=5 Reg=%vreg10

SU(16):   SW %zero, %vreg10, 0; mem:ST4[%5] GR32Bit:%vreg10
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 44
  Height             : 0
  Predecessors:
   val SU(15): Latency=5 Reg=%vreg10
   ch  SU(12): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 37
  Successors:
   val SU(10): Latency=5 Reg=%vreg0
   val SU(8): Latency=5 Reg=%vreg0
   val SU(2): Latency=5 Reg=%vreg0

SU(1):   %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 37
  Successors:
   val SU(7): Latency=5 Reg=%vreg1
   val SU(2): Latency=4 Reg=%vreg1

SU(2):   SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 5
  Height             : 32
  Predecessors:
   val SU(1): Latency=4 Reg=%vreg1
   val SU(0): Latency=5 Reg=%vreg0
  Successors:
   ch  SU(7): Latency=0
   ch  SU(4294967295) *: Latency=0

SU(3):   %vreg2<def> = LUI <ga:@redefine_in_placeholder>[TF=2]; GR32Bit:%vreg2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 44
  Successors:
   val SU(5): Latency=5 Reg=%vreg2

SU(4):   %vreg3<def> = ADDI %zero, <ga:@redefine_in_placeholder>[TF=3]; GR32Bit:%vreg3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 44
  Successors:
   val SU(5): Latency=5 Reg=%vreg3

SU(5):   %vreg4<def> = ADD %vreg3, %vreg2; GR32Bit:%vreg4,%vreg3,%vreg2
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 39
  Predecessors:
   val SU(4): Latency=5 Reg=%vreg3
   val SU(3): Latency=5 Reg=%vreg2
  Successors:
   val SU(6): Latency=5 Reg=%vreg4

SU(6):   %vreg5<def> = LW %vreg4, 0; mem:LD4[@redefine_in_placeholder] GR32Bit:%vreg5,%vreg4
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 34
  Predecessors:
   val SU(5): Latency=5 Reg=%vreg4
  Successors:
   val SU(7): Latency=2 Reg=%vreg5
   ch  SU(7): Latency=0

SU(7):   SW %vreg5, %vreg1, 0; mem:ST4[%8](align=16) GR32Bit:%vreg5,%vreg1
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 12
  Height             : 32
  Predecessors:
   val SU(6): Latency=2 Reg=%vreg5
   val SU(1): Latency=5 Reg=%vreg1
   ch  SU(6): Latency=0
   ch  SU(2): Latency=0
  Successors:
   ch  SU(9): Latency=0
   ch  SU(8): Latency=1

SU(8):   %vreg6<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg6,%vreg0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 13
  Height             : 31
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg0
   ch  SU(7): Latency=1
  Successors:
   val SU(9): Latency=15 Reg=%vreg6
   ch  SU(9): Latency=0

SU(9):   SW %zero, %vreg6, 4; mem:ST4[%10] GR32Bit:%vreg6
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 28
  Height             : 16
  Predecessors:
   val SU(8): Latency=15 Reg=%vreg6
   ch  SU(8): Latency=0
   ch  SU(7): Latency=0
  Successors:
   ch  SU(12): Latency=0
   ch  SU(10): Latency=1

SU(10):   %vreg7<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg7,%vreg0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 29
  Height             : 15
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg0
   ch  SU(9): Latency=1
  Successors:
   val SU(12): Latency=15 Reg=%vreg7
   ch  SU(12): Latency=0

SU(11):   %vreg8<def> = ADDI %zero, 1; GR32Bit:%vreg8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
   val SU(12): Latency=4 Reg=%vreg8

SU(12):   SW %vreg8, %vreg7, 8; mem:ST4[%12] GR32Bit:%vreg8,%vreg7
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 44
  Height             : 0
  Predecessors:
   val SU(10): Latency=15 Reg=%vreg7
   val SU(11): Latency=4 Reg=%vreg8
   ch  SU(10): Latency=0
   ch  SU(9): Latency=0
  Successors:
   ch  SU(16): Latency=0
   ch  SU(14): Latency=0

SU(13):   %vreg9<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(14): Latency=5 Reg=%vreg9

SU(14):   SW %zero, %vreg9, 0; mem:ST4[%3] GR32Bit:%vreg9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 44
  Height             : 0
  Predecessors:
   val SU(13): Latency=5 Reg=%vreg9
   ch  SU(12): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(15):   %vreg10<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg10
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(16): Latency=5 Reg=%vreg10

SU(16):   SW %zero, %vreg10, 0; mem:ST4[%5] GR32Bit:%vreg10
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 44
  Height             : 0
  Predecessors:
   val SU(15): Latency=5 Reg=%vreg10
   ch  SU(12): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(15)  ILP: 1 / 1 = 1 Tree: 5 @0
Scheduling %vreg10<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg10
handleMove 256B -> 8B: %vreg10<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg10
     %vreg10:	[256r,272r:0)  0@256r
        -->	[8r,272r:0)  0@8r
     t5:	EMPTY
        -->	EMPTY
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
Pick node SU(1)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
Pick node SU(2)  ILP: 3 / 6 = 0.5 Tree: 0 @0
Scheduling SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
Pick node SU(13)  ILP: 1 / 1 = 1 Tree: 4 @0
Scheduling %vreg9<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg9
handleMove 224B -> 56B: %vreg9<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg9
     %vreg9:	[224r,240r:0)  0@224r
        -->	[56r,240r:0)  0@56r
     t5:	EMPTY
        -->	EMPTY
Pick node SU(4)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg3<def> = ADDI %zero, <ga:@redefine_in_placeholder>[TF=3]; GR32Bit:%vreg3
handleMove 80B -> 60B: %vreg3<def> = ADDI %zero, <ga:@redefine_in_placeholder>[TF=3]; GR32Bit:%vreg3
     %vreg3:	[80r,96r:0)  0@80r
        -->	[60r,96r:0)  0@60r
     zero:	EMPTY
        -->	EMPTY
Pick node SU(3)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg2<def> = LUI <ga:@redefine_in_placeholder>[TF=2]; GR32Bit:%vreg2
Pick node SU(5)  ILP: 3 / 6 = 0.5 Tree: 1 @0
Scheduling %vreg4<def> = ADD %vreg3, %vreg2; GR32Bit:%vreg4,%vreg3,%vreg2
Pick node SU(6)  ILP: 4 / 11 = 0.363636 Tree: 1 @0
Scheduling %vreg5<def> = LW %vreg4, 0; mem:LD4[@redefine_in_placeholder] GR32Bit:%vreg5,%vreg4
Pick node SU(7)  ILP: 5 / 13 = 0.384615 Tree: 1 @0
Scheduling SW %vreg5, %vreg1, 0; mem:ST4[%8](align=16) GR32Bit:%vreg5,%vreg1
Pick node SU(11)  ILP: 1 / 1 = 1 Tree: 3 @0
Scheduling %vreg8<def> = ADDI %zero, 1; GR32Bit:%vreg8
handleMove 192B -> 136B: %vreg8<def> = ADDI %zero, 1; GR32Bit:%vreg8
     %vreg8:	[192r,208r:0)  0@192r
        -->	[136r,208r:0)  0@136r
     zero:	EMPTY
        -->	EMPTY
Pick node SU(8)  ILP: 1 / 14 = 0.0714286 Tree: 2 @0
Scheduling %vreg6<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg6,%vreg0
Pick node SU(9)  ILP: 2 / 29 = 0.0689655 Tree: 2 @0
Scheduling SW %zero, %vreg6, 4; mem:ST4[%10] GR32Bit:%vreg6
Pick node SU(10)  ILP: 1 / 30 = 0.0333333 Tree: 3 @0
Scheduling %vreg7<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg7,%vreg0
Pick node SU(12)  ILP: 3 / 45 = 0.0666667 Tree: 3 @0
Scheduling SW %vreg8, %vreg7, 8; mem:ST4[%12] GR32Bit:%vreg8,%vreg7
Pick node SU(16)  ILP: 2 / 45 = 0.0444444 Tree: 5 @0
Scheduling SW %zero, %vreg10, 0; mem:ST4[%5] GR32Bit:%vreg10
handleMove 272B -> 216B: SW %zero, %vreg10, 0; mem:ST4[%5] GR32Bit:%vreg10
     zero:	EMPTY
        -->	EMPTY
     %vreg10:	[8r,272r:0)  0@8r
        -->	[8r,216r:0)  0@8r
Pick node SU(14)  ILP: 2 / 45 = 0.0444444 Tree: 4 @0
Scheduling SW %zero, %vreg9, 0; mem:ST4[%3] GR32Bit:%vreg9
*** Final schedule for BB#0 ***
SU(15):   %vreg10<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg10
SU(0):   %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
SU(1):   %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
SU(2):   SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
SU(13):   %vreg9<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg9
SU(4):   %vreg3<def> = ADDI %zero, <ga:@redefine_in_placeholder>[TF=3]; GR32Bit:%vreg3
SU(3):   %vreg2<def> = LUI <ga:@redefine_in_placeholder>[TF=2]; GR32Bit:%vreg2
SU(5):   %vreg4<def> = ADD %vreg3, %vreg2; GR32Bit:%vreg4,%vreg3,%vreg2
SU(6):   %vreg5<def> = LW %vreg4, 0; mem:LD4[@redefine_in_placeholder] GR32Bit:%vreg5,%vreg4
SU(7):   SW %vreg5, %vreg1, 0; mem:ST4[%8](align=16) GR32Bit:%vreg5,%vreg1
SU(11):   %vreg8<def> = ADDI %zero, 1; GR32Bit:%vreg8
SU(8):   %vreg6<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg6,%vreg0
SU(9):   SW %zero, %vreg6, 4; mem:ST4[%10] GR32Bit:%vreg6
SU(10):   %vreg7<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg7,%vreg0
SU(12):   SW %vreg8, %vreg7, 8; mem:ST4[%12] GR32Bit:%vreg8,%vreg7
SU(16):   SW %zero, %vreg10, 0; mem:ST4[%5] GR32Bit:%vreg10
SU(14):   SW %zero, %vreg9, 0; mem:ST4[%3] GR32Bit:%vreg9


*** Renumbered SlotIndexes 4-28 ***

*** Renumbered SlotIndexes 16-88 ***

*** Renumbered SlotIndexes 28-108 ***

*** Renumbered SlotIndexes 40-152 ***

*** Renumbered SlotIndexes 52-172 ***

*** Renumbered SlotIndexes 64-200 ***

*** Renumbered SlotIndexes 76-236 ***

*** Renumbered SlotIndexes 88-264 ***

*** Renumbered SlotIndexes 100-284 ***

*** Renumbered SlotIndexes 112-312 ***

*** Renumbered SlotIndexes 124-332 ***

*** Renumbered SlotIndexes 136-360 ***

*** Renumbered SlotIndexes 148-380 ***

*** Renumbered SlotIndexes 160-408 ***

*** Renumbered SlotIndexes 172-428 ***

*** Renumbered SlotIndexes 184-456 ***

*** Renumbered SlotIndexes 196-476 ***

*** Renumbered SlotIndexes 208-504 ***

*** Renumbered SlotIndexes 220-524 ***

*** Renumbered SlotIndexes 232-552 ***

*** Renumbered SlotIndexes 244-572 ***

*** Renumbered SlotIndexes 256-600 ***

*** Renumbered SlotIndexes 268-620 ***

*** Renumbered SlotIndexes 280-648 ***

*** Renumbered SlotIndexes 292-668 ***

*** Renumbered SlotIndexes 304-680 ***

*** Renumbered SlotIndexes 316-692 ***

*** Renumbered SlotIndexes 328-704 ***

*** Renumbered SlotIndexes 340-716 ***

*** Renumbered SlotIndexes 352-728 ***

*** Renumbered SlotIndexes 364-740 ***

*** Renumbered SlotIndexes 376-752 ***

*** Renumbered SlotIndexes 388-764 ***

*** Renumbered SlotIndexes 400-776 ***
Partitioning instructions of the region into multiple CEs
instr:  %vreg10<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg10
instr:  %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
instr:  %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
instr:  SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
instr:  %vreg9<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg9
instr:  %vreg3<def> = ADDI %zero, <ga:@redefine_in_placeholder>[TF=3]; GR32Bit:%vreg3
instr:  %vreg2<def> = LUI <ga:@redefine_in_placeholder>[TF=2]; GR32Bit:%vreg2
instr:  %vreg4<def> = ADD %vreg3, %vreg2; GR32Bit:%vreg4,%vreg3,%vreg2
instr:  %vreg5<def> = LW %vreg4, 0; mem:LD4[@redefine_in_placeholder] GR32Bit:%vreg5,%vreg4
instr:  SW %vreg5, %vreg1, 0; mem:ST4[%8](align=16) GR32Bit:%vreg5,%vreg1
instr:  %vreg8<def> = ADDI %zero, 1; GR32Bit:%vreg8
instr:  %vreg6<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg6,%vreg0
instr:  SW %zero, %vreg6, 4; mem:ST4[%10] GR32Bit:%vreg6
instr:  %vreg7<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg7,%vreg0
instr:  SW %vreg8, %vreg7, 8; mem:ST4[%12] GR32Bit:%vreg8,%vreg7
instr:  SW %zero, %vreg10, 0; mem:ST4[%5] GR32Bit:%vreg10
instr:  SW %zero, %vreg9, 0; mem:ST4[%3] GR32Bit:%vreg9
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
After Shuffling regions of basic block, state of BB#0:
BB#0: derived from LLVM BB %trp_init3.entry
	%vreg24<def> = ADD %t5, %zero; GR32Bit:%vreg24
	%vreg26<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg26
	%vreg27<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg27
	%vreg28<def> = SRLI %vreg27, 12; GR32Bit:%vreg28,%vreg27
	%vreg29<def> = ADD %vreg26, %vreg28; GR32Bit:%vreg29,%vreg26,%vreg28
	%vreg30<def> = ADDI %zero, 32; GR32Bit:%vreg30
	%vreg31<def> = SRLI %t5, 22; GR32Bit:%vreg31
	%vreg32<def> = SRLI %t5, 12; GR32Bit:%vreg32
	%vreg33<def> = ANDI %vreg32, 15; GR32Bit:%vreg33,%vreg32
	%vreg34<def> = SRLI %t5, 6; GR32Bit:%vreg34
	%vreg35<def> = ANDI %vreg34, 63; GR32Bit:%vreg35,%vreg34
	%vreg36<def> = ADDI %zero, 832; GR32Bit:%vreg36
	%vreg37<def> = MUL %vreg31, %vreg36; GR32Bit:%vreg37,%vreg31,%vreg36
	%vreg38<def> = ADDI %zero, 52; GR32Bit:%vreg38
	%vreg39<def> = MUL %vreg33, %vreg38; GR32Bit:%vreg39,%vreg33,%vreg38
	%vreg40<def> = ADD %vreg39, %vreg35; GR32Bit:%vreg40,%vreg39,%vreg35
	%vreg41<def> = ADD %vreg40, %vreg37; GR32Bit:%vreg41,%vreg40,%vreg37
	%vreg42<def> = MUL %vreg41, %vreg30; GR32Bit:%vreg42,%vreg41,%vreg30
	%vreg25<def> = ADD %vreg29, %vreg42; GR32Bit:%vreg25,%vreg29,%vreg42
	%vreg10<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg10
	%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
	%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
	SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
	%vreg9<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg9
	%vreg3<def> = ADDI %zero, <ga:@redefine_in_placeholder>[TF=3]; GR32Bit:%vreg3
	%vreg2<def> = LUI <ga:@redefine_in_placeholder>[TF=2]; GR32Bit:%vreg2
	%vreg4<def> = ADD %vreg3, %vreg2; GR32Bit:%vreg4,%vreg3,%vreg2
	%vreg5<def> = LW %vreg4, 0; mem:LD4[@redefine_in_placeholder] GR32Bit:%vreg5,%vreg4
	SW %vreg5, %vreg1, 0; mem:ST4[%8](align=16) GR32Bit:%vreg5,%vreg1
	%vreg8<def> = ADDI %zero, 1; GR32Bit:%vreg8
	%vreg6<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg6,%vreg0
	SW %zero, %vreg6, 4; mem:ST4[%10] GR32Bit:%vreg6
	%vreg7<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg7,%vreg0
	SW %vreg8, %vreg7, 8; mem:ST4[%12] GR32Bit:%vreg8,%vreg7
	SW %zero, %vreg10, 0; mem:ST4[%5] GR32Bit:%vreg10
	SW %zero, %vreg9, 0; mem:ST4[%3] GR32Bit:%vreg9
	%vreg43<def> = ADD %t5, %zero; GR32Bit:%vreg43
	%vreg45<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg45
	%vreg46<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg46
	%vreg47<def> = SRLI %vreg46, 12; GR32Bit:%vreg47,%vreg46
	%vreg48<def> = ADD %vreg45, %vreg47; GR32Bit:%vreg48,%vreg45,%vreg47
	%vreg49<def> = ADDI %zero, 32; GR32Bit:%vreg49
	%vreg50<def> = SRLI %t5, 22; GR32Bit:%vreg50
	%vreg51<def> = SRLI %t5, 12; GR32Bit:%vreg51
	%vreg52<def> = ANDI %vreg51, 15; GR32Bit:%vreg52,%vreg51
	%vreg53<def> = SRLI %t5, 6; GR32Bit:%vreg53
	%vreg54<def> = ANDI %vreg53, 63; GR32Bit:%vreg54,%vreg53
	%vreg55<def> = ADDI %zero, 832; GR32Bit:%vreg55
	%vreg56<def> = MUL %vreg50, %vreg55; GR32Bit:%vreg56,%vreg50,%vreg55
	%vreg57<def> = ADDI %zero, 52; GR32Bit:%vreg57
	%vreg58<def> = MUL %vreg52, %vreg57; GR32Bit:%vreg58,%vreg52,%vreg57
	%vreg59<def> = ADD %vreg58, %vreg54; GR32Bit:%vreg59,%vreg58,%vreg54
	%vreg60<def> = ADD %vreg59, %vreg56; GR32Bit:%vreg60,%vreg59,%vreg56
	%vreg61<def> = MUL %vreg60, %vreg49; GR32Bit:%vreg61,%vreg60,%vreg49
	%vreg44<def> = ADD %vreg48, %vreg61; GR32Bit:%vreg44,%vreg48,%vreg61
	%vreg62<def> = ADD %t5, %zero; GR32Bit:%vreg62
	%vreg64<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg64
	%vreg65<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg65
	%vreg66<def> = SRLI %vreg65, 12; GR32Bit:%vreg66,%vreg65
	%vreg67<def> = ADD %vreg64, %vreg66; GR32Bit:%vreg67,%vreg64,%vreg66
	%vreg68<def> = ADDI %zero, 32; GR32Bit:%vreg68
	%vreg69<def> = SRLI %t5, 22; GR32Bit:%vreg69
	%vreg70<def> = SRLI %t5, 12; GR32Bit:%vreg70
	%vreg71<def> = ANDI %vreg70, 15; GR32Bit:%vreg71,%vreg70
	%vreg72<def> = SRLI %t5, 6; GR32Bit:%vreg72
	%vreg73<def> = ANDI %vreg72, 63; GR32Bit:%vreg73,%vreg72
	%vreg74<def> = ADDI %zero, 832; GR32Bit:%vreg74
	%vreg75<def> = MUL %vreg69, %vreg74; GR32Bit:%vreg75,%vreg69,%vreg74
	%vreg76<def> = ADDI %zero, 52; GR32Bit:%vreg76
	%vreg77<def> = MUL %vreg71, %vreg76; GR32Bit:%vreg77,%vreg71,%vreg76
	%vreg78<def> = ADD %vreg77, %vreg73; GR32Bit:%vreg78,%vreg77,%vreg73
	%vreg79<def> = ADD %vreg78, %vreg75; GR32Bit:%vreg79,%vreg78,%vreg75
	%vreg80<def> = MUL %vreg79, %vreg68; GR32Bit:%vreg80,%vreg79,%vreg68
	%vreg63<def> = ADD %vreg67, %vreg80; GR32Bit:%vreg63,%vreg67,%vreg80
	%vreg81<def> = ADD %t5, %zero; GR32Bit:%vreg81
	%vreg83<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg83
	%vreg84<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg84
	%vreg85<def> = SRLI %vreg84, 12; GR32Bit:%vreg85,%vreg84
	%vreg86<def> = ADD %vreg83, %vreg85; GR32Bit:%vreg86,%vreg83,%vreg85
	%vreg87<def> = ADDI %zero, 32; GR32Bit:%vreg87
	%vreg88<def> = SRLI %t5, 22; GR32Bit:%vreg88
	%vreg89<def> = SRLI %t5, 12; GR32Bit:%vreg89
	%vreg90<def> = ANDI %vreg89, 15; GR32Bit:%vreg90,%vreg89
	%vreg91<def> = SRLI %t5, 6; GR32Bit:%vreg91
	%vreg92<def> = ANDI %vreg91, 63; GR32Bit:%vreg92,%vreg91
	%vreg93<def> = ADDI %zero, 832; GR32Bit:%vreg93
	%vreg94<def> = MUL %vreg88, %vreg93; GR32Bit:%vreg94,%vreg88,%vreg93
	%vreg95<def> = ADDI %zero, 52; GR32Bit:%vreg95
	%vreg96<def> = MUL %vreg90, %vreg95; GR32Bit:%vreg96,%vreg90,%vreg95
	%vreg97<def> = ADD %vreg96, %vreg92; GR32Bit:%vreg97,%vreg96,%vreg92
	%vreg98<def> = ADD %vreg97, %vreg94; GR32Bit:%vreg98,%vreg97,%vreg94
	%vreg99<def> = MUL %vreg98, %vreg87; GR32Bit:%vreg99,%vreg98,%vreg87
	%vreg82<def> = ADD %vreg86, %vreg99; GR32Bit:%vreg82,%vreg86,%vreg99
    Successors according to CFG: BB#1

*** Renumbered SlotIndexes 316-820 ***

*** Renumbered SlotIndexes 216-864 ***

*** Renumbered SlotIndexes 112-920 ***

*** Renumbered SlotIndexes 100-940 ***

*** Renumbered SlotIndexes 100-956 ***

*** Renumbered SlotIndexes 100-972 ***

*** Renumbered SlotIndexes 100-988 ***

*** Renumbered SlotIndexes 100-1004 ***

*** Renumbered SlotIndexes 100-1020 ***

*** Renumbered SlotIndexes 100-1036 ***

*** Renumbered SlotIndexes 100-1052 ***

*** Renumbered SlotIndexes 12-1100 ***
Creating pHyperOp bundles for CEs for bb0
  %vreg43<def> = ADD %t5, %zero; GR32Bit:%vreg43
starting at   %vreg24<def> = ADD %t5, %zero; GR32Bit:%vreg24
  %vreg62<def> = ADD %t5, %zero; GR32Bit:%vreg62
starting at   %vreg43<def> = ADD %t5, %zero; GR32Bit:%vreg43
  %vreg81<def> = ADD %t5, %zero; GR32Bit:%vreg81
starting at   %vreg62<def> = ADD %t5, %zero; GR32Bit:%vreg62
starting at   %vreg81<def> = ADD %t5, %zero; GR32Bit:%vreg81
After bundling, state of BB0:BB#0: derived from LLVM BB %trp_init3.entry
	%vreg24<def> = ADD %t5, %zero; GR32Bit:%vreg24
	  * %vreg26<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg26
	  * %vreg27<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg27
	  * %vreg28<def> = SRLI %vreg27, 12; GR32Bit:%vreg28,%vreg27
	  * %vreg29<def> = ADD %vreg26, %vreg28; GR32Bit:%vreg29,%vreg26,%vreg28
	  * %vreg30<def> = ADDI %zero, 32; GR32Bit:%vreg30
	  * %vreg31<def> = SRLI %t5, 22; GR32Bit:%vreg31
	  * %vreg32<def> = SRLI %t5, 12; GR32Bit:%vreg32
	  * %vreg33<def> = ANDI %vreg32, 15; GR32Bit:%vreg33,%vreg32
	  * %vreg34<def> = SRLI %t5, 6; GR32Bit:%vreg34
	  * %vreg35<def> = ANDI %vreg34, 63; GR32Bit:%vreg35,%vreg34
	  * %vreg36<def> = ADDI %zero, 832; GR32Bit:%vreg36
	  * %vreg37<def> = MUL %vreg31, %vreg36; GR32Bit:%vreg37,%vreg31,%vreg36
	  * %vreg38<def> = ADDI %zero, 52; GR32Bit:%vreg38
	  * %vreg39<def> = MUL %vreg33, %vreg38; GR32Bit:%vreg39,%vreg33,%vreg38
	  * %vreg40<def> = ADD %vreg39, %vreg35; GR32Bit:%vreg40,%vreg39,%vreg35
	  * %vreg41<def> = ADD %vreg40, %vreg37; GR32Bit:%vreg41,%vreg40,%vreg37
	  * %vreg42<def> = MUL %vreg41, %vreg30; GR32Bit:%vreg42,%vreg41,%vreg30
	  * %vreg25<def> = ADD %vreg29, %vreg42; GR32Bit:%vreg25,%vreg29,%vreg42
	  * %vreg10<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg10
	  * %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
	  * %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
	  * SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
	  * %vreg9<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg9
	  * %vreg3<def> = ADDI %zero, <ga:@redefine_in_placeholder>[TF=3]; GR32Bit:%vreg3
	  * %vreg2<def> = LUI <ga:@redefine_in_placeholder>[TF=2]; GR32Bit:%vreg2
	  * %vreg4<def> = ADD %vreg3, %vreg2; GR32Bit:%vreg4,%vreg3,%vreg2
	  * %vreg5<def> = LW %vreg4, 0; mem:LD4[@redefine_in_placeholder] GR32Bit:%vreg5,%vreg4
	  * SW %vreg5, %vreg1, 0; mem:ST4[%8](align=16) GR32Bit:%vreg5,%vreg1
	  * %vreg8<def> = ADDI %zero, 1; GR32Bit:%vreg8
	  * %vreg6<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg6,%vreg0
	  * SW %zero, %vreg6, 4; mem:ST4[%10] GR32Bit:%vreg6
	  * %vreg7<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg7,%vreg0
	  * SW %vreg8, %vreg7, 8; mem:ST4[%12] GR32Bit:%vreg8,%vreg7
	  * SW %zero, %vreg10, 0; mem:ST4[%5] GR32Bit:%vreg10
	  * SW %zero, %vreg9, 0; mem:ST4[%3] GR32Bit:%vreg9
	%vreg43<def> = ADD %t5, %zero; GR32Bit:%vreg43
	  * %vreg45<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg45
	  * %vreg46<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg46
	  * %vreg47<def> = SRLI %vreg46, 12; GR32Bit:%vreg47,%vreg46
	  * %vreg48<def> = ADD %vreg45, %vreg47; GR32Bit:%vreg48,%vreg45,%vreg47
	  * %vreg49<def> = ADDI %zero, 32; GR32Bit:%vreg49
	  * %vreg50<def> = SRLI %t5, 22; GR32Bit:%vreg50
	  * %vreg51<def> = SRLI %t5, 12; GR32Bit:%vreg51
	  * %vreg52<def> = ANDI %vreg51, 15; GR32Bit:%vreg52,%vreg51
	  * %vreg53<def> = SRLI %t5, 6; GR32Bit:%vreg53
	  * %vreg54<def> = ANDI %vreg53, 63; GR32Bit:%vreg54,%vreg53
	  * %vreg55<def> = ADDI %zero, 832; GR32Bit:%vreg55
	  * %vreg56<def> = MUL %vreg50, %vreg55; GR32Bit:%vreg56,%vreg50,%vreg55
	  * %vreg57<def> = ADDI %zero, 52; GR32Bit:%vreg57
	  * %vreg58<def> = MUL %vreg52, %vreg57; GR32Bit:%vreg58,%vreg52,%vreg57
	  * %vreg59<def> = ADD %vreg58, %vreg54; GR32Bit:%vreg59,%vreg58,%vreg54
	  * %vreg60<def> = ADD %vreg59, %vreg56; GR32Bit:%vreg60,%vreg59,%vreg56
	  * %vreg61<def> = MUL %vreg60, %vreg49; GR32Bit:%vreg61,%vreg60,%vreg49
	  * %vreg44<def> = ADD %vreg48, %vreg61; GR32Bit:%vreg44,%vreg48,%vreg61
	%vreg62<def> = ADD %t5, %zero; GR32Bit:%vreg62
	  * %vreg64<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg64
	  * %vreg65<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg65
	  * %vreg66<def> = SRLI %vreg65, 12; GR32Bit:%vreg66,%vreg65
	  * %vreg67<def> = ADD %vreg64, %vreg66; GR32Bit:%vreg67,%vreg64,%vreg66
	  * %vreg68<def> = ADDI %zero, 32; GR32Bit:%vreg68
	  * %vreg69<def> = SRLI %t5, 22; GR32Bit:%vreg69
	  * %vreg70<def> = SRLI %t5, 12; GR32Bit:%vreg70
	  * %vreg71<def> = ANDI %vreg70, 15; GR32Bit:%vreg71,%vreg70
	  * %vreg72<def> = SRLI %t5, 6; GR32Bit:%vreg72
	  * %vreg73<def> = ANDI %vreg72, 63; GR32Bit:%vreg73,%vreg72
	  * %vreg74<def> = ADDI %zero, 832; GR32Bit:%vreg74
	  * %vreg75<def> = MUL %vreg69, %vreg74; GR32Bit:%vreg75,%vreg69,%vreg74
	  * %vreg76<def> = ADDI %zero, 52; GR32Bit:%vreg76
	  * %vreg77<def> = MUL %vreg71, %vreg76; GR32Bit:%vreg77,%vreg71,%vreg76
	  * %vreg78<def> = ADD %vreg77, %vreg73; GR32Bit:%vreg78,%vreg77,%vreg73
	  * %vreg79<def> = ADD %vreg78, %vreg75; GR32Bit:%vreg79,%vreg78,%vreg75
	  * %vreg80<def> = MUL %vreg79, %vreg68; GR32Bit:%vreg80,%vreg79,%vreg68
	  * %vreg63<def> = ADD %vreg67, %vreg80; GR32Bit:%vreg63,%vreg67,%vreg80
	%vreg81<def> = ADD %t5, %zero; GR32Bit:%vreg81
	  * %vreg83<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg83
	  * %vreg84<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg84
	  * %vreg85<def> = SRLI %vreg84, 12; GR32Bit:%vreg85,%vreg84
	  * %vreg86<def> = ADD %vreg83, %vreg85; GR32Bit:%vreg86,%vreg83,%vreg85
	  * %vreg87<def> = ADDI %zero, 32; GR32Bit:%vreg87
	  * %vreg88<def> = SRLI %t5, 22; GR32Bit:%vreg88
	  * %vreg89<def> = SRLI %t5, 12; GR32Bit:%vreg89
	  * %vreg90<def> = ANDI %vreg89, 15; GR32Bit:%vreg90,%vreg89
	  * %vreg91<def> = SRLI %t5, 6; GR32Bit:%vreg91
	  * %vreg92<def> = ANDI %vreg91, 63; GR32Bit:%vreg92,%vreg91
	  * %vreg93<def> = ADDI %zero, 832; GR32Bit:%vreg93
	  * %vreg94<def> = MUL %vreg88, %vreg93; GR32Bit:%vreg94,%vreg88,%vreg93
	  * %vreg95<def> = ADDI %zero, 52; GR32Bit:%vreg95
	  * %vreg96<def> = MUL %vreg90, %vreg95; GR32Bit:%vreg96,%vreg90,%vreg95
	  * %vreg97<def> = ADD %vreg96, %vreg92; GR32Bit:%vreg97,%vreg96,%vreg92
	  * %vreg98<def> = ADD %vreg97, %vreg94; GR32Bit:%vreg98,%vreg97,%vreg94
	  * %vreg99<def> = MUL %vreg98, %vreg87; GR32Bit:%vreg99,%vreg98,%vreg87
	  * %vreg82<def> = ADD %vreg86, %vreg99; GR32Bit:%vreg82,%vreg86,%vreg99
    Successors according to CFG: BB#1

-------------
Starting new basic block BB#1
********** MI Scheduling **********
trp_init3:BB#1 trp_init3.for.cond
  From: JAL <BB#2>
    To: JAL <BB#2>
 Remaining: 4
Max Pressure: Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 0
Excess PSets: 
0 subtrees:
*** Final schedule for BB#1 ***

Partitioning instructions of the region into multiple CEs

*** Renumbered SlotIndexes 952-1112 ***

*** Renumbered SlotIndexes 964-1124 ***

*** Renumbered SlotIndexes 976-1136 ***

*** Renumbered SlotIndexes 988-1148 ***

*** Renumbered SlotIndexes 1000-1160 ***

*** Renumbered SlotIndexes 1012-1172 ***

*** Renumbered SlotIndexes 1024-1184 ***

*** Renumbered SlotIndexes 1036-1196 ***

*** Renumbered SlotIndexes 1048-1208 ***

*** Renumbered SlotIndexes 1060-1220 ***

*** Renumbered SlotIndexes 1072-1232 ***

*** Renumbered SlotIndexes 1084-1244 ***

*** Renumbered SlotIndexes 1104-1256 ***

*** Renumbered SlotIndexes 1116-1268 ***

*** Renumbered SlotIndexes 1128-1280 ***

*** Renumbered SlotIndexes 1140-1292 ***

*** Renumbered SlotIndexes 1152-1304 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
********** MI Scheduling **********
trp_init3:BB#1 trp_init3.for.cond
  From: %vreg11<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg11
    To: BGT <BB#3>, %vreg12, %vreg13; GR32Bit:%vreg12,%vreg13
 Remaining: 0
Max Pressure: GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 2
Excess PSets: 
2 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 1
SU(0):   %vreg11<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg11
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
   val SU(1): Latency=5 Reg=%vreg11

SU(1):   %vreg12<def> = LW %vreg11, 0; mem:LD4[%5] GR32Bit:%vreg12,%vreg11
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 15
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg11
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg12

SU(2):   %vreg13<def> = ADDI %zero, 4; GR32Bit:%vreg13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(4294967295): Latency=5 Reg=%vreg13

SU(0):   %vreg11<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg11
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
   val SU(1): Latency=5 Reg=%vreg11

SU(1):   %vreg12<def> = LW %vreg11, 0; mem:LD4[%5] GR32Bit:%vreg12,%vreg11
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 15
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg11
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg12

SU(2):   %vreg13<def> = ADDI %zero, 4; GR32Bit:%vreg13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(4294967295): Latency=5 Reg=%vreg13

Pick node SU(2)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg13<def> = ADDI %zero, 4; GR32Bit:%vreg13
handleMove 940B -> 920B: %vreg13<def> = ADDI %zero, 4; GR32Bit:%vreg13
     %vreg13:	[940r,948r:0)  0@940r
        -->	[920r,948r:0)  0@920r
     zero:	EMPTY
        -->	EMPTY
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg11<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg11
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg12<def> = LW %vreg11, 0; mem:LD4[%5] GR32Bit:%vreg12,%vreg11
*** Final schedule for BB#1 ***
SU(2):   %vreg13<def> = ADDI %zero, 4; GR32Bit:%vreg13
SU(0):   %vreg11<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg11
SU(1):   %vreg12<def> = LW %vreg11, 0; mem:LD4[%5] GR32Bit:%vreg12,%vreg11

Partitioning instructions of the region into multiple CEs
instr:  %vreg13<def> = ADDI %zero, 4; GR32Bit:%vreg13
instr:  %vreg11<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg11
instr:  %vreg12<def> = LW %vreg11, 0; mem:LD4[%5] GR32Bit:%vreg12,%vreg11

*** Renumbered SlotIndexes 936-1392 ***

*** Renumbered SlotIndexes 948-1404 ***

*** Renumbered SlotIndexes 960-1416 ***

*** Renumbered SlotIndexes 972-1428 ***

*** Renumbered SlotIndexes 984-1440 ***

*** Renumbered SlotIndexes 996-1452 ***

*** Renumbered SlotIndexes 1008-1464 ***

*** Renumbered SlotIndexes 1020-1476 ***

*** Renumbered SlotIndexes 1032-1488 ***

*** Renumbered SlotIndexes 1060-1500 ***

*** Renumbered SlotIndexes 1072-1512 ***

*** Renumbered SlotIndexes 1084-1524 ***

*** Renumbered SlotIndexes 1096-1536 ***

*** Renumbered SlotIndexes 1108-1548 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs

renaming register of operand that belongs to ce 1 but was defined in0
%vreg12<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg12<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg12<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg13<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg13<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg13<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg12
renaming register of operand that belongs to ce 1 but was defined in0
%vreg13
renaming register of operand that belongs to ce 2 but was defined in0
%vreg12
renaming register of operand that belongs to ce 2 but was defined in0
%vreg13
renaming register of operand that belongs to ce 3 but was defined in0
%vreg12
renaming register of operand that belongs to ce 3 but was defined in0
%vreg13After Shuffling regions of basic block, state of BB#1:
BB#1: derived from LLVM BB %trp_init3.for.cond
    Predecessors according to CFG: BB#0 BB#2
	%vreg13<def> = ADDI %zero, 4; GR32Bit:%vreg13
	%vreg11<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg11
	%vreg12<def> = LW %vreg11, 0; mem:LD4[%5] GR32Bit:%vreg12,%vreg11
	%vreg118<def> = LUI 1; GR32Bit:%vreg118
	WRITEPM %vreg118, %vreg12, 0; GR32Bit:%vreg118,%vreg12
	%vreg120<def> = LUI 2; GR32Bit:%vreg120
	WRITEPM %vreg120, %vreg12, 0; GR32Bit:%vreg120,%vreg12
	%vreg122<def> = LUI 3; GR32Bit:%vreg122
	WRITEPM %vreg122, %vreg12, 0; GR32Bit:%vreg122,%vreg12
	WRITEPM %vreg118, %vreg13, 4; GR32Bit:%vreg118,%vreg13
	WRITEPM %vreg120, %vreg13, 4; GR32Bit:%vreg120,%vreg13
	WRITEPM %vreg122, %vreg13, 4; GR32Bit:%vreg122,%vreg13
	BGT <BB#3>, %vreg12, %vreg13; GR32Bit:%vreg12,%vreg13
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg100<def> = LUI 1; GR32Bit:%vreg100
	WRITEPM %vreg100, %vreg100, 192; GR32Bit:%vreg100
	%vreg101<def> = LUI 0; GR32Bit:%vreg101
	%vreg102<def> = DREADPM %vreg101, 188; GR32Bit:%vreg102,%vreg101
	%vreg112<def> = LUI 2; GR32Bit:%vreg112
	WRITEPM %vreg112, %vreg112, 176; GR32Bit:%vreg112
	%vreg113<def> = LUI 0; GR32Bit:%vreg113
	%vreg114<def> = DREADPM %vreg113, 168; GR32Bit:%vreg114,%vreg113
	JAL <BB#2>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg119<def> = LUI 1; GR32Bit:%vreg119
	%vreg124<def> = DREADPM %vreg119, 0; GR32Bit:%vreg124,%vreg119
	%vreg127<def> = DREADPM %vreg119, 4; GR32Bit:%vreg127,%vreg119
	BGT <BB#3>, %vreg124, %vreg127; GR32Bit:%vreg124,%vreg127
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg103<def> = LUI 0; GR32Bit:%vreg103
	WRITEPM %vreg103, %vreg103, 188; GR32Bit:%vreg103
	%vreg104<def> = LUI 1; GR32Bit:%vreg104
	%vreg105<def> = DREADPM %vreg104, 192; GR32Bit:%vreg105,%vreg104
	JAL <BB#2>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg121<def> = LUI 2; GR32Bit:%vreg121
	%vreg125<def> = DREADPM %vreg121, 0; GR32Bit:%vreg125,%vreg121
	%vreg128<def> = DREADPM %vreg121, 4; GR32Bit:%vreg128,%vreg121
	BGT <BB#3>, %vreg125, %vreg128; GR32Bit:%vreg125,%vreg128
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg106<def> = LUI 3; GR32Bit:%vreg106
	WRITEPM %vreg106, %vreg106, 184; GR32Bit:%vreg106
	%vreg107<def> = LUI 2; GR32Bit:%vreg107
	%vreg108<def> = DREADPM %vreg107, 180; GR32Bit:%vreg108,%vreg107
	%vreg115<def> = LUI 0; GR32Bit:%vreg115
	WRITEPM %vreg115, %vreg115, 168; GR32Bit:%vreg115
	%vreg116<def> = LUI 2; GR32Bit:%vreg116
	%vreg117<def> = DREADPM %vreg116, 176; GR32Bit:%vreg117,%vreg116
	JAL <BB#2>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg123<def> = LUI 3; GR32Bit:%vreg123
	%vreg126<def> = DREADPM %vreg123, 0; GR32Bit:%vreg126,%vreg123
	%vreg129<def> = DREADPM %vreg123, 4; GR32Bit:%vreg129,%vreg123
	BGT <BB#3>, %vreg126, %vreg129; GR32Bit:%vreg126,%vreg129
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg109<def> = LUI 2; GR32Bit:%vreg109
	WRITEPM %vreg109, %vreg109, 180; GR32Bit:%vreg109
	%vreg110<def> = LUI 3; GR32Bit:%vreg110
	%vreg111<def> = DREADPM %vreg110, 184; GR32Bit:%vreg111,%vreg110
	JAL <BB#2>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#2(124) BB#3(4)

*** Renumbered SlotIndexes 980-1604 ***

*** Renumbered SlotIndexes 980-1620 ***

*** Renumbered SlotIndexes 980-1636 ***

*** Renumbered SlotIndexes 980-1652 ***

*** Renumbered SlotIndexes 980-1668 ***

*** Renumbered SlotIndexes 980-1684 ***

*** Renumbered SlotIndexes 980-1700 ***

*** Renumbered SlotIndexes 980-1716 ***

*** Renumbered SlotIndexes 956-1732 ***

*** Renumbered SlotIndexes 956-1748 ***

*** Renumbered SlotIndexes 956-1764 ***

*** Renumbered SlotIndexes 956-1780 ***

*** Renumbered SlotIndexes 956-1796 ***

*** Renumbered SlotIndexes 956-1812 ***

*** Renumbered SlotIndexes 936-1832 ***

*** Renumbered SlotIndexes 936-1848 ***

*** Renumbered SlotIndexes 936-1864 ***

*** Renumbered SlotIndexes 936-1880 ***

*** Renumbered SlotIndexes 936-1896 ***

*** Renumbered SlotIndexes 936-1912 ***

*** Renumbered SlotIndexes 936-1928 ***

*** Renumbered SlotIndexes 936-1944 ***

*** Renumbered SlotIndexes 936-1960 ***

*** Renumbered SlotIndexes 936-1976 ***

*** Renumbered SlotIndexes 936-1992 ***
Creating pHyperOp bundles for CEs for bb1
  %vreg119<def> = LUI 1; GR32Bit:%vreg119
starting at   %vreg13<def> = ADDI %zero, 4; GR32Bit:%vreg13
  %vreg121<def> = LUI 2; GR32Bit:%vreg121
starting at   %vreg119<def> = LUI 1; GR32Bit:%vreg119
  %vreg123<def> = LUI 3; GR32Bit:%vreg123
starting at   %vreg121<def> = LUI 2; GR32Bit:%vreg121
starting at   %vreg123<def> = LUI 3; GR32Bit:%vreg123
After bundling, state of BB1:BB#1: derived from LLVM BB %trp_init3.for.cond
    Predecessors according to CFG: BB#0 BB#2
	%vreg13<def> = ADDI %zero, 4; GR32Bit:%vreg13
	  * %vreg11<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg11
	  * %vreg12<def> = LW %vreg11, 0; mem:LD4[%5] GR32Bit:%vreg12,%vreg11
	  * %vreg118<def> = LUI 1; GR32Bit:%vreg118
	  * WRITEPM %vreg118, %vreg12, 0; GR32Bit:%vreg118,%vreg12
	  * %vreg120<def> = LUI 2; GR32Bit:%vreg120
	  * WRITEPM %vreg120, %vreg12, 0; GR32Bit:%vreg120,%vreg12
	  * %vreg122<def> = LUI 3; GR32Bit:%vreg122
	  * WRITEPM %vreg122, %vreg12, 0; GR32Bit:%vreg122,%vreg12
	  * WRITEPM %vreg118, %vreg13, 4; GR32Bit:%vreg118,%vreg13
	  * WRITEPM %vreg120, %vreg13, 4; GR32Bit:%vreg120,%vreg13
	  * WRITEPM %vreg122, %vreg13, 4; GR32Bit:%vreg122,%vreg13
	  * BGT <BB#3>, %vreg12, %vreg13; GR32Bit:%vreg12,%vreg13
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * %vreg100<def> = LUI 1; GR32Bit:%vreg100
	  * WRITEPM %vreg100, %vreg100, 192; GR32Bit:%vreg100
	  * %vreg101<def> = LUI 0; GR32Bit:%vreg101
	  * %vreg102<def> = DREADPM %vreg101, 188; GR32Bit:%vreg102,%vreg101
	  * %vreg112<def> = LUI 2; GR32Bit:%vreg112
	  * WRITEPM %vreg112, %vreg112, 176; GR32Bit:%vreg112
	  * %vreg113<def> = LUI 0; GR32Bit:%vreg113
	  * %vreg114<def> = DREADPM %vreg113, 168; GR32Bit:%vreg114,%vreg113
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg119<def> = LUI 1; GR32Bit:%vreg119
	  * %vreg124<def> = DREADPM %vreg119, 0; GR32Bit:%vreg124,%vreg119
	  * %vreg127<def> = DREADPM %vreg119, 4; GR32Bit:%vreg127,%vreg119
	  * BGT <BB#3>, %vreg124, %vreg127; GR32Bit:%vreg124,%vreg127
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * %vreg103<def> = LUI 0; GR32Bit:%vreg103
	  * WRITEPM %vreg103, %vreg103, 188; GR32Bit:%vreg103
	  * %vreg104<def> = LUI 1; GR32Bit:%vreg104
	  * %vreg105<def> = DREADPM %vreg104, 192; GR32Bit:%vreg105,%vreg104
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg121<def> = LUI 2; GR32Bit:%vreg121
	  * %vreg125<def> = DREADPM %vreg121, 0; GR32Bit:%vreg125,%vreg121
	  * %vreg128<def> = DREADPM %vreg121, 4; GR32Bit:%vreg128,%vreg121
	  * BGT <BB#3>, %vreg125, %vreg128; GR32Bit:%vreg125,%vreg128
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * %vreg106<def> = LUI 3; GR32Bit:%vreg106
	  * WRITEPM %vreg106, %vreg106, 184; GR32Bit:%vreg106
	  * %vreg107<def> = LUI 2; GR32Bit:%vreg107
	  * %vreg108<def> = DREADPM %vreg107, 180; GR32Bit:%vreg108,%vreg107
	  * %vreg115<def> = LUI 0; GR32Bit:%vreg115
	  * WRITEPM %vreg115, %vreg115, 168; GR32Bit:%vreg115
	  * %vreg116<def> = LUI 2; GR32Bit:%vreg116
	  * %vreg117<def> = DREADPM %vreg116, 176; GR32Bit:%vreg117,%vreg116
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg123<def> = LUI 3; GR32Bit:%vreg123
	  * %vreg126<def> = DREADPM %vreg123, 0; GR32Bit:%vreg126,%vreg123
	  * %vreg129<def> = DREADPM %vreg123, 4; GR32Bit:%vreg129,%vreg123
	  * BGT <BB#3>, %vreg126, %vreg129; GR32Bit:%vreg126,%vreg129
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * %vreg109<def> = LUI 2; GR32Bit:%vreg109
	  * WRITEPM %vreg109, %vreg109, 180; GR32Bit:%vreg109
	  * %vreg110<def> = LUI 3; GR32Bit:%vreg110
	  * %vreg111<def> = DREADPM %vreg110, 184; GR32Bit:%vreg111,%vreg110
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#2(124) BB#3(4)

-------------
Starting new basic block BB#2
********** MI Scheduling **********
trp_init3:BB#2 trp_init3.for.inc
  From: %vreg18<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg18
    To: JAL <BB#1>
 Remaining: 0
Max Pressure: GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 2
Excess PSets: 
2 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 1
  SU(5) in tree 1
  SU(6) in tree 1
  SU(7) in tree 1
SU(0):   %vreg18<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg18
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 24
  Successors:
   val SU(3): Latency=5 Reg=%vreg18
   val SU(1): Latency=5 Reg=%vreg18

SU(1):   %vreg19<def> = LW %vreg18, 0; mem:LD4[%3] GR32Bit:%vreg19,%vreg18
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 19
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg18
  Successors:
   val SU(2): Latency=15 Reg=%vreg19
   ch  SU(3): Latency=0

SU(2):   %vreg20<def> = ADDI %vreg19, 1; GR32Bit:%vreg20,%vreg19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 4
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg19
  Successors:
   val SU(3): Latency=4 Reg=%vreg20

SU(3):   SW %vreg20, %vreg18, 0; mem:ST4[%3] GR32Bit:%vreg20,%vreg18
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 24
  Height             : 0
  Predecessors:
   val SU(2): Latency=4 Reg=%vreg20
   val SU(0): Latency=5 Reg=%vreg18
   ch  SU(1): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(4):   %vreg21<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 24
  Successors:
   val SU(7): Latency=5 Reg=%vreg21
   val SU(5): Latency=5 Reg=%vreg21

SU(5):   %vreg22<def> = LW %vreg21, 0; mem:LD4[%5] GR32Bit:%vreg22,%vreg21
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 19
  Predecessors:
   val SU(4): Latency=5 Reg=%vreg21
  Successors:
   val SU(6): Latency=15 Reg=%vreg22
   ch  SU(7): Latency=0

SU(6):   %vreg23<def> = ADDI %vreg22, 1; GR32Bit:%vreg23,%vreg22
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 4
  Predecessors:
   val SU(5): Latency=15 Reg=%vreg22
  Successors:
   val SU(7): Latency=4 Reg=%vreg23

SU(7):   SW %vreg23, %vreg21, 0; mem:ST4[%5] GR32Bit:%vreg23,%vreg21
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 24
  Height             : 0
  Predecessors:
   val SU(6): Latency=4 Reg=%vreg23
   val SU(4): Latency=5 Reg=%vreg21
   ch  SU(5): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg18<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg18
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 24
  Successors:
   val SU(3): Latency=5 Reg=%vreg18
   val SU(1): Latency=5 Reg=%vreg18

SU(1):   %vreg19<def> = LW %vreg18, 0; mem:LD4[%3] GR32Bit:%vreg19,%vreg18
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 19
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg18
  Successors:
   val SU(2): Latency=15 Reg=%vreg19
   ch  SU(3): Latency=0

SU(2):   %vreg20<def> = ADDI %vreg19, 1; GR32Bit:%vreg20,%vreg19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 4
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg19
  Successors:
   val SU(3): Latency=4 Reg=%vreg20

SU(3):   SW %vreg20, %vreg18, 0; mem:ST4[%3] GR32Bit:%vreg20,%vreg18
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 24
  Height             : 0
  Predecessors:
   val SU(2): Latency=4 Reg=%vreg20
   val SU(0): Latency=5 Reg=%vreg18
   ch  SU(1): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(4):   %vreg21<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 24
  Successors:
   val SU(7): Latency=5 Reg=%vreg21
   val SU(5): Latency=5 Reg=%vreg21

SU(5):   %vreg22<def> = LW %vreg21, 0; mem:LD4[%5] GR32Bit:%vreg22,%vreg21
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 19
  Predecessors:
   val SU(4): Latency=5 Reg=%vreg21
  Successors:
   val SU(6): Latency=15 Reg=%vreg22
   ch  SU(7): Latency=0

SU(6):   %vreg23<def> = ADDI %vreg22, 1; GR32Bit:%vreg23,%vreg22
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 4
  Predecessors:
   val SU(5): Latency=15 Reg=%vreg22
  Successors:
   val SU(7): Latency=4 Reg=%vreg23

SU(7):   SW %vreg23, %vreg21, 0; mem:ST4[%5] GR32Bit:%vreg23,%vreg21
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 24
  Height             : 0
  Predecessors:
   val SU(6): Latency=4 Reg=%vreg23
   val SU(4): Latency=5 Reg=%vreg21
   ch  SU(5): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(4)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg21<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg21
handleMove 1896B -> 1860B: %vreg21<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg21
     %vreg21:	[1896r,1920r:0)  0@1896r
        -->	[1860r,1920r:0)  0@1860r
     t5:	EMPTY
        -->	EMPTY
Pick node SU(5)  ILP: 2 / 6 = 0.333333 Tree: 1 @0
Scheduling %vreg22<def> = LW %vreg21, 0; mem:LD4[%5] GR32Bit:%vreg22,%vreg21

*** Renumbered SlotIndexes 1860-2004 ***
handleMove 1916B -> 1868B: %vreg22<def> = LW %vreg21, 0; mem:LD4[%5] GR32Bit:%vreg22,%vreg21
     %vreg22:	[1916r,1924r:0)  0@1916r
        -->	[1868r,1924r:0)  0@1868r
     %vreg21:	[1860r,1932r:0)  0@1860r
        -->	[1860r,1932r:0)  0@1860r
Pick node SU(6)  ILP: 3 / 21 = 0.142857 Tree: 1 @0
Scheduling %vreg23<def> = ADDI %vreg22, 1; GR32Bit:%vreg23,%vreg22
handleMove 1924B -> 1872B: %vreg23<def> = ADDI %vreg22, 1; GR32Bit:%vreg23,%vreg22
     %vreg23:	[1924r,1932r:0)  0@1924r
        -->	[1872r,1932r:0)  0@1872r
     %vreg22:	[1868r,1924r:0)  0@1868r
        -->	[1868r,1872r:0)  0@1868r
Pick node SU(7)  ILP: 4 / 25 = 0.16 Tree: 1 @0
Scheduling SW %vreg23, %vreg21, 0; mem:ST4[%5] GR32Bit:%vreg23,%vreg21

*** Renumbered SlotIndexes 1872-2016 ***
handleMove 1944B -> 1880B: SW %vreg23, %vreg21, 0; mem:ST4[%5] GR32Bit:%vreg23,%vreg21
     %vreg23:	[1872r,1944r:0)  0@1872r
        -->	[1872r,1880r:0)  0@1872r
     %vreg21:	[1860r,1944r:0)  0@1860r
        -->	[1860r,1880r:0)  0@1860r
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg18<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg18
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg19<def> = LW %vreg18, 0; mem:LD4[%3] GR32Bit:%vreg19,%vreg18
Pick node SU(2)  ILP: 3 / 21 = 0.142857 Tree: 0 @0
Scheduling %vreg20<def> = ADDI %vreg19, 1; GR32Bit:%vreg20,%vreg19
Pick node SU(3)  ILP: 4 / 25 = 0.16 Tree: 0 @0
Scheduling SW %vreg20, %vreg18, 0; mem:ST4[%3] GR32Bit:%vreg20,%vreg18
*** Final schedule for BB#2 ***
SU(4):   %vreg21<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg21
SU(5):   %vreg22<def> = LW %vreg21, 0; mem:LD4[%5] GR32Bit:%vreg22,%vreg21
SU(6):   %vreg23<def> = ADDI %vreg22, 1; GR32Bit:%vreg23,%vreg22
SU(7):   SW %vreg23, %vreg21, 0; mem:ST4[%5] GR32Bit:%vreg23,%vreg21
SU(0):   %vreg18<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg18
SU(1):   %vreg19<def> = LW %vreg18, 0; mem:LD4[%3] GR32Bit:%vreg19,%vreg18
SU(2):   %vreg20<def> = ADDI %vreg19, 1; GR32Bit:%vreg20,%vreg19
SU(3):   SW %vreg20, %vreg18, 0; mem:ST4[%3] GR32Bit:%vreg20,%vreg18

Partitioning instructions of the region into multiple CEs
instr:  %vreg21<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg21
instr:  %vreg22<def> = LW %vreg21, 0; mem:LD4[%5] GR32Bit:%vreg22,%vreg21
instr:  %vreg23<def> = ADDI %vreg22, 1; GR32Bit:%vreg23,%vreg22
instr:  SW %vreg23, %vreg21, 0; mem:ST4[%5] GR32Bit:%vreg23,%vreg21
instr:  %vreg18<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg18
instr:  %vreg19<def> = LW %vreg18, 0; mem:LD4[%3] GR32Bit:%vreg19,%vreg18
instr:  %vreg20<def> = ADDI %vreg19, 1; GR32Bit:%vreg20,%vreg19
instr:  SW %vreg20, %vreg18, 0; mem:ST4[%3] GR32Bit:%vreg20,%vreg18

*** Renumbered SlotIndexes 1956-2028 ***

*** Renumbered SlotIndexes 1968-2040 ***

*** Renumbered SlotIndexes 1980-2052 ***

*** Renumbered SlotIndexes 1992-2064 ***

*** Renumbered SlotIndexes 2004-2076 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
After Shuffling regions of basic block, state of BB#2:
BB#2: derived from LLVM BB %trp_init3.for.inc
    Predecessors according to CFG: BB#1
	%vreg21<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg21
	%vreg22<def> = LW %vreg21, 0; mem:LD4[%5] GR32Bit:%vreg22,%vreg21
	%vreg23<def> = ADDI %vreg22, 1; GR32Bit:%vreg23,%vreg22
	SW %vreg23, %vreg21, 0; mem:ST4[%5] GR32Bit:%vreg23,%vreg21
	%vreg18<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg18
	%vreg19<def> = LW %vreg18, 0; mem:LD4[%3] GR32Bit:%vreg19,%vreg18
	%vreg20<def> = ADDI %vreg19, 1; GR32Bit:%vreg20,%vreg19
	SW %vreg20, %vreg18, 0; mem:ST4[%3] GR32Bit:%vreg20,%vreg18
	JAL <BB#1>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#1>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#1>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#1>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#1

*** Renumbered SlotIndexes 1964-2108 ***

*** Renumbered SlotIndexes 1956-2132 ***

*** Renumbered SlotIndexes 1952-2144 ***
Creating pHyperOp bundles for CEs for bb2
  JAL <BB#1>
starting at   %vreg21<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg21
  JAL <BB#1>
starting at   JAL <BB#1>
  JAL <BB#1>
starting at   JAL <BB#1>
starting at   JAL <BB#1>
After bundling, state of BB2:BB#2: derived from LLVM BB %trp_init3.for.inc
    Predecessors according to CFG: BB#1
	%vreg21<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg21
	  * %vreg22<def> = LW %vreg21, 0; mem:LD4[%5] GR32Bit:%vreg22,%vreg21
	  * %vreg23<def> = ADDI %vreg22, 1; GR32Bit:%vreg23,%vreg22
	  * SW %vreg23, %vreg21, 0; mem:ST4[%5] GR32Bit:%vreg23,%vreg21
	  * %vreg18<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg18
	  * %vreg19<def> = LW %vreg18, 0; mem:LD4[%3] GR32Bit:%vreg19,%vreg18
	  * %vreg20<def> = ADDI %vreg19, 1; GR32Bit:%vreg20,%vreg19
	  * SW %vreg20, %vreg18, 0; mem:ST4[%3] GR32Bit:%vreg20,%vreg18
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#1

-------------
Starting new basic block BB#3
********** MI Scheduling **********
trp_init3:BB#3 trp_init3.return
  From: %vreg14<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg14
    To: End Remaining: 0
Max Pressure: GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 2
Excess PSets: 
2 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 1
  SU(5) in tree 1
SU(0):   %vreg14<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 24
  Successors:
   val SU(3): Latency=5 Reg=%vreg14
   val SU(1): Latency=5 Reg=%vreg14

SU(1):   %vreg15<def> = LW %vreg14, 0; mem:LD4[%3] GR32Bit:%vreg15,%vreg14
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 19
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg14
  Successors:
   val SU(2): Latency=15 Reg=%vreg15
   ch  SU(3): Latency=0

SU(2):   %vreg16<def> = ANDI %vreg15, 2; GR32Bit:%vreg16,%vreg15
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 4
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg15
  Successors:
   val SU(5): Latency=4 Reg=%vreg16
   val SU(3): Latency=4 Reg=%vreg16

SU(3):   SW %vreg16, %vreg14, 0; mem:ST4[%3] GR32Bit:%vreg16,%vreg14
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 24
  Height             : 0
  Predecessors:
   val SU(2): Latency=4 Reg=%vreg16
   val SU(0): Latency=5 Reg=%vreg14
   ch  SU(1): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(4):   %vreg17<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(5): Latency=5 Reg=%vreg17

SU(5):   SW %vreg16, %vreg17, 0; mem:ST4[%1] GR32Bit:%vreg16,%vreg17
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 24
  Height             : 0
  Predecessors:
   val SU(2): Latency=4 Reg=%vreg16
   val SU(4): Latency=5 Reg=%vreg17
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg14<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 24
  Successors:
   val SU(3): Latency=5 Reg=%vreg14
   val SU(1): Latency=5 Reg=%vreg14

SU(1):   %vreg15<def> = LW %vreg14, 0; mem:LD4[%3] GR32Bit:%vreg15,%vreg14
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 19
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg14
  Successors:
   val SU(2): Latency=15 Reg=%vreg15
   ch  SU(3): Latency=0

SU(2):   %vreg16<def> = ANDI %vreg15, 2; GR32Bit:%vreg16,%vreg15
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 4
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg15
  Successors:
   val SU(5): Latency=4 Reg=%vreg16
   val SU(3): Latency=4 Reg=%vreg16

SU(3):   SW %vreg16, %vreg14, 0; mem:ST4[%3] GR32Bit:%vreg16,%vreg14
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 24
  Height             : 0
  Predecessors:
   val SU(2): Latency=4 Reg=%vreg16
   val SU(0): Latency=5 Reg=%vreg14
   ch  SU(1): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(4):   %vreg17<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(5): Latency=5 Reg=%vreg17

SU(5):   SW %vreg16, %vreg17, 0; mem:ST4[%1] GR32Bit:%vreg16,%vreg17
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 24
  Height             : 0
  Predecessors:
   val SU(2): Latency=4 Reg=%vreg16
   val SU(4): Latency=5 Reg=%vreg17
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(4)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg17<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg17
handleMove 2128B -> 2092B: %vreg17<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg17
     %vreg17:	[2128r,2136r:0)  0@2128r
        -->	[2092r,2136r:0)  0@2092r
     t5:	EMPTY
        -->	EMPTY
  Tree: 0 @20
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @20
Scheduling %vreg14<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg14
  Tree: 1 @20
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @20
Scheduling %vreg15<def> = LW %vreg14, 0; mem:LD4[%3] GR32Bit:%vreg15,%vreg14
Pick node SU(2)  ILP: 3 / 21 = 0.142857 Tree: 0 @20
Scheduling %vreg16<def> = ANDI %vreg15, 2; GR32Bit:%vreg16,%vreg15
Pick node SU(3)  ILP: 4 / 25 = 0.16 Tree: 0 @20
Scheduling SW %vreg16, %vreg14, 0; mem:ST4[%3] GR32Bit:%vreg16,%vreg14
Pick node SU(5)  ILP: 2 / 25 = 0.08 Tree: 1 @20
Scheduling SW %vreg16, %vreg17, 0; mem:ST4[%1] GR32Bit:%vreg16,%vreg17
*** Final schedule for BB#3 ***
SU(4):   %vreg17<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg17
SU(0):   %vreg14<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg14
SU(1):   %vreg15<def> = LW %vreg14, 0; mem:LD4[%3] GR32Bit:%vreg15,%vreg14
SU(2):   %vreg16<def> = ANDI %vreg15, 2; GR32Bit:%vreg16,%vreg15
SU(3):   SW %vreg16, %vreg14, 0; mem:ST4[%3] GR32Bit:%vreg16,%vreg14
SU(5):   SW %vreg16, %vreg17, 0; mem:ST4[%1] GR32Bit:%vreg16,%vreg17

Partitioning instructions of the region into multiple CEs
instr:  %vreg17<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg17
instr:  %vreg14<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg14
instr:  %vreg15<def> = LW %vreg14, 0; mem:LD4[%3] GR32Bit:%vreg15,%vreg14
instr:  %vreg16<def> = ANDI %vreg15, 2; GR32Bit:%vreg16,%vreg15
instr:  SW %vreg16, %vreg14, 0; mem:ST4[%3] GR32Bit:%vreg16,%vreg14
instr:  SW %vreg16, %vreg17, 0; mem:ST4[%1] GR32Bit:%vreg16,%vreg17
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
before falloc, state of bb3:BB#3: derived from LLVM BB %trp_init3.return
    Predecessors according to CFG: BB#1
	%vreg17<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg17
	%vreg14<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg14
	%vreg15<def> = LW %vreg14, 0; mem:LD4[%3] GR32Bit:%vreg15,%vreg14
	%vreg16<def> = ANDI %vreg15, 2; GR32Bit:%vreg16,%vreg15
	SW %vreg16, %vreg14, 0; mem:ST4[%3] GR32Bit:%vreg16,%vreg14
	SW %vreg16, %vreg17, 0; mem:ST4[%1] GR32Bit:%vreg16,%vreg17
Adding all fallocs first to avoid stalls due to sequential fallocs and fbinds
Adding writecm(for writing sync count to context frames) and fbind instructions
live end of child is itself
live end of child is itself
Adding localref sw instructions to hyperOp trp_init3
Adding writecm instructions to hyperOp trp_init3

*** Renumbered SlotIndexes 2140-2156 ***
Adding writecmp and sync instructions
Adding endHyperOp instructions to each pHyperOp

*** Renumbered SlotIndexes 2152-2168 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 2164-2180 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 2176-2192 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 2188-2204 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 2200-2216 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 2212-2228 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0
After Shuffling regions of basic block, state of BB#3:
BB#3: derived from LLVM BB %trp_init3.return
    Predecessors according to CFG: BB#1
	%vreg17<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg17
	%vreg14<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg14
	%vreg15<def> = LW %vreg14, 0; mem:LD4[%3] GR32Bit:%vreg15,%vreg14
	%vreg16<def> = ANDI %vreg15, 2; GR32Bit:%vreg16,%vreg15
	SW %vreg16, %vreg14, 0; mem:ST4[%3] GR32Bit:%vreg16,%vreg14
	SW %vreg16, %vreg17, 0; mem:ST4[%1] GR32Bit:%vreg16,%vreg17
	%vreg130<def> = ADDI %zero, 128; GR32Bit:%vreg130
	%vreg131<def> = LW %t5, <fi#0>; GR32Bit:%vreg131
	WRITECM %vreg130, %vreg131, 0; GR32Bit:%vreg130,%vreg131
	FDELETE %t4, 0
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 2136-2272 ***
Creating pHyperOp bundles for CEs for bb3
  END 0
starting at   %vreg17<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg17
  END 0
starting at   END 0
  END 0
starting at   END 0
starting at   END 0
After bundling, state of BB3:BB#3: derived from LLVM BB %trp_init3.return
    Predecessors according to CFG: BB#1
	%vreg17<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg17
	  * %vreg14<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg14
	  * %vreg15<def> = LW %vreg14, 0; mem:LD4[%3] GR32Bit:%vreg15,%vreg14
	  * %vreg16<def> = ANDI %vreg15, 2; GR32Bit:%vreg16,%vreg15
	  * SW %vreg16, %vreg14, 0; mem:ST4[%3] GR32Bit:%vreg16,%vreg14
	  * SW %vreg16, %vreg17, 0; mem:ST4[%1] GR32Bit:%vreg16,%vreg17
	  * %vreg130<def> = ADDI %zero, 128; GR32Bit:%vreg130
	  * %vreg131<def> = LW %t5, <fi#0>; GR32Bit:%vreg131
	  * WRITECM %vreg130, %vreg131, 0; GR32Bit:%vreg130,%vreg131
	  * FDELETE %t4, 0
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
Patching the instructions that are supposed to use the physical registers r30 and r31
Computing live-in reg-units in ABI blocks.
Created 0 new intervals.

*** Renumbered SlotIndexes 8-2328 ***
********** INTERVALS **********
t5 = EMPTY
zero = EMPTY
%vreg0 = [176r,272r:0)  0@176r
%vreg1 = [184r,240r:0)  0@184r
%vreg2 = [216r,224r:0)  0@216r
%vreg3 = [208r,224r:0)  0@208r
%vreg4 = [224r,232r:0)  0@224r
%vreg5 = [232r,240r:0)  0@232r
%vreg6 = [256r,264r:0)  0@256r
%vreg7 = [272r,280r:0)  0@272r
%vreg8 = [248r,280r:0)  0@248r
%vreg9 = [200r,296r:0)  0@200r
%vreg10 = [168r,288r:0)  0@168r
%vreg11 = [952r,960r:0)  0@952r
%vreg12 = [960r,1040r:0)  0@960r
%vreg13 = [944r,1040r:0)  0@944r
%vreg14 = [2152r,2176r:0)  0@2152r
%vreg15 = [2160r,2168r:0)  0@2160r
%vreg16 = [2168r,2192r:0)  0@2168r
%vreg17 = [2144r,2192r:0)  0@2144r
%vreg18 = [1928r,1952r:0)  0@1928r
%vreg19 = [1936r,1944r:0)  0@1936r
%vreg20 = [1944r,1952r:0)  0@1944r
%vreg21 = [1896r,1920r:0)  0@1896r
%vreg22 = [1904r,1912r:0)  0@1904r
%vreg23 = [1912r,1920r:0)  0@1912r
%vreg24 = [4r,4d:0)  0@4r
%vreg25 = [160r,160d:0)  0@160r
%vreg26 = [24r,48r:0)  0@24r
%vreg27 = [32r,40r:0)  0@32r
%vreg28 = [40r,48r:0)  0@40r
%vreg29 = [48r,160r:0)  0@48r
%vreg30 = [56r,152r:0)  0@56r
%vreg31 = [64r,112r:0)  0@64r
%vreg32 = [72r,80r:0)  0@72r
%vreg33 = [80r,128r:0)  0@80r
%vreg34 = [88r,96r:0)  0@88r
%vreg35 = [96r,136r:0)  0@96r
%vreg36 = [104r,112r:0)  0@104r
%vreg37 = [112r,144r:0)  0@112r
%vreg38 = [120r,128r:0)  0@120r
%vreg39 = [128r,136r:0)  0@128r
%vreg40 = [136r,144r:0)  0@136r
%vreg41 = [144r,152r:0)  0@144r
%vreg42 = [152r,160r:0)  0@152r
%vreg43 = [304r,304d:0)  0@304r
%vreg44 = [448r,448d:0)  0@448r
%vreg45 = [312r,336r:0)  0@312r
%vreg46 = [320r,328r:0)  0@320r
%vreg47 = [328r,336r:0)  0@328r
%vreg48 = [336r,448r:0)  0@336r
%vreg49 = [344r,440r:0)  0@344r
%vreg50 = [352r,400r:0)  0@352r
%vreg51 = [360r,368r:0)  0@360r
%vreg52 = [368r,416r:0)  0@368r
%vreg53 = [376r,384r:0)  0@376r
%vreg54 = [384r,424r:0)  0@384r
%vreg55 = [392r,400r:0)  0@392r
%vreg56 = [400r,432r:0)  0@400r
%vreg57 = [408r,416r:0)  0@408r
%vreg58 = [416r,424r:0)  0@416r
%vreg59 = [424r,432r:0)  0@424r
%vreg60 = [432r,440r:0)  0@432r
%vreg61 = [440r,448r:0)  0@440r
%vreg62 = [456r,456d:0)  0@456r
%vreg63 = [600r,600d:0)  0@600r
%vreg64 = [464r,488r:0)  0@464r
%vreg65 = [472r,480r:0)  0@472r
%vreg66 = [480r,488r:0)  0@480r
%vreg67 = [488r,600r:0)  0@488r
%vreg68 = [496r,592r:0)  0@496r
%vreg69 = [504r,552r:0)  0@504r
%vreg70 = [512r,520r:0)  0@512r
%vreg71 = [520r,568r:0)  0@520r
%vreg72 = [528r,536r:0)  0@528r
%vreg73 = [536r,576r:0)  0@536r
%vreg74 = [544r,552r:0)  0@544r
%vreg75 = [552r,584r:0)  0@552r
%vreg76 = [560r,568r:0)  0@560r
%vreg77 = [568r,576r:0)  0@568r
%vreg78 = [576r,584r:0)  0@576r
%vreg79 = [584r,592r:0)  0@584r
%vreg80 = [592r,600r:0)  0@592r
%vreg81 = [608r,608d:0)  0@608r
%vreg82 = [752r,752d:0)  0@752r
%vreg83 = [616r,640r:0)  0@616r
%vreg84 = [624r,632r:0)  0@624r
%vreg85 = [632r,640r:0)  0@632r
%vreg86 = [640r,752r:0)  0@640r
%vreg87 = [648r,744r:0)  0@648r
%vreg88 = [656r,704r:0)  0@656r
%vreg89 = [664r,672r:0)  0@664r
%vreg90 = [672r,720r:0)  0@672r
%vreg91 = [680r,688r:0)  0@680r
%vreg92 = [688r,728r:0)  0@688r
%vreg93 = [696r,704r:0)  0@696r
%vreg94 = [704r,736r:0)  0@704r
%vreg95 = [712r,720r:0)  0@712r
%vreg96 = [720r,728r:0)  0@720r
%vreg97 = [728r,736r:0)  0@728r
%vreg98 = [736r,744r:0)  0@736r
%vreg99 = [744r,752r:0)  0@744r
%vreg100 = [1064r,1072r:0)  0@1064r
%vreg101 = [1080r,1088r:0)  0@1080r
%vreg102 = [1088r,1888B:0)  0@1088r
%vreg103 = [1208r,1216r:0)  0@1208r
%vreg104 = [1224r,1232r:0)  0@1224r
%vreg105 = [1232r,1888B:0)  0@1232r
%vreg106 = [1328r,1336r:0)  0@1328r
%vreg107 = [1344r,1352r:0)  0@1344r
%vreg108 = [1352r,1888B:0)  0@1352r
%vreg109 = [1696r,1704r:0)  0@1696r
%vreg110 = [1712r,1720r:0)  0@1712r
%vreg111 = [1720r,1888B:0)  0@1720r
%vreg112 = [1096r,1104r:0)  0@1096r
%vreg113 = [1112r,1120r:0)  0@1112r
%vreg114 = [1120r,1888B:0)  0@1120r
%vreg115 = [1360r,1368r:0)  0@1360r
%vreg116 = [1376r,1384r:0)  0@1376r
%vreg117 = [1384r,1888B:0)  0@1384r
%vreg118 = [968r,1016r:0)  0@968r
%vreg119 = [1152r,1176r:0)  0@1152r
%vreg120 = [984r,1024r:0)  0@984r
%vreg121 = [1272r,1296r:0)  0@1272r
%vreg122 = [1000r,1032r:0)  0@1000r
%vreg123 = [1424r,1488r:0)  0@1424r
%vreg124 = [1168r,1184r:0)  0@1168r
%vreg125 = [1288r,1304r:0)  0@1288r
%vreg126 = [1440r,1528r:0)  0@1440r
%vreg127 = [1176r,1184r:0)  0@1176r
%vreg128 = [1296r,1304r:0)  0@1296r
%vreg129 = [1488r,1528r:0)  0@1488r
%vreg130 = [2200r,2216r:0)  0@2200r
%vreg131 = [2208r,2216r:0)  0@2208r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function trp_init3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %trp_init3.entry
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg26<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg26
4B		  * %vreg27<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg27
4B		  * %vreg28<def> = SRLI %vreg27, 12; GR32Bit:%vreg28,%vreg27
4B		  * %vreg29<def> = ADD %vreg26, %vreg28; GR32Bit:%vreg29,%vreg26,%vreg28
4B		  * %vreg30<def> = ADDI %zero, 32; GR32Bit:%vreg30
4B		  * %vreg31<def> = SRLI %t5, 22; GR32Bit:%vreg31
4B		  * %vreg32<def> = SRLI %t5, 12; GR32Bit:%vreg32
4B		  * %vreg33<def> = ANDI %vreg32, 15; GR32Bit:%vreg33,%vreg32
4B		  * %vreg34<def> = SRLI %t5, 6; GR32Bit:%vreg34
4B		  * %vreg35<def> = ANDI %vreg34, 63; GR32Bit:%vreg35,%vreg34
4B		  * %vreg36<def> = ADDI %zero, 832; GR32Bit:%vreg36
4B		  * %vreg37<def> = MUL %vreg31, %vreg36; GR32Bit:%vreg37,%vreg31,%vreg36
4B		  * %vreg38<def> = ADDI %zero, 52; GR32Bit:%vreg38
4B		  * %vreg39<def> = MUL %vreg33, %vreg38; GR32Bit:%vreg39,%vreg33,%vreg38
4B		  * %vreg40<def> = ADD %vreg39, %vreg35; GR32Bit:%vreg40,%vreg39,%vreg35
4B		  * %vreg41<def> = ADD %vreg40, %vreg37; GR32Bit:%vreg41,%vreg40,%vreg37
4B		  * %vreg42<def> = MUL %vreg41, %vreg30; GR32Bit:%vreg42,%vreg41,%vreg30
4B		  * %t5<def> = ADD %vreg29, %vreg42; GR32Bit:%vreg29,%vreg42
4B		  * %vreg10<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg10
4B		  * %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
4B		  * %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
4B		  * SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
4B		  * %vreg9<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg9
4B		  * %vreg3<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg3
4B		  * SRLI %vreg3, %vreg3, 12; GR32Bit:%vreg3
4B		  * %vreg2<def> = LUI <ga:@redefine_in_placeholder>[TF=2]; GR32Bit:%vreg2
4B		  * %vreg4<def> = ADD %vreg3, %vreg2; GR32Bit:%vreg4,%vreg3,%vreg2
4B		  * %vreg5<def> = LW %vreg4, 0; mem:LD4[@redefine_in_placeholder] GR32Bit:%vreg5,%vreg4
4B		  * SW %vreg5, %vreg1, 0; mem:ST4[%8](align=16) GR32Bit:%vreg5,%vreg1
4B		  * %vreg8<def> = ADDI %zero, 1; GR32Bit:%vreg8
4B		  * %vreg6<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg6,%vreg0
4B		  * SW %zero, %vreg6, 4; mem:ST4[%10] GR32Bit:%vreg6
4B		  * %vreg7<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg7,%vreg0
4B		  * SW %vreg8, %vreg7, 8; mem:ST4[%12] GR32Bit:%vreg8,%vreg7
4B		  * SW %zero, %vreg10, 0; mem:ST4[%5] GR32Bit:%vreg10
4B		  * SW %zero, %vreg9, 0; mem:ST4[%3] GR32Bit:%vreg9
304B		%t4<def> = ADD %t5, %zero
304B		  * %vreg45<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg45
304B		  * %vreg46<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg46
304B		  * %vreg47<def> = SRLI %vreg46, 12; GR32Bit:%vreg47,%vreg46
304B		  * %vreg48<def> = ADD %vreg45, %vreg47; GR32Bit:%vreg48,%vreg45,%vreg47
304B		  * %vreg49<def> = ADDI %zero, 32; GR32Bit:%vreg49
304B		  * %vreg50<def> = SRLI %t5, 22; GR32Bit:%vreg50
304B		  * %vreg51<def> = SRLI %t5, 12; GR32Bit:%vreg51
304B		  * %vreg52<def> = ANDI %vreg51, 15; GR32Bit:%vreg52,%vreg51
304B		  * %vreg53<def> = SRLI %t5, 6; GR32Bit:%vreg53
304B		  * %vreg54<def> = ANDI %vreg53, 63; GR32Bit:%vreg54,%vreg53
304B		  * %vreg55<def> = ADDI %zero, 832; GR32Bit:%vreg55
304B		  * %vreg56<def> = MUL %vreg50, %vreg55; GR32Bit:%vreg56,%vreg50,%vreg55
304B		  * %vreg57<def> = ADDI %zero, 52; GR32Bit:%vreg57
304B		  * %vreg58<def> = MUL %vreg52, %vreg57; GR32Bit:%vreg58,%vreg52,%vreg57
304B		  * %vreg59<def> = ADD %vreg58, %vreg54; GR32Bit:%vreg59,%vreg58,%vreg54
304B		  * %vreg60<def> = ADD %vreg59, %vreg56; GR32Bit:%vreg60,%vreg59,%vreg56
304B		  * %vreg61<def> = MUL %vreg60, %vreg49; GR32Bit:%vreg61,%vreg60,%vreg49
304B		  * %t5<def> = ADD %vreg48, %vreg61; GR32Bit:%vreg48,%vreg61
456B		%t4<def> = ADD %t5, %zero
456B		  * %vreg64<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg64
456B		  * %vreg65<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg65
456B		  * %vreg66<def> = SRLI %vreg65, 12; GR32Bit:%vreg66,%vreg65
456B		  * %vreg67<def> = ADD %vreg64, %vreg66; GR32Bit:%vreg67,%vreg64,%vreg66
456B		  * %vreg68<def> = ADDI %zero, 32; GR32Bit:%vreg68
456B		  * %vreg69<def> = SRLI %t5, 22; GR32Bit:%vreg69
456B		  * %vreg70<def> = SRLI %t5, 12; GR32Bit:%vreg70
456B		  * %vreg71<def> = ANDI %vreg70, 15; GR32Bit:%vreg71,%vreg70
456B		  * %vreg72<def> = SRLI %t5, 6; GR32Bit:%vreg72
456B		  * %vreg73<def> = ANDI %vreg72, 63; GR32Bit:%vreg73,%vreg72
456B		  * %vreg74<def> = ADDI %zero, 832; GR32Bit:%vreg74
456B		  * %vreg75<def> = MUL %vreg69, %vreg74; GR32Bit:%vreg75,%vreg69,%vreg74
456B		  * %vreg76<def> = ADDI %zero, 52; GR32Bit:%vreg76
456B		  * %vreg77<def> = MUL %vreg71, %vreg76; GR32Bit:%vreg77,%vreg71,%vreg76
456B		  * %vreg78<def> = ADD %vreg77, %vreg73; GR32Bit:%vreg78,%vreg77,%vreg73
456B		  * %vreg79<def> = ADD %vreg78, %vreg75; GR32Bit:%vreg79,%vreg78,%vreg75
456B		  * %vreg80<def> = MUL %vreg79, %vreg68; GR32Bit:%vreg80,%vreg79,%vreg68
456B		  * %t5<def> = ADD %vreg67, %vreg80; GR32Bit:%vreg67,%vreg80
608B		%t4<def> = ADD %t5, %zero
608B		  * %vreg83<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg83
608B		  * %vreg84<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg84
608B		  * %vreg85<def> = SRLI %vreg84, 12; GR32Bit:%vreg85,%vreg84
608B		  * %vreg86<def> = ADD %vreg83, %vreg85; GR32Bit:%vreg86,%vreg83,%vreg85
608B		  * %vreg87<def> = ADDI %zero, 32; GR32Bit:%vreg87
608B		  * %vreg88<def> = SRLI %t5, 22; GR32Bit:%vreg88
608B		  * %vreg89<def> = SRLI %t5, 12; GR32Bit:%vreg89
608B		  * %vreg90<def> = ANDI %vreg89, 15; GR32Bit:%vreg90,%vreg89
608B		  * %vreg91<def> = SRLI %t5, 6; GR32Bit:%vreg91
608B		  * %vreg92<def> = ANDI %vreg91, 63; GR32Bit:%vreg92,%vreg91
608B		  * %vreg93<def> = ADDI %zero, 832; GR32Bit:%vreg93
608B		  * %vreg94<def> = MUL %vreg88, %vreg93; GR32Bit:%vreg94,%vreg88,%vreg93
608B		  * %vreg95<def> = ADDI %zero, 52; GR32Bit:%vreg95
608B		  * %vreg96<def> = MUL %vreg90, %vreg95; GR32Bit:%vreg96,%vreg90,%vreg95
608B		  * %vreg97<def> = ADD %vreg96, %vreg92; GR32Bit:%vreg97,%vreg96,%vreg92
608B		  * %vreg98<def> = ADD %vreg97, %vreg94; GR32Bit:%vreg98,%vreg97,%vreg94
608B		  * %vreg99<def> = MUL %vreg98, %vreg87; GR32Bit:%vreg99,%vreg98,%vreg87
608B		  * %t5<def> = ADD %vreg86, %vreg99; GR32Bit:%vreg86,%vreg99
	    Successors according to CFG: BB#1

936B	BB#1: derived from LLVM BB %trp_init3.for.cond
	    Predecessors according to CFG: BB#0 BB#2
944B		%vreg13<def> = ADDI %zero, 4; GR32Bit:%vreg13
944B		  * %vreg11<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg11
944B		  * %vreg12<def> = LW %vreg11, 0; mem:LD4[%5] GR32Bit:%vreg12,%vreg11
944B		  * %vreg118<def> = LUI 1; GR32Bit:%vreg118
944B		  * WRITEPM %vreg118, %vreg12, 0; GR32Bit:%vreg118,%vreg12
944B		  * %vreg120<def> = LUI 2; GR32Bit:%vreg120
944B		  * WRITEPM %vreg120, %vreg12, 0; GR32Bit:%vreg120,%vreg12
944B		  * %vreg122<def> = LUI 3; GR32Bit:%vreg122
944B		  * WRITEPM %vreg122, %vreg12, 0; GR32Bit:%vreg122,%vreg12
944B		  * WRITEPM %vreg118, %vreg13, 4; GR32Bit:%vreg118,%vreg13
944B		  * WRITEPM %vreg120, %vreg13, 4; GR32Bit:%vreg120,%vreg13
944B		  * WRITEPM %vreg122, %vreg13, 4; GR32Bit:%vreg122,%vreg13
944B		  * BGT <BB#3>, %vreg12, %vreg13; GR32Bit:%vreg12,%vreg13
944B		  * %zero<def> = ADDI %zero, 0
944B		  * %zero<def> = ADDI %zero, 0
944B		  * %vreg100<def> = LUI 1; GR32Bit:%vreg100
944B		  * WRITEPM %vreg100, %vreg100, 192; GR32Bit:%vreg100
944B		  * %vreg101<def> = LUI 0; GR32Bit:%vreg101
944B		  * %vreg102<def> = DREADPM %vreg101, 188; GR32Bit:%vreg102,%vreg101
944B		  * %vreg112<def> = LUI 2; GR32Bit:%vreg112
944B		  * WRITEPM %vreg112, %vreg112, 176; GR32Bit:%vreg112
944B		  * %vreg113<def> = LUI 0; GR32Bit:%vreg113
944B		  * %vreg114<def> = DREADPM %vreg113, 168; GR32Bit:%vreg114,%vreg113
944B		  * JAL <BB#2>
944B		  * %zero<def> = ADDI %zero, 0
944B		  * %zero<def> = ADDI %zero, 0
1152B		%vreg119<def> = LUI 1; GR32Bit:%vreg119
1152B		  * %vreg124<def> = DREADPM %vreg119, 0; GR32Bit:%vreg124,%vreg119
1152B		  * %vreg127<def> = DREADPM %vreg119, 4; GR32Bit:%vreg127,%vreg119
1152B		  * BGT <BB#3>, %vreg124, %vreg127; GR32Bit:%vreg124,%vreg127
1152B		  * %zero<def> = ADDI %zero, 0
1152B		  * %zero<def> = ADDI %zero, 0
1152B		  * %vreg103<def> = LUI 0; GR32Bit:%vreg103
1152B		  * WRITEPM %vreg103, %vreg103, 188; GR32Bit:%vreg103
1152B		  * %vreg104<def> = LUI 1; GR32Bit:%vreg104
1152B		  * %vreg105<def> = DREADPM %vreg104, 192; GR32Bit:%vreg105,%vreg104
1152B		  * JAL <BB#2>
1152B		  * %zero<def> = ADDI %zero, 0
1152B		  * %zero<def> = ADDI %zero, 0
1272B		%vreg121<def> = LUI 2; GR32Bit:%vreg121
1272B		  * %vreg125<def> = DREADPM %vreg121, 0; GR32Bit:%vreg125,%vreg121
1272B		  * %vreg128<def> = DREADPM %vreg121, 4; GR32Bit:%vreg128,%vreg121
1272B		  * BGT <BB#3>, %vreg125, %vreg128; GR32Bit:%vreg125,%vreg128
1272B		  * %zero<def> = ADDI %zero, 0
1272B		  * %zero<def> = ADDI %zero, 0
1272B		  * %vreg106<def> = LUI 3; GR32Bit:%vreg106
1272B		  * WRITEPM %vreg106, %vreg106, 184; GR32Bit:%vreg106
1272B		  * %vreg107<def> = LUI 2; GR32Bit:%vreg107
1272B		  * %vreg108<def> = DREADPM %vreg107, 180; GR32Bit:%vreg108,%vreg107
1272B		  * %vreg115<def> = LUI 0; GR32Bit:%vreg115
1272B		  * WRITEPM %vreg115, %vreg115, 168; GR32Bit:%vreg115
1272B		  * %vreg116<def> = LUI 2; GR32Bit:%vreg116
1272B		  * %vreg117<def> = DREADPM %vreg116, 176; GR32Bit:%vreg117,%vreg116
1272B		  * JAL <BB#2>
1272B		  * %zero<def> = ADDI %zero, 0
1272B		  * %zero<def> = ADDI %zero, 0
1424B		%vreg123<def> = LUI 3; GR32Bit:%vreg123
1424B		  * %vreg126<def> = DREADPM %vreg123, 0; GR32Bit:%vreg126,%vreg123
1424B		  * %vreg129<def> = DREADPM %vreg123, 4; GR32Bit:%vreg129,%vreg123
1424B		  * BGT <BB#3>, %vreg126, %vreg129; GR32Bit:%vreg126,%vreg129
1424B		  * %zero<def> = ADDI %zero, 0
1424B		  * %zero<def> = ADDI %zero, 0
1424B		  * %vreg109<def> = LUI 2; GR32Bit:%vreg109
1424B		  * WRITEPM %vreg109, %vreg109, 180; GR32Bit:%vreg109
1424B		  * %vreg110<def> = LUI 3; GR32Bit:%vreg110
1424B		  * %vreg111<def> = DREADPM %vreg110, 184; GR32Bit:%vreg111,%vreg110
1424B		  * JAL <BB#2>
1424B		  * %zero<def> = ADDI %zero, 0
1424B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#2(124) BB#3(4)

1888B	BB#2: derived from LLVM BB %trp_init3.for.inc
	    Predecessors according to CFG: BB#1
1896B		%vreg21<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg21
1896B		  * %vreg22<def> = LW %vreg21, 0; mem:LD4[%5] GR32Bit:%vreg22,%vreg21
1896B		  * %vreg23<def> = ADDI %vreg22, 1; GR32Bit:%vreg23,%vreg22
1896B		  * SW %vreg23, %vreg21, 0; mem:ST4[%5] GR32Bit:%vreg23,%vreg21
1896B		  * %vreg18<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg18
1896B		  * %vreg19<def> = LW %vreg18, 0; mem:LD4[%3] GR32Bit:%vreg19,%vreg18
1896B		  * %vreg20<def> = ADDI %vreg19, 1; GR32Bit:%vreg20,%vreg19
1896B		  * SW %vreg20, %vreg18, 0; mem:ST4[%3] GR32Bit:%vreg20,%vreg18
1896B		  * JAL <BB#1>
1896B		  * %zero<def> = ADDI %zero, 0
1896B		  * %zero<def> = ADDI %zero, 0
2016B		JAL <BB#1>
2016B		  * %zero<def> = ADDI %zero, 0
2016B		  * %zero<def> = ADDI %zero, 0
2040B		JAL <BB#1>
2040B		  * %zero<def> = ADDI %zero, 0
2040B		  * %zero<def> = ADDI %zero, 0
2064B		JAL <BB#1>
2064B		  * %zero<def> = ADDI %zero, 0
2064B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#1

2136B	BB#3: derived from LLVM BB %trp_init3.return
	    Predecessors according to CFG: BB#1
2144B		%vreg17<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg17
2144B		  * %vreg14<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg14
2144B		  * %vreg15<def> = LW %vreg14, 0; mem:LD4[%3] GR32Bit:%vreg15,%vreg14
2144B		  * %vreg16<def> = ANDI %vreg15, 2; GR32Bit:%vreg16,%vreg15
2144B		  * SW %vreg16, %vreg14, 0; mem:ST4[%3] GR32Bit:%vreg16,%vreg14
2144B		  * SW %vreg16, %vreg17, 0; mem:ST4[%1] GR32Bit:%vreg16,%vreg17
2144B		  * %vreg130<def> = ADDI %zero, 128; GR32Bit:%vreg130
2144B		  * %vreg131<def> = LW %t5, <fi#0>; GR32Bit:%vreg131
2144B		  * WRITECM %vreg130, %vreg131, 0; GR32Bit:%vreg130,%vreg131
2144B		  * FDELETE %t4, 0
2144B		  * END 0
2144B		  * %zero<def> = ADDI %zero, 0
2144B		  * %zero<def> = ADDI %zero, 0
2256B		END 0
2256B		  * %zero<def> = ADDI %zero, 0
2256B		  * %zero<def> = ADDI %zero, 0
2280B		END 0
2280B		  * %zero<def> = ADDI %zero, 0
2280B		  * %zero<def> = ADDI %zero, 0
2304B		END 0
2304B		  * %zero<def> = ADDI %zero, 0
2304B		  * %zero<def> = ADDI %zero, 0

# End machine code for function trp_init3.

********** COMPUTING LIVE DEBUG VARIABLES: trp_init3 **********
********** DEBUG VARIABLES **********
********** Compute Spill Weights **********
********** Function: trp_init3
********** GREEDY REGISTER ALLOCATION **********
********** Function: trp_init3

selectOrSplit GR32Bit:%vreg102 [1088r,1888B:0)  0@1088r
assigning %vreg102 to %t0: t0

selectOrSplit GR32Bit:%vreg114 [1120r,1888B:0)  0@1120r
assigning %vreg114 to %t1: t1

selectOrSplit GR32Bit:%vreg105 [1232r,1888B:0)  0@1232r
assigning %vreg105 to %t2: t2

selectOrSplit GR32Bit:%vreg108 [1352r,1888B:0)  0@1352r
assigning %vreg108 to %fp: fp

selectOrSplit GR32Bit:%vreg117 [1384r,1888B:0)  0@1384r
assigning %vreg117 to %a0: a0

selectOrSplit GR32Bit:%vreg111 [1720r,1888B:0)  0@1720r
assigning %vreg111 to %a1: a1

selectOrSplit GR32Bit:%vreg10 [168r,288r:0)  0@168r
assigning %vreg10 to %t0: t0

selectOrSplit GR32Bit:%vreg29 [48r,160r:0)  0@48r
assigning %vreg29 to %t0: t0

selectOrSplit GR32Bit:%vreg48 [336r,448r:0)  0@336r
assigning %vreg48 to %t0: t0

selectOrSplit GR32Bit:%vreg67 [488r,600r:0)  0@488r
assigning %vreg67 to %t0: t0

selectOrSplit GR32Bit:%vreg86 [640r,752r:0)  0@640r
assigning %vreg86 to %t0: t0

selectOrSplit GR32Bit:%vreg0 [176r,272r:0)  0@176r
assigning %vreg0 to %t1: t1

selectOrSplit GR32Bit:%vreg9 [200r,296r:0)  0@200r
assigning %vreg9 to %t2: t2

selectOrSplit GR32Bit:%vreg13 [944r,1040r:0)  0@944r
assigning %vreg13 to %t0: t0

selectOrSplit GR32Bit:%vreg30 [56r,152r:0)  0@56r
assigning %vreg30 to %t1: t1

selectOrSplit GR32Bit:%vreg49 [344r,440r:0)  0@344r
assigning %vreg49 to %t1: t1

selectOrSplit GR32Bit:%vreg68 [496r,592r:0)  0@496r
assigning %vreg68 to %t1: t1

selectOrSplit GR32Bit:%vreg87 [648r,744r:0)  0@648r
assigning %vreg87 to %t1: t1

selectOrSplit GR32Bit:%vreg126 [1440r,1528r:0)  0@1440r
assigning %vreg126 to %a1: a1

selectOrSplit GR32Bit:%vreg12 [960r,1040r:0)  0@960r
assigning %vreg12 to %t1: t1

selectOrSplit GR32Bit:%vreg123 [1424r,1488r:0)  0@1424r
assigning %vreg123 to %a2: a2

selectOrSplit GR32Bit:%vreg1 [184r,240r:0)  0@184r
assigning %vreg1 to %fp: fp

selectOrSplit GR32Bit:%vreg17 [2144r,2192r:0)  0@2144r
assigning %vreg17 to %t0: t0

selectOrSplit GR32Bit:%vreg31 [64r,112r:0)  0@64r
assigning %vreg31 to %t2: t2

selectOrSplit GR32Bit:%vreg33 [80r,128r:0)  0@80r
assigning %vreg33 to %fp: fp

selectOrSplit GR32Bit:%vreg50 [352r,400r:0)  0@352r
assigning %vreg50 to %t2: t2

selectOrSplit GR32Bit:%vreg52 [368r,416r:0)  0@368r
assigning %vreg52 to %fp: fp

selectOrSplit GR32Bit:%vreg69 [504r,552r:0)  0@504r
assigning %vreg69 to %t2: t2

selectOrSplit GR32Bit:%vreg71 [520r,568r:0)  0@520r
assigning %vreg71 to %fp: fp

selectOrSplit GR32Bit:%vreg88 [656r,704r:0)  0@656r
assigning %vreg88 to %t2: t2

selectOrSplit GR32Bit:%vreg90 [672r,720r:0)  0@672r
assigning %vreg90 to %fp: fp

selectOrSplit GR32Bit:%vreg118 [968r,1016r:0)  0@968r
assigning %vreg118 to %t2: t2

selectOrSplit GR32Bit:%vreg35 [96r,136r:0)  0@96r
assigning %vreg35 to %a0: a0

selectOrSplit GR32Bit:%vreg54 [384r,424r:0)  0@384r
assigning %vreg54 to %a0: a0

selectOrSplit GR32Bit:%vreg73 [536r,576r:0)  0@536r
assigning %vreg73 to %a0: a0

selectOrSplit GR32Bit:%vreg92 [688r,728r:0)  0@688r
assigning %vreg92 to %a0: a0

selectOrSplit GR32Bit:%vreg120 [984r,1024r:0)  0@984r
assigning %vreg120 to %fp: fp

selectOrSplit GR32Bit:%vreg129 [1488r,1528r:0)  0@1488r
assigning %vreg129 to %a2: a2

selectOrSplit GR32Bit:%vreg8 [248r,280r:0)  0@248r
assigning %vreg8 to %fp: fp

selectOrSplit GR32Bit:%vreg37 [112r,144r:0)  0@112r
assigning %vreg37 to %t2: t2

selectOrSplit GR32Bit:%vreg56 [400r,432r:0)  0@400r
assigning %vreg56 to %t2: t2

selectOrSplit GR32Bit:%vreg75 [552r,584r:0)  0@552r
assigning %vreg75 to %t2: t2

selectOrSplit GR32Bit:%vreg94 [704r,736r:0)  0@704r
assigning %vreg94 to %t2: t2

selectOrSplit GR32Bit:%vreg122 [1000r,1032r:0)  0@1000r
assigning %vreg122 to %a0: a0

selectOrSplit GR32Bit:%vreg14 [2152r,2176r:0)  0@2152r
assigning %vreg14 to %t1: t1

selectOrSplit GR32Bit:%vreg16 [2168r,2192r:0)  0@2168r
assigning %vreg16 to %t2: t2

selectOrSplit GR32Bit:%vreg18 [1928r,1952r:0)  0@1928r
assigning %vreg18 to %t0: t0

selectOrSplit GR32Bit:%vreg21 [1896r,1920r:0)  0@1896r
assigning %vreg21 to %t0: t0

selectOrSplit GR32Bit:%vreg26 [24r,48r:0)  0@24r
assigning %vreg26 to %t0: t0

selectOrSplit GR32Bit:%vreg45 [312r,336r:0)  0@312r
assigning %vreg45 to %t0: t0

selectOrSplit GR32Bit:%vreg64 [464r,488r:0)  0@464r
assigning %vreg64 to %t0: t0

selectOrSplit GR32Bit:%vreg83 [616r,640r:0)  0@616r
assigning %vreg83 to %t0: t0

selectOrSplit GR32Bit:%vreg119 [1152r,1176r:0)  0@1152r
assigning %vreg119 to %t2: t2

selectOrSplit GR32Bit:%vreg121 [1272r,1296r:0)  0@1272r
assigning %vreg121 to %fp: fp

selectOrSplit GR32Bit:%vreg3 [208r,224r:0)  0@208r
assigning %vreg3 to %a0: a0

selectOrSplit GR32Bit:%vreg124 [1168r,1184r:0)  0@1168r
assigning %vreg124 to %fp: fp

selectOrSplit GR32Bit:%vreg125 [1288r,1304r:0)  0@1288r
assigning %vreg125 to %a0: a0

selectOrSplit GR32Bit:%vreg130 [2200r,2216r:0)  0@2200r
assigning %vreg130 to %t0: t0

selectOrSplit GR32Bit:%vreg2 [216r,224r:0)  0@216r
assigning %vreg2 to %a1: a1

selectOrSplit GR32Bit:%vreg4 [224r,232r:0)  0@224r
assigning %vreg4 to %a0: a0

selectOrSplit GR32Bit:%vreg5 [232r,240r:0)  0@232r
assigning %vreg5 to %a0: a0

selectOrSplit GR32Bit:%vreg6 [256r,264r:0)  0@256r
assigning %vreg6 to %a0: a0

selectOrSplit GR32Bit:%vreg7 [272r,280r:0)  0@272r
assigning %vreg7 to %t1: t1

selectOrSplit GR32Bit:%vreg11 [952r,960r:0)  0@952r
assigning %vreg11 to %t1: t1

selectOrSplit GR32Bit:%vreg15 [2160r,2168r:0)  0@2160r
assigning %vreg15 to %t2: t2

selectOrSplit GR32Bit:%vreg19 [1936r,1944r:0)  0@1936r
assigning %vreg19 to %t1: t1

selectOrSplit GR32Bit:%vreg20 [1944r,1952r:0)  0@1944r
assigning %vreg20 to %t1: t1

selectOrSplit GR32Bit:%vreg22 [1904r,1912r:0)  0@1904r
assigning %vreg22 to %t1: t1

selectOrSplit GR32Bit:%vreg23 [1912r,1920r:0)  0@1912r
assigning %vreg23 to %t1: t1

selectOrSplit GR32Bit:%vreg27 [32r,40r:0)  0@32r
assigning %vreg27 to %t1: t1

selectOrSplit GR32Bit:%vreg28 [40r,48r:0)  0@40r
assigning %vreg28 to %t1: t1

selectOrSplit GR32Bit:%vreg32 [72r,80r:0)  0@72r
assigning %vreg32 to %fp: fp

selectOrSplit GR32Bit:%vreg34 [88r,96r:0)  0@88r
assigning %vreg34 to %a0: a0

selectOrSplit GR32Bit:%vreg36 [104r,112r:0)  0@104r
assigning %vreg36 to %a1: a1

selectOrSplit GR32Bit:%vreg38 [120r,128r:0)  0@120r
assigning %vreg38 to %a1: a1

selectOrSplit GR32Bit:%vreg39 [128r,136r:0)  0@128r
assigning %vreg39 to %fp: fp

selectOrSplit GR32Bit:%vreg40 [136r,144r:0)  0@136r
assigning %vreg40 to %fp: fp

selectOrSplit GR32Bit:%vreg41 [144r,152r:0)  0@144r
assigning %vreg41 to %t2: t2

selectOrSplit GR32Bit:%vreg42 [152r,160r:0)  0@152r
assigning %vreg42 to %t1: t1

selectOrSplit GR32Bit:%vreg46 [320r,328r:0)  0@320r
assigning %vreg46 to %t1: t1

selectOrSplit GR32Bit:%vreg47 [328r,336r:0)  0@328r
assigning %vreg47 to %t1: t1

selectOrSplit GR32Bit:%vreg51 [360r,368r:0)  0@360r
assigning %vreg51 to %fp: fp

selectOrSplit GR32Bit:%vreg53 [376r,384r:0)  0@376r
assigning %vreg53 to %a0: a0

selectOrSplit GR32Bit:%vreg55 [392r,400r:0)  0@392r
assigning %vreg55 to %a1: a1

selectOrSplit GR32Bit:%vreg57 [408r,416r:0)  0@408r
assigning %vreg57 to %a1: a1

selectOrSplit GR32Bit:%vreg58 [416r,424r:0)  0@416r
assigning %vreg58 to %fp: fp

selectOrSplit GR32Bit:%vreg59 [424r,432r:0)  0@424r
assigning %vreg59 to %fp: fp

selectOrSplit GR32Bit:%vreg60 [432r,440r:0)  0@432r
assigning %vreg60 to %t2: t2

selectOrSplit GR32Bit:%vreg61 [440r,448r:0)  0@440r
assigning %vreg61 to %t1: t1

selectOrSplit GR32Bit:%vreg65 [472r,480r:0)  0@472r
assigning %vreg65 to %t1: t1

selectOrSplit GR32Bit:%vreg66 [480r,488r:0)  0@480r
assigning %vreg66 to %t1: t1

selectOrSplit GR32Bit:%vreg70 [512r,520r:0)  0@512r
assigning %vreg70 to %fp: fp

selectOrSplit GR32Bit:%vreg72 [528r,536r:0)  0@528r
assigning %vreg72 to %a0: a0

selectOrSplit GR32Bit:%vreg74 [544r,552r:0)  0@544r
assigning %vreg74 to %a1: a1

selectOrSplit GR32Bit:%vreg76 [560r,568r:0)  0@560r
assigning %vreg76 to %a1: a1

selectOrSplit GR32Bit:%vreg77 [568r,576r:0)  0@568r
assigning %vreg77 to %fp: fp

selectOrSplit GR32Bit:%vreg78 [576r,584r:0)  0@576r
assigning %vreg78 to %fp: fp

selectOrSplit GR32Bit:%vreg79 [584r,592r:0)  0@584r
assigning %vreg79 to %t2: t2

selectOrSplit GR32Bit:%vreg80 [592r,600r:0)  0@592r
assigning %vreg80 to %t1: t1

selectOrSplit GR32Bit:%vreg84 [624r,632r:0)  0@624r
assigning %vreg84 to %t1: t1

selectOrSplit GR32Bit:%vreg85 [632r,640r:0)  0@632r
assigning %vreg85 to %t1: t1

selectOrSplit GR32Bit:%vreg89 [664r,672r:0)  0@664r
assigning %vreg89 to %fp: fp

selectOrSplit GR32Bit:%vreg91 [680r,688r:0)  0@680r
assigning %vreg91 to %a0: a0

selectOrSplit GR32Bit:%vreg93 [696r,704r:0)  0@696r
assigning %vreg93 to %a1: a1

selectOrSplit GR32Bit:%vreg95 [712r,720r:0)  0@712r
assigning %vreg95 to %a1: a1

selectOrSplit GR32Bit:%vreg96 [720r,728r:0)  0@720r
assigning %vreg96 to %fp: fp

selectOrSplit GR32Bit:%vreg97 [728r,736r:0)  0@728r
assigning %vreg97 to %fp: fp

selectOrSplit GR32Bit:%vreg98 [736r,744r:0)  0@736r
assigning %vreg98 to %t2: t2

selectOrSplit GR32Bit:%vreg99 [744r,752r:0)  0@744r
assigning %vreg99 to %t1: t1

selectOrSplit GR32Bit:%vreg100 [1064r,1072r:0)  0@1064r
assigning %vreg100 to %t0: t0

selectOrSplit GR32Bit:%vreg101 [1080r,1088r:0)  0@1080r
assigning %vreg101 to %t0: t0

selectOrSplit GR32Bit:%vreg103 [1208r,1216r:0)  0@1208r
assigning %vreg103 to %t2: t2

selectOrSplit GR32Bit:%vreg104 [1224r,1232r:0)  0@1224r
assigning %vreg104 to %t2: t2

selectOrSplit GR32Bit:%vreg106 [1328r,1336r:0)  0@1328r
assigning %vreg106 to %fp: fp

selectOrSplit GR32Bit:%vreg107 [1344r,1352r:0)  0@1344r
assigning %vreg107 to %fp: fp

selectOrSplit GR32Bit:%vreg109 [1696r,1704r:0)  0@1696r
assigning %vreg109 to %a1: a1

selectOrSplit GR32Bit:%vreg110 [1712r,1720r:0)  0@1712r
assigning %vreg110 to %a1: a1

selectOrSplit GR32Bit:%vreg112 [1096r,1104r:0)  0@1096r
assigning %vreg112 to %t1: t1

selectOrSplit GR32Bit:%vreg113 [1112r,1120r:0)  0@1112r
assigning %vreg113 to %t1: t1

selectOrSplit GR32Bit:%vreg115 [1360r,1368r:0)  0@1360r
assigning %vreg115 to %a0: a0

selectOrSplit GR32Bit:%vreg116 [1376r,1384r:0)  0@1376r
assigning %vreg116 to %a0: a0

selectOrSplit GR32Bit:%vreg127 [1176r,1184r:0)  0@1176r
assigning %vreg127 to %t2: t2

selectOrSplit GR32Bit:%vreg128 [1296r,1304r:0)  0@1296r
assigning %vreg128 to %fp: fp

selectOrSplit GR32Bit:%vreg131 [2208r,2216r:0)  0@2208r
assigning %vreg131 to %t1: t1
********** REWRITE VIRTUAL REGISTERS **********
********** Function: trp_init3
********** REGISTER MAP **********
[%vreg0 -> %t1] GR32Bit
[%vreg1 -> %fp] GR32Bit
[%vreg2 -> %a1] GR32Bit
[%vreg3 -> %a0] GR32Bit
[%vreg4 -> %a0] GR32Bit
[%vreg5 -> %a0] GR32Bit
[%vreg6 -> %a0] GR32Bit
[%vreg7 -> %t1] GR32Bit
[%vreg8 -> %fp] GR32Bit
[%vreg9 -> %t2] GR32Bit
[%vreg10 -> %t0] GR32Bit
[%vreg11 -> %t1] GR32Bit
[%vreg12 -> %t1] GR32Bit
[%vreg13 -> %t0] GR32Bit
[%vreg14 -> %t1] GR32Bit
[%vreg15 -> %t2] GR32Bit
[%vreg16 -> %t2] GR32Bit
[%vreg17 -> %t0] GR32Bit
[%vreg18 -> %t0] GR32Bit
[%vreg19 -> %t1] GR32Bit
[%vreg20 -> %t1] GR32Bit
[%vreg21 -> %t0] GR32Bit
[%vreg22 -> %t1] GR32Bit
[%vreg23 -> %t1] GR32Bit
[%vreg26 -> %t0] GR32Bit
[%vreg27 -> %t1] GR32Bit
[%vreg28 -> %t1] GR32Bit
[%vreg29 -> %t0] GR32Bit
[%vreg30 -> %t1] GR32Bit
[%vreg31 -> %t2] GR32Bit
[%vreg32 -> %fp] GR32Bit
[%vreg33 -> %fp] GR32Bit
[%vreg34 -> %a0] GR32Bit
[%vreg35 -> %a0] GR32Bit
[%vreg36 -> %a1] GR32Bit
[%vreg37 -> %t2] GR32Bit
[%vreg38 -> %a1] GR32Bit
[%vreg39 -> %fp] GR32Bit
[%vreg40 -> %fp] GR32Bit
[%vreg41 -> %t2] GR32Bit
[%vreg42 -> %t1] GR32Bit
[%vreg45 -> %t0] GR32Bit
[%vreg46 -> %t1] GR32Bit
[%vreg47 -> %t1] GR32Bit
[%vreg48 -> %t0] GR32Bit
[%vreg49 -> %t1] GR32Bit
[%vreg50 -> %t2] GR32Bit
[%vreg51 -> %fp] GR32Bit
[%vreg52 -> %fp] GR32Bit
[%vreg53 -> %a0] GR32Bit
[%vreg54 -> %a0] GR32Bit
[%vreg55 -> %a1] GR32Bit
[%vreg56 -> %t2] GR32Bit
[%vreg57 -> %a1] GR32Bit
[%vreg58 -> %fp] GR32Bit
[%vreg59 -> %fp] GR32Bit
[%vreg60 -> %t2] GR32Bit
[%vreg61 -> %t1] GR32Bit
[%vreg64 -> %t0] GR32Bit
[%vreg65 -> %t1] GR32Bit
[%vreg66 -> %t1] GR32Bit
[%vreg67 -> %t0] GR32Bit
[%vreg68 -> %t1] GR32Bit
[%vreg69 -> %t2] GR32Bit
[%vreg70 -> %fp] GR32Bit
[%vreg71 -> %fp] GR32Bit
[%vreg72 -> %a0] GR32Bit
[%vreg73 -> %a0] GR32Bit
[%vreg74 -> %a1] GR32Bit
[%vreg75 -> %t2] GR32Bit
[%vreg76 -> %a1] GR32Bit
[%vreg77 -> %fp] GR32Bit
[%vreg78 -> %fp] GR32Bit
[%vreg79 -> %t2] GR32Bit
[%vreg80 -> %t1] GR32Bit
[%vreg83 -> %t0] GR32Bit
[%vreg84 -> %t1] GR32Bit
[%vreg85 -> %t1] GR32Bit
[%vreg86 -> %t0] GR32Bit
[%vreg87 -> %t1] GR32Bit
[%vreg88 -> %t2] GR32Bit
[%vreg89 -> %fp] GR32Bit
[%vreg90 -> %fp] GR32Bit
[%vreg91 -> %a0] GR32Bit
[%vreg92 -> %a0] GR32Bit
[%vreg93 -> %a1] GR32Bit
[%vreg94 -> %t2] GR32Bit
[%vreg95 -> %a1] GR32Bit
[%vreg96 -> %fp] GR32Bit
[%vreg97 -> %fp] GR32Bit
[%vreg98 -> %t2] GR32Bit
[%vreg99 -> %t1] GR32Bit
[%vreg100 -> %t0] GR32Bit
[%vreg101 -> %t0] GR32Bit
[%vreg102 -> %t0] GR32Bit
[%vreg103 -> %t2] GR32Bit
[%vreg104 -> %t2] GR32Bit
[%vreg105 -> %t2] GR32Bit
[%vreg106 -> %fp] GR32Bit
[%vreg107 -> %fp] GR32Bit
[%vreg108 -> %fp] GR32Bit
[%vreg109 -> %a1] GR32Bit
[%vreg110 -> %a1] GR32Bit
[%vreg111 -> %a1] GR32Bit
[%vreg112 -> %t1] GR32Bit
[%vreg113 -> %t1] GR32Bit
[%vreg114 -> %t1] GR32Bit
[%vreg115 -> %a0] GR32Bit
[%vreg116 -> %a0] GR32Bit
[%vreg117 -> %a0] GR32Bit
[%vreg118 -> %t2] GR32Bit
[%vreg119 -> %t2] GR32Bit
[%vreg120 -> %fp] GR32Bit
[%vreg121 -> %fp] GR32Bit
[%vreg122 -> %a0] GR32Bit
[%vreg123 -> %a2] GR32Bit
[%vreg124 -> %fp] GR32Bit
[%vreg125 -> %a0] GR32Bit
[%vreg126 -> %a1] GR32Bit
[%vreg127 -> %t2] GR32Bit
[%vreg128 -> %fp] GR32Bit
[%vreg129 -> %a2] GR32Bit
[%vreg130 -> %t0] GR32Bit
[%vreg131 -> %t1] GR32Bit

0B	BB#0: derived from LLVM BB %trp_init3.entry
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg26<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg26
4B		  * %vreg27<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg27
4B		  * %vreg28<def> = SRLI %vreg27<kill>, 12; GR32Bit:%vreg28,%vreg27
4B		  * %vreg29<def> = ADD %vreg26<kill>, %vreg28<kill>; GR32Bit:%vreg29,%vreg26,%vreg28
4B		  * %vreg30<def> = ADDI %zero, 32; GR32Bit:%vreg30
4B		  * %vreg31<def> = SRLI %t5, 22; GR32Bit:%vreg31
4B		  * %vreg32<def> = SRLI %t5, 12; GR32Bit:%vreg32
4B		  * %vreg33<def> = ANDI %vreg32<kill>, 15; GR32Bit:%vreg33,%vreg32
4B		  * %vreg34<def> = SRLI %t5, 6; GR32Bit:%vreg34
4B		  * %vreg35<def> = ANDI %vreg34<kill>, 63; GR32Bit:%vreg35,%vreg34
4B		  * %vreg36<def> = ADDI %zero, 832; GR32Bit:%vreg36
4B		  * %vreg37<def> = MUL %vreg31<kill>, %vreg36<kill>; GR32Bit:%vreg37,%vreg31,%vreg36
4B		  * %vreg38<def> = ADDI %zero, 52; GR32Bit:%vreg38
4B		  * %vreg39<def> = MUL %vreg33<kill>, %vreg38<kill>; GR32Bit:%vreg39,%vreg33,%vreg38
4B		  * %vreg40<def> = ADD %vreg39<kill>, %vreg35<kill>; GR32Bit:%vreg40,%vreg39,%vreg35
4B		  * %vreg41<def> = ADD %vreg40<kill>, %vreg37<kill>; GR32Bit:%vreg41,%vreg40,%vreg37
4B		  * %vreg42<def> = MUL %vreg41<kill>, %vreg30<kill>; GR32Bit:%vreg42,%vreg41,%vreg30
4B		  * %t5<def> = ADD %vreg29<kill>, %vreg42<kill>; GR32Bit:%vreg29,%vreg42
4B		  * %vreg10<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg10
4B		  * %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
4B		  * %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
4B		  * SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
4B		  * %vreg9<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg9
4B		  * %vreg3<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg3
4B		  * SRLI %vreg3, %vreg3, 12; GR32Bit:%vreg3
4B		  * %vreg2<def> = LUI <ga:@redefine_in_placeholder>[TF=2]; GR32Bit:%vreg2
4B		  * %vreg4<def> = ADD %vreg3<kill>, %vreg2<kill>; GR32Bit:%vreg4,%vreg3,%vreg2
4B		  * %vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[@redefine_in_placeholder] GR32Bit:%vreg5,%vreg4
4B		  * SW %vreg5<kill>, %vreg1<kill>, 0; mem:ST4[%8](align=16) GR32Bit:%vreg5,%vreg1
4B		  * %vreg8<def> = ADDI %zero, 1; GR32Bit:%vreg8
4B		  * %vreg6<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg6,%vreg0
4B		  * SW %zero, %vreg6<kill>, 4; mem:ST4[%10] GR32Bit:%vreg6
4B		  * %vreg7<def> = LW %vreg0<kill>, 0; mem:LD4[%2] GR32Bit:%vreg7,%vreg0
4B		  * SW %vreg8<kill>, %vreg7<kill>, 8; mem:ST4[%12] GR32Bit:%vreg8,%vreg7
4B		  * SW %zero, %vreg10<kill>, 0; mem:ST4[%5] GR32Bit:%vreg10
4B		  * SW %zero, %vreg9<kill>, 0; mem:ST4[%3] GR32Bit:%vreg9
304B		%t4<def> = ADD %t5, %zero
304B		  * %vreg45<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg45
304B		  * %vreg46<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg46
304B		  * %vreg47<def> = SRLI %vreg46<kill>, 12; GR32Bit:%vreg47,%vreg46
304B		  * %vreg48<def> = ADD %vreg45<kill>, %vreg47<kill>; GR32Bit:%vreg48,%vreg45,%vreg47
304B		  * %vreg49<def> = ADDI %zero, 32; GR32Bit:%vreg49
304B		  * %vreg50<def> = SRLI %t5, 22; GR32Bit:%vreg50
304B		  * %vreg51<def> = SRLI %t5, 12; GR32Bit:%vreg51
304B		  * %vreg52<def> = ANDI %vreg51<kill>, 15; GR32Bit:%vreg52,%vreg51
304B		  * %vreg53<def> = SRLI %t5, 6; GR32Bit:%vreg53
304B		  * %vreg54<def> = ANDI %vreg53<kill>, 63; GR32Bit:%vreg54,%vreg53
304B		  * %vreg55<def> = ADDI %zero, 832; GR32Bit:%vreg55
304B		  * %vreg56<def> = MUL %vreg50<kill>, %vreg55<kill>; GR32Bit:%vreg56,%vreg50,%vreg55
304B		  * %vreg57<def> = ADDI %zero, 52; GR32Bit:%vreg57
304B		  * %vreg58<def> = MUL %vreg52<kill>, %vreg57<kill>; GR32Bit:%vreg58,%vreg52,%vreg57
304B		  * %vreg59<def> = ADD %vreg58<kill>, %vreg54<kill>; GR32Bit:%vreg59,%vreg58,%vreg54
304B		  * %vreg60<def> = ADD %vreg59<kill>, %vreg56<kill>; GR32Bit:%vreg60,%vreg59,%vreg56
304B		  * %vreg61<def> = MUL %vreg60<kill>, %vreg49<kill>; GR32Bit:%vreg61,%vreg60,%vreg49
304B		  * %t5<def> = ADD %vreg48<kill>, %vreg61<kill>; GR32Bit:%vreg48,%vreg61
456B		%t4<def> = ADD %t5, %zero
456B		  * %vreg64<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg64
456B		  * %vreg65<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg65
456B		  * %vreg66<def> = SRLI %vreg65<kill>, 12; GR32Bit:%vreg66,%vreg65
456B		  * %vreg67<def> = ADD %vreg64<kill>, %vreg66<kill>; GR32Bit:%vreg67,%vreg64,%vreg66
456B		  * %vreg68<def> = ADDI %zero, 32; GR32Bit:%vreg68
456B		  * %vreg69<def> = SRLI %t5, 22; GR32Bit:%vreg69
456B		  * %vreg70<def> = SRLI %t5, 12; GR32Bit:%vreg70
456B		  * %vreg71<def> = ANDI %vreg70<kill>, 15; GR32Bit:%vreg71,%vreg70
456B		  * %vreg72<def> = SRLI %t5, 6; GR32Bit:%vreg72
456B		  * %vreg73<def> = ANDI %vreg72<kill>, 63; GR32Bit:%vreg73,%vreg72
456B		  * %vreg74<def> = ADDI %zero, 832; GR32Bit:%vreg74
456B		  * %vreg75<def> = MUL %vreg69<kill>, %vreg74<kill>; GR32Bit:%vreg75,%vreg69,%vreg74
456B		  * %vreg76<def> = ADDI %zero, 52; GR32Bit:%vreg76
456B		  * %vreg77<def> = MUL %vreg71<kill>, %vreg76<kill>; GR32Bit:%vreg77,%vreg71,%vreg76
456B		  * %vreg78<def> = ADD %vreg77<kill>, %vreg73<kill>; GR32Bit:%vreg78,%vreg77,%vreg73
456B		  * %vreg79<def> = ADD %vreg78<kill>, %vreg75<kill>; GR32Bit:%vreg79,%vreg78,%vreg75
456B		  * %vreg80<def> = MUL %vreg79<kill>, %vreg68<kill>; GR32Bit:%vreg80,%vreg79,%vreg68
456B		  * %t5<def> = ADD %vreg67<kill>, %vreg80<kill>; GR32Bit:%vreg67,%vreg80
608B		%t4<def> = ADD %t5, %zero
608B		  * %vreg83<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg83
608B		  * %vreg84<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg84
608B		  * %vreg85<def> = SRLI %vreg84<kill>, 12; GR32Bit:%vreg85,%vreg84
608B		  * %vreg86<def> = ADD %vreg83<kill>, %vreg85<kill>; GR32Bit:%vreg86,%vreg83,%vreg85
608B		  * %vreg87<def> = ADDI %zero, 32; GR32Bit:%vreg87
608B		  * %vreg88<def> = SRLI %t5, 22; GR32Bit:%vreg88
608B		  * %vreg89<def> = SRLI %t5, 12; GR32Bit:%vreg89
608B		  * %vreg90<def> = ANDI %vreg89<kill>, 15; GR32Bit:%vreg90,%vreg89
608B		  * %vreg91<def> = SRLI %t5, 6; GR32Bit:%vreg91
608B		  * %vreg92<def> = ANDI %vreg91<kill>, 63; GR32Bit:%vreg92,%vreg91
608B		  * %vreg93<def> = ADDI %zero, 832; GR32Bit:%vreg93
608B		  * %vreg94<def> = MUL %vreg88<kill>, %vreg93<kill>; GR32Bit:%vreg94,%vreg88,%vreg93
608B		  * %vreg95<def> = ADDI %zero, 52; GR32Bit:%vreg95
608B		  * %vreg96<def> = MUL %vreg90<kill>, %vreg95<kill>; GR32Bit:%vreg96,%vreg90,%vreg95
608B		  * %vreg97<def> = ADD %vreg96<kill>, %vreg92<kill>; GR32Bit:%vreg97,%vreg96,%vreg92
608B		  * %vreg98<def> = ADD %vreg97<kill>, %vreg94<kill>; GR32Bit:%vreg98,%vreg97,%vreg94
608B		  * %vreg99<def> = MUL %vreg98<kill>, %vreg87<kill>; GR32Bit:%vreg99,%vreg98,%vreg87
608B		  * %t5<def> = ADD %vreg86<kill>, %vreg99<kill>; GR32Bit:%vreg86,%vreg99
	    Successors according to CFG: BB#1
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 32
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = ADDI %t5, <fi#4>
> %t1<def> = ADDI %t5, <fi#1>
> %fp<def> = ADDI %t5, <fi#-1>
> SW %fp, %t1, 0; mem:ST4[%2]
> %t2<def> = ADDI %t5, <fi#2>
> %a0<def> = LUI <MCSym="%lo("ga#0")">
> SRLI %a0, %a0, 12
> %a1<def> = LUI <ga:@redefine_in_placeholder>[TF=2]
> %a0<def> = ADD %a0<kill>, %a1<kill>
> %a0<def> = LW %a0<kill>, 0; mem:LD4[@redefine_in_placeholder]
> SW %a0<kill>, %fp<kill>, 0; mem:ST4[%8](align=16)
> %fp<def> = ADDI %zero, 1
> %a0<def> = LW %t1, 0; mem:LD4[%2]
> SW %zero, %a0<kill>, 4; mem:ST4[%10]
> %t1<def> = LW %t1<kill>, 0; mem:LD4[%2]
> SW %fp<kill>, %t1<kill>, 8; mem:ST4[%12]
> SW %zero, %t0<kill>, 0; mem:ST4[%5]
> SW %zero, %t2<kill>, 0; mem:ST4[%3]
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 32
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 32
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 32
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
936B	BB#1: derived from LLVM BB %trp_init3.for.cond
	    Predecessors according to CFG: BB#0 BB#2
944B		%vreg13<def> = ADDI %zero, 4; GR32Bit:%vreg13
944B		  * %vreg11<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg11
944B		  * %vreg12<def> = LW %vreg11<kill>, 0; mem:LD4[%5] GR32Bit:%vreg12,%vreg11
944B		  * %vreg118<def> = LUI 1; GR32Bit:%vreg118
944B		  * WRITEPM %vreg118, %vreg12, 0; GR32Bit:%vreg118,%vreg12
944B		  * %vreg120<def> = LUI 2; GR32Bit:%vreg120
944B		  * WRITEPM %vreg120, %vreg12, 0; GR32Bit:%vreg120,%vreg12
944B		  * %vreg122<def> = LUI 3; GR32Bit:%vreg122
944B		  * WRITEPM %vreg122, %vreg12, 0; GR32Bit:%vreg122,%vreg12
944B		  * WRITEPM %vreg118<kill>, %vreg13, 4; GR32Bit:%vreg118,%vreg13
944B		  * WRITEPM %vreg120<kill>, %vreg13, 4; GR32Bit:%vreg120,%vreg13
944B		  * WRITEPM %vreg122<kill>, %vreg13, 4; GR32Bit:%vreg122,%vreg13
944B		  * BGT <BB#3>, %vreg12<kill>, %vreg13<kill>; GR32Bit:%vreg12,%vreg13
944B		  * %zero<def> = ADDI %zero, 0
944B		  * %zero<def> = ADDI %zero, 0
944B		  * %vreg100<def> = LUI 1; GR32Bit:%vreg100
944B		  * WRITEPM %vreg100<kill>, %vreg100, 192; GR32Bit:%vreg100
944B		  * %vreg101<def> = LUI 0; GR32Bit:%vreg101
944B		  * %vreg102<def> = DREADPM %vreg101<kill>, 188; GR32Bit:%vreg102,%vreg101
944B		  * %vreg112<def> = LUI 2; GR32Bit:%vreg112
944B		  * WRITEPM %vreg112<kill>, %vreg112, 176; GR32Bit:%vreg112
944B		  * %vreg113<def> = LUI 0; GR32Bit:%vreg113
944B		  * %vreg114<def> = DREADPM %vreg113<kill>, 168; GR32Bit:%vreg114,%vreg113
944B		  * JAL <BB#2>
944B		  * %zero<def> = ADDI %zero, 0
944B		  * %zero<def> = ADDI %zero, 0
1152B		%vreg119<def> = LUI 1; GR32Bit:%vreg119
1152B		  * %vreg124<def> = DREADPM %vreg119, 0; GR32Bit:%vreg124,%vreg119
1152B		  * %vreg127<def> = DREADPM %vreg119<kill>, 4; GR32Bit:%vreg127,%vreg119
1152B		  * BGT <BB#3>, %vreg124<kill>, %vreg127<kill>; GR32Bit:%vreg124,%vreg127
1152B		  * %zero<def> = ADDI %zero, 0
1152B		  * %zero<def> = ADDI %zero, 0
1152B		  * %vreg103<def> = LUI 0; GR32Bit:%vreg103
1152B		  * WRITEPM %vreg103<kill>, %vreg103, 188; GR32Bit:%vreg103
1152B		  * %vreg104<def> = LUI 1; GR32Bit:%vreg104
1152B		  * %vreg105<def> = DREADPM %vreg104<kill>, 192; GR32Bit:%vreg105,%vreg104
1152B		  * JAL <BB#2>
1152B		  * %zero<def> = ADDI %zero, 0
1152B		  * %zero<def> = ADDI %zero, 0
1272B		%vreg121<def> = LUI 2; GR32Bit:%vreg121
1272B		  * %vreg125<def> = DREADPM %vreg121, 0; GR32Bit:%vreg125,%vreg121
1272B		  * %vreg128<def> = DREADPM %vreg121<kill>, 4; GR32Bit:%vreg128,%vreg121
1272B		  * BGT <BB#3>, %vreg125<kill>, %vreg128<kill>; GR32Bit:%vreg125,%vreg128
1272B		  * %zero<def> = ADDI %zero, 0
1272B		  * %zero<def> = ADDI %zero, 0
1272B		  * %vreg106<def> = LUI 3; GR32Bit:%vreg106
1272B		  * WRITEPM %vreg106<kill>, %vreg106, 184; GR32Bit:%vreg106
1272B		  * %vreg107<def> = LUI 2; GR32Bit:%vreg107
1272B		  * %vreg108<def> = DREADPM %vreg107<kill>, 180; GR32Bit:%vreg108,%vreg107
1272B		  * %vreg115<def> = LUI 0; GR32Bit:%vreg115
1272B		  * WRITEPM %vreg115<kill>, %vreg115, 168; GR32Bit:%vreg115
1272B		  * %vreg116<def> = LUI 2; GR32Bit:%vreg116
1272B		  * %vreg117<def> = DREADPM %vreg116<kill>, 176; GR32Bit:%vreg117,%vreg116
1272B		  * JAL <BB#2>
1272B		  * %zero<def> = ADDI %zero, 0
1272B		  * %zero<def> = ADDI %zero, 0
1424B		%vreg123<def> = LUI 3; GR32Bit:%vreg123
1424B		  * %vreg126<def> = DREADPM %vreg123, 0; GR32Bit:%vreg126,%vreg123
1424B		  * %vreg129<def> = DREADPM %vreg123<kill>, 4; GR32Bit:%vreg129,%vreg123
1424B		  * BGT <BB#3>, %vreg126<kill>, %vreg129<kill>; GR32Bit:%vreg126,%vreg129
1424B		  * %zero<def> = ADDI %zero, 0
1424B		  * %zero<def> = ADDI %zero, 0
1424B		  * %vreg109<def> = LUI 2; GR32Bit:%vreg109
1424B		  * WRITEPM %vreg109<kill>, %vreg109, 180; GR32Bit:%vreg109
1424B		  * %vreg110<def> = LUI 3; GR32Bit:%vreg110
1424B		  * %vreg111<def> = DREADPM %vreg110<kill>, 184; GR32Bit:%vreg111,%vreg110
1424B		  * JAL <BB#2>
1424B		  * %zero<def> = ADDI %zero, 0
1424B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#2(124) BB#3(4)
> %t0<def> = ADDI %zero, 4
> %t1<def> = ADDI %t5, <fi#4>
> %t1<def> = LW %t1<kill>, 0; mem:LD4[%5]
> %t2<def> = LUI 1
> WRITEPM %t2, %t1, 0
> %fp<def> = LUI 2
> WRITEPM %fp, %t1, 0
> %a0<def> = LUI 3
> WRITEPM %a0, %t1, 0
> WRITEPM %t2<kill>, %t0, 4
> WRITEPM %fp<kill>, %t0, 4
> WRITEPM %a0<kill>, %t0, 4
> BGT <BB#3>, %t1<kill>, %t0<kill>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 1
> WRITEPM %t0<kill>, %t0, 192
> %t0<def> = LUI 0
> %t0<def> = DREADPM %t0<kill>, 188
> %t1<def> = LUI 2
> WRITEPM %t1<kill>, %t1, 176
> %t1<def> = LUI 0
> %t1<def> = DREADPM %t1<kill>, 168
> JAL <BB#2>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t2<def> = LUI 1
> %fp<def> = DREADPM %t2, 0
> %t2<def> = DREADPM %t2<kill>, 4
> BGT <BB#3>, %fp<kill>, %t2<kill>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t2<def> = LUI 0
> WRITEPM %t2<kill>, %t2, 188
> %t2<def> = LUI 1
> %t2<def> = DREADPM %t2<kill>, 192
> JAL <BB#2>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %fp<def> = LUI 2
> %a0<def> = DREADPM %fp, 0
> %fp<def> = DREADPM %fp<kill>, 4
> BGT <BB#3>, %a0<kill>, %fp<kill>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %fp<def> = LUI 3
> WRITEPM %fp<kill>, %fp, 184
> %fp<def> = LUI 2
> %fp<def> = DREADPM %fp<kill>, 180
> %a0<def> = LUI 0
> WRITEPM %a0<kill>, %a0, 168
> %a0<def> = LUI 2
> %a0<def> = DREADPM %a0<kill>, 176
> JAL <BB#2>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %a2<def> = LUI 3
> %a1<def> = DREADPM %a2, 0
> %a2<def> = DREADPM %a2<kill>, 4
> BGT <BB#3>, %a1<kill>, %a2<kill>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %a1<def> = LUI 2
> WRITEPM %a1<kill>, %a1, 180
> %a1<def> = LUI 3
> %a1<def> = DREADPM %a1<kill>, 184
> JAL <BB#2>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
1888B	BB#2: derived from LLVM BB %trp_init3.for.inc
	    Predecessors according to CFG: BB#1
1896B		%vreg21<def> = ADDI %t5, <fi#4>; GR32Bit:%vreg21
1896B		  * %vreg22<def> = LW %vreg21, 0; mem:LD4[%5] GR32Bit:%vreg22,%vreg21
1896B		  * %vreg23<def> = ADDI %vreg22<kill>, 1; GR32Bit:%vreg23,%vreg22
1896B		  * SW %vreg23<kill>, %vreg21<kill>, 0; mem:ST4[%5] GR32Bit:%vreg23,%vreg21
1896B		  * %vreg18<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg18
1896B		  * %vreg19<def> = LW %vreg18, 0; mem:LD4[%3] GR32Bit:%vreg19,%vreg18
1896B		  * %vreg20<def> = ADDI %vreg19<kill>, 1; GR32Bit:%vreg20,%vreg19
1896B		  * SW %vreg20<kill>, %vreg18<kill>, 0; mem:ST4[%3] GR32Bit:%vreg20,%vreg18
1896B		  * JAL <BB#1>
1896B		  * %zero<def> = ADDI %zero, 0
1896B		  * %zero<def> = ADDI %zero, 0
2016B		JAL <BB#1>
2016B		  * %zero<def> = ADDI %zero, 0
2016B		  * %zero<def> = ADDI %zero, 0
2040B		JAL <BB#1>
2040B		  * %zero<def> = ADDI %zero, 0
2040B		  * %zero<def> = ADDI %zero, 0
2064B		JAL <BB#1>
2064B		  * %zero<def> = ADDI %zero, 0
2064B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#1
> %t0<def> = ADDI %t5, <fi#4>
> %t1<def> = LW %t0, 0; mem:LD4[%5]
> %t1<def> = ADDI %t1<kill>, 1
> SW %t1<kill>, %t0<kill>, 0; mem:ST4[%5]
> %t0<def> = ADDI %t5, <fi#2>
> %t1<def> = LW %t0, 0; mem:LD4[%3]
> %t1<def> = ADDI %t1<kill>, 1
> SW %t1<kill>, %t0<kill>, 0; mem:ST4[%3]
> JAL <BB#1>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#1>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#1>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#1>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
2136B	BB#3: derived from LLVM BB %trp_init3.return
	    Predecessors according to CFG: BB#1
2144B		%vreg17<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg17
2144B		  * %vreg14<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg14
2144B		  * %vreg15<def> = LW %vreg14, 0; mem:LD4[%3] GR32Bit:%vreg15,%vreg14
2144B		  * %vreg16<def> = ANDI %vreg15<kill>, 2; GR32Bit:%vreg16,%vreg15
2144B		  * SW %vreg16, %vreg14<kill>, 0; mem:ST4[%3] GR32Bit:%vreg16,%vreg14
2144B		  * SW %vreg16<kill>, %vreg17<kill>, 0; mem:ST4[%1] GR32Bit:%vreg16,%vreg17
2144B		  * %vreg130<def> = ADDI %zero, 128; GR32Bit:%vreg130
2144B		  * %vreg131<def> = LW %t5, <fi#0>; GR32Bit:%vreg131
2144B		  * WRITECM %vreg130<kill>, %vreg131<kill>, 0; GR32Bit:%vreg130,%vreg131
2144B		  * FDELETE %t4, 0
2144B		  * END 0
2144B		  * %zero<def> = ADDI %zero, 0
2144B		  * %zero<def> = ADDI %zero, 0
2256B		END 0
2256B		  * %zero<def> = ADDI %zero, 0
2256B		  * %zero<def> = ADDI %zero, 0
2280B		END 0
2280B		  * %zero<def> = ADDI %zero, 0
2280B		  * %zero<def> = ADDI %zero, 0
2304B		END 0
2304B		  * %zero<def> = ADDI %zero, 0
2304B		  * %zero<def> = ADDI %zero, 0
> %t0<def> = ADDI %t5, <fi#0>
> %t1<def> = ADDI %t5, <fi#2>
> %t2<def> = LW %t1, 0; mem:LD4[%3]
> %t2<def> = ANDI %t2<kill>, 2
> SW %t2, %t1<kill>, 0; mem:ST4[%3]
> SW %t2<kill>, %t0<kill>, 0; mem:ST4[%1]
> %t0<def> = ADDI %zero, 128
> %t1<def> = LW %t5, <fi#0>
> WRITECM %t0<kill>, %t1<kill>, 0
> FDELETE %t4, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
********** EMITTING LIVE DEBUG VARIABLES **********
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: trp_init3
current state of mf:# Machine code for function trp_init3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %trp_init3.entry
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 32
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = ADDI %t5, <fi#4>
	  * %t1<def> = ADDI %t5, <fi#1>
	  * %fp<def> = ADDI %t5, <fi#-1>
	  * SW %fp, %t1, 0; mem:ST4[%2]
	  * %t2<def> = ADDI %t5, <fi#2>
	  * %a0<def> = LUI <MCSym="%lo("ga#0")">
	  * SRLI %a0, %a0, 12
	  * %a1<def> = LUI <ga:@redefine_in_placeholder>[TF=2]
	  * %a0<def> = ADD %a0<kill>, %a1<kill>
	  * %a0<def> = LW %a0<kill>, 0; mem:LD4[@redefine_in_placeholder]
	  * SW %a0<kill>, %fp<kill>, 0; mem:ST4[%8](align=16)
	  * %fp<def> = ADDI %zero, 1
	  * %a0<def> = LW %t1, 0; mem:LD4[%2]
	  * SW %zero, %a0<kill>, 4; mem:ST4[%10]
	  * %t1<def> = LW %t1<kill>, 0; mem:LD4[%2]
	  * SW %fp<kill>, %t1<kill>, 8; mem:ST4[%12]
	  * SW %zero, %t0<kill>, 0; mem:ST4[%5]
	  * SW %zero, %t2<kill>, 0; mem:ST4[%3]
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 32
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 32
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 32
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %trp_init3.for.cond
    Predecessors according to CFG: BB#0 BB#2
	%t0<def> = ADDI %zero, 4
	  * %t1<def> = ADDI %t5, <fi#4>
	  * %t1<def> = LW %t1<kill>, 0; mem:LD4[%5]
	  * %t2<def> = LUI 1
	  * WRITEPM %t2, %t1, 0
	  * %fp<def> = LUI 2
	  * WRITEPM %fp, %t1, 0
	  * %a0<def> = LUI 3
	  * WRITEPM %a0, %t1, 0
	  * WRITEPM %t2<kill>, %t0, 4
	  * WRITEPM %fp<kill>, %t0, 4
	  * WRITEPM %a0<kill>, %t0, 4
	  * BGT <BB#3>, %t1<kill>, %t0<kill>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * %t0<def> = LUI 1
	  * WRITEPM %t0<kill>, %t0, 192
	  * %t0<def> = LUI 0
	  * %t0<def> = DREADPM %t0<kill>, 188
	  * %t1<def> = LUI 2
	  * WRITEPM %t1<kill>, %t1, 176
	  * %t1<def> = LUI 0
	  * %t1<def> = DREADPM %t1<kill>, 168
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t2<def> = LUI 1
	  * %fp<def> = DREADPM %t2, 0
	  * %t2<def> = DREADPM %t2<kill>, 4
	  * BGT <BB#3>, %fp<kill>, %t2<kill>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * %t2<def> = LUI 0
	  * WRITEPM %t2<kill>, %t2, 188
	  * %t2<def> = LUI 1
	  * %t2<def> = DREADPM %t2<kill>, 192
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%fp<def> = LUI 2
	  * %a0<def> = DREADPM %fp, 0
	  * %fp<def> = DREADPM %fp<kill>, 4
	  * BGT <BB#3>, %a0<kill>, %fp<kill>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * %fp<def> = LUI 3
	  * WRITEPM %fp<kill>, %fp, 184
	  * %fp<def> = LUI 2
	  * %fp<def> = DREADPM %fp<kill>, 180
	  * %a0<def> = LUI 0
	  * WRITEPM %a0<kill>, %a0, 168
	  * %a0<def> = LUI 2
	  * %a0<def> = DREADPM %a0<kill>, 176
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%a2<def> = LUI 3
	  * %a1<def> = DREADPM %a2, 0
	  * %a2<def> = DREADPM %a2<kill>, 4
	  * BGT <BB#3>, %a1<kill>, %a2<kill>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * %a1<def> = LUI 2
	  * WRITEPM %a1<kill>, %a1, 180
	  * %a1<def> = LUI 3
	  * %a1<def> = DREADPM %a1<kill>, 184
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#2(124) BB#3(4)

BB#2: derived from LLVM BB %trp_init3.for.inc
    Predecessors according to CFG: BB#1
	%t0<def> = ADDI %t5, <fi#4>
	  * %t1<def> = LW %t0, 0; mem:LD4[%5]
	  * %t1<def> = ADDI %t1<kill>, 1
	  * SW %t1<kill>, %t0<kill>, 0; mem:ST4[%5]
	  * %t0<def> = ADDI %t5, <fi#2>
	  * %t1<def> = LW %t0, 0; mem:LD4[%3]
	  * %t1<def> = ADDI %t1<kill>, 1
	  * SW %t1<kill>, %t0<kill>, 0; mem:ST4[%3]
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#1

BB#3: derived from LLVM BB %trp_init3.return
    Predecessors according to CFG: BB#1
	%t0<def> = ADDI %t5, <fi#0>
	  * %t1<def> = ADDI %t5, <fi#2>
	  * %t2<def> = LW %t1, 0; mem:LD4[%3]
	  * %t2<def> = ANDI %t2<kill>, 2
	  * SW %t2, %t1<kill>, 0; mem:ST4[%3]
	  * SW %t2<kill>, %t0<kill>, 0; mem:ST4[%1]
	  * %t0<def> = ADDI %zero, 128
	  * %t1<def> = LW %t5, <fi#0>
	  * WRITECM %t0<kill>, %t1<kill>, 0
	  * FDELETE %t4, 0
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0

# End machine code for function trp_init3.

lowering frame index for func trp_init3:4 TO VAL:16
lowering frame index for func trp_init3:1 TO VAL:4
lowering frame index for func trp_init3:-1 TO VAL:20
lowering frame index for func trp_init3:2 TO VAL:8
lowering frame index for func trp_init3:4 TO VAL:16
lowering frame index for func trp_init3:4 TO VAL:16
lowering frame index for func trp_init3:2 TO VAL:8
lowering frame index for func trp_init3:0 TO VAL:0
lowering frame index for func trp_init3:2 TO VAL:8
lowering frame index for func trp_init3:0 TO VAL:0
