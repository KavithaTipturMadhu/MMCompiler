Args: /home/arka/Workspace/work/Git_Compiler_Repo/redefine-tests/ECU_KERNELS/../../..//MM_Compiler_latest/build/Release+Asserts/bin/llc --mattr=+has4ce --mtriple redefine -debug ./Working/startupfuelvalves_HyOpPass.ll -o ./Working/startupfuelvalves.as 

Features:+has4ce
CPU:REDEFINE

CGP: Found      local addrmode: [Base:%0]
CGP: Found      local addrmode: [Base:%0]
Computing probabilities for redefine_start1.return
Computing probabilities for redefine_start1.entry
new hop:redefine_start1
new hyop#0:redefine_start1
new hop:redefine_start2
new hyop#1:redefine_start2
new hop:startup_fuel_valves3
new hyop#2:startup_fuel_valves3
problems setting inputs?
skipping abort
source hop:redefine_start1
frame size for hop redefine_start1:4
source hop:redefine_start2
frame size for hop redefine_start2:8
source hop:startup_fuel_valves3
frame size for hop startup_fuel_valves3:16
max mem frame size:16
digraph{
redefine_start1[label="Name:redefine_start1,Dom:NULL, PostDom:NULL,Map:0:0, Context frame:0,SyncCount:1"];
redefine_start1->startup_fuel_valves3[label=localref];
redefine_start2[label="Name:redefine_start2,Dom:NULL, PostDom:NULL,Map:0:0, Context frame:0,SyncCount:0"];
startup_fuel_valves3[label="Name:startup_fuel_valves3,Dom:NULL, PostDom:NULL,Map:0:0, Context frame:0,SyncCount:0"];
startup_fuel_valves3->redefine_start2[label=localref];
}
Setting domf of node redefine_start1 to size 0
Setting domf of node redefine_start2 to size 0
Setting domf of node startup_fuel_valves3 to size 0
idom of node:redefine_start1
idom of node:startup_fuel_valves3

------
forwarding address to redefine_start1:

------
forwarding address to redefine_start2:

------
forwarding address to startup_fuel_valves3:

Dominant sequence computed:
redefine_start1->startup_fuel_valves3->redefine_start2->

Dominant sequence computed:
redefine_start1->startup_fuel_valves3->redefine_start2->
before merging, num of clusters:1
each cluster:
redefine_start1,startup_fuel_valves3,redefine_start2,
Minimizing ordering edges
setting context frame id of redefine_start1 to 0
setting context frame id of startup_fuel_valves3 to 1
setting context frame id of redefine_start2 to 2
Computing whether there is a control/scalar path between a pair of HyperOps communicating via memory and adding sync edges if there is no control path
adding a sync edge between redefine_start1 and startup_fuel_valves3
adding a sync edge between startup_fuel_valves3 and redefine_start2
If the producer and consumer are mapped to different CRs, treat them as localrefs only instead of scalars to avoid reconciles
problems setting inputs?
generated cfg:Setting domf of node redefine_start1 to size 0
Setting domf of node redefine_start2 to size 0
Setting domf of node startup_fuel_valves3 to size 0
idom of node:redefine_start1
idom of node:startup_fuel_valves3
Delivering reaching predicate with decrement count in case operands to be delivered are on the non taken path
before decrementing sync, graph:Decrementing sync count for nodes with sync edges coming from mutually exclusive paths
updating node with incoming sync edges redefine_start1
updating node with incoming sync edges redefine_start2
updating node with incoming sync edges startup_fuel_valves3
after minimizing cluster and converting scalar edges to local refs, graph:digraph{
redefine_start1[label="Name:redefine_start1,Dom:NULL, PostDom:startup_fuel_valves3,Map:0:0, Context frame:0,SyncCount:1"];
redefine_start1->startup_fuel_valves3[label=sync];
redefine_start1->startup_fuel_valves3[label=localref];
redefine_start2[label="Name:redefine_start2,Dom:startup_fuel_valves3, PostDom:NULL,Map:0:0, Context frame:2,SyncCount:1"];
startup_fuel_valves3[label="Name:startup_fuel_valves3,Dom:redefine_start1, PostDom:redefine_start2,Map:0:0, Context frame:1,SyncCount:1"];
startup_fuel_valves3->redefine_start2[label=localref];
startup_fuel_valves3->redefine_start2[label=sync];
}
num of clusters:1
num constraints:0
setting target resource 0
setting target resource 0
setting target resource 0
digraph{
redefine_start1[label="Name:redefine_start1,Dom:NULL, PostDom:startup_fuel_valves3,Map:0:0, Context frame:0,SyncCount:1"];
redefine_start1->startup_fuel_valves3[label=sync];
redefine_start1->startup_fuel_valves3[label=localref];
redefine_start2[label="Name:redefine_start2,Dom:startup_fuel_valves3, PostDom:NULL,Map:0:0, Context frame:2,SyncCount:1"];
startup_fuel_valves3[label="Name:startup_fuel_valves3,Dom:redefine_start1, PostDom:redefine_start2,Map:0:0, Context frame:1,SyncCount:1"];
startup_fuel_valves3->redefine_start2[label=localref];
startup_fuel_valves3->redefine_start2[label=sync];
}



=== redefine_start1
store visit is after?  store i32* getelementptr inbounds ([7 x i32]* @redefine_in_a, i32 0, i32 0), i32** %0
I was here to add i32* getelementptr inbounds ([7 x i32]* @redefine_in_a, i32 0, i32 0)
I was here to add @redefine_in_a = common global [7 x i32] zeroinitializer, align 4
I was here to add   %0 = alloca i32*, align 4, !ConsumedBy !6
whats in dag after store?SelectionDAG has 6 nodes:
  0x2fd45a0: i32 = Constant<0>

    0x2fb6da8: ch = EntryToken [ORD=2]

    0x2fd43a0: i32 = GlobalAddress<[7 x i32]* @redefine_in_a> 0 [ORD=1]

    0x2fd44a0: i32 = FrameIndex<0> [ORD=2]

    0x2fd46a0: i32 = undef [ORD=2]

  0x2fd47a0: ch = store 0x2fb6da8, 0x2fd43a0, 0x2fd44a0, 0x2fd46a0<ST4[%0]> [ORD=2]


visiting load instruction   %1 = load i32** %0
with I type i32*and sd value :0x2fd44a0: i32 = FrameIndex<0>
new load?0x2fd48a0: i32,ch = load 0x2fd47a0, 0x2fd44a0, 0x2fd46a0<LD4[%0]>
dag after load is dealt with?SelectionDAG has 7 nodes:
  0x2fd44a0: i32 = FrameIndex<0> [ORD=2]

  0x2fd45a0: i32 = Constant<0>

  0x2fd46a0: i32 = undef [ORD=2]

      0x2fb6da8: ch = EntryToken [ORD=2]

      0x2fd43a0: i32 = GlobalAddress<[7 x i32]* @redefine_in_a> 0 [ORD=1]

      0x2fd44a0: <multiple use>
      0x2fd46a0: <multiple use>
    0x2fd47a0: ch = store 0x2fb6da8, 0x2fd43a0, 0x2fd44a0, 0x2fd46a0<ST4[%0]> [ORD=2]

    0x2fd44a0: <multiple use>
    0x2fd46a0: <multiple use>
  0x2fd48a0: i32,ch = load 0x2fd47a0, 0x2fd44a0, 0x2fd46a0<LD4[%0]>

    0x2fb6da8: ch = EntryToken [ORD=2]

    0x2fd43a0: i32 = GlobalAddress<[7 x i32]* @redefine_in_a> 0 [ORD=1]

    0x2fd44a0: <multiple use>
    0x2fd46a0: <multiple use>
  0x2fd47a0: ch = store 0x2fb6da8, 0x2fd43a0, 0x2fd44a0, 0x2fd46a0<ST4[%0]> [ORD=2]


Initial selection DAG: BB#0 'redefine_start1:redefine_start1.entry'
SelectionDAG has 7 nodes:
  0x2fd44a0: i32 = FrameIndex<0> [ORD=2]

  0x2fd45a0: i32 = Constant<0>

  0x2fd46a0: i32 = undef [ORD=2]

      0x2fb6da8: ch = EntryToken [ORD=2]

      0x2fd43a0: i32 = GlobalAddress<[7 x i32]* @redefine_in_a> 0 [ORD=1]

      0x2fd44a0: <multiple use>
      0x2fd46a0: <multiple use>
    0x2fd47a0: ch = store 0x2fb6da8, 0x2fd43a0, 0x2fd44a0, 0x2fd46a0<ST4[%0]> [ORD=2]

    0x2fd44a0: <multiple use>
    0x2fd46a0: <multiple use>
  0x2fd48a0: i32,ch = load 0x2fd47a0, 0x2fd44a0, 0x2fd46a0<LD4[%0]> [ORD=3]

    0x2fb6da8: ch = EntryToken [ORD=2]

    0x2fd43a0: i32 = GlobalAddress<[7 x i32]* @redefine_in_a> 0 [ORD=1]

    0x2fd44a0: <multiple use>
    0x2fd46a0: <multiple use>
  0x2fd47a0: ch = store 0x2fb6da8, 0x2fd43a0, 0x2fd44a0, 0x2fd46a0<ST4[%0]> [ORD=2]


Optimized lowered selection DAG: BB#0 'redefine_start1:redefine_start1.entry'
SelectionDAG has 5 nodes:
    0x2fb6da8: ch = EntryToken [ORD=2]

    0x2fd43a0: i32 = GlobalAddress<[7 x i32]* @redefine_in_a> 0 [ORD=1]

    0x2fd44a0: i32 = FrameIndex<0> [ORD=2]

    0x2fd46a0: i32 = undef [ORD=2]

  0x2fd47a0: ch = store 0x2fb6da8, 0x2fd43a0, 0x2fd44a0, 0x2fd46a0<ST4[%0]> [ORD=2]


Legally typed node: 0x2fd46a0: i32 = undef [ORD=2] [ID=0]

Legally typed node: 0x2fd44a0: i32 = FrameIndex<0> [ORD=2] [ID=0]

Legally typed node: 0x2fd43a0: i32 = GlobalAddress<[7 x i32]* @redefine_in_a> 0 [ORD=1] [ID=0]

Legally typed node: 0x2fb6da8: ch = EntryToken [ORD=2] [ID=0]

Legally typed node: 0x2fd47a0: ch = store 0x2fb6da8, 0x2fd43a0, 0x2fd44a0, 0x2fd46a0<ST4[%0]> [ORD=2] [ID=0]

Legally typed node: 0x7fff9b4748f0: ch = handlenode 0x2fd47a0 [ID=0]

Type-legalized selection DAG: BB#0 'redefine_start1:redefine_start1.entry'
SelectionDAG has 5 nodes:
    0x2fb6da8: ch = EntryToken [ORD=2] [ID=-3]

    0x2fd43a0: i32 = GlobalAddress<[7 x i32]* @redefine_in_a> 0 [ORD=1] [ID=-3]

    0x2fd44a0: i32 = FrameIndex<0> [ORD=2] [ID=-3]

    0x2fd46a0: i32 = undef [ORD=2] [ID=-3]

  0x2fd47a0: ch = store 0x2fb6da8, 0x2fd43a0, 0x2fd44a0, 0x2fd46a0<ST4[%0]> [ORD=2] [ID=-3]


Legalized selection DAG: BB#0 'redefine_start1:redefine_start1.entry'
SelectionDAG has 9 nodes:
    0x2fb6da8: ch = EntryToken [ORD=2] [ID=0]

        0x2fd45a0: i32 = TargetGlobalAddress<[7 x i32]* @redefine_in_a> 0 [TF=2]

      0x2fd49a0: i32 = REDEFINEISD::Hi 0x2fd45a0

        0x2fd48a0: i32 = TargetGlobalAddress<[7 x i32]* @redefine_in_a> 0 [TF=3]

      0x2fd4aa0: i32 = REDEFINEISD::Lo 0x2fd48a0

    0x2fd4ba0: i32 = add 0x2fd49a0, 0x2fd4aa0

    0x2fd44a0: i32 = FrameIndex<0> [ORD=2] [ID=2]

    0x2fd46a0: i32 = undef [ORD=2] [ID=3]

  0x2fd47a0: ch = store 0x2fb6da8, 0x2fd4ba0, 0x2fd44a0, 0x2fd46a0<ST4[%0]> [ORD=2] [ID=4]


Optimized legalized selection DAG: BB#0 'redefine_start1:redefine_start1.entry'
SelectionDAG has 9 nodes:
    0x2fb6da8: ch = EntryToken [ORD=2] [ID=0]

        0x2fd45a0: i32 = TargetGlobalAddress<[7 x i32]* @redefine_in_a> 0 [TF=2]

      0x2fd49a0: i32 = REDEFINEISD::Hi 0x2fd45a0

        0x2fd48a0: i32 = TargetGlobalAddress<[7 x i32]* @redefine_in_a> 0 [TF=3]

      0x2fd4aa0: i32 = REDEFINEISD::Lo 0x2fd48a0

    0x2fd4ba0: i32 = add 0x2fd49a0, 0x2fd4aa0

    0x2fd44a0: i32 = FrameIndex<0> [ORD=2] [ID=2]

    0x2fd46a0: i32 = undef [ORD=2] [ID=3]

  0x2fd47a0: ch = store 0x2fb6da8, 0x2fd4ba0, 0x2fd44a0, 0x2fd46a0<ST4[%0]> [ORD=2] [ID=4]


===== Instruction selection begins: BB#0 'redefine_start1.entry'
ISEL: Starting pattern match on root node: 0x2fd47a0: ch = store 0x2fb6da8, 0x2fd4ba0, 0x2fd44a0, 0x2fd46a0<ST4[%0]> [ORD=2] [ID=8]

  Morphed node: 0x2fd47a0: ch = SW 0x2fd4ba0, 0x2fd44a0, 0x2fd43a0, 0x2fb6da8<Mem:ST4[%0]> [ORD=2]

ISEL: Match complete!
=> 0x2fd47a0: ch = SW 0x2fd4ba0, 0x2fd44a0, 0x2fd43a0, 0x2fb6da8<Mem:ST4[%0]> [ORD=2]

ISEL: Starting pattern match on root node: 0x2fd4ba0: i32 = add 0x2fd49a0, 0x2fd4aa0 [ID=7]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x2fd4ba0: i32 = ADD 0x2fd4aa0, 0x2fd49a0

ISEL: Match complete!
=> 0x2fd4ba0: i32 = ADD 0x2fd4aa0, 0x2fd49a0

ISEL: Starting pattern match on root node: 0x2fd4aa0: i32 = REDEFINEISD::Lo 0x2fd48a0 [ID=6]

  Initial Opcode index to 1204
  Morphed node: 0x2fd4aa0: i32 = ADDI 0x2fd46a0, 0x2fd48a0

ISEL: Match complete!
=> 0x2fd4aa0: i32 = ADDI 0x2fd46a0, 0x2fd48a0

ISEL: Starting pattern match on root node: 0x2fd49a0: i32 = REDEFINEISD::Hi 0x2fd45a0 [ID=5]

  Initial Opcode index to 1186
  Morphed node: 0x2fd49a0: i32 = LUI 0x2fd45a0

ISEL: Match complete!
=> 0x2fd49a0: i32 = LUI 0x2fd45a0

=> 0x2fd48a0: i32 = TargetGlobalAddress<[7 x i32]* @redefine_in_a> 0 [TF=3]

=> 0x2fd45a0: i32 = TargetGlobalAddress<[7 x i32]* @redefine_in_a> 0 [TF=2]

=> 0x2fb6da8: ch = EntryToken [ORD=2]

===== Instruction selection ends:
Selected selection DAG: BB#0 'redefine_start1:redefine_start1.entry'
SelectionDAG has 12 nodes:
        0x2fd46a0: i32 = Register %zero

        0x2fd48a0: i32 = TargetGlobalAddress<[7 x i32]* @redefine_in_a> 0 [TF=3]

      0x2fd4aa0: i32 = ADDI 0x2fd46a0, 0x2fd48a0

        0x2fd45a0: i32 = TargetGlobalAddress<[7 x i32]* @redefine_in_a> 0 [TF=2]

      0x2fd49a0: i32 = LUI 0x2fd45a0

    0x2fd4ba0: i32 = ADD 0x2fd4aa0, 0x2fd49a0

      0x2fd4ca0: i32 = Register %t5

      0x2fd4da0: i32 = TargetFrameIndex<0>

    0x2fd44a0: i32 = ADDI 0x2fd4ca0, 0x2fd4da0 [ORD=2]

    0x2fd43a0: i32 = TargetConstant<0>

    0x2fb6da8: ch = EntryToken [ORD=2]

  0x2fd47a0: ch = SW 0x2fd4ba0, 0x2fd44a0, 0x2fd43a0, 0x2fb6da8<Mem:ST4[%0]> [ORD=2]


********** List Scheduling BB#0 'redefine_start1.entry' **********
SU(0): 0x2fd47a0: ch = SW 0x2fd4ba0, 0x2fd44a0, 0x2fd43a0, 0x2fb6da8<Mem:ST4[%0]> [ORD=2] [ID=0]

  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
   val SU(2): Latency=1
   val SU(1): Latency=1

SU(1): 0x2fd44a0: i32 = ADDI 0x2fd4ca0, 0x2fd4da0 [ORD=2] [ID=1]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
   val SU(0): Latency=1

SU(2): 0x2fd4ba0: i32 = ADD 0x2fd4aa0, 0x2fd49a0 [ID=2]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
   val SU(4): Latency=1
   val SU(3): Latency=1
  Successors:
   val SU(0): Latency=1

SU(3): 0x2fd49a0: i32 = LUI 0x2fd45a0 [ID=3]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
   val SU(2): Latency=1

SU(4): 0x2fd4aa0: i32 = ADDI 0x2fd46a0, 0x2fd48a0 [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
   val SU(2): Latency=1


Examining Available:
Height 0: SU(0): 0x2fd47a0: ch = SW 0x2fd4ba0, 0x2fd44a0, 0x2fd43a0, 0x2fb6da8<Mem:ST4[%0]> [ORD=2] [ID=0]


*** Scheduling [0]: SU(0): 0x2fd47a0: ch = SW 0x2fd4ba0, 0x2fd44a0, 0x2fd43a0, 0x2fb6da8<Mem:ST4[%0]> [ORD=2] [ID=0]


Examining Available:
Height 1: SU(2): 0x2fd4ba0: i32 = ADD 0x2fd4aa0, 0x2fd49a0 [ID=2]

Height 1: SU(1): 0x2fd44a0: i32 = ADDI 0x2fd4ca0, 0x2fd4da0 [ORD=2] [ID=1]


*** Scheduling [1]: SU(2): 0x2fd4ba0: i32 = ADD 0x2fd4aa0, 0x2fd49a0 [ID=2]


Examining Available:
Height 2: SU(4): 0x2fd4aa0: i32 = ADDI 0x2fd46a0, 0x2fd48a0 [ID=4]

Height 2: SU(3): 0x2fd49a0: i32 = LUI 0x2fd45a0 [ID=3]

Height 1: SU(1): 0x2fd44a0: i32 = ADDI 0x2fd4ca0, 0x2fd4da0 [ORD=2] [ID=1]


*** Scheduling [2]: SU(4): 0x2fd4aa0: i32 = ADDI 0x2fd46a0, 0x2fd48a0 [ID=4]


Examining Available:
Height 2: SU(3): 0x2fd49a0: i32 = LUI 0x2fd45a0 [ID=3]

Height 1: SU(1): 0x2fd44a0: i32 = ADDI 0x2fd4ca0, 0x2fd4da0 [ORD=2] [ID=1]


*** Scheduling [3]: SU(3): 0x2fd49a0: i32 = LUI 0x2fd45a0 [ID=3]


Examining Available:
Height 1: SU(1): 0x2fd44a0: i32 = ADDI 0x2fd4ca0, 0x2fd4da0 [ORD=2] [ID=1]


*** Scheduling [4]: SU(1): 0x2fd44a0: i32 = ADDI 0x2fd4ca0, 0x2fd4da0 [ORD=2] [ID=1]

*** Final schedule ***
SU(1): 0x2fd44a0: i32 = ADDI 0x2fd4ca0, 0x2fd4da0 [ORD=2] [ID=1]

SU(3): 0x2fd49a0: i32 = LUI 0x2fd45a0 [ID=3]

SU(4): 0x2fd4aa0: i32 = ADDI 0x2fd46a0, 0x2fd48a0 [ID=4]

SU(2): 0x2fd4ba0: i32 = ADD 0x2fd4aa0, 0x2fd49a0 [ID=2]

SU(0): 0x2fd47a0: ch = SW 0x2fd4ba0, 0x2fd44a0, 0x2fd43a0, 0x2fb6da8<Mem:ST4[%0]> [ORD=2] [ID=0]


Total amount of phi nodes to update: 0
Initial selection DAG: BB#1 'redefine_start1:redefine_start1.return'
SelectionDAG has 1 nodes:
  0x2fb6da8: ch = EntryToken


Optimized lowered selection DAG: BB#1 'redefine_start1:redefine_start1.return'
SelectionDAG has 1 nodes:
  0x2fb6da8: ch = EntryToken


Legally typed node: 0x2fb6da8: ch = EntryToken [ID=0]

Legally typed node: 0x7fff9b4748f0: ch = handlenode 0x2fb6da8 [ID=0]

Type-legalized selection DAG: BB#1 'redefine_start1:redefine_start1.return'
SelectionDAG has 1 nodes:
  0x2fb6da8: ch = EntryToken [ID=-3]


Legalized selection DAG: BB#1 'redefine_start1:redefine_start1.return'
SelectionDAG has 1 nodes:
  0x2fb6da8: ch = EntryToken [ID=0]


Optimized legalized selection DAG: BB#1 'redefine_start1:redefine_start1.return'
SelectionDAG has 1 nodes:
  0x2fb6da8: ch = EntryToken [ID=0]


===== Instruction selection begins: BB#1 'redefine_start1.return'
=> 0x2fb6da8: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: BB#1 'redefine_start1:redefine_start1.return'
SelectionDAG has 1 nodes:
  0x2fb6da8: ch = EntryToken


********** List Scheduling BB#1 'redefine_start1.return' **********
*** Final schedule ***

Total amount of phi nodes to update: 0

*** Tail-duplicating BB#1

Merging into block: BB#0: derived from LLVM BB %redefine_start1.entry
	%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
	%vreg1<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg1
	%vreg2<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg2
	%vreg3<def> = ADD %vreg2<kill>, %vreg1<kill>; GR32Bit:%vreg3,%vreg2,%vreg1
	SW %vreg3<kill>, %vreg0<kill>, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0
    Successors according to CFG: BB#1
From MBB: BB#1: derived from LLVM BB %redefine_start1.return
    Predecessors according to CFG: BB#0

Removing MBB: BB#1: derived from LLVM BB %redefine_start1.return
# Machine code for function redefine_start1: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start1.entry
16B		%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
32B		%vreg1<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg1
48B		%vreg2<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg2
64B		%vreg3<def> = ADD %vreg2<kill>, %vreg1<kill>; GR32Bit:%vreg3,%vreg2,%vreg1
80B		SW %vreg3<kill>, %vreg0<kill>, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0

# End machine code for function redefine_start1.

********** Stack Coloring **********
********** Function: redefine_start1
Found 0 markers and 1 slots
Slot structure:
Slot #0 - 4 bytes.
Total Stack size: 4 bytes

Will not try to merge slots.
Removed 0 markers.
******** Pre-regalloc Machine LICM: redefine_start1 ********
******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: redefine_start1
********** PROCESS IMPLICIT DEFS **********
********** Function: redefine_start1
********** REWRITING TWO-ADDR INSTRS **********
********** Function: redefine_start1
# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start1.entry
16B		%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
32B		%vreg1<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg1
48B		%vreg2<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg2
64B		%vreg3<def> = ADD %vreg2<kill>, %vreg1<kill>; GR32Bit:%vreg3,%vreg2,%vreg1
80B		SW %vreg3<kill>, %vreg0<kill>, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0

# End machine code for function redefine_start1.

Computing live-in reg-units in ABI blocks.
Created 0 new intervals.
********** INTERVALS **********
%vreg0 = [16r,80r:0)  0@16r
%vreg1 = [32r,64r:0)  0@32r
%vreg2 = [48r,64r:0)  0@48r
%vreg3 = [64r,80r:0)  0@64r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start1.entry
16B		%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
32B		%vreg1<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg1
48B		%vreg2<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg2
64B		%vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
80B		SW %vreg3, %vreg0, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0

# End machine code for function redefine_start1.

********** SIMPLE REGISTER COALESCING **********
********** Function: redefine_start1
********** JOINING INTERVALS ***********
redefine_start1.entry:
Trying to inflate 0 regs.
********** INTERVALS **********
%vreg0 = [16r,80r:0)  0@16r
%vreg1 = [32r,64r:0)  0@32r
%vreg2 = [48r,64r:0)  0@48r
%vreg3 = [64r,80r:0)  0@64r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start1.entry
16B		%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
32B		%vreg1<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg1
48B		%vreg2<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg2
64B		%vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
80B		SW %vreg3, %vreg0, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0

# End machine code for function redefine_start1.

Before MISched:
# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %redefine_start1.entry
	%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
	%vreg1<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg1
	%vreg2<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg2
	%vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
	SW %vreg3, %vreg0, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0

# End machine code for function redefine_start1.


-------------
Starting new basic block BB#0
********** MI Scheduling **********
redefine_start1:BB#0 redefine_start1.entry
  From: %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
    To: End Remaining: 0
Max Pressure: GR32Bit=3
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 3
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 0
SU(0):   %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(4): Latency=5 Reg=%vreg0

SU(1):   %vreg1<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
   val SU(3): Latency=5 Reg=%vreg1

SU(2):   %vreg2<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
   val SU(3): Latency=5 Reg=%vreg2

SU(3):   %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg2
   val SU(1): Latency=5 Reg=%vreg1
  Successors:
   val SU(4): Latency=4 Reg=%vreg3

SU(4):   SW %vreg3, %vreg0, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 9
  Height             : 0
  Predecessors:
   val SU(3): Latency=4 Reg=%vreg3
   val SU(0): Latency=5 Reg=%vreg0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(4): Latency=5 Reg=%vreg0

SU(1):   %vreg1<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
   val SU(3): Latency=5 Reg=%vreg1

SU(2):   %vreg2<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
   val SU(3): Latency=5 Reg=%vreg2

SU(3):   %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg2
   val SU(1): Latency=5 Reg=%vreg1
  Successors:
   val SU(4): Latency=4 Reg=%vreg3

SU(4):   SW %vreg3, %vreg0, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 9
  Height             : 0
  Predecessors:
   val SU(3): Latency=4 Reg=%vreg3
   val SU(0): Latency=5 Reg=%vreg0
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(2)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg2<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg2
handleMove 48B -> 8B: %vreg2<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg2
     %vreg2:	[48r,64r:0)  0@48r
        -->	[8r,64r:0)  0@8r
     zero:	EMPTY
        -->	EMPTY
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
Pick node SU(1)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg1<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg1
Pick node SU(3)  ILP: 3 / 6 = 0.5 Tree: 0 @0
Scheduling %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
Pick node SU(4)  ILP: 5 / 10 = 0.5 Tree: 0 @0
Scheduling SW %vreg3, %vreg0, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0
*** Final schedule for BB#0 ***
SU(2):   %vreg2<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg2
SU(0):   %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
SU(1):   %vreg1<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg1
SU(3):   %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
SU(4):   SW %vreg3, %vreg0, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0


*** Renumbered SlotIndexes 4-28 ***

*** Renumbered SlotIndexes 16-56 ***

*** Renumbered SlotIndexes 28-76 ***

*** Renumbered SlotIndexes 40-104 ***

*** Renumbered SlotIndexes 52-116 ***

*** Renumbered SlotIndexes 64-128 ***

*** Renumbered SlotIndexes 76-140 ***

*** Renumbered SlotIndexes 88-152 ***

*** Renumbered SlotIndexes 100-164 ***

*** Renumbered SlotIndexes 112-176 ***

*** Renumbered SlotIndexes 124-188 ***

*** Renumbered SlotIndexes 136-200 ***

*** Renumbered SlotIndexes 148-212 ***

*** Renumbered SlotIndexes 160-224 ***

*** Renumbered SlotIndexes 172-236 ***

*** Renumbered SlotIndexes 184-248 ***

*** Renumbered SlotIndexes 196-260 ***

*** Renumbered SlotIndexes 208-272 ***

*** Renumbered SlotIndexes 220-284 ***

*** Renumbered SlotIndexes 232-296 ***

*** Renumbered SlotIndexes 244-308 ***

*** Renumbered SlotIndexes 256-320 ***

*** Renumbered SlotIndexes 268-332 ***

*** Renumbered SlotIndexes 280-344 ***

*** Renumbered SlotIndexes 292-356 ***

*** Renumbered SlotIndexes 304-368 ***

*** Renumbered SlotIndexes 316-380 ***

*** Renumbered SlotIndexes 328-392 ***

*** Renumbered SlotIndexes 340-404 ***

*** Renumbered SlotIndexes 352-416 ***

*** Renumbered SlotIndexes 364-428 ***

*** Renumbered SlotIndexes 376-440 ***

*** Renumbered SlotIndexes 388-452 ***

*** Renumbered SlotIndexes 400-464 ***
Partitioning instructions of the region into multiple CEs
instr:  %vreg2<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg2
instr:  %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
instr:  %vreg1<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg1
instr:  %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
instr:  SW %vreg3, %vreg0, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
before falloc, state of bb0:BB#0: derived from LLVM BB %redefine_start1.entry
	%vreg4<def> = ADD %t5, %zero; GR32Bit:%vreg4
	%vreg6<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg6
	%vreg7<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg7
	%vreg8<def> = SRLI %vreg7, 12; GR32Bit:%vreg8,%vreg7
	%vreg9<def> = ADD %vreg6, %vreg8; GR32Bit:%vreg9,%vreg6,%vreg8
	%vreg10<def> = ADDI %zero, 16; GR32Bit:%vreg10
	%vreg11<def> = SRLI %t5, 22; GR32Bit:%vreg11
	%vreg12<def> = SRLI %t5, 12; GR32Bit:%vreg12
	%vreg13<def> = ANDI %vreg12, 15; GR32Bit:%vreg13,%vreg12
	%vreg14<def> = SRLI %t5, 6; GR32Bit:%vreg14
	%vreg15<def> = ANDI %vreg14, 63; GR32Bit:%vreg15,%vreg14
	%vreg16<def> = ADDI %zero, 832; GR32Bit:%vreg16
	%vreg17<def> = MUL %vreg11, %vreg16; GR32Bit:%vreg17,%vreg11,%vreg16
	%vreg18<def> = ADDI %zero, 52; GR32Bit:%vreg18
	%vreg19<def> = MUL %vreg13, %vreg18; GR32Bit:%vreg19,%vreg13,%vreg18
	%vreg20<def> = ADD %vreg19, %vreg15; GR32Bit:%vreg20,%vreg19,%vreg15
	%vreg21<def> = ADD %vreg20, %vreg17; GR32Bit:%vreg21,%vreg20,%vreg17
	%vreg22<def> = MUL %vreg21, %vreg10; GR32Bit:%vreg22,%vreg21,%vreg10
	%vreg5<def> = ADD %vreg9, %vreg22; GR32Bit:%vreg5,%vreg9,%vreg22
	%vreg2<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg2
	%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
	%vreg1<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg1
	%vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
	SW %vreg3, %vreg0, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0
	%vreg23<def> = ADD %t5, %zero; GR32Bit:%vreg23
	%vreg25<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg25
	%vreg26<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg26
	%vreg27<def> = SRLI %vreg26, 12; GR32Bit:%vreg27,%vreg26
	%vreg28<def> = ADD %vreg25, %vreg27; GR32Bit:%vreg28,%vreg25,%vreg27
	%vreg29<def> = ADDI %zero, 16; GR32Bit:%vreg29
	%vreg30<def> = SRLI %t5, 22; GR32Bit:%vreg30
	%vreg31<def> = SRLI %t5, 12; GR32Bit:%vreg31
	%vreg32<def> = ANDI %vreg31, 15; GR32Bit:%vreg32,%vreg31
	%vreg33<def> = SRLI %t5, 6; GR32Bit:%vreg33
	%vreg34<def> = ANDI %vreg33, 63; GR32Bit:%vreg34,%vreg33
	%vreg35<def> = ADDI %zero, 832; GR32Bit:%vreg35
	%vreg36<def> = MUL %vreg30, %vreg35; GR32Bit:%vreg36,%vreg30,%vreg35
	%vreg37<def> = ADDI %zero, 52; GR32Bit:%vreg37
	%vreg38<def> = MUL %vreg32, %vreg37; GR32Bit:%vreg38,%vreg32,%vreg37
	%vreg39<def> = ADD %vreg38, %vreg34; GR32Bit:%vreg39,%vreg38,%vreg34
	%vreg40<def> = ADD %vreg39, %vreg36; GR32Bit:%vreg40,%vreg39,%vreg36
	%vreg41<def> = MUL %vreg40, %vreg29; GR32Bit:%vreg41,%vreg40,%vreg29
	%vreg24<def> = ADD %vreg28, %vreg41; GR32Bit:%vreg24,%vreg28,%vreg41
	%vreg42<def> = ADD %t5, %zero; GR32Bit:%vreg42
	%vreg44<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg44
	%vreg45<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg45
	%vreg46<def> = SRLI %vreg45, 12; GR32Bit:%vreg46,%vreg45
	%vreg47<def> = ADD %vreg44, %vreg46; GR32Bit:%vreg47,%vreg44,%vreg46
	%vreg48<def> = ADDI %zero, 16; GR32Bit:%vreg48
	%vreg49<def> = SRLI %t5, 22; GR32Bit:%vreg49
	%vreg50<def> = SRLI %t5, 12; GR32Bit:%vreg50
	%vreg51<def> = ANDI %vreg50, 15; GR32Bit:%vreg51,%vreg50
	%vreg52<def> = SRLI %t5, 6; GR32Bit:%vreg52
	%vreg53<def> = ANDI %vreg52, 63; GR32Bit:%vreg53,%vreg52
	%vreg54<def> = ADDI %zero, 832; GR32Bit:%vreg54
	%vreg55<def> = MUL %vreg49, %vreg54; GR32Bit:%vreg55,%vreg49,%vreg54
	%vreg56<def> = ADDI %zero, 52; GR32Bit:%vreg56
	%vreg57<def> = MUL %vreg51, %vreg56; GR32Bit:%vreg57,%vreg51,%vreg56
	%vreg58<def> = ADD %vreg57, %vreg53; GR32Bit:%vreg58,%vreg57,%vreg53
	%vreg59<def> = ADD %vreg58, %vreg55; GR32Bit:%vreg59,%vreg58,%vreg55
	%vreg60<def> = MUL %vreg59, %vreg48; GR32Bit:%vreg60,%vreg59,%vreg48
	%vreg43<def> = ADD %vreg47, %vreg60; GR32Bit:%vreg43,%vreg47,%vreg60
	%vreg61<def> = ADD %t5, %zero; GR32Bit:%vreg61
	%vreg63<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg63
	%vreg64<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg64
	%vreg65<def> = SRLI %vreg64, 12; GR32Bit:%vreg65,%vreg64
	%vreg66<def> = ADD %vreg63, %vreg65; GR32Bit:%vreg66,%vreg63,%vreg65
	%vreg67<def> = ADDI %zero, 16; GR32Bit:%vreg67
	%vreg68<def> = SRLI %t5, 22; GR32Bit:%vreg68
	%vreg69<def> = SRLI %t5, 12; GR32Bit:%vreg69
	%vreg70<def> = ANDI %vreg69, 15; GR32Bit:%vreg70,%vreg69
	%vreg71<def> = SRLI %t5, 6; GR32Bit:%vreg71
	%vreg72<def> = ANDI %vreg71, 63; GR32Bit:%vreg72,%vreg71
	%vreg73<def> = ADDI %zero, 832; GR32Bit:%vreg73
	%vreg74<def> = MUL %vreg68, %vreg73; GR32Bit:%vreg74,%vreg68,%vreg73
	%vreg75<def> = ADDI %zero, 52; GR32Bit:%vreg75
	%vreg76<def> = MUL %vreg70, %vreg75; GR32Bit:%vreg76,%vreg70,%vreg75
	%vreg77<def> = ADD %vreg76, %vreg72; GR32Bit:%vreg77,%vreg76,%vreg72
	%vreg78<def> = ADD %vreg77, %vreg74; GR32Bit:%vreg78,%vreg77,%vreg74
	%vreg79<def> = MUL %vreg78, %vreg67; GR32Bit:%vreg79,%vreg78,%vreg67
	%vreg62<def> = ADD %vreg66, %vreg79; GR32Bit:%vreg62,%vreg66,%vreg79
Adding all fallocs first to avoid stalls due to sequential fallocs and fbinds
Adding writecm(for writing sync count to context frames) and fbind instructions
live end of child is itself
live end of child is itself
Adding localref sw instructions to hyperOp redefine_start1

*** Renumbered SlotIndexes 412-476 ***

*** Renumbered SlotIndexes 424-488 ***

*** Renumbered SlotIndexes 436-500 ***

*** Renumbered SlotIndexes 448-512 ***

*** Renumbered SlotIndexes 460-524 ***

*** Renumbered SlotIndexes 472-536 ***

*** Renumbered SlotIndexes 484-548 ***

*** Renumbered SlotIndexes 496-560 ***

*** Renumbered SlotIndexes 508-572 ***
localref sw to startup_fuel_valves3:  SW %vreg100, %vreg99, 12; GR32Bit:%vreg100,%vreg99
Adding writecm instructions to hyperOp redefine_start1
Adding writecmp and sync instructions
problem with which child exactly?startup_fuel_valves3 with edge of type:6

*** Renumbered SlotIndexes 520-584 ***

*** Renumbered SlotIndexes 532-596 ***

*** Renumbered SlotIndexes 544-608 ***
Adding endHyperOp instructions to each pHyperOp

*** Renumbered SlotIndexes 556-620 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 568-632 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 580-644 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 592-656 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 604-668 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 616-680 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0
After Shuffling regions of basic block, state of BB#0:
BB#0: derived from LLVM BB %redefine_start1.entry
	%vreg4<def> = ADD %t5, %zero; GR32Bit:%vreg4
	%vreg6<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg6
	%vreg7<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg7
	%vreg8<def> = SRLI %vreg7, 12; GR32Bit:%vreg8,%vreg7
	%vreg9<def> = ADD %vreg6, %vreg8; GR32Bit:%vreg9,%vreg6,%vreg8
	%vreg10<def> = ADDI %zero, 16; GR32Bit:%vreg10
	%vreg11<def> = SRLI %t5, 22; GR32Bit:%vreg11
	%vreg12<def> = SRLI %t5, 12; GR32Bit:%vreg12
	%vreg13<def> = ANDI %vreg12, 15; GR32Bit:%vreg13,%vreg12
	%vreg14<def> = SRLI %t5, 6; GR32Bit:%vreg14
	%vreg15<def> = ANDI %vreg14, 63; GR32Bit:%vreg15,%vreg14
	%vreg16<def> = ADDI %zero, 832; GR32Bit:%vreg16
	%vreg17<def> = MUL %vreg11, %vreg16; GR32Bit:%vreg17,%vreg11,%vreg16
	%vreg18<def> = ADDI %zero, 52; GR32Bit:%vreg18
	%vreg19<def> = MUL %vreg13, %vreg18; GR32Bit:%vreg19,%vreg13,%vreg18
	%vreg20<def> = ADD %vreg19, %vreg15; GR32Bit:%vreg20,%vreg19,%vreg15
	%vreg21<def> = ADD %vreg20, %vreg17; GR32Bit:%vreg21,%vreg20,%vreg17
	%vreg22<def> = MUL %vreg21, %vreg10; GR32Bit:%vreg22,%vreg21,%vreg10
	%vreg5<def> = ADD %vreg9, %vreg22; GR32Bit:%vreg5,%vreg9,%vreg22
	%vreg2<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg2
	%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
	%vreg1<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg1
	%vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
	SW %vreg3, %vreg0, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0
	%vreg80<def> = ADDI %zero, 64; GR32Bit:%vreg80
	%vreg81<def> = ADDI %zero, 1; GR32Bit:%vreg81
	WRITECM %vreg80, %vreg81, 60; GR32Bit:%vreg80,%vreg81
	%vreg82<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg82
	%vreg83<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg83
	%vreg84<def> = SRLI %vreg83, 12; GR32Bit:%vreg84,%vreg83
	%vreg85<def> = ADD %vreg82, %vreg84; GR32Bit:%vreg85,%vreg82,%vreg84
	%vreg86<def> = ADDI %zero, 16; GR32Bit:%vreg86
	%vreg87<def> = SRLI %vreg80, 22; GR32Bit:%vreg87,%vreg80
	%vreg88<def> = SRLI %vreg80, 12; GR32Bit:%vreg88,%vreg80
	%vreg89<def> = ANDI %vreg88, 15; GR32Bit:%vreg89,%vreg88
	%vreg90<def> = SRLI %vreg80, 6; GR32Bit:%vreg90,%vreg80
	%vreg91<def> = ANDI %vreg90, 63; GR32Bit:%vreg91,%vreg90
	%vreg92<def> = ADDI %zero, 832; GR32Bit:%vreg92
	%vreg93<def> = MUL %vreg87, %vreg92; GR32Bit:%vreg93,%vreg87,%vreg92
	%vreg94<def> = ADDI %zero, 52; GR32Bit:%vreg94
	%vreg95<def> = MUL %vreg89, %vreg94; GR32Bit:%vreg95,%vreg89,%vreg94
	%vreg96<def> = ADD %vreg95, %vreg91; GR32Bit:%vreg96,%vreg95,%vreg91
	%vreg97<def> = ADD %vreg96, %vreg93; GR32Bit:%vreg97,%vreg96,%vreg93
	%vreg98<def> = MUL %vreg97, %vreg86; GR32Bit:%vreg98,%vreg97,%vreg86
	%vreg99<def> = ADD %vreg98, %vreg85; GR32Bit:%vreg99,%vreg98,%vreg85
	%vreg100<def> = LW %t5, 0; GR32Bit:%vreg100
	SW %vreg100, %vreg99, 12; GR32Bit:%vreg100,%vreg99
	%vreg101<def> = LUI 1; GR32Bit:%vreg101
	WRITEPM %vreg101, %vreg80, 0; GR32Bit:%vreg101,%vreg80
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg23<def> = ADD %t5, %zero; GR32Bit:%vreg23
	%vreg25<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg25
	%vreg26<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg26
	%vreg27<def> = SRLI %vreg26, 12; GR32Bit:%vreg27,%vreg26
	%vreg28<def> = ADD %vreg25, %vreg27; GR32Bit:%vreg28,%vreg25,%vreg27
	%vreg29<def> = ADDI %zero, 16; GR32Bit:%vreg29
	%vreg30<def> = SRLI %t5, 22; GR32Bit:%vreg30
	%vreg31<def> = SRLI %t5, 12; GR32Bit:%vreg31
	%vreg32<def> = ANDI %vreg31, 15; GR32Bit:%vreg32,%vreg31
	%vreg33<def> = SRLI %t5, 6; GR32Bit:%vreg33
	%vreg34<def> = ANDI %vreg33, 63; GR32Bit:%vreg34,%vreg33
	%vreg35<def> = ADDI %zero, 832; GR32Bit:%vreg35
	%vreg36<def> = MUL %vreg30, %vreg35; GR32Bit:%vreg36,%vreg30,%vreg35
	%vreg37<def> = ADDI %zero, 52; GR32Bit:%vreg37
	%vreg38<def> = MUL %vreg32, %vreg37; GR32Bit:%vreg38,%vreg32,%vreg37
	%vreg39<def> = ADD %vreg38, %vreg34; GR32Bit:%vreg39,%vreg38,%vreg34
	%vreg40<def> = ADD %vreg39, %vreg36; GR32Bit:%vreg40,%vreg39,%vreg36
	%vreg41<def> = MUL %vreg40, %vreg29; GR32Bit:%vreg41,%vreg40,%vreg29
	%vreg24<def> = ADD %vreg28, %vreg41; GR32Bit:%vreg24,%vreg28,%vreg41
	%vreg102<def> = LUI 1; GR32Bit:%vreg102
	%vreg103<def> = DREADPM %vreg102, 0; GR32Bit:%vreg103,%vreg102
	%vreg104<def> = ADDI %zero, -1; GR32Bit:%vreg104
	SYNC %vreg103, %vreg104, 60; GR32Bit:%vreg103,%vreg104
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg42<def> = ADD %t5, %zero; GR32Bit:%vreg42
	%vreg44<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg44
	%vreg45<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg45
	%vreg46<def> = SRLI %vreg45, 12; GR32Bit:%vreg46,%vreg45
	%vreg47<def> = ADD %vreg44, %vreg46; GR32Bit:%vreg47,%vreg44,%vreg46
	%vreg48<def> = ADDI %zero, 16; GR32Bit:%vreg48
	%vreg49<def> = SRLI %t5, 22; GR32Bit:%vreg49
	%vreg50<def> = SRLI %t5, 12; GR32Bit:%vreg50
	%vreg51<def> = ANDI %vreg50, 15; GR32Bit:%vreg51,%vreg50
	%vreg52<def> = SRLI %t5, 6; GR32Bit:%vreg52
	%vreg53<def> = ANDI %vreg52, 63; GR32Bit:%vreg53,%vreg52
	%vreg54<def> = ADDI %zero, 832; GR32Bit:%vreg54
	%vreg55<def> = MUL %vreg49, %vreg54; GR32Bit:%vreg55,%vreg49,%vreg54
	%vreg56<def> = ADDI %zero, 52; GR32Bit:%vreg56
	%vreg57<def> = MUL %vreg51, %vreg56; GR32Bit:%vreg57,%vreg51,%vreg56
	%vreg58<def> = ADD %vreg57, %vreg53; GR32Bit:%vreg58,%vreg57,%vreg53
	%vreg59<def> = ADD %vreg58, %vreg55; GR32Bit:%vreg59,%vreg58,%vreg55
	%vreg60<def> = MUL %vreg59, %vreg48; GR32Bit:%vreg60,%vreg59,%vreg48
	%vreg43<def> = ADD %vreg47, %vreg60; GR32Bit:%vreg43,%vreg47,%vreg60
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg61<def> = ADD %t5, %zero; GR32Bit:%vreg61
	%vreg63<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg63
	%vreg64<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg64
	%vreg65<def> = SRLI %vreg64, 12; GR32Bit:%vreg65,%vreg64
	%vreg66<def> = ADD %vreg63, %vreg65; GR32Bit:%vreg66,%vreg63,%vreg65
	%vreg67<def> = ADDI %zero, 16; GR32Bit:%vreg67
	%vreg68<def> = SRLI %t5, 22; GR32Bit:%vreg68
	%vreg69<def> = SRLI %t5, 12; GR32Bit:%vreg69
	%vreg70<def> = ANDI %vreg69, 15; GR32Bit:%vreg70,%vreg69
	%vreg71<def> = SRLI %t5, 6; GR32Bit:%vreg71
	%vreg72<def> = ANDI %vreg71, 63; GR32Bit:%vreg72,%vreg71
	%vreg73<def> = ADDI %zero, 832; GR32Bit:%vreg73
	%vreg74<def> = MUL %vreg68, %vreg73; GR32Bit:%vreg74,%vreg68,%vreg73
	%vreg75<def> = ADDI %zero, 52; GR32Bit:%vreg75
	%vreg76<def> = MUL %vreg70, %vreg75; GR32Bit:%vreg76,%vreg70,%vreg75
	%vreg77<def> = ADD %vreg76, %vreg72; GR32Bit:%vreg77,%vreg76,%vreg72
	%vreg78<def> = ADD %vreg77, %vreg74; GR32Bit:%vreg78,%vreg77,%vreg74
	%vreg79<def> = MUL %vreg78, %vreg67; GR32Bit:%vreg79,%vreg78,%vreg67
	%vreg62<def> = ADD %vreg66, %vreg79; GR32Bit:%vreg62,%vreg66,%vreg79
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 316-804 ***

*** Renumbered SlotIndexes 304-824 ***

*** Renumbered SlotIndexes 216-872 ***

*** Renumbered SlotIndexes 204-892 ***

*** Renumbered SlotIndexes 204-908 ***

*** Renumbered SlotIndexes 204-924 ***

*** Renumbered SlotIndexes 204-940 ***

*** Renumbered SlotIndexes 112-984 ***

*** Renumbered SlotIndexes 100-1004 ***

*** Renumbered SlotIndexes 100-1020 ***

*** Renumbered SlotIndexes 100-1036 ***

*** Renumbered SlotIndexes 100-1052 ***

*** Renumbered SlotIndexes 100-1068 ***

*** Renumbered SlotIndexes 100-1084 ***

*** Renumbered SlotIndexes 100-1100 ***

*** Renumbered SlotIndexes 100-1116 ***

*** Renumbered SlotIndexes 100-1132 ***

*** Renumbered SlotIndexes 100-1148 ***

*** Renumbered SlotIndexes 100-1164 ***

*** Renumbered SlotIndexes 100-1180 ***

*** Renumbered SlotIndexes 100-1196 ***

*** Renumbered SlotIndexes 100-1212 ***

*** Renumbered SlotIndexes 100-1228 ***

*** Renumbered SlotIndexes 100-1244 ***

*** Renumbered SlotIndexes 12-1292 ***
Creating pHyperOp bundles for CEs for bb0
  %vreg23<def> = ADD %t5, %zero; GR32Bit:%vreg23
starting at   %vreg4<def> = ADD %t5, %zero; GR32Bit:%vreg4
  %vreg42<def> = ADD %t5, %zero; GR32Bit:%vreg42
starting at   %vreg23<def> = ADD %t5, %zero; GR32Bit:%vreg23
  %vreg61<def> = ADD %t5, %zero; GR32Bit:%vreg61
starting at   %vreg42<def> = ADD %t5, %zero; GR32Bit:%vreg42
starting at   %vreg61<def> = ADD %t5, %zero; GR32Bit:%vreg61
After bundling, state of BB0:BB#0: derived from LLVM BB %redefine_start1.entry
	%vreg4<def> = ADD %t5, %zero; GR32Bit:%vreg4
	  * %vreg6<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg6
	  * %vreg7<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg7
	  * %vreg8<def> = SRLI %vreg7, 12; GR32Bit:%vreg8,%vreg7
	  * %vreg9<def> = ADD %vreg6, %vreg8; GR32Bit:%vreg9,%vreg6,%vreg8
	  * %vreg10<def> = ADDI %zero, 16; GR32Bit:%vreg10
	  * %vreg11<def> = SRLI %t5, 22; GR32Bit:%vreg11
	  * %vreg12<def> = SRLI %t5, 12; GR32Bit:%vreg12
	  * %vreg13<def> = ANDI %vreg12, 15; GR32Bit:%vreg13,%vreg12
	  * %vreg14<def> = SRLI %t5, 6; GR32Bit:%vreg14
	  * %vreg15<def> = ANDI %vreg14, 63; GR32Bit:%vreg15,%vreg14
	  * %vreg16<def> = ADDI %zero, 832; GR32Bit:%vreg16
	  * %vreg17<def> = MUL %vreg11, %vreg16; GR32Bit:%vreg17,%vreg11,%vreg16
	  * %vreg18<def> = ADDI %zero, 52; GR32Bit:%vreg18
	  * %vreg19<def> = MUL %vreg13, %vreg18; GR32Bit:%vreg19,%vreg13,%vreg18
	  * %vreg20<def> = ADD %vreg19, %vreg15; GR32Bit:%vreg20,%vreg19,%vreg15
	  * %vreg21<def> = ADD %vreg20, %vreg17; GR32Bit:%vreg21,%vreg20,%vreg17
	  * %vreg22<def> = MUL %vreg21, %vreg10; GR32Bit:%vreg22,%vreg21,%vreg10
	  * %vreg5<def> = ADD %vreg9, %vreg22; GR32Bit:%vreg5,%vreg9,%vreg22
	  * %vreg2<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg2
	  * %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
	  * %vreg1<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg1
	  * %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
	  * SW %vreg3, %vreg0, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0
	  * %vreg80<def> = ADDI %zero, 64; GR32Bit:%vreg80
	  * %vreg81<def> = ADDI %zero, 1; GR32Bit:%vreg81
	  * WRITECM %vreg80, %vreg81, 60; GR32Bit:%vreg80,%vreg81
	  * %vreg82<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg82
	  * %vreg83<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg83
	  * %vreg84<def> = SRLI %vreg83, 12; GR32Bit:%vreg84,%vreg83
	  * %vreg85<def> = ADD %vreg82, %vreg84; GR32Bit:%vreg85,%vreg82,%vreg84
	  * %vreg86<def> = ADDI %zero, 16; GR32Bit:%vreg86
	  * %vreg87<def> = SRLI %vreg80, 22; GR32Bit:%vreg87,%vreg80
	  * %vreg88<def> = SRLI %vreg80, 12; GR32Bit:%vreg88,%vreg80
	  * %vreg89<def> = ANDI %vreg88, 15; GR32Bit:%vreg89,%vreg88
	  * %vreg90<def> = SRLI %vreg80, 6; GR32Bit:%vreg90,%vreg80
	  * %vreg91<def> = ANDI %vreg90, 63; GR32Bit:%vreg91,%vreg90
	  * %vreg92<def> = ADDI %zero, 832; GR32Bit:%vreg92
	  * %vreg93<def> = MUL %vreg87, %vreg92; GR32Bit:%vreg93,%vreg87,%vreg92
	  * %vreg94<def> = ADDI %zero, 52; GR32Bit:%vreg94
	  * %vreg95<def> = MUL %vreg89, %vreg94; GR32Bit:%vreg95,%vreg89,%vreg94
	  * %vreg96<def> = ADD %vreg95, %vreg91; GR32Bit:%vreg96,%vreg95,%vreg91
	  * %vreg97<def> = ADD %vreg96, %vreg93; GR32Bit:%vreg97,%vreg96,%vreg93
	  * %vreg98<def> = MUL %vreg97, %vreg86; GR32Bit:%vreg98,%vreg97,%vreg86
	  * %vreg99<def> = ADD %vreg98, %vreg85; GR32Bit:%vreg99,%vreg98,%vreg85
	  * %vreg100<def> = LW %t5, 0; GR32Bit:%vreg100
	  * SW %vreg100, %vreg99, 12; GR32Bit:%vreg100,%vreg99
	  * %vreg101<def> = LUI 1; GR32Bit:%vreg101
	  * WRITEPM %vreg101, %vreg80, 0; GR32Bit:%vreg101,%vreg80
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg23<def> = ADD %t5, %zero; GR32Bit:%vreg23
	  * %vreg25<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg25
	  * %vreg26<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg26
	  * %vreg27<def> = SRLI %vreg26, 12; GR32Bit:%vreg27,%vreg26
	  * %vreg28<def> = ADD %vreg25, %vreg27; GR32Bit:%vreg28,%vreg25,%vreg27
	  * %vreg29<def> = ADDI %zero, 16; GR32Bit:%vreg29
	  * %vreg30<def> = SRLI %t5, 22; GR32Bit:%vreg30
	  * %vreg31<def> = SRLI %t5, 12; GR32Bit:%vreg31
	  * %vreg32<def> = ANDI %vreg31, 15; GR32Bit:%vreg32,%vreg31
	  * %vreg33<def> = SRLI %t5, 6; GR32Bit:%vreg33
	  * %vreg34<def> = ANDI %vreg33, 63; GR32Bit:%vreg34,%vreg33
	  * %vreg35<def> = ADDI %zero, 832; GR32Bit:%vreg35
	  * %vreg36<def> = MUL %vreg30, %vreg35; GR32Bit:%vreg36,%vreg30,%vreg35
	  * %vreg37<def> = ADDI %zero, 52; GR32Bit:%vreg37
	  * %vreg38<def> = MUL %vreg32, %vreg37; GR32Bit:%vreg38,%vreg32,%vreg37
	  * %vreg39<def> = ADD %vreg38, %vreg34; GR32Bit:%vreg39,%vreg38,%vreg34
	  * %vreg40<def> = ADD %vreg39, %vreg36; GR32Bit:%vreg40,%vreg39,%vreg36
	  * %vreg41<def> = MUL %vreg40, %vreg29; GR32Bit:%vreg41,%vreg40,%vreg29
	  * %vreg24<def> = ADD %vreg28, %vreg41; GR32Bit:%vreg24,%vreg28,%vreg41
	  * %vreg102<def> = LUI 1; GR32Bit:%vreg102
	  * %vreg103<def> = DREADPM %vreg102, 0; GR32Bit:%vreg103,%vreg102
	  * %vreg104<def> = ADDI %zero, -1; GR32Bit:%vreg104
	  * SYNC %vreg103, %vreg104, 60; GR32Bit:%vreg103,%vreg104
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg42<def> = ADD %t5, %zero; GR32Bit:%vreg42
	  * %vreg44<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg44
	  * %vreg45<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg45
	  * %vreg46<def> = SRLI %vreg45, 12; GR32Bit:%vreg46,%vreg45
	  * %vreg47<def> = ADD %vreg44, %vreg46; GR32Bit:%vreg47,%vreg44,%vreg46
	  * %vreg48<def> = ADDI %zero, 16; GR32Bit:%vreg48
	  * %vreg49<def> = SRLI %t5, 22; GR32Bit:%vreg49
	  * %vreg50<def> = SRLI %t5, 12; GR32Bit:%vreg50
	  * %vreg51<def> = ANDI %vreg50, 15; GR32Bit:%vreg51,%vreg50
	  * %vreg52<def> = SRLI %t5, 6; GR32Bit:%vreg52
	  * %vreg53<def> = ANDI %vreg52, 63; GR32Bit:%vreg53,%vreg52
	  * %vreg54<def> = ADDI %zero, 832; GR32Bit:%vreg54
	  * %vreg55<def> = MUL %vreg49, %vreg54; GR32Bit:%vreg55,%vreg49,%vreg54
	  * %vreg56<def> = ADDI %zero, 52; GR32Bit:%vreg56
	  * %vreg57<def> = MUL %vreg51, %vreg56; GR32Bit:%vreg57,%vreg51,%vreg56
	  * %vreg58<def> = ADD %vreg57, %vreg53; GR32Bit:%vreg58,%vreg57,%vreg53
	  * %vreg59<def> = ADD %vreg58, %vreg55; GR32Bit:%vreg59,%vreg58,%vreg55
	  * %vreg60<def> = MUL %vreg59, %vreg48; GR32Bit:%vreg60,%vreg59,%vreg48
	  * %vreg43<def> = ADD %vreg47, %vreg60; GR32Bit:%vreg43,%vreg47,%vreg60
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg61<def> = ADD %t5, %zero; GR32Bit:%vreg61
	  * %vreg63<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg63
	  * %vreg64<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg64
	  * %vreg65<def> = SRLI %vreg64, 12; GR32Bit:%vreg65,%vreg64
	  * %vreg66<def> = ADD %vreg63, %vreg65; GR32Bit:%vreg66,%vreg63,%vreg65
	  * %vreg67<def> = ADDI %zero, 16; GR32Bit:%vreg67
	  * %vreg68<def> = SRLI %t5, 22; GR32Bit:%vreg68
	  * %vreg69<def> = SRLI %t5, 12; GR32Bit:%vreg69
	  * %vreg70<def> = ANDI %vreg69, 15; GR32Bit:%vreg70,%vreg69
	  * %vreg71<def> = SRLI %t5, 6; GR32Bit:%vreg71
	  * %vreg72<def> = ANDI %vreg71, 63; GR32Bit:%vreg72,%vreg71
	  * %vreg73<def> = ADDI %zero, 832; GR32Bit:%vreg73
	  * %vreg74<def> = MUL %vreg68, %vreg73; GR32Bit:%vreg74,%vreg68,%vreg73
	  * %vreg75<def> = ADDI %zero, 52; GR32Bit:%vreg75
	  * %vreg76<def> = MUL %vreg70, %vreg75; GR32Bit:%vreg76,%vreg70,%vreg75
	  * %vreg77<def> = ADD %vreg76, %vreg72; GR32Bit:%vreg77,%vreg76,%vreg72
	  * %vreg78<def> = ADD %vreg77, %vreg74; GR32Bit:%vreg78,%vreg77,%vreg74
	  * %vreg79<def> = MUL %vreg78, %vreg67; GR32Bit:%vreg79,%vreg78,%vreg67
	  * %vreg62<def> = ADD %vreg66, %vreg79; GR32Bit:%vreg62,%vreg66,%vreg79
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
Patching the instructions that are supposed to use the physical registers r30 and r31
Computing live-in reg-units in ABI blocks.
Created 0 new intervals.

*** Renumbered SlotIndexes 8-1312 ***

*** Renumbered SlotIndexes 172-1324 ***
********** INTERVALS **********
zero = EMPTY
%vreg0 = [188r,212r:0)  0@188r
%vreg1 = [196r,204r:0)  0@196r
%vreg2 = [168r,204r:0)  0@168r
%vreg3 = [204r,212r:0)  0@204r
%vreg4 = [4r,4d:0)  0@4r
%vreg5 = [160r,160d:0)  0@160r
%vreg6 = [24r,48r:0)  0@24r
%vreg7 = [32r,40r:0)  0@32r
%vreg8 = [40r,48r:0)  0@40r
%vreg9 = [48r,160r:0)  0@48r
%vreg10 = [56r,152r:0)  0@56r
%vreg11 = [64r,112r:0)  0@64r
%vreg12 = [72r,80r:0)  0@72r
%vreg13 = [80r,128r:0)  0@80r
%vreg14 = [88r,96r:0)  0@88r
%vreg15 = [96r,136r:0)  0@96r
%vreg16 = [104r,112r:0)  0@104r
%vreg17 = [112r,144r:0)  0@112r
%vreg18 = [120r,128r:0)  0@120r
%vreg19 = [128r,136r:0)  0@128r
%vreg20 = [136r,144r:0)  0@136r
%vreg21 = [144r,152r:0)  0@144r
%vreg22 = [152r,160r:0)  0@152r
%vreg23 = [444r,444d:0)  0@444r
%vreg24 = [588r,588d:0)  0@588r
%vreg25 = [452r,476r:0)  0@452r
%vreg26 = [460r,468r:0)  0@460r
%vreg27 = [468r,476r:0)  0@468r
%vreg28 = [476r,588r:0)  0@476r
%vreg29 = [484r,580r:0)  0@484r
%vreg30 = [492r,540r:0)  0@492r
%vreg31 = [500r,508r:0)  0@500r
%vreg32 = [508r,556r:0)  0@508r
%vreg33 = [516r,524r:0)  0@516r
%vreg34 = [524r,564r:0)  0@524r
%vreg35 = [532r,540r:0)  0@532r
%vreg36 = [540r,572r:0)  0@540r
%vreg37 = [548r,556r:0)  0@548r
%vreg38 = [556r,564r:0)  0@556r
%vreg39 = [564r,572r:0)  0@564r
%vreg40 = [572r,580r:0)  0@572r
%vreg41 = [580r,588r:0)  0@580r
%vreg42 = [652r,652d:0)  0@652r
%vreg43 = [796r,796d:0)  0@796r
%vreg44 = [660r,684r:0)  0@660r
%vreg45 = [668r,676r:0)  0@668r
%vreg46 = [676r,684r:0)  0@676r
%vreg47 = [684r,796r:0)  0@684r
%vreg48 = [692r,788r:0)  0@692r
%vreg49 = [700r,748r:0)  0@700r
%vreg50 = [708r,716r:0)  0@708r
%vreg51 = [716r,764r:0)  0@716r
%vreg52 = [724r,732r:0)  0@724r
%vreg53 = [732r,772r:0)  0@732r
%vreg54 = [740r,748r:0)  0@740r
%vreg55 = [748r,780r:0)  0@748r
%vreg56 = [756r,764r:0)  0@756r
%vreg57 = [764r,772r:0)  0@764r
%vreg58 = [772r,780r:0)  0@772r
%vreg59 = [780r,788r:0)  0@780r
%vreg60 = [788r,796r:0)  0@788r
%vreg61 = [828r,828d:0)  0@828r
%vreg62 = [972r,972d:0)  0@972r
%vreg63 = [836r,860r:0)  0@836r
%vreg64 = [844r,852r:0)  0@844r
%vreg65 = [852r,860r:0)  0@852r
%vreg66 = [860r,972r:0)  0@860r
%vreg67 = [868r,964r:0)  0@868r
%vreg68 = [876r,924r:0)  0@876r
%vreg69 = [884r,892r:0)  0@884r
%vreg70 = [892r,940r:0)  0@892r
%vreg71 = [900r,908r:0)  0@900r
%vreg72 = [908r,948r:0)  0@908r
%vreg73 = [916r,924r:0)  0@916r
%vreg74 = [924r,956r:0)  0@924r
%vreg75 = [932r,940r:0)  0@932r
%vreg76 = [940r,948r:0)  0@940r
%vreg77 = [948r,956r:0)  0@948r
%vreg78 = [956r,964r:0)  0@956r
%vreg79 = [964r,972r:0)  0@964r
%vreg80 = [220r,412r:0)  0@220r
%vreg81 = [228r,236r:0)  0@228r
%vreg82 = [244r,268r:0)  0@244r
%vreg83 = [252r,260r:0)  0@252r
%vreg84 = [260r,268r:0)  0@260r
%vreg85 = [268r,380r:0)  0@268r
%vreg86 = [276r,372r:0)  0@276r
%vreg87 = [284r,332r:0)  0@284r
%vreg88 = [292r,300r:0)  0@292r
%vreg89 = [300r,348r:0)  0@300r
%vreg90 = [308r,316r:0)  0@308r
%vreg91 = [316r,356r:0)  0@316r
%vreg92 = [324r,332r:0)  0@324r
%vreg93 = [332r,364r:0)  0@332r
%vreg94 = [340r,348r:0)  0@340r
%vreg95 = [348r,356r:0)  0@348r
%vreg96 = [356r,364r:0)  0@356r
%vreg97 = [364r,372r:0)  0@364r
%vreg98 = [372r,380r:0)  0@372r
%vreg99 = [380r,396r:0)  0@380r
%vreg100 = [388r,396r:0)  0@388r
%vreg101 = [404r,412r:0)  0@404r
%vreg102 = [596r,604r:0)  0@596r
%vreg103 = [604r,1324B:0)  0@604r
%vreg104 = [612r,620r:0)  0@612r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start1.entry
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg6<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg6
4B		  * %vreg7<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg7
4B		  * %vreg8<def> = SRLI %vreg7, 12; GR32Bit:%vreg8,%vreg7
4B		  * %vreg9<def> = ADD %vreg6, %vreg8; GR32Bit:%vreg9,%vreg6,%vreg8
4B		  * %vreg10<def> = ADDI %zero, 16; GR32Bit:%vreg10
4B		  * %vreg11<def> = SRLI %t5, 22; GR32Bit:%vreg11
4B		  * %vreg12<def> = SRLI %t5, 12; GR32Bit:%vreg12
4B		  * %vreg13<def> = ANDI %vreg12, 15; GR32Bit:%vreg13,%vreg12
4B		  * %vreg14<def> = SRLI %t5, 6; GR32Bit:%vreg14
4B		  * %vreg15<def> = ANDI %vreg14, 63; GR32Bit:%vreg15,%vreg14
4B		  * %vreg16<def> = ADDI %zero, 832; GR32Bit:%vreg16
4B		  * %vreg17<def> = MUL %vreg11, %vreg16; GR32Bit:%vreg17,%vreg11,%vreg16
4B		  * %vreg18<def> = ADDI %zero, 52; GR32Bit:%vreg18
4B		  * %vreg19<def> = MUL %vreg13, %vreg18; GR32Bit:%vreg19,%vreg13,%vreg18
4B		  * %vreg20<def> = ADD %vreg19, %vreg15; GR32Bit:%vreg20,%vreg19,%vreg15
4B		  * %vreg21<def> = ADD %vreg20, %vreg17; GR32Bit:%vreg21,%vreg20,%vreg17
4B		  * %vreg22<def> = MUL %vreg21, %vreg10; GR32Bit:%vreg22,%vreg21,%vreg10
4B		  * %t5<def> = ADD %vreg9, %vreg22; GR32Bit:%vreg9,%vreg22
4B		  * %vreg2<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg2
4B		  * SRLI %vreg2, %vreg2, 12; GR32Bit:%vreg2
4B		  * %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
4B		  * %vreg1<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg1
4B		  * %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
4B		  * SW %vreg3, %vreg0, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0
4B		  * %vreg80<def> = ADDI %zero, 64; GR32Bit:%vreg80
4B		  * %vreg81<def> = ADDI %zero, 1; GR32Bit:%vreg81
4B		  * WRITECM %vreg80, %vreg81, 60; GR32Bit:%vreg80,%vreg81
4B		  * %vreg82<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg82
4B		  * %vreg83<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg83
4B		  * %vreg84<def> = SRLI %vreg83, 12; GR32Bit:%vreg84,%vreg83
4B		  * %vreg85<def> = ADD %vreg82, %vreg84; GR32Bit:%vreg85,%vreg82,%vreg84
4B		  * %vreg86<def> = ADDI %zero, 16; GR32Bit:%vreg86
4B		  * %vreg87<def> = SRLI %vreg80, 22; GR32Bit:%vreg87,%vreg80
4B		  * %vreg88<def> = SRLI %vreg80, 12; GR32Bit:%vreg88,%vreg80
4B		  * %vreg89<def> = ANDI %vreg88, 15; GR32Bit:%vreg89,%vreg88
4B		  * %vreg90<def> = SRLI %vreg80, 6; GR32Bit:%vreg90,%vreg80
4B		  * %vreg91<def> = ANDI %vreg90, 63; GR32Bit:%vreg91,%vreg90
4B		  * %vreg92<def> = ADDI %zero, 832; GR32Bit:%vreg92
4B		  * %vreg93<def> = MUL %vreg87, %vreg92; GR32Bit:%vreg93,%vreg87,%vreg92
4B		  * %vreg94<def> = ADDI %zero, 52; GR32Bit:%vreg94
4B		  * %vreg95<def> = MUL %vreg89, %vreg94; GR32Bit:%vreg95,%vreg89,%vreg94
4B		  * %vreg96<def> = ADD %vreg95, %vreg91; GR32Bit:%vreg96,%vreg95,%vreg91
4B		  * %vreg97<def> = ADD %vreg96, %vreg93; GR32Bit:%vreg97,%vreg96,%vreg93
4B		  * %vreg98<def> = MUL %vreg97, %vreg86; GR32Bit:%vreg98,%vreg97,%vreg86
4B		  * %vreg99<def> = ADD %vreg98, %vreg85; GR32Bit:%vreg99,%vreg98,%vreg85
4B		  * %vreg100<def> = LW %t5, 0; GR32Bit:%vreg100
4B		  * SW %vreg100, %vreg99, 12; GR32Bit:%vreg100,%vreg99
4B		  * %vreg101<def> = LUI 1; GR32Bit:%vreg101
4B		  * WRITEPM %vreg101, %vreg80, 0; GR32Bit:%vreg101,%vreg80
4B		  * END 0
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
444B		%t4<def> = ADD %t5, %zero
444B		  * %vreg25<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg25
444B		  * %vreg26<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg26
444B		  * %vreg27<def> = SRLI %vreg26, 12; GR32Bit:%vreg27,%vreg26
444B		  * %vreg28<def> = ADD %vreg25, %vreg27; GR32Bit:%vreg28,%vreg25,%vreg27
444B		  * %vreg29<def> = ADDI %zero, 16; GR32Bit:%vreg29
444B		  * %vreg30<def> = SRLI %t5, 22; GR32Bit:%vreg30
444B		  * %vreg31<def> = SRLI %t5, 12; GR32Bit:%vreg31
444B		  * %vreg32<def> = ANDI %vreg31, 15; GR32Bit:%vreg32,%vreg31
444B		  * %vreg33<def> = SRLI %t5, 6; GR32Bit:%vreg33
444B		  * %vreg34<def> = ANDI %vreg33, 63; GR32Bit:%vreg34,%vreg33
444B		  * %vreg35<def> = ADDI %zero, 832; GR32Bit:%vreg35
444B		  * %vreg36<def> = MUL %vreg30, %vreg35; GR32Bit:%vreg36,%vreg30,%vreg35
444B		  * %vreg37<def> = ADDI %zero, 52; GR32Bit:%vreg37
444B		  * %vreg38<def> = MUL %vreg32, %vreg37; GR32Bit:%vreg38,%vreg32,%vreg37
444B		  * %vreg39<def> = ADD %vreg38, %vreg34; GR32Bit:%vreg39,%vreg38,%vreg34
444B		  * %vreg40<def> = ADD %vreg39, %vreg36; GR32Bit:%vreg40,%vreg39,%vreg36
444B		  * %vreg41<def> = MUL %vreg40, %vreg29; GR32Bit:%vreg41,%vreg40,%vreg29
444B		  * %t5<def> = ADD %vreg28, %vreg41; GR32Bit:%vreg28,%vreg41
444B		  * %vreg102<def> = LUI 1; GR32Bit:%vreg102
444B		  * %vreg103<def> = DREADPM %vreg102, 0; GR32Bit:%vreg103,%vreg102
444B		  * %vreg104<def> = LUI 1048575; GR32Bit:%vreg104
444B		  * %a5<def> = LUI 4095
444B		  * %a5<def> = SRLI %a5<internal>, 12
444B		  * ADD %vreg104, %vreg104, %a5; GR32Bit:%vreg104
444B		  * SYNC %vreg103, %vreg104, 60; GR32Bit:%vreg103,%vreg104
444B		  * END 0
444B		  * %zero<def> = ADDI %zero, 0
444B		  * %zero<def> = ADDI %zero, 0
652B		%t4<def> = ADD %t5, %zero
652B		  * %vreg44<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg44
652B		  * %vreg45<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg45
652B		  * %vreg46<def> = SRLI %vreg45, 12; GR32Bit:%vreg46,%vreg45
652B		  * %vreg47<def> = ADD %vreg44, %vreg46; GR32Bit:%vreg47,%vreg44,%vreg46
652B		  * %vreg48<def> = ADDI %zero, 16; GR32Bit:%vreg48
652B		  * %vreg49<def> = SRLI %t5, 22; GR32Bit:%vreg49
652B		  * %vreg50<def> = SRLI %t5, 12; GR32Bit:%vreg50
652B		  * %vreg51<def> = ANDI %vreg50, 15; GR32Bit:%vreg51,%vreg50
652B		  * %vreg52<def> = SRLI %t5, 6; GR32Bit:%vreg52
652B		  * %vreg53<def> = ANDI %vreg52, 63; GR32Bit:%vreg53,%vreg52
652B		  * %vreg54<def> = ADDI %zero, 832; GR32Bit:%vreg54
652B		  * %vreg55<def> = MUL %vreg49, %vreg54; GR32Bit:%vreg55,%vreg49,%vreg54
652B		  * %vreg56<def> = ADDI %zero, 52; GR32Bit:%vreg56
652B		  * %vreg57<def> = MUL %vreg51, %vreg56; GR32Bit:%vreg57,%vreg51,%vreg56
652B		  * %vreg58<def> = ADD %vreg57, %vreg53; GR32Bit:%vreg58,%vreg57,%vreg53
652B		  * %vreg59<def> = ADD %vreg58, %vreg55; GR32Bit:%vreg59,%vreg58,%vreg55
652B		  * %vreg60<def> = MUL %vreg59, %vreg48; GR32Bit:%vreg60,%vreg59,%vreg48
652B		  * %t5<def> = ADD %vreg47, %vreg60; GR32Bit:%vreg47,%vreg60
652B		  * END 0
652B		  * %zero<def> = ADDI %zero, 0
652B		  * %zero<def> = ADDI %zero, 0
828B		%t4<def> = ADD %t5, %zero
828B		  * %vreg63<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg63
828B		  * %vreg64<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg64
828B		  * %vreg65<def> = SRLI %vreg64, 12; GR32Bit:%vreg65,%vreg64
828B		  * %vreg66<def> = ADD %vreg63, %vreg65; GR32Bit:%vreg66,%vreg63,%vreg65
828B		  * %vreg67<def> = ADDI %zero, 16; GR32Bit:%vreg67
828B		  * %vreg68<def> = SRLI %t5, 22; GR32Bit:%vreg68
828B		  * %vreg69<def> = SRLI %t5, 12; GR32Bit:%vreg69
828B		  * %vreg70<def> = ANDI %vreg69, 15; GR32Bit:%vreg70,%vreg69
828B		  * %vreg71<def> = SRLI %t5, 6; GR32Bit:%vreg71
828B		  * %vreg72<def> = ANDI %vreg71, 63; GR32Bit:%vreg72,%vreg71
828B		  * %vreg73<def> = ADDI %zero, 832; GR32Bit:%vreg73
828B		  * %vreg74<def> = MUL %vreg68, %vreg73; GR32Bit:%vreg74,%vreg68,%vreg73
828B		  * %vreg75<def> = ADDI %zero, 52; GR32Bit:%vreg75
828B		  * %vreg76<def> = MUL %vreg70, %vreg75; GR32Bit:%vreg76,%vreg70,%vreg75
828B		  * %vreg77<def> = ADD %vreg76, %vreg72; GR32Bit:%vreg77,%vreg76,%vreg72
828B		  * %vreg78<def> = ADD %vreg77, %vreg74; GR32Bit:%vreg78,%vreg77,%vreg74
828B		  * %vreg79<def> = MUL %vreg78, %vreg67; GR32Bit:%vreg79,%vreg78,%vreg67
828B		  * %t5<def> = ADD %vreg66, %vreg79; GR32Bit:%vreg66,%vreg79
828B		  * END 0
828B		  * %zero<def> = ADDI %zero, 0
828B		  * %zero<def> = ADDI %zero, 0

# End machine code for function redefine_start1.

********** COMPUTING LIVE DEBUG VARIABLES: redefine_start1 **********
********** DEBUG VARIABLES **********
********** Compute Spill Weights **********
********** Function: redefine_start1
********** GREEDY REGISTER ALLOCATION **********
********** Function: redefine_start1

selectOrSplit GR32Bit:%vreg103 [604r,1324B:0)  0@604r
AllocationOrder(GR32Bit) = [ %t0 %t1 %t2 %fp %a0 %a1 %a2 %a3 %a4 %a6 %a7 %t3 %ra %sp %gp %tp %s0 %s1 %s2 %s3 %s4 %s5 %s6 %s7 %s8 %s9 %s10 %s11 ]
assigning %vreg103 to %t0: t0

selectOrSplit GR32Bit:%vreg80 [220r,412r:0)  0@220r
assigning %vreg80 to %t0: t0

selectOrSplit GR32Bit:%vreg9 [48r,160r:0)  0@48r
assigning %vreg9 to %t0: t0

selectOrSplit GR32Bit:%vreg28 [476r,588r:0)  0@476r
assigning %vreg28 to %t0: t0

selectOrSplit GR32Bit:%vreg47 [684r,796r:0)  0@684r
assigning %vreg47 to %t1: t1

selectOrSplit GR32Bit:%vreg66 [860r,972r:0)  0@860r
assigning %vreg66 to %t1: t1

selectOrSplit GR32Bit:%vreg85 [268r,380r:0)  0@268r
assigning %vreg85 to %t1: t1

selectOrSplit GR32Bit:%vreg10 [56r,152r:0)  0@56r
assigning %vreg10 to %t1: t1

selectOrSplit GR32Bit:%vreg29 [484r,580r:0)  0@484r
assigning %vreg29 to %t1: t1

selectOrSplit GR32Bit:%vreg48 [692r,788r:0)  0@692r
assigning %vreg48 to %t2: t2

selectOrSplit GR32Bit:%vreg67 [868r,964r:0)  0@868r
assigning %vreg67 to %t2: t2

selectOrSplit GR32Bit:%vreg86 [276r,372r:0)  0@276r
assigning %vreg86 to %t2: t2

selectOrSplit GR32Bit:%vreg11 [64r,112r:0)  0@64r
assigning %vreg11 to %t2: t2

selectOrSplit GR32Bit:%vreg13 [80r,128r:0)  0@80r
assigning %vreg13 to %fp: fp

selectOrSplit GR32Bit:%vreg30 [492r,540r:0)  0@492r
assigning %vreg30 to %t2: t2

selectOrSplit GR32Bit:%vreg32 [508r,556r:0)  0@508r
assigning %vreg32 to %fp: fp

selectOrSplit GR32Bit:%vreg49 [700r,748r:0)  0@700r
assigning %vreg49 to %fp: fp

selectOrSplit GR32Bit:%vreg51 [716r,764r:0)  0@716r
assigning %vreg51 to %a0: a0

selectOrSplit GR32Bit:%vreg68 [876r,924r:0)  0@876r
assigning %vreg68 to %fp: fp

selectOrSplit GR32Bit:%vreg70 [892r,940r:0)  0@892r
assigning %vreg70 to %a0: a0

selectOrSplit GR32Bit:%vreg87 [284r,332r:0)  0@284r
assigning %vreg87 to %fp: fp

selectOrSplit GR32Bit:%vreg89 [300r,348r:0)  0@300r
assigning %vreg89 to %a0: a0

selectOrSplit GR32Bit:%vreg15 [96r,136r:0)  0@96r
assigning %vreg15 to %a0: a0

selectOrSplit GR32Bit:%vreg34 [524r,564r:0)  0@524r
assigning %vreg34 to %a0: a0

selectOrSplit GR32Bit:%vreg53 [732r,772r:0)  0@732r
assigning %vreg53 to %a1: a1

selectOrSplit GR32Bit:%vreg72 [908r,948r:0)  0@908r
assigning %vreg72 to %a1: a1

selectOrSplit GR32Bit:%vreg91 [316r,356r:0)  0@316r
assigning %vreg91 to %a1: a1

selectOrSplit GR32Bit:%vreg2 [168r,204r:0)  0@168r
assigning %vreg2 to %t0: t0

selectOrSplit GR32Bit:%vreg17 [112r,144r:0)  0@112r
assigning %vreg17 to %t2: t2

selectOrSplit GR32Bit:%vreg36 [540r,572r:0)  0@540r
assigning %vreg36 to %t2: t2

selectOrSplit GR32Bit:%vreg55 [748r,780r:0)  0@748r
assigning %vreg55 to %fp: fp

selectOrSplit GR32Bit:%vreg74 [924r,956r:0)  0@924r
assigning %vreg74 to %fp: fp

selectOrSplit GR32Bit:%vreg93 [332r,364r:0)  0@332r
assigning %vreg93 to %fp: fp

selectOrSplit GR32Bit:%vreg0 [188r,212r:0)  0@188r
assigning %vreg0 to %t1: t1

selectOrSplit GR32Bit:%vreg6 [24r,48r:0)  0@24r
assigning %vreg6 to %t0: t0

selectOrSplit GR32Bit:%vreg25 [452r,476r:0)  0@452r
assigning %vreg25 to %t0: t0

selectOrSplit GR32Bit:%vreg44 [660r,684r:0)  0@660r
assigning %vreg44 to %t1: t1

selectOrSplit GR32Bit:%vreg63 [836r,860r:0)  0@836r
assigning %vreg63 to %t1: t1

selectOrSplit GR32Bit:%vreg82 [244r,268r:0)  0@244r
assigning %vreg82 to %t1: t1

selectOrSplit GR32Bit:%vreg99 [380r,396r:0)  0@380r
assigning %vreg99 to %t1: t1

selectOrSplit GR32Bit:%vreg1 [196r,204r:0)  0@196r
assigning %vreg1 to %t2: t2

selectOrSplit GR32Bit:%vreg3 [204r,212r:0)  0@204r
assigning %vreg3 to %t0: t0

selectOrSplit GR32Bit:%vreg7 [32r,40r:0)  0@32r
assigning %vreg7 to %t1: t1

selectOrSplit GR32Bit:%vreg8 [40r,48r:0)  0@40r
assigning %vreg8 to %t1: t1

selectOrSplit GR32Bit:%vreg12 [72r,80r:0)  0@72r
assigning %vreg12 to %fp: fp

selectOrSplit GR32Bit:%vreg14 [88r,96r:0)  0@88r
assigning %vreg14 to %a0: a0

selectOrSplit GR32Bit:%vreg16 [104r,112r:0)  0@104r
assigning %vreg16 to %a1: a1

selectOrSplit GR32Bit:%vreg18 [120r,128r:0)  0@120r
assigning %vreg18 to %a1: a1

selectOrSplit GR32Bit:%vreg19 [128r,136r:0)  0@128r
assigning %vreg19 to %fp: fp

selectOrSplit GR32Bit:%vreg20 [136r,144r:0)  0@136r
assigning %vreg20 to %fp: fp

selectOrSplit GR32Bit:%vreg21 [144r,152r:0)  0@144r
assigning %vreg21 to %t2: t2

selectOrSplit GR32Bit:%vreg22 [152r,160r:0)  0@152r
assigning %vreg22 to %t1: t1

selectOrSplit GR32Bit:%vreg26 [460r,468r:0)  0@460r
assigning %vreg26 to %t1: t1

selectOrSplit GR32Bit:%vreg27 [468r,476r:0)  0@468r
assigning %vreg27 to %t1: t1

selectOrSplit GR32Bit:%vreg31 [500r,508r:0)  0@500r
assigning %vreg31 to %fp: fp

selectOrSplit GR32Bit:%vreg33 [516r,524r:0)  0@516r
assigning %vreg33 to %a0: a0

selectOrSplit GR32Bit:%vreg35 [532r,540r:0)  0@532r
assigning %vreg35 to %a1: a1

selectOrSplit GR32Bit:%vreg37 [548r,556r:0)  0@548r
assigning %vreg37 to %a1: a1

selectOrSplit GR32Bit:%vreg38 [556r,564r:0)  0@556r
assigning %vreg38 to %fp: fp

selectOrSplit GR32Bit:%vreg39 [564r,572r:0)  0@564r
assigning %vreg39 to %fp: fp

selectOrSplit GR32Bit:%vreg40 [572r,580r:0)  0@572r
assigning %vreg40 to %t2: t2

selectOrSplit GR32Bit:%vreg41 [580r,588r:0)  0@580r
assigning %vreg41 to %t1: t1

selectOrSplit GR32Bit:%vreg45 [668r,676r:0)  0@668r
assigning %vreg45 to %t2: t2

selectOrSplit GR32Bit:%vreg46 [676r,684r:0)  0@676r
assigning %vreg46 to %t2: t2

selectOrSplit GR32Bit:%vreg50 [708r,716r:0)  0@708r
assigning %vreg50 to %a0: a0

selectOrSplit GR32Bit:%vreg52 [724r,732r:0)  0@724r
assigning %vreg52 to %a1: a1

selectOrSplit GR32Bit:%vreg54 [740r,748r:0)  0@740r
assigning %vreg54 to %a2: a2

selectOrSplit GR32Bit:%vreg56 [756r,764r:0)  0@756r
assigning %vreg56 to %a2: a2

selectOrSplit GR32Bit:%vreg57 [764r,772r:0)  0@764r
assigning %vreg57 to %a0: a0

selectOrSplit GR32Bit:%vreg58 [772r,780r:0)  0@772r
assigning %vreg58 to %a0: a0

selectOrSplit GR32Bit:%vreg59 [780r,788r:0)  0@780r
assigning %vreg59 to %fp: fp

selectOrSplit GR32Bit:%vreg60 [788r,796r:0)  0@788r
assigning %vreg60 to %t2: t2

selectOrSplit GR32Bit:%vreg64 [844r,852r:0)  0@844r
assigning %vreg64 to %t2: t2

selectOrSplit GR32Bit:%vreg65 [852r,860r:0)  0@852r
assigning %vreg65 to %t2: t2

selectOrSplit GR32Bit:%vreg69 [884r,892r:0)  0@884r
assigning %vreg69 to %a0: a0

selectOrSplit GR32Bit:%vreg71 [900r,908r:0)  0@900r
assigning %vreg71 to %a1: a1

selectOrSplit GR32Bit:%vreg73 [916r,924r:0)  0@916r
assigning %vreg73 to %a2: a2

selectOrSplit GR32Bit:%vreg75 [932r,940r:0)  0@932r
assigning %vreg75 to %a2: a2

selectOrSplit GR32Bit:%vreg76 [940r,948r:0)  0@940r
assigning %vreg76 to %a0: a0

selectOrSplit GR32Bit:%vreg77 [948r,956r:0)  0@948r
assigning %vreg77 to %a0: a0

selectOrSplit GR32Bit:%vreg78 [956r,964r:0)  0@956r
assigning %vreg78 to %fp: fp

selectOrSplit GR32Bit:%vreg79 [964r,972r:0)  0@964r
assigning %vreg79 to %t2: t2

selectOrSplit GR32Bit:%vreg81 [228r,236r:0)  0@228r
assigning %vreg81 to %t1: t1

selectOrSplit GR32Bit:%vreg83 [252r,260r:0)  0@252r
assigning %vreg83 to %t2: t2

selectOrSplit GR32Bit:%vreg84 [260r,268r:0)  0@260r
assigning %vreg84 to %t2: t2

selectOrSplit GR32Bit:%vreg88 [292r,300r:0)  0@292r
assigning %vreg88 to %a0: a0

selectOrSplit GR32Bit:%vreg90 [308r,316r:0)  0@308r
assigning %vreg90 to %a1: a1

selectOrSplit GR32Bit:%vreg92 [324r,332r:0)  0@324r
assigning %vreg92 to %a2: a2

selectOrSplit GR32Bit:%vreg94 [340r,348r:0)  0@340r
assigning %vreg94 to %a2: a2

selectOrSplit GR32Bit:%vreg95 [348r,356r:0)  0@348r
assigning %vreg95 to %a0: a0

selectOrSplit GR32Bit:%vreg96 [356r,364r:0)  0@356r
assigning %vreg96 to %a0: a0

selectOrSplit GR32Bit:%vreg97 [364r,372r:0)  0@364r
assigning %vreg97 to %fp: fp

selectOrSplit GR32Bit:%vreg98 [372r,380r:0)  0@372r
assigning %vreg98 to %t2: t2

selectOrSplit GR32Bit:%vreg100 [388r,396r:0)  0@388r
assigning %vreg100 to %t2: t2

selectOrSplit GR32Bit:%vreg101 [404r,412r:0)  0@404r
assigning %vreg101 to %t1: t1

selectOrSplit GR32Bit:%vreg102 [596r,604r:0)  0@596r
assigning %vreg102 to %t0: t0

selectOrSplit GR32Bit:%vreg104 [612r,620r:0)  0@612r
assigning %vreg104 to %t1: t1
********** REWRITE VIRTUAL REGISTERS **********
********** Function: redefine_start1
********** REGISTER MAP **********
[%vreg0 -> %t1] GR32Bit
[%vreg1 -> %t2] GR32Bit
[%vreg2 -> %t0] GR32Bit
[%vreg3 -> %t0] GR32Bit
[%vreg6 -> %t0] GR32Bit
[%vreg7 -> %t1] GR32Bit
[%vreg8 -> %t1] GR32Bit
[%vreg9 -> %t0] GR32Bit
[%vreg10 -> %t1] GR32Bit
[%vreg11 -> %t2] GR32Bit
[%vreg12 -> %fp] GR32Bit
[%vreg13 -> %fp] GR32Bit
[%vreg14 -> %a0] GR32Bit
[%vreg15 -> %a0] GR32Bit
[%vreg16 -> %a1] GR32Bit
[%vreg17 -> %t2] GR32Bit
[%vreg18 -> %a1] GR32Bit
[%vreg19 -> %fp] GR32Bit
[%vreg20 -> %fp] GR32Bit
[%vreg21 -> %t2] GR32Bit
[%vreg22 -> %t1] GR32Bit
[%vreg25 -> %t0] GR32Bit
[%vreg26 -> %t1] GR32Bit
[%vreg27 -> %t1] GR32Bit
[%vreg28 -> %t0] GR32Bit
[%vreg29 -> %t1] GR32Bit
[%vreg30 -> %t2] GR32Bit
[%vreg31 -> %fp] GR32Bit
[%vreg32 -> %fp] GR32Bit
[%vreg33 -> %a0] GR32Bit
[%vreg34 -> %a0] GR32Bit
[%vreg35 -> %a1] GR32Bit
[%vreg36 -> %t2] GR32Bit
[%vreg37 -> %a1] GR32Bit
[%vreg38 -> %fp] GR32Bit
[%vreg39 -> %fp] GR32Bit
[%vreg40 -> %t2] GR32Bit
[%vreg41 -> %t1] GR32Bit
[%vreg44 -> %t1] GR32Bit
[%vreg45 -> %t2] GR32Bit
[%vreg46 -> %t2] GR32Bit
[%vreg47 -> %t1] GR32Bit
[%vreg48 -> %t2] GR32Bit
[%vreg49 -> %fp] GR32Bit
[%vreg50 -> %a0] GR32Bit
[%vreg51 -> %a0] GR32Bit
[%vreg52 -> %a1] GR32Bit
[%vreg53 -> %a1] GR32Bit
[%vreg54 -> %a2] GR32Bit
[%vreg55 -> %fp] GR32Bit
[%vreg56 -> %a2] GR32Bit
[%vreg57 -> %a0] GR32Bit
[%vreg58 -> %a0] GR32Bit
[%vreg59 -> %fp] GR32Bit
[%vreg60 -> %t2] GR32Bit
[%vreg63 -> %t1] GR32Bit
[%vreg64 -> %t2] GR32Bit
[%vreg65 -> %t2] GR32Bit
[%vreg66 -> %t1] GR32Bit
[%vreg67 -> %t2] GR32Bit
[%vreg68 -> %fp] GR32Bit
[%vreg69 -> %a0] GR32Bit
[%vreg70 -> %a0] GR32Bit
[%vreg71 -> %a1] GR32Bit
[%vreg72 -> %a1] GR32Bit
[%vreg73 -> %a2] GR32Bit
[%vreg74 -> %fp] GR32Bit
[%vreg75 -> %a2] GR32Bit
[%vreg76 -> %a0] GR32Bit
[%vreg77 -> %a0] GR32Bit
[%vreg78 -> %fp] GR32Bit
[%vreg79 -> %t2] GR32Bit
[%vreg80 -> %t0] GR32Bit
[%vreg81 -> %t1] GR32Bit
[%vreg82 -> %t1] GR32Bit
[%vreg83 -> %t2] GR32Bit
[%vreg84 -> %t2] GR32Bit
[%vreg85 -> %t1] GR32Bit
[%vreg86 -> %t2] GR32Bit
[%vreg87 -> %fp] GR32Bit
[%vreg88 -> %a0] GR32Bit
[%vreg89 -> %a0] GR32Bit
[%vreg90 -> %a1] GR32Bit
[%vreg91 -> %a1] GR32Bit
[%vreg92 -> %a2] GR32Bit
[%vreg93 -> %fp] GR32Bit
[%vreg94 -> %a2] GR32Bit
[%vreg95 -> %a0] GR32Bit
[%vreg96 -> %a0] GR32Bit
[%vreg97 -> %fp] GR32Bit
[%vreg98 -> %t2] GR32Bit
[%vreg99 -> %t1] GR32Bit
[%vreg100 -> %t2] GR32Bit
[%vreg101 -> %t1] GR32Bit
[%vreg102 -> %t0] GR32Bit
[%vreg103 -> %t0] GR32Bit
[%vreg104 -> %t1] GR32Bit

0B	BB#0: derived from LLVM BB %redefine_start1.entry
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg6<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg6
4B		  * %vreg7<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg7
4B		  * %vreg8<def> = SRLI %vreg7<kill>, 12; GR32Bit:%vreg8,%vreg7
4B		  * %vreg9<def> = ADD %vreg6<kill>, %vreg8<kill>; GR32Bit:%vreg9,%vreg6,%vreg8
4B		  * %vreg10<def> = ADDI %zero, 16; GR32Bit:%vreg10
4B		  * %vreg11<def> = SRLI %t5, 22; GR32Bit:%vreg11
4B		  * %vreg12<def> = SRLI %t5, 12; GR32Bit:%vreg12
4B		  * %vreg13<def> = ANDI %vreg12<kill>, 15; GR32Bit:%vreg13,%vreg12
4B		  * %vreg14<def> = SRLI %t5, 6; GR32Bit:%vreg14
4B		  * %vreg15<def> = ANDI %vreg14<kill>, 63; GR32Bit:%vreg15,%vreg14
4B		  * %vreg16<def> = ADDI %zero, 832; GR32Bit:%vreg16
4B		  * %vreg17<def> = MUL %vreg11<kill>, %vreg16<kill>; GR32Bit:%vreg17,%vreg11,%vreg16
4B		  * %vreg18<def> = ADDI %zero, 52; GR32Bit:%vreg18
4B		  * %vreg19<def> = MUL %vreg13<kill>, %vreg18<kill>; GR32Bit:%vreg19,%vreg13,%vreg18
4B		  * %vreg20<def> = ADD %vreg19<kill>, %vreg15<kill>; GR32Bit:%vreg20,%vreg19,%vreg15
4B		  * %vreg21<def> = ADD %vreg20<kill>, %vreg17<kill>; GR32Bit:%vreg21,%vreg20,%vreg17
4B		  * %vreg22<def> = MUL %vreg21<kill>, %vreg10<kill>; GR32Bit:%vreg22,%vreg21,%vreg10
4B		  * %t5<def> = ADD %vreg9<kill>, %vreg22<kill>; GR32Bit:%vreg9,%vreg22
4B		  * %vreg2<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg2
4B		  * SRLI %vreg2, %vreg2, 12; GR32Bit:%vreg2
4B		  * %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
4B		  * %vreg1<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg1
4B		  * %vreg3<def> = ADD %vreg2<kill>, %vreg1<kill>; GR32Bit:%vreg3,%vreg2,%vreg1
4B		  * SW %vreg3<kill>, %vreg0<kill>, 0; mem:ST4[%0] GR32Bit:%vreg3,%vreg0
4B		  * %vreg80<def> = ADDI %zero, 64; GR32Bit:%vreg80
4B		  * %vreg81<def> = ADDI %zero, 1; GR32Bit:%vreg81
4B		  * WRITECM %vreg80, %vreg81<kill>, 60; GR32Bit:%vreg80,%vreg81
4B		  * %vreg82<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg82
4B		  * %vreg83<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg83
4B		  * %vreg84<def> = SRLI %vreg83<kill>, 12; GR32Bit:%vreg84,%vreg83
4B		  * %vreg85<def> = ADD %vreg82<kill>, %vreg84<kill>; GR32Bit:%vreg85,%vreg82,%vreg84
4B		  * %vreg86<def> = ADDI %zero, 16; GR32Bit:%vreg86
4B		  * %vreg87<def> = SRLI %vreg80, 22; GR32Bit:%vreg87,%vreg80
4B		  * %vreg88<def> = SRLI %vreg80, 12; GR32Bit:%vreg88,%vreg80
4B		  * %vreg89<def> = ANDI %vreg88<kill>, 15; GR32Bit:%vreg89,%vreg88
4B		  * %vreg90<def> = SRLI %vreg80, 6; GR32Bit:%vreg90,%vreg80
4B		  * %vreg91<def> = ANDI %vreg90<kill>, 63; GR32Bit:%vreg91,%vreg90
4B		  * %vreg92<def> = ADDI %zero, 832; GR32Bit:%vreg92
4B		  * %vreg93<def> = MUL %vreg87<kill>, %vreg92<kill>; GR32Bit:%vreg93,%vreg87,%vreg92
4B		  * %vreg94<def> = ADDI %zero, 52; GR32Bit:%vreg94
4B		  * %vreg95<def> = MUL %vreg89<kill>, %vreg94<kill>; GR32Bit:%vreg95,%vreg89,%vreg94
4B		  * %vreg96<def> = ADD %vreg95<kill>, %vreg91<kill>; GR32Bit:%vreg96,%vreg95,%vreg91
4B		  * %vreg97<def> = ADD %vreg96<kill>, %vreg93<kill>; GR32Bit:%vreg97,%vreg96,%vreg93
4B		  * %vreg98<def> = MUL %vreg97<kill>, %vreg86<kill>; GR32Bit:%vreg98,%vreg97,%vreg86
4B		  * %vreg99<def> = ADD %vreg98<kill>, %vreg85<kill>; GR32Bit:%vreg99,%vreg98,%vreg85
4B		  * %vreg100<def> = LW %t5, 0; GR32Bit:%vreg100
4B		  * SW %vreg100<kill>, %vreg99<kill>, 12; GR32Bit:%vreg100,%vreg99
4B		  * %vreg101<def> = LUI 1; GR32Bit:%vreg101
4B		  * WRITEPM %vreg101<kill>, %vreg80<kill>, 0; GR32Bit:%vreg101,%vreg80
4B		  * END 0
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
444B		%t4<def> = ADD %t5, %zero
444B		  * %vreg25<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg25
444B		  * %vreg26<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg26
444B		  * %vreg27<def> = SRLI %vreg26<kill>, 12; GR32Bit:%vreg27,%vreg26
444B		  * %vreg28<def> = ADD %vreg25<kill>, %vreg27<kill>; GR32Bit:%vreg28,%vreg25,%vreg27
444B		  * %vreg29<def> = ADDI %zero, 16; GR32Bit:%vreg29
444B		  * %vreg30<def> = SRLI %t5, 22; GR32Bit:%vreg30
444B		  * %vreg31<def> = SRLI %t5, 12; GR32Bit:%vreg31
444B		  * %vreg32<def> = ANDI %vreg31<kill>, 15; GR32Bit:%vreg32,%vreg31
444B		  * %vreg33<def> = SRLI %t5, 6; GR32Bit:%vreg33
444B		  * %vreg34<def> = ANDI %vreg33<kill>, 63; GR32Bit:%vreg34,%vreg33
444B		  * %vreg35<def> = ADDI %zero, 832; GR32Bit:%vreg35
444B		  * %vreg36<def> = MUL %vreg30<kill>, %vreg35<kill>; GR32Bit:%vreg36,%vreg30,%vreg35
444B		  * %vreg37<def> = ADDI %zero, 52; GR32Bit:%vreg37
444B		  * %vreg38<def> = MUL %vreg32<kill>, %vreg37<kill>; GR32Bit:%vreg38,%vreg32,%vreg37
444B		  * %vreg39<def> = ADD %vreg38<kill>, %vreg34<kill>; GR32Bit:%vreg39,%vreg38,%vreg34
444B		  * %vreg40<def> = ADD %vreg39<kill>, %vreg36<kill>; GR32Bit:%vreg40,%vreg39,%vreg36
444B		  * %vreg41<def> = MUL %vreg40<kill>, %vreg29<kill>; GR32Bit:%vreg41,%vreg40,%vreg29
444B		  * %t5<def> = ADD %vreg28<kill>, %vreg41<kill>; GR32Bit:%vreg28,%vreg41
444B		  * %vreg102<def> = LUI 1; GR32Bit:%vreg102
444B		  * %vreg103<def> = DREADPM %vreg102<kill>, 0; GR32Bit:%vreg103,%vreg102
444B		  * %vreg104<def> = LUI 1048575; GR32Bit:%vreg104
444B		  * %a5<def> = LUI 4095
444B		  * %a5<def> = SRLI %a5<internal>, 12
444B		  * ADD %vreg104, %vreg104, %a5; GR32Bit:%vreg104
444B		  * SYNC %vreg103, %vreg104<kill>, 60; GR32Bit:%vreg103,%vreg104
444B		  * END 0
444B		  * %zero<def> = ADDI %zero, 0
444B		  * %zero<def> = ADDI %zero, 0
652B		%t4<def> = ADD %t5, %zero
652B		  * %vreg44<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg44
652B		  * %vreg45<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg45
652B		  * %vreg46<def> = SRLI %vreg45<kill>, 12; GR32Bit:%vreg46,%vreg45
652B		  * %vreg47<def> = ADD %vreg44<kill>, %vreg46<kill>; GR32Bit:%vreg47,%vreg44,%vreg46
652B		  * %vreg48<def> = ADDI %zero, 16; GR32Bit:%vreg48
652B		  * %vreg49<def> = SRLI %t5, 22; GR32Bit:%vreg49
652B		  * %vreg50<def> = SRLI %t5, 12; GR32Bit:%vreg50
652B		  * %vreg51<def> = ANDI %vreg50<kill>, 15; GR32Bit:%vreg51,%vreg50
652B		  * %vreg52<def> = SRLI %t5, 6; GR32Bit:%vreg52
652B		  * %vreg53<def> = ANDI %vreg52<kill>, 63; GR32Bit:%vreg53,%vreg52
652B		  * %vreg54<def> = ADDI %zero, 832; GR32Bit:%vreg54
652B		  * %vreg55<def> = MUL %vreg49<kill>, %vreg54<kill>; GR32Bit:%vreg55,%vreg49,%vreg54
652B		  * %vreg56<def> = ADDI %zero, 52; GR32Bit:%vreg56
652B		  * %vreg57<def> = MUL %vreg51<kill>, %vreg56<kill>; GR32Bit:%vreg57,%vreg51,%vreg56
652B		  * %vreg58<def> = ADD %vreg57<kill>, %vreg53<kill>; GR32Bit:%vreg58,%vreg57,%vreg53
652B		  * %vreg59<def> = ADD %vreg58<kill>, %vreg55<kill>; GR32Bit:%vreg59,%vreg58,%vreg55
652B		  * %vreg60<def> = MUL %vreg59<kill>, %vreg48<kill>; GR32Bit:%vreg60,%vreg59,%vreg48
652B		  * %t5<def> = ADD %vreg47<kill>, %vreg60<kill>; GR32Bit:%vreg47,%vreg60
652B		  * END 0
652B		  * %zero<def> = ADDI %zero, 0
652B		  * %zero<def> = ADDI %zero, 0
828B		%t4<def> = ADD %t5, %zero
828B		  * %vreg63<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg63
828B		  * %vreg64<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg64
828B		  * %vreg65<def> = SRLI %vreg64<kill>, 12; GR32Bit:%vreg65,%vreg64
828B		  * %vreg66<def> = ADD %vreg63<kill>, %vreg65<kill>; GR32Bit:%vreg66,%vreg63,%vreg65
828B		  * %vreg67<def> = ADDI %zero, 16; GR32Bit:%vreg67
828B		  * %vreg68<def> = SRLI %t5, 22; GR32Bit:%vreg68
828B		  * %vreg69<def> = SRLI %t5, 12; GR32Bit:%vreg69
828B		  * %vreg70<def> = ANDI %vreg69<kill>, 15; GR32Bit:%vreg70,%vreg69
828B		  * %vreg71<def> = SRLI %t5, 6; GR32Bit:%vreg71
828B		  * %vreg72<def> = ANDI %vreg71<kill>, 63; GR32Bit:%vreg72,%vreg71
828B		  * %vreg73<def> = ADDI %zero, 832; GR32Bit:%vreg73
828B		  * %vreg74<def> = MUL %vreg68<kill>, %vreg73<kill>; GR32Bit:%vreg74,%vreg68,%vreg73
828B		  * %vreg75<def> = ADDI %zero, 52; GR32Bit:%vreg75
828B		  * %vreg76<def> = MUL %vreg70<kill>, %vreg75<kill>; GR32Bit:%vreg76,%vreg70,%vreg75
828B		  * %vreg77<def> = ADD %vreg76<kill>, %vreg72<kill>; GR32Bit:%vreg77,%vreg76,%vreg72
828B		  * %vreg78<def> = ADD %vreg77<kill>, %vreg74<kill>; GR32Bit:%vreg78,%vreg77,%vreg74
828B		  * %vreg79<def> = MUL %vreg78<kill>, %vreg67<kill>; GR32Bit:%vreg79,%vreg78,%vreg67
828B		  * %t5<def> = ADD %vreg66<kill>, %vreg79<kill>; GR32Bit:%vreg66,%vreg79
828B		  * END 0
828B		  * %zero<def> = ADDI %zero, 0
828B		  * %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 16
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = LUI <MCSym="%lo("ga#0")">
> SRLI %t0, %t0, 12
> %t1<def> = ADDI %t5, <fi#0>
> %t2<def> = LUI <ga:@redefine_in_a>[TF=2]
> %t0<def> = ADD %t0<kill>, %t2<kill>
> SW %t0<kill>, %t1<kill>, 0; mem:ST4[%0]
> %t0<def> = ADDI %zero, 64
> %t1<def> = ADDI %zero, 1
> WRITECM %t0, %t1<kill>, 60
> %t1<def> = LUI <MCSym="%hi("ga#512")">
> %t2<def> = LUI <MCSym="%lo("ga#512")">
> %t2<def> = SRLI %t2<kill>, 12
> %t1<def> = ADD %t1<kill>, %t2<kill>
> %t2<def> = ADDI %zero, 16
> %fp<def> = SRLI %t0, 22
> %a0<def> = SRLI %t0, 12
> %a0<def> = ANDI %a0<kill>, 15
> %a1<def> = SRLI %t0, 6
> %a1<def> = ANDI %a1<kill>, 63
> %a2<def> = ADDI %zero, 832
> %fp<def> = MUL %fp<kill>, %a2<kill>
> %a2<def> = ADDI %zero, 52
> %a0<def> = MUL %a0<kill>, %a2<kill>
> %a0<def> = ADD %a0<kill>, %a1<kill>
> %fp<def> = ADD %a0<kill>, %fp<kill>
> %t2<def> = MUL %fp<kill>, %t2<kill>
> %t1<def> = ADD %t2<kill>, %t1<kill>
> %t2<def> = LW %t5, 0
> SW %t2<kill>, %t1<kill>, 12
> %t1<def> = LUI 1
> WRITEPM %t1<kill>, %t0<kill>, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 16
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = LUI 1
> %t0<def> = DREADPM %t0<kill>, 0
> %t1<def> = LUI 1048575
> %a5<def> = LUI 4095
> %a5<def> = SRLI %a5<internal>, 12
> ADD %t1, %t1, %a5
> SYNC %t0, %t1<kill>, 60
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t1<def> = LUI <MCSym="%hi("ga#512")">
> %t2<def> = LUI <MCSym="%lo("ga#512")">
> %t2<def> = SRLI %t2<kill>, 12
> %t1<def> = ADD %t1<kill>, %t2<kill>
> %t2<def> = ADDI %zero, 16
> %fp<def> = SRLI %t5, 22
> %a0<def> = SRLI %t5, 12
> %a0<def> = ANDI %a0<kill>, 15
> %a1<def> = SRLI %t5, 6
> %a1<def> = ANDI %a1<kill>, 63
> %a2<def> = ADDI %zero, 832
> %fp<def> = MUL %fp<kill>, %a2<kill>
> %a2<def> = ADDI %zero, 52
> %a0<def> = MUL %a0<kill>, %a2<kill>
> %a0<def> = ADD %a0<kill>, %a1<kill>
> %fp<def> = ADD %a0<kill>, %fp<kill>
> %t2<def> = MUL %fp<kill>, %t2<kill>
> %t5<def> = ADD %t1<kill>, %t2<kill>
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t1<def> = LUI <MCSym="%hi("ga#512")">
> %t2<def> = LUI <MCSym="%lo("ga#512")">
> %t2<def> = SRLI %t2<kill>, 12
> %t1<def> = ADD %t1<kill>, %t2<kill>
> %t2<def> = ADDI %zero, 16
> %fp<def> = SRLI %t5, 22
> %a0<def> = SRLI %t5, 12
> %a0<def> = ANDI %a0<kill>, 15
> %a1<def> = SRLI %t5, 6
> %a1<def> = ANDI %a1<kill>, 63
> %a2<def> = ADDI %zero, 832
> %fp<def> = MUL %fp<kill>, %a2<kill>
> %a2<def> = ADDI %zero, 52
> %a0<def> = MUL %a0<kill>, %a2<kill>
> %a0<def> = ADD %a0<kill>, %a1<kill>
> %fp<def> = ADD %a0<kill>, %fp<kill>
> %t2<def> = MUL %fp<kill>, %t2<kill>
> %t5<def> = ADD %t1<kill>, %t2<kill>
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
********** EMITTING LIVE DEBUG VARIABLES **********
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: redefine_start1
max x:0, min x:0
max y:0, min y:0
current state of mf:# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %redefine_start1.entry
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 16
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = LUI <MCSym="%lo("ga#0")">
	  * SRLI %t0, %t0, 12
	  * %t1<def> = ADDI %t5, <fi#0>
	  * %t2<def> = LUI <ga:@redefine_in_a>[TF=2]
	  * %t0<def> = ADD %t0<kill>, %t2<kill>
	  * SW %t0<kill>, %t1<kill>, 0; mem:ST4[%0]
	  * %t0<def> = ADDI %zero, 64
	  * %t1<def> = ADDI %zero, 1
	  * WRITECM %t0, %t1<kill>, 60
	  * %t1<def> = LUI <MCSym="%hi("ga#512")">
	  * %t2<def> = LUI <MCSym="%lo("ga#512")">
	  * %t2<def> = SRLI %t2<kill>, 12
	  * %t1<def> = ADD %t1<kill>, %t2<kill>
	  * %t2<def> = ADDI %zero, 16
	  * %fp<def> = SRLI %t0, 22
	  * %a0<def> = SRLI %t0, 12
	  * %a0<def> = ANDI %a0<kill>, 15
	  * %a1<def> = SRLI %t0, 6
	  * %a1<def> = ANDI %a1<kill>, 63
	  * %a2<def> = ADDI %zero, 832
	  * %fp<def> = MUL %fp<kill>, %a2<kill>
	  * %a2<def> = ADDI %zero, 52
	  * %a0<def> = MUL %a0<kill>, %a2<kill>
	  * %a0<def> = ADD %a0<kill>, %a1<kill>
	  * %fp<def> = ADD %a0<kill>, %fp<kill>
	  * %t2<def> = MUL %fp<kill>, %t2<kill>
	  * %t1<def> = ADD %t2<kill>, %t1<kill>
	  * %t2<def> = LW %t5, 0
	  * SW %t2<kill>, %t1<kill>, 12
	  * %t1<def> = LUI 1
	  * WRITEPM %t1<kill>, %t0<kill>, 0
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 16
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = LUI 1
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * %t1<def> = LUI 1048575
	  * %a5<def> = LUI 4095
	  * %a5<def> = SRLI %a5<internal>, 12
	  * ADD %t1, %t1, %a5
	  * SYNC %t0, %t1<kill>, 60
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t1<def> = LUI <MCSym="%hi("ga#512")">
	  * %t2<def> = LUI <MCSym="%lo("ga#512")">
	  * %t2<def> = SRLI %t2<kill>, 12
	  * %t1<def> = ADD %t1<kill>, %t2<kill>
	  * %t2<def> = ADDI %zero, 16
	  * %fp<def> = SRLI %t5, 22
	  * %a0<def> = SRLI %t5, 12
	  * %a0<def> = ANDI %a0<kill>, 15
	  * %a1<def> = SRLI %t5, 6
	  * %a1<def> = ANDI %a1<kill>, 63
	  * %a2<def> = ADDI %zero, 832
	  * %fp<def> = MUL %fp<kill>, %a2<kill>
	  * %a2<def> = ADDI %zero, 52
	  * %a0<def> = MUL %a0<kill>, %a2<kill>
	  * %a0<def> = ADD %a0<kill>, %a1<kill>
	  * %fp<def> = ADD %a0<kill>, %fp<kill>
	  * %t2<def> = MUL %fp<kill>, %t2<kill>
	  * %t5<def> = ADD %t1<kill>, %t2<kill>
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t1<def> = LUI <MCSym="%hi("ga#512")">
	  * %t2<def> = LUI <MCSym="%lo("ga#512")">
	  * %t2<def> = SRLI %t2<kill>, 12
	  * %t1<def> = ADD %t1<kill>, %t2<kill>
	  * %t2<def> = ADDI %zero, 16
	  * %fp<def> = SRLI %t5, 22
	  * %a0<def> = SRLI %t5, 12
	  * %a0<def> = ANDI %a0<kill>, 15
	  * %a1<def> = SRLI %t5, 6
	  * %a1<def> = ANDI %a1<kill>, 63
	  * %a2<def> = ADDI %zero, 832
	  * %fp<def> = MUL %fp<kill>, %a2<kill>
	  * %a2<def> = ADDI %zero, 52
	  * %a0<def> = MUL %a0<kill>, %a2<kill>
	  * %a0<def> = ADD %a0<kill>, %a1<kill>
	  * %fp<def> = ADD %a0<kill>, %fp<kill>
	  * %t2<def> = MUL %fp<kill>, %t2<kill>
	  * %t5<def> = ADD %t1<kill>, %t2<kill>
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0

# End machine code for function redefine_start1.

lowering frame index for func redefine_start1:0 TO VAL:0
CGP: Found      local addrmode: [Base:%1]
CGP: Found      local addrmode: [Base:%1]
CGP: Found      local addrmode: [8 + Base:%2]
CGP: Found      local addrmode: [Base:@redefine_out_b]
CGP: Found      local addrmode: [Base:%1]
CGP: Found      local addrmode: [12 + Base:%5]
CGP: Found      local addrmode: [4 + Base:@redefine_out_b]
CGP: Found      local addrmode: [Base:%1]
CGP: Found      local addrmode: [16 + Base:%8]
CGP: Found      local addrmode: [8 + Base:@redefine_out_b]
CGP: Found      local addrmode: [Base:%1]
CGP: Found      local addrmode: [20 + Base:%11]
CGP: Found      local addrmode: [12 + Base:@redefine_out_b]
CGP: Found      local addrmode: [Base:%1]
CGP: Found      local addrmode: [24 + Base:%14]
CGP: Found      local addrmode: [16 + Base:@redefine_out_b]
Computing probabilities for redefine_start2.return
Computing probabilities for redefine_start2.newName01



=== redefine_start2
store visit is after?  store i32* %0, i32** %1, align 4
I was here to add i32* %0
arg match found with argIndex:-1
Argument does not have assigned frame index!
The value is an argument for which I am here to get arg frame index as:0
whats the index?-1
I was here to add   %1 = alloca i32*, align 4
whats in dag after store?SelectionDAG has 7 nodes:
  0x2fb6da8: ch = EntryToken [ORD=4]

  0x2fd4da0: i32 = FrameIndex<-1> [ORD=4]

  0x2fd4ca0: i32 = undef [ORD=4]

    0x2fb6da8: <multiple use>
    0x2fd4da0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd46a0: i32,ch = load 0x2fb6da8, 0x2fd4da0, 0x2fd4ca0<LD4[FixedStack-1]>

  0x2fd47a0: i32 = Constant<0>

    0x2fb6da8: <multiple use>
    0x2fd4da0: <multiple use>
    0x2fd43a0: i32 = FrameIndex<0> [ORD=4]

    0x2fd4ca0: <multiple use>
  0x2fd4ba0: ch = store 0x2fb6da8, 0x2fd4da0, 0x2fd43a0, 0x2fd4ca0<ST4[%1]> [ORD=4]


visiting load instruction   %2 = load i32** %1, align 4
with I type i32*and sd value :0x2fd43a0: i32 = FrameIndex<0>
new load?0x2fd4aa0: i32,ch = load 0x2fd4ba0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]>
dag after load is dealt with?SelectionDAG has 8 nodes:
  0x2fb6da8: ch = EntryToken [ORD=4]

  0x2fd4da0: i32 = FrameIndex<-1> [ORD=4]

  0x2fd4ca0: i32 = undef [ORD=4]

    0x2fb6da8: <multiple use>
    0x2fd4da0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd46a0: i32,ch = load 0x2fb6da8, 0x2fd4da0, 0x2fd4ca0<LD4[FixedStack-1]>

  0x2fd43a0: i32 = FrameIndex<0> [ORD=4]

  0x2fd47a0: i32 = Constant<0>

      0x2fb6da8: <multiple use>
      0x2fd4da0: <multiple use>
      0x2fd43a0: <multiple use>
      0x2fd4ca0: <multiple use>
    0x2fd4ba0: ch = store 0x2fb6da8, 0x2fd4da0, 0x2fd43a0, 0x2fd4ca0<ST4[%1]> [ORD=4]

    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd4aa0: i32,ch = load 0x2fd4ba0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]>

    0x2fb6da8: <multiple use>
    0x2fd4da0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd4ba0: ch = store 0x2fb6da8, 0x2fd4da0, 0x2fd43a0, 0x2fd4ca0<ST4[%1]> [ORD=4]


visiting load instruction   %4 = load i32* %3, align 4
with I type i32and sd value :0x2fd45a0: i32 = add 0x2fd4aa0, 0x2fd48a0
new load?0x2fd44a0: i32,ch = load 0x2fd4ba0, 0x2fd45a0, 0x2fd4ca0<LD4[%3]>
dag after load is dealt with?SelectionDAG has 12 nodes:
  0x2fb6da8: ch = EntryToken [ORD=4]

  0x2fd4da0: i32 = FrameIndex<-1> [ORD=4]

  0x2fd4ca0: i32 = undef [ORD=4]

    0x2fb6da8: <multiple use>
    0x2fd4da0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd46a0: i32,ch = load 0x2fb6da8, 0x2fd4da0, 0x2fd4ca0<LD4[FixedStack-1]>

  0x2fd43a0: i32 = FrameIndex<0> [ORD=4]

  0x2fd47a0: i32 = Constant<0>

  0x2fd49a0: i64 = Constant<8>

    0x2fd4ba0: <multiple use>
        0x2fd4ba0: <multiple use>
        0x2fd43a0: <multiple use>
        0x2fd4ca0: <multiple use>
      0x2fd4aa0: i32,ch = load 0x2fd4ba0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=5]

      0x2fd48a0: i32 = Constant<8> [ORD=6]

    0x2fd45a0: i32 = add 0x2fd4aa0, 0x2fd48a0 [ORD=6]

    0x2fd4ca0: <multiple use>
  0x2fd44a0: i32,ch = load 0x2fd4ba0, 0x2fd45a0, 0x2fd4ca0<LD4[%3]>

    0x2fb6da8: <multiple use>
    0x2fd4da0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd4ba0: ch = store 0x2fb6da8, 0x2fd4da0, 0x2fd43a0, 0x2fd4ca0<ST4[%1]> [ORD=4]


store visit is after?  store i32 %4, i32* getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0), align 4
I was here to add i32* getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)
I was here to add @redefine_out_b = common global [5 x i32] zeroinitializer, align 4
whats in dag after store?SelectionDAG has 15 nodes:
  0x2fb6da8: ch = EntryToken [ORD=4]

  0x2fd4da0: i32 = FrameIndex<-1> [ORD=4]

  0x2fd4ca0: i32 = undef [ORD=4]

    0x2fb6da8: <multiple use>
    0x2fd4da0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd46a0: i32,ch = load 0x2fb6da8, 0x2fd4da0, 0x2fd4ca0<LD4[FixedStack-1]>

  0x2fd43a0: i32 = FrameIndex<0> [ORD=4]

  0x2fd47a0: i32 = Constant<0>

    0x2fb6da8: <multiple use>
    0x2fd4da0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd4ba0: ch = store 0x2fb6da8, 0x2fd4da0, 0x2fd43a0, 0x2fd4ca0<ST4[%1]> [ORD=4]

    0x2fd4ba0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd4aa0: i32,ch = load 0x2fd4ba0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=5]

  0x2fd49a0: i64 = Constant<8>

    0x2fd4ba0: <multiple use>
      0x2fd4aa0: <multiple use>
      0x2fd48a0: i32 = Constant<8> [ORD=6]

    0x2fd45a0: i32 = add 0x2fd4aa0, 0x2fd48a0 [ORD=6]

    0x2fd4ca0: <multiple use>
  0x2fd44a0: i32,ch = load 0x2fd4ba0, 0x2fd45a0, 0x2fd4ca0<LD4[%3]> [ORD=7]

      0x2fd4aa0: <multiple use>
      0x2fd44a0: <multiple use>
    0x2fd4fa0: ch = TokenFactor 0x2fd4aa0:1, 0x2fd44a0:1 [ORD=9]

    0x2fd44a0: <multiple use>
    0x2fd4ea0: i32 = GlobalAddress<[5 x i32]* @redefine_out_b> 0 [ORD=8]

    0x2fd4ca0: <multiple use>
  0x2fd50a0: ch = store 0x2fd4fa0, 0x2fd44a0, 0x2fd4ea0, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9]


visiting load instruction   %5 = load i32** %1, align 4
with I type i32*and sd value :0x2fd43a0: i32 = FrameIndex<0>
new load?0x2fd51a0: i32,ch = load 0x2fd50a0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]>
dag after load is dealt with?SelectionDAG has 16 nodes:
  0x2fb6da8: ch = EntryToken [ORD=4]

  0x2fd4da0: i32 = FrameIndex<-1> [ORD=4]

  0x2fd4ca0: i32 = undef [ORD=4]

    0x2fb6da8: <multiple use>
    0x2fd4da0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd46a0: i32,ch = load 0x2fb6da8, 0x2fd4da0, 0x2fd4ca0<LD4[FixedStack-1]>

  0x2fd43a0: i32 = FrameIndex<0> [ORD=4]

  0x2fd47a0: i32 = Constant<0>

    0x2fb6da8: <multiple use>
    0x2fd4da0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd4ba0: ch = store 0x2fb6da8, 0x2fd4da0, 0x2fd43a0, 0x2fd4ca0<ST4[%1]> [ORD=4]

    0x2fd4ba0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd4aa0: i32,ch = load 0x2fd4ba0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=5]

  0x2fd49a0: i64 = Constant<8>

    0x2fd4ba0: <multiple use>
      0x2fd4aa0: <multiple use>
      0x2fd48a0: i32 = Constant<8> [ORD=6]

    0x2fd45a0: i32 = add 0x2fd4aa0, 0x2fd48a0 [ORD=6]

    0x2fd4ca0: <multiple use>
  0x2fd44a0: i32,ch = load 0x2fd4ba0, 0x2fd45a0, 0x2fd4ca0<LD4[%3]> [ORD=7]

        0x2fd4aa0: <multiple use>
        0x2fd44a0: <multiple use>
      0x2fd4fa0: ch = TokenFactor 0x2fd4aa0:1, 0x2fd44a0:1 [ORD=9]

      0x2fd44a0: <multiple use>
      0x2fd4ea0: i32 = GlobalAddress<[5 x i32]* @redefine_out_b> 0 [ORD=8]

      0x2fd4ca0: <multiple use>
    0x2fd50a0: ch = store 0x2fd4fa0, 0x2fd44a0, 0x2fd4ea0, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9]

    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd51a0: i32,ch = load 0x2fd50a0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]>

      0x2fd4aa0: <multiple use>
      0x2fd44a0: <multiple use>
    0x2fd4fa0: ch = TokenFactor 0x2fd4aa0:1, 0x2fd44a0:1 [ORD=9]

    0x2fd44a0: <multiple use>
    0x2fd4ea0: i32 = GlobalAddress<[5 x i32]* @redefine_out_b> 0 [ORD=8]

    0x2fd4ca0: <multiple use>
  0x2fd50a0: ch = store 0x2fd4fa0, 0x2fd44a0, 0x2fd4ea0, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9]


visiting load instruction   %7 = load i32* %6, align 4
with I type i32and sd value :0x2fe1210: i32 = add 0x2fd51a0, 0x2fe1110
new load?0x2fe1310: i32,ch = load 0x2fd50a0, 0x2fe1210, 0x2fd4ca0<LD4[%6]>
dag after load is dealt with?SelectionDAG has 20 nodes:
  0x2fb6da8: ch = EntryToken [ORD=4]

  0x2fd4da0: i32 = FrameIndex<-1> [ORD=4]

  0x2fd4ca0: i32 = undef [ORD=4]

    0x2fb6da8: <multiple use>
    0x2fd4da0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd46a0: i32,ch = load 0x2fb6da8, 0x2fd4da0, 0x2fd4ca0<LD4[FixedStack-1]>

  0x2fd43a0: i32 = FrameIndex<0> [ORD=4]

  0x2fd47a0: i32 = Constant<0>

    0x2fb6da8: <multiple use>
    0x2fd4da0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd4ba0: ch = store 0x2fb6da8, 0x2fd4da0, 0x2fd43a0, 0x2fd4ca0<ST4[%1]> [ORD=4]

    0x2fd4ba0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd4aa0: i32,ch = load 0x2fd4ba0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=5]

  0x2fd49a0: i64 = Constant<8>

    0x2fd4ba0: <multiple use>
      0x2fd4aa0: <multiple use>
      0x2fd48a0: i32 = Constant<8> [ORD=6]

    0x2fd45a0: i32 = add 0x2fd4aa0, 0x2fd48a0 [ORD=6]

    0x2fd4ca0: <multiple use>
  0x2fd44a0: i32,ch = load 0x2fd4ba0, 0x2fd45a0, 0x2fd4ca0<LD4[%3]> [ORD=7]

  0x2fe1010: i64 = Constant<12>

    0x2fd50a0: <multiple use>
        0x2fd50a0: <multiple use>
        0x2fd43a0: <multiple use>
        0x2fd4ca0: <multiple use>
      0x2fd51a0: i32,ch = load 0x2fd50a0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=10]

      0x2fe1110: i32 = Constant<12> [ORD=11]

    0x2fe1210: i32 = add 0x2fd51a0, 0x2fe1110 [ORD=11]

    0x2fd4ca0: <multiple use>
  0x2fe1310: i32,ch = load 0x2fd50a0, 0x2fe1210, 0x2fd4ca0<LD4[%6]>

      0x2fd4aa0: <multiple use>
      0x2fd44a0: <multiple use>
    0x2fd4fa0: ch = TokenFactor 0x2fd4aa0:1, 0x2fd44a0:1 [ORD=9]

    0x2fd44a0: <multiple use>
    0x2fd4ea0: i32 = GlobalAddress<[5 x i32]* @redefine_out_b> 0 [ORD=8]

    0x2fd4ca0: <multiple use>
  0x2fd50a0: ch = store 0x2fd4fa0, 0x2fd44a0, 0x2fd4ea0, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9]


store visit is after?  store i32 %7, i32* getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1), align 4
I was here to add i32* getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)
whats in dag after store?SelectionDAG has 25 nodes:
  0x2fb6da8: ch = EntryToken [ORD=4]

  0x2fd4da0: i32 = FrameIndex<-1> [ORD=4]

  0x2fd4ca0: i32 = undef [ORD=4]

    0x2fb6da8: <multiple use>
    0x2fd4da0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd46a0: i32,ch = load 0x2fb6da8, 0x2fd4da0, 0x2fd4ca0<LD4[FixedStack-1]>

  0x2fd43a0: i32 = FrameIndex<0> [ORD=4]

  0x2fd47a0: i32 = Constant<0>

    0x2fb6da8: <multiple use>
    0x2fd4da0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd4ba0: ch = store 0x2fb6da8, 0x2fd4da0, 0x2fd43a0, 0x2fd4ca0<ST4[%1]> [ORD=4]

    0x2fd4ba0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd4aa0: i32,ch = load 0x2fd4ba0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=5]

  0x2fd49a0: i64 = Constant<8>

    0x2fd4ba0: <multiple use>
      0x2fd4aa0: <multiple use>
      0x2fd48a0: i32 = Constant<8> [ORD=6]

    0x2fd45a0: i32 = add 0x2fd4aa0, 0x2fd48a0 [ORD=6]

    0x2fd4ca0: <multiple use>
  0x2fd44a0: i32,ch = load 0x2fd4ba0, 0x2fd45a0, 0x2fd4ca0<LD4[%3]> [ORD=7]

  0x2fd4ea0: i32 = GlobalAddress<[5 x i32]* @redefine_out_b> 0 [ORD=8]

      0x2fd4aa0: <multiple use>
      0x2fd44a0: <multiple use>
    0x2fd4fa0: ch = TokenFactor 0x2fd4aa0:1, 0x2fd44a0:1 [ORD=9]

    0x2fd44a0: <multiple use>
    0x2fd4ea0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd50a0: ch = store 0x2fd4fa0, 0x2fd44a0, 0x2fd4ea0, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9]

    0x2fd50a0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd51a0: i32,ch = load 0x2fd50a0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=10]

  0x2fe1010: i64 = Constant<12>

    0x2fd50a0: <multiple use>
      0x2fd51a0: <multiple use>
      0x2fe1110: i32 = Constant<12> [ORD=11]

    0x2fe1210: i32 = add 0x2fd51a0, 0x2fe1110 [ORD=11]

    0x2fd4ca0: <multiple use>
  0x2fe1310: i32,ch = load 0x2fd50a0, 0x2fe1210, 0x2fd4ca0<LD4[%6]> [ORD=12]

  0x2fe1410: i64 = Constant<4>

      0x2fd51a0: <multiple use>
      0x2fe1310: <multiple use>
    0x2fe1710: ch = TokenFactor 0x2fd51a0:1, 0x2fe1310:1 [ORD=14]

    0x2fe1310: <multiple use>
      0x2fd4ea0: <multiple use>
      0x2fe1510: i32 = Constant<4> [ORD=13]

    0x2fe1610: i32 = add 0x2fd4ea0, 0x2fe1510 [ORD=13]

    0x2fd4ca0: <multiple use>
  0x2fe1810: ch = store 0x2fe1710, 0x2fe1310, 0x2fe1610, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=14]


visiting load instruction   %8 = load i32** %1, align 4
with I type i32*and sd value :0x2fd43a0: i32 = FrameIndex<0>
new load?0x2fe1910: i32,ch = load 0x2fe1810, 0x2fd43a0, 0x2fd4ca0<LD4[%1]>
dag after load is dealt with?SelectionDAG has 26 nodes:
  0x2fb6da8: ch = EntryToken [ORD=4]

  0x2fd4da0: i32 = FrameIndex<-1> [ORD=4]

  0x2fd4ca0: i32 = undef [ORD=4]

    0x2fb6da8: <multiple use>
    0x2fd4da0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd46a0: i32,ch = load 0x2fb6da8, 0x2fd4da0, 0x2fd4ca0<LD4[FixedStack-1]>

  0x2fd43a0: i32 = FrameIndex<0> [ORD=4]

  0x2fd47a0: i32 = Constant<0>

    0x2fb6da8: <multiple use>
    0x2fd4da0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd4ba0: ch = store 0x2fb6da8, 0x2fd4da0, 0x2fd43a0, 0x2fd4ca0<ST4[%1]> [ORD=4]

    0x2fd4ba0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd4aa0: i32,ch = load 0x2fd4ba0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=5]

  0x2fd49a0: i64 = Constant<8>

    0x2fd4ba0: <multiple use>
      0x2fd4aa0: <multiple use>
      0x2fd48a0: i32 = Constant<8> [ORD=6]

    0x2fd45a0: i32 = add 0x2fd4aa0, 0x2fd48a0 [ORD=6]

    0x2fd4ca0: <multiple use>
  0x2fd44a0: i32,ch = load 0x2fd4ba0, 0x2fd45a0, 0x2fd4ca0<LD4[%3]> [ORD=7]

  0x2fd4ea0: i32 = GlobalAddress<[5 x i32]* @redefine_out_b> 0 [ORD=8]

      0x2fd4aa0: <multiple use>
      0x2fd44a0: <multiple use>
    0x2fd4fa0: ch = TokenFactor 0x2fd4aa0:1, 0x2fd44a0:1 [ORD=9]

    0x2fd44a0: <multiple use>
    0x2fd4ea0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd50a0: ch = store 0x2fd4fa0, 0x2fd44a0, 0x2fd4ea0, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9]

    0x2fd50a0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd51a0: i32,ch = load 0x2fd50a0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=10]

  0x2fe1010: i64 = Constant<12>

    0x2fd50a0: <multiple use>
      0x2fd51a0: <multiple use>
      0x2fe1110: i32 = Constant<12> [ORD=11]

    0x2fe1210: i32 = add 0x2fd51a0, 0x2fe1110 [ORD=11]

    0x2fd4ca0: <multiple use>
  0x2fe1310: i32,ch = load 0x2fd50a0, 0x2fe1210, 0x2fd4ca0<LD4[%6]> [ORD=12]

  0x2fe1410: i64 = Constant<4>

        0x2fd51a0: <multiple use>
        0x2fe1310: <multiple use>
      0x2fe1710: ch = TokenFactor 0x2fd51a0:1, 0x2fe1310:1 [ORD=14]

      0x2fe1310: <multiple use>
        0x2fd4ea0: <multiple use>
        0x2fe1510: i32 = Constant<4> [ORD=13]

      0x2fe1610: i32 = add 0x2fd4ea0, 0x2fe1510 [ORD=13]

      0x2fd4ca0: <multiple use>
    0x2fe1810: ch = store 0x2fe1710, 0x2fe1310, 0x2fe1610, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=14]

    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe1910: i32,ch = load 0x2fe1810, 0x2fd43a0, 0x2fd4ca0<LD4[%1]>

      0x2fd51a0: <multiple use>
      0x2fe1310: <multiple use>
    0x2fe1710: ch = TokenFactor 0x2fd51a0:1, 0x2fe1310:1 [ORD=14]

    0x2fe1310: <multiple use>
      0x2fd4ea0: <multiple use>
      0x2fe1510: i32 = Constant<4> [ORD=13]

    0x2fe1610: i32 = add 0x2fd4ea0, 0x2fe1510 [ORD=13]

    0x2fd4ca0: <multiple use>
  0x2fe1810: ch = store 0x2fe1710, 0x2fe1310, 0x2fe1610, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=14]


visiting load instruction   %10 = load i32* %9, align 4
with I type i32and sd value :0x2fe1c10: i32 = add 0x2fe1910, 0x2fe1b10
new load?0x2fe1d10: i32,ch = load 0x2fe1810, 0x2fe1c10, 0x2fd4ca0<LD4[%9]>
dag after load is dealt with?SelectionDAG has 30 nodes:
  0x2fb6da8: ch = EntryToken [ORD=4]

  0x2fd4da0: i32 = FrameIndex<-1> [ORD=4]

  0x2fd4ca0: i32 = undef [ORD=4]

    0x2fb6da8: <multiple use>
    0x2fd4da0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd46a0: i32,ch = load 0x2fb6da8, 0x2fd4da0, 0x2fd4ca0<LD4[FixedStack-1]>

  0x2fd43a0: i32 = FrameIndex<0> [ORD=4]

  0x2fd47a0: i32 = Constant<0>

    0x2fb6da8: <multiple use>
    0x2fd4da0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd4ba0: ch = store 0x2fb6da8, 0x2fd4da0, 0x2fd43a0, 0x2fd4ca0<ST4[%1]> [ORD=4]

    0x2fd4ba0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd4aa0: i32,ch = load 0x2fd4ba0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=5]

  0x2fd49a0: i64 = Constant<8>

    0x2fd4ba0: <multiple use>
      0x2fd4aa0: <multiple use>
      0x2fd48a0: i32 = Constant<8> [ORD=6]

    0x2fd45a0: i32 = add 0x2fd4aa0, 0x2fd48a0 [ORD=6]

    0x2fd4ca0: <multiple use>
  0x2fd44a0: i32,ch = load 0x2fd4ba0, 0x2fd45a0, 0x2fd4ca0<LD4[%3]> [ORD=7]

  0x2fd4ea0: i32 = GlobalAddress<[5 x i32]* @redefine_out_b> 0 [ORD=8]

      0x2fd4aa0: <multiple use>
      0x2fd44a0: <multiple use>
    0x2fd4fa0: ch = TokenFactor 0x2fd4aa0:1, 0x2fd44a0:1 [ORD=9]

    0x2fd44a0: <multiple use>
    0x2fd4ea0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd50a0: ch = store 0x2fd4fa0, 0x2fd44a0, 0x2fd4ea0, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9]

    0x2fd50a0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd51a0: i32,ch = load 0x2fd50a0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=10]

  0x2fe1010: i64 = Constant<12>

    0x2fd50a0: <multiple use>
      0x2fd51a0: <multiple use>
      0x2fe1110: i32 = Constant<12> [ORD=11]

    0x2fe1210: i32 = add 0x2fd51a0, 0x2fe1110 [ORD=11]

    0x2fd4ca0: <multiple use>
  0x2fe1310: i32,ch = load 0x2fd50a0, 0x2fe1210, 0x2fd4ca0<LD4[%6]> [ORD=12]

  0x2fe1410: i64 = Constant<4>

  0x2fe1a10: i64 = Constant<16>

    0x2fe1810: <multiple use>
        0x2fe1810: <multiple use>
        0x2fd43a0: <multiple use>
        0x2fd4ca0: <multiple use>
      0x2fe1910: i32,ch = load 0x2fe1810, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=15]

      0x2fe1b10: i32 = Constant<16> [ORD=16]

    0x2fe1c10: i32 = add 0x2fe1910, 0x2fe1b10 [ORD=16]

    0x2fd4ca0: <multiple use>
  0x2fe1d10: i32,ch = load 0x2fe1810, 0x2fe1c10, 0x2fd4ca0<LD4[%9]>

      0x2fd51a0: <multiple use>
      0x2fe1310: <multiple use>
    0x2fe1710: ch = TokenFactor 0x2fd51a0:1, 0x2fe1310:1 [ORD=14]

    0x2fe1310: <multiple use>
      0x2fd4ea0: <multiple use>
      0x2fe1510: i32 = Constant<4> [ORD=13]

    0x2fe1610: i32 = add 0x2fd4ea0, 0x2fe1510 [ORD=13]

    0x2fd4ca0: <multiple use>
  0x2fe1810: ch = store 0x2fe1710, 0x2fe1310, 0x2fe1610, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=14]


store visit is after?  store i32 %10, i32* getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2), align 4
I was here to add i32* getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2)
whats in dag after store?SelectionDAG has 33 nodes:
  0x2fb6da8: ch = EntryToken [ORD=4]

  0x2fd4da0: i32 = FrameIndex<-1> [ORD=4]

  0x2fd4ca0: i32 = undef [ORD=4]

    0x2fb6da8: <multiple use>
    0x2fd4da0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd46a0: i32,ch = load 0x2fb6da8, 0x2fd4da0, 0x2fd4ca0<LD4[FixedStack-1]>

  0x2fd43a0: i32 = FrameIndex<0> [ORD=4]

  0x2fd47a0: i32 = Constant<0>

    0x2fb6da8: <multiple use>
    0x2fd4da0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd4ba0: ch = store 0x2fb6da8, 0x2fd4da0, 0x2fd43a0, 0x2fd4ca0<ST4[%1]> [ORD=4]

    0x2fd4ba0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd4aa0: i32,ch = load 0x2fd4ba0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=5]

  0x2fd49a0: i64 = Constant<8>

  0x2fd48a0: i32 = Constant<8> [ORD=6]

    0x2fd4ba0: <multiple use>
      0x2fd4aa0: <multiple use>
      0x2fd48a0: <multiple use>
    0x2fd45a0: i32 = add 0x2fd4aa0, 0x2fd48a0 [ORD=6]

    0x2fd4ca0: <multiple use>
  0x2fd44a0: i32,ch = load 0x2fd4ba0, 0x2fd45a0, 0x2fd4ca0<LD4[%3]> [ORD=7]

  0x2fd4ea0: i32 = GlobalAddress<[5 x i32]* @redefine_out_b> 0 [ORD=8]

      0x2fd4aa0: <multiple use>
      0x2fd44a0: <multiple use>
    0x2fd4fa0: ch = TokenFactor 0x2fd4aa0:1, 0x2fd44a0:1 [ORD=9]

    0x2fd44a0: <multiple use>
    0x2fd4ea0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd50a0: ch = store 0x2fd4fa0, 0x2fd44a0, 0x2fd4ea0, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9]

    0x2fd50a0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd51a0: i32,ch = load 0x2fd50a0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=10]

  0x2fe1010: i64 = Constant<12>

    0x2fd50a0: <multiple use>
      0x2fd51a0: <multiple use>
      0x2fe1110: i32 = Constant<12> [ORD=11]

    0x2fe1210: i32 = add 0x2fd51a0, 0x2fe1110 [ORD=11]

    0x2fd4ca0: <multiple use>
  0x2fe1310: i32,ch = load 0x2fd50a0, 0x2fe1210, 0x2fd4ca0<LD4[%6]> [ORD=12]

  0x2fe1410: i64 = Constant<4>

      0x2fd51a0: <multiple use>
      0x2fe1310: <multiple use>
    0x2fe1710: ch = TokenFactor 0x2fd51a0:1, 0x2fe1310:1 [ORD=14]

    0x2fe1310: <multiple use>
      0x2fd4ea0: <multiple use>
      0x2fe1510: i32 = Constant<4> [ORD=13]

    0x2fe1610: i32 = add 0x2fd4ea0, 0x2fe1510 [ORD=13]

    0x2fd4ca0: <multiple use>
  0x2fe1810: ch = store 0x2fe1710, 0x2fe1310, 0x2fe1610, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=14]

    0x2fe1810: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe1910: i32,ch = load 0x2fe1810, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=15]

  0x2fe1a10: i64 = Constant<16>

    0x2fe1810: <multiple use>
      0x2fe1910: <multiple use>
      0x2fe1b10: i32 = Constant<16> [ORD=16]

    0x2fe1c10: i32 = add 0x2fe1910, 0x2fe1b10 [ORD=16]

    0x2fd4ca0: <multiple use>
  0x2fe1d10: i32,ch = load 0x2fe1810, 0x2fe1c10, 0x2fd4ca0<LD4[%9]> [ORD=17]

      0x2fe1910: <multiple use>
      0x2fe1d10: <multiple use>
    0x2fe8fe0: ch = TokenFactor 0x2fe1910:1, 0x2fe1d10:1 [ORD=19]

    0x2fe1d10: <multiple use>
      0x2fd4ea0: <multiple use>
      0x2fd48a0: <multiple use>
    0x2fe1e10: i32 = add 0x2fd4ea0, 0x2fd48a0 [ORD=18]

    0x2fd4ca0: <multiple use>
  0x2fe90e0: ch = store 0x2fe8fe0, 0x2fe1d10, 0x2fe1e10, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2)]> [ORD=19]


visiting load instruction   %11 = load i32** %1, align 4
with I type i32*and sd value :0x2fd43a0: i32 = FrameIndex<0>
new load?0x2fe91e0: i32,ch = load 0x2fe90e0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]>
dag after load is dealt with?SelectionDAG has 34 nodes:
  0x2fb6da8: ch = EntryToken [ORD=4]

  0x2fd4da0: i32 = FrameIndex<-1> [ORD=4]

  0x2fd4ca0: i32 = undef [ORD=4]

    0x2fb6da8: <multiple use>
    0x2fd4da0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd46a0: i32,ch = load 0x2fb6da8, 0x2fd4da0, 0x2fd4ca0<LD4[FixedStack-1]>

  0x2fd43a0: i32 = FrameIndex<0> [ORD=4]

  0x2fd47a0: i32 = Constant<0>

    0x2fb6da8: <multiple use>
    0x2fd4da0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd4ba0: ch = store 0x2fb6da8, 0x2fd4da0, 0x2fd43a0, 0x2fd4ca0<ST4[%1]> [ORD=4]

    0x2fd4ba0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd4aa0: i32,ch = load 0x2fd4ba0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=5]

  0x2fd49a0: i64 = Constant<8>

  0x2fd48a0: i32 = Constant<8> [ORD=6]

    0x2fd4ba0: <multiple use>
      0x2fd4aa0: <multiple use>
      0x2fd48a0: <multiple use>
    0x2fd45a0: i32 = add 0x2fd4aa0, 0x2fd48a0 [ORD=6]

    0x2fd4ca0: <multiple use>
  0x2fd44a0: i32,ch = load 0x2fd4ba0, 0x2fd45a0, 0x2fd4ca0<LD4[%3]> [ORD=7]

  0x2fd4ea0: i32 = GlobalAddress<[5 x i32]* @redefine_out_b> 0 [ORD=8]

      0x2fd4aa0: <multiple use>
      0x2fd44a0: <multiple use>
    0x2fd4fa0: ch = TokenFactor 0x2fd4aa0:1, 0x2fd44a0:1 [ORD=9]

    0x2fd44a0: <multiple use>
    0x2fd4ea0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd50a0: ch = store 0x2fd4fa0, 0x2fd44a0, 0x2fd4ea0, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9]

    0x2fd50a0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd51a0: i32,ch = load 0x2fd50a0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=10]

  0x2fe1010: i64 = Constant<12>

    0x2fd50a0: <multiple use>
      0x2fd51a0: <multiple use>
      0x2fe1110: i32 = Constant<12> [ORD=11]

    0x2fe1210: i32 = add 0x2fd51a0, 0x2fe1110 [ORD=11]

    0x2fd4ca0: <multiple use>
  0x2fe1310: i32,ch = load 0x2fd50a0, 0x2fe1210, 0x2fd4ca0<LD4[%6]> [ORD=12]

  0x2fe1410: i64 = Constant<4>

      0x2fd51a0: <multiple use>
      0x2fe1310: <multiple use>
    0x2fe1710: ch = TokenFactor 0x2fd51a0:1, 0x2fe1310:1 [ORD=14]

    0x2fe1310: <multiple use>
      0x2fd4ea0: <multiple use>
      0x2fe1510: i32 = Constant<4> [ORD=13]

    0x2fe1610: i32 = add 0x2fd4ea0, 0x2fe1510 [ORD=13]

    0x2fd4ca0: <multiple use>
  0x2fe1810: ch = store 0x2fe1710, 0x2fe1310, 0x2fe1610, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=14]

    0x2fe1810: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe1910: i32,ch = load 0x2fe1810, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=15]

  0x2fe1a10: i64 = Constant<16>

    0x2fe1810: <multiple use>
      0x2fe1910: <multiple use>
      0x2fe1b10: i32 = Constant<16> [ORD=16]

    0x2fe1c10: i32 = add 0x2fe1910, 0x2fe1b10 [ORD=16]

    0x2fd4ca0: <multiple use>
  0x2fe1d10: i32,ch = load 0x2fe1810, 0x2fe1c10, 0x2fd4ca0<LD4[%9]> [ORD=17]

        0x2fe1910: <multiple use>
        0x2fe1d10: <multiple use>
      0x2fe8fe0: ch = TokenFactor 0x2fe1910:1, 0x2fe1d10:1 [ORD=19]

      0x2fe1d10: <multiple use>
        0x2fd4ea0: <multiple use>
        0x2fd48a0: <multiple use>
      0x2fe1e10: i32 = add 0x2fd4ea0, 0x2fd48a0 [ORD=18]

      0x2fd4ca0: <multiple use>
    0x2fe90e0: ch = store 0x2fe8fe0, 0x2fe1d10, 0x2fe1e10, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2)]> [ORD=19]

    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe91e0: i32,ch = load 0x2fe90e0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]>

      0x2fe1910: <multiple use>
      0x2fe1d10: <multiple use>
    0x2fe8fe0: ch = TokenFactor 0x2fe1910:1, 0x2fe1d10:1 [ORD=19]

    0x2fe1d10: <multiple use>
      0x2fd4ea0: <multiple use>
      0x2fd48a0: <multiple use>
    0x2fe1e10: i32 = add 0x2fd4ea0, 0x2fd48a0 [ORD=18]

    0x2fd4ca0: <multiple use>
  0x2fe90e0: ch = store 0x2fe8fe0, 0x2fe1d10, 0x2fe1e10, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2)]> [ORD=19]


visiting load instruction   %13 = load i32* %12, align 4
with I type i32and sd value :0x2fe94e0: i32 = add 0x2fe91e0, 0x2fe93e0
new load?0x2fe95e0: i32,ch = load 0x2fe90e0, 0x2fe94e0, 0x2fd4ca0<LD4[%12]>
dag after load is dealt with?SelectionDAG has 38 nodes:
  0x2fb6da8: ch = EntryToken [ORD=4]

  0x2fd4da0: i32 = FrameIndex<-1> [ORD=4]

  0x2fd4ca0: i32 = undef [ORD=4]

    0x2fb6da8: <multiple use>
    0x2fd4da0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd46a0: i32,ch = load 0x2fb6da8, 0x2fd4da0, 0x2fd4ca0<LD4[FixedStack-1]>

  0x2fd43a0: i32 = FrameIndex<0> [ORD=4]

  0x2fd47a0: i32 = Constant<0>

    0x2fb6da8: <multiple use>
    0x2fd4da0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd4ba0: ch = store 0x2fb6da8, 0x2fd4da0, 0x2fd43a0, 0x2fd4ca0<ST4[%1]> [ORD=4]

    0x2fd4ba0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd4aa0: i32,ch = load 0x2fd4ba0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=5]

  0x2fd49a0: i64 = Constant<8>

  0x2fd48a0: i32 = Constant<8> [ORD=6]

    0x2fd4ba0: <multiple use>
      0x2fd4aa0: <multiple use>
      0x2fd48a0: <multiple use>
    0x2fd45a0: i32 = add 0x2fd4aa0, 0x2fd48a0 [ORD=6]

    0x2fd4ca0: <multiple use>
  0x2fd44a0: i32,ch = load 0x2fd4ba0, 0x2fd45a0, 0x2fd4ca0<LD4[%3]> [ORD=7]

  0x2fd4ea0: i32 = GlobalAddress<[5 x i32]* @redefine_out_b> 0 [ORD=8]

      0x2fd4aa0: <multiple use>
      0x2fd44a0: <multiple use>
    0x2fd4fa0: ch = TokenFactor 0x2fd4aa0:1, 0x2fd44a0:1 [ORD=9]

    0x2fd44a0: <multiple use>
    0x2fd4ea0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd50a0: ch = store 0x2fd4fa0, 0x2fd44a0, 0x2fd4ea0, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9]

    0x2fd50a0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd51a0: i32,ch = load 0x2fd50a0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=10]

  0x2fe1010: i64 = Constant<12>

    0x2fd50a0: <multiple use>
      0x2fd51a0: <multiple use>
      0x2fe1110: i32 = Constant<12> [ORD=11]

    0x2fe1210: i32 = add 0x2fd51a0, 0x2fe1110 [ORD=11]

    0x2fd4ca0: <multiple use>
  0x2fe1310: i32,ch = load 0x2fd50a0, 0x2fe1210, 0x2fd4ca0<LD4[%6]> [ORD=12]

  0x2fe1410: i64 = Constant<4>

      0x2fd51a0: <multiple use>
      0x2fe1310: <multiple use>
    0x2fe1710: ch = TokenFactor 0x2fd51a0:1, 0x2fe1310:1 [ORD=14]

    0x2fe1310: <multiple use>
      0x2fd4ea0: <multiple use>
      0x2fe1510: i32 = Constant<4> [ORD=13]

    0x2fe1610: i32 = add 0x2fd4ea0, 0x2fe1510 [ORD=13]

    0x2fd4ca0: <multiple use>
  0x2fe1810: ch = store 0x2fe1710, 0x2fe1310, 0x2fe1610, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=14]

    0x2fe1810: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe1910: i32,ch = load 0x2fe1810, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=15]

  0x2fe1a10: i64 = Constant<16>

    0x2fe1810: <multiple use>
      0x2fe1910: <multiple use>
      0x2fe1b10: i32 = Constant<16> [ORD=16]

    0x2fe1c10: i32 = add 0x2fe1910, 0x2fe1b10 [ORD=16]

    0x2fd4ca0: <multiple use>
  0x2fe1d10: i32,ch = load 0x2fe1810, 0x2fe1c10, 0x2fd4ca0<LD4[%9]> [ORD=17]

  0x2fe92e0: i64 = Constant<20>

    0x2fe90e0: <multiple use>
        0x2fe90e0: <multiple use>
        0x2fd43a0: <multiple use>
        0x2fd4ca0: <multiple use>
      0x2fe91e0: i32,ch = load 0x2fe90e0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=20]

      0x2fe93e0: i32 = Constant<20> [ORD=21]

    0x2fe94e0: i32 = add 0x2fe91e0, 0x2fe93e0 [ORD=21]

    0x2fd4ca0: <multiple use>
  0x2fe95e0: i32,ch = load 0x2fe90e0, 0x2fe94e0, 0x2fd4ca0<LD4[%12]>

      0x2fe1910: <multiple use>
      0x2fe1d10: <multiple use>
    0x2fe8fe0: ch = TokenFactor 0x2fe1910:1, 0x2fe1d10:1 [ORD=19]

    0x2fe1d10: <multiple use>
      0x2fd4ea0: <multiple use>
      0x2fd48a0: <multiple use>
    0x2fe1e10: i32 = add 0x2fd4ea0, 0x2fd48a0 [ORD=18]

    0x2fd4ca0: <multiple use>
  0x2fe90e0: ch = store 0x2fe8fe0, 0x2fe1d10, 0x2fe1e10, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2)]> [ORD=19]


store visit is after?  store i32 %13, i32* getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 3), align 4
I was here to add i32* getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 3)
whats in dag after store?SelectionDAG has 41 nodes:
  0x2fb6da8: ch = EntryToken [ORD=4]

  0x2fd4da0: i32 = FrameIndex<-1> [ORD=4]

  0x2fd4ca0: i32 = undef [ORD=4]

    0x2fb6da8: <multiple use>
    0x2fd4da0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd46a0: i32,ch = load 0x2fb6da8, 0x2fd4da0, 0x2fd4ca0<LD4[FixedStack-1]>

  0x2fd43a0: i32 = FrameIndex<0> [ORD=4]

  0x2fd47a0: i32 = Constant<0>

    0x2fb6da8: <multiple use>
    0x2fd4da0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd4ba0: ch = store 0x2fb6da8, 0x2fd4da0, 0x2fd43a0, 0x2fd4ca0<ST4[%1]> [ORD=4]

    0x2fd4ba0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd4aa0: i32,ch = load 0x2fd4ba0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=5]

  0x2fd49a0: i64 = Constant<8>

  0x2fd48a0: i32 = Constant<8> [ORD=6]

    0x2fd4ba0: <multiple use>
      0x2fd4aa0: <multiple use>
      0x2fd48a0: <multiple use>
    0x2fd45a0: i32 = add 0x2fd4aa0, 0x2fd48a0 [ORD=6]

    0x2fd4ca0: <multiple use>
  0x2fd44a0: i32,ch = load 0x2fd4ba0, 0x2fd45a0, 0x2fd4ca0<LD4[%3]> [ORD=7]

  0x2fd4ea0: i32 = GlobalAddress<[5 x i32]* @redefine_out_b> 0 [ORD=8]

      0x2fd4aa0: <multiple use>
      0x2fd44a0: <multiple use>
    0x2fd4fa0: ch = TokenFactor 0x2fd4aa0:1, 0x2fd44a0:1 [ORD=9]

    0x2fd44a0: <multiple use>
    0x2fd4ea0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd50a0: ch = store 0x2fd4fa0, 0x2fd44a0, 0x2fd4ea0, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9]

    0x2fd50a0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd51a0: i32,ch = load 0x2fd50a0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=10]

  0x2fe1010: i64 = Constant<12>

  0x2fe1110: i32 = Constant<12> [ORD=11]

    0x2fd50a0: <multiple use>
      0x2fd51a0: <multiple use>
      0x2fe1110: <multiple use>
    0x2fe1210: i32 = add 0x2fd51a0, 0x2fe1110 [ORD=11]

    0x2fd4ca0: <multiple use>
  0x2fe1310: i32,ch = load 0x2fd50a0, 0x2fe1210, 0x2fd4ca0<LD4[%6]> [ORD=12]

  0x2fe1410: i64 = Constant<4>

      0x2fd51a0: <multiple use>
      0x2fe1310: <multiple use>
    0x2fe1710: ch = TokenFactor 0x2fd51a0:1, 0x2fe1310:1 [ORD=14]

    0x2fe1310: <multiple use>
      0x2fd4ea0: <multiple use>
      0x2fe1510: i32 = Constant<4> [ORD=13]

    0x2fe1610: i32 = add 0x2fd4ea0, 0x2fe1510 [ORD=13]

    0x2fd4ca0: <multiple use>
  0x2fe1810: ch = store 0x2fe1710, 0x2fe1310, 0x2fe1610, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=14]

    0x2fe1810: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe1910: i32,ch = load 0x2fe1810, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=15]

  0x2fe1a10: i64 = Constant<16>

    0x2fe1810: <multiple use>
      0x2fe1910: <multiple use>
      0x2fe1b10: i32 = Constant<16> [ORD=16]

    0x2fe1c10: i32 = add 0x2fe1910, 0x2fe1b10 [ORD=16]

    0x2fd4ca0: <multiple use>
  0x2fe1d10: i32,ch = load 0x2fe1810, 0x2fe1c10, 0x2fd4ca0<LD4[%9]> [ORD=17]

      0x2fe1910: <multiple use>
      0x2fe1d10: <multiple use>
    0x2fe8fe0: ch = TokenFactor 0x2fe1910:1, 0x2fe1d10:1 [ORD=19]

    0x2fe1d10: <multiple use>
      0x2fd4ea0: <multiple use>
      0x2fd48a0: <multiple use>
    0x2fe1e10: i32 = add 0x2fd4ea0, 0x2fd48a0 [ORD=18]

    0x2fd4ca0: <multiple use>
  0x2fe90e0: ch = store 0x2fe8fe0, 0x2fe1d10, 0x2fe1e10, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2)]> [ORD=19]

    0x2fe90e0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe91e0: i32,ch = load 0x2fe90e0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=20]

  0x2fe92e0: i64 = Constant<20>

    0x2fe90e0: <multiple use>
      0x2fe91e0: <multiple use>
      0x2fe93e0: i32 = Constant<20> [ORD=21]

    0x2fe94e0: i32 = add 0x2fe91e0, 0x2fe93e0 [ORD=21]

    0x2fd4ca0: <multiple use>
  0x2fe95e0: i32,ch = load 0x2fe90e0, 0x2fe94e0, 0x2fd4ca0<LD4[%12]> [ORD=22]

      0x2fe91e0: <multiple use>
      0x2fe95e0: <multiple use>
    0x2fe97e0: ch = TokenFactor 0x2fe91e0:1, 0x2fe95e0:1 [ORD=24]

    0x2fe95e0: <multiple use>
      0x2fd4ea0: <multiple use>
      0x2fe1110: <multiple use>
    0x2fe96e0: i32 = add 0x2fd4ea0, 0x2fe1110 [ORD=23]

    0x2fd4ca0: <multiple use>
  0x2fe98e0: ch = store 0x2fe97e0, 0x2fe95e0, 0x2fe96e0, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 3)]> [ORD=24]


visiting load instruction   %14 = load i32** %1, align 4
with I type i32*and sd value :0x2fd43a0: i32 = FrameIndex<0>
new load?0x2fe99e0: i32,ch = load 0x2fe98e0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]>
dag after load is dealt with?SelectionDAG has 42 nodes:
  0x2fb6da8: ch = EntryToken [ORD=4]

  0x2fd4da0: i32 = FrameIndex<-1> [ORD=4]

  0x2fd4ca0: i32 = undef [ORD=4]

    0x2fb6da8: <multiple use>
    0x2fd4da0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd46a0: i32,ch = load 0x2fb6da8, 0x2fd4da0, 0x2fd4ca0<LD4[FixedStack-1]>

  0x2fd43a0: i32 = FrameIndex<0> [ORD=4]

  0x2fd47a0: i32 = Constant<0>

    0x2fb6da8: <multiple use>
    0x2fd4da0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd4ba0: ch = store 0x2fb6da8, 0x2fd4da0, 0x2fd43a0, 0x2fd4ca0<ST4[%1]> [ORD=4]

    0x2fd4ba0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd4aa0: i32,ch = load 0x2fd4ba0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=5]

  0x2fd49a0: i64 = Constant<8>

  0x2fd48a0: i32 = Constant<8> [ORD=6]

    0x2fd4ba0: <multiple use>
      0x2fd4aa0: <multiple use>
      0x2fd48a0: <multiple use>
    0x2fd45a0: i32 = add 0x2fd4aa0, 0x2fd48a0 [ORD=6]

    0x2fd4ca0: <multiple use>
  0x2fd44a0: i32,ch = load 0x2fd4ba0, 0x2fd45a0, 0x2fd4ca0<LD4[%3]> [ORD=7]

  0x2fd4ea0: i32 = GlobalAddress<[5 x i32]* @redefine_out_b> 0 [ORD=8]

      0x2fd4aa0: <multiple use>
      0x2fd44a0: <multiple use>
    0x2fd4fa0: ch = TokenFactor 0x2fd4aa0:1, 0x2fd44a0:1 [ORD=9]

    0x2fd44a0: <multiple use>
    0x2fd4ea0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd50a0: ch = store 0x2fd4fa0, 0x2fd44a0, 0x2fd4ea0, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9]

    0x2fd50a0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd51a0: i32,ch = load 0x2fd50a0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=10]

  0x2fe1010: i64 = Constant<12>

  0x2fe1110: i32 = Constant<12> [ORD=11]

    0x2fd50a0: <multiple use>
      0x2fd51a0: <multiple use>
      0x2fe1110: <multiple use>
    0x2fe1210: i32 = add 0x2fd51a0, 0x2fe1110 [ORD=11]

    0x2fd4ca0: <multiple use>
  0x2fe1310: i32,ch = load 0x2fd50a0, 0x2fe1210, 0x2fd4ca0<LD4[%6]> [ORD=12]

  0x2fe1410: i64 = Constant<4>

      0x2fd51a0: <multiple use>
      0x2fe1310: <multiple use>
    0x2fe1710: ch = TokenFactor 0x2fd51a0:1, 0x2fe1310:1 [ORD=14]

    0x2fe1310: <multiple use>
      0x2fd4ea0: <multiple use>
      0x2fe1510: i32 = Constant<4> [ORD=13]

    0x2fe1610: i32 = add 0x2fd4ea0, 0x2fe1510 [ORD=13]

    0x2fd4ca0: <multiple use>
  0x2fe1810: ch = store 0x2fe1710, 0x2fe1310, 0x2fe1610, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=14]

    0x2fe1810: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe1910: i32,ch = load 0x2fe1810, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=15]

  0x2fe1a10: i64 = Constant<16>

    0x2fe1810: <multiple use>
      0x2fe1910: <multiple use>
      0x2fe1b10: i32 = Constant<16> [ORD=16]

    0x2fe1c10: i32 = add 0x2fe1910, 0x2fe1b10 [ORD=16]

    0x2fd4ca0: <multiple use>
  0x2fe1d10: i32,ch = load 0x2fe1810, 0x2fe1c10, 0x2fd4ca0<LD4[%9]> [ORD=17]

      0x2fe1910: <multiple use>
      0x2fe1d10: <multiple use>
    0x2fe8fe0: ch = TokenFactor 0x2fe1910:1, 0x2fe1d10:1 [ORD=19]

    0x2fe1d10: <multiple use>
      0x2fd4ea0: <multiple use>
      0x2fd48a0: <multiple use>
    0x2fe1e10: i32 = add 0x2fd4ea0, 0x2fd48a0 [ORD=18]

    0x2fd4ca0: <multiple use>
  0x2fe90e0: ch = store 0x2fe8fe0, 0x2fe1d10, 0x2fe1e10, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2)]> [ORD=19]

    0x2fe90e0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe91e0: i32,ch = load 0x2fe90e0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=20]

  0x2fe92e0: i64 = Constant<20>

    0x2fe90e0: <multiple use>
      0x2fe91e0: <multiple use>
      0x2fe93e0: i32 = Constant<20> [ORD=21]

    0x2fe94e0: i32 = add 0x2fe91e0, 0x2fe93e0 [ORD=21]

    0x2fd4ca0: <multiple use>
  0x2fe95e0: i32,ch = load 0x2fe90e0, 0x2fe94e0, 0x2fd4ca0<LD4[%12]> [ORD=22]

        0x2fe91e0: <multiple use>
        0x2fe95e0: <multiple use>
      0x2fe97e0: ch = TokenFactor 0x2fe91e0:1, 0x2fe95e0:1 [ORD=24]

      0x2fe95e0: <multiple use>
        0x2fd4ea0: <multiple use>
        0x2fe1110: <multiple use>
      0x2fe96e0: i32 = add 0x2fd4ea0, 0x2fe1110 [ORD=23]

      0x2fd4ca0: <multiple use>
    0x2fe98e0: ch = store 0x2fe97e0, 0x2fe95e0, 0x2fe96e0, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 3)]> [ORD=24]

    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe99e0: i32,ch = load 0x2fe98e0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]>

      0x2fe91e0: <multiple use>
      0x2fe95e0: <multiple use>
    0x2fe97e0: ch = TokenFactor 0x2fe91e0:1, 0x2fe95e0:1 [ORD=24]

    0x2fe95e0: <multiple use>
      0x2fd4ea0: <multiple use>
      0x2fe1110: <multiple use>
    0x2fe96e0: i32 = add 0x2fd4ea0, 0x2fe1110 [ORD=23]

    0x2fd4ca0: <multiple use>
  0x2fe98e0: ch = store 0x2fe97e0, 0x2fe95e0, 0x2fe96e0, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 3)]> [ORD=24]


visiting load instruction   %16 = load i32* %15, align 4
with I type i32and sd value :0x2fe9ce0: i32 = add 0x2fe99e0, 0x2fe9be0
new load?0x2fe9de0: i32,ch = load 0x2fe98e0, 0x2fe9ce0, 0x2fd4ca0<LD4[%15]>
dag after load is dealt with?SelectionDAG has 46 nodes:
  0x2fb6da8: ch = EntryToken [ORD=4]

  0x2fd4da0: i32 = FrameIndex<-1> [ORD=4]

  0x2fd4ca0: i32 = undef [ORD=4]

    0x2fb6da8: <multiple use>
    0x2fd4da0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd46a0: i32,ch = load 0x2fb6da8, 0x2fd4da0, 0x2fd4ca0<LD4[FixedStack-1]>

  0x2fd43a0: i32 = FrameIndex<0> [ORD=4]

  0x2fd47a0: i32 = Constant<0>

    0x2fb6da8: <multiple use>
    0x2fd4da0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd4ba0: ch = store 0x2fb6da8, 0x2fd4da0, 0x2fd43a0, 0x2fd4ca0<ST4[%1]> [ORD=4]

    0x2fd4ba0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd4aa0: i32,ch = load 0x2fd4ba0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=5]

  0x2fd49a0: i64 = Constant<8>

  0x2fd48a0: i32 = Constant<8> [ORD=6]

    0x2fd4ba0: <multiple use>
      0x2fd4aa0: <multiple use>
      0x2fd48a0: <multiple use>
    0x2fd45a0: i32 = add 0x2fd4aa0, 0x2fd48a0 [ORD=6]

    0x2fd4ca0: <multiple use>
  0x2fd44a0: i32,ch = load 0x2fd4ba0, 0x2fd45a0, 0x2fd4ca0<LD4[%3]> [ORD=7]

  0x2fd4ea0: i32 = GlobalAddress<[5 x i32]* @redefine_out_b> 0 [ORD=8]

      0x2fd4aa0: <multiple use>
      0x2fd44a0: <multiple use>
    0x2fd4fa0: ch = TokenFactor 0x2fd4aa0:1, 0x2fd44a0:1 [ORD=9]

    0x2fd44a0: <multiple use>
    0x2fd4ea0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd50a0: ch = store 0x2fd4fa0, 0x2fd44a0, 0x2fd4ea0, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9]

    0x2fd50a0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd51a0: i32,ch = load 0x2fd50a0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=10]

  0x2fe1010: i64 = Constant<12>

  0x2fe1110: i32 = Constant<12> [ORD=11]

    0x2fd50a0: <multiple use>
      0x2fd51a0: <multiple use>
      0x2fe1110: <multiple use>
    0x2fe1210: i32 = add 0x2fd51a0, 0x2fe1110 [ORD=11]

    0x2fd4ca0: <multiple use>
  0x2fe1310: i32,ch = load 0x2fd50a0, 0x2fe1210, 0x2fd4ca0<LD4[%6]> [ORD=12]

  0x2fe1410: i64 = Constant<4>

      0x2fd51a0: <multiple use>
      0x2fe1310: <multiple use>
    0x2fe1710: ch = TokenFactor 0x2fd51a0:1, 0x2fe1310:1 [ORD=14]

    0x2fe1310: <multiple use>
      0x2fd4ea0: <multiple use>
      0x2fe1510: i32 = Constant<4> [ORD=13]

    0x2fe1610: i32 = add 0x2fd4ea0, 0x2fe1510 [ORD=13]

    0x2fd4ca0: <multiple use>
  0x2fe1810: ch = store 0x2fe1710, 0x2fe1310, 0x2fe1610, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=14]

    0x2fe1810: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe1910: i32,ch = load 0x2fe1810, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=15]

  0x2fe1a10: i64 = Constant<16>

    0x2fe1810: <multiple use>
      0x2fe1910: <multiple use>
      0x2fe1b10: i32 = Constant<16> [ORD=16]

    0x2fe1c10: i32 = add 0x2fe1910, 0x2fe1b10 [ORD=16]

    0x2fd4ca0: <multiple use>
  0x2fe1d10: i32,ch = load 0x2fe1810, 0x2fe1c10, 0x2fd4ca0<LD4[%9]> [ORD=17]

      0x2fe1910: <multiple use>
      0x2fe1d10: <multiple use>
    0x2fe8fe0: ch = TokenFactor 0x2fe1910:1, 0x2fe1d10:1 [ORD=19]

    0x2fe1d10: <multiple use>
      0x2fd4ea0: <multiple use>
      0x2fd48a0: <multiple use>
    0x2fe1e10: i32 = add 0x2fd4ea0, 0x2fd48a0 [ORD=18]

    0x2fd4ca0: <multiple use>
  0x2fe90e0: ch = store 0x2fe8fe0, 0x2fe1d10, 0x2fe1e10, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2)]> [ORD=19]

    0x2fe90e0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe91e0: i32,ch = load 0x2fe90e0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=20]

  0x2fe92e0: i64 = Constant<20>

    0x2fe90e0: <multiple use>
      0x2fe91e0: <multiple use>
      0x2fe93e0: i32 = Constant<20> [ORD=21]

    0x2fe94e0: i32 = add 0x2fe91e0, 0x2fe93e0 [ORD=21]

    0x2fd4ca0: <multiple use>
  0x2fe95e0: i32,ch = load 0x2fe90e0, 0x2fe94e0, 0x2fd4ca0<LD4[%12]> [ORD=22]

  0x2fe9ae0: i64 = Constant<24>

    0x2fe98e0: <multiple use>
        0x2fe98e0: <multiple use>
        0x2fd43a0: <multiple use>
        0x2fd4ca0: <multiple use>
      0x2fe99e0: i32,ch = load 0x2fe98e0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=25]

      0x2fe9be0: i32 = Constant<24> [ORD=26]

    0x2fe9ce0: i32 = add 0x2fe99e0, 0x2fe9be0 [ORD=26]

    0x2fd4ca0: <multiple use>
  0x2fe9de0: i32,ch = load 0x2fe98e0, 0x2fe9ce0, 0x2fd4ca0<LD4[%15]>

      0x2fe91e0: <multiple use>
      0x2fe95e0: <multiple use>
    0x2fe97e0: ch = TokenFactor 0x2fe91e0:1, 0x2fe95e0:1 [ORD=24]

    0x2fe95e0: <multiple use>
      0x2fd4ea0: <multiple use>
      0x2fe1110: <multiple use>
    0x2fe96e0: i32 = add 0x2fd4ea0, 0x2fe1110 [ORD=23]

    0x2fd4ca0: <multiple use>
  0x2fe98e0: ch = store 0x2fe97e0, 0x2fe95e0, 0x2fe96e0, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 3)]> [ORD=24]


store visit is after?  store i32 %16, i32* getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 4), align 4
I was here to add i32* getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 4)
whats in dag after store?SelectionDAG has 49 nodes:
  0x2fb6da8: ch = EntryToken [ORD=4]

  0x2fd4da0: i32 = FrameIndex<-1> [ORD=4]

  0x2fd4ca0: i32 = undef [ORD=4]

    0x2fb6da8: <multiple use>
    0x2fd4da0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd46a0: i32,ch = load 0x2fb6da8, 0x2fd4da0, 0x2fd4ca0<LD4[FixedStack-1]>

  0x2fd43a0: i32 = FrameIndex<0> [ORD=4]

  0x2fd47a0: i32 = Constant<0>

    0x2fb6da8: <multiple use>
    0x2fd4da0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd4ba0: ch = store 0x2fb6da8, 0x2fd4da0, 0x2fd43a0, 0x2fd4ca0<ST4[%1]> [ORD=4]

    0x2fd4ba0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd4aa0: i32,ch = load 0x2fd4ba0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=5]

  0x2fd49a0: i64 = Constant<8>

  0x2fd48a0: i32 = Constant<8> [ORD=6]

    0x2fd4ba0: <multiple use>
      0x2fd4aa0: <multiple use>
      0x2fd48a0: <multiple use>
    0x2fd45a0: i32 = add 0x2fd4aa0, 0x2fd48a0 [ORD=6]

    0x2fd4ca0: <multiple use>
  0x2fd44a0: i32,ch = load 0x2fd4ba0, 0x2fd45a0, 0x2fd4ca0<LD4[%3]> [ORD=7]

  0x2fd4ea0: i32 = GlobalAddress<[5 x i32]* @redefine_out_b> 0 [ORD=8]

      0x2fd4aa0: <multiple use>
      0x2fd44a0: <multiple use>
    0x2fd4fa0: ch = TokenFactor 0x2fd4aa0:1, 0x2fd44a0:1 [ORD=9]

    0x2fd44a0: <multiple use>
    0x2fd4ea0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd50a0: ch = store 0x2fd4fa0, 0x2fd44a0, 0x2fd4ea0, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9]

    0x2fd50a0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd51a0: i32,ch = load 0x2fd50a0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=10]

  0x2fe1010: i64 = Constant<12>

  0x2fe1110: i32 = Constant<12> [ORD=11]

    0x2fd50a0: <multiple use>
      0x2fd51a0: <multiple use>
      0x2fe1110: <multiple use>
    0x2fe1210: i32 = add 0x2fd51a0, 0x2fe1110 [ORD=11]

    0x2fd4ca0: <multiple use>
  0x2fe1310: i32,ch = load 0x2fd50a0, 0x2fe1210, 0x2fd4ca0<LD4[%6]> [ORD=12]

  0x2fe1410: i64 = Constant<4>

      0x2fd51a0: <multiple use>
      0x2fe1310: <multiple use>
    0x2fe1710: ch = TokenFactor 0x2fd51a0:1, 0x2fe1310:1 [ORD=14]

    0x2fe1310: <multiple use>
      0x2fd4ea0: <multiple use>
      0x2fe1510: i32 = Constant<4> [ORD=13]

    0x2fe1610: i32 = add 0x2fd4ea0, 0x2fe1510 [ORD=13]

    0x2fd4ca0: <multiple use>
  0x2fe1810: ch = store 0x2fe1710, 0x2fe1310, 0x2fe1610, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=14]

    0x2fe1810: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe1910: i32,ch = load 0x2fe1810, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=15]

  0x2fe1a10: i64 = Constant<16>

  0x2fe1b10: i32 = Constant<16> [ORD=16]

    0x2fe1810: <multiple use>
      0x2fe1910: <multiple use>
      0x2fe1b10: <multiple use>
    0x2fe1c10: i32 = add 0x2fe1910, 0x2fe1b10 [ORD=16]

    0x2fd4ca0: <multiple use>
  0x2fe1d10: i32,ch = load 0x2fe1810, 0x2fe1c10, 0x2fd4ca0<LD4[%9]> [ORD=17]

      0x2fe1910: <multiple use>
      0x2fe1d10: <multiple use>
    0x2fe8fe0: ch = TokenFactor 0x2fe1910:1, 0x2fe1d10:1 [ORD=19]

    0x2fe1d10: <multiple use>
      0x2fd4ea0: <multiple use>
      0x2fd48a0: <multiple use>
    0x2fe1e10: i32 = add 0x2fd4ea0, 0x2fd48a0 [ORD=18]

    0x2fd4ca0: <multiple use>
  0x2fe90e0: ch = store 0x2fe8fe0, 0x2fe1d10, 0x2fe1e10, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2)]> [ORD=19]

    0x2fe90e0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe91e0: i32,ch = load 0x2fe90e0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=20]

  0x2fe92e0: i64 = Constant<20>

    0x2fe90e0: <multiple use>
      0x2fe91e0: <multiple use>
      0x2fe93e0: i32 = Constant<20> [ORD=21]

    0x2fe94e0: i32 = add 0x2fe91e0, 0x2fe93e0 [ORD=21]

    0x2fd4ca0: <multiple use>
  0x2fe95e0: i32,ch = load 0x2fe90e0, 0x2fe94e0, 0x2fd4ca0<LD4[%12]> [ORD=22]

      0x2fe91e0: <multiple use>
      0x2fe95e0: <multiple use>
    0x2fe97e0: ch = TokenFactor 0x2fe91e0:1, 0x2fe95e0:1 [ORD=24]

    0x2fe95e0: <multiple use>
      0x2fd4ea0: <multiple use>
      0x2fe1110: <multiple use>
    0x2fe96e0: i32 = add 0x2fd4ea0, 0x2fe1110 [ORD=23]

    0x2fd4ca0: <multiple use>
  0x2fe98e0: ch = store 0x2fe97e0, 0x2fe95e0, 0x2fe96e0, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 3)]> [ORD=24]

    0x2fe98e0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe99e0: i32,ch = load 0x2fe98e0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=25]

  0x2fe9ae0: i64 = Constant<24>

    0x2fe98e0: <multiple use>
      0x2fe99e0: <multiple use>
      0x2fe9be0: i32 = Constant<24> [ORD=26]

    0x2fe9ce0: i32 = add 0x2fe99e0, 0x2fe9be0 [ORD=26]

    0x2fd4ca0: <multiple use>
  0x2fe9de0: i32,ch = load 0x2fe98e0, 0x2fe9ce0, 0x2fd4ca0<LD4[%15]> [ORD=27]

      0x2fe99e0: <multiple use>
      0x2fe9de0: <multiple use>
    0x2fdbfc0: ch = TokenFactor 0x2fe99e0:1, 0x2fe9de0:1 [ORD=29]

    0x2fe9de0: <multiple use>
      0x2fd4ea0: <multiple use>
      0x2fe1b10: <multiple use>
    0x2fdbec0: i32 = add 0x2fd4ea0, 0x2fe1b10 [ORD=28]

    0x2fd4ca0: <multiple use>
  0x2fdc0c0: ch = store 0x2fdbfc0, 0x2fe9de0, 0x2fdbec0, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 4)]> [ORD=29]


Initial selection DAG: BB#0 'redefine_start2:redefine_start2.newName01'
SelectionDAG has 49 nodes:
  0x2fb6da8: ch = EntryToken [ORD=4]

  0x2fd4da0: i32 = FrameIndex<-1> [ORD=4]

  0x2fd4ca0: i32 = undef [ORD=4]

    0x2fb6da8: <multiple use>
    0x2fd4da0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd46a0: i32,ch = load 0x2fb6da8, 0x2fd4da0, 0x2fd4ca0<LD4[FixedStack-1]>

  0x2fd43a0: i32 = FrameIndex<0> [ORD=4]

  0x2fd47a0: i32 = Constant<0>

    0x2fb6da8: <multiple use>
    0x2fd4da0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd4ba0: ch = store 0x2fb6da8, 0x2fd4da0, 0x2fd43a0, 0x2fd4ca0<ST4[%1]> [ORD=4]

    0x2fd4ba0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd4aa0: i32,ch = load 0x2fd4ba0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=5]

  0x2fd49a0: i64 = Constant<8>

  0x2fd48a0: i32 = Constant<8> [ORD=6]

    0x2fd4ba0: <multiple use>
      0x2fd4aa0: <multiple use>
      0x2fd48a0: <multiple use>
    0x2fd45a0: i32 = add 0x2fd4aa0, 0x2fd48a0 [ORD=6]

    0x2fd4ca0: <multiple use>
  0x2fd44a0: i32,ch = load 0x2fd4ba0, 0x2fd45a0, 0x2fd4ca0<LD4[%3]> [ORD=7]

  0x2fd4ea0: i32 = GlobalAddress<[5 x i32]* @redefine_out_b> 0 [ORD=8]

      0x2fd4aa0: <multiple use>
      0x2fd44a0: <multiple use>
    0x2fd4fa0: ch = TokenFactor 0x2fd4aa0:1, 0x2fd44a0:1 [ORD=9]

    0x2fd44a0: <multiple use>
    0x2fd4ea0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd50a0: ch = store 0x2fd4fa0, 0x2fd44a0, 0x2fd4ea0, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9]

    0x2fd50a0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd51a0: i32,ch = load 0x2fd50a0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=10]

  0x2fe1010: i64 = Constant<12>

  0x2fe1110: i32 = Constant<12> [ORD=11]

    0x2fd50a0: <multiple use>
      0x2fd51a0: <multiple use>
      0x2fe1110: <multiple use>
    0x2fe1210: i32 = add 0x2fd51a0, 0x2fe1110 [ORD=11]

    0x2fd4ca0: <multiple use>
  0x2fe1310: i32,ch = load 0x2fd50a0, 0x2fe1210, 0x2fd4ca0<LD4[%6]> [ORD=12]

  0x2fe1410: i64 = Constant<4>

      0x2fd51a0: <multiple use>
      0x2fe1310: <multiple use>
    0x2fe1710: ch = TokenFactor 0x2fd51a0:1, 0x2fe1310:1 [ORD=14]

    0x2fe1310: <multiple use>
      0x2fd4ea0: <multiple use>
      0x2fe1510: i32 = Constant<4> [ORD=13]

    0x2fe1610: i32 = add 0x2fd4ea0, 0x2fe1510 [ORD=13]

    0x2fd4ca0: <multiple use>
  0x2fe1810: ch = store 0x2fe1710, 0x2fe1310, 0x2fe1610, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=14]

    0x2fe1810: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe1910: i32,ch = load 0x2fe1810, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=15]

  0x2fe1a10: i64 = Constant<16>

  0x2fe1b10: i32 = Constant<16> [ORD=16]

    0x2fe1810: <multiple use>
      0x2fe1910: <multiple use>
      0x2fe1b10: <multiple use>
    0x2fe1c10: i32 = add 0x2fe1910, 0x2fe1b10 [ORD=16]

    0x2fd4ca0: <multiple use>
  0x2fe1d10: i32,ch = load 0x2fe1810, 0x2fe1c10, 0x2fd4ca0<LD4[%9]> [ORD=17]

      0x2fe1910: <multiple use>
      0x2fe1d10: <multiple use>
    0x2fe8fe0: ch = TokenFactor 0x2fe1910:1, 0x2fe1d10:1 [ORD=19]

    0x2fe1d10: <multiple use>
      0x2fd4ea0: <multiple use>
      0x2fd48a0: <multiple use>
    0x2fe1e10: i32 = add 0x2fd4ea0, 0x2fd48a0 [ORD=18]

    0x2fd4ca0: <multiple use>
  0x2fe90e0: ch = store 0x2fe8fe0, 0x2fe1d10, 0x2fe1e10, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2)]> [ORD=19]

    0x2fe90e0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe91e0: i32,ch = load 0x2fe90e0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=20]

  0x2fe92e0: i64 = Constant<20>

    0x2fe90e0: <multiple use>
      0x2fe91e0: <multiple use>
      0x2fe93e0: i32 = Constant<20> [ORD=21]

    0x2fe94e0: i32 = add 0x2fe91e0, 0x2fe93e0 [ORD=21]

    0x2fd4ca0: <multiple use>
  0x2fe95e0: i32,ch = load 0x2fe90e0, 0x2fe94e0, 0x2fd4ca0<LD4[%12]> [ORD=22]

      0x2fe91e0: <multiple use>
      0x2fe95e0: <multiple use>
    0x2fe97e0: ch = TokenFactor 0x2fe91e0:1, 0x2fe95e0:1 [ORD=24]

    0x2fe95e0: <multiple use>
      0x2fd4ea0: <multiple use>
      0x2fe1110: <multiple use>
    0x2fe96e0: i32 = add 0x2fd4ea0, 0x2fe1110 [ORD=23]

    0x2fd4ca0: <multiple use>
  0x2fe98e0: ch = store 0x2fe97e0, 0x2fe95e0, 0x2fe96e0, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 3)]> [ORD=24]

    0x2fe98e0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe99e0: i32,ch = load 0x2fe98e0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=25]

  0x2fe9ae0: i64 = Constant<24>

    0x2fe98e0: <multiple use>
      0x2fe99e0: <multiple use>
      0x2fe9be0: i32 = Constant<24> [ORD=26]

    0x2fe9ce0: i32 = add 0x2fe99e0, 0x2fe9be0 [ORD=26]

    0x2fd4ca0: <multiple use>
  0x2fe9de0: i32,ch = load 0x2fe98e0, 0x2fe9ce0, 0x2fd4ca0<LD4[%15]> [ORD=27]

      0x2fe99e0: <multiple use>
      0x2fe9de0: <multiple use>
    0x2fdbfc0: ch = TokenFactor 0x2fe99e0:1, 0x2fe9de0:1 [ORD=29]

    0x2fe9de0: <multiple use>
      0x2fd4ea0: <multiple use>
      0x2fe1b10: <multiple use>
    0x2fdbec0: i32 = add 0x2fd4ea0, 0x2fe1b10 [ORD=28]

    0x2fd4ca0: <multiple use>
  0x2fdc0c0: ch = store 0x2fdbfc0, 0x2fe9de0, 0x2fdbec0, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 4)]> [ORD=29]



Replacing.1 0x2fd4aa0: i32,ch = load 0x2fd4ba0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=5]

With: 0x2fd4da0: i32 = FrameIndex<-1> [ORD=4]
 and 1 other values

Replacing.1 0x2fd44a0: i32,ch = load 0x2fd4ba0, 0x2fd45a0, 0x2fd4ca0<LD4[%3](align=8)> [ORD=7]

With: 0x2fd44a0: i32,ch = load 0x2fd4ba0, 0x2fd45a0, 0x2fd4ca0<LD4[%3](align=8)> [ORD=7]
 and 1 other values

Replacing.3 0x2fd4fa0: ch = TokenFactor 0x2fd4ba0, 0x2fd44a0:1 [ORD=9]

With: 0x2fd44a0: i32,ch = load 0x2fd4ba0, 0x2fd45a0, 0x2fd4ca0<LD4[%3](align=8)> [ORD=7]


Replacing.3 0x2fd45a0: i32 = add 0x2fd4da0, 0x2fd48a0 [ORD=6]

With: 0x2fd46a0: i32 = or 0x2fd4da0, 0x2fd48a0

Optimized lowered selection DAG: BB#0 'redefine_start2:redefine_start2.newName01'
SelectionDAG has 39 nodes:
  0x2fd4da0: i32 = FrameIndex<-1> [ORD=4]

  0x2fd4ca0: i32 = undef [ORD=4]

  0x2fd43a0: i32 = FrameIndex<0> [ORD=4]

  0x2fd48a0: i32 = Constant<8> [ORD=6]

      0x2fb6da8: ch = EntryToken [ORD=4]

      0x2fd4da0: <multiple use>
      0x2fd43a0: <multiple use>
      0x2fd4ca0: <multiple use>
    0x2fd4ba0: ch = store 0x2fb6da8, 0x2fd4da0, 0x2fd43a0, 0x2fd4ca0<ST4[%1]> [ORD=4]

      0x2fd4da0: <multiple use>
      0x2fd48a0: <multiple use>
    0x2fd46a0: i32 = or 0x2fd4da0, 0x2fd48a0

    0x2fd4ca0: <multiple use>
  0x2fd44a0: i32,ch = load 0x2fd4ba0, 0x2fd46a0, 0x2fd4ca0<LD4[%3](align=8)> [ORD=7]

  0x2fd4ea0: i32 = GlobalAddress<[5 x i32]* @redefine_out_b> 0 [ORD=8]

    0x2fd44a0: <multiple use>
    0x2fd44a0: <multiple use>
    0x2fd4ea0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd50a0: ch = store 0x2fd44a0:1, 0x2fd44a0, 0x2fd4ea0, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9]

    0x2fd50a0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd51a0: i32,ch = load 0x2fd50a0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=10]

  0x2fe1110: i32 = Constant<12> [ORD=11]

    0x2fd50a0: <multiple use>
      0x2fd51a0: <multiple use>
      0x2fe1110: <multiple use>
    0x2fe1210: i32 = add 0x2fd51a0, 0x2fe1110 [ORD=11]

    0x2fd4ca0: <multiple use>
  0x2fe1310: i32,ch = load 0x2fd50a0, 0x2fe1210, 0x2fd4ca0<LD4[%6]> [ORD=12]

      0x2fd51a0: <multiple use>
      0x2fe1310: <multiple use>
    0x2fe1710: ch = TokenFactor 0x2fd51a0:1, 0x2fe1310:1 [ORD=14]

    0x2fe1310: <multiple use>
      0x2fd4ea0: <multiple use>
      0x2fe1510: i32 = Constant<4> [ORD=13]

    0x2fe1610: i32 = add 0x2fd4ea0, 0x2fe1510 [ORD=13]

    0x2fd4ca0: <multiple use>
  0x2fe1810: ch = store 0x2fe1710, 0x2fe1310, 0x2fe1610, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=14]

    0x2fe1810: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe1910: i32,ch = load 0x2fe1810, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=15]

  0x2fe1b10: i32 = Constant<16> [ORD=16]

    0x2fe1810: <multiple use>
      0x2fe1910: <multiple use>
      0x2fe1b10: <multiple use>
    0x2fe1c10: i32 = add 0x2fe1910, 0x2fe1b10 [ORD=16]

    0x2fd4ca0: <multiple use>
  0x2fe1d10: i32,ch = load 0x2fe1810, 0x2fe1c10, 0x2fd4ca0<LD4[%9]> [ORD=17]

      0x2fe1910: <multiple use>
      0x2fe1d10: <multiple use>
    0x2fe8fe0: ch = TokenFactor 0x2fe1910:1, 0x2fe1d10:1 [ORD=19]

    0x2fe1d10: <multiple use>
      0x2fd4ea0: <multiple use>
      0x2fd48a0: <multiple use>
    0x2fe1e10: i32 = add 0x2fd4ea0, 0x2fd48a0 [ORD=18]

    0x2fd4ca0: <multiple use>
  0x2fe90e0: ch = store 0x2fe8fe0, 0x2fe1d10, 0x2fe1e10, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2)]> [ORD=19]

    0x2fe90e0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe91e0: i32,ch = load 0x2fe90e0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=20]

    0x2fe90e0: <multiple use>
      0x2fe91e0: <multiple use>
      0x2fe93e0: i32 = Constant<20> [ORD=21]

    0x2fe94e0: i32 = add 0x2fe91e0, 0x2fe93e0 [ORD=21]

    0x2fd4ca0: <multiple use>
  0x2fe95e0: i32,ch = load 0x2fe90e0, 0x2fe94e0, 0x2fd4ca0<LD4[%12]> [ORD=22]

      0x2fe91e0: <multiple use>
      0x2fe95e0: <multiple use>
    0x2fe97e0: ch = TokenFactor 0x2fe91e0:1, 0x2fe95e0:1 [ORD=24]

    0x2fe95e0: <multiple use>
      0x2fd4ea0: <multiple use>
      0x2fe1110: <multiple use>
    0x2fe96e0: i32 = add 0x2fd4ea0, 0x2fe1110 [ORD=23]

    0x2fd4ca0: <multiple use>
  0x2fe98e0: ch = store 0x2fe97e0, 0x2fe95e0, 0x2fe96e0, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 3)]> [ORD=24]

    0x2fe98e0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe99e0: i32,ch = load 0x2fe98e0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=25]

    0x2fe98e0: <multiple use>
      0x2fe99e0: <multiple use>
      0x2fe9be0: i32 = Constant<24> [ORD=26]

    0x2fe9ce0: i32 = add 0x2fe99e0, 0x2fe9be0 [ORD=26]

    0x2fd4ca0: <multiple use>
  0x2fe9de0: i32,ch = load 0x2fe98e0, 0x2fe9ce0, 0x2fd4ca0<LD4[%15]> [ORD=27]

      0x2fe99e0: <multiple use>
      0x2fe9de0: <multiple use>
    0x2fdbfc0: ch = TokenFactor 0x2fe99e0:1, 0x2fe9de0:1 [ORD=29]

    0x2fe9de0: <multiple use>
      0x2fd4ea0: <multiple use>
      0x2fe1b10: <multiple use>
    0x2fdbec0: i32 = add 0x2fd4ea0, 0x2fe1b10 [ORD=28]

    0x2fd4ca0: <multiple use>
  0x2fdc0c0: ch = store 0x2fdbfc0, 0x2fe9de0, 0x2fdbec0, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 4)]> [ORD=29]


Legally typed node: 0x2fe9be0: i32 = Constant<24> [ORD=26] [ID=0]

Legally typed node: 0x2fe93e0: i32 = Constant<20> [ORD=21] [ID=0]

Legally typed node: 0x2fe1b10: i32 = Constant<16> [ORD=16] [ID=0]

Legally typed node: 0x2fe1510: i32 = Constant<4> [ORD=13] [ID=0]

Legally typed node: 0x2fe1110: i32 = Constant<12> [ORD=11] [ID=0]

Legally typed node: 0x2fd4ea0: i32 = GlobalAddress<[5 x i32]* @redefine_out_b> 0 [ORD=8] [ID=0]

Legally typed node: 0x2fe1610: i32 = add 0x2fd4ea0, 0x2fe1510 [ORD=13] [ID=0]

Legally typed node: 0x2fe96e0: i32 = add 0x2fd4ea0, 0x2fe1110 [ORD=23] [ID=0]

Legally typed node: 0x2fdbec0: i32 = add 0x2fd4ea0, 0x2fe1b10 [ORD=28] [ID=0]

Legally typed node: 0x2fd48a0: i32 = Constant<8> [ORD=6] [ID=0]

Legally typed node: 0x2fe1e10: i32 = add 0x2fd4ea0, 0x2fd48a0 [ORD=18] [ID=0]

Legally typed node: 0x2fd43a0: i32 = FrameIndex<0> [ORD=4] [ID=0]

Legally typed node: 0x2fd4ca0: i32 = undef [ORD=4] [ID=0]

Legally typed node: 0x2fd4da0: i32 = FrameIndex<-1> [ORD=4] [ID=0]

Legally typed node: 0x2fd46a0: i32 = or 0x2fd4da0, 0x2fd48a0 [ID=0]

Legally typed node: 0x2fb6da8: ch = EntryToken [ORD=4] [ID=0]

Legally typed node: 0x2fd4ba0: ch = store 0x2fb6da8, 0x2fd4da0, 0x2fd43a0, 0x2fd4ca0<ST4[%1]> [ORD=4] [ID=0]

Legally typed node: 0x2fd44a0: i32,ch = load 0x2fd4ba0, 0x2fd46a0, 0x2fd4ca0<LD4[%3](align=8)> [ORD=7] [ID=0]

Legally typed node: 0x2fd50a0: ch = store 0x2fd44a0:1, 0x2fd44a0, 0x2fd4ea0, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9] [ID=0]

Legally typed node: 0x2fd51a0: i32,ch = load 0x2fd50a0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=10] [ID=0]

Legally typed node: 0x2fe1210: i32 = add 0x2fd51a0, 0x2fe1110 [ORD=11] [ID=0]

Legally typed node: 0x2fe1310: i32,ch = load 0x2fd50a0, 0x2fe1210, 0x2fd4ca0<LD4[%6]> [ORD=12] [ID=0]

Legally typed node: 0x2fe1710: ch = TokenFactor 0x2fd51a0:1, 0x2fe1310:1 [ORD=14] [ID=0]

Legally typed node: 0x2fe1810: ch = store 0x2fe1710, 0x2fe1310, 0x2fe1610, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=14] [ID=0]

Legally typed node: 0x2fe1910: i32,ch = load 0x2fe1810, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=15] [ID=0]

Legally typed node: 0x2fe1c10: i32 = add 0x2fe1910, 0x2fe1b10 [ORD=16] [ID=0]

Legally typed node: 0x2fe1d10: i32,ch = load 0x2fe1810, 0x2fe1c10, 0x2fd4ca0<LD4[%9]> [ORD=17] [ID=0]

Legally typed node: 0x2fe8fe0: ch = TokenFactor 0x2fe1910:1, 0x2fe1d10:1 [ORD=19] [ID=0]

Legally typed node: 0x2fe90e0: ch = store 0x2fe8fe0, 0x2fe1d10, 0x2fe1e10, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2)]> [ORD=19] [ID=0]

Legally typed node: 0x2fe91e0: i32,ch = load 0x2fe90e0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=20] [ID=0]

Legally typed node: 0x2fe94e0: i32 = add 0x2fe91e0, 0x2fe93e0 [ORD=21] [ID=0]

Legally typed node: 0x2fe95e0: i32,ch = load 0x2fe90e0, 0x2fe94e0, 0x2fd4ca0<LD4[%12]> [ORD=22] [ID=0]

Legally typed node: 0x2fe97e0: ch = TokenFactor 0x2fe91e0:1, 0x2fe95e0:1 [ORD=24] [ID=0]

Legally typed node: 0x2fe98e0: ch = store 0x2fe97e0, 0x2fe95e0, 0x2fe96e0, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 3)]> [ORD=24] [ID=0]

Legally typed node: 0x2fe99e0: i32,ch = load 0x2fe98e0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=25] [ID=0]

Legally typed node: 0x2fe9ce0: i32 = add 0x2fe99e0, 0x2fe9be0 [ORD=26] [ID=0]

Legally typed node: 0x2fe9de0: i32,ch = load 0x2fe98e0, 0x2fe9ce0, 0x2fd4ca0<LD4[%15]> [ORD=27] [ID=0]

Legally typed node: 0x2fdbfc0: ch = TokenFactor 0x2fe99e0:1, 0x2fe9de0:1 [ORD=29] [ID=0]

Legally typed node: 0x2fdc0c0: ch = store 0x2fdbfc0, 0x2fe9de0, 0x2fdbec0, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 4)]> [ORD=29] [ID=0]

Legally typed node: 0x7fff9b4748f0: ch = handlenode 0x2fdc0c0 [ID=0]

Type-legalized selection DAG: BB#0 'redefine_start2:redefine_start2.newName01'
SelectionDAG has 39 nodes:
  0x2fd4da0: i32 = FrameIndex<-1> [ORD=4] [ID=-3]

  0x2fd4ca0: i32 = undef [ORD=4] [ID=-3]

  0x2fd43a0: i32 = FrameIndex<0> [ORD=4] [ID=-3]

  0x2fd48a0: i32 = Constant<8> [ORD=6] [ID=-3]

      0x2fb6da8: ch = EntryToken [ORD=4] [ID=-3]

      0x2fd4da0: <multiple use>
      0x2fd43a0: <multiple use>
      0x2fd4ca0: <multiple use>
    0x2fd4ba0: ch = store 0x2fb6da8, 0x2fd4da0, 0x2fd43a0, 0x2fd4ca0<ST4[%1]> [ORD=4] [ID=-3]

      0x2fd4da0: <multiple use>
      0x2fd48a0: <multiple use>
    0x2fd46a0: i32 = or 0x2fd4da0, 0x2fd48a0 [ID=-3]

    0x2fd4ca0: <multiple use>
  0x2fd44a0: i32,ch = load 0x2fd4ba0, 0x2fd46a0, 0x2fd4ca0<LD4[%3](align=8)> [ORD=7] [ID=-3]

  0x2fd4ea0: i32 = GlobalAddress<[5 x i32]* @redefine_out_b> 0 [ORD=8] [ID=-3]

    0x2fd44a0: <multiple use>
    0x2fd44a0: <multiple use>
    0x2fd4ea0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd50a0: ch = store 0x2fd44a0:1, 0x2fd44a0, 0x2fd4ea0, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9] [ID=-3]

    0x2fd50a0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd51a0: i32,ch = load 0x2fd50a0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=10] [ID=-3]

  0x2fe1110: i32 = Constant<12> [ORD=11] [ID=-3]

    0x2fd50a0: <multiple use>
      0x2fd51a0: <multiple use>
      0x2fe1110: <multiple use>
    0x2fe1210: i32 = add 0x2fd51a0, 0x2fe1110 [ORD=11] [ID=-3]

    0x2fd4ca0: <multiple use>
  0x2fe1310: i32,ch = load 0x2fd50a0, 0x2fe1210, 0x2fd4ca0<LD4[%6]> [ORD=12] [ID=-3]

      0x2fd51a0: <multiple use>
      0x2fe1310: <multiple use>
    0x2fe1710: ch = TokenFactor 0x2fd51a0:1, 0x2fe1310:1 [ORD=14] [ID=-3]

    0x2fe1310: <multiple use>
      0x2fd4ea0: <multiple use>
      0x2fe1510: i32 = Constant<4> [ORD=13] [ID=-3]

    0x2fe1610: i32 = add 0x2fd4ea0, 0x2fe1510 [ORD=13] [ID=-3]

    0x2fd4ca0: <multiple use>
  0x2fe1810: ch = store 0x2fe1710, 0x2fe1310, 0x2fe1610, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=14] [ID=-3]

    0x2fe1810: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe1910: i32,ch = load 0x2fe1810, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=15] [ID=-3]

  0x2fe1b10: i32 = Constant<16> [ORD=16] [ID=-3]

    0x2fe1810: <multiple use>
      0x2fe1910: <multiple use>
      0x2fe1b10: <multiple use>
    0x2fe1c10: i32 = add 0x2fe1910, 0x2fe1b10 [ORD=16] [ID=-3]

    0x2fd4ca0: <multiple use>
  0x2fe1d10: i32,ch = load 0x2fe1810, 0x2fe1c10, 0x2fd4ca0<LD4[%9]> [ORD=17] [ID=-3]

      0x2fe1910: <multiple use>
      0x2fe1d10: <multiple use>
    0x2fe8fe0: ch = TokenFactor 0x2fe1910:1, 0x2fe1d10:1 [ORD=19] [ID=-3]

    0x2fe1d10: <multiple use>
      0x2fd4ea0: <multiple use>
      0x2fd48a0: <multiple use>
    0x2fe1e10: i32 = add 0x2fd4ea0, 0x2fd48a0 [ORD=18] [ID=-3]

    0x2fd4ca0: <multiple use>
  0x2fe90e0: ch = store 0x2fe8fe0, 0x2fe1d10, 0x2fe1e10, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2)]> [ORD=19] [ID=-3]

    0x2fe90e0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe91e0: i32,ch = load 0x2fe90e0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=20] [ID=-3]

    0x2fe90e0: <multiple use>
      0x2fe91e0: <multiple use>
      0x2fe93e0: i32 = Constant<20> [ORD=21] [ID=-3]

    0x2fe94e0: i32 = add 0x2fe91e0, 0x2fe93e0 [ORD=21] [ID=-3]

    0x2fd4ca0: <multiple use>
  0x2fe95e0: i32,ch = load 0x2fe90e0, 0x2fe94e0, 0x2fd4ca0<LD4[%12]> [ORD=22] [ID=-3]

      0x2fe91e0: <multiple use>
      0x2fe95e0: <multiple use>
    0x2fe97e0: ch = TokenFactor 0x2fe91e0:1, 0x2fe95e0:1 [ORD=24] [ID=-3]

    0x2fe95e0: <multiple use>
      0x2fd4ea0: <multiple use>
      0x2fe1110: <multiple use>
    0x2fe96e0: i32 = add 0x2fd4ea0, 0x2fe1110 [ORD=23] [ID=-3]

    0x2fd4ca0: <multiple use>
  0x2fe98e0: ch = store 0x2fe97e0, 0x2fe95e0, 0x2fe96e0, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 3)]> [ORD=24] [ID=-3]

    0x2fe98e0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe99e0: i32,ch = load 0x2fe98e0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=25] [ID=-3]

    0x2fe98e0: <multiple use>
      0x2fe99e0: <multiple use>
      0x2fe9be0: i32 = Constant<24> [ORD=26] [ID=-3]

    0x2fe9ce0: i32 = add 0x2fe99e0, 0x2fe9be0 [ORD=26] [ID=-3]

    0x2fd4ca0: <multiple use>
  0x2fe9de0: i32,ch = load 0x2fe98e0, 0x2fe9ce0, 0x2fd4ca0<LD4[%15]> [ORD=27] [ID=-3]

      0x2fe99e0: <multiple use>
      0x2fe9de0: <multiple use>
    0x2fdbfc0: ch = TokenFactor 0x2fe99e0:1, 0x2fe9de0:1 [ORD=29] [ID=-3]

    0x2fe9de0: <multiple use>
      0x2fd4ea0: <multiple use>
      0x2fe1b10: <multiple use>
    0x2fdbec0: i32 = add 0x2fd4ea0, 0x2fe1b10 [ORD=28] [ID=-3]

    0x2fd4ca0: <multiple use>
  0x2fdc0c0: ch = store 0x2fdbfc0, 0x2fe9de0, 0x2fdbec0, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 4)]> [ORD=29] [ID=-3]


Legalized selection DAG: BB#0 'redefine_start2:redefine_start2.newName01'
SelectionDAG has 43 nodes:
  0x2fd4da0: i32 = FrameIndex<-1> [ORD=4] [ID=1]

  0x2fd4ca0: i32 = undef [ORD=4] [ID=2]

  0x2fd43a0: i32 = FrameIndex<0> [ORD=4] [ID=3]

  0x2fd48a0: i32 = Constant<8> [ORD=6] [ID=4]

  0x2fe1110: i32 = Constant<12> [ORD=11] [ID=6]

  0x2fe1b10: i32 = Constant<16> [ORD=16] [ID=8]

      0x2fb6da8: ch = EntryToken [ORD=4] [ID=0]

      0x2fd4da0: <multiple use>
      0x2fd43a0: <multiple use>
      0x2fd4ca0: <multiple use>
    0x2fd4ba0: ch = store 0x2fb6da8, 0x2fd4da0, 0x2fd43a0, 0x2fd4ca0<ST4[%1]> [ORD=4] [ID=11]

      0x2fd4da0: <multiple use>
      0x2fd48a0: <multiple use>
    0x2fd46a0: i32 = or 0x2fd4da0, 0x2fd48a0 [ID=12]

    0x2fd4ca0: <multiple use>
  0x2fd44a0: i32,ch = load 0x2fd4ba0, 0x2fd46a0, 0x2fd4ca0<LD4[%3](align=8)> [ORD=7] [ID=17]

    0x2fd44a0: <multiple use>
    0x2fd44a0: <multiple use>
    0x2fd49a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd50a0: ch = store 0x2fd44a0:1, 0x2fd44a0, 0x2fd49a0, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9] [ID=18]

    0x2fd50a0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd51a0: i32,ch = load 0x2fd50a0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=10] [ID=19]

    0x2fd50a0: <multiple use>
      0x2fd51a0: <multiple use>
      0x2fe1110: <multiple use>
    0x2fe1210: i32 = add 0x2fd51a0, 0x2fe1110 [ORD=11] [ID=20]

    0x2fd4ca0: <multiple use>
  0x2fe1310: i32,ch = load 0x2fd50a0, 0x2fe1210, 0x2fd4ca0<LD4[%6]> [ORD=12] [ID=21]

      0x2fd51a0: <multiple use>
      0x2fe1310: <multiple use>
    0x2fe1710: ch = TokenFactor 0x2fd51a0:1, 0x2fe1310:1 [ORD=14] [ID=22]

    0x2fe1310: <multiple use>
      0x2fd49a0: <multiple use>
      0x2fe1510: i32 = Constant<4> [ORD=13] [ID=7]

    0x2fe1610: i32 = add 0x2fd49a0, 0x2fe1510 [ORD=13] [ID=15]

    0x2fd4ca0: <multiple use>
  0x2fe1810: ch = store 0x2fe1710, 0x2fe1310, 0x2fe1610, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=14] [ID=23]

    0x2fe1810: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe1910: i32,ch = load 0x2fe1810, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=15] [ID=24]

    0x2fe1810: <multiple use>
      0x2fe1910: <multiple use>
      0x2fe1b10: <multiple use>
    0x2fe1c10: i32 = add 0x2fe1910, 0x2fe1b10 [ORD=16] [ID=25]

    0x2fd4ca0: <multiple use>
  0x2fe1d10: i32,ch = load 0x2fe1810, 0x2fe1c10, 0x2fd4ca0<LD4[%9]> [ORD=17] [ID=26]

      0x2fe1910: <multiple use>
      0x2fe1d10: <multiple use>
    0x2fe8fe0: ch = TokenFactor 0x2fe1910:1, 0x2fe1d10:1 [ORD=19] [ID=27]

    0x2fe1d10: <multiple use>
      0x2fd49a0: <multiple use>
      0x2fd48a0: <multiple use>
    0x2fe1e10: i32 = add 0x2fd49a0, 0x2fd48a0 [ORD=18] [ID=13]

    0x2fd4ca0: <multiple use>
  0x2fe90e0: ch = store 0x2fe8fe0, 0x2fe1d10, 0x2fe1e10, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2)]> [ORD=19] [ID=28]

    0x2fe90e0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe91e0: i32,ch = load 0x2fe90e0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=20] [ID=29]

    0x2fe90e0: <multiple use>
      0x2fe91e0: <multiple use>
      0x2fe93e0: i32 = Constant<20> [ORD=21] [ID=9]

    0x2fe94e0: i32 = add 0x2fe91e0, 0x2fe93e0 [ORD=21] [ID=30]

    0x2fd4ca0: <multiple use>
  0x2fe95e0: i32,ch = load 0x2fe90e0, 0x2fe94e0, 0x2fd4ca0<LD4[%12]> [ORD=22] [ID=31]

      0x2fe91e0: <multiple use>
      0x2fe95e0: <multiple use>
    0x2fe97e0: ch = TokenFactor 0x2fe91e0:1, 0x2fe95e0:1 [ORD=24] [ID=32]

    0x2fe95e0: <multiple use>
      0x2fd49a0: <multiple use>
      0x2fe1110: <multiple use>
    0x2fe96e0: i32 = add 0x2fd49a0, 0x2fe1110 [ORD=23] [ID=14]

    0x2fd4ca0: <multiple use>
  0x2fe98e0: ch = store 0x2fe97e0, 0x2fe95e0, 0x2fe96e0, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 3)]> [ORD=24] [ID=33]

    0x2fe98e0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe99e0: i32,ch = load 0x2fe98e0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=25] [ID=34]

    0x2fe98e0: <multiple use>
      0x2fe99e0: <multiple use>
      0x2fe9be0: i32 = Constant<24> [ORD=26] [ID=10]

    0x2fe9ce0: i32 = add 0x2fe99e0, 0x2fe9be0 [ORD=26] [ID=35]

    0x2fd4ca0: <multiple use>
  0x2fe9de0: i32,ch = load 0x2fe98e0, 0x2fe9ce0, 0x2fd4ca0<LD4[%15]> [ORD=27] [ID=36]

      0x2fd47a0: i32 = TargetGlobalAddress<[5 x i32]* @redefine_out_b> 0 [TF=2]

    0x2fd4fa0: i32 = REDEFINEISD::Hi 0x2fd47a0

      0x2fd45a0: i32 = TargetGlobalAddress<[5 x i32]* @redefine_out_b> 0 [TF=3]

    0x2fd4aa0: i32 = REDEFINEISD::Lo 0x2fd45a0

  0x2fd49a0: i32 = add 0x2fd4fa0, 0x2fd4aa0

      0x2fe99e0: <multiple use>
      0x2fe9de0: <multiple use>
    0x2fdbfc0: ch = TokenFactor 0x2fe99e0:1, 0x2fe9de0:1 [ORD=29] [ID=37]

    0x2fe9de0: <multiple use>
      0x2fd49a0: <multiple use>
      0x2fe1b10: <multiple use>
    0x2fdbec0: i32 = add 0x2fd49a0, 0x2fe1b10 [ORD=28] [ID=16]

    0x2fd4ca0: <multiple use>
  0x2fdc0c0: ch = store 0x2fdbfc0, 0x2fe9de0, 0x2fdbec0, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 4)]> [ORD=29] [ID=38]


Optimized legalized selection DAG: BB#0 'redefine_start2:redefine_start2.newName01'
SelectionDAG has 43 nodes:
  0x2fd4da0: i32 = FrameIndex<-1> [ORD=4] [ID=1]

  0x2fd4ca0: i32 = undef [ORD=4] [ID=2]

  0x2fd43a0: i32 = FrameIndex<0> [ORD=4] [ID=3]

  0x2fd48a0: i32 = Constant<8> [ORD=6] [ID=4]

  0x2fe1110: i32 = Constant<12> [ORD=11] [ID=6]

  0x2fe1b10: i32 = Constant<16> [ORD=16] [ID=8]

      0x2fb6da8: ch = EntryToken [ORD=4] [ID=0]

      0x2fd4da0: <multiple use>
      0x2fd43a0: <multiple use>
      0x2fd4ca0: <multiple use>
    0x2fd4ba0: ch = store 0x2fb6da8, 0x2fd4da0, 0x2fd43a0, 0x2fd4ca0<ST4[%1]> [ORD=4] [ID=11]

      0x2fd4da0: <multiple use>
      0x2fd48a0: <multiple use>
    0x2fd46a0: i32 = or 0x2fd4da0, 0x2fd48a0 [ID=12]

    0x2fd4ca0: <multiple use>
  0x2fd44a0: i32,ch = load 0x2fd4ba0, 0x2fd46a0, 0x2fd4ca0<LD4[%3](align=8)> [ORD=7] [ID=17]

    0x2fd44a0: <multiple use>
    0x2fd44a0: <multiple use>
    0x2fd49a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd50a0: ch = store 0x2fd44a0:1, 0x2fd44a0, 0x2fd49a0, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9] [ID=18]

    0x2fd50a0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd51a0: i32,ch = load 0x2fd50a0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=10] [ID=19]

    0x2fd50a0: <multiple use>
      0x2fd51a0: <multiple use>
      0x2fe1110: <multiple use>
    0x2fe1210: i32 = add 0x2fd51a0, 0x2fe1110 [ORD=11] [ID=20]

    0x2fd4ca0: <multiple use>
  0x2fe1310: i32,ch = load 0x2fd50a0, 0x2fe1210, 0x2fd4ca0<LD4[%6]> [ORD=12] [ID=21]

      0x2fd51a0: <multiple use>
      0x2fe1310: <multiple use>
    0x2fe1710: ch = TokenFactor 0x2fd51a0:1, 0x2fe1310:1 [ORD=14] [ID=22]

    0x2fe1310: <multiple use>
      0x2fd49a0: <multiple use>
      0x2fe1510: i32 = Constant<4> [ORD=13] [ID=7]

    0x2fe1610: i32 = add 0x2fd49a0, 0x2fe1510 [ORD=13] [ID=15]

    0x2fd4ca0: <multiple use>
  0x2fe1810: ch = store 0x2fe1710, 0x2fe1310, 0x2fe1610, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=14] [ID=23]

    0x2fe1810: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe1910: i32,ch = load 0x2fe1810, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=15] [ID=24]

    0x2fe1810: <multiple use>
      0x2fe1910: <multiple use>
      0x2fe1b10: <multiple use>
    0x2fe1c10: i32 = add 0x2fe1910, 0x2fe1b10 [ORD=16] [ID=25]

    0x2fd4ca0: <multiple use>
  0x2fe1d10: i32,ch = load 0x2fe1810, 0x2fe1c10, 0x2fd4ca0<LD4[%9]> [ORD=17] [ID=26]

      0x2fe1910: <multiple use>
      0x2fe1d10: <multiple use>
    0x2fe8fe0: ch = TokenFactor 0x2fe1910:1, 0x2fe1d10:1 [ORD=19] [ID=27]

    0x2fe1d10: <multiple use>
      0x2fd49a0: <multiple use>
      0x2fd48a0: <multiple use>
    0x2fe1e10: i32 = add 0x2fd49a0, 0x2fd48a0 [ORD=18] [ID=13]

    0x2fd4ca0: <multiple use>
  0x2fe90e0: ch = store 0x2fe8fe0, 0x2fe1d10, 0x2fe1e10, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2)]> [ORD=19] [ID=28]

    0x2fe90e0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe91e0: i32,ch = load 0x2fe90e0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=20] [ID=29]

    0x2fe90e0: <multiple use>
      0x2fe91e0: <multiple use>
      0x2fe93e0: i32 = Constant<20> [ORD=21] [ID=9]

    0x2fe94e0: i32 = add 0x2fe91e0, 0x2fe93e0 [ORD=21] [ID=30]

    0x2fd4ca0: <multiple use>
  0x2fe95e0: i32,ch = load 0x2fe90e0, 0x2fe94e0, 0x2fd4ca0<LD4[%12]> [ORD=22] [ID=31]

      0x2fe91e0: <multiple use>
      0x2fe95e0: <multiple use>
    0x2fe97e0: ch = TokenFactor 0x2fe91e0:1, 0x2fe95e0:1 [ORD=24] [ID=32]

    0x2fe95e0: <multiple use>
      0x2fd49a0: <multiple use>
      0x2fe1110: <multiple use>
    0x2fe96e0: i32 = add 0x2fd49a0, 0x2fe1110 [ORD=23] [ID=14]

    0x2fd4ca0: <multiple use>
  0x2fe98e0: ch = store 0x2fe97e0, 0x2fe95e0, 0x2fe96e0, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 3)]> [ORD=24] [ID=33]

    0x2fe98e0: <multiple use>
    0x2fd43a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe99e0: i32,ch = load 0x2fe98e0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=25] [ID=34]

    0x2fe98e0: <multiple use>
      0x2fe99e0: <multiple use>
      0x2fe9be0: i32 = Constant<24> [ORD=26] [ID=10]

    0x2fe9ce0: i32 = add 0x2fe99e0, 0x2fe9be0 [ORD=26] [ID=35]

    0x2fd4ca0: <multiple use>
  0x2fe9de0: i32,ch = load 0x2fe98e0, 0x2fe9ce0, 0x2fd4ca0<LD4[%15]> [ORD=27] [ID=36]

      0x2fd47a0: i32 = TargetGlobalAddress<[5 x i32]* @redefine_out_b> 0 [TF=2]

    0x2fd4fa0: i32 = REDEFINEISD::Hi 0x2fd47a0

      0x2fd45a0: i32 = TargetGlobalAddress<[5 x i32]* @redefine_out_b> 0 [TF=3]

    0x2fd4aa0: i32 = REDEFINEISD::Lo 0x2fd45a0

  0x2fd49a0: i32 = add 0x2fd4fa0, 0x2fd4aa0

      0x2fe99e0: <multiple use>
      0x2fe9de0: <multiple use>
    0x2fdbfc0: ch = TokenFactor 0x2fe99e0:1, 0x2fe9de0:1 [ORD=29] [ID=37]

    0x2fe9de0: <multiple use>
      0x2fd49a0: <multiple use>
      0x2fe1b10: <multiple use>
    0x2fdbec0: i32 = add 0x2fd49a0, 0x2fe1b10 [ORD=28] [ID=16]

    0x2fd4ca0: <multiple use>
  0x2fdc0c0: ch = store 0x2fdbfc0, 0x2fe9de0, 0x2fdbec0, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 4)]> [ORD=29] [ID=38]


===== Instruction selection begins: BB#0 'redefine_start2.newName01'
ISEL: Starting pattern match on root node: 0x2fdc0c0: ch = store 0x2fdbfc0, 0x2fe9de0, 0x2fdbec0, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 4)]> [ORD=29] [ID=42]

  Initial Opcode index to 178
  Morphed node: 0x2fdc0c0: ch = SW 0x2fe9de0, 0x2fd49a0, 0x2fd4ea0, 0x2fdbfc0<Mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 4)]> [ORD=29]

ISEL: Match complete!
=> 0x2fdc0c0: ch = SW 0x2fe9de0, 0x2fd49a0, 0x2fd4ea0, 0x2fdbfc0<Mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 4)]> [ORD=29]

=> 0x2fdbfc0: ch = TokenFactor 0x2fe99e0:1, 0x2fe9de0:1 [ORD=29]

ISEL: Starting pattern match on root node: 0x2fe9de0: i32,ch = load 0x2fe98e0, 0x2fe9ce0, 0x2fd4ca0<LD4[%15]> [ORD=27] [ID=40]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2fe9de0: i32,ch = LW 0x2fe99e0, 0x2fdbec0, 0x2fe98e0<Mem:LD4[%15]> [ORD=27]

ISEL: Match complete!
=> 0x2fe9de0: i32,ch = LW 0x2fe99e0, 0x2fdbec0, 0x2fe98e0<Mem:LD4[%15]> [ORD=27]

ISEL: Starting pattern match on root node: 0x2fe99e0: i32,ch = load 0x2fe98e0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=25] [ID=38]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2fe99e0: i32,ch = LW 0x2fd43a0, 0x2fe9be0, 0x2fe98e0<Mem:LD4[%1]> [ORD=25]

ISEL: Match complete!
=> 0x2fe99e0: i32,ch = LW 0x2fd43a0, 0x2fe9be0, 0x2fe98e0<Mem:LD4[%1]> [ORD=25]

ISEL: Starting pattern match on root node: 0x2fe98e0: ch = store 0x2fe97e0, 0x2fe95e0, 0x2fe96e0, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 3)]> [ORD=24] [ID=37]

  Initial Opcode index to 178
  Morphed node: 0x2fe98e0: ch = SW 0x2fe95e0, 0x2fd49a0, 0x2fe9ce0, 0x2fe97e0<Mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 3)]> [ORD=24]

ISEL: Match complete!
=> 0x2fe98e0: ch = SW 0x2fe95e0, 0x2fd49a0, 0x2fe9ce0, 0x2fe97e0<Mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 3)]> [ORD=24]

=> 0x2fe97e0: ch = TokenFactor 0x2fe91e0:1, 0x2fe95e0:1 [ORD=24]

ISEL: Starting pattern match on root node: 0x2fe95e0: i32,ch = load 0x2fe90e0, 0x2fe94e0, 0x2fd4ca0<LD4[%12]> [ORD=22] [ID=35]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2fe95e0: i32,ch = LW 0x2fe91e0, 0x2fe96e0, 0x2fe90e0<Mem:LD4[%12]> [ORD=22]

ISEL: Match complete!
=> 0x2fe95e0: i32,ch = LW 0x2fe91e0, 0x2fe96e0, 0x2fe90e0<Mem:LD4[%12]> [ORD=22]

ISEL: Starting pattern match on root node: 0x2fe91e0: i32,ch = load 0x2fe90e0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=20] [ID=33]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2fe91e0: i32,ch = LW 0x2fd43a0, 0x2fe9be0, 0x2fe90e0<Mem:LD4[%1]> [ORD=20]

ISEL: Match complete!
=> 0x2fe91e0: i32,ch = LW 0x2fd43a0, 0x2fe9be0, 0x2fe90e0<Mem:LD4[%1]> [ORD=20]

ISEL: Starting pattern match on root node: 0x2fe90e0: ch = store 0x2fe8fe0, 0x2fe1d10, 0x2fe1e10, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2)]> [ORD=19] [ID=32]

  Initial Opcode index to 178
  Morphed node: 0x2fe90e0: ch = SW 0x2fe1d10, 0x2fd49a0, 0x2fe93e0, 0x2fe8fe0<Mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2)]> [ORD=19]

ISEL: Match complete!
=> 0x2fe90e0: ch = SW 0x2fe1d10, 0x2fd49a0, 0x2fe93e0, 0x2fe8fe0<Mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2)]> [ORD=19]

=> 0x2fe8fe0: ch = TokenFactor 0x2fe1910:1, 0x2fe1d10:1 [ORD=19]

ISEL: Starting pattern match on root node: 0x2fe1d10: i32,ch = load 0x2fe1810, 0x2fe1c10, 0x2fd4ca0<LD4[%9]> [ORD=17] [ID=30]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2fe1d10: i32,ch = LW 0x2fe1910, 0x2fd4ea0, 0x2fe1810<Mem:LD4[%9]> [ORD=17]

ISEL: Match complete!
=> 0x2fe1d10: i32,ch = LW 0x2fe1910, 0x2fd4ea0, 0x2fe1810<Mem:LD4[%9]> [ORD=17]

ISEL: Starting pattern match on root node: 0x2fe1910: i32,ch = load 0x2fe1810, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=15] [ID=28]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2fe1910: i32,ch = LW 0x2fd43a0, 0x2fe9be0, 0x2fe1810<Mem:LD4[%1]> [ORD=15]

ISEL: Match complete!
=> 0x2fe1910: i32,ch = LW 0x2fd43a0, 0x2fe9be0, 0x2fe1810<Mem:LD4[%1]> [ORD=15]

ISEL: Starting pattern match on root node: 0x2fe1810: ch = store 0x2fe1710, 0x2fe1310, 0x2fe1610, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=14] [ID=27]

  Initial Opcode index to 178
  Morphed node: 0x2fe1810: ch = SW 0x2fe1310, 0x2fd49a0, 0x2fe1b10, 0x2fe1710<Mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=14]

ISEL: Match complete!
=> 0x2fe1810: ch = SW 0x2fe1310, 0x2fd49a0, 0x2fe1b10, 0x2fe1710<Mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=14]

=> 0x2fe1710: ch = TokenFactor 0x2fd51a0:1, 0x2fe1310:1 [ORD=14]

ISEL: Starting pattern match on root node: 0x2fe1310: i32,ch = load 0x2fd50a0, 0x2fe1210, 0x2fd4ca0<LD4[%6]> [ORD=12] [ID=25]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2fe1310: i32,ch = LW 0x2fd51a0, 0x2fe9ce0, 0x2fd50a0<Mem:LD4[%6]> [ORD=12]

ISEL: Match complete!
=> 0x2fe1310: i32,ch = LW 0x2fd51a0, 0x2fe9ce0, 0x2fd50a0<Mem:LD4[%6]> [ORD=12]

ISEL: Starting pattern match on root node: 0x2fd51a0: i32,ch = load 0x2fd50a0, 0x2fd43a0, 0x2fd4ca0<LD4[%1]> [ORD=10] [ID=23]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2fd51a0: i32,ch = LW 0x2fd43a0, 0x2fe9be0, 0x2fd50a0<Mem:LD4[%1]> [ORD=10]

ISEL: Match complete!
=> 0x2fd51a0: i32,ch = LW 0x2fd43a0, 0x2fe9be0, 0x2fd50a0<Mem:LD4[%1]> [ORD=10]

ISEL: Starting pattern match on root node: 0x2fd50a0: ch = store 0x2fd44a0:1, 0x2fd44a0, 0x2fd49a0, 0x2fd4ca0<ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9] [ID=18]

  Initial Opcode index to 178
  Morphed node: 0x2fd50a0: ch = SW 0x2fd44a0, 0x2fd49a0, 0x2fe9be0, 0x2fd44a0:1<Mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9]

ISEL: Match complete!
=> 0x2fd50a0: ch = SW 0x2fd44a0, 0x2fd49a0, 0x2fe9be0, 0x2fd44a0:1<Mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9]

ISEL: Starting pattern match on root node: 0x2fd49a0: i32 = add 0x2fd4fa0, 0x2fd4aa0 [ID=17]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x2fd49a0: i32 = ADD 0x2fd4aa0, 0x2fd4fa0

ISEL: Match complete!
=> 0x2fd49a0: i32 = ADD 0x2fd4aa0, 0x2fd4fa0

ISEL: Starting pattern match on root node: 0x2fd44a0: i32,ch = load 0x2fd4ba0, 0x2fd46a0, 0x2fd4ca0<LD4[%3](align=8)> [ORD=7] [ID=16]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2fd44a0: i32,ch = LW 0x2fd4da0, 0x2fe93e0, 0x2fd4ba0<Mem:LD4[%3](align=8)> [ORD=7]

ISEL: Match complete!
=> 0x2fd44a0: i32,ch = LW 0x2fd4da0, 0x2fe93e0, 0x2fd4ba0<Mem:LD4[%3](align=8)> [ORD=7]

ISEL: Starting pattern match on root node: 0x2fd4aa0: i32 = REDEFINEISD::Lo 0x2fd45a0 [ID=15]

  Initial Opcode index to 1204
  Morphed node: 0x2fd4aa0: i32 = ADDI 0x2fd48a0, 0x2fd45a0

ISEL: Match complete!
=> 0x2fd4aa0: i32 = ADDI 0x2fd48a0, 0x2fd45a0

ISEL: Starting pattern match on root node: 0x2fd4fa0: i32 = REDEFINEISD::Hi 0x2fd47a0 [ID=14]

  Initial Opcode index to 1186
  Morphed node: 0x2fd4fa0: i32 = LUI 0x2fd47a0

ISEL: Match complete!
=> 0x2fd4fa0: i32 = LUI 0x2fd47a0

ISEL: Starting pattern match on root node: 0x2fd4ba0: ch = store 0x2fb6da8, 0x2fd4da0, 0x2fd43a0, 0x2fd4ca0<ST4[%1]> [ORD=4] [ID=12]

  Initial Opcode index to 178
  Morphed node: 0x2fd4ba0: ch = SW 0x2fd4da0, 0x2fd43a0, 0x2fe9be0, 0x2fb6da8<Mem:ST4[%1]> [ORD=4]

ISEL: Match complete!
=> 0x2fd4ba0: ch = SW 0x2fd4da0, 0x2fd43a0, 0x2fe9be0, 0x2fb6da8<Mem:ST4[%1]> [ORD=4]

=> 0x2fd45a0: i32 = TargetGlobalAddress<[5 x i32]* @redefine_out_b> 0 [TF=3]

=> 0x2fd47a0: i32 = TargetGlobalAddress<[5 x i32]* @redefine_out_b> 0 [TF=2]

=> 0x2fb6da8: ch = EntryToken [ORD=4]

===== Instruction selection ends:
Selected selection DAG: BB#0 'redefine_start2:redefine_start2.newName01'
SelectionDAG has 38 nodes:
    0x2fe1510: <multiple use>
    0x2fe93e0: <multiple use>
      0x2fe1510: <multiple use>
      0x2fd46a0: <multiple use>
      0x2fe9be0: <multiple use>
      0x2fb6da8: ch = EntryToken [ORD=4]

    0x2fd4ba0: ch = SW 0x2fe1510, 0x2fd46a0, 0x2fe9be0, 0x2fb6da8<Mem:ST4[%1]> [ORD=4]

  0x2fd44a0: i32,ch = LW 0x2fe1510, 0x2fe93e0, 0x2fd4ba0<Mem:LD4[%3](align=8)> [ORD=7]

      0x2fd48a0: i32 = Register %zero

      0x2fd45a0: i32 = TargetGlobalAddress<[5 x i32]* @redefine_out_b> 0 [TF=3]

    0x2fd4aa0: i32 = ADDI 0x2fd48a0, 0x2fd45a0

      0x2fd47a0: i32 = TargetGlobalAddress<[5 x i32]* @redefine_out_b> 0 [TF=2]

    0x2fd4fa0: i32 = LUI 0x2fd47a0

  0x2fd49a0: i32 = ADD 0x2fd4aa0, 0x2fd4fa0

    0x2fd44a0: <multiple use>
    0x2fd49a0: <multiple use>
    0x2fe9be0: <multiple use>
    0x2fd44a0: <multiple use>
  0x2fd50a0: ch = SW 0x2fd44a0, 0x2fd49a0, 0x2fe9be0, 0x2fd44a0:1<Mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9]

    0x2fd46a0: <multiple use>
    0x2fe9be0: <multiple use>
    0x2fd50a0: <multiple use>
  0x2fd51a0: i32,ch = LW 0x2fd46a0, 0x2fe9be0, 0x2fd50a0<Mem:LD4[%1]> [ORD=10]

    0x2fd51a0: <multiple use>
    0x2fe9ce0: <multiple use>
    0x2fd50a0: <multiple use>
  0x2fe1310: i32,ch = LW 0x2fd51a0, 0x2fe9ce0, 0x2fd50a0<Mem:LD4[%6]> [ORD=12]

    0x2fe1310: <multiple use>
    0x2fd49a0: <multiple use>
    0x2fe1b10: i32 = TargetConstant<4>

      0x2fd51a0: <multiple use>
      0x2fe1310: <multiple use>
    0x2fe1710: ch = TokenFactor 0x2fd51a0:1, 0x2fe1310:1 [ORD=14]

  0x2fe1810: ch = SW 0x2fe1310, 0x2fd49a0, 0x2fe1b10, 0x2fe1710<Mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=14]

    0x2fd46a0: <multiple use>
    0x2fe9be0: <multiple use>
    0x2fe1810: <multiple use>
  0x2fe1910: i32,ch = LW 0x2fd46a0, 0x2fe9be0, 0x2fe1810<Mem:LD4[%1]> [ORD=15]

    0x2fe1910: <multiple use>
    0x2fd4ea0: <multiple use>
    0x2fe1810: <multiple use>
  0x2fe1d10: i32,ch = LW 0x2fe1910, 0x2fd4ea0, 0x2fe1810<Mem:LD4[%9]> [ORD=17]

    0x2fe1d10: <multiple use>
    0x2fd49a0: <multiple use>
    0x2fe93e0: <multiple use>
      0x2fe1910: <multiple use>
      0x2fe1d10: <multiple use>
    0x2fe8fe0: ch = TokenFactor 0x2fe1910:1, 0x2fe1d10:1 [ORD=19]

  0x2fe90e0: ch = SW 0x2fe1d10, 0x2fd49a0, 0x2fe93e0, 0x2fe8fe0<Mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2)]> [ORD=19]

    0x2fd46a0: <multiple use>
    0x2fe9be0: <multiple use>
    0x2fe90e0: <multiple use>
  0x2fe91e0: i32,ch = LW 0x2fd46a0, 0x2fe9be0, 0x2fe90e0<Mem:LD4[%1]> [ORD=20]

    0x2fe91e0: <multiple use>
    0x2fe96e0: i32 = TargetConstant<20>

    0x2fe90e0: <multiple use>
  0x2fe95e0: i32,ch = LW 0x2fe91e0, 0x2fe96e0, 0x2fe90e0<Mem:LD4[%12]> [ORD=22]

    0x2fe95e0: <multiple use>
    0x2fd49a0: <multiple use>
    0x2fe9ce0: <multiple use>
      0x2fe91e0: <multiple use>
      0x2fe95e0: <multiple use>
    0x2fe97e0: ch = TokenFactor 0x2fe91e0:1, 0x2fe95e0:1 [ORD=24]

  0x2fe98e0: ch = SW 0x2fe95e0, 0x2fd49a0, 0x2fe9ce0, 0x2fe97e0<Mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 3)]> [ORD=24]

    0x2fd46a0: <multiple use>
    0x2fe9be0: <multiple use>
    0x2fe98e0: <multiple use>
  0x2fe99e0: i32,ch = LW 0x2fd46a0, 0x2fe9be0, 0x2fe98e0<Mem:LD4[%1]> [ORD=25]

    0x2fe99e0: <multiple use>
    0x2fdbec0: i32 = TargetConstant<24>

    0x2fe98e0: <multiple use>
  0x2fe9de0: i32,ch = LW 0x2fe99e0, 0x2fdbec0, 0x2fe98e0<Mem:LD4[%15]> [ORD=27]

  0x2fd4ea0: i32 = TargetConstant<16>

  0x2fe9be0: i32 = TargetConstant<0>

  0x2fe9ce0: i32 = TargetConstant<12>

  0x2fe93e0: i32 = TargetConstant<8>

  0x2fe1110: i32 = Register %t5

    0x2fe1110: <multiple use>
    0x2fe1210: i32 = TargetFrameIndex<-1>

  0x2fe1510: i32 = ADDI 0x2fe1110, 0x2fe1210 [ORD=4]

    0x2fe1110: <multiple use>
    0x2fd4ca0: i32 = TargetFrameIndex<0>

  0x2fd46a0: i32 = ADDI 0x2fe1110, 0x2fd4ca0 [ORD=4]

    0x2fe9de0: <multiple use>
    0x2fd49a0: <multiple use>
    0x2fd4ea0: <multiple use>
      0x2fe99e0: <multiple use>
      0x2fe9de0: <multiple use>
    0x2fdbfc0: ch = TokenFactor 0x2fe99e0:1, 0x2fe9de0:1 [ORD=29]

  0x2fdc0c0: ch = SW 0x2fe9de0, 0x2fd49a0, 0x2fd4ea0, 0x2fdbfc0<Mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 4)]> [ORD=29]


********** List Scheduling BB#0 'redefine_start2.newName01' **********
SU(0): 0x2fdc0c0: ch = SW 0x2fe9de0, 0x2fd49a0, 0x2fd4ea0, 0x2fdbfc0<Mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 4)]> [ORD=29] [ID=0]

  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
   val SU(23): Latency=1
   val SU(20): Latency=1
   ch  SU(1): Latency=0

SU(1): 0x2fdbfc0: ch = TokenFactor 0x2fe99e0:1, 0x2fe9de0:1 [ORD=29] [ID=1]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 15
  Height             : 0
  Predecessors:
   ch  SU(2): Latency=1
   ch  SU(23): Latency=1
  Successors:
   ch  SU(0): Latency=0

SU(2): 0x2fe99e0: i32,ch = LW 0x2fd46a0, 0x2fe9be0, 0x2fe98e0<Mem:LD4[%1]> [ORD=25] [ID=2]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 13
  Height             : 2
  Predecessors:
   val SU(19): Latency=1
   ch  SU(3): Latency=1
  Successors:
   ch  SU(1): Latency=1
   val SU(23): Latency=1

SU(3): 0x2fe98e0: ch = SW 0x2fe95e0, 0x2fd49a0, 0x2fe9ce0, 0x2fe97e0<Mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 3)]> [ORD=24] [ID=3]

  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 3
  Predecessors:
   val SU(18): Latency=1
   val SU(20): Latency=1
   ch  SU(4): Latency=0
  Successors:
   ch  SU(2): Latency=1
   ch  SU(23): Latency=1

SU(4): 0x2fe97e0: ch = TokenFactor 0x2fe91e0:1, 0x2fe95e0:1 [ORD=24] [ID=4]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 3
  Predecessors:
   ch  SU(5): Latency=1
   ch  SU(18): Latency=1
  Successors:
   ch  SU(3): Latency=0

SU(5): 0x2fe91e0: i32,ch = LW 0x2fd46a0, 0x2fe9be0, 0x2fe90e0<Mem:LD4[%1]> [ORD=20] [ID=5]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 10
  Height             : 5
  Predecessors:
   val SU(19): Latency=1
   ch  SU(6): Latency=1
  Successors:
   ch  SU(4): Latency=1
   val SU(18): Latency=1

SU(6): 0x2fe90e0: ch = SW 0x2fe1d10, 0x2fd49a0, 0x2fe93e0, 0x2fe8fe0<Mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2)]> [ORD=19] [ID=6]

  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 6
  Predecessors:
   val SU(17): Latency=1
   val SU(20): Latency=1
   ch  SU(7): Latency=0
  Successors:
   ch  SU(5): Latency=1
   ch  SU(18): Latency=1

SU(7): 0x2fe8fe0: ch = TokenFactor 0x2fe1910:1, 0x2fe1d10:1 [ORD=19] [ID=7]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 6
  Predecessors:
   ch  SU(8): Latency=1
   ch  SU(17): Latency=1
  Successors:
   ch  SU(6): Latency=0

SU(8): 0x2fe1910: i32,ch = LW 0x2fd46a0, 0x2fe9be0, 0x2fe1810<Mem:LD4[%1]> [ORD=15] [ID=8]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 7
  Height             : 8
  Predecessors:
   val SU(19): Latency=1
   ch  SU(9): Latency=1
  Successors:
   ch  SU(7): Latency=1
   val SU(17): Latency=1

SU(9): 0x2fe1810: ch = SW 0x2fe1310, 0x2fd49a0, 0x2fe1b10, 0x2fe1710<Mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=14] [ID=9]

  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 9
  Predecessors:
   val SU(16): Latency=1
   val SU(20): Latency=1
   ch  SU(10): Latency=0
  Successors:
   ch  SU(8): Latency=1
   ch  SU(17): Latency=1

SU(10): 0x2fe1710: ch = TokenFactor 0x2fd51a0:1, 0x2fe1310:1 [ORD=14] [ID=10]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 9
  Predecessors:
   ch  SU(11): Latency=1
   ch  SU(16): Latency=1
  Successors:
   ch  SU(9): Latency=0

SU(11): 0x2fd51a0: i32,ch = LW 0x2fd46a0, 0x2fe9be0, 0x2fd50a0<Mem:LD4[%1]> [ORD=10] [ID=11]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
   val SU(19): Latency=1
   ch  SU(12): Latency=1
  Successors:
   ch  SU(10): Latency=1
   val SU(16): Latency=1

SU(12): 0x2fd50a0: ch = SW 0x2fd44a0, 0x2fd49a0, 0x2fe9be0, 0x2fd44a0:1<Mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9] [ID=12]

  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 12
  Predecessors:
   val SU(13): Latency=1
   val SU(20): Latency=1
   ch  SU(13): Latency=1
  Successors:
   ch  SU(11): Latency=1
   ch  SU(16): Latency=1

SU(13): 0x2fd44a0: i32,ch = LW 0x2fe1510, 0x2fe93e0, 0x2fd4ba0<Mem:LD4[%3](align=8)> [ORD=7] [ID=13]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 13
  Predecessors:
   val SU(15): Latency=1
   ch  SU(14): Latency=1
  Successors:
   val SU(12): Latency=1
   ch  SU(12): Latency=1

SU(14): 0x2fd4ba0: ch = SW 0x2fe1510, 0x2fd46a0, 0x2fe9be0, 0x2fb6da8<Mem:ST4[%1]> [ORD=4] [ID=14]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 14
  Predecessors:
   val SU(15): Latency=1
   val SU(19): Latency=1
  Successors:
   ch  SU(13): Latency=1

SU(15): 0x2fe1510: i32 = ADDI 0x2fe1110, 0x2fe1210 [ORD=4] [ID=15]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 15
  Successors:
   val SU(13): Latency=1
   val SU(14): Latency=1

SU(16): 0x2fe1310: i32,ch = LW 0x2fd51a0, 0x2fe9ce0, 0x2fd50a0<Mem:LD4[%6]> [ORD=12] [ID=16]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 5
  Height             : 10
  Predecessors:
   val SU(11): Latency=1
   ch  SU(12): Latency=1
  Successors:
   val SU(9): Latency=1
   ch  SU(10): Latency=1

SU(17): 0x2fe1d10: i32,ch = LW 0x2fe1910, 0x2fd4ea0, 0x2fe1810<Mem:LD4[%9]> [ORD=17] [ID=17]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 8
  Height             : 7
  Predecessors:
   val SU(8): Latency=1
   ch  SU(9): Latency=1
  Successors:
   val SU(6): Latency=1
   ch  SU(7): Latency=1

SU(18): 0x2fe95e0: i32,ch = LW 0x2fe91e0, 0x2fe96e0, 0x2fe90e0<Mem:LD4[%12]> [ORD=22] [ID=18]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 11
  Height             : 4
  Predecessors:
   val SU(5): Latency=1
   ch  SU(6): Latency=1
  Successors:
   val SU(3): Latency=1
   ch  SU(4): Latency=1

SU(19): 0x2fd46a0: i32 = ADDI 0x2fe1110, 0x2fd4ca0 [ORD=4] [ID=19]

  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 15
  Successors:
   val SU(2): Latency=1
   val SU(5): Latency=1
   val SU(8): Latency=1
   val SU(11): Latency=1
   val SU(14): Latency=1

SU(20): 0x2fd49a0: i32 = ADD 0x2fd4aa0, 0x2fd4fa0 [ID=20]

  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 13
  Predecessors:
   val SU(22): Latency=1
   val SU(21): Latency=1
  Successors:
   val SU(0): Latency=1
   val SU(3): Latency=1
   val SU(6): Latency=1
   val SU(9): Latency=1
   val SU(12): Latency=1

SU(21): 0x2fd4fa0: i32 = LUI 0x2fd47a0 [ID=21]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 14
  Successors:
   val SU(20): Latency=1

SU(22): 0x2fd4aa0: i32 = ADDI 0x2fd48a0, 0x2fd45a0 [ID=22]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 14
  Successors:
   val SU(20): Latency=1

SU(23): 0x2fe9de0: i32,ch = LW 0x2fe99e0, 0x2fdbec0, 0x2fe98e0<Mem:LD4[%15]> [ORD=27] [ID=23]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
   val SU(2): Latency=1
   ch  SU(3): Latency=1
  Successors:
   val SU(0): Latency=1
   ch  SU(1): Latency=1


Examining Available:
Height 0: SU(0): 0x2fdc0c0: ch = SW 0x2fe9de0, 0x2fd49a0, 0x2fd4ea0, 0x2fdbfc0<Mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 4)]> [ORD=29] [ID=0]


*** Scheduling [0]: SU(0): 0x2fdc0c0: ch = SW 0x2fe9de0, 0x2fd49a0, 0x2fd4ea0, 0x2fdbfc0<Mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 4)]> [ORD=29] [ID=0]


Examining Available:
Height 0: SU(1): 0x2fdbfc0: ch = TokenFactor 0x2fe99e0:1, 0x2fe9de0:1 [ORD=29] [ID=1]


*** Scheduling [1]: SU(1): 0x2fdbfc0: ch = TokenFactor 0x2fe99e0:1, 0x2fe9de0:1 [ORD=29] [ID=1]


Examining Available:
Height 2: SU(23): 0x2fe9de0: i32,ch = LW 0x2fe99e0, 0x2fdbec0, 0x2fe98e0<Mem:LD4[%15]> [ORD=27] [ID=23]


*** Scheduling [2]: SU(23): 0x2fe9de0: i32,ch = LW 0x2fe99e0, 0x2fdbec0, 0x2fe98e0<Mem:LD4[%15]> [ORD=27] [ID=23]


Examining Available:
Height 3: SU(2): 0x2fe99e0: i32,ch = LW 0x2fd46a0, 0x2fe9be0, 0x2fe98e0<Mem:LD4[%1]> [ORD=25] [ID=2]


*** Scheduling [3]: SU(2): 0x2fe99e0: i32,ch = LW 0x2fd46a0, 0x2fe9be0, 0x2fe98e0<Mem:LD4[%1]> [ORD=25] [ID=2]


Examining Available:
Height 4: SU(3): 0x2fe98e0: ch = SW 0x2fe95e0, 0x2fd49a0, 0x2fe9ce0, 0x2fe97e0<Mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 3)]> [ORD=24] [ID=3]


*** Scheduling [4]: SU(3): 0x2fe98e0: ch = SW 0x2fe95e0, 0x2fd49a0, 0x2fe9ce0, 0x2fe97e0<Mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 3)]> [ORD=24] [ID=3]


Examining Available:
Height 4: SU(4): 0x2fe97e0: ch = TokenFactor 0x2fe91e0:1, 0x2fe95e0:1 [ORD=24] [ID=4]


*** Scheduling [5]: SU(4): 0x2fe97e0: ch = TokenFactor 0x2fe91e0:1, 0x2fe95e0:1 [ORD=24] [ID=4]


Examining Available:
Height 6: SU(18): 0x2fe95e0: i32,ch = LW 0x2fe91e0, 0x2fe96e0, 0x2fe90e0<Mem:LD4[%12]> [ORD=22] [ID=18]


*** Scheduling [6]: SU(18): 0x2fe95e0: i32,ch = LW 0x2fe91e0, 0x2fe96e0, 0x2fe90e0<Mem:LD4[%12]> [ORD=22] [ID=18]


Examining Available:
Height 7: SU(5): 0x2fe91e0: i32,ch = LW 0x2fd46a0, 0x2fe9be0, 0x2fe90e0<Mem:LD4[%1]> [ORD=20] [ID=5]


*** Scheduling [7]: SU(5): 0x2fe91e0: i32,ch = LW 0x2fd46a0, 0x2fe9be0, 0x2fe90e0<Mem:LD4[%1]> [ORD=20] [ID=5]


Examining Available:
Height 8: SU(6): 0x2fe90e0: ch = SW 0x2fe1d10, 0x2fd49a0, 0x2fe93e0, 0x2fe8fe0<Mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2)]> [ORD=19] [ID=6]


*** Scheduling [8]: SU(6): 0x2fe90e0: ch = SW 0x2fe1d10, 0x2fd49a0, 0x2fe93e0, 0x2fe8fe0<Mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2)]> [ORD=19] [ID=6]


Examining Available:
Height 8: SU(7): 0x2fe8fe0: ch = TokenFactor 0x2fe1910:1, 0x2fe1d10:1 [ORD=19] [ID=7]


*** Scheduling [9]: SU(7): 0x2fe8fe0: ch = TokenFactor 0x2fe1910:1, 0x2fe1d10:1 [ORD=19] [ID=7]


Examining Available:
Height 10: SU(17): 0x2fe1d10: i32,ch = LW 0x2fe1910, 0x2fd4ea0, 0x2fe1810<Mem:LD4[%9]> [ORD=17] [ID=17]


*** Scheduling [10]: SU(17): 0x2fe1d10: i32,ch = LW 0x2fe1910, 0x2fd4ea0, 0x2fe1810<Mem:LD4[%9]> [ORD=17] [ID=17]


Examining Available:
Height 11: SU(8): 0x2fe1910: i32,ch = LW 0x2fd46a0, 0x2fe9be0, 0x2fe1810<Mem:LD4[%1]> [ORD=15] [ID=8]


*** Scheduling [11]: SU(8): 0x2fe1910: i32,ch = LW 0x2fd46a0, 0x2fe9be0, 0x2fe1810<Mem:LD4[%1]> [ORD=15] [ID=8]


Examining Available:
Height 12: SU(9): 0x2fe1810: ch = SW 0x2fe1310, 0x2fd49a0, 0x2fe1b10, 0x2fe1710<Mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=14] [ID=9]


*** Scheduling [12]: SU(9): 0x2fe1810: ch = SW 0x2fe1310, 0x2fd49a0, 0x2fe1b10, 0x2fe1710<Mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=14] [ID=9]


Examining Available:
Height 12: SU(10): 0x2fe1710: ch = TokenFactor 0x2fd51a0:1, 0x2fe1310:1 [ORD=14] [ID=10]


*** Scheduling [13]: SU(10): 0x2fe1710: ch = TokenFactor 0x2fd51a0:1, 0x2fe1310:1 [ORD=14] [ID=10]


Examining Available:
Height 14: SU(16): 0x2fe1310: i32,ch = LW 0x2fd51a0, 0x2fe9ce0, 0x2fd50a0<Mem:LD4[%6]> [ORD=12] [ID=16]


*** Scheduling [14]: SU(16): 0x2fe1310: i32,ch = LW 0x2fd51a0, 0x2fe9ce0, 0x2fd50a0<Mem:LD4[%6]> [ORD=12] [ID=16]


Examining Available:
Height 15: SU(11): 0x2fd51a0: i32,ch = LW 0x2fd46a0, 0x2fe9be0, 0x2fd50a0<Mem:LD4[%1]> [ORD=10] [ID=11]


*** Scheduling [15]: SU(11): 0x2fd51a0: i32,ch = LW 0x2fd46a0, 0x2fe9be0, 0x2fd50a0<Mem:LD4[%1]> [ORD=10] [ID=11]


Examining Available:
Height 16: SU(12): 0x2fd50a0: ch = SW 0x2fd44a0, 0x2fd49a0, 0x2fe9be0, 0x2fd44a0:1<Mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9] [ID=12]


*** Scheduling [16]: SU(12): 0x2fd50a0: ch = SW 0x2fd44a0, 0x2fd49a0, 0x2fe9be0, 0x2fd44a0:1<Mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9] [ID=12]


Examining Available:
Height 17: SU(20): 0x2fd49a0: i32 = ADD 0x2fd4aa0, 0x2fd4fa0 [ID=20]

Height 17: SU(13): 0x2fd44a0: i32,ch = LW 0x2fe1510, 0x2fe93e0, 0x2fd4ba0<Mem:LD4[%3](align=8)> [ORD=7] [ID=13]


*** Scheduling [17]: SU(20): 0x2fd49a0: i32 = ADD 0x2fd4aa0, 0x2fd4fa0 [ID=20]


Examining Available:
Height 18: SU(22): 0x2fd4aa0: i32 = ADDI 0x2fd48a0, 0x2fd45a0 [ID=22]

Height 18: SU(21): 0x2fd4fa0: i32 = LUI 0x2fd47a0 [ID=21]

Height 17: SU(13): 0x2fd44a0: i32,ch = LW 0x2fe1510, 0x2fe93e0, 0x2fd4ba0<Mem:LD4[%3](align=8)> [ORD=7] [ID=13]


*** Scheduling [18]: SU(22): 0x2fd4aa0: i32 = ADDI 0x2fd48a0, 0x2fd45a0 [ID=22]


Examining Available:
Height 18: SU(21): 0x2fd4fa0: i32 = LUI 0x2fd47a0 [ID=21]

Height 17: SU(13): 0x2fd44a0: i32,ch = LW 0x2fe1510, 0x2fe93e0, 0x2fd4ba0<Mem:LD4[%3](align=8)> [ORD=7] [ID=13]


*** Scheduling [19]: SU(21): 0x2fd4fa0: i32 = LUI 0x2fd47a0 [ID=21]


Examining Available:
Height 17: SU(13): 0x2fd44a0: i32,ch = LW 0x2fe1510, 0x2fe93e0, 0x2fd4ba0<Mem:LD4[%3](align=8)> [ORD=7] [ID=13]


*** Scheduling [20]: SU(13): 0x2fd44a0: i32,ch = LW 0x2fe1510, 0x2fe93e0, 0x2fd4ba0<Mem:LD4[%3](align=8)> [ORD=7] [ID=13]


Examining Available:
Height 21: SU(14): 0x2fd4ba0: ch = SW 0x2fe1510, 0x2fd46a0, 0x2fe9be0, 0x2fb6da8<Mem:ST4[%1]> [ORD=4] [ID=14]


*** Scheduling [21]: SU(14): 0x2fd4ba0: ch = SW 0x2fe1510, 0x2fd46a0, 0x2fe9be0, 0x2fb6da8<Mem:ST4[%1]> [ORD=4] [ID=14]


Examining Available:
Height 22: SU(15): 0x2fe1510: i32 = ADDI 0x2fe1110, 0x2fe1210 [ORD=4] [ID=15]

Height 22: SU(19): 0x2fd46a0: i32 = ADDI 0x2fe1110, 0x2fd4ca0 [ORD=4] [ID=19]


*** Scheduling [22]: SU(15): 0x2fe1510: i32 = ADDI 0x2fe1110, 0x2fe1210 [ORD=4] [ID=15]


Examining Available:
Height 22: SU(19): 0x2fd46a0: i32 = ADDI 0x2fe1110, 0x2fd4ca0 [ORD=4] [ID=19]


*** Scheduling [23]: SU(19): 0x2fd46a0: i32 = ADDI 0x2fe1110, 0x2fd4ca0 [ORD=4] [ID=19]

*** Final schedule ***
SU(19): 0x2fd46a0: i32 = ADDI 0x2fe1110, 0x2fd4ca0 [ORD=4] [ID=19]

SU(15): 0x2fe1510: i32 = ADDI 0x2fe1110, 0x2fe1210 [ORD=4] [ID=15]

SU(14): 0x2fd4ba0: ch = SW 0x2fe1510, 0x2fd46a0, 0x2fe9be0, 0x2fb6da8<Mem:ST4[%1]> [ORD=4] [ID=14]

SU(13): 0x2fd44a0: i32,ch = LW 0x2fe1510, 0x2fe93e0, 0x2fd4ba0<Mem:LD4[%3](align=8)> [ORD=7] [ID=13]

SU(21): 0x2fd4fa0: i32 = LUI 0x2fd47a0 [ID=21]

SU(22): 0x2fd4aa0: i32 = ADDI 0x2fd48a0, 0x2fd45a0 [ID=22]

SU(20): 0x2fd49a0: i32 = ADD 0x2fd4aa0, 0x2fd4fa0 [ID=20]

SU(12): 0x2fd50a0: ch = SW 0x2fd44a0, 0x2fd49a0, 0x2fe9be0, 0x2fd44a0:1<Mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=9] [ID=12]

SU(11): 0x2fd51a0: i32,ch = LW 0x2fd46a0, 0x2fe9be0, 0x2fd50a0<Mem:LD4[%1]> [ORD=10] [ID=11]

SU(16): 0x2fe1310: i32,ch = LW 0x2fd51a0, 0x2fe9ce0, 0x2fd50a0<Mem:LD4[%6]> [ORD=12] [ID=16]

SU(10): 0x2fe1710: ch = TokenFactor 0x2fd51a0:1, 0x2fe1310:1 [ORD=14] [ID=10]

SU(9): 0x2fe1810: ch = SW 0x2fe1310, 0x2fd49a0, 0x2fe1b10, 0x2fe1710<Mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=14] [ID=9]

SU(8): 0x2fe1910: i32,ch = LW 0x2fd46a0, 0x2fe9be0, 0x2fe1810<Mem:LD4[%1]> [ORD=15] [ID=8]

SU(17): 0x2fe1d10: i32,ch = LW 0x2fe1910, 0x2fd4ea0, 0x2fe1810<Mem:LD4[%9]> [ORD=17] [ID=17]

SU(7): 0x2fe8fe0: ch = TokenFactor 0x2fe1910:1, 0x2fe1d10:1 [ORD=19] [ID=7]

SU(6): 0x2fe90e0: ch = SW 0x2fe1d10, 0x2fd49a0, 0x2fe93e0, 0x2fe8fe0<Mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2)]> [ORD=19] [ID=6]

SU(5): 0x2fe91e0: i32,ch = LW 0x2fd46a0, 0x2fe9be0, 0x2fe90e0<Mem:LD4[%1]> [ORD=20] [ID=5]

SU(18): 0x2fe95e0: i32,ch = LW 0x2fe91e0, 0x2fe96e0, 0x2fe90e0<Mem:LD4[%12]> [ORD=22] [ID=18]

SU(4): 0x2fe97e0: ch = TokenFactor 0x2fe91e0:1, 0x2fe95e0:1 [ORD=24] [ID=4]

SU(3): 0x2fe98e0: ch = SW 0x2fe95e0, 0x2fd49a0, 0x2fe9ce0, 0x2fe97e0<Mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 3)]> [ORD=24] [ID=3]

SU(2): 0x2fe99e0: i32,ch = LW 0x2fd46a0, 0x2fe9be0, 0x2fe98e0<Mem:LD4[%1]> [ORD=25] [ID=2]

SU(23): 0x2fe9de0: i32,ch = LW 0x2fe99e0, 0x2fdbec0, 0x2fe98e0<Mem:LD4[%15]> [ORD=27] [ID=23]

SU(1): 0x2fdbfc0: ch = TokenFactor 0x2fe99e0:1, 0x2fe9de0:1 [ORD=29] [ID=1]

SU(0): 0x2fdc0c0: ch = SW 0x2fe9de0, 0x2fd49a0, 0x2fd4ea0, 0x2fdbfc0<Mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 4)]> [ORD=29] [ID=0]


Total amount of phi nodes to update: 0
Initial selection DAG: BB#1 'redefine_start2:redefine_start2.return'
SelectionDAG has 1 nodes:
  0x2fb6da8: ch = EntryToken


Optimized lowered selection DAG: BB#1 'redefine_start2:redefine_start2.return'
SelectionDAG has 1 nodes:
  0x2fb6da8: ch = EntryToken


Legally typed node: 0x2fb6da8: ch = EntryToken [ID=0]

Legally typed node: 0x7fff9b4748f0: ch = handlenode 0x2fb6da8 [ID=0]

Type-legalized selection DAG: BB#1 'redefine_start2:redefine_start2.return'
SelectionDAG has 1 nodes:
  0x2fb6da8: ch = EntryToken [ID=-3]


Legalized selection DAG: BB#1 'redefine_start2:redefine_start2.return'
SelectionDAG has 1 nodes:
  0x2fb6da8: ch = EntryToken [ID=0]


Optimized legalized selection DAG: BB#1 'redefine_start2:redefine_start2.return'
SelectionDAG has 1 nodes:
  0x2fb6da8: ch = EntryToken [ID=0]


===== Instruction selection begins: BB#1 'redefine_start2.return'
=> 0x2fb6da8: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: BB#1 'redefine_start2:redefine_start2.return'
SelectionDAG has 1 nodes:
  0x2fb6da8: ch = EntryToken


********** List Scheduling BB#1 'redefine_start2.return' **********
*** Final schedule ***

Total amount of phi nodes to update: 0

*** Tail-duplicating BB#1

Merging into block: BB#0: derived from LLVM BB %redefine_start2.newName01
	%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
	%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
	SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
	%vreg2<def> = LW %vreg1, 8; mem:LD4[%3](align=8) GR32Bit:%vreg2,%vreg1
	%vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
	%vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
	%vreg5<def> = ADD %vreg4<kill>, %vreg3<kill>; GR32Bit:%vreg5,%vreg4,%vreg3
	SW %vreg2<kill>, %vreg5, 0; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
	%vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
	%vreg7<def> = LW %vreg6<kill>, 12; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
	SW %vreg7<kill>, %vreg5, 4; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5
	%vreg8<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg8,%vreg0
	%vreg9<def> = LW %vreg8<kill>, 16; mem:LD4[%9] GR32Bit:%vreg9,%vreg8
	SW %vreg9<kill>, %vreg5, 8; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2)] GR32Bit:%vreg9,%vreg5
	%vreg10<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg10,%vreg0
	%vreg11<def> = LW %vreg10<kill>, 20; mem:LD4[%12] GR32Bit:%vreg11,%vreg10
	SW %vreg11<kill>, %vreg5, 12; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 3)] GR32Bit:%vreg11,%vreg5
	%vreg12<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg12,%vreg0
	%vreg13<def> = LW %vreg12<kill>, 24; mem:LD4[%15] GR32Bit:%vreg13,%vreg12
	SW %vreg13<kill>, %vreg5, 16; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 4)] GR32Bit:%vreg13,%vreg5
    Successors according to CFG: BB#1
From MBB: BB#1: derived from LLVM BB %redefine_start2.return
    Predecessors according to CFG: BB#0

Removing MBB: BB#1: derived from LLVM BB %redefine_start2.return
# Machine code for function redefine_start2: SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start2.newName01
16B		%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
48B		SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
64B		%vreg2<def> = LW %vreg1, 8; mem:LD4[%3](align=8) GR32Bit:%vreg2,%vreg1
80B		%vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
96B		%vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
112B		%vreg5<def> = ADD %vreg4<kill>, %vreg3<kill>; GR32Bit:%vreg5,%vreg4,%vreg3
128B		SW %vreg2<kill>, %vreg5, 0; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
144B		%vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
160B		%vreg7<def> = LW %vreg6<kill>, 12; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
176B		SW %vreg7<kill>, %vreg5, 4; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5
192B		%vreg8<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg8,%vreg0
208B		%vreg9<def> = LW %vreg8<kill>, 16; mem:LD4[%9] GR32Bit:%vreg9,%vreg8
224B		SW %vreg9<kill>, %vreg5, 8; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2)] GR32Bit:%vreg9,%vreg5
240B		%vreg10<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg10,%vreg0
256B		%vreg11<def> = LW %vreg10<kill>, 20; mem:LD4[%12] GR32Bit:%vreg11,%vreg10
272B		SW %vreg11<kill>, %vreg5, 12; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 3)] GR32Bit:%vreg11,%vreg5
288B		%vreg12<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg12,%vreg0
304B		%vreg13<def> = LW %vreg12<kill>, 24; mem:LD4[%15] GR32Bit:%vreg13,%vreg12
320B		SW %vreg13<kill>, %vreg5, 16; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 4)] GR32Bit:%vreg13,%vreg5

# End machine code for function redefine_start2.

********** Stack Coloring **********
********** Function: redefine_start2
Found 0 markers and 1 slots
Slot structure:
Slot #0 - 4 bytes.
Total Stack size: 4 bytes

Will not try to merge slots.
Removed 0 markers.
******** Pre-regalloc Machine LICM: redefine_start2 ********
******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: redefine_start2
********** PROCESS IMPLICIT DEFS **********
********** Function: redefine_start2
********** REWRITING TWO-ADDR INSTRS **********
********** Function: redefine_start2
# Machine code for function redefine_start2: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start2.newName01
16B		%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
48B		SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
64B		%vreg2<def> = LW %vreg1<kill>, 8; mem:LD4[%3](align=8) GR32Bit:%vreg2,%vreg1
80B		%vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
96B		%vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
112B		%vreg5<def> = ADD %vreg4<kill>, %vreg3<kill>; GR32Bit:%vreg5,%vreg4,%vreg3
128B		SW %vreg2<kill>, %vreg5, 0; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
144B		%vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
160B		%vreg7<def> = LW %vreg6<kill>, 12; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
176B		SW %vreg7<kill>, %vreg5, 4; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5
192B		%vreg8<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg8,%vreg0
208B		%vreg9<def> = LW %vreg8<kill>, 16; mem:LD4[%9] GR32Bit:%vreg9,%vreg8
224B		SW %vreg9<kill>, %vreg5, 8; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2)] GR32Bit:%vreg9,%vreg5
240B		%vreg10<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg10,%vreg0
256B		%vreg11<def> = LW %vreg10<kill>, 20; mem:LD4[%12] GR32Bit:%vreg11,%vreg10
272B		SW %vreg11<kill>, %vreg5, 12; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 3)] GR32Bit:%vreg11,%vreg5
288B		%vreg12<def> = LW %vreg0<kill>, 0; mem:LD4[%1] GR32Bit:%vreg12,%vreg0
304B		%vreg13<def> = LW %vreg12<kill>, 24; mem:LD4[%15] GR32Bit:%vreg13,%vreg12
320B		SW %vreg13<kill>, %vreg5<kill>, 16; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 4)] GR32Bit:%vreg13,%vreg5

# End machine code for function redefine_start2.

Computing live-in reg-units in ABI blocks.
Created 0 new intervals.
********** INTERVALS **********
%vreg0 = [16r,288r:0)  0@16r
%vreg1 = [32r,64r:0)  0@32r
%vreg2 = [64r,128r:0)  0@64r
%vreg3 = [80r,112r:0)  0@80r
%vreg4 = [96r,112r:0)  0@96r
%vreg5 = [112r,320r:0)  0@112r
%vreg6 = [144r,160r:0)  0@144r
%vreg7 = [160r,176r:0)  0@160r
%vreg8 = [192r,208r:0)  0@192r
%vreg9 = [208r,224r:0)  0@208r
%vreg10 = [240r,256r:0)  0@240r
%vreg11 = [256r,272r:0)  0@256r
%vreg12 = [288r,304r:0)  0@288r
%vreg13 = [304r,320r:0)  0@304r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start2: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start2.newName01
16B		%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
48B		SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
64B		%vreg2<def> = LW %vreg1, 8; mem:LD4[%3](align=8) GR32Bit:%vreg2,%vreg1
80B		%vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
96B		%vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
112B		%vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
128B		SW %vreg2, %vreg5, 0; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
144B		%vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
160B		%vreg7<def> = LW %vreg6, 12; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
176B		SW %vreg7, %vreg5, 4; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5
192B		%vreg8<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg8,%vreg0
208B		%vreg9<def> = LW %vreg8, 16; mem:LD4[%9] GR32Bit:%vreg9,%vreg8
224B		SW %vreg9, %vreg5, 8; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2)] GR32Bit:%vreg9,%vreg5
240B		%vreg10<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg10,%vreg0
256B		%vreg11<def> = LW %vreg10, 20; mem:LD4[%12] GR32Bit:%vreg11,%vreg10
272B		SW %vreg11, %vreg5, 12; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 3)] GR32Bit:%vreg11,%vreg5
288B		%vreg12<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg12,%vreg0
304B		%vreg13<def> = LW %vreg12, 24; mem:LD4[%15] GR32Bit:%vreg13,%vreg12
320B		SW %vreg13, %vreg5, 16; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 4)] GR32Bit:%vreg13,%vreg5

# End machine code for function redefine_start2.

********** SIMPLE REGISTER COALESCING **********
********** Function: redefine_start2
********** JOINING INTERVALS ***********
redefine_start2.newName01:
Trying to inflate 0 regs.
********** INTERVALS **********
%vreg0 = [16r,288r:0)  0@16r
%vreg1 = [32r,64r:0)  0@32r
%vreg2 = [64r,128r:0)  0@64r
%vreg3 = [80r,112r:0)  0@80r
%vreg4 = [96r,112r:0)  0@96r
%vreg5 = [112r,320r:0)  0@112r
%vreg6 = [144r,160r:0)  0@144r
%vreg7 = [160r,176r:0)  0@160r
%vreg8 = [192r,208r:0)  0@192r
%vreg9 = [208r,224r:0)  0@208r
%vreg10 = [240r,256r:0)  0@240r
%vreg11 = [256r,272r:0)  0@256r
%vreg12 = [288r,304r:0)  0@288r
%vreg13 = [304r,320r:0)  0@304r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start2: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start2.newName01
16B		%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
48B		SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
64B		%vreg2<def> = LW %vreg1, 8; mem:LD4[%3](align=8) GR32Bit:%vreg2,%vreg1
80B		%vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
96B		%vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
112B		%vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
128B		SW %vreg2, %vreg5, 0; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
144B		%vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
160B		%vreg7<def> = LW %vreg6, 12; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
176B		SW %vreg7, %vreg5, 4; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5
192B		%vreg8<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg8,%vreg0
208B		%vreg9<def> = LW %vreg8, 16; mem:LD4[%9] GR32Bit:%vreg9,%vreg8
224B		SW %vreg9, %vreg5, 8; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2)] GR32Bit:%vreg9,%vreg5
240B		%vreg10<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg10,%vreg0
256B		%vreg11<def> = LW %vreg10, 20; mem:LD4[%12] GR32Bit:%vreg11,%vreg10
272B		SW %vreg11, %vreg5, 12; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 3)] GR32Bit:%vreg11,%vreg5
288B		%vreg12<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg12,%vreg0
304B		%vreg13<def> = LW %vreg12, 24; mem:LD4[%15] GR32Bit:%vreg13,%vreg12
320B		SW %vreg13, %vreg5, 16; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 4)] GR32Bit:%vreg13,%vreg5

# End machine code for function redefine_start2.

Before MISched:
# Machine code for function redefine_start2: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %redefine_start2.newName01
	%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
	%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
	SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
	%vreg2<def> = LW %vreg1, 8; mem:LD4[%3](align=8) GR32Bit:%vreg2,%vreg1
	%vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
	%vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
	%vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
	SW %vreg2, %vreg5, 0; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
	%vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
	%vreg7<def> = LW %vreg6, 12; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
	SW %vreg7, %vreg5, 4; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5
	%vreg8<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg8,%vreg0
	%vreg9<def> = LW %vreg8, 16; mem:LD4[%9] GR32Bit:%vreg9,%vreg8
	SW %vreg9, %vreg5, 8; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2)] GR32Bit:%vreg9,%vreg5
	%vreg10<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg10,%vreg0
	%vreg11<def> = LW %vreg10, 20; mem:LD4[%12] GR32Bit:%vreg11,%vreg10
	SW %vreg11, %vreg5, 12; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 3)] GR32Bit:%vreg11,%vreg5
	%vreg12<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg12,%vreg0
	%vreg13<def> = LW %vreg12, 24; mem:LD4[%15] GR32Bit:%vreg13,%vreg12
	SW %vreg13, %vreg5, 16; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 4)] GR32Bit:%vreg13,%vreg5

# End machine code for function redefine_start2.


-------------
Starting new basic block BB#0
********** MI Scheduling **********
redefine_start2:BB#0 redefine_start2.newName01
  From: %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
    To: End Remaining: 0
Max Pressure: GR32Bit=4
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 4
Excess PSets: 
8 subtrees:
  SU(0) in tree 0
  SU(1) in tree 1
  SU(2) in tree 1
  SU(3) in tree 2
  SU(4) in tree 3
  SU(5) in tree 3
  SU(6) in tree 3
  SU(7) in tree 2
  SU(8) in tree 4
  SU(9) in tree 4
  SU(10) in tree 4
  SU(11) in tree 5
  SU(12) in tree 5
  SU(13) in tree 5
  SU(14) in tree 6
  SU(15) in tree 6
  SU(16) in tree 6
  SU(17) in tree 7
  SU(18) in tree 7
  SU(19) in tree 7
SU(0):   %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 32
  Successors:
   val SU(17): Latency=5 Reg=%vreg0
   val SU(14): Latency=5 Reg=%vreg0
   val SU(11): Latency=5 Reg=%vreg0
   val SU(8): Latency=5 Reg=%vreg0
   val SU(2): Latency=5 Reg=%vreg0

SU(1):   %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 31
  Successors:
   val SU(3): Latency=5 Reg=%vreg1
   val SU(2): Latency=4 Reg=%vreg1

SU(2):   SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
  # preds left       : 2
  # succs left       : 10
  # rdefs left       : 0
  Latency            : 13
  Depth              : 5
  Height             : 27
  Predecessors:
   val SU(1): Latency=4 Reg=%vreg1
   val SU(0): Latency=5 Reg=%vreg0
  Successors:
   ch  SU(17): Latency=1
   ch  SU(14): Latency=1
   ch  SU(11): Latency=1
   ch  SU(8): Latency=1
   ch  SU(18): Latency=1
   ch  SU(15): Latency=1
   ch  SU(12): Latency=1
   ch  SU(9): Latency=1
   ch  SU(3): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(3):   %vreg2<def> = LW %vreg1, 8; mem:LD4[%3](align=8) GR32Bit:%vreg2,%vreg1
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 6
  Height             : 14
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg1
   ch  SU(2): Latency=1
  Successors:
   val SU(7): Latency=2 Reg=%vreg2
   ch  SU(7): Latency=0

SU(4):   %vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
   val SU(6): Latency=5 Reg=%vreg3

SU(5):   %vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
   val SU(6): Latency=5 Reg=%vreg4

SU(6):   %vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 17
  Predecessors:
   val SU(5): Latency=5 Reg=%vreg4
   val SU(4): Latency=5 Reg=%vreg3
  Successors:
   val SU(19): Latency=5 Reg=%vreg5
   val SU(16): Latency=5 Reg=%vreg5
   val SU(13): Latency=5 Reg=%vreg5
   val SU(10): Latency=5 Reg=%vreg5
   val SU(7): Latency=5 Reg=%vreg5

SU(7):   SW %vreg2, %vreg5, 0; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
  # preds left       : 3
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 13
  Depth              : 10
  Height             : 12
  Predecessors:
   val SU(3): Latency=2 Reg=%vreg2
   val SU(6): Latency=5 Reg=%vreg5
   ch  SU(3): Latency=0
  Successors:
   ch  SU(10): Latency=0
   ch  SU(18): Latency=1
   ch  SU(15): Latency=1
   ch  SU(12): Latency=1
   ch  SU(9): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(8):   %vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 6
  Height             : 26
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg0
   ch  SU(2): Latency=1
  Successors:
   val SU(9): Latency=15 Reg=%vreg6

SU(9):   %vreg7<def> = LW %vreg6, 12; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 21
  Height             : 11
  Predecessors:
   val SU(8): Latency=15 Reg=%vreg6
   ch  SU(7): Latency=1
   ch  SU(2): Latency=1
  Successors:
   val SU(10): Latency=2 Reg=%vreg7
   ch  SU(10): Latency=0

SU(10):   SW %vreg7, %vreg5, 4; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5
  # preds left       : 4
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 13
  Depth              : 23
  Height             : 9
  Predecessors:
   val SU(9): Latency=2 Reg=%vreg7
   val SU(6): Latency=5 Reg=%vreg5
   ch  SU(9): Latency=0
   ch  SU(7): Latency=0
  Successors:
   ch  SU(13): Latency=0
   ch  SU(18): Latency=1
   ch  SU(15): Latency=1
   ch  SU(12): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(11):   %vreg8<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg8,%vreg0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 6
  Height             : 23
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg0
   ch  SU(2): Latency=1
  Successors:
   val SU(12): Latency=15 Reg=%vreg8

SU(12):   %vreg9<def> = LW %vreg8, 16; mem:LD4[%9] GR32Bit:%vreg9,%vreg8
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 24
  Height             : 8
  Predecessors:
   val SU(11): Latency=15 Reg=%vreg8
   ch  SU(10): Latency=1
   ch  SU(7): Latency=1
   ch  SU(2): Latency=1
  Successors:
   val SU(13): Latency=2 Reg=%vreg9
   ch  SU(13): Latency=0

SU(13):   SW %vreg9, %vreg5, 8; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2)] GR32Bit:%vreg9,%vreg5
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 13
  Depth              : 26
  Height             : 6
  Predecessors:
   val SU(12): Latency=2 Reg=%vreg9
   val SU(6): Latency=5 Reg=%vreg5
   ch  SU(12): Latency=0
   ch  SU(10): Latency=0
  Successors:
   ch  SU(16): Latency=0
   ch  SU(18): Latency=1
   ch  SU(15): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(14):   %vreg10<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg10,%vreg0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 6
  Height             : 20
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg0
   ch  SU(2): Latency=1
  Successors:
   val SU(15): Latency=15 Reg=%vreg10

SU(15):   %vreg11<def> = LW %vreg10, 20; mem:LD4[%12] GR32Bit:%vreg11,%vreg10
  # preds left       : 5
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 27
  Height             : 5
  Predecessors:
   val SU(14): Latency=15 Reg=%vreg10
   ch  SU(13): Latency=1
   ch  SU(10): Latency=1
   ch  SU(7): Latency=1
   ch  SU(2): Latency=1
  Successors:
   val SU(16): Latency=2 Reg=%vreg11
   ch  SU(16): Latency=0

SU(16):   SW %vreg11, %vreg5, 12; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 3)] GR32Bit:%vreg11,%vreg5
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 13
  Depth              : 29
  Height             : 3
  Predecessors:
   val SU(15): Latency=2 Reg=%vreg11
   val SU(6): Latency=5 Reg=%vreg5
   ch  SU(15): Latency=0
   ch  SU(13): Latency=0
  Successors:
   ch  SU(19): Latency=0
   ch  SU(18): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(17):   %vreg12<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg12,%vreg0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 6
  Height             : 17
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg0
   ch  SU(2): Latency=1
  Successors:
   val SU(18): Latency=15 Reg=%vreg12

SU(18):   %vreg13<def> = LW %vreg12, 24; mem:LD4[%15] GR32Bit:%vreg13,%vreg12
  # preds left       : 6
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 30
  Height             : 2
  Predecessors:
   val SU(17): Latency=15 Reg=%vreg12
   ch  SU(16): Latency=1
   ch  SU(13): Latency=1
   ch  SU(10): Latency=1
   ch  SU(7): Latency=1
   ch  SU(2): Latency=1
  Successors:
   val SU(19): Latency=2 Reg=%vreg13
   ch  SU(19): Latency=0

SU(19):   SW %vreg13, %vreg5, 16; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 4)] GR32Bit:%vreg13,%vreg5
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 32
  Height             : 0
  Predecessors:
   val SU(18): Latency=2 Reg=%vreg13
   val SU(6): Latency=5 Reg=%vreg5
   ch  SU(18): Latency=0
   ch  SU(16): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 32
  Successors:
   val SU(17): Latency=5 Reg=%vreg0
   val SU(14): Latency=5 Reg=%vreg0
   val SU(11): Latency=5 Reg=%vreg0
   val SU(8): Latency=5 Reg=%vreg0
   val SU(2): Latency=5 Reg=%vreg0

SU(1):   %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 31
  Successors:
   val SU(3): Latency=5 Reg=%vreg1
   val SU(2): Latency=4 Reg=%vreg1

SU(2):   SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
  # preds left       : 2
  # succs left       : 9
  # rdefs left       : 0
  Latency            : 13
  Depth              : 5
  Height             : 27
  Predecessors:
   val SU(1): Latency=4 Reg=%vreg1
   val SU(0): Latency=5 Reg=%vreg0
  Successors:
   ch  SU(17): Latency=1
   ch  SU(14): Latency=1
   ch  SU(11): Latency=1
   ch  SU(8): Latency=1
   ch  SU(18): Latency=1
   ch  SU(15): Latency=1
   ch  SU(12): Latency=1
   ch  SU(9): Latency=1
   ch  SU(3): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(3):   %vreg2<def> = LW %vreg1, 8; mem:LD4[%3](align=8) GR32Bit:%vreg2,%vreg1
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 6
  Height             : 14
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg1
   ch  SU(2): Latency=1
  Successors:
   val SU(7): Latency=2 Reg=%vreg2
   ch  SU(7): Latency=0

SU(4):   %vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
   val SU(6): Latency=5 Reg=%vreg3

SU(5):   %vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
   val SU(6): Latency=5 Reg=%vreg4

SU(6):   %vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 17
  Predecessors:
   val SU(5): Latency=5 Reg=%vreg4
   val SU(4): Latency=5 Reg=%vreg3
  Successors:
   val SU(19): Latency=5 Reg=%vreg5
   val SU(16): Latency=5 Reg=%vreg5
   val SU(13): Latency=5 Reg=%vreg5
   val SU(10): Latency=5 Reg=%vreg5
   val SU(7): Latency=5 Reg=%vreg5

SU(7):   SW %vreg2, %vreg5, 0; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
  # preds left       : 3
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 13
  Depth              : 10
  Height             : 12
  Predecessors:
   val SU(3): Latency=2 Reg=%vreg2
   val SU(6): Latency=5 Reg=%vreg5
   ch  SU(3): Latency=0
  Successors:
   ch  SU(10): Latency=0
   ch  SU(18): Latency=1
   ch  SU(15): Latency=1
   ch  SU(12): Latency=1
   ch  SU(9): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(8):   %vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 6
  Height             : 26
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg0
   ch  SU(2): Latency=1
  Successors:
   val SU(9): Latency=15 Reg=%vreg6

SU(9):   %vreg7<def> = LW %vreg6, 12; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 21
  Height             : 11
  Predecessors:
   val SU(8): Latency=15 Reg=%vreg6
   ch  SU(7): Latency=1
   ch  SU(2): Latency=1
  Successors:
   val SU(10): Latency=2 Reg=%vreg7
   ch  SU(10): Latency=0

SU(10):   SW %vreg7, %vreg5, 4; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 13
  Depth              : 23
  Height             : 9
  Predecessors:
   val SU(9): Latency=2 Reg=%vreg7
   val SU(6): Latency=5 Reg=%vreg5
   ch  SU(9): Latency=0
   ch  SU(7): Latency=0
  Successors:
   ch  SU(13): Latency=0
   ch  SU(18): Latency=1
   ch  SU(15): Latency=1
   ch  SU(12): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(11):   %vreg8<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg8,%vreg0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 6
  Height             : 23
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg0
   ch  SU(2): Latency=1
  Successors:
   val SU(12): Latency=15 Reg=%vreg8

SU(12):   %vreg9<def> = LW %vreg8, 16; mem:LD4[%9] GR32Bit:%vreg9,%vreg8
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 24
  Height             : 8
  Predecessors:
   val SU(11): Latency=15 Reg=%vreg8
   ch  SU(10): Latency=1
   ch  SU(7): Latency=1
   ch  SU(2): Latency=1
  Successors:
   val SU(13): Latency=2 Reg=%vreg9
   ch  SU(13): Latency=0

SU(13):   SW %vreg9, %vreg5, 8; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2)] GR32Bit:%vreg9,%vreg5
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 13
  Depth              : 26
  Height             : 6
  Predecessors:
   val SU(12): Latency=2 Reg=%vreg9
   val SU(6): Latency=5 Reg=%vreg5
   ch  SU(12): Latency=0
   ch  SU(10): Latency=0
  Successors:
   ch  SU(16): Latency=0
   ch  SU(18): Latency=1
   ch  SU(15): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(14):   %vreg10<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg10,%vreg0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 6
  Height             : 20
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg0
   ch  SU(2): Latency=1
  Successors:
   val SU(15): Latency=15 Reg=%vreg10

SU(15):   %vreg11<def> = LW %vreg10, 20; mem:LD4[%12] GR32Bit:%vreg11,%vreg10
  # preds left       : 5
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 27
  Height             : 5
  Predecessors:
   val SU(14): Latency=15 Reg=%vreg10
   ch  SU(13): Latency=1
   ch  SU(10): Latency=1
   ch  SU(7): Latency=1
   ch  SU(2): Latency=1
  Successors:
   val SU(16): Latency=2 Reg=%vreg11
   ch  SU(16): Latency=0

SU(16):   SW %vreg11, %vreg5, 12; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 3)] GR32Bit:%vreg11,%vreg5
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 29
  Height             : 3
  Predecessors:
   val SU(15): Latency=2 Reg=%vreg11
   val SU(6): Latency=5 Reg=%vreg5
   ch  SU(15): Latency=0
   ch  SU(13): Latency=0
  Successors:
   ch  SU(19): Latency=0
   ch  SU(18): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(17):   %vreg12<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg12,%vreg0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 6
  Height             : 17
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg0
   ch  SU(2): Latency=1
  Successors:
   val SU(18): Latency=15 Reg=%vreg12

SU(18):   %vreg13<def> = LW %vreg12, 24; mem:LD4[%15] GR32Bit:%vreg13,%vreg12
  # preds left       : 6
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 30
  Height             : 2
  Predecessors:
   val SU(17): Latency=15 Reg=%vreg12
   ch  SU(16): Latency=1
   ch  SU(13): Latency=1
   ch  SU(10): Latency=1
   ch  SU(7): Latency=1
   ch  SU(2): Latency=1
  Successors:
   val SU(19): Latency=2 Reg=%vreg13
   ch  SU(19): Latency=0

SU(19):   SW %vreg13, %vreg5, 16; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 4)] GR32Bit:%vreg13,%vreg5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 32
  Height             : 0
  Predecessors:
   val SU(18): Latency=2 Reg=%vreg13
   val SU(6): Latency=5 Reg=%vreg5
   ch  SU(18): Latency=0
   ch  SU(16): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(4)  ILP: 1 / 1 = 1 Tree: 3 @0
Scheduling %vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
handleMove 80B -> 8B: %vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
     %vreg3:	[80r,112r:0)  0@80r
        -->	[8r,112r:0)  0@8r
  Tree: 4 @5
  Tree: 5 @5
  Tree: 6 @5
  Tree: 7 @5
Pick node SU(5)  ILP: 1 / 1 = 1 Tree: 3 @0
Scheduling %vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
handleMove 96B -> 12B: %vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
     %vreg4:	[96r,112r:0)  0@96r
        -->	[12r,112r:0)  0@12r
     zero:	EMPTY
        -->	EMPTY
Pick node SU(6)  ILP: 3 / 6 = 0.5 Tree: 3 @0
Scheduling %vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3

*** Renumbered SlotIndexes 12-28 ***
handleMove 112B -> 20B: %vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
     %vreg5:	[112r,320r:0)  0@112r
        -->	[20r,320r:0)  0@20r
     %vreg4:	[12r,112r:0)  0@12r
        -->	[12r,20r:0)  0@12r
     %vreg3:	[8r,112r:0)  0@8r
        -->	[8r,20r:0)  0@8r
Pick node SU(1)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
handleMove 32B -> 24B: %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
     %vreg1:	[32r,64r:0)  0@32r
        -->	[24r,64r:0)  0@24r
     t5:	EMPTY
        -->	EMPTY
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
Pick node SU(2)  ILP: 3 / 6 = 0.5 Tree: 1 @0
Scheduling SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
Pick node SU(17)  ILP: 1 / 7 = 0.142857 Tree: 7 @5
Scheduling %vreg12<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg12,%vreg0
handleMove 288B -> 56B: %vreg12<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg12,%vreg0
     %vreg12:	[288r,304r:0)  0@288r
        -->	[56r,304r:0)  0@56r
     %vreg0:	[28r,288r:0)  0@28r
        -->	[28r,240r:0)  0@28r
  Tree: 3 @5
Pick node SU(8)  ILP: 1 / 7 = 0.142857 Tree: 4 @5
Scheduling %vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
handleMove 144B -> 60B: %vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
     %vreg6:	[144r,160r:0)  0@144r
        -->	[60r,160r:0)  0@60r
     %vreg0:	[28r,240r:0)  0@28r
        -->	[28r,240r:0)  0@28r
  Tree: 3 @5
Pick node SU(11)  ILP: 1 / 7 = 0.142857 Tree: 5 @5
Scheduling %vreg8<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg8,%vreg0

*** Renumbered SlotIndexes 60-76 ***
handleMove 192B -> 68B: %vreg8<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg8,%vreg0
     %vreg8:	[192r,208r:0)  0@192r
        -->	[68r,208r:0)  0@68r
     %vreg0:	[28r,240r:0)  0@28r
        -->	[28r,240r:0)  0@28r
  Tree: 3 @5
Pick node SU(14)  ILP: 1 / 7 = 0.142857 Tree: 6 @5
Scheduling %vreg10<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg10,%vreg0
handleMove 240B -> 72B: %vreg10<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg10,%vreg0
     %vreg10:	[240r,256r:0)  0@240r
        -->	[72r,256r:0)  0@72r
     %vreg0:	[28r,240r:0)  0@28r
        -->	[28r,72r:0)  0@28r
  Tree: 3 @5
Pick node SU(3)  ILP: 1 / 7 = 0.142857 Tree: 2 @0
Scheduling %vreg2<def> = LW %vreg1, 8; mem:LD4[%3](align=8) GR32Bit:%vreg2,%vreg1
  Tree: 4 @5
  Tree: 5 @5
  Tree: 6 @5
  Tree: 7 @5
Pick node SU(7)  ILP: 5 / 11 = 0.454545 Tree: 2 @0
Scheduling SW %vreg2, %vreg5, 0; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
Pick node SU(9)  ILP: 2 / 22 = 0.0909091 Tree: 4 @5
Scheduling %vreg7<def> = LW %vreg6, 12; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
Pick node SU(10)  ILP: 3 / 24 = 0.125 Tree: 4 @5
Scheduling SW %vreg7, %vreg5, 4; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5
Pick node SU(12)  ILP: 2 / 25 = 0.08 Tree: 5 @5
Scheduling %vreg9<def> = LW %vreg8, 16; mem:LD4[%9] GR32Bit:%vreg9,%vreg8
Pick node SU(13)  ILP: 3 / 27 = 0.111111 Tree: 5 @5
Scheduling SW %vreg9, %vreg5, 8; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2)] GR32Bit:%vreg9,%vreg5
Pick node SU(15)  ILP: 2 / 28 = 0.0714286 Tree: 6 @5
Scheduling %vreg11<def> = LW %vreg10, 20; mem:LD4[%12] GR32Bit:%vreg11,%vreg10
Pick node SU(16)  ILP: 3 / 30 = 0.1 Tree: 6 @5
Scheduling SW %vreg11, %vreg5, 12; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 3)] GR32Bit:%vreg11,%vreg5
Pick node SU(18)  ILP: 2 / 31 = 0.0645161 Tree: 7 @5
Scheduling %vreg13<def> = LW %vreg12, 24; mem:LD4[%15] GR32Bit:%vreg13,%vreg12
Pick node SU(19)  ILP: 3 / 33 = 0.0909091 Tree: 7 @5
Scheduling SW %vreg13, %vreg5, 16; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 4)] GR32Bit:%vreg13,%vreg5
*** Final schedule for BB#0 ***
SU(4):   %vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
SU(5):   %vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
SU(6):   %vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
SU(1):   %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
SU(0):   %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
SU(2):   SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
SU(17):   %vreg12<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg12,%vreg0
SU(8):   %vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
SU(11):   %vreg8<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg8,%vreg0
SU(14):   %vreg10<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg10,%vreg0
SU(3):   %vreg2<def> = LW %vreg1, 8; mem:LD4[%3](align=8) GR32Bit:%vreg2,%vreg1
SU(7):   SW %vreg2, %vreg5, 0; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
SU(9):   %vreg7<def> = LW %vreg6, 12; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
SU(10):   SW %vreg7, %vreg5, 4; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5
SU(12):   %vreg9<def> = LW %vreg8, 16; mem:LD4[%9] GR32Bit:%vreg9,%vreg8
SU(13):   SW %vreg9, %vreg5, 8; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2)] GR32Bit:%vreg9,%vreg5
SU(15):   %vreg11<def> = LW %vreg10, 20; mem:LD4[%12] GR32Bit:%vreg11,%vreg10
SU(16):   SW %vreg11, %vreg5, 12; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 3)] GR32Bit:%vreg11,%vreg5
SU(18):   %vreg13<def> = LW %vreg12, 24; mem:LD4[%15] GR32Bit:%vreg13,%vreg12
SU(19):   SW %vreg13, %vreg5, 16; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 4)] GR32Bit:%vreg13,%vreg5


*** Renumbered SlotIndexes 4-140 ***

*** Renumbered SlotIndexes 16-168 ***

*** Renumbered SlotIndexes 28-188 ***

*** Renumbered SlotIndexes 40-216 ***

*** Renumbered SlotIndexes 52-236 ***

*** Renumbered SlotIndexes 64-264 ***

*** Renumbered SlotIndexes 76-284 ***

*** Renumbered SlotIndexes 88-312 ***

*** Renumbered SlotIndexes 100-332 ***

*** Renumbered SlotIndexes 112-352 ***

*** Renumbered SlotIndexes 124-364 ***

*** Renumbered SlotIndexes 136-376 ***

*** Renumbered SlotIndexes 148-388 ***

*** Renumbered SlotIndexes 160-400 ***

*** Renumbered SlotIndexes 172-412 ***

*** Renumbered SlotIndexes 184-424 ***

*** Renumbered SlotIndexes 196-436 ***

*** Renumbered SlotIndexes 208-448 ***

*** Renumbered SlotIndexes 220-460 ***

*** Renumbered SlotIndexes 232-472 ***

*** Renumbered SlotIndexes 244-484 ***

*** Renumbered SlotIndexes 256-496 ***

*** Renumbered SlotIndexes 268-508 ***

*** Renumbered SlotIndexes 280-520 ***

*** Renumbered SlotIndexes 292-532 ***

*** Renumbered SlotIndexes 304-544 ***

*** Renumbered SlotIndexes 316-556 ***

*** Renumbered SlotIndexes 328-568 ***

*** Renumbered SlotIndexes 340-580 ***

*** Renumbered SlotIndexes 352-592 ***

*** Renumbered SlotIndexes 364-604 ***

*** Renumbered SlotIndexes 376-616 ***

*** Renumbered SlotIndexes 388-628 ***

*** Renumbered SlotIndexes 400-640 ***
Partitioning instructions of the region into multiple CEs
instr:  %vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
instr:  %vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
instr:  %vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
instr:  %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
instr:  %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
instr:  SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
instr:  %vreg12<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg12,%vreg0
instr:  %vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
instr:  %vreg8<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg8,%vreg0
instr:  %vreg10<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg10,%vreg0
instr:  %vreg2<def> = LW %vreg1, 8; mem:LD4[%3](align=8) GR32Bit:%vreg2,%vreg1
instr:  SW %vreg2, %vreg5, 0; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
instr:  %vreg7<def> = LW %vreg6, 12; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
instr:  SW %vreg7, %vreg5, 4; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5
instr:  %vreg9<def> = LW %vreg8, 16; mem:LD4[%9] GR32Bit:%vreg9,%vreg8
instr:  SW %vreg9, %vreg5, 8; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2)] GR32Bit:%vreg9,%vreg5
instr:  %vreg11<def> = LW %vreg10, 20; mem:LD4[%12] GR32Bit:%vreg11,%vreg10
instr:  SW %vreg11, %vreg5, 12; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 3)] GR32Bit:%vreg11,%vreg5
instr:  %vreg13<def> = LW %vreg12, 24; mem:LD4[%15] GR32Bit:%vreg13,%vreg12
instr:  SW %vreg13, %vreg5, 16; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 4)] GR32Bit:%vreg13,%vreg5
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
before falloc, state of bb0:BB#0: derived from LLVM BB %redefine_start2.newName01
	%vreg14<def> = ADD %t5, %zero; GR32Bit:%vreg14
	%vreg16<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg16
	%vreg17<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg17
	%vreg18<def> = SRLI %vreg17, 12; GR32Bit:%vreg18,%vreg17
	%vreg19<def> = ADD %vreg16, %vreg18; GR32Bit:%vreg19,%vreg16,%vreg18
	%vreg20<def> = ADDI %zero, 16; GR32Bit:%vreg20
	%vreg21<def> = SRLI %t5, 22; GR32Bit:%vreg21
	%vreg22<def> = SRLI %t5, 12; GR32Bit:%vreg22
	%vreg23<def> = ANDI %vreg22, 15; GR32Bit:%vreg23,%vreg22
	%vreg24<def> = SRLI %t5, 6; GR32Bit:%vreg24
	%vreg25<def> = ANDI %vreg24, 63; GR32Bit:%vreg25,%vreg24
	%vreg26<def> = ADDI %zero, 832; GR32Bit:%vreg26
	%vreg27<def> = MUL %vreg21, %vreg26; GR32Bit:%vreg27,%vreg21,%vreg26
	%vreg28<def> = ADDI %zero, 52; GR32Bit:%vreg28
	%vreg29<def> = MUL %vreg23, %vreg28; GR32Bit:%vreg29,%vreg23,%vreg28
	%vreg30<def> = ADD %vreg29, %vreg25; GR32Bit:%vreg30,%vreg29,%vreg25
	%vreg31<def> = ADD %vreg30, %vreg27; GR32Bit:%vreg31,%vreg30,%vreg27
	%vreg32<def> = MUL %vreg31, %vreg20; GR32Bit:%vreg32,%vreg31,%vreg20
	%vreg15<def> = ADD %vreg19, %vreg32; GR32Bit:%vreg15,%vreg19,%vreg32
	%vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
	%vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
	%vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
	%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
	%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
	SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
	%vreg12<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg12,%vreg0
	%vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
	%vreg8<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg8,%vreg0
	%vreg10<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg10,%vreg0
	%vreg2<def> = LW %vreg1, 8; mem:LD4[%3](align=8) GR32Bit:%vreg2,%vreg1
	SW %vreg2, %vreg5, 0; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
	%vreg7<def> = LW %vreg6, 12; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
	SW %vreg7, %vreg5, 4; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5
	%vreg9<def> = LW %vreg8, 16; mem:LD4[%9] GR32Bit:%vreg9,%vreg8
	SW %vreg9, %vreg5, 8; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2)] GR32Bit:%vreg9,%vreg5
	%vreg11<def> = LW %vreg10, 20; mem:LD4[%12] GR32Bit:%vreg11,%vreg10
	SW %vreg11, %vreg5, 12; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 3)] GR32Bit:%vreg11,%vreg5
	%vreg13<def> = LW %vreg12, 24; mem:LD4[%15] GR32Bit:%vreg13,%vreg12
	SW %vreg13, %vreg5, 16; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 4)] GR32Bit:%vreg13,%vreg5
	%vreg33<def> = ADD %t5, %zero; GR32Bit:%vreg33
	%vreg35<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg35
	%vreg36<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg36
	%vreg37<def> = SRLI %vreg36, 12; GR32Bit:%vreg37,%vreg36
	%vreg38<def> = ADD %vreg35, %vreg37; GR32Bit:%vreg38,%vreg35,%vreg37
	%vreg39<def> = ADDI %zero, 16; GR32Bit:%vreg39
	%vreg40<def> = SRLI %t5, 22; GR32Bit:%vreg40
	%vreg41<def> = SRLI %t5, 12; GR32Bit:%vreg41
	%vreg42<def> = ANDI %vreg41, 15; GR32Bit:%vreg42,%vreg41
	%vreg43<def> = SRLI %t5, 6; GR32Bit:%vreg43
	%vreg44<def> = ANDI %vreg43, 63; GR32Bit:%vreg44,%vreg43
	%vreg45<def> = ADDI %zero, 832; GR32Bit:%vreg45
	%vreg46<def> = MUL %vreg40, %vreg45; GR32Bit:%vreg46,%vreg40,%vreg45
	%vreg47<def> = ADDI %zero, 52; GR32Bit:%vreg47
	%vreg48<def> = MUL %vreg42, %vreg47; GR32Bit:%vreg48,%vreg42,%vreg47
	%vreg49<def> = ADD %vreg48, %vreg44; GR32Bit:%vreg49,%vreg48,%vreg44
	%vreg50<def> = ADD %vreg49, %vreg46; GR32Bit:%vreg50,%vreg49,%vreg46
	%vreg51<def> = MUL %vreg50, %vreg39; GR32Bit:%vreg51,%vreg50,%vreg39
	%vreg34<def> = ADD %vreg38, %vreg51; GR32Bit:%vreg34,%vreg38,%vreg51
	%vreg52<def> = ADD %t5, %zero; GR32Bit:%vreg52
	%vreg54<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg54
	%vreg55<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg55
	%vreg56<def> = SRLI %vreg55, 12; GR32Bit:%vreg56,%vreg55
	%vreg57<def> = ADD %vreg54, %vreg56; GR32Bit:%vreg57,%vreg54,%vreg56
	%vreg58<def> = ADDI %zero, 16; GR32Bit:%vreg58
	%vreg59<def> = SRLI %t5, 22; GR32Bit:%vreg59
	%vreg60<def> = SRLI %t5, 12; GR32Bit:%vreg60
	%vreg61<def> = ANDI %vreg60, 15; GR32Bit:%vreg61,%vreg60
	%vreg62<def> = SRLI %t5, 6; GR32Bit:%vreg62
	%vreg63<def> = ANDI %vreg62, 63; GR32Bit:%vreg63,%vreg62
	%vreg64<def> = ADDI %zero, 832; GR32Bit:%vreg64
	%vreg65<def> = MUL %vreg59, %vreg64; GR32Bit:%vreg65,%vreg59,%vreg64
	%vreg66<def> = ADDI %zero, 52; GR32Bit:%vreg66
	%vreg67<def> = MUL %vreg61, %vreg66; GR32Bit:%vreg67,%vreg61,%vreg66
	%vreg68<def> = ADD %vreg67, %vreg63; GR32Bit:%vreg68,%vreg67,%vreg63
	%vreg69<def> = ADD %vreg68, %vreg65; GR32Bit:%vreg69,%vreg68,%vreg65
	%vreg70<def> = MUL %vreg69, %vreg58; GR32Bit:%vreg70,%vreg69,%vreg58
	%vreg53<def> = ADD %vreg57, %vreg70; GR32Bit:%vreg53,%vreg57,%vreg70
	%vreg71<def> = ADD %t5, %zero; GR32Bit:%vreg71
	%vreg73<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg73
	%vreg74<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg74
	%vreg75<def> = SRLI %vreg74, 12; GR32Bit:%vreg75,%vreg74
	%vreg76<def> = ADD %vreg73, %vreg75; GR32Bit:%vreg76,%vreg73,%vreg75
	%vreg77<def> = ADDI %zero, 16; GR32Bit:%vreg77
	%vreg78<def> = SRLI %t5, 22; GR32Bit:%vreg78
	%vreg79<def> = SRLI %t5, 12; GR32Bit:%vreg79
	%vreg80<def> = ANDI %vreg79, 15; GR32Bit:%vreg80,%vreg79
	%vreg81<def> = SRLI %t5, 6; GR32Bit:%vreg81
	%vreg82<def> = ANDI %vreg81, 63; GR32Bit:%vreg82,%vreg81
	%vreg83<def> = ADDI %zero, 832; GR32Bit:%vreg83
	%vreg84<def> = MUL %vreg78, %vreg83; GR32Bit:%vreg84,%vreg78,%vreg83
	%vreg85<def> = ADDI %zero, 52; GR32Bit:%vreg85
	%vreg86<def> = MUL %vreg80, %vreg85; GR32Bit:%vreg86,%vreg80,%vreg85
	%vreg87<def> = ADD %vreg86, %vreg82; GR32Bit:%vreg87,%vreg86,%vreg82
	%vreg88<def> = ADD %vreg87, %vreg84; GR32Bit:%vreg88,%vreg87,%vreg84
	%vreg89<def> = MUL %vreg88, %vreg77; GR32Bit:%vreg89,%vreg88,%vreg77
	%vreg72<def> = ADD %vreg76, %vreg89; GR32Bit:%vreg72,%vreg76,%vreg89
Adding all fallocs first to avoid stalls due to sequential fallocs and fbinds
Adding writecm(for writing sync count to context frames) and fbind instructions
live end of child is itself
live end of child is itself
Adding localref sw instructions to hyperOp redefine_start2
Adding writecm instructions to hyperOp redefine_start2
Adding writecmp and sync instructions
Adding endHyperOp instructions to each pHyperOp

*** Renumbered SlotIndexes 412-652 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 424-664 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 436-676 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 448-688 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 460-700 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 472-712 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0
After Shuffling regions of basic block, state of BB#0:
BB#0: derived from LLVM BB %redefine_start2.newName01
	%vreg14<def> = ADD %t5, %zero; GR32Bit:%vreg14
	%vreg16<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg16
	%vreg17<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg17
	%vreg18<def> = SRLI %vreg17, 12; GR32Bit:%vreg18,%vreg17
	%vreg19<def> = ADD %vreg16, %vreg18; GR32Bit:%vreg19,%vreg16,%vreg18
	%vreg20<def> = ADDI %zero, 16; GR32Bit:%vreg20
	%vreg21<def> = SRLI %t5, 22; GR32Bit:%vreg21
	%vreg22<def> = SRLI %t5, 12; GR32Bit:%vreg22
	%vreg23<def> = ANDI %vreg22, 15; GR32Bit:%vreg23,%vreg22
	%vreg24<def> = SRLI %t5, 6; GR32Bit:%vreg24
	%vreg25<def> = ANDI %vreg24, 63; GR32Bit:%vreg25,%vreg24
	%vreg26<def> = ADDI %zero, 832; GR32Bit:%vreg26
	%vreg27<def> = MUL %vreg21, %vreg26; GR32Bit:%vreg27,%vreg21,%vreg26
	%vreg28<def> = ADDI %zero, 52; GR32Bit:%vreg28
	%vreg29<def> = MUL %vreg23, %vreg28; GR32Bit:%vreg29,%vreg23,%vreg28
	%vreg30<def> = ADD %vreg29, %vreg25; GR32Bit:%vreg30,%vreg29,%vreg25
	%vreg31<def> = ADD %vreg30, %vreg27; GR32Bit:%vreg31,%vreg30,%vreg27
	%vreg32<def> = MUL %vreg31, %vreg20; GR32Bit:%vreg32,%vreg31,%vreg20
	%vreg15<def> = ADD %vreg19, %vreg32; GR32Bit:%vreg15,%vreg19,%vreg32
	%vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
	%vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
	%vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
	%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
	%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
	SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
	%vreg12<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg12,%vreg0
	%vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
	%vreg8<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg8,%vreg0
	%vreg10<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg10,%vreg0
	%vreg2<def> = LW %vreg1, 8; mem:LD4[%3](align=8) GR32Bit:%vreg2,%vreg1
	SW %vreg2, %vreg5, 0; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
	%vreg7<def> = LW %vreg6, 12; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
	SW %vreg7, %vreg5, 4; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5
	%vreg9<def> = LW %vreg8, 16; mem:LD4[%9] GR32Bit:%vreg9,%vreg8
	SW %vreg9, %vreg5, 8; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2)] GR32Bit:%vreg9,%vreg5
	%vreg11<def> = LW %vreg10, 20; mem:LD4[%12] GR32Bit:%vreg11,%vreg10
	SW %vreg11, %vreg5, 12; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 3)] GR32Bit:%vreg11,%vreg5
	%vreg13<def> = LW %vreg12, 24; mem:LD4[%15] GR32Bit:%vreg13,%vreg12
	SW %vreg13, %vreg5, 16; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 4)] GR32Bit:%vreg13,%vreg5
	FDELETE %t4, 0
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg33<def> = ADD %t5, %zero; GR32Bit:%vreg33
	%vreg35<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg35
	%vreg36<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg36
	%vreg37<def> = SRLI %vreg36, 12; GR32Bit:%vreg37,%vreg36
	%vreg38<def> = ADD %vreg35, %vreg37; GR32Bit:%vreg38,%vreg35,%vreg37
	%vreg39<def> = ADDI %zero, 16; GR32Bit:%vreg39
	%vreg40<def> = SRLI %t5, 22; GR32Bit:%vreg40
	%vreg41<def> = SRLI %t5, 12; GR32Bit:%vreg41
	%vreg42<def> = ANDI %vreg41, 15; GR32Bit:%vreg42,%vreg41
	%vreg43<def> = SRLI %t5, 6; GR32Bit:%vreg43
	%vreg44<def> = ANDI %vreg43, 63; GR32Bit:%vreg44,%vreg43
	%vreg45<def> = ADDI %zero, 832; GR32Bit:%vreg45
	%vreg46<def> = MUL %vreg40, %vreg45; GR32Bit:%vreg46,%vreg40,%vreg45
	%vreg47<def> = ADDI %zero, 52; GR32Bit:%vreg47
	%vreg48<def> = MUL %vreg42, %vreg47; GR32Bit:%vreg48,%vreg42,%vreg47
	%vreg49<def> = ADD %vreg48, %vreg44; GR32Bit:%vreg49,%vreg48,%vreg44
	%vreg50<def> = ADD %vreg49, %vreg46; GR32Bit:%vreg50,%vreg49,%vreg46
	%vreg51<def> = MUL %vreg50, %vreg39; GR32Bit:%vreg51,%vreg50,%vreg39
	%vreg34<def> = ADD %vreg38, %vreg51; GR32Bit:%vreg34,%vreg38,%vreg51
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg52<def> = ADD %t5, %zero; GR32Bit:%vreg52
	%vreg54<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg54
	%vreg55<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg55
	%vreg56<def> = SRLI %vreg55, 12; GR32Bit:%vreg56,%vreg55
	%vreg57<def> = ADD %vreg54, %vreg56; GR32Bit:%vreg57,%vreg54,%vreg56
	%vreg58<def> = ADDI %zero, 16; GR32Bit:%vreg58
	%vreg59<def> = SRLI %t5, 22; GR32Bit:%vreg59
	%vreg60<def> = SRLI %t5, 12; GR32Bit:%vreg60
	%vreg61<def> = ANDI %vreg60, 15; GR32Bit:%vreg61,%vreg60
	%vreg62<def> = SRLI %t5, 6; GR32Bit:%vreg62
	%vreg63<def> = ANDI %vreg62, 63; GR32Bit:%vreg63,%vreg62
	%vreg64<def> = ADDI %zero, 832; GR32Bit:%vreg64
	%vreg65<def> = MUL %vreg59, %vreg64; GR32Bit:%vreg65,%vreg59,%vreg64
	%vreg66<def> = ADDI %zero, 52; GR32Bit:%vreg66
	%vreg67<def> = MUL %vreg61, %vreg66; GR32Bit:%vreg67,%vreg61,%vreg66
	%vreg68<def> = ADD %vreg67, %vreg63; GR32Bit:%vreg68,%vreg67,%vreg63
	%vreg69<def> = ADD %vreg68, %vreg65; GR32Bit:%vreg69,%vreg68,%vreg65
	%vreg70<def> = MUL %vreg69, %vreg58; GR32Bit:%vreg70,%vreg69,%vreg58
	%vreg53<def> = ADD %vreg57, %vreg70; GR32Bit:%vreg53,%vreg57,%vreg70
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg71<def> = ADD %t5, %zero; GR32Bit:%vreg71
	%vreg73<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg73
	%vreg74<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg74
	%vreg75<def> = SRLI %vreg74, 12; GR32Bit:%vreg75,%vreg74
	%vreg76<def> = ADD %vreg73, %vreg75; GR32Bit:%vreg76,%vreg73,%vreg75
	%vreg77<def> = ADDI %zero, 16; GR32Bit:%vreg77
	%vreg78<def> = SRLI %t5, 22; GR32Bit:%vreg78
	%vreg79<def> = SRLI %t5, 12; GR32Bit:%vreg79
	%vreg80<def> = ANDI %vreg79, 15; GR32Bit:%vreg80,%vreg79
	%vreg81<def> = SRLI %t5, 6; GR32Bit:%vreg81
	%vreg82<def> = ANDI %vreg81, 63; GR32Bit:%vreg82,%vreg81
	%vreg83<def> = ADDI %zero, 832; GR32Bit:%vreg83
	%vreg84<def> = MUL %vreg78, %vreg83; GR32Bit:%vreg84,%vreg78,%vreg83
	%vreg85<def> = ADDI %zero, 52; GR32Bit:%vreg85
	%vreg86<def> = MUL %vreg80, %vreg85; GR32Bit:%vreg86,%vreg80,%vreg85
	%vreg87<def> = ADD %vreg86, %vreg82; GR32Bit:%vreg87,%vreg86,%vreg82
	%vreg88<def> = ADD %vreg87, %vreg84; GR32Bit:%vreg88,%vreg87,%vreg84
	%vreg89<def> = MUL %vreg88, %vreg77; GR32Bit:%vreg89,%vreg88,%vreg77
	%vreg72<def> = ADD %vreg76, %vreg89; GR32Bit:%vreg72,%vreg76,%vreg89
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 316-788 ***

*** Renumbered SlotIndexes 304-808 ***

*** Renumbered SlotIndexes 216-856 ***

*** Renumbered SlotIndexes 204-876 ***

*** Renumbered SlotIndexes 204-892 ***

*** Renumbered SlotIndexes 112-936 ***

*** Renumbered SlotIndexes 100-956 ***

*** Renumbered SlotIndexes 100-972 ***

*** Renumbered SlotIndexes 100-988 ***

*** Renumbered SlotIndexes 100-1004 ***

*** Renumbered SlotIndexes 100-1020 ***

*** Renumbered SlotIndexes 100-1036 ***

*** Renumbered SlotIndexes 100-1052 ***

*** Renumbered SlotIndexes 100-1068 ***

*** Renumbered SlotIndexes 100-1084 ***

*** Renumbered SlotIndexes 100-1100 ***

*** Renumbered SlotIndexes 100-1116 ***

*** Renumbered SlotIndexes 100-1132 ***

*** Renumbered SlotIndexes 12-1172 ***
Creating pHyperOp bundles for CEs for bb0
  %vreg33<def> = ADD %t5, %zero; GR32Bit:%vreg33
starting at   %vreg14<def> = ADD %t5, %zero; GR32Bit:%vreg14
  %vreg52<def> = ADD %t5, %zero; GR32Bit:%vreg52
starting at   %vreg33<def> = ADD %t5, %zero; GR32Bit:%vreg33
  %vreg71<def> = ADD %t5, %zero; GR32Bit:%vreg71
starting at   %vreg52<def> = ADD %t5, %zero; GR32Bit:%vreg52
starting at   %vreg71<def> = ADD %t5, %zero; GR32Bit:%vreg71
After bundling, state of BB0:BB#0: derived from LLVM BB %redefine_start2.newName01
	%vreg14<def> = ADD %t5, %zero; GR32Bit:%vreg14
	  * %vreg16<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg16
	  * %vreg17<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg17
	  * %vreg18<def> = SRLI %vreg17, 12; GR32Bit:%vreg18,%vreg17
	  * %vreg19<def> = ADD %vreg16, %vreg18; GR32Bit:%vreg19,%vreg16,%vreg18
	  * %vreg20<def> = ADDI %zero, 16; GR32Bit:%vreg20
	  * %vreg21<def> = SRLI %t5, 22; GR32Bit:%vreg21
	  * %vreg22<def> = SRLI %t5, 12; GR32Bit:%vreg22
	  * %vreg23<def> = ANDI %vreg22, 15; GR32Bit:%vreg23,%vreg22
	  * %vreg24<def> = SRLI %t5, 6; GR32Bit:%vreg24
	  * %vreg25<def> = ANDI %vreg24, 63; GR32Bit:%vreg25,%vreg24
	  * %vreg26<def> = ADDI %zero, 832; GR32Bit:%vreg26
	  * %vreg27<def> = MUL %vreg21, %vreg26; GR32Bit:%vreg27,%vreg21,%vreg26
	  * %vreg28<def> = ADDI %zero, 52; GR32Bit:%vreg28
	  * %vreg29<def> = MUL %vreg23, %vreg28; GR32Bit:%vreg29,%vreg23,%vreg28
	  * %vreg30<def> = ADD %vreg29, %vreg25; GR32Bit:%vreg30,%vreg29,%vreg25
	  * %vreg31<def> = ADD %vreg30, %vreg27; GR32Bit:%vreg31,%vreg30,%vreg27
	  * %vreg32<def> = MUL %vreg31, %vreg20; GR32Bit:%vreg32,%vreg31,%vreg20
	  * %vreg15<def> = ADD %vreg19, %vreg32; GR32Bit:%vreg15,%vreg19,%vreg32
	  * %vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
	  * %vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
	  * %vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
	  * %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
	  * %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
	  * SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
	  * %vreg12<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg12,%vreg0
	  * %vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
	  * %vreg8<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg8,%vreg0
	  * %vreg10<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg10,%vreg0
	  * %vreg2<def> = LW %vreg1, 8; mem:LD4[%3](align=8) GR32Bit:%vreg2,%vreg1
	  * SW %vreg2, %vreg5, 0; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
	  * %vreg7<def> = LW %vreg6, 12; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
	  * SW %vreg7, %vreg5, 4; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5
	  * %vreg9<def> = LW %vreg8, 16; mem:LD4[%9] GR32Bit:%vreg9,%vreg8
	  * SW %vreg9, %vreg5, 8; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2)] GR32Bit:%vreg9,%vreg5
	  * %vreg11<def> = LW %vreg10, 20; mem:LD4[%12] GR32Bit:%vreg11,%vreg10
	  * SW %vreg11, %vreg5, 12; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 3)] GR32Bit:%vreg11,%vreg5
	  * %vreg13<def> = LW %vreg12, 24; mem:LD4[%15] GR32Bit:%vreg13,%vreg12
	  * SW %vreg13, %vreg5, 16; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 4)] GR32Bit:%vreg13,%vreg5
	  * FDELETE %t4, 0
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg33<def> = ADD %t5, %zero; GR32Bit:%vreg33
	  * %vreg35<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg35
	  * %vreg36<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg36
	  * %vreg37<def> = SRLI %vreg36, 12; GR32Bit:%vreg37,%vreg36
	  * %vreg38<def> = ADD %vreg35, %vreg37; GR32Bit:%vreg38,%vreg35,%vreg37
	  * %vreg39<def> = ADDI %zero, 16; GR32Bit:%vreg39
	  * %vreg40<def> = SRLI %t5, 22; GR32Bit:%vreg40
	  * %vreg41<def> = SRLI %t5, 12; GR32Bit:%vreg41
	  * %vreg42<def> = ANDI %vreg41, 15; GR32Bit:%vreg42,%vreg41
	  * %vreg43<def> = SRLI %t5, 6; GR32Bit:%vreg43
	  * %vreg44<def> = ANDI %vreg43, 63; GR32Bit:%vreg44,%vreg43
	  * %vreg45<def> = ADDI %zero, 832; GR32Bit:%vreg45
	  * %vreg46<def> = MUL %vreg40, %vreg45; GR32Bit:%vreg46,%vreg40,%vreg45
	  * %vreg47<def> = ADDI %zero, 52; GR32Bit:%vreg47
	  * %vreg48<def> = MUL %vreg42, %vreg47; GR32Bit:%vreg48,%vreg42,%vreg47
	  * %vreg49<def> = ADD %vreg48, %vreg44; GR32Bit:%vreg49,%vreg48,%vreg44
	  * %vreg50<def> = ADD %vreg49, %vreg46; GR32Bit:%vreg50,%vreg49,%vreg46
	  * %vreg51<def> = MUL %vreg50, %vreg39; GR32Bit:%vreg51,%vreg50,%vreg39
	  * %vreg34<def> = ADD %vreg38, %vreg51; GR32Bit:%vreg34,%vreg38,%vreg51
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg52<def> = ADD %t5, %zero; GR32Bit:%vreg52
	  * %vreg54<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg54
	  * %vreg55<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg55
	  * %vreg56<def> = SRLI %vreg55, 12; GR32Bit:%vreg56,%vreg55
	  * %vreg57<def> = ADD %vreg54, %vreg56; GR32Bit:%vreg57,%vreg54,%vreg56
	  * %vreg58<def> = ADDI %zero, 16; GR32Bit:%vreg58
	  * %vreg59<def> = SRLI %t5, 22; GR32Bit:%vreg59
	  * %vreg60<def> = SRLI %t5, 12; GR32Bit:%vreg60
	  * %vreg61<def> = ANDI %vreg60, 15; GR32Bit:%vreg61,%vreg60
	  * %vreg62<def> = SRLI %t5, 6; GR32Bit:%vreg62
	  * %vreg63<def> = ANDI %vreg62, 63; GR32Bit:%vreg63,%vreg62
	  * %vreg64<def> = ADDI %zero, 832; GR32Bit:%vreg64
	  * %vreg65<def> = MUL %vreg59, %vreg64; GR32Bit:%vreg65,%vreg59,%vreg64
	  * %vreg66<def> = ADDI %zero, 52; GR32Bit:%vreg66
	  * %vreg67<def> = MUL %vreg61, %vreg66; GR32Bit:%vreg67,%vreg61,%vreg66
	  * %vreg68<def> = ADD %vreg67, %vreg63; GR32Bit:%vreg68,%vreg67,%vreg63
	  * %vreg69<def> = ADD %vreg68, %vreg65; GR32Bit:%vreg69,%vreg68,%vreg65
	  * %vreg70<def> = MUL %vreg69, %vreg58; GR32Bit:%vreg70,%vreg69,%vreg58
	  * %vreg53<def> = ADD %vreg57, %vreg70; GR32Bit:%vreg53,%vreg57,%vreg70
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg71<def> = ADD %t5, %zero; GR32Bit:%vreg71
	  * %vreg73<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg73
	  * %vreg74<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg74
	  * %vreg75<def> = SRLI %vreg74, 12; GR32Bit:%vreg75,%vreg74
	  * %vreg76<def> = ADD %vreg73, %vreg75; GR32Bit:%vreg76,%vreg73,%vreg75
	  * %vreg77<def> = ADDI %zero, 16; GR32Bit:%vreg77
	  * %vreg78<def> = SRLI %t5, 22; GR32Bit:%vreg78
	  * %vreg79<def> = SRLI %t5, 12; GR32Bit:%vreg79
	  * %vreg80<def> = ANDI %vreg79, 15; GR32Bit:%vreg80,%vreg79
	  * %vreg81<def> = SRLI %t5, 6; GR32Bit:%vreg81
	  * %vreg82<def> = ANDI %vreg81, 63; GR32Bit:%vreg82,%vreg81
	  * %vreg83<def> = ADDI %zero, 832; GR32Bit:%vreg83
	  * %vreg84<def> = MUL %vreg78, %vreg83; GR32Bit:%vreg84,%vreg78,%vreg83
	  * %vreg85<def> = ADDI %zero, 52; GR32Bit:%vreg85
	  * %vreg86<def> = MUL %vreg80, %vreg85; GR32Bit:%vreg86,%vreg80,%vreg85
	  * %vreg87<def> = ADD %vreg86, %vreg82; GR32Bit:%vreg87,%vreg86,%vreg82
	  * %vreg88<def> = ADD %vreg87, %vreg84; GR32Bit:%vreg88,%vreg87,%vreg84
	  * %vreg89<def> = MUL %vreg88, %vreg77; GR32Bit:%vreg89,%vreg88,%vreg77
	  * %vreg72<def> = ADD %vreg76, %vreg89; GR32Bit:%vreg72,%vreg76,%vreg89
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
Patching the instructions that are supposed to use the physical registers r30 and r31
Computing live-in reg-units in ABI blocks.
Created 0 new intervals.

*** Renumbered SlotIndexes 8-1192 ***
********** INTERVALS **********
t5 = EMPTY
zero = EMPTY
%vreg0 = [200r,240r:0)  0@200r
%vreg1 = [192r,248r:0)  0@192r
%vreg2 = [248r,256r:0)  0@248r
%vreg3 = [168r,184r:0)  0@168r
%vreg4 = [176r,184r:0)  0@176r
%vreg5 = [184r,320r:0)  0@184r
%vreg6 = [224r,264r:0)  0@224r
%vreg7 = [264r,272r:0)  0@264r
%vreg8 = [232r,280r:0)  0@232r
%vreg9 = [280r,288r:0)  0@280r
%vreg10 = [240r,296r:0)  0@240r
%vreg11 = [296r,304r:0)  0@296r
%vreg12 = [216r,312r:0)  0@216r
%vreg13 = [312r,320r:0)  0@312r
%vreg14 = [4r,4d:0)  0@4r
%vreg15 = [160r,160d:0)  0@160r
%vreg16 = [24r,48r:0)  0@24r
%vreg17 = [32r,40r:0)  0@32r
%vreg18 = [40r,48r:0)  0@40r
%vreg19 = [48r,160r:0)  0@48r
%vreg20 = [56r,152r:0)  0@56r
%vreg21 = [64r,112r:0)  0@64r
%vreg22 = [72r,80r:0)  0@72r
%vreg23 = [80r,128r:0)  0@80r
%vreg24 = [88r,96r:0)  0@88r
%vreg25 = [96r,136r:0)  0@96r
%vreg26 = [104r,112r:0)  0@104r
%vreg27 = [112r,144r:0)  0@112r
%vreg28 = [120r,128r:0)  0@120r
%vreg29 = [128r,136r:0)  0@128r
%vreg30 = [136r,144r:0)  0@136r
%vreg31 = [144r,152r:0)  0@144r
%vreg32 = [152r,160r:0)  0@152r
%vreg33 = [360r,360d:0)  0@360r
%vreg34 = [504r,504d:0)  0@504r
%vreg35 = [368r,392r:0)  0@368r
%vreg36 = [376r,384r:0)  0@376r
%vreg37 = [384r,392r:0)  0@384r
%vreg38 = [392r,504r:0)  0@392r
%vreg39 = [400r,496r:0)  0@400r
%vreg40 = [408r,456r:0)  0@408r
%vreg41 = [416r,424r:0)  0@416r
%vreg42 = [424r,472r:0)  0@424r
%vreg43 = [432r,440r:0)  0@432r
%vreg44 = [440r,480r:0)  0@440r
%vreg45 = [448r,456r:0)  0@448r
%vreg46 = [456r,488r:0)  0@456r
%vreg47 = [464r,472r:0)  0@464r
%vreg48 = [472r,480r:0)  0@472r
%vreg49 = [480r,488r:0)  0@480r
%vreg50 = [488r,496r:0)  0@488r
%vreg51 = [496r,504r:0)  0@496r
%vreg52 = [536r,536d:0)  0@536r
%vreg53 = [680r,680d:0)  0@680r
%vreg54 = [544r,568r:0)  0@544r
%vreg55 = [552r,560r:0)  0@552r
%vreg56 = [560r,568r:0)  0@560r
%vreg57 = [568r,680r:0)  0@568r
%vreg58 = [576r,672r:0)  0@576r
%vreg59 = [584r,632r:0)  0@584r
%vreg60 = [592r,600r:0)  0@592r
%vreg61 = [600r,648r:0)  0@600r
%vreg62 = [608r,616r:0)  0@608r
%vreg63 = [616r,656r:0)  0@616r
%vreg64 = [624r,632r:0)  0@624r
%vreg65 = [632r,664r:0)  0@632r
%vreg66 = [640r,648r:0)  0@640r
%vreg67 = [648r,656r:0)  0@648r
%vreg68 = [656r,664r:0)  0@656r
%vreg69 = [664r,672r:0)  0@664r
%vreg70 = [672r,680r:0)  0@672r
%vreg71 = [712r,712d:0)  0@712r
%vreg72 = [856r,856d:0)  0@856r
%vreg73 = [720r,744r:0)  0@720r
%vreg74 = [728r,736r:0)  0@728r
%vreg75 = [736r,744r:0)  0@736r
%vreg76 = [744r,856r:0)  0@744r
%vreg77 = [752r,848r:0)  0@752r
%vreg78 = [760r,808r:0)  0@760r
%vreg79 = [768r,776r:0)  0@768r
%vreg80 = [776r,824r:0)  0@776r
%vreg81 = [784r,792r:0)  0@784r
%vreg82 = [792r,832r:0)  0@792r
%vreg83 = [800r,808r:0)  0@800r
%vreg84 = [808r,840r:0)  0@808r
%vreg85 = [816r,824r:0)  0@816r
%vreg86 = [824r,832r:0)  0@824r
%vreg87 = [832r,840r:0)  0@832r
%vreg88 = [840r,848r:0)  0@840r
%vreg89 = [848r,856r:0)  0@848r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start2: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start2.newName01
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg16<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg16
4B		  * %vreg17<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg17
4B		  * %vreg18<def> = SRLI %vreg17, 12; GR32Bit:%vreg18,%vreg17
4B		  * %vreg19<def> = ADD %vreg16, %vreg18; GR32Bit:%vreg19,%vreg16,%vreg18
4B		  * %vreg20<def> = ADDI %zero, 16; GR32Bit:%vreg20
4B		  * %vreg21<def> = SRLI %t5, 22; GR32Bit:%vreg21
4B		  * %vreg22<def> = SRLI %t5, 12; GR32Bit:%vreg22
4B		  * %vreg23<def> = ANDI %vreg22, 15; GR32Bit:%vreg23,%vreg22
4B		  * %vreg24<def> = SRLI %t5, 6; GR32Bit:%vreg24
4B		  * %vreg25<def> = ANDI %vreg24, 63; GR32Bit:%vreg25,%vreg24
4B		  * %vreg26<def> = ADDI %zero, 832; GR32Bit:%vreg26
4B		  * %vreg27<def> = MUL %vreg21, %vreg26; GR32Bit:%vreg27,%vreg21,%vreg26
4B		  * %vreg28<def> = ADDI %zero, 52; GR32Bit:%vreg28
4B		  * %vreg29<def> = MUL %vreg23, %vreg28; GR32Bit:%vreg29,%vreg23,%vreg28
4B		  * %vreg30<def> = ADD %vreg29, %vreg25; GR32Bit:%vreg30,%vreg29,%vreg25
4B		  * %vreg31<def> = ADD %vreg30, %vreg27; GR32Bit:%vreg31,%vreg30,%vreg27
4B		  * %vreg32<def> = MUL %vreg31, %vreg20; GR32Bit:%vreg32,%vreg31,%vreg20
4B		  * %t5<def> = ADD %vreg19, %vreg32; GR32Bit:%vreg19,%vreg32
4B		  * %vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
4B		  * %vreg4<def> = LUI <MCSym="%lo("ga#256")">; GR32Bit:%vreg4
4B		  * SRLI %vreg4, %vreg4, 12; GR32Bit:%vreg4
4B		  * %vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
4B		  * %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
4B		  * %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
4B		  * SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
4B		  * %vreg12<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg12,%vreg0
4B		  * %vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
4B		  * %vreg8<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg8,%vreg0
4B		  * %vreg10<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg10,%vreg0
4B		  * %vreg2<def> = LW %vreg1, 8; mem:LD4[%3](align=8) GR32Bit:%vreg2,%vreg1
4B		  * SW %vreg2, %vreg5, 0; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
4B		  * %vreg7<def> = LW %vreg6, 12; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
4B		  * SW %vreg7, %vreg5, 4; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5
4B		  * %vreg9<def> = LW %vreg8, 16; mem:LD4[%9] GR32Bit:%vreg9,%vreg8
4B		  * SW %vreg9, %vreg5, 8; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2)] GR32Bit:%vreg9,%vreg5
4B		  * %vreg11<def> = LW %vreg10, 20; mem:LD4[%12] GR32Bit:%vreg11,%vreg10
4B		  * SW %vreg11, %vreg5, 12; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 3)] GR32Bit:%vreg11,%vreg5
4B		  * %vreg13<def> = LW %vreg12, 24; mem:LD4[%15] GR32Bit:%vreg13,%vreg12
4B		  * SW %vreg13, %vreg5, 16; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 4)] GR32Bit:%vreg13,%vreg5
4B		  * FDELETE %t4, 0
4B		  * END 0
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
360B		%t4<def> = ADD %t5, %zero
360B		  * %vreg35<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg35
360B		  * %vreg36<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg36
360B		  * %vreg37<def> = SRLI %vreg36, 12; GR32Bit:%vreg37,%vreg36
360B		  * %vreg38<def> = ADD %vreg35, %vreg37; GR32Bit:%vreg38,%vreg35,%vreg37
360B		  * %vreg39<def> = ADDI %zero, 16; GR32Bit:%vreg39
360B		  * %vreg40<def> = SRLI %t5, 22; GR32Bit:%vreg40
360B		  * %vreg41<def> = SRLI %t5, 12; GR32Bit:%vreg41
360B		  * %vreg42<def> = ANDI %vreg41, 15; GR32Bit:%vreg42,%vreg41
360B		  * %vreg43<def> = SRLI %t5, 6; GR32Bit:%vreg43
360B		  * %vreg44<def> = ANDI %vreg43, 63; GR32Bit:%vreg44,%vreg43
360B		  * %vreg45<def> = ADDI %zero, 832; GR32Bit:%vreg45
360B		  * %vreg46<def> = MUL %vreg40, %vreg45; GR32Bit:%vreg46,%vreg40,%vreg45
360B		  * %vreg47<def> = ADDI %zero, 52; GR32Bit:%vreg47
360B		  * %vreg48<def> = MUL %vreg42, %vreg47; GR32Bit:%vreg48,%vreg42,%vreg47
360B		  * %vreg49<def> = ADD %vreg48, %vreg44; GR32Bit:%vreg49,%vreg48,%vreg44
360B		  * %vreg50<def> = ADD %vreg49, %vreg46; GR32Bit:%vreg50,%vreg49,%vreg46
360B		  * %vreg51<def> = MUL %vreg50, %vreg39; GR32Bit:%vreg51,%vreg50,%vreg39
360B		  * %t5<def> = ADD %vreg38, %vreg51; GR32Bit:%vreg38,%vreg51
360B		  * END 0
360B		  * %zero<def> = ADDI %zero, 0
360B		  * %zero<def> = ADDI %zero, 0
536B		%t4<def> = ADD %t5, %zero
536B		  * %vreg54<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg54
536B		  * %vreg55<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg55
536B		  * %vreg56<def> = SRLI %vreg55, 12; GR32Bit:%vreg56,%vreg55
536B		  * %vreg57<def> = ADD %vreg54, %vreg56; GR32Bit:%vreg57,%vreg54,%vreg56
536B		  * %vreg58<def> = ADDI %zero, 16; GR32Bit:%vreg58
536B		  * %vreg59<def> = SRLI %t5, 22; GR32Bit:%vreg59
536B		  * %vreg60<def> = SRLI %t5, 12; GR32Bit:%vreg60
536B		  * %vreg61<def> = ANDI %vreg60, 15; GR32Bit:%vreg61,%vreg60
536B		  * %vreg62<def> = SRLI %t5, 6; GR32Bit:%vreg62
536B		  * %vreg63<def> = ANDI %vreg62, 63; GR32Bit:%vreg63,%vreg62
536B		  * %vreg64<def> = ADDI %zero, 832; GR32Bit:%vreg64
536B		  * %vreg65<def> = MUL %vreg59, %vreg64; GR32Bit:%vreg65,%vreg59,%vreg64
536B		  * %vreg66<def> = ADDI %zero, 52; GR32Bit:%vreg66
536B		  * %vreg67<def> = MUL %vreg61, %vreg66; GR32Bit:%vreg67,%vreg61,%vreg66
536B		  * %vreg68<def> = ADD %vreg67, %vreg63; GR32Bit:%vreg68,%vreg67,%vreg63
536B		  * %vreg69<def> = ADD %vreg68, %vreg65; GR32Bit:%vreg69,%vreg68,%vreg65
536B		  * %vreg70<def> = MUL %vreg69, %vreg58; GR32Bit:%vreg70,%vreg69,%vreg58
536B		  * %t5<def> = ADD %vreg57, %vreg70; GR32Bit:%vreg57,%vreg70
536B		  * END 0
536B		  * %zero<def> = ADDI %zero, 0
536B		  * %zero<def> = ADDI %zero, 0
712B		%t4<def> = ADD %t5, %zero
712B		  * %vreg73<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg73
712B		  * %vreg74<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg74
712B		  * %vreg75<def> = SRLI %vreg74, 12; GR32Bit:%vreg75,%vreg74
712B		  * %vreg76<def> = ADD %vreg73, %vreg75; GR32Bit:%vreg76,%vreg73,%vreg75
712B		  * %vreg77<def> = ADDI %zero, 16; GR32Bit:%vreg77
712B		  * %vreg78<def> = SRLI %t5, 22; GR32Bit:%vreg78
712B		  * %vreg79<def> = SRLI %t5, 12; GR32Bit:%vreg79
712B		  * %vreg80<def> = ANDI %vreg79, 15; GR32Bit:%vreg80,%vreg79
712B		  * %vreg81<def> = SRLI %t5, 6; GR32Bit:%vreg81
712B		  * %vreg82<def> = ANDI %vreg81, 63; GR32Bit:%vreg82,%vreg81
712B		  * %vreg83<def> = ADDI %zero, 832; GR32Bit:%vreg83
712B		  * %vreg84<def> = MUL %vreg78, %vreg83; GR32Bit:%vreg84,%vreg78,%vreg83
712B		  * %vreg85<def> = ADDI %zero, 52; GR32Bit:%vreg85
712B		  * %vreg86<def> = MUL %vreg80, %vreg85; GR32Bit:%vreg86,%vreg80,%vreg85
712B		  * %vreg87<def> = ADD %vreg86, %vreg82; GR32Bit:%vreg87,%vreg86,%vreg82
712B		  * %vreg88<def> = ADD %vreg87, %vreg84; GR32Bit:%vreg88,%vreg87,%vreg84
712B		  * %vreg89<def> = MUL %vreg88, %vreg77; GR32Bit:%vreg89,%vreg88,%vreg77
712B		  * %t5<def> = ADD %vreg76, %vreg89; GR32Bit:%vreg76,%vreg89
712B		  * END 0
712B		  * %zero<def> = ADDI %zero, 0
712B		  * %zero<def> = ADDI %zero, 0

# End machine code for function redefine_start2.

********** COMPUTING LIVE DEBUG VARIABLES: redefine_start2 **********
********** DEBUG VARIABLES **********
********** Compute Spill Weights **********
********** Function: redefine_start2
********** GREEDY REGISTER ALLOCATION **********
********** Function: redefine_start2

selectOrSplit GR32Bit:%vreg5 [184r,320r:0)  0@184r
assigning %vreg5 to %t0: t0

selectOrSplit GR32Bit:%vreg19 [48r,160r:0)  0@48r
assigning %vreg19 to %t0: t0

selectOrSplit GR32Bit:%vreg38 [392r,504r:0)  0@392r
assigning %vreg38 to %t0: t0

selectOrSplit GR32Bit:%vreg57 [568r,680r:0)  0@568r
assigning %vreg57 to %t0: t0

selectOrSplit GR32Bit:%vreg76 [744r,856r:0)  0@744r
assigning %vreg76 to %t0: t0

selectOrSplit GR32Bit:%vreg12 [216r,312r:0)  0@216r
assigning %vreg12 to %t1: t1

selectOrSplit GR32Bit:%vreg20 [56r,152r:0)  0@56r
assigning %vreg20 to %t1: t1

selectOrSplit GR32Bit:%vreg39 [400r,496r:0)  0@400r
assigning %vreg39 to %t1: t1

selectOrSplit GR32Bit:%vreg58 [576r,672r:0)  0@576r
assigning %vreg58 to %t1: t1

selectOrSplit GR32Bit:%vreg77 [752r,848r:0)  0@752r
assigning %vreg77 to %t1: t1

selectOrSplit GR32Bit:%vreg1 [192r,248r:0)  0@192r
assigning %vreg1 to %t2: t2

selectOrSplit GR32Bit:%vreg10 [240r,296r:0)  0@240r
assigning %vreg10 to %fp: fp

selectOrSplit GR32Bit:%vreg8 [232r,280r:0)  0@232r
assigning %vreg8 to %a0: a0

selectOrSplit GR32Bit:%vreg21 [64r,112r:0)  0@64r
assigning %vreg21 to %t2: t2

selectOrSplit GR32Bit:%vreg23 [80r,128r:0)  0@80r
assigning %vreg23 to %fp: fp

selectOrSplit GR32Bit:%vreg40 [408r,456r:0)  0@408r
assigning %vreg40 to %t2: t2

selectOrSplit GR32Bit:%vreg42 [424r,472r:0)  0@424r
assigning %vreg42 to %fp: fp

selectOrSplit GR32Bit:%vreg59 [584r,632r:0)  0@584r
assigning %vreg59 to %t2: t2

selectOrSplit GR32Bit:%vreg61 [600r,648r:0)  0@600r
assigning %vreg61 to %fp: fp

selectOrSplit GR32Bit:%vreg78 [760r,808r:0)  0@760r
assigning %vreg78 to %t2: t2

selectOrSplit GR32Bit:%vreg80 [776r,824r:0)  0@776r
assigning %vreg80 to %fp: fp

selectOrSplit GR32Bit:%vreg0 [200r,240r:0)  0@200r
assigning %vreg0 to %fp: fp

selectOrSplit GR32Bit:%vreg6 [224r,264r:0)  0@224r
assigning %vreg6 to %a1: a1

selectOrSplit GR32Bit:%vreg25 [96r,136r:0)  0@96r
assigning %vreg25 to %a0: a0

selectOrSplit GR32Bit:%vreg44 [440r,480r:0)  0@440r
assigning %vreg44 to %a0: a0

selectOrSplit GR32Bit:%vreg63 [616r,656r:0)  0@616r
assigning %vreg63 to %a0: a0

selectOrSplit GR32Bit:%vreg82 [792r,832r:0)  0@792r
assigning %vreg82 to %a0: a0

selectOrSplit GR32Bit:%vreg27 [112r,144r:0)  0@112r
assigning %vreg27 to %t2: t2

selectOrSplit GR32Bit:%vreg46 [456r,488r:0)  0@456r
assigning %vreg46 to %t2: t2

selectOrSplit GR32Bit:%vreg65 [632r,664r:0)  0@632r
assigning %vreg65 to %t2: t2

selectOrSplit GR32Bit:%vreg84 [808r,840r:0)  0@808r
assigning %vreg84 to %t2: t2

selectOrSplit GR32Bit:%vreg16 [24r,48r:0)  0@24r
assigning %vreg16 to %t0: t0

selectOrSplit GR32Bit:%vreg35 [368r,392r:0)  0@368r
assigning %vreg35 to %t0: t0

selectOrSplit GR32Bit:%vreg54 [544r,568r:0)  0@544r
assigning %vreg54 to %t0: t0

selectOrSplit GR32Bit:%vreg73 [720r,744r:0)  0@720r
assigning %vreg73 to %t0: t0

selectOrSplit GR32Bit:%vreg3 [168r,184r:0)  0@168r
assigning %vreg3 to %t0: t0

selectOrSplit GR32Bit:%vreg2 [248r,256r:0)  0@248r
assigning %vreg2 to %t2: t2

selectOrSplit GR32Bit:%vreg4 [176r,184r:0)  0@176r
assigning %vreg4 to %t1: t1

selectOrSplit GR32Bit:%vreg7 [264r,272r:0)  0@264r
assigning %vreg7 to %t2: t2

selectOrSplit GR32Bit:%vreg9 [280r,288r:0)  0@280r
assigning %vreg9 to %t2: t2

selectOrSplit GR32Bit:%vreg11 [296r,304r:0)  0@296r
assigning %vreg11 to %t2: t2

selectOrSplit GR32Bit:%vreg13 [312r,320r:0)  0@312r
assigning %vreg13 to %t1: t1

selectOrSplit GR32Bit:%vreg17 [32r,40r:0)  0@32r
assigning %vreg17 to %t1: t1

selectOrSplit GR32Bit:%vreg18 [40r,48r:0)  0@40r
assigning %vreg18 to %t1: t1

selectOrSplit GR32Bit:%vreg22 [72r,80r:0)  0@72r
assigning %vreg22 to %fp: fp

selectOrSplit GR32Bit:%vreg24 [88r,96r:0)  0@88r
assigning %vreg24 to %a0: a0

selectOrSplit GR32Bit:%vreg26 [104r,112r:0)  0@104r
assigning %vreg26 to %a1: a1

selectOrSplit GR32Bit:%vreg28 [120r,128r:0)  0@120r
assigning %vreg28 to %a1: a1

selectOrSplit GR32Bit:%vreg29 [128r,136r:0)  0@128r
assigning %vreg29 to %fp: fp

selectOrSplit GR32Bit:%vreg30 [136r,144r:0)  0@136r
assigning %vreg30 to %fp: fp

selectOrSplit GR32Bit:%vreg31 [144r,152r:0)  0@144r
assigning %vreg31 to %t2: t2

selectOrSplit GR32Bit:%vreg32 [152r,160r:0)  0@152r
assigning %vreg32 to %t1: t1

selectOrSplit GR32Bit:%vreg36 [376r,384r:0)  0@376r
assigning %vreg36 to %t1: t1

selectOrSplit GR32Bit:%vreg37 [384r,392r:0)  0@384r
assigning %vreg37 to %t1: t1

selectOrSplit GR32Bit:%vreg41 [416r,424r:0)  0@416r
assigning %vreg41 to %fp: fp

selectOrSplit GR32Bit:%vreg43 [432r,440r:0)  0@432r
assigning %vreg43 to %a0: a0

selectOrSplit GR32Bit:%vreg45 [448r,456r:0)  0@448r
assigning %vreg45 to %a1: a1

selectOrSplit GR32Bit:%vreg47 [464r,472r:0)  0@464r
assigning %vreg47 to %a1: a1

selectOrSplit GR32Bit:%vreg48 [472r,480r:0)  0@472r
assigning %vreg48 to %fp: fp

selectOrSplit GR32Bit:%vreg49 [480r,488r:0)  0@480r
assigning %vreg49 to %fp: fp

selectOrSplit GR32Bit:%vreg50 [488r,496r:0)  0@488r
assigning %vreg50 to %t2: t2

selectOrSplit GR32Bit:%vreg51 [496r,504r:0)  0@496r
assigning %vreg51 to %t1: t1

selectOrSplit GR32Bit:%vreg55 [552r,560r:0)  0@552r
assigning %vreg55 to %t1: t1

selectOrSplit GR32Bit:%vreg56 [560r,568r:0)  0@560r
assigning %vreg56 to %t1: t1

selectOrSplit GR32Bit:%vreg60 [592r,600r:0)  0@592r
assigning %vreg60 to %fp: fp

selectOrSplit GR32Bit:%vreg62 [608r,616r:0)  0@608r
assigning %vreg62 to %a0: a0

selectOrSplit GR32Bit:%vreg64 [624r,632r:0)  0@624r
assigning %vreg64 to %a1: a1

selectOrSplit GR32Bit:%vreg66 [640r,648r:0)  0@640r
assigning %vreg66 to %a1: a1

selectOrSplit GR32Bit:%vreg67 [648r,656r:0)  0@648r
assigning %vreg67 to %fp: fp

selectOrSplit GR32Bit:%vreg68 [656r,664r:0)  0@656r
assigning %vreg68 to %fp: fp

selectOrSplit GR32Bit:%vreg69 [664r,672r:0)  0@664r
assigning %vreg69 to %t2: t2

selectOrSplit GR32Bit:%vreg70 [672r,680r:0)  0@672r
assigning %vreg70 to %t1: t1

selectOrSplit GR32Bit:%vreg74 [728r,736r:0)  0@728r
assigning %vreg74 to %t1: t1

selectOrSplit GR32Bit:%vreg75 [736r,744r:0)  0@736r
assigning %vreg75 to %t1: t1

selectOrSplit GR32Bit:%vreg79 [768r,776r:0)  0@768r
assigning %vreg79 to %fp: fp

selectOrSplit GR32Bit:%vreg81 [784r,792r:0)  0@784r
assigning %vreg81 to %a0: a0

selectOrSplit GR32Bit:%vreg83 [800r,808r:0)  0@800r
assigning %vreg83 to %a1: a1

selectOrSplit GR32Bit:%vreg85 [816r,824r:0)  0@816r
assigning %vreg85 to %a1: a1

selectOrSplit GR32Bit:%vreg86 [824r,832r:0)  0@824r
assigning %vreg86 to %fp: fp

selectOrSplit GR32Bit:%vreg87 [832r,840r:0)  0@832r
assigning %vreg87 to %fp: fp

selectOrSplit GR32Bit:%vreg88 [840r,848r:0)  0@840r
assigning %vreg88 to %t2: t2

selectOrSplit GR32Bit:%vreg89 [848r,856r:0)  0@848r
assigning %vreg89 to %t1: t1
********** REWRITE VIRTUAL REGISTERS **********
********** Function: redefine_start2
********** REGISTER MAP **********
[%vreg0 -> %fp] GR32Bit
[%vreg1 -> %t2] GR32Bit
[%vreg2 -> %t2] GR32Bit
[%vreg3 -> %t0] GR32Bit
[%vreg4 -> %t1] GR32Bit
[%vreg5 -> %t0] GR32Bit
[%vreg6 -> %a1] GR32Bit
[%vreg7 -> %t2] GR32Bit
[%vreg8 -> %a0] GR32Bit
[%vreg9 -> %t2] GR32Bit
[%vreg10 -> %fp] GR32Bit
[%vreg11 -> %t2] GR32Bit
[%vreg12 -> %t1] GR32Bit
[%vreg13 -> %t1] GR32Bit
[%vreg16 -> %t0] GR32Bit
[%vreg17 -> %t1] GR32Bit
[%vreg18 -> %t1] GR32Bit
[%vreg19 -> %t0] GR32Bit
[%vreg20 -> %t1] GR32Bit
[%vreg21 -> %t2] GR32Bit
[%vreg22 -> %fp] GR32Bit
[%vreg23 -> %fp] GR32Bit
[%vreg24 -> %a0] GR32Bit
[%vreg25 -> %a0] GR32Bit
[%vreg26 -> %a1] GR32Bit
[%vreg27 -> %t2] GR32Bit
[%vreg28 -> %a1] GR32Bit
[%vreg29 -> %fp] GR32Bit
[%vreg30 -> %fp] GR32Bit
[%vreg31 -> %t2] GR32Bit
[%vreg32 -> %t1] GR32Bit
[%vreg35 -> %t0] GR32Bit
[%vreg36 -> %t1] GR32Bit
[%vreg37 -> %t1] GR32Bit
[%vreg38 -> %t0] GR32Bit
[%vreg39 -> %t1] GR32Bit
[%vreg40 -> %t2] GR32Bit
[%vreg41 -> %fp] GR32Bit
[%vreg42 -> %fp] GR32Bit
[%vreg43 -> %a0] GR32Bit
[%vreg44 -> %a0] GR32Bit
[%vreg45 -> %a1] GR32Bit
[%vreg46 -> %t2] GR32Bit
[%vreg47 -> %a1] GR32Bit
[%vreg48 -> %fp] GR32Bit
[%vreg49 -> %fp] GR32Bit
[%vreg50 -> %t2] GR32Bit
[%vreg51 -> %t1] GR32Bit
[%vreg54 -> %t0] GR32Bit
[%vreg55 -> %t1] GR32Bit
[%vreg56 -> %t1] GR32Bit
[%vreg57 -> %t0] GR32Bit
[%vreg58 -> %t1] GR32Bit
[%vreg59 -> %t2] GR32Bit
[%vreg60 -> %fp] GR32Bit
[%vreg61 -> %fp] GR32Bit
[%vreg62 -> %a0] GR32Bit
[%vreg63 -> %a0] GR32Bit
[%vreg64 -> %a1] GR32Bit
[%vreg65 -> %t2] GR32Bit
[%vreg66 -> %a1] GR32Bit
[%vreg67 -> %fp] GR32Bit
[%vreg68 -> %fp] GR32Bit
[%vreg69 -> %t2] GR32Bit
[%vreg70 -> %t1] GR32Bit
[%vreg73 -> %t0] GR32Bit
[%vreg74 -> %t1] GR32Bit
[%vreg75 -> %t1] GR32Bit
[%vreg76 -> %t0] GR32Bit
[%vreg77 -> %t1] GR32Bit
[%vreg78 -> %t2] GR32Bit
[%vreg79 -> %fp] GR32Bit
[%vreg80 -> %fp] GR32Bit
[%vreg81 -> %a0] GR32Bit
[%vreg82 -> %a0] GR32Bit
[%vreg83 -> %a1] GR32Bit
[%vreg84 -> %t2] GR32Bit
[%vreg85 -> %a1] GR32Bit
[%vreg86 -> %fp] GR32Bit
[%vreg87 -> %fp] GR32Bit
[%vreg88 -> %t2] GR32Bit
[%vreg89 -> %t1] GR32Bit

0B	BB#0: derived from LLVM BB %redefine_start2.newName01
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg16<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg16
4B		  * %vreg17<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg17
4B		  * %vreg18<def> = SRLI %vreg17<kill>, 12; GR32Bit:%vreg18,%vreg17
4B		  * %vreg19<def> = ADD %vreg16<kill>, %vreg18<kill>; GR32Bit:%vreg19,%vreg16,%vreg18
4B		  * %vreg20<def> = ADDI %zero, 16; GR32Bit:%vreg20
4B		  * %vreg21<def> = SRLI %t5, 22; GR32Bit:%vreg21
4B		  * %vreg22<def> = SRLI %t5, 12; GR32Bit:%vreg22
4B		  * %vreg23<def> = ANDI %vreg22<kill>, 15; GR32Bit:%vreg23,%vreg22
4B		  * %vreg24<def> = SRLI %t5, 6; GR32Bit:%vreg24
4B		  * %vreg25<def> = ANDI %vreg24<kill>, 63; GR32Bit:%vreg25,%vreg24
4B		  * %vreg26<def> = ADDI %zero, 832; GR32Bit:%vreg26
4B		  * %vreg27<def> = MUL %vreg21<kill>, %vreg26<kill>; GR32Bit:%vreg27,%vreg21,%vreg26
4B		  * %vreg28<def> = ADDI %zero, 52; GR32Bit:%vreg28
4B		  * %vreg29<def> = MUL %vreg23<kill>, %vreg28<kill>; GR32Bit:%vreg29,%vreg23,%vreg28
4B		  * %vreg30<def> = ADD %vreg29<kill>, %vreg25<kill>; GR32Bit:%vreg30,%vreg29,%vreg25
4B		  * %vreg31<def> = ADD %vreg30<kill>, %vreg27<kill>; GR32Bit:%vreg31,%vreg30,%vreg27
4B		  * %vreg32<def> = MUL %vreg31<kill>, %vreg20<kill>; GR32Bit:%vreg32,%vreg31,%vreg20
4B		  * %t5<def> = ADD %vreg19<kill>, %vreg32<kill>; GR32Bit:%vreg19,%vreg32
4B		  * %vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
4B		  * %vreg4<def> = LUI <MCSym="%lo("ga#256")">; GR32Bit:%vreg4
4B		  * SRLI %vreg4, %vreg4, 12; GR32Bit:%vreg4
4B		  * %vreg5<def> = ADD %vreg4<kill>, %vreg3<kill>; GR32Bit:%vreg5,%vreg4,%vreg3
4B		  * %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
4B		  * %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
4B		  * SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
4B		  * %vreg12<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg12,%vreg0
4B		  * %vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
4B		  * %vreg8<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg8,%vreg0
4B		  * %vreg10<def> = LW %vreg0<kill>, 0; mem:LD4[%1] GR32Bit:%vreg10,%vreg0
4B		  * %vreg2<def> = LW %vreg1<kill>, 8; mem:LD4[%3](align=8) GR32Bit:%vreg2,%vreg1
4B		  * SW %vreg2<kill>, %vreg5, 0; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
4B		  * %vreg7<def> = LW %vreg6<kill>, 12; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
4B		  * SW %vreg7<kill>, %vreg5, 4; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5
4B		  * %vreg9<def> = LW %vreg8<kill>, 16; mem:LD4[%9] GR32Bit:%vreg9,%vreg8
4B		  * SW %vreg9<kill>, %vreg5, 8; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2)] GR32Bit:%vreg9,%vreg5
4B		  * %vreg11<def> = LW %vreg10<kill>, 20; mem:LD4[%12] GR32Bit:%vreg11,%vreg10
4B		  * SW %vreg11<kill>, %vreg5, 12; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 3)] GR32Bit:%vreg11,%vreg5
4B		  * %vreg13<def> = LW %vreg12<kill>, 24; mem:LD4[%15] GR32Bit:%vreg13,%vreg12
4B		  * SW %vreg13<kill>, %vreg5<kill>, 16; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 4)] GR32Bit:%vreg13,%vreg5
4B		  * FDELETE %t4, 0
4B		  * END 0
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
360B		%t4<def> = ADD %t5, %zero
360B		  * %vreg35<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg35
360B		  * %vreg36<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg36
360B		  * %vreg37<def> = SRLI %vreg36<kill>, 12; GR32Bit:%vreg37,%vreg36
360B		  * %vreg38<def> = ADD %vreg35<kill>, %vreg37<kill>; GR32Bit:%vreg38,%vreg35,%vreg37
360B		  * %vreg39<def> = ADDI %zero, 16; GR32Bit:%vreg39
360B		  * %vreg40<def> = SRLI %t5, 22; GR32Bit:%vreg40
360B		  * %vreg41<def> = SRLI %t5, 12; GR32Bit:%vreg41
360B		  * %vreg42<def> = ANDI %vreg41<kill>, 15; GR32Bit:%vreg42,%vreg41
360B		  * %vreg43<def> = SRLI %t5, 6; GR32Bit:%vreg43
360B		  * %vreg44<def> = ANDI %vreg43<kill>, 63; GR32Bit:%vreg44,%vreg43
360B		  * %vreg45<def> = ADDI %zero, 832; GR32Bit:%vreg45
360B		  * %vreg46<def> = MUL %vreg40<kill>, %vreg45<kill>; GR32Bit:%vreg46,%vreg40,%vreg45
360B		  * %vreg47<def> = ADDI %zero, 52; GR32Bit:%vreg47
360B		  * %vreg48<def> = MUL %vreg42<kill>, %vreg47<kill>; GR32Bit:%vreg48,%vreg42,%vreg47
360B		  * %vreg49<def> = ADD %vreg48<kill>, %vreg44<kill>; GR32Bit:%vreg49,%vreg48,%vreg44
360B		  * %vreg50<def> = ADD %vreg49<kill>, %vreg46<kill>; GR32Bit:%vreg50,%vreg49,%vreg46
360B		  * %vreg51<def> = MUL %vreg50<kill>, %vreg39<kill>; GR32Bit:%vreg51,%vreg50,%vreg39
360B		  * %t5<def> = ADD %vreg38<kill>, %vreg51<kill>; GR32Bit:%vreg38,%vreg51
360B		  * END 0
360B		  * %zero<def> = ADDI %zero, 0
360B		  * %zero<def> = ADDI %zero, 0
536B		%t4<def> = ADD %t5, %zero
536B		  * %vreg54<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg54
536B		  * %vreg55<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg55
536B		  * %vreg56<def> = SRLI %vreg55<kill>, 12; GR32Bit:%vreg56,%vreg55
536B		  * %vreg57<def> = ADD %vreg54<kill>, %vreg56<kill>; GR32Bit:%vreg57,%vreg54,%vreg56
536B		  * %vreg58<def> = ADDI %zero, 16; GR32Bit:%vreg58
536B		  * %vreg59<def> = SRLI %t5, 22; GR32Bit:%vreg59
536B		  * %vreg60<def> = SRLI %t5, 12; GR32Bit:%vreg60
536B		  * %vreg61<def> = ANDI %vreg60<kill>, 15; GR32Bit:%vreg61,%vreg60
536B		  * %vreg62<def> = SRLI %t5, 6; GR32Bit:%vreg62
536B		  * %vreg63<def> = ANDI %vreg62<kill>, 63; GR32Bit:%vreg63,%vreg62
536B		  * %vreg64<def> = ADDI %zero, 832; GR32Bit:%vreg64
536B		  * %vreg65<def> = MUL %vreg59<kill>, %vreg64<kill>; GR32Bit:%vreg65,%vreg59,%vreg64
536B		  * %vreg66<def> = ADDI %zero, 52; GR32Bit:%vreg66
536B		  * %vreg67<def> = MUL %vreg61<kill>, %vreg66<kill>; GR32Bit:%vreg67,%vreg61,%vreg66
536B		  * %vreg68<def> = ADD %vreg67<kill>, %vreg63<kill>; GR32Bit:%vreg68,%vreg67,%vreg63
536B		  * %vreg69<def> = ADD %vreg68<kill>, %vreg65<kill>; GR32Bit:%vreg69,%vreg68,%vreg65
536B		  * %vreg70<def> = MUL %vreg69<kill>, %vreg58<kill>; GR32Bit:%vreg70,%vreg69,%vreg58
536B		  * %t5<def> = ADD %vreg57<kill>, %vreg70<kill>; GR32Bit:%vreg57,%vreg70
536B		  * END 0
536B		  * %zero<def> = ADDI %zero, 0
536B		  * %zero<def> = ADDI %zero, 0
712B		%t4<def> = ADD %t5, %zero
712B		  * %vreg73<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg73
712B		  * %vreg74<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg74
712B		  * %vreg75<def> = SRLI %vreg74<kill>, 12; GR32Bit:%vreg75,%vreg74
712B		  * %vreg76<def> = ADD %vreg73<kill>, %vreg75<kill>; GR32Bit:%vreg76,%vreg73,%vreg75
712B		  * %vreg77<def> = ADDI %zero, 16; GR32Bit:%vreg77
712B		  * %vreg78<def> = SRLI %t5, 22; GR32Bit:%vreg78
712B		  * %vreg79<def> = SRLI %t5, 12; GR32Bit:%vreg79
712B		  * %vreg80<def> = ANDI %vreg79<kill>, 15; GR32Bit:%vreg80,%vreg79
712B		  * %vreg81<def> = SRLI %t5, 6; GR32Bit:%vreg81
712B		  * %vreg82<def> = ANDI %vreg81<kill>, 63; GR32Bit:%vreg82,%vreg81
712B		  * %vreg83<def> = ADDI %zero, 832; GR32Bit:%vreg83
712B		  * %vreg84<def> = MUL %vreg78<kill>, %vreg83<kill>; GR32Bit:%vreg84,%vreg78,%vreg83
712B		  * %vreg85<def> = ADDI %zero, 52; GR32Bit:%vreg85
712B		  * %vreg86<def> = MUL %vreg80<kill>, %vreg85<kill>; GR32Bit:%vreg86,%vreg80,%vreg85
712B		  * %vreg87<def> = ADD %vreg86<kill>, %vreg82<kill>; GR32Bit:%vreg87,%vreg86,%vreg82
712B		  * %vreg88<def> = ADD %vreg87<kill>, %vreg84<kill>; GR32Bit:%vreg88,%vreg87,%vreg84
712B		  * %vreg89<def> = MUL %vreg88<kill>, %vreg77<kill>; GR32Bit:%vreg89,%vreg88,%vreg77
712B		  * %t5<def> = ADD %vreg76<kill>, %vreg89<kill>; GR32Bit:%vreg76,%vreg89
712B		  * END 0
712B		  * %zero<def> = ADDI %zero, 0
712B		  * %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 16
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = LUI <ga:@redefine_out_b>[TF=2]
> %t1<def> = LUI <MCSym="%lo("ga#256")">
> SRLI %t1, %t1, 12
> %t0<def> = ADD %t1<kill>, %t0<kill>
> %t2<def> = ADDI %t5, <fi#-1>
> %fp<def> = ADDI %t5, <fi#0>
> SW %t2, %fp, 0; mem:ST4[%1]
> %t1<def> = LW %fp, 0; mem:LD4[%1]
> %a1<def> = LW %fp, 0; mem:LD4[%1]
> %a0<def> = LW %fp, 0; mem:LD4[%1]
> %fp<def> = LW %fp<kill>, 0; mem:LD4[%1]
> %t2<def> = LW %t2<kill>, 8; mem:LD4[%3](align=8)
> SW %t2<kill>, %t0, 0; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)]
> %t2<def> = LW %a1<kill>, 12; mem:LD4[%6]
> SW %t2<kill>, %t0, 4; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)]
> %t2<def> = LW %a0<kill>, 16; mem:LD4[%9]
> SW %t2<kill>, %t0, 8; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2)]
> %t2<def> = LW %fp<kill>, 20; mem:LD4[%12]
> SW %t2<kill>, %t0, 12; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 3)]
> %t1<def> = LW %t1<kill>, 24; mem:LD4[%15]
> SW %t1<kill>, %t0<kill>, 16; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 4)]
> FDELETE %t4, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 16
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 16
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 16
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
********** EMITTING LIVE DEBUG VARIABLES **********
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: redefine_start2
current state of mf:# Machine code for function redefine_start2: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %redefine_start2.newName01
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 16
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = LUI <ga:@redefine_out_b>[TF=2]
	  * %t1<def> = LUI <MCSym="%lo("ga#256")">
	  * SRLI %t1, %t1, 12
	  * %t0<def> = ADD %t1<kill>, %t0<kill>
	  * %t2<def> = ADDI %t5, <fi#-1>
	  * %fp<def> = ADDI %t5, <fi#0>
	  * SW %t2, %fp, 0; mem:ST4[%1]
	  * %t1<def> = LW %fp, 0; mem:LD4[%1]
	  * %a1<def> = LW %fp, 0; mem:LD4[%1]
	  * %a0<def> = LW %fp, 0; mem:LD4[%1]
	  * %fp<def> = LW %fp<kill>, 0; mem:LD4[%1]
	  * %t2<def> = LW %t2<kill>, 8; mem:LD4[%3](align=8)
	  * SW %t2<kill>, %t0, 0; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 0)]
	  * %t2<def> = LW %a1<kill>, 12; mem:LD4[%6]
	  * SW %t2<kill>, %t0, 4; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 1)]
	  * %t2<def> = LW %a0<kill>, 16; mem:LD4[%9]
	  * SW %t2<kill>, %t0, 8; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 2)]
	  * %t2<def> = LW %fp<kill>, 20; mem:LD4[%12]
	  * SW %t2<kill>, %t0, 12; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 3)]
	  * %t1<def> = LW %t1<kill>, 24; mem:LD4[%15]
	  * SW %t1<kill>, %t0<kill>, 16; mem:ST4[getelementptr inbounds ([5 x i32]* @redefine_out_b, i32 0, i32 4)]
	  * FDELETE %t4, 0
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 16
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 16
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 16
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0

# End machine code for function redefine_start2.

lowering frame index for func redefine_start2:-1 TO VAL:4
lowering frame index for func redefine_start2:0 TO VAL:0
MERGING MOSTLY EMPTY BLOCKS - BEFORE:

startup_fuel_valves3.if.else19:                   ; preds = %startup_fuel_valves3.if.then12
  br label %startup_fuel_valves3.if.end

startup_fuel_valves3.if.end:                      ; preds = %startup_fuel_valves3.if.else19, %startup_fuel_valves3.if.then16
  br label %startup_fuel_valves3.if.end21
AFTER:

startup_fuel_valves3.if.end:                      ; preds = %startup_fuel_valves3.if.then12, %startup_fuel_valves3.if.then16
  br label %startup_fuel_valves3.if.end21



MERGING MOSTLY EMPTY BLOCKS - BEFORE:

startup_fuel_valves3.if.else20:                   ; preds = %startup_fuel_valves3.if.then9
  br label %startup_fuel_valves3.if.end21

startup_fuel_valves3.if.end21:                    ; preds = %startup_fuel_valves3.if.end, %startup_fuel_valves3.if.else20
  br label %startup_fuel_valves3.if.end25
AFTER:

startup_fuel_valves3.if.end21:                    ; preds = %startup_fuel_valves3.if.then9, %startup_fuel_valves3.if.end
  br label %startup_fuel_valves3.if.end25



MERGING MOSTLY EMPTY BLOCKS - BEFORE:

startup_fuel_valves3.if.end:                      ; preds = %startup_fuel_valves3.if.then12, %startup_fuel_valves3.if.then16
  br label %startup_fuel_valves3.if.end21

startup_fuel_valves3.if.end21:                    ; preds = %startup_fuel_valves3.if.then9, %startup_fuel_valves3.if.end
  br label %startup_fuel_valves3.if.end25
AFTER:

startup_fuel_valves3.if.end21:                    ; preds = %startup_fuel_valves3.if.then16, %startup_fuel_valves3.if.then12, %startup_fuel_valves3.if.then9
  br label %startup_fuel_valves3.if.end25



MERGING MOSTLY EMPTY BLOCKS - BEFORE:

startup_fuel_valves3.if.end21:                    ; preds = %startup_fuel_valves3.if.then16, %startup_fuel_valves3.if.then12, %startup_fuel_valves3.if.then9
  br label %startup_fuel_valves3.if.end25

startup_fuel_valves3.if.end25:                    ; preds = %startup_fuel_valves3.if.end21, %startup_fuel_valves3.if.else22
  br label %startup_fuel_valves3.if.end26
AFTER:

startup_fuel_valves3.if.end25:                    ; preds = %startup_fuel_valves3.if.then9, %startup_fuel_valves3.if.then12, %startup_fuel_valves3.if.then16, %startup_fuel_valves3.if.else22
  br label %startup_fuel_valves3.if.end26



MERGING MOSTLY EMPTY BLOCKS - BEFORE:

startup_fuel_valves3.if.then6:                    ; preds = %startup_fuel_valves3.if.else
  br label %startup_fuel_valves3.if.end26

startup_fuel_valves3.if.end26:                    ; preds = %startup_fuel_valves3.if.end25, %startup_fuel_valves3.if.then6
  %35 = load float* %3, align 4
  %36 = fcmp ogt float %35, 8.800000e+03
  br i1 %36, label %startup_fuel_valves3.if.then28, label %startup_fuel_valves3.if.else36
AFTER:

startup_fuel_valves3.if.end26:                    ; preds = %startup_fuel_valves3.if.else, %startup_fuel_valves3.if.end25
  %35 = load float* %3, align 4
  %36 = fcmp ogt float %35, 8.800000e+03
  br i1 %36, label %startup_fuel_valves3.if.then28, label %startup_fuel_valves3.if.else36



MERGING MOSTLY EMPTY BLOCKS - BEFORE:

startup_fuel_valves3.if.end25:                    ; preds = %startup_fuel_valves3.if.then9, %startup_fuel_valves3.if.then12, %startup_fuel_valves3.if.then16, %startup_fuel_valves3.if.else22
  br label %startup_fuel_valves3.if.end26

startup_fuel_valves3.if.end26:                    ; preds = %startup_fuel_valves3.if.else, %startup_fuel_valves3.if.end25
  %35 = load float* %3, align 4
  %36 = fcmp ogt float %35, 8.800000e+03
  br i1 %36, label %startup_fuel_valves3.if.then28, label %startup_fuel_valves3.if.else36
AFTER:

startup_fuel_valves3.if.end26:                    ; preds = %startup_fuel_valves3.if.else22, %startup_fuel_valves3.if.then16, %startup_fuel_valves3.if.then12, %startup_fuel_valves3.if.then9, %startup_fuel_valves3.if.else
  %35 = load float* %3, align 4
  %36 = fcmp ogt float %35, 8.800000e+03
  br i1 %36, label %startup_fuel_valves3.if.then28, label %startup_fuel_valves3.if.else36



MERGING MOSTLY EMPTY BLOCKS - BEFORE:

startup_fuel_valves3.if.else36:                   ; preds = %startup_fuel_valves3.if.end26
  br label %startup_fuel_valves3.if.end37

startup_fuel_valves3.if.end37:                    ; preds = %startup_fuel_valves3.if.end35, %startup_fuel_valves3.if.else36
  br label %startup_fuel_valves3.if.end38
AFTER:

startup_fuel_valves3.if.end37:                    ; preds = %startup_fuel_valves3.if.end26, %startup_fuel_valves3.if.end35
  br label %startup_fuel_valves3.if.end38



MERGING MOSTLY EMPTY BLOCKS - BEFORE:

startup_fuel_valves3.if.end35:                    ; preds = %startup_fuel_valves3.if.then32, %startup_fuel_valves3.if.then28
  br label %startup_fuel_valves3.if.end37

startup_fuel_valves3.if.end37:                    ; preds = %startup_fuel_valves3.if.end26, %startup_fuel_valves3.if.end35
  br label %startup_fuel_valves3.if.end38
AFTER:

startup_fuel_valves3.if.end37:                    ; preds = %startup_fuel_valves3.if.then28, %startup_fuel_valves3.if.then32, %startup_fuel_valves3.if.end26
  br label %startup_fuel_valves3.if.end38



MERGING MOSTLY EMPTY BLOCKS - BEFORE:

startup_fuel_valves3.if.end37:                    ; preds = %startup_fuel_valves3.if.then28, %startup_fuel_valves3.if.then32, %startup_fuel_valves3.if.end26
  br label %startup_fuel_valves3.if.end38

startup_fuel_valves3.if.end38:                    ; preds = %startup_fuel_valves3.if.end37, %startup_fuel_valves3.if.then
  %54 = load i32** %2, align 4
  store i32* %54, i32** %1, align 4
  br label %startup_fuel_valves3.return
AFTER:

startup_fuel_valves3.if.end38:                    ; preds = %startup_fuel_valves3.if.end26, %startup_fuel_valves3.if.then32, %startup_fuel_valves3.if.then28, %startup_fuel_valves3.if.then
  %54 = load i32** %2, align 4
  store i32* %54, i32** %1, align 4
  br label %startup_fuel_valves3.return



CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:%5]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [4 + Base:%8]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [16 + Base:%16]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [12 + Base:%20]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [20 + Base:%22]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [4 + Base:%26]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [20 + Base:%29]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [12 + Base:%31]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [16 + Base:%33]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [8 + Base:%37]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [24 + Base:%39]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [4 + Base:%43]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [24 + Base:%46]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [8 + Base:%48]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [12 + Base:%50]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [16 + Base:%52]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:%1]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:%5]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [4 + Base:%8]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [16 + Base:%16]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [12 + Base:%20]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [20 + Base:%22]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [4 + Base:%26]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [20 + Base:%29]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [12 + Base:%31]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [16 + Base:%33]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [8 + Base:%37]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [24 + Base:%39]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [4 + Base:%43]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [24 + Base:%46]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [8 + Base:%48]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [12 + Base:%50]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [16 + Base:%52]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:%1]
To merge:

startup_fuel_valves3.if.end38:                    ; preds = %startup_fuel_valves3.if.end26, %startup_fuel_valves3.if.then32, %startup_fuel_valves3.if.then28, %startup_fuel_valves3.if.then
  %54 = load i32** %2, align 4
  store i32* %54, i32** %1, align 4
  br label %startup_fuel_valves3.return



Computing probabilities for startup_fuel_valves3.return
Computing probabilities for startup_fuel_valves3.if.then
Computing probabilities for startup_fuel_valves3.if.then32
Computing probabilities for startup_fuel_valves3.if.then28
Computing probabilities for startup_fuel_valves3.if.end26
Computing probabilities for startup_fuel_valves3.if.then16
Computing probabilities for startup_fuel_valves3.if.then12
Computing probabilities for startup_fuel_valves3.if.then9
set edge startup_fuel_valves3.if.then9 -> 1 successor weight to 20
set edge startup_fuel_valves3.if.then9 -> 0 successor weight to 12
Computing probabilities for startup_fuel_valves3.if.else22
Computing probabilities for startup_fuel_valves3.if.else7
Computing probabilities for startup_fuel_valves3.if.else
Computing probabilities for startup_fuel_valves3.entry
set edge startup_fuel_valves3.entry -> 1 successor weight to 20
set edge startup_fuel_valves3.entry -> 0 successor weight to 12



=== startup_fuel_valves3
store visit is after?  store i32* %0, i32** %2, align 4
I was here to add i32* %0
arg match found with argIndex:-1
Argument does not have assigned frame index!
The value is an argument for which I am here to get arg frame index as:0
whats the index?-1
I was here to add   %2 = alloca i32*, align 4
whats in dag after store?SelectionDAG has 7 nodes:
  0x2fb6da8: ch = EntryToken [ORD=30]

  0x2fd46a0: i32 = FrameIndex<-1> [ORD=30]

  0x2fd4ca0: i32 = undef [ORD=30]

    0x2fb6da8: <multiple use>
    0x2fd46a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd48a0: i32,ch = load 0x2fb6da8, 0x2fd46a0, 0x2fd4ca0<LD4[FixedStack-1]>

  0x2fe1210: i32 = Constant<0>

    0x2fb6da8: <multiple use>
    0x2fd46a0: <multiple use>
    0x2fe1510: i32 = FrameIndex<1> [ORD=30]

    0x2fd4ca0: <multiple use>
  0x2fe1110: ch = store 0x2fb6da8, 0x2fd46a0, 0x2fe1510, 0x2fd4ca0<ST4[%2]> [ORD=30]


visiting load instruction   %4 = load i32** %2, align 4
with I type i32*and sd value :0x2fe1510: i32 = FrameIndex<1>
new load?0x2fe1b10: i32,ch = load 0x2fe1110, 0x2fe1510, 0x2fd4ca0<LD4[%2]>
dag after load is dealt with?SelectionDAG has 8 nodes:
  0x2fb6da8: ch = EntryToken [ORD=30]

  0x2fd46a0: i32 = FrameIndex<-1> [ORD=30]

  0x2fd4ca0: i32 = undef [ORD=30]

    0x2fb6da8: <multiple use>
    0x2fd46a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd48a0: i32,ch = load 0x2fb6da8, 0x2fd46a0, 0x2fd4ca0<LD4[FixedStack-1]>

  0x2fe1510: i32 = FrameIndex<1> [ORD=30]

  0x2fe1210: i32 = Constant<0>

      0x2fb6da8: <multiple use>
      0x2fd46a0: <multiple use>
      0x2fe1510: <multiple use>
      0x2fd4ca0: <multiple use>
    0x2fe1110: ch = store 0x2fb6da8, 0x2fd46a0, 0x2fe1510, 0x2fd4ca0<ST4[%2]> [ORD=30]

    0x2fe1510: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe1b10: i32,ch = load 0x2fe1110, 0x2fe1510, 0x2fd4ca0<LD4[%2]>

    0x2fb6da8: <multiple use>
    0x2fd46a0: <multiple use>
    0x2fe1510: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe1110: ch = store 0x2fb6da8, 0x2fd46a0, 0x2fe1510, 0x2fd4ca0<ST4[%2]> [ORD=30]


visiting load instruction   %7 = load float* %6, align 4
with I type floatand sd value :0x2fe1b10: i32,ch = load 0x2fe1110, 0x2fe1510, 0x2fd4ca0<LD4[%2]>
new load?0x2fe93e0: f32,ch = load 0x2fe1110, 0x2fe1b10, 0x2fd4ca0<LD4[%6]>
dag after load is dealt with?SelectionDAG has 9 nodes:
  0x2fb6da8: ch = EntryToken [ORD=30]

  0x2fd46a0: i32 = FrameIndex<-1> [ORD=30]

  0x2fd4ca0: i32 = undef [ORD=30]

    0x2fb6da8: <multiple use>
    0x2fd46a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd48a0: i32,ch = load 0x2fb6da8, 0x2fd46a0, 0x2fd4ca0<LD4[FixedStack-1]>

  0x2fe1510: i32 = FrameIndex<1> [ORD=30]

  0x2fe1210: i32 = Constant<0>

    0x2fe1110: <multiple use>
      0x2fe1110: <multiple use>
      0x2fe1510: <multiple use>
      0x2fd4ca0: <multiple use>
    0x2fe1b10: i32,ch = load 0x2fe1110, 0x2fe1510, 0x2fd4ca0<LD4[%2]> [ORD=31]

    0x2fd4ca0: <multiple use>
  0x2fe93e0: f32,ch = load 0x2fe1110, 0x2fe1b10, 0x2fd4ca0<LD4[%6]>

    0x2fb6da8: <multiple use>
    0x2fd46a0: <multiple use>
    0x2fe1510: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe1110: ch = store 0x2fb6da8, 0x2fd46a0, 0x2fe1510, 0x2fd4ca0<ST4[%2]> [ORD=30]


store visit is after?  store float %7, float* %3, align 4
I was here to add   %3 = alloca float, align 4
whats in dag after store?SelectionDAG has 12 nodes:
  0x2fb6da8: ch = EntryToken [ORD=30]

  0x2fd46a0: i32 = FrameIndex<-1> [ORD=30]

  0x2fd4ca0: i32 = undef [ORD=30]

    0x2fb6da8: <multiple use>
    0x2fd46a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd48a0: i32,ch = load 0x2fb6da8, 0x2fd46a0, 0x2fd4ca0<LD4[FixedStack-1]>

  0x2fe1510: i32 = FrameIndex<1> [ORD=30]

  0x2fe1210: i32 = Constant<0>

    0x2fb6da8: <multiple use>
    0x2fd46a0: <multiple use>
    0x2fe1510: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe1110: ch = store 0x2fb6da8, 0x2fd46a0, 0x2fe1510, 0x2fd4ca0<ST4[%2]> [ORD=30]

    0x2fe1110: <multiple use>
    0x2fe1510: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe1b10: i32,ch = load 0x2fe1110, 0x2fe1510, 0x2fd4ca0<LD4[%2]> [ORD=31]

    0x2fe1110: <multiple use>
    0x2fe1b10: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe93e0: f32,ch = load 0x2fe1110, 0x2fe1b10, 0x2fd4ca0<LD4[%6]> [ORD=34]

      0x2fe1b10: <multiple use>
      0x2fe93e0: <multiple use>
    0x2fe9ce0: ch = TokenFactor 0x2fe1b10:1, 0x2fe93e0:1 [ORD=35]

    0x2fe93e0: <multiple use>
    0x2fe96e0: i32 = FrameIndex<2> [ORD=35]

    0x2fd4ca0: <multiple use>
  0x2fe9be0: ch = store 0x2fe9ce0, 0x2fe93e0, 0x2fe96e0, 0x2fd4ca0<ST4[%3]> [ORD=35]


visiting load instruction   %8 = load i32** %2, align 4
with I type i32*and sd value :0x2fe1510: i32 = FrameIndex<1>
new load?0x2fdbec0: i32,ch = load 0x2fe9be0, 0x2fe1510, 0x2fd4ca0<LD4[%2]>
dag after load is dealt with?SelectionDAG has 13 nodes:
  0x2fb6da8: ch = EntryToken [ORD=30]

  0x2fd46a0: i32 = FrameIndex<-1> [ORD=30]

  0x2fd4ca0: i32 = undef [ORD=30]

    0x2fb6da8: <multiple use>
    0x2fd46a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd48a0: i32,ch = load 0x2fb6da8, 0x2fd46a0, 0x2fd4ca0<LD4[FixedStack-1]>

  0x2fe1510: i32 = FrameIndex<1> [ORD=30]

  0x2fe1210: i32 = Constant<0>

    0x2fb6da8: <multiple use>
    0x2fd46a0: <multiple use>
    0x2fe1510: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe1110: ch = store 0x2fb6da8, 0x2fd46a0, 0x2fe1510, 0x2fd4ca0<ST4[%2]> [ORD=30]

    0x2fe1110: <multiple use>
    0x2fe1510: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe1b10: i32,ch = load 0x2fe1110, 0x2fe1510, 0x2fd4ca0<LD4[%2]> [ORD=31]

    0x2fe1110: <multiple use>
    0x2fe1b10: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe93e0: f32,ch = load 0x2fe1110, 0x2fe1b10, 0x2fd4ca0<LD4[%6]> [ORD=34]

        0x2fe1b10: <multiple use>
        0x2fe93e0: <multiple use>
      0x2fe9ce0: ch = TokenFactor 0x2fe1b10:1, 0x2fe93e0:1 [ORD=35]

      0x2fe93e0: <multiple use>
      0x2fe96e0: i32 = FrameIndex<2> [ORD=35]

      0x2fd4ca0: <multiple use>
    0x2fe9be0: ch = store 0x2fe9ce0, 0x2fe93e0, 0x2fe96e0, 0x2fd4ca0<ST4[%3]> [ORD=35]

    0x2fe1510: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fdbec0: i32,ch = load 0x2fe9be0, 0x2fe1510, 0x2fd4ca0<LD4[%2]>

      0x2fe1b10: <multiple use>
      0x2fe93e0: <multiple use>
    0x2fe9ce0: ch = TokenFactor 0x2fe1b10:1, 0x2fe93e0:1 [ORD=35]

    0x2fe93e0: <multiple use>
    0x2fe96e0: i32 = FrameIndex<2> [ORD=35]

    0x2fd4ca0: <multiple use>
  0x2fe9be0: ch = store 0x2fe9ce0, 0x2fe93e0, 0x2fe96e0, 0x2fd4ca0<ST4[%3]> [ORD=35]


visiting load instruction   %10 = load i32* %9, align 4
with I type i32and sd value :0x2fdbfc0: i32 = add 0x2fdbec0, 0x2fdc0c0
new load?0x2fe9de0: i32,ch = load 0x2fe9be0, 0x2fdbfc0, 0x2fd4ca0<LD4[%9]>
dag after load is dealt with?SelectionDAG has 17 nodes:
  0x2fb6da8: ch = EntryToken [ORD=30]

  0x2fd46a0: i32 = FrameIndex<-1> [ORD=30]

  0x2fd4ca0: i32 = undef [ORD=30]

    0x2fb6da8: <multiple use>
    0x2fd46a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd48a0: i32,ch = load 0x2fb6da8, 0x2fd46a0, 0x2fd4ca0<LD4[FixedStack-1]>

  0x2fe1510: i32 = FrameIndex<1> [ORD=30]

  0x2fe1210: i32 = Constant<0>

    0x2fb6da8: <multiple use>
    0x2fd46a0: <multiple use>
    0x2fe1510: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe1110: ch = store 0x2fb6da8, 0x2fd46a0, 0x2fe1510, 0x2fd4ca0<ST4[%2]> [ORD=30]

    0x2fe1110: <multiple use>
    0x2fe1510: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe1b10: i32,ch = load 0x2fe1110, 0x2fe1510, 0x2fd4ca0<LD4[%2]> [ORD=31]

    0x2fe1110: <multiple use>
    0x2fe1b10: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe93e0: f32,ch = load 0x2fe1110, 0x2fe1b10, 0x2fd4ca0<LD4[%6]> [ORD=34]

  0x2fd4ea0: i64 = Constant<4>

    0x2fe9be0: <multiple use>
        0x2fe9be0: <multiple use>
        0x2fe1510: <multiple use>
        0x2fd4ca0: <multiple use>
      0x2fdbec0: i32,ch = load 0x2fe9be0, 0x2fe1510, 0x2fd4ca0<LD4[%2]> [ORD=36]

      0x2fdc0c0: i32 = Constant<4> [ORD=37]

    0x2fdbfc0: i32 = add 0x2fdbec0, 0x2fdc0c0 [ORD=37]

    0x2fd4ca0: <multiple use>
  0x2fe9de0: i32,ch = load 0x2fe9be0, 0x2fdbfc0, 0x2fd4ca0<LD4[%9]>

      0x2fe1b10: <multiple use>
      0x2fe93e0: <multiple use>
    0x2fe9ce0: ch = TokenFactor 0x2fe1b10:1, 0x2fe93e0:1 [ORD=35]

    0x2fe93e0: <multiple use>
    0x2fe96e0: i32 = FrameIndex<2> [ORD=35]

    0x2fd4ca0: <multiple use>
  0x2fe9be0: ch = store 0x2fe9ce0, 0x2fe93e0, 0x2fe96e0, 0x2fd4ca0<ST4[%3]> [ORD=35]


I was here to add i32 0
Initial selection DAG: BB#0 'startup_fuel_valves3:startup_fuel_valves3.entry'
SelectionDAG has 23 nodes:
  0x2fb6da8: ch = EntryToken [ORD=30]

  0x2fd46a0: i32 = FrameIndex<-1> [ORD=30]

  0x2fd4ca0: i32 = undef [ORD=30]

    0x2fb6da8: <multiple use>
    0x2fd46a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fd48a0: i32,ch = load 0x2fb6da8, 0x2fd46a0, 0x2fd4ca0<LD4[FixedStack-1]>

  0x2fe1510: i32 = FrameIndex<1> [ORD=30]

    0x2fb6da8: <multiple use>
    0x2fd46a0: <multiple use>
    0x2fe1510: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe1110: ch = store 0x2fb6da8, 0x2fd46a0, 0x2fe1510, 0x2fd4ca0<ST4[%2]> [ORD=30]

    0x2fe1110: <multiple use>
    0x2fe1510: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe1b10: i32,ch = load 0x2fe1110, 0x2fe1510, 0x2fd4ca0<LD4[%2]> [ORD=31]

    0x2fe1110: <multiple use>
    0x2fe1b10: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe93e0: f32,ch = load 0x2fe1110, 0x2fe1b10, 0x2fd4ca0<LD4[%6]> [ORD=34]

      0x2fe1b10: <multiple use>
      0x2fe93e0: <multiple use>
    0x2fe9ce0: ch = TokenFactor 0x2fe1b10:1, 0x2fe93e0:1 [ORD=35]

    0x2fe93e0: <multiple use>
    0x2fe96e0: i32 = FrameIndex<2> [ORD=35]

    0x2fd4ca0: <multiple use>
  0x2fe9be0: ch = store 0x2fe9ce0, 0x2fe93e0, 0x2fe96e0, 0x2fd4ca0<ST4[%3]> [ORD=35]

  0x2fd4ea0: i64 = Constant<4>

      0x2fe9be0: <multiple use>
          0x2fe9be0: <multiple use>
              0x2fe9be0: <multiple use>
              0x2fe1510: <multiple use>
              0x2fd4ca0: <multiple use>
            0x2fdbec0: i32,ch = load 0x2fe9be0, 0x2fe1510, 0x2fd4ca0<LD4[%2]> [ORD=36]

            0x2fdc0c0: i32 = Constant<4> [ORD=37]

          0x2fdbfc0: i32 = add 0x2fdbec0, 0x2fdc0c0 [ORD=37]

          0x2fd4ca0: <multiple use>
        0x2fe9de0: i32,ch = load 0x2fe9be0, 0x2fdbfc0, 0x2fd4ca0<LD4[%9]> [ORD=38]

        0x2fe1210: i32 = Constant<0> [ORD=39]

        0x2fe99e0: ch = seteq [ORD=39]

      0x2fe98e0: i1 = setcc 0x2fe9de0, 0x2fe1210, 0x2fe99e0 [ORD=39]

      0x2fe97e0: ch = BasicBlock<startup_fuel_valves3.if.then 0x2fe2cc0>

    0x2fe95e0: ch = brcond 0x2fe9be0, 0x2fe98e0, 0x2fe97e0

    0x2fe91e0: ch = BasicBlock<startup_fuel_valves3.if.else 0x2fe2690>

  0x2fe90e0: ch = br 0x2fe95e0, 0x2fe91e0



Replacing.1 0x2fe1b10: i32,ch = load 0x2fe1110, 0x2fe1510, 0x2fd4ca0<LD4[%2]> [ORD=31]

With: 0x2fd46a0: i32 = FrameIndex<-1> [ORD=30]
 and 1 other values

Replacing.1 0x2fe93e0: f32,ch = load 0x2fe1110, 0x2fd46a0, 0x2fd4ca0<LD4[%6](align=16)> [ORD=34]

With: 0x2fe93e0: f32,ch = load 0x2fe1110, 0x2fd46a0, 0x2fd4ca0<LD4[%6](align=16)> [ORD=34]
 and 1 other values

Replacing.3 0x2fe9ce0: ch = TokenFactor 0x2fe1110, 0x2fe93e0:1 [ORD=35]

With: 0x2fe93e0: f32,ch = load 0x2fe1110, 0x2fd46a0, 0x2fd4ca0<LD4[%6](align=16)> [ORD=34]

Optimized lowered selection DAG: BB#0 'startup_fuel_valves3:startup_fuel_valves3.entry'
SelectionDAG has 19 nodes:
  0x2fd46a0: i32 = FrameIndex<-1> [ORD=30]

  0x2fd4ca0: i32 = undef [ORD=30]

  0x2fe1510: i32 = FrameIndex<1> [ORD=30]

      0x2fb6da8: ch = EntryToken [ORD=30]

      0x2fd46a0: <multiple use>
      0x2fe1510: <multiple use>
      0x2fd4ca0: <multiple use>
    0x2fe1110: ch = store 0x2fb6da8, 0x2fd46a0, 0x2fe1510, 0x2fd4ca0<ST4[%2]> [ORD=30]

    0x2fd46a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe93e0: f32,ch = load 0x2fe1110, 0x2fd46a0, 0x2fd4ca0<LD4[%6](align=16)> [ORD=34]

    0x2fe93e0: <multiple use>
    0x2fe93e0: <multiple use>
    0x2fe96e0: i32 = FrameIndex<2> [ORD=35]

    0x2fd4ca0: <multiple use>
  0x2fe9be0: ch = store 0x2fe93e0:1, 0x2fe93e0, 0x2fe96e0, 0x2fd4ca0<ST4[%3]> [ORD=35]

      0x2fe9be0: <multiple use>
          0x2fe9be0: <multiple use>
              0x2fe9be0: <multiple use>
              0x2fe1510: <multiple use>
              0x2fd4ca0: <multiple use>
            0x2fdbec0: i32,ch = load 0x2fe9be0, 0x2fe1510, 0x2fd4ca0<LD4[%2]> [ORD=36]

            0x2fdc0c0: i32 = Constant<4> [ORD=37]

          0x2fdbfc0: i32 = add 0x2fdbec0, 0x2fdc0c0 [ORD=37]

          0x2fd4ca0: <multiple use>
        0x2fe9de0: i32,ch = load 0x2fe9be0, 0x2fdbfc0, 0x2fd4ca0<LD4[%9]> [ORD=38]

        0x2fe1210: i32 = Constant<0> [ORD=39]

        0x2fe99e0: ch = seteq [ORD=39]

      0x2fe98e0: i1 = setcc 0x2fe9de0, 0x2fe1210, 0x2fe99e0 [ORD=39]

      0x2fe97e0: ch = BasicBlock<startup_fuel_valves3.if.then 0x2fe2cc0>

    0x2fe95e0: ch = brcond 0x2fe9be0, 0x2fe98e0, 0x2fe97e0

    0x2fe91e0: ch = BasicBlock<startup_fuel_valves3.if.else 0x2fe2690>

  0x2fe90e0: ch = br 0x2fe95e0, 0x2fe91e0


Legally typed node: 0x2fe91e0: ch = BasicBlock<startup_fuel_valves3.if.else 0x2fe2690> [ID=0]

Legally typed node: 0x2fe97e0: ch = BasicBlock<startup_fuel_valves3.if.then 0x2fe2cc0> [ID=0]

Legally typed node: 0x2fe99e0: ch = seteq [ORD=39] [ID=0]

Legally typed node: 0x2fdc0c0: i32 = Constant<4> [ORD=37] [ID=0]

Legally typed node: 0x2fe96e0: i32 = FrameIndex<2> [ORD=35] [ID=0]

Legally typed node: 0x2fe1210: i32 = Constant<0> [ORD=39] [ID=0]

Legally typed node: 0x2fe1510: i32 = FrameIndex<1> [ORD=30] [ID=0]

Legally typed node: 0x2fd4ca0: i32 = undef [ORD=30] [ID=0]

Legally typed node: 0x2fd46a0: i32 = FrameIndex<-1> [ORD=30] [ID=0]

Legally typed node: 0x2fb6da8: ch = EntryToken [ORD=30] [ID=0]

Legally typed node: 0x2fe1110: ch = store 0x2fb6da8, 0x2fd46a0, 0x2fe1510, 0x2fd4ca0<ST4[%2]> [ORD=30] [ID=0]

Legally typed node: 0x2fe93e0: f32,ch = load 0x2fe1110, 0x2fd46a0, 0x2fd4ca0<LD4[%6](align=16)> [ORD=34] [ID=0]

Legally typed node: 0x2fe9be0: ch = store 0x2fe93e0:1, 0x2fe93e0, 0x2fe96e0, 0x2fd4ca0<ST4[%3]> [ORD=35] [ID=0]

Legally typed node: 0x2fdbec0: i32,ch = load 0x2fe9be0, 0x2fe1510, 0x2fd4ca0<LD4[%2]> [ORD=36] [ID=0]

Legally typed node: 0x2fdbfc0: i32 = add 0x2fdbec0, 0x2fdc0c0 [ORD=37] [ID=0]

Legally typed node: 0x2fe9de0: i32,ch = load 0x2fe9be0, 0x2fdbfc0, 0x2fd4ca0<LD4[%9]> [ORD=38] [ID=0]

Promote integer result: 0x2fe98e0: i1 = setcc 0x2fe9de0, 0x2fe1210, 0x2fe99e0 [ORD=39] [ID=0]

Promote integer operand: 0x2fe95e0: ch = brcond 0x2fe9be0, 0x2fe98e0, 0x2fe97e0 [ID=0]

Promote integer operand: 0x2fe9ce0: i32 = zero_extend 0x2fe98e0 [ID=0]

Legally typed node: 0x2fe1b10: i32 = Constant<1> [ID=0]

Legally typed node: 0x2fd48a0: i32 = setcc 0x2fe9de0, 0x2fe1210, 0x2fe99e0 [ORD=39] [ID=0]

Legally typed node: 0x2fd4ea0: i32 = and 0x2fd48a0, 0x2fe1b10 [ID=0]

Legally typed node: 0x2fe95e0: ch = brcond 0x2fe9be0, 0x2fd4ea0, 0x2fe97e0 [ID=0]

Legally typed node: 0x2fe90e0: ch = br 0x2fe95e0, 0x2fe91e0 [ID=0]

Legally typed node: 0x7fff9b4748f0: ch = handlenode 0x2fe90e0 [ID=0]

Type-legalized selection DAG: BB#0 'startup_fuel_valves3:startup_fuel_valves3.entry'
SelectionDAG has 21 nodes:
  0x2fd46a0: i32 = FrameIndex<-1> [ORD=30] [ID=-3]

  0x2fd4ca0: i32 = undef [ORD=30] [ID=-3]

  0x2fe1510: i32 = FrameIndex<1> [ORD=30] [ID=-3]

      0x2fb6da8: ch = EntryToken [ORD=30] [ID=-3]

      0x2fd46a0: <multiple use>
      0x2fe1510: <multiple use>
      0x2fd4ca0: <multiple use>
    0x2fe1110: ch = store 0x2fb6da8, 0x2fd46a0, 0x2fe1510, 0x2fd4ca0<ST4[%2]> [ORD=30] [ID=-3]

    0x2fd46a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe93e0: f32,ch = load 0x2fe1110, 0x2fd46a0, 0x2fd4ca0<LD4[%6](align=16)> [ORD=34] [ID=-3]

    0x2fe93e0: <multiple use>
    0x2fe93e0: <multiple use>
    0x2fe96e0: i32 = FrameIndex<2> [ORD=35] [ID=-3]

    0x2fd4ca0: <multiple use>
  0x2fe9be0: ch = store 0x2fe93e0:1, 0x2fe93e0, 0x2fe96e0, 0x2fd4ca0<ST4[%3]> [ORD=35] [ID=-3]

      0x2fe9be0: <multiple use>
            0x2fe9be0: <multiple use>
                0x2fe9be0: <multiple use>
                0x2fe1510: <multiple use>
                0x2fd4ca0: <multiple use>
              0x2fdbec0: i32,ch = load 0x2fe9be0, 0x2fe1510, 0x2fd4ca0<LD4[%2]> [ORD=36] [ID=-3]

              0x2fdc0c0: i32 = Constant<4> [ORD=37] [ID=-3]

            0x2fdbfc0: i32 = add 0x2fdbec0, 0x2fdc0c0 [ORD=37] [ID=-3]

            0x2fd4ca0: <multiple use>
          0x2fe9de0: i32,ch = load 0x2fe9be0, 0x2fdbfc0, 0x2fd4ca0<LD4[%9]> [ORD=38] [ID=-3]

          0x2fe1210: i32 = Constant<0> [ORD=39] [ID=-3]

          0x2fe99e0: ch = seteq [ORD=39] [ID=-3]

        0x2fd48a0: i32 = setcc 0x2fe9de0, 0x2fe1210, 0x2fe99e0 [ORD=39] [ID=-3]

        0x2fe1b10: i32 = Constant<1> [ID=-3]

      0x2fd4ea0: i32 = and 0x2fd48a0, 0x2fe1b10 [ID=-3]

      0x2fe97e0: ch = BasicBlock<startup_fuel_valves3.if.then 0x2fe2cc0> [ID=-3]

    0x2fe95e0: ch = brcond 0x2fe9be0, 0x2fd4ea0, 0x2fe97e0 [ID=-3]

    0x2fe91e0: ch = BasicBlock<startup_fuel_valves3.if.else 0x2fe2690> [ID=-3]

  0x2fe90e0: ch = br 0x2fe95e0, 0x2fe91e0 [ID=-3]



Replacing.2 0x2fd4ea0: i32 = and 0x2fd48a0, 0x2fe1b10 [ID=-3]

With: 0x2fd48a0: i32 = setcc 0x2fe9de0, 0x2fe1210, 0x2fe99e0 [ORD=39] [ID=-3]

Optimized type-legalized selection DAG: BB#0 'startup_fuel_valves3:startup_fuel_valves3.entry'
SelectionDAG has 19 nodes:
  0x2fd46a0: i32 = FrameIndex<-1> [ORD=30] [ID=-3]

  0x2fd4ca0: i32 = undef [ORD=30] [ID=-3]

  0x2fe1510: i32 = FrameIndex<1> [ORD=30] [ID=-3]

      0x2fb6da8: ch = EntryToken [ORD=30] [ID=-3]

      0x2fd46a0: <multiple use>
      0x2fe1510: <multiple use>
      0x2fd4ca0: <multiple use>
    0x2fe1110: ch = store 0x2fb6da8, 0x2fd46a0, 0x2fe1510, 0x2fd4ca0<ST4[%2]> [ORD=30] [ID=-3]

    0x2fd46a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe93e0: f32,ch = load 0x2fe1110, 0x2fd46a0, 0x2fd4ca0<LD4[%6](align=16)> [ORD=34] [ID=-3]

    0x2fe93e0: <multiple use>
    0x2fe93e0: <multiple use>
    0x2fe96e0: i32 = FrameIndex<2> [ORD=35] [ID=-3]

    0x2fd4ca0: <multiple use>
  0x2fe9be0: ch = store 0x2fe93e0:1, 0x2fe93e0, 0x2fe96e0, 0x2fd4ca0<ST4[%3]> [ORD=35] [ID=-3]

      0x2fe9be0: <multiple use>
          0x2fe9be0: <multiple use>
              0x2fe9be0: <multiple use>
              0x2fe1510: <multiple use>
              0x2fd4ca0: <multiple use>
            0x2fdbec0: i32,ch = load 0x2fe9be0, 0x2fe1510, 0x2fd4ca0<LD4[%2]> [ORD=36] [ID=-3]

            0x2fdc0c0: i32 = Constant<4> [ORD=37] [ID=-3]

          0x2fdbfc0: i32 = add 0x2fdbec0, 0x2fdc0c0 [ORD=37] [ID=-3]

          0x2fd4ca0: <multiple use>
        0x2fe9de0: i32,ch = load 0x2fe9be0, 0x2fdbfc0, 0x2fd4ca0<LD4[%9]> [ORD=38] [ID=-3]

        0x2fe1210: i32 = Constant<0> [ORD=39] [ID=-3]

        0x2fe99e0: ch = seteq [ORD=39] [ID=-3]

      0x2fd48a0: i32 = setcc 0x2fe9de0, 0x2fe1210, 0x2fe99e0 [ORD=39] [ID=-3]

      0x2fe97e0: ch = BasicBlock<startup_fuel_valves3.if.then 0x2fe2cc0> [ID=-3]

    0x2fe95e0: ch = brcond 0x2fe9be0, 0x2fd48a0, 0x2fe97e0 [ID=-3]

    0x2fe91e0: ch = BasicBlock<startup_fuel_valves3.if.else 0x2fe2690> [ID=-3]

  0x2fe90e0: ch = br 0x2fe95e0, 0x2fe91e0 [ID=-3]


Legalized selection DAG: BB#0 'startup_fuel_valves3:startup_fuel_valves3.entry'
SelectionDAG has 19 nodes:
  0x2fd46a0: i32 = FrameIndex<-1> [ORD=30] [ID=1]

  0x2fd4ca0: i32 = undef [ORD=30] [ID=2]

  0x2fe1510: i32 = FrameIndex<1> [ORD=30] [ID=3]

      0x2fb6da8: ch = EntryToken [ORD=30] [ID=0]

      0x2fd46a0: <multiple use>
      0x2fe1510: <multiple use>
      0x2fd4ca0: <multiple use>
    0x2fe1110: ch = store 0x2fb6da8, 0x2fd46a0, 0x2fe1510, 0x2fd4ca0<ST4[%2]> [ORD=30] [ID=10]

    0x2fd46a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe93e0: f32,ch = load 0x2fe1110, 0x2fd46a0, 0x2fd4ca0<LD4[%6](align=16)> [ORD=34] [ID=11]

    0x2fe93e0: <multiple use>
    0x2fe93e0: <multiple use>
    0x2fe96e0: i32 = FrameIndex<2> [ORD=35] [ID=5]

    0x2fd4ca0: <multiple use>
  0x2fe9be0: ch = store 0x2fe93e0:1, 0x2fe93e0, 0x2fe96e0, 0x2fd4ca0<ST4[%3]> [ORD=35] [ID=12]

      0x2fe9be0: <multiple use>
          0x2fe9be0: <multiple use>
              0x2fe9be0: <multiple use>
              0x2fe1510: <multiple use>
              0x2fd4ca0: <multiple use>
            0x2fdbec0: i32,ch = load 0x2fe9be0, 0x2fe1510, 0x2fd4ca0<LD4[%2]> [ORD=36] [ID=13]

            0x2fdc0c0: i32 = Constant<4> [ORD=37] [ID=6]

          0x2fdbfc0: i32 = add 0x2fdbec0, 0x2fdc0c0 [ORD=37] [ID=14]

          0x2fd4ca0: <multiple use>
        0x2fe9de0: i32,ch = load 0x2fe9be0, 0x2fdbfc0, 0x2fd4ca0<LD4[%9]> [ORD=38] [ID=15]

        0x2fe1210: i32 = Constant<0> [ORD=39] [ID=4]

        0x2fe99e0: ch = seteq [ORD=39] [ID=7]

      0x2fd48a0: i32 = setcc 0x2fe9de0, 0x2fe1210, 0x2fe99e0 [ORD=39] [ID=16]

      0x2fe97e0: ch = BasicBlock<startup_fuel_valves3.if.then 0x2fe2cc0> [ID=8]

    0x2fe95e0: ch = brcond 0x2fe9be0, 0x2fd48a0, 0x2fe97e0 [ID=17]

    0x2fe91e0: ch = BasicBlock<startup_fuel_valves3.if.else 0x2fe2690> [ID=9]

  0x2fe90e0: ch = br 0x2fe95e0, 0x2fe91e0 [ID=18]


Optimized legalized selection DAG: BB#0 'startup_fuel_valves3:startup_fuel_valves3.entry'
SelectionDAG has 19 nodes:
  0x2fd46a0: i32 = FrameIndex<-1> [ORD=30] [ID=1]

  0x2fd4ca0: i32 = undef [ORD=30] [ID=2]

  0x2fe1510: i32 = FrameIndex<1> [ORD=30] [ID=3]

      0x2fb6da8: ch = EntryToken [ORD=30] [ID=0]

      0x2fd46a0: <multiple use>
      0x2fe1510: <multiple use>
      0x2fd4ca0: <multiple use>
    0x2fe1110: ch = store 0x2fb6da8, 0x2fd46a0, 0x2fe1510, 0x2fd4ca0<ST4[%2]> [ORD=30] [ID=10]

    0x2fd46a0: <multiple use>
    0x2fd4ca0: <multiple use>
  0x2fe93e0: f32,ch = load 0x2fe1110, 0x2fd46a0, 0x2fd4ca0<LD4[%6](align=16)> [ORD=34] [ID=11]

    0x2fe93e0: <multiple use>
    0x2fe93e0: <multiple use>
    0x2fe96e0: i32 = FrameIndex<2> [ORD=35] [ID=5]

    0x2fd4ca0: <multiple use>
  0x2fe9be0: ch = store 0x2fe93e0:1, 0x2fe93e0, 0x2fe96e0, 0x2fd4ca0<ST4[%3]> [ORD=35] [ID=12]

      0x2fe9be0: <multiple use>
          0x2fe9be0: <multiple use>
              0x2fe9be0: <multiple use>
              0x2fe1510: <multiple use>
              0x2fd4ca0: <multiple use>
            0x2fdbec0: i32,ch = load 0x2fe9be0, 0x2fe1510, 0x2fd4ca0<LD4[%2]> [ORD=36] [ID=13]

            0x2fdc0c0: i32 = Constant<4> [ORD=37] [ID=6]

          0x2fdbfc0: i32 = add 0x2fdbec0, 0x2fdc0c0 [ORD=37] [ID=14]

          0x2fd4ca0: <multiple use>
        0x2fe9de0: i32,ch = load 0x2fe9be0, 0x2fdbfc0, 0x2fd4ca0<LD4[%9]> [ORD=38] [ID=15]

        0x2fe1210: i32 = Constant<0> [ORD=39] [ID=4]

        0x2fe99e0: ch = seteq [ORD=39] [ID=7]

      0x2fd48a0: i32 = setcc 0x2fe9de0, 0x2fe1210, 0x2fe99e0 [ORD=39] [ID=16]

      0x2fe97e0: ch = BasicBlock<startup_fuel_valves3.if.then 0x2fe2cc0> [ID=8]

    0x2fe95e0: ch = brcond 0x2fe9be0, 0x2fd48a0, 0x2fe97e0 [ID=17]

    0x2fe91e0: ch = BasicBlock<startup_fuel_valves3.if.else 0x2fe2690> [ID=9]

  0x2fe90e0: ch = br 0x2fe95e0, 0x2fe91e0 [ID=18]


===== Instruction selection begins: BB#0 'startup_fuel_valves3.entry'
ISEL: Starting pattern match on root node: 0x2fe90e0: ch = br 0x2fe95e0, 0x2fe91e0 [ID=18]

  Initial Opcode index to 1938
  Morphed node: 0x2fe90e0: ch = JAL 0x2fe91e0, 0x2fe95e0

ISEL: Match complete!
=> 0x2fe90e0: ch = JAL 0x2fe91e0, 0x2fe95e0

ISEL: Starting pattern match on root node: 0x2fe95e0: ch = brcond 0x2fe9be0, 0x2fd48a0, 0x2fe97e0 [ID=17]

  Initial Opcode index to 1439
  Morphed node: 0x2fe95e0: ch = BEQ 0x2fe97e0, 0x2fe9de0, 0x2fe1210, 0x2fe9be0

ISEL: Match complete!
=> 0x2fe95e0: ch = BEQ 0x2fe97e0, 0x2fe9de0, 0x2fe1210, 0x2fe9be0

ISEL: Starting pattern match on root node: 0x2fe9de0: i32,ch = load 0x2fe9be0, 0x2fdbfc0, 0x2fd4ca0<LD4[%9]> [ORD=38] [ID=15]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2fe9de0: i32,ch = LW 0x2fdbec0, 0x2fe99e0, 0x2fe9be0<Mem:LD4[%9]> [ORD=38]

ISEL: Match complete!
=> 0x2fe9de0: i32,ch = LW 0x2fdbec0, 0x2fe99e0, 0x2fe9be0<Mem:LD4[%9]> [ORD=38]

ISEL: Starting pattern match on root node: 0x2fdbec0: i32,ch = load 0x2fe9be0, 0x2fe1510, 0x2fd4ca0<LD4[%2]> [ORD=36] [ID=13]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2fdbec0: i32,ch = LW 0x2fe1510, 0x2fdc0c0, 0x2fe9be0<Mem:LD4[%2]> [ORD=36]

ISEL: Match complete!
=> 0x2fdbec0: i32,ch = LW 0x2fe1510, 0x2fdc0c0, 0x2fe9be0<Mem:LD4[%2]> [ORD=36]

ISEL: Starting pattern match on root node: 0x2fe9be0: ch = store 0x2fe93e0:1, 0x2fe93e0, 0x2fe96e0, 0x2fd4ca0<ST4[%3]> [ORD=35] [ID=12]

  Initial Opcode index to 178
  Skipped scope entry (due to false predicate) at index 183, continuing at 243
  Morphed node: 0x2fe9be0: ch = FSW 0x2fe93e0, 0x2fe96e0, 0x2fdc0c0, 0x2fe93e0:1<Mem:ST4[%3]> [ORD=35]

ISEL: Match complete!
=> 0x2fe9be0: ch = FSW 0x2fe93e0, 0x2fe96e0, 0x2fdc0c0, 0x2fe93e0:1<Mem:ST4[%3]> [ORD=35]

ISEL: Starting pattern match on root node: 0x2fe93e0: f32,ch = load 0x2fe1110, 0x2fd46a0, 0x2fd4ca0<LD4[%6](align=16)> [ORD=34] [ID=11]

  Initial Opcode index to 5
  TypeSwitch[f32] from 10 to 159
  Morphed node: 0x2fe93e0: f32,ch = FLW 0x2fd46a0, 0x2fdc0c0, 0x2fe1110<Mem:LD4[%6](align=16)> [ORD=34]

ISEL: Match complete!
=> 0x2fe93e0: f32,ch = FLW 0x2fd46a0, 0x2fdc0c0, 0x2fe1110<Mem:LD4[%6](align=16)> [ORD=34]

ISEL: Starting pattern match on root node: 0x2fe1110: ch = store 0x2fb6da8, 0x2fd46a0, 0x2fe1510, 0x2fd4ca0<ST4[%2]> [ORD=30] [ID=10]

  Initial Opcode index to 178
  Morphed node: 0x2fe1110: ch = SW 0x2fd46a0, 0x2fe1510, 0x2fdc0c0, 0x2fb6da8<Mem:ST4[%2]> [ORD=30]

ISEL: Match complete!
=> 0x2fe1110: ch = SW 0x2fd46a0, 0x2fe1510, 0x2fdc0c0, 0x2fb6da8<Mem:ST4[%2]> [ORD=30]

=> 0x2fe91e0: ch = BasicBlock<startup_fuel_valves3.if.else 0x2fe2690>

=> 0x2fe97e0: ch = BasicBlock<startup_fuel_valves3.if.then 0x2fe2cc0>

ISEL: Starting pattern match on root node: 0x2fe1210: i32 = Constant<0> [ORD=39] [ID=4]

  Initial Opcode index to 1226
comparing 0 and 0 and returning value:1
ISEL: Match complete!
=> 0x2fe1210: i32 = Constant<0> [ORD=39] [ID=4]

=> 0x2fb6da8: ch = EntryToken [ORD=30]

===== Instruction selection ends:
Selected selection DAG: BB#0 'startup_fuel_valves3:startup_fuel_valves3.entry'
SelectionDAG has 20 nodes:
    0x2fd4ea0: <multiple use>
    0x2fdc0c0: <multiple use>
      0x2fd4ea0: <multiple use>
      0x2fe1b10: <multiple use>
      0x2fdc0c0: <multiple use>
      0x2fb6da8: ch = EntryToken [ORD=30]

    0x2fe1110: ch = SW 0x2fd4ea0, 0x2fe1b10, 0x2fdc0c0, 0x2fb6da8<Mem:ST4[%2]> [ORD=30]

  0x2fe93e0: f32,ch = FLW 0x2fd4ea0, 0x2fdc0c0, 0x2fe1110<Mem:LD4[%6](align=16)> [ORD=34]

    0x2fe93e0: <multiple use>
      0x2fd4ca0: <multiple use>
      0x2fdbfc0: i32 = TargetFrameIndex<2>

    0x2fe96e0: i32 = ADDI 0x2fd4ca0, 0x2fdbfc0 [ORD=35]

    0x2fdc0c0: <multiple use>
    0x2fe93e0: <multiple use>
  0x2fe9be0: ch = FSW 0x2fe93e0, 0x2fe96e0, 0x2fdc0c0, 0x2fe93e0:1<Mem:ST4[%3]> [ORD=35]

  0x2fdc0c0: i32 = TargetConstant<0>

  0x2fd4ca0: i32 = Register %t5

    0x2fd4ca0: <multiple use>
    0x2fe1210: i32 = TargetFrameIndex<1>

  0x2fe1b10: i32 = ADDI 0x2fd4ca0, 0x2fe1210 [ORD=30]

    0x2fd4ca0: <multiple use>
    0x2fe1510: i32 = TargetFrameIndex<-1>

  0x2fd4ea0: i32 = ADDI 0x2fd4ca0, 0x2fe1510 [ORD=30]

    0x2fe91e0: ch = BasicBlock<startup_fuel_valves3.if.else 0x2fe2690>

      0x2fe97e0: ch = BasicBlock<startup_fuel_valves3.if.then 0x2fe2cc0>

          0x2fe1b10: <multiple use>
          0x2fdc0c0: <multiple use>
          0x2fe9be0: <multiple use>
        0x2fdbec0: i32,ch = LW 0x2fe1b10, 0x2fdc0c0, 0x2fe9be0<Mem:LD4[%2]> [ORD=36]

        0x2fe99e0: i32 = TargetConstant<4>

        0x2fe9be0: <multiple use>
      0x2fe9de0: i32,ch = LW 0x2fdbec0, 0x2fe99e0, 0x2fe9be0<Mem:LD4[%9]> [ORD=38]

      0x2fd48a0: i32 = Register %zero

      0x2fe9be0: <multiple use>
    0x2fe95e0: ch = BEQ 0x2fe97e0, 0x2fe9de0, 0x2fd48a0, 0x2fe9be0

  0x2fe90e0: ch = JAL 0x2fe91e0, 0x2fe95e0


********** List Scheduling BB#0 'startup_fuel_valves3.entry' **********
SU(0): 0x2fe90e0: ch = JAL 0x2fe91e0, 0x2fe95e0 [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x2fe95e0: ch = BEQ 0x2fe97e0, 0x2fe9de0, 0x2fd48a0, 0x2fe9be0 [ID=1]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
   val SU(8): Latency=1
   ch  SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x2fe9be0: ch = FSW 0x2fe93e0, 0x2fe96e0, 0x2fdc0c0, 0x2fe93e0:1<Mem:ST4[%3]> [ORD=35] [ID=2]

  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 4
  Predecessors:
   val SU(4): Latency=1
   val SU(3): Latency=1
   ch  SU(4): Latency=1
  Successors:
   ch  SU(1): Latency=1
   ch  SU(8): Latency=1
   ch  SU(9): Latency=1

SU(3): 0x2fe96e0: i32 = ADDI 0x2fd4ca0, 0x2fdbfc0 [ORD=35] [ID=3]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
   val SU(2): Latency=1

SU(4): 0x2fe93e0: f32,ch = FLW 0x2fd4ea0, 0x2fdc0c0, 0x2fe1110<Mem:LD4[%6](align=16)> [ORD=34] [ID=4]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 5
  Predecessors:
   val SU(7): Latency=1
   ch  SU(5): Latency=1
  Successors:
   val SU(2): Latency=1
   ch  SU(2): Latency=1

SU(5): 0x2fe1110: ch = SW 0x2fd4ea0, 0x2fe1b10, 0x2fdc0c0, 0x2fb6da8<Mem:ST4[%2]> [ORD=30] [ID=5]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 6
  Predecessors:
   val SU(7): Latency=1
   val SU(6): Latency=1
  Successors:
   ch  SU(4): Latency=1

SU(6): 0x2fe1b10: i32 = ADDI 0x2fd4ca0, 0x2fe1210 [ORD=30] [ID=6]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
   val SU(5): Latency=1
   val SU(9): Latency=1

SU(7): 0x2fd4ea0: i32 = ADDI 0x2fd4ca0, 0x2fe1510 [ORD=30] [ID=7]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
   val SU(4): Latency=1
   val SU(5): Latency=1

SU(8): 0x2fe9de0: i32,ch = LW 0x2fdbec0, 0x2fe99e0, 0x2fe9be0<Mem:LD4[%9]> [ORD=38] [ID=8]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
   val SU(9): Latency=1
   ch  SU(2): Latency=1
  Successors:
   val SU(1): Latency=1

SU(9): 0x2fdbec0: i32,ch = LW 0x2fe1b10, 0x2fdc0c0, 0x2fe9be0<Mem:LD4[%2]> [ORD=36] [ID=9]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
   val SU(6): Latency=1
   ch  SU(2): Latency=1
  Successors:
   val SU(8): Latency=1


Examining Available:
Height 0: SU(0): 0x2fe90e0: ch = JAL 0x2fe91e0, 0x2fe95e0 [ID=0]


*** Scheduling [0]: SU(0): 0x2fe90e0: ch = JAL 0x2fe91e0, 0x2fe95e0 [ID=0]


Examining Available:
Height 1: SU(1): 0x2fe95e0: ch = BEQ 0x2fe97e0, 0x2fe9de0, 0x2fd48a0, 0x2fe9be0 [ID=1]


*** Scheduling [1]: SU(1): 0x2fe95e0: ch = BEQ 0x2fe97e0, 0x2fe9de0, 0x2fd48a0, 0x2fe9be0 [ID=1]


Examining Available:
Height 2: SU(8): 0x2fe9de0: i32,ch = LW 0x2fdbec0, 0x2fe99e0, 0x2fe9be0<Mem:LD4[%9]> [ORD=38] [ID=8]


*** Scheduling [2]: SU(8): 0x2fe9de0: i32,ch = LW 0x2fdbec0, 0x2fe99e0, 0x2fe9be0<Mem:LD4[%9]> [ORD=38] [ID=8]


Examining Available:
Height 3: SU(9): 0x2fdbec0: i32,ch = LW 0x2fe1b10, 0x2fdc0c0, 0x2fe9be0<Mem:LD4[%2]> [ORD=36] [ID=9]


*** Scheduling [3]: SU(9): 0x2fdbec0: i32,ch = LW 0x2fe1b10, 0x2fdc0c0, 0x2fe9be0<Mem:LD4[%2]> [ORD=36] [ID=9]


Examining Available:
Height 4: SU(2): 0x2fe9be0: ch = FSW 0x2fe93e0, 0x2fe96e0, 0x2fdc0c0, 0x2fe93e0:1<Mem:ST4[%3]> [ORD=35] [ID=2]


*** Scheduling [4]: SU(2): 0x2fe9be0: ch = FSW 0x2fe93e0, 0x2fe96e0, 0x2fdc0c0, 0x2fe93e0:1<Mem:ST4[%3]> [ORD=35] [ID=2]


Examining Available:
Height 5: SU(3): 0x2fe96e0: i32 = ADDI 0x2fd4ca0, 0x2fdbfc0 [ORD=35] [ID=3]

Height 5: SU(4): 0x2fe93e0: f32,ch = FLW 0x2fd4ea0, 0x2fdc0c0, 0x2fe1110<Mem:LD4[%6](align=16)> [ORD=34] [ID=4]


*** Scheduling [5]: SU(3): 0x2fe96e0: i32 = ADDI 0x2fd4ca0, 0x2fdbfc0 [ORD=35] [ID=3]


Examining Available:
Height 5: SU(4): 0x2fe93e0: f32,ch = FLW 0x2fd4ea0, 0x2fdc0c0, 0x2fe1110<Mem:LD4[%6](align=16)> [ORD=34] [ID=4]


*** Scheduling [6]: SU(4): 0x2fe93e0: f32,ch = FLW 0x2fd4ea0, 0x2fdc0c0, 0x2fe1110<Mem:LD4[%6](align=16)> [ORD=34] [ID=4]


Examining Available:
Height 7: SU(5): 0x2fe1110: ch = SW 0x2fd4ea0, 0x2fe1b10, 0x2fdc0c0, 0x2fb6da8<Mem:ST4[%2]> [ORD=30] [ID=5]


*** Scheduling [7]: SU(5): 0x2fe1110: ch = SW 0x2fd4ea0, 0x2fe1b10, 0x2fdc0c0, 0x2fb6da8<Mem:ST4[%2]> [ORD=30] [ID=5]


Examining Available:
Height 8: SU(7): 0x2fd4ea0: i32 = ADDI 0x2fd4ca0, 0x2fe1510 [ORD=30] [ID=7]

Height 8: SU(6): 0x2fe1b10: i32 = ADDI 0x2fd4ca0, 0x2fe1210 [ORD=30] [ID=6]


*** Scheduling [8]: SU(7): 0x2fd4ea0: i32 = ADDI 0x2fd4ca0, 0x2fe1510 [ORD=30] [ID=7]


Examining Available:
Height 8: SU(6): 0x2fe1b10: i32 = ADDI 0x2fd4ca0, 0x2fe1210 [ORD=30] [ID=6]


*** Scheduling [9]: SU(6): 0x2fe1b10: i32 = ADDI 0x2fd4ca0, 0x2fe1210 [ORD=30] [ID=6]

*** Final schedule ***
SU(6): 0x2fe1b10: i32 = ADDI 0x2fd4ca0, 0x2fe1210 [ORD=30] [ID=6]

SU(7): 0x2fd4ea0: i32 = ADDI 0x2fd4ca0, 0x2fe1510 [ORD=30] [ID=7]

SU(5): 0x2fe1110: ch = SW 0x2fd4ea0, 0x2fe1b10, 0x2fdc0c0, 0x2fb6da8<Mem:ST4[%2]> [ORD=30] [ID=5]

SU(4): 0x2fe93e0: f32,ch = FLW 0x2fd4ea0, 0x2fdc0c0, 0x2fe1110<Mem:LD4[%6](align=16)> [ORD=34] [ID=4]

SU(3): 0x2fe96e0: i32 = ADDI 0x2fd4ca0, 0x2fdbfc0 [ORD=35] [ID=3]

SU(2): 0x2fe9be0: ch = FSW 0x2fe93e0, 0x2fe96e0, 0x2fdc0c0, 0x2fe93e0:1<Mem:ST4[%3]> [ORD=35] [ID=2]

SU(9): 0x2fdbec0: i32,ch = LW 0x2fe1b10, 0x2fdc0c0, 0x2fe9be0<Mem:LD4[%2]> [ORD=36] [ID=9]

SU(8): 0x2fe9de0: i32,ch = LW 0x2fdbec0, 0x2fe99e0, 0x2fe9be0<Mem:LD4[%9]> [ORD=38] [ID=8]

SU(1): 0x2fe95e0: ch = BEQ 0x2fe97e0, 0x2fe9de0, 0x2fd48a0, 0x2fe9be0 [ID=1]

SU(0): 0x2fe90e0: ch = JAL 0x2fe91e0, 0x2fe95e0 [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %12 = load float* %3, align 4
I was here to add   %3 = alloca float, align 4
with I type floatand sd value :0x2fd4ea0: i32 = FrameIndex<2>
new load?0x2fe1210: f32,ch = load 0x2fb6da8, 0x2fd4ea0, 0x2fe1b10<LD4[%3]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x2fe1510: i32 = Constant<0>

    0x2fb6da8: ch = EntryToken

    0x2fd4ea0: i32 = FrameIndex<2>

    0x2fe1b10: i32 = undef

  0x2fe1210: f32,ch = load 0x2fb6da8, 0x2fd4ea0, 0x2fe1b10<LD4[%3]>

  0x2fb6da8: ch = EntryToken


I was here to add float 4.000000e+03
Initial selection DAG: BB#1 'startup_fuel_valves3:startup_fuel_valves3.if.else'
SelectionDAG has 12 nodes:
  0x2fb6da8: ch = EntryToken [ORD=40]

  0x2fe1510: i32 = Constant<0>

      0x2fb6da8: <multiple use>
          0x2fb6da8: <multiple use>
          0x2fd4ea0: i32 = FrameIndex<2> [ORD=40]

          0x2fe1b10: i32 = undef [ORD=40]

        0x2fe1210: f32,ch = load 0x2fb6da8, 0x2fd4ea0, 0x2fe1b10<LD4[%3]> [ORD=40]

        0x2fd48a0: f32 = ConstantFP<4.000000e+03> [ORD=41]

        0x2fdbfc0: ch = setolt [ORD=41]

      0x2fd4ca0: i1 = setcc 0x2fe1210, 0x2fd48a0, 0x2fdbfc0 [ORD=41]

      0x2fdc0c0: ch = BasicBlock<startup_fuel_valves3.if.end26 0x2fe2ab0>

    0x2fe99e0: ch = brcond 0x2fb6da8, 0x2fd4ca0, 0x2fdc0c0

    0x2fe90e0: ch = BasicBlock<startup_fuel_valves3.if.else7 0x2fe2740>

  0x2fe95e0: ch = br 0x2fe99e0, 0x2fe90e0


Optimized lowered selection DAG: BB#1 'startup_fuel_valves3:startup_fuel_valves3.if.else'
SelectionDAG has 11 nodes:
  0x2fb6da8: ch = EntryToken [ORD=40]

      0x2fb6da8: <multiple use>
          0x2fb6da8: <multiple use>
          0x2fd4ea0: i32 = FrameIndex<2> [ORD=40]

          0x2fe1b10: i32 = undef [ORD=40]

        0x2fe1210: f32,ch = load 0x2fb6da8, 0x2fd4ea0, 0x2fe1b10<LD4[%3]> [ORD=40]

        0x2fd48a0: f32 = ConstantFP<4.000000e+03> [ORD=41]

        0x2fdbfc0: ch = setolt [ORD=41]

      0x2fd4ca0: i1 = setcc 0x2fe1210, 0x2fd48a0, 0x2fdbfc0 [ORD=41]

      0x2fdc0c0: ch = BasicBlock<startup_fuel_valves3.if.end26 0x2fe2ab0>

    0x2fe99e0: ch = brcond 0x2fb6da8, 0x2fd4ca0, 0x2fdc0c0

    0x2fe90e0: ch = BasicBlock<startup_fuel_valves3.if.else7 0x2fe2740>

  0x2fe95e0: ch = br 0x2fe99e0, 0x2fe90e0


Legally typed node: 0x2fe90e0: ch = BasicBlock<startup_fuel_valves3.if.else7 0x2fe2740> [ID=0]

Legally typed node: 0x2fdc0c0: ch = BasicBlock<startup_fuel_valves3.if.end26 0x2fe2ab0> [ID=0]

Legally typed node: 0x2fdbfc0: ch = setolt [ORD=41] [ID=0]

Legally typed node: 0x2fd48a0: f32 = ConstantFP<4.000000e+03> [ORD=41] [ID=0]

Legally typed node: 0x2fe1b10: i32 = undef [ORD=40] [ID=0]

Legally typed node: 0x2fd4ea0: i32 = FrameIndex<2> [ORD=40] [ID=0]

Legally typed node: 0x2fb6da8: ch = EntryToken [ORD=40] [ID=0]

Legally typed node: 0x2fe1210: f32,ch = load 0x2fb6da8, 0x2fd4ea0, 0x2fe1b10<LD4[%3]> [ORD=40] [ID=0]

Promote integer result: 0x2fd4ca0: i1 = setcc 0x2fe1210, 0x2fd48a0, 0x2fdbfc0 [ORD=41] [ID=0]

Promote integer operand: 0x2fe99e0: ch = brcond 0x2fb6da8, 0x2fd4ca0, 0x2fdc0c0 [ID=0]

Promote integer operand: 0x2fe9de0: i32 = zero_extend 0x2fd4ca0 [ID=0]

Legally typed node: 0x2fdbec0: i32 = Constant<1> [ID=0]

Legally typed node: 0x2fe1510: i32 = setcc 0x2fe1210, 0x2fd48a0, 0x2fdbfc0 [ORD=41] [ID=0]

Legally typed node: 0x2fe9be0: i32 = and 0x2fe1510, 0x2fdbec0 [ID=0]

Legally typed node: 0x2fe99e0: ch = brcond 0x2fb6da8, 0x2fe9be0, 0x2fdc0c0 [ID=0]

Legally typed node: 0x2fe95e0: ch = br 0x2fe99e0, 0x2fe90e0 [ID=0]

Legally typed node: 0x7fff9b4748f0: ch = handlenode 0x2fe95e0 [ID=0]

Type-legalized selection DAG: BB#1 'startup_fuel_valves3:startup_fuel_valves3.if.else'
SelectionDAG has 13 nodes:
  0x2fb6da8: ch = EntryToken [ORD=40] [ID=-3]

      0x2fb6da8: <multiple use>
            0x2fb6da8: <multiple use>
            0x2fd4ea0: i32 = FrameIndex<2> [ORD=40] [ID=-3]

            0x2fe1b10: i32 = undef [ORD=40] [ID=-3]

          0x2fe1210: f32,ch = load 0x2fb6da8, 0x2fd4ea0, 0x2fe1b10<LD4[%3]> [ORD=40] [ID=-3]

          0x2fd48a0: f32 = ConstantFP<4.000000e+03> [ORD=41] [ID=-3]

          0x2fdbfc0: ch = setolt [ORD=41] [ID=-3]

        0x2fe1510: i32 = setcc 0x2fe1210, 0x2fd48a0, 0x2fdbfc0 [ORD=41] [ID=-3]

        0x2fdbec0: i32 = Constant<1> [ID=-3]

      0x2fe9be0: i32 = and 0x2fe1510, 0x2fdbec0 [ID=-3]

      0x2fdc0c0: ch = BasicBlock<startup_fuel_valves3.if.end26 0x2fe2ab0> [ID=-3]

    0x2fe99e0: ch = brcond 0x2fb6da8, 0x2fe9be0, 0x2fdc0c0 [ID=-3]

    0x2fe90e0: ch = BasicBlock<startup_fuel_valves3.if.else7 0x2fe2740> [ID=-3]

  0x2fe95e0: ch = br 0x2fe99e0, 0x2fe90e0 [ID=-3]



Replacing.2 0x2fe9be0: i32 = and 0x2fe1510, 0x2fdbec0 [ID=-3]

With: 0x2fe1510: i32 = setcc 0x2fe1210, 0x2fd48a0, 0x2fdbfc0 [ORD=41] [ID=-3]

Optimized type-legalized selection DAG: BB#1 'startup_fuel_valves3:startup_fuel_valves3.if.else'
SelectionDAG has 11 nodes:
  0x2fb6da8: ch = EntryToken [ORD=40] [ID=-3]

      0x2fb6da8: <multiple use>
          0x2fb6da8: <multiple use>
          0x2fd4ea0: i32 = FrameIndex<2> [ORD=40] [ID=-3]

          0x2fe1b10: i32 = undef [ORD=40] [ID=-3]

        0x2fe1210: f32,ch = load 0x2fb6da8, 0x2fd4ea0, 0x2fe1b10<LD4[%3]> [ORD=40] [ID=-3]

        0x2fd48a0: f32 = ConstantFP<4.000000e+03> [ORD=41] [ID=-3]

        0x2fdbfc0: ch = setolt [ORD=41] [ID=-3]

      0x2fe1510: i32 = setcc 0x2fe1210, 0x2fd48a0, 0x2fdbfc0 [ORD=41] [ID=-3]

      0x2fdc0c0: ch = BasicBlock<startup_fuel_valves3.if.end26 0x2fe2ab0> [ID=-3]

    0x2fe99e0: ch = brcond 0x2fb6da8, 0x2fe1510, 0x2fdc0c0 [ID=-3]

    0x2fe90e0: ch = BasicBlock<startup_fuel_valves3.if.else7 0x2fe2740> [ID=-3]

  0x2fe95e0: ch = br 0x2fe99e0, 0x2fe90e0 [ID=-3]


Legalized selection DAG: BB#1 'startup_fuel_valves3:startup_fuel_valves3.if.else'
SelectionDAG has 11 nodes:
  0x2fb6da8: ch = EntryToken [ORD=40] [ID=0]

      0x2fb6da8: <multiple use>
          0x2fb6da8: <multiple use>
          0x2fd4ea0: i32 = FrameIndex<2> [ORD=40] [ID=1]

          0x2fe1b10: i32 = undef [ORD=40] [ID=2]

        0x2fe1210: f32,ch = load 0x2fb6da8, 0x2fd4ea0, 0x2fe1b10<LD4[%3]> [ORD=40] [ID=7]

        0x2fdbec0: i32 = Constant<1165623296>

        0x2fdbfc0: ch = setolt [ORD=41] [ID=4]

      0x2fe1510: i32 = setcc 0x2fe1210, 0x2fdbec0, 0x2fdbfc0 [ORD=41] [ID=8]

      0x2fdc0c0: ch = BasicBlock<startup_fuel_valves3.if.end26 0x2fe2ab0> [ID=5]

    0x2fe99e0: ch = brcond 0x2fb6da8, 0x2fe1510, 0x2fdc0c0 [ID=9]

    0x2fe90e0: ch = BasicBlock<startup_fuel_valves3.if.else7 0x2fe2740> [ID=6]

  0x2fe95e0: ch = br 0x2fe99e0, 0x2fe90e0 [ID=10]


Optimized legalized selection DAG: BB#1 'startup_fuel_valves3:startup_fuel_valves3.if.else'
SelectionDAG has 11 nodes:
  0x2fb6da8: ch = EntryToken [ORD=40] [ID=0]

      0x2fb6da8: <multiple use>
          0x2fb6da8: <multiple use>
          0x2fd4ea0: i32 = FrameIndex<2> [ORD=40] [ID=1]

          0x2fe1b10: i32 = undef [ORD=40] [ID=2]

        0x2fe1210: f32,ch = load 0x2fb6da8, 0x2fd4ea0, 0x2fe1b10<LD4[%3]> [ORD=40] [ID=7]

        0x2fdbec0: i32 = Constant<1165623296>

        0x2fdbfc0: ch = setolt [ORD=41] [ID=4]

      0x2fe1510: i32 = setcc 0x2fe1210, 0x2fdbec0, 0x2fdbfc0 [ORD=41] [ID=8]

      0x2fdc0c0: ch = BasicBlock<startup_fuel_valves3.if.end26 0x2fe2ab0> [ID=5]

    0x2fe99e0: ch = brcond 0x2fb6da8, 0x2fe1510, 0x2fdc0c0 [ID=9]

    0x2fe90e0: ch = BasicBlock<startup_fuel_valves3.if.else7 0x2fe2740> [ID=6]

  0x2fe95e0: ch = br 0x2fe99e0, 0x2fe90e0 [ID=10]


===== Instruction selection begins: BB#1 'startup_fuel_valves3.if.else'
ISEL: Starting pattern match on root node: 0x2fe95e0: ch = br 0x2fe99e0, 0x2fe90e0 [ID=10]

  Initial Opcode index to 1938
  Morphed node: 0x2fe95e0: ch = JAL 0x2fe90e0, 0x2fe99e0

ISEL: Match complete!
=> 0x2fe95e0: ch = JAL 0x2fe90e0, 0x2fe99e0

ISEL: Starting pattern match on root node: 0x2fe99e0: ch = brcond 0x2fb6da8, 0x2fe1510, 0x2fdc0c0 [ID=9]

  Initial Opcode index to 1439
  Match failed at index 1449
  Continuing at 1676
  Morphed node: 0x2fe99e0: ch = BNE 0x2fdc0c0, 0x2fe1510, 0x2fd48a0, 0x2fb6da8

ISEL: Match complete!
=> 0x2fe99e0: ch = BNE 0x2fdc0c0, 0x2fe1510, 0x2fd48a0, 0x2fb6da8

ISEL: Starting pattern match on root node: 0x2fe1510: i32 = setcc 0x2fe1210, 0x2fdbec0, 0x2fdbfc0 [ORD=41] [ID=8]

  Initial Opcode index to 642
  Match failed at index 651
  Continuing at 688
  Match failed at index 690
  Continuing at 899
  Skipped scope entry (due to false predicate) at index 908, continuing at 920
  Morphed node: 0x2fe1510: i32 = FLT_S 0x2fdbec0, 0x2fe1210 [ORD=41]

ISEL: Match complete!
=> 0x2fe1510: i32 = FLT_S 0x2fdbec0, 0x2fe1210 [ORD=41]

ISEL: Starting pattern match on root node: 0x2fe1210: f32,ch = load 0x2fb6da8, 0x2fd4ea0, 0x2fe1b10<LD4[%3]> [ORD=40] [ID=7]

  Initial Opcode index to 5
  TypeSwitch[f32] from 10 to 159
  Morphed node: 0x2fe1210: f32,ch = FLW 0x2fd4ea0, 0x2fdbfc0, 0x2fb6da8<Mem:LD4[%3]> [ORD=40]

ISEL: Match complete!
=> 0x2fe1210: f32,ch = FLW 0x2fd4ea0, 0x2fdbfc0, 0x2fb6da8<Mem:LD4[%3]> [ORD=40]

ISEL: Starting pattern match on root node: 0x2fdbec0: i32 = Constant<1165623296> [ID=6]

  Initial Opcode index to 1226
comparing 0 and 1165623296 and returning value:0
  Skipped scope entry (due to false predicate) at index 1228, continuing at 1236
  Skipped scope entry (due to false predicate) at index 1240, continuing at 1256
  Morphed node: 0x2fdbec0: i32 = ADDI 0x2fd48a0, 0x2fe1b10

ISEL: Match complete!
=> 0x2fdbec0: i32 = ADDI 0x2fd48a0, 0x2fe1b10

=> 0x2fe90e0: ch = BasicBlock<startup_fuel_valves3.if.else7 0x2fe2740>

=> 0x2fdc0c0: ch = BasicBlock<startup_fuel_valves3.if.end26 0x2fe2ab0>

=> 0x2fb6da8: ch = EntryToken [ORD=40]

===== Instruction selection ends:
Selected selection DAG: BB#1 'startup_fuel_valves3:startup_fuel_valves3.if.else'
SelectionDAG has 14 nodes:
  0x2fb6da8: ch = EntryToken [ORD=40]

  0x2fd48a0: i32 = Register %zero

    0x2fe90e0: ch = BasicBlock<startup_fuel_valves3.if.else7 0x2fe2740>

      0x2fdc0c0: ch = BasicBlock<startup_fuel_valves3.if.end26 0x2fe2ab0>

          0x2fd48a0: <multiple use>
          0x2fe1b10: i32 = TargetConstant<1165623296>

        0x2fdbec0: i32 = ADDI 0x2fd48a0, 0x2fe1b10

            0x2fe9be0: i32 = Register %t5

            0x2fd4ca0: i32 = TargetFrameIndex<2>

          0x2fd4ea0: i32 = ADDI 0x2fe9be0, 0x2fd4ca0 [ORD=40]

          0x2fdbfc0: i32 = TargetConstant<0>

          0x2fb6da8: <multiple use>
        0x2fe1210: f32,ch = FLW 0x2fd4ea0, 0x2fdbfc0, 0x2fb6da8<Mem:LD4[%3]> [ORD=40]

      0x2fe1510: i32 = FLT_S 0x2fdbec0, 0x2fe1210 [ORD=41]

      0x2fd48a0: <multiple use>
      0x2fb6da8: <multiple use>
    0x2fe99e0: ch = BNE 0x2fdc0c0, 0x2fe1510, 0x2fd48a0, 0x2fb6da8

  0x2fe95e0: ch = JAL 0x2fe90e0, 0x2fe99e0


********** List Scheduling BB#1 'startup_fuel_valves3.if.else' **********
SU(0): 0x2fe95e0: ch = JAL 0x2fe90e0, 0x2fe99e0 [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x2fe99e0: ch = BNE 0x2fdc0c0, 0x2fe1510, 0x2fd48a0, 0x2fb6da8 [ID=1]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x2fe1510: i32 = FLT_S 0x2fdbec0, 0x2fe1210 [ORD=41] [ID=2]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(5): Latency=1
   val SU(3): Latency=1
  Successors:
   val SU(1): Latency=1

SU(3): 0x2fe1210: f32,ch = FLW 0x2fd4ea0, 0x2fdbfc0, 0x2fb6da8<Mem:LD4[%3]> [ORD=40] [ID=3]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(4): Latency=1
  Successors:
   val SU(2): Latency=1

SU(4): 0x2fd4ea0: i32 = ADDI 0x2fe9be0, 0x2fd4ca0 [ORD=40] [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(3): Latency=1

SU(5): 0x2fdbec0: i32 = ADDI 0x2fd48a0, 0x2fe1b10 [ID=5]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(2): Latency=1


Examining Available:
Height 0: SU(0): 0x2fe95e0: ch = JAL 0x2fe90e0, 0x2fe99e0 [ID=0]


*** Scheduling [0]: SU(0): 0x2fe95e0: ch = JAL 0x2fe90e0, 0x2fe99e0 [ID=0]


Examining Available:
Height 1: SU(1): 0x2fe99e0: ch = BNE 0x2fdc0c0, 0x2fe1510, 0x2fd48a0, 0x2fb6da8 [ID=1]


*** Scheduling [1]: SU(1): 0x2fe99e0: ch = BNE 0x2fdc0c0, 0x2fe1510, 0x2fd48a0, 0x2fb6da8 [ID=1]


Examining Available:
Height 2: SU(2): 0x2fe1510: i32 = FLT_S 0x2fdbec0, 0x2fe1210 [ORD=41] [ID=2]


*** Scheduling [2]: SU(2): 0x2fe1510: i32 = FLT_S 0x2fdbec0, 0x2fe1210 [ORD=41] [ID=2]


Examining Available:
Height 3: SU(5): 0x2fdbec0: i32 = ADDI 0x2fd48a0, 0x2fe1b10 [ID=5]

Height 3: SU(3): 0x2fe1210: f32,ch = FLW 0x2fd4ea0, 0x2fdbfc0, 0x2fb6da8<Mem:LD4[%3]> [ORD=40] [ID=3]


*** Scheduling [3]: SU(5): 0x2fdbec0: i32 = ADDI 0x2fd48a0, 0x2fe1b10 [ID=5]


Examining Available:
Height 3: SU(3): 0x2fe1210: f32,ch = FLW 0x2fd4ea0, 0x2fdbfc0, 0x2fb6da8<Mem:LD4[%3]> [ORD=40] [ID=3]


*** Scheduling [4]: SU(3): 0x2fe1210: f32,ch = FLW 0x2fd4ea0, 0x2fdbfc0, 0x2fb6da8<Mem:LD4[%3]> [ORD=40] [ID=3]


Examining Available:
Height 5: SU(4): 0x2fd4ea0: i32 = ADDI 0x2fe9be0, 0x2fd4ca0 [ORD=40] [ID=4]


*** Scheduling [5]: SU(4): 0x2fd4ea0: i32 = ADDI 0x2fe9be0, 0x2fd4ca0 [ORD=40] [ID=4]

*** Final schedule ***
SU(4): 0x2fd4ea0: i32 = ADDI 0x2fe9be0, 0x2fd4ca0 [ORD=40] [ID=4]

SU(3): 0x2fe1210: f32,ch = FLW 0x2fd4ea0, 0x2fdbfc0, 0x2fb6da8<Mem:LD4[%3]> [ORD=40] [ID=3]

SU(5): 0x2fdbec0: i32 = ADDI 0x2fd48a0, 0x2fe1b10 [ID=5]

SU(2): 0x2fe1510: i32 = FLT_S 0x2fdbec0, 0x2fe1210 [ORD=41] [ID=2]

SU(1): 0x2fe99e0: ch = BNE 0x2fdc0c0, 0x2fe1510, 0x2fd48a0, 0x2fb6da8 [ID=1]

SU(0): 0x2fe95e0: ch = JAL 0x2fe90e0, 0x2fe99e0 [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %14 = load float* %3, align 4
I was here to add   %3 = alloca float, align 4
with I type floatand sd value :0x2fd4ca0: i32 = FrameIndex<2>
new load?0x2fdbfc0: f32,ch = load 0x2fb6da8, 0x2fd4ca0, 0x2fe1b10<LD4[%3]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x2fe9be0: i32 = Constant<0>

    0x2fb6da8: ch = EntryToken

    0x2fd4ca0: i32 = FrameIndex<2>

    0x2fe1b10: i32 = undef

  0x2fdbfc0: f32,ch = load 0x2fb6da8, 0x2fd4ca0, 0x2fe1b10<LD4[%3]>

  0x2fb6da8: ch = EntryToken


I was here to add float 1.250000e+04
Initial selection DAG: BB#2 'startup_fuel_valves3:startup_fuel_valves3.if.else7'
SelectionDAG has 14 nodes:
  0x2fb6da8: ch = EntryToken [ORD=42]

  0x2fe9be0: i32 = Constant<0>

      0x2fb6da8: <multiple use>
            0x2fb6da8: <multiple use>
            0x2fd4ca0: i32 = FrameIndex<2> [ORD=42]

            0x2fe1b10: i32 = undef [ORD=42]

          0x2fdbfc0: f32,ch = load 0x2fb6da8, 0x2fd4ca0, 0x2fe1b10<LD4[%3]> [ORD=42]

          0x2fd48a0: f32 = ConstantFP<1.250000e+04> [ORD=43]

          0x2fe95e0: ch = setolt [ORD=43]

        0x2fe99e0: i1 = setcc 0x2fdbfc0, 0x2fd48a0, 0x2fe95e0 [ORD=43]

        0x2fe1510: i1 = Constant<-1>

      0x2fe1210: i1 = xor 0x2fe99e0, 0x2fe1510

      0x2fdbec0: ch = BasicBlock<startup_fuel_valves3.if.else22 0x2fe2a00>

    0x2fe90e0: ch = brcond 0x2fb6da8, 0x2fe1210, 0x2fdbec0

    0x2fdc0c0: ch = BasicBlock<startup_fuel_valves3.if.then9 0x2fe27f0>

  0x2fd4ea0: ch = br 0x2fe90e0, 0x2fdc0c0



Replacing.3 0x2fe1210: i1 = xor 0x2fe99e0, 0x2fe1510

With: 0x2fe93e0: i1 = setcc 0x2fdbfc0, 0x2fd48a0, 0x2fe9de0

Optimized lowered selection DAG: BB#2 'startup_fuel_valves3:startup_fuel_valves3.if.else7'
SelectionDAG has 11 nodes:
  0x2fb6da8: ch = EntryToken [ORD=42]

      0x2fb6da8: <multiple use>
          0x2fb6da8: <multiple use>
          0x2fd4ca0: i32 = FrameIndex<2> [ORD=42]

          0x2fe1b10: i32 = undef [ORD=42]

        0x2fdbfc0: f32,ch = load 0x2fb6da8, 0x2fd4ca0, 0x2fe1b10<LD4[%3]> [ORD=42]

        0x2fd48a0: f32 = ConstantFP<1.250000e+04> [ORD=43]

        0x2fe9de0: ch = setuge

      0x2fe93e0: i1 = setcc 0x2fdbfc0, 0x2fd48a0, 0x2fe9de0

      0x2fdbec0: ch = BasicBlock<startup_fuel_valves3.if.else22 0x2fe2a00>

    0x2fe90e0: ch = brcond 0x2fb6da8, 0x2fe93e0, 0x2fdbec0

    0x2fdc0c0: ch = BasicBlock<startup_fuel_valves3.if.then9 0x2fe27f0>

  0x2fd4ea0: ch = br 0x2fe90e0, 0x2fdc0c0


Legally typed node: 0x2fe9de0: ch = setuge [ID=0]

Legally typed node: 0x2fdc0c0: ch = BasicBlock<startup_fuel_valves3.if.then9 0x2fe27f0> [ID=0]

Legally typed node: 0x2fdbec0: ch = BasicBlock<startup_fuel_valves3.if.else22 0x2fe2a00> [ID=0]

Legally typed node: 0x2fd48a0: f32 = ConstantFP<1.250000e+04> [ORD=43] [ID=0]

Legally typed node: 0x2fe1b10: i32 = undef [ORD=42] [ID=0]

Legally typed node: 0x2fd4ca0: i32 = FrameIndex<2> [ORD=42] [ID=0]

Legally typed node: 0x2fb6da8: ch = EntryToken [ORD=42] [ID=0]

Legally typed node: 0x2fdbfc0: f32,ch = load 0x2fb6da8, 0x2fd4ca0, 0x2fe1b10<LD4[%3]> [ORD=42] [ID=0]

Promote integer result: 0x2fe93e0: i1 = setcc 0x2fdbfc0, 0x2fd48a0, 0x2fe9de0 [ID=0]

Promote integer operand: 0x2fe90e0: ch = brcond 0x2fb6da8, 0x2fe93e0, 0x2fdbec0 [ID=0]

Promote integer operand: 0x2fe95e0: i32 = zero_extend 0x2fe93e0 [ID=0]

Legally typed node: 0x2fe99e0: i32 = Constant<1> [ID=0]

Legally typed node: 0x2fe9be0: i32 = setcc 0x2fdbfc0, 0x2fd48a0, 0x2fe9de0 [ID=0]

Legally typed node: 0x2fe1510: i32 = and 0x2fe9be0, 0x2fe99e0 [ID=0]

Legally typed node: 0x2fe90e0: ch = brcond 0x2fb6da8, 0x2fe1510, 0x2fdbec0 [ID=0]

Legally typed node: 0x2fd4ea0: ch = br 0x2fe90e0, 0x2fdc0c0 [ID=0]

Legally typed node: 0x7fff9b4748f0: ch = handlenode 0x2fd4ea0 [ID=0]

Type-legalized selection DAG: BB#2 'startup_fuel_valves3:startup_fuel_valves3.if.else7'
SelectionDAG has 13 nodes:
  0x2fb6da8: ch = EntryToken [ORD=42] [ID=-3]

      0x2fb6da8: <multiple use>
            0x2fb6da8: <multiple use>
            0x2fd4ca0: i32 = FrameIndex<2> [ORD=42] [ID=-3]

            0x2fe1b10: i32 = undef [ORD=42] [ID=-3]

          0x2fdbfc0: f32,ch = load 0x2fb6da8, 0x2fd4ca0, 0x2fe1b10<LD4[%3]> [ORD=42] [ID=-3]

          0x2fd48a0: f32 = ConstantFP<1.250000e+04> [ORD=43] [ID=-3]

          0x2fe9de0: ch = setuge [ID=-3]

        0x2fe9be0: i32 = setcc 0x2fdbfc0, 0x2fd48a0, 0x2fe9de0 [ID=-3]

        0x2fe99e0: i32 = Constant<1> [ID=-3]

      0x2fe1510: i32 = and 0x2fe9be0, 0x2fe99e0 [ID=-3]

      0x2fdbec0: ch = BasicBlock<startup_fuel_valves3.if.else22 0x2fe2a00> [ID=-3]

    0x2fe90e0: ch = brcond 0x2fb6da8, 0x2fe1510, 0x2fdbec0 [ID=-3]

    0x2fdc0c0: ch = BasicBlock<startup_fuel_valves3.if.then9 0x2fe27f0> [ID=-3]

  0x2fd4ea0: ch = br 0x2fe90e0, 0x2fdc0c0 [ID=-3]



Replacing.2 0x2fe1510: i32 = and 0x2fe9be0, 0x2fe99e0 [ID=-3]

With: 0x2fe9be0: i32 = setcc 0x2fdbfc0, 0x2fd48a0, 0x2fe9de0 [ID=-3]

Optimized type-legalized selection DAG: BB#2 'startup_fuel_valves3:startup_fuel_valves3.if.else7'
SelectionDAG has 11 nodes:
  0x2fb6da8: ch = EntryToken [ORD=42] [ID=-3]

      0x2fb6da8: <multiple use>
          0x2fb6da8: <multiple use>
          0x2fd4ca0: i32 = FrameIndex<2> [ORD=42] [ID=-3]

          0x2fe1b10: i32 = undef [ORD=42] [ID=-3]

        0x2fdbfc0: f32,ch = load 0x2fb6da8, 0x2fd4ca0, 0x2fe1b10<LD4[%3]> [ORD=42] [ID=-3]

        0x2fd48a0: f32 = ConstantFP<1.250000e+04> [ORD=43] [ID=-3]

        0x2fe9de0: ch = setuge [ID=-3]

      0x2fe9be0: i32 = setcc 0x2fdbfc0, 0x2fd48a0, 0x2fe9de0 [ID=-3]

      0x2fdbec0: ch = BasicBlock<startup_fuel_valves3.if.else22 0x2fe2a00> [ID=-3]

    0x2fe90e0: ch = brcond 0x2fb6da8, 0x2fe9be0, 0x2fdbec0 [ID=-3]

    0x2fdc0c0: ch = BasicBlock<startup_fuel_valves3.if.then9 0x2fe27f0> [ID=-3]

  0x2fd4ea0: ch = br 0x2fe90e0, 0x2fdc0c0 [ID=-3]


Legalized selection DAG: BB#2 'startup_fuel_valves3:startup_fuel_valves3.if.else7'
SelectionDAG has 11 nodes:
  0x2fb6da8: ch = EntryToken [ORD=42] [ID=0]

      0x2fb6da8: <multiple use>
          0x2fb6da8: <multiple use>
          0x2fd4ca0: i32 = FrameIndex<2> [ORD=42] [ID=1]

          0x2fe1b10: i32 = undef [ORD=42] [ID=2]

        0x2fdbfc0: f32,ch = load 0x2fb6da8, 0x2fd4ca0, 0x2fe1b10<LD4[%3]> [ORD=42] [ID=7]

        0x2fe99e0: i32 = Constant<1178816512>

        0x2fe9de0: ch = setuge [ID=6]

      0x2fe9be0: i32 = setcc 0x2fdbfc0, 0x2fe99e0, 0x2fe9de0 [ID=8]

      0x2fdbec0: ch = BasicBlock<startup_fuel_valves3.if.else22 0x2fe2a00> [ID=4]

    0x2fe90e0: ch = brcond 0x2fb6da8, 0x2fe9be0, 0x2fdbec0 [ID=9]

    0x2fdc0c0: ch = BasicBlock<startup_fuel_valves3.if.then9 0x2fe27f0> [ID=5]

  0x2fd4ea0: ch = br 0x2fe90e0, 0x2fdc0c0 [ID=10]



Replacing.3 0x2fe9be0: i32 = setcc 0x2fdbfc0, 0x2fe99e0, 0x2fe9de0 [ID=8]

With: 0x2fe93e0: i32 = setcc 0x2fdbfc0, 0x2fd48a0, 0x2fe1510

Optimized legalized selection DAG: BB#2 'startup_fuel_valves3:startup_fuel_valves3.if.else7'
SelectionDAG has 11 nodes:
  0x2fb6da8: ch = EntryToken [ORD=42] [ID=0]

      0x2fb6da8: <multiple use>
          0x2fb6da8: <multiple use>
          0x2fd4ca0: i32 = FrameIndex<2> [ORD=42] [ID=1]

          0x2fe1b10: i32 = undef [ORD=42] [ID=2]

        0x2fdbfc0: f32,ch = load 0x2fb6da8, 0x2fd4ca0, 0x2fe1b10<LD4[%3]> [ORD=42] [ID=7]

        0x2fd48a0: i32 = Constant<1178816511>

        0x2fe1510: ch = setugt

      0x2fe93e0: i32 = setcc 0x2fdbfc0, 0x2fd48a0, 0x2fe1510

      0x2fdbec0: ch = BasicBlock<startup_fuel_valves3.if.else22 0x2fe2a00> [ID=4]

    0x2fe90e0: ch = brcond 0x2fb6da8, 0x2fe93e0, 0x2fdbec0 [ID=9]

    0x2fdc0c0: ch = BasicBlock<startup_fuel_valves3.if.then9 0x2fe27f0> [ID=5]

  0x2fd4ea0: ch = br 0x2fe90e0, 0x2fdc0c0 [ID=10]


===== Instruction selection begins: BB#2 'startup_fuel_valves3.if.else7'
ISEL: Starting pattern match on root node: 0x2fd4ea0: ch = br 0x2fe90e0, 0x2fdc0c0 [ID=10]

  Initial Opcode index to 1938
  Morphed node: 0x2fd4ea0: ch = JAL 0x2fdc0c0, 0x2fe90e0

ISEL: Match complete!
=> 0x2fd4ea0: ch = JAL 0x2fdc0c0, 0x2fe90e0

ISEL: Starting pattern match on root node: 0x2fe90e0: ch = brcond 0x2fb6da8, 0x2fe93e0, 0x2fdbec0 [ID=9]

  Initial Opcode index to 1439
  Match failed at index 1449
  Continuing at 1676
  Morphed node: 0x2fe90e0: ch = BNE 0x2fdbec0, 0x2fe93e0, 0x2fe99e0, 0x2fb6da8

ISEL: Match complete!
=> 0x2fe90e0: ch = BNE 0x2fdbec0, 0x2fe93e0, 0x2fe99e0, 0x2fb6da8

ISEL: Starting pattern match on root node: 0x2fe93e0: i32 = setcc 0x2fdbfc0, 0x2fd48a0, 0x2fe1510 [ID=8]

  Initial Opcode index to 642
  Match failed at index 651
  Continuing at 688
  Match failed at index 690
  Continuing at 899
  Skipped scope entry (due to false predicate) at index 908, continuing at 920
  Skipped scope entry (due to false predicate) at index 921, continuing at 933
  Skipped scope entry (due to false predicate) at index 934, continuing at 946
  Skipped scope entry (due to false predicate) at index 947, continuing at 959
  Skipped scope entry (due to false predicate) at index 960, continuing at 972
  Skipped scope entry (due to false predicate) at index 973, continuing at 985
  Skipped scope entry (due to false predicate) at index 986, continuing at 998
  Morphed node: 0x2fe93e0: i32 = FULT_S 0x2fdbfc0, 0x2fd48a0

ISEL: Match complete!
=> 0x2fe93e0: i32 = FULT_S 0x2fdbfc0, 0x2fd48a0

ISEL: Starting pattern match on root node: 0x2fdbfc0: f32,ch = load 0x2fb6da8, 0x2fd4ca0, 0x2fe1b10<LD4[%3]> [ORD=42] [ID=7]

  Initial Opcode index to 5
  TypeSwitch[f32] from 10 to 159
  Morphed node: 0x2fdbfc0: f32,ch = FLW 0x2fd4ca0, 0x2fe1510, 0x2fb6da8<Mem:LD4[%3]> [ORD=42]

ISEL: Match complete!
=> 0x2fdbfc0: f32,ch = FLW 0x2fd4ca0, 0x2fe1510, 0x2fb6da8<Mem:LD4[%3]> [ORD=42]

ISEL: Starting pattern match on root node: 0x2fd48a0: i32 = Constant<1178816511> [ID=5]

  Initial Opcode index to 1226
comparing 0 and 1178816511 and returning value:0
  Skipped scope entry (due to false predicate) at index 1228, continuing at 1236
  Skipped scope entry (due to false predicate) at index 1240, continuing at 1256
  Morphed node: 0x2fd48a0: i32 = ADDI 0x2fe99e0, 0x2fe1b10

ISEL: Match complete!
=> 0x2fd48a0: i32 = ADDI 0x2fe99e0, 0x2fe1b10

=> 0x2fdc0c0: ch = BasicBlock<startup_fuel_valves3.if.then9 0x2fe27f0>

=> 0x2fdbec0: ch = BasicBlock<startup_fuel_valves3.if.else22 0x2fe2a00>

=> 0x2fb6da8: ch = EntryToken [ORD=42]

===== Instruction selection ends:
Selected selection DAG: BB#2 'startup_fuel_valves3:startup_fuel_valves3.if.else7'
SelectionDAG has 14 nodes:
  0x2fb6da8: ch = EntryToken [ORD=42]

  0x2fe99e0: i32 = Register %zero

    0x2fdc0c0: ch = BasicBlock<startup_fuel_valves3.if.then9 0x2fe27f0>

      0x2fdbec0: ch = BasicBlock<startup_fuel_valves3.if.else22 0x2fe2a00>

            0x2fe9de0: i32 = Register %t5

            0x2fe9be0: i32 = TargetFrameIndex<2>

          0x2fd4ca0: i32 = ADDI 0x2fe9de0, 0x2fe9be0 [ORD=42]

          0x2fe1510: i32 = TargetConstant<0>

          0x2fb6da8: <multiple use>
        0x2fdbfc0: f32,ch = FLW 0x2fd4ca0, 0x2fe1510, 0x2fb6da8<Mem:LD4[%3]> [ORD=42]

          0x2fe99e0: <multiple use>
          0x2fe1b10: i32 = TargetConstant<1178816511>

        0x2fd48a0: i32 = ADDI 0x2fe99e0, 0x2fe1b10

      0x2fe93e0: i32 = FULT_S 0x2fdbfc0, 0x2fd48a0

      0x2fe99e0: <multiple use>
      0x2fb6da8: <multiple use>
    0x2fe90e0: ch = BNE 0x2fdbec0, 0x2fe93e0, 0x2fe99e0, 0x2fb6da8

  0x2fd4ea0: ch = JAL 0x2fdc0c0, 0x2fe90e0


********** List Scheduling BB#2 'startup_fuel_valves3.if.else7' **********
SU(0): 0x2fd4ea0: ch = JAL 0x2fdc0c0, 0x2fe90e0 [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x2fe90e0: ch = BNE 0x2fdbec0, 0x2fe93e0, 0x2fe99e0, 0x2fb6da8 [ID=1]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x2fe93e0: i32 = FULT_S 0x2fdbfc0, 0x2fd48a0 [ID=2]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(4): Latency=1
   val SU(3): Latency=1
  Successors:
   val SU(1): Latency=1

SU(3): 0x2fd48a0: i32 = ADDI 0x2fe99e0, 0x2fe1b10 [ID=3]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(2): Latency=1

SU(4): 0x2fdbfc0: f32,ch = FLW 0x2fd4ca0, 0x2fe1510, 0x2fb6da8<Mem:LD4[%3]> [ORD=42] [ID=4]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(5): Latency=1
  Successors:
   val SU(2): Latency=1

SU(5): 0x2fd4ca0: i32 = ADDI 0x2fe9de0, 0x2fe9be0 [ORD=42] [ID=5]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(4): Latency=1


Examining Available:
Height 0: SU(0): 0x2fd4ea0: ch = JAL 0x2fdc0c0, 0x2fe90e0 [ID=0]


*** Scheduling [0]: SU(0): 0x2fd4ea0: ch = JAL 0x2fdc0c0, 0x2fe90e0 [ID=0]


Examining Available:
Height 1: SU(1): 0x2fe90e0: ch = BNE 0x2fdbec0, 0x2fe93e0, 0x2fe99e0, 0x2fb6da8 [ID=1]


*** Scheduling [1]: SU(1): 0x2fe90e0: ch = BNE 0x2fdbec0, 0x2fe93e0, 0x2fe99e0, 0x2fb6da8 [ID=1]


Examining Available:
Height 2: SU(2): 0x2fe93e0: i32 = FULT_S 0x2fdbfc0, 0x2fd48a0 [ID=2]


*** Scheduling [2]: SU(2): 0x2fe93e0: i32 = FULT_S 0x2fdbfc0, 0x2fd48a0 [ID=2]


Examining Available:
Height 3: SU(3): 0x2fd48a0: i32 = ADDI 0x2fe99e0, 0x2fe1b10 [ID=3]

Height 3: SU(4): 0x2fdbfc0: f32,ch = FLW 0x2fd4ca0, 0x2fe1510, 0x2fb6da8<Mem:LD4[%3]> [ORD=42] [ID=4]


*** Scheduling [3]: SU(3): 0x2fd48a0: i32 = ADDI 0x2fe99e0, 0x2fe1b10 [ID=3]


Examining Available:
Height 3: SU(4): 0x2fdbfc0: f32,ch = FLW 0x2fd4ca0, 0x2fe1510, 0x2fb6da8<Mem:LD4[%3]> [ORD=42] [ID=4]


*** Scheduling [4]: SU(4): 0x2fdbfc0: f32,ch = FLW 0x2fd4ca0, 0x2fe1510, 0x2fb6da8<Mem:LD4[%3]> [ORD=42] [ID=4]


Examining Available:
Height 5: SU(5): 0x2fd4ca0: i32 = ADDI 0x2fe9de0, 0x2fe9be0 [ORD=42] [ID=5]


*** Scheduling [5]: SU(5): 0x2fd4ca0: i32 = ADDI 0x2fe9de0, 0x2fe9be0 [ORD=42] [ID=5]

*** Final schedule ***
SU(5): 0x2fd4ca0: i32 = ADDI 0x2fe9de0, 0x2fe9be0 [ORD=42] [ID=5]

SU(4): 0x2fdbfc0: f32,ch = FLW 0x2fd4ca0, 0x2fe1510, 0x2fb6da8<Mem:LD4[%3]> [ORD=42] [ID=4]

SU(3): 0x2fd48a0: i32 = ADDI 0x2fe99e0, 0x2fe1b10 [ID=3]

SU(2): 0x2fe93e0: i32 = FULT_S 0x2fdbfc0, 0x2fd48a0 [ID=2]

SU(1): 0x2fe90e0: ch = BNE 0x2fdbec0, 0x2fe93e0, 0x2fe99e0, 0x2fb6da8 [ID=1]

SU(0): 0x2fd4ea0: ch = JAL 0x2fdc0c0, 0x2fe90e0 [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %31 = load i32** %2, align 4
I was here to add   %2 = alloca i32*, align 4
with I type i32*and sd value :0x2fe9be0: i32 = FrameIndex<1>
new load?0x2fe1510: i32,ch = load 0x2fb6da8, 0x2fe9be0, 0x2fe1b10<LD4[%2]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x2fe9de0: i32 = Constant<0>

    0x2fb6da8: ch = EntryToken

    0x2fe9be0: i32 = FrameIndex<1>

    0x2fe1b10: i32 = undef

  0x2fe1510: i32,ch = load 0x2fb6da8, 0x2fe9be0, 0x2fe1b10<LD4[%2]>

  0x2fb6da8: ch = EntryToken


store visit is after?  store i32 1, i32* %32, align 4
I was here to add i32 1
whats in dag after store?SelectionDAG has 10 nodes:
  0x2fe9de0: i32 = Constant<0>

  0x2fe1b10: i32 = undef [ORD=44]

    0x2fb6da8: ch = EntryToken [ORD=44]

    0x2fe9be0: i32 = FrameIndex<1> [ORD=44]

    0x2fe1b10: <multiple use>
  0x2fe1510: i32,ch = load 0x2fb6da8, 0x2fe9be0, 0x2fe1b10<LD4[%2]> [ORD=44]

  0x2fe99e0: i64 = Constant<12>

    0x2fe1510: <multiple use>
    0x2fe93e0: i32 = Constant<1> [ORD=46]

      0x2fe1510: <multiple use>
      0x2fd4ea0: i32 = Constant<12> [ORD=45]

    0x2fe90e0: i32 = add 0x2fe1510, 0x2fd4ea0 [ORD=45]

    0x2fe1b10: <multiple use>
  0x2fdbfc0: ch = store 0x2fe1510:1, 0x2fe93e0, 0x2fe90e0, 0x2fe1b10<ST4[%32]> [ORD=46]


visiting load instruction   %33 = load i32** %2, align 4
with I type i32*and sd value :0x2fe9be0: i32 = FrameIndex<1>
new load?0x2fd48a0: i32,ch = load 0x2fdbfc0, 0x2fe9be0, 0x2fe1b10<LD4[%2]>
dag after load is dealt with?SelectionDAG has 11 nodes:
  0x2fe9be0: i32 = FrameIndex<1> [ORD=44]

  0x2fe9de0: i32 = Constant<0>

  0x2fe1b10: i32 = undef [ORD=44]

    0x2fb6da8: ch = EntryToken [ORD=44]

    0x2fe9be0: <multiple use>
    0x2fe1b10: <multiple use>
  0x2fe1510: i32,ch = load 0x2fb6da8, 0x2fe9be0, 0x2fe1b10<LD4[%2]> [ORD=44]

  0x2fe99e0: i64 = Constant<12>

      0x2fe1510: <multiple use>
      0x2fe93e0: i32 = Constant<1> [ORD=46]

        0x2fe1510: <multiple use>
        0x2fd4ea0: i32 = Constant<12> [ORD=45]

      0x2fe90e0: i32 = add 0x2fe1510, 0x2fd4ea0 [ORD=45]

      0x2fe1b10: <multiple use>
    0x2fdbfc0: ch = store 0x2fe1510:1, 0x2fe93e0, 0x2fe90e0, 0x2fe1b10<ST4[%32]> [ORD=46]

    0x2fe9be0: <multiple use>
    0x2fe1b10: <multiple use>
  0x2fd48a0: i32,ch = load 0x2fdbfc0, 0x2fe9be0, 0x2fe1b10<LD4[%2]>

    0x2fe1510: <multiple use>
    0x2fe93e0: i32 = Constant<1> [ORD=46]

      0x2fe1510: <multiple use>
      0x2fd4ea0: i32 = Constant<12> [ORD=45]

    0x2fe90e0: i32 = add 0x2fe1510, 0x2fd4ea0 [ORD=45]

    0x2fe1b10: <multiple use>
  0x2fdbfc0: ch = store 0x2fe1510:1, 0x2fe93e0, 0x2fe90e0, 0x2fe1b10<ST4[%32]> [ORD=46]


store visit is after?  store i32 1, i32* %34, align 4
whats in dag after store?SelectionDAG has 15 nodes:
  0x2fe9be0: i32 = FrameIndex<1> [ORD=44]

  0x2fe9de0: i32 = Constant<0>

  0x2fe1b10: i32 = undef [ORD=44]

    0x2fb6da8: ch = EntryToken [ORD=44]

    0x2fe9be0: <multiple use>
    0x2fe1b10: <multiple use>
  0x2fe1510: i32,ch = load 0x2fb6da8, 0x2fe9be0, 0x2fe1b10<LD4[%2]> [ORD=44]

  0x2fe99e0: i64 = Constant<12>

  0x2fe93e0: i32 = Constant<1> [ORD=46]

      0x2fe1510: <multiple use>
      0x2fe93e0: <multiple use>
        0x2fe1510: <multiple use>
        0x2fd4ea0: i32 = Constant<12> [ORD=45]

      0x2fe90e0: i32 = add 0x2fe1510, 0x2fd4ea0 [ORD=45]

      0x2fe1b10: <multiple use>
    0x2fdbfc0: ch = store 0x2fe1510:1, 0x2fe93e0, 0x2fe90e0, 0x2fe1b10<ST4[%32]> [ORD=46]

    0x2fe9be0: <multiple use>
    0x2fe1b10: <multiple use>
  0x2fd48a0: i32,ch = load 0x2fdbfc0, 0x2fe9be0, 0x2fe1b10<LD4[%2]> [ORD=47]

  0x2fdc0c0: i64 = Constant<16>

    0x2fd48a0: <multiple use>
    0x2fe93e0: <multiple use>
      0x2fd48a0: <multiple use>
      0x2fdbec0: i32 = Constant<16> [ORD=48]

    0x2fd4ca0: i32 = add 0x2fd48a0, 0x2fdbec0 [ORD=48]

    0x2fe1b10: <multiple use>
  0x2fe95e0: ch = store 0x2fd48a0:1, 0x2fe93e0, 0x2fd4ca0, 0x2fe1b10<ST4[%34]> [ORD=49]


Initial selection DAG: BB#6 'startup_fuel_valves3:startup_fuel_valves3.if.else22'
SelectionDAG has 15 nodes:
  0x2fe9be0: i32 = FrameIndex<1> [ORD=44]

  0x2fe9de0: i32 = Constant<0>

  0x2fe1b10: i32 = undef [ORD=44]

    0x2fb6da8: ch = EntryToken [ORD=44]

    0x2fe9be0: <multiple use>
    0x2fe1b10: <multiple use>
  0x2fe1510: i32,ch = load 0x2fb6da8, 0x2fe9be0, 0x2fe1b10<LD4[%2]> [ORD=44]

  0x2fe99e0: i64 = Constant<12>

  0x2fe93e0: i32 = Constant<1> [ORD=46]

      0x2fe1510: <multiple use>
      0x2fe93e0: <multiple use>
        0x2fe1510: <multiple use>
        0x2fd4ea0: i32 = Constant<12> [ORD=45]

      0x2fe90e0: i32 = add 0x2fe1510, 0x2fd4ea0 [ORD=45]

      0x2fe1b10: <multiple use>
    0x2fdbfc0: ch = store 0x2fe1510:1, 0x2fe93e0, 0x2fe90e0, 0x2fe1b10<ST4[%32]> [ORD=46]

    0x2fe9be0: <multiple use>
    0x2fe1b10: <multiple use>
  0x2fd48a0: i32,ch = load 0x2fdbfc0, 0x2fe9be0, 0x2fe1b10<LD4[%2]> [ORD=47]

  0x2fdc0c0: i64 = Constant<16>

    0x2fd48a0: <multiple use>
    0x2fe93e0: <multiple use>
      0x2fd48a0: <multiple use>
      0x2fdbec0: i32 = Constant<16> [ORD=48]

    0x2fd4ca0: i32 = add 0x2fd48a0, 0x2fdbec0 [ORD=48]

    0x2fe1b10: <multiple use>
  0x2fe95e0: ch = store 0x2fd48a0:1, 0x2fe93e0, 0x2fd4ca0, 0x2fe1b10<ST4[%34]> [ORD=49]


Optimized lowered selection DAG: BB#6 'startup_fuel_valves3:startup_fuel_valves3.if.else22'
SelectionDAG has 12 nodes:
  0x2fe9be0: i32 = FrameIndex<1> [ORD=44]

  0x2fe1b10: i32 = undef [ORD=44]

    0x2fb6da8: ch = EntryToken [ORD=44]

    0x2fe9be0: <multiple use>
    0x2fe1b10: <multiple use>
  0x2fe1510: i32,ch = load 0x2fb6da8, 0x2fe9be0, 0x2fe1b10<LD4[%2]> [ORD=44]

  0x2fe93e0: i32 = Constant<1> [ORD=46]

      0x2fe1510: <multiple use>
      0x2fe93e0: <multiple use>
        0x2fe1510: <multiple use>
        0x2fd4ea0: i32 = Constant<12> [ORD=45]

      0x2fe90e0: i32 = add 0x2fe1510, 0x2fd4ea0 [ORD=45]

      0x2fe1b10: <multiple use>
    0x2fdbfc0: ch = store 0x2fe1510:1, 0x2fe93e0, 0x2fe90e0, 0x2fe1b10<ST4[%32]> [ORD=46]

    0x2fe9be0: <multiple use>
    0x2fe1b10: <multiple use>
  0x2fd48a0: i32,ch = load 0x2fdbfc0, 0x2fe9be0, 0x2fe1b10<LD4[%2]> [ORD=47]

    0x2fd48a0: <multiple use>
    0x2fe93e0: <multiple use>
      0x2fd48a0: <multiple use>
      0x2fdbec0: i32 = Constant<16> [ORD=48]

    0x2fd4ca0: i32 = add 0x2fd48a0, 0x2fdbec0 [ORD=48]

    0x2fe1b10: <multiple use>
  0x2fe95e0: ch = store 0x2fd48a0:1, 0x2fe93e0, 0x2fd4ca0, 0x2fe1b10<ST4[%34]> [ORD=49]


Legally typed node: 0x2fdbec0: i32 = Constant<16> [ORD=48] [ID=0]

Legally typed node: 0x2fe93e0: i32 = Constant<1> [ORD=46] [ID=0]

Legally typed node: 0x2fd4ea0: i32 = Constant<12> [ORD=45] [ID=0]

Legally typed node: 0x2fe1b10: i32 = undef [ORD=44] [ID=0]

Legally typed node: 0x2fe9be0: i32 = FrameIndex<1> [ORD=44] [ID=0]

Legally typed node: 0x2fb6da8: ch = EntryToken [ORD=44] [ID=0]

Legally typed node: 0x2fe1510: i32,ch = load 0x2fb6da8, 0x2fe9be0, 0x2fe1b10<LD4[%2]> [ORD=44] [ID=0]

Legally typed node: 0x2fe90e0: i32 = add 0x2fe1510, 0x2fd4ea0 [ORD=45] [ID=0]

Legally typed node: 0x2fdbfc0: ch = store 0x2fe1510:1, 0x2fe93e0, 0x2fe90e0, 0x2fe1b10<ST4[%32]> [ORD=46] [ID=0]

Legally typed node: 0x2fd48a0: i32,ch = load 0x2fdbfc0, 0x2fe9be0, 0x2fe1b10<LD4[%2]> [ORD=47] [ID=0]

Legally typed node: 0x2fd4ca0: i32 = add 0x2fd48a0, 0x2fdbec0 [ORD=48] [ID=0]

Legally typed node: 0x2fe95e0: ch = store 0x2fd48a0:1, 0x2fe93e0, 0x2fd4ca0, 0x2fe1b10<ST4[%34]> [ORD=49] [ID=0]

Legally typed node: 0x7fff9b4748f0: ch = handlenode 0x2fe95e0 [ID=0]

Type-legalized selection DAG: BB#6 'startup_fuel_valves3:startup_fuel_valves3.if.else22'
SelectionDAG has 12 nodes:
  0x2fe9be0: i32 = FrameIndex<1> [ORD=44] [ID=-3]

  0x2fe1b10: i32 = undef [ORD=44] [ID=-3]

    0x2fb6da8: ch = EntryToken [ORD=44] [ID=-3]

    0x2fe9be0: <multiple use>
    0x2fe1b10: <multiple use>
  0x2fe1510: i32,ch = load 0x2fb6da8, 0x2fe9be0, 0x2fe1b10<LD4[%2]> [ORD=44] [ID=-3]

  0x2fe93e0: i32 = Constant<1> [ORD=46] [ID=-3]

      0x2fe1510: <multiple use>
      0x2fe93e0: <multiple use>
        0x2fe1510: <multiple use>
        0x2fd4ea0: i32 = Constant<12> [ORD=45] [ID=-3]

      0x2fe90e0: i32 = add 0x2fe1510, 0x2fd4ea0 [ORD=45] [ID=-3]

      0x2fe1b10: <multiple use>
    0x2fdbfc0: ch = store 0x2fe1510:1, 0x2fe93e0, 0x2fe90e0, 0x2fe1b10<ST4[%32]> [ORD=46] [ID=-3]

    0x2fe9be0: <multiple use>
    0x2fe1b10: <multiple use>
  0x2fd48a0: i32,ch = load 0x2fdbfc0, 0x2fe9be0, 0x2fe1b10<LD4[%2]> [ORD=47] [ID=-3]

    0x2fd48a0: <multiple use>
    0x2fe93e0: <multiple use>
      0x2fd48a0: <multiple use>
      0x2fdbec0: i32 = Constant<16> [ORD=48] [ID=-3]

    0x2fd4ca0: i32 = add 0x2fd48a0, 0x2fdbec0 [ORD=48] [ID=-3]

    0x2fe1b10: <multiple use>
  0x2fe95e0: ch = store 0x2fd48a0:1, 0x2fe93e0, 0x2fd4ca0, 0x2fe1b10<ST4[%34]> [ORD=49] [ID=-3]


Legalized selection DAG: BB#6 'startup_fuel_valves3:startup_fuel_valves3.if.else22'
SelectionDAG has 12 nodes:
  0x2fe9be0: i32 = FrameIndex<1> [ORD=44] [ID=1]

  0x2fe1b10: i32 = undef [ORD=44] [ID=2]

  0x2fe93e0: i32 = Constant<1> [ORD=46] [ID=4]

    0x2fb6da8: ch = EntryToken [ORD=44] [ID=0]

    0x2fe9be0: <multiple use>
    0x2fe1b10: <multiple use>
  0x2fe1510: i32,ch = load 0x2fb6da8, 0x2fe9be0, 0x2fe1b10<LD4[%2]> [ORD=44] [ID=6]

      0x2fe1510: <multiple use>
      0x2fe93e0: <multiple use>
        0x2fe1510: <multiple use>
        0x2fd4ea0: i32 = Constant<12> [ORD=45] [ID=3]

      0x2fe90e0: i32 = add 0x2fe1510, 0x2fd4ea0 [ORD=45] [ID=7]

      0x2fe1b10: <multiple use>
    0x2fdbfc0: ch = store 0x2fe1510:1, 0x2fe93e0, 0x2fe90e0, 0x2fe1b10<ST4[%32]> [ORD=46] [ID=8]

    0x2fe9be0: <multiple use>
    0x2fe1b10: <multiple use>
  0x2fd48a0: i32,ch = load 0x2fdbfc0, 0x2fe9be0, 0x2fe1b10<LD4[%2]> [ORD=47] [ID=9]

    0x2fd48a0: <multiple use>
    0x2fe93e0: <multiple use>
      0x2fd48a0: <multiple use>
      0x2fdbec0: i32 = Constant<16> [ORD=48] [ID=5]

    0x2fd4ca0: i32 = add 0x2fd48a0, 0x2fdbec0 [ORD=48] [ID=10]

    0x2fe1b10: <multiple use>
  0x2fe95e0: ch = store 0x2fd48a0:1, 0x2fe93e0, 0x2fd4ca0, 0x2fe1b10<ST4[%34]> [ORD=49] [ID=11]


Optimized legalized selection DAG: BB#6 'startup_fuel_valves3:startup_fuel_valves3.if.else22'
SelectionDAG has 12 nodes:
  0x2fe9be0: i32 = FrameIndex<1> [ORD=44] [ID=1]

  0x2fe1b10: i32 = undef [ORD=44] [ID=2]

  0x2fe93e0: i32 = Constant<1> [ORD=46] [ID=4]

    0x2fb6da8: ch = EntryToken [ORD=44] [ID=0]

    0x2fe9be0: <multiple use>
    0x2fe1b10: <multiple use>
  0x2fe1510: i32,ch = load 0x2fb6da8, 0x2fe9be0, 0x2fe1b10<LD4[%2]> [ORD=44] [ID=6]

      0x2fe1510: <multiple use>
      0x2fe93e0: <multiple use>
        0x2fe1510: <multiple use>
        0x2fd4ea0: i32 = Constant<12> [ORD=45] [ID=3]

      0x2fe90e0: i32 = add 0x2fe1510, 0x2fd4ea0 [ORD=45] [ID=7]

      0x2fe1b10: <multiple use>
    0x2fdbfc0: ch = store 0x2fe1510:1, 0x2fe93e0, 0x2fe90e0, 0x2fe1b10<ST4[%32]> [ORD=46] [ID=8]

    0x2fe9be0: <multiple use>
    0x2fe1b10: <multiple use>
  0x2fd48a0: i32,ch = load 0x2fdbfc0, 0x2fe9be0, 0x2fe1b10<LD4[%2]> [ORD=47] [ID=9]

    0x2fd48a0: <multiple use>
    0x2fe93e0: <multiple use>
      0x2fd48a0: <multiple use>
      0x2fdbec0: i32 = Constant<16> [ORD=48] [ID=5]

    0x2fd4ca0: i32 = add 0x2fd48a0, 0x2fdbec0 [ORD=48] [ID=10]

    0x2fe1b10: <multiple use>
  0x2fe95e0: ch = store 0x2fd48a0:1, 0x2fe93e0, 0x2fd4ca0, 0x2fe1b10<ST4[%34]> [ORD=49] [ID=11]


===== Instruction selection begins: BB#6 'startup_fuel_valves3.if.else22'
ISEL: Starting pattern match on root node: 0x2fe95e0: ch = store 0x2fd48a0:1, 0x2fe93e0, 0x2fd4ca0, 0x2fe1b10<ST4[%34]> [ORD=49] [ID=11]

  Initial Opcode index to 178
  Morphed node: 0x2fe95e0: ch = SW 0x2fe93e0, 0x2fd48a0, 0x2fe9de0, 0x2fd48a0:1<Mem:ST4[%34]> [ORD=49]

ISEL: Match complete!
=> 0x2fe95e0: ch = SW 0x2fe93e0, 0x2fd48a0, 0x2fe9de0, 0x2fd48a0:1<Mem:ST4[%34]> [ORD=49]

ISEL: Starting pattern match on root node: 0x2fd48a0: i32,ch = load 0x2fdbfc0, 0x2fe9be0, 0x2fe1b10<LD4[%2]> [ORD=47] [ID=9]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2fd48a0: i32,ch = LW 0x2fe9be0, 0x2fdbec0, 0x2fdbfc0<Mem:LD4[%2]> [ORD=47]

ISEL: Match complete!
=> 0x2fd48a0: i32,ch = LW 0x2fe9be0, 0x2fdbec0, 0x2fdbfc0<Mem:LD4[%2]> [ORD=47]

ISEL: Starting pattern match on root node: 0x2fdbfc0: ch = store 0x2fe1510:1, 0x2fe93e0, 0x2fe90e0, 0x2fe1b10<ST4[%32]> [ORD=46] [ID=8]

  Initial Opcode index to 178
  Morphed node: 0x2fdbfc0: ch = SW 0x2fe93e0, 0x2fe1510, 0x2fd4ca0, 0x2fe1510:1<Mem:ST4[%32]> [ORD=46]

ISEL: Match complete!
=> 0x2fdbfc0: ch = SW 0x2fe93e0, 0x2fe1510, 0x2fd4ca0, 0x2fe1510:1<Mem:ST4[%32]> [ORD=46]

ISEL: Starting pattern match on root node: 0x2fe1510: i32,ch = load 0x2fb6da8, 0x2fe9be0, 0x2fe1b10<LD4[%2]> [ORD=44] [ID=6]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2fe1510: i32,ch = LW 0x2fe9be0, 0x2fdbec0, 0x2fb6da8<Mem:LD4[%2]> [ORD=44]

ISEL: Match complete!
=> 0x2fe1510: i32,ch = LW 0x2fe9be0, 0x2fdbec0, 0x2fb6da8<Mem:LD4[%2]> [ORD=44]

ISEL: Starting pattern match on root node: 0x2fe93e0: i32 = Constant<1> [ORD=46] [ID=4]

  Initial Opcode index to 1226
comparing 0 and 1 and returning value:0
  Skipped scope entry (due to false predicate) at index 1228, continuing at 1236
  Morphed node: 0x2fe93e0: i32 = ADDI 0x2fe1b10, 0x2fd4ea0 [ORD=46]

ISEL: Match complete!
=> 0x2fe93e0: i32 = ADDI 0x2fe1b10, 0x2fd4ea0 [ORD=46]

=> 0x2fb6da8: ch = EntryToken [ORD=44]

===== Instruction selection ends:
Selected selection DAG: BB#6 'startup_fuel_valves3:startup_fuel_valves3.if.else22'
SelectionDAG has 14 nodes:
    0x2fe1b10: i32 = Register %zero

    0x2fd4ea0: i32 = TargetConstant<1>

  0x2fe93e0: i32 = ADDI 0x2fe1b10, 0x2fd4ea0 [ORD=46]

    0x2fdc0c0: <multiple use>
    0x2fdbec0: <multiple use>
    0x2fb6da8: ch = EntryToken [ORD=44]

  0x2fe1510: i32,ch = LW 0x2fdc0c0, 0x2fdbec0, 0x2fb6da8<Mem:LD4[%2]> [ORD=44]

    0x2fdc0c0: <multiple use>
    0x2fdbec0: <multiple use>
      0x2fe93e0: <multiple use>
      0x2fe1510: <multiple use>
      0x2fd4ca0: i32 = TargetConstant<12>

      0x2fe1510: <multiple use>
    0x2fdbfc0: ch = SW 0x2fe93e0, 0x2fe1510, 0x2fd4ca0, 0x2fe1510:1<Mem:ST4[%32]> [ORD=46]

  0x2fd48a0: i32,ch = LW 0x2fdc0c0, 0x2fdbec0, 0x2fdbfc0<Mem:LD4[%2]> [ORD=47]

  0x2fdbec0: i32 = TargetConstant<0>

    0x2fe90e0: i32 = Register %t5

    0x2fe99e0: i32 = TargetFrameIndex<1>

  0x2fdc0c0: i32 = ADDI 0x2fe90e0, 0x2fe99e0 [ORD=44]

    0x2fe93e0: <multiple use>
    0x2fd48a0: <multiple use>
    0x2fe9de0: i32 = TargetConstant<16>

    0x2fd48a0: <multiple use>
  0x2fe95e0: ch = SW 0x2fe93e0, 0x2fd48a0, 0x2fe9de0, 0x2fd48a0:1<Mem:ST4[%34]> [ORD=49]


********** List Scheduling BB#6 'startup_fuel_valves3.if.else22' **********
SU(0): 0x2fe95e0: ch = SW 0x2fe93e0, 0x2fd48a0, 0x2fe9de0, 0x2fd48a0:1<Mem:ST4[%34]> [ORD=49] [ID=0]

  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
   val SU(5): Latency=1
   val SU(1): Latency=1
   ch  SU(1): Latency=1

SU(1): 0x2fd48a0: i32,ch = LW 0x2fdc0c0, 0x2fdbec0, 0x2fdbfc0<Mem:LD4[%2]> [ORD=47] [ID=1]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(4): Latency=1
   ch  SU(2): Latency=1
  Successors:
   val SU(0): Latency=1
   ch  SU(0): Latency=1

SU(2): 0x2fdbfc0: ch = SW 0x2fe93e0, 0x2fe1510, 0x2fd4ca0, 0x2fe1510:1<Mem:ST4[%32]> [ORD=46] [ID=2]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(5): Latency=1
   val SU(3): Latency=1
   ch  SU(3): Latency=1
  Successors:
   ch  SU(1): Latency=1

SU(3): 0x2fe1510: i32,ch = LW 0x2fdc0c0, 0x2fdbec0, 0x2fb6da8<Mem:LD4[%2]> [ORD=44] [ID=3]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(4): Latency=1
  Successors:
   val SU(2): Latency=1
   ch  SU(2): Latency=1

SU(4): 0x2fdc0c0: i32 = ADDI 0x2fe90e0, 0x2fe99e0 [ORD=44] [ID=4]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(1): Latency=1
   val SU(3): Latency=1

SU(5): 0x2fe93e0: i32 = ADDI 0x2fe1b10, 0x2fd4ea0 [ORD=46] [ID=5]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(0): Latency=1
   val SU(2): Latency=1


Examining Available:
Height 0: SU(0): 0x2fe95e0: ch = SW 0x2fe93e0, 0x2fd48a0, 0x2fe9de0, 0x2fd48a0:1<Mem:ST4[%34]> [ORD=49] [ID=0]


*** Scheduling [0]: SU(0): 0x2fe95e0: ch = SW 0x2fe93e0, 0x2fd48a0, 0x2fe9de0, 0x2fd48a0:1<Mem:ST4[%34]> [ORD=49] [ID=0]


Examining Available:
Height 1: SU(1): 0x2fd48a0: i32,ch = LW 0x2fdc0c0, 0x2fdbec0, 0x2fdbfc0<Mem:LD4[%2]> [ORD=47] [ID=1]


*** Scheduling [1]: SU(1): 0x2fd48a0: i32,ch = LW 0x2fdc0c0, 0x2fdbec0, 0x2fdbfc0<Mem:LD4[%2]> [ORD=47] [ID=1]


Examining Available:
Height 2: SU(2): 0x2fdbfc0: ch = SW 0x2fe93e0, 0x2fe1510, 0x2fd4ca0, 0x2fe1510:1<Mem:ST4[%32]> [ORD=46] [ID=2]


*** Scheduling [2]: SU(2): 0x2fdbfc0: ch = SW 0x2fe93e0, 0x2fe1510, 0x2fd4ca0, 0x2fe1510:1<Mem:ST4[%32]> [ORD=46] [ID=2]


Examining Available:
Height 3: SU(5): 0x2fe93e0: i32 = ADDI 0x2fe1b10, 0x2fd4ea0 [ORD=46] [ID=5]

Height 3: SU(3): 0x2fe1510: i32,ch = LW 0x2fdc0c0, 0x2fdbec0, 0x2fb6da8<Mem:LD4[%2]> [ORD=44] [ID=3]


*** Scheduling [3]: SU(5): 0x2fe93e0: i32 = ADDI 0x2fe1b10, 0x2fd4ea0 [ORD=46] [ID=5]


Examining Available:
Height 3: SU(3): 0x2fe1510: i32,ch = LW 0x2fdc0c0, 0x2fdbec0, 0x2fb6da8<Mem:LD4[%2]> [ORD=44] [ID=3]


*** Scheduling [4]: SU(3): 0x2fe1510: i32,ch = LW 0x2fdc0c0, 0x2fdbec0, 0x2fb6da8<Mem:LD4[%2]> [ORD=44] [ID=3]


Examining Available:
Height 5: SU(4): 0x2fdc0c0: i32 = ADDI 0x2fe90e0, 0x2fe99e0 [ORD=44] [ID=4]


*** Scheduling [5]: SU(4): 0x2fdc0c0: i32 = ADDI 0x2fe90e0, 0x2fe99e0 [ORD=44] [ID=4]

*** Final schedule ***
SU(4): 0x2fdc0c0: i32 = ADDI 0x2fe90e0, 0x2fe99e0 [ORD=44] [ID=4]

SU(3): 0x2fe1510: i32,ch = LW 0x2fdc0c0, 0x2fdbec0, 0x2fb6da8<Mem:LD4[%2]> [ORD=44] [ID=3]

SU(5): 0x2fe93e0: i32 = ADDI 0x2fe1b10, 0x2fd4ea0 [ORD=46] [ID=5]

SU(2): 0x2fdbfc0: ch = SW 0x2fe93e0, 0x2fe1510, 0x2fd4ca0, 0x2fe1510:1<Mem:ST4[%32]> [ORD=46] [ID=2]

SU(1): 0x2fd48a0: i32,ch = LW 0x2fdc0c0, 0x2fdbec0, 0x2fdbfc0<Mem:LD4[%2]> [ORD=47] [ID=1]

SU(0): 0x2fe95e0: ch = SW 0x2fe93e0, 0x2fd48a0, 0x2fe9de0, 0x2fd48a0:1<Mem:ST4[%34]> [ORD=49] [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %16 = load i32** %2, align 4
I was here to add   %2 = alloca i32*, align 4
with I type i32*and sd value :0x2fdc0c0: i32 = FrameIndex<1>
new load?0x2fd4ea0: i32,ch = load 0x2fb6da8, 0x2fdc0c0, 0x2fe90e0<LD4[%2]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x2fe99e0: i32 = Constant<0>

    0x2fb6da8: ch = EntryToken

    0x2fdc0c0: i32 = FrameIndex<1>

    0x2fe90e0: i32 = undef

  0x2fd4ea0: i32,ch = load 0x2fb6da8, 0x2fdc0c0, 0x2fe90e0<LD4[%2]>

  0x2fb6da8: ch = EntryToken


visiting load instruction   %18 = load i32* %17, align 4
with I type i32and sd value :0x2fdbec0: i32 = add 0x2fd4ea0, 0x2fd4ca0
new load?0x2fe9de0: i32,ch = load 0x2fb6da8, 0x2fdbec0, 0x2fe90e0<LD4[%17]>
dag after load is dealt with?SelectionDAG has 9 nodes:
  0x2fe99e0: i32 = Constant<0>

  0x2fe90e0: i32 = undef [ORD=50]

  0x2fe1b10: i64 = Constant<16>

    0x2fb6da8: <multiple use>
        0x2fb6da8: <multiple use>
        0x2fdc0c0: i32 = FrameIndex<1> [ORD=50]

        0x2fe90e0: <multiple use>
      0x2fd4ea0: i32,ch = load 0x2fb6da8, 0x2fdc0c0, 0x2fe90e0<LD4[%2]> [ORD=50]

      0x2fd4ca0: i32 = Constant<16> [ORD=51]

    0x2fdbec0: i32 = add 0x2fd4ea0, 0x2fd4ca0 [ORD=51]

    0x2fe90e0: <multiple use>
  0x2fe9de0: i32,ch = load 0x2fb6da8, 0x2fdbec0, 0x2fe90e0<LD4[%17]>

  0x2fb6da8: ch = EntryToken [ORD=50]


I was here to add i32 0
Initial selection DAG: BB#3 'startup_fuel_valves3:startup_fuel_valves3.if.then9'
SelectionDAG has 17 nodes:
  0x2fb6da8: ch = EntryToken [ORD=50]

  0x2fe90e0: i32 = undef [ORD=50]

  0x2fe1b10: i64 = Constant<16>

      0x2fb6da8: <multiple use>
            0x2fb6da8: <multiple use>
                0x2fb6da8: <multiple use>
                0x2fdc0c0: i32 = FrameIndex<1> [ORD=50]

                0x2fe90e0: <multiple use>
              0x2fd4ea0: i32,ch = load 0x2fb6da8, 0x2fdc0c0, 0x2fe90e0<LD4[%2]> [ORD=50]

              0x2fd4ca0: i32 = Constant<16> [ORD=51]

            0x2fdbec0: i32 = add 0x2fd4ea0, 0x2fd4ca0 [ORD=51]

            0x2fe90e0: <multiple use>
          0x2fe9de0: i32,ch = load 0x2fb6da8, 0x2fdbec0, 0x2fe90e0<LD4[%17]> [ORD=52]

          0x2fe99e0: i32 = Constant<0> [ORD=53]

          0x2fe95e0: ch = seteq [ORD=53]

        0x2fd48a0: i1 = setcc 0x2fe9de0, 0x2fe99e0, 0x2fe95e0 [ORD=53]

        0x2fdbfc0: i1 = Constant<-1>

      0x2fe1510: i1 = xor 0x2fd48a0, 0x2fdbfc0

      0x2fe93e0: ch = BasicBlock<startup_fuel_valves3.if.end26 0x2fe2ab0>

    0x2fe9be0: ch = brcond 0x2fb6da8, 0x2fe1510, 0x2fe93e0

    0x2fe1210: ch = BasicBlock<startup_fuel_valves3.if.then12 0x2fe28a0>

  0x2fe1110: ch = br 0x2fe9be0, 0x2fe1210



Replacing.3 0x2fe1510: i1 = xor 0x2fd48a0, 0x2fdbfc0

With: 0x2fe97e0: i1 = setcc 0x2fe9de0, 0x2fe99e0, 0x2fe91e0

Optimized lowered selection DAG: BB#3 'startup_fuel_valves3:startup_fuel_valves3.if.then9'
SelectionDAG has 14 nodes:
  0x2fb6da8: ch = EntryToken [ORD=50]

  0x2fe90e0: i32 = undef [ORD=50]

      0x2fb6da8: <multiple use>
          0x2fb6da8: <multiple use>
              0x2fb6da8: <multiple use>
              0x2fdc0c0: i32 = FrameIndex<1> [ORD=50]

              0x2fe90e0: <multiple use>
            0x2fd4ea0: i32,ch = load 0x2fb6da8, 0x2fdc0c0, 0x2fe90e0<LD4[%2]> [ORD=50]

            0x2fd4ca0: i32 = Constant<16> [ORD=51]

          0x2fdbec0: i32 = add 0x2fd4ea0, 0x2fd4ca0 [ORD=51]

          0x2fe90e0: <multiple use>
        0x2fe9de0: i32,ch = load 0x2fb6da8, 0x2fdbec0, 0x2fe90e0<LD4[%17]> [ORD=52]

        0x2fe99e0: i32 = Constant<0> [ORD=53]

        0x2fe91e0: ch = setne

      0x2fe97e0: i1 = setcc 0x2fe9de0, 0x2fe99e0, 0x2fe91e0

      0x2fe93e0: ch = BasicBlock<startup_fuel_valves3.if.end26 0x2fe2ab0>

    0x2fe9be0: ch = brcond 0x2fb6da8, 0x2fe97e0, 0x2fe93e0

    0x2fe1210: ch = BasicBlock<startup_fuel_valves3.if.then12 0x2fe28a0>

  0x2fe1110: ch = br 0x2fe9be0, 0x2fe1210


Legally typed node: 0x2fe91e0: ch = setne [ID=0]

Legally typed node: 0x2fe1210: ch = BasicBlock<startup_fuel_valves3.if.then12 0x2fe28a0> [ID=0]

Legally typed node: 0x2fe93e0: ch = BasicBlock<startup_fuel_valves3.if.end26 0x2fe2ab0> [ID=0]

Legally typed node: 0x2fd4ca0: i32 = Constant<16> [ORD=51] [ID=0]

Legally typed node: 0x2fe90e0: i32 = undef [ORD=50] [ID=0]

Legally typed node: 0x2fe99e0: i32 = Constant<0> [ORD=53] [ID=0]

Legally typed node: 0x2fdc0c0: i32 = FrameIndex<1> [ORD=50] [ID=0]

Legally typed node: 0x2fb6da8: ch = EntryToken [ORD=50] [ID=0]

Legally typed node: 0x2fd4ea0: i32,ch = load 0x2fb6da8, 0x2fdc0c0, 0x2fe90e0<LD4[%2]> [ORD=50] [ID=0]

Legally typed node: 0x2fdbec0: i32 = add 0x2fd4ea0, 0x2fd4ca0 [ORD=51] [ID=0]

Legally typed node: 0x2fe9de0: i32,ch = load 0x2fb6da8, 0x2fdbec0, 0x2fe90e0<LD4[%17]> [ORD=52] [ID=0]

Promote integer result: 0x2fe97e0: i1 = setcc 0x2fe9de0, 0x2fe99e0, 0x2fe91e0 [ID=0]

Promote integer operand: 0x2fe9be0: ch = brcond 0x2fb6da8, 0x2fe97e0, 0x2fe93e0 [ID=0]

Promote integer operand: 0x2fe95e0: i32 = zero_extend 0x2fe97e0 [ID=0]

Legally typed node: 0x2fd48a0: i32 = Constant<1> [ID=0]

Legally typed node: 0x2fe1b10: i32 = setcc 0x2fe9de0, 0x2fe99e0, 0x2fe91e0 [ID=0]

Legally typed node: 0x2fdbfc0: i32 = and 0x2fe1b10, 0x2fd48a0 [ID=0]

Legally typed node: 0x2fe9be0: ch = brcond 0x2fb6da8, 0x2fdbfc0, 0x2fe93e0 [ID=0]

Legally typed node: 0x2fe1110: ch = br 0x2fe9be0, 0x2fe1210 [ID=0]

Legally typed node: 0x7fff9b4748f0: ch = handlenode 0x2fe1110 [ID=0]

Type-legalized selection DAG: BB#3 'startup_fuel_valves3:startup_fuel_valves3.if.then9'
SelectionDAG has 16 nodes:
  0x2fb6da8: ch = EntryToken [ORD=50] [ID=-3]

  0x2fe90e0: i32 = undef [ORD=50] [ID=-3]

      0x2fb6da8: <multiple use>
            0x2fb6da8: <multiple use>
                0x2fb6da8: <multiple use>
                0x2fdc0c0: i32 = FrameIndex<1> [ORD=50] [ID=-3]

                0x2fe90e0: <multiple use>
              0x2fd4ea0: i32,ch = load 0x2fb6da8, 0x2fdc0c0, 0x2fe90e0<LD4[%2]> [ORD=50] [ID=-3]

              0x2fd4ca0: i32 = Constant<16> [ORD=51] [ID=-3]

            0x2fdbec0: i32 = add 0x2fd4ea0, 0x2fd4ca0 [ORD=51] [ID=-3]

            0x2fe90e0: <multiple use>
          0x2fe9de0: i32,ch = load 0x2fb6da8, 0x2fdbec0, 0x2fe90e0<LD4[%17]> [ORD=52] [ID=-3]

          0x2fe99e0: i32 = Constant<0> [ORD=53] [ID=-3]

          0x2fe91e0: ch = setne [ID=-3]

        0x2fe1b10: i32 = setcc 0x2fe9de0, 0x2fe99e0, 0x2fe91e0 [ID=-3]

        0x2fd48a0: i32 = Constant<1> [ID=-3]

      0x2fdbfc0: i32 = and 0x2fe1b10, 0x2fd48a0 [ID=-3]

      0x2fe93e0: ch = BasicBlock<startup_fuel_valves3.if.end26 0x2fe2ab0> [ID=-3]

    0x2fe9be0: ch = brcond 0x2fb6da8, 0x2fdbfc0, 0x2fe93e0 [ID=-3]

    0x2fe1210: ch = BasicBlock<startup_fuel_valves3.if.then12 0x2fe28a0> [ID=-3]

  0x2fe1110: ch = br 0x2fe9be0, 0x2fe1210 [ID=-3]



Replacing.2 0x2fdbfc0: i32 = and 0x2fe1b10, 0x2fd48a0 [ID=-3]

With: 0x2fe1b10: i32 = setcc 0x2fe9de0, 0x2fe99e0, 0x2fe91e0 [ID=-3]

Optimized type-legalized selection DAG: BB#3 'startup_fuel_valves3:startup_fuel_valves3.if.then9'
SelectionDAG has 14 nodes:
  0x2fb6da8: ch = EntryToken [ORD=50] [ID=-3]

  0x2fe90e0: i32 = undef [ORD=50] [ID=-3]

      0x2fb6da8: <multiple use>
          0x2fb6da8: <multiple use>
              0x2fb6da8: <multiple use>
              0x2fdc0c0: i32 = FrameIndex<1> [ORD=50] [ID=-3]

              0x2fe90e0: <multiple use>
            0x2fd4ea0: i32,ch = load 0x2fb6da8, 0x2fdc0c0, 0x2fe90e0<LD4[%2]> [ORD=50] [ID=-3]

            0x2fd4ca0: i32 = Constant<16> [ORD=51] [ID=-3]

          0x2fdbec0: i32 = add 0x2fd4ea0, 0x2fd4ca0 [ORD=51] [ID=-3]

          0x2fe90e0: <multiple use>
        0x2fe9de0: i32,ch = load 0x2fb6da8, 0x2fdbec0, 0x2fe90e0<LD4[%17]> [ORD=52] [ID=-3]

        0x2fe99e0: i32 = Constant<0> [ORD=53] [ID=-3]

        0x2fe91e0: ch = setne [ID=-3]

      0x2fe1b10: i32 = setcc 0x2fe9de0, 0x2fe99e0, 0x2fe91e0 [ID=-3]

      0x2fe93e0: ch = BasicBlock<startup_fuel_valves3.if.end26 0x2fe2ab0> [ID=-3]

    0x2fe9be0: ch = brcond 0x2fb6da8, 0x2fe1b10, 0x2fe93e0 [ID=-3]

    0x2fe1210: ch = BasicBlock<startup_fuel_valves3.if.then12 0x2fe28a0> [ID=-3]

  0x2fe1110: ch = br 0x2fe9be0, 0x2fe1210 [ID=-3]


Legalized selection DAG: BB#3 'startup_fuel_valves3:startup_fuel_valves3.if.then9'
SelectionDAG has 14 nodes:
  0x2fb6da8: ch = EntryToken [ORD=50] [ID=0]

  0x2fe90e0: i32 = undef [ORD=50] [ID=3]

      0x2fb6da8: <multiple use>
          0x2fb6da8: <multiple use>
              0x2fb6da8: <multiple use>
              0x2fdc0c0: i32 = FrameIndex<1> [ORD=50] [ID=1]

              0x2fe90e0: <multiple use>
            0x2fd4ea0: i32,ch = load 0x2fb6da8, 0x2fdc0c0, 0x2fe90e0<LD4[%2]> [ORD=50] [ID=8]

            0x2fd4ca0: i32 = Constant<16> [ORD=51] [ID=4]

          0x2fdbec0: i32 = add 0x2fd4ea0, 0x2fd4ca0 [ORD=51] [ID=9]

          0x2fe90e0: <multiple use>
        0x2fe9de0: i32,ch = load 0x2fb6da8, 0x2fdbec0, 0x2fe90e0<LD4[%17]> [ORD=52] [ID=10]

        0x2fe99e0: i32 = Constant<0> [ORD=53] [ID=2]

        0x2fe91e0: ch = setne [ID=7]

      0x2fe1b10: i32 = setcc 0x2fe9de0, 0x2fe99e0, 0x2fe91e0 [ID=11]

      0x2fe93e0: ch = BasicBlock<startup_fuel_valves3.if.end26 0x2fe2ab0> [ID=5]

    0x2fe9be0: ch = brcond 0x2fb6da8, 0x2fe1b10, 0x2fe93e0 [ID=12]

    0x2fe1210: ch = BasicBlock<startup_fuel_valves3.if.then12 0x2fe28a0> [ID=6]

  0x2fe1110: ch = br 0x2fe9be0, 0x2fe1210 [ID=13]


Optimized legalized selection DAG: BB#3 'startup_fuel_valves3:startup_fuel_valves3.if.then9'
SelectionDAG has 14 nodes:
  0x2fb6da8: ch = EntryToken [ORD=50] [ID=0]

  0x2fe90e0: i32 = undef [ORD=50] [ID=3]

      0x2fb6da8: <multiple use>
          0x2fb6da8: <multiple use>
              0x2fb6da8: <multiple use>
              0x2fdc0c0: i32 = FrameIndex<1> [ORD=50] [ID=1]

              0x2fe90e0: <multiple use>
            0x2fd4ea0: i32,ch = load 0x2fb6da8, 0x2fdc0c0, 0x2fe90e0<LD4[%2]> [ORD=50] [ID=8]

            0x2fd4ca0: i32 = Constant<16> [ORD=51] [ID=4]

          0x2fdbec0: i32 = add 0x2fd4ea0, 0x2fd4ca0 [ORD=51] [ID=9]

          0x2fe90e0: <multiple use>
        0x2fe9de0: i32,ch = load 0x2fb6da8, 0x2fdbec0, 0x2fe90e0<LD4[%17]> [ORD=52] [ID=10]

        0x2fe99e0: i32 = Constant<0> [ORD=53] [ID=2]

        0x2fe91e0: ch = setne [ID=7]

      0x2fe1b10: i32 = setcc 0x2fe9de0, 0x2fe99e0, 0x2fe91e0 [ID=11]

      0x2fe93e0: ch = BasicBlock<startup_fuel_valves3.if.end26 0x2fe2ab0> [ID=5]

    0x2fe9be0: ch = brcond 0x2fb6da8, 0x2fe1b10, 0x2fe93e0 [ID=12]

    0x2fe1210: ch = BasicBlock<startup_fuel_valves3.if.then12 0x2fe28a0> [ID=6]

  0x2fe1110: ch = br 0x2fe9be0, 0x2fe1210 [ID=13]


===== Instruction selection begins: BB#3 'startup_fuel_valves3.if.then9'
ISEL: Starting pattern match on root node: 0x2fe1110: ch = br 0x2fe9be0, 0x2fe1210 [ID=13]

  Initial Opcode index to 1938
  Morphed node: 0x2fe1110: ch = JAL 0x2fe1210, 0x2fe9be0

ISEL: Match complete!
=> 0x2fe1110: ch = JAL 0x2fe1210, 0x2fe9be0

ISEL: Starting pattern match on root node: 0x2fe9be0: ch = brcond 0x2fb6da8, 0x2fe1b10, 0x2fe93e0 [ID=12]

  Initial Opcode index to 1439
  Skipped scope entry (due to false predicate) at index 1456, continuing at 1477
  Morphed node: 0x2fe9be0: ch = BNE 0x2fe93e0, 0x2fe9de0, 0x2fe99e0, 0x2fb6da8

ISEL: Match complete!
=> 0x2fe9be0: ch = BNE 0x2fe93e0, 0x2fe9de0, 0x2fe99e0, 0x2fb6da8

ISEL: Starting pattern match on root node: 0x2fe9de0: i32,ch = load 0x2fb6da8, 0x2fdbec0, 0x2fe90e0<LD4[%17]> [ORD=52] [ID=10]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2fe9de0: i32,ch = LW 0x2fd4ea0, 0x2fe91e0, 0x2fb6da8<Mem:LD4[%17]> [ORD=52]

ISEL: Match complete!
=> 0x2fe9de0: i32,ch = LW 0x2fd4ea0, 0x2fe91e0, 0x2fb6da8<Mem:LD4[%17]> [ORD=52]

ISEL: Starting pattern match on root node: 0x2fd4ea0: i32,ch = load 0x2fb6da8, 0x2fdc0c0, 0x2fe90e0<LD4[%2]> [ORD=50] [ID=8]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2fd4ea0: i32,ch = LW 0x2fdc0c0, 0x2fd4ca0, 0x2fb6da8<Mem:LD4[%2]> [ORD=50]

ISEL: Match complete!
=> 0x2fd4ea0: i32,ch = LW 0x2fdc0c0, 0x2fd4ca0, 0x2fb6da8<Mem:LD4[%2]> [ORD=50]

=> 0x2fe1210: ch = BasicBlock<startup_fuel_valves3.if.then12 0x2fe28a0>

=> 0x2fe93e0: ch = BasicBlock<startup_fuel_valves3.if.end26 0x2fe2ab0>

ISEL: Starting pattern match on root node: 0x2fe99e0: i32 = Constant<0> [ORD=53] [ID=2]

  Initial Opcode index to 1226
comparing 0 and 0 and returning value:1
ISEL: Match complete!
=> 0x2fe99e0: i32 = Constant<0> [ORD=53] [ID=2]

=> 0x2fb6da8: ch = EntryToken [ORD=50]

===== Instruction selection ends:
Selected selection DAG: BB#3 'startup_fuel_valves3:startup_fuel_valves3.if.then9'
SelectionDAG has 13 nodes:
  0x2fb6da8: ch = EntryToken [ORD=50]

    0x2fe1210: ch = BasicBlock<startup_fuel_valves3.if.then12 0x2fe28a0>

      0x2fe93e0: ch = BasicBlock<startup_fuel_valves3.if.end26 0x2fe2ab0>

            0x2fe99e0: i32 = Register %t5

            0x2fdbec0: i32 = TargetFrameIndex<1>

          0x2fdc0c0: i32 = ADDI 0x2fe99e0, 0x2fdbec0 [ORD=50]

          0x2fd4ca0: i32 = TargetConstant<0>

          0x2fb6da8: <multiple use>
        0x2fd4ea0: i32,ch = LW 0x2fdc0c0, 0x2fd4ca0, 0x2fb6da8<Mem:LD4[%2]> [ORD=50]

        0x2fe91e0: i32 = TargetConstant<16>

        0x2fb6da8: <multiple use>
      0x2fe9de0: i32,ch = LW 0x2fd4ea0, 0x2fe91e0, 0x2fb6da8<Mem:LD4[%17]> [ORD=52]

      0x2fe90e0: i32 = Register %zero

      0x2fb6da8: <multiple use>
    0x2fe9be0: ch = BNE 0x2fe93e0, 0x2fe9de0, 0x2fe90e0, 0x2fb6da8

  0x2fe1110: ch = JAL 0x2fe1210, 0x2fe9be0


********** List Scheduling BB#3 'startup_fuel_valves3.if.then9' **********
SU(0): 0x2fe1110: ch = JAL 0x2fe1210, 0x2fe9be0 [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x2fe9be0: ch = BNE 0x2fe93e0, 0x2fe9de0, 0x2fe90e0, 0x2fb6da8 [ID=1]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x2fe9de0: i32,ch = LW 0x2fd4ea0, 0x2fe91e0, 0x2fb6da8<Mem:LD4[%17]> [ORD=52] [ID=2]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(3): Latency=1
  Successors:
   val SU(1): Latency=1

SU(3): 0x2fd4ea0: i32,ch = LW 0x2fdc0c0, 0x2fd4ca0, 0x2fb6da8<Mem:LD4[%2]> [ORD=50] [ID=3]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(4): Latency=1
  Successors:
   val SU(2): Latency=1

SU(4): 0x2fdc0c0: i32 = ADDI 0x2fe99e0, 0x2fdbec0 [ORD=50] [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(3): Latency=1


Examining Available:
Height 0: SU(0): 0x2fe1110: ch = JAL 0x2fe1210, 0x2fe9be0 [ID=0]


*** Scheduling [0]: SU(0): 0x2fe1110: ch = JAL 0x2fe1210, 0x2fe9be0 [ID=0]


Examining Available:
Height 1: SU(1): 0x2fe9be0: ch = BNE 0x2fe93e0, 0x2fe9de0, 0x2fe90e0, 0x2fb6da8 [ID=1]


*** Scheduling [1]: SU(1): 0x2fe9be0: ch = BNE 0x2fe93e0, 0x2fe9de0, 0x2fe90e0, 0x2fb6da8 [ID=1]


Examining Available:
Height 2: SU(2): 0x2fe9de0: i32,ch = LW 0x2fd4ea0, 0x2fe91e0, 0x2fb6da8<Mem:LD4[%17]> [ORD=52] [ID=2]


*** Scheduling [2]: SU(2): 0x2fe9de0: i32,ch = LW 0x2fd4ea0, 0x2fe91e0, 0x2fb6da8<Mem:LD4[%17]> [ORD=52] [ID=2]


Examining Available:
Height 3: SU(3): 0x2fd4ea0: i32,ch = LW 0x2fdc0c0, 0x2fd4ca0, 0x2fb6da8<Mem:LD4[%2]> [ORD=50] [ID=3]


*** Scheduling [3]: SU(3): 0x2fd4ea0: i32,ch = LW 0x2fdc0c0, 0x2fd4ca0, 0x2fb6da8<Mem:LD4[%2]> [ORD=50] [ID=3]


Examining Available:
Height 4: SU(4): 0x2fdc0c0: i32 = ADDI 0x2fe99e0, 0x2fdbec0 [ORD=50] [ID=4]


*** Scheduling [4]: SU(4): 0x2fdc0c0: i32 = ADDI 0x2fe99e0, 0x2fdbec0 [ORD=50] [ID=4]

*** Final schedule ***
SU(4): 0x2fdc0c0: i32 = ADDI 0x2fe99e0, 0x2fdbec0 [ORD=50] [ID=4]

SU(3): 0x2fd4ea0: i32,ch = LW 0x2fdc0c0, 0x2fd4ca0, 0x2fb6da8<Mem:LD4[%2]> [ORD=50] [ID=3]

SU(2): 0x2fe9de0: i32,ch = LW 0x2fd4ea0, 0x2fe91e0, 0x2fb6da8<Mem:LD4[%17]> [ORD=52] [ID=2]

SU(1): 0x2fe9be0: ch = BNE 0x2fe93e0, 0x2fe9de0, 0x2fe90e0, 0x2fb6da8 [ID=1]

SU(0): 0x2fe1110: ch = JAL 0x2fe1210, 0x2fe9be0 [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %20 = load i32** %2, align 4
I was here to add   %2 = alloca i32*, align 4
with I type i32*and sd value :0x2fdbec0: i32 = FrameIndex<1>
new load?0x2fd4ca0: i32,ch = load 0x2fb6da8, 0x2fdbec0, 0x2fe90e0<LD4[%2]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x2fe99e0: i32 = Constant<0>

    0x2fb6da8: ch = EntryToken

    0x2fdbec0: i32 = FrameIndex<1>

    0x2fe90e0: i32 = undef

  0x2fd4ca0: i32,ch = load 0x2fb6da8, 0x2fdbec0, 0x2fe90e0<LD4[%2]>

  0x2fb6da8: ch = EntryToken


store visit is after?  store i32 0, i32* %21, align 4
I was here to add i32 0
whats in dag after store?SelectionDAG has 9 nodes:
  0x2fe90e0: i32 = undef [ORD=54]

    0x2fb6da8: ch = EntryToken [ORD=54]

    0x2fdbec0: i32 = FrameIndex<1> [ORD=54]

    0x2fe90e0: <multiple use>
  0x2fd4ca0: i32,ch = load 0x2fb6da8, 0x2fdbec0, 0x2fe90e0<LD4[%2]> [ORD=54]

  0x2fe91e0: i64 = Constant<12>

    0x2fd4ca0: <multiple use>
    0x2fe99e0: i32 = Constant<0> [ORD=56]

      0x2fd4ca0: <multiple use>
      0x2fe1110: i32 = Constant<12> [ORD=55]

    0x2fe9be0: i32 = add 0x2fd4ca0, 0x2fe1110 [ORD=55]

    0x2fe90e0: <multiple use>
  0x2fe9de0: ch = store 0x2fd4ca0:1, 0x2fe99e0, 0x2fe9be0, 0x2fe90e0<ST4[%21]> [ORD=56]


visiting load instruction   %22 = load i32** %2, align 4
with I type i32*and sd value :0x2fdbec0: i32 = FrameIndex<1>
new load?0x2fd4ea0: i32,ch = load 0x2fe9de0, 0x2fdbec0, 0x2fe90e0<LD4[%2]>
dag after load is dealt with?SelectionDAG has 10 nodes:
  0x2fdbec0: i32 = FrameIndex<1> [ORD=54]

  0x2fe90e0: i32 = undef [ORD=54]

    0x2fb6da8: ch = EntryToken [ORD=54]

    0x2fdbec0: <multiple use>
    0x2fe90e0: <multiple use>
  0x2fd4ca0: i32,ch = load 0x2fb6da8, 0x2fdbec0, 0x2fe90e0<LD4[%2]> [ORD=54]

  0x2fe91e0: i64 = Constant<12>

      0x2fd4ca0: <multiple use>
      0x2fe99e0: i32 = Constant<0> [ORD=56]

        0x2fd4ca0: <multiple use>
        0x2fe1110: i32 = Constant<12> [ORD=55]

      0x2fe9be0: i32 = add 0x2fd4ca0, 0x2fe1110 [ORD=55]

      0x2fe90e0: <multiple use>
    0x2fe9de0: ch = store 0x2fd4ca0:1, 0x2fe99e0, 0x2fe9be0, 0x2fe90e0<ST4[%21]> [ORD=56]

    0x2fdbec0: <multiple use>
    0x2fe90e0: <multiple use>
  0x2fd4ea0: i32,ch = load 0x2fe9de0, 0x2fdbec0, 0x2fe90e0<LD4[%2]>

    0x2fd4ca0: <multiple use>
    0x2fe99e0: i32 = Constant<0> [ORD=56]

      0x2fd4ca0: <multiple use>
      0x2fe1110: i32 = Constant<12> [ORD=55]

    0x2fe9be0: i32 = add 0x2fd4ca0, 0x2fe1110 [ORD=55]

    0x2fe90e0: <multiple use>
  0x2fe9de0: ch = store 0x2fd4ca0:1, 0x2fe99e0, 0x2fe9be0, 0x2fe90e0<ST4[%21]> [ORD=56]


visiting load instruction   %24 = load i32* %23, align 4
with I type i32and sd value :0x2fdc0c0: i32 = add 0x2fd4ea0, 0x2fe93e0
new load?0x2fe1b10: i32,ch = load 0x2fe9de0, 0x2fdc0c0, 0x2fe90e0<LD4[%23]>
dag after load is dealt with?SelectionDAG has 14 nodes:
  0x2fdbec0: i32 = FrameIndex<1> [ORD=54]

  0x2fe90e0: i32 = undef [ORD=54]

    0x2fb6da8: ch = EntryToken [ORD=54]

    0x2fdbec0: <multiple use>
    0x2fe90e0: <multiple use>
  0x2fd4ca0: i32,ch = load 0x2fb6da8, 0x2fdbec0, 0x2fe90e0<LD4[%2]> [ORD=54]

  0x2fe91e0: i64 = Constant<12>

  0x2fe1210: i64 = Constant<20>

    0x2fe9de0: <multiple use>
        0x2fe9de0: <multiple use>
        0x2fdbec0: <multiple use>
        0x2fe90e0: <multiple use>
      0x2fd4ea0: i32,ch = load 0x2fe9de0, 0x2fdbec0, 0x2fe90e0<LD4[%2]> [ORD=57]

      0x2fe93e0: i32 = Constant<20> [ORD=58]

    0x2fdc0c0: i32 = add 0x2fd4ea0, 0x2fe93e0 [ORD=58]

    0x2fe90e0: <multiple use>
  0x2fe1b10: i32,ch = load 0x2fe9de0, 0x2fdc0c0, 0x2fe90e0<LD4[%23]>

    0x2fd4ca0: <multiple use>
    0x2fe99e0: i32 = Constant<0> [ORD=56]

      0x2fd4ca0: <multiple use>
      0x2fe1110: i32 = Constant<12> [ORD=55]

    0x2fe9be0: i32 = add 0x2fd4ca0, 0x2fe1110 [ORD=55]

    0x2fe90e0: <multiple use>
  0x2fe9de0: ch = store 0x2fd4ca0:1, 0x2fe99e0, 0x2fe9be0, 0x2fe90e0<ST4[%21]> [ORD=56]


I was here to add i32 -1
Initial selection DAG: BB#4 'startup_fuel_valves3:startup_fuel_valves3.if.then12'
SelectionDAG has 23 nodes:
  0x2fdbec0: i32 = FrameIndex<1> [ORD=54]

  0x2fe90e0: i32 = undef [ORD=54]

    0x2fb6da8: ch = EntryToken [ORD=54]

    0x2fdbec0: <multiple use>
    0x2fe90e0: <multiple use>
  0x2fd4ca0: i32,ch = load 0x2fb6da8, 0x2fdbec0, 0x2fe90e0<LD4[%2]> [ORD=54]

  0x2fe91e0: i64 = Constant<12>

    0x2fd4ca0: <multiple use>
    0x2fe99e0: i32 = Constant<0> [ORD=56]

      0x2fd4ca0: <multiple use>
      0x2fe1110: i32 = Constant<12> [ORD=55]

    0x2fe9be0: i32 = add 0x2fd4ca0, 0x2fe1110 [ORD=55]

    0x2fe90e0: <multiple use>
  0x2fe9de0: ch = store 0x2fd4ca0:1, 0x2fe99e0, 0x2fe9be0, 0x2fe90e0<ST4[%21]> [ORD=56]

  0x2fe1210: i64 = Constant<20>

      0x2fe9de0: <multiple use>
            0x2fe9de0: <multiple use>
                0x2fe9de0: <multiple use>
                0x2fdbec0: <multiple use>
                0x2fe90e0: <multiple use>
              0x2fd4ea0: i32,ch = load 0x2fe9de0, 0x2fdbec0, 0x2fe90e0<LD4[%2]> [ORD=57]

              0x2fe93e0: i32 = Constant<20> [ORD=58]

            0x2fdc0c0: i32 = add 0x2fd4ea0, 0x2fe93e0 [ORD=58]

            0x2fe90e0: <multiple use>
          0x2fe1b10: i32,ch = load 0x2fe9de0, 0x2fdc0c0, 0x2fe90e0<LD4[%23]> [ORD=59]

          0x2fd48a0: i32 = Constant<-1> [ORD=60]

          0x2fdbfc0: ch = seteq [ORD=60]

        0x2fe97e0: i1 = setcc 0x2fe1b10, 0x2fd48a0, 0x2fdbfc0 [ORD=60]

        0x2fe95e0: i1 = Constant<-1>

      0x2fe1510: i1 = xor 0x2fe97e0, 0x2fe95e0

      0x2fe96e0: ch = BasicBlock<startup_fuel_valves3.if.end26 0x2fe2ab0>

    0x2fd46a0: ch = brcond 0x2fe9de0, 0x2fe1510, 0x2fe96e0

    0x2fe98e0: ch = BasicBlock<startup_fuel_valves3.if.then16 0x2fe2950>

  0x2fe9ce0: ch = br 0x2fd46a0, 0x2fe98e0



Replacing.3 0x2fe1510: i1 = xor 0x2fe97e0, 0x2fe95e0

With: 0x2fe1d10: i1 = setcc 0x2fe1b10, 0x2fd48a0, 0x2fe8fe0

Optimized lowered selection DAG: BB#4 'startup_fuel_valves3:startup_fuel_valves3.if.then12'
SelectionDAG has 19 nodes:
  0x2fdbec0: i32 = FrameIndex<1> [ORD=54]

  0x2fe90e0: i32 = undef [ORD=54]

    0x2fb6da8: ch = EntryToken [ORD=54]

    0x2fdbec0: <multiple use>
    0x2fe90e0: <multiple use>
  0x2fd4ca0: i32,ch = load 0x2fb6da8, 0x2fdbec0, 0x2fe90e0<LD4[%2]> [ORD=54]

    0x2fd4ca0: <multiple use>
    0x2fe99e0: i32 = Constant<0> [ORD=56]

      0x2fd4ca0: <multiple use>
      0x2fe1110: i32 = Constant<12> [ORD=55]

    0x2fe9be0: i32 = add 0x2fd4ca0, 0x2fe1110 [ORD=55]

    0x2fe90e0: <multiple use>
  0x2fe9de0: ch = store 0x2fd4ca0:1, 0x2fe99e0, 0x2fe9be0, 0x2fe90e0<ST4[%21]> [ORD=56]

      0x2fe9de0: <multiple use>
          0x2fe9de0: <multiple use>
              0x2fe9de0: <multiple use>
              0x2fdbec0: <multiple use>
              0x2fe90e0: <multiple use>
            0x2fd4ea0: i32,ch = load 0x2fe9de0, 0x2fdbec0, 0x2fe90e0<LD4[%2]> [ORD=57]

            0x2fe93e0: i32 = Constant<20> [ORD=58]

          0x2fdc0c0: i32 = add 0x2fd4ea0, 0x2fe93e0 [ORD=58]

          0x2fe90e0: <multiple use>
        0x2fe1b10: i32,ch = load 0x2fe9de0, 0x2fdc0c0, 0x2fe90e0<LD4[%23]> [ORD=59]

        0x2fd48a0: i32 = Constant<-1> [ORD=60]

        0x2fe8fe0: ch = setne

      0x2fe1d10: i1 = setcc 0x2fe1b10, 0x2fd48a0, 0x2fe8fe0

      0x2fe96e0: ch = BasicBlock<startup_fuel_valves3.if.end26 0x2fe2ab0>

    0x2fd46a0: ch = brcond 0x2fe9de0, 0x2fe1d10, 0x2fe96e0

    0x2fe98e0: ch = BasicBlock<startup_fuel_valves3.if.then16 0x2fe2950>

  0x2fe9ce0: ch = br 0x2fd46a0, 0x2fe98e0


Legally typed node: 0x2fe8fe0: ch = setne [ID=0]

Legally typed node: 0x2fe98e0: ch = BasicBlock<startup_fuel_valves3.if.then16 0x2fe2950> [ID=0]

Legally typed node: 0x2fe96e0: ch = BasicBlock<startup_fuel_valves3.if.end26 0x2fe2ab0> [ID=0]

Legally typed node: 0x2fd48a0: i32 = Constant<-1> [ORD=60] [ID=0]

Legally typed node: 0x2fe93e0: i32 = Constant<20> [ORD=58] [ID=0]

Legally typed node: 0x2fe1110: i32 = Constant<12> [ORD=55] [ID=0]

Legally typed node: 0x2fe90e0: i32 = undef [ORD=54] [ID=0]

Legally typed node: 0x2fe99e0: i32 = Constant<0> [ORD=56] [ID=0]

Legally typed node: 0x2fdbec0: i32 = FrameIndex<1> [ORD=54] [ID=0]

Legally typed node: 0x2fb6da8: ch = EntryToken [ORD=54] [ID=0]

Legally typed node: 0x2fd4ca0: i32,ch = load 0x2fb6da8, 0x2fdbec0, 0x2fe90e0<LD4[%2]> [ORD=54] [ID=0]

Legally typed node: 0x2fe9be0: i32 = add 0x2fd4ca0, 0x2fe1110 [ORD=55] [ID=0]

Legally typed node: 0x2fe9de0: ch = store 0x2fd4ca0:1, 0x2fe99e0, 0x2fe9be0, 0x2fe90e0<ST4[%21]> [ORD=56] [ID=0]

Legally typed node: 0x2fd4ea0: i32,ch = load 0x2fe9de0, 0x2fdbec0, 0x2fe90e0<LD4[%2]> [ORD=57] [ID=0]

Legally typed node: 0x2fdc0c0: i32 = add 0x2fd4ea0, 0x2fe93e0 [ORD=58] [ID=0]

Legally typed node: 0x2fe1b10: i32,ch = load 0x2fe9de0, 0x2fdc0c0, 0x2fe90e0<LD4[%23]> [ORD=59] [ID=0]

Promote integer result: 0x2fe1d10: i1 = setcc 0x2fe1b10, 0x2fd48a0, 0x2fe8fe0 [ID=0]

Promote integer operand: 0x2fd46a0: ch = brcond 0x2fe9de0, 0x2fe1d10, 0x2fe96e0 [ID=0]

Promote integer operand: 0x2fe1210: i32 = zero_extend 0x2fe1d10 [ID=0]

Legally typed node: 0x2fdbfc0: i32 = Constant<1> [ID=0]

Legally typed node: 0x2fe91e0: i32 = setcc 0x2fe1b10, 0x2fd48a0, 0x2fe8fe0 [ID=0]

Legally typed node: 0x2fe97e0: i32 = and 0x2fe91e0, 0x2fdbfc0 [ID=0]

Legally typed node: 0x2fd46a0: ch = brcond 0x2fe9de0, 0x2fe97e0, 0x2fe96e0 [ID=0]

Legally typed node: 0x2fe9ce0: ch = br 0x2fd46a0, 0x2fe98e0 [ID=0]

Legally typed node: 0x7fff9b4748f0: ch = handlenode 0x2fe9ce0 [ID=0]

Type-legalized selection DAG: BB#4 'startup_fuel_valves3:startup_fuel_valves3.if.then12'
SelectionDAG has 21 nodes:
  0x2fdbec0: i32 = FrameIndex<1> [ORD=54] [ID=-3]

  0x2fe90e0: i32 = undef [ORD=54] [ID=-3]

    0x2fb6da8: ch = EntryToken [ORD=54] [ID=-3]

    0x2fdbec0: <multiple use>
    0x2fe90e0: <multiple use>
  0x2fd4ca0: i32,ch = load 0x2fb6da8, 0x2fdbec0, 0x2fe90e0<LD4[%2]> [ORD=54] [ID=-3]

    0x2fd4ca0: <multiple use>
    0x2fe99e0: i32 = Constant<0> [ORD=56] [ID=-3]

      0x2fd4ca0: <multiple use>
      0x2fe1110: i32 = Constant<12> [ORD=55] [ID=-3]

    0x2fe9be0: i32 = add 0x2fd4ca0, 0x2fe1110 [ORD=55] [ID=-3]

    0x2fe90e0: <multiple use>
  0x2fe9de0: ch = store 0x2fd4ca0:1, 0x2fe99e0, 0x2fe9be0, 0x2fe90e0<ST4[%21]> [ORD=56] [ID=-3]

      0x2fe9de0: <multiple use>
            0x2fe9de0: <multiple use>
                0x2fe9de0: <multiple use>
                0x2fdbec0: <multiple use>
                0x2fe90e0: <multiple use>
              0x2fd4ea0: i32,ch = load 0x2fe9de0, 0x2fdbec0, 0x2fe90e0<LD4[%2]> [ORD=57] [ID=-3]

              0x2fe93e0: i32 = Constant<20> [ORD=58] [ID=-3]

            0x2fdc0c0: i32 = add 0x2fd4ea0, 0x2fe93e0 [ORD=58] [ID=-3]

            0x2fe90e0: <multiple use>
          0x2fe1b10: i32,ch = load 0x2fe9de0, 0x2fdc0c0, 0x2fe90e0<LD4[%23]> [ORD=59] [ID=-3]

          0x2fd48a0: i32 = Constant<-1> [ORD=60] [ID=-3]

          0x2fe8fe0: ch = setne [ID=-3]

        0x2fe91e0: i32 = setcc 0x2fe1b10, 0x2fd48a0, 0x2fe8fe0 [ID=-3]

        0x2fdbfc0: i32 = Constant<1> [ID=-3]

      0x2fe97e0: i32 = and 0x2fe91e0, 0x2fdbfc0 [ID=-3]

      0x2fe96e0: ch = BasicBlock<startup_fuel_valves3.if.end26 0x2fe2ab0> [ID=-3]

    0x2fd46a0: ch = brcond 0x2fe9de0, 0x2fe97e0, 0x2fe96e0 [ID=-3]

    0x2fe98e0: ch = BasicBlock<startup_fuel_valves3.if.then16 0x2fe2950> [ID=-3]

  0x2fe9ce0: ch = br 0x2fd46a0, 0x2fe98e0 [ID=-3]



Replacing.2 0x2fe97e0: i32 = and 0x2fe91e0, 0x2fdbfc0 [ID=-3]

With: 0x2fe91e0: i32 = setcc 0x2fe1b10, 0x2fd48a0, 0x2fe8fe0 [ID=-3]

Optimized type-legalized selection DAG: BB#4 'startup_fuel_valves3:startup_fuel_valves3.if.then12'
SelectionDAG has 19 nodes:
  0x2fdbec0: i32 = FrameIndex<1> [ORD=54] [ID=-3]

  0x2fe90e0: i32 = undef [ORD=54] [ID=-3]

    0x2fb6da8: ch = EntryToken [ORD=54] [ID=-3]

    0x2fdbec0: <multiple use>
    0x2fe90e0: <multiple use>
  0x2fd4ca0: i32,ch = load 0x2fb6da8, 0x2fdbec0, 0x2fe90e0<LD4[%2]> [ORD=54] [ID=-3]

    0x2fd4ca0: <multiple use>
    0x2fe99e0: i32 = Constant<0> [ORD=56] [ID=-3]

      0x2fd4ca0: <multiple use>
      0x2fe1110: i32 = Constant<12> [ORD=55] [ID=-3]

    0x2fe9be0: i32 = add 0x2fd4ca0, 0x2fe1110 [ORD=55] [ID=-3]

    0x2fe90e0: <multiple use>
  0x2fe9de0: ch = store 0x2fd4ca0:1, 0x2fe99e0, 0x2fe9be0, 0x2fe90e0<ST4[%21]> [ORD=56] [ID=-3]

      0x2fe9de0: <multiple use>
          0x2fe9de0: <multiple use>
              0x2fe9de0: <multiple use>
              0x2fdbec0: <multiple use>
              0x2fe90e0: <multiple use>
            0x2fd4ea0: i32,ch = load 0x2fe9de0, 0x2fdbec0, 0x2fe90e0<LD4[%2]> [ORD=57] [ID=-3]

            0x2fe93e0: i32 = Constant<20> [ORD=58] [ID=-3]

          0x2fdc0c0: i32 = add 0x2fd4ea0, 0x2fe93e0 [ORD=58] [ID=-3]

          0x2fe90e0: <multiple use>
        0x2fe1b10: i32,ch = load 0x2fe9de0, 0x2fdc0c0, 0x2fe90e0<LD4[%23]> [ORD=59] [ID=-3]

        0x2fd48a0: i32 = Constant<-1> [ORD=60] [ID=-3]

        0x2fe8fe0: ch = setne [ID=-3]

      0x2fe91e0: i32 = setcc 0x2fe1b10, 0x2fd48a0, 0x2fe8fe0 [ID=-3]

      0x2fe96e0: ch = BasicBlock<startup_fuel_valves3.if.end26 0x2fe2ab0> [ID=-3]

    0x2fd46a0: ch = brcond 0x2fe9de0, 0x2fe91e0, 0x2fe96e0 [ID=-3]

    0x2fe98e0: ch = BasicBlock<startup_fuel_valves3.if.then16 0x2fe2950> [ID=-3]

  0x2fe9ce0: ch = br 0x2fd46a0, 0x2fe98e0 [ID=-3]


Legalized selection DAG: BB#4 'startup_fuel_valves3:startup_fuel_valves3.if.then12'
SelectionDAG has 19 nodes:
  0x2fdbec0: i32 = FrameIndex<1> [ORD=54] [ID=1]

  0x2fe90e0: i32 = undef [ORD=54] [ID=3]

    0x2fb6da8: ch = EntryToken [ORD=54] [ID=0]

    0x2fdbec0: <multiple use>
    0x2fe90e0: <multiple use>
  0x2fd4ca0: i32,ch = load 0x2fb6da8, 0x2fdbec0, 0x2fe90e0<LD4[%2]> [ORD=54] [ID=10]

    0x2fd4ca0: <multiple use>
    0x2fe99e0: i32 = Constant<0> [ORD=56] [ID=2]

      0x2fd4ca0: <multiple use>
      0x2fe1110: i32 = Constant<12> [ORD=55] [ID=4]

    0x2fe9be0: i32 = add 0x2fd4ca0, 0x2fe1110 [ORD=55] [ID=11]

    0x2fe90e0: <multiple use>
  0x2fe9de0: ch = store 0x2fd4ca0:1, 0x2fe99e0, 0x2fe9be0, 0x2fe90e0<ST4[%21]> [ORD=56] [ID=12]

      0x2fe9de0: <multiple use>
          0x2fe9de0: <multiple use>
              0x2fe9de0: <multiple use>
              0x2fdbec0: <multiple use>
              0x2fe90e0: <multiple use>
            0x2fd4ea0: i32,ch = load 0x2fe9de0, 0x2fdbec0, 0x2fe90e0<LD4[%2]> [ORD=57] [ID=13]

            0x2fe93e0: i32 = Constant<20> [ORD=58] [ID=5]

          0x2fdc0c0: i32 = add 0x2fd4ea0, 0x2fe93e0 [ORD=58] [ID=14]

          0x2fe90e0: <multiple use>
        0x2fe1b10: i32,ch = load 0x2fe9de0, 0x2fdc0c0, 0x2fe90e0<LD4[%23]> [ORD=59] [ID=15]

        0x2fd48a0: i32 = Constant<-1> [ORD=60] [ID=6]

        0x2fe8fe0: ch = setne [ID=9]

      0x2fe91e0: i32 = setcc 0x2fe1b10, 0x2fd48a0, 0x2fe8fe0 [ID=16]

      0x2fe96e0: ch = BasicBlock<startup_fuel_valves3.if.end26 0x2fe2ab0> [ID=7]

    0x2fd46a0: ch = brcond 0x2fe9de0, 0x2fe91e0, 0x2fe96e0 [ID=17]

    0x2fe98e0: ch = BasicBlock<startup_fuel_valves3.if.then16 0x2fe2950> [ID=8]

  0x2fe9ce0: ch = br 0x2fd46a0, 0x2fe98e0 [ID=18]


Optimized legalized selection DAG: BB#4 'startup_fuel_valves3:startup_fuel_valves3.if.then12'
SelectionDAG has 19 nodes:
  0x2fdbec0: i32 = FrameIndex<1> [ORD=54] [ID=1]

  0x2fe90e0: i32 = undef [ORD=54] [ID=3]

    0x2fb6da8: ch = EntryToken [ORD=54] [ID=0]

    0x2fdbec0: <multiple use>
    0x2fe90e0: <multiple use>
  0x2fd4ca0: i32,ch = load 0x2fb6da8, 0x2fdbec0, 0x2fe90e0<LD4[%2]> [ORD=54] [ID=10]

    0x2fd4ca0: <multiple use>
    0x2fe99e0: i32 = Constant<0> [ORD=56] [ID=2]

      0x2fd4ca0: <multiple use>
      0x2fe1110: i32 = Constant<12> [ORD=55] [ID=4]

    0x2fe9be0: i32 = add 0x2fd4ca0, 0x2fe1110 [ORD=55] [ID=11]

    0x2fe90e0: <multiple use>
  0x2fe9de0: ch = store 0x2fd4ca0:1, 0x2fe99e0, 0x2fe9be0, 0x2fe90e0<ST4[%21]> [ORD=56] [ID=12]

      0x2fe9de0: <multiple use>
          0x2fe9de0: <multiple use>
              0x2fe9de0: <multiple use>
              0x2fdbec0: <multiple use>
              0x2fe90e0: <multiple use>
            0x2fd4ea0: i32,ch = load 0x2fe9de0, 0x2fdbec0, 0x2fe90e0<LD4[%2]> [ORD=57] [ID=13]

            0x2fe93e0: i32 = Constant<20> [ORD=58] [ID=5]

          0x2fdc0c0: i32 = add 0x2fd4ea0, 0x2fe93e0 [ORD=58] [ID=14]

          0x2fe90e0: <multiple use>
        0x2fe1b10: i32,ch = load 0x2fe9de0, 0x2fdc0c0, 0x2fe90e0<LD4[%23]> [ORD=59] [ID=15]

        0x2fd48a0: i32 = Constant<-1> [ORD=60] [ID=6]

        0x2fe8fe0: ch = setne [ID=9]

      0x2fe91e0: i32 = setcc 0x2fe1b10, 0x2fd48a0, 0x2fe8fe0 [ID=16]

      0x2fe96e0: ch = BasicBlock<startup_fuel_valves3.if.end26 0x2fe2ab0> [ID=7]

    0x2fd46a0: ch = brcond 0x2fe9de0, 0x2fe91e0, 0x2fe96e0 [ID=17]

    0x2fe98e0: ch = BasicBlock<startup_fuel_valves3.if.then16 0x2fe2950> [ID=8]

  0x2fe9ce0: ch = br 0x2fd46a0, 0x2fe98e0 [ID=18]


===== Instruction selection begins: BB#4 'startup_fuel_valves3.if.then12'
ISEL: Starting pattern match on root node: 0x2fe9ce0: ch = br 0x2fd46a0, 0x2fe98e0 [ID=18]

  Initial Opcode index to 1938
  Morphed node: 0x2fe9ce0: ch = JAL 0x2fe98e0, 0x2fd46a0

ISEL: Match complete!
=> 0x2fe9ce0: ch = JAL 0x2fe98e0, 0x2fd46a0

ISEL: Starting pattern match on root node: 0x2fd46a0: ch = brcond 0x2fe9de0, 0x2fe91e0, 0x2fe96e0 [ID=17]

  Initial Opcode index to 1439
  Skipped scope entry (due to false predicate) at index 1456, continuing at 1477
  Morphed node: 0x2fd46a0: ch = BNE 0x2fe96e0, 0x2fe1b10, 0x2fd48a0, 0x2fe9de0

ISEL: Match complete!
=> 0x2fd46a0: ch = BNE 0x2fe96e0, 0x2fe1b10, 0x2fd48a0, 0x2fe9de0

ISEL: Starting pattern match on root node: 0x2fe1b10: i32,ch = load 0x2fe9de0, 0x2fdc0c0, 0x2fe90e0<LD4[%23]> [ORD=59] [ID=15]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2fe1b10: i32,ch = LW 0x2fd4ea0, 0x2fe8fe0, 0x2fe9de0<Mem:LD4[%23]> [ORD=59]

ISEL: Match complete!
=> 0x2fe1b10: i32,ch = LW 0x2fd4ea0, 0x2fe8fe0, 0x2fe9de0<Mem:LD4[%23]> [ORD=59]

ISEL: Starting pattern match on root node: 0x2fd4ea0: i32,ch = load 0x2fe9de0, 0x2fdbec0, 0x2fe90e0<LD4[%2]> [ORD=57] [ID=13]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2fd4ea0: i32,ch = LW 0x2fdbec0, 0x2fe93e0, 0x2fe9de0<Mem:LD4[%2]> [ORD=57]

ISEL: Match complete!
=> 0x2fd4ea0: i32,ch = LW 0x2fdbec0, 0x2fe93e0, 0x2fe9de0<Mem:LD4[%2]> [ORD=57]

ISEL: Starting pattern match on root node: 0x2fe9de0: ch = store 0x2fd4ca0:1, 0x2fe99e0, 0x2fe9be0, 0x2fe90e0<ST4[%21]> [ORD=56] [ID=12]

  Initial Opcode index to 178
  Morphed node: 0x2fe9de0: ch = SW 0x2fe99e0, 0x2fd4ca0, 0x2fdc0c0, 0x2fd4ca0:1<Mem:ST4[%21]> [ORD=56]

ISEL: Match complete!
=> 0x2fe9de0: ch = SW 0x2fe99e0, 0x2fd4ca0, 0x2fdc0c0, 0x2fd4ca0:1<Mem:ST4[%21]> [ORD=56]

ISEL: Starting pattern match on root node: 0x2fd4ca0: i32,ch = load 0x2fb6da8, 0x2fdbec0, 0x2fe90e0<LD4[%2]> [ORD=54] [ID=10]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2fd4ca0: i32,ch = LW 0x2fdbec0, 0x2fe93e0, 0x2fb6da8<Mem:LD4[%2]> [ORD=54]

ISEL: Match complete!
=> 0x2fd4ca0: i32,ch = LW 0x2fdbec0, 0x2fe93e0, 0x2fb6da8<Mem:LD4[%2]> [ORD=54]

=> 0x2fe98e0: ch = BasicBlock<startup_fuel_valves3.if.then16 0x2fe2950>

=> 0x2fe96e0: ch = BasicBlock<startup_fuel_valves3.if.end26 0x2fe2ab0>

ISEL: Starting pattern match on root node: 0x2fd48a0: i32 = Constant<-1> [ORD=60] [ID=6]

  Initial Opcode index to 1226
comparing 0 and -1 and returning value:0
  Skipped scope entry (due to false predicate) at index 1228, continuing at 1236
  Morphed node: 0x2fd48a0: i32 = ADDI 0x2fe90e0, 0x2fe1110 [ORD=60]

ISEL: Match complete!
=> 0x2fd48a0: i32 = ADDI 0x2fe90e0, 0x2fe1110 [ORD=60]

ISEL: Starting pattern match on root node: 0x2fe99e0: i32 = Constant<0> [ORD=56] [ID=2]

  Initial Opcode index to 1226
comparing 0 and 0 and returning value:1
ISEL: Match complete!
=> 0x2fe99e0: i32 = Constant<0> [ORD=56] [ID=2]

=> 0x2fb6da8: ch = EntryToken [ORD=54]

===== Instruction selection ends:
Selected selection DAG: BB#4 'startup_fuel_valves3:startup_fuel_valves3.if.then12'
SelectionDAG has 18 nodes:
    0x2fe91e0: <multiple use>
    0x2fe93e0: <multiple use>
    0x2fb6da8: ch = EntryToken [ORD=54]

  0x2fd4ca0: i32,ch = LW 0x2fe91e0, 0x2fe93e0, 0x2fb6da8<Mem:LD4[%2]> [ORD=54]

    0x2fe90e0: <multiple use>
    0x2fd4ca0: <multiple use>
    0x2fdc0c0: i32 = TargetConstant<12>

    0x2fd4ca0: <multiple use>
  0x2fe9de0: ch = SW 0x2fe90e0, 0x2fd4ca0, 0x2fdc0c0, 0x2fd4ca0:1<Mem:ST4[%21]> [ORD=56]

  0x2fe93e0: i32 = TargetConstant<0>

  0x2fe90e0: i32 = Register %zero

    0x2fe99e0: i32 = Register %t5

    0x2fe9be0: i32 = TargetFrameIndex<1>

  0x2fe91e0: i32 = ADDI 0x2fe99e0, 0x2fe9be0 [ORD=54]

    0x2fe98e0: ch = BasicBlock<startup_fuel_valves3.if.then16 0x2fe2950>

      0x2fe96e0: ch = BasicBlock<startup_fuel_valves3.if.end26 0x2fe2ab0>

          0x2fe91e0: <multiple use>
          0x2fe93e0: <multiple use>
          0x2fe9de0: <multiple use>
        0x2fd4ea0: i32,ch = LW 0x2fe91e0, 0x2fe93e0, 0x2fe9de0<Mem:LD4[%2]> [ORD=57]

        0x2fe8fe0: i32 = TargetConstant<20>

        0x2fe9de0: <multiple use>
      0x2fe1b10: i32,ch = LW 0x2fd4ea0, 0x2fe8fe0, 0x2fe9de0<Mem:LD4[%23]> [ORD=59]

        0x2fe90e0: <multiple use>
        0x2fe1110: i32 = TargetConstant<-1>

      0x2fd48a0: i32 = ADDI 0x2fe90e0, 0x2fe1110 [ORD=60]

      0x2fe9de0: <multiple use>
    0x2fd46a0: ch = BNE 0x2fe96e0, 0x2fe1b10, 0x2fd48a0, 0x2fe9de0

  0x2fe9ce0: ch = JAL 0x2fe98e0, 0x2fd46a0


********** List Scheduling BB#4 'startup_fuel_valves3.if.then12' **********
SU(0): 0x2fe9ce0: ch = JAL 0x2fe98e0, 0x2fd46a0 [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x2fd46a0: ch = BNE 0x2fe96e0, 0x2fe1b10, 0x2fd48a0, 0x2fe9de0 [ID=1]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
   val SU(6): Latency=1
   val SU(5): Latency=1
   ch  SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x2fe9de0: ch = SW 0x2fe90e0, 0x2fd4ca0, 0x2fdc0c0, 0x2fd4ca0:1<Mem:ST4[%21]> [ORD=56] [ID=2]

  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 4
  Predecessors:
   val SU(3): Latency=1
   ch  SU(3): Latency=1
  Successors:
   ch  SU(1): Latency=1
   ch  SU(6): Latency=1
   ch  SU(7): Latency=1

SU(3): 0x2fd4ca0: i32,ch = LW 0x2fe91e0, 0x2fe93e0, 0x2fb6da8<Mem:LD4[%2]> [ORD=54] [ID=3]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 5
  Predecessors:
   val SU(4): Latency=1
  Successors:
   val SU(2): Latency=1
   ch  SU(2): Latency=1

SU(4): 0x2fe91e0: i32 = ADDI 0x2fe99e0, 0x2fe9be0 [ORD=54] [ID=4]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
   val SU(3): Latency=1
   val SU(7): Latency=1

SU(5): 0x2fd48a0: i32 = ADDI 0x2fe90e0, 0x2fe1110 [ORD=60] [ID=5]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
   val SU(1): Latency=1

SU(6): 0x2fe1b10: i32,ch = LW 0x2fd4ea0, 0x2fe8fe0, 0x2fe9de0<Mem:LD4[%23]> [ORD=59] [ID=6]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
   val SU(7): Latency=1
   ch  SU(2): Latency=1
  Successors:
   val SU(1): Latency=1

SU(7): 0x2fd4ea0: i32,ch = LW 0x2fe91e0, 0x2fe93e0, 0x2fe9de0<Mem:LD4[%2]> [ORD=57] [ID=7]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 3
  Height             : 3
  Predecessors:
   val SU(4): Latency=1
   ch  SU(2): Latency=1
  Successors:
   val SU(6): Latency=1


Examining Available:
Height 0: SU(0): 0x2fe9ce0: ch = JAL 0x2fe98e0, 0x2fd46a0 [ID=0]


*** Scheduling [0]: SU(0): 0x2fe9ce0: ch = JAL 0x2fe98e0, 0x2fd46a0 [ID=0]


Examining Available:
Height 1: SU(1): 0x2fd46a0: ch = BNE 0x2fe96e0, 0x2fe1b10, 0x2fd48a0, 0x2fe9de0 [ID=1]


*** Scheduling [1]: SU(1): 0x2fd46a0: ch = BNE 0x2fe96e0, 0x2fe1b10, 0x2fd48a0, 0x2fe9de0 [ID=1]


Examining Available:
Height 2: SU(5): 0x2fd48a0: i32 = ADDI 0x2fe90e0, 0x2fe1110 [ORD=60] [ID=5]

Height 2: SU(6): 0x2fe1b10: i32,ch = LW 0x2fd4ea0, 0x2fe8fe0, 0x2fe9de0<Mem:LD4[%23]> [ORD=59] [ID=6]


*** Scheduling [2]: SU(5): 0x2fd48a0: i32 = ADDI 0x2fe90e0, 0x2fe1110 [ORD=60] [ID=5]


Examining Available:
Height 2: SU(6): 0x2fe1b10: i32,ch = LW 0x2fd4ea0, 0x2fe8fe0, 0x2fe9de0<Mem:LD4[%23]> [ORD=59] [ID=6]


*** Scheduling [3]: SU(6): 0x2fe1b10: i32,ch = LW 0x2fd4ea0, 0x2fe8fe0, 0x2fe9de0<Mem:LD4[%23]> [ORD=59] [ID=6]


Examining Available:
Height 4: SU(7): 0x2fd4ea0: i32,ch = LW 0x2fe91e0, 0x2fe93e0, 0x2fe9de0<Mem:LD4[%2]> [ORD=57] [ID=7]


*** Scheduling [4]: SU(7): 0x2fd4ea0: i32,ch = LW 0x2fe91e0, 0x2fe93e0, 0x2fe9de0<Mem:LD4[%2]> [ORD=57] [ID=7]


Examining Available:
Height 5: SU(2): 0x2fe9de0: ch = SW 0x2fe90e0, 0x2fd4ca0, 0x2fdc0c0, 0x2fd4ca0:1<Mem:ST4[%21]> [ORD=56] [ID=2]


*** Scheduling [5]: SU(2): 0x2fe9de0: ch = SW 0x2fe90e0, 0x2fd4ca0, 0x2fdc0c0, 0x2fd4ca0:1<Mem:ST4[%21]> [ORD=56] [ID=2]


Examining Available:
Height 6: SU(3): 0x2fd4ca0: i32,ch = LW 0x2fe91e0, 0x2fe93e0, 0x2fb6da8<Mem:LD4[%2]> [ORD=54] [ID=3]


*** Scheduling [6]: SU(3): 0x2fd4ca0: i32,ch = LW 0x2fe91e0, 0x2fe93e0, 0x2fb6da8<Mem:LD4[%2]> [ORD=54] [ID=3]


Examining Available:
Height 7: SU(4): 0x2fe91e0: i32 = ADDI 0x2fe99e0, 0x2fe9be0 [ORD=54] [ID=4]


*** Scheduling [7]: SU(4): 0x2fe91e0: i32 = ADDI 0x2fe99e0, 0x2fe9be0 [ORD=54] [ID=4]

*** Final schedule ***
SU(4): 0x2fe91e0: i32 = ADDI 0x2fe99e0, 0x2fe9be0 [ORD=54] [ID=4]

SU(3): 0x2fd4ca0: i32,ch = LW 0x2fe91e0, 0x2fe93e0, 0x2fb6da8<Mem:LD4[%2]> [ORD=54] [ID=3]

SU(2): 0x2fe9de0: ch = SW 0x2fe90e0, 0x2fd4ca0, 0x2fdc0c0, 0x2fd4ca0:1<Mem:ST4[%21]> [ORD=56] [ID=2]

SU(7): 0x2fd4ea0: i32,ch = LW 0x2fe91e0, 0x2fe93e0, 0x2fe9de0<Mem:LD4[%2]> [ORD=57] [ID=7]

SU(6): 0x2fe1b10: i32,ch = LW 0x2fd4ea0, 0x2fe8fe0, 0x2fe9de0<Mem:LD4[%23]> [ORD=59] [ID=6]

SU(5): 0x2fd48a0: i32 = ADDI 0x2fe90e0, 0x2fe1110 [ORD=60] [ID=5]

SU(1): 0x2fd46a0: ch = BNE 0x2fe96e0, 0x2fe1b10, 0x2fd48a0, 0x2fe9de0 [ID=1]

SU(0): 0x2fe9ce0: ch = JAL 0x2fe98e0, 0x2fd46a0 [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %26 = load i32** %2, align 4
I was here to add   %2 = alloca i32*, align 4
with I type i32*and sd value :0x2fe91e0: i32 = FrameIndex<1>
new load?0x2fe1110: i32,ch = load 0x2fb6da8, 0x2fe91e0, 0x2fe99e0<LD4[%2]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x2fe9be0: i32 = Constant<0>

    0x2fb6da8: ch = EntryToken

    0x2fe91e0: i32 = FrameIndex<1>

    0x2fe99e0: i32 = undef

  0x2fe1110: i32,ch = load 0x2fb6da8, 0x2fe91e0, 0x2fe99e0<LD4[%2]>

  0x2fb6da8: ch = EntryToken


visiting load instruction   %28 = load i32* %27, align 4
with I type i32and sd value :0x2fe93e0: i32 = add 0x2fe1110, 0x2fdc0c0
new load?0x2fe8fe0: i32,ch = load 0x2fb6da8, 0x2fe93e0, 0x2fe99e0<LD4[%27]>
dag after load is dealt with?SelectionDAG has 9 nodes:
  0x2fe9be0: i32 = Constant<0>

  0x2fe99e0: i32 = undef [ORD=61]

  0x2fe90e0: i64 = Constant<4>

    0x2fb6da8: <multiple use>
        0x2fb6da8: <multiple use>
        0x2fe91e0: i32 = FrameIndex<1> [ORD=61]

        0x2fe99e0: <multiple use>
      0x2fe1110: i32,ch = load 0x2fb6da8, 0x2fe91e0, 0x2fe99e0<LD4[%2]> [ORD=61]

      0x2fdc0c0: i32 = Constant<4> [ORD=62]

    0x2fe93e0: i32 = add 0x2fe1110, 0x2fdc0c0 [ORD=62]

    0x2fe99e0: <multiple use>
  0x2fe8fe0: i32,ch = load 0x2fb6da8, 0x2fe93e0, 0x2fe99e0<LD4[%27]>

  0x2fb6da8: ch = EntryToken [ORD=61]


visiting load instruction   %29 = load i32** %2, align 4
with I type i32*and sd value :0x2fe91e0: i32 = FrameIndex<1>
new load?0x2fe1110: i32,ch = load 0x2fb6da8, 0x2fe91e0, 0x2fe99e0<LD4[%2]>
dag after load is dealt with?SelectionDAG has 9 nodes:
  0x2fe9be0: i32 = Constant<0>

  0x2fe99e0: i32 = undef [ORD=61]

  0x2fe90e0: i64 = Constant<4>

    0x2fb6da8: <multiple use>
        0x2fb6da8: <multiple use>
        0x2fe91e0: i32 = FrameIndex<1> [ORD=61]

        0x2fe99e0: <multiple use>
      0x2fe1110: i32,ch = load 0x2fb6da8, 0x2fe91e0, 0x2fe99e0<LD4[%2]> [ORD=61]

      0x2fdc0c0: i32 = Constant<4> [ORD=62]

    0x2fe93e0: i32 = add 0x2fe1110, 0x2fdc0c0 [ORD=62]

    0x2fe99e0: <multiple use>
  0x2fe8fe0: i32,ch = load 0x2fb6da8, 0x2fe93e0, 0x2fe99e0<LD4[%27]> [ORD=63]

  0x2fb6da8: ch = EntryToken [ORD=61]


store visit is after?  store i32 %28, i32* %30, align 4
whats in dag after store?SelectionDAG has 14 nodes:
  0x2fb6da8: ch = EntryToken [ORD=61]

  0x2fe9be0: i32 = Constant<0>

  0x2fe99e0: i32 = undef [ORD=61]

    0x2fb6da8: <multiple use>
    0x2fe91e0: i32 = FrameIndex<1> [ORD=61]

    0x2fe99e0: <multiple use>
  0x2fe1110: i32,ch = load 0x2fb6da8, 0x2fe91e0, 0x2fe99e0<LD4[%2]> [ORD=61]

  0x2fe90e0: i64 = Constant<4>

    0x2fb6da8: <multiple use>
      0x2fe1110: <multiple use>
      0x2fdc0c0: i32 = Constant<4> [ORD=62]

    0x2fe93e0: i32 = add 0x2fe1110, 0x2fdc0c0 [ORD=62]

    0x2fe99e0: <multiple use>
  0x2fe8fe0: i32,ch = load 0x2fb6da8, 0x2fe93e0, 0x2fe99e0<LD4[%27]> [ORD=63]

  0x2fe9ce0: i64 = Constant<20>

      0x2fe1110: <multiple use>
      0x2fe8fe0: <multiple use>
      0x2fe1110: <multiple use>
    0x2fd4ea0: ch = TokenFactor 0x2fe1110:1, 0x2fe8fe0:1, 0x2fe1110:1 [ORD=66]

    0x2fe8fe0: <multiple use>
      0x2fe1110: <multiple use>
      0x2fd46a0: i32 = Constant<20> [ORD=65]

    0x2fe1b10: i32 = add 0x2fe1110, 0x2fd46a0 [ORD=65]

    0x2fe99e0: <multiple use>
  0x2fe9de0: ch = store 0x2fd4ea0, 0x2fe8fe0, 0x2fe1b10, 0x2fe99e0<ST4[%30]> [ORD=66]


Initial selection DAG: BB#5 'startup_fuel_valves3:startup_fuel_valves3.if.then16'
SelectionDAG has 16 nodes:
  0x2fb6da8: ch = EntryToken [ORD=61]

  0x2fe9be0: i32 = Constant<0>

  0x2fe99e0: i32 = undef [ORD=61]

    0x2fb6da8: <multiple use>
    0x2fe91e0: i32 = FrameIndex<1> [ORD=61]

    0x2fe99e0: <multiple use>
  0x2fe1110: i32,ch = load 0x2fb6da8, 0x2fe91e0, 0x2fe99e0<LD4[%2]> [ORD=61]

  0x2fe90e0: i64 = Constant<4>

    0x2fb6da8: <multiple use>
      0x2fe1110: <multiple use>
      0x2fdc0c0: i32 = Constant<4> [ORD=62]

    0x2fe93e0: i32 = add 0x2fe1110, 0x2fdc0c0 [ORD=62]

    0x2fe99e0: <multiple use>
  0x2fe8fe0: i32,ch = load 0x2fb6da8, 0x2fe93e0, 0x2fe99e0<LD4[%27]> [ORD=63]

  0x2fe9ce0: i64 = Constant<20>

        0x2fe1110: <multiple use>
        0x2fe8fe0: <multiple use>
        0x2fe1110: <multiple use>
      0x2fd4ea0: ch = TokenFactor 0x2fe1110:1, 0x2fe8fe0:1, 0x2fe1110:1 [ORD=66]

      0x2fe8fe0: <multiple use>
        0x2fe1110: <multiple use>
        0x2fd46a0: i32 = Constant<20> [ORD=65]

      0x2fe1b10: i32 = add 0x2fe1110, 0x2fd46a0 [ORD=65]

      0x2fe99e0: <multiple use>
    0x2fe9de0: ch = store 0x2fd4ea0, 0x2fe8fe0, 0x2fe1b10, 0x2fe99e0<ST4[%30]> [ORD=66]

    0x2fd4ca0: ch = BasicBlock<startup_fuel_valves3.if.end26 0x2fe2ab0>

  0x2fe98e0: ch = br 0x2fe9de0, 0x2fd4ca0



Replacing.1 0x2fd4ea0: ch = TokenFactor 0x2fe1110:1, 0x2fe8fe0:1, 0x2fe1110:1 [ORD=66]

With: 0x2fe96e0: ch = TokenFactor 0x2fe1110:1, 0x2fe8fe0:1
 and 0 other values
Optimized lowered selection DAG: BB#5 'startup_fuel_valves3:startup_fuel_valves3.if.then16'
SelectionDAG has 13 nodes:
  0x2fb6da8: ch = EntryToken [ORD=61]

  0x2fe99e0: i32 = undef [ORD=61]

    0x2fb6da8: <multiple use>
    0x2fe91e0: i32 = FrameIndex<1> [ORD=61]

    0x2fe99e0: <multiple use>
  0x2fe1110: i32,ch = load 0x2fb6da8, 0x2fe91e0, 0x2fe99e0<LD4[%2]> [ORD=61]

    0x2fb6da8: <multiple use>
      0x2fe1110: <multiple use>
      0x2fdc0c0: i32 = Constant<4> [ORD=62]

    0x2fe93e0: i32 = add 0x2fe1110, 0x2fdc0c0 [ORD=62]

    0x2fe99e0: <multiple use>
  0x2fe8fe0: i32,ch = load 0x2fb6da8, 0x2fe93e0, 0x2fe99e0<LD4[%27]> [ORD=63]

        0x2fe1110: <multiple use>
        0x2fe8fe0: <multiple use>
      0x2fe96e0: ch = TokenFactor 0x2fe1110:1, 0x2fe8fe0:1

      0x2fe8fe0: <multiple use>
        0x2fe1110: <multiple use>
        0x2fd46a0: i32 = Constant<20> [ORD=65]

      0x2fe1b10: i32 = add 0x2fe1110, 0x2fd46a0 [ORD=65]

      0x2fe99e0: <multiple use>
    0x2fe9de0: ch = store 0x2fe96e0, 0x2fe8fe0, 0x2fe1b10, 0x2fe99e0<ST4[%30]> [ORD=66]

    0x2fd4ca0: ch = BasicBlock<startup_fuel_valves3.if.end26 0x2fe2ab0>

  0x2fe98e0: ch = br 0x2fe9de0, 0x2fd4ca0


Legally typed node: 0x2fd4ca0: ch = BasicBlock<startup_fuel_valves3.if.end26 0x2fe2ab0> [ID=0]

Legally typed node: 0x2fd46a0: i32 = Constant<20> [ORD=65] [ID=0]

Legally typed node: 0x2fdc0c0: i32 = Constant<4> [ORD=62] [ID=0]

Legally typed node: 0x2fe99e0: i32 = undef [ORD=61] [ID=0]

Legally typed node: 0x2fe91e0: i32 = FrameIndex<1> [ORD=61] [ID=0]

Legally typed node: 0x2fb6da8: ch = EntryToken [ORD=61] [ID=0]

Legally typed node: 0x2fe1110: i32,ch = load 0x2fb6da8, 0x2fe91e0, 0x2fe99e0<LD4[%2]> [ORD=61] [ID=0]

Legally typed node: 0x2fe93e0: i32 = add 0x2fe1110, 0x2fdc0c0 [ORD=62] [ID=0]

Legally typed node: 0x2fe8fe0: i32,ch = load 0x2fb6da8, 0x2fe93e0, 0x2fe99e0<LD4[%27]> [ORD=63] [ID=0]

Legally typed node: 0x2fe96e0: ch = TokenFactor 0x2fe1110:1, 0x2fe8fe0:1 [ID=0]

Legally typed node: 0x2fe1b10: i32 = add 0x2fe1110, 0x2fd46a0 [ORD=65] [ID=0]

Legally typed node: 0x2fe9de0: ch = store 0x2fe96e0, 0x2fe8fe0, 0x2fe1b10, 0x2fe99e0<ST4[%30]> [ORD=66] [ID=0]

Legally typed node: 0x2fe98e0: ch = br 0x2fe9de0, 0x2fd4ca0 [ID=0]

Legally typed node: 0x7fff9b4748f0: ch = handlenode 0x2fe98e0 [ID=0]

Type-legalized selection DAG: BB#5 'startup_fuel_valves3:startup_fuel_valves3.if.then16'
SelectionDAG has 13 nodes:
  0x2fb6da8: ch = EntryToken [ORD=61] [ID=-3]

  0x2fe99e0: i32 = undef [ORD=61] [ID=-3]

    0x2fb6da8: <multiple use>
    0x2fe91e0: i32 = FrameIndex<1> [ORD=61] [ID=-3]

    0x2fe99e0: <multiple use>
  0x2fe1110: i32,ch = load 0x2fb6da8, 0x2fe91e0, 0x2fe99e0<LD4[%2]> [ORD=61] [ID=-3]

    0x2fb6da8: <multiple use>
      0x2fe1110: <multiple use>
      0x2fdc0c0: i32 = Constant<4> [ORD=62] [ID=-3]

    0x2fe93e0: i32 = add 0x2fe1110, 0x2fdc0c0 [ORD=62] [ID=-3]

    0x2fe99e0: <multiple use>
  0x2fe8fe0: i32,ch = load 0x2fb6da8, 0x2fe93e0, 0x2fe99e0<LD4[%27]> [ORD=63] [ID=-3]

        0x2fe1110: <multiple use>
        0x2fe8fe0: <multiple use>
      0x2fe96e0: ch = TokenFactor 0x2fe1110:1, 0x2fe8fe0:1 [ID=-3]

      0x2fe8fe0: <multiple use>
        0x2fe1110: <multiple use>
        0x2fd46a0: i32 = Constant<20> [ORD=65] [ID=-3]

      0x2fe1b10: i32 = add 0x2fe1110, 0x2fd46a0 [ORD=65] [ID=-3]

      0x2fe99e0: <multiple use>
    0x2fe9de0: ch = store 0x2fe96e0, 0x2fe8fe0, 0x2fe1b10, 0x2fe99e0<ST4[%30]> [ORD=66] [ID=-3]

    0x2fd4ca0: ch = BasicBlock<startup_fuel_valves3.if.end26 0x2fe2ab0> [ID=-3]

  0x2fe98e0: ch = br 0x2fe9de0, 0x2fd4ca0 [ID=-3]


Legalized selection DAG: BB#5 'startup_fuel_valves3:startup_fuel_valves3.if.then16'
SelectionDAG has 13 nodes:
  0x2fb6da8: ch = EntryToken [ORD=61] [ID=0]

  0x2fe99e0: i32 = undef [ORD=61] [ID=2]

    0x2fb6da8: <multiple use>
    0x2fe91e0: i32 = FrameIndex<1> [ORD=61] [ID=1]

    0x2fe99e0: <multiple use>
  0x2fe1110: i32,ch = load 0x2fb6da8, 0x2fe91e0, 0x2fe99e0<LD4[%2]> [ORD=61] [ID=6]

    0x2fb6da8: <multiple use>
      0x2fe1110: <multiple use>
      0x2fdc0c0: i32 = Constant<4> [ORD=62] [ID=3]

    0x2fe93e0: i32 = add 0x2fe1110, 0x2fdc0c0 [ORD=62] [ID=8]

    0x2fe99e0: <multiple use>
  0x2fe8fe0: i32,ch = load 0x2fb6da8, 0x2fe93e0, 0x2fe99e0<LD4[%27]> [ORD=63] [ID=9]

        0x2fe1110: <multiple use>
        0x2fe8fe0: <multiple use>
      0x2fe96e0: ch = TokenFactor 0x2fe1110:1, 0x2fe8fe0:1 [ID=10]

      0x2fe8fe0: <multiple use>
        0x2fe1110: <multiple use>
        0x2fd46a0: i32 = Constant<20> [ORD=65] [ID=4]

      0x2fe1b10: i32 = add 0x2fe1110, 0x2fd46a0 [ORD=65] [ID=7]

      0x2fe99e0: <multiple use>
    0x2fe9de0: ch = store 0x2fe96e0, 0x2fe8fe0, 0x2fe1b10, 0x2fe99e0<ST4[%30]> [ORD=66] [ID=11]

    0x2fd4ca0: ch = BasicBlock<startup_fuel_valves3.if.end26 0x2fe2ab0> [ID=5]

  0x2fe98e0: ch = br 0x2fe9de0, 0x2fd4ca0 [ID=12]


Optimized legalized selection DAG: BB#5 'startup_fuel_valves3:startup_fuel_valves3.if.then16'
SelectionDAG has 13 nodes:
  0x2fb6da8: ch = EntryToken [ORD=61] [ID=0]

  0x2fe99e0: i32 = undef [ORD=61] [ID=2]

    0x2fb6da8: <multiple use>
    0x2fe91e0: i32 = FrameIndex<1> [ORD=61] [ID=1]

    0x2fe99e0: <multiple use>
  0x2fe1110: i32,ch = load 0x2fb6da8, 0x2fe91e0, 0x2fe99e0<LD4[%2]> [ORD=61] [ID=6]

    0x2fb6da8: <multiple use>
      0x2fe1110: <multiple use>
      0x2fdc0c0: i32 = Constant<4> [ORD=62] [ID=3]

    0x2fe93e0: i32 = add 0x2fe1110, 0x2fdc0c0 [ORD=62] [ID=8]

    0x2fe99e0: <multiple use>
  0x2fe8fe0: i32,ch = load 0x2fb6da8, 0x2fe93e0, 0x2fe99e0<LD4[%27]> [ORD=63] [ID=9]

        0x2fe1110: <multiple use>
        0x2fe8fe0: <multiple use>
      0x2fe96e0: ch = TokenFactor 0x2fe1110:1, 0x2fe8fe0:1 [ID=10]

      0x2fe8fe0: <multiple use>
        0x2fe1110: <multiple use>
        0x2fd46a0: i32 = Constant<20> [ORD=65] [ID=4]

      0x2fe1b10: i32 = add 0x2fe1110, 0x2fd46a0 [ORD=65] [ID=7]

      0x2fe99e0: <multiple use>
    0x2fe9de0: ch = store 0x2fe96e0, 0x2fe8fe0, 0x2fe1b10, 0x2fe99e0<ST4[%30]> [ORD=66] [ID=11]

    0x2fd4ca0: ch = BasicBlock<startup_fuel_valves3.if.end26 0x2fe2ab0> [ID=5]

  0x2fe98e0: ch = br 0x2fe9de0, 0x2fd4ca0 [ID=12]


===== Instruction selection begins: BB#5 'startup_fuel_valves3.if.then16'
ISEL: Starting pattern match on root node: 0x2fe98e0: ch = br 0x2fe9de0, 0x2fd4ca0 [ID=12]

  Initial Opcode index to 1938
  Morphed node: 0x2fe98e0: ch = JAL 0x2fd4ca0, 0x2fe9de0

ISEL: Match complete!
=> 0x2fe98e0: ch = JAL 0x2fd4ca0, 0x2fe9de0

ISEL: Starting pattern match on root node: 0x2fe9de0: ch = store 0x2fe96e0, 0x2fe8fe0, 0x2fe1b10, 0x2fe99e0<ST4[%30]> [ORD=66] [ID=11]

  Initial Opcode index to 178
  Morphed node: 0x2fe9de0: ch = SW 0x2fe8fe0, 0x2fe1110, 0x2fe9be0, 0x2fe96e0<Mem:ST4[%30]> [ORD=66]

ISEL: Match complete!
=> 0x2fe9de0: ch = SW 0x2fe8fe0, 0x2fe1110, 0x2fe9be0, 0x2fe96e0<Mem:ST4[%30]> [ORD=66]

=> 0x2fe96e0: ch = TokenFactor 0x2fe1110:1, 0x2fe8fe0:1

ISEL: Starting pattern match on root node: 0x2fe8fe0: i32,ch = load 0x2fb6da8, 0x2fe93e0, 0x2fe99e0<LD4[%27]> [ORD=63] [ID=9]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2fe8fe0: i32,ch = LW 0x2fe1110, 0x2fd46a0, 0x2fb6da8<Mem:LD4[%27]> [ORD=63]

ISEL: Match complete!
=> 0x2fe8fe0: i32,ch = LW 0x2fe1110, 0x2fd46a0, 0x2fb6da8<Mem:LD4[%27]> [ORD=63]

ISEL: Starting pattern match on root node: 0x2fe1110: i32,ch = load 0x2fb6da8, 0x2fe91e0, 0x2fe99e0<LD4[%2]> [ORD=61] [ID=6]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2fe1110: i32,ch = LW 0x2fe91e0, 0x2fdc0c0, 0x2fb6da8<Mem:LD4[%2]> [ORD=61]

ISEL: Match complete!
=> 0x2fe1110: i32,ch = LW 0x2fe91e0, 0x2fdc0c0, 0x2fb6da8<Mem:LD4[%2]> [ORD=61]

=> 0x2fd4ca0: ch = BasicBlock<startup_fuel_valves3.if.end26 0x2fe2ab0>

=> 0x2fb6da8: ch = EntryToken [ORD=61]

===== Instruction selection ends:
Selected selection DAG: BB#5 'startup_fuel_valves3:startup_fuel_valves3.if.then16'
SelectionDAG has 13 nodes:
  0x2fb6da8: ch = EntryToken [ORD=61]

      0x2fe99e0: i32 = Register %t5

      0x2fe93e0: i32 = TargetFrameIndex<1>

    0x2fe91e0: i32 = ADDI 0x2fe99e0, 0x2fe93e0 [ORD=61]

    0x2fdc0c0: i32 = TargetConstant<0>

    0x2fb6da8: <multiple use>
  0x2fe1110: i32,ch = LW 0x2fe91e0, 0x2fdc0c0, 0x2fb6da8<Mem:LD4[%2]> [ORD=61]

    0x2fe1110: <multiple use>
    0x2fd46a0: i32 = TargetConstant<4>

    0x2fb6da8: <multiple use>
  0x2fe8fe0: i32,ch = LW 0x2fe1110, 0x2fd46a0, 0x2fb6da8<Mem:LD4[%27]> [ORD=63]

    0x2fd4ca0: ch = BasicBlock<startup_fuel_valves3.if.end26 0x2fe2ab0>

      0x2fe8fe0: <multiple use>
      0x2fe1110: <multiple use>
      0x2fe9be0: i32 = TargetConstant<20>

        0x2fe1110: <multiple use>
        0x2fe8fe0: <multiple use>
      0x2fe96e0: ch = TokenFactor 0x2fe1110:1, 0x2fe8fe0:1

    0x2fe9de0: ch = SW 0x2fe8fe0, 0x2fe1110, 0x2fe9be0, 0x2fe96e0<Mem:ST4[%30]> [ORD=66]

  0x2fe98e0: ch = JAL 0x2fd4ca0, 0x2fe9de0


********** List Scheduling BB#5 'startup_fuel_valves3.if.then16' **********
SU(0): 0x2fe98e0: ch = JAL 0x2fd4ca0, 0x2fe9de0 [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x2fe9de0: ch = SW 0x2fe8fe0, 0x2fe1110, 0x2fe9be0, 0x2fe96e0<Mem:ST4[%30]> [ORD=66] [ID=1]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(5): Latency=1
   val SU(3): Latency=1
   ch  SU(2): Latency=0
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x2fe96e0: ch = TokenFactor 0x2fe1110:1, 0x2fe8fe0:1 [ID=2]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 1
  Predecessors:
   ch  SU(3): Latency=1
   ch  SU(5): Latency=1
  Successors:
   ch  SU(1): Latency=0

SU(3): 0x2fe1110: i32,ch = LW 0x2fe91e0, 0x2fdc0c0, 0x2fb6da8<Mem:LD4[%2]> [ORD=61] [ID=3]

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(4): Latency=1
  Successors:
   val SU(1): Latency=1
   ch  SU(2): Latency=1
   val SU(5): Latency=1

SU(4): 0x2fe91e0: i32 = ADDI 0x2fe99e0, 0x2fe93e0 [ORD=61] [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(3): Latency=1

SU(5): 0x2fe8fe0: i32,ch = LW 0x2fe1110, 0x2fd46a0, 0x2fb6da8<Mem:LD4[%27]> [ORD=63] [ID=5]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(3): Latency=1
  Successors:
   val SU(1): Latency=1
   ch  SU(2): Latency=1


Examining Available:
Height 0: SU(0): 0x2fe98e0: ch = JAL 0x2fd4ca0, 0x2fe9de0 [ID=0]


*** Scheduling [0]: SU(0): 0x2fe98e0: ch = JAL 0x2fd4ca0, 0x2fe9de0 [ID=0]


Examining Available:
Height 1: SU(1): 0x2fe9de0: ch = SW 0x2fe8fe0, 0x2fe1110, 0x2fe9be0, 0x2fe96e0<Mem:ST4[%30]> [ORD=66] [ID=1]


*** Scheduling [1]: SU(1): 0x2fe9de0: ch = SW 0x2fe8fe0, 0x2fe1110, 0x2fe9be0, 0x2fe96e0<Mem:ST4[%30]> [ORD=66] [ID=1]


Examining Available:
Height 1: SU(2): 0x2fe96e0: ch = TokenFactor 0x2fe1110:1, 0x2fe8fe0:1 [ID=2]


*** Scheduling [2]: SU(2): 0x2fe96e0: ch = TokenFactor 0x2fe1110:1, 0x2fe8fe0:1 [ID=2]


Examining Available:
Height 3: SU(5): 0x2fe8fe0: i32,ch = LW 0x2fe1110, 0x2fd46a0, 0x2fb6da8<Mem:LD4[%27]> [ORD=63] [ID=5]


*** Scheduling [3]: SU(5): 0x2fe8fe0: i32,ch = LW 0x2fe1110, 0x2fd46a0, 0x2fb6da8<Mem:LD4[%27]> [ORD=63] [ID=5]


Examining Available:
Height 4: SU(3): 0x2fe1110: i32,ch = LW 0x2fe91e0, 0x2fdc0c0, 0x2fb6da8<Mem:LD4[%2]> [ORD=61] [ID=3]


*** Scheduling [4]: SU(3): 0x2fe1110: i32,ch = LW 0x2fe91e0, 0x2fdc0c0, 0x2fb6da8<Mem:LD4[%2]> [ORD=61] [ID=3]


Examining Available:
Height 5: SU(4): 0x2fe91e0: i32 = ADDI 0x2fe99e0, 0x2fe93e0 [ORD=61] [ID=4]


*** Scheduling [5]: SU(4): 0x2fe91e0: i32 = ADDI 0x2fe99e0, 0x2fe93e0 [ORD=61] [ID=4]

*** Final schedule ***
SU(4): 0x2fe91e0: i32 = ADDI 0x2fe99e0, 0x2fe93e0 [ORD=61] [ID=4]

SU(3): 0x2fe1110: i32,ch = LW 0x2fe91e0, 0x2fdc0c0, 0x2fb6da8<Mem:LD4[%2]> [ORD=61] [ID=3]

SU(5): 0x2fe8fe0: i32,ch = LW 0x2fe1110, 0x2fd46a0, 0x2fb6da8<Mem:LD4[%27]> [ORD=63] [ID=5]

SU(2): 0x2fe96e0: ch = TokenFactor 0x2fe1110:1, 0x2fe8fe0:1 [ID=2]

SU(1): 0x2fe9de0: ch = SW 0x2fe8fe0, 0x2fe1110, 0x2fe9be0, 0x2fe96e0<Mem:ST4[%30]> [ORD=66] [ID=1]

SU(0): 0x2fe98e0: ch = JAL 0x2fd4ca0, 0x2fe9de0 [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %35 = load float* %3, align 4
I was here to add   %3 = alloca float, align 4
with I type floatand sd value :0x2fe93e0: i32 = FrameIndex<2>
new load?0x2fd46a0: f32,ch = load 0x2fb6da8, 0x2fe93e0, 0x2fdc0c0<LD4[%3]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x2fe99e0: i32 = Constant<0>

    0x2fb6da8: ch = EntryToken

    0x2fe93e0: i32 = FrameIndex<2>

    0x2fdc0c0: i32 = undef

  0x2fd46a0: f32,ch = load 0x2fb6da8, 0x2fe93e0, 0x2fdc0c0<LD4[%3]>

  0x2fb6da8: ch = EntryToken


I was here to add float 8.800000e+03
Initial selection DAG: BB#7 'startup_fuel_valves3:startup_fuel_valves3.if.end26'
SelectionDAG has 14 nodes:
  0x2fb6da8: ch = EntryToken [ORD=67]

  0x2fe99e0: i32 = Constant<0>

      0x2fb6da8: <multiple use>
            0x2fb6da8: <multiple use>
            0x2fe93e0: i32 = FrameIndex<2> [ORD=67]

            0x2fdc0c0: i32 = undef [ORD=67]

          0x2fd46a0: f32,ch = load 0x2fb6da8, 0x2fe93e0, 0x2fdc0c0<LD4[%3]> [ORD=67]

          0x2fe9be0: f32 = ConstantFP<8.800000e+03> [ORD=68]

          0x2fe98e0: ch = setogt [ORD=68]

        0x2fe9de0: i1 = setcc 0x2fd46a0, 0x2fe9be0, 0x2fe98e0 [ORD=68]

        0x2fe96e0: i1 = Constant<-1>

      0x2fe8fe0: i1 = xor 0x2fe9de0, 0x2fe96e0

      0x2fe1110: ch = BasicBlock<startup_fuel_valves3.return 0x2fe2d70>

    0x2fd4ca0: ch = brcond 0x2fb6da8, 0x2fe8fe0, 0x2fe1110

    0x2fe91e0: ch = BasicBlock<startup_fuel_valves3.if.then28 0x2fe2b60>

  0x2fe1b10: ch = br 0x2fd4ca0, 0x2fe91e0



Replacing.3 0x2fe8fe0: i1 = xor 0x2fe9de0, 0x2fe96e0

With: 0x2fe9ce0: i1 = setcc 0x2fd46a0, 0x2fe9be0, 0x2fe90e0

Optimized lowered selection DAG: BB#7 'startup_fuel_valves3:startup_fuel_valves3.if.end26'
SelectionDAG has 11 nodes:
  0x2fb6da8: ch = EntryToken [ORD=67]

      0x2fb6da8: <multiple use>
          0x2fb6da8: <multiple use>
          0x2fe93e0: i32 = FrameIndex<2> [ORD=67]

          0x2fdc0c0: i32 = undef [ORD=67]

        0x2fd46a0: f32,ch = load 0x2fb6da8, 0x2fe93e0, 0x2fdc0c0<LD4[%3]> [ORD=67]

        0x2fe9be0: f32 = ConstantFP<8.800000e+03> [ORD=68]

        0x2fe90e0: ch = setule

      0x2fe9ce0: i1 = setcc 0x2fd46a0, 0x2fe9be0, 0x2fe90e0

      0x2fe1110: ch = BasicBlock<startup_fuel_valves3.return 0x2fe2d70>

    0x2fd4ca0: ch = brcond 0x2fb6da8, 0x2fe9ce0, 0x2fe1110

    0x2fe91e0: ch = BasicBlock<startup_fuel_valves3.if.then28 0x2fe2b60>

  0x2fe1b10: ch = br 0x2fd4ca0, 0x2fe91e0


Legally typed node: 0x2fe90e0: ch = setule [ID=0]

Legally typed node: 0x2fe91e0: ch = BasicBlock<startup_fuel_valves3.if.then28 0x2fe2b60> [ID=0]

Legally typed node: 0x2fe1110: ch = BasicBlock<startup_fuel_valves3.return 0x2fe2d70> [ID=0]

Legally typed node: 0x2fe9be0: f32 = ConstantFP<8.800000e+03> [ORD=68] [ID=0]

Legally typed node: 0x2fdc0c0: i32 = undef [ORD=67] [ID=0]

Legally typed node: 0x2fe93e0: i32 = FrameIndex<2> [ORD=67] [ID=0]

Legally typed node: 0x2fb6da8: ch = EntryToken [ORD=67] [ID=0]

Legally typed node: 0x2fd46a0: f32,ch = load 0x2fb6da8, 0x2fe93e0, 0x2fdc0c0<LD4[%3]> [ORD=67] [ID=0]

Promote integer result: 0x2fe9ce0: i1 = setcc 0x2fd46a0, 0x2fe9be0, 0x2fe90e0 [ID=0]

Promote integer operand: 0x2fd4ca0: ch = brcond 0x2fb6da8, 0x2fe9ce0, 0x2fe1110 [ID=0]

Promote integer operand: 0x2fe98e0: i32 = zero_extend 0x2fe9ce0 [ID=0]

Legally typed node: 0x2fe9de0: i32 = Constant<1> [ID=0]

Legally typed node: 0x2fe99e0: i32 = setcc 0x2fd46a0, 0x2fe9be0, 0x2fe90e0 [ID=0]

Legally typed node: 0x2fe96e0: i32 = and 0x2fe99e0, 0x2fe9de0 [ID=0]

Legally typed node: 0x2fd4ca0: ch = brcond 0x2fb6da8, 0x2fe96e0, 0x2fe1110 [ID=0]

Legally typed node: 0x2fe1b10: ch = br 0x2fd4ca0, 0x2fe91e0 [ID=0]

Legally typed node: 0x7fff9b4748f0: ch = handlenode 0x2fe1b10 [ID=0]

Type-legalized selection DAG: BB#7 'startup_fuel_valves3:startup_fuel_valves3.if.end26'
SelectionDAG has 13 nodes:
  0x2fb6da8: ch = EntryToken [ORD=67] [ID=-3]

      0x2fb6da8: <multiple use>
            0x2fb6da8: <multiple use>
            0x2fe93e0: i32 = FrameIndex<2> [ORD=67] [ID=-3]

            0x2fdc0c0: i32 = undef [ORD=67] [ID=-3]

          0x2fd46a0: f32,ch = load 0x2fb6da8, 0x2fe93e0, 0x2fdc0c0<LD4[%3]> [ORD=67] [ID=-3]

          0x2fe9be0: f32 = ConstantFP<8.800000e+03> [ORD=68] [ID=-3]

          0x2fe90e0: ch = setule [ID=-3]

        0x2fe99e0: i32 = setcc 0x2fd46a0, 0x2fe9be0, 0x2fe90e0 [ID=-3]

        0x2fe9de0: i32 = Constant<1> [ID=-3]

      0x2fe96e0: i32 = and 0x2fe99e0, 0x2fe9de0 [ID=-3]

      0x2fe1110: ch = BasicBlock<startup_fuel_valves3.return 0x2fe2d70> [ID=-3]

    0x2fd4ca0: ch = brcond 0x2fb6da8, 0x2fe96e0, 0x2fe1110 [ID=-3]

    0x2fe91e0: ch = BasicBlock<startup_fuel_valves3.if.then28 0x2fe2b60> [ID=-3]

  0x2fe1b10: ch = br 0x2fd4ca0, 0x2fe91e0 [ID=-3]



Replacing.2 0x2fe96e0: i32 = and 0x2fe99e0, 0x2fe9de0 [ID=-3]

With: 0x2fe99e0: i32 = setcc 0x2fd46a0, 0x2fe9be0, 0x2fe90e0 [ID=-3]

Optimized type-legalized selection DAG: BB#7 'startup_fuel_valves3:startup_fuel_valves3.if.end26'
SelectionDAG has 11 nodes:
  0x2fb6da8: ch = EntryToken [ORD=67] [ID=-3]

      0x2fb6da8: <multiple use>
          0x2fb6da8: <multiple use>
          0x2fe93e0: i32 = FrameIndex<2> [ORD=67] [ID=-3]

          0x2fdc0c0: i32 = undef [ORD=67] [ID=-3]

        0x2fd46a0: f32,ch = load 0x2fb6da8, 0x2fe93e0, 0x2fdc0c0<LD4[%3]> [ORD=67] [ID=-3]

        0x2fe9be0: f32 = ConstantFP<8.800000e+03> [ORD=68] [ID=-3]

        0x2fe90e0: ch = setule [ID=-3]

      0x2fe99e0: i32 = setcc 0x2fd46a0, 0x2fe9be0, 0x2fe90e0 [ID=-3]

      0x2fe1110: ch = BasicBlock<startup_fuel_valves3.return 0x2fe2d70> [ID=-3]

    0x2fd4ca0: ch = brcond 0x2fb6da8, 0x2fe99e0, 0x2fe1110 [ID=-3]

    0x2fe91e0: ch = BasicBlock<startup_fuel_valves3.if.then28 0x2fe2b60> [ID=-3]

  0x2fe1b10: ch = br 0x2fd4ca0, 0x2fe91e0 [ID=-3]


Legalized selection DAG: BB#7 'startup_fuel_valves3:startup_fuel_valves3.if.end26'
SelectionDAG has 11 nodes:
  0x2fb6da8: ch = EntryToken [ORD=67] [ID=0]

      0x2fb6da8: <multiple use>
          0x2fb6da8: <multiple use>
          0x2fe93e0: i32 = FrameIndex<2> [ORD=67] [ID=1]

          0x2fdc0c0: i32 = undef [ORD=67] [ID=2]

        0x2fd46a0: f32,ch = load 0x2fb6da8, 0x2fe93e0, 0x2fdc0c0<LD4[%3]> [ORD=67] [ID=7]

        0x2fe9de0: i32 = Constant<1175027712>

        0x2fe90e0: ch = setule [ID=6]

      0x2fe99e0: i32 = setcc 0x2fd46a0, 0x2fe9de0, 0x2fe90e0 [ID=8]

      0x2fe1110: ch = BasicBlock<startup_fuel_valves3.return 0x2fe2d70> [ID=4]

    0x2fd4ca0: ch = brcond 0x2fb6da8, 0x2fe99e0, 0x2fe1110 [ID=9]

    0x2fe91e0: ch = BasicBlock<startup_fuel_valves3.if.then28 0x2fe2b60> [ID=5]

  0x2fe1b10: ch = br 0x2fd4ca0, 0x2fe91e0 [ID=10]



Replacing.3 0x2fe99e0: i32 = setcc 0x2fd46a0, 0x2fe9de0, 0x2fe90e0 [ID=8]

With: 0x2fe9ce0: i32 = setcc 0x2fd46a0, 0x2fe9be0, 0x2fe96e0

Optimized legalized selection DAG: BB#7 'startup_fuel_valves3:startup_fuel_valves3.if.end26'
SelectionDAG has 11 nodes:
  0x2fb6da8: ch = EntryToken [ORD=67] [ID=0]

      0x2fb6da8: <multiple use>
          0x2fb6da8: <multiple use>
          0x2fe93e0: i32 = FrameIndex<2> [ORD=67] [ID=1]

          0x2fdc0c0: i32 = undef [ORD=67] [ID=2]

        0x2fd46a0: f32,ch = load 0x2fb6da8, 0x2fe93e0, 0x2fdc0c0<LD4[%3]> [ORD=67] [ID=7]

        0x2fe9be0: i32 = Constant<1175027713>

        0x2fe96e0: ch = setult

      0x2fe9ce0: i32 = setcc 0x2fd46a0, 0x2fe9be0, 0x2fe96e0

      0x2fe1110: ch = BasicBlock<startup_fuel_valves3.return 0x2fe2d70> [ID=4]

    0x2fd4ca0: ch = brcond 0x2fb6da8, 0x2fe9ce0, 0x2fe1110 [ID=9]

    0x2fe91e0: ch = BasicBlock<startup_fuel_valves3.if.then28 0x2fe2b60> [ID=5]

  0x2fe1b10: ch = br 0x2fd4ca0, 0x2fe91e0 [ID=10]


===== Instruction selection begins: BB#7 'startup_fuel_valves3.if.end26'
ISEL: Starting pattern match on root node: 0x2fe1b10: ch = br 0x2fd4ca0, 0x2fe91e0 [ID=10]

  Initial Opcode index to 1938
  Morphed node: 0x2fe1b10: ch = JAL 0x2fe91e0, 0x2fd4ca0

ISEL: Match complete!
=> 0x2fe1b10: ch = JAL 0x2fe91e0, 0x2fd4ca0

ISEL: Starting pattern match on root node: 0x2fd4ca0: ch = brcond 0x2fb6da8, 0x2fe9ce0, 0x2fe1110 [ID=9]

  Initial Opcode index to 1439
  Match failed at index 1449
  Continuing at 1676
  Morphed node: 0x2fd4ca0: ch = BNE 0x2fe1110, 0x2fe9ce0, 0x2fe9de0, 0x2fb6da8

ISEL: Match complete!
=> 0x2fd4ca0: ch = BNE 0x2fe1110, 0x2fe9ce0, 0x2fe9de0, 0x2fb6da8

ISEL: Starting pattern match on root node: 0x2fe9ce0: i32 = setcc 0x2fd46a0, 0x2fe9be0, 0x2fe96e0 [ID=8]

  Initial Opcode index to 642
  Match failed at index 651
  Continuing at 688
  Match failed at index 690
  Continuing at 899
  Skipped scope entry (due to false predicate) at index 908, continuing at 920
  Skipped scope entry (due to false predicate) at index 921, continuing at 933
  Skipped scope entry (due to false predicate) at index 934, continuing at 946
  Skipped scope entry (due to false predicate) at index 947, continuing at 959
  Morphed node: 0x2fe9ce0: i32 = FULT_S 0x2fe9be0, 0x2fd46a0

ISEL: Match complete!
=> 0x2fe9ce0: i32 = FULT_S 0x2fe9be0, 0x2fd46a0

ISEL: Starting pattern match on root node: 0x2fd46a0: f32,ch = load 0x2fb6da8, 0x2fe93e0, 0x2fdc0c0<LD4[%3]> [ORD=67] [ID=7]

  Initial Opcode index to 5
  TypeSwitch[f32] from 10 to 159
  Morphed node: 0x2fd46a0: f32,ch = FLW 0x2fe93e0, 0x2fe96e0, 0x2fb6da8<Mem:LD4[%3]> [ORD=67]

ISEL: Match complete!
=> 0x2fd46a0: f32,ch = FLW 0x2fe93e0, 0x2fe96e0, 0x2fb6da8<Mem:LD4[%3]> [ORD=67]

ISEL: Starting pattern match on root node: 0x2fe9be0: i32 = Constant<1175027713> [ID=5]

  Initial Opcode index to 1226
comparing 0 and 1175027713 and returning value:0
  Skipped scope entry (due to false predicate) at index 1228, continuing at 1236
  Skipped scope entry (due to false predicate) at index 1240, continuing at 1256
  Morphed node: 0x2fe9be0: i32 = ADDI 0x2fe9de0, 0x2fdc0c0

ISEL: Match complete!
=> 0x2fe9be0: i32 = ADDI 0x2fe9de0, 0x2fdc0c0

=> 0x2fe91e0: ch = BasicBlock<startup_fuel_valves3.if.then28 0x2fe2b60>

=> 0x2fe1110: ch = BasicBlock<startup_fuel_valves3.return 0x2fe2d70>

=> 0x2fb6da8: ch = EntryToken [ORD=67]

===== Instruction selection ends:
Selected selection DAG: BB#7 'startup_fuel_valves3:startup_fuel_valves3.if.end26'
SelectionDAG has 14 nodes:
  0x2fb6da8: ch = EntryToken [ORD=67]

  0x2fe9de0: i32 = Register %zero

    0x2fe91e0: ch = BasicBlock<startup_fuel_valves3.if.then28 0x2fe2b60>

      0x2fe1110: ch = BasicBlock<startup_fuel_valves3.return 0x2fe2d70>

          0x2fe9de0: <multiple use>
          0x2fdc0c0: i32 = TargetConstant<1175027713>

        0x2fe9be0: i32 = ADDI 0x2fe9de0, 0x2fdc0c0

            0x2fe90e0: i32 = Register %t5

            0x2fe99e0: i32 = TargetFrameIndex<2>

          0x2fe93e0: i32 = ADDI 0x2fe90e0, 0x2fe99e0 [ORD=67]

          0x2fe96e0: i32 = TargetConstant<0>

          0x2fb6da8: <multiple use>
        0x2fd46a0: f32,ch = FLW 0x2fe93e0, 0x2fe96e0, 0x2fb6da8<Mem:LD4[%3]> [ORD=67]

      0x2fe9ce0: i32 = FULT_S 0x2fe9be0, 0x2fd46a0

      0x2fe9de0: <multiple use>
      0x2fb6da8: <multiple use>
    0x2fd4ca0: ch = BNE 0x2fe1110, 0x2fe9ce0, 0x2fe9de0, 0x2fb6da8

  0x2fe1b10: ch = JAL 0x2fe91e0, 0x2fd4ca0


********** List Scheduling BB#7 'startup_fuel_valves3.if.end26' **********
SU(0): 0x2fe1b10: ch = JAL 0x2fe91e0, 0x2fd4ca0 [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x2fd4ca0: ch = BNE 0x2fe1110, 0x2fe9ce0, 0x2fe9de0, 0x2fb6da8 [ID=1]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x2fe9ce0: i32 = FULT_S 0x2fe9be0, 0x2fd46a0 [ID=2]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(5): Latency=1
   val SU(3): Latency=1
  Successors:
   val SU(1): Latency=1

SU(3): 0x2fd46a0: f32,ch = FLW 0x2fe93e0, 0x2fe96e0, 0x2fb6da8<Mem:LD4[%3]> [ORD=67] [ID=3]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(4): Latency=1
  Successors:
   val SU(2): Latency=1

SU(4): 0x2fe93e0: i32 = ADDI 0x2fe90e0, 0x2fe99e0 [ORD=67] [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(3): Latency=1

SU(5): 0x2fe9be0: i32 = ADDI 0x2fe9de0, 0x2fdc0c0 [ID=5]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(2): Latency=1


Examining Available:
Height 0: SU(0): 0x2fe1b10: ch = JAL 0x2fe91e0, 0x2fd4ca0 [ID=0]


*** Scheduling [0]: SU(0): 0x2fe1b10: ch = JAL 0x2fe91e0, 0x2fd4ca0 [ID=0]


Examining Available:
Height 1: SU(1): 0x2fd4ca0: ch = BNE 0x2fe1110, 0x2fe9ce0, 0x2fe9de0, 0x2fb6da8 [ID=1]


*** Scheduling [1]: SU(1): 0x2fd4ca0: ch = BNE 0x2fe1110, 0x2fe9ce0, 0x2fe9de0, 0x2fb6da8 [ID=1]


Examining Available:
Height 2: SU(2): 0x2fe9ce0: i32 = FULT_S 0x2fe9be0, 0x2fd46a0 [ID=2]


*** Scheduling [2]: SU(2): 0x2fe9ce0: i32 = FULT_S 0x2fe9be0, 0x2fd46a0 [ID=2]


Examining Available:
Height 3: SU(5): 0x2fe9be0: i32 = ADDI 0x2fe9de0, 0x2fdc0c0 [ID=5]

Height 3: SU(3): 0x2fd46a0: f32,ch = FLW 0x2fe93e0, 0x2fe96e0, 0x2fb6da8<Mem:LD4[%3]> [ORD=67] [ID=3]


*** Scheduling [3]: SU(5): 0x2fe9be0: i32 = ADDI 0x2fe9de0, 0x2fdc0c0 [ID=5]


Examining Available:
Height 3: SU(3): 0x2fd46a0: f32,ch = FLW 0x2fe93e0, 0x2fe96e0, 0x2fb6da8<Mem:LD4[%3]> [ORD=67] [ID=3]


*** Scheduling [4]: SU(3): 0x2fd46a0: f32,ch = FLW 0x2fe93e0, 0x2fe96e0, 0x2fb6da8<Mem:LD4[%3]> [ORD=67] [ID=3]


Examining Available:
Height 5: SU(4): 0x2fe93e0: i32 = ADDI 0x2fe90e0, 0x2fe99e0 [ORD=67] [ID=4]


*** Scheduling [5]: SU(4): 0x2fe93e0: i32 = ADDI 0x2fe90e0, 0x2fe99e0 [ORD=67] [ID=4]

*** Final schedule ***
SU(4): 0x2fe93e0: i32 = ADDI 0x2fe90e0, 0x2fe99e0 [ORD=67] [ID=4]

SU(3): 0x2fd46a0: f32,ch = FLW 0x2fe93e0, 0x2fe96e0, 0x2fb6da8<Mem:LD4[%3]> [ORD=67] [ID=3]

SU(5): 0x2fe9be0: i32 = ADDI 0x2fe9de0, 0x2fdc0c0 [ID=5]

SU(2): 0x2fe9ce0: i32 = FULT_S 0x2fe9be0, 0x2fd46a0 [ID=2]

SU(1): 0x2fd4ca0: ch = BNE 0x2fe1110, 0x2fe9ce0, 0x2fe9de0, 0x2fb6da8 [ID=1]

SU(0): 0x2fe1b10: ch = JAL 0x2fe91e0, 0x2fd4ca0 [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %37 = load i32** %2, align 4
I was here to add   %2 = alloca i32*, align 4
with I type i32*and sd value :0x2fe99e0: i32 = FrameIndex<1>
new load?0x2fe96e0: i32,ch = load 0x2fb6da8, 0x2fe99e0, 0x2fdc0c0<LD4[%2]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x2fe90e0: i32 = Constant<0>

    0x2fb6da8: ch = EntryToken

    0x2fe99e0: i32 = FrameIndex<1>

    0x2fdc0c0: i32 = undef

  0x2fe96e0: i32,ch = load 0x2fb6da8, 0x2fe99e0, 0x2fdc0c0<LD4[%2]>

  0x2fb6da8: ch = EntryToken


store visit is after?  store i32 0, i32* %38, align 4
I was here to add i32 0
whats in dag after store?SelectionDAG has 9 nodes:
  0x2fdc0c0: i32 = undef [ORD=69]

    0x2fb6da8: ch = EntryToken [ORD=69]

    0x2fe99e0: i32 = FrameIndex<1> [ORD=69]

    0x2fdc0c0: <multiple use>
  0x2fe96e0: i32,ch = load 0x2fb6da8, 0x2fe99e0, 0x2fdc0c0<LD4[%2]> [ORD=69]

  0x2fe9de0: i64 = Constant<8>

    0x2fe96e0: <multiple use>
    0x2fe90e0: i32 = Constant<0> [ORD=71]

      0x2fe96e0: <multiple use>
      0x2fe1b10: i32 = Constant<8> [ORD=70]

    0x2fd4ca0: i32 = add 0x2fe96e0, 0x2fe1b10 [ORD=70]

    0x2fdc0c0: <multiple use>
  0x2fe9ce0: ch = store 0x2fe96e0:1, 0x2fe90e0, 0x2fd4ca0, 0x2fdc0c0<ST4[%38]> [ORD=71]


visiting load instruction   %39 = load i32** %2, align 4
with I type i32*and sd value :0x2fe99e0: i32 = FrameIndex<1>
new load?0x2fd46a0: i32,ch = load 0x2fe9ce0, 0x2fe99e0, 0x2fdc0c0<LD4[%2]>
dag after load is dealt with?SelectionDAG has 10 nodes:
  0x2fe99e0: i32 = FrameIndex<1> [ORD=69]

  0x2fdc0c0: i32 = undef [ORD=69]

    0x2fb6da8: ch = EntryToken [ORD=69]

    0x2fe99e0: <multiple use>
    0x2fdc0c0: <multiple use>
  0x2fe96e0: i32,ch = load 0x2fb6da8, 0x2fe99e0, 0x2fdc0c0<LD4[%2]> [ORD=69]

  0x2fe9de0: i64 = Constant<8>

      0x2fe96e0: <multiple use>
      0x2fe90e0: i32 = Constant<0> [ORD=71]

        0x2fe96e0: <multiple use>
        0x2fe1b10: i32 = Constant<8> [ORD=70]

      0x2fd4ca0: i32 = add 0x2fe96e0, 0x2fe1b10 [ORD=70]

      0x2fdc0c0: <multiple use>
    0x2fe9ce0: ch = store 0x2fe96e0:1, 0x2fe90e0, 0x2fd4ca0, 0x2fdc0c0<ST4[%38]> [ORD=71]

    0x2fe99e0: <multiple use>
    0x2fdc0c0: <multiple use>
  0x2fd46a0: i32,ch = load 0x2fe9ce0, 0x2fe99e0, 0x2fdc0c0<LD4[%2]>

    0x2fe96e0: <multiple use>
    0x2fe90e0: i32 = Constant<0> [ORD=71]

      0x2fe96e0: <multiple use>
      0x2fe1b10: i32 = Constant<8> [ORD=70]

    0x2fd4ca0: i32 = add 0x2fe96e0, 0x2fe1b10 [ORD=70]

    0x2fdc0c0: <multiple use>
  0x2fe9ce0: ch = store 0x2fe96e0:1, 0x2fe90e0, 0x2fd4ca0, 0x2fdc0c0<ST4[%38]> [ORD=71]


visiting load instruction   %41 = load i32* %40, align 4
with I type i32and sd value :0x2fe1110: i32 = add 0x2fd46a0, 0x2fe91e0
new load?0x2fe93e0: i32,ch = load 0x2fe9ce0, 0x2fe1110, 0x2fdc0c0<LD4[%40]>
dag after load is dealt with?SelectionDAG has 14 nodes:
  0x2fe99e0: i32 = FrameIndex<1> [ORD=69]

  0x2fdc0c0: i32 = undef [ORD=69]

    0x2fb6da8: ch = EntryToken [ORD=69]

    0x2fe99e0: <multiple use>
    0x2fdc0c0: <multiple use>
  0x2fe96e0: i32,ch = load 0x2fb6da8, 0x2fe99e0, 0x2fdc0c0<LD4[%2]> [ORD=69]

  0x2fe9de0: i64 = Constant<8>

  0x2fe9be0: i64 = Constant<24>

    0x2fe9ce0: <multiple use>
        0x2fe9ce0: <multiple use>
        0x2fe99e0: <multiple use>
        0x2fdc0c0: <multiple use>
      0x2fd46a0: i32,ch = load 0x2fe9ce0, 0x2fe99e0, 0x2fdc0c0<LD4[%2]> [ORD=72]

      0x2fe91e0: i32 = Constant<24> [ORD=73]

    0x2fe1110: i32 = add 0x2fd46a0, 0x2fe91e0 [ORD=73]

    0x2fdc0c0: <multiple use>
  0x2fe93e0: i32,ch = load 0x2fe9ce0, 0x2fe1110, 0x2fdc0c0<LD4[%40]>

    0x2fe96e0: <multiple use>
    0x2fe90e0: i32 = Constant<0> [ORD=71]

      0x2fe96e0: <multiple use>
      0x2fe1b10: i32 = Constant<8> [ORD=70]

    0x2fd4ca0: i32 = add 0x2fe96e0, 0x2fe1b10 [ORD=70]

    0x2fdc0c0: <multiple use>
  0x2fe9ce0: ch = store 0x2fe96e0:1, 0x2fe90e0, 0x2fd4ca0, 0x2fdc0c0<ST4[%38]> [ORD=71]


I was here to add i32 -1
Initial selection DAG: BB#8 'startup_fuel_valves3:startup_fuel_valves3.if.then28'
SelectionDAG has 23 nodes:
  0x2fe99e0: i32 = FrameIndex<1> [ORD=69]

  0x2fdc0c0: i32 = undef [ORD=69]

    0x2fb6da8: ch = EntryToken [ORD=69]

    0x2fe99e0: <multiple use>
    0x2fdc0c0: <multiple use>
  0x2fe96e0: i32,ch = load 0x2fb6da8, 0x2fe99e0, 0x2fdc0c0<LD4[%2]> [ORD=69]

  0x2fe9de0: i64 = Constant<8>

    0x2fe96e0: <multiple use>
    0x2fe90e0: i32 = Constant<0> [ORD=71]

      0x2fe96e0: <multiple use>
      0x2fe1b10: i32 = Constant<8> [ORD=70]

    0x2fd4ca0: i32 = add 0x2fe96e0, 0x2fe1b10 [ORD=70]

    0x2fdc0c0: <multiple use>
  0x2fe9ce0: ch = store 0x2fe96e0:1, 0x2fe90e0, 0x2fd4ca0, 0x2fdc0c0<ST4[%38]> [ORD=71]

  0x2fe9be0: i64 = Constant<24>

      0x2fe9ce0: <multiple use>
            0x2fe9ce0: <multiple use>
                0x2fe9ce0: <multiple use>
                0x2fe99e0: <multiple use>
                0x2fdc0c0: <multiple use>
              0x2fd46a0: i32,ch = load 0x2fe9ce0, 0x2fe99e0, 0x2fdc0c0<LD4[%2]> [ORD=72]

              0x2fe91e0: i32 = Constant<24> [ORD=73]

            0x2fe1110: i32 = add 0x2fd46a0, 0x2fe91e0 [ORD=73]

            0x2fdc0c0: <multiple use>
          0x2fe93e0: i32,ch = load 0x2fe9ce0, 0x2fe1110, 0x2fdc0c0<LD4[%40]> [ORD=74]

          0x2fe98e0: i32 = Constant<-1> [ORD=75]

          0x2fe8fe0: ch = seteq [ORD=75]

        0x2fd4ea0: i1 = setcc 0x2fe93e0, 0x2fe98e0, 0x2fe8fe0 [ORD=75]

        0x2fd48a0: i1 = Constant<-1>

      0x2fdbec0: i1 = xor 0x2fd4ea0, 0x2fd48a0

      0x2fdbfc0: ch = BasicBlock<startup_fuel_valves3.return 0x2fe2d70>

    0x2fe97e0: ch = brcond 0x2fe9ce0, 0x2fdbec0, 0x2fdbfc0

    0x2fe1d10: ch = BasicBlock<startup_fuel_valves3.if.then32 0x2fe2c10>

  0x2fe1210: ch = br 0x2fe97e0, 0x2fe1d10



Replacing.3 0x2fdbec0: i1 = xor 0x2fd4ea0, 0x2fd48a0

With: 0x2fe1510: i1 = setcc 0x2fe93e0, 0x2fe98e0, 0x2fe95e0

Optimized lowered selection DAG: BB#8 'startup_fuel_valves3:startup_fuel_valves3.if.then28'
SelectionDAG has 19 nodes:
  0x2fe99e0: i32 = FrameIndex<1> [ORD=69]

  0x2fdc0c0: i32 = undef [ORD=69]

    0x2fb6da8: ch = EntryToken [ORD=69]

    0x2fe99e0: <multiple use>
    0x2fdc0c0: <multiple use>
  0x2fe96e0: i32,ch = load 0x2fb6da8, 0x2fe99e0, 0x2fdc0c0<LD4[%2]> [ORD=69]

    0x2fe96e0: <multiple use>
    0x2fe90e0: i32 = Constant<0> [ORD=71]

      0x2fe96e0: <multiple use>
      0x2fe1b10: i32 = Constant<8> [ORD=70]

    0x2fd4ca0: i32 = add 0x2fe96e0, 0x2fe1b10 [ORD=70]

    0x2fdc0c0: <multiple use>
  0x2fe9ce0: ch = store 0x2fe96e0:1, 0x2fe90e0, 0x2fd4ca0, 0x2fdc0c0<ST4[%38]> [ORD=71]

      0x2fe9ce0: <multiple use>
          0x2fe9ce0: <multiple use>
              0x2fe9ce0: <multiple use>
              0x2fe99e0: <multiple use>
              0x2fdc0c0: <multiple use>
            0x2fd46a0: i32,ch = load 0x2fe9ce0, 0x2fe99e0, 0x2fdc0c0<LD4[%2]> [ORD=72]

            0x2fe91e0: i32 = Constant<24> [ORD=73]

          0x2fe1110: i32 = add 0x2fd46a0, 0x2fe91e0 [ORD=73]

          0x2fdc0c0: <multiple use>
        0x2fe93e0: i32,ch = load 0x2fe9ce0, 0x2fe1110, 0x2fdc0c0<LD4[%40]> [ORD=74]

        0x2fe98e0: i32 = Constant<-1> [ORD=75]

        0x2fe95e0: ch = setne

      0x2fe1510: i1 = setcc 0x2fe93e0, 0x2fe98e0, 0x2fe95e0

      0x2fdbfc0: ch = BasicBlock<startup_fuel_valves3.return 0x2fe2d70>

    0x2fe97e0: ch = brcond 0x2fe9ce0, 0x2fe1510, 0x2fdbfc0

    0x2fe1d10: ch = BasicBlock<startup_fuel_valves3.if.then32 0x2fe2c10>

  0x2fe1210: ch = br 0x2fe97e0, 0x2fe1d10


Legally typed node: 0x2fe95e0: ch = setne [ID=0]

Legally typed node: 0x2fe1d10: ch = BasicBlock<startup_fuel_valves3.if.then32 0x2fe2c10> [ID=0]

Legally typed node: 0x2fdbfc0: ch = BasicBlock<startup_fuel_valves3.return 0x2fe2d70> [ID=0]

Legally typed node: 0x2fe98e0: i32 = Constant<-1> [ORD=75] [ID=0]

Legally typed node: 0x2fe91e0: i32 = Constant<24> [ORD=73] [ID=0]

Legally typed node: 0x2fe1b10: i32 = Constant<8> [ORD=70] [ID=0]

Legally typed node: 0x2fdc0c0: i32 = undef [ORD=69] [ID=0]

Legally typed node: 0x2fe90e0: i32 = Constant<0> [ORD=71] [ID=0]

Legally typed node: 0x2fe99e0: i32 = FrameIndex<1> [ORD=69] [ID=0]

Legally typed node: 0x2fb6da8: ch = EntryToken [ORD=69] [ID=0]

Legally typed node: 0x2fe96e0: i32,ch = load 0x2fb6da8, 0x2fe99e0, 0x2fdc0c0<LD4[%2]> [ORD=69] [ID=0]

Legally typed node: 0x2fd4ca0: i32 = add 0x2fe96e0, 0x2fe1b10 [ORD=70] [ID=0]

Legally typed node: 0x2fe9ce0: ch = store 0x2fe96e0:1, 0x2fe90e0, 0x2fd4ca0, 0x2fdc0c0<ST4[%38]> [ORD=71] [ID=0]

Legally typed node: 0x2fd46a0: i32,ch = load 0x2fe9ce0, 0x2fe99e0, 0x2fdc0c0<LD4[%2]> [ORD=72] [ID=0]

Legally typed node: 0x2fe1110: i32 = add 0x2fd46a0, 0x2fe91e0 [ORD=73] [ID=0]

Legally typed node: 0x2fe93e0: i32,ch = load 0x2fe9ce0, 0x2fe1110, 0x2fdc0c0<LD4[%40]> [ORD=74] [ID=0]

Promote integer result: 0x2fe1510: i1 = setcc 0x2fe93e0, 0x2fe98e0, 0x2fe95e0 [ID=0]

Promote integer operand: 0x2fe97e0: ch = brcond 0x2fe9ce0, 0x2fe1510, 0x2fdbfc0 [ID=0]

Promote integer operand: 0x2fe9be0: i32 = zero_extend 0x2fe1510 [ID=0]

Legally typed node: 0x2fe8fe0: i32 = Constant<1> [ID=0]

Legally typed node: 0x2fe9de0: i32 = setcc 0x2fe93e0, 0x2fe98e0, 0x2fe95e0 [ID=0]

Legally typed node: 0x2fd4ea0: i32 = and 0x2fe9de0, 0x2fe8fe0 [ID=0]

Legally typed node: 0x2fe97e0: ch = brcond 0x2fe9ce0, 0x2fd4ea0, 0x2fdbfc0 [ID=0]

Legally typed node: 0x2fe1210: ch = br 0x2fe97e0, 0x2fe1d10 [ID=0]

Legally typed node: 0x7fff9b4748f0: ch = handlenode 0x2fe1210 [ID=0]

Type-legalized selection DAG: BB#8 'startup_fuel_valves3:startup_fuel_valves3.if.then28'
SelectionDAG has 21 nodes:
  0x2fe99e0: i32 = FrameIndex<1> [ORD=69] [ID=-3]

  0x2fdc0c0: i32 = undef [ORD=69] [ID=-3]

    0x2fb6da8: ch = EntryToken [ORD=69] [ID=-3]

    0x2fe99e0: <multiple use>
    0x2fdc0c0: <multiple use>
  0x2fe96e0: i32,ch = load 0x2fb6da8, 0x2fe99e0, 0x2fdc0c0<LD4[%2]> [ORD=69] [ID=-3]

    0x2fe96e0: <multiple use>
    0x2fe90e0: i32 = Constant<0> [ORD=71] [ID=-3]

      0x2fe96e0: <multiple use>
      0x2fe1b10: i32 = Constant<8> [ORD=70] [ID=-3]

    0x2fd4ca0: i32 = add 0x2fe96e0, 0x2fe1b10 [ORD=70] [ID=-3]

    0x2fdc0c0: <multiple use>
  0x2fe9ce0: ch = store 0x2fe96e0:1, 0x2fe90e0, 0x2fd4ca0, 0x2fdc0c0<ST4[%38]> [ORD=71] [ID=-3]

      0x2fe9ce0: <multiple use>
            0x2fe9ce0: <multiple use>
                0x2fe9ce0: <multiple use>
                0x2fe99e0: <multiple use>
                0x2fdc0c0: <multiple use>
              0x2fd46a0: i32,ch = load 0x2fe9ce0, 0x2fe99e0, 0x2fdc0c0<LD4[%2]> [ORD=72] [ID=-3]

              0x2fe91e0: i32 = Constant<24> [ORD=73] [ID=-3]

            0x2fe1110: i32 = add 0x2fd46a0, 0x2fe91e0 [ORD=73] [ID=-3]

            0x2fdc0c0: <multiple use>
          0x2fe93e0: i32,ch = load 0x2fe9ce0, 0x2fe1110, 0x2fdc0c0<LD4[%40]> [ORD=74] [ID=-3]

          0x2fe98e0: i32 = Constant<-1> [ORD=75] [ID=-3]

          0x2fe95e0: ch = setne [ID=-3]

        0x2fe9de0: i32 = setcc 0x2fe93e0, 0x2fe98e0, 0x2fe95e0 [ID=-3]

        0x2fe8fe0: i32 = Constant<1> [ID=-3]

      0x2fd4ea0: i32 = and 0x2fe9de0, 0x2fe8fe0 [ID=-3]

      0x2fdbfc0: ch = BasicBlock<startup_fuel_valves3.return 0x2fe2d70> [ID=-3]

    0x2fe97e0: ch = brcond 0x2fe9ce0, 0x2fd4ea0, 0x2fdbfc0 [ID=-3]

    0x2fe1d10: ch = BasicBlock<startup_fuel_valves3.if.then32 0x2fe2c10> [ID=-3]

  0x2fe1210: ch = br 0x2fe97e0, 0x2fe1d10 [ID=-3]



Replacing.2 0x2fd4ea0: i32 = and 0x2fe9de0, 0x2fe8fe0 [ID=-3]

With: 0x2fe9de0: i32 = setcc 0x2fe93e0, 0x2fe98e0, 0x2fe95e0 [ID=-3]

Optimized type-legalized selection DAG: BB#8 'startup_fuel_valves3:startup_fuel_valves3.if.then28'
SelectionDAG has 19 nodes:
  0x2fe99e0: i32 = FrameIndex<1> [ORD=69] [ID=-3]

  0x2fdc0c0: i32 = undef [ORD=69] [ID=-3]

    0x2fb6da8: ch = EntryToken [ORD=69] [ID=-3]

    0x2fe99e0: <multiple use>
    0x2fdc0c0: <multiple use>
  0x2fe96e0: i32,ch = load 0x2fb6da8, 0x2fe99e0, 0x2fdc0c0<LD4[%2]> [ORD=69] [ID=-3]

    0x2fe96e0: <multiple use>
    0x2fe90e0: i32 = Constant<0> [ORD=71] [ID=-3]

      0x2fe96e0: <multiple use>
      0x2fe1b10: i32 = Constant<8> [ORD=70] [ID=-3]

    0x2fd4ca0: i32 = add 0x2fe96e0, 0x2fe1b10 [ORD=70] [ID=-3]

    0x2fdc0c0: <multiple use>
  0x2fe9ce0: ch = store 0x2fe96e0:1, 0x2fe90e0, 0x2fd4ca0, 0x2fdc0c0<ST4[%38]> [ORD=71] [ID=-3]

      0x2fe9ce0: <multiple use>
          0x2fe9ce0: <multiple use>
              0x2fe9ce0: <multiple use>
              0x2fe99e0: <multiple use>
              0x2fdc0c0: <multiple use>
            0x2fd46a0: i32,ch = load 0x2fe9ce0, 0x2fe99e0, 0x2fdc0c0<LD4[%2]> [ORD=72] [ID=-3]

            0x2fe91e0: i32 = Constant<24> [ORD=73] [ID=-3]

          0x2fe1110: i32 = add 0x2fd46a0, 0x2fe91e0 [ORD=73] [ID=-3]

          0x2fdc0c0: <multiple use>
        0x2fe93e0: i32,ch = load 0x2fe9ce0, 0x2fe1110, 0x2fdc0c0<LD4[%40]> [ORD=74] [ID=-3]

        0x2fe98e0: i32 = Constant<-1> [ORD=75] [ID=-3]

        0x2fe95e0: ch = setne [ID=-3]

      0x2fe9de0: i32 = setcc 0x2fe93e0, 0x2fe98e0, 0x2fe95e0 [ID=-3]

      0x2fdbfc0: ch = BasicBlock<startup_fuel_valves3.return 0x2fe2d70> [ID=-3]

    0x2fe97e0: ch = brcond 0x2fe9ce0, 0x2fe9de0, 0x2fdbfc0 [ID=-3]

    0x2fe1d10: ch = BasicBlock<startup_fuel_valves3.if.then32 0x2fe2c10> [ID=-3]

  0x2fe1210: ch = br 0x2fe97e0, 0x2fe1d10 [ID=-3]


Legalized selection DAG: BB#8 'startup_fuel_valves3:startup_fuel_valves3.if.then28'
SelectionDAG has 19 nodes:
  0x2fe99e0: i32 = FrameIndex<1> [ORD=69] [ID=1]

  0x2fdc0c0: i32 = undef [ORD=69] [ID=3]

    0x2fb6da8: ch = EntryToken [ORD=69] [ID=0]

    0x2fe99e0: <multiple use>
    0x2fdc0c0: <multiple use>
  0x2fe96e0: i32,ch = load 0x2fb6da8, 0x2fe99e0, 0x2fdc0c0<LD4[%2]> [ORD=69] [ID=10]

    0x2fe96e0: <multiple use>
    0x2fe90e0: i32 = Constant<0> [ORD=71] [ID=2]

      0x2fe96e0: <multiple use>
      0x2fe1b10: i32 = Constant<8> [ORD=70] [ID=4]

    0x2fd4ca0: i32 = add 0x2fe96e0, 0x2fe1b10 [ORD=70] [ID=11]

    0x2fdc0c0: <multiple use>
  0x2fe9ce0: ch = store 0x2fe96e0:1, 0x2fe90e0, 0x2fd4ca0, 0x2fdc0c0<ST4[%38]> [ORD=71] [ID=12]

      0x2fe9ce0: <multiple use>
          0x2fe9ce0: <multiple use>
              0x2fe9ce0: <multiple use>
              0x2fe99e0: <multiple use>
              0x2fdc0c0: <multiple use>
            0x2fd46a0: i32,ch = load 0x2fe9ce0, 0x2fe99e0, 0x2fdc0c0<LD4[%2]> [ORD=72] [ID=13]

            0x2fe91e0: i32 = Constant<24> [ORD=73] [ID=5]

          0x2fe1110: i32 = add 0x2fd46a0, 0x2fe91e0 [ORD=73] [ID=14]

          0x2fdc0c0: <multiple use>
        0x2fe93e0: i32,ch = load 0x2fe9ce0, 0x2fe1110, 0x2fdc0c0<LD4[%40]> [ORD=74] [ID=15]

        0x2fe98e0: i32 = Constant<-1> [ORD=75] [ID=6]

        0x2fe95e0: ch = setne [ID=9]

      0x2fe9de0: i32 = setcc 0x2fe93e0, 0x2fe98e0, 0x2fe95e0 [ID=16]

      0x2fdbfc0: ch = BasicBlock<startup_fuel_valves3.return 0x2fe2d70> [ID=7]

    0x2fe97e0: ch = brcond 0x2fe9ce0, 0x2fe9de0, 0x2fdbfc0 [ID=17]

    0x2fe1d10: ch = BasicBlock<startup_fuel_valves3.if.then32 0x2fe2c10> [ID=8]

  0x2fe1210: ch = br 0x2fe97e0, 0x2fe1d10 [ID=18]


Optimized legalized selection DAG: BB#8 'startup_fuel_valves3:startup_fuel_valves3.if.then28'
SelectionDAG has 19 nodes:
  0x2fe99e0: i32 = FrameIndex<1> [ORD=69] [ID=1]

  0x2fdc0c0: i32 = undef [ORD=69] [ID=3]

    0x2fb6da8: ch = EntryToken [ORD=69] [ID=0]

    0x2fe99e0: <multiple use>
    0x2fdc0c0: <multiple use>
  0x2fe96e0: i32,ch = load 0x2fb6da8, 0x2fe99e0, 0x2fdc0c0<LD4[%2]> [ORD=69] [ID=10]

    0x2fe96e0: <multiple use>
    0x2fe90e0: i32 = Constant<0> [ORD=71] [ID=2]

      0x2fe96e0: <multiple use>
      0x2fe1b10: i32 = Constant<8> [ORD=70] [ID=4]

    0x2fd4ca0: i32 = add 0x2fe96e0, 0x2fe1b10 [ORD=70] [ID=11]

    0x2fdc0c0: <multiple use>
  0x2fe9ce0: ch = store 0x2fe96e0:1, 0x2fe90e0, 0x2fd4ca0, 0x2fdc0c0<ST4[%38]> [ORD=71] [ID=12]

      0x2fe9ce0: <multiple use>
          0x2fe9ce0: <multiple use>
              0x2fe9ce0: <multiple use>
              0x2fe99e0: <multiple use>
              0x2fdc0c0: <multiple use>
            0x2fd46a0: i32,ch = load 0x2fe9ce0, 0x2fe99e0, 0x2fdc0c0<LD4[%2]> [ORD=72] [ID=13]

            0x2fe91e0: i32 = Constant<24> [ORD=73] [ID=5]

          0x2fe1110: i32 = add 0x2fd46a0, 0x2fe91e0 [ORD=73] [ID=14]

          0x2fdc0c0: <multiple use>
        0x2fe93e0: i32,ch = load 0x2fe9ce0, 0x2fe1110, 0x2fdc0c0<LD4[%40]> [ORD=74] [ID=15]

        0x2fe98e0: i32 = Constant<-1> [ORD=75] [ID=6]

        0x2fe95e0: ch = setne [ID=9]

      0x2fe9de0: i32 = setcc 0x2fe93e0, 0x2fe98e0, 0x2fe95e0 [ID=16]

      0x2fdbfc0: ch = BasicBlock<startup_fuel_valves3.return 0x2fe2d70> [ID=7]

    0x2fe97e0: ch = brcond 0x2fe9ce0, 0x2fe9de0, 0x2fdbfc0 [ID=17]

    0x2fe1d10: ch = BasicBlock<startup_fuel_valves3.if.then32 0x2fe2c10> [ID=8]

  0x2fe1210: ch = br 0x2fe97e0, 0x2fe1d10 [ID=18]


===== Instruction selection begins: BB#8 'startup_fuel_valves3.if.then28'
ISEL: Starting pattern match on root node: 0x2fe1210: ch = br 0x2fe97e0, 0x2fe1d10 [ID=18]

  Initial Opcode index to 1938
  Morphed node: 0x2fe1210: ch = JAL 0x2fe1d10, 0x2fe97e0

ISEL: Match complete!
=> 0x2fe1210: ch = JAL 0x2fe1d10, 0x2fe97e0

ISEL: Starting pattern match on root node: 0x2fe97e0: ch = brcond 0x2fe9ce0, 0x2fe9de0, 0x2fdbfc0 [ID=17]

  Initial Opcode index to 1439
  Skipped scope entry (due to false predicate) at index 1456, continuing at 1477
  Morphed node: 0x2fe97e0: ch = BNE 0x2fdbfc0, 0x2fe93e0, 0x2fe98e0, 0x2fe9ce0

ISEL: Match complete!
=> 0x2fe97e0: ch = BNE 0x2fdbfc0, 0x2fe93e0, 0x2fe98e0, 0x2fe9ce0

ISEL: Starting pattern match on root node: 0x2fe93e0: i32,ch = load 0x2fe9ce0, 0x2fe1110, 0x2fdc0c0<LD4[%40]> [ORD=74] [ID=15]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2fe93e0: i32,ch = LW 0x2fd46a0, 0x2fe95e0, 0x2fe9ce0<Mem:LD4[%40]> [ORD=74]

ISEL: Match complete!
=> 0x2fe93e0: i32,ch = LW 0x2fd46a0, 0x2fe95e0, 0x2fe9ce0<Mem:LD4[%40]> [ORD=74]

ISEL: Starting pattern match on root node: 0x2fd46a0: i32,ch = load 0x2fe9ce0, 0x2fe99e0, 0x2fdc0c0<LD4[%2]> [ORD=72] [ID=13]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2fd46a0: i32,ch = LW 0x2fe99e0, 0x2fe91e0, 0x2fe9ce0<Mem:LD4[%2]> [ORD=72]

ISEL: Match complete!
=> 0x2fd46a0: i32,ch = LW 0x2fe99e0, 0x2fe91e0, 0x2fe9ce0<Mem:LD4[%2]> [ORD=72]

ISEL: Starting pattern match on root node: 0x2fe9ce0: ch = store 0x2fe96e0:1, 0x2fe90e0, 0x2fd4ca0, 0x2fdc0c0<ST4[%38]> [ORD=71] [ID=12]

  Initial Opcode index to 178
  Morphed node: 0x2fe9ce0: ch = SW 0x2fe90e0, 0x2fe96e0, 0x2fe1110, 0x2fe96e0:1<Mem:ST4[%38]> [ORD=71]

ISEL: Match complete!
=> 0x2fe9ce0: ch = SW 0x2fe90e0, 0x2fe96e0, 0x2fe1110, 0x2fe96e0:1<Mem:ST4[%38]> [ORD=71]

ISEL: Starting pattern match on root node: 0x2fe96e0: i32,ch = load 0x2fb6da8, 0x2fe99e0, 0x2fdc0c0<LD4[%2]> [ORD=69] [ID=10]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2fe96e0: i32,ch = LW 0x2fe99e0, 0x2fe91e0, 0x2fb6da8<Mem:LD4[%2]> [ORD=69]

ISEL: Match complete!
=> 0x2fe96e0: i32,ch = LW 0x2fe99e0, 0x2fe91e0, 0x2fb6da8<Mem:LD4[%2]> [ORD=69]

=> 0x2fe1d10: ch = BasicBlock<startup_fuel_valves3.if.then32 0x2fe2c10>

=> 0x2fdbfc0: ch = BasicBlock<startup_fuel_valves3.return 0x2fe2d70>

ISEL: Starting pattern match on root node: 0x2fe98e0: i32 = Constant<-1> [ORD=75] [ID=6]

  Initial Opcode index to 1226
comparing 0 and -1 and returning value:0
  Skipped scope entry (due to false predicate) at index 1228, continuing at 1236
  Morphed node: 0x2fe98e0: i32 = ADDI 0x2fdc0c0, 0x2fe1b10 [ORD=75]

ISEL: Match complete!
=> 0x2fe98e0: i32 = ADDI 0x2fdc0c0, 0x2fe1b10 [ORD=75]

ISEL: Starting pattern match on root node: 0x2fe90e0: i32 = Constant<0> [ORD=71] [ID=2]

  Initial Opcode index to 1226
comparing 0 and 0 and returning value:1
ISEL: Match complete!
=> 0x2fe90e0: i32 = Constant<0> [ORD=71] [ID=2]

=> 0x2fb6da8: ch = EntryToken [ORD=69]

===== Instruction selection ends:
Selected selection DAG: BB#8 'startup_fuel_valves3:startup_fuel_valves3.if.then28'
SelectionDAG has 18 nodes:
    0x2fe9de0: <multiple use>
    0x2fe91e0: <multiple use>
    0x2fb6da8: ch = EntryToken [ORD=69]

  0x2fe96e0: i32,ch = LW 0x2fe9de0, 0x2fe91e0, 0x2fb6da8<Mem:LD4[%2]> [ORD=69]

    0x2fdc0c0: <multiple use>
    0x2fe96e0: <multiple use>
    0x2fe1110: i32 = TargetConstant<8>

    0x2fe96e0: <multiple use>
  0x2fe9ce0: ch = SW 0x2fdc0c0, 0x2fe96e0, 0x2fe1110, 0x2fe96e0:1<Mem:ST4[%38]> [ORD=71]

  0x2fe91e0: i32 = TargetConstant<0>

  0x2fdc0c0: i32 = Register %zero

    0x2fe90e0: i32 = Register %t5

    0x2fd4ca0: i32 = TargetFrameIndex<1>

  0x2fe9de0: i32 = ADDI 0x2fe90e0, 0x2fd4ca0 [ORD=69]

    0x2fe1d10: ch = BasicBlock<startup_fuel_valves3.if.then32 0x2fe2c10>

      0x2fdbfc0: ch = BasicBlock<startup_fuel_valves3.return 0x2fe2d70>

          0x2fe9de0: <multiple use>
          0x2fe91e0: <multiple use>
          0x2fe9ce0: <multiple use>
        0x2fd46a0: i32,ch = LW 0x2fe9de0, 0x2fe91e0, 0x2fe9ce0<Mem:LD4[%2]> [ORD=72]

        0x2fe95e0: i32 = TargetConstant<24>

        0x2fe9ce0: <multiple use>
      0x2fe93e0: i32,ch = LW 0x2fd46a0, 0x2fe95e0, 0x2fe9ce0<Mem:LD4[%40]> [ORD=74]

        0x2fdc0c0: <multiple use>
        0x2fe1b10: i32 = TargetConstant<-1>

      0x2fe98e0: i32 = ADDI 0x2fdc0c0, 0x2fe1b10 [ORD=75]

      0x2fe9ce0: <multiple use>
    0x2fe97e0: ch = BNE 0x2fdbfc0, 0x2fe93e0, 0x2fe98e0, 0x2fe9ce0

  0x2fe1210: ch = JAL 0x2fe1d10, 0x2fe97e0


********** List Scheduling BB#8 'startup_fuel_valves3.if.then28' **********
SU(0): 0x2fe1210: ch = JAL 0x2fe1d10, 0x2fe97e0 [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x2fe97e0: ch = BNE 0x2fdbfc0, 0x2fe93e0, 0x2fe98e0, 0x2fe9ce0 [ID=1]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
   val SU(6): Latency=1
   val SU(5): Latency=1
   ch  SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x2fe9ce0: ch = SW 0x2fdc0c0, 0x2fe96e0, 0x2fe1110, 0x2fe96e0:1<Mem:ST4[%38]> [ORD=71] [ID=2]

  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 4
  Predecessors:
   val SU(3): Latency=1
   ch  SU(3): Latency=1
  Successors:
   ch  SU(1): Latency=1
   ch  SU(6): Latency=1
   ch  SU(7): Latency=1

SU(3): 0x2fe96e0: i32,ch = LW 0x2fe9de0, 0x2fe91e0, 0x2fb6da8<Mem:LD4[%2]> [ORD=69] [ID=3]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 5
  Predecessors:
   val SU(4): Latency=1
  Successors:
   val SU(2): Latency=1
   ch  SU(2): Latency=1

SU(4): 0x2fe9de0: i32 = ADDI 0x2fe90e0, 0x2fd4ca0 [ORD=69] [ID=4]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
   val SU(3): Latency=1
   val SU(7): Latency=1

SU(5): 0x2fe98e0: i32 = ADDI 0x2fdc0c0, 0x2fe1b10 [ORD=75] [ID=5]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
   val SU(1): Latency=1

SU(6): 0x2fe93e0: i32,ch = LW 0x2fd46a0, 0x2fe95e0, 0x2fe9ce0<Mem:LD4[%40]> [ORD=74] [ID=6]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
   val SU(7): Latency=1
   ch  SU(2): Latency=1
  Successors:
   val SU(1): Latency=1

SU(7): 0x2fd46a0: i32,ch = LW 0x2fe9de0, 0x2fe91e0, 0x2fe9ce0<Mem:LD4[%2]> [ORD=72] [ID=7]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 3
  Height             : 3
  Predecessors:
   val SU(4): Latency=1
   ch  SU(2): Latency=1
  Successors:
   val SU(6): Latency=1


Examining Available:
Height 0: SU(0): 0x2fe1210: ch = JAL 0x2fe1d10, 0x2fe97e0 [ID=0]


*** Scheduling [0]: SU(0): 0x2fe1210: ch = JAL 0x2fe1d10, 0x2fe97e0 [ID=0]


Examining Available:
Height 1: SU(1): 0x2fe97e0: ch = BNE 0x2fdbfc0, 0x2fe93e0, 0x2fe98e0, 0x2fe9ce0 [ID=1]


*** Scheduling [1]: SU(1): 0x2fe97e0: ch = BNE 0x2fdbfc0, 0x2fe93e0, 0x2fe98e0, 0x2fe9ce0 [ID=1]


Examining Available:
Height 2: SU(5): 0x2fe98e0: i32 = ADDI 0x2fdc0c0, 0x2fe1b10 [ORD=75] [ID=5]

Height 2: SU(6): 0x2fe93e0: i32,ch = LW 0x2fd46a0, 0x2fe95e0, 0x2fe9ce0<Mem:LD4[%40]> [ORD=74] [ID=6]


*** Scheduling [2]: SU(5): 0x2fe98e0: i32 = ADDI 0x2fdc0c0, 0x2fe1b10 [ORD=75] [ID=5]


Examining Available:
Height 2: SU(6): 0x2fe93e0: i32,ch = LW 0x2fd46a0, 0x2fe95e0, 0x2fe9ce0<Mem:LD4[%40]> [ORD=74] [ID=6]


*** Scheduling [3]: SU(6): 0x2fe93e0: i32,ch = LW 0x2fd46a0, 0x2fe95e0, 0x2fe9ce0<Mem:LD4[%40]> [ORD=74] [ID=6]


Examining Available:
Height 4: SU(7): 0x2fd46a0: i32,ch = LW 0x2fe9de0, 0x2fe91e0, 0x2fe9ce0<Mem:LD4[%2]> [ORD=72] [ID=7]


*** Scheduling [4]: SU(7): 0x2fd46a0: i32,ch = LW 0x2fe9de0, 0x2fe91e0, 0x2fe9ce0<Mem:LD4[%2]> [ORD=72] [ID=7]


Examining Available:
Height 5: SU(2): 0x2fe9ce0: ch = SW 0x2fdc0c0, 0x2fe96e0, 0x2fe1110, 0x2fe96e0:1<Mem:ST4[%38]> [ORD=71] [ID=2]


*** Scheduling [5]: SU(2): 0x2fe9ce0: ch = SW 0x2fdc0c0, 0x2fe96e0, 0x2fe1110, 0x2fe96e0:1<Mem:ST4[%38]> [ORD=71] [ID=2]


Examining Available:
Height 6: SU(3): 0x2fe96e0: i32,ch = LW 0x2fe9de0, 0x2fe91e0, 0x2fb6da8<Mem:LD4[%2]> [ORD=69] [ID=3]


*** Scheduling [6]: SU(3): 0x2fe96e0: i32,ch = LW 0x2fe9de0, 0x2fe91e0, 0x2fb6da8<Mem:LD4[%2]> [ORD=69] [ID=3]


Examining Available:
Height 7: SU(4): 0x2fe9de0: i32 = ADDI 0x2fe90e0, 0x2fd4ca0 [ORD=69] [ID=4]


*** Scheduling [7]: SU(4): 0x2fe9de0: i32 = ADDI 0x2fe90e0, 0x2fd4ca0 [ORD=69] [ID=4]

*** Final schedule ***
SU(4): 0x2fe9de0: i32 = ADDI 0x2fe90e0, 0x2fd4ca0 [ORD=69] [ID=4]

SU(3): 0x2fe96e0: i32,ch = LW 0x2fe9de0, 0x2fe91e0, 0x2fb6da8<Mem:LD4[%2]> [ORD=69] [ID=3]

SU(2): 0x2fe9ce0: ch = SW 0x2fdc0c0, 0x2fe96e0, 0x2fe1110, 0x2fe96e0:1<Mem:ST4[%38]> [ORD=71] [ID=2]

SU(7): 0x2fd46a0: i32,ch = LW 0x2fe9de0, 0x2fe91e0, 0x2fe9ce0<Mem:LD4[%2]> [ORD=72] [ID=7]

SU(6): 0x2fe93e0: i32,ch = LW 0x2fd46a0, 0x2fe95e0, 0x2fe9ce0<Mem:LD4[%40]> [ORD=74] [ID=6]

SU(5): 0x2fe98e0: i32 = ADDI 0x2fdc0c0, 0x2fe1b10 [ORD=75] [ID=5]

SU(1): 0x2fe97e0: ch = BNE 0x2fdbfc0, 0x2fe93e0, 0x2fe98e0, 0x2fe9ce0 [ID=1]

SU(0): 0x2fe1210: ch = JAL 0x2fe1d10, 0x2fe97e0 [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %43 = load i32** %2, align 4
I was here to add   %2 = alloca i32*, align 4
with I type i32*and sd value :0x2fe9de0: i32 = FrameIndex<1>
new load?0x2fe1b10: i32,ch = load 0x2fb6da8, 0x2fe9de0, 0x2fe90e0<LD4[%2]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x2fd4ca0: i32 = Constant<0>

    0x2fb6da8: ch = EntryToken

    0x2fe9de0: i32 = FrameIndex<1>

    0x2fe90e0: i32 = undef

  0x2fe1b10: i32,ch = load 0x2fb6da8, 0x2fe9de0, 0x2fe90e0<LD4[%2]>

  0x2fb6da8: ch = EntryToken


visiting load instruction   %45 = load i32* %44, align 4
with I type i32and sd value :0x2fe91e0: i32 = add 0x2fe1b10, 0x2fe1110
new load?0x2fe95e0: i32,ch = load 0x2fb6da8, 0x2fe91e0, 0x2fe90e0<LD4[%44]>
dag after load is dealt with?SelectionDAG has 9 nodes:
  0x2fd4ca0: i32 = Constant<0>

  0x2fe90e0: i32 = undef [ORD=76]

  0x2fdc0c0: i64 = Constant<4>

    0x2fb6da8: <multiple use>
        0x2fb6da8: <multiple use>
        0x2fe9de0: i32 = FrameIndex<1> [ORD=76]

        0x2fe90e0: <multiple use>
      0x2fe1b10: i32,ch = load 0x2fb6da8, 0x2fe9de0, 0x2fe90e0<LD4[%2]> [ORD=76]

      0x2fe1110: i32 = Constant<4> [ORD=77]

    0x2fe91e0: i32 = add 0x2fe1b10, 0x2fe1110 [ORD=77]

    0x2fe90e0: <multiple use>
  0x2fe95e0: i32,ch = load 0x2fb6da8, 0x2fe91e0, 0x2fe90e0<LD4[%44]>

  0x2fb6da8: ch = EntryToken [ORD=76]


visiting load instruction   %46 = load i32** %2, align 4
with I type i32*and sd value :0x2fe9de0: i32 = FrameIndex<1>
new load?0x2fe1b10: i32,ch = load 0x2fb6da8, 0x2fe9de0, 0x2fe90e0<LD4[%2]>
dag after load is dealt with?SelectionDAG has 9 nodes:
  0x2fd4ca0: i32 = Constant<0>

  0x2fe90e0: i32 = undef [ORD=76]

  0x2fdc0c0: i64 = Constant<4>

    0x2fb6da8: <multiple use>
        0x2fb6da8: <multiple use>
        0x2fe9de0: i32 = FrameIndex<1> [ORD=76]

        0x2fe90e0: <multiple use>
      0x2fe1b10: i32,ch = load 0x2fb6da8, 0x2fe9de0, 0x2fe90e0<LD4[%2]> [ORD=76]

      0x2fe1110: i32 = Constant<4> [ORD=77]

    0x2fe91e0: i32 = add 0x2fe1b10, 0x2fe1110 [ORD=77]

    0x2fe90e0: <multiple use>
  0x2fe95e0: i32,ch = load 0x2fb6da8, 0x2fe91e0, 0x2fe90e0<LD4[%44]> [ORD=78]

  0x2fb6da8: ch = EntryToken [ORD=76]


store visit is after?  store i32 %45, i32* %47, align 4
whats in dag after store?SelectionDAG has 14 nodes:
  0x2fb6da8: ch = EntryToken [ORD=76]

  0x2fd4ca0: i32 = Constant<0>

  0x2fe90e0: i32 = undef [ORD=76]

    0x2fb6da8: <multiple use>
    0x2fe9de0: i32 = FrameIndex<1> [ORD=76]

    0x2fe90e0: <multiple use>
  0x2fe1b10: i32,ch = load 0x2fb6da8, 0x2fe9de0, 0x2fe90e0<LD4[%2]> [ORD=76]

  0x2fdc0c0: i64 = Constant<4>

    0x2fb6da8: <multiple use>
      0x2fe1b10: <multiple use>
      0x2fe1110: i32 = Constant<4> [ORD=77]

    0x2fe91e0: i32 = add 0x2fe1b10, 0x2fe1110 [ORD=77]

    0x2fe90e0: <multiple use>
  0x2fe95e0: i32,ch = load 0x2fb6da8, 0x2fe91e0, 0x2fe90e0<LD4[%44]> [ORD=78]

  0x2fe1210: i64 = Constant<24>

      0x2fe1b10: <multiple use>
      0x2fe95e0: <multiple use>
      0x2fe1b10: <multiple use>
    0x2fd46a0: ch = TokenFactor 0x2fe1b10:1, 0x2fe95e0:1, 0x2fe1b10:1 [ORD=81]

    0x2fe95e0: <multiple use>
      0x2fe1b10: <multiple use>
      0x2fe97e0: i32 = Constant<24> [ORD=80]

    0x2fe93e0: i32 = add 0x2fe1b10, 0x2fe97e0 [ORD=80]

    0x2fe90e0: <multiple use>
  0x2fe9ce0: ch = store 0x2fd46a0, 0x2fe95e0, 0x2fe93e0, 0x2fe90e0<ST4[%47]> [ORD=81]


Initial selection DAG: BB#9 'startup_fuel_valves3:startup_fuel_valves3.if.then32'
SelectionDAG has 16 nodes:
  0x2fb6da8: ch = EntryToken [ORD=76]

  0x2fd4ca0: i32 = Constant<0>

  0x2fe90e0: i32 = undef [ORD=76]

    0x2fb6da8: <multiple use>
    0x2fe9de0: i32 = FrameIndex<1> [ORD=76]

    0x2fe90e0: <multiple use>
  0x2fe1b10: i32,ch = load 0x2fb6da8, 0x2fe9de0, 0x2fe90e0<LD4[%2]> [ORD=76]

  0x2fdc0c0: i64 = Constant<4>

    0x2fb6da8: <multiple use>
      0x2fe1b10: <multiple use>
      0x2fe1110: i32 = Constant<4> [ORD=77]

    0x2fe91e0: i32 = add 0x2fe1b10, 0x2fe1110 [ORD=77]

    0x2fe90e0: <multiple use>
  0x2fe95e0: i32,ch = load 0x2fb6da8, 0x2fe91e0, 0x2fe90e0<LD4[%44]> [ORD=78]

  0x2fe1210: i64 = Constant<24>

        0x2fe1b10: <multiple use>
        0x2fe95e0: <multiple use>
        0x2fe1b10: <multiple use>
      0x2fd46a0: ch = TokenFactor 0x2fe1b10:1, 0x2fe95e0:1, 0x2fe1b10:1 [ORD=81]

      0x2fe95e0: <multiple use>
        0x2fe1b10: <multiple use>
        0x2fe97e0: i32 = Constant<24> [ORD=80]

      0x2fe93e0: i32 = add 0x2fe1b10, 0x2fe97e0 [ORD=80]

      0x2fe90e0: <multiple use>
    0x2fe9ce0: ch = store 0x2fd46a0, 0x2fe95e0, 0x2fe93e0, 0x2fe90e0<ST4[%47]> [ORD=81]

    0x2fe96e0: ch = BasicBlock<startup_fuel_valves3.return 0x2fe2d70>

  0x2fe1d10: ch = br 0x2fe9ce0, 0x2fe96e0



Replacing.1 0x2fd46a0: ch = TokenFactor 0x2fe1b10:1, 0x2fe95e0:1, 0x2fe1b10:1 [ORD=81]

With: 0x2fdbfc0: ch = TokenFactor 0x2fe1b10:1, 0x2fe95e0:1
 and 0 other values
Optimized lowered selection DAG: BB#9 'startup_fuel_valves3:startup_fuel_valves3.if.then32'
SelectionDAG has 13 nodes:
  0x2fb6da8: ch = EntryToken [ORD=76]

  0x2fe90e0: i32 = undef [ORD=76]

    0x2fb6da8: <multiple use>
    0x2fe9de0: i32 = FrameIndex<1> [ORD=76]

    0x2fe90e0: <multiple use>
  0x2fe1b10: i32,ch = load 0x2fb6da8, 0x2fe9de0, 0x2fe90e0<LD4[%2]> [ORD=76]

    0x2fb6da8: <multiple use>
      0x2fe1b10: <multiple use>
      0x2fe1110: i32 = Constant<4> [ORD=77]

    0x2fe91e0: i32 = add 0x2fe1b10, 0x2fe1110 [ORD=77]

    0x2fe90e0: <multiple use>
  0x2fe95e0: i32,ch = load 0x2fb6da8, 0x2fe91e0, 0x2fe90e0<LD4[%44]> [ORD=78]

        0x2fe1b10: <multiple use>
        0x2fe95e0: <multiple use>
      0x2fdbfc0: ch = TokenFactor 0x2fe1b10:1, 0x2fe95e0:1

      0x2fe95e0: <multiple use>
        0x2fe1b10: <multiple use>
        0x2fe97e0: i32 = Constant<24> [ORD=80]

      0x2fe93e0: i32 = add 0x2fe1b10, 0x2fe97e0 [ORD=80]

      0x2fe90e0: <multiple use>
    0x2fe9ce0: ch = store 0x2fdbfc0, 0x2fe95e0, 0x2fe93e0, 0x2fe90e0<ST4[%47]> [ORD=81]

    0x2fe96e0: ch = BasicBlock<startup_fuel_valves3.return 0x2fe2d70>

  0x2fe1d10: ch = br 0x2fe9ce0, 0x2fe96e0


Legally typed node: 0x2fe96e0: ch = BasicBlock<startup_fuel_valves3.return 0x2fe2d70> [ID=0]

Legally typed node: 0x2fe97e0: i32 = Constant<24> [ORD=80] [ID=0]

Legally typed node: 0x2fe1110: i32 = Constant<4> [ORD=77] [ID=0]

Legally typed node: 0x2fe90e0: i32 = undef [ORD=76] [ID=0]

Legally typed node: 0x2fe9de0: i32 = FrameIndex<1> [ORD=76] [ID=0]

Legally typed node: 0x2fb6da8: ch = EntryToken [ORD=76] [ID=0]

Legally typed node: 0x2fe1b10: i32,ch = load 0x2fb6da8, 0x2fe9de0, 0x2fe90e0<LD4[%2]> [ORD=76] [ID=0]

Legally typed node: 0x2fe91e0: i32 = add 0x2fe1b10, 0x2fe1110 [ORD=77] [ID=0]

Legally typed node: 0x2fe95e0: i32,ch = load 0x2fb6da8, 0x2fe91e0, 0x2fe90e0<LD4[%44]> [ORD=78] [ID=0]

Legally typed node: 0x2fdbfc0: ch = TokenFactor 0x2fe1b10:1, 0x2fe95e0:1 [ID=0]

Legally typed node: 0x2fe93e0: i32 = add 0x2fe1b10, 0x2fe97e0 [ORD=80] [ID=0]

Legally typed node: 0x2fe9ce0: ch = store 0x2fdbfc0, 0x2fe95e0, 0x2fe93e0, 0x2fe90e0<ST4[%47]> [ORD=81] [ID=0]

Legally typed node: 0x2fe1d10: ch = br 0x2fe9ce0, 0x2fe96e0 [ID=0]

Legally typed node: 0x7fff9b4748f0: ch = handlenode 0x2fe1d10 [ID=0]

Type-legalized selection DAG: BB#9 'startup_fuel_valves3:startup_fuel_valves3.if.then32'
SelectionDAG has 13 nodes:
  0x2fb6da8: ch = EntryToken [ORD=76] [ID=-3]

  0x2fe90e0: i32 = undef [ORD=76] [ID=-3]

    0x2fb6da8: <multiple use>
    0x2fe9de0: i32 = FrameIndex<1> [ORD=76] [ID=-3]

    0x2fe90e0: <multiple use>
  0x2fe1b10: i32,ch = load 0x2fb6da8, 0x2fe9de0, 0x2fe90e0<LD4[%2]> [ORD=76] [ID=-3]

    0x2fb6da8: <multiple use>
      0x2fe1b10: <multiple use>
      0x2fe1110: i32 = Constant<4> [ORD=77] [ID=-3]

    0x2fe91e0: i32 = add 0x2fe1b10, 0x2fe1110 [ORD=77] [ID=-3]

    0x2fe90e0: <multiple use>
  0x2fe95e0: i32,ch = load 0x2fb6da8, 0x2fe91e0, 0x2fe90e0<LD4[%44]> [ORD=78] [ID=-3]

        0x2fe1b10: <multiple use>
        0x2fe95e0: <multiple use>
      0x2fdbfc0: ch = TokenFactor 0x2fe1b10:1, 0x2fe95e0:1 [ID=-3]

      0x2fe95e0: <multiple use>
        0x2fe1b10: <multiple use>
        0x2fe97e0: i32 = Constant<24> [ORD=80] [ID=-3]

      0x2fe93e0: i32 = add 0x2fe1b10, 0x2fe97e0 [ORD=80] [ID=-3]

      0x2fe90e0: <multiple use>
    0x2fe9ce0: ch = store 0x2fdbfc0, 0x2fe95e0, 0x2fe93e0, 0x2fe90e0<ST4[%47]> [ORD=81] [ID=-3]

    0x2fe96e0: ch = BasicBlock<startup_fuel_valves3.return 0x2fe2d70> [ID=-3]

  0x2fe1d10: ch = br 0x2fe9ce0, 0x2fe96e0 [ID=-3]


Legalized selection DAG: BB#9 'startup_fuel_valves3:startup_fuel_valves3.if.then32'
SelectionDAG has 13 nodes:
  0x2fb6da8: ch = EntryToken [ORD=76] [ID=0]

  0x2fe90e0: i32 = undef [ORD=76] [ID=2]

    0x2fb6da8: <multiple use>
    0x2fe9de0: i32 = FrameIndex<1> [ORD=76] [ID=1]

    0x2fe90e0: <multiple use>
  0x2fe1b10: i32,ch = load 0x2fb6da8, 0x2fe9de0, 0x2fe90e0<LD4[%2]> [ORD=76] [ID=6]

    0x2fb6da8: <multiple use>
      0x2fe1b10: <multiple use>
      0x2fe1110: i32 = Constant<4> [ORD=77] [ID=3]

    0x2fe91e0: i32 = add 0x2fe1b10, 0x2fe1110 [ORD=77] [ID=8]

    0x2fe90e0: <multiple use>
  0x2fe95e0: i32,ch = load 0x2fb6da8, 0x2fe91e0, 0x2fe90e0<LD4[%44]> [ORD=78] [ID=9]

        0x2fe1b10: <multiple use>
        0x2fe95e0: <multiple use>
      0x2fdbfc0: ch = TokenFactor 0x2fe1b10:1, 0x2fe95e0:1 [ID=10]

      0x2fe95e0: <multiple use>
        0x2fe1b10: <multiple use>
        0x2fe97e0: i32 = Constant<24> [ORD=80] [ID=4]

      0x2fe93e0: i32 = add 0x2fe1b10, 0x2fe97e0 [ORD=80] [ID=7]

      0x2fe90e0: <multiple use>
    0x2fe9ce0: ch = store 0x2fdbfc0, 0x2fe95e0, 0x2fe93e0, 0x2fe90e0<ST4[%47]> [ORD=81] [ID=11]

    0x2fe96e0: ch = BasicBlock<startup_fuel_valves3.return 0x2fe2d70> [ID=5]

  0x2fe1d10: ch = br 0x2fe9ce0, 0x2fe96e0 [ID=12]


Optimized legalized selection DAG: BB#9 'startup_fuel_valves3:startup_fuel_valves3.if.then32'
SelectionDAG has 13 nodes:
  0x2fb6da8: ch = EntryToken [ORD=76] [ID=0]

  0x2fe90e0: i32 = undef [ORD=76] [ID=2]

    0x2fb6da8: <multiple use>
    0x2fe9de0: i32 = FrameIndex<1> [ORD=76] [ID=1]

    0x2fe90e0: <multiple use>
  0x2fe1b10: i32,ch = load 0x2fb6da8, 0x2fe9de0, 0x2fe90e0<LD4[%2]> [ORD=76] [ID=6]

    0x2fb6da8: <multiple use>
      0x2fe1b10: <multiple use>
      0x2fe1110: i32 = Constant<4> [ORD=77] [ID=3]

    0x2fe91e0: i32 = add 0x2fe1b10, 0x2fe1110 [ORD=77] [ID=8]

    0x2fe90e0: <multiple use>
  0x2fe95e0: i32,ch = load 0x2fb6da8, 0x2fe91e0, 0x2fe90e0<LD4[%44]> [ORD=78] [ID=9]

        0x2fe1b10: <multiple use>
        0x2fe95e0: <multiple use>
      0x2fdbfc0: ch = TokenFactor 0x2fe1b10:1, 0x2fe95e0:1 [ID=10]

      0x2fe95e0: <multiple use>
        0x2fe1b10: <multiple use>
        0x2fe97e0: i32 = Constant<24> [ORD=80] [ID=4]

      0x2fe93e0: i32 = add 0x2fe1b10, 0x2fe97e0 [ORD=80] [ID=7]

      0x2fe90e0: <multiple use>
    0x2fe9ce0: ch = store 0x2fdbfc0, 0x2fe95e0, 0x2fe93e0, 0x2fe90e0<ST4[%47]> [ORD=81] [ID=11]

    0x2fe96e0: ch = BasicBlock<startup_fuel_valves3.return 0x2fe2d70> [ID=5]

  0x2fe1d10: ch = br 0x2fe9ce0, 0x2fe96e0 [ID=12]


===== Instruction selection begins: BB#9 'startup_fuel_valves3.if.then32'
ISEL: Starting pattern match on root node: 0x2fe1d10: ch = br 0x2fe9ce0, 0x2fe96e0 [ID=12]

  Initial Opcode index to 1938
  Morphed node: 0x2fe1d10: ch = JAL 0x2fe96e0, 0x2fe9ce0

ISEL: Match complete!
=> 0x2fe1d10: ch = JAL 0x2fe96e0, 0x2fe9ce0

ISEL: Starting pattern match on root node: 0x2fe9ce0: ch = store 0x2fdbfc0, 0x2fe95e0, 0x2fe93e0, 0x2fe90e0<ST4[%47]> [ORD=81] [ID=11]

  Initial Opcode index to 178
  Morphed node: 0x2fe9ce0: ch = SW 0x2fe95e0, 0x2fe1b10, 0x2fd4ca0, 0x2fdbfc0<Mem:ST4[%47]> [ORD=81]

ISEL: Match complete!
=> 0x2fe9ce0: ch = SW 0x2fe95e0, 0x2fe1b10, 0x2fd4ca0, 0x2fdbfc0<Mem:ST4[%47]> [ORD=81]

=> 0x2fdbfc0: ch = TokenFactor 0x2fe1b10:1, 0x2fe95e0:1

ISEL: Starting pattern match on root node: 0x2fe95e0: i32,ch = load 0x2fb6da8, 0x2fe91e0, 0x2fe90e0<LD4[%44]> [ORD=78] [ID=9]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2fe95e0: i32,ch = LW 0x2fe1b10, 0x2fe97e0, 0x2fb6da8<Mem:LD4[%44]> [ORD=78]

ISEL: Match complete!
=> 0x2fe95e0: i32,ch = LW 0x2fe1b10, 0x2fe97e0, 0x2fb6da8<Mem:LD4[%44]> [ORD=78]

ISEL: Starting pattern match on root node: 0x2fe1b10: i32,ch = load 0x2fb6da8, 0x2fe9de0, 0x2fe90e0<LD4[%2]> [ORD=76] [ID=6]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2fe1b10: i32,ch = LW 0x2fe9de0, 0x2fe1110, 0x2fb6da8<Mem:LD4[%2]> [ORD=76]

ISEL: Match complete!
=> 0x2fe1b10: i32,ch = LW 0x2fe9de0, 0x2fe1110, 0x2fb6da8<Mem:LD4[%2]> [ORD=76]

=> 0x2fe96e0: ch = BasicBlock<startup_fuel_valves3.return 0x2fe2d70>

=> 0x2fb6da8: ch = EntryToken [ORD=76]

===== Instruction selection ends:
Selected selection DAG: BB#9 'startup_fuel_valves3:startup_fuel_valves3.if.then32'
SelectionDAG has 13 nodes:
  0x2fb6da8: ch = EntryToken [ORD=76]

      0x2fe90e0: i32 = Register %t5

      0x2fe91e0: i32 = TargetFrameIndex<1>

    0x2fe9de0: i32 = ADDI 0x2fe90e0, 0x2fe91e0 [ORD=76]

    0x2fe1110: i32 = TargetConstant<0>

    0x2fb6da8: <multiple use>
  0x2fe1b10: i32,ch = LW 0x2fe9de0, 0x2fe1110, 0x2fb6da8<Mem:LD4[%2]> [ORD=76]

    0x2fe1b10: <multiple use>
    0x2fe97e0: i32 = TargetConstant<4>

    0x2fb6da8: <multiple use>
  0x2fe95e0: i32,ch = LW 0x2fe1b10, 0x2fe97e0, 0x2fb6da8<Mem:LD4[%44]> [ORD=78]

    0x2fe96e0: ch = BasicBlock<startup_fuel_valves3.return 0x2fe2d70>

      0x2fe95e0: <multiple use>
      0x2fe1b10: <multiple use>
      0x2fd4ca0: i32 = TargetConstant<24>

        0x2fe1b10: <multiple use>
        0x2fe95e0: <multiple use>
      0x2fdbfc0: ch = TokenFactor 0x2fe1b10:1, 0x2fe95e0:1

    0x2fe9ce0: ch = SW 0x2fe95e0, 0x2fe1b10, 0x2fd4ca0, 0x2fdbfc0<Mem:ST4[%47]> [ORD=81]

  0x2fe1d10: ch = JAL 0x2fe96e0, 0x2fe9ce0


********** List Scheduling BB#9 'startup_fuel_valves3.if.then32' **********
SU(0): 0x2fe1d10: ch = JAL 0x2fe96e0, 0x2fe9ce0 [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x2fe9ce0: ch = SW 0x2fe95e0, 0x2fe1b10, 0x2fd4ca0, 0x2fdbfc0<Mem:ST4[%47]> [ORD=81] [ID=1]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(5): Latency=1
   val SU(3): Latency=1
   ch  SU(2): Latency=0
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x2fdbfc0: ch = TokenFactor 0x2fe1b10:1, 0x2fe95e0:1 [ID=2]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 1
  Predecessors:
   ch  SU(3): Latency=1
   ch  SU(5): Latency=1
  Successors:
   ch  SU(1): Latency=0

SU(3): 0x2fe1b10: i32,ch = LW 0x2fe9de0, 0x2fe1110, 0x2fb6da8<Mem:LD4[%2]> [ORD=76] [ID=3]

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(4): Latency=1
  Successors:
   val SU(1): Latency=1
   ch  SU(2): Latency=1
   val SU(5): Latency=1

SU(4): 0x2fe9de0: i32 = ADDI 0x2fe90e0, 0x2fe91e0 [ORD=76] [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(3): Latency=1

SU(5): 0x2fe95e0: i32,ch = LW 0x2fe1b10, 0x2fe97e0, 0x2fb6da8<Mem:LD4[%44]> [ORD=78] [ID=5]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(3): Latency=1
  Successors:
   val SU(1): Latency=1
   ch  SU(2): Latency=1


Examining Available:
Height 0: SU(0): 0x2fe1d10: ch = JAL 0x2fe96e0, 0x2fe9ce0 [ID=0]


*** Scheduling [0]: SU(0): 0x2fe1d10: ch = JAL 0x2fe96e0, 0x2fe9ce0 [ID=0]


Examining Available:
Height 1: SU(1): 0x2fe9ce0: ch = SW 0x2fe95e0, 0x2fe1b10, 0x2fd4ca0, 0x2fdbfc0<Mem:ST4[%47]> [ORD=81] [ID=1]


*** Scheduling [1]: SU(1): 0x2fe9ce0: ch = SW 0x2fe95e0, 0x2fe1b10, 0x2fd4ca0, 0x2fdbfc0<Mem:ST4[%47]> [ORD=81] [ID=1]


Examining Available:
Height 1: SU(2): 0x2fdbfc0: ch = TokenFactor 0x2fe1b10:1, 0x2fe95e0:1 [ID=2]


*** Scheduling [2]: SU(2): 0x2fdbfc0: ch = TokenFactor 0x2fe1b10:1, 0x2fe95e0:1 [ID=2]


Examining Available:
Height 3: SU(5): 0x2fe95e0: i32,ch = LW 0x2fe1b10, 0x2fe97e0, 0x2fb6da8<Mem:LD4[%44]> [ORD=78] [ID=5]


*** Scheduling [3]: SU(5): 0x2fe95e0: i32,ch = LW 0x2fe1b10, 0x2fe97e0, 0x2fb6da8<Mem:LD4[%44]> [ORD=78] [ID=5]


Examining Available:
Height 4: SU(3): 0x2fe1b10: i32,ch = LW 0x2fe9de0, 0x2fe1110, 0x2fb6da8<Mem:LD4[%2]> [ORD=76] [ID=3]


*** Scheduling [4]: SU(3): 0x2fe1b10: i32,ch = LW 0x2fe9de0, 0x2fe1110, 0x2fb6da8<Mem:LD4[%2]> [ORD=76] [ID=3]


Examining Available:
Height 5: SU(4): 0x2fe9de0: i32 = ADDI 0x2fe90e0, 0x2fe91e0 [ORD=76] [ID=4]


*** Scheduling [5]: SU(4): 0x2fe9de0: i32 = ADDI 0x2fe90e0, 0x2fe91e0 [ORD=76] [ID=4]

*** Final schedule ***
SU(4): 0x2fe9de0: i32 = ADDI 0x2fe90e0, 0x2fe91e0 [ORD=76] [ID=4]

SU(3): 0x2fe1b10: i32,ch = LW 0x2fe9de0, 0x2fe1110, 0x2fb6da8<Mem:LD4[%2]> [ORD=76] [ID=3]

SU(5): 0x2fe95e0: i32,ch = LW 0x2fe1b10, 0x2fe97e0, 0x2fb6da8<Mem:LD4[%44]> [ORD=78] [ID=5]

SU(2): 0x2fdbfc0: ch = TokenFactor 0x2fe1b10:1, 0x2fe95e0:1 [ID=2]

SU(1): 0x2fe9ce0: ch = SW 0x2fe95e0, 0x2fe1b10, 0x2fd4ca0, 0x2fdbfc0<Mem:ST4[%47]> [ORD=81] [ID=1]

SU(0): 0x2fe1d10: ch = JAL 0x2fe96e0, 0x2fe9ce0 [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %48 = load i32** %2, align 4
I was here to add   %2 = alloca i32*, align 4
with I type i32*and sd value :0x2fe91e0: i32 = FrameIndex<1>
new load?0x2fe97e0: i32,ch = load 0x2fb6da8, 0x2fe91e0, 0x2fe1110<LD4[%2]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x2fe90e0: i32 = Constant<0>

    0x2fb6da8: ch = EntryToken

    0x2fe91e0: i32 = FrameIndex<1>

    0x2fe1110: i32 = undef

  0x2fe97e0: i32,ch = load 0x2fb6da8, 0x2fe91e0, 0x2fe1110<LD4[%2]>

  0x2fb6da8: ch = EntryToken


store visit is after?  store i32 1, i32* %49, align 4
I was here to add i32 1
whats in dag after store?SelectionDAG has 10 nodes:
  0x2fe90e0: i32 = Constant<0>

  0x2fe1110: i32 = undef [ORD=82]

    0x2fb6da8: ch = EntryToken [ORD=82]

    0x2fe91e0: i32 = FrameIndex<1> [ORD=82]

    0x2fe1110: <multiple use>
  0x2fe97e0: i32,ch = load 0x2fb6da8, 0x2fe91e0, 0x2fe1110<LD4[%2]> [ORD=82]

  0x2fd4ca0: i64 = Constant<8>

    0x2fe97e0: <multiple use>
    0x2fdbfc0: i32 = Constant<1> [ORD=84]

      0x2fe97e0: <multiple use>
      0x2fe1d10: i32 = Constant<8> [ORD=83]

    0x2fe9ce0: i32 = add 0x2fe97e0, 0x2fe1d10 [ORD=83]

    0x2fe1110: <multiple use>
  0x2fe95e0: ch = store 0x2fe97e0:1, 0x2fdbfc0, 0x2fe9ce0, 0x2fe1110<ST4[%49]> [ORD=84]


visiting load instruction   %50 = load i32** %2, align 4
with I type i32*and sd value :0x2fe91e0: i32 = FrameIndex<1>
new load?0x2fe1b10: i32,ch = load 0x2fe95e0, 0x2fe91e0, 0x2fe1110<LD4[%2]>
dag after load is dealt with?SelectionDAG has 11 nodes:
  0x2fe91e0: i32 = FrameIndex<1> [ORD=82]

  0x2fe90e0: i32 = Constant<0>

  0x2fe1110: i32 = undef [ORD=82]

    0x2fb6da8: ch = EntryToken [ORD=82]

    0x2fe91e0: <multiple use>
    0x2fe1110: <multiple use>
  0x2fe97e0: i32,ch = load 0x2fb6da8, 0x2fe91e0, 0x2fe1110<LD4[%2]> [ORD=82]

  0x2fd4ca0: i64 = Constant<8>

      0x2fe97e0: <multiple use>
      0x2fdbfc0: i32 = Constant<1> [ORD=84]

        0x2fe97e0: <multiple use>
        0x2fe1d10: i32 = Constant<8> [ORD=83]

      0x2fe9ce0: i32 = add 0x2fe97e0, 0x2fe1d10 [ORD=83]

      0x2fe1110: <multiple use>
    0x2fe95e0: ch = store 0x2fe97e0:1, 0x2fdbfc0, 0x2fe9ce0, 0x2fe1110<ST4[%49]> [ORD=84]

    0x2fe91e0: <multiple use>
    0x2fe1110: <multiple use>
  0x2fe1b10: i32,ch = load 0x2fe95e0, 0x2fe91e0, 0x2fe1110<LD4[%2]>

    0x2fe97e0: <multiple use>
    0x2fdbfc0: i32 = Constant<1> [ORD=84]

      0x2fe97e0: <multiple use>
      0x2fe1d10: i32 = Constant<8> [ORD=83]

    0x2fe9ce0: i32 = add 0x2fe97e0, 0x2fe1d10 [ORD=83]

    0x2fe1110: <multiple use>
  0x2fe95e0: ch = store 0x2fe97e0:1, 0x2fdbfc0, 0x2fe9ce0, 0x2fe1110<ST4[%49]> [ORD=84]


store visit is after?  store i32 1, i32* %51, align 4
whats in dag after store?SelectionDAG has 15 nodes:
  0x2fe91e0: i32 = FrameIndex<1> [ORD=82]

  0x2fe90e0: i32 = Constant<0>

  0x2fe1110: i32 = undef [ORD=82]

    0x2fb6da8: ch = EntryToken [ORD=82]

    0x2fe91e0: <multiple use>
    0x2fe1110: <multiple use>
  0x2fe97e0: i32,ch = load 0x2fb6da8, 0x2fe91e0, 0x2fe1110<LD4[%2]> [ORD=82]

  0x2fd4ca0: i64 = Constant<8>

  0x2fdbfc0: i32 = Constant<1> [ORD=84]

      0x2fe97e0: <multiple use>
      0x2fdbfc0: <multiple use>
        0x2fe97e0: <multiple use>
        0x2fe1d10: i32 = Constant<8> [ORD=83]

      0x2fe9ce0: i32 = add 0x2fe97e0, 0x2fe1d10 [ORD=83]

      0x2fe1110: <multiple use>
    0x2fe95e0: ch = store 0x2fe97e0:1, 0x2fdbfc0, 0x2fe9ce0, 0x2fe1110<ST4[%49]> [ORD=84]

    0x2fe91e0: <multiple use>
    0x2fe1110: <multiple use>
  0x2fe1b10: i32,ch = load 0x2fe95e0, 0x2fe91e0, 0x2fe1110<LD4[%2]> [ORD=85]

  0x2fe96e0: i64 = Constant<12>

    0x2fe1b10: <multiple use>
    0x2fdbfc0: <multiple use>
      0x2fe1b10: <multiple use>
      0x2fe9de0: i32 = Constant<12> [ORD=86]

    0x2fe93e0: i32 = add 0x2fe1b10, 0x2fe9de0 [ORD=86]

    0x2fe1110: <multiple use>
  0x2fdc0c0: ch = store 0x2fe1b10:1, 0x2fdbfc0, 0x2fe93e0, 0x2fe1110<ST4[%51]> [ORD=87]


visiting load instruction   %52 = load i32** %2, align 4
with I type i32*and sd value :0x2fe91e0: i32 = FrameIndex<1>
new load?0x2fe1210: i32,ch = load 0x2fdc0c0, 0x2fe91e0, 0x2fe1110<LD4[%2]>
dag after load is dealt with?SelectionDAG has 16 nodes:
  0x2fe91e0: i32 = FrameIndex<1> [ORD=82]

  0x2fe90e0: i32 = Constant<0>

  0x2fe1110: i32 = undef [ORD=82]

    0x2fb6da8: ch = EntryToken [ORD=82]

    0x2fe91e0: <multiple use>
    0x2fe1110: <multiple use>
  0x2fe97e0: i32,ch = load 0x2fb6da8, 0x2fe91e0, 0x2fe1110<LD4[%2]> [ORD=82]

  0x2fd4ca0: i64 = Constant<8>

  0x2fdbfc0: i32 = Constant<1> [ORD=84]

      0x2fe97e0: <multiple use>
      0x2fdbfc0: <multiple use>
        0x2fe97e0: <multiple use>
        0x2fe1d10: i32 = Constant<8> [ORD=83]

      0x2fe9ce0: i32 = add 0x2fe97e0, 0x2fe1d10 [ORD=83]

      0x2fe1110: <multiple use>
    0x2fe95e0: ch = store 0x2fe97e0:1, 0x2fdbfc0, 0x2fe9ce0, 0x2fe1110<ST4[%49]> [ORD=84]

    0x2fe91e0: <multiple use>
    0x2fe1110: <multiple use>
  0x2fe1b10: i32,ch = load 0x2fe95e0, 0x2fe91e0, 0x2fe1110<LD4[%2]> [ORD=85]

  0x2fe96e0: i64 = Constant<12>

      0x2fe1b10: <multiple use>
      0x2fdbfc0: <multiple use>
        0x2fe1b10: <multiple use>
        0x2fe9de0: i32 = Constant<12> [ORD=86]

      0x2fe93e0: i32 = add 0x2fe1b10, 0x2fe9de0 [ORD=86]

      0x2fe1110: <multiple use>
    0x2fdc0c0: ch = store 0x2fe1b10:1, 0x2fdbfc0, 0x2fe93e0, 0x2fe1110<ST4[%51]> [ORD=87]

    0x2fe91e0: <multiple use>
    0x2fe1110: <multiple use>
  0x2fe1210: i32,ch = load 0x2fdc0c0, 0x2fe91e0, 0x2fe1110<LD4[%2]>

    0x2fe1b10: <multiple use>
    0x2fdbfc0: <multiple use>
      0x2fe1b10: <multiple use>
      0x2fe9de0: i32 = Constant<12> [ORD=86]

    0x2fe93e0: i32 = add 0x2fe1b10, 0x2fe9de0 [ORD=86]

    0x2fe1110: <multiple use>
  0x2fdc0c0: ch = store 0x2fe1b10:1, 0x2fdbfc0, 0x2fe93e0, 0x2fe1110<ST4[%51]> [ORD=87]


store visit is after?  store i32 0, i32* %53, align 4
I was here to add i32 0
whats in dag after store?SelectionDAG has 20 nodes:
  0x2fe91e0: i32 = FrameIndex<1> [ORD=82]

  0x2fe1110: i32 = undef [ORD=82]

    0x2fb6da8: ch = EntryToken [ORD=82]

    0x2fe91e0: <multiple use>
    0x2fe1110: <multiple use>
  0x2fe97e0: i32,ch = load 0x2fb6da8, 0x2fe91e0, 0x2fe1110<LD4[%2]> [ORD=82]

  0x2fd4ca0: i64 = Constant<8>

  0x2fdbfc0: i32 = Constant<1> [ORD=84]

      0x2fe97e0: <multiple use>
      0x2fdbfc0: <multiple use>
        0x2fe97e0: <multiple use>
        0x2fe1d10: i32 = Constant<8> [ORD=83]

      0x2fe9ce0: i32 = add 0x2fe97e0, 0x2fe1d10 [ORD=83]

      0x2fe1110: <multiple use>
    0x2fe95e0: ch = store 0x2fe97e0:1, 0x2fdbfc0, 0x2fe9ce0, 0x2fe1110<ST4[%49]> [ORD=84]

    0x2fe91e0: <multiple use>
    0x2fe1110: <multiple use>
  0x2fe1b10: i32,ch = load 0x2fe95e0, 0x2fe91e0, 0x2fe1110<LD4[%2]> [ORD=85]

  0x2fe96e0: i64 = Constant<12>

      0x2fe1b10: <multiple use>
      0x2fdbfc0: <multiple use>
        0x2fe1b10: <multiple use>
        0x2fe9de0: i32 = Constant<12> [ORD=86]

      0x2fe93e0: i32 = add 0x2fe1b10, 0x2fe9de0 [ORD=86]

      0x2fe1110: <multiple use>
    0x2fdc0c0: ch = store 0x2fe1b10:1, 0x2fdbfc0, 0x2fe93e0, 0x2fe1110<ST4[%51]> [ORD=87]

    0x2fe91e0: <multiple use>
    0x2fe1110: <multiple use>
  0x2fe1210: i32,ch = load 0x2fdc0c0, 0x2fe91e0, 0x2fe1110<LD4[%2]> [ORD=88]

  0x2fd46a0: i64 = Constant<16>

    0x2fe1210: <multiple use>
    0x2fe90e0: i32 = Constant<0> [ORD=90]

      0x2fe1210: <multiple use>
      0x2fe98e0: i32 = Constant<16> [ORD=89]

    0x2fe99e0: i32 = add 0x2fe1210, 0x2fe98e0 [ORD=89]

    0x2fe1110: <multiple use>
  0x2fe8fe0: ch = store 0x2fe1210:1, 0x2fe90e0, 0x2fe99e0, 0x2fe1110<ST4[%53]> [ORD=90]


Initial selection DAG: BB#10 'startup_fuel_valves3:startup_fuel_valves3.if.then'
SelectionDAG has 20 nodes:
  0x2fe91e0: i32 = FrameIndex<1> [ORD=82]

  0x2fe1110: i32 = undef [ORD=82]

    0x2fb6da8: ch = EntryToken [ORD=82]

    0x2fe91e0: <multiple use>
    0x2fe1110: <multiple use>
  0x2fe97e0: i32,ch = load 0x2fb6da8, 0x2fe91e0, 0x2fe1110<LD4[%2]> [ORD=82]

  0x2fd4ca0: i64 = Constant<8>

  0x2fdbfc0: i32 = Constant<1> [ORD=84]

      0x2fe97e0: <multiple use>
      0x2fdbfc0: <multiple use>
        0x2fe97e0: <multiple use>
        0x2fe1d10: i32 = Constant<8> [ORD=83]

      0x2fe9ce0: i32 = add 0x2fe97e0, 0x2fe1d10 [ORD=83]

      0x2fe1110: <multiple use>
    0x2fe95e0: ch = store 0x2fe97e0:1, 0x2fdbfc0, 0x2fe9ce0, 0x2fe1110<ST4[%49]> [ORD=84]

    0x2fe91e0: <multiple use>
    0x2fe1110: <multiple use>
  0x2fe1b10: i32,ch = load 0x2fe95e0, 0x2fe91e0, 0x2fe1110<LD4[%2]> [ORD=85]

  0x2fe96e0: i64 = Constant<12>

      0x2fe1b10: <multiple use>
      0x2fdbfc0: <multiple use>
        0x2fe1b10: <multiple use>
        0x2fe9de0: i32 = Constant<12> [ORD=86]

      0x2fe93e0: i32 = add 0x2fe1b10, 0x2fe9de0 [ORD=86]

      0x2fe1110: <multiple use>
    0x2fdc0c0: ch = store 0x2fe1b10:1, 0x2fdbfc0, 0x2fe93e0, 0x2fe1110<ST4[%51]> [ORD=87]

    0x2fe91e0: <multiple use>
    0x2fe1110: <multiple use>
  0x2fe1210: i32,ch = load 0x2fdc0c0, 0x2fe91e0, 0x2fe1110<LD4[%2]> [ORD=88]

  0x2fd46a0: i64 = Constant<16>

    0x2fe1210: <multiple use>
    0x2fe90e0: i32 = Constant<0> [ORD=90]

      0x2fe1210: <multiple use>
      0x2fe98e0: i32 = Constant<16> [ORD=89]

    0x2fe99e0: i32 = add 0x2fe1210, 0x2fe98e0 [ORD=89]

    0x2fe1110: <multiple use>
  0x2fe8fe0: ch = store 0x2fe1210:1, 0x2fe90e0, 0x2fe99e0, 0x2fe1110<ST4[%53]> [ORD=90]


Optimized lowered selection DAG: BB#10 'startup_fuel_valves3:startup_fuel_valves3.if.then'
SelectionDAG has 17 nodes:
  0x2fe91e0: i32 = FrameIndex<1> [ORD=82]

  0x2fe1110: i32 = undef [ORD=82]

    0x2fb6da8: ch = EntryToken [ORD=82]

    0x2fe91e0: <multiple use>
    0x2fe1110: <multiple use>
  0x2fe97e0: i32,ch = load 0x2fb6da8, 0x2fe91e0, 0x2fe1110<LD4[%2]> [ORD=82]

  0x2fdbfc0: i32 = Constant<1> [ORD=84]

      0x2fe97e0: <multiple use>
      0x2fdbfc0: <multiple use>
        0x2fe97e0: <multiple use>
        0x2fe1d10: i32 = Constant<8> [ORD=83]

      0x2fe9ce0: i32 = add 0x2fe97e0, 0x2fe1d10 [ORD=83]

      0x2fe1110: <multiple use>
    0x2fe95e0: ch = store 0x2fe97e0:1, 0x2fdbfc0, 0x2fe9ce0, 0x2fe1110<ST4[%49]> [ORD=84]

    0x2fe91e0: <multiple use>
    0x2fe1110: <multiple use>
  0x2fe1b10: i32,ch = load 0x2fe95e0, 0x2fe91e0, 0x2fe1110<LD4[%2]> [ORD=85]

      0x2fe1b10: <multiple use>
      0x2fdbfc0: <multiple use>
        0x2fe1b10: <multiple use>
        0x2fe9de0: i32 = Constant<12> [ORD=86]

      0x2fe93e0: i32 = add 0x2fe1b10, 0x2fe9de0 [ORD=86]

      0x2fe1110: <multiple use>
    0x2fdc0c0: ch = store 0x2fe1b10:1, 0x2fdbfc0, 0x2fe93e0, 0x2fe1110<ST4[%51]> [ORD=87]

    0x2fe91e0: <multiple use>
    0x2fe1110: <multiple use>
  0x2fe1210: i32,ch = load 0x2fdc0c0, 0x2fe91e0, 0x2fe1110<LD4[%2]> [ORD=88]

    0x2fe1210: <multiple use>
    0x2fe90e0: i32 = Constant<0> [ORD=90]

      0x2fe1210: <multiple use>
      0x2fe98e0: i32 = Constant<16> [ORD=89]

    0x2fe99e0: i32 = add 0x2fe1210, 0x2fe98e0 [ORD=89]

    0x2fe1110: <multiple use>
  0x2fe8fe0: ch = store 0x2fe1210:1, 0x2fe90e0, 0x2fe99e0, 0x2fe1110<ST4[%53]> [ORD=90]


Legally typed node: 0x2fe98e0: i32 = Constant<16> [ORD=89] [ID=0]

Legally typed node: 0x2fe9de0: i32 = Constant<12> [ORD=86] [ID=0]

Legally typed node: 0x2fdbfc0: i32 = Constant<1> [ORD=84] [ID=0]

Legally typed node: 0x2fe1d10: i32 = Constant<8> [ORD=83] [ID=0]

Legally typed node: 0x2fe1110: i32 = undef [ORD=82] [ID=0]

Legally typed node: 0x2fe90e0: i32 = Constant<0> [ORD=90] [ID=0]

Legally typed node: 0x2fe91e0: i32 = FrameIndex<1> [ORD=82] [ID=0]

Legally typed node: 0x2fb6da8: ch = EntryToken [ORD=82] [ID=0]

Legally typed node: 0x2fe97e0: i32,ch = load 0x2fb6da8, 0x2fe91e0, 0x2fe1110<LD4[%2]> [ORD=82] [ID=0]

Legally typed node: 0x2fe9ce0: i32 = add 0x2fe97e0, 0x2fe1d10 [ORD=83] [ID=0]

Legally typed node: 0x2fe95e0: ch = store 0x2fe97e0:1, 0x2fdbfc0, 0x2fe9ce0, 0x2fe1110<ST4[%49]> [ORD=84] [ID=0]

Legally typed node: 0x2fe1b10: i32,ch = load 0x2fe95e0, 0x2fe91e0, 0x2fe1110<LD4[%2]> [ORD=85] [ID=0]

Legally typed node: 0x2fe93e0: i32 = add 0x2fe1b10, 0x2fe9de0 [ORD=86] [ID=0]

Legally typed node: 0x2fdc0c0: ch = store 0x2fe1b10:1, 0x2fdbfc0, 0x2fe93e0, 0x2fe1110<ST4[%51]> [ORD=87] [ID=0]

Legally typed node: 0x2fe1210: i32,ch = load 0x2fdc0c0, 0x2fe91e0, 0x2fe1110<LD4[%2]> [ORD=88] [ID=0]

Legally typed node: 0x2fe99e0: i32 = add 0x2fe1210, 0x2fe98e0 [ORD=89] [ID=0]

Legally typed node: 0x2fe8fe0: ch = store 0x2fe1210:1, 0x2fe90e0, 0x2fe99e0, 0x2fe1110<ST4[%53]> [ORD=90] [ID=0]

Legally typed node: 0x7fff9b4748f0: ch = handlenode 0x2fe8fe0 [ID=0]

Type-legalized selection DAG: BB#10 'startup_fuel_valves3:startup_fuel_valves3.if.then'
SelectionDAG has 17 nodes:
  0x2fe91e0: i32 = FrameIndex<1> [ORD=82] [ID=-3]

  0x2fe1110: i32 = undef [ORD=82] [ID=-3]

    0x2fb6da8: ch = EntryToken [ORD=82] [ID=-3]

    0x2fe91e0: <multiple use>
    0x2fe1110: <multiple use>
  0x2fe97e0: i32,ch = load 0x2fb6da8, 0x2fe91e0, 0x2fe1110<LD4[%2]> [ORD=82] [ID=-3]

  0x2fdbfc0: i32 = Constant<1> [ORD=84] [ID=-3]

      0x2fe97e0: <multiple use>
      0x2fdbfc0: <multiple use>
        0x2fe97e0: <multiple use>
        0x2fe1d10: i32 = Constant<8> [ORD=83] [ID=-3]

      0x2fe9ce0: i32 = add 0x2fe97e0, 0x2fe1d10 [ORD=83] [ID=-3]

      0x2fe1110: <multiple use>
    0x2fe95e0: ch = store 0x2fe97e0:1, 0x2fdbfc0, 0x2fe9ce0, 0x2fe1110<ST4[%49]> [ORD=84] [ID=-3]

    0x2fe91e0: <multiple use>
    0x2fe1110: <multiple use>
  0x2fe1b10: i32,ch = load 0x2fe95e0, 0x2fe91e0, 0x2fe1110<LD4[%2]> [ORD=85] [ID=-3]

      0x2fe1b10: <multiple use>
      0x2fdbfc0: <multiple use>
        0x2fe1b10: <multiple use>
        0x2fe9de0: i32 = Constant<12> [ORD=86] [ID=-3]

      0x2fe93e0: i32 = add 0x2fe1b10, 0x2fe9de0 [ORD=86] [ID=-3]

      0x2fe1110: <multiple use>
    0x2fdc0c0: ch = store 0x2fe1b10:1, 0x2fdbfc0, 0x2fe93e0, 0x2fe1110<ST4[%51]> [ORD=87] [ID=-3]

    0x2fe91e0: <multiple use>
    0x2fe1110: <multiple use>
  0x2fe1210: i32,ch = load 0x2fdc0c0, 0x2fe91e0, 0x2fe1110<LD4[%2]> [ORD=88] [ID=-3]

    0x2fe1210: <multiple use>
    0x2fe90e0: i32 = Constant<0> [ORD=90] [ID=-3]

      0x2fe1210: <multiple use>
      0x2fe98e0: i32 = Constant<16> [ORD=89] [ID=-3]

    0x2fe99e0: i32 = add 0x2fe1210, 0x2fe98e0 [ORD=89] [ID=-3]

    0x2fe1110: <multiple use>
  0x2fe8fe0: ch = store 0x2fe1210:1, 0x2fe90e0, 0x2fe99e0, 0x2fe1110<ST4[%53]> [ORD=90] [ID=-3]


Legalized selection DAG: BB#10 'startup_fuel_valves3:startup_fuel_valves3.if.then'
SelectionDAG has 17 nodes:
  0x2fe91e0: i32 = FrameIndex<1> [ORD=82] [ID=1]

  0x2fe1110: i32 = undef [ORD=82] [ID=3]

  0x2fdbfc0: i32 = Constant<1> [ORD=84] [ID=5]

    0x2fb6da8: ch = EntryToken [ORD=82] [ID=0]

    0x2fe91e0: <multiple use>
    0x2fe1110: <multiple use>
  0x2fe97e0: i32,ch = load 0x2fb6da8, 0x2fe91e0, 0x2fe1110<LD4[%2]> [ORD=82] [ID=8]

      0x2fe97e0: <multiple use>
      0x2fdbfc0: <multiple use>
        0x2fe97e0: <multiple use>
        0x2fe1d10: i32 = Constant<8> [ORD=83] [ID=4]

      0x2fe9ce0: i32 = add 0x2fe97e0, 0x2fe1d10 [ORD=83] [ID=9]

      0x2fe1110: <multiple use>
    0x2fe95e0: ch = store 0x2fe97e0:1, 0x2fdbfc0, 0x2fe9ce0, 0x2fe1110<ST4[%49]> [ORD=84] [ID=10]

    0x2fe91e0: <multiple use>
    0x2fe1110: <multiple use>
  0x2fe1b10: i32,ch = load 0x2fe95e0, 0x2fe91e0, 0x2fe1110<LD4[%2]> [ORD=85] [ID=11]

      0x2fe1b10: <multiple use>
      0x2fdbfc0: <multiple use>
        0x2fe1b10: <multiple use>
        0x2fe9de0: i32 = Constant<12> [ORD=86] [ID=6]

      0x2fe93e0: i32 = add 0x2fe1b10, 0x2fe9de0 [ORD=86] [ID=12]

      0x2fe1110: <multiple use>
    0x2fdc0c0: ch = store 0x2fe1b10:1, 0x2fdbfc0, 0x2fe93e0, 0x2fe1110<ST4[%51]> [ORD=87] [ID=13]

    0x2fe91e0: <multiple use>
    0x2fe1110: <multiple use>
  0x2fe1210: i32,ch = load 0x2fdc0c0, 0x2fe91e0, 0x2fe1110<LD4[%2]> [ORD=88] [ID=14]

    0x2fe1210: <multiple use>
    0x2fe90e0: i32 = Constant<0> [ORD=90] [ID=2]

      0x2fe1210: <multiple use>
      0x2fe98e0: i32 = Constant<16> [ORD=89] [ID=7]

    0x2fe99e0: i32 = add 0x2fe1210, 0x2fe98e0 [ORD=89] [ID=15]

    0x2fe1110: <multiple use>
  0x2fe8fe0: ch = store 0x2fe1210:1, 0x2fe90e0, 0x2fe99e0, 0x2fe1110<ST4[%53]> [ORD=90] [ID=16]


Optimized legalized selection DAG: BB#10 'startup_fuel_valves3:startup_fuel_valves3.if.then'
SelectionDAG has 17 nodes:
  0x2fe91e0: i32 = FrameIndex<1> [ORD=82] [ID=1]

  0x2fe1110: i32 = undef [ORD=82] [ID=3]

  0x2fdbfc0: i32 = Constant<1> [ORD=84] [ID=5]

    0x2fb6da8: ch = EntryToken [ORD=82] [ID=0]

    0x2fe91e0: <multiple use>
    0x2fe1110: <multiple use>
  0x2fe97e0: i32,ch = load 0x2fb6da8, 0x2fe91e0, 0x2fe1110<LD4[%2]> [ORD=82] [ID=8]

      0x2fe97e0: <multiple use>
      0x2fdbfc0: <multiple use>
        0x2fe97e0: <multiple use>
        0x2fe1d10: i32 = Constant<8> [ORD=83] [ID=4]

      0x2fe9ce0: i32 = add 0x2fe97e0, 0x2fe1d10 [ORD=83] [ID=9]

      0x2fe1110: <multiple use>
    0x2fe95e0: ch = store 0x2fe97e0:1, 0x2fdbfc0, 0x2fe9ce0, 0x2fe1110<ST4[%49]> [ORD=84] [ID=10]

    0x2fe91e0: <multiple use>
    0x2fe1110: <multiple use>
  0x2fe1b10: i32,ch = load 0x2fe95e0, 0x2fe91e0, 0x2fe1110<LD4[%2]> [ORD=85] [ID=11]

      0x2fe1b10: <multiple use>
      0x2fdbfc0: <multiple use>
        0x2fe1b10: <multiple use>
        0x2fe9de0: i32 = Constant<12> [ORD=86] [ID=6]

      0x2fe93e0: i32 = add 0x2fe1b10, 0x2fe9de0 [ORD=86] [ID=12]

      0x2fe1110: <multiple use>
    0x2fdc0c0: ch = store 0x2fe1b10:1, 0x2fdbfc0, 0x2fe93e0, 0x2fe1110<ST4[%51]> [ORD=87] [ID=13]

    0x2fe91e0: <multiple use>
    0x2fe1110: <multiple use>
  0x2fe1210: i32,ch = load 0x2fdc0c0, 0x2fe91e0, 0x2fe1110<LD4[%2]> [ORD=88] [ID=14]

    0x2fe1210: <multiple use>
    0x2fe90e0: i32 = Constant<0> [ORD=90] [ID=2]

      0x2fe1210: <multiple use>
      0x2fe98e0: i32 = Constant<16> [ORD=89] [ID=7]

    0x2fe99e0: i32 = add 0x2fe1210, 0x2fe98e0 [ORD=89] [ID=15]

    0x2fe1110: <multiple use>
  0x2fe8fe0: ch = store 0x2fe1210:1, 0x2fe90e0, 0x2fe99e0, 0x2fe1110<ST4[%53]> [ORD=90] [ID=16]


===== Instruction selection begins: BB#10 'startup_fuel_valves3.if.then'
ISEL: Starting pattern match on root node: 0x2fe8fe0: ch = store 0x2fe1210:1, 0x2fe90e0, 0x2fe99e0, 0x2fe1110<ST4[%53]> [ORD=90] [ID=16]

  Initial Opcode index to 178
  Morphed node: 0x2fe8fe0: ch = SW 0x2fe90e0, 0x2fe1210, 0x2fd4ca0, 0x2fe1210:1<Mem:ST4[%53]> [ORD=90]

ISEL: Match complete!
=> 0x2fe8fe0: ch = SW 0x2fe90e0, 0x2fe1210, 0x2fd4ca0, 0x2fe1210:1<Mem:ST4[%53]> [ORD=90]

ISEL: Starting pattern match on root node: 0x2fe1210: i32,ch = load 0x2fdc0c0, 0x2fe91e0, 0x2fe1110<LD4[%2]> [ORD=88] [ID=14]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2fe1210: i32,ch = LW 0x2fe91e0, 0x2fe98e0, 0x2fdc0c0<Mem:LD4[%2]> [ORD=88]

ISEL: Match complete!
=> 0x2fe1210: i32,ch = LW 0x2fe91e0, 0x2fe98e0, 0x2fdc0c0<Mem:LD4[%2]> [ORD=88]

ISEL: Starting pattern match on root node: 0x2fdc0c0: ch = store 0x2fe1b10:1, 0x2fdbfc0, 0x2fe93e0, 0x2fe1110<ST4[%51]> [ORD=87] [ID=13]

  Initial Opcode index to 178
  Morphed node: 0x2fdc0c0: ch = SW 0x2fdbfc0, 0x2fe1b10, 0x2fe99e0, 0x2fe1b10:1<Mem:ST4[%51]> [ORD=87]

ISEL: Match complete!
=> 0x2fdc0c0: ch = SW 0x2fdbfc0, 0x2fe1b10, 0x2fe99e0, 0x2fe1b10:1<Mem:ST4[%51]> [ORD=87]

ISEL: Starting pattern match on root node: 0x2fe1b10: i32,ch = load 0x2fe95e0, 0x2fe91e0, 0x2fe1110<LD4[%2]> [ORD=85] [ID=11]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2fe1b10: i32,ch = LW 0x2fe91e0, 0x2fe98e0, 0x2fe95e0<Mem:LD4[%2]> [ORD=85]

ISEL: Match complete!
=> 0x2fe1b10: i32,ch = LW 0x2fe91e0, 0x2fe98e0, 0x2fe95e0<Mem:LD4[%2]> [ORD=85]

ISEL: Starting pattern match on root node: 0x2fe95e0: ch = store 0x2fe97e0:1, 0x2fdbfc0, 0x2fe9ce0, 0x2fe1110<ST4[%49]> [ORD=84] [ID=10]

  Initial Opcode index to 178
  Morphed node: 0x2fe95e0: ch = SW 0x2fdbfc0, 0x2fe97e0, 0x2fe9de0, 0x2fe97e0:1<Mem:ST4[%49]> [ORD=84]

ISEL: Match complete!
=> 0x2fe95e0: ch = SW 0x2fdbfc0, 0x2fe97e0, 0x2fe9de0, 0x2fe97e0:1<Mem:ST4[%49]> [ORD=84]

ISEL: Starting pattern match on root node: 0x2fe97e0: i32,ch = load 0x2fb6da8, 0x2fe91e0, 0x2fe1110<LD4[%2]> [ORD=82] [ID=8]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2fe97e0: i32,ch = LW 0x2fe91e0, 0x2fe98e0, 0x2fb6da8<Mem:LD4[%2]> [ORD=82]

ISEL: Match complete!
=> 0x2fe97e0: i32,ch = LW 0x2fe91e0, 0x2fe98e0, 0x2fb6da8<Mem:LD4[%2]> [ORD=82]

ISEL: Starting pattern match on root node: 0x2fdbfc0: i32 = Constant<1> [ORD=84] [ID=5]

  Initial Opcode index to 1226
comparing 0 and 1 and returning value:0
  Skipped scope entry (due to false predicate) at index 1228, continuing at 1236
  Morphed node: 0x2fdbfc0: i32 = ADDI 0x2fe1110, 0x2fe1d10 [ORD=84]

ISEL: Match complete!
=> 0x2fdbfc0: i32 = ADDI 0x2fe1110, 0x2fe1d10 [ORD=84]

ISEL: Starting pattern match on root node: 0x2fe90e0: i32 = Constant<0> [ORD=90] [ID=2]

  Initial Opcode index to 1226
comparing 0 and 0 and returning value:1
ISEL: Match complete!
=> 0x2fe90e0: i32 = Constant<0> [ORD=90] [ID=2]

=> 0x2fb6da8: ch = EntryToken [ORD=82]

===== Instruction selection ends:
Selected selection DAG: BB#10 'startup_fuel_valves3:startup_fuel_valves3.if.then'
SelectionDAG has 17 nodes:
    0x2fe1110: <multiple use>
    0x2fe1d10: i32 = TargetConstant<1>

  0x2fdbfc0: i32 = ADDI 0x2fe1110, 0x2fe1d10 [ORD=84]

    0x2fe93e0: <multiple use>
    0x2fe98e0: <multiple use>
    0x2fb6da8: ch = EntryToken [ORD=82]

  0x2fe97e0: i32,ch = LW 0x2fe93e0, 0x2fe98e0, 0x2fb6da8<Mem:LD4[%2]> [ORD=82]

    0x2fe93e0: <multiple use>
    0x2fe98e0: <multiple use>
      0x2fdbfc0: <multiple use>
      0x2fe97e0: <multiple use>
      0x2fe9de0: i32 = TargetConstant<8>

      0x2fe97e0: <multiple use>
    0x2fe95e0: ch = SW 0x2fdbfc0, 0x2fe97e0, 0x2fe9de0, 0x2fe97e0:1<Mem:ST4[%49]> [ORD=84]

  0x2fe1b10: i32,ch = LW 0x2fe93e0, 0x2fe98e0, 0x2fe95e0<Mem:LD4[%2]> [ORD=85]

    0x2fe93e0: <multiple use>
    0x2fe98e0: <multiple use>
      0x2fdbfc0: <multiple use>
      0x2fe1b10: <multiple use>
      0x2fe99e0: i32 = TargetConstant<12>

      0x2fe1b10: <multiple use>
    0x2fdc0c0: ch = SW 0x2fdbfc0, 0x2fe1b10, 0x2fe99e0, 0x2fe1b10:1<Mem:ST4[%51]> [ORD=87]

  0x2fe1210: i32,ch = LW 0x2fe93e0, 0x2fe98e0, 0x2fdc0c0<Mem:LD4[%2]> [ORD=88]

  0x2fe98e0: i32 = TargetConstant<0>

  0x2fe1110: i32 = Register %zero

    0x2fe90e0: i32 = Register %t5

    0x2fe9ce0: i32 = TargetFrameIndex<1>

  0x2fe93e0: i32 = ADDI 0x2fe90e0, 0x2fe9ce0 [ORD=82]

    0x2fe1110: <multiple use>
    0x2fe1210: <multiple use>
    0x2fd4ca0: i32 = TargetConstant<16>

    0x2fe1210: <multiple use>
  0x2fe8fe0: ch = SW 0x2fe1110, 0x2fe1210, 0x2fd4ca0, 0x2fe1210:1<Mem:ST4[%53]> [ORD=90]


********** List Scheduling BB#10 'startup_fuel_valves3.if.then' **********
SU(0): 0x2fe8fe0: ch = SW 0x2fe1110, 0x2fe1210, 0x2fd4ca0, 0x2fe1210:1<Mem:ST4[%53]> [ORD=90] [ID=0]

  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
   val SU(1): Latency=1
   ch  SU(1): Latency=1

SU(1): 0x2fe1210: i32,ch = LW 0x2fe93e0, 0x2fe98e0, 0x2fdc0c0<Mem:LD4[%2]> [ORD=88] [ID=1]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
   val SU(7): Latency=1
   ch  SU(2): Latency=1
  Successors:
   val SU(0): Latency=1
   ch  SU(0): Latency=1

SU(2): 0x2fdc0c0: ch = SW 0x2fdbfc0, 0x2fe1b10, 0x2fe99e0, 0x2fe1b10:1<Mem:ST4[%51]> [ORD=87] [ID=2]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
   val SU(6): Latency=1
   val SU(3): Latency=1
   ch  SU(3): Latency=1
  Successors:
   ch  SU(1): Latency=1

SU(3): 0x2fe1b10: i32,ch = LW 0x2fe93e0, 0x2fe98e0, 0x2fe95e0<Mem:LD4[%2]> [ORD=85] [ID=3]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 3
  Height             : 3
  Predecessors:
   val SU(7): Latency=1
   ch  SU(4): Latency=1
  Successors:
   val SU(2): Latency=1
   ch  SU(2): Latency=1

SU(4): 0x2fe95e0: ch = SW 0x2fdbfc0, 0x2fe97e0, 0x2fe9de0, 0x2fe97e0:1<Mem:ST4[%49]> [ORD=84] [ID=4]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 4
  Predecessors:
   val SU(6): Latency=1
   val SU(5): Latency=1
   ch  SU(5): Latency=1
  Successors:
   ch  SU(3): Latency=1

SU(5): 0x2fe97e0: i32,ch = LW 0x2fe93e0, 0x2fe98e0, 0x2fb6da8<Mem:LD4[%2]> [ORD=82] [ID=5]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 5
  Predecessors:
   val SU(7): Latency=1
  Successors:
   val SU(4): Latency=1
   ch  SU(4): Latency=1

SU(6): 0x2fdbfc0: i32 = ADDI 0x2fe1110, 0x2fe1d10 [ORD=84] [ID=6]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
   val SU(2): Latency=1
   val SU(4): Latency=1

SU(7): 0x2fe93e0: i32 = ADDI 0x2fe90e0, 0x2fe9ce0 [ORD=82] [ID=7]

  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
   val SU(1): Latency=1
   val SU(3): Latency=1
   val SU(5): Latency=1


Examining Available:
Height 0: SU(0): 0x2fe8fe0: ch = SW 0x2fe1110, 0x2fe1210, 0x2fd4ca0, 0x2fe1210:1<Mem:ST4[%53]> [ORD=90] [ID=0]


*** Scheduling [0]: SU(0): 0x2fe8fe0: ch = SW 0x2fe1110, 0x2fe1210, 0x2fd4ca0, 0x2fe1210:1<Mem:ST4[%53]> [ORD=90] [ID=0]


Examining Available:
Height 1: SU(1): 0x2fe1210: i32,ch = LW 0x2fe93e0, 0x2fe98e0, 0x2fdc0c0<Mem:LD4[%2]> [ORD=88] [ID=1]


*** Scheduling [1]: SU(1): 0x2fe1210: i32,ch = LW 0x2fe93e0, 0x2fe98e0, 0x2fdc0c0<Mem:LD4[%2]> [ORD=88] [ID=1]


Examining Available:
Height 2: SU(2): 0x2fdc0c0: ch = SW 0x2fdbfc0, 0x2fe1b10, 0x2fe99e0, 0x2fe1b10:1<Mem:ST4[%51]> [ORD=87] [ID=2]


*** Scheduling [2]: SU(2): 0x2fdc0c0: ch = SW 0x2fdbfc0, 0x2fe1b10, 0x2fe99e0, 0x2fe1b10:1<Mem:ST4[%51]> [ORD=87] [ID=2]


Examining Available:
Height 3: SU(3): 0x2fe1b10: i32,ch = LW 0x2fe93e0, 0x2fe98e0, 0x2fe95e0<Mem:LD4[%2]> [ORD=85] [ID=3]


*** Scheduling [3]: SU(3): 0x2fe1b10: i32,ch = LW 0x2fe93e0, 0x2fe98e0, 0x2fe95e0<Mem:LD4[%2]> [ORD=85] [ID=3]


Examining Available:
Height 4: SU(4): 0x2fe95e0: ch = SW 0x2fdbfc0, 0x2fe97e0, 0x2fe9de0, 0x2fe97e0:1<Mem:ST4[%49]> [ORD=84] [ID=4]


*** Scheduling [4]: SU(4): 0x2fe95e0: ch = SW 0x2fdbfc0, 0x2fe97e0, 0x2fe9de0, 0x2fe97e0:1<Mem:ST4[%49]> [ORD=84] [ID=4]


Examining Available:
Height 5: SU(6): 0x2fdbfc0: i32 = ADDI 0x2fe1110, 0x2fe1d10 [ORD=84] [ID=6]

Height 5: SU(5): 0x2fe97e0: i32,ch = LW 0x2fe93e0, 0x2fe98e0, 0x2fb6da8<Mem:LD4[%2]> [ORD=82] [ID=5]


*** Scheduling [5]: SU(6): 0x2fdbfc0: i32 = ADDI 0x2fe1110, 0x2fe1d10 [ORD=84] [ID=6]


Examining Available:
Height 5: SU(5): 0x2fe97e0: i32,ch = LW 0x2fe93e0, 0x2fe98e0, 0x2fb6da8<Mem:LD4[%2]> [ORD=82] [ID=5]


*** Scheduling [6]: SU(5): 0x2fe97e0: i32,ch = LW 0x2fe93e0, 0x2fe98e0, 0x2fb6da8<Mem:LD4[%2]> [ORD=82] [ID=5]


Examining Available:
Height 7: SU(7): 0x2fe93e0: i32 = ADDI 0x2fe90e0, 0x2fe9ce0 [ORD=82] [ID=7]


*** Scheduling [7]: SU(7): 0x2fe93e0: i32 = ADDI 0x2fe90e0, 0x2fe9ce0 [ORD=82] [ID=7]

*** Final schedule ***
SU(7): 0x2fe93e0: i32 = ADDI 0x2fe90e0, 0x2fe9ce0 [ORD=82] [ID=7]

SU(5): 0x2fe97e0: i32,ch = LW 0x2fe93e0, 0x2fe98e0, 0x2fb6da8<Mem:LD4[%2]> [ORD=82] [ID=5]

SU(6): 0x2fdbfc0: i32 = ADDI 0x2fe1110, 0x2fe1d10 [ORD=84] [ID=6]

SU(4): 0x2fe95e0: ch = SW 0x2fdbfc0, 0x2fe97e0, 0x2fe9de0, 0x2fe97e0:1<Mem:ST4[%49]> [ORD=84] [ID=4]

SU(3): 0x2fe1b10: i32,ch = LW 0x2fe93e0, 0x2fe98e0, 0x2fe95e0<Mem:LD4[%2]> [ORD=85] [ID=3]

SU(2): 0x2fdc0c0: ch = SW 0x2fdbfc0, 0x2fe1b10, 0x2fe99e0, 0x2fe1b10:1<Mem:ST4[%51]> [ORD=87] [ID=2]

SU(1): 0x2fe1210: i32,ch = LW 0x2fe93e0, 0x2fe98e0, 0x2fdc0c0<Mem:LD4[%2]> [ORD=88] [ID=1]

SU(0): 0x2fe8fe0: ch = SW 0x2fe1110, 0x2fe1210, 0x2fd4ca0, 0x2fe1210:1<Mem:ST4[%53]> [ORD=90] [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %54 = load i32** %2, align 4
I was here to add   %2 = alloca i32*, align 4
with I type i32*and sd value :0x2fe93e0: i32 = FrameIndex<1>
new load?0x2fe1d10: i32,ch = load 0x2fb6da8, 0x2fe93e0, 0x2fe90e0<LD4[%2]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x2fe9ce0: i32 = Constant<0>

    0x2fb6da8: ch = EntryToken

    0x2fe93e0: i32 = FrameIndex<1>

    0x2fe90e0: i32 = undef

  0x2fe1d10: i32,ch = load 0x2fb6da8, 0x2fe93e0, 0x2fe90e0<LD4[%2]>

  0x2fb6da8: ch = EntryToken


store visit is after?  store i32* %54, i32** %1, align 4
I was here to add   %1 = alloca i32*, align 4, !ConsumedBy !6
whats in dag after store?SelectionDAG has 7 nodes:
  0x2fe9ce0: i32 = Constant<0>

  0x2fe90e0: i32 = undef [ORD=91]

    0x2fb6da8: ch = EntryToken [ORD=91]

    0x2fe93e0: i32 = FrameIndex<1> [ORD=91]

    0x2fe90e0: <multiple use>
  0x2fe1d10: i32,ch = load 0x2fb6da8, 0x2fe93e0, 0x2fe90e0<LD4[%2]> [ORD=91]

    0x2fe1d10: <multiple use>
    0x2fe1d10: <multiple use>
    0x2fe1110: i32 = FrameIndex<0> [ORD=92]

    0x2fe90e0: <multiple use>
  0x2fe9de0: ch = store 0x2fe1d10:1, 0x2fe1d10, 0x2fe1110, 0x2fe90e0<ST4[%1]> [ORD=92]


Initial selection DAG: BB#11 'startup_fuel_valves3:startup_fuel_valves3.return'
SelectionDAG has 7 nodes:
  0x2fe9ce0: i32 = Constant<0>

  0x2fe90e0: i32 = undef [ORD=91]

    0x2fb6da8: ch = EntryToken [ORD=91]

    0x2fe93e0: i32 = FrameIndex<1> [ORD=91]

    0x2fe90e0: <multiple use>
  0x2fe1d10: i32,ch = load 0x2fb6da8, 0x2fe93e0, 0x2fe90e0<LD4[%2]> [ORD=91]

    0x2fe1d10: <multiple use>
    0x2fe1d10: <multiple use>
    0x2fe1110: i32 = FrameIndex<0> [ORD=92]

    0x2fe90e0: <multiple use>
  0x2fe9de0: ch = store 0x2fe1d10:1, 0x2fe1d10, 0x2fe1110, 0x2fe90e0<ST4[%1]> [ORD=92]


Optimized lowered selection DAG: BB#11 'startup_fuel_valves3:startup_fuel_valves3.return'
SelectionDAG has 6 nodes:
  0x2fe90e0: i32 = undef [ORD=91]

    0x2fb6da8: ch = EntryToken [ORD=91]

    0x2fe93e0: i32 = FrameIndex<1> [ORD=91]

    0x2fe90e0: <multiple use>
  0x2fe1d10: i32,ch = load 0x2fb6da8, 0x2fe93e0, 0x2fe90e0<LD4[%2]> [ORD=91]

    0x2fe1d10: <multiple use>
    0x2fe1d10: <multiple use>
    0x2fe1110: i32 = FrameIndex<0> [ORD=92]

    0x2fe90e0: <multiple use>
  0x2fe9de0: ch = store 0x2fe1d10:1, 0x2fe1d10, 0x2fe1110, 0x2fe90e0<ST4[%1]> [ORD=92]


Legally typed node: 0x2fe1110: i32 = FrameIndex<0> [ORD=92] [ID=0]

Legally typed node: 0x2fe90e0: i32 = undef [ORD=91] [ID=0]

Legally typed node: 0x2fe93e0: i32 = FrameIndex<1> [ORD=91] [ID=0]

Legally typed node: 0x2fb6da8: ch = EntryToken [ORD=91] [ID=0]

Legally typed node: 0x2fe1d10: i32,ch = load 0x2fb6da8, 0x2fe93e0, 0x2fe90e0<LD4[%2]> [ORD=91] [ID=0]

Legally typed node: 0x2fe9de0: ch = store 0x2fe1d10:1, 0x2fe1d10, 0x2fe1110, 0x2fe90e0<ST4[%1]> [ORD=92] [ID=0]

Legally typed node: 0x7fff9b4748f0: ch = handlenode 0x2fe9de0 [ID=0]

Type-legalized selection DAG: BB#11 'startup_fuel_valves3:startup_fuel_valves3.return'
SelectionDAG has 6 nodes:
  0x2fe90e0: i32 = undef [ORD=91] [ID=-3]

    0x2fb6da8: ch = EntryToken [ORD=91] [ID=-3]

    0x2fe93e0: i32 = FrameIndex<1> [ORD=91] [ID=-3]

    0x2fe90e0: <multiple use>
  0x2fe1d10: i32,ch = load 0x2fb6da8, 0x2fe93e0, 0x2fe90e0<LD4[%2]> [ORD=91] [ID=-3]

    0x2fe1d10: <multiple use>
    0x2fe1d10: <multiple use>
    0x2fe1110: i32 = FrameIndex<0> [ORD=92] [ID=-3]

    0x2fe90e0: <multiple use>
  0x2fe9de0: ch = store 0x2fe1d10:1, 0x2fe1d10, 0x2fe1110, 0x2fe90e0<ST4[%1]> [ORD=92] [ID=-3]


Legalized selection DAG: BB#11 'startup_fuel_valves3:startup_fuel_valves3.return'
SelectionDAG has 6 nodes:
  0x2fe90e0: i32 = undef [ORD=91] [ID=2]

    0x2fb6da8: ch = EntryToken [ORD=91] [ID=0]

    0x2fe93e0: i32 = FrameIndex<1> [ORD=91] [ID=1]

    0x2fe90e0: <multiple use>
  0x2fe1d10: i32,ch = load 0x2fb6da8, 0x2fe93e0, 0x2fe90e0<LD4[%2]> [ORD=91] [ID=4]

    0x2fe1d10: <multiple use>
    0x2fe1d10: <multiple use>
    0x2fe1110: i32 = FrameIndex<0> [ORD=92] [ID=3]

    0x2fe90e0: <multiple use>
  0x2fe9de0: ch = store 0x2fe1d10:1, 0x2fe1d10, 0x2fe1110, 0x2fe90e0<ST4[%1]> [ORD=92] [ID=5]


Optimized legalized selection DAG: BB#11 'startup_fuel_valves3:startup_fuel_valves3.return'
SelectionDAG has 6 nodes:
  0x2fe90e0: i32 = undef [ORD=91] [ID=2]

    0x2fb6da8: ch = EntryToken [ORD=91] [ID=0]

    0x2fe93e0: i32 = FrameIndex<1> [ORD=91] [ID=1]

    0x2fe90e0: <multiple use>
  0x2fe1d10: i32,ch = load 0x2fb6da8, 0x2fe93e0, 0x2fe90e0<LD4[%2]> [ORD=91] [ID=4]

    0x2fe1d10: <multiple use>
    0x2fe1d10: <multiple use>
    0x2fe1110: i32 = FrameIndex<0> [ORD=92] [ID=3]

    0x2fe90e0: <multiple use>
  0x2fe9de0: ch = store 0x2fe1d10:1, 0x2fe1d10, 0x2fe1110, 0x2fe90e0<ST4[%1]> [ORD=92] [ID=5]


===== Instruction selection begins: BB#11 'startup_fuel_valves3.return'
ISEL: Starting pattern match on root node: 0x2fe9de0: ch = store 0x2fe1d10:1, 0x2fe1d10, 0x2fe1110, 0x2fe90e0<ST4[%1]> [ORD=92] [ID=5]

  Initial Opcode index to 178
  Morphed node: 0x2fe9de0: ch = SW 0x2fe1d10, 0x2fe1110, 0x2fe9ce0, 0x2fe1d10:1<Mem:ST4[%1]> [ORD=92]

ISEL: Match complete!
=> 0x2fe9de0: ch = SW 0x2fe1d10, 0x2fe1110, 0x2fe9ce0, 0x2fe1d10:1<Mem:ST4[%1]> [ORD=92]

ISEL: Starting pattern match on root node: 0x2fe1d10: i32,ch = load 0x2fb6da8, 0x2fe93e0, 0x2fe90e0<LD4[%2]> [ORD=91] [ID=4]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2fe1d10: i32,ch = LW 0x2fe93e0, 0x2fe9ce0, 0x2fb6da8<Mem:LD4[%2]> [ORD=91]

ISEL: Match complete!
=> 0x2fe1d10: i32,ch = LW 0x2fe93e0, 0x2fe9ce0, 0x2fb6da8<Mem:LD4[%2]> [ORD=91]

=> 0x2fb6da8: ch = EntryToken [ORD=91]

===== Instruction selection ends:
Selected selection DAG: BB#11 'startup_fuel_valves3:startup_fuel_valves3.return'
SelectionDAG has 9 nodes:
      0x2fe90e0: <multiple use>
      0x2fe98e0: i32 = TargetFrameIndex<1>

    0x2fe93e0: i32 = ADDI 0x2fe90e0, 0x2fe98e0 [ORD=91]

    0x2fe9ce0: <multiple use>
    0x2fb6da8: ch = EntryToken [ORD=91]

  0x2fe1d10: i32,ch = LW 0x2fe93e0, 0x2fe9ce0, 0x2fb6da8<Mem:LD4[%2]> [ORD=91]

  0x2fe9ce0: i32 = TargetConstant<0>

  0x2fe90e0: i32 = Register %t5

    0x2fe1d10: <multiple use>
      0x2fe90e0: <multiple use>
      0x2fe99e0: i32 = TargetFrameIndex<0>

    0x2fe1110: i32 = ADDI 0x2fe90e0, 0x2fe99e0 [ORD=92]

    0x2fe9ce0: <multiple use>
    0x2fe1d10: <multiple use>
  0x2fe9de0: ch = SW 0x2fe1d10, 0x2fe1110, 0x2fe9ce0, 0x2fe1d10:1<Mem:ST4[%1]> [ORD=92]


********** List Scheduling BB#11 'startup_fuel_valves3.return' **********
SU(0): 0x2fe9de0: ch = SW 0x2fe1d10, 0x2fe1110, 0x2fe9ce0, 0x2fe1d10:1<Mem:ST4[%1]> [ORD=92] [ID=0]

  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
   val SU(2): Latency=1
   val SU(1): Latency=1
   ch  SU(2): Latency=1

SU(1): 0x2fe1110: i32 = ADDI 0x2fe90e0, 0x2fe99e0 [ORD=92] [ID=1]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
   val SU(0): Latency=1

SU(2): 0x2fe1d10: i32,ch = LW 0x2fe93e0, 0x2fe9ce0, 0x2fb6da8<Mem:LD4[%2]> [ORD=91] [ID=2]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
   val SU(3): Latency=1
  Successors:
   val SU(0): Latency=1
   ch  SU(0): Latency=1

SU(3): 0x2fe93e0: i32 = ADDI 0x2fe90e0, 0x2fe98e0 [ORD=91] [ID=3]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
   val SU(2): Latency=1


Examining Available:
Height 0: SU(0): 0x2fe9de0: ch = SW 0x2fe1d10, 0x2fe1110, 0x2fe9ce0, 0x2fe1d10:1<Mem:ST4[%1]> [ORD=92] [ID=0]


*** Scheduling [0]: SU(0): 0x2fe9de0: ch = SW 0x2fe1d10, 0x2fe1110, 0x2fe9ce0, 0x2fe1d10:1<Mem:ST4[%1]> [ORD=92] [ID=0]


Examining Available:
Height 1: SU(1): 0x2fe1110: i32 = ADDI 0x2fe90e0, 0x2fe99e0 [ORD=92] [ID=1]

Height 1: SU(2): 0x2fe1d10: i32,ch = LW 0x2fe93e0, 0x2fe9ce0, 0x2fb6da8<Mem:LD4[%2]> [ORD=91] [ID=2]


*** Scheduling [1]: SU(1): 0x2fe1110: i32 = ADDI 0x2fe90e0, 0x2fe99e0 [ORD=92] [ID=1]


Examining Available:
Height 1: SU(2): 0x2fe1d10: i32,ch = LW 0x2fe93e0, 0x2fe9ce0, 0x2fb6da8<Mem:LD4[%2]> [ORD=91] [ID=2]


*** Scheduling [2]: SU(2): 0x2fe1d10: i32,ch = LW 0x2fe93e0, 0x2fe9ce0, 0x2fb6da8<Mem:LD4[%2]> [ORD=91] [ID=2]


Examining Available:
Height 3: SU(3): 0x2fe93e0: i32 = ADDI 0x2fe90e0, 0x2fe98e0 [ORD=91] [ID=3]


*** Scheduling [3]: SU(3): 0x2fe93e0: i32 = ADDI 0x2fe90e0, 0x2fe98e0 [ORD=91] [ID=3]

*** Final schedule ***
SU(3): 0x2fe93e0: i32 = ADDI 0x2fe90e0, 0x2fe98e0 [ORD=91] [ID=3]

SU(2): 0x2fe1d10: i32,ch = LW 0x2fe93e0, 0x2fe9ce0, 0x2fb6da8<Mem:LD4[%2]> [ORD=91] [ID=2]

SU(1): 0x2fe1110: i32 = ADDI 0x2fe90e0, 0x2fe99e0 [ORD=92] [ID=1]

SU(0): 0x2fe9de0: ch = SW 0x2fe1d10, 0x2fe1110, 0x2fe9ce0, 0x2fe1d10:1<Mem:ST4[%1]> [ORD=92] [ID=0]


Total amount of phi nodes to update: 0
# Machine code for function startup_fuel_valves3: SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %startup_fuel_valves3.entry
16B		%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
48B		SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
64B		%vreg2<def> = FLW %vreg1, 0; mem:LD4[%6](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
80B		%vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
96B		FSW %vreg2<kill>, %vreg3<kill>, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
112B		%vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
128B		%vreg5<def> = LW %vreg4<kill>, 4; mem:LD4[%9] GR32Bit:%vreg5,%vreg4
144B		BEQ <BB#10>, %vreg5<kill>, %zero; GR32Bit:%vreg5
160B		JAL <BB#1>
	    Successors according to CFG: BB#10(12) BB#1(20)

176B	BB#1: derived from LLVM BB %startup_fuel_valves3.if.else
	    Predecessors according to CFG: BB#0
192B		%vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
208B		%vreg7<def> = FLW %vreg6<kill>, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg6
224B		%vreg8<def> = ADDI %zero, 1165623296; GR32Bit:%vreg8
240B		%vreg10<def> = COPY %vreg8; FP32Bit:%vreg10 GR32Bit:%vreg8
256B		%vreg9<def> = FLT_S %vreg10<kill>, %vreg7<kill>; GR32Bit:%vreg9 FP32Bit:%vreg10,%vreg7
272B		BNE <BB#7>, %vreg9<kill>, %zero; GR32Bit:%vreg9
288B		JAL <BB#2>
	    Successors according to CFG: BB#7(16) BB#2(16)

304B	BB#2: derived from LLVM BB %startup_fuel_valves3.if.else7
	    Predecessors according to CFG: BB#1
320B		%vreg11<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg11
336B		%vreg12<def> = FLW %vreg11<kill>, 0; mem:LD4[%3] FP32Bit:%vreg12 GR32Bit:%vreg11
352B		%vreg13<def> = ADDI %zero, 1178816511; GR32Bit:%vreg13
368B		%vreg15<def> = COPY %vreg13; FP32Bit:%vreg15 GR32Bit:%vreg13
384B		%vreg14<def> = FULT_S %vreg12<kill>, %vreg15<kill>; GR32Bit:%vreg14 FP32Bit:%vreg12,%vreg15
400B		BNE <BB#6>, %vreg14<kill>, %zero; GR32Bit:%vreg14
416B		JAL <BB#3>
	    Successors according to CFG: BB#3(16) BB#6(16)

432B	BB#3: derived from LLVM BB %startup_fuel_valves3.if.then9
	    Predecessors according to CFG: BB#2
448B		%vreg20<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg20
464B		%vreg21<def> = LW %vreg20<kill>, 0; mem:LD4[%2] GR32Bit:%vreg21,%vreg20
480B		%vreg22<def> = LW %vreg21<kill>, 16; mem:LD4[%17] GR32Bit:%vreg22,%vreg21
496B		BNE <BB#7>, %vreg22<kill>, %zero; GR32Bit:%vreg22
512B		JAL <BB#4>
	    Successors according to CFG: BB#4(12) BB#7(20)

528B	BB#4: derived from LLVM BB %startup_fuel_valves3.if.then12
	    Predecessors according to CFG: BB#3
544B		%vreg23<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg23
560B		%vreg24<def> = LW %vreg23, 0; mem:LD4[%2] GR32Bit:%vreg24,%vreg23
576B		SW %zero, %vreg24<kill>, 12; mem:ST4[%21] GR32Bit:%vreg24
592B		%vreg25<def> = LW %vreg23, 0; mem:LD4[%2] GR32Bit:%vreg25,%vreg23
608B		%vreg26<def> = LW %vreg25<kill>, 20; mem:LD4[%23] GR32Bit:%vreg26,%vreg25
624B		%vreg27<def> = ADDI %zero, -1; GR32Bit:%vreg27
640B		BNE <BB#7>, %vreg26<kill>, %vreg27<kill>; GR32Bit:%vreg26,%vreg27
656B		JAL <BB#5>
	    Successors according to CFG: BB#5(16) BB#7(16)

672B	BB#5: derived from LLVM BB %startup_fuel_valves3.if.then16
	    Predecessors according to CFG: BB#4
688B		%vreg28<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg28
704B		%vreg29<def> = LW %vreg28<kill>, 0; mem:LD4[%2] GR32Bit:%vreg29,%vreg28
720B		%vreg30<def> = LW %vreg29, 4; mem:LD4[%27] GR32Bit:%vreg30,%vreg29
736B		SW %vreg30<kill>, %vreg29, 20; mem:ST4[%30] GR32Bit:%vreg30,%vreg29
752B		JAL <BB#7>
	    Successors according to CFG: BB#7

768B	BB#6: derived from LLVM BB %startup_fuel_valves3.if.else22
	    Predecessors according to CFG: BB#2
784B		%vreg16<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg16
800B		%vreg17<def> = LW %vreg16, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg16
816B		%vreg18<def> = ADDI %zero, 1; GR32Bit:%vreg18
832B		SW %vreg18, %vreg17<kill>, 12; mem:ST4[%32] GR32Bit:%vreg18,%vreg17
848B		%vreg19<def> = LW %vreg16, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg16
864B		SW %vreg18, %vreg19<kill>, 16; mem:ST4[%34] GR32Bit:%vreg18,%vreg19
	    Successors according to CFG: BB#7

880B	BB#7: derived from LLVM BB %startup_fuel_valves3.if.end26
	    Predecessors according to CFG: BB#1 BB#6 BB#3 BB#4 BB#5
896B		%vreg31<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg31
912B		%vreg32<def> = FLW %vreg31<kill>, 0; mem:LD4[%3] FP32Bit:%vreg32 GR32Bit:%vreg31
928B		%vreg33<def> = ADDI %zero, 1175027713; GR32Bit:%vreg33
944B		%vreg35<def> = COPY %vreg33; FP32Bit:%vreg35 GR32Bit:%vreg33
960B		%vreg34<def> = FULT_S %vreg35<kill>, %vreg32<kill>; GR32Bit:%vreg34 FP32Bit:%vreg35,%vreg32
976B		BNE <BB#11>, %vreg34<kill>, %zero; GR32Bit:%vreg34
992B		JAL <BB#8>
	    Successors according to CFG: BB#8(16) BB#11(16)

1008B	BB#8: derived from LLVM BB %startup_fuel_valves3.if.then28
	    Predecessors according to CFG: BB#7
1024B		%vreg36<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg36
1040B		%vreg37<def> = LW %vreg36, 0; mem:LD4[%2] GR32Bit:%vreg37,%vreg36
1056B		SW %zero, %vreg37<kill>, 8; mem:ST4[%38] GR32Bit:%vreg37
1072B		%vreg38<def> = LW %vreg36, 0; mem:LD4[%2] GR32Bit:%vreg38,%vreg36
1088B		%vreg39<def> = LW %vreg38<kill>, 24; mem:LD4[%40] GR32Bit:%vreg39,%vreg38
1104B		%vreg40<def> = ADDI %zero, -1; GR32Bit:%vreg40
1120B		BNE <BB#11>, %vreg39<kill>, %vreg40<kill>; GR32Bit:%vreg39,%vreg40
1136B		JAL <BB#9>
	    Successors according to CFG: BB#9(16) BB#11(16)

1152B	BB#9: derived from LLVM BB %startup_fuel_valves3.if.then32
	    Predecessors according to CFG: BB#8
1168B		%vreg41<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg41
1184B		%vreg42<def> = LW %vreg41<kill>, 0; mem:LD4[%2] GR32Bit:%vreg42,%vreg41
1200B		%vreg43<def> = LW %vreg42, 4; mem:LD4[%44] GR32Bit:%vreg43,%vreg42
1216B		SW %vreg43<kill>, %vreg42, 24; mem:ST4[%47] GR32Bit:%vreg43,%vreg42
1232B		JAL <BB#11>
	    Successors according to CFG: BB#11

1248B	BB#10: derived from LLVM BB %startup_fuel_valves3.if.then
	    Predecessors according to CFG: BB#0
1264B		%vreg44<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg44
1280B		%vreg45<def> = LW %vreg44, 0; mem:LD4[%2] GR32Bit:%vreg45,%vreg44
1296B		%vreg46<def> = ADDI %zero, 1; GR32Bit:%vreg46
1312B		SW %vreg46, %vreg45<kill>, 8; mem:ST4[%49] GR32Bit:%vreg46,%vreg45
1328B		%vreg47<def> = LW %vreg44, 0; mem:LD4[%2] GR32Bit:%vreg47,%vreg44
1344B		SW %vreg46, %vreg47<kill>, 12; mem:ST4[%51] GR32Bit:%vreg46,%vreg47
1360B		%vreg48<def> = LW %vreg44, 0; mem:LD4[%2] GR32Bit:%vreg48,%vreg44
1376B		SW %zero, %vreg48<kill>, 16; mem:ST4[%53] GR32Bit:%vreg48
	    Successors according to CFG: BB#11

1392B	BB#11: derived from LLVM BB %startup_fuel_valves3.return
	    Predecessors according to CFG: BB#7 BB#8 BB#9 BB#10
1408B		%vreg49<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg49
1424B		%vreg50<def> = LW %vreg49<kill>, 0; mem:LD4[%2] GR32Bit:%vreg50,%vreg49
1440B		%vreg51<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg51
1456B		SW %vreg50<kill>, %vreg51<kill>, 0; mem:ST4[%1] GR32Bit:%vreg50,%vreg51

# End machine code for function startup_fuel_valves3.

********** Stack Coloring **********
********** Function: startup_fuel_valves3
Found 0 markers and 3 slots
Slot structure:
Slot #0 - 4 bytes.
Slot #1 - 4 bytes.
Slot #2 - 4 bytes.
Total Stack size: 12 bytes

Will not try to merge slots.
Removed 0 markers.
******** Pre-regalloc Machine LICM: startup_fuel_valves3 ********
******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: startup_fuel_valves3
********** PROCESS IMPLICIT DEFS **********
********** Function: startup_fuel_valves3
********** REWRITING TWO-ADDR INSTRS **********
********** Function: startup_fuel_valves3
# Machine code for function startup_fuel_valves3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %startup_fuel_valves3.entry
16B		%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
48B		SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
64B		%vreg2<def> = FLW %vreg1<kill>, 0; mem:LD4[%6](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
80B		%vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
96B		FSW %vreg2<kill>, %vreg3<kill>, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
112B		%vreg4<def> = LW %vreg0<kill>, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
128B		%vreg5<def> = LW %vreg4<kill>, 4; mem:LD4[%9] GR32Bit:%vreg5,%vreg4
144B		BEQ <BB#10>, %vreg5<kill>, %zero; GR32Bit:%vreg5
160B		JAL <BB#1>
	    Successors according to CFG: BB#10(12) BB#1(20)

176B	BB#1: derived from LLVM BB %startup_fuel_valves3.if.else
	    Predecessors according to CFG: BB#0
192B		%vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
208B		%vreg7<def> = FLW %vreg6<kill>, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg6
224B		%vreg8<def> = ADDI %zero, 1165623296; GR32Bit:%vreg8
240B		%vreg10<def> = COPY %vreg8<kill>; FP32Bit:%vreg10 GR32Bit:%vreg8
256B		%vreg9<def> = FLT_S %vreg10<kill>, %vreg7<kill>; GR32Bit:%vreg9 FP32Bit:%vreg10,%vreg7
272B		BNE <BB#7>, %vreg9<kill>, %zero; GR32Bit:%vreg9
288B		JAL <BB#2>
	    Successors according to CFG: BB#7(16) BB#2(16)

304B	BB#2: derived from LLVM BB %startup_fuel_valves3.if.else7
	    Predecessors according to CFG: BB#1
320B		%vreg11<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg11
336B		%vreg12<def> = FLW %vreg11<kill>, 0; mem:LD4[%3] FP32Bit:%vreg12 GR32Bit:%vreg11
352B		%vreg13<def> = ADDI %zero, 1178816511; GR32Bit:%vreg13
368B		%vreg15<def> = COPY %vreg13<kill>; FP32Bit:%vreg15 GR32Bit:%vreg13
384B		%vreg14<def> = FULT_S %vreg12<kill>, %vreg15<kill>; GR32Bit:%vreg14 FP32Bit:%vreg12,%vreg15
400B		BNE <BB#6>, %vreg14<kill>, %zero; GR32Bit:%vreg14
416B		JAL <BB#3>
	    Successors according to CFG: BB#3(16) BB#6(16)

432B	BB#3: derived from LLVM BB %startup_fuel_valves3.if.then9
	    Predecessors according to CFG: BB#2
448B		%vreg20<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg20
464B		%vreg21<def> = LW %vreg20<kill>, 0; mem:LD4[%2] GR32Bit:%vreg21,%vreg20
480B		%vreg22<def> = LW %vreg21<kill>, 16; mem:LD4[%17] GR32Bit:%vreg22,%vreg21
496B		BNE <BB#7>, %vreg22<kill>, %zero; GR32Bit:%vreg22
512B		JAL <BB#4>
	    Successors according to CFG: BB#4(12) BB#7(20)

528B	BB#4: derived from LLVM BB %startup_fuel_valves3.if.then12
	    Predecessors according to CFG: BB#3
544B		%vreg23<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg23
560B		%vreg24<def> = LW %vreg23, 0; mem:LD4[%2] GR32Bit:%vreg24,%vreg23
576B		SW %zero, %vreg24<kill>, 12; mem:ST4[%21] GR32Bit:%vreg24
592B		%vreg25<def> = LW %vreg23<kill>, 0; mem:LD4[%2] GR32Bit:%vreg25,%vreg23
608B		%vreg26<def> = LW %vreg25<kill>, 20; mem:LD4[%23] GR32Bit:%vreg26,%vreg25
624B		%vreg27<def> = ADDI %zero, -1; GR32Bit:%vreg27
640B		BNE <BB#7>, %vreg26<kill>, %vreg27<kill>; GR32Bit:%vreg26,%vreg27
656B		JAL <BB#5>
	    Successors according to CFG: BB#5(16) BB#7(16)

672B	BB#5: derived from LLVM BB %startup_fuel_valves3.if.then16
	    Predecessors according to CFG: BB#4
688B		%vreg28<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg28
704B		%vreg29<def> = LW %vreg28<kill>, 0; mem:LD4[%2] GR32Bit:%vreg29,%vreg28
720B		%vreg30<def> = LW %vreg29, 4; mem:LD4[%27] GR32Bit:%vreg30,%vreg29
736B		SW %vreg30<kill>, %vreg29<kill>, 20; mem:ST4[%30] GR32Bit:%vreg30,%vreg29
752B		JAL <BB#7>
	    Successors according to CFG: BB#7

768B	BB#6: derived from LLVM BB %startup_fuel_valves3.if.else22
	    Predecessors according to CFG: BB#2
784B		%vreg16<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg16
800B		%vreg17<def> = LW %vreg16, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg16
816B		%vreg18<def> = ADDI %zero, 1; GR32Bit:%vreg18
832B		SW %vreg18, %vreg17<kill>, 12; mem:ST4[%32] GR32Bit:%vreg18,%vreg17
848B		%vreg19<def> = LW %vreg16<kill>, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg16
864B		SW %vreg18<kill>, %vreg19<kill>, 16; mem:ST4[%34] GR32Bit:%vreg18,%vreg19
	    Successors according to CFG: BB#7

880B	BB#7: derived from LLVM BB %startup_fuel_valves3.if.end26
	    Predecessors according to CFG: BB#1 BB#6 BB#3 BB#4 BB#5
896B		%vreg31<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg31
912B		%vreg32<def> = FLW %vreg31<kill>, 0; mem:LD4[%3] FP32Bit:%vreg32 GR32Bit:%vreg31
928B		%vreg33<def> = ADDI %zero, 1175027713; GR32Bit:%vreg33
944B		%vreg35<def> = COPY %vreg33<kill>; FP32Bit:%vreg35 GR32Bit:%vreg33
960B		%vreg34<def> = FULT_S %vreg35<kill>, %vreg32<kill>; GR32Bit:%vreg34 FP32Bit:%vreg35,%vreg32
976B		BNE <BB#11>, %vreg34<kill>, %zero; GR32Bit:%vreg34
992B		JAL <BB#8>
	    Successors according to CFG: BB#8(16) BB#11(16)

1008B	BB#8: derived from LLVM BB %startup_fuel_valves3.if.then28
	    Predecessors according to CFG: BB#7
1024B		%vreg36<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg36
1040B		%vreg37<def> = LW %vreg36, 0; mem:LD4[%2] GR32Bit:%vreg37,%vreg36
1056B		SW %zero, %vreg37<kill>, 8; mem:ST4[%38] GR32Bit:%vreg37
1072B		%vreg38<def> = LW %vreg36<kill>, 0; mem:LD4[%2] GR32Bit:%vreg38,%vreg36
1088B		%vreg39<def> = LW %vreg38<kill>, 24; mem:LD4[%40] GR32Bit:%vreg39,%vreg38
1104B		%vreg40<def> = ADDI %zero, -1; GR32Bit:%vreg40
1120B		BNE <BB#11>, %vreg39<kill>, %vreg40<kill>; GR32Bit:%vreg39,%vreg40
1136B		JAL <BB#9>
	    Successors according to CFG: BB#9(16) BB#11(16)

1152B	BB#9: derived from LLVM BB %startup_fuel_valves3.if.then32
	    Predecessors according to CFG: BB#8
1168B		%vreg41<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg41
1184B		%vreg42<def> = LW %vreg41<kill>, 0; mem:LD4[%2] GR32Bit:%vreg42,%vreg41
1200B		%vreg43<def> = LW %vreg42, 4; mem:LD4[%44] GR32Bit:%vreg43,%vreg42
1216B		SW %vreg43<kill>, %vreg42<kill>, 24; mem:ST4[%47] GR32Bit:%vreg43,%vreg42
1232B		JAL <BB#11>
	    Successors according to CFG: BB#11

1248B	BB#10: derived from LLVM BB %startup_fuel_valves3.if.then
	    Predecessors according to CFG: BB#0
1264B		%vreg44<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg44
1280B		%vreg45<def> = LW %vreg44, 0; mem:LD4[%2] GR32Bit:%vreg45,%vreg44
1296B		%vreg46<def> = ADDI %zero, 1; GR32Bit:%vreg46
1312B		SW %vreg46, %vreg45<kill>, 8; mem:ST4[%49] GR32Bit:%vreg46,%vreg45
1328B		%vreg47<def> = LW %vreg44, 0; mem:LD4[%2] GR32Bit:%vreg47,%vreg44
1344B		SW %vreg46<kill>, %vreg47<kill>, 12; mem:ST4[%51] GR32Bit:%vreg46,%vreg47
1360B		%vreg48<def> = LW %vreg44<kill>, 0; mem:LD4[%2] GR32Bit:%vreg48,%vreg44
1376B		SW %zero, %vreg48<kill>, 16; mem:ST4[%53] GR32Bit:%vreg48
	    Successors according to CFG: BB#11

1392B	BB#11: derived from LLVM BB %startup_fuel_valves3.return
	    Predecessors according to CFG: BB#7 BB#8 BB#9 BB#10
1408B		%vreg49<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg49
1424B		%vreg50<def> = LW %vreg49<kill>, 0; mem:LD4[%2] GR32Bit:%vreg50,%vreg49
1440B		%vreg51<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg51
1456B		SW %vreg50<kill>, %vreg51<kill>, 0; mem:ST4[%1] GR32Bit:%vreg50,%vreg51

# End machine code for function startup_fuel_valves3.

Computing live-in reg-units in ABI blocks.
Created 0 new intervals.
********** INTERVALS **********
%vreg0 = [16r,112r:0)  0@16r
%vreg1 = [32r,64r:0)  0@32r
%vreg2 = [64r,96r:0)  0@64r
%vreg3 = [80r,96r:0)  0@80r
%vreg4 = [112r,128r:0)  0@112r
%vreg5 = [128r,144r:0)  0@128r
%vreg6 = [192r,208r:0)  0@192r
%vreg7 = [208r,256r:0)  0@208r
%vreg8 = [224r,240r:0)  0@224r
%vreg9 = [256r,272r:0)  0@256r
%vreg10 = [240r,256r:0)  0@240r
%vreg11 = [320r,336r:0)  0@320r
%vreg12 = [336r,384r:0)  0@336r
%vreg13 = [352r,368r:0)  0@352r
%vreg14 = [384r,400r:0)  0@384r
%vreg15 = [368r,384r:0)  0@368r
%vreg16 = [784r,848r:0)  0@784r
%vreg17 = [800r,832r:0)  0@800r
%vreg18 = [816r,864r:0)  0@816r
%vreg19 = [848r,864r:0)  0@848r
%vreg20 = [448r,464r:0)  0@448r
%vreg21 = [464r,480r:0)  0@464r
%vreg22 = [480r,496r:0)  0@480r
%vreg23 = [544r,592r:0)  0@544r
%vreg24 = [560r,576r:0)  0@560r
%vreg25 = [592r,608r:0)  0@592r
%vreg26 = [608r,640r:0)  0@608r
%vreg27 = [624r,640r:0)  0@624r
%vreg28 = [688r,704r:0)  0@688r
%vreg29 = [704r,736r:0)  0@704r
%vreg30 = [720r,736r:0)  0@720r
%vreg31 = [896r,912r:0)  0@896r
%vreg32 = [912r,960r:0)  0@912r
%vreg33 = [928r,944r:0)  0@928r
%vreg34 = [960r,976r:0)  0@960r
%vreg35 = [944r,960r:0)  0@944r
%vreg36 = [1024r,1072r:0)  0@1024r
%vreg37 = [1040r,1056r:0)  0@1040r
%vreg38 = [1072r,1088r:0)  0@1072r
%vreg39 = [1088r,1120r:0)  0@1088r
%vreg40 = [1104r,1120r:0)  0@1104r
%vreg41 = [1168r,1184r:0)  0@1168r
%vreg42 = [1184r,1216r:0)  0@1184r
%vreg43 = [1200r,1216r:0)  0@1200r
%vreg44 = [1264r,1360r:0)  0@1264r
%vreg45 = [1280r,1312r:0)  0@1280r
%vreg46 = [1296r,1344r:0)  0@1296r
%vreg47 = [1328r,1344r:0)  0@1328r
%vreg48 = [1360r,1376r:0)  0@1360r
%vreg49 = [1408r,1424r:0)  0@1408r
%vreg50 = [1424r,1456r:0)  0@1424r
%vreg51 = [1440r,1456r:0)  0@1440r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function startup_fuel_valves3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %startup_fuel_valves3.entry
16B		%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
48B		SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
64B		%vreg2<def> = FLW %vreg1, 0; mem:LD4[%6](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
80B		%vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
96B		FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
112B		%vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
128B		%vreg5<def> = LW %vreg4, 4; mem:LD4[%9] GR32Bit:%vreg5,%vreg4
144B		BEQ <BB#10>, %vreg5, %zero; GR32Bit:%vreg5
160B		JAL <BB#1>
	    Successors according to CFG: BB#10(12) BB#1(20)

176B	BB#1: derived from LLVM BB %startup_fuel_valves3.if.else
	    Predecessors according to CFG: BB#0
192B		%vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
208B		%vreg7<def> = FLW %vreg6, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg6
224B		%vreg8<def> = ADDI %zero, 1165623296; GR32Bit:%vreg8
240B		%vreg10<def> = COPY %vreg8; FP32Bit:%vreg10 GR32Bit:%vreg8
256B		%vreg9<def> = FLT_S %vreg10, %vreg7; GR32Bit:%vreg9 FP32Bit:%vreg10,%vreg7
272B		BNE <BB#7>, %vreg9, %zero; GR32Bit:%vreg9
288B		JAL <BB#2>
	    Successors according to CFG: BB#7(16) BB#2(16)

304B	BB#2: derived from LLVM BB %startup_fuel_valves3.if.else7
	    Predecessors according to CFG: BB#1
320B		%vreg11<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg11
336B		%vreg12<def> = FLW %vreg11, 0; mem:LD4[%3] FP32Bit:%vreg12 GR32Bit:%vreg11
352B		%vreg13<def> = ADDI %zero, 1178816511; GR32Bit:%vreg13
368B		%vreg15<def> = COPY %vreg13; FP32Bit:%vreg15 GR32Bit:%vreg13
384B		%vreg14<def> = FULT_S %vreg12, %vreg15; GR32Bit:%vreg14 FP32Bit:%vreg12,%vreg15
400B		BNE <BB#6>, %vreg14, %zero; GR32Bit:%vreg14
416B		JAL <BB#3>
	    Successors according to CFG: BB#3(16) BB#6(16)

432B	BB#3: derived from LLVM BB %startup_fuel_valves3.if.then9
	    Predecessors according to CFG: BB#2
448B		%vreg20<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg20
464B		%vreg21<def> = LW %vreg20, 0; mem:LD4[%2] GR32Bit:%vreg21,%vreg20
480B		%vreg22<def> = LW %vreg21, 16; mem:LD4[%17] GR32Bit:%vreg22,%vreg21
496B		BNE <BB#7>, %vreg22, %zero; GR32Bit:%vreg22
512B		JAL <BB#4>
	    Successors according to CFG: BB#4(12) BB#7(20)

528B	BB#4: derived from LLVM BB %startup_fuel_valves3.if.then12
	    Predecessors according to CFG: BB#3
544B		%vreg23<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg23
560B		%vreg24<def> = LW %vreg23, 0; mem:LD4[%2] GR32Bit:%vreg24,%vreg23
576B		SW %zero, %vreg24, 12; mem:ST4[%21] GR32Bit:%vreg24
592B		%vreg25<def> = LW %vreg23, 0; mem:LD4[%2] GR32Bit:%vreg25,%vreg23
608B		%vreg26<def> = LW %vreg25, 20; mem:LD4[%23] GR32Bit:%vreg26,%vreg25
624B		%vreg27<def> = ADDI %zero, -1; GR32Bit:%vreg27
640B		BNE <BB#7>, %vreg26, %vreg27; GR32Bit:%vreg26,%vreg27
656B		JAL <BB#5>
	    Successors according to CFG: BB#5(16) BB#7(16)

672B	BB#5: derived from LLVM BB %startup_fuel_valves3.if.then16
	    Predecessors according to CFG: BB#4
688B		%vreg28<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg28
704B		%vreg29<def> = LW %vreg28, 0; mem:LD4[%2] GR32Bit:%vreg29,%vreg28
720B		%vreg30<def> = LW %vreg29, 4; mem:LD4[%27] GR32Bit:%vreg30,%vreg29
736B		SW %vreg30, %vreg29, 20; mem:ST4[%30] GR32Bit:%vreg30,%vreg29
752B		JAL <BB#7>
	    Successors according to CFG: BB#7

768B	BB#6: derived from LLVM BB %startup_fuel_valves3.if.else22
	    Predecessors according to CFG: BB#2
784B		%vreg16<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg16
800B		%vreg17<def> = LW %vreg16, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg16
816B		%vreg18<def> = ADDI %zero, 1; GR32Bit:%vreg18
832B		SW %vreg18, %vreg17, 12; mem:ST4[%32] GR32Bit:%vreg18,%vreg17
848B		%vreg19<def> = LW %vreg16, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg16
864B		SW %vreg18, %vreg19, 16; mem:ST4[%34] GR32Bit:%vreg18,%vreg19
	    Successors according to CFG: BB#7

880B	BB#7: derived from LLVM BB %startup_fuel_valves3.if.end26
	    Predecessors according to CFG: BB#1 BB#6 BB#3 BB#4 BB#5
896B		%vreg31<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg31
912B		%vreg32<def> = FLW %vreg31, 0; mem:LD4[%3] FP32Bit:%vreg32 GR32Bit:%vreg31
928B		%vreg33<def> = ADDI %zero, 1175027713; GR32Bit:%vreg33
944B		%vreg35<def> = COPY %vreg33; FP32Bit:%vreg35 GR32Bit:%vreg33
960B		%vreg34<def> = FULT_S %vreg35, %vreg32; GR32Bit:%vreg34 FP32Bit:%vreg35,%vreg32
976B		BNE <BB#11>, %vreg34, %zero; GR32Bit:%vreg34
992B		JAL <BB#8>
	    Successors according to CFG: BB#8(16) BB#11(16)

1008B	BB#8: derived from LLVM BB %startup_fuel_valves3.if.then28
	    Predecessors according to CFG: BB#7
1024B		%vreg36<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg36
1040B		%vreg37<def> = LW %vreg36, 0; mem:LD4[%2] GR32Bit:%vreg37,%vreg36
1056B		SW %zero, %vreg37, 8; mem:ST4[%38] GR32Bit:%vreg37
1072B		%vreg38<def> = LW %vreg36, 0; mem:LD4[%2] GR32Bit:%vreg38,%vreg36
1088B		%vreg39<def> = LW %vreg38, 24; mem:LD4[%40] GR32Bit:%vreg39,%vreg38
1104B		%vreg40<def> = ADDI %zero, -1; GR32Bit:%vreg40
1120B		BNE <BB#11>, %vreg39, %vreg40; GR32Bit:%vreg39,%vreg40
1136B		JAL <BB#9>
	    Successors according to CFG: BB#9(16) BB#11(16)

1152B	BB#9: derived from LLVM BB %startup_fuel_valves3.if.then32
	    Predecessors according to CFG: BB#8
1168B		%vreg41<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg41
1184B		%vreg42<def> = LW %vreg41, 0; mem:LD4[%2] GR32Bit:%vreg42,%vreg41
1200B		%vreg43<def> = LW %vreg42, 4; mem:LD4[%44] GR32Bit:%vreg43,%vreg42
1216B		SW %vreg43, %vreg42, 24; mem:ST4[%47] GR32Bit:%vreg43,%vreg42
1232B		JAL <BB#11>
	    Successors according to CFG: BB#11

1248B	BB#10: derived from LLVM BB %startup_fuel_valves3.if.then
	    Predecessors according to CFG: BB#0
1264B		%vreg44<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg44
1280B		%vreg45<def> = LW %vreg44, 0; mem:LD4[%2] GR32Bit:%vreg45,%vreg44
1296B		%vreg46<def> = ADDI %zero, 1; GR32Bit:%vreg46
1312B		SW %vreg46, %vreg45, 8; mem:ST4[%49] GR32Bit:%vreg46,%vreg45
1328B		%vreg47<def> = LW %vreg44, 0; mem:LD4[%2] GR32Bit:%vreg47,%vreg44
1344B		SW %vreg46, %vreg47, 12; mem:ST4[%51] GR32Bit:%vreg46,%vreg47
1360B		%vreg48<def> = LW %vreg44, 0; mem:LD4[%2] GR32Bit:%vreg48,%vreg44
1376B		SW %zero, %vreg48, 16; mem:ST4[%53] GR32Bit:%vreg48
	    Successors according to CFG: BB#11

1392B	BB#11: derived from LLVM BB %startup_fuel_valves3.return
	    Predecessors according to CFG: BB#7 BB#8 BB#9 BB#10
1408B		%vreg49<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg49
1424B		%vreg50<def> = LW %vreg49, 0; mem:LD4[%2] GR32Bit:%vreg50,%vreg49
1440B		%vreg51<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg51
1456B		SW %vreg50, %vreg51, 0; mem:ST4[%1] GR32Bit:%vreg50,%vreg51

# End machine code for function startup_fuel_valves3.

********** SIMPLE REGISTER COALESCING **********
********** Function: startup_fuel_valves3
********** JOINING INTERVALS ***********
startup_fuel_valves3.if.end26:
startup_fuel_valves3.return:
startup_fuel_valves3.if.else:
startup_fuel_valves3.if.else7:
startup_fuel_valves3.if.then9:
startup_fuel_valves3.if.then12:
startup_fuel_valves3.if.then28:
startup_fuel_valves3.entry:
startup_fuel_valves3.if.then16:
startup_fuel_valves3.if.else22:
startup_fuel_valves3.if.then32:
startup_fuel_valves3.if.then:
944B	%vreg35<def> = COPY %vreg33; FP32Bit:%vreg35 GR32Bit:%vreg33
	Not coalescable.
240B	%vreg10<def> = COPY %vreg8; FP32Bit:%vreg10 GR32Bit:%vreg8
	Not coalescable.
368B	%vreg15<def> = COPY %vreg13; FP32Bit:%vreg15 GR32Bit:%vreg13
	Not coalescable.
Trying to inflate 0 regs.
********** INTERVALS **********
%vreg0 = [16r,112r:0)  0@16r
%vreg1 = [32r,64r:0)  0@32r
%vreg2 = [64r,96r:0)  0@64r
%vreg3 = [80r,96r:0)  0@80r
%vreg4 = [112r,128r:0)  0@112r
%vreg5 = [128r,144r:0)  0@128r
%vreg6 = [192r,208r:0)  0@192r
%vreg7 = [208r,256r:0)  0@208r
%vreg8 = [224r,240r:0)  0@224r
%vreg9 = [256r,272r:0)  0@256r
%vreg10 = [240r,256r:0)  0@240r
%vreg11 = [320r,336r:0)  0@320r
%vreg12 = [336r,384r:0)  0@336r
%vreg13 = [352r,368r:0)  0@352r
%vreg14 = [384r,400r:0)  0@384r
%vreg15 = [368r,384r:0)  0@368r
%vreg16 = [784r,848r:0)  0@784r
%vreg17 = [800r,832r:0)  0@800r
%vreg18 = [816r,864r:0)  0@816r
%vreg19 = [848r,864r:0)  0@848r
%vreg20 = [448r,464r:0)  0@448r
%vreg21 = [464r,480r:0)  0@464r
%vreg22 = [480r,496r:0)  0@480r
%vreg23 = [544r,592r:0)  0@544r
%vreg24 = [560r,576r:0)  0@560r
%vreg25 = [592r,608r:0)  0@592r
%vreg26 = [608r,640r:0)  0@608r
%vreg27 = [624r,640r:0)  0@624r
%vreg28 = [688r,704r:0)  0@688r
%vreg29 = [704r,736r:0)  0@704r
%vreg30 = [720r,736r:0)  0@720r
%vreg31 = [896r,912r:0)  0@896r
%vreg32 = [912r,960r:0)  0@912r
%vreg33 = [928r,944r:0)  0@928r
%vreg34 = [960r,976r:0)  0@960r
%vreg35 = [944r,960r:0)  0@944r
%vreg36 = [1024r,1072r:0)  0@1024r
%vreg37 = [1040r,1056r:0)  0@1040r
%vreg38 = [1072r,1088r:0)  0@1072r
%vreg39 = [1088r,1120r:0)  0@1088r
%vreg40 = [1104r,1120r:0)  0@1104r
%vreg41 = [1168r,1184r:0)  0@1168r
%vreg42 = [1184r,1216r:0)  0@1184r
%vreg43 = [1200r,1216r:0)  0@1200r
%vreg44 = [1264r,1360r:0)  0@1264r
%vreg45 = [1280r,1312r:0)  0@1280r
%vreg46 = [1296r,1344r:0)  0@1296r
%vreg47 = [1328r,1344r:0)  0@1328r
%vreg48 = [1360r,1376r:0)  0@1360r
%vreg49 = [1408r,1424r:0)  0@1408r
%vreg50 = [1424r,1456r:0)  0@1424r
%vreg51 = [1440r,1456r:0)  0@1440r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function startup_fuel_valves3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %startup_fuel_valves3.entry
16B		%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
48B		SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
64B		%vreg2<def> = FLW %vreg1, 0; mem:LD4[%6](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
80B		%vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
96B		FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
112B		%vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
128B		%vreg5<def> = LW %vreg4, 4; mem:LD4[%9] GR32Bit:%vreg5,%vreg4
144B		BEQ <BB#10>, %vreg5, %zero; GR32Bit:%vreg5
160B		JAL <BB#1>
	    Successors according to CFG: BB#10(12) BB#1(20)

176B	BB#1: derived from LLVM BB %startup_fuel_valves3.if.else
	    Predecessors according to CFG: BB#0
192B		%vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
208B		%vreg7<def> = FLW %vreg6, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg6
224B		%vreg8<def> = ADDI %zero, 1165623296; GR32Bit:%vreg8
240B		%vreg10<def> = COPY %vreg8; FP32Bit:%vreg10 GR32Bit:%vreg8
256B		%vreg9<def> = FLT_S %vreg10, %vreg7; GR32Bit:%vreg9 FP32Bit:%vreg10,%vreg7
272B		BNE <BB#7>, %vreg9, %zero; GR32Bit:%vreg9
288B		JAL <BB#2>
	    Successors according to CFG: BB#7(16) BB#2(16)

304B	BB#2: derived from LLVM BB %startup_fuel_valves3.if.else7
	    Predecessors according to CFG: BB#1
320B		%vreg11<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg11
336B		%vreg12<def> = FLW %vreg11, 0; mem:LD4[%3] FP32Bit:%vreg12 GR32Bit:%vreg11
352B		%vreg13<def> = ADDI %zero, 1178816511; GR32Bit:%vreg13
368B		%vreg15<def> = COPY %vreg13; FP32Bit:%vreg15 GR32Bit:%vreg13
384B		%vreg14<def> = FULT_S %vreg12, %vreg15; GR32Bit:%vreg14 FP32Bit:%vreg12,%vreg15
400B		BNE <BB#6>, %vreg14, %zero; GR32Bit:%vreg14
416B		JAL <BB#3>
	    Successors according to CFG: BB#3(16) BB#6(16)

432B	BB#3: derived from LLVM BB %startup_fuel_valves3.if.then9
	    Predecessors according to CFG: BB#2
448B		%vreg20<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg20
464B		%vreg21<def> = LW %vreg20, 0; mem:LD4[%2] GR32Bit:%vreg21,%vreg20
480B		%vreg22<def> = LW %vreg21, 16; mem:LD4[%17] GR32Bit:%vreg22,%vreg21
496B		BNE <BB#7>, %vreg22, %zero; GR32Bit:%vreg22
512B		JAL <BB#4>
	    Successors according to CFG: BB#4(12) BB#7(20)

528B	BB#4: derived from LLVM BB %startup_fuel_valves3.if.then12
	    Predecessors according to CFG: BB#3
544B		%vreg23<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg23
560B		%vreg24<def> = LW %vreg23, 0; mem:LD4[%2] GR32Bit:%vreg24,%vreg23
576B		SW %zero, %vreg24, 12; mem:ST4[%21] GR32Bit:%vreg24
592B		%vreg25<def> = LW %vreg23, 0; mem:LD4[%2] GR32Bit:%vreg25,%vreg23
608B		%vreg26<def> = LW %vreg25, 20; mem:LD4[%23] GR32Bit:%vreg26,%vreg25
624B		%vreg27<def> = ADDI %zero, -1; GR32Bit:%vreg27
640B		BNE <BB#7>, %vreg26, %vreg27; GR32Bit:%vreg26,%vreg27
656B		JAL <BB#5>
	    Successors according to CFG: BB#5(16) BB#7(16)

672B	BB#5: derived from LLVM BB %startup_fuel_valves3.if.then16
	    Predecessors according to CFG: BB#4
688B		%vreg28<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg28
704B		%vreg29<def> = LW %vreg28, 0; mem:LD4[%2] GR32Bit:%vreg29,%vreg28
720B		%vreg30<def> = LW %vreg29, 4; mem:LD4[%27] GR32Bit:%vreg30,%vreg29
736B		SW %vreg30, %vreg29, 20; mem:ST4[%30] GR32Bit:%vreg30,%vreg29
752B		JAL <BB#7>
	    Successors according to CFG: BB#7

768B	BB#6: derived from LLVM BB %startup_fuel_valves3.if.else22
	    Predecessors according to CFG: BB#2
784B		%vreg16<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg16
800B		%vreg17<def> = LW %vreg16, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg16
816B		%vreg18<def> = ADDI %zero, 1; GR32Bit:%vreg18
832B		SW %vreg18, %vreg17, 12; mem:ST4[%32] GR32Bit:%vreg18,%vreg17
848B		%vreg19<def> = LW %vreg16, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg16
864B		SW %vreg18, %vreg19, 16; mem:ST4[%34] GR32Bit:%vreg18,%vreg19
	    Successors according to CFG: BB#7

880B	BB#7: derived from LLVM BB %startup_fuel_valves3.if.end26
	    Predecessors according to CFG: BB#1 BB#6 BB#3 BB#4 BB#5
896B		%vreg31<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg31
912B		%vreg32<def> = FLW %vreg31, 0; mem:LD4[%3] FP32Bit:%vreg32 GR32Bit:%vreg31
928B		%vreg33<def> = ADDI %zero, 1175027713; GR32Bit:%vreg33
944B		%vreg35<def> = COPY %vreg33; FP32Bit:%vreg35 GR32Bit:%vreg33
960B		%vreg34<def> = FULT_S %vreg35, %vreg32; GR32Bit:%vreg34 FP32Bit:%vreg35,%vreg32
976B		BNE <BB#11>, %vreg34, %zero; GR32Bit:%vreg34
992B		JAL <BB#8>
	    Successors according to CFG: BB#8(16) BB#11(16)

1008B	BB#8: derived from LLVM BB %startup_fuel_valves3.if.then28
	    Predecessors according to CFG: BB#7
1024B		%vreg36<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg36
1040B		%vreg37<def> = LW %vreg36, 0; mem:LD4[%2] GR32Bit:%vreg37,%vreg36
1056B		SW %zero, %vreg37, 8; mem:ST4[%38] GR32Bit:%vreg37
1072B		%vreg38<def> = LW %vreg36, 0; mem:LD4[%2] GR32Bit:%vreg38,%vreg36
1088B		%vreg39<def> = LW %vreg38, 24; mem:LD4[%40] GR32Bit:%vreg39,%vreg38
1104B		%vreg40<def> = ADDI %zero, -1; GR32Bit:%vreg40
1120B		BNE <BB#11>, %vreg39, %vreg40; GR32Bit:%vreg39,%vreg40
1136B		JAL <BB#9>
	    Successors according to CFG: BB#9(16) BB#11(16)

1152B	BB#9: derived from LLVM BB %startup_fuel_valves3.if.then32
	    Predecessors according to CFG: BB#8
1168B		%vreg41<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg41
1184B		%vreg42<def> = LW %vreg41, 0; mem:LD4[%2] GR32Bit:%vreg42,%vreg41
1200B		%vreg43<def> = LW %vreg42, 4; mem:LD4[%44] GR32Bit:%vreg43,%vreg42
1216B		SW %vreg43, %vreg42, 24; mem:ST4[%47] GR32Bit:%vreg43,%vreg42
1232B		JAL <BB#11>
	    Successors according to CFG: BB#11

1248B	BB#10: derived from LLVM BB %startup_fuel_valves3.if.then
	    Predecessors according to CFG: BB#0
1264B		%vreg44<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg44
1280B		%vreg45<def> = LW %vreg44, 0; mem:LD4[%2] GR32Bit:%vreg45,%vreg44
1296B		%vreg46<def> = ADDI %zero, 1; GR32Bit:%vreg46
1312B		SW %vreg46, %vreg45, 8; mem:ST4[%49] GR32Bit:%vreg46,%vreg45
1328B		%vreg47<def> = LW %vreg44, 0; mem:LD4[%2] GR32Bit:%vreg47,%vreg44
1344B		SW %vreg46, %vreg47, 12; mem:ST4[%51] GR32Bit:%vreg46,%vreg47
1360B		%vreg48<def> = LW %vreg44, 0; mem:LD4[%2] GR32Bit:%vreg48,%vreg44
1376B		SW %zero, %vreg48, 16; mem:ST4[%53] GR32Bit:%vreg48
	    Successors according to CFG: BB#11

1392B	BB#11: derived from LLVM BB %startup_fuel_valves3.return
	    Predecessors according to CFG: BB#7 BB#8 BB#9 BB#10
1408B		%vreg49<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg49
1424B		%vreg50<def> = LW %vreg49, 0; mem:LD4[%2] GR32Bit:%vreg50,%vreg49
1440B		%vreg51<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg51
1456B		SW %vreg50, %vreg51, 0; mem:ST4[%1] GR32Bit:%vreg50,%vreg51

# End machine code for function startup_fuel_valves3.

Before MISched:
# Machine code for function startup_fuel_valves3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %startup_fuel_valves3.entry
	%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
	%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
	SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
	%vreg2<def> = FLW %vreg1, 0; mem:LD4[%6](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
	%vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
	FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
	%vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
	%vreg5<def> = LW %vreg4, 4; mem:LD4[%9] GR32Bit:%vreg5,%vreg4
	BEQ <BB#10>, %vreg5, %zero; GR32Bit:%vreg5
	JAL <BB#1>
    Successors according to CFG: BB#10(12) BB#1(20)

BB#1: derived from LLVM BB %startup_fuel_valves3.if.else
    Predecessors according to CFG: BB#0
	%vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
	%vreg7<def> = FLW %vreg6, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg6
	%vreg8<def> = ADDI %zero, 1165623296; GR32Bit:%vreg8
	%vreg10<def> = COPY %vreg8; FP32Bit:%vreg10 GR32Bit:%vreg8
	%vreg9<def> = FLT_S %vreg10, %vreg7; GR32Bit:%vreg9 FP32Bit:%vreg10,%vreg7
	BNE <BB#7>, %vreg9, %zero; GR32Bit:%vreg9
	JAL <BB#2>
    Successors according to CFG: BB#7(16) BB#2(16)

BB#2: derived from LLVM BB %startup_fuel_valves3.if.else7
    Predecessors according to CFG: BB#1
	%vreg11<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg11
	%vreg12<def> = FLW %vreg11, 0; mem:LD4[%3] FP32Bit:%vreg12 GR32Bit:%vreg11
	%vreg13<def> = ADDI %zero, 1178816511; GR32Bit:%vreg13
	%vreg15<def> = COPY %vreg13; FP32Bit:%vreg15 GR32Bit:%vreg13
	%vreg14<def> = FULT_S %vreg12, %vreg15; GR32Bit:%vreg14 FP32Bit:%vreg12,%vreg15
	BNE <BB#6>, %vreg14, %zero; GR32Bit:%vreg14
	JAL <BB#3>
    Successors according to CFG: BB#3(16) BB#6(16)

BB#3: derived from LLVM BB %startup_fuel_valves3.if.then9
    Predecessors according to CFG: BB#2
	%vreg20<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg20
	%vreg21<def> = LW %vreg20, 0; mem:LD4[%2] GR32Bit:%vreg21,%vreg20
	%vreg22<def> = LW %vreg21, 16; mem:LD4[%17] GR32Bit:%vreg22,%vreg21
	BNE <BB#7>, %vreg22, %zero; GR32Bit:%vreg22
	JAL <BB#4>
    Successors according to CFG: BB#4(12) BB#7(20)

BB#4: derived from LLVM BB %startup_fuel_valves3.if.then12
    Predecessors according to CFG: BB#3
	%vreg23<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg23
	%vreg24<def> = LW %vreg23, 0; mem:LD4[%2] GR32Bit:%vreg24,%vreg23
	SW %zero, %vreg24, 12; mem:ST4[%21] GR32Bit:%vreg24
	%vreg25<def> = LW %vreg23, 0; mem:LD4[%2] GR32Bit:%vreg25,%vreg23
	%vreg26<def> = LW %vreg25, 20; mem:LD4[%23] GR32Bit:%vreg26,%vreg25
	%vreg27<def> = ADDI %zero, -1; GR32Bit:%vreg27
	BNE <BB#7>, %vreg26, %vreg27; GR32Bit:%vreg26,%vreg27
	JAL <BB#5>
    Successors according to CFG: BB#5(16) BB#7(16)

BB#5: derived from LLVM BB %startup_fuel_valves3.if.then16
    Predecessors according to CFG: BB#4
	%vreg28<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg28
	%vreg29<def> = LW %vreg28, 0; mem:LD4[%2] GR32Bit:%vreg29,%vreg28
	%vreg30<def> = LW %vreg29, 4; mem:LD4[%27] GR32Bit:%vreg30,%vreg29
	SW %vreg30, %vreg29, 20; mem:ST4[%30] GR32Bit:%vreg30,%vreg29
	JAL <BB#7>
    Successors according to CFG: BB#7

BB#6: derived from LLVM BB %startup_fuel_valves3.if.else22
    Predecessors according to CFG: BB#2
	%vreg16<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg16
	%vreg17<def> = LW %vreg16, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg16
	%vreg18<def> = ADDI %zero, 1; GR32Bit:%vreg18
	SW %vreg18, %vreg17, 12; mem:ST4[%32] GR32Bit:%vreg18,%vreg17
	%vreg19<def> = LW %vreg16, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg16
	SW %vreg18, %vreg19, 16; mem:ST4[%34] GR32Bit:%vreg18,%vreg19
    Successors according to CFG: BB#7

BB#7: derived from LLVM BB %startup_fuel_valves3.if.end26
    Predecessors according to CFG: BB#1 BB#6 BB#3 BB#4 BB#5
	%vreg31<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg31
	%vreg32<def> = FLW %vreg31, 0; mem:LD4[%3] FP32Bit:%vreg32 GR32Bit:%vreg31
	%vreg33<def> = ADDI %zero, 1175027713; GR32Bit:%vreg33
	%vreg35<def> = COPY %vreg33; FP32Bit:%vreg35 GR32Bit:%vreg33
	%vreg34<def> = FULT_S %vreg35, %vreg32; GR32Bit:%vreg34 FP32Bit:%vreg35,%vreg32
	BNE <BB#11>, %vreg34, %zero; GR32Bit:%vreg34
	JAL <BB#8>
    Successors according to CFG: BB#8(16) BB#11(16)

BB#8: derived from LLVM BB %startup_fuel_valves3.if.then28
    Predecessors according to CFG: BB#7
	%vreg36<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg36
	%vreg37<def> = LW %vreg36, 0; mem:LD4[%2] GR32Bit:%vreg37,%vreg36
	SW %zero, %vreg37, 8; mem:ST4[%38] GR32Bit:%vreg37
	%vreg38<def> = LW %vreg36, 0; mem:LD4[%2] GR32Bit:%vreg38,%vreg36
	%vreg39<def> = LW %vreg38, 24; mem:LD4[%40] GR32Bit:%vreg39,%vreg38
	%vreg40<def> = ADDI %zero, -1; GR32Bit:%vreg40
	BNE <BB#11>, %vreg39, %vreg40; GR32Bit:%vreg39,%vreg40
	JAL <BB#9>
    Successors according to CFG: BB#9(16) BB#11(16)

BB#9: derived from LLVM BB %startup_fuel_valves3.if.then32
    Predecessors according to CFG: BB#8
	%vreg41<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg41
	%vreg42<def> = LW %vreg41, 0; mem:LD4[%2] GR32Bit:%vreg42,%vreg41
	%vreg43<def> = LW %vreg42, 4; mem:LD4[%44] GR32Bit:%vreg43,%vreg42
	SW %vreg43, %vreg42, 24; mem:ST4[%47] GR32Bit:%vreg43,%vreg42
	JAL <BB#11>
    Successors according to CFG: BB#11

BB#10: derived from LLVM BB %startup_fuel_valves3.if.then
    Predecessors according to CFG: BB#0
	%vreg44<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg44
	%vreg45<def> = LW %vreg44, 0; mem:LD4[%2] GR32Bit:%vreg45,%vreg44
	%vreg46<def> = ADDI %zero, 1; GR32Bit:%vreg46
	SW %vreg46, %vreg45, 8; mem:ST4[%49] GR32Bit:%vreg46,%vreg45
	%vreg47<def> = LW %vreg44, 0; mem:LD4[%2] GR32Bit:%vreg47,%vreg44
	SW %vreg46, %vreg47, 12; mem:ST4[%51] GR32Bit:%vreg46,%vreg47
	%vreg48<def> = LW %vreg44, 0; mem:LD4[%2] GR32Bit:%vreg48,%vreg44
	SW %zero, %vreg48, 16; mem:ST4[%53] GR32Bit:%vreg48
    Successors according to CFG: BB#11

BB#11: derived from LLVM BB %startup_fuel_valves3.return
    Predecessors according to CFG: BB#7 BB#8 BB#9 BB#10
	%vreg49<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg49
	%vreg50<def> = LW %vreg49, 0; mem:LD4[%2] GR32Bit:%vreg50,%vreg49
	%vreg51<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg51
	SW %vreg50, %vreg51, 0; mem:ST4[%1] GR32Bit:%vreg50,%vreg51

# End machine code for function startup_fuel_valves3.


-------------
Starting new basic block BB#0
********** MI Scheduling **********
startup_fuel_valves3:BB#0 startup_fuel_valves3.entry
  From: JAL <BB#1>
    To: JAL <BB#1>
 Remaining: 9
Max Pressure: Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 0
Excess PSets: 
0 subtrees:
*** Final schedule for BB#0 ***

Partitioning instructions of the region into multiple CEs

*** Renumbered SlotIndexes 172-188 ***

*** Renumbered SlotIndexes 184-216 ***

*** Renumbered SlotIndexes 196-236 ***

*** Renumbered SlotIndexes 208-264 ***

*** Renumbered SlotIndexes 220-284 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
********** MI Scheduling **********
startup_fuel_valves3:BB#0 startup_fuel_valves3.entry
  From: %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
    To: BEQ <BB#10>, %vreg5, %zero; GR32Bit:%vreg5
 Remaining: 0
Max Pressure: FP32Bit=1
GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 1
GR32BitLimit 32 Actual 2
Excess PSets: 
3 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 1
  SU(4) in tree 1
  SU(5) in tree 1
  SU(6) in tree 2
  SU(7) in tree 2
SU(0):   %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 36
  Successors:
   val SU(6): Latency=5 Reg=%vreg0
   val SU(2): Latency=5 Reg=%vreg0

SU(1):   %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
   val SU(3): Latency=5 Reg=%vreg1
   val SU(2): Latency=4 Reg=%vreg1

SU(2):   SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 13
  Depth              : 5
  Height             : 31
  Predecessors:
   val SU(1): Latency=4 Reg=%vreg1
   val SU(0): Latency=5 Reg=%vreg0
  Successors:
   ch  SU(6): Latency=1
   ch  SU(7): Latency=1
   ch  SU(3): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(3):   %vreg2<def> = FLW %vreg1, 0; mem:LD4[%6](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 6
  Height             : 18
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg1
   ch  SU(2): Latency=1
  Successors:
   val SU(5): Latency=2 Reg=%vreg2
   ch  SU(5): Latency=0

SU(4):   %vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
   val SU(5): Latency=5 Reg=%vreg3

SU(5):   FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 8
  Height             : 16
  Predecessors:
   val SU(3): Latency=2 Reg=%vreg2
   val SU(4): Latency=5 Reg=%vreg3
   ch  SU(3): Latency=0
  Successors:
   ch  SU(7): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(6):   %vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 6
  Height             : 30
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg0
   ch  SU(2): Latency=1
  Successors:
   val SU(7): Latency=15 Reg=%vreg4

SU(7):   %vreg5<def> = LW %vreg4, 4; mem:LD4[%9] GR32Bit:%vreg5,%vreg4
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 21
  Height             : 15
  Predecessors:
   val SU(6): Latency=15 Reg=%vreg4
   ch  SU(5): Latency=1
   ch  SU(2): Latency=1
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg5

SU(0):   %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 36
  Successors:
   val SU(6): Latency=5 Reg=%vreg0
   val SU(2): Latency=5 Reg=%vreg0

SU(1):   %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
   val SU(3): Latency=5 Reg=%vreg1
   val SU(2): Latency=4 Reg=%vreg1

SU(2):   SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 13
  Depth              : 5
  Height             : 31
  Predecessors:
   val SU(1): Latency=4 Reg=%vreg1
   val SU(0): Latency=5 Reg=%vreg0
  Successors:
   ch  SU(6): Latency=1
   ch  SU(7): Latency=1
   ch  SU(3): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(3):   %vreg2<def> = FLW %vreg1, 0; mem:LD4[%6](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 6
  Height             : 18
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg1
   ch  SU(2): Latency=1
  Successors:
   val SU(5): Latency=2 Reg=%vreg2
   ch  SU(5): Latency=0

SU(4):   %vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
   val SU(5): Latency=5 Reg=%vreg3

SU(5):   FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 8
  Height             : 16
  Predecessors:
   val SU(3): Latency=2 Reg=%vreg2
   val SU(4): Latency=5 Reg=%vreg3
   ch  SU(3): Latency=0
  Successors:
   ch  SU(7): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(6):   %vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 6
  Height             : 30
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg0
   ch  SU(2): Latency=1
  Successors:
   val SU(7): Latency=15 Reg=%vreg4

SU(7):   %vreg5<def> = LW %vreg4, 4; mem:LD4[%9] GR32Bit:%vreg5,%vreg4
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 14
  Depth              : 21
  Height             : 15
  Predecessors:
   val SU(6): Latency=15 Reg=%vreg4
   ch  SU(5): Latency=1
   ch  SU(2): Latency=1
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg5

Pick node SU(4)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
handleMove 80B -> 8B: %vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
     %vreg3:	[80r,96r:0)  0@80r
        -->	[8r,96r:0)  0@8r
     t5:	EMPTY
        -->	EMPTY
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
Pick node SU(1)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
Pick node SU(2)  ILP: 3 / 6 = 0.5 Tree: 0 @0
Scheduling SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
Pick node SU(3)  ILP: 1 / 7 = 0.142857 Tree: 1 @0
Scheduling %vreg2<def> = FLW %vreg1, 0; mem:LD4[%6](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
Pick node SU(5)  ILP: 3 / 9 = 0.333333 Tree: 1 @0
Scheduling FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
Pick node SU(6)  ILP: 1 / 7 = 0.142857 Tree: 2 @0
Scheduling %vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
Pick node SU(7)  ILP: 2 / 22 = 0.0909091 Tree: 2 @0
Scheduling %vreg5<def> = LW %vreg4, 4; mem:LD4[%9] GR32Bit:%vreg5,%vreg4
*** Final schedule for BB#0 ***
SU(4):   %vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
SU(0):   %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
SU(1):   %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
SU(2):   SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
SU(3):   %vreg2<def> = FLW %vreg1, 0; mem:LD4[%6](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
SU(5):   FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
SU(6):   %vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
SU(7):   %vreg5<def> = LW %vreg4, 4; mem:LD4[%9] GR32Bit:%vreg5,%vreg4


*** Renumbered SlotIndexes 4-28 ***

*** Renumbered SlotIndexes 16-56 ***

*** Renumbered SlotIndexes 28-76 ***

*** Renumbered SlotIndexes 40-104 ***

*** Renumbered SlotIndexes 52-124 ***

*** Renumbered SlotIndexes 64-152 ***

*** Renumbered SlotIndexes 76-348 ***

*** Renumbered SlotIndexes 88-376 ***

*** Renumbered SlotIndexes 100-396 ***

*** Renumbered SlotIndexes 112-424 ***

*** Renumbered SlotIndexes 124-444 ***

*** Renumbered SlotIndexes 136-472 ***

*** Renumbered SlotIndexes 148-492 ***

*** Renumbered SlotIndexes 160-520 ***

*** Renumbered SlotIndexes 172-540 ***

*** Renumbered SlotIndexes 184-568 ***

*** Renumbered SlotIndexes 196-588 ***

*** Renumbered SlotIndexes 208-616 ***

*** Renumbered SlotIndexes 220-636 ***

*** Renumbered SlotIndexes 232-664 ***

*** Renumbered SlotIndexes 244-684 ***

*** Renumbered SlotIndexes 256-712 ***

*** Renumbered SlotIndexes 268-732 ***

*** Renumbered SlotIndexes 280-760 ***

*** Renumbered SlotIndexes 292-780 ***

*** Renumbered SlotIndexes 304-808 ***

*** Renumbered SlotIndexes 316-828 ***

*** Renumbered SlotIndexes 328-856 ***

*** Renumbered SlotIndexes 340-876 ***

*** Renumbered SlotIndexes 352-904 ***

*** Renumbered SlotIndexes 364-924 ***

*** Renumbered SlotIndexes 376-952 ***

*** Renumbered SlotIndexes 388-972 ***

*** Renumbered SlotIndexes 400-1000 ***
Partitioning instructions of the region into multiple CEs
instr:  %vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
instr:  %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
instr:  %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
instr:  SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
instr:  %vreg2<def> = FLW %vreg1, 0; mem:LD4[%6](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
instr:  FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
instr:  %vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
instr:  %vreg5<def> = LW %vreg4, 4; mem:LD4[%9] GR32Bit:%vreg5,%vreg4

*** Renumbered SlotIndexes 484-1020 ***

*** Renumbered SlotIndexes 496-1048 ***

*** Renumbered SlotIndexes 508-1068 ***

*** Renumbered SlotIndexes 520-1096 ***

*** Renumbered SlotIndexes 532-1116 ***

*** Renumbered SlotIndexes 544-1144 ***

*** Renumbered SlotIndexes 564-1164 ***

*** Renumbered SlotIndexes 576-1192 ***

*** Renumbered SlotIndexes 588-1212 ***

*** Renumbered SlotIndexes 600-1240 ***

*** Renumbered SlotIndexes 612-1260 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs

renaming register of operand that belongs to ce 1 but was defined in0
%vreg5<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg5<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg5<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg5
renaming register of operand that belongs to ce 2 but was defined in0
%vreg5
renaming register of operand that belongs to ce 3 but was defined in0
%vreg5After Shuffling regions of basic block, state of BB#0:
BB#0: derived from LLVM BB %startup_fuel_valves3.entry
	%vreg52<def> = ADD %t5, %zero; GR32Bit:%vreg52
	%vreg54<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg54
	%vreg55<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg55
	%vreg56<def> = SRLI %vreg55, 12; GR32Bit:%vreg56,%vreg55
	%vreg57<def> = ADD %vreg54, %vreg56; GR32Bit:%vreg57,%vreg54,%vreg56
	%vreg58<def> = ADDI %zero, 16; GR32Bit:%vreg58
	%vreg59<def> = SRLI %t5, 22; GR32Bit:%vreg59
	%vreg60<def> = SRLI %t5, 12; GR32Bit:%vreg60
	%vreg61<def> = ANDI %vreg60, 15; GR32Bit:%vreg61,%vreg60
	%vreg62<def> = SRLI %t5, 6; GR32Bit:%vreg62
	%vreg63<def> = ANDI %vreg62, 63; GR32Bit:%vreg63,%vreg62
	%vreg64<def> = ADDI %zero, 832; GR32Bit:%vreg64
	%vreg65<def> = MUL %vreg59, %vreg64; GR32Bit:%vreg65,%vreg59,%vreg64
	%vreg66<def> = ADDI %zero, 52; GR32Bit:%vreg66
	%vreg67<def> = MUL %vreg61, %vreg66; GR32Bit:%vreg67,%vreg61,%vreg66
	%vreg68<def> = ADD %vreg67, %vreg63; GR32Bit:%vreg68,%vreg67,%vreg63
	%vreg69<def> = ADD %vreg68, %vreg65; GR32Bit:%vreg69,%vreg68,%vreg65
	%vreg70<def> = MUL %vreg69, %vreg58; GR32Bit:%vreg70,%vreg69,%vreg58
	%vreg53<def> = ADD %vreg57, %vreg70; GR32Bit:%vreg53,%vreg57,%vreg70
	%vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
	%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
	%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
	SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
	%vreg2<def> = FLW %vreg1, 0; mem:LD4[%6](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
	FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
	%vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
	%vreg5<def> = LW %vreg4, 4; mem:LD4[%9] GR32Bit:%vreg5,%vreg4
	%vreg128<def> = LUI 1; GR32Bit:%vreg128
	WRITEPM %vreg128, %vreg5, 0; GR32Bit:%vreg128,%vreg5
	%vreg130<def> = LUI 2; GR32Bit:%vreg130
	WRITEPM %vreg130, %vreg5, 0; GR32Bit:%vreg130,%vreg5
	%vreg132<def> = LUI 3; GR32Bit:%vreg132
	WRITEPM %vreg132, %vreg5, 0; GR32Bit:%vreg132,%vreg5
	BEQ <BB#10>, %vreg5, %zero; GR32Bit:%vreg5
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#1>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg71<def> = ADD %t5, %zero; GR32Bit:%vreg71
	%vreg73<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg73
	%vreg74<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg74
	%vreg75<def> = SRLI %vreg74, 12; GR32Bit:%vreg75,%vreg74
	%vreg76<def> = ADD %vreg73, %vreg75; GR32Bit:%vreg76,%vreg73,%vreg75
	%vreg77<def> = ADDI %zero, 16; GR32Bit:%vreg77
	%vreg78<def> = SRLI %t5, 22; GR32Bit:%vreg78
	%vreg79<def> = SRLI %t5, 12; GR32Bit:%vreg79
	%vreg80<def> = ANDI %vreg79, 15; GR32Bit:%vreg80,%vreg79
	%vreg81<def> = SRLI %t5, 6; GR32Bit:%vreg81
	%vreg82<def> = ANDI %vreg81, 63; GR32Bit:%vreg82,%vreg81
	%vreg83<def> = ADDI %zero, 832; GR32Bit:%vreg83
	%vreg84<def> = MUL %vreg78, %vreg83; GR32Bit:%vreg84,%vreg78,%vreg83
	%vreg85<def> = ADDI %zero, 52; GR32Bit:%vreg85
	%vreg86<def> = MUL %vreg80, %vreg85; GR32Bit:%vreg86,%vreg80,%vreg85
	%vreg87<def> = ADD %vreg86, %vreg82; GR32Bit:%vreg87,%vreg86,%vreg82
	%vreg88<def> = ADD %vreg87, %vreg84; GR32Bit:%vreg88,%vreg87,%vreg84
	%vreg89<def> = MUL %vreg88, %vreg77; GR32Bit:%vreg89,%vreg88,%vreg77
	%vreg72<def> = ADD %vreg76, %vreg89; GR32Bit:%vreg72,%vreg76,%vreg89
	%vreg129<def> = LUI 1; GR32Bit:%vreg129
	%vreg134<def> = DREADPM %vreg129, 0; GR32Bit:%vreg134,%vreg129
	BEQ <BB#10>, %vreg134, %zero; GR32Bit:%vreg134
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#1>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg90<def> = ADD %t5, %zero; GR32Bit:%vreg90
	%vreg92<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg92
	%vreg93<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg93
	%vreg94<def> = SRLI %vreg93, 12; GR32Bit:%vreg94,%vreg93
	%vreg95<def> = ADD %vreg92, %vreg94; GR32Bit:%vreg95,%vreg92,%vreg94
	%vreg96<def> = ADDI %zero, 16; GR32Bit:%vreg96
	%vreg97<def> = SRLI %t5, 22; GR32Bit:%vreg97
	%vreg98<def> = SRLI %t5, 12; GR32Bit:%vreg98
	%vreg99<def> = ANDI %vreg98, 15; GR32Bit:%vreg99,%vreg98
	%vreg100<def> = SRLI %t5, 6; GR32Bit:%vreg100
	%vreg101<def> = ANDI %vreg100, 63; GR32Bit:%vreg101,%vreg100
	%vreg102<def> = ADDI %zero, 832; GR32Bit:%vreg102
	%vreg103<def> = MUL %vreg97, %vreg102; GR32Bit:%vreg103,%vreg97,%vreg102
	%vreg104<def> = ADDI %zero, 52; GR32Bit:%vreg104
	%vreg105<def> = MUL %vreg99, %vreg104; GR32Bit:%vreg105,%vreg99,%vreg104
	%vreg106<def> = ADD %vreg105, %vreg101; GR32Bit:%vreg106,%vreg105,%vreg101
	%vreg107<def> = ADD %vreg106, %vreg103; GR32Bit:%vreg107,%vreg106,%vreg103
	%vreg108<def> = MUL %vreg107, %vreg96; GR32Bit:%vreg108,%vreg107,%vreg96
	%vreg91<def> = ADD %vreg95, %vreg108; GR32Bit:%vreg91,%vreg95,%vreg108
	%vreg131<def> = LUI 2; GR32Bit:%vreg131
	%vreg135<def> = DREADPM %vreg131, 0; GR32Bit:%vreg135,%vreg131
	BEQ <BB#10>, %vreg135, %zero; GR32Bit:%vreg135
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#1>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg109<def> = ADD %t5, %zero; GR32Bit:%vreg109
	%vreg111<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg111
	%vreg112<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg112
	%vreg113<def> = SRLI %vreg112, 12; GR32Bit:%vreg113,%vreg112
	%vreg114<def> = ADD %vreg111, %vreg113; GR32Bit:%vreg114,%vreg111,%vreg113
	%vreg115<def> = ADDI %zero, 16; GR32Bit:%vreg115
	%vreg116<def> = SRLI %t5, 22; GR32Bit:%vreg116
	%vreg117<def> = SRLI %t5, 12; GR32Bit:%vreg117
	%vreg118<def> = ANDI %vreg117, 15; GR32Bit:%vreg118,%vreg117
	%vreg119<def> = SRLI %t5, 6; GR32Bit:%vreg119
	%vreg120<def> = ANDI %vreg119, 63; GR32Bit:%vreg120,%vreg119
	%vreg121<def> = ADDI %zero, 832; GR32Bit:%vreg121
	%vreg122<def> = MUL %vreg116, %vreg121; GR32Bit:%vreg122,%vreg116,%vreg121
	%vreg123<def> = ADDI %zero, 52; GR32Bit:%vreg123
	%vreg124<def> = MUL %vreg118, %vreg123; GR32Bit:%vreg124,%vreg118,%vreg123
	%vreg125<def> = ADD %vreg124, %vreg120; GR32Bit:%vreg125,%vreg124,%vreg120
	%vreg126<def> = ADD %vreg125, %vreg122; GR32Bit:%vreg126,%vreg125,%vreg122
	%vreg127<def> = MUL %vreg126, %vreg115; GR32Bit:%vreg127,%vreg126,%vreg115
	%vreg110<def> = ADD %vreg114, %vreg127; GR32Bit:%vreg110,%vreg114,%vreg127
	%vreg133<def> = LUI 3; GR32Bit:%vreg133
	%vreg136<def> = DREADPM %vreg133, 0; GR32Bit:%vreg136,%vreg133
	BEQ <BB#10>, %vreg136, %zero; GR32Bit:%vreg136
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#1>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#10(12) BB#1(20)

*** Renumbered SlotIndexes 316-1452 ***

*** Renumbered SlotIndexes 304-1488 ***

*** Renumbered SlotIndexes 304-1504 ***

*** Renumbered SlotIndexes 304-1520 ***

*** Renumbered SlotIndexes 304-1536 ***

*** Renumbered SlotIndexes 216-1576 ***

*** Renumbered SlotIndexes 204-1596 ***

*** Renumbered SlotIndexes 204-1612 ***

*** Renumbered SlotIndexes 204-1628 ***

*** Renumbered SlotIndexes 204-1644 ***

*** Renumbered SlotIndexes 112-1696 ***

*** Renumbered SlotIndexes 100-1716 ***

*** Renumbered SlotIndexes 100-1732 ***

*** Renumbered SlotIndexes 100-1748 ***

*** Renumbered SlotIndexes 100-1764 ***

*** Renumbered SlotIndexes 100-1780 ***

*** Renumbered SlotIndexes 100-1796 ***

*** Renumbered SlotIndexes 100-1812 ***

*** Renumbered SlotIndexes 100-1828 ***

*** Renumbered SlotIndexes 100-1844 ***

*** Renumbered SlotIndexes 100-1860 ***

*** Renumbered SlotIndexes 12-1900 ***
Creating pHyperOp bundles for CEs for bb0
  %vreg71<def> = ADD %t5, %zero; GR32Bit:%vreg71
starting at   %vreg52<def> = ADD %t5, %zero; GR32Bit:%vreg52
  %vreg90<def> = ADD %t5, %zero; GR32Bit:%vreg90
starting at   %vreg71<def> = ADD %t5, %zero; GR32Bit:%vreg71
  %vreg109<def> = ADD %t5, %zero; GR32Bit:%vreg109
starting at   %vreg90<def> = ADD %t5, %zero; GR32Bit:%vreg90
starting at   %vreg109<def> = ADD %t5, %zero; GR32Bit:%vreg109
After bundling, state of BB0:BB#0: derived from LLVM BB %startup_fuel_valves3.entry
	%vreg52<def> = ADD %t5, %zero; GR32Bit:%vreg52
	  * %vreg54<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg54
	  * %vreg55<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg55
	  * %vreg56<def> = SRLI %vreg55, 12; GR32Bit:%vreg56,%vreg55
	  * %vreg57<def> = ADD %vreg54, %vreg56; GR32Bit:%vreg57,%vreg54,%vreg56
	  * %vreg58<def> = ADDI %zero, 16; GR32Bit:%vreg58
	  * %vreg59<def> = SRLI %t5, 22; GR32Bit:%vreg59
	  * %vreg60<def> = SRLI %t5, 12; GR32Bit:%vreg60
	  * %vreg61<def> = ANDI %vreg60, 15; GR32Bit:%vreg61,%vreg60
	  * %vreg62<def> = SRLI %t5, 6; GR32Bit:%vreg62
	  * %vreg63<def> = ANDI %vreg62, 63; GR32Bit:%vreg63,%vreg62
	  * %vreg64<def> = ADDI %zero, 832; GR32Bit:%vreg64
	  * %vreg65<def> = MUL %vreg59, %vreg64; GR32Bit:%vreg65,%vreg59,%vreg64
	  * %vreg66<def> = ADDI %zero, 52; GR32Bit:%vreg66
	  * %vreg67<def> = MUL %vreg61, %vreg66; GR32Bit:%vreg67,%vreg61,%vreg66
	  * %vreg68<def> = ADD %vreg67, %vreg63; GR32Bit:%vreg68,%vreg67,%vreg63
	  * %vreg69<def> = ADD %vreg68, %vreg65; GR32Bit:%vreg69,%vreg68,%vreg65
	  * %vreg70<def> = MUL %vreg69, %vreg58; GR32Bit:%vreg70,%vreg69,%vreg58
	  * %vreg53<def> = ADD %vreg57, %vreg70; GR32Bit:%vreg53,%vreg57,%vreg70
	  * %vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
	  * %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
	  * %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
	  * SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
	  * %vreg2<def> = FLW %vreg1, 0; mem:LD4[%6](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
	  * FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
	  * %vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
	  * %vreg5<def> = LW %vreg4, 4; mem:LD4[%9] GR32Bit:%vreg5,%vreg4
	  * %vreg128<def> = LUI 1; GR32Bit:%vreg128
	  * WRITEPM %vreg128, %vreg5, 0; GR32Bit:%vreg128,%vreg5
	  * %vreg130<def> = LUI 2; GR32Bit:%vreg130
	  * WRITEPM %vreg130, %vreg5, 0; GR32Bit:%vreg130,%vreg5
	  * %vreg132<def> = LUI 3; GR32Bit:%vreg132
	  * WRITEPM %vreg132, %vreg5, 0; GR32Bit:%vreg132,%vreg5
	  * BEQ <BB#10>, %vreg5, %zero; GR32Bit:%vreg5
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg71<def> = ADD %t5, %zero; GR32Bit:%vreg71
	  * %vreg73<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg73
	  * %vreg74<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg74
	  * %vreg75<def> = SRLI %vreg74, 12; GR32Bit:%vreg75,%vreg74
	  * %vreg76<def> = ADD %vreg73, %vreg75; GR32Bit:%vreg76,%vreg73,%vreg75
	  * %vreg77<def> = ADDI %zero, 16; GR32Bit:%vreg77
	  * %vreg78<def> = SRLI %t5, 22; GR32Bit:%vreg78
	  * %vreg79<def> = SRLI %t5, 12; GR32Bit:%vreg79
	  * %vreg80<def> = ANDI %vreg79, 15; GR32Bit:%vreg80,%vreg79
	  * %vreg81<def> = SRLI %t5, 6; GR32Bit:%vreg81
	  * %vreg82<def> = ANDI %vreg81, 63; GR32Bit:%vreg82,%vreg81
	  * %vreg83<def> = ADDI %zero, 832; GR32Bit:%vreg83
	  * %vreg84<def> = MUL %vreg78, %vreg83; GR32Bit:%vreg84,%vreg78,%vreg83
	  * %vreg85<def> = ADDI %zero, 52; GR32Bit:%vreg85
	  * %vreg86<def> = MUL %vreg80, %vreg85; GR32Bit:%vreg86,%vreg80,%vreg85
	  * %vreg87<def> = ADD %vreg86, %vreg82; GR32Bit:%vreg87,%vreg86,%vreg82
	  * %vreg88<def> = ADD %vreg87, %vreg84; GR32Bit:%vreg88,%vreg87,%vreg84
	  * %vreg89<def> = MUL %vreg88, %vreg77; GR32Bit:%vreg89,%vreg88,%vreg77
	  * %vreg72<def> = ADD %vreg76, %vreg89; GR32Bit:%vreg72,%vreg76,%vreg89
	  * %vreg129<def> = LUI 1; GR32Bit:%vreg129
	  * %vreg134<def> = DREADPM %vreg129, 0; GR32Bit:%vreg134,%vreg129
	  * BEQ <BB#10>, %vreg134, %zero; GR32Bit:%vreg134
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg90<def> = ADD %t5, %zero; GR32Bit:%vreg90
	  * %vreg92<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg92
	  * %vreg93<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg93
	  * %vreg94<def> = SRLI %vreg93, 12; GR32Bit:%vreg94,%vreg93
	  * %vreg95<def> = ADD %vreg92, %vreg94; GR32Bit:%vreg95,%vreg92,%vreg94
	  * %vreg96<def> = ADDI %zero, 16; GR32Bit:%vreg96
	  * %vreg97<def> = SRLI %t5, 22; GR32Bit:%vreg97
	  * %vreg98<def> = SRLI %t5, 12; GR32Bit:%vreg98
	  * %vreg99<def> = ANDI %vreg98, 15; GR32Bit:%vreg99,%vreg98
	  * %vreg100<def> = SRLI %t5, 6; GR32Bit:%vreg100
	  * %vreg101<def> = ANDI %vreg100, 63; GR32Bit:%vreg101,%vreg100
	  * %vreg102<def> = ADDI %zero, 832; GR32Bit:%vreg102
	  * %vreg103<def> = MUL %vreg97, %vreg102; GR32Bit:%vreg103,%vreg97,%vreg102
	  * %vreg104<def> = ADDI %zero, 52; GR32Bit:%vreg104
	  * %vreg105<def> = MUL %vreg99, %vreg104; GR32Bit:%vreg105,%vreg99,%vreg104
	  * %vreg106<def> = ADD %vreg105, %vreg101; GR32Bit:%vreg106,%vreg105,%vreg101
	  * %vreg107<def> = ADD %vreg106, %vreg103; GR32Bit:%vreg107,%vreg106,%vreg103
	  * %vreg108<def> = MUL %vreg107, %vreg96; GR32Bit:%vreg108,%vreg107,%vreg96
	  * %vreg91<def> = ADD %vreg95, %vreg108; GR32Bit:%vreg91,%vreg95,%vreg108
	  * %vreg131<def> = LUI 2; GR32Bit:%vreg131
	  * %vreg135<def> = DREADPM %vreg131, 0; GR32Bit:%vreg135,%vreg131
	  * BEQ <BB#10>, %vreg135, %zero; GR32Bit:%vreg135
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg109<def> = ADD %t5, %zero; GR32Bit:%vreg109
	  * %vreg111<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg111
	  * %vreg112<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg112
	  * %vreg113<def> = SRLI %vreg112, 12; GR32Bit:%vreg113,%vreg112
	  * %vreg114<def> = ADD %vreg111, %vreg113; GR32Bit:%vreg114,%vreg111,%vreg113
	  * %vreg115<def> = ADDI %zero, 16; GR32Bit:%vreg115
	  * %vreg116<def> = SRLI %t5, 22; GR32Bit:%vreg116
	  * %vreg117<def> = SRLI %t5, 12; GR32Bit:%vreg117
	  * %vreg118<def> = ANDI %vreg117, 15; GR32Bit:%vreg118,%vreg117
	  * %vreg119<def> = SRLI %t5, 6; GR32Bit:%vreg119
	  * %vreg120<def> = ANDI %vreg119, 63; GR32Bit:%vreg120,%vreg119
	  * %vreg121<def> = ADDI %zero, 832; GR32Bit:%vreg121
	  * %vreg122<def> = MUL %vreg116, %vreg121; GR32Bit:%vreg122,%vreg116,%vreg121
	  * %vreg123<def> = ADDI %zero, 52; GR32Bit:%vreg123
	  * %vreg124<def> = MUL %vreg118, %vreg123; GR32Bit:%vreg124,%vreg118,%vreg123
	  * %vreg125<def> = ADD %vreg124, %vreg120; GR32Bit:%vreg125,%vreg124,%vreg120
	  * %vreg126<def> = ADD %vreg125, %vreg122; GR32Bit:%vreg126,%vreg125,%vreg122
	  * %vreg127<def> = MUL %vreg126, %vreg115; GR32Bit:%vreg127,%vreg126,%vreg115
	  * %vreg110<def> = ADD %vreg114, %vreg127; GR32Bit:%vreg110,%vreg114,%vreg127
	  * %vreg133<def> = LUI 3; GR32Bit:%vreg133
	  * %vreg136<def> = DREADPM %vreg133, 0; GR32Bit:%vreg136,%vreg133
	  * BEQ <BB#10>, %vreg136, %zero; GR32Bit:%vreg136
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#10(12) BB#1(20)

-------------
Starting new basic block BB#1
********** MI Scheduling **********
startup_fuel_valves3:BB#1 startup_fuel_valves3.if.else
  From: JAL <BB#2>
    To: JAL <BB#2>
 Remaining: 6
Max Pressure: Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 0
Excess PSets: 
0 subtrees:
*** Final schedule for BB#1 ***

Partitioning instructions of the region into multiple CEs

*** Renumbered SlotIndexes 1312-1912 ***

*** Renumbered SlotIndexes 1324-1924 ***

*** Renumbered SlotIndexes 1336-1936 ***

*** Renumbered SlotIndexes 1348-1948 ***

*** Renumbered SlotIndexes 1360-1960 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
********** MI Scheduling **********
startup_fuel_valves3:BB#1 startup_fuel_valves3.if.else
  From: %vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
    To: BNE <BB#7>, %vreg9, %zero; GR32Bit:%vreg9
 Remaining: 0
Max Pressure: FP32Bit=2
GR32Bit=1
Live In: 
Live Out: 
FP32BitLimit 32 Actual 2
GR32BitLimit 32 Actual 1
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 0
SU(0):   %vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 25
  Successors:
   val SU(1): Latency=5 Reg=%vreg6

SU(1):   %vreg7<def> = FLW %vreg6, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg6
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 20
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg6
  Successors:
   val SU(4): Latency=15 Reg=%vreg7

SU(2):   %vreg8<def> = ADDI %zero, 1165623296; GR32Bit:%vreg8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
   val SU(3): Latency=4 Reg=%vreg8

SU(3):   %vreg10<def> = COPY %vreg8; FP32Bit:%vreg10 GR32Bit:%vreg8
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 5
  Predecessors:
   val SU(2): Latency=4 Reg=%vreg8
  Successors:
   val SU(4): Latency=0 Reg=%vreg10

SU(4):   %vreg9<def> = FLT_S %vreg10, %vreg7; GR32Bit:%vreg9 FP32Bit:%vreg10,%vreg7
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 5
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg7
   val SU(3): Latency=0 Reg=%vreg10
  Successors:
   val SU(4294967295): Latency=5 Reg=%vreg9

SU(0):   %vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 25
  Successors:
   val SU(1): Latency=5 Reg=%vreg6

SU(1):   %vreg7<def> = FLW %vreg6, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg6
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 20
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg6
  Successors:
   val SU(4): Latency=15 Reg=%vreg7

SU(2):   %vreg8<def> = ADDI %zero, 1165623296; GR32Bit:%vreg8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
   val SU(3): Latency=4 Reg=%vreg8

SU(3):   %vreg10<def> = COPY %vreg8; FP32Bit:%vreg10 GR32Bit:%vreg8
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 5
  Predecessors:
   val SU(2): Latency=4 Reg=%vreg8
  Successors:
   val SU(4): Latency=0 Reg=%vreg10

SU(4):   %vreg9<def> = FLT_S %vreg10, %vreg7; GR32Bit:%vreg9 FP32Bit:%vreg10,%vreg7
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 5
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg7
   val SU(3): Latency=0 Reg=%vreg10
  Successors:
   val SU(4294967295): Latency=5 Reg=%vreg9

Pick node SU(2)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg8<def> = ADDI %zero, 1165623296; GR32Bit:%vreg8
handleMove 1276B -> 1256B: %vreg8<def> = ADDI %zero, 1165623296; GR32Bit:%vreg8
     %vreg8:	[1276r,1284r:0)  0@1276r
        -->	[1256r,1284r:0)  0@1256r
     zero:	[4r,4d:11)[308r,308d:10)[524r,524d:9)[740r,740d:8)[1332r,1332d:7)[1336r,1336d:6)[1344r,1344d:5)[1348r,1348d:4)[1356r,1356d:3)[1360r,1360d:2)[1368r,1368d:1)[1372r,1372d:0)  0@1372r 1@1368r 2@1360r 3@1356r 4@1348r 5@1344r 6@1336r 7@1332r 8@740r 9@524r 10@308r 11@4r
        -->	[4r,4d:11)[308r,308d:10)[524r,524d:9)[740r,740d:8)[1332r,1332d:7)[1336r,1336d:6)[1344r,1344d:5)[1348r,1348d:4)[1356r,1356d:3)[1360r,1360d:2)[1368r,1368d:1)[1372r,1372d:0)  0@1372r 1@1368r 2@1360r 3@1356r 4@1348r 5@1344r 6@1336r 7@1332r 8@740r 9@524r 10@308r 11@4r
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg7<def> = FLW %vreg6, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg6
Pick node SU(3)  ILP: 1 / 5 = 0.2 Tree: 0 @0
Scheduling %vreg10<def> = COPY %vreg8; FP32Bit:%vreg10 GR32Bit:%vreg8
Pick node SU(4)  ILP: 4 / 21 = 0.190476 Tree: 0 @0
Scheduling %vreg9<def> = FLT_S %vreg10, %vreg7; GR32Bit:%vreg9 FP32Bit:%vreg10,%vreg7
*** Final schedule for BB#1 ***
SU(2):   %vreg8<def> = ADDI %zero, 1165623296; GR32Bit:%vreg8
SU(0):   %vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
SU(1):   %vreg7<def> = FLW %vreg6, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg6
SU(3):   %vreg10<def> = COPY %vreg8; FP32Bit:%vreg10 GR32Bit:%vreg8
SU(4):   %vreg9<def> = FLT_S %vreg10, %vreg7; GR32Bit:%vreg9 FP32Bit:%vreg10,%vreg7

Partitioning instructions of the region into multiple CEs
instr:  %vreg8<def> = ADDI %zero, 1165623296; GR32Bit:%vreg8
instr:  %vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
instr:  %vreg7<def> = FLW %vreg6, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg6
instr:  %vreg10<def> = COPY %vreg8; FP32Bit:%vreg10 GR32Bit:%vreg8
instr:  %vreg9<def> = FLT_S %vreg10, %vreg7; GR32Bit:%vreg9 FP32Bit:%vreg10,%vreg7

*** Renumbered SlotIndexes 1296-2000 ***

*** Renumbered SlotIndexes 1308-2012 ***

*** Renumbered SlotIndexes 1320-2024 ***

*** Renumbered SlotIndexes 1332-2036 ***

*** Renumbered SlotIndexes 1344-2048 ***

*** Renumbered SlotIndexes 1356-2060 ***

*** Renumbered SlotIndexes 1376-2072 ***

*** Renumbered SlotIndexes 1388-2084 ***

*** Renumbered SlotIndexes 1400-2096 ***

*** Renumbered SlotIndexes 1412-2108 ***

*** Renumbered SlotIndexes 1424-2120 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs

renaming register of operand that belongs to ce 1 but was defined in0
%vreg9<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg9<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg9<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg9
renaming register of operand that belongs to ce 2 but was defined in0
%vreg9
renaming register of operand that belongs to ce 3 but was defined in0
%vreg9After Shuffling regions of basic block, state of BB#1:
BB#1: derived from LLVM BB %startup_fuel_valves3.if.else
    Predecessors according to CFG: BB#0
	%vreg8<def> = ADDI %zero, 1165623296; GR32Bit:%vreg8
	%vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
	%vreg7<def> = FLW %vreg6, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg6
	%vreg10<def> = COPY %vreg8; FP32Bit:%vreg10 GR32Bit:%vreg8
	%vreg9<def> = FLT_S %vreg10, %vreg7; GR32Bit:%vreg9 FP32Bit:%vreg10,%vreg7
	%vreg137<def> = LUI 1; GR32Bit:%vreg137
	WRITEPM %vreg137, %vreg9, 0; GR32Bit:%vreg137,%vreg9
	%vreg139<def> = LUI 2; GR32Bit:%vreg139
	WRITEPM %vreg139, %vreg9, 0; GR32Bit:%vreg139,%vreg9
	%vreg141<def> = LUI 3; GR32Bit:%vreg141
	WRITEPM %vreg141, %vreg9, 0; GR32Bit:%vreg141,%vreg9
	BNE <BB#7>, %vreg9, %zero; GR32Bit:%vreg9
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#2>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg138<def> = LUI 1; GR32Bit:%vreg138
	%vreg143<def> = DREADPM %vreg138, 0; GR32Bit:%vreg143,%vreg138
	BNE <BB#7>, %vreg143, %zero; GR32Bit:%vreg143
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#2>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg140<def> = LUI 2; GR32Bit:%vreg140
	%vreg144<def> = DREADPM %vreg140, 0; GR32Bit:%vreg144,%vreg140
	BNE <BB#7>, %vreg144, %zero; GR32Bit:%vreg144
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#2>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg142<def> = LUI 3; GR32Bit:%vreg142
	%vreg145<def> = DREADPM %vreg142, 0; GR32Bit:%vreg145,%vreg142
	BNE <BB#7>, %vreg145, %zero; GR32Bit:%vreg145
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#2>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#7(16) BB#2(16)

*** Renumbered SlotIndexes 1340-2164 ***

*** Renumbered SlotIndexes 1340-2180 ***

*** Renumbered SlotIndexes 1340-2196 ***

*** Renumbered SlotIndexes 1316-2220 ***

*** Renumbered SlotIndexes 1316-2236 ***

*** Renumbered SlotIndexes 1316-2252 ***

*** Renumbered SlotIndexes 1296-2280 ***

*** Renumbered SlotIndexes 1296-2296 ***

*** Renumbered SlotIndexes 1296-2312 ***

*** Renumbered SlotIndexes 1296-2328 ***

*** Renumbered SlotIndexes 1296-2344 ***
Creating pHyperOp bundles for CEs for bb1
  %vreg138<def> = LUI 1; GR32Bit:%vreg138
starting at   %vreg8<def> = ADDI %zero, 1165623296; GR32Bit:%vreg8
  %vreg140<def> = LUI 2; GR32Bit:%vreg140
starting at   %vreg138<def> = LUI 1; GR32Bit:%vreg138
  %vreg142<def> = LUI 3; GR32Bit:%vreg142
starting at   %vreg140<def> = LUI 2; GR32Bit:%vreg140
starting at   %vreg142<def> = LUI 3; GR32Bit:%vreg142
After bundling, state of BB1:BB#1: derived from LLVM BB %startup_fuel_valves3.if.else
    Predecessors according to CFG: BB#0
	%vreg8<def> = ADDI %zero, 1165623296; GR32Bit:%vreg8
	  * %vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
	  * %vreg7<def> = FLW %vreg6, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg6
	  * %vreg10<def> = COPY %vreg8; FP32Bit:%vreg10 GR32Bit:%vreg8
	  * %vreg9<def> = FLT_S %vreg10, %vreg7; GR32Bit:%vreg9 FP32Bit:%vreg10,%vreg7
	  * %vreg137<def> = LUI 1; GR32Bit:%vreg137
	  * WRITEPM %vreg137, %vreg9, 0; GR32Bit:%vreg137,%vreg9
	  * %vreg139<def> = LUI 2; GR32Bit:%vreg139
	  * WRITEPM %vreg139, %vreg9, 0; GR32Bit:%vreg139,%vreg9
	  * %vreg141<def> = LUI 3; GR32Bit:%vreg141
	  * WRITEPM %vreg141, %vreg9, 0; GR32Bit:%vreg141,%vreg9
	  * BNE <BB#7>, %vreg9, %zero; GR32Bit:%vreg9
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg138<def> = LUI 1; GR32Bit:%vreg138
	  * %vreg143<def> = DREADPM %vreg138, 0; GR32Bit:%vreg143,%vreg138
	  * BNE <BB#7>, %vreg143, %zero; GR32Bit:%vreg143
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg140<def> = LUI 2; GR32Bit:%vreg140
	  * %vreg144<def> = DREADPM %vreg140, 0; GR32Bit:%vreg144,%vreg140
	  * BNE <BB#7>, %vreg144, %zero; GR32Bit:%vreg144
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg142<def> = LUI 3; GR32Bit:%vreg142
	  * %vreg145<def> = DREADPM %vreg142, 0; GR32Bit:%vreg145,%vreg142
	  * BNE <BB#7>, %vreg145, %zero; GR32Bit:%vreg145
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#7(16) BB#2(16)

-------------
Starting new basic block BB#2
********** MI Scheduling **********
startup_fuel_valves3:BB#2 startup_fuel_valves3.if.else7
  From: JAL <BB#3>
    To: JAL <BB#3>
 Remaining: 6
Max Pressure: Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 0
Excess PSets: 
0 subtrees:
*** Final schedule for BB#2 ***

Partitioning instructions of the region into multiple CEs

*** Renumbered SlotIndexes 1820-2356 ***

*** Renumbered SlotIndexes 1832-2368 ***

*** Renumbered SlotIndexes 1844-2380 ***

*** Renumbered SlotIndexes 1856-2392 ***

*** Renumbered SlotIndexes 1868-2404 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
********** MI Scheduling **********
startup_fuel_valves3:BB#2 startup_fuel_valves3.if.else7
  From: %vreg11<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg11
    To: BNE <BB#6>, %vreg14, %zero; GR32Bit:%vreg14
 Remaining: 0
Max Pressure: FP32Bit=2
GR32Bit=1
Live In: 
Live Out: 
FP32BitLimit 32 Actual 2
GR32BitLimit 32 Actual 1
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 0
SU(0):   %vreg11<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg11
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 25
  Successors:
   val SU(1): Latency=5 Reg=%vreg11

SU(1):   %vreg12<def> = FLW %vreg11, 0; mem:LD4[%3] FP32Bit:%vreg12 GR32Bit:%vreg11
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 20
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg11
  Successors:
   val SU(4): Latency=15 Reg=%vreg12

SU(2):   %vreg13<def> = ADDI %zero, 1178816511; GR32Bit:%vreg13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
   val SU(3): Latency=4 Reg=%vreg13

SU(3):   %vreg15<def> = COPY %vreg13; FP32Bit:%vreg15 GR32Bit:%vreg13
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 5
  Predecessors:
   val SU(2): Latency=4 Reg=%vreg13
  Successors:
   val SU(4): Latency=0 Reg=%vreg15

SU(4):   %vreg14<def> = FULT_S %vreg12, %vreg15; GR32Bit:%vreg14 FP32Bit:%vreg12,%vreg15
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 5
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg12
   val SU(3): Latency=0 Reg=%vreg15
  Successors:
   val SU(4294967295): Latency=5 Reg=%vreg14

SU(0):   %vreg11<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg11
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 25
  Successors:
   val SU(1): Latency=5 Reg=%vreg11

SU(1):   %vreg12<def> = FLW %vreg11, 0; mem:LD4[%3] FP32Bit:%vreg12 GR32Bit:%vreg11
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 20
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg11
  Successors:
   val SU(4): Latency=15 Reg=%vreg12

SU(2):   %vreg13<def> = ADDI %zero, 1178816511; GR32Bit:%vreg13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
   val SU(3): Latency=4 Reg=%vreg13

SU(3):   %vreg15<def> = COPY %vreg13; FP32Bit:%vreg15 GR32Bit:%vreg13
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 5
  Predecessors:
   val SU(2): Latency=4 Reg=%vreg13
  Successors:
   val SU(4): Latency=0 Reg=%vreg15

SU(4):   %vreg14<def> = FULT_S %vreg12, %vreg15; GR32Bit:%vreg14 FP32Bit:%vreg12,%vreg15
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 5
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg12
   val SU(3): Latency=0 Reg=%vreg15
  Successors:
   val SU(4294967295): Latency=5 Reg=%vreg14

Pick node SU(2)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg13<def> = ADDI %zero, 1178816511; GR32Bit:%vreg13
handleMove 1784B -> 1764B: %vreg13<def> = ADDI %zero, 1178816511; GR32Bit:%vreg13
     %vreg13:	[1784r,1792r:0)  0@1784r
        -->	[1764r,1792r:0)  0@1764r
     zero:	[4r,4d:11)[308r,308d:10)[524r,524d:9)[740r,740d:8)[1696r,1696d:7)[1704r,1704d:6)[1712r,1712d:5)[1720r,1720d:4)[1728r,1728d:3)[1736r,1736d:2)[1744r,1744d:1)[1752r,1752d:0)  0@1752r 1@1744r 2@1736r 3@1728r 4@1720r 5@1712r 6@1704r 7@1696r 8@740r 9@524r 10@308r 11@4r
        -->	[4r,4d:11)[308r,308d:10)[524r,524d:9)[740r,740d:8)[1696r,1696d:7)[1704r,1704d:6)[1712r,1712d:5)[1720r,1720d:4)[1728r,1728d:3)[1736r,1736d:2)[1744r,1744d:1)[1752r,1752d:0)  0@1752r 1@1744r 2@1736r 3@1728r 4@1720r 5@1712r 6@1704r 7@1696r 8@740r 9@524r 10@308r 11@4r
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg11<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg11
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg12<def> = FLW %vreg11, 0; mem:LD4[%3] FP32Bit:%vreg12 GR32Bit:%vreg11
Pick node SU(3)  ILP: 1 / 5 = 0.2 Tree: 0 @0
Scheduling %vreg15<def> = COPY %vreg13; FP32Bit:%vreg15 GR32Bit:%vreg13
Pick node SU(4)  ILP: 4 / 21 = 0.190476 Tree: 0 @0
Scheduling %vreg14<def> = FULT_S %vreg12, %vreg15; GR32Bit:%vreg14 FP32Bit:%vreg12,%vreg15
*** Final schedule for BB#2 ***
SU(2):   %vreg13<def> = ADDI %zero, 1178816511; GR32Bit:%vreg13
SU(0):   %vreg11<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg11
SU(1):   %vreg12<def> = FLW %vreg11, 0; mem:LD4[%3] FP32Bit:%vreg12 GR32Bit:%vreg11
SU(3):   %vreg15<def> = COPY %vreg13; FP32Bit:%vreg15 GR32Bit:%vreg13
SU(4):   %vreg14<def> = FULT_S %vreg12, %vreg15; GR32Bit:%vreg14 FP32Bit:%vreg12,%vreg15

Partitioning instructions of the region into multiple CEs
instr:  %vreg13<def> = ADDI %zero, 1178816511; GR32Bit:%vreg13
instr:  %vreg11<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg11
instr:  %vreg12<def> = FLW %vreg11, 0; mem:LD4[%3] FP32Bit:%vreg12 GR32Bit:%vreg11
instr:  %vreg15<def> = COPY %vreg13; FP32Bit:%vreg15 GR32Bit:%vreg13
instr:  %vreg14<def> = FULT_S %vreg12, %vreg15; GR32Bit:%vreg14 FP32Bit:%vreg12,%vreg15

*** Renumbered SlotIndexes 1804-2444 ***

*** Renumbered SlotIndexes 1816-2456 ***

*** Renumbered SlotIndexes 1828-2468 ***

*** Renumbered SlotIndexes 1840-2480 ***

*** Renumbered SlotIndexes 1852-2492 ***

*** Renumbered SlotIndexes 1864-2504 ***

*** Renumbered SlotIndexes 1884-2516 ***

*** Renumbered SlotIndexes 1896-2528 ***

*** Renumbered SlotIndexes 1908-2540 ***

*** Renumbered SlotIndexes 1920-2552 ***

*** Renumbered SlotIndexes 1932-2564 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs

renaming register of operand that belongs to ce 1 but was defined in0
%vreg14<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg14<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg14<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg14
renaming register of operand that belongs to ce 2 but was defined in0
%vreg14
renaming register of operand that belongs to ce 3 but was defined in0
%vreg14After Shuffling regions of basic block, state of BB#2:
BB#2: derived from LLVM BB %startup_fuel_valves3.if.else7
    Predecessors according to CFG: BB#1
	%vreg13<def> = ADDI %zero, 1178816511; GR32Bit:%vreg13
	%vreg11<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg11
	%vreg12<def> = FLW %vreg11, 0; mem:LD4[%3] FP32Bit:%vreg12 GR32Bit:%vreg11
	%vreg15<def> = COPY %vreg13; FP32Bit:%vreg15 GR32Bit:%vreg13
	%vreg14<def> = FULT_S %vreg12, %vreg15; GR32Bit:%vreg14 FP32Bit:%vreg12,%vreg15
	%vreg146<def> = LUI 1; GR32Bit:%vreg146
	WRITEPM %vreg146, %vreg14, 0; GR32Bit:%vreg146,%vreg14
	%vreg148<def> = LUI 2; GR32Bit:%vreg148
	WRITEPM %vreg148, %vreg14, 0; GR32Bit:%vreg148,%vreg14
	%vreg150<def> = LUI 3; GR32Bit:%vreg150
	WRITEPM %vreg150, %vreg14, 0; GR32Bit:%vreg150,%vreg14
	BNE <BB#6>, %vreg14, %zero; GR32Bit:%vreg14
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#3>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg147<def> = LUI 1; GR32Bit:%vreg147
	%vreg152<def> = DREADPM %vreg147, 0; GR32Bit:%vreg152,%vreg147
	BNE <BB#6>, %vreg152, %zero; GR32Bit:%vreg152
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#3>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg149<def> = LUI 2; GR32Bit:%vreg149
	%vreg153<def> = DREADPM %vreg149, 0; GR32Bit:%vreg153,%vreg149
	BNE <BB#6>, %vreg153, %zero; GR32Bit:%vreg153
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#3>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg151<def> = LUI 3; GR32Bit:%vreg151
	%vreg154<def> = DREADPM %vreg151, 0; GR32Bit:%vreg154,%vreg151
	BNE <BB#6>, %vreg154, %zero; GR32Bit:%vreg154
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#3>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#3(16) BB#6(16)

*** Renumbered SlotIndexes 1848-2608 ***

*** Renumbered SlotIndexes 1848-2624 ***

*** Renumbered SlotIndexes 1848-2640 ***

*** Renumbered SlotIndexes 1824-2664 ***

*** Renumbered SlotIndexes 1824-2680 ***

*** Renumbered SlotIndexes 1824-2696 ***

*** Renumbered SlotIndexes 1804-2724 ***

*** Renumbered SlotIndexes 1804-2740 ***

*** Renumbered SlotIndexes 1804-2756 ***

*** Renumbered SlotIndexes 1804-2772 ***

*** Renumbered SlotIndexes 1804-2788 ***
Creating pHyperOp bundles for CEs for bb2
  %vreg147<def> = LUI 1; GR32Bit:%vreg147
starting at   %vreg13<def> = ADDI %zero, 1178816511; GR32Bit:%vreg13
  %vreg149<def> = LUI 2; GR32Bit:%vreg149
starting at   %vreg147<def> = LUI 1; GR32Bit:%vreg147
  %vreg151<def> = LUI 3; GR32Bit:%vreg151
starting at   %vreg149<def> = LUI 2; GR32Bit:%vreg149
starting at   %vreg151<def> = LUI 3; GR32Bit:%vreg151
After bundling, state of BB2:BB#2: derived from LLVM BB %startup_fuel_valves3.if.else7
    Predecessors according to CFG: BB#1
	%vreg13<def> = ADDI %zero, 1178816511; GR32Bit:%vreg13
	  * %vreg11<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg11
	  * %vreg12<def> = FLW %vreg11, 0; mem:LD4[%3] FP32Bit:%vreg12 GR32Bit:%vreg11
	  * %vreg15<def> = COPY %vreg13; FP32Bit:%vreg15 GR32Bit:%vreg13
	  * %vreg14<def> = FULT_S %vreg12, %vreg15; GR32Bit:%vreg14 FP32Bit:%vreg12,%vreg15
	  * %vreg146<def> = LUI 1; GR32Bit:%vreg146
	  * WRITEPM %vreg146, %vreg14, 0; GR32Bit:%vreg146,%vreg14
	  * %vreg148<def> = LUI 2; GR32Bit:%vreg148
	  * WRITEPM %vreg148, %vreg14, 0; GR32Bit:%vreg148,%vreg14
	  * %vreg150<def> = LUI 3; GR32Bit:%vreg150
	  * WRITEPM %vreg150, %vreg14, 0; GR32Bit:%vreg150,%vreg14
	  * BNE <BB#6>, %vreg14, %zero; GR32Bit:%vreg14
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#3>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg147<def> = LUI 1; GR32Bit:%vreg147
	  * %vreg152<def> = DREADPM %vreg147, 0; GR32Bit:%vreg152,%vreg147
	  * BNE <BB#6>, %vreg152, %zero; GR32Bit:%vreg152
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#3>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg149<def> = LUI 2; GR32Bit:%vreg149
	  * %vreg153<def> = DREADPM %vreg149, 0; GR32Bit:%vreg153,%vreg149
	  * BNE <BB#6>, %vreg153, %zero; GR32Bit:%vreg153
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#3>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg151<def> = LUI 3; GR32Bit:%vreg151
	  * %vreg154<def> = DREADPM %vreg151, 0; GR32Bit:%vreg154,%vreg151
	  * BNE <BB#6>, %vreg154, %zero; GR32Bit:%vreg154
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#3>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#3(16) BB#6(16)

-------------
Starting new basic block BB#3
********** MI Scheduling **********
startup_fuel_valves3:BB#3 startup_fuel_valves3.if.then9
  From: JAL <BB#4>
    To: JAL <BB#4>
 Remaining: 4
Max Pressure: Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 0
Excess PSets: 
0 subtrees:
*** Final schedule for BB#3 ***

Partitioning instructions of the region into multiple CEs

*** Renumbered SlotIndexes 2312-2800 ***

*** Renumbered SlotIndexes 2324-2812 ***

*** Renumbered SlotIndexes 2336-2824 ***

*** Renumbered SlotIndexes 2348-2836 ***

*** Renumbered SlotIndexes 2360-2848 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
********** MI Scheduling **********
startup_fuel_valves3:BB#3 startup_fuel_valves3.if.then9
  From: %vreg20<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg20
    To: BNE <BB#7>, %vreg22, %zero; GR32Bit:%vreg22
 Remaining: 0
Max Pressure: GR32Bit=1
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 1
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
SU(0):   %vreg20<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
   val SU(1): Latency=5 Reg=%vreg20

SU(1):   %vreg21<def> = LW %vreg20, 0; mem:LD4[%2] GR32Bit:%vreg21,%vreg20
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 30
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg20
  Successors:
   val SU(2): Latency=15 Reg=%vreg21

SU(2):   %vreg22<def> = LW %vreg21, 16; mem:LD4[%17] GR32Bit:%vreg22,%vreg21
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 20
  Height             : 15
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg21
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg22

SU(0):   %vreg20<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
   val SU(1): Latency=5 Reg=%vreg20

SU(1):   %vreg21<def> = LW %vreg20, 0; mem:LD4[%2] GR32Bit:%vreg21,%vreg20
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 30
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg20
  Successors:
   val SU(2): Latency=15 Reg=%vreg21

SU(2):   %vreg22<def> = LW %vreg21, 16; mem:LD4[%17] GR32Bit:%vreg22,%vreg21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 14
  Depth              : 20
  Height             : 15
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg21
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg22

Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg20<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg20
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg21<def> = LW %vreg20, 0; mem:LD4[%2] GR32Bit:%vreg21,%vreg20
Pick node SU(2)  ILP: 3 / 21 = 0.142857 Tree: 0 @0
Scheduling %vreg22<def> = LW %vreg21, 16; mem:LD4[%17] GR32Bit:%vreg22,%vreg21
*** Final schedule for BB#3 ***
SU(0):   %vreg20<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg20
SU(1):   %vreg21<def> = LW %vreg20, 0; mem:LD4[%2] GR32Bit:%vreg21,%vreg20
SU(2):   %vreg22<def> = LW %vreg21, 16; mem:LD4[%17] GR32Bit:%vreg22,%vreg21

Partitioning instructions of the region into multiple CEs
instr:  %vreg20<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg20
instr:  %vreg21<def> = LW %vreg20, 0; mem:LD4[%2] GR32Bit:%vreg21,%vreg20
instr:  %vreg22<def> = LW %vreg21, 16; mem:LD4[%17] GR32Bit:%vreg22,%vreg21

*** Renumbered SlotIndexes 2296-2888 ***

*** Renumbered SlotIndexes 2308-2900 ***

*** Renumbered SlotIndexes 2320-2912 ***

*** Renumbered SlotIndexes 2332-2924 ***

*** Renumbered SlotIndexes 2344-2936 ***

*** Renumbered SlotIndexes 2356-2948 ***

*** Renumbered SlotIndexes 2376-2960 ***

*** Renumbered SlotIndexes 2388-2972 ***

*** Renumbered SlotIndexes 2400-2984 ***

*** Renumbered SlotIndexes 2412-2996 ***

*** Renumbered SlotIndexes 2424-3008 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs

renaming register of operand that belongs to ce 1 but was defined in0
%vreg22<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg22<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg22<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg22
renaming register of operand that belongs to ce 2 but was defined in0
%vreg22
renaming register of operand that belongs to ce 3 but was defined in0
%vreg22After Shuffling regions of basic block, state of BB#3:
BB#3: derived from LLVM BB %startup_fuel_valves3.if.then9
    Predecessors according to CFG: BB#2
	%vreg20<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg20
	%vreg21<def> = LW %vreg20, 0; mem:LD4[%2] GR32Bit:%vreg21,%vreg20
	%vreg22<def> = LW %vreg21, 16; mem:LD4[%17] GR32Bit:%vreg22,%vreg21
	%vreg155<def> = LUI 1; GR32Bit:%vreg155
	WRITEPM %vreg155, %vreg22, 0; GR32Bit:%vreg155,%vreg22
	%vreg157<def> = LUI 2; GR32Bit:%vreg157
	WRITEPM %vreg157, %vreg22, 0; GR32Bit:%vreg157,%vreg22
	%vreg159<def> = LUI 3; GR32Bit:%vreg159
	WRITEPM %vreg159, %vreg22, 0; GR32Bit:%vreg159,%vreg22
	BNE <BB#7>, %vreg22, %zero; GR32Bit:%vreg22
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#4>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg156<def> = LUI 1; GR32Bit:%vreg156
	%vreg161<def> = DREADPM %vreg156, 0; GR32Bit:%vreg161,%vreg156
	BNE <BB#7>, %vreg161, %zero; GR32Bit:%vreg161
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#4>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg158<def> = LUI 2; GR32Bit:%vreg158
	%vreg162<def> = DREADPM %vreg158, 0; GR32Bit:%vreg162,%vreg158
	BNE <BB#7>, %vreg162, %zero; GR32Bit:%vreg162
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#4>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg160<def> = LUI 3; GR32Bit:%vreg160
	%vreg163<def> = DREADPM %vreg160, 0; GR32Bit:%vreg163,%vreg160
	BNE <BB#7>, %vreg163, %zero; GR32Bit:%vreg163
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#4>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#4(12) BB#7(20)

*** Renumbered SlotIndexes 2340-3052 ***

*** Renumbered SlotIndexes 2340-3068 ***

*** Renumbered SlotIndexes 2340-3084 ***

*** Renumbered SlotIndexes 2316-3108 ***

*** Renumbered SlotIndexes 2316-3124 ***

*** Renumbered SlotIndexes 2316-3140 ***

*** Renumbered SlotIndexes 2296-3168 ***

*** Renumbered SlotIndexes 2296-3184 ***

*** Renumbered SlotIndexes 2296-3200 ***

*** Renumbered SlotIndexes 2296-3216 ***

*** Renumbered SlotIndexes 2296-3232 ***
Creating pHyperOp bundles for CEs for bb3
  %vreg156<def> = LUI 1; GR32Bit:%vreg156
starting at   %vreg20<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg20
  %vreg158<def> = LUI 2; GR32Bit:%vreg158
starting at   %vreg156<def> = LUI 1; GR32Bit:%vreg156
  %vreg160<def> = LUI 3; GR32Bit:%vreg160
starting at   %vreg158<def> = LUI 2; GR32Bit:%vreg158
starting at   %vreg160<def> = LUI 3; GR32Bit:%vreg160
After bundling, state of BB3:BB#3: derived from LLVM BB %startup_fuel_valves3.if.then9
    Predecessors according to CFG: BB#2
	%vreg20<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg20
	  * %vreg21<def> = LW %vreg20, 0; mem:LD4[%2] GR32Bit:%vreg21,%vreg20
	  * %vreg22<def> = LW %vreg21, 16; mem:LD4[%17] GR32Bit:%vreg22,%vreg21
	  * %vreg155<def> = LUI 1; GR32Bit:%vreg155
	  * WRITEPM %vreg155, %vreg22, 0; GR32Bit:%vreg155,%vreg22
	  * %vreg157<def> = LUI 2; GR32Bit:%vreg157
	  * WRITEPM %vreg157, %vreg22, 0; GR32Bit:%vreg157,%vreg22
	  * %vreg159<def> = LUI 3; GR32Bit:%vreg159
	  * WRITEPM %vreg159, %vreg22, 0; GR32Bit:%vreg159,%vreg22
	  * BNE <BB#7>, %vreg22, %zero; GR32Bit:%vreg22
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#4>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg156<def> = LUI 1; GR32Bit:%vreg156
	  * %vreg161<def> = DREADPM %vreg156, 0; GR32Bit:%vreg161,%vreg156
	  * BNE <BB#7>, %vreg161, %zero; GR32Bit:%vreg161
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#4>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg158<def> = LUI 2; GR32Bit:%vreg158
	  * %vreg162<def> = DREADPM %vreg158, 0; GR32Bit:%vreg162,%vreg158
	  * BNE <BB#7>, %vreg162, %zero; GR32Bit:%vreg162
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#4>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg160<def> = LUI 3; GR32Bit:%vreg160
	  * %vreg163<def> = DREADPM %vreg160, 0; GR32Bit:%vreg163,%vreg160
	  * BNE <BB#7>, %vreg163, %zero; GR32Bit:%vreg163
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#4>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#4(12) BB#7(20)

-------------
Starting new basic block BB#4
********** MI Scheduling **********
startup_fuel_valves3:BB#4 startup_fuel_valves3.if.then12
  From: JAL <BB#5>
    To: JAL <BB#5>
 Remaining: 7
Max Pressure: Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 0
Excess PSets: 
0 subtrees:
*** Final schedule for BB#4 ***

Partitioning instructions of the region into multiple CEs

*** Renumbered SlotIndexes 2828-3244 ***

*** Renumbered SlotIndexes 2840-3256 ***

*** Renumbered SlotIndexes 2852-3268 ***

*** Renumbered SlotIndexes 2864-3280 ***

*** Renumbered SlotIndexes 2876-3292 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
********** MI Scheduling **********
startup_fuel_valves3:BB#4 startup_fuel_valves3.if.then12
  From: %vreg23<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg23
    To: BNE <BB#7>, %vreg26, %vreg27; GR32Bit:%vreg26,%vreg27
 Remaining: 0
Max Pressure: GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 2
Excess PSets: 
3 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 1
  SU(4) in tree 1
  SU(5) in tree 2
SU(0):   %vreg23<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg23
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 51
  Successors:
   val SU(3): Latency=5 Reg=%vreg23
   val SU(1): Latency=5 Reg=%vreg23

SU(1):   %vreg24<def> = LW %vreg23, 0; mem:LD4[%2] GR32Bit:%vreg24,%vreg23
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 46
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg23
  Successors:
   val SU(2): Latency=15 Reg=%vreg24
   ch  SU(2): Latency=0

SU(2):   SW %zero, %vreg24, 12; mem:ST4[%21] GR32Bit:%vreg24
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 20
  Height             : 31
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg24
   ch  SU(1): Latency=0
  Successors:
   ch  SU(4): Latency=1
   ch  SU(3): Latency=1

SU(3):   %vreg25<def> = LW %vreg23, 0; mem:LD4[%2] GR32Bit:%vreg25,%vreg23
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 21
  Height             : 30
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg23
   ch  SU(2): Latency=1
  Successors:
   val SU(4): Latency=15 Reg=%vreg25

SU(4):   %vreg26<def> = LW %vreg25, 20; mem:LD4[%23] GR32Bit:%vreg26,%vreg25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 36
  Height             : 15
  Predecessors:
   val SU(3): Latency=15 Reg=%vreg25
   ch  SU(2): Latency=1
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg26

SU(5):   %vreg27<def> = ADDI %zero, -1; GR32Bit:%vreg27
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(4294967295): Latency=5 Reg=%vreg27

SU(0):   %vreg23<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg23
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 51
  Successors:
   val SU(3): Latency=5 Reg=%vreg23
   val SU(1): Latency=5 Reg=%vreg23

SU(1):   %vreg24<def> = LW %vreg23, 0; mem:LD4[%2] GR32Bit:%vreg24,%vreg23
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 46
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg23
  Successors:
   val SU(2): Latency=15 Reg=%vreg24
   ch  SU(2): Latency=0

SU(2):   SW %zero, %vreg24, 12; mem:ST4[%21] GR32Bit:%vreg24
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 20
  Height             : 31
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg24
   ch  SU(1): Latency=0
  Successors:
   ch  SU(4): Latency=1
   ch  SU(3): Latency=1

SU(3):   %vreg25<def> = LW %vreg23, 0; mem:LD4[%2] GR32Bit:%vreg25,%vreg23
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 21
  Height             : 30
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg23
   ch  SU(2): Latency=1
  Successors:
   val SU(4): Latency=15 Reg=%vreg25

SU(4):   %vreg26<def> = LW %vreg25, 20; mem:LD4[%23] GR32Bit:%vreg26,%vreg25
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 14
  Depth              : 36
  Height             : 15
  Predecessors:
   val SU(3): Latency=15 Reg=%vreg25
   ch  SU(2): Latency=1
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg26

SU(5):   %vreg27<def> = ADDI %zero, -1; GR32Bit:%vreg27
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(4294967295): Latency=5 Reg=%vreg27

Pick node SU(5)  ILP: 1 / 1 = 1 Tree: 2 @0
Scheduling %vreg27<def> = ADDI %zero, -1; GR32Bit:%vreg27
handleMove 2808B -> 2764B: %vreg27<def> = ADDI %zero, -1; GR32Bit:%vreg27
     %vreg27:	[2808r,2816r:0)  0@2808r
        -->	[2764r,2816r:0)  0@2764r
     zero:	[4r,4d:11)[308r,308d:10)[524r,524d:9)[740r,740d:8)[1696r,1696d:7)[1704r,1704d:6)[1712r,1712d:5)[1720r,1720d:4)[1728r,1728d:3)[1736r,1736d:2)[1744r,1744d:1)[1752r,1752d:0)  0@1752r 1@1744r 2@1736r 3@1728r 4@1720r 5@1712r 6@1704r 7@1696r 8@740r 9@524r 10@308r 11@4r
        -->	[4r,4d:11)[308r,308d:10)[524r,524d:9)[740r,740d:8)[1696r,1696d:7)[1704r,1704d:6)[1712r,1712d:5)[1720r,1720d:4)[1728r,1728d:3)[1736r,1736d:2)[1744r,1744d:1)[1752r,1752d:0)  0@1752r 1@1744r 2@1736r 3@1728r 4@1720r 5@1712r 6@1704r 7@1696r 8@740r 9@524r 10@308r 11@4r
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg23<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg23
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg24<def> = LW %vreg23, 0; mem:LD4[%2] GR32Bit:%vreg24,%vreg23
Pick node SU(2)  ILP: 3 / 21 = 0.142857 Tree: 0 @0
Scheduling SW %zero, %vreg24, 12; mem:ST4[%21] GR32Bit:%vreg24
Pick node SU(3)  ILP: 1 / 22 = 0.0454545 Tree: 1 @0
Scheduling %vreg25<def> = LW %vreg23, 0; mem:LD4[%2] GR32Bit:%vreg25,%vreg23
Pick node SU(4)  ILP: 2 / 37 = 0.0540541 Tree: 1 @0
Scheduling %vreg26<def> = LW %vreg25, 20; mem:LD4[%23] GR32Bit:%vreg26,%vreg25
*** Final schedule for BB#4 ***
SU(5):   %vreg27<def> = ADDI %zero, -1; GR32Bit:%vreg27
SU(0):   %vreg23<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg23
SU(1):   %vreg24<def> = LW %vreg23, 0; mem:LD4[%2] GR32Bit:%vreg24,%vreg23
SU(2):   SW %zero, %vreg24, 12; mem:ST4[%21] GR32Bit:%vreg24
SU(3):   %vreg25<def> = LW %vreg23, 0; mem:LD4[%2] GR32Bit:%vreg25,%vreg23
SU(4):   %vreg26<def> = LW %vreg25, 20; mem:LD4[%23] GR32Bit:%vreg26,%vreg25

Partitioning instructions of the region into multiple CEs
instr:  %vreg27<def> = ADDI %zero, -1; GR32Bit:%vreg27
instr:  %vreg23<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg23
instr:  %vreg24<def> = LW %vreg23, 0; mem:LD4[%2] GR32Bit:%vreg24,%vreg23
instr:  SW %zero, %vreg24, 12; mem:ST4[%21] GR32Bit:%vreg24
instr:  %vreg25<def> = LW %vreg23, 0; mem:LD4[%2] GR32Bit:%vreg25,%vreg23
instr:  %vreg26<def> = LW %vreg25, 20; mem:LD4[%23] GR32Bit:%vreg26,%vreg25

*** Renumbered SlotIndexes 2804-3332 ***

*** Renumbered SlotIndexes 2816-3344 ***

*** Renumbered SlotIndexes 2828-3356 ***

*** Renumbered SlotIndexes 2840-3368 ***

*** Renumbered SlotIndexes 2852-3380 ***

*** Renumbered SlotIndexes 2864-3392 ***

*** Renumbered SlotIndexes 2876-3404 ***

*** Renumbered SlotIndexes 2888-3416 ***

*** Renumbered SlotIndexes 2900-3428 ***

*** Renumbered SlotIndexes 2928-3440 ***

*** Renumbered SlotIndexes 2940-3452 ***

*** Renumbered SlotIndexes 2952-3464 ***

*** Renumbered SlotIndexes 2964-3476 ***

*** Renumbered SlotIndexes 2976-3488 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs

renaming register of operand that belongs to ce 1 but was defined in0
%vreg26<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg26<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg26<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg27<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg27<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg27<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg26
renaming register of operand that belongs to ce 1 but was defined in0
%vreg27
renaming register of operand that belongs to ce 2 but was defined in0
%vreg26
renaming register of operand that belongs to ce 2 but was defined in0
%vreg27
renaming register of operand that belongs to ce 3 but was defined in0
%vreg26
renaming register of operand that belongs to ce 3 but was defined in0
%vreg27After Shuffling regions of basic block, state of BB#4:
BB#4: derived from LLVM BB %startup_fuel_valves3.if.then12
    Predecessors according to CFG: BB#3
	%vreg27<def> = ADDI %zero, -1; GR32Bit:%vreg27
	%vreg23<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg23
	%vreg24<def> = LW %vreg23, 0; mem:LD4[%2] GR32Bit:%vreg24,%vreg23
	SW %zero, %vreg24, 12; mem:ST4[%21] GR32Bit:%vreg24
	%vreg25<def> = LW %vreg23, 0; mem:LD4[%2] GR32Bit:%vreg25,%vreg23
	%vreg26<def> = LW %vreg25, 20; mem:LD4[%23] GR32Bit:%vreg26,%vreg25
	%vreg164<def> = LUI 1; GR32Bit:%vreg164
	WRITEPM %vreg164, %vreg26, 0; GR32Bit:%vreg164,%vreg26
	%vreg166<def> = LUI 2; GR32Bit:%vreg166
	WRITEPM %vreg166, %vreg26, 0; GR32Bit:%vreg166,%vreg26
	%vreg168<def> = LUI 3; GR32Bit:%vreg168
	WRITEPM %vreg168, %vreg26, 0; GR32Bit:%vreg168,%vreg26
	WRITEPM %vreg164, %vreg27, 4; GR32Bit:%vreg164,%vreg27
	WRITEPM %vreg166, %vreg27, 4; GR32Bit:%vreg166,%vreg27
	WRITEPM %vreg168, %vreg27, 4; GR32Bit:%vreg168,%vreg27
	BNE <BB#7>, %vreg26, %vreg27; GR32Bit:%vreg26,%vreg27
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#5>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg165<def> = LUI 1; GR32Bit:%vreg165
	%vreg170<def> = DREADPM %vreg165, 0; GR32Bit:%vreg170,%vreg165
	%vreg173<def> = DREADPM %vreg165, 4; GR32Bit:%vreg173,%vreg165
	BNE <BB#7>, %vreg170, %vreg173; GR32Bit:%vreg170,%vreg173
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#5>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg167<def> = LUI 2; GR32Bit:%vreg167
	%vreg171<def> = DREADPM %vreg167, 0; GR32Bit:%vreg171,%vreg167
	%vreg174<def> = DREADPM %vreg167, 4; GR32Bit:%vreg174,%vreg167
	BNE <BB#7>, %vreg171, %vreg174; GR32Bit:%vreg171,%vreg174
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#5>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg169<def> = LUI 3; GR32Bit:%vreg169
	%vreg172<def> = DREADPM %vreg169, 0; GR32Bit:%vreg172,%vreg169
	%vreg175<def> = DREADPM %vreg169, 4; GR32Bit:%vreg175,%vreg169
	BNE <BB#7>, %vreg172, %vreg175; GR32Bit:%vreg172,%vreg175
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#5>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#5(16) BB#7(16)

*** Renumbered SlotIndexes 2848-3544 ***

*** Renumbered SlotIndexes 2848-3560 ***

*** Renumbered SlotIndexes 2848-3576 ***

*** Renumbered SlotIndexes 2848-3592 ***

*** Renumbered SlotIndexes 2824-3608 ***

*** Renumbered SlotIndexes 2824-3624 ***

*** Renumbered SlotIndexes 2824-3640 ***

*** Renumbered SlotIndexes 2824-3656 ***

*** Renumbered SlotIndexes 2804-3676 ***

*** Renumbered SlotIndexes 2804-3692 ***

*** Renumbered SlotIndexes 2804-3708 ***

*** Renumbered SlotIndexes 2804-3724 ***

*** Renumbered SlotIndexes 2804-3740 ***

*** Renumbered SlotIndexes 2804-3756 ***

*** Renumbered SlotIndexes 2804-3772 ***
Creating pHyperOp bundles for CEs for bb4
  %vreg165<def> = LUI 1; GR32Bit:%vreg165
starting at   %vreg27<def> = ADDI %zero, -1; GR32Bit:%vreg27
  %vreg167<def> = LUI 2; GR32Bit:%vreg167
starting at   %vreg165<def> = LUI 1; GR32Bit:%vreg165
  %vreg169<def> = LUI 3; GR32Bit:%vreg169
starting at   %vreg167<def> = LUI 2; GR32Bit:%vreg167
starting at   %vreg169<def> = LUI 3; GR32Bit:%vreg169
After bundling, state of BB4:BB#4: derived from LLVM BB %startup_fuel_valves3.if.then12
    Predecessors according to CFG: BB#3
	%vreg27<def> = ADDI %zero, -1; GR32Bit:%vreg27
	  * %vreg23<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg23
	  * %vreg24<def> = LW %vreg23, 0; mem:LD4[%2] GR32Bit:%vreg24,%vreg23
	  * SW %zero, %vreg24, 12; mem:ST4[%21] GR32Bit:%vreg24
	  * %vreg25<def> = LW %vreg23, 0; mem:LD4[%2] GR32Bit:%vreg25,%vreg23
	  * %vreg26<def> = LW %vreg25, 20; mem:LD4[%23] GR32Bit:%vreg26,%vreg25
	  * %vreg164<def> = LUI 1; GR32Bit:%vreg164
	  * WRITEPM %vreg164, %vreg26, 0; GR32Bit:%vreg164,%vreg26
	  * %vreg166<def> = LUI 2; GR32Bit:%vreg166
	  * WRITEPM %vreg166, %vreg26, 0; GR32Bit:%vreg166,%vreg26
	  * %vreg168<def> = LUI 3; GR32Bit:%vreg168
	  * WRITEPM %vreg168, %vreg26, 0; GR32Bit:%vreg168,%vreg26
	  * WRITEPM %vreg164, %vreg27, 4; GR32Bit:%vreg164,%vreg27
	  * WRITEPM %vreg166, %vreg27, 4; GR32Bit:%vreg166,%vreg27
	  * WRITEPM %vreg168, %vreg27, 4; GR32Bit:%vreg168,%vreg27
	  * BNE <BB#7>, %vreg26, %vreg27; GR32Bit:%vreg26,%vreg27
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#5>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg165<def> = LUI 1; GR32Bit:%vreg165
	  * %vreg170<def> = DREADPM %vreg165, 0; GR32Bit:%vreg170,%vreg165
	  * %vreg173<def> = DREADPM %vreg165, 4; GR32Bit:%vreg173,%vreg165
	  * BNE <BB#7>, %vreg170, %vreg173; GR32Bit:%vreg170,%vreg173
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#5>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg167<def> = LUI 2; GR32Bit:%vreg167
	  * %vreg171<def> = DREADPM %vreg167, 0; GR32Bit:%vreg171,%vreg167
	  * %vreg174<def> = DREADPM %vreg167, 4; GR32Bit:%vreg174,%vreg167
	  * BNE <BB#7>, %vreg171, %vreg174; GR32Bit:%vreg171,%vreg174
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#5>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg169<def> = LUI 3; GR32Bit:%vreg169
	  * %vreg172<def> = DREADPM %vreg169, 0; GR32Bit:%vreg172,%vreg169
	  * %vreg175<def> = DREADPM %vreg169, 4; GR32Bit:%vreg175,%vreg169
	  * BNE <BB#7>, %vreg172, %vreg175; GR32Bit:%vreg172,%vreg175
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#5>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#5(16) BB#7(16)

-------------
Starting new basic block BB#5
********** MI Scheduling **********
startup_fuel_valves3:BB#5 startup_fuel_valves3.if.then16
  From: %vreg28<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg28
    To: JAL <BB#7>
 Remaining: 0
Max Pressure: GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 2
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
SU(0):   %vreg28<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg28
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
   val SU(1): Latency=5 Reg=%vreg28

SU(1):   %vreg29<def> = LW %vreg28, 0; mem:LD4[%2] GR32Bit:%vreg29,%vreg28
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 17
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg28
  Successors:
   val SU(3): Latency=15 Reg=%vreg29
   val SU(2): Latency=15 Reg=%vreg29
   ch  SU(3): Latency=0

SU(2):   %vreg30<def> = LW %vreg29, 4; mem:LD4[%27] GR32Bit:%vreg30,%vreg29
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 20
  Height             : 2
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg29
  Successors:
   val SU(3): Latency=2 Reg=%vreg30
   ch  SU(3): Latency=0

SU(3):   SW %vreg30, %vreg29, 20; mem:ST4[%30] GR32Bit:%vreg30,%vreg29
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 22
  Height             : 0
  Predecessors:
   val SU(2): Latency=2 Reg=%vreg30
   val SU(1): Latency=15 Reg=%vreg29
   ch  SU(2): Latency=0
   ch  SU(1): Latency=0

SU(0):   %vreg28<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg28
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
   val SU(1): Latency=5 Reg=%vreg28

SU(1):   %vreg29<def> = LW %vreg28, 0; mem:LD4[%2] GR32Bit:%vreg29,%vreg28
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 17
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg28
  Successors:
   val SU(3): Latency=15 Reg=%vreg29
   val SU(2): Latency=15 Reg=%vreg29
   ch  SU(3): Latency=0

SU(2):   %vreg30<def> = LW %vreg29, 4; mem:LD4[%27] GR32Bit:%vreg30,%vreg29
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 20
  Height             : 2
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg29
  Successors:
   val SU(3): Latency=2 Reg=%vreg30
   ch  SU(3): Latency=0

SU(3):   SW %vreg30, %vreg29, 20; mem:ST4[%30] GR32Bit:%vreg30,%vreg29
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 22
  Height             : 0
  Predecessors:
   val SU(2): Latency=2 Reg=%vreg30
   val SU(1): Latency=15 Reg=%vreg29
   ch  SU(2): Latency=0
   ch  SU(1): Latency=0

Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg28<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg28
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg29<def> = LW %vreg28, 0; mem:LD4[%2] GR32Bit:%vreg29,%vreg28
Pick node SU(2)  ILP: 3 / 21 = 0.142857 Tree: 0 @0
Scheduling %vreg30<def> = LW %vreg29, 4; mem:LD4[%27] GR32Bit:%vreg30,%vreg29
Pick node SU(3)  ILP: 4 / 23 = 0.173913 Tree: 0 @0
Scheduling SW %vreg30, %vreg29, 20; mem:ST4[%30] GR32Bit:%vreg30,%vreg29
*** Final schedule for BB#5 ***
SU(0):   %vreg28<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg28
SU(1):   %vreg29<def> = LW %vreg28, 0; mem:LD4[%2] GR32Bit:%vreg29,%vreg28
SU(2):   %vreg30<def> = LW %vreg29, 4; mem:LD4[%27] GR32Bit:%vreg30,%vreg29
SU(3):   SW %vreg30, %vreg29, 20; mem:ST4[%30] GR32Bit:%vreg30,%vreg29

Partitioning instructions of the region into multiple CEs
instr:  %vreg28<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg28
instr:  %vreg29<def> = LW %vreg28, 0; mem:LD4[%2] GR32Bit:%vreg29,%vreg28
instr:  %vreg30<def> = LW %vreg29, 4; mem:LD4[%27] GR32Bit:%vreg30,%vreg29
instr:  SW %vreg30, %vreg29, 20; mem:ST4[%30] GR32Bit:%vreg30,%vreg29

*** Renumbered SlotIndexes 3416-3784 ***

*** Renumbered SlotIndexes 3428-3796 ***

*** Renumbered SlotIndexes 3440-3808 ***

*** Renumbered SlotIndexes 3452-3820 ***

*** Renumbered SlotIndexes 3464-3832 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
After Shuffling regions of basic block, state of BB#5:
BB#5: derived from LLVM BB %startup_fuel_valves3.if.then16
    Predecessors according to CFG: BB#4
	%vreg28<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg28
	%vreg29<def> = LW %vreg28, 0; mem:LD4[%2] GR32Bit:%vreg29,%vreg28
	%vreg30<def> = LW %vreg29, 4; mem:LD4[%27] GR32Bit:%vreg30,%vreg29
	SW %vreg30, %vreg29, 20; mem:ST4[%30] GR32Bit:%vreg30,%vreg29
	JAL <BB#7>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#7>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#7>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#7>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#7

*** Renumbered SlotIndexes 3424-3864 ***

*** Renumbered SlotIndexes 3416-3888 ***

*** Renumbered SlotIndexes 3412-3900 ***
Creating pHyperOp bundles for CEs for bb5
  JAL <BB#7>
starting at   %vreg28<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg28
  JAL <BB#7>
starting at   JAL <BB#7>
  JAL <BB#7>
starting at   JAL <BB#7>
starting at   JAL <BB#7>
After bundling, state of BB5:BB#5: derived from LLVM BB %startup_fuel_valves3.if.then16
    Predecessors according to CFG: BB#4
	%vreg28<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg28
	  * %vreg29<def> = LW %vreg28, 0; mem:LD4[%2] GR32Bit:%vreg29,%vreg28
	  * %vreg30<def> = LW %vreg29, 4; mem:LD4[%27] GR32Bit:%vreg30,%vreg29
	  * SW %vreg30, %vreg29, 20; mem:ST4[%30] GR32Bit:%vreg30,%vreg29
	  * JAL <BB#7>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#7>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#7>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#7>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#7

-------------
Starting new basic block BB#6
********** MI Scheduling **********
startup_fuel_valves3:BB#6 startup_fuel_valves3.if.else22
  From: %vreg16<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg16
    To: End Remaining: 0
Max Pressure: GR32Bit=3
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 3
Excess PSets: 
2 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 1
  SU(5) in tree 1
SU(0):   %vreg16<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg16
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 36
  Successors:
   val SU(4): Latency=5 Reg=%vreg16
   val SU(1): Latency=5 Reg=%vreg16

SU(1):   %vreg17<def> = LW %vreg16, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg16
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 31
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg16
  Successors:
   val SU(3): Latency=15 Reg=%vreg17
   ch  SU(3): Latency=0

SU(2):   %vreg18<def> = ADDI %zero, 1; GR32Bit:%vreg18
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
   val SU(5): Latency=4 Reg=%vreg18
   val SU(3): Latency=4 Reg=%vreg18

SU(3):   SW %vreg18, %vreg17, 12; mem:ST4[%32] GR32Bit:%vreg18,%vreg17
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 20
  Height             : 16
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg17
   val SU(2): Latency=4 Reg=%vreg18
   ch  SU(1): Latency=0
  Successors:
   ch  SU(5): Latency=0
   ch  SU(4): Latency=1

SU(4):   %vreg19<def> = LW %vreg16, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg16
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 21
  Height             : 15
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg16
   ch  SU(3): Latency=1
  Successors:
   val SU(5): Latency=15 Reg=%vreg19
   ch  SU(5): Latency=0

SU(5):   SW %vreg18, %vreg19, 16; mem:ST4[%34] GR32Bit:%vreg18,%vreg19
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 36
  Height             : 0
  Predecessors:
   val SU(4): Latency=15 Reg=%vreg19
   val SU(2): Latency=4 Reg=%vreg18
   ch  SU(4): Latency=0
   ch  SU(3): Latency=0

SU(0):   %vreg16<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg16
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 36
  Successors:
   val SU(4): Latency=5 Reg=%vreg16
   val SU(1): Latency=5 Reg=%vreg16

SU(1):   %vreg17<def> = LW %vreg16, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg16
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 31
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg16
  Successors:
   val SU(3): Latency=15 Reg=%vreg17
   ch  SU(3): Latency=0

SU(2):   %vreg18<def> = ADDI %zero, 1; GR32Bit:%vreg18
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
   val SU(5): Latency=4 Reg=%vreg18
   val SU(3): Latency=4 Reg=%vreg18

SU(3):   SW %vreg18, %vreg17, 12; mem:ST4[%32] GR32Bit:%vreg18,%vreg17
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 20
  Height             : 16
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg17
   val SU(2): Latency=4 Reg=%vreg18
   ch  SU(1): Latency=0
  Successors:
   ch  SU(5): Latency=0
   ch  SU(4): Latency=1

SU(4):   %vreg19<def> = LW %vreg16, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg16
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 21
  Height             : 15
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg16
   ch  SU(3): Latency=1
  Successors:
   val SU(5): Latency=15 Reg=%vreg19
   ch  SU(5): Latency=0

SU(5):   SW %vreg18, %vreg19, 16; mem:ST4[%34] GR32Bit:%vreg18,%vreg19
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 36
  Height             : 0
  Predecessors:
   val SU(4): Latency=15 Reg=%vreg19
   val SU(2): Latency=4 Reg=%vreg18
   ch  SU(4): Latency=0
   ch  SU(3): Latency=0

Pick node SU(2)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg18<def> = ADDI %zero, 1; GR32Bit:%vreg18
handleMove 3572B -> 3552B: %vreg18<def> = ADDI %zero, 1; GR32Bit:%vreg18
     %vreg18:	[3572r,3596r:0)  0@3572r
        -->	[3552r,3596r:0)  0@3552r
     zero:	[4r,4d:11)[308r,308d:10)[524r,524d:9)[740r,740d:8)[1696r,1696d:7)[1704r,1704d:6)[1712r,1712d:5)[1720r,1720d:4)[1728r,1728d:3)[1736r,1736d:2)[1744r,1744d:1)[1752r,1752d:0)  0@1752r 1@1744r 2@1736r 3@1728r 4@1720r 5@1712r 6@1704r 7@1696r 8@740r 9@524r 10@308r 11@4r
        -->	[4r,4d:11)[308r,308d:10)[524r,524d:9)[740r,740d:8)[1696r,1696d:7)[1704r,1704d:6)[1712r,1712d:5)[1720r,1720d:4)[1728r,1728d:3)[1736r,1736d:2)[1744r,1744d:1)[1752r,1752d:0)  0@1752r 1@1744r 2@1736r 3@1728r 4@1720r 5@1712r 6@1704r 7@1696r 8@740r 9@524r 10@308r 11@4r
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg16<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg16
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg17<def> = LW %vreg16, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg16
Pick node SU(3)  ILP: 4 / 21 = 0.190476 Tree: 0 @0
Scheduling SW %vreg18, %vreg17, 12; mem:ST4[%32] GR32Bit:%vreg18,%vreg17
Pick node SU(4)  ILP: 1 / 22 = 0.0454545 Tree: 1 @0
Scheduling %vreg19<def> = LW %vreg16, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg16
Pick node SU(5)  ILP: 2 / 37 = 0.0540541 Tree: 1 @0
Scheduling SW %vreg18, %vreg19, 16; mem:ST4[%34] GR32Bit:%vreg18,%vreg19
*** Final schedule for BB#6 ***
SU(2):   %vreg18<def> = ADDI %zero, 1; GR32Bit:%vreg18
SU(0):   %vreg16<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg16
SU(1):   %vreg17<def> = LW %vreg16, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg16
SU(3):   SW %vreg18, %vreg17, 12; mem:ST4[%32] GR32Bit:%vreg18,%vreg17
SU(4):   %vreg19<def> = LW %vreg16, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg16
SU(5):   SW %vreg18, %vreg19, 16; mem:ST4[%34] GR32Bit:%vreg18,%vreg19

Partitioning instructions of the region into multiple CEs
instr:  %vreg18<def> = ADDI %zero, 1; GR32Bit:%vreg18
instr:  %vreg16<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg16
instr:  %vreg17<def> = LW %vreg16, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg16
instr:  SW %vreg18, %vreg17, 12; mem:ST4[%32] GR32Bit:%vreg18,%vreg17
instr:  %vreg19<def> = LW %vreg16, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg16
instr:  SW %vreg18, %vreg19, 16; mem:ST4[%34] GR32Bit:%vreg18,%vreg19
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
After Shuffling regions of basic block, state of BB#6:
BB#6: derived from LLVM BB %startup_fuel_valves3.if.else22
    Predecessors according to CFG: BB#2
	%vreg18<def> = ADDI %zero, 1; GR32Bit:%vreg18
	%vreg16<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg16
	%vreg17<def> = LW %vreg16, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg16
	SW %vreg18, %vreg17, 12; mem:ST4[%32] GR32Bit:%vreg18,%vreg17
	%vreg19<def> = LW %vreg16, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg16
	SW %vreg18, %vreg19, 16; mem:ST4[%34] GR32Bit:%vreg18,%vreg19
    Successors according to CFG: BB#7
Creating pHyperOp bundles for CEs for bb6
starting at   %vreg18<def> = ADDI %zero, 1; GR32Bit:%vreg18

*** Renumbered SlotIndexes 3552-3912 ***
starting at   %zero<def> = ADDI %zero, 0
starting at   %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 3564-3924 ***
starting at   %zero<def> = ADDI %zero, 0
After bundling, state of BB6:BB#6: derived from LLVM BB %startup_fuel_valves3.if.else22
    Predecessors according to CFG: BB#2
	%vreg18<def> = ADDI %zero, 1; GR32Bit:%vreg18
	  * %vreg16<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg16
	  * %vreg17<def> = LW %vreg16, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg16
	  * SW %vreg18, %vreg17, 12; mem:ST4[%32] GR32Bit:%vreg18,%vreg17
	  * %vreg19<def> = LW %vreg16, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg16
	  * SW %vreg18, %vreg19, 16; mem:ST4[%34] GR32Bit:%vreg18,%vreg19
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#7

-------------
Starting new basic block BB#7
********** MI Scheduling **********
startup_fuel_valves3:BB#7 startup_fuel_valves3.if.end26
  From: JAL <BB#8>
    To: JAL <BB#8>
 Remaining: 6
Max Pressure: Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 0
Excess PSets: 
0 subtrees:
*** Final schedule for BB#7 ***

Partitioning instructions of the region into multiple CEs

*** Renumbered SlotIndexes 3688-3936 ***

*** Renumbered SlotIndexes 3700-3948 ***

*** Renumbered SlotIndexes 3712-3960 ***

*** Renumbered SlotIndexes 3724-3972 ***

*** Renumbered SlotIndexes 3736-3984 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
********** MI Scheduling **********
startup_fuel_valves3:BB#7 startup_fuel_valves3.if.end26
  From: %vreg31<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg31
    To: BNE <BB#11>, %vreg34, %zero; GR32Bit:%vreg34
 Remaining: 0
Max Pressure: FP32Bit=2
GR32Bit=1
Live In: 
Live Out: 
FP32BitLimit 32 Actual 2
GR32BitLimit 32 Actual 1
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 0
SU(0):   %vreg31<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 25
  Successors:
   val SU(1): Latency=5 Reg=%vreg31

SU(1):   %vreg32<def> = FLW %vreg31, 0; mem:LD4[%3] FP32Bit:%vreg32 GR32Bit:%vreg31
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 20
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg31
  Successors:
   val SU(4): Latency=15 Reg=%vreg32

SU(2):   %vreg33<def> = ADDI %zero, 1175027713; GR32Bit:%vreg33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
   val SU(3): Latency=4 Reg=%vreg33

SU(3):   %vreg35<def> = COPY %vreg33; FP32Bit:%vreg35 GR32Bit:%vreg33
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 5
  Predecessors:
   val SU(2): Latency=4 Reg=%vreg33
  Successors:
   val SU(4): Latency=0 Reg=%vreg35

SU(4):   %vreg34<def> = FULT_S %vreg35, %vreg32; GR32Bit:%vreg34 FP32Bit:%vreg35,%vreg32
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 5
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg32
   val SU(3): Latency=0 Reg=%vreg35
  Successors:
   val SU(4294967295): Latency=5 Reg=%vreg34

SU(0):   %vreg31<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 25
  Successors:
   val SU(1): Latency=5 Reg=%vreg31

SU(1):   %vreg32<def> = FLW %vreg31, 0; mem:LD4[%3] FP32Bit:%vreg32 GR32Bit:%vreg31
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 20
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg31
  Successors:
   val SU(4): Latency=15 Reg=%vreg32

SU(2):   %vreg33<def> = ADDI %zero, 1175027713; GR32Bit:%vreg33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
   val SU(3): Latency=4 Reg=%vreg33

SU(3):   %vreg35<def> = COPY %vreg33; FP32Bit:%vreg35 GR32Bit:%vreg33
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 5
  Predecessors:
   val SU(2): Latency=4 Reg=%vreg33
  Successors:
   val SU(4): Latency=0 Reg=%vreg35

SU(4):   %vreg34<def> = FULT_S %vreg35, %vreg32; GR32Bit:%vreg34 FP32Bit:%vreg35,%vreg32
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 5
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg32
   val SU(3): Latency=0 Reg=%vreg35
  Successors:
   val SU(4294967295): Latency=5 Reg=%vreg34

Pick node SU(2)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg33<def> = ADDI %zero, 1175027713; GR32Bit:%vreg33
handleMove 3652B -> 3632B: %vreg33<def> = ADDI %zero, 1175027713; GR32Bit:%vreg33
     %vreg33:	[3652r,3660r:0)  0@3652r
        -->	[3632r,3660r:0)  0@3632r
     zero:	[4r,4d:11)[308r,308d:10)[524r,524d:9)[740r,740d:8)[1696r,1696d:7)[1704r,1704d:6)[1712r,1712d:5)[1720r,1720d:4)[1728r,1728d:3)[1736r,1736d:2)[1744r,1744d:1)[1752r,1752d:0)  0@1752r 1@1744r 2@1736r 3@1728r 4@1720r 5@1712r 6@1704r 7@1696r 8@740r 9@524r 10@308r 11@4r
        -->	[4r,4d:11)[308r,308d:10)[524r,524d:9)[740r,740d:8)[1696r,1696d:7)[1704r,1704d:6)[1712r,1712d:5)[1720r,1720d:4)[1728r,1728d:3)[1736r,1736d:2)[1744r,1744d:1)[1752r,1752d:0)  0@1752r 1@1744r 2@1736r 3@1728r 4@1720r 5@1712r 6@1704r 7@1696r 8@740r 9@524r 10@308r 11@4r
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg31<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg31
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg32<def> = FLW %vreg31, 0; mem:LD4[%3] FP32Bit:%vreg32 GR32Bit:%vreg31
Pick node SU(3)  ILP: 1 / 5 = 0.2 Tree: 0 @0
Scheduling %vreg35<def> = COPY %vreg33; FP32Bit:%vreg35 GR32Bit:%vreg33
Pick node SU(4)  ILP: 4 / 21 = 0.190476 Tree: 0 @0
Scheduling %vreg34<def> = FULT_S %vreg35, %vreg32; GR32Bit:%vreg34 FP32Bit:%vreg35,%vreg32
*** Final schedule for BB#7 ***
SU(2):   %vreg33<def> = ADDI %zero, 1175027713; GR32Bit:%vreg33
SU(0):   %vreg31<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg31
SU(1):   %vreg32<def> = FLW %vreg31, 0; mem:LD4[%3] FP32Bit:%vreg32 GR32Bit:%vreg31
SU(3):   %vreg35<def> = COPY %vreg33; FP32Bit:%vreg35 GR32Bit:%vreg33
SU(4):   %vreg34<def> = FULT_S %vreg35, %vreg32; GR32Bit:%vreg34 FP32Bit:%vreg35,%vreg32

Partitioning instructions of the region into multiple CEs
instr:  %vreg33<def> = ADDI %zero, 1175027713; GR32Bit:%vreg33
instr:  %vreg31<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg31
instr:  %vreg32<def> = FLW %vreg31, 0; mem:LD4[%3] FP32Bit:%vreg32 GR32Bit:%vreg31
instr:  %vreg35<def> = COPY %vreg33; FP32Bit:%vreg35 GR32Bit:%vreg33
instr:  %vreg34<def> = FULT_S %vreg35, %vreg32; GR32Bit:%vreg34 FP32Bit:%vreg35,%vreg32

*** Renumbered SlotIndexes 3672-4024 ***

*** Renumbered SlotIndexes 3684-4036 ***

*** Renumbered SlotIndexes 3696-4048 ***

*** Renumbered SlotIndexes 3708-4060 ***

*** Renumbered SlotIndexes 3720-4072 ***

*** Renumbered SlotIndexes 3732-4084 ***

*** Renumbered SlotIndexes 3752-4096 ***

*** Renumbered SlotIndexes 3764-4108 ***

*** Renumbered SlotIndexes 3776-4120 ***

*** Renumbered SlotIndexes 3788-4132 ***

*** Renumbered SlotIndexes 3800-4144 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs

renaming register of operand that belongs to ce 1 but was defined in0
%vreg34<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg34<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg34<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg34
renaming register of operand that belongs to ce 2 but was defined in0
%vreg34
renaming register of operand that belongs to ce 3 but was defined in0
%vreg34After Shuffling regions of basic block, state of BB#7:
BB#7: derived from LLVM BB %startup_fuel_valves3.if.end26
    Predecessors according to CFG: BB#1 BB#6 BB#3 BB#4 BB#5
	%vreg33<def> = ADDI %zero, 1175027713; GR32Bit:%vreg33
	%vreg31<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg31
	%vreg32<def> = FLW %vreg31, 0; mem:LD4[%3] FP32Bit:%vreg32 GR32Bit:%vreg31
	%vreg35<def> = COPY %vreg33; FP32Bit:%vreg35 GR32Bit:%vreg33
	%vreg34<def> = FULT_S %vreg35, %vreg32; GR32Bit:%vreg34 FP32Bit:%vreg35,%vreg32
	%vreg176<def> = LUI 1; GR32Bit:%vreg176
	WRITEPM %vreg176, %vreg34, 0; GR32Bit:%vreg176,%vreg34
	%vreg178<def> = LUI 2; GR32Bit:%vreg178
	WRITEPM %vreg178, %vreg34, 0; GR32Bit:%vreg178,%vreg34
	%vreg180<def> = LUI 3; GR32Bit:%vreg180
	WRITEPM %vreg180, %vreg34, 0; GR32Bit:%vreg180,%vreg34
	BNE <BB#11>, %vreg34, %zero; GR32Bit:%vreg34
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#8>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg177<def> = LUI 1; GR32Bit:%vreg177
	%vreg182<def> = DREADPM %vreg177, 0; GR32Bit:%vreg182,%vreg177
	BNE <BB#11>, %vreg182, %zero; GR32Bit:%vreg182
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#8>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg179<def> = LUI 2; GR32Bit:%vreg179
	%vreg183<def> = DREADPM %vreg179, 0; GR32Bit:%vreg183,%vreg179
	BNE <BB#11>, %vreg183, %zero; GR32Bit:%vreg183
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#8>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg181<def> = LUI 3; GR32Bit:%vreg181
	%vreg184<def> = DREADPM %vreg181, 0; GR32Bit:%vreg184,%vreg181
	BNE <BB#11>, %vreg184, %zero; GR32Bit:%vreg184
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#8>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#8(16) BB#11(16)

*** Renumbered SlotIndexes 3716-4188 ***

*** Renumbered SlotIndexes 3716-4204 ***

*** Renumbered SlotIndexes 3716-4220 ***

*** Renumbered SlotIndexes 3692-4244 ***

*** Renumbered SlotIndexes 3692-4260 ***

*** Renumbered SlotIndexes 3692-4276 ***

*** Renumbered SlotIndexes 3672-4304 ***

*** Renumbered SlotIndexes 3672-4320 ***

*** Renumbered SlotIndexes 3672-4336 ***

*** Renumbered SlotIndexes 3672-4352 ***

*** Renumbered SlotIndexes 3672-4368 ***
Creating pHyperOp bundles for CEs for bb7
  %vreg177<def> = LUI 1; GR32Bit:%vreg177
starting at   %vreg33<def> = ADDI %zero, 1175027713; GR32Bit:%vreg33
  %vreg179<def> = LUI 2; GR32Bit:%vreg179
starting at   %vreg177<def> = LUI 1; GR32Bit:%vreg177
  %vreg181<def> = LUI 3; GR32Bit:%vreg181
starting at   %vreg179<def> = LUI 2; GR32Bit:%vreg179
starting at   %vreg181<def> = LUI 3; GR32Bit:%vreg181
After bundling, state of BB7:BB#7: derived from LLVM BB %startup_fuel_valves3.if.end26
    Predecessors according to CFG: BB#1 BB#6 BB#3 BB#4 BB#5
	%vreg33<def> = ADDI %zero, 1175027713; GR32Bit:%vreg33
	  * %vreg31<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg31
	  * %vreg32<def> = FLW %vreg31, 0; mem:LD4[%3] FP32Bit:%vreg32 GR32Bit:%vreg31
	  * %vreg35<def> = COPY %vreg33; FP32Bit:%vreg35 GR32Bit:%vreg33
	  * %vreg34<def> = FULT_S %vreg35, %vreg32; GR32Bit:%vreg34 FP32Bit:%vreg35,%vreg32
	  * %vreg176<def> = LUI 1; GR32Bit:%vreg176
	  * WRITEPM %vreg176, %vreg34, 0; GR32Bit:%vreg176,%vreg34
	  * %vreg178<def> = LUI 2; GR32Bit:%vreg178
	  * WRITEPM %vreg178, %vreg34, 0; GR32Bit:%vreg178,%vreg34
	  * %vreg180<def> = LUI 3; GR32Bit:%vreg180
	  * WRITEPM %vreg180, %vreg34, 0; GR32Bit:%vreg180,%vreg34
	  * BNE <BB#11>, %vreg34, %zero; GR32Bit:%vreg34
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#8>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg177<def> = LUI 1; GR32Bit:%vreg177
	  * %vreg182<def> = DREADPM %vreg177, 0; GR32Bit:%vreg182,%vreg177
	  * BNE <BB#11>, %vreg182, %zero; GR32Bit:%vreg182
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#8>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg179<def> = LUI 2; GR32Bit:%vreg179
	  * %vreg183<def> = DREADPM %vreg179, 0; GR32Bit:%vreg183,%vreg179
	  * BNE <BB#11>, %vreg183, %zero; GR32Bit:%vreg183
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#8>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg181<def> = LUI 3; GR32Bit:%vreg181
	  * %vreg184<def> = DREADPM %vreg181, 0; GR32Bit:%vreg184,%vreg181
	  * BNE <BB#11>, %vreg184, %zero; GR32Bit:%vreg184
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#8>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#8(16) BB#11(16)

-------------
Starting new basic block BB#8
********** MI Scheduling **********
startup_fuel_valves3:BB#8 startup_fuel_valves3.if.then28
  From: JAL <BB#9>
    To: JAL <BB#9>
 Remaining: 7
Max Pressure: Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 0
Excess PSets: 
0 subtrees:
*** Final schedule for BB#8 ***

Partitioning instructions of the region into multiple CEs

*** Renumbered SlotIndexes 4204-4380 ***

*** Renumbered SlotIndexes 4216-4392 ***

*** Renumbered SlotIndexes 4228-4404 ***

*** Renumbered SlotIndexes 4240-4416 ***

*** Renumbered SlotIndexes 4252-4428 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
********** MI Scheduling **********
startup_fuel_valves3:BB#8 startup_fuel_valves3.if.then28
  From: %vreg36<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg36
    To: BNE <BB#11>, %vreg39, %vreg40; GR32Bit:%vreg39,%vreg40
 Remaining: 0
Max Pressure: GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 2
Excess PSets: 
3 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 1
  SU(4) in tree 1
  SU(5) in tree 2
SU(0):   %vreg36<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg36
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 51
  Successors:
   val SU(3): Latency=5 Reg=%vreg36
   val SU(1): Latency=5 Reg=%vreg36

SU(1):   %vreg37<def> = LW %vreg36, 0; mem:LD4[%2] GR32Bit:%vreg37,%vreg36
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 46
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg36
  Successors:
   val SU(2): Latency=15 Reg=%vreg37
   ch  SU(2): Latency=0

SU(2):   SW %zero, %vreg37, 8; mem:ST4[%38] GR32Bit:%vreg37
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 20
  Height             : 31
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg37
   ch  SU(1): Latency=0
  Successors:
   ch  SU(4): Latency=1
   ch  SU(3): Latency=1

SU(3):   %vreg38<def> = LW %vreg36, 0; mem:LD4[%2] GR32Bit:%vreg38,%vreg36
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 21
  Height             : 30
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg36
   ch  SU(2): Latency=1
  Successors:
   val SU(4): Latency=15 Reg=%vreg38

SU(4):   %vreg39<def> = LW %vreg38, 24; mem:LD4[%40] GR32Bit:%vreg39,%vreg38
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 36
  Height             : 15
  Predecessors:
   val SU(3): Latency=15 Reg=%vreg38
   ch  SU(2): Latency=1
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg39

SU(5):   %vreg40<def> = ADDI %zero, -1; GR32Bit:%vreg40
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(4294967295): Latency=5 Reg=%vreg40

SU(0):   %vreg36<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg36
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 51
  Successors:
   val SU(3): Latency=5 Reg=%vreg36
   val SU(1): Latency=5 Reg=%vreg36

SU(1):   %vreg37<def> = LW %vreg36, 0; mem:LD4[%2] GR32Bit:%vreg37,%vreg36
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 46
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg36
  Successors:
   val SU(2): Latency=15 Reg=%vreg37
   ch  SU(2): Latency=0

SU(2):   SW %zero, %vreg37, 8; mem:ST4[%38] GR32Bit:%vreg37
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 20
  Height             : 31
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg37
   ch  SU(1): Latency=0
  Successors:
   ch  SU(4): Latency=1
   ch  SU(3): Latency=1

SU(3):   %vreg38<def> = LW %vreg36, 0; mem:LD4[%2] GR32Bit:%vreg38,%vreg36
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 21
  Height             : 30
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg36
   ch  SU(2): Latency=1
  Successors:
   val SU(4): Latency=15 Reg=%vreg38

SU(4):   %vreg39<def> = LW %vreg38, 24; mem:LD4[%40] GR32Bit:%vreg39,%vreg38
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 14
  Depth              : 36
  Height             : 15
  Predecessors:
   val SU(3): Latency=15 Reg=%vreg38
   ch  SU(2): Latency=1
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg39

SU(5):   %vreg40<def> = ADDI %zero, -1; GR32Bit:%vreg40
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(4294967295): Latency=5 Reg=%vreg40

Pick node SU(5)  ILP: 1 / 1 = 1 Tree: 2 @0
Scheduling %vreg40<def> = ADDI %zero, -1; GR32Bit:%vreg40
handleMove 4184B -> 4140B: %vreg40<def> = ADDI %zero, -1; GR32Bit:%vreg40
     %vreg40:	[4184r,4192r:0)  0@4184r
        -->	[4140r,4192r:0)  0@4140r
     zero:	[4r,4d:11)[308r,308d:10)[524r,524d:9)[740r,740d:8)[1696r,1696d:7)[1704r,1704d:6)[1712r,1712d:5)[1720r,1720d:4)[1728r,1728d:3)[1736r,1736d:2)[1744r,1744d:1)[1752r,1752d:0)  0@1752r 1@1744r 2@1736r 3@1728r 4@1720r 5@1712r 6@1704r 7@1696r 8@740r 9@524r 10@308r 11@4r
        -->	[4r,4d:11)[308r,308d:10)[524r,524d:9)[740r,740d:8)[1696r,1696d:7)[1704r,1704d:6)[1712r,1712d:5)[1720r,1720d:4)[1728r,1728d:3)[1736r,1736d:2)[1744r,1744d:1)[1752r,1752d:0)  0@1752r 1@1744r 2@1736r 3@1728r 4@1720r 5@1712r 6@1704r 7@1696r 8@740r 9@524r 10@308r 11@4r
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg36<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg36
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg37<def> = LW %vreg36, 0; mem:LD4[%2] GR32Bit:%vreg37,%vreg36
Pick node SU(2)  ILP: 3 / 21 = 0.142857 Tree: 0 @0
Scheduling SW %zero, %vreg37, 8; mem:ST4[%38] GR32Bit:%vreg37
Pick node SU(3)  ILP: 1 / 22 = 0.0454545 Tree: 1 @0
Scheduling %vreg38<def> = LW %vreg36, 0; mem:LD4[%2] GR32Bit:%vreg38,%vreg36
Pick node SU(4)  ILP: 2 / 37 = 0.0540541 Tree: 1 @0
Scheduling %vreg39<def> = LW %vreg38, 24; mem:LD4[%40] GR32Bit:%vreg39,%vreg38
*** Final schedule for BB#8 ***
SU(5):   %vreg40<def> = ADDI %zero, -1; GR32Bit:%vreg40
SU(0):   %vreg36<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg36
SU(1):   %vreg37<def> = LW %vreg36, 0; mem:LD4[%2] GR32Bit:%vreg37,%vreg36
SU(2):   SW %zero, %vreg37, 8; mem:ST4[%38] GR32Bit:%vreg37
SU(3):   %vreg38<def> = LW %vreg36, 0; mem:LD4[%2] GR32Bit:%vreg38,%vreg36
SU(4):   %vreg39<def> = LW %vreg38, 24; mem:LD4[%40] GR32Bit:%vreg39,%vreg38

Partitioning instructions of the region into multiple CEs
instr:  %vreg40<def> = ADDI %zero, -1; GR32Bit:%vreg40
instr:  %vreg36<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg36
instr:  %vreg37<def> = LW %vreg36, 0; mem:LD4[%2] GR32Bit:%vreg37,%vreg36
instr:  SW %zero, %vreg37, 8; mem:ST4[%38] GR32Bit:%vreg37
instr:  %vreg38<def> = LW %vreg36, 0; mem:LD4[%2] GR32Bit:%vreg38,%vreg36
instr:  %vreg39<def> = LW %vreg38, 24; mem:LD4[%40] GR32Bit:%vreg39,%vreg38

*** Renumbered SlotIndexes 4180-4468 ***

*** Renumbered SlotIndexes 4192-4480 ***

*** Renumbered SlotIndexes 4204-4492 ***

*** Renumbered SlotIndexes 4216-4504 ***

*** Renumbered SlotIndexes 4228-4516 ***

*** Renumbered SlotIndexes 4240-4528 ***

*** Renumbered SlotIndexes 4252-4540 ***

*** Renumbered SlotIndexes 4264-4552 ***

*** Renumbered SlotIndexes 4276-4564 ***

*** Renumbered SlotIndexes 4304-4576 ***

*** Renumbered SlotIndexes 4316-4588 ***

*** Renumbered SlotIndexes 4328-4600 ***

*** Renumbered SlotIndexes 4340-4612 ***

*** Renumbered SlotIndexes 4352-4624 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs

renaming register of operand that belongs to ce 1 but was defined in0
%vreg39<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg39<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg39<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg40<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg40<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg40<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg39
renaming register of operand that belongs to ce 1 but was defined in0
%vreg40
renaming register of operand that belongs to ce 2 but was defined in0
%vreg39
renaming register of operand that belongs to ce 2 but was defined in0
%vreg40
renaming register of operand that belongs to ce 3 but was defined in0
%vreg39
renaming register of operand that belongs to ce 3 but was defined in0
%vreg40After Shuffling regions of basic block, state of BB#8:
BB#8: derived from LLVM BB %startup_fuel_valves3.if.then28
    Predecessors according to CFG: BB#7
	%vreg40<def> = ADDI %zero, -1; GR32Bit:%vreg40
	%vreg36<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg36
	%vreg37<def> = LW %vreg36, 0; mem:LD4[%2] GR32Bit:%vreg37,%vreg36
	SW %zero, %vreg37, 8; mem:ST4[%38] GR32Bit:%vreg37
	%vreg38<def> = LW %vreg36, 0; mem:LD4[%2] GR32Bit:%vreg38,%vreg36
	%vreg39<def> = LW %vreg38, 24; mem:LD4[%40] GR32Bit:%vreg39,%vreg38
	%vreg185<def> = LUI 1; GR32Bit:%vreg185
	WRITEPM %vreg185, %vreg39, 0; GR32Bit:%vreg185,%vreg39
	%vreg187<def> = LUI 2; GR32Bit:%vreg187
	WRITEPM %vreg187, %vreg39, 0; GR32Bit:%vreg187,%vreg39
	%vreg189<def> = LUI 3; GR32Bit:%vreg189
	WRITEPM %vreg189, %vreg39, 0; GR32Bit:%vreg189,%vreg39
	WRITEPM %vreg185, %vreg40, 4; GR32Bit:%vreg185,%vreg40
	WRITEPM %vreg187, %vreg40, 4; GR32Bit:%vreg187,%vreg40
	WRITEPM %vreg189, %vreg40, 4; GR32Bit:%vreg189,%vreg40
	BNE <BB#11>, %vreg39, %vreg40; GR32Bit:%vreg39,%vreg40
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#9>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg186<def> = LUI 1; GR32Bit:%vreg186
	%vreg191<def> = DREADPM %vreg186, 0; GR32Bit:%vreg191,%vreg186
	%vreg194<def> = DREADPM %vreg186, 4; GR32Bit:%vreg194,%vreg186
	BNE <BB#11>, %vreg191, %vreg194; GR32Bit:%vreg191,%vreg194
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#9>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg188<def> = LUI 2; GR32Bit:%vreg188
	%vreg192<def> = DREADPM %vreg188, 0; GR32Bit:%vreg192,%vreg188
	%vreg195<def> = DREADPM %vreg188, 4; GR32Bit:%vreg195,%vreg188
	BNE <BB#11>, %vreg192, %vreg195; GR32Bit:%vreg192,%vreg195
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#9>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg190<def> = LUI 3; GR32Bit:%vreg190
	%vreg193<def> = DREADPM %vreg190, 0; GR32Bit:%vreg193,%vreg190
	%vreg196<def> = DREADPM %vreg190, 4; GR32Bit:%vreg196,%vreg190
	BNE <BB#11>, %vreg193, %vreg196; GR32Bit:%vreg193,%vreg196
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#9>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#9(16) BB#11(16)

*** Renumbered SlotIndexes 4224-4680 ***

*** Renumbered SlotIndexes 4224-4696 ***

*** Renumbered SlotIndexes 4224-4712 ***

*** Renumbered SlotIndexes 4224-4728 ***

*** Renumbered SlotIndexes 4200-4744 ***

*** Renumbered SlotIndexes 4200-4760 ***

*** Renumbered SlotIndexes 4200-4776 ***

*** Renumbered SlotIndexes 4200-4792 ***

*** Renumbered SlotIndexes 4180-4812 ***

*** Renumbered SlotIndexes 4180-4828 ***

*** Renumbered SlotIndexes 4180-4844 ***

*** Renumbered SlotIndexes 4180-4860 ***

*** Renumbered SlotIndexes 4180-4876 ***

*** Renumbered SlotIndexes 4180-4892 ***

*** Renumbered SlotIndexes 4180-4908 ***
Creating pHyperOp bundles for CEs for bb8
  %vreg186<def> = LUI 1; GR32Bit:%vreg186
starting at   %vreg40<def> = ADDI %zero, -1; GR32Bit:%vreg40
  %vreg188<def> = LUI 2; GR32Bit:%vreg188
starting at   %vreg186<def> = LUI 1; GR32Bit:%vreg186
  %vreg190<def> = LUI 3; GR32Bit:%vreg190
starting at   %vreg188<def> = LUI 2; GR32Bit:%vreg188
starting at   %vreg190<def> = LUI 3; GR32Bit:%vreg190
After bundling, state of BB8:BB#8: derived from LLVM BB %startup_fuel_valves3.if.then28
    Predecessors according to CFG: BB#7
	%vreg40<def> = ADDI %zero, -1; GR32Bit:%vreg40
	  * %vreg36<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg36
	  * %vreg37<def> = LW %vreg36, 0; mem:LD4[%2] GR32Bit:%vreg37,%vreg36
	  * SW %zero, %vreg37, 8; mem:ST4[%38] GR32Bit:%vreg37
	  * %vreg38<def> = LW %vreg36, 0; mem:LD4[%2] GR32Bit:%vreg38,%vreg36
	  * %vreg39<def> = LW %vreg38, 24; mem:LD4[%40] GR32Bit:%vreg39,%vreg38
	  * %vreg185<def> = LUI 1; GR32Bit:%vreg185
	  * WRITEPM %vreg185, %vreg39, 0; GR32Bit:%vreg185,%vreg39
	  * %vreg187<def> = LUI 2; GR32Bit:%vreg187
	  * WRITEPM %vreg187, %vreg39, 0; GR32Bit:%vreg187,%vreg39
	  * %vreg189<def> = LUI 3; GR32Bit:%vreg189
	  * WRITEPM %vreg189, %vreg39, 0; GR32Bit:%vreg189,%vreg39
	  * WRITEPM %vreg185, %vreg40, 4; GR32Bit:%vreg185,%vreg40
	  * WRITEPM %vreg187, %vreg40, 4; GR32Bit:%vreg187,%vreg40
	  * WRITEPM %vreg189, %vreg40, 4; GR32Bit:%vreg189,%vreg40
	  * BNE <BB#11>, %vreg39, %vreg40; GR32Bit:%vreg39,%vreg40
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#9>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg186<def> = LUI 1; GR32Bit:%vreg186
	  * %vreg191<def> = DREADPM %vreg186, 0; GR32Bit:%vreg191,%vreg186
	  * %vreg194<def> = DREADPM %vreg186, 4; GR32Bit:%vreg194,%vreg186
	  * BNE <BB#11>, %vreg191, %vreg194; GR32Bit:%vreg191,%vreg194
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#9>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg188<def> = LUI 2; GR32Bit:%vreg188
	  * %vreg192<def> = DREADPM %vreg188, 0; GR32Bit:%vreg192,%vreg188
	  * %vreg195<def> = DREADPM %vreg188, 4; GR32Bit:%vreg195,%vreg188
	  * BNE <BB#11>, %vreg192, %vreg195; GR32Bit:%vreg192,%vreg195
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#9>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg190<def> = LUI 3; GR32Bit:%vreg190
	  * %vreg193<def> = DREADPM %vreg190, 0; GR32Bit:%vreg193,%vreg190
	  * %vreg196<def> = DREADPM %vreg190, 4; GR32Bit:%vreg196,%vreg190
	  * BNE <BB#11>, %vreg193, %vreg196; GR32Bit:%vreg193,%vreg196
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#9>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#9(16) BB#11(16)

-------------
Starting new basic block BB#9
********** MI Scheduling **********
startup_fuel_valves3:BB#9 startup_fuel_valves3.if.then32
  From: %vreg41<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg41
    To: JAL <BB#11>
 Remaining: 0
Max Pressure: GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 2
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
SU(0):   %vreg41<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg41
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
   val SU(1): Latency=5 Reg=%vreg41

SU(1):   %vreg42<def> = LW %vreg41, 0; mem:LD4[%2] GR32Bit:%vreg42,%vreg41
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 17
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg41
  Successors:
   val SU(3): Latency=15 Reg=%vreg42
   val SU(2): Latency=15 Reg=%vreg42
   ch  SU(3): Latency=0

SU(2):   %vreg43<def> = LW %vreg42, 4; mem:LD4[%44] GR32Bit:%vreg43,%vreg42
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 20
  Height             : 2
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg42
  Successors:
   val SU(3): Latency=2 Reg=%vreg43
   ch  SU(3): Latency=0

SU(3):   SW %vreg43, %vreg42, 24; mem:ST4[%47] GR32Bit:%vreg43,%vreg42
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 22
  Height             : 0
  Predecessors:
   val SU(2): Latency=2 Reg=%vreg43
   val SU(1): Latency=15 Reg=%vreg42
   ch  SU(2): Latency=0
   ch  SU(1): Latency=0

SU(0):   %vreg41<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg41
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
   val SU(1): Latency=5 Reg=%vreg41

SU(1):   %vreg42<def> = LW %vreg41, 0; mem:LD4[%2] GR32Bit:%vreg42,%vreg41
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 17
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg41
  Successors:
   val SU(3): Latency=15 Reg=%vreg42
   val SU(2): Latency=15 Reg=%vreg42
   ch  SU(3): Latency=0

SU(2):   %vreg43<def> = LW %vreg42, 4; mem:LD4[%44] GR32Bit:%vreg43,%vreg42
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 20
  Height             : 2
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg42
  Successors:
   val SU(3): Latency=2 Reg=%vreg43
   ch  SU(3): Latency=0

SU(3):   SW %vreg43, %vreg42, 24; mem:ST4[%47] GR32Bit:%vreg43,%vreg42
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 22
  Height             : 0
  Predecessors:
   val SU(2): Latency=2 Reg=%vreg43
   val SU(1): Latency=15 Reg=%vreg42
   ch  SU(2): Latency=0
   ch  SU(1): Latency=0

Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg41<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg41
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg42<def> = LW %vreg41, 0; mem:LD4[%2] GR32Bit:%vreg42,%vreg41
Pick node SU(2)  ILP: 3 / 21 = 0.142857 Tree: 0 @0
Scheduling %vreg43<def> = LW %vreg42, 4; mem:LD4[%44] GR32Bit:%vreg43,%vreg42
Pick node SU(3)  ILP: 4 / 23 = 0.173913 Tree: 0 @0
Scheduling SW %vreg43, %vreg42, 24; mem:ST4[%47] GR32Bit:%vreg43,%vreg42
*** Final schedule for BB#9 ***
SU(0):   %vreg41<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg41
SU(1):   %vreg42<def> = LW %vreg41, 0; mem:LD4[%2] GR32Bit:%vreg42,%vreg41
SU(2):   %vreg43<def> = LW %vreg42, 4; mem:LD4[%44] GR32Bit:%vreg43,%vreg42
SU(3):   SW %vreg43, %vreg42, 24; mem:ST4[%47] GR32Bit:%vreg43,%vreg42

Partitioning instructions of the region into multiple CEs
instr:  %vreg41<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg41
instr:  %vreg42<def> = LW %vreg41, 0; mem:LD4[%2] GR32Bit:%vreg42,%vreg41
instr:  %vreg43<def> = LW %vreg42, 4; mem:LD4[%44] GR32Bit:%vreg43,%vreg42
instr:  SW %vreg43, %vreg42, 24; mem:ST4[%47] GR32Bit:%vreg43,%vreg42

*** Renumbered SlotIndexes 4792-4920 ***

*** Renumbered SlotIndexes 4804-4932 ***

*** Renumbered SlotIndexes 4816-4944 ***

*** Renumbered SlotIndexes 4828-4956 ***

*** Renumbered SlotIndexes 4840-4968 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
After Shuffling regions of basic block, state of BB#9:
BB#9: derived from LLVM BB %startup_fuel_valves3.if.then32
    Predecessors according to CFG: BB#8
	%vreg41<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg41
	%vreg42<def> = LW %vreg41, 0; mem:LD4[%2] GR32Bit:%vreg42,%vreg41
	%vreg43<def> = LW %vreg42, 4; mem:LD4[%44] GR32Bit:%vreg43,%vreg42
	SW %vreg43, %vreg42, 24; mem:ST4[%47] GR32Bit:%vreg43,%vreg42
	JAL <BB#11>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#11>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#11>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#11>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#11

*** Renumbered SlotIndexes 4800-5000 ***

*** Renumbered SlotIndexes 4792-5024 ***

*** Renumbered SlotIndexes 4788-5036 ***
Creating pHyperOp bundles for CEs for bb9
  JAL <BB#11>
starting at   %vreg41<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg41
  JAL <BB#11>
starting at   JAL <BB#11>
  JAL <BB#11>
starting at   JAL <BB#11>
starting at   JAL <BB#11>
After bundling, state of BB9:BB#9: derived from LLVM BB %startup_fuel_valves3.if.then32
    Predecessors according to CFG: BB#8
	%vreg41<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg41
	  * %vreg42<def> = LW %vreg41, 0; mem:LD4[%2] GR32Bit:%vreg42,%vreg41
	  * %vreg43<def> = LW %vreg42, 4; mem:LD4[%44] GR32Bit:%vreg43,%vreg42
	  * SW %vreg43, %vreg42, 24; mem:ST4[%47] GR32Bit:%vreg43,%vreg42
	  * JAL <BB#11>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#11>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#11>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#11>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#11

-------------
Starting new basic block BB#10
********** MI Scheduling **********
startup_fuel_valves3:BB#10 startup_fuel_valves3.if.then
  From: %vreg44<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg44
    To: End Remaining: 0
Max Pressure: GR32Bit=3
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 3
Excess PSets: 
3 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 1
  SU(5) in tree 1
  SU(6) in tree 2
  SU(7) in tree 2
SU(0):   %vreg44<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg44
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 52
  Successors:
   val SU(6): Latency=5 Reg=%vreg44
   val SU(4): Latency=5 Reg=%vreg44
   val SU(1): Latency=5 Reg=%vreg44

SU(1):   %vreg45<def> = LW %vreg44, 0; mem:LD4[%2] GR32Bit:%vreg45,%vreg44
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 47
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg44
  Successors:
   val SU(3): Latency=15 Reg=%vreg45
   ch  SU(3): Latency=0

SU(2):   %vreg46<def> = ADDI %zero, 1; GR32Bit:%vreg46
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 36
  Successors:
   val SU(5): Latency=4 Reg=%vreg46
   val SU(3): Latency=4 Reg=%vreg46

SU(3):   SW %vreg46, %vreg45, 8; mem:ST4[%49] GR32Bit:%vreg46,%vreg45
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 20
  Height             : 32
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg45
   val SU(2): Latency=4 Reg=%vreg46
   ch  SU(1): Latency=0
  Successors:
   ch  SU(5): Latency=0
   ch  SU(4): Latency=1

SU(4):   %vreg47<def> = LW %vreg44, 0; mem:LD4[%2] GR32Bit:%vreg47,%vreg44
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 21
  Height             : 31
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg44
   ch  SU(3): Latency=1
  Successors:
   val SU(5): Latency=15 Reg=%vreg47
   ch  SU(5): Latency=0

SU(5):   SW %vreg46, %vreg47, 12; mem:ST4[%51] GR32Bit:%vreg46,%vreg47
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 36
  Height             : 16
  Predecessors:
   val SU(4): Latency=15 Reg=%vreg47
   val SU(2): Latency=4 Reg=%vreg46
   ch  SU(4): Latency=0
   ch  SU(3): Latency=0
  Successors:
   ch  SU(7): Latency=0
   ch  SU(6): Latency=1

SU(6):   %vreg48<def> = LW %vreg44, 0; mem:LD4[%2] GR32Bit:%vreg48,%vreg44
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 37
  Height             : 15
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg44
   ch  SU(5): Latency=1
  Successors:
   val SU(7): Latency=15 Reg=%vreg48
   ch  SU(7): Latency=0

SU(7):   SW %zero, %vreg48, 16; mem:ST4[%53] GR32Bit:%vreg48
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 52
  Height             : 0
  Predecessors:
   val SU(6): Latency=15 Reg=%vreg48
   ch  SU(6): Latency=0
   ch  SU(5): Latency=0

SU(0):   %vreg44<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg44
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 52
  Successors:
   val SU(6): Latency=5 Reg=%vreg44
   val SU(4): Latency=5 Reg=%vreg44
   val SU(1): Latency=5 Reg=%vreg44

SU(1):   %vreg45<def> = LW %vreg44, 0; mem:LD4[%2] GR32Bit:%vreg45,%vreg44
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 47
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg44
  Successors:
   val SU(3): Latency=15 Reg=%vreg45
   ch  SU(3): Latency=0

SU(2):   %vreg46<def> = ADDI %zero, 1; GR32Bit:%vreg46
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 36
  Successors:
   val SU(5): Latency=4 Reg=%vreg46
   val SU(3): Latency=4 Reg=%vreg46

SU(3):   SW %vreg46, %vreg45, 8; mem:ST4[%49] GR32Bit:%vreg46,%vreg45
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 20
  Height             : 32
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg45
   val SU(2): Latency=4 Reg=%vreg46
   ch  SU(1): Latency=0
  Successors:
   ch  SU(5): Latency=0
   ch  SU(4): Latency=1

SU(4):   %vreg47<def> = LW %vreg44, 0; mem:LD4[%2] GR32Bit:%vreg47,%vreg44
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 21
  Height             : 31
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg44
   ch  SU(3): Latency=1
  Successors:
   val SU(5): Latency=15 Reg=%vreg47
   ch  SU(5): Latency=0

SU(5):   SW %vreg46, %vreg47, 12; mem:ST4[%51] GR32Bit:%vreg46,%vreg47
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 36
  Height             : 16
  Predecessors:
   val SU(4): Latency=15 Reg=%vreg47
   val SU(2): Latency=4 Reg=%vreg46
   ch  SU(4): Latency=0
   ch  SU(3): Latency=0
  Successors:
   ch  SU(7): Latency=0
   ch  SU(6): Latency=1

SU(6):   %vreg48<def> = LW %vreg44, 0; mem:LD4[%2] GR32Bit:%vreg48,%vreg44
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 37
  Height             : 15
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg44
   ch  SU(5): Latency=1
  Successors:
   val SU(7): Latency=15 Reg=%vreg48
   ch  SU(7): Latency=0

SU(7):   SW %zero, %vreg48, 16; mem:ST4[%53] GR32Bit:%vreg48
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 52
  Height             : 0
  Predecessors:
   val SU(6): Latency=15 Reg=%vreg48
   ch  SU(6): Latency=0
   ch  SU(5): Latency=0

Pick node SU(2)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg46<def> = ADDI %zero, 1; GR32Bit:%vreg46
handleMove 4948B -> 4928B: %vreg46<def> = ADDI %zero, 1; GR32Bit:%vreg46
     %vreg46:	[4948r,4972r:0)  0@4948r
        -->	[4928r,4972r:0)  0@4928r
     zero:	[4r,4d:11)[308r,308d:10)[524r,524d:9)[740r,740d:8)[1696r,1696d:7)[1704r,1704d:6)[1712r,1712d:5)[1720r,1720d:4)[1728r,1728d:3)[1736r,1736d:2)[1744r,1744d:1)[1752r,1752d:0)  0@1752r 1@1744r 2@1736r 3@1728r 4@1720r 5@1712r 6@1704r 7@1696r 8@740r 9@524r 10@308r 11@4r
        -->	[4r,4d:11)[308r,308d:10)[524r,524d:9)[740r,740d:8)[1696r,1696d:7)[1704r,1704d:6)[1712r,1712d:5)[1720r,1720d:4)[1728r,1728d:3)[1736r,1736d:2)[1744r,1744d:1)[1752r,1752d:0)  0@1752r 1@1744r 2@1736r 3@1728r 4@1720r 5@1712r 6@1704r 7@1696r 8@740r 9@524r 10@308r 11@4r
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg44<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg44
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg45<def> = LW %vreg44, 0; mem:LD4[%2] GR32Bit:%vreg45,%vreg44
Pick node SU(3)  ILP: 4 / 21 = 0.190476 Tree: 0 @0
Scheduling SW %vreg46, %vreg45, 8; mem:ST4[%49] GR32Bit:%vreg46,%vreg45
Pick node SU(4)  ILP: 1 / 22 = 0.0454545 Tree: 1 @0
Scheduling %vreg47<def> = LW %vreg44, 0; mem:LD4[%2] GR32Bit:%vreg47,%vreg44
Pick node SU(5)  ILP: 2 / 37 = 0.0540541 Tree: 1 @0
Scheduling SW %vreg46, %vreg47, 12; mem:ST4[%51] GR32Bit:%vreg46,%vreg47
Pick node SU(6)  ILP: 1 / 38 = 0.0263158 Tree: 2 @0
Scheduling %vreg48<def> = LW %vreg44, 0; mem:LD4[%2] GR32Bit:%vreg48,%vreg44
Pick node SU(7)  ILP: 2 / 53 = 0.0377358 Tree: 2 @0
Scheduling SW %zero, %vreg48, 16; mem:ST4[%53] GR32Bit:%vreg48
*** Final schedule for BB#10 ***
SU(2):   %vreg46<def> = ADDI %zero, 1; GR32Bit:%vreg46
SU(0):   %vreg44<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg44
SU(1):   %vreg45<def> = LW %vreg44, 0; mem:LD4[%2] GR32Bit:%vreg45,%vreg44
SU(3):   SW %vreg46, %vreg45, 8; mem:ST4[%49] GR32Bit:%vreg46,%vreg45
SU(4):   %vreg47<def> = LW %vreg44, 0; mem:LD4[%2] GR32Bit:%vreg47,%vreg44
SU(5):   SW %vreg46, %vreg47, 12; mem:ST4[%51] GR32Bit:%vreg46,%vreg47
SU(6):   %vreg48<def> = LW %vreg44, 0; mem:LD4[%2] GR32Bit:%vreg48,%vreg44
SU(7):   SW %zero, %vreg48, 16; mem:ST4[%53] GR32Bit:%vreg48

Partitioning instructions of the region into multiple CEs
instr:  %vreg46<def> = ADDI %zero, 1; GR32Bit:%vreg46
instr:  %vreg44<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg44
instr:  %vreg45<def> = LW %vreg44, 0; mem:LD4[%2] GR32Bit:%vreg45,%vreg44
instr:  SW %vreg46, %vreg45, 8; mem:ST4[%49] GR32Bit:%vreg46,%vreg45
instr:  %vreg47<def> = LW %vreg44, 0; mem:LD4[%2] GR32Bit:%vreg47,%vreg44
instr:  SW %vreg46, %vreg47, 12; mem:ST4[%51] GR32Bit:%vreg46,%vreg47
instr:  %vreg48<def> = LW %vreg44, 0; mem:LD4[%2] GR32Bit:%vreg48,%vreg44
instr:  SW %zero, %vreg48, 16; mem:ST4[%53] GR32Bit:%vreg48
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
After Shuffling regions of basic block, state of BB#10:
BB#10: derived from LLVM BB %startup_fuel_valves3.if.then
    Predecessors according to CFG: BB#0
	%vreg46<def> = ADDI %zero, 1; GR32Bit:%vreg46
	%vreg44<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg44
	%vreg45<def> = LW %vreg44, 0; mem:LD4[%2] GR32Bit:%vreg45,%vreg44
	SW %vreg46, %vreg45, 8; mem:ST4[%49] GR32Bit:%vreg46,%vreg45
	%vreg47<def> = LW %vreg44, 0; mem:LD4[%2] GR32Bit:%vreg47,%vreg44
	SW %vreg46, %vreg47, 12; mem:ST4[%51] GR32Bit:%vreg46,%vreg47
	%vreg48<def> = LW %vreg44, 0; mem:LD4[%2] GR32Bit:%vreg48,%vreg44
	SW %zero, %vreg48, 16; mem:ST4[%53] GR32Bit:%vreg48
    Successors according to CFG: BB#11
Creating pHyperOp bundles for CEs for bb10
starting at   %vreg46<def> = ADDI %zero, 1; GR32Bit:%vreg46

*** Renumbered SlotIndexes 4928-5048 ***
starting at   %zero<def> = ADDI %zero, 0
starting at   %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 4940-5060 ***
starting at   %zero<def> = ADDI %zero, 0
After bundling, state of BB10:BB#10: derived from LLVM BB %startup_fuel_valves3.if.then
    Predecessors according to CFG: BB#0
	%vreg46<def> = ADDI %zero, 1; GR32Bit:%vreg46
	  * %vreg44<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg44
	  * %vreg45<def> = LW %vreg44, 0; mem:LD4[%2] GR32Bit:%vreg45,%vreg44
	  * SW %vreg46, %vreg45, 8; mem:ST4[%49] GR32Bit:%vreg46,%vreg45
	  * %vreg47<def> = LW %vreg44, 0; mem:LD4[%2] GR32Bit:%vreg47,%vreg44
	  * SW %vreg46, %vreg47, 12; mem:ST4[%51] GR32Bit:%vreg46,%vreg47
	  * %vreg48<def> = LW %vreg44, 0; mem:LD4[%2] GR32Bit:%vreg48,%vreg44
	  * SW %zero, %vreg48, 16; mem:ST4[%53] GR32Bit:%vreg48
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#11

-------------
Starting new basic block BB#11
********** MI Scheduling **********
startup_fuel_valves3:BB#11 startup_fuel_valves3.return
  From: %vreg49<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg49
    To: End Remaining: 0
Max Pressure: GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 2
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
SU(0):   %vreg49<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg49
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
   val SU(1): Latency=5 Reg=%vreg49

SU(1):   %vreg50<def> = LW %vreg49, 0; mem:LD4[%2] GR32Bit:%vreg50,%vreg49
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 2
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg49
  Successors:
   val SU(3): Latency=2 Reg=%vreg50

SU(2):   %vreg51<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg51
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(3): Latency=5 Reg=%vreg51

SU(3):   SW %vreg50, %vreg51, 0; mem:ST4[%1] GR32Bit:%vreg50,%vreg51
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 7
  Height             : 0
  Predecessors:
   val SU(1): Latency=2 Reg=%vreg50
   val SU(2): Latency=5 Reg=%vreg51
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg49<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg49
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
   val SU(1): Latency=5 Reg=%vreg49

SU(1):   %vreg50<def> = LW %vreg49, 0; mem:LD4[%2] GR32Bit:%vreg50,%vreg49
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 2
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg49
  Successors:
   val SU(3): Latency=2 Reg=%vreg50

SU(2):   %vreg51<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg51
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(3): Latency=5 Reg=%vreg51

SU(3):   SW %vreg50, %vreg51, 0; mem:ST4[%1] GR32Bit:%vreg50,%vreg51
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 7
  Height             : 0
  Predecessors:
   val SU(1): Latency=2 Reg=%vreg50
   val SU(2): Latency=5 Reg=%vreg51
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(2)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg51<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg51
handleMove 5044B -> 5024B: %vreg51<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg51
     %vreg51:	[5044r,5052r:0)  0@5044r
        -->	[5024r,5052r:0)  0@5024r
     t5:	EMPTY
        -->	EMPTY
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg49<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg49
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg50<def> = LW %vreg49, 0; mem:LD4[%2] GR32Bit:%vreg50,%vreg49
Pick node SU(3)  ILP: 4 / 8 = 0.5 Tree: 0 @0
Scheduling SW %vreg50, %vreg51, 0; mem:ST4[%1] GR32Bit:%vreg50,%vreg51
*** Final schedule for BB#11 ***
SU(2):   %vreg51<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg51
SU(0):   %vreg49<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg49
SU(1):   %vreg50<def> = LW %vreg49, 0; mem:LD4[%2] GR32Bit:%vreg50,%vreg49
SU(3):   SW %vreg50, %vreg51, 0; mem:ST4[%1] GR32Bit:%vreg50,%vreg51

Partitioning instructions of the region into multiple CEs
instr:  %vreg51<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg51
instr:  %vreg49<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg49
instr:  %vreg50<def> = LW %vreg49, 0; mem:LD4[%2] GR32Bit:%vreg50,%vreg49
instr:  SW %vreg50, %vreg51, 0; mem:ST4[%1] GR32Bit:%vreg50,%vreg51
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
before falloc, state of bb11:BB#11: derived from LLVM BB %startup_fuel_valves3.return
    Predecessors according to CFG: BB#7 BB#8 BB#9 BB#10
	%vreg51<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg51
	%vreg49<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg49
	%vreg50<def> = LW %vreg49, 0; mem:LD4[%2] GR32Bit:%vreg50,%vreg49
	SW %vreg50, %vreg51, 0; mem:ST4[%1] GR32Bit:%vreg50,%vreg51
Adding all fallocs first to avoid stalls due to sequential fallocs and fbinds
Adding writecm(for writing sync count to context frames) and fbind instructions
live end of child is itself
live end of child is itself
Adding localref sw instructions to hyperOp startup_fuel_valves3

*** Renumbered SlotIndexes 5056-5072 ***

*** Renumbered SlotIndexes 5068-5084 ***

*** Renumbered SlotIndexes 5080-5096 ***

*** Renumbered SlotIndexes 5092-5108 ***

*** Renumbered SlotIndexes 5104-5120 ***

*** Renumbered SlotIndexes 5116-5132 ***

*** Renumbered SlotIndexes 5128-5144 ***

*** Renumbered SlotIndexes 5140-5156 ***

*** Renumbered SlotIndexes 5152-5168 ***
localref sw to redefine_start2:  SW %vreg217, %vreg216, 4; GR32Bit:%vreg217,%vreg216
Adding writecm instructions to hyperOp startup_fuel_valves3
Adding writecmp and sync instructions
problem with which child exactly?redefine_start2 with edge of type:6

*** Renumbered SlotIndexes 5164-5180 ***

*** Renumbered SlotIndexes 5176-5192 ***

*** Renumbered SlotIndexes 5188-5204 ***

*** Renumbered SlotIndexes 5200-5216 ***
Adding endHyperOp instructions to each pHyperOp

*** Renumbered SlotIndexes 5204-5228 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 5216-5240 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 5228-5252 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 5240-5264 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 5252-5276 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 5264-5288 ***
  %zero<def> = ADDI %zero, 0
After Shuffling regions of basic block, state of BB#11:
BB#11: derived from LLVM BB %startup_fuel_valves3.return
    Predecessors according to CFG: BB#7 BB#8 BB#9 BB#10
	%vreg51<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg51
	%vreg49<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg49
	%vreg50<def> = LW %vreg49, 0; mem:LD4[%2] GR32Bit:%vreg50,%vreg49
	SW %vreg50, %vreg51, 0; mem:ST4[%1] GR32Bit:%vreg50,%vreg51
	%vreg197<def> = ADDI %zero, 128; GR32Bit:%vreg197
	%vreg198<def> = ADDI %zero, 1; GR32Bit:%vreg198
	WRITECM %vreg197, %vreg198, 60; GR32Bit:%vreg197,%vreg198
	%vreg199<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg199
	%vreg200<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg200
	%vreg201<def> = SRLI %vreg200, 12; GR32Bit:%vreg201,%vreg200
	%vreg202<def> = ADD %vreg199, %vreg201; GR32Bit:%vreg202,%vreg199,%vreg201
	%vreg203<def> = ADDI %zero, 16; GR32Bit:%vreg203
	%vreg204<def> = SRLI %vreg197, 22; GR32Bit:%vreg204,%vreg197
	%vreg205<def> = SRLI %vreg197, 12; GR32Bit:%vreg205,%vreg197
	%vreg206<def> = ANDI %vreg205, 15; GR32Bit:%vreg206,%vreg205
	%vreg207<def> = SRLI %vreg197, 6; GR32Bit:%vreg207,%vreg197
	%vreg208<def> = ANDI %vreg207, 63; GR32Bit:%vreg208,%vreg207
	%vreg209<def> = ADDI %zero, 832; GR32Bit:%vreg209
	%vreg210<def> = MUL %vreg204, %vreg209; GR32Bit:%vreg210,%vreg204,%vreg209
	%vreg211<def> = ADDI %zero, 52; GR32Bit:%vreg211
	%vreg212<def> = MUL %vreg206, %vreg211; GR32Bit:%vreg212,%vreg206,%vreg211
	%vreg213<def> = ADD %vreg212, %vreg208; GR32Bit:%vreg213,%vreg212,%vreg208
	%vreg214<def> = ADD %vreg213, %vreg210; GR32Bit:%vreg214,%vreg213,%vreg210
	%vreg215<def> = MUL %vreg214, %vreg203; GR32Bit:%vreg215,%vreg214,%vreg203
	%vreg216<def> = ADD %vreg215, %vreg202; GR32Bit:%vreg216,%vreg215,%vreg202
	%vreg217<def> = LW %t5, 0; GR32Bit:%vreg217
	SW %vreg217, %vreg216, 4; GR32Bit:%vreg217,%vreg216
	%vreg218<def> = LUI 1; GR32Bit:%vreg218
	WRITEPM %vreg218, %vreg197, 0; GR32Bit:%vreg218,%vreg197
	FDELETE %t4, 0
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg219<def> = LUI 1; GR32Bit:%vreg219
	%vreg220<def> = DREADPM %vreg219, 0; GR32Bit:%vreg220,%vreg219
	%vreg221<def> = ADDI %zero, -1; GR32Bit:%vreg221
	SYNC %vreg220, %vreg221, 60; GR32Bit:%vreg220,%vreg221
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 5176-5336 ***

*** Renumbered SlotIndexes 5176-5352 ***

*** Renumbered SlotIndexes 5064-5400 ***

*** Renumbered SlotIndexes 5052-5420 ***
Creating pHyperOp bundles for CEs for bb11
  %vreg219<def> = LUI 1; GR32Bit:%vreg219
starting at   %vreg51<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg51
  END 0
starting at   %vreg219<def> = LUI 1; GR32Bit:%vreg219
  END 0
starting at   END 0
starting at   END 0
After bundling, state of BB11:BB#11: derived from LLVM BB %startup_fuel_valves3.return
    Predecessors according to CFG: BB#7 BB#8 BB#9 BB#10
	%vreg51<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg51
	  * %vreg49<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg49
	  * %vreg50<def> = LW %vreg49, 0; mem:LD4[%2] GR32Bit:%vreg50,%vreg49
	  * SW %vreg50, %vreg51, 0; mem:ST4[%1] GR32Bit:%vreg50,%vreg51
	  * %vreg197<def> = ADDI %zero, 128; GR32Bit:%vreg197
	  * %vreg198<def> = ADDI %zero, 1; GR32Bit:%vreg198
	  * WRITECM %vreg197, %vreg198, 60; GR32Bit:%vreg197,%vreg198
	  * %vreg199<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg199
	  * %vreg200<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg200
	  * %vreg201<def> = SRLI %vreg200, 12; GR32Bit:%vreg201,%vreg200
	  * %vreg202<def> = ADD %vreg199, %vreg201; GR32Bit:%vreg202,%vreg199,%vreg201
	  * %vreg203<def> = ADDI %zero, 16; GR32Bit:%vreg203
	  * %vreg204<def> = SRLI %vreg197, 22; GR32Bit:%vreg204,%vreg197
	  * %vreg205<def> = SRLI %vreg197, 12; GR32Bit:%vreg205,%vreg197
	  * %vreg206<def> = ANDI %vreg205, 15; GR32Bit:%vreg206,%vreg205
	  * %vreg207<def> = SRLI %vreg197, 6; GR32Bit:%vreg207,%vreg197
	  * %vreg208<def> = ANDI %vreg207, 63; GR32Bit:%vreg208,%vreg207
	  * %vreg209<def> = ADDI %zero, 832; GR32Bit:%vreg209
	  * %vreg210<def> = MUL %vreg204, %vreg209; GR32Bit:%vreg210,%vreg204,%vreg209
	  * %vreg211<def> = ADDI %zero, 52; GR32Bit:%vreg211
	  * %vreg212<def> = MUL %vreg206, %vreg211; GR32Bit:%vreg212,%vreg206,%vreg211
	  * %vreg213<def> = ADD %vreg212, %vreg208; GR32Bit:%vreg213,%vreg212,%vreg208
	  * %vreg214<def> = ADD %vreg213, %vreg210; GR32Bit:%vreg214,%vreg213,%vreg210
	  * %vreg215<def> = MUL %vreg214, %vreg203; GR32Bit:%vreg215,%vreg214,%vreg203
	  * %vreg216<def> = ADD %vreg215, %vreg202; GR32Bit:%vreg216,%vreg215,%vreg202
	  * %vreg217<def> = LW %t5, 0; GR32Bit:%vreg217
	  * SW %vreg217, %vreg216, 4; GR32Bit:%vreg217,%vreg216
	  * %vreg218<def> = LUI 1; GR32Bit:%vreg218
	  * WRITEPM %vreg218, %vreg197, 0; GR32Bit:%vreg218,%vreg197
	  * FDELETE %t4, 0
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg219<def> = LUI 1; GR32Bit:%vreg219
	  * %vreg220<def> = DREADPM %vreg219, 0; GR32Bit:%vreg220,%vreg219
	  * %vreg221<def> = ADDI %zero, -1; GR32Bit:%vreg221
	  * SYNC %vreg220, %vreg221, 60; GR32Bit:%vreg220,%vreg221
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
Patching the instructions that are supposed to use the physical registers r30 and r31
Computing live-in reg-units in ABI blocks.
Created 0 new intervals.

*** Renumbered SlotIndexes 1252-5572 ***

*** Renumbered SlotIndexes 1264-5584 ***

*** Renumbered SlotIndexes 1284-5596 ***

*** Renumbered SlotIndexes 1824-5608 ***

*** Renumbered SlotIndexes 2868-5620 ***

*** Renumbered SlotIndexes 3776-5632 ***

*** Renumbered SlotIndexes 4316-5644 ***
********** INTERVALS **********
t5 = EMPTY
zero = [4r,4d:11)[308r,308d:10)[524r,524d:9)[740r,740d:8)[1748r,1748d:7)[1756r,1756d:6)[1764r,1764d:5)[1772r,1772d:4)[1780r,1780d:3)[1788r,1788d:2)[1796r,1796d:1)[1804r,1804d:0)  0@1804r 1@1796r 2@1788r 3@1780r 4@1772r 5@1764r 6@1756r 7@1748r 8@740r 9@524r 10@308r 11@4r
%vreg0 = [156r,196r:0)  0@156r
%vreg1 = [164r,180r:0)  0@164r
%vreg2 = [180r,188r:0)  0@180r
%vreg3 = [148r,188r:0)  0@148r
%vreg4 = [196r,204r:0)  0@196r
%vreg5 = [204r,260r:0)  0@204r
%vreg6 = [1300r,1308r:0)  0@1300r
%vreg7 = [1308r,1332r:0)  0@1308r
%vreg8 = [1280r,1324r:0)  0@1280r
%vreg9 = [1332r,1388r:0)  0@1332r
%vreg10 = [1324r,1332r:0)  0@1324r
%vreg11 = [1840r,1848r:0)  0@1840r
%vreg12 = [1848r,1872r:0)  0@1848r
%vreg13 = [1820r,1864r:0)  0@1820r
%vreg14 = [1872r,1928r:0)  0@1872r
%vreg15 = [1864r,1872r:0)  0@1864r
%vreg16 = [3716r,3748r:0)  0@3716r
%vreg17 = [3724r,3740r:0)  0@3724r
%vreg18 = [3684r,3756r:0)  0@3684r
%vreg19 = [3748r,3756r:0)  0@3748r
%vreg20 = [2360r,2368r:0)  0@2360r
%vreg21 = [2368r,2376r:0)  0@2368r
%vreg22 = [2376r,2432r:0)  0@2376r
%vreg23 = [2884r,2908r:0)  0@2884r
%vreg24 = [2892r,2900r:0)  0@2892r
%vreg25 = [2908r,2916r:0)  0@2908r
%vreg26 = [2916r,2996r:0)  0@2916r
%vreg27 = [2864r,2996r:0)  0@2864r
%vreg28 = [3500r,3508r:0)  0@3500r
%vreg29 = [3508r,3524r:0)  0@3508r
%vreg30 = [3516r,3524r:0)  0@3516r
%vreg31 = [3792r,3800r:0)  0@3792r
%vreg32 = [3800r,3824r:0)  0@3800r
%vreg33 = [3772r,3816r:0)  0@3772r
%vreg34 = [3824r,3880r:0)  0@3824r
%vreg35 = [3816r,3824r:0)  0@3816r
%vreg36 = [4332r,4356r:0)  0@4332r
%vreg37 = [4340r,4348r:0)  0@4340r
%vreg38 = [4356r,4364r:0)  0@4356r
%vreg39 = [4364r,4444r:0)  0@4364r
%vreg40 = [4312r,4444r:0)  0@4312r
%vreg41 = [4948r,4956r:0)  0@4948r
%vreg42 = [4956r,4972r:0)  0@4956r
%vreg43 = [4964r,4972r:0)  0@4964r
%vreg44 = [5164r,5212r:0)  0@5164r
%vreg45 = [5172r,5188r:0)  0@5172r
%vreg46 = [5132r,5204r:0)  0@5132r
%vreg47 = [5196r,5204r:0)  0@5196r
%vreg48 = [5212r,5220r:0)  0@5212r
%vreg49 = [5244r,5252r:0)  0@5244r
%vreg50 = [5252r,5268r:0)  0@5252r
%vreg51 = [5236r,5268r:0)  0@5236r
%vreg52 = [4r,4d:0)  0@4r
%vreg53 = [140r,140d:0)  0@140r
%vreg54 = [12r,28r:0)  0@12r
%vreg55 = [16r,20r:0)  0@16r
%vreg56 = [20r,28r:0)  0@20r
%vreg57 = [28r,140r:0)  0@28r
%vreg58 = [36r,132r:0)  0@36r
%vreg59 = [44r,92r:0)  0@44r
%vreg60 = [52r,60r:0)  0@52r
%vreg61 = [60r,108r:0)  0@60r
%vreg62 = [68r,76r:0)  0@68r
%vreg63 = [76r,116r:0)  0@76r
%vreg64 = [84r,92r:0)  0@84r
%vreg65 = [92r,124r:0)  0@92r
%vreg66 = [100r,108r:0)  0@100r
%vreg67 = [108r,116r:0)  0@108r
%vreg68 = [116r,124r:0)  0@116r
%vreg69 = [124r,132r:0)  0@124r
%vreg70 = [132r,140r:0)  0@132r
%vreg71 = [308r,308d:0)  0@308r
%vreg72 = [452r,452d:0)  0@452r
%vreg73 = [316r,340r:0)  0@316r
%vreg74 = [324r,332r:0)  0@324r
%vreg75 = [332r,340r:0)  0@332r
%vreg76 = [340r,452r:0)  0@340r
%vreg77 = [348r,444r:0)  0@348r
%vreg78 = [356r,404r:0)  0@356r
%vreg79 = [364r,372r:0)  0@364r
%vreg80 = [372r,420r:0)  0@372r
%vreg81 = [380r,388r:0)  0@380r
%vreg82 = [388r,428r:0)  0@388r
%vreg83 = [396r,404r:0)  0@396r
%vreg84 = [404r,436r:0)  0@404r
%vreg85 = [412r,420r:0)  0@412r
%vreg86 = [420r,428r:0)  0@420r
%vreg87 = [428r,436r:0)  0@428r
%vreg88 = [436r,444r:0)  0@436r
%vreg89 = [444r,452r:0)  0@444r
%vreg90 = [524r,524d:0)  0@524r
%vreg91 = [668r,668d:0)  0@668r
%vreg92 = [532r,556r:0)  0@532r
%vreg93 = [540r,548r:0)  0@540r
%vreg94 = [548r,556r:0)  0@548r
%vreg95 = [556r,668r:0)  0@556r
%vreg96 = [564r,660r:0)  0@564r
%vreg97 = [572r,620r:0)  0@572r
%vreg98 = [580r,588r:0)  0@580r
%vreg99 = [588r,636r:0)  0@588r
%vreg100 = [596r,604r:0)  0@596r
%vreg101 = [604r,644r:0)  0@604r
%vreg102 = [612r,620r:0)  0@612r
%vreg103 = [620r,652r:0)  0@620r
%vreg104 = [628r,636r:0)  0@628r
%vreg105 = [636r,644r:0)  0@636r
%vreg106 = [644r,652r:0)  0@644r
%vreg107 = [652r,660r:0)  0@652r
%vreg108 = [660r,668r:0)  0@660r
%vreg109 = [740r,740d:0)  0@740r
%vreg110 = [884r,884d:0)  0@884r
%vreg111 = [748r,772r:0)  0@748r
%vreg112 = [756r,764r:0)  0@756r
%vreg113 = [764r,772r:0)  0@764r
%vreg114 = [772r,884r:0)  0@772r
%vreg115 = [780r,876r:0)  0@780r
%vreg116 = [788r,836r:0)  0@788r
%vreg117 = [796r,804r:0)  0@796r
%vreg118 = [804r,852r:0)  0@804r
%vreg119 = [812r,820r:0)  0@812r
%vreg120 = [820r,860r:0)  0@820r
%vreg121 = [828r,836r:0)  0@828r
%vreg122 = [836r,868r:0)  0@836r
%vreg123 = [844r,852r:0)  0@844r
%vreg124 = [852r,860r:0)  0@852r
%vreg125 = [860r,868r:0)  0@860r
%vreg126 = [868r,876r:0)  0@868r
%vreg127 = [876r,884r:0)  0@876r
%vreg128 = [212r,220r:0)  0@212r
%vreg129 = [460r,468r:0)  0@460r
%vreg130 = [228r,236r:0)  0@228r
%vreg131 = [676r,684r:0)  0@676r
%vreg132 = [244r,252r:0)  0@244r
%vreg133 = [1036r,1052r:0)  0@1036r
%vreg134 = [468r,476r:0)  0@468r
%vreg135 = [684r,692r:0)  0@684r
%vreg136 = [1052r,1084r:0)  0@1052r
%vreg137 = [1340r,1348r:0)  0@1340r
%vreg138 = [1436r,1452r:0)  0@1436r
%vreg139 = [1356r,1364r:0)  0@1356r
%vreg140 = [1516r,1532r:0)  0@1516r
%vreg141 = [1372r,1380r:0)  0@1372r
%vreg142 = [1596r,1612r:0)  0@1596r
%vreg143 = [1452r,1460r:0)  0@1452r
%vreg144 = [1532r,1540r:0)  0@1532r
%vreg145 = [1612r,1644r:0)  0@1612r
%vreg146 = [1880r,1888r:0)  0@1880r
%vreg147 = [1976r,1992r:0)  0@1976r
%vreg148 = [1896r,1904r:0)  0@1896r
%vreg149 = [2056r,2072r:0)  0@2056r
%vreg150 = [1912r,1920r:0)  0@1912r
%vreg151 = [2136r,2152r:0)  0@2136r
%vreg152 = [1992r,2000r:0)  0@1992r
%vreg153 = [2072r,2080r:0)  0@2072r
%vreg154 = [2152r,2184r:0)  0@2152r
%vreg155 = [2384r,2392r:0)  0@2384r
%vreg156 = [2480r,2496r:0)  0@2480r
%vreg157 = [2400r,2408r:0)  0@2400r
%vreg158 = [2560r,2576r:0)  0@2560r
%vreg159 = [2416r,2424r:0)  0@2416r
%vreg160 = [2640r,2656r:0)  0@2640r
%vreg161 = [2496r,2504r:0)  0@2496r
%vreg162 = [2576r,2584r:0)  0@2576r
%vreg163 = [2656r,2688r:0)  0@2656r
%vreg164 = [2924r,2972r:0)  0@2924r
%vreg165 = [3044r,3068r:0)  0@3044r
%vreg166 = [2940r,2980r:0)  0@2940r
%vreg167 = [3132r,3156r:0)  0@3132r
%vreg168 = [2956r,2988r:0)  0@2956r
%vreg169 = [3220r,3284r:0)  0@3220r
%vreg170 = [3060r,3076r:0)  0@3060r
%vreg171 = [3148r,3164r:0)  0@3148r
%vreg172 = [3236r,3324r:0)  0@3236r
%vreg173 = [3068r,3076r:0)  0@3068r
%vreg174 = [3156r,3164r:0)  0@3156r
%vreg175 = [3284r,3324r:0)  0@3284r
%vreg176 = [3832r,3840r:0)  0@3832r
%vreg177 = [3928r,3944r:0)  0@3928r
%vreg178 = [3848r,3856r:0)  0@3848r
%vreg179 = [4008r,4024r:0)  0@4008r
%vreg180 = [3864r,3872r:0)  0@3864r
%vreg181 = [4088r,4104r:0)  0@4088r
%vreg182 = [3944r,3952r:0)  0@3944r
%vreg183 = [4024r,4032r:0)  0@4024r
%vreg184 = [4104r,4136r:0)  0@4104r
%vreg185 = [4372r,4420r:0)  0@4372r
%vreg186 = [4492r,4516r:0)  0@4492r
%vreg187 = [4388r,4428r:0)  0@4388r
%vreg188 = [4580r,4604r:0)  0@4580r
%vreg189 = [4404r,4436r:0)  0@4404r
%vreg190 = [4668r,4732r:0)  0@4668r
%vreg191 = [4508r,4524r:0)  0@4508r
%vreg192 = [4596r,4612r:0)  0@4596r
%vreg193 = [4684r,4772r:0)  0@4684r
%vreg194 = [4516r,4524r:0)  0@4516r
%vreg195 = [4604r,4612r:0)  0@4604r
%vreg196 = [4732r,4772r:0)  0@4732r
%vreg197 = [5276r,5468r:0)  0@5276r
%vreg198 = [5284r,5292r:0)  0@5284r
%vreg199 = [5300r,5324r:0)  0@5300r
%vreg200 = [5308r,5316r:0)  0@5308r
%vreg201 = [5316r,5324r:0)  0@5316r
%vreg202 = [5324r,5436r:0)  0@5324r
%vreg203 = [5332r,5428r:0)  0@5332r
%vreg204 = [5340r,5388r:0)  0@5340r
%vreg205 = [5348r,5356r:0)  0@5348r
%vreg206 = [5356r,5404r:0)  0@5356r
%vreg207 = [5364r,5372r:0)  0@5364r
%vreg208 = [5372r,5412r:0)  0@5372r
%vreg209 = [5380r,5388r:0)  0@5380r
%vreg210 = [5388r,5420r:0)  0@5388r
%vreg211 = [5396r,5404r:0)  0@5396r
%vreg212 = [5404r,5412r:0)  0@5404r
%vreg213 = [5412r,5420r:0)  0@5412r
%vreg214 = [5420r,5428r:0)  0@5420r
%vreg215 = [5428r,5436r:0)  0@5428r
%vreg216 = [5436r,5452r:0)  0@5436r
%vreg217 = [5444r,5452r:0)  0@5444r
%vreg218 = [5460r,5468r:0)  0@5460r
%vreg219 = [5508r,5516r:0)  0@5508r
%vreg220 = [5516r,5644B:0)  0@5516r
%vreg221 = [5524r,5532r:0)  0@5524r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function startup_fuel_valves3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %startup_fuel_valves3.entry
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg54<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg54
4B		  * %vreg55<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg55
4B		  * %vreg56<def> = SRLI %vreg55, 12; GR32Bit:%vreg56,%vreg55
4B		  * %vreg57<def> = ADD %vreg54, %vreg56; GR32Bit:%vreg57,%vreg54,%vreg56
4B		  * %vreg58<def> = ADDI %zero, 16; GR32Bit:%vreg58
4B		  * %vreg59<def> = SRLI %t5, 22; GR32Bit:%vreg59
4B		  * %vreg60<def> = SRLI %t5, 12; GR32Bit:%vreg60
4B		  * %vreg61<def> = ANDI %vreg60, 15; GR32Bit:%vreg61,%vreg60
4B		  * %vreg62<def> = SRLI %t5, 6; GR32Bit:%vreg62
4B		  * %vreg63<def> = ANDI %vreg62, 63; GR32Bit:%vreg63,%vreg62
4B		  * %vreg64<def> = ADDI %zero, 832; GR32Bit:%vreg64
4B		  * %vreg65<def> = MUL %vreg59, %vreg64; GR32Bit:%vreg65,%vreg59,%vreg64
4B		  * %vreg66<def> = ADDI %zero, 52; GR32Bit:%vreg66
4B		  * %vreg67<def> = MUL %vreg61, %vreg66; GR32Bit:%vreg67,%vreg61,%vreg66
4B		  * %vreg68<def> = ADD %vreg67, %vreg63; GR32Bit:%vreg68,%vreg67,%vreg63
4B		  * %vreg69<def> = ADD %vreg68, %vreg65; GR32Bit:%vreg69,%vreg68,%vreg65
4B		  * %vreg70<def> = MUL %vreg69, %vreg58; GR32Bit:%vreg70,%vreg69,%vreg58
4B		  * %t5<def> = ADD %vreg57, %vreg70; GR32Bit:%vreg57,%vreg70
4B		  * %vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
4B		  * %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
4B		  * %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
4B		  * SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
4B		  * %vreg2<def> = FLW %vreg1, 0; mem:LD4[%6](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
4B		  * FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
4B		  * %vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
4B		  * %vreg5<def> = LW %vreg4, 4; mem:LD4[%9] GR32Bit:%vreg5,%vreg4
4B		  * %vreg128<def> = LUI 1; GR32Bit:%vreg128
4B		  * WRITEPM %vreg128, %vreg5, 0; GR32Bit:%vreg128,%vreg5
4B		  * %vreg130<def> = LUI 2; GR32Bit:%vreg130
4B		  * WRITEPM %vreg130, %vreg5, 0; GR32Bit:%vreg130,%vreg5
4B		  * %vreg132<def> = LUI 3; GR32Bit:%vreg132
4B		  * WRITEPM %vreg132, %vreg5, 0; GR32Bit:%vreg132,%vreg5
4B		  * BEQ <BB#10>, %vreg5, %zero; GR32Bit:%vreg5
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
4B		  * JAL <BB#1>
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
308B		%t4<def> = ADD %t5, %zero
308B		  * %vreg73<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg73
308B		  * %vreg74<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg74
308B		  * %vreg75<def> = SRLI %vreg74, 12; GR32Bit:%vreg75,%vreg74
308B		  * %vreg76<def> = ADD %vreg73, %vreg75; GR32Bit:%vreg76,%vreg73,%vreg75
308B		  * %vreg77<def> = ADDI %zero, 16; GR32Bit:%vreg77
308B		  * %vreg78<def> = SRLI %t5, 22; GR32Bit:%vreg78
308B		  * %vreg79<def> = SRLI %t5, 12; GR32Bit:%vreg79
308B		  * %vreg80<def> = ANDI %vreg79, 15; GR32Bit:%vreg80,%vreg79
308B		  * %vreg81<def> = SRLI %t5, 6; GR32Bit:%vreg81
308B		  * %vreg82<def> = ANDI %vreg81, 63; GR32Bit:%vreg82,%vreg81
308B		  * %vreg83<def> = ADDI %zero, 832; GR32Bit:%vreg83
308B		  * %vreg84<def> = MUL %vreg78, %vreg83; GR32Bit:%vreg84,%vreg78,%vreg83
308B		  * %vreg85<def> = ADDI %zero, 52; GR32Bit:%vreg85
308B		  * %vreg86<def> = MUL %vreg80, %vreg85; GR32Bit:%vreg86,%vreg80,%vreg85
308B		  * %vreg87<def> = ADD %vreg86, %vreg82; GR32Bit:%vreg87,%vreg86,%vreg82
308B		  * %vreg88<def> = ADD %vreg87, %vreg84; GR32Bit:%vreg88,%vreg87,%vreg84
308B		  * %vreg89<def> = MUL %vreg88, %vreg77; GR32Bit:%vreg89,%vreg88,%vreg77
308B		  * %t5<def> = ADD %vreg76, %vreg89; GR32Bit:%vreg76,%vreg89
308B		  * %vreg129<def> = LUI 1; GR32Bit:%vreg129
308B		  * %vreg134<def> = DREADPM %vreg129, 0; GR32Bit:%vreg134,%vreg129
308B		  * BEQ <BB#10>, %vreg134, %zero; GR32Bit:%vreg134
308B		  * %zero<def> = ADDI %zero, 0
308B		  * %zero<def> = ADDI %zero, 0
308B		  * JAL <BB#1>
308B		  * %zero<def> = ADDI %zero, 0
308B		  * %zero<def> = ADDI %zero, 0
524B		%t4<def> = ADD %t5, %zero
524B		  * %vreg92<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg92
524B		  * %vreg93<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg93
524B		  * %vreg94<def> = SRLI %vreg93, 12; GR32Bit:%vreg94,%vreg93
524B		  * %vreg95<def> = ADD %vreg92, %vreg94; GR32Bit:%vreg95,%vreg92,%vreg94
524B		  * %vreg96<def> = ADDI %zero, 16; GR32Bit:%vreg96
524B		  * %vreg97<def> = SRLI %t5, 22; GR32Bit:%vreg97
524B		  * %vreg98<def> = SRLI %t5, 12; GR32Bit:%vreg98
524B		  * %vreg99<def> = ANDI %vreg98, 15; GR32Bit:%vreg99,%vreg98
524B		  * %vreg100<def> = SRLI %t5, 6; GR32Bit:%vreg100
524B		  * %vreg101<def> = ANDI %vreg100, 63; GR32Bit:%vreg101,%vreg100
524B		  * %vreg102<def> = ADDI %zero, 832; GR32Bit:%vreg102
524B		  * %vreg103<def> = MUL %vreg97, %vreg102; GR32Bit:%vreg103,%vreg97,%vreg102
524B		  * %vreg104<def> = ADDI %zero, 52; GR32Bit:%vreg104
524B		  * %vreg105<def> = MUL %vreg99, %vreg104; GR32Bit:%vreg105,%vreg99,%vreg104
524B		  * %vreg106<def> = ADD %vreg105, %vreg101; GR32Bit:%vreg106,%vreg105,%vreg101
524B		  * %vreg107<def> = ADD %vreg106, %vreg103; GR32Bit:%vreg107,%vreg106,%vreg103
524B		  * %vreg108<def> = MUL %vreg107, %vreg96; GR32Bit:%vreg108,%vreg107,%vreg96
524B		  * %t5<def> = ADD %vreg95, %vreg108; GR32Bit:%vreg95,%vreg108
524B		  * %vreg131<def> = LUI 2; GR32Bit:%vreg131
524B		  * %vreg135<def> = DREADPM %vreg131, 0; GR32Bit:%vreg135,%vreg131
524B		  * BEQ <BB#10>, %vreg135, %zero; GR32Bit:%vreg135
524B		  * %zero<def> = ADDI %zero, 0
524B		  * %zero<def> = ADDI %zero, 0
524B		  * JAL <BB#1>
524B		  * %zero<def> = ADDI %zero, 0
524B		  * %zero<def> = ADDI %zero, 0
740B		%t4<def> = ADD %t5, %zero
740B		  * %vreg111<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg111
740B		  * %vreg112<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg112
740B		  * %vreg113<def> = SRLI %vreg112, 12; GR32Bit:%vreg113,%vreg112
740B		  * %vreg114<def> = ADD %vreg111, %vreg113; GR32Bit:%vreg114,%vreg111,%vreg113
740B		  * %vreg115<def> = ADDI %zero, 16; GR32Bit:%vreg115
740B		  * %vreg116<def> = SRLI %t5, 22; GR32Bit:%vreg116
740B		  * %vreg117<def> = SRLI %t5, 12; GR32Bit:%vreg117
740B		  * %vreg118<def> = ANDI %vreg117, 15; GR32Bit:%vreg118,%vreg117
740B		  * %vreg119<def> = SRLI %t5, 6; GR32Bit:%vreg119
740B		  * %vreg120<def> = ANDI %vreg119, 63; GR32Bit:%vreg120,%vreg119
740B		  * %vreg121<def> = ADDI %zero, 832; GR32Bit:%vreg121
740B		  * %vreg122<def> = MUL %vreg116, %vreg121; GR32Bit:%vreg122,%vreg116,%vreg121
740B		  * %vreg123<def> = ADDI %zero, 52; GR32Bit:%vreg123
740B		  * %vreg124<def> = MUL %vreg118, %vreg123; GR32Bit:%vreg124,%vreg118,%vreg123
740B		  * %vreg125<def> = ADD %vreg124, %vreg120; GR32Bit:%vreg125,%vreg124,%vreg120
740B		  * %vreg126<def> = ADD %vreg125, %vreg122; GR32Bit:%vreg126,%vreg125,%vreg122
740B		  * %vreg127<def> = MUL %vreg126, %vreg115; GR32Bit:%vreg127,%vreg126,%vreg115
740B		  * %t5<def> = ADD %vreg114, %vreg127; GR32Bit:%vreg114,%vreg127
740B		  * %vreg133<def> = LUI 3; GR32Bit:%vreg133
740B		  * %vreg136<def> = DREADPM %vreg133, 0; GR32Bit:%vreg136,%vreg133
740B		  * BEQ <BB#10>, %vreg136, %zero; GR32Bit:%vreg136
740B		  * %zero<def> = ADDI %zero, 0
740B		  * %zero<def> = ADDI %zero, 0
740B		  * JAL <BB#1>
740B		  * %zero<def> = ADDI %zero, 0
740B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#10(12) BB#1(20)

1252B	BB#1: derived from LLVM BB %startup_fuel_valves3.if.else
	    Predecessors according to CFG: BB#0
1260B		%vreg8<def> = LUI 284576; GR32Bit:%vreg8
1260B		  * %a5<def> = LUI 0
1260B		  * %a5<def> = SRLI %a5<internal>, 12
1260B		  * ADD %vreg8, %vreg8, %a5; GR32Bit:%vreg8
1260B		  * %vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
1260B		  * %vreg7<def> = FLW %vreg6, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg6
1260B		  * %vreg10<def> = COPY %vreg8; FP32Bit:%vreg10 GR32Bit:%vreg8
1260B		  * %vreg9<def> = FLT_S %vreg10, %vreg7; GR32Bit:%vreg9 FP32Bit:%vreg10,%vreg7
1260B		  * %vreg137<def> = LUI 1; GR32Bit:%vreg137
1260B		  * WRITEPM %vreg137, %vreg9, 0; GR32Bit:%vreg137,%vreg9
1260B		  * %vreg139<def> = LUI 2; GR32Bit:%vreg139
1260B		  * WRITEPM %vreg139, %vreg9, 0; GR32Bit:%vreg139,%vreg9
1260B		  * %vreg141<def> = LUI 3; GR32Bit:%vreg141
1260B		  * WRITEPM %vreg141, %vreg9, 0; GR32Bit:%vreg141,%vreg9
1260B		  * BNE <BB#7>, %vreg9, %zero; GR32Bit:%vreg9
1260B		  * %zero<def> = ADDI %zero, 0
1260B		  * %zero<def> = ADDI %zero, 0
1260B		  * JAL <BB#2>
1260B		  * %zero<def> = ADDI %zero, 0
1260B		  * %zero<def> = ADDI %zero, 0
1436B		%vreg138<def> = LUI 1; GR32Bit:%vreg138
1436B		  * %vreg143<def> = DREADPM %vreg138, 0; GR32Bit:%vreg143,%vreg138
1436B		  * BNE <BB#7>, %vreg143, %zero; GR32Bit:%vreg143
1436B		  * %zero<def> = ADDI %zero, 0
1436B		  * %zero<def> = ADDI %zero, 0
1436B		  * JAL <BB#2>
1436B		  * %zero<def> = ADDI %zero, 0
1436B		  * %zero<def> = ADDI %zero, 0
1516B		%vreg140<def> = LUI 2; GR32Bit:%vreg140
1516B		  * %vreg144<def> = DREADPM %vreg140, 0; GR32Bit:%vreg144,%vreg140
1516B		  * BNE <BB#7>, %vreg144, %zero; GR32Bit:%vreg144
1516B		  * %zero<def> = ADDI %zero, 0
1516B		  * %zero<def> = ADDI %zero, 0
1516B		  * JAL <BB#2>
1516B		  * %zero<def> = ADDI %zero, 0
1516B		  * %zero<def> = ADDI %zero, 0
1596B		%vreg142<def> = LUI 3; GR32Bit:%vreg142
1596B		  * %vreg145<def> = DREADPM %vreg142, 0; GR32Bit:%vreg145,%vreg142
1596B		  * BNE <BB#7>, %vreg145, %zero; GR32Bit:%vreg145
1596B		  * %zero<def> = ADDI %zero, 0
1596B		  * %zero<def> = ADDI %zero, 0
1596B		  * JAL <BB#2>
1596B		  * %zero<def> = ADDI %zero, 0
1596B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#7(16) BB#2(16)

1812B	BB#2: derived from LLVM BB %startup_fuel_valves3.if.else7
	    Predecessors according to CFG: BB#1
1280B		%vreg13<def> = LUI 287796; GR32Bit:%vreg13
1280B		  * %a5<def> = LUI 4095
1280B		  * %a5<def> = SRLI %a5<internal>, 12
1280B		  * ADD %vreg13, %vreg13, %a5; GR32Bit:%vreg13
1280B		  * %vreg11<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg11
1280B		  * %vreg12<def> = FLW %vreg11, 0; mem:LD4[%3] FP32Bit:%vreg12 GR32Bit:%vreg11
1280B		  * %vreg15<def> = COPY %vreg13; FP32Bit:%vreg15 GR32Bit:%vreg13
1280B		  * %vreg14<def> = FULT_S %vreg12, %vreg15; GR32Bit:%vreg14 FP32Bit:%vreg12,%vreg15
1280B		  * %vreg146<def> = LUI 1; GR32Bit:%vreg146
1280B		  * WRITEPM %vreg146, %vreg14, 0; GR32Bit:%vreg146,%vreg14
1280B		  * %vreg148<def> = LUI 2; GR32Bit:%vreg148
1280B		  * WRITEPM %vreg148, %vreg14, 0; GR32Bit:%vreg148,%vreg14
1280B		  * %vreg150<def> = LUI 3; GR32Bit:%vreg150
1280B		  * WRITEPM %vreg150, %vreg14, 0; GR32Bit:%vreg150,%vreg14
1280B		  * BNE <BB#6>, %vreg14, %zero; GR32Bit:%vreg14
1280B		  * %zero<def> = ADDI %zero, 0
1280B		  * %zero<def> = ADDI %zero, 0
1280B		  * JAL <BB#3>
1280B		  * %zero<def> = ADDI %zero, 0
1280B		  * %zero<def> = ADDI %zero, 0
1976B		%vreg147<def> = LUI 1; GR32Bit:%vreg147
1976B		  * %vreg152<def> = DREADPM %vreg147, 0; GR32Bit:%vreg152,%vreg147
1976B		  * BNE <BB#6>, %vreg152, %zero; GR32Bit:%vreg152
1976B		  * %zero<def> = ADDI %zero, 0
1976B		  * %zero<def> = ADDI %zero, 0
1976B		  * JAL <BB#3>
1976B		  * %zero<def> = ADDI %zero, 0
1976B		  * %zero<def> = ADDI %zero, 0
2056B		%vreg149<def> = LUI 2; GR32Bit:%vreg149
2056B		  * %vreg153<def> = DREADPM %vreg149, 0; GR32Bit:%vreg153,%vreg149
2056B		  * BNE <BB#6>, %vreg153, %zero; GR32Bit:%vreg153
2056B		  * %zero<def> = ADDI %zero, 0
2056B		  * %zero<def> = ADDI %zero, 0
2056B		  * JAL <BB#3>
2056B		  * %zero<def> = ADDI %zero, 0
2056B		  * %zero<def> = ADDI %zero, 0
2136B		%vreg151<def> = LUI 3; GR32Bit:%vreg151
2136B		  * %vreg154<def> = DREADPM %vreg151, 0; GR32Bit:%vreg154,%vreg151
2136B		  * BNE <BB#6>, %vreg154, %zero; GR32Bit:%vreg154
2136B		  * %zero<def> = ADDI %zero, 0
2136B		  * %zero<def> = ADDI %zero, 0
2136B		  * JAL <BB#3>
2136B		  * %zero<def> = ADDI %zero, 0
2136B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#3(16) BB#6(16)

2352B	BB#3: derived from LLVM BB %startup_fuel_valves3.if.then9
	    Predecessors according to CFG: BB#2
2360B		%vreg20<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg20
2360B		  * %vreg21<def> = LW %vreg20, 0; mem:LD4[%2] GR32Bit:%vreg21,%vreg20
2360B		  * %vreg22<def> = LW %vreg21, 16; mem:LD4[%17] GR32Bit:%vreg22,%vreg21
2360B		  * %vreg155<def> = LUI 1; GR32Bit:%vreg155
2360B		  * WRITEPM %vreg155, %vreg22, 0; GR32Bit:%vreg155,%vreg22
2360B		  * %vreg157<def> = LUI 2; GR32Bit:%vreg157
2360B		  * WRITEPM %vreg157, %vreg22, 0; GR32Bit:%vreg157,%vreg22
2360B		  * %vreg159<def> = LUI 3; GR32Bit:%vreg159
2360B		  * WRITEPM %vreg159, %vreg22, 0; GR32Bit:%vreg159,%vreg22
2360B		  * BNE <BB#7>, %vreg22, %zero; GR32Bit:%vreg22
2360B		  * %zero<def> = ADDI %zero, 0
2360B		  * %zero<def> = ADDI %zero, 0
2360B		  * JAL <BB#4>
2360B		  * %zero<def> = ADDI %zero, 0
2360B		  * %zero<def> = ADDI %zero, 0
2480B		%vreg156<def> = LUI 1; GR32Bit:%vreg156
2480B		  * %vreg161<def> = DREADPM %vreg156, 0; GR32Bit:%vreg161,%vreg156
2480B		  * BNE <BB#7>, %vreg161, %zero; GR32Bit:%vreg161
2480B		  * %zero<def> = ADDI %zero, 0
2480B		  * %zero<def> = ADDI %zero, 0
2480B		  * JAL <BB#4>
2480B		  * %zero<def> = ADDI %zero, 0
2480B		  * %zero<def> = ADDI %zero, 0
2560B		%vreg158<def> = LUI 2; GR32Bit:%vreg158
2560B		  * %vreg162<def> = DREADPM %vreg158, 0; GR32Bit:%vreg162,%vreg158
2560B		  * BNE <BB#7>, %vreg162, %zero; GR32Bit:%vreg162
2560B		  * %zero<def> = ADDI %zero, 0
2560B		  * %zero<def> = ADDI %zero, 0
2560B		  * JAL <BB#4>
2560B		  * %zero<def> = ADDI %zero, 0
2560B		  * %zero<def> = ADDI %zero, 0
2640B		%vreg160<def> = LUI 3; GR32Bit:%vreg160
2640B		  * %vreg163<def> = DREADPM %vreg160, 0; GR32Bit:%vreg163,%vreg160
2640B		  * BNE <BB#7>, %vreg163, %zero; GR32Bit:%vreg163
2640B		  * %zero<def> = ADDI %zero, 0
2640B		  * %zero<def> = ADDI %zero, 0
2640B		  * JAL <BB#4>
2640B		  * %zero<def> = ADDI %zero, 0
2640B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#4(12) BB#7(20)

2856B	BB#4: derived from LLVM BB %startup_fuel_valves3.if.then12
	    Predecessors according to CFG: BB#3
1820B		%vreg27<def> = LUI 1048575; GR32Bit:%vreg27
1820B		  * %a5<def> = LUI 4095
1820B		  * %a5<def> = SRLI %a5<internal>, 12
1820B		  * ADD %vreg27, %vreg27, %a5; GR32Bit:%vreg27
1820B		  * %vreg23<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg23
1820B		  * %vreg24<def> = LW %vreg23, 0; mem:LD4[%2] GR32Bit:%vreg24,%vreg23
1820B		  * SW %zero, %vreg24, 12; mem:ST4[%21] GR32Bit:%vreg24
1820B		  * %vreg25<def> = LW %vreg23, 0; mem:LD4[%2] GR32Bit:%vreg25,%vreg23
1820B		  * %vreg26<def> = LW %vreg25, 20; mem:LD4[%23] GR32Bit:%vreg26,%vreg25
1820B		  * %vreg164<def> = LUI 1; GR32Bit:%vreg164
1820B		  * WRITEPM %vreg164, %vreg26, 0; GR32Bit:%vreg164,%vreg26
1820B		  * %vreg166<def> = LUI 2; GR32Bit:%vreg166
1820B		  * WRITEPM %vreg166, %vreg26, 0; GR32Bit:%vreg166,%vreg26
1820B		  * %vreg168<def> = LUI 3; GR32Bit:%vreg168
1820B		  * WRITEPM %vreg168, %vreg26, 0; GR32Bit:%vreg168,%vreg26
1820B		  * WRITEPM %vreg164, %vreg27, 4; GR32Bit:%vreg164,%vreg27
1820B		  * WRITEPM %vreg166, %vreg27, 4; GR32Bit:%vreg166,%vreg27
1820B		  * WRITEPM %vreg168, %vreg27, 4; GR32Bit:%vreg168,%vreg27
1820B		  * BNE <BB#7>, %vreg26, %vreg27; GR32Bit:%vreg26,%vreg27
1820B		  * %zero<def> = ADDI %zero, 0
1820B		  * %zero<def> = ADDI %zero, 0
1820B		  * JAL <BB#5>
1820B		  * %zero<def> = ADDI %zero, 0
1820B		  * %zero<def> = ADDI %zero, 0
3044B		%vreg165<def> = LUI 1; GR32Bit:%vreg165
3044B		  * %vreg170<def> = DREADPM %vreg165, 0; GR32Bit:%vreg170,%vreg165
3044B		  * %vreg173<def> = DREADPM %vreg165, 4; GR32Bit:%vreg173,%vreg165
3044B		  * BNE <BB#7>, %vreg170, %vreg173; GR32Bit:%vreg170,%vreg173
3044B		  * %zero<def> = ADDI %zero, 0
3044B		  * %zero<def> = ADDI %zero, 0
3044B		  * JAL <BB#5>
3044B		  * %zero<def> = ADDI %zero, 0
3044B		  * %zero<def> = ADDI %zero, 0
3132B		%vreg167<def> = LUI 2; GR32Bit:%vreg167
3132B		  * %vreg171<def> = DREADPM %vreg167, 0; GR32Bit:%vreg171,%vreg167
3132B		  * %vreg174<def> = DREADPM %vreg167, 4; GR32Bit:%vreg174,%vreg167
3132B		  * BNE <BB#7>, %vreg171, %vreg174; GR32Bit:%vreg171,%vreg174
3132B		  * %zero<def> = ADDI %zero, 0
3132B		  * %zero<def> = ADDI %zero, 0
3132B		  * JAL <BB#5>
3132B		  * %zero<def> = ADDI %zero, 0
3132B		  * %zero<def> = ADDI %zero, 0
3220B		%vreg169<def> = LUI 3; GR32Bit:%vreg169
3220B		  * %vreg172<def> = DREADPM %vreg169, 0; GR32Bit:%vreg172,%vreg169
3220B		  * %vreg175<def> = DREADPM %vreg169, 4; GR32Bit:%vreg175,%vreg169
3220B		  * BNE <BB#7>, %vreg172, %vreg175; GR32Bit:%vreg172,%vreg175
3220B		  * %zero<def> = ADDI %zero, 0
3220B		  * %zero<def> = ADDI %zero, 0
3220B		  * JAL <BB#5>
3220B		  * %zero<def> = ADDI %zero, 0
3220B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#5(16) BB#7(16)

3492B	BB#5: derived from LLVM BB %startup_fuel_valves3.if.then16
	    Predecessors according to CFG: BB#4
3500B		%vreg28<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg28
3500B		  * %vreg29<def> = LW %vreg28, 0; mem:LD4[%2] GR32Bit:%vreg29,%vreg28
3500B		  * %vreg30<def> = LW %vreg29, 4; mem:LD4[%27] GR32Bit:%vreg30,%vreg29
3500B		  * SW %vreg30, %vreg29, 20; mem:ST4[%30] GR32Bit:%vreg30,%vreg29
3500B		  * JAL <BB#7>
3500B		  * %zero<def> = ADDI %zero, 0
3500B		  * %zero<def> = ADDI %zero, 0
3556B		JAL <BB#7>
3556B		  * %zero<def> = ADDI %zero, 0
3556B		  * %zero<def> = ADDI %zero, 0
3580B		JAL <BB#7>
3580B		  * %zero<def> = ADDI %zero, 0
3580B		  * %zero<def> = ADDI %zero, 0
3604B		JAL <BB#7>
3604B		  * %zero<def> = ADDI %zero, 0
3604B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#7

3676B	BB#6: derived from LLVM BB %startup_fuel_valves3.if.else22
	    Predecessors according to CFG: BB#2
3684B		%vreg18<def> = ADDI %zero, 1; GR32Bit:%vreg18
3684B		  * %vreg16<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg16
3684B		  * %vreg17<def> = LW %vreg16, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg16
3684B		  * SW %vreg18, %vreg17, 12; mem:ST4[%32] GR32Bit:%vreg18,%vreg17
3684B		  * %vreg19<def> = LW %vreg16, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg16
3684B		  * SW %vreg18, %vreg19, 16; mem:ST4[%34] GR32Bit:%vreg18,%vreg19
3692B		%zero<def> = ADDI %zero, 0
3700B		%zero<def> = ADDI %zero, 0
3708B		%zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#7

3764B	BB#7: derived from LLVM BB %startup_fuel_valves3.if.end26
	    Predecessors according to CFG: BB#1 BB#6 BB#3 BB#4 BB#5
2864B		%vreg33<def> = LUI 286872; GR32Bit:%vreg33
2864B		  * %a5<def> = LUI 1
2864B		  * %a5<def> = SRLI %a5<internal>, 12
2864B		  * ADD %vreg33, %vreg33, %a5; GR32Bit:%vreg33
2864B		  * %vreg31<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg31
2864B		  * %vreg32<def> = FLW %vreg31, 0; mem:LD4[%3] FP32Bit:%vreg32 GR32Bit:%vreg31
2864B		  * %vreg35<def> = COPY %vreg33; FP32Bit:%vreg35 GR32Bit:%vreg33
2864B		  * %vreg34<def> = FULT_S %vreg35, %vreg32; GR32Bit:%vreg34 FP32Bit:%vreg35,%vreg32
2864B		  * %vreg176<def> = LUI 1; GR32Bit:%vreg176
2864B		  * WRITEPM %vreg176, %vreg34, 0; GR32Bit:%vreg176,%vreg34
2864B		  * %vreg178<def> = LUI 2; GR32Bit:%vreg178
2864B		  * WRITEPM %vreg178, %vreg34, 0; GR32Bit:%vreg178,%vreg34
2864B		  * %vreg180<def> = LUI 3; GR32Bit:%vreg180
2864B		  * WRITEPM %vreg180, %vreg34, 0; GR32Bit:%vreg180,%vreg34
2864B		  * BNE <BB#11>, %vreg34, %zero; GR32Bit:%vreg34
2864B		  * %zero<def> = ADDI %zero, 0
2864B		  * %zero<def> = ADDI %zero, 0
2864B		  * JAL <BB#8>
2864B		  * %zero<def> = ADDI %zero, 0
2864B		  * %zero<def> = ADDI %zero, 0
3928B		%vreg177<def> = LUI 1; GR32Bit:%vreg177
3928B		  * %vreg182<def> = DREADPM %vreg177, 0; GR32Bit:%vreg182,%vreg177
3928B		  * BNE <BB#11>, %vreg182, %zero; GR32Bit:%vreg182
3928B		  * %zero<def> = ADDI %zero, 0
3928B		  * %zero<def> = ADDI %zero, 0
3928B		  * JAL <BB#8>
3928B		  * %zero<def> = ADDI %zero, 0
3928B		  * %zero<def> = ADDI %zero, 0
4008B		%vreg179<def> = LUI 2; GR32Bit:%vreg179
4008B		  * %vreg183<def> = DREADPM %vreg179, 0; GR32Bit:%vreg183,%vreg179
4008B		  * BNE <BB#11>, %vreg183, %zero; GR32Bit:%vreg183
4008B		  * %zero<def> = ADDI %zero, 0
4008B		  * %zero<def> = ADDI %zero, 0
4008B		  * JAL <BB#8>
4008B		  * %zero<def> = ADDI %zero, 0
4008B		  * %zero<def> = ADDI %zero, 0
4088B		%vreg181<def> = LUI 3; GR32Bit:%vreg181
4088B		  * %vreg184<def> = DREADPM %vreg181, 0; GR32Bit:%vreg184,%vreg181
4088B		  * BNE <BB#11>, %vreg184, %zero; GR32Bit:%vreg184
4088B		  * %zero<def> = ADDI %zero, 0
4088B		  * %zero<def> = ADDI %zero, 0
4088B		  * JAL <BB#8>
4088B		  * %zero<def> = ADDI %zero, 0
4088B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#8(16) BB#11(16)

4304B	BB#8: derived from LLVM BB %startup_fuel_valves3.if.then28
	    Predecessors according to CFG: BB#7
3772B		%vreg40<def> = LUI 1048575; GR32Bit:%vreg40
3772B		  * %a5<def> = LUI 4095
3772B		  * %a5<def> = SRLI %a5<internal>, 12
3772B		  * ADD %vreg40, %vreg40, %a5; GR32Bit:%vreg40
3772B		  * %vreg36<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg36
3772B		  * %vreg37<def> = LW %vreg36, 0; mem:LD4[%2] GR32Bit:%vreg37,%vreg36
3772B		  * SW %zero, %vreg37, 8; mem:ST4[%38] GR32Bit:%vreg37
3772B		  * %vreg38<def> = LW %vreg36, 0; mem:LD4[%2] GR32Bit:%vreg38,%vreg36
3772B		  * %vreg39<def> = LW %vreg38, 24; mem:LD4[%40] GR32Bit:%vreg39,%vreg38
3772B		  * %vreg185<def> = LUI 1; GR32Bit:%vreg185
3772B		  * WRITEPM %vreg185, %vreg39, 0; GR32Bit:%vreg185,%vreg39
3772B		  * %vreg187<def> = LUI 2; GR32Bit:%vreg187
3772B		  * WRITEPM %vreg187, %vreg39, 0; GR32Bit:%vreg187,%vreg39
3772B		  * %vreg189<def> = LUI 3; GR32Bit:%vreg189
3772B		  * WRITEPM %vreg189, %vreg39, 0; GR32Bit:%vreg189,%vreg39
3772B		  * WRITEPM %vreg185, %vreg40, 4; GR32Bit:%vreg185,%vreg40
3772B		  * WRITEPM %vreg187, %vreg40, 4; GR32Bit:%vreg187,%vreg40
3772B		  * WRITEPM %vreg189, %vreg40, 4; GR32Bit:%vreg189,%vreg40
3772B		  * BNE <BB#11>, %vreg39, %vreg40; GR32Bit:%vreg39,%vreg40
3772B		  * %zero<def> = ADDI %zero, 0
3772B		  * %zero<def> = ADDI %zero, 0
3772B		  * JAL <BB#9>
3772B		  * %zero<def> = ADDI %zero, 0
3772B		  * %zero<def> = ADDI %zero, 0
4492B		%vreg186<def> = LUI 1; GR32Bit:%vreg186
4492B		  * %vreg191<def> = DREADPM %vreg186, 0; GR32Bit:%vreg191,%vreg186
4492B		  * %vreg194<def> = DREADPM %vreg186, 4; GR32Bit:%vreg194,%vreg186
4492B		  * BNE <BB#11>, %vreg191, %vreg194; GR32Bit:%vreg191,%vreg194
4492B		  * %zero<def> = ADDI %zero, 0
4492B		  * %zero<def> = ADDI %zero, 0
4492B		  * JAL <BB#9>
4492B		  * %zero<def> = ADDI %zero, 0
4492B		  * %zero<def> = ADDI %zero, 0
4580B		%vreg188<def> = LUI 2; GR32Bit:%vreg188
4580B		  * %vreg192<def> = DREADPM %vreg188, 0; GR32Bit:%vreg192,%vreg188
4580B		  * %vreg195<def> = DREADPM %vreg188, 4; GR32Bit:%vreg195,%vreg188
4580B		  * BNE <BB#11>, %vreg192, %vreg195; GR32Bit:%vreg192,%vreg195
4580B		  * %zero<def> = ADDI %zero, 0
4580B		  * %zero<def> = ADDI %zero, 0
4580B		  * JAL <BB#9>
4580B		  * %zero<def> = ADDI %zero, 0
4580B		  * %zero<def> = ADDI %zero, 0
4668B		%vreg190<def> = LUI 3; GR32Bit:%vreg190
4668B		  * %vreg193<def> = DREADPM %vreg190, 0; GR32Bit:%vreg193,%vreg190
4668B		  * %vreg196<def> = DREADPM %vreg190, 4; GR32Bit:%vreg196,%vreg190
4668B		  * BNE <BB#11>, %vreg193, %vreg196; GR32Bit:%vreg193,%vreg196
4668B		  * %zero<def> = ADDI %zero, 0
4668B		  * %zero<def> = ADDI %zero, 0
4668B		  * JAL <BB#9>
4668B		  * %zero<def> = ADDI %zero, 0
4668B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#9(16) BB#11(16)

4940B	BB#9: derived from LLVM BB %startup_fuel_valves3.if.then32
	    Predecessors according to CFG: BB#8
4948B		%vreg41<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg41
4948B		  * %vreg42<def> = LW %vreg41, 0; mem:LD4[%2] GR32Bit:%vreg42,%vreg41
4948B		  * %vreg43<def> = LW %vreg42, 4; mem:LD4[%44] GR32Bit:%vreg43,%vreg42
4948B		  * SW %vreg43, %vreg42, 24; mem:ST4[%47] GR32Bit:%vreg43,%vreg42
4948B		  * JAL <BB#11>
4948B		  * %zero<def> = ADDI %zero, 0
4948B		  * %zero<def> = ADDI %zero, 0
5004B		JAL <BB#11>
5004B		  * %zero<def> = ADDI %zero, 0
5004B		  * %zero<def> = ADDI %zero, 0
5028B		JAL <BB#11>
5028B		  * %zero<def> = ADDI %zero, 0
5028B		  * %zero<def> = ADDI %zero, 0
5052B		JAL <BB#11>
5052B		  * %zero<def> = ADDI %zero, 0
5052B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#11

5124B	BB#10: derived from LLVM BB %startup_fuel_valves3.if.then
	    Predecessors according to CFG: BB#0
5132B		%vreg46<def> = ADDI %zero, 1; GR32Bit:%vreg46
5132B		  * %vreg44<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg44
5132B		  * %vreg45<def> = LW %vreg44, 0; mem:LD4[%2] GR32Bit:%vreg45,%vreg44
5132B		  * SW %vreg46, %vreg45, 8; mem:ST4[%49] GR32Bit:%vreg46,%vreg45
5132B		  * %vreg47<def> = LW %vreg44, 0; mem:LD4[%2] GR32Bit:%vreg47,%vreg44
5132B		  * SW %vreg46, %vreg47, 12; mem:ST4[%51] GR32Bit:%vreg46,%vreg47
5132B		  * %vreg48<def> = LW %vreg44, 0; mem:LD4[%2] GR32Bit:%vreg48,%vreg44
5132B		  * SW %zero, %vreg48, 16; mem:ST4[%53] GR32Bit:%vreg48
5140B		%zero<def> = ADDI %zero, 0
5148B		%zero<def> = ADDI %zero, 0
5156B		%zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#11

5228B	BB#11: derived from LLVM BB %startup_fuel_valves3.return
	    Predecessors according to CFG: BB#7 BB#8 BB#9 BB#10
5236B		%vreg51<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg51
5236B		  * %vreg49<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg49
5236B		  * %vreg50<def> = LW %vreg49, 0; mem:LD4[%2] GR32Bit:%vreg50,%vreg49
5236B		  * SW %vreg50, %vreg51, 0; mem:ST4[%1] GR32Bit:%vreg50,%vreg51
5236B		  * %vreg197<def> = ADDI %zero, 128; GR32Bit:%vreg197
5236B		  * %vreg198<def> = ADDI %zero, 1; GR32Bit:%vreg198
5236B		  * WRITECM %vreg197, %vreg198, 60; GR32Bit:%vreg197,%vreg198
5236B		  * %vreg199<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg199
5236B		  * %vreg200<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg200
5236B		  * %vreg201<def> = SRLI %vreg200, 12; GR32Bit:%vreg201,%vreg200
5236B		  * %vreg202<def> = ADD %vreg199, %vreg201; GR32Bit:%vreg202,%vreg199,%vreg201
5236B		  * %vreg203<def> = ADDI %zero, 16; GR32Bit:%vreg203
5236B		  * %vreg204<def> = SRLI %vreg197, 22; GR32Bit:%vreg204,%vreg197
5236B		  * %vreg205<def> = SRLI %vreg197, 12; GR32Bit:%vreg205,%vreg197
5236B		  * %vreg206<def> = ANDI %vreg205, 15; GR32Bit:%vreg206,%vreg205
5236B		  * %vreg207<def> = SRLI %vreg197, 6; GR32Bit:%vreg207,%vreg197
5236B		  * %vreg208<def> = ANDI %vreg207, 63; GR32Bit:%vreg208,%vreg207
5236B		  * %vreg209<def> = ADDI %zero, 832; GR32Bit:%vreg209
5236B		  * %vreg210<def> = MUL %vreg204, %vreg209; GR32Bit:%vreg210,%vreg204,%vreg209
5236B		  * %vreg211<def> = ADDI %zero, 52; GR32Bit:%vreg211
5236B		  * %vreg212<def> = MUL %vreg206, %vreg211; GR32Bit:%vreg212,%vreg206,%vreg211
5236B		  * %vreg213<def> = ADD %vreg212, %vreg208; GR32Bit:%vreg213,%vreg212,%vreg208
5236B		  * %vreg214<def> = ADD %vreg213, %vreg210; GR32Bit:%vreg214,%vreg213,%vreg210
5236B		  * %vreg215<def> = MUL %vreg214, %vreg203; GR32Bit:%vreg215,%vreg214,%vreg203
5236B		  * %vreg216<def> = ADD %vreg215, %vreg202; GR32Bit:%vreg216,%vreg215,%vreg202
5236B		  * %vreg217<def> = LW %t5, 0; GR32Bit:%vreg217
5236B		  * SW %vreg217, %vreg216, 4; GR32Bit:%vreg217,%vreg216
5236B		  * %vreg218<def> = LUI 1; GR32Bit:%vreg218
5236B		  * WRITEPM %vreg218, %vreg197, 0; GR32Bit:%vreg218,%vreg197
5236B		  * FDELETE %t4, 0
5236B		  * END 0
5236B		  * %zero<def> = ADDI %zero, 0
5236B		  * %zero<def> = ADDI %zero, 0
5508B		%vreg219<def> = LUI 1; GR32Bit:%vreg219
5508B		  * %vreg220<def> = DREADPM %vreg219, 0; GR32Bit:%vreg220,%vreg219
5508B		  * %vreg221<def> = LUI 1048575; GR32Bit:%vreg221
5508B		  * %a5<def> = LUI 4095
5508B		  * %a5<def> = SRLI %a5<internal>, 12
5508B		  * ADD %vreg221, %vreg221, %a5; GR32Bit:%vreg221
5508B		  * SYNC %vreg220, %vreg221, 60; GR32Bit:%vreg220,%vreg221
5508B		  * END 0
5508B		  * %zero<def> = ADDI %zero, 0
5508B		  * %zero<def> = ADDI %zero, 0
5588B		END 0
5588B		  * %zero<def> = ADDI %zero, 0
5588B		  * %zero<def> = ADDI %zero, 0
5612B		END 0
5612B		  * %zero<def> = ADDI %zero, 0
5612B		  * %zero<def> = ADDI %zero, 0

# End machine code for function startup_fuel_valves3.

********** COMPUTING LIVE DEBUG VARIABLES: startup_fuel_valves3 **********
********** DEBUG VARIABLES **********
********** Compute Spill Weights **********
********** Function: startup_fuel_valves3
********** GREEDY REGISTER ALLOCATION **********
********** Function: startup_fuel_valves3

selectOrSplit GR32Bit:%vreg197 [5276r,5468r:0)  0@5276r
assigning %vreg197 to %t0: t0

selectOrSplit GR32Bit:%vreg27 [2864r,2996r:0)  0@2864r
assigning %vreg27 to %t0: t0

selectOrSplit GR32Bit:%vreg40 [4312r,4444r:0)  0@4312r
assigning %vreg40 to %t0: t0

selectOrSplit GR32Bit:%vreg220 [5516r,5644B:0)  0@5516r
assigning %vreg220 to %t0: t0

selectOrSplit GR32Bit:%vreg57 [28r,140r:0)  0@28r
assigning %vreg57 to %t0: t0

selectOrSplit GR32Bit:%vreg76 [340r,452r:0)  0@340r
assigning %vreg76 to %t0: t0

selectOrSplit GR32Bit:%vreg95 [556r,668r:0)  0@556r
assigning %vreg95 to %t0: t0

selectOrSplit GR32Bit:%vreg114 [772r,884r:0)  0@772r
assigning %vreg114 to %t0: t0

selectOrSplit GR32Bit:%vreg202 [5324r,5436r:0)  0@5324r
assigning %vreg202 to %t1: t1

selectOrSplit GR32Bit:%vreg58 [36r,132r:0)  0@36r
assigning %vreg58 to %t1: t1

selectOrSplit GR32Bit:%vreg77 [348r,444r:0)  0@348r
assigning %vreg77 to %t1: t1

selectOrSplit GR32Bit:%vreg96 [564r,660r:0)  0@564r
assigning %vreg96 to %t1: t1

selectOrSplit GR32Bit:%vreg115 [780r,876r:0)  0@780r
assigning %vreg115 to %t1: t1

selectOrSplit GR32Bit:%vreg203 [5332r,5428r:0)  0@5332r
assigning %vreg203 to %t2: t2

selectOrSplit GR32Bit:%vreg172 [3236r,3324r:0)  0@3236r
assigning %vreg172 to %t0: t0

selectOrSplit GR32Bit:%vreg193 [4684r,4772r:0)  0@4684r
assigning %vreg193 to %t0: t0

selectOrSplit GR32Bit:%vreg26 [2916r,2996r:0)  0@2916r
assigning %vreg26 to %t1: t1

selectOrSplit GR32Bit:%vreg39 [4364r,4444r:0)  0@4364r
assigning %vreg39 to %t1: t1

selectOrSplit GR32Bit:%vreg18 [3684r,3756r:0)  0@3684r
assigning %vreg18 to %t0: t0

selectOrSplit GR32Bit:%vreg46 [5132r,5204r:0)  0@5132r
assigning %vreg46 to %t0: t0

selectOrSplit GR32Bit:%vreg169 [3220r,3284r:0)  0@3220r
assigning %vreg169 to %t1: t1

selectOrSplit GR32Bit:%vreg190 [4668r,4732r:0)  0@4668r
assigning %vreg190 to %t1: t1

selectOrSplit GR32Bit:%vreg5 [204r,260r:0)  0@204r
assigning %vreg5 to %t0: t0

selectOrSplit GR32Bit:%vreg9 [1332r,1388r:0)  0@1332r
assigning %vreg9 to %t0: t0

selectOrSplit GR32Bit:%vreg14 [1872r,1928r:0)  0@1872r
assigning %vreg14 to %t0: t0

selectOrSplit GR32Bit:%vreg22 [2376r,2432r:0)  0@2376r
assigning %vreg22 to %t0: t0

selectOrSplit GR32Bit:%vreg34 [3824r,3880r:0)  0@3824r
assigning %vreg34 to %t0: t0

selectOrSplit GR32Bit:%vreg44 [5164r,5212r:0)  0@5164r
assigning %vreg44 to %t1: t1

selectOrSplit GR32Bit:%vreg59 [44r,92r:0)  0@44r
assigning %vreg59 to %t2: t2

selectOrSplit GR32Bit:%vreg61 [60r,108r:0)  0@60r
assigning %vreg61 to %fp: fp

selectOrSplit GR32Bit:%vreg78 [356r,404r:0)  0@356r
assigning %vreg78 to %t2: t2

selectOrSplit GR32Bit:%vreg80 [372r,420r:0)  0@372r
assigning %vreg80 to %fp: fp

selectOrSplit GR32Bit:%vreg97 [572r,620r:0)  0@572r
assigning %vreg97 to %t2: t2

selectOrSplit GR32Bit:%vreg99 [588r,636r:0)  0@588r
assigning %vreg99 to %fp: fp

selectOrSplit GR32Bit:%vreg116 [788r,836r:0)  0@788r
assigning %vreg116 to %t2: t2

selectOrSplit GR32Bit:%vreg118 [804r,852r:0)  0@804r
assigning %vreg118 to %fp: fp

selectOrSplit GR32Bit:%vreg164 [2924r,2972r:0)  0@2924r
assigning %vreg164 to %t2: t2

selectOrSplit GR32Bit:%vreg185 [4372r,4420r:0)  0@4372r
assigning %vreg185 to %t2: t2

selectOrSplit GR32Bit:%vreg204 [5340r,5388r:0)  0@5340r
assigning %vreg204 to %fp: fp

selectOrSplit GR32Bit:%vreg206 [5356r,5404r:0)  0@5356r
assigning %vreg206 to %a0: a0

selectOrSplit GR32Bit:%vreg8 [1280r,1324r:0)  0@1280r
assigning %vreg8 to %t0: t0

selectOrSplit GR32Bit:%vreg13 [1820r,1864r:0)  0@1820r
assigning %vreg13 to %t0: t0

selectOrSplit GR32Bit:%vreg33 [3772r,3816r:0)  0@3772r
assigning %vreg33 to %t0: t0

selectOrSplit GR32Bit:%vreg0 [156r,196r:0)  0@156r
assigning %vreg0 to %t0: t0

selectOrSplit GR32Bit:%vreg3 [148r,188r:0)  0@148r
assigning %vreg3 to %t1: t1

selectOrSplit GR32Bit:%vreg63 [76r,116r:0)  0@76r
assigning %vreg63 to %a0: a0

selectOrSplit GR32Bit:%vreg82 [388r,428r:0)  0@388r
assigning %vreg82 to %a0: a0

selectOrSplit GR32Bit:%vreg101 [604r,644r:0)  0@604r
assigning %vreg101 to %a0: a0

selectOrSplit GR32Bit:%vreg120 [820r,860r:0)  0@820r
assigning %vreg120 to %a0: a0

selectOrSplit GR32Bit:%vreg166 [2940r,2980r:0)  0@2940r
assigning %vreg166 to %fp: fp

selectOrSplit GR32Bit:%vreg175 [3284r,3324r:0)  0@3284r
assigning %vreg175 to %t1: t1

selectOrSplit GR32Bit:%vreg187 [4388r,4428r:0)  0@4388r
assigning %vreg187 to %fp: fp

selectOrSplit GR32Bit:%vreg196 [4732r,4772r:0)  0@4732r
assigning %vreg196 to %t1: t1

selectOrSplit GR32Bit:%vreg208 [5372r,5412r:0)  0@5372r
assigning %vreg208 to %a1: a1

selectOrSplit GR32Bit:%vreg16 [3716r,3748r:0)  0@3716r
assigning %vreg16 to %t1: t1

selectOrSplit GR32Bit:%vreg51 [5236r,5268r:0)  0@5236r
assigning %vreg51 to %t0: t0

selectOrSplit GR32Bit:%vreg65 [92r,124r:0)  0@92r
assigning %vreg65 to %t2: t2

selectOrSplit GR32Bit:%vreg84 [404r,436r:0)  0@404r
assigning %vreg84 to %t2: t2

selectOrSplit GR32Bit:%vreg103 [620r,652r:0)  0@620r
assigning %vreg103 to %t2: t2

selectOrSplit GR32Bit:%vreg122 [836r,868r:0)  0@836r
assigning %vreg122 to %t2: t2

selectOrSplit GR32Bit:%vreg136 [1052r,1084r:0)  0@1052r
assigning %vreg136 to %t0: t0

selectOrSplit GR32Bit:%vreg145 [1612r,1644r:0)  0@1612r
assigning %vreg145 to %t0: t0

selectOrSplit GR32Bit:%vreg154 [2152r,2184r:0)  0@2152r
assigning %vreg154 to %t0: t0

selectOrSplit GR32Bit:%vreg163 [2656r,2688r:0)  0@2656r
assigning %vreg163 to %t0: t0

selectOrSplit GR32Bit:%vreg168 [2956r,2988r:0)  0@2956r
assigning %vreg168 to %a0: a0

selectOrSplit GR32Bit:%vreg184 [4104r,4136r:0)  0@4104r
assigning %vreg184 to %t0: t0

selectOrSplit GR32Bit:%vreg189 [4404r,4436r:0)  0@4404r
assigning %vreg189 to %a0: a0

selectOrSplit GR32Bit:%vreg210 [5388r,5420r:0)  0@5388r
assigning %vreg210 to %fp: fp

selectOrSplit FP32Bit:%vreg7 [1308r,1332r:0)  0@1308r
AllocationOrder(FP32Bit) = [ %ft1 %ft2 %ft3 %ft4 %ft5 %ft6 %ft7 %fs0 %fs1 %fa0 %fa1 %fa2 %fa3 %fa4 %fa5 %fa6 %fa7 %fs2 %fs3 %fs4 %fs5 %fs6 %fs7 %fs8 %fs9 %fs10 %fs11 %ft8 %ft9 %ft10 %ft11 ]
assigning %vreg7 to %ft1: ft1

selectOrSplit FP32Bit:%vreg12 [1848r,1872r:0)  0@1848r
assigning %vreg12 to %ft1: ft1

selectOrSplit GR32Bit:%vreg23 [2884r,2908r:0)  0@2884r
assigning %vreg23 to %t1: t1

selectOrSplit FP32Bit:%vreg32 [3800r,3824r:0)  0@3800r
assigning %vreg32 to %ft1: ft1

selectOrSplit GR32Bit:%vreg36 [4332r,4356r:0)  0@4332r
assigning %vreg36 to %t1: t1

selectOrSplit GR32Bit:%vreg73 [316r,340r:0)  0@316r
assigning %vreg73 to %t0: t0

selectOrSplit GR32Bit:%vreg92 [532r,556r:0)  0@532r
assigning %vreg92 to %t0: t0

selectOrSplit GR32Bit:%vreg111 [748r,772r:0)  0@748r
assigning %vreg111 to %t0: t0

selectOrSplit GR32Bit:%vreg165 [3044r,3068r:0)  0@3044r
assigning %vreg165 to %t0: t0

selectOrSplit GR32Bit:%vreg167 [3132r,3156r:0)  0@3132r
assigning %vreg167 to %t0: t0

selectOrSplit GR32Bit:%vreg186 [4492r,4516r:0)  0@4492r
assigning %vreg186 to %t0: t0

selectOrSplit GR32Bit:%vreg188 [4580r,4604r:0)  0@4580r
assigning %vreg188 to %t0: t0

selectOrSplit GR32Bit:%vreg199 [5300r,5324r:0)  0@5300r
assigning %vreg199 to %t1: t1

selectOrSplit GR32Bit:%vreg1 [164r,180r:0)  0@164r
assigning %vreg1 to %t2: t2

selectOrSplit GR32Bit:%vreg17 [3724r,3740r:0)  0@3724r
assigning %vreg17 to %t2: t2

selectOrSplit GR32Bit:%vreg29 [3508r,3524r:0)  0@3508r
assigning %vreg29 to %t0: t0

selectOrSplit GR32Bit:%vreg42 [4956r,4972r:0)  0@4956r
assigning %vreg42 to %t0: t0

selectOrSplit GR32Bit:%vreg45 [5172r,5188r:0)  0@5172r
assigning %vreg45 to %t2: t2

selectOrSplit GR32Bit:%vreg50 [5252r,5268r:0)  0@5252r
assigning %vreg50 to %t1: t1

selectOrSplit GR32Bit:%vreg54 [12r,28r:0)  0@12r
assigning %vreg54 to %t0: t0

selectOrSplit GR32Bit:%vreg133 [1036r,1052r:0)  0@1036r
assigning %vreg133 to %t0: t0

selectOrSplit GR32Bit:%vreg138 [1436r,1452r:0)  0@1436r
assigning %vreg138 to %t0: t0

selectOrSplit GR32Bit:%vreg140 [1516r,1532r:0)  0@1516r
assigning %vreg140 to %t0: t0

selectOrSplit GR32Bit:%vreg142 [1596r,1612r:0)  0@1596r
assigning %vreg142 to %t0: t0

selectOrSplit GR32Bit:%vreg147 [1976r,1992r:0)  0@1976r
assigning %vreg147 to %t0: t0

selectOrSplit GR32Bit:%vreg149 [2056r,2072r:0)  0@2056r
assigning %vreg149 to %t0: t0

selectOrSplit GR32Bit:%vreg151 [2136r,2152r:0)  0@2136r
assigning %vreg151 to %t0: t0

selectOrSplit GR32Bit:%vreg156 [2480r,2496r:0)  0@2480r
assigning %vreg156 to %t0: t0

selectOrSplit GR32Bit:%vreg158 [2560r,2576r:0)  0@2560r
assigning %vreg158 to %t0: t0

selectOrSplit GR32Bit:%vreg160 [2640r,2656r:0)  0@2640r
assigning %vreg160 to %t0: t0

selectOrSplit GR32Bit:%vreg170 [3060r,3076r:0)  0@3060r
assigning %vreg170 to %t1: t1

selectOrSplit GR32Bit:%vreg171 [3148r,3164r:0)  0@3148r
assigning %vreg171 to %t1: t1

selectOrSplit GR32Bit:%vreg177 [3928r,3944r:0)  0@3928r
assigning %vreg177 to %t0: t0

selectOrSplit GR32Bit:%vreg179 [4008r,4024r:0)  0@4008r
assigning %vreg179 to %t0: t0

selectOrSplit GR32Bit:%vreg181 [4088r,4104r:0)  0@4088r
assigning %vreg181 to %t0: t0

selectOrSplit GR32Bit:%vreg191 [4508r,4524r:0)  0@4508r
assigning %vreg191 to %t1: t1

selectOrSplit GR32Bit:%vreg192 [4596r,4612r:0)  0@4596r
assigning %vreg192 to %t1: t1

selectOrSplit GR32Bit:%vreg216 [5436r,5452r:0)  0@5436r
assigning %vreg216 to %t1: t1

selectOrSplit FP32Bit:%vreg2 [180r,188r:0)  0@180r
assigning %vreg2 to %ft1: ft1

selectOrSplit GR32Bit:%vreg4 [196r,204r:0)  0@196r
assigning %vreg4 to %t0: t0

selectOrSplit GR32Bit:%vreg6 [1300r,1308r:0)  0@1300r
assigning %vreg6 to %t1: t1

selectOrSplit FP32Bit:%vreg10 [1324r,1332r:0)  0@1324r
assigning %vreg10 to %ft2: ft2

selectOrSplit GR32Bit:%vreg11 [1840r,1848r:0)  0@1840r
assigning %vreg11 to %t1: t1

selectOrSplit FP32Bit:%vreg15 [1864r,1872r:0)  0@1864r
assigning %vreg15 to %ft2: ft2

selectOrSplit GR32Bit:%vreg19 [3748r,3756r:0)  0@3748r
assigning %vreg19 to %t1: t1

selectOrSplit GR32Bit:%vreg20 [2360r,2368r:0)  0@2360r
assigning %vreg20 to %t0: t0

selectOrSplit GR32Bit:%vreg21 [2368r,2376r:0)  0@2368r
assigning %vreg21 to %t0: t0

selectOrSplit GR32Bit:%vreg24 [2892r,2900r:0)  0@2892r
assigning %vreg24 to %t2: t2

selectOrSplit GR32Bit:%vreg25 [2908r,2916r:0)  0@2908r
assigning %vreg25 to %t1: t1

selectOrSplit GR32Bit:%vreg28 [3500r,3508r:0)  0@3500r
assigning %vreg28 to %t0: t0

selectOrSplit GR32Bit:%vreg30 [3516r,3524r:0)  0@3516r
assigning %vreg30 to %t1: t1

selectOrSplit GR32Bit:%vreg31 [3792r,3800r:0)  0@3792r
assigning %vreg31 to %t1: t1

selectOrSplit FP32Bit:%vreg35 [3816r,3824r:0)  0@3816r
assigning %vreg35 to %ft2: ft2

selectOrSplit GR32Bit:%vreg37 [4340r,4348r:0)  0@4340r
assigning %vreg37 to %t2: t2

selectOrSplit GR32Bit:%vreg38 [4356r,4364r:0)  0@4356r
assigning %vreg38 to %t1: t1

selectOrSplit GR32Bit:%vreg41 [4948r,4956r:0)  0@4948r
assigning %vreg41 to %t0: t0

selectOrSplit GR32Bit:%vreg43 [4964r,4972r:0)  0@4964r
assigning %vreg43 to %t1: t1

selectOrSplit GR32Bit:%vreg47 [5196r,5204r:0)  0@5196r
assigning %vreg47 to %t2: t2

selectOrSplit GR32Bit:%vreg48 [5212r,5220r:0)  0@5212r
assigning %vreg48 to %t0: t0

selectOrSplit GR32Bit:%vreg49 [5244r,5252r:0)  0@5244r
assigning %vreg49 to %t1: t1

selectOrSplit GR32Bit:%vreg56 [20r,28r:0)  0@20r
assigning %vreg56 to %t1: t1

selectOrSplit GR32Bit:%vreg60 [52r,60r:0)  0@52r
assigning %vreg60 to %fp: fp

selectOrSplit GR32Bit:%vreg62 [68r,76r:0)  0@68r
assigning %vreg62 to %a0: a0

selectOrSplit GR32Bit:%vreg64 [84r,92r:0)  0@84r
assigning %vreg64 to %a1: a1

selectOrSplit GR32Bit:%vreg66 [100r,108r:0)  0@100r
assigning %vreg66 to %a1: a1

selectOrSplit GR32Bit:%vreg67 [108r,116r:0)  0@108r
assigning %vreg67 to %fp: fp

selectOrSplit GR32Bit:%vreg68 [116r,124r:0)  0@116r
assigning %vreg68 to %fp: fp

selectOrSplit GR32Bit:%vreg69 [124r,132r:0)  0@124r
assigning %vreg69 to %t2: t2

selectOrSplit GR32Bit:%vreg70 [132r,140r:0)  0@132r
assigning %vreg70 to %t1: t1

selectOrSplit GR32Bit:%vreg74 [324r,332r:0)  0@324r
assigning %vreg74 to %t1: t1

selectOrSplit GR32Bit:%vreg75 [332r,340r:0)  0@332r
assigning %vreg75 to %t1: t1

selectOrSplit GR32Bit:%vreg79 [364r,372r:0)  0@364r
assigning %vreg79 to %fp: fp

selectOrSplit GR32Bit:%vreg81 [380r,388r:0)  0@380r
assigning %vreg81 to %a0: a0

selectOrSplit GR32Bit:%vreg83 [396r,404r:0)  0@396r
assigning %vreg83 to %a1: a1

selectOrSplit GR32Bit:%vreg85 [412r,420r:0)  0@412r
assigning %vreg85 to %a1: a1

selectOrSplit GR32Bit:%vreg86 [420r,428r:0)  0@420r
assigning %vreg86 to %fp: fp

selectOrSplit GR32Bit:%vreg87 [428r,436r:0)  0@428r
assigning %vreg87 to %fp: fp

selectOrSplit GR32Bit:%vreg88 [436r,444r:0)  0@436r
assigning %vreg88 to %t2: t2

selectOrSplit GR32Bit:%vreg89 [444r,452r:0)  0@444r
assigning %vreg89 to %t1: t1

selectOrSplit GR32Bit:%vreg93 [540r,548r:0)  0@540r
assigning %vreg93 to %t1: t1

selectOrSplit GR32Bit:%vreg94 [548r,556r:0)  0@548r
assigning %vreg94 to %t1: t1

selectOrSplit GR32Bit:%vreg98 [580r,588r:0)  0@580r
assigning %vreg98 to %fp: fp

selectOrSplit GR32Bit:%vreg100 [596r,604r:0)  0@596r
assigning %vreg100 to %a0: a0

selectOrSplit GR32Bit:%vreg102 [612r,620r:0)  0@612r
assigning %vreg102 to %a1: a1

selectOrSplit GR32Bit:%vreg104 [628r,636r:0)  0@628r
assigning %vreg104 to %a1: a1

selectOrSplit GR32Bit:%vreg105 [636r,644r:0)  0@636r
assigning %vreg105 to %fp: fp

selectOrSplit GR32Bit:%vreg106 [644r,652r:0)  0@644r
assigning %vreg106 to %fp: fp

selectOrSplit GR32Bit:%vreg107 [652r,660r:0)  0@652r
assigning %vreg107 to %t2: t2

selectOrSplit GR32Bit:%vreg108 [660r,668r:0)  0@660r
assigning %vreg108 to %t1: t1

selectOrSplit GR32Bit:%vreg112 [756r,764r:0)  0@756r
assigning %vreg112 to %t1: t1

selectOrSplit GR32Bit:%vreg113 [764r,772r:0)  0@764r
assigning %vreg113 to %t1: t1

selectOrSplit GR32Bit:%vreg117 [796r,804r:0)  0@796r
assigning %vreg117 to %fp: fp

selectOrSplit GR32Bit:%vreg119 [812r,820r:0)  0@812r
assigning %vreg119 to %a0: a0

selectOrSplit GR32Bit:%vreg121 [828r,836r:0)  0@828r
assigning %vreg121 to %a1: a1

selectOrSplit GR32Bit:%vreg123 [844r,852r:0)  0@844r
assigning %vreg123 to %a1: a1

selectOrSplit GR32Bit:%vreg124 [852r,860r:0)  0@852r
assigning %vreg124 to %fp: fp

selectOrSplit GR32Bit:%vreg125 [860r,868r:0)  0@860r
assigning %vreg125 to %fp: fp

selectOrSplit GR32Bit:%vreg126 [868r,876r:0)  0@868r
assigning %vreg126 to %t2: t2

selectOrSplit GR32Bit:%vreg127 [876r,884r:0)  0@876r
assigning %vreg127 to %t1: t1

selectOrSplit GR32Bit:%vreg128 [212r,220r:0)  0@212r
assigning %vreg128 to %t1: t1

selectOrSplit GR32Bit:%vreg129 [460r,468r:0)  0@460r
assigning %vreg129 to %t0: t0

selectOrSplit GR32Bit:%vreg130 [228r,236r:0)  0@228r
assigning %vreg130 to %t1: t1

selectOrSplit GR32Bit:%vreg131 [676r,684r:0)  0@676r
assigning %vreg131 to %t0: t0

selectOrSplit GR32Bit:%vreg132 [244r,252r:0)  0@244r
assigning %vreg132 to %t1: t1

selectOrSplit GR32Bit:%vreg134 [468r,476r:0)  0@468r
assigning %vreg134 to %t0: t0

selectOrSplit GR32Bit:%vreg135 [684r,692r:0)  0@684r
assigning %vreg135 to %t0: t0

selectOrSplit GR32Bit:%vreg137 [1340r,1348r:0)  0@1340r
assigning %vreg137 to %t1: t1

selectOrSplit GR32Bit:%vreg139 [1356r,1364r:0)  0@1356r
assigning %vreg139 to %t1: t1

selectOrSplit GR32Bit:%vreg141 [1372r,1380r:0)  0@1372r
assigning %vreg141 to %t1: t1

selectOrSplit GR32Bit:%vreg143 [1452r,1460r:0)  0@1452r
assigning %vreg143 to %t0: t0

selectOrSplit GR32Bit:%vreg144 [1532r,1540r:0)  0@1532r
assigning %vreg144 to %t0: t0

selectOrSplit GR32Bit:%vreg146 [1880r,1888r:0)  0@1880r
assigning %vreg146 to %t1: t1

selectOrSplit GR32Bit:%vreg148 [1896r,1904r:0)  0@1896r
assigning %vreg148 to %t1: t1

selectOrSplit GR32Bit:%vreg150 [1912r,1920r:0)  0@1912r
assigning %vreg150 to %t1: t1

selectOrSplit GR32Bit:%vreg152 [1992r,2000r:0)  0@1992r
assigning %vreg152 to %t0: t0

selectOrSplit GR32Bit:%vreg153 [2072r,2080r:0)  0@2072r
assigning %vreg153 to %t0: t0

selectOrSplit GR32Bit:%vreg155 [2384r,2392r:0)  0@2384r
assigning %vreg155 to %t1: t1

selectOrSplit GR32Bit:%vreg157 [2400r,2408r:0)  0@2400r
assigning %vreg157 to %t1: t1

selectOrSplit GR32Bit:%vreg159 [2416r,2424r:0)  0@2416r
assigning %vreg159 to %t1: t1

selectOrSplit GR32Bit:%vreg161 [2496r,2504r:0)  0@2496r
assigning %vreg161 to %t0: t0

selectOrSplit GR32Bit:%vreg162 [2576r,2584r:0)  0@2576r
assigning %vreg162 to %t0: t0

selectOrSplit GR32Bit:%vreg173 [3068r,3076r:0)  0@3068r
assigning %vreg173 to %t0: t0

selectOrSplit GR32Bit:%vreg174 [3156r,3164r:0)  0@3156r
assigning %vreg174 to %t0: t0

selectOrSplit GR32Bit:%vreg176 [3832r,3840r:0)  0@3832r
assigning %vreg176 to %t1: t1

selectOrSplit GR32Bit:%vreg178 [3848r,3856r:0)  0@3848r
assigning %vreg178 to %t1: t1

selectOrSplit GR32Bit:%vreg180 [3864r,3872r:0)  0@3864r
assigning %vreg180 to %t1: t1

selectOrSplit GR32Bit:%vreg182 [3944r,3952r:0)  0@3944r
assigning %vreg182 to %t0: t0

selectOrSplit GR32Bit:%vreg183 [4024r,4032r:0)  0@4024r
assigning %vreg183 to %t0: t0

selectOrSplit GR32Bit:%vreg194 [4516r,4524r:0)  0@4516r
assigning %vreg194 to %t0: t0

selectOrSplit GR32Bit:%vreg195 [4604r,4612r:0)  0@4604r
assigning %vreg195 to %t0: t0

selectOrSplit GR32Bit:%vreg198 [5284r,5292r:0)  0@5284r
assigning %vreg198 to %t1: t1

selectOrSplit GR32Bit:%vreg200 [5308r,5316r:0)  0@5308r
assigning %vreg200 to %t2: t2

selectOrSplit GR32Bit:%vreg201 [5316r,5324r:0)  0@5316r
assigning %vreg201 to %t2: t2

selectOrSplit GR32Bit:%vreg205 [5348r,5356r:0)  0@5348r
assigning %vreg205 to %a0: a0

selectOrSplit GR32Bit:%vreg207 [5364r,5372r:0)  0@5364r
assigning %vreg207 to %a1: a1

selectOrSplit GR32Bit:%vreg209 [5380r,5388r:0)  0@5380r
assigning %vreg209 to %a2: a2

selectOrSplit GR32Bit:%vreg211 [5396r,5404r:0)  0@5396r
assigning %vreg211 to %a2: a2

selectOrSplit GR32Bit:%vreg212 [5404r,5412r:0)  0@5404r
assigning %vreg212 to %a0: a0

selectOrSplit GR32Bit:%vreg213 [5412r,5420r:0)  0@5412r
assigning %vreg213 to %a0: a0

selectOrSplit GR32Bit:%vreg214 [5420r,5428r:0)  0@5420r
assigning %vreg214 to %fp: fp

selectOrSplit GR32Bit:%vreg215 [5428r,5436r:0)  0@5428r
assigning %vreg215 to %t2: t2

selectOrSplit GR32Bit:%vreg217 [5444r,5452r:0)  0@5444r
assigning %vreg217 to %t2: t2

selectOrSplit GR32Bit:%vreg218 [5460r,5468r:0)  0@5460r
assigning %vreg218 to %t1: t1

selectOrSplit GR32Bit:%vreg219 [5508r,5516r:0)  0@5508r
assigning %vreg219 to %t0: t0

selectOrSplit GR32Bit:%vreg221 [5524r,5532r:0)  0@5524r
assigning %vreg221 to %t1: t1

selectOrSplit GR32Bit:%vreg55 [16r,20r:0)  0@16r
assigning %vreg55 to %t1: t1
********** REWRITE VIRTUAL REGISTERS **********
********** Function: startup_fuel_valves3
********** REGISTER MAP **********
[%vreg0 -> %t0] GR32Bit
[%vreg1 -> %t2] GR32Bit
[%vreg2 -> %ft1] FP32Bit
[%vreg3 -> %t1] GR32Bit
[%vreg4 -> %t0] GR32Bit
[%vreg5 -> %t0] GR32Bit
[%vreg6 -> %t1] GR32Bit
[%vreg7 -> %ft1] FP32Bit
[%vreg8 -> %t0] GR32Bit
[%vreg9 -> %t0] GR32Bit
[%vreg10 -> %ft2] FP32Bit
[%vreg11 -> %t1] GR32Bit
[%vreg12 -> %ft1] FP32Bit
[%vreg13 -> %t0] GR32Bit
[%vreg14 -> %t0] GR32Bit
[%vreg15 -> %ft2] FP32Bit
[%vreg16 -> %t1] GR32Bit
[%vreg17 -> %t2] GR32Bit
[%vreg18 -> %t0] GR32Bit
[%vreg19 -> %t1] GR32Bit
[%vreg20 -> %t0] GR32Bit
[%vreg21 -> %t0] GR32Bit
[%vreg22 -> %t0] GR32Bit
[%vreg23 -> %t1] GR32Bit
[%vreg24 -> %t2] GR32Bit
[%vreg25 -> %t1] GR32Bit
[%vreg26 -> %t1] GR32Bit
[%vreg27 -> %t0] GR32Bit
[%vreg28 -> %t0] GR32Bit
[%vreg29 -> %t0] GR32Bit
[%vreg30 -> %t1] GR32Bit
[%vreg31 -> %t1] GR32Bit
[%vreg32 -> %ft1] FP32Bit
[%vreg33 -> %t0] GR32Bit
[%vreg34 -> %t0] GR32Bit
[%vreg35 -> %ft2] FP32Bit
[%vreg36 -> %t1] GR32Bit
[%vreg37 -> %t2] GR32Bit
[%vreg38 -> %t1] GR32Bit
[%vreg39 -> %t1] GR32Bit
[%vreg40 -> %t0] GR32Bit
[%vreg41 -> %t0] GR32Bit
[%vreg42 -> %t0] GR32Bit
[%vreg43 -> %t1] GR32Bit
[%vreg44 -> %t1] GR32Bit
[%vreg45 -> %t2] GR32Bit
[%vreg46 -> %t0] GR32Bit
[%vreg47 -> %t2] GR32Bit
[%vreg48 -> %t0] GR32Bit
[%vreg49 -> %t1] GR32Bit
[%vreg50 -> %t1] GR32Bit
[%vreg51 -> %t0] GR32Bit
[%vreg54 -> %t0] GR32Bit
[%vreg55 -> %t1] GR32Bit
[%vreg56 -> %t1] GR32Bit
[%vreg57 -> %t0] GR32Bit
[%vreg58 -> %t1] GR32Bit
[%vreg59 -> %t2] GR32Bit
[%vreg60 -> %fp] GR32Bit
[%vreg61 -> %fp] GR32Bit
[%vreg62 -> %a0] GR32Bit
[%vreg63 -> %a0] GR32Bit
[%vreg64 -> %a1] GR32Bit
[%vreg65 -> %t2] GR32Bit
[%vreg66 -> %a1] GR32Bit
[%vreg67 -> %fp] GR32Bit
[%vreg68 -> %fp] GR32Bit
[%vreg69 -> %t2] GR32Bit
[%vreg70 -> %t1] GR32Bit
[%vreg73 -> %t0] GR32Bit
[%vreg74 -> %t1] GR32Bit
[%vreg75 -> %t1] GR32Bit
[%vreg76 -> %t0] GR32Bit
[%vreg77 -> %t1] GR32Bit
[%vreg78 -> %t2] GR32Bit
[%vreg79 -> %fp] GR32Bit
[%vreg80 -> %fp] GR32Bit
[%vreg81 -> %a0] GR32Bit
[%vreg82 -> %a0] GR32Bit
[%vreg83 -> %a1] GR32Bit
[%vreg84 -> %t2] GR32Bit
[%vreg85 -> %a1] GR32Bit
[%vreg86 -> %fp] GR32Bit
[%vreg87 -> %fp] GR32Bit
[%vreg88 -> %t2] GR32Bit
[%vreg89 -> %t1] GR32Bit
[%vreg92 -> %t0] GR32Bit
[%vreg93 -> %t1] GR32Bit
[%vreg94 -> %t1] GR32Bit
[%vreg95 -> %t0] GR32Bit
[%vreg96 -> %t1] GR32Bit
[%vreg97 -> %t2] GR32Bit
[%vreg98 -> %fp] GR32Bit
[%vreg99 -> %fp] GR32Bit
[%vreg100 -> %a0] GR32Bit
[%vreg101 -> %a0] GR32Bit
[%vreg102 -> %a1] GR32Bit
[%vreg103 -> %t2] GR32Bit
[%vreg104 -> %a1] GR32Bit
[%vreg105 -> %fp] GR32Bit
[%vreg106 -> %fp] GR32Bit
[%vreg107 -> %t2] GR32Bit
[%vreg108 -> %t1] GR32Bit
[%vreg111 -> %t0] GR32Bit
[%vreg112 -> %t1] GR32Bit
[%vreg113 -> %t1] GR32Bit
[%vreg114 -> %t0] GR32Bit
[%vreg115 -> %t1] GR32Bit
[%vreg116 -> %t2] GR32Bit
[%vreg117 -> %fp] GR32Bit
[%vreg118 -> %fp] GR32Bit
[%vreg119 -> %a0] GR32Bit
[%vreg120 -> %a0] GR32Bit
[%vreg121 -> %a1] GR32Bit
[%vreg122 -> %t2] GR32Bit
[%vreg123 -> %a1] GR32Bit
[%vreg124 -> %fp] GR32Bit
[%vreg125 -> %fp] GR32Bit
[%vreg126 -> %t2] GR32Bit
[%vreg127 -> %t1] GR32Bit
[%vreg128 -> %t1] GR32Bit
[%vreg129 -> %t0] GR32Bit
[%vreg130 -> %t1] GR32Bit
[%vreg131 -> %t0] GR32Bit
[%vreg132 -> %t1] GR32Bit
[%vreg133 -> %t0] GR32Bit
[%vreg134 -> %t0] GR32Bit
[%vreg135 -> %t0] GR32Bit
[%vreg136 -> %t0] GR32Bit
[%vreg137 -> %t1] GR32Bit
[%vreg138 -> %t0] GR32Bit
[%vreg139 -> %t1] GR32Bit
[%vreg140 -> %t0] GR32Bit
[%vreg141 -> %t1] GR32Bit
[%vreg142 -> %t0] GR32Bit
[%vreg143 -> %t0] GR32Bit
[%vreg144 -> %t0] GR32Bit
[%vreg145 -> %t0] GR32Bit
[%vreg146 -> %t1] GR32Bit
[%vreg147 -> %t0] GR32Bit
[%vreg148 -> %t1] GR32Bit
[%vreg149 -> %t0] GR32Bit
[%vreg150 -> %t1] GR32Bit
[%vreg151 -> %t0] GR32Bit
[%vreg152 -> %t0] GR32Bit
[%vreg153 -> %t0] GR32Bit
[%vreg154 -> %t0] GR32Bit
[%vreg155 -> %t1] GR32Bit
[%vreg156 -> %t0] GR32Bit
[%vreg157 -> %t1] GR32Bit
[%vreg158 -> %t0] GR32Bit
[%vreg159 -> %t1] GR32Bit
[%vreg160 -> %t0] GR32Bit
[%vreg161 -> %t0] GR32Bit
[%vreg162 -> %t0] GR32Bit
[%vreg163 -> %t0] GR32Bit
[%vreg164 -> %t2] GR32Bit
[%vreg165 -> %t0] GR32Bit
[%vreg166 -> %fp] GR32Bit
[%vreg167 -> %t0] GR32Bit
[%vreg168 -> %a0] GR32Bit
[%vreg169 -> %t1] GR32Bit
[%vreg170 -> %t1] GR32Bit
[%vreg171 -> %t1] GR32Bit
[%vreg172 -> %t0] GR32Bit
[%vreg173 -> %t0] GR32Bit
[%vreg174 -> %t0] GR32Bit
[%vreg175 -> %t1] GR32Bit
[%vreg176 -> %t1] GR32Bit
[%vreg177 -> %t0] GR32Bit
[%vreg178 -> %t1] GR32Bit
[%vreg179 -> %t0] GR32Bit
[%vreg180 -> %t1] GR32Bit
[%vreg181 -> %t0] GR32Bit
[%vreg182 -> %t0] GR32Bit
[%vreg183 -> %t0] GR32Bit
[%vreg184 -> %t0] GR32Bit
[%vreg185 -> %t2] GR32Bit
[%vreg186 -> %t0] GR32Bit
[%vreg187 -> %fp] GR32Bit
[%vreg188 -> %t0] GR32Bit
[%vreg189 -> %a0] GR32Bit
[%vreg190 -> %t1] GR32Bit
[%vreg191 -> %t1] GR32Bit
[%vreg192 -> %t1] GR32Bit
[%vreg193 -> %t0] GR32Bit
[%vreg194 -> %t0] GR32Bit
[%vreg195 -> %t0] GR32Bit
[%vreg196 -> %t1] GR32Bit
[%vreg197 -> %t0] GR32Bit
[%vreg198 -> %t1] GR32Bit
[%vreg199 -> %t1] GR32Bit
[%vreg200 -> %t2] GR32Bit
[%vreg201 -> %t2] GR32Bit
[%vreg202 -> %t1] GR32Bit
[%vreg203 -> %t2] GR32Bit
[%vreg204 -> %fp] GR32Bit
[%vreg205 -> %a0] GR32Bit
[%vreg206 -> %a0] GR32Bit
[%vreg207 -> %a1] GR32Bit
[%vreg208 -> %a1] GR32Bit
[%vreg209 -> %a2] GR32Bit
[%vreg210 -> %fp] GR32Bit
[%vreg211 -> %a2] GR32Bit
[%vreg212 -> %a0] GR32Bit
[%vreg213 -> %a0] GR32Bit
[%vreg214 -> %fp] GR32Bit
[%vreg215 -> %t2] GR32Bit
[%vreg216 -> %t1] GR32Bit
[%vreg217 -> %t2] GR32Bit
[%vreg218 -> %t1] GR32Bit
[%vreg219 -> %t0] GR32Bit
[%vreg220 -> %t0] GR32Bit
[%vreg221 -> %t1] GR32Bit

0B	BB#0: derived from LLVM BB %startup_fuel_valves3.entry
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg54<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg54
4B		  * %vreg55<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg55
4B		  * %vreg56<def> = SRLI %vreg55<kill>, 12; GR32Bit:%vreg56,%vreg55
4B		  * %vreg57<def> = ADD %vreg54<kill>, %vreg56<kill>; GR32Bit:%vreg57,%vreg54,%vreg56
4B		  * %vreg58<def> = ADDI %zero, 16; GR32Bit:%vreg58
4B		  * %vreg59<def> = SRLI %t5, 22; GR32Bit:%vreg59
4B		  * %vreg60<def> = SRLI %t5, 12; GR32Bit:%vreg60
4B		  * %vreg61<def> = ANDI %vreg60<kill>, 15; GR32Bit:%vreg61,%vreg60
4B		  * %vreg62<def> = SRLI %t5, 6; GR32Bit:%vreg62
4B		  * %vreg63<def> = ANDI %vreg62<kill>, 63; GR32Bit:%vreg63,%vreg62
4B		  * %vreg64<def> = ADDI %zero, 832; GR32Bit:%vreg64
4B		  * %vreg65<def> = MUL %vreg59<kill>, %vreg64<kill>; GR32Bit:%vreg65,%vreg59,%vreg64
4B		  * %vreg66<def> = ADDI %zero, 52; GR32Bit:%vreg66
4B		  * %vreg67<def> = MUL %vreg61<kill>, %vreg66<kill>; GR32Bit:%vreg67,%vreg61,%vreg66
4B		  * %vreg68<def> = ADD %vreg67<kill>, %vreg63<kill>; GR32Bit:%vreg68,%vreg67,%vreg63
4B		  * %vreg69<def> = ADD %vreg68<kill>, %vreg65<kill>; GR32Bit:%vreg69,%vreg68,%vreg65
4B		  * %vreg70<def> = MUL %vreg69<kill>, %vreg58<kill>; GR32Bit:%vreg70,%vreg69,%vreg58
4B		  * %t5<def> = ADD %vreg57<kill>, %vreg70<kill>; GR32Bit:%vreg57,%vreg70
4B		  * %vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
4B		  * %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
4B		  * %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
4B		  * SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
4B		  * %vreg2<def> = FLW %vreg1<kill>, 0; mem:LD4[%6](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
4B		  * FSW %vreg2<kill>, %vreg3<kill>, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
4B		  * %vreg4<def> = LW %vreg0<kill>, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
4B		  * %vreg5<def> = LW %vreg4<kill>, 4; mem:LD4[%9] GR32Bit:%vreg5,%vreg4
4B		  * %vreg128<def> = LUI 1; GR32Bit:%vreg128
4B		  * WRITEPM %vreg128<kill>, %vreg5, 0; GR32Bit:%vreg128,%vreg5
4B		  * %vreg130<def> = LUI 2; GR32Bit:%vreg130
4B		  * WRITEPM %vreg130<kill>, %vreg5, 0; GR32Bit:%vreg130,%vreg5
4B		  * %vreg132<def> = LUI 3; GR32Bit:%vreg132
4B		  * WRITEPM %vreg132<kill>, %vreg5, 0; GR32Bit:%vreg132,%vreg5
4B		  * BEQ <BB#10>, %vreg5<kill>, %zero; GR32Bit:%vreg5
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
4B		  * JAL <BB#1>
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
308B		%t4<def> = ADD %t5, %zero
308B		  * %vreg73<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg73
308B		  * %vreg74<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg74
308B		  * %vreg75<def> = SRLI %vreg74<kill>, 12; GR32Bit:%vreg75,%vreg74
308B		  * %vreg76<def> = ADD %vreg73<kill>, %vreg75<kill>; GR32Bit:%vreg76,%vreg73,%vreg75
308B		  * %vreg77<def> = ADDI %zero, 16; GR32Bit:%vreg77
308B		  * %vreg78<def> = SRLI %t5, 22; GR32Bit:%vreg78
308B		  * %vreg79<def> = SRLI %t5, 12; GR32Bit:%vreg79
308B		  * %vreg80<def> = ANDI %vreg79<kill>, 15; GR32Bit:%vreg80,%vreg79
308B		  * %vreg81<def> = SRLI %t5, 6; GR32Bit:%vreg81
308B		  * %vreg82<def> = ANDI %vreg81<kill>, 63; GR32Bit:%vreg82,%vreg81
308B		  * %vreg83<def> = ADDI %zero, 832; GR32Bit:%vreg83
308B		  * %vreg84<def> = MUL %vreg78<kill>, %vreg83<kill>; GR32Bit:%vreg84,%vreg78,%vreg83
308B		  * %vreg85<def> = ADDI %zero, 52; GR32Bit:%vreg85
308B		  * %vreg86<def> = MUL %vreg80<kill>, %vreg85<kill>; GR32Bit:%vreg86,%vreg80,%vreg85
308B		  * %vreg87<def> = ADD %vreg86<kill>, %vreg82<kill>; GR32Bit:%vreg87,%vreg86,%vreg82
308B		  * %vreg88<def> = ADD %vreg87<kill>, %vreg84<kill>; GR32Bit:%vreg88,%vreg87,%vreg84
308B		  * %vreg89<def> = MUL %vreg88<kill>, %vreg77<kill>; GR32Bit:%vreg89,%vreg88,%vreg77
308B		  * %t5<def> = ADD %vreg76<kill>, %vreg89<kill>; GR32Bit:%vreg76,%vreg89
308B		  * %vreg129<def> = LUI 1; GR32Bit:%vreg129
308B		  * %vreg134<def> = DREADPM %vreg129<kill>, 0; GR32Bit:%vreg134,%vreg129
308B		  * BEQ <BB#10>, %vreg134<kill>, %zero; GR32Bit:%vreg134
308B		  * %zero<def> = ADDI %zero, 0
308B		  * %zero<def> = ADDI %zero, 0
308B		  * JAL <BB#1>
308B		  * %zero<def> = ADDI %zero, 0
308B		  * %zero<def> = ADDI %zero, 0
524B		%t4<def> = ADD %t5, %zero
524B		  * %vreg92<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg92
524B		  * %vreg93<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg93
524B		  * %vreg94<def> = SRLI %vreg93<kill>, 12; GR32Bit:%vreg94,%vreg93
524B		  * %vreg95<def> = ADD %vreg92<kill>, %vreg94<kill>; GR32Bit:%vreg95,%vreg92,%vreg94
524B		  * %vreg96<def> = ADDI %zero, 16; GR32Bit:%vreg96
524B		  * %vreg97<def> = SRLI %t5, 22; GR32Bit:%vreg97
524B		  * %vreg98<def> = SRLI %t5, 12; GR32Bit:%vreg98
524B		  * %vreg99<def> = ANDI %vreg98<kill>, 15; GR32Bit:%vreg99,%vreg98
524B		  * %vreg100<def> = SRLI %t5, 6; GR32Bit:%vreg100
524B		  * %vreg101<def> = ANDI %vreg100<kill>, 63; GR32Bit:%vreg101,%vreg100
524B		  * %vreg102<def> = ADDI %zero, 832; GR32Bit:%vreg102
524B		  * %vreg103<def> = MUL %vreg97<kill>, %vreg102<kill>; GR32Bit:%vreg103,%vreg97,%vreg102
524B		  * %vreg104<def> = ADDI %zero, 52; GR32Bit:%vreg104
524B		  * %vreg105<def> = MUL %vreg99<kill>, %vreg104<kill>; GR32Bit:%vreg105,%vreg99,%vreg104
524B		  * %vreg106<def> = ADD %vreg105<kill>, %vreg101<kill>; GR32Bit:%vreg106,%vreg105,%vreg101
524B		  * %vreg107<def> = ADD %vreg106<kill>, %vreg103<kill>; GR32Bit:%vreg107,%vreg106,%vreg103
524B		  * %vreg108<def> = MUL %vreg107<kill>, %vreg96<kill>; GR32Bit:%vreg108,%vreg107,%vreg96
524B		  * %t5<def> = ADD %vreg95<kill>, %vreg108<kill>; GR32Bit:%vreg95,%vreg108
524B		  * %vreg131<def> = LUI 2; GR32Bit:%vreg131
524B		  * %vreg135<def> = DREADPM %vreg131<kill>, 0; GR32Bit:%vreg135,%vreg131
524B		  * BEQ <BB#10>, %vreg135<kill>, %zero; GR32Bit:%vreg135
524B		  * %zero<def> = ADDI %zero, 0
524B		  * %zero<def> = ADDI %zero, 0
524B		  * JAL <BB#1>
524B		  * %zero<def> = ADDI %zero, 0
524B		  * %zero<def> = ADDI %zero, 0
740B		%t4<def> = ADD %t5, %zero
740B		  * %vreg111<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg111
740B		  * %vreg112<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg112
740B		  * %vreg113<def> = SRLI %vreg112<kill>, 12; GR32Bit:%vreg113,%vreg112
740B		  * %vreg114<def> = ADD %vreg111<kill>, %vreg113<kill>; GR32Bit:%vreg114,%vreg111,%vreg113
740B		  * %vreg115<def> = ADDI %zero, 16; GR32Bit:%vreg115
740B		  * %vreg116<def> = SRLI %t5, 22; GR32Bit:%vreg116
740B		  * %vreg117<def> = SRLI %t5, 12; GR32Bit:%vreg117
740B		  * %vreg118<def> = ANDI %vreg117<kill>, 15; GR32Bit:%vreg118,%vreg117
740B		  * %vreg119<def> = SRLI %t5, 6; GR32Bit:%vreg119
740B		  * %vreg120<def> = ANDI %vreg119<kill>, 63; GR32Bit:%vreg120,%vreg119
740B		  * %vreg121<def> = ADDI %zero, 832; GR32Bit:%vreg121
740B		  * %vreg122<def> = MUL %vreg116<kill>, %vreg121<kill>; GR32Bit:%vreg122,%vreg116,%vreg121
740B		  * %vreg123<def> = ADDI %zero, 52; GR32Bit:%vreg123
740B		  * %vreg124<def> = MUL %vreg118<kill>, %vreg123<kill>; GR32Bit:%vreg124,%vreg118,%vreg123
740B		  * %vreg125<def> = ADD %vreg124<kill>, %vreg120<kill>; GR32Bit:%vreg125,%vreg124,%vreg120
740B		  * %vreg126<def> = ADD %vreg125<kill>, %vreg122<kill>; GR32Bit:%vreg126,%vreg125,%vreg122
740B		  * %vreg127<def> = MUL %vreg126<kill>, %vreg115<kill>; GR32Bit:%vreg127,%vreg126,%vreg115
740B		  * %t5<def> = ADD %vreg114<kill>, %vreg127<kill>; GR32Bit:%vreg114,%vreg127
740B		  * %vreg133<def> = LUI 3; GR32Bit:%vreg133
740B		  * %vreg136<def> = DREADPM %vreg133<kill>, 0; GR32Bit:%vreg136,%vreg133
740B		  * BEQ <BB#10>, %vreg136<kill>, %zero; GR32Bit:%vreg136
740B		  * %zero<def> = ADDI %zero, 0
740B		  * %zero<def> = ADDI %zero, 0
740B		  * JAL <BB#1>
740B		  * %zero<def> = ADDI %zero, 0
740B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#10(12) BB#1(20)
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 16
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %t5, <fi#2>
> %t0<def> = ADDI %t5, <fi#1>
> %t2<def> = ADDI %t5, <fi#-1>
> SW %t2, %t0, 0; mem:ST4[%2]
> %ft1<def> = FLW %t2<kill>, 0; mem:LD4[%6](align=16)
> FSW %ft1<kill>, %t1<kill>, 0; mem:ST4[%3]
> %t0<def> = LW %t0<kill>, 0; mem:LD4[%2]
> %t0<def> = LW %t0<kill>, 4; mem:LD4[%9]
> %t1<def> = LUI 1
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 2
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 3
> WRITEPM %t1<kill>, %t0, 0
> BEQ <BB#10>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#1>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 16
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = LUI 1
> %t0<def> = DREADPM %t0<kill>, 0
> BEQ <BB#10>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#1>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 16
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = LUI 2
> %t0<def> = DREADPM %t0<kill>, 0
> BEQ <BB#10>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#1>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 16
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = LUI 3
> %t0<def> = DREADPM %t0<kill>, 0
> BEQ <BB#10>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#1>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
1252B	BB#1: derived from LLVM BB %startup_fuel_valves3.if.else
	    Predecessors according to CFG: BB#0
1260B		%vreg8<def> = LUI 284576; GR32Bit:%vreg8
1260B		  * %a5<def> = LUI 0
1260B		  * %a5<def> = SRLI %a5<internal>, 12
1260B		  * ADD %vreg8, %vreg8, %a5; GR32Bit:%vreg8
1260B		  * %vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
1260B		  * %vreg7<def> = FLW %vreg6<kill>, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg6
1260B		  * %vreg10<def> = COPY %vreg8<kill>; FP32Bit:%vreg10 GR32Bit:%vreg8
1260B		  * %vreg9<def> = FLT_S %vreg10<kill>, %vreg7<kill>; GR32Bit:%vreg9 FP32Bit:%vreg10,%vreg7
1260B		  * %vreg137<def> = LUI 1; GR32Bit:%vreg137
1260B		  * WRITEPM %vreg137<kill>, %vreg9, 0; GR32Bit:%vreg137,%vreg9
1260B		  * %vreg139<def> = LUI 2; GR32Bit:%vreg139
1260B		  * WRITEPM %vreg139<kill>, %vreg9, 0; GR32Bit:%vreg139,%vreg9
1260B		  * %vreg141<def> = LUI 3; GR32Bit:%vreg141
1260B		  * WRITEPM %vreg141<kill>, %vreg9, 0; GR32Bit:%vreg141,%vreg9
1260B		  * BNE <BB#7>, %vreg9<kill>, %zero; GR32Bit:%vreg9
1260B		  * %zero<def> = ADDI %zero, 0
1260B		  * %zero<def> = ADDI %zero, 0
1260B		  * JAL <BB#2>
1260B		  * %zero<def> = ADDI %zero, 0
1260B		  * %zero<def> = ADDI %zero, 0
1436B		%vreg138<def> = LUI 1; GR32Bit:%vreg138
1436B		  * %vreg143<def> = DREADPM %vreg138<kill>, 0; GR32Bit:%vreg143,%vreg138
1436B		  * BNE <BB#7>, %vreg143<kill>, %zero; GR32Bit:%vreg143
1436B		  * %zero<def> = ADDI %zero, 0
1436B		  * %zero<def> = ADDI %zero, 0
1436B		  * JAL <BB#2>
1436B		  * %zero<def> = ADDI %zero, 0
1436B		  * %zero<def> = ADDI %zero, 0
1516B		%vreg140<def> = LUI 2; GR32Bit:%vreg140
1516B		  * %vreg144<def> = DREADPM %vreg140<kill>, 0; GR32Bit:%vreg144,%vreg140
1516B		  * BNE <BB#7>, %vreg144<kill>, %zero; GR32Bit:%vreg144
1516B		  * %zero<def> = ADDI %zero, 0
1516B		  * %zero<def> = ADDI %zero, 0
1516B		  * JAL <BB#2>
1516B		  * %zero<def> = ADDI %zero, 0
1516B		  * %zero<def> = ADDI %zero, 0
1596B		%vreg142<def> = LUI 3; GR32Bit:%vreg142
1596B		  * %vreg145<def> = DREADPM %vreg142<kill>, 0; GR32Bit:%vreg145,%vreg142
1596B		  * BNE <BB#7>, %vreg145<kill>, %zero; GR32Bit:%vreg145
1596B		  * %zero<def> = ADDI %zero, 0
1596B		  * %zero<def> = ADDI %zero, 0
1596B		  * JAL <BB#2>
1596B		  * %zero<def> = ADDI %zero, 0
1596B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#7(16) BB#2(16)
> %t0<def> = LUI 284576
> %a5<def> = LUI 0
> %a5<def> = SRLI %a5<internal>, 12
> ADD %t0, %t0, %a5
> %t1<def> = ADDI %t5, <fi#2>
> %ft1<def> = FLW %t1<kill>, 0; mem:LD4[%3]
> %ft2<def> = COPY %t0<kill>
> %t0<def> = FLT_S %ft2<kill>, %ft1<kill>
> %t1<def> = LUI 1
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 2
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 3
> WRITEPM %t1<kill>, %t0, 0
> BNE <BB#7>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#2>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 1
> %t0<def> = DREADPM %t0<kill>, 0
> BNE <BB#7>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#2>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 2
> %t0<def> = DREADPM %t0<kill>, 0
> BNE <BB#7>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#2>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 3
> %t0<def> = DREADPM %t0<kill>, 0
> BNE <BB#7>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#2>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
1812B	BB#2: derived from LLVM BB %startup_fuel_valves3.if.else7
	    Predecessors according to CFG: BB#1
1280B		%vreg13<def> = LUI 287796; GR32Bit:%vreg13
1280B		  * %a5<def> = LUI 4095
1280B		  * %a5<def> = SRLI %a5<internal>, 12
1280B		  * ADD %vreg13, %vreg13, %a5; GR32Bit:%vreg13
1280B		  * %vreg11<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg11
1280B		  * %vreg12<def> = FLW %vreg11<kill>, 0; mem:LD4[%3] FP32Bit:%vreg12 GR32Bit:%vreg11
1280B		  * %vreg15<def> = COPY %vreg13<kill>; FP32Bit:%vreg15 GR32Bit:%vreg13
1280B		  * %vreg14<def> = FULT_S %vreg12<kill>, %vreg15<kill>; GR32Bit:%vreg14 FP32Bit:%vreg12,%vreg15
1280B		  * %vreg146<def> = LUI 1; GR32Bit:%vreg146
1280B		  * WRITEPM %vreg146<kill>, %vreg14, 0; GR32Bit:%vreg146,%vreg14
1280B		  * %vreg148<def> = LUI 2; GR32Bit:%vreg148
1280B		  * WRITEPM %vreg148<kill>, %vreg14, 0; GR32Bit:%vreg148,%vreg14
1280B		  * %vreg150<def> = LUI 3; GR32Bit:%vreg150
1280B		  * WRITEPM %vreg150<kill>, %vreg14, 0; GR32Bit:%vreg150,%vreg14
1280B		  * BNE <BB#6>, %vreg14<kill>, %zero; GR32Bit:%vreg14
1280B		  * %zero<def> = ADDI %zero, 0
1280B		  * %zero<def> = ADDI %zero, 0
1280B		  * JAL <BB#3>
1280B		  * %zero<def> = ADDI %zero, 0
1280B		  * %zero<def> = ADDI %zero, 0
1976B		%vreg147<def> = LUI 1; GR32Bit:%vreg147
1976B		  * %vreg152<def> = DREADPM %vreg147<kill>, 0; GR32Bit:%vreg152,%vreg147
1976B		  * BNE <BB#6>, %vreg152<kill>, %zero; GR32Bit:%vreg152
1976B		  * %zero<def> = ADDI %zero, 0
1976B		  * %zero<def> = ADDI %zero, 0
1976B		  * JAL <BB#3>
1976B		  * %zero<def> = ADDI %zero, 0
1976B		  * %zero<def> = ADDI %zero, 0
2056B		%vreg149<def> = LUI 2; GR32Bit:%vreg149
2056B		  * %vreg153<def> = DREADPM %vreg149<kill>, 0; GR32Bit:%vreg153,%vreg149
2056B		  * BNE <BB#6>, %vreg153<kill>, %zero; GR32Bit:%vreg153
2056B		  * %zero<def> = ADDI %zero, 0
2056B		  * %zero<def> = ADDI %zero, 0
2056B		  * JAL <BB#3>
2056B		  * %zero<def> = ADDI %zero, 0
2056B		  * %zero<def> = ADDI %zero, 0
2136B		%vreg151<def> = LUI 3; GR32Bit:%vreg151
2136B		  * %vreg154<def> = DREADPM %vreg151<kill>, 0; GR32Bit:%vreg154,%vreg151
2136B		  * BNE <BB#6>, %vreg154<kill>, %zero; GR32Bit:%vreg154
2136B		  * %zero<def> = ADDI %zero, 0
2136B		  * %zero<def> = ADDI %zero, 0
2136B		  * JAL <BB#3>
2136B		  * %zero<def> = ADDI %zero, 0
2136B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#3(16) BB#6(16)
> %t0<def> = LUI 287796
> %a5<def> = LUI 4095
> %a5<def> = SRLI %a5<internal>, 12
> ADD %t0, %t0, %a5
> %t1<def> = ADDI %t5, <fi#2>
> %ft1<def> = FLW %t1<kill>, 0; mem:LD4[%3]
> %ft2<def> = COPY %t0<kill>
> %t0<def> = FULT_S %ft1<kill>, %ft2<kill>
> %t1<def> = LUI 1
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 2
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 3
> WRITEPM %t1<kill>, %t0, 0
> BNE <BB#6>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#3>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 1
> %t0<def> = DREADPM %t0<kill>, 0
> BNE <BB#6>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#3>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 2
> %t0<def> = DREADPM %t0<kill>, 0
> BNE <BB#6>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#3>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 3
> %t0<def> = DREADPM %t0<kill>, 0
> BNE <BB#6>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#3>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
2352B	BB#3: derived from LLVM BB %startup_fuel_valves3.if.then9
	    Predecessors according to CFG: BB#2
2360B		%vreg20<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg20
2360B		  * %vreg21<def> = LW %vreg20<kill>, 0; mem:LD4[%2] GR32Bit:%vreg21,%vreg20
2360B		  * %vreg22<def> = LW %vreg21<kill>, 16; mem:LD4[%17] GR32Bit:%vreg22,%vreg21
2360B		  * %vreg155<def> = LUI 1; GR32Bit:%vreg155
2360B		  * WRITEPM %vreg155<kill>, %vreg22, 0; GR32Bit:%vreg155,%vreg22
2360B		  * %vreg157<def> = LUI 2; GR32Bit:%vreg157
2360B		  * WRITEPM %vreg157<kill>, %vreg22, 0; GR32Bit:%vreg157,%vreg22
2360B		  * %vreg159<def> = LUI 3; GR32Bit:%vreg159
2360B		  * WRITEPM %vreg159<kill>, %vreg22, 0; GR32Bit:%vreg159,%vreg22
2360B		  * BNE <BB#7>, %vreg22<kill>, %zero; GR32Bit:%vreg22
2360B		  * %zero<def> = ADDI %zero, 0
2360B		  * %zero<def> = ADDI %zero, 0
2360B		  * JAL <BB#4>
2360B		  * %zero<def> = ADDI %zero, 0
2360B		  * %zero<def> = ADDI %zero, 0
2480B		%vreg156<def> = LUI 1; GR32Bit:%vreg156
2480B		  * %vreg161<def> = DREADPM %vreg156<kill>, 0; GR32Bit:%vreg161,%vreg156
2480B		  * BNE <BB#7>, %vreg161<kill>, %zero; GR32Bit:%vreg161
2480B		  * %zero<def> = ADDI %zero, 0
2480B		  * %zero<def> = ADDI %zero, 0
2480B		  * JAL <BB#4>
2480B		  * %zero<def> = ADDI %zero, 0
2480B		  * %zero<def> = ADDI %zero, 0
2560B		%vreg158<def> = LUI 2; GR32Bit:%vreg158
2560B		  * %vreg162<def> = DREADPM %vreg158<kill>, 0; GR32Bit:%vreg162,%vreg158
2560B		  * BNE <BB#7>, %vreg162<kill>, %zero; GR32Bit:%vreg162
2560B		  * %zero<def> = ADDI %zero, 0
2560B		  * %zero<def> = ADDI %zero, 0
2560B		  * JAL <BB#4>
2560B		  * %zero<def> = ADDI %zero, 0
2560B		  * %zero<def> = ADDI %zero, 0
2640B		%vreg160<def> = LUI 3; GR32Bit:%vreg160
2640B		  * %vreg163<def> = DREADPM %vreg160<kill>, 0; GR32Bit:%vreg163,%vreg160
2640B		  * BNE <BB#7>, %vreg163<kill>, %zero; GR32Bit:%vreg163
2640B		  * %zero<def> = ADDI %zero, 0
2640B		  * %zero<def> = ADDI %zero, 0
2640B		  * JAL <BB#4>
2640B		  * %zero<def> = ADDI %zero, 0
2640B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#4(12) BB#7(20)
> %t0<def> = ADDI %t5, <fi#1>
> %t0<def> = LW %t0<kill>, 0; mem:LD4[%2]
> %t0<def> = LW %t0<kill>, 16; mem:LD4[%17]
> %t1<def> = LUI 1
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 2
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 3
> WRITEPM %t1<kill>, %t0, 0
> BNE <BB#7>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#4>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 1
> %t0<def> = DREADPM %t0<kill>, 0
> BNE <BB#7>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#4>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 2
> %t0<def> = DREADPM %t0<kill>, 0
> BNE <BB#7>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#4>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 3
> %t0<def> = DREADPM %t0<kill>, 0
> BNE <BB#7>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#4>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
2856B	BB#4: derived from LLVM BB %startup_fuel_valves3.if.then12
	    Predecessors according to CFG: BB#3
1820B		%vreg27<def> = LUI 1048575; GR32Bit:%vreg27
1820B		  * %a5<def> = LUI 4095
1820B		  * %a5<def> = SRLI %a5<internal>, 12
1820B		  * ADD %vreg27, %vreg27, %a5; GR32Bit:%vreg27
1820B		  * %vreg23<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg23
1820B		  * %vreg24<def> = LW %vreg23, 0; mem:LD4[%2] GR32Bit:%vreg24,%vreg23
1820B		  * SW %zero, %vreg24<kill>, 12; mem:ST4[%21] GR32Bit:%vreg24
1820B		  * %vreg25<def> = LW %vreg23<kill>, 0; mem:LD4[%2] GR32Bit:%vreg25,%vreg23
1820B		  * %vreg26<def> = LW %vreg25<kill>, 20; mem:LD4[%23] GR32Bit:%vreg26,%vreg25
1820B		  * %vreg164<def> = LUI 1; GR32Bit:%vreg164
1820B		  * WRITEPM %vreg164, %vreg26, 0; GR32Bit:%vreg164,%vreg26
1820B		  * %vreg166<def> = LUI 2; GR32Bit:%vreg166
1820B		  * WRITEPM %vreg166, %vreg26, 0; GR32Bit:%vreg166,%vreg26
1820B		  * %vreg168<def> = LUI 3; GR32Bit:%vreg168
1820B		  * WRITEPM %vreg168, %vreg26, 0; GR32Bit:%vreg168,%vreg26
1820B		  * WRITEPM %vreg164<kill>, %vreg27, 4; GR32Bit:%vreg164,%vreg27
1820B		  * WRITEPM %vreg166<kill>, %vreg27, 4; GR32Bit:%vreg166,%vreg27
1820B		  * WRITEPM %vreg168<kill>, %vreg27, 4; GR32Bit:%vreg168,%vreg27
1820B		  * BNE <BB#7>, %vreg26<kill>, %vreg27<kill>; GR32Bit:%vreg26,%vreg27
1820B		  * %zero<def> = ADDI %zero, 0
1820B		  * %zero<def> = ADDI %zero, 0
1820B		  * JAL <BB#5>
1820B		  * %zero<def> = ADDI %zero, 0
1820B		  * %zero<def> = ADDI %zero, 0
3044B		%vreg165<def> = LUI 1; GR32Bit:%vreg165
3044B		  * %vreg170<def> = DREADPM %vreg165, 0; GR32Bit:%vreg170,%vreg165
3044B		  * %vreg173<def> = DREADPM %vreg165<kill>, 4; GR32Bit:%vreg173,%vreg165
3044B		  * BNE <BB#7>, %vreg170<kill>, %vreg173<kill>; GR32Bit:%vreg170,%vreg173
3044B		  * %zero<def> = ADDI %zero, 0
3044B		  * %zero<def> = ADDI %zero, 0
3044B		  * JAL <BB#5>
3044B		  * %zero<def> = ADDI %zero, 0
3044B		  * %zero<def> = ADDI %zero, 0
3132B		%vreg167<def> = LUI 2; GR32Bit:%vreg167
3132B		  * %vreg171<def> = DREADPM %vreg167, 0; GR32Bit:%vreg171,%vreg167
3132B		  * %vreg174<def> = DREADPM %vreg167<kill>, 4; GR32Bit:%vreg174,%vreg167
3132B		  * BNE <BB#7>, %vreg171<kill>, %vreg174<kill>; GR32Bit:%vreg171,%vreg174
3132B		  * %zero<def> = ADDI %zero, 0
3132B		  * %zero<def> = ADDI %zero, 0
3132B		  * JAL <BB#5>
3132B		  * %zero<def> = ADDI %zero, 0
3132B		  * %zero<def> = ADDI %zero, 0
3220B		%vreg169<def> = LUI 3; GR32Bit:%vreg169
3220B		  * %vreg172<def> = DREADPM %vreg169, 0; GR32Bit:%vreg172,%vreg169
3220B		  * %vreg175<def> = DREADPM %vreg169<kill>, 4; GR32Bit:%vreg175,%vreg169
3220B		  * BNE <BB#7>, %vreg172<kill>, %vreg175<kill>; GR32Bit:%vreg172,%vreg175
3220B		  * %zero<def> = ADDI %zero, 0
3220B		  * %zero<def> = ADDI %zero, 0
3220B		  * JAL <BB#5>
3220B		  * %zero<def> = ADDI %zero, 0
3220B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#5(16) BB#7(16)
> %t0<def> = LUI 1048575
> %a5<def> = LUI 4095
> %a5<def> = SRLI %a5<internal>, 12
> ADD %t0, %t0, %a5
> %t1<def> = ADDI %t5, <fi#1>
> %t2<def> = LW %t1, 0; mem:LD4[%2]
> SW %zero, %t2<kill>, 12; mem:ST4[%21]
> %t1<def> = LW %t1<kill>, 0; mem:LD4[%2]
> %t1<def> = LW %t1<kill>, 20; mem:LD4[%23]
> %t2<def> = LUI 1
> WRITEPM %t2, %t1, 0
> %fp<def> = LUI 2
> WRITEPM %fp, %t1, 0
> %a0<def> = LUI 3
> WRITEPM %a0, %t1, 0
> WRITEPM %t2<kill>, %t0, 4
> WRITEPM %fp<kill>, %t0, 4
> WRITEPM %a0<kill>, %t0, 4
> BNE <BB#7>, %t1<kill>, %t0<kill>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#5>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 1
> %t1<def> = DREADPM %t0, 0
> %t0<def> = DREADPM %t0<kill>, 4
> BNE <BB#7>, %t1<kill>, %t0<kill>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#5>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 2
> %t1<def> = DREADPM %t0, 0
> %t0<def> = DREADPM %t0<kill>, 4
> BNE <BB#7>, %t1<kill>, %t0<kill>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#5>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t1<def> = LUI 3
> %t0<def> = DREADPM %t1, 0
> %t1<def> = DREADPM %t1<kill>, 4
> BNE <BB#7>, %t0<kill>, %t1<kill>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#5>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
3492B	BB#5: derived from LLVM BB %startup_fuel_valves3.if.then16
	    Predecessors according to CFG: BB#4
3500B		%vreg28<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg28
3500B		  * %vreg29<def> = LW %vreg28<kill>, 0; mem:LD4[%2] GR32Bit:%vreg29,%vreg28
3500B		  * %vreg30<def> = LW %vreg29, 4; mem:LD4[%27] GR32Bit:%vreg30,%vreg29
3500B		  * SW %vreg30<kill>, %vreg29<kill>, 20; mem:ST4[%30] GR32Bit:%vreg30,%vreg29
3500B		  * JAL <BB#7>
3500B		  * %zero<def> = ADDI %zero, 0
3500B		  * %zero<def> = ADDI %zero, 0
3556B		JAL <BB#7>
3556B		  * %zero<def> = ADDI %zero, 0
3556B		  * %zero<def> = ADDI %zero, 0
3580B		JAL <BB#7>
3580B		  * %zero<def> = ADDI %zero, 0
3580B		  * %zero<def> = ADDI %zero, 0
3604B		JAL <BB#7>
3604B		  * %zero<def> = ADDI %zero, 0
3604B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#7
> %t0<def> = ADDI %t5, <fi#1>
> %t0<def> = LW %t0<kill>, 0; mem:LD4[%2]
> %t1<def> = LW %t0, 4; mem:LD4[%27]
> SW %t1<kill>, %t0<kill>, 20; mem:ST4[%30]
> JAL <BB#7>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#7>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#7>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#7>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
3676B	BB#6: derived from LLVM BB %startup_fuel_valves3.if.else22
	    Predecessors according to CFG: BB#2
3684B		%vreg18<def> = ADDI %zero, 1; GR32Bit:%vreg18
3684B		  * %vreg16<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg16
3684B		  * %vreg17<def> = LW %vreg16, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg16
3684B		  * SW %vreg18, %vreg17<kill>, 12; mem:ST4[%32] GR32Bit:%vreg18,%vreg17
3684B		  * %vreg19<def> = LW %vreg16<kill>, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg16
3684B		  * SW %vreg18<kill>, %vreg19<kill>, 16; mem:ST4[%34] GR32Bit:%vreg18,%vreg19
3692B		%zero<def> = ADDI %zero, 0
3700B		%zero<def> = ADDI %zero, 0
3708B		%zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#7
> %t0<def> = ADDI %zero, 1
> %t1<def> = ADDI %t5, <fi#1>
> %t2<def> = LW %t1, 0; mem:LD4[%2]
> SW %t0, %t2<kill>, 12; mem:ST4[%32]
> %t1<def> = LW %t1<kill>, 0; mem:LD4[%2]
> SW %t0<kill>, %t1<kill>, 16; mem:ST4[%34]
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
3764B	BB#7: derived from LLVM BB %startup_fuel_valves3.if.end26
	    Predecessors according to CFG: BB#1 BB#6 BB#3 BB#4 BB#5
2864B		%vreg33<def> = LUI 286872; GR32Bit:%vreg33
2864B		  * %a5<def> = LUI 1
2864B		  * %a5<def> = SRLI %a5<internal>, 12
2864B		  * ADD %vreg33, %vreg33, %a5; GR32Bit:%vreg33
2864B		  * %vreg31<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg31
2864B		  * %vreg32<def> = FLW %vreg31<kill>, 0; mem:LD4[%3] FP32Bit:%vreg32 GR32Bit:%vreg31
2864B		  * %vreg35<def> = COPY %vreg33<kill>; FP32Bit:%vreg35 GR32Bit:%vreg33
2864B		  * %vreg34<def> = FULT_S %vreg35<kill>, %vreg32<kill>; GR32Bit:%vreg34 FP32Bit:%vreg35,%vreg32
2864B		  * %vreg176<def> = LUI 1; GR32Bit:%vreg176
2864B		  * WRITEPM %vreg176<kill>, %vreg34, 0; GR32Bit:%vreg176,%vreg34
2864B		  * %vreg178<def> = LUI 2; GR32Bit:%vreg178
2864B		  * WRITEPM %vreg178<kill>, %vreg34, 0; GR32Bit:%vreg178,%vreg34
2864B		  * %vreg180<def> = LUI 3; GR32Bit:%vreg180
2864B		  * WRITEPM %vreg180<kill>, %vreg34, 0; GR32Bit:%vreg180,%vreg34
2864B		  * BNE <BB#11>, %vreg34<kill>, %zero; GR32Bit:%vreg34
2864B		  * %zero<def> = ADDI %zero, 0
2864B		  * %zero<def> = ADDI %zero, 0
2864B		  * JAL <BB#8>
2864B		  * %zero<def> = ADDI %zero, 0
2864B		  * %zero<def> = ADDI %zero, 0
3928B		%vreg177<def> = LUI 1; GR32Bit:%vreg177
3928B		  * %vreg182<def> = DREADPM %vreg177<kill>, 0; GR32Bit:%vreg182,%vreg177
3928B		  * BNE <BB#11>, %vreg182<kill>, %zero; GR32Bit:%vreg182
3928B		  * %zero<def> = ADDI %zero, 0
3928B		  * %zero<def> = ADDI %zero, 0
3928B		  * JAL <BB#8>
3928B		  * %zero<def> = ADDI %zero, 0
3928B		  * %zero<def> = ADDI %zero, 0
4008B		%vreg179<def> = LUI 2; GR32Bit:%vreg179
4008B		  * %vreg183<def> = DREADPM %vreg179<kill>, 0; GR32Bit:%vreg183,%vreg179
4008B		  * BNE <BB#11>, %vreg183<kill>, %zero; GR32Bit:%vreg183
4008B		  * %zero<def> = ADDI %zero, 0
4008B		  * %zero<def> = ADDI %zero, 0
4008B		  * JAL <BB#8>
4008B		  * %zero<def> = ADDI %zero, 0
4008B		  * %zero<def> = ADDI %zero, 0
4088B		%vreg181<def> = LUI 3; GR32Bit:%vreg181
4088B		  * %vreg184<def> = DREADPM %vreg181<kill>, 0; GR32Bit:%vreg184,%vreg181
4088B		  * BNE <BB#11>, %vreg184<kill>, %zero; GR32Bit:%vreg184
4088B		  * %zero<def> = ADDI %zero, 0
4088B		  * %zero<def> = ADDI %zero, 0
4088B		  * JAL <BB#8>
4088B		  * %zero<def> = ADDI %zero, 0
4088B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#8(16) BB#11(16)
> %t0<def> = LUI 286872
> %a5<def> = LUI 1
> %a5<def> = SRLI %a5<internal>, 12
> ADD %t0, %t0, %a5
> %t1<def> = ADDI %t5, <fi#2>
> %ft1<def> = FLW %t1<kill>, 0; mem:LD4[%3]
> %ft2<def> = COPY %t0<kill>
> %t0<def> = FULT_S %ft2<kill>, %ft1<kill>
> %t1<def> = LUI 1
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 2
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 3
> WRITEPM %t1<kill>, %t0, 0
> BNE <BB#11>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#8>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 1
> %t0<def> = DREADPM %t0<kill>, 0
> BNE <BB#11>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#8>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 2
> %t0<def> = DREADPM %t0<kill>, 0
> BNE <BB#11>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#8>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 3
> %t0<def> = DREADPM %t0<kill>, 0
> BNE <BB#11>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#8>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
4304B	BB#8: derived from LLVM BB %startup_fuel_valves3.if.then28
	    Predecessors according to CFG: BB#7
3772B		%vreg40<def> = LUI 1048575; GR32Bit:%vreg40
3772B		  * %a5<def> = LUI 4095
3772B		  * %a5<def> = SRLI %a5<internal>, 12
3772B		  * ADD %vreg40, %vreg40, %a5; GR32Bit:%vreg40
3772B		  * %vreg36<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg36
3772B		  * %vreg37<def> = LW %vreg36, 0; mem:LD4[%2] GR32Bit:%vreg37,%vreg36
3772B		  * SW %zero, %vreg37<kill>, 8; mem:ST4[%38] GR32Bit:%vreg37
3772B		  * %vreg38<def> = LW %vreg36<kill>, 0; mem:LD4[%2] GR32Bit:%vreg38,%vreg36
3772B		  * %vreg39<def> = LW %vreg38<kill>, 24; mem:LD4[%40] GR32Bit:%vreg39,%vreg38
3772B		  * %vreg185<def> = LUI 1; GR32Bit:%vreg185
3772B		  * WRITEPM %vreg185, %vreg39, 0; GR32Bit:%vreg185,%vreg39
3772B		  * %vreg187<def> = LUI 2; GR32Bit:%vreg187
3772B		  * WRITEPM %vreg187, %vreg39, 0; GR32Bit:%vreg187,%vreg39
3772B		  * %vreg189<def> = LUI 3; GR32Bit:%vreg189
3772B		  * WRITEPM %vreg189, %vreg39, 0; GR32Bit:%vreg189,%vreg39
3772B		  * WRITEPM %vreg185<kill>, %vreg40, 4; GR32Bit:%vreg185,%vreg40
3772B		  * WRITEPM %vreg187<kill>, %vreg40, 4; GR32Bit:%vreg187,%vreg40
3772B		  * WRITEPM %vreg189<kill>, %vreg40, 4; GR32Bit:%vreg189,%vreg40
3772B		  * BNE <BB#11>, %vreg39<kill>, %vreg40<kill>; GR32Bit:%vreg39,%vreg40
3772B		  * %zero<def> = ADDI %zero, 0
3772B		  * %zero<def> = ADDI %zero, 0
3772B		  * JAL <BB#9>
3772B		  * %zero<def> = ADDI %zero, 0
3772B		  * %zero<def> = ADDI %zero, 0
4492B		%vreg186<def> = LUI 1; GR32Bit:%vreg186
4492B		  * %vreg191<def> = DREADPM %vreg186, 0; GR32Bit:%vreg191,%vreg186
4492B		  * %vreg194<def> = DREADPM %vreg186<kill>, 4; GR32Bit:%vreg194,%vreg186
4492B		  * BNE <BB#11>, %vreg191<kill>, %vreg194<kill>; GR32Bit:%vreg191,%vreg194
4492B		  * %zero<def> = ADDI %zero, 0
4492B		  * %zero<def> = ADDI %zero, 0
4492B		  * JAL <BB#9>
4492B		  * %zero<def> = ADDI %zero, 0
4492B		  * %zero<def> = ADDI %zero, 0
4580B		%vreg188<def> = LUI 2; GR32Bit:%vreg188
4580B		  * %vreg192<def> = DREADPM %vreg188, 0; GR32Bit:%vreg192,%vreg188
4580B		  * %vreg195<def> = DREADPM %vreg188<kill>, 4; GR32Bit:%vreg195,%vreg188
4580B		  * BNE <BB#11>, %vreg192<kill>, %vreg195<kill>; GR32Bit:%vreg192,%vreg195
4580B		  * %zero<def> = ADDI %zero, 0
4580B		  * %zero<def> = ADDI %zero, 0
4580B		  * JAL <BB#9>
4580B		  * %zero<def> = ADDI %zero, 0
4580B		  * %zero<def> = ADDI %zero, 0
4668B		%vreg190<def> = LUI 3; GR32Bit:%vreg190
4668B		  * %vreg193<def> = DREADPM %vreg190, 0; GR32Bit:%vreg193,%vreg190
4668B		  * %vreg196<def> = DREADPM %vreg190<kill>, 4; GR32Bit:%vreg196,%vreg190
4668B		  * BNE <BB#11>, %vreg193<kill>, %vreg196<kill>; GR32Bit:%vreg193,%vreg196
4668B		  * %zero<def> = ADDI %zero, 0
4668B		  * %zero<def> = ADDI %zero, 0
4668B		  * JAL <BB#9>
4668B		  * %zero<def> = ADDI %zero, 0
4668B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#9(16) BB#11(16)
> %t0<def> = LUI 1048575
> %a5<def> = LUI 4095
> %a5<def> = SRLI %a5<internal>, 12
> ADD %t0, %t0, %a5
> %t1<def> = ADDI %t5, <fi#1>
> %t2<def> = LW %t1, 0; mem:LD4[%2]
> SW %zero, %t2<kill>, 8; mem:ST4[%38]
> %t1<def> = LW %t1<kill>, 0; mem:LD4[%2]
> %t1<def> = LW %t1<kill>, 24; mem:LD4[%40]
> %t2<def> = LUI 1
> WRITEPM %t2, %t1, 0
> %fp<def> = LUI 2
> WRITEPM %fp, %t1, 0
> %a0<def> = LUI 3
> WRITEPM %a0, %t1, 0
> WRITEPM %t2<kill>, %t0, 4
> WRITEPM %fp<kill>, %t0, 4
> WRITEPM %a0<kill>, %t0, 4
> BNE <BB#11>, %t1<kill>, %t0<kill>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#9>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 1
> %t1<def> = DREADPM %t0, 0
> %t0<def> = DREADPM %t0<kill>, 4
> BNE <BB#11>, %t1<kill>, %t0<kill>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#9>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 2
> %t1<def> = DREADPM %t0, 0
> %t0<def> = DREADPM %t0<kill>, 4
> BNE <BB#11>, %t1<kill>, %t0<kill>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#9>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t1<def> = LUI 3
> %t0<def> = DREADPM %t1, 0
> %t1<def> = DREADPM %t1<kill>, 4
> BNE <BB#11>, %t0<kill>, %t1<kill>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#9>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
4940B	BB#9: derived from LLVM BB %startup_fuel_valves3.if.then32
	    Predecessors according to CFG: BB#8
4948B		%vreg41<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg41
4948B		  * %vreg42<def> = LW %vreg41<kill>, 0; mem:LD4[%2] GR32Bit:%vreg42,%vreg41
4948B		  * %vreg43<def> = LW %vreg42, 4; mem:LD4[%44] GR32Bit:%vreg43,%vreg42
4948B		  * SW %vreg43<kill>, %vreg42<kill>, 24; mem:ST4[%47] GR32Bit:%vreg43,%vreg42
4948B		  * JAL <BB#11>
4948B		  * %zero<def> = ADDI %zero, 0
4948B		  * %zero<def> = ADDI %zero, 0
5004B		JAL <BB#11>
5004B		  * %zero<def> = ADDI %zero, 0
5004B		  * %zero<def> = ADDI %zero, 0
5028B		JAL <BB#11>
5028B		  * %zero<def> = ADDI %zero, 0
5028B		  * %zero<def> = ADDI %zero, 0
5052B		JAL <BB#11>
5052B		  * %zero<def> = ADDI %zero, 0
5052B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#11
> %t0<def> = ADDI %t5, <fi#1>
> %t0<def> = LW %t0<kill>, 0; mem:LD4[%2]
> %t1<def> = LW %t0, 4; mem:LD4[%44]
> SW %t1<kill>, %t0<kill>, 24; mem:ST4[%47]
> JAL <BB#11>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#11>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#11>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#11>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
5124B	BB#10: derived from LLVM BB %startup_fuel_valves3.if.then
	    Predecessors according to CFG: BB#0
5132B		%vreg46<def> = ADDI %zero, 1; GR32Bit:%vreg46
5132B		  * %vreg44<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg44
5132B		  * %vreg45<def> = LW %vreg44, 0; mem:LD4[%2] GR32Bit:%vreg45,%vreg44
5132B		  * SW %vreg46, %vreg45<kill>, 8; mem:ST4[%49] GR32Bit:%vreg46,%vreg45
5132B		  * %vreg47<def> = LW %vreg44, 0; mem:LD4[%2] GR32Bit:%vreg47,%vreg44
5132B		  * SW %vreg46<kill>, %vreg47<kill>, 12; mem:ST4[%51] GR32Bit:%vreg46,%vreg47
5132B		  * %vreg48<def> = LW %vreg44<kill>, 0; mem:LD4[%2] GR32Bit:%vreg48,%vreg44
5132B		  * SW %zero, %vreg48<kill>, 16; mem:ST4[%53] GR32Bit:%vreg48
5140B		%zero<def> = ADDI %zero, 0
5148B		%zero<def> = ADDI %zero, 0
5156B		%zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#11
> %t0<def> = ADDI %zero, 1
> %t1<def> = ADDI %t5, <fi#1>
> %t2<def> = LW %t1, 0; mem:LD4[%2]
> SW %t0, %t2<kill>, 8; mem:ST4[%49]
> %t2<def> = LW %t1, 0; mem:LD4[%2]
> SW %t0<kill>, %t2<kill>, 12; mem:ST4[%51]
> %t0<def> = LW %t1<kill>, 0; mem:LD4[%2]
> SW %zero, %t0<kill>, 16; mem:ST4[%53]
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
5228B	BB#11: derived from LLVM BB %startup_fuel_valves3.return
	    Predecessors according to CFG: BB#7 BB#8 BB#9 BB#10
5236B		%vreg51<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg51
5236B		  * %vreg49<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg49
5236B		  * %vreg50<def> = LW %vreg49<kill>, 0; mem:LD4[%2] GR32Bit:%vreg50,%vreg49
5236B		  * SW %vreg50<kill>, %vreg51<kill>, 0; mem:ST4[%1] GR32Bit:%vreg50,%vreg51
5236B		  * %vreg197<def> = ADDI %zero, 128; GR32Bit:%vreg197
5236B		  * %vreg198<def> = ADDI %zero, 1; GR32Bit:%vreg198
5236B		  * WRITECM %vreg197, %vreg198<kill>, 60; GR32Bit:%vreg197,%vreg198
5236B		  * %vreg199<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg199
5236B		  * %vreg200<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg200
5236B		  * %vreg201<def> = SRLI %vreg200<kill>, 12; GR32Bit:%vreg201,%vreg200
5236B		  * %vreg202<def> = ADD %vreg199<kill>, %vreg201<kill>; GR32Bit:%vreg202,%vreg199,%vreg201
5236B		  * %vreg203<def> = ADDI %zero, 16; GR32Bit:%vreg203
5236B		  * %vreg204<def> = SRLI %vreg197, 22; GR32Bit:%vreg204,%vreg197
5236B		  * %vreg205<def> = SRLI %vreg197, 12; GR32Bit:%vreg205,%vreg197
5236B		  * %vreg206<def> = ANDI %vreg205<kill>, 15; GR32Bit:%vreg206,%vreg205
5236B		  * %vreg207<def> = SRLI %vreg197, 6; GR32Bit:%vreg207,%vreg197
5236B		  * %vreg208<def> = ANDI %vreg207<kill>, 63; GR32Bit:%vreg208,%vreg207
5236B		  * %vreg209<def> = ADDI %zero, 832; GR32Bit:%vreg209
5236B		  * %vreg210<def> = MUL %vreg204<kill>, %vreg209<kill>; GR32Bit:%vreg210,%vreg204,%vreg209
5236B		  * %vreg211<def> = ADDI %zero, 52; GR32Bit:%vreg211
5236B		  * %vreg212<def> = MUL %vreg206<kill>, %vreg211<kill>; GR32Bit:%vreg212,%vreg206,%vreg211
5236B		  * %vreg213<def> = ADD %vreg212<kill>, %vreg208<kill>; GR32Bit:%vreg213,%vreg212,%vreg208
5236B		  * %vreg214<def> = ADD %vreg213<kill>, %vreg210<kill>; GR32Bit:%vreg214,%vreg213,%vreg210
5236B		  * %vreg215<def> = MUL %vreg214<kill>, %vreg203<kill>; GR32Bit:%vreg215,%vreg214,%vreg203
5236B		  * %vreg216<def> = ADD %vreg215<kill>, %vreg202<kill>; GR32Bit:%vreg216,%vreg215,%vreg202
5236B		  * %vreg217<def> = LW %t5, 0; GR32Bit:%vreg217
5236B		  * SW %vreg217<kill>, %vreg216<kill>, 4; GR32Bit:%vreg217,%vreg216
5236B		  * %vreg218<def> = LUI 1; GR32Bit:%vreg218
5236B		  * WRITEPM %vreg218<kill>, %vreg197<kill>, 0; GR32Bit:%vreg218,%vreg197
5236B		  * FDELETE %t4, 0
5236B		  * END 0
5236B		  * %zero<def> = ADDI %zero, 0
5236B		  * %zero<def> = ADDI %zero, 0
5508B		%vreg219<def> = LUI 1; GR32Bit:%vreg219
5508B		  * %vreg220<def> = DREADPM %vreg219<kill>, 0; GR32Bit:%vreg220,%vreg219
5508B		  * %vreg221<def> = LUI 1048575; GR32Bit:%vreg221
5508B		  * %a5<def> = LUI 4095
5508B		  * %a5<def> = SRLI %a5<internal>, 12
5508B		  * ADD %vreg221, %vreg221, %a5; GR32Bit:%vreg221
5508B		  * SYNC %vreg220, %vreg221<kill>, 60; GR32Bit:%vreg220,%vreg221
5508B		  * END 0
5508B		  * %zero<def> = ADDI %zero, 0
5508B		  * %zero<def> = ADDI %zero, 0
5588B		END 0
5588B		  * %zero<def> = ADDI %zero, 0
5588B		  * %zero<def> = ADDI %zero, 0
5612B		END 0
5612B		  * %zero<def> = ADDI %zero, 0
5612B		  * %zero<def> = ADDI %zero, 0
> %t0<def> = ADDI %t5, <fi#0>
> %t1<def> = ADDI %t5, <fi#1>
> %t1<def> = LW %t1<kill>, 0; mem:LD4[%2]
> SW %t1<kill>, %t0<kill>, 0; mem:ST4[%1]
> %t0<def> = ADDI %zero, 128
> %t1<def> = ADDI %zero, 1
> WRITECM %t0, %t1<kill>, 60
> %t1<def> = LUI <MCSym="%hi("ga#512")">
> %t2<def> = LUI <MCSym="%lo("ga#512")">
> %t2<def> = SRLI %t2<kill>, 12
> %t1<def> = ADD %t1<kill>, %t2<kill>
> %t2<def> = ADDI %zero, 16
> %fp<def> = SRLI %t0, 22
> %a0<def> = SRLI %t0, 12
> %a0<def> = ANDI %a0<kill>, 15
> %a1<def> = SRLI %t0, 6
> %a1<def> = ANDI %a1<kill>, 63
> %a2<def> = ADDI %zero, 832
> %fp<def> = MUL %fp<kill>, %a2<kill>
> %a2<def> = ADDI %zero, 52
> %a0<def> = MUL %a0<kill>, %a2<kill>
> %a0<def> = ADD %a0<kill>, %a1<kill>
> %fp<def> = ADD %a0<kill>, %fp<kill>
> %t2<def> = MUL %fp<kill>, %t2<kill>
> %t1<def> = ADD %t2<kill>, %t1<kill>
> %t2<def> = LW %t5, 0
> SW %t2<kill>, %t1<kill>, 4
> %t1<def> = LUI 1
> WRITEPM %t1<kill>, %t0<kill>, 0
> FDELETE %t4, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 1
> %t0<def> = DREADPM %t0<kill>, 0
> %t1<def> = LUI 1048575
> %a5<def> = LUI 4095
> %a5<def> = SRLI %a5<internal>, 12
> ADD %t1, %t1, %a5
> SYNC %t0, %t1<kill>, 60
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
********** EMITTING LIVE DEBUG VARIABLES **********
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: startup_fuel_valves3
real copy:   %ft2<def> = COPY %t0<kill>
  %ft2<def> = COPY %t0<kill>
replaced by: %t0<def> = LUI 284576
real copy:   %ft2<def> = COPY %t0<kill>
  %ft2<def> = COPY %t0<kill>
replaced by: %t0<def> = LUI 287796
real copy:   %ft2<def> = COPY %t0<kill>
  %ft2<def> = COPY %t0<kill>
replaced by: %t0<def> = LUI 286872
current state of mf:# Machine code for function startup_fuel_valves3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %startup_fuel_valves3.entry
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 16
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %t5, <fi#2>
	  * %t0<def> = ADDI %t5, <fi#1>
	  * %t2<def> = ADDI %t5, <fi#-1>
	  * SW %t2, %t0, 0; mem:ST4[%2]
	  * %ft1<def> = FLW %t2<kill>, 0; mem:LD4[%6](align=16)
	  * FSW %ft1<kill>, %t1<kill>, 0; mem:ST4[%3]
	  * %t0<def> = LW %t0<kill>, 0; mem:LD4[%2]
	  * %t0<def> = LW %t0<kill>, 4; mem:LD4[%9]
	  * %t1<def> = LUI 1
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 2
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 3
	  * WRITEPM %t1<kill>, %t0, 0
	  * BEQ <BB#10>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 16
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = LUI 1
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BEQ <BB#10>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 16
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = LUI 2
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BEQ <BB#10>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 16
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = LUI 3
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BEQ <BB#10>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#10(12) BB#1(20)

BB#1: derived from LLVM BB %startup_fuel_valves3.if.else
    Predecessors according to CFG: BB#0
	%t0<def> = LUI 284576
	  * %a5<def> = LUI 0
	  * %a5<def> = SRLI %a5<internal>, 12
	  * ADD %t0, %t0, %a5
	  * %t1<def> = ADDI %t5, <fi#2>
	  * %ft1<def> = FLW %t1<kill>, 0; mem:LD4[%3]
	  * %ft2<def> = FMV_S_X %t0<kill>
	  * %t0<def> = FLT_S %ft2<kill>, %ft1<kill>
	  * %t1<def> = LUI 1
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 2
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 3
	  * WRITEPM %t1<kill>, %t0, 0
	  * BNE <BB#7>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 1
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BNE <BB#7>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 2
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BNE <BB#7>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 3
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BNE <BB#7>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#7(16) BB#2(16)

BB#2: derived from LLVM BB %startup_fuel_valves3.if.else7
    Predecessors according to CFG: BB#1
	%t0<def> = LUI 287796
	  * %a5<def> = LUI 4095
	  * %a5<def> = SRLI %a5<internal>, 12
	  * ADD %t0, %t0, %a5
	  * %t1<def> = ADDI %t5, <fi#2>
	  * %ft1<def> = FLW %t1<kill>, 0; mem:LD4[%3]
	  * %ft2<def> = FMV_S_X %t0<kill>
	  * %t0<def> = FULT_S %ft1<kill>, %ft2<kill>
	  * %t1<def> = LUI 1
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 2
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 3
	  * WRITEPM %t1<kill>, %t0, 0
	  * BNE <BB#6>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#3>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 1
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BNE <BB#6>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#3>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 2
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BNE <BB#6>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#3>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 3
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BNE <BB#6>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#3>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#3(16) BB#6(16)

BB#3: derived from LLVM BB %startup_fuel_valves3.if.then9
    Predecessors according to CFG: BB#2
	%t0<def> = ADDI %t5, <fi#1>
	  * %t0<def> = LW %t0<kill>, 0; mem:LD4[%2]
	  * %t0<def> = LW %t0<kill>, 16; mem:LD4[%17]
	  * %t1<def> = LUI 1
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 2
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 3
	  * WRITEPM %t1<kill>, %t0, 0
	  * BNE <BB#7>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#4>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 1
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BNE <BB#7>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#4>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 2
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BNE <BB#7>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#4>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 3
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BNE <BB#7>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#4>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#4(12) BB#7(20)

BB#4: derived from LLVM BB %startup_fuel_valves3.if.then12
    Predecessors according to CFG: BB#3
	%t0<def> = LUI 1048575
	  * %a5<def> = LUI 4095
	  * %a5<def> = SRLI %a5<internal>, 12
	  * ADD %t0, %t0, %a5
	  * %t1<def> = ADDI %t5, <fi#1>
	  * %t2<def> = LW %t1, 0; mem:LD4[%2]
	  * SW %zero, %t2<kill>, 12; mem:ST4[%21]
	  * %t1<def> = LW %t1<kill>, 0; mem:LD4[%2]
	  * %t1<def> = LW %t1<kill>, 20; mem:LD4[%23]
	  * %t2<def> = LUI 1
	  * WRITEPM %t2, %t1, 0
	  * %fp<def> = LUI 2
	  * WRITEPM %fp, %t1, 0
	  * %a0<def> = LUI 3
	  * WRITEPM %a0, %t1, 0
	  * WRITEPM %t2<kill>, %t0, 4
	  * WRITEPM %fp<kill>, %t0, 4
	  * WRITEPM %a0<kill>, %t0, 4
	  * BNE <BB#7>, %t1<kill>, %t0<kill>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#5>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 1
	  * %t1<def> = DREADPM %t0, 0
	  * %t0<def> = DREADPM %t0<kill>, 4
	  * BNE <BB#7>, %t1<kill>, %t0<kill>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#5>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 2
	  * %t1<def> = DREADPM %t0, 0
	  * %t0<def> = DREADPM %t0<kill>, 4
	  * BNE <BB#7>, %t1<kill>, %t0<kill>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#5>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t1<def> = LUI 3
	  * %t0<def> = DREADPM %t1, 0
	  * %t1<def> = DREADPM %t1<kill>, 4
	  * BNE <BB#7>, %t0<kill>, %t1<kill>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#5>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#5(16) BB#7(16)

BB#5: derived from LLVM BB %startup_fuel_valves3.if.then16
    Predecessors according to CFG: BB#4
	%t0<def> = ADDI %t5, <fi#1>
	  * %t0<def> = LW %t0<kill>, 0; mem:LD4[%2]
	  * %t1<def> = LW %t0, 4; mem:LD4[%27]
	  * SW %t1<kill>, %t0<kill>, 20; mem:ST4[%30]
	  * JAL <BB#7>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#7>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#7>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#7>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#7

BB#6: derived from LLVM BB %startup_fuel_valves3.if.else22
    Predecessors according to CFG: BB#2
	%t0<def> = ADDI %zero, 1
	  * %t1<def> = ADDI %t5, <fi#1>
	  * %t2<def> = LW %t1, 0; mem:LD4[%2]
	  * SW %t0, %t2<kill>, 12; mem:ST4[%32]
	  * %t1<def> = LW %t1<kill>, 0; mem:LD4[%2]
	  * SW %t0<kill>, %t1<kill>, 16; mem:ST4[%34]
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#7

BB#7: derived from LLVM BB %startup_fuel_valves3.if.end26
    Predecessors according to CFG: BB#1 BB#6 BB#3 BB#4 BB#5
	%t0<def> = LUI 286872
	  * %a5<def> = LUI 1
	  * %a5<def> = SRLI %a5<internal>, 12
	  * ADD %t0, %t0, %a5
	  * %t1<def> = ADDI %t5, <fi#2>
	  * %ft1<def> = FLW %t1<kill>, 0; mem:LD4[%3]
	  * %ft2<def> = FMV_S_X %t0<kill>
	  * %t0<def> = FULT_S %ft2<kill>, %ft1<kill>
	  * %t1<def> = LUI 1
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 2
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 3
	  * WRITEPM %t1<kill>, %t0, 0
	  * BNE <BB#11>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#8>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 1
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BNE <BB#11>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#8>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 2
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BNE <BB#11>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#8>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 3
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BNE <BB#11>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#8>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#8(16) BB#11(16)

BB#8: derived from LLVM BB %startup_fuel_valves3.if.then28
    Predecessors according to CFG: BB#7
	%t0<def> = LUI 1048575
	  * %a5<def> = LUI 4095
	  * %a5<def> = SRLI %a5<internal>, 12
	  * ADD %t0, %t0, %a5
	  * %t1<def> = ADDI %t5, <fi#1>
	  * %t2<def> = LW %t1, 0; mem:LD4[%2]
	  * SW %zero, %t2<kill>, 8; mem:ST4[%38]
	  * %t1<def> = LW %t1<kill>, 0; mem:LD4[%2]
	  * %t1<def> = LW %t1<kill>, 24; mem:LD4[%40]
	  * %t2<def> = LUI 1
	  * WRITEPM %t2, %t1, 0
	  * %fp<def> = LUI 2
	  * WRITEPM %fp, %t1, 0
	  * %a0<def> = LUI 3
	  * WRITEPM %a0, %t1, 0
	  * WRITEPM %t2<kill>, %t0, 4
	  * WRITEPM %fp<kill>, %t0, 4
	  * WRITEPM %a0<kill>, %t0, 4
	  * BNE <BB#11>, %t1<kill>, %t0<kill>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#9>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 1
	  * %t1<def> = DREADPM %t0, 0
	  * %t0<def> = DREADPM %t0<kill>, 4
	  * BNE <BB#11>, %t1<kill>, %t0<kill>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#9>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 2
	  * %t1<def> = DREADPM %t0, 0
	  * %t0<def> = DREADPM %t0<kill>, 4
	  * BNE <BB#11>, %t1<kill>, %t0<kill>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#9>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t1<def> = LUI 3
	  * %t0<def> = DREADPM %t1, 0
	  * %t1<def> = DREADPM %t1<kill>, 4
	  * BNE <BB#11>, %t0<kill>, %t1<kill>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#9>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#9(16) BB#11(16)

BB#9: derived from LLVM BB %startup_fuel_valves3.if.then32
    Predecessors according to CFG: BB#8
	%t0<def> = ADDI %t5, <fi#1>
	  * %t0<def> = LW %t0<kill>, 0; mem:LD4[%2]
	  * %t1<def> = LW %t0, 4; mem:LD4[%44]
	  * SW %t1<kill>, %t0<kill>, 24; mem:ST4[%47]
	  * JAL <BB#11>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#11>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#11>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	JAL <BB#11>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#11

BB#10: derived from LLVM BB %startup_fuel_valves3.if.then
    Predecessors according to CFG: BB#0
	%t0<def> = ADDI %zero, 1
	  * %t1<def> = ADDI %t5, <fi#1>
	  * %t2<def> = LW %t1, 0; mem:LD4[%2]
	  * SW %t0, %t2<kill>, 8; mem:ST4[%49]
	  * %t2<def> = LW %t1, 0; mem:LD4[%2]
	  * SW %t0<kill>, %t2<kill>, 12; mem:ST4[%51]
	  * %t0<def> = LW %t1<kill>, 0; mem:LD4[%2]
	  * SW %zero, %t0<kill>, 16; mem:ST4[%53]
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#11

BB#11: derived from LLVM BB %startup_fuel_valves3.return
    Predecessors according to CFG: BB#7 BB#8 BB#9 BB#10
	%t0<def> = ADDI %t5, <fi#0>
	  * %t1<def> = ADDI %t5, <fi#1>
	  * %t1<def> = LW %t1<kill>, 0; mem:LD4[%2]
	  * SW %t1<kill>, %t0<kill>, 0; mem:ST4[%1]
	  * %t0<def> = ADDI %zero, 128
	  * %t1<def> = ADDI %zero, 1
	  * WRITECM %t0, %t1<kill>, 60
	  * %t1<def> = LUI <MCSym="%hi("ga#512")">
	  * %t2<def> = LUI <MCSym="%lo("ga#512")">
	  * %t2<def> = SRLI %t2<kill>, 12
	  * %t1<def> = ADD %t1<kill>, %t2<kill>
	  * %t2<def> = ADDI %zero, 16
	  * %fp<def> = SRLI %t0, 22
	  * %a0<def> = SRLI %t0, 12
	  * %a0<def> = ANDI %a0<kill>, 15
	  * %a1<def> = SRLI %t0, 6
	  * %a1<def> = ANDI %a1<kill>, 63
	  * %a2<def> = ADDI %zero, 832
	  * %fp<def> = MUL %fp<kill>, %a2<kill>
	  * %a2<def> = ADDI %zero, 52
	  * %a0<def> = MUL %a0<kill>, %a2<kill>
	  * %a0<def> = ADD %a0<kill>, %a1<kill>
	  * %fp<def> = ADD %a0<kill>, %fp<kill>
	  * %t2<def> = MUL %fp<kill>, %t2<kill>
	  * %t1<def> = ADD %t2<kill>, %t1<kill>
	  * %t2<def> = LW %t5, 0
	  * SW %t2<kill>, %t1<kill>, 4
	  * %t1<def> = LUI 1
	  * WRITEPM %t1<kill>, %t0<kill>, 0
	  * FDELETE %t4, 0
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 1
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * %t1<def> = LUI 1048575
	  * %a5<def> = LUI 4095
	  * %a5<def> = SRLI %a5<internal>, 12
	  * ADD %t1, %t1, %a5
	  * SYNC %t0, %t1<kill>, 60
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0

# End machine code for function startup_fuel_valves3.

lowering frame index for func startup_fuel_valves3:2 TO VAL:8
lowering frame index for func startup_fuel_valves3:1 TO VAL:4
lowering frame index for func startup_fuel_valves3:-1 TO VAL:12
lowering frame index for func startup_fuel_valves3:2 TO VAL:8
lowering frame index for func startup_fuel_valves3:2 TO VAL:8
lowering frame index for func startup_fuel_valves3:1 TO VAL:4
lowering frame index for func startup_fuel_valves3:1 TO VAL:4
lowering frame index for func startup_fuel_valves3:1 TO VAL:4
lowering frame index for func startup_fuel_valves3:1 TO VAL:4
lowering frame index for func startup_fuel_valves3:2 TO VAL:8
lowering frame index for func startup_fuel_valves3:1 TO VAL:4
lowering frame index for func startup_fuel_valves3:1 TO VAL:4
lowering frame index for func startup_fuel_valves3:1 TO VAL:4
lowering frame index for func startup_fuel_valves3:0 TO VAL:0
lowering frame index for func startup_fuel_valves3:1 TO VAL:4
