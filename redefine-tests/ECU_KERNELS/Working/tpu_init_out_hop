Args: /home/arka/Workspace/work/Git_Compiler_Repo/redefine-tests/ECU_KERNELS/../../..//MM_Compiler_latest/build/Release+Asserts/bin/opt -debug --load /home/arka/Workspace/work/Git_Compiler_Repo/redefine-tests/ECU_KERNELS/../../..//MM_Compiler_latest/build/Release+Asserts/bin/../lib/HyperOpCreationPass.so --HyperOpCreationPass -S ./Working/tpu_init.ll -o ./Working/tpu_init_HyOpPass.ll 

Features:
CPU:REDEFINE

Found cycles?0

-----------
Partitioning function:trp_init

-------
Acquiring bb entry
Adding basic blocks for traversal in a breadth biased order for function trp_init
added to succ list:for.cond,
distance of for.cond to exit 3

-------
Acquiring bb for.cond
Adding basic blocks for traversal in a breadth biased order for function trp_init
added to succ list:for.body,for.end,
distance of for.body to exit 4
distance of for.end to exit 1

-------
Acquiring bb for.body
Adding basic blocks for traversal in a breadth biased order for function trp_init
added to succ list:for.inc,
distance of for.end to exit 1
distance of for.inc to exit 3

-------
Acquiring bb for.inc
Adding basic blocks for traversal in a breadth biased order for function trp_init
added to succ list:didn't add for.cond

distance of for.end to exit 1

-------
Acquiring bb for.end
entered end hop for function trp_init
Adding basic blocks for traversal in a breadth biased order for function trp_init
added to succ list:
adding to creation map bbargs of size 1

-----------
Partitioning function:redefine_start

-------
Acquiring bb entry
entered end hop for function redefine_start
Adding basic blocks for traversal in a breadth biased order for function redefine_start
added to succ list:newName0,
distance of newName0 to exit 1

-------
Acquiring bb newName0
entered end hop for function redefine_start
Adding basic blocks for traversal in a breadth biased order for function redefine_start
added to succ list:newName01,
distance of newName01 to exit 1

-------
Acquiring bb newName01
entered end hop for function redefine_start
Adding basic blocks for traversal in a breadth biased order for function redefine_start
added to succ list:
adding to creation map bbargs of size 3
before partitioning:; ModuleID = './Working/tpu_init.ll'
target datalayout = "E-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-n32"
target triple = "redefine"

%struct.TP3_TAG = type { i32, i32, i32 }

@redefine_in_placeholder = common global i32 0, align 4
@redefine_out_TPUMCR = common global [2 x i32] zeroinitializer, align 4

; Function Attrs: nounwind
define i32 @trp_init(%struct.TP3_TAG* %tp3) #0 {
entry:
  %tp3.addr = alloca %struct.TP3_TAG*, align 4
  %i = alloca i32, align 4
  %psl = alloca i32, align 4
  %psl_filler = alloca i32, align 4
  store %struct.TP3_TAG* %tp3, %struct.TP3_TAG** %tp3.addr, align 4
  %0 = load i32* @redefine_in_placeholder, align 4
  %1 = load %struct.TP3_TAG** %tp3.addr, align 4
  %TPUMCR1 = getelementptr inbounds %struct.TP3_TAG* %1, i32 0, i32 0
  store i32 %0, i32* %TPUMCR1, align 4
  %2 = load %struct.TP3_TAG** %tp3.addr, align 4
  %TPUMCR2 = getelementptr inbounds %struct.TP3_TAG* %2, i32 0, i32 1
  store i32 0, i32* %TPUMCR2, align 4
  %3 = load %struct.TP3_TAG** %tp3.addr, align 4
  %TPUMCR3 = getelementptr inbounds %struct.TP3_TAG* %3, i32 0, i32 2
  store i32 1, i32* %TPUMCR3, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %psl_filler, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32* %psl_filler, align 4
  %cmp = icmp slt i32 %4, 5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32* %psl_filler, align 4
  %inc1 = add nsw i32 %6, 1
  store i32 %inc1, i32* %psl_filler, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %7 = load i32* %i, align 4
  %and = and i32 %7, 2
  store i32 %and, i32* %i, align 4
  %8 = load i32* %i, align 4
  ret i32 %8
}

; Function Attrs: nounwind
define void @redefine_start() #0 {
entry:
  %tpu = alloca %struct.TP3_TAG*, align 4
  %0 = load %struct.TP3_TAG** %tpu, align 4
  br label %newName0

newName0:                                         ; preds = %entry
  %call = call i32 @trp_init(%struct.TP3_TAG* %0)
  br label %newName01

newName01:                                        ; preds = %newName0
  store i32 %call, i32* getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1), align 4
  %1 = load %struct.TP3_TAG** %tpu, align 4
  %TPUMCR1 = getelementptr inbounds %struct.TP3_TAG* %1, i32 0, i32 0
  %2 = load i32* %TPUMCR1, align 4
  store i32 %2, i32* getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0), align 4
  ret void
}

attributes #0 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf"="true" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "unsafe-fp-math"="false" "use-soft-float"="false" }

!redefine.annotations = !{}
-----------Creating HyperOps from partitioned functions-----------
added to traversallist:entry
added to traversallist:newName0
added to traversallist:newName01
now at func:entry

-----------Creating a new HyperOp for function:redefine_start-----------

--------
Acquired bb:entry from parent:redefine_start
created func:redefine_start1
now at func:newName0
now at func:newName01

-----------Creating a new HyperOp for function:redefine_start-----------

--------
Acquired bb:newName01 from parent:redefine_start
created func:redefine_start2
now at func:entry

-----------Creating a new HyperOp for function:trp_init-----------
newName0,
--------
Acquired bb:entry from parent:trp_init

--------
Acquired bb:for.cond from parent:trp_init

--------
Acquired bb:for.body from parent:trp_init

--------
Acquired bb:for.inc from parent:trp_init

--------
Acquired bb:for.end from parent:trp_init

--------
Acquired bb:newName0 from parent:redefine_start
created func:trp_init3
before patching stuff:; ModuleID = './Working/tpu_init.ll'
target datalayout = "E-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-n32"
target triple = "redefine"

%struct.TP3_TAG = type { i32, i32, i32 }

@redefine_in_placeholder = common global i32 0, align 4
@redefine_out_TPUMCR = common global [2 x i32] zeroinitializer, align 4

; Function Attrs: nounwind
define i32 @trp_init(%struct.TP3_TAG* %tp3) #0 {
entry:
  %tp3.addr = alloca %struct.TP3_TAG*, align 4
  %i = alloca i32, align 4
  %psl = alloca i32, align 4
  %psl_filler = alloca i32, align 4
  store %struct.TP3_TAG* %tp3, %struct.TP3_TAG** %tp3.addr, align 4
  %0 = load i32* @redefine_in_placeholder, align 4
  %1 = load %struct.TP3_TAG** %tp3.addr, align 4
  %TPUMCR1 = getelementptr inbounds %struct.TP3_TAG* %1, i32 0, i32 0
  store i32 %0, i32* %TPUMCR1, align 4
  %2 = load %struct.TP3_TAG** %tp3.addr, align 4
  %TPUMCR2 = getelementptr inbounds %struct.TP3_TAG* %2, i32 0, i32 1
  store i32 0, i32* %TPUMCR2, align 4
  %3 = load %struct.TP3_TAG** %tp3.addr, align 4
  %TPUMCR3 = getelementptr inbounds %struct.TP3_TAG* %3, i32 0, i32 2
  store i32 1, i32* %TPUMCR3, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %psl_filler, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32* %psl_filler, align 4
  %cmp = icmp slt i32 %4, 5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32* %psl_filler, align 4
  %inc1 = add nsw i32 %6, 1
  store i32 %inc1, i32* %psl_filler, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %7 = load i32* %i, align 4
  %and = and i32 %7, 2
  store i32 %and, i32* %i, align 4
  %8 = load i32* %i, align 4
  ret i32 %8
}

; Function Attrs: nounwind
define void @redefine_start() #0 {
entry:
  %tpu = alloca %struct.TP3_TAG*, align 4
  %0 = load %struct.TP3_TAG** %tpu, align 4
  br label %newName0

newName0:                                         ; preds = %redefine_start1.entry, %entry
  %call = call i32 @trp_init(%struct.TP3_TAG* %0)
  br label %newName01

newName01:                                        ; preds = %newName0
  store i32 %call, i32* getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1), align 4
  %1 = load %struct.TP3_TAG** %tpu, align 4
  %TPUMCR1 = getelementptr inbounds %struct.TP3_TAG* %1, i32 0, i32 0
  %2 = load i32* %TPUMCR1, align 4
  store i32 %2, i32* getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0), align 4
  ret void
}

define void @redefine_start1() {
redefine_start1.entry:
  %0 = alloca %struct.TP3_TAG*, align 4
  %1 = load %struct.TP3_TAG** %0, align 4
  br label %newName0

redefine_start1.return:                           ; No predecessors!
  ret void
}

define void @redefine_start2(i32 inreg, %struct.TP3_TAG**) {
redefine_start2.newName01:
  store i32 %0, i32* getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1), align 4
  %2 = load %struct.TP3_TAG** %1, align 4
  %3 = getelementptr inbounds %struct.TP3_TAG* %2, i32 0, i32 0
  %4 = load i32* %3, align 4
  store i32 %4, i32* getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0), align 4
  br label %redefine_start2.return

redefine_start2.return:                           ; preds = %redefine_start2.newName01
  ret void
}

define void @trp_init3(%struct.TP3_TAG*) {
trp_init3.entry:
  %1 = alloca %struct.TP3_TAG*, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store %struct.TP3_TAG* %0, %struct.TP3_TAG** %1, align 4
  %5 = load i32* @redefine_in_placeholder, align 4
  %6 = load %struct.TP3_TAG** %1, align 4
  %7 = getelementptr inbounds %struct.TP3_TAG* %6, i32 0, i32 0
  store i32 %5, i32* %7, align 4
  %8 = load %struct.TP3_TAG** %1, align 4
  %9 = getelementptr inbounds %struct.TP3_TAG* %8, i32 0, i32 1
  store i32 0, i32* %9, align 4
  %10 = load %struct.TP3_TAG** %1, align 4
  %11 = getelementptr inbounds %struct.TP3_TAG* %10, i32 0, i32 2
  store i32 1, i32* %11, align 4
  store i32 0, i32* %2, align 4
  store i32 0, i32* %4, align 4
  br label %trp_init3.for.cond

trp_init3.for.cond:                               ; preds = %trp_init3.for.inc, %trp_init3.entry
  %12 = load i32* %4, align 4
  %13 = icmp slt i32 %12, 5
  br i1 %13, label %trp_init3.for.body, label %trp_init3.for.end

trp_init3.for.body:                               ; preds = %trp_init3.for.cond
  %14 = load i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %trp_init3.for.inc

trp_init3.for.inc:                                ; preds = %trp_init3.for.body
  %16 = load i32* %4, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %4, align 4
  br label %trp_init3.for.cond

trp_init3.for.end:                                ; preds = %trp_init3.for.cond
  %18 = load i32* %2, align 4
  %19 = and i32 %18, 2
  store i32 %19, i32* %2, align 4
  %20 = load i32* %2, align 4
  br label %trp_init3.return

trp_init3.return:                                 ; preds = %trp_init3.for.end
  ret void
}

attributes #0 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf"="true" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "unsafe-fp-math"="false" "use-soft-float"="false" }

!redefine.annotations = !{!0, !1, !2, !3, !4, !5}

!0 = metadata !{metadata !"HyperOp", void ()* @redefine_start1, metadata !"Static"}
!1 = metadata !{metadata !"Entry", metadata !0}
!2 = metadata !{metadata !"HyperOp", void (i32, %struct.TP3_TAG**)* @redefine_start2, metadata !"Static"}
!3 = metadata !{metadata !"Exit", metadata !2}
!4 = metadata !{metadata !"HyperOp", void (%struct.TP3_TAG*)* @trp_init3, metadata !"Static"}
!5 = metadata !{metadata !"Intermediate", metadata !4}

----------Adding dependences across created HyperOps----------

-----------Patching created function redefine_start1--------------
accumulated bbs:
entry,

----------Adding consumed by metadata----------

----------Dealing with conditional branches from other HyperOps----------
number of conditional jump sources:0

----------Dealing with unconditional branches from other HyperOps----------
number of unconditional jump sources:0

----------Adding a predicate from entry hyperop if there are no incoming edges to the hyperop----------
after patching function redefine_start1, module:; ModuleID = './Working/tpu_init.ll'
target datalayout = "E-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-n32"
target triple = "redefine"

%struct.TP3_TAG = type { i32, i32, i32 }

@redefine_in_placeholder = common global i32 0, align 4
@redefine_out_TPUMCR = common global [2 x i32] zeroinitializer, align 4

; Function Attrs: nounwind
define i32 @trp_init(%struct.TP3_TAG* %tp3) #0 {
entry:
  %tp3.addr = alloca %struct.TP3_TAG*, align 4
  %i = alloca i32, align 4
  %psl = alloca i32, align 4
  %psl_filler = alloca i32, align 4
  store %struct.TP3_TAG* %tp3, %struct.TP3_TAG** %tp3.addr, align 4
  %0 = load i32* @redefine_in_placeholder, align 4
  %1 = load %struct.TP3_TAG** %tp3.addr, align 4
  %TPUMCR1 = getelementptr inbounds %struct.TP3_TAG* %1, i32 0, i32 0
  store i32 %0, i32* %TPUMCR1, align 4
  %2 = load %struct.TP3_TAG** %tp3.addr, align 4
  %TPUMCR2 = getelementptr inbounds %struct.TP3_TAG* %2, i32 0, i32 1
  store i32 0, i32* %TPUMCR2, align 4
  %3 = load %struct.TP3_TAG** %tp3.addr, align 4
  %TPUMCR3 = getelementptr inbounds %struct.TP3_TAG* %3, i32 0, i32 2
  store i32 1, i32* %TPUMCR3, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %psl_filler, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32* %psl_filler, align 4
  %cmp = icmp slt i32 %4, 5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32* %psl_filler, align 4
  %inc1 = add nsw i32 %6, 1
  store i32 %inc1, i32* %psl_filler, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %7 = load i32* %i, align 4
  %and = and i32 %7, 2
  store i32 %and, i32* %i, align 4
  %8 = load i32* %i, align 4
  ret i32 %8
}

; Function Attrs: nounwind
define void @redefine_start() #0 {
entry:
  %tpu = alloca %struct.TP3_TAG*, align 4
  %0 = load %struct.TP3_TAG** %tpu, align 4
  br label %newName0

newName0:                                         ; preds = %redefine_start1.entry, %entry
  %call = call i32 @trp_init(%struct.TP3_TAG* %0)
  br label %newName01

newName01:                                        ; preds = %newName0
  store i32 %call, i32* getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1), align 4
  %1 = load %struct.TP3_TAG** %tpu, align 4
  %TPUMCR1 = getelementptr inbounds %struct.TP3_TAG* %1, i32 0, i32 0
  %2 = load i32* %TPUMCR1, align 4
  store i32 %2, i32* getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0), align 4
  ret void
}

define void @redefine_start1() {
redefine_start1.entry:
  %0 = alloca %struct.TP3_TAG*, align 4
  %1 = load %struct.TP3_TAG** %0, align 4
  br label %newName0

redefine_start1.return:                           ; No predecessors!
  ret void
}

define void @redefine_start2(i32 inreg, %struct.TP3_TAG**) {
redefine_start2.newName01:
  store i32 %0, i32* getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1), align 4
  %2 = load %struct.TP3_TAG** %1, align 4
  %3 = getelementptr inbounds %struct.TP3_TAG* %2, i32 0, i32 0
  %4 = load i32* %3, align 4
  store i32 %4, i32* getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0), align 4
  br label %redefine_start2.return

redefine_start2.return:                           ; preds = %redefine_start2.newName01
  ret void
}

define void @trp_init3(%struct.TP3_TAG*) {
trp_init3.entry:
  %1 = alloca %struct.TP3_TAG*, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store %struct.TP3_TAG* %0, %struct.TP3_TAG** %1, align 4
  %5 = load i32* @redefine_in_placeholder, align 4
  %6 = load %struct.TP3_TAG** %1, align 4
  %7 = getelementptr inbounds %struct.TP3_TAG* %6, i32 0, i32 0
  store i32 %5, i32* %7, align 4
  %8 = load %struct.TP3_TAG** %1, align 4
  %9 = getelementptr inbounds %struct.TP3_TAG* %8, i32 0, i32 1
  store i32 0, i32* %9, align 4
  %10 = load %struct.TP3_TAG** %1, align 4
  %11 = getelementptr inbounds %struct.TP3_TAG* %10, i32 0, i32 2
  store i32 1, i32* %11, align 4
  store i32 0, i32* %2, align 4
  store i32 0, i32* %4, align 4
  br label %trp_init3.for.cond

trp_init3.for.cond:                               ; preds = %trp_init3.for.inc, %trp_init3.entry
  %12 = load i32* %4, align 4
  %13 = icmp slt i32 %12, 5
  br i1 %13, label %trp_init3.for.body, label %trp_init3.for.end

trp_init3.for.body:                               ; preds = %trp_init3.for.cond
  %14 = load i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %trp_init3.for.inc

trp_init3.for.inc:                                ; preds = %trp_init3.for.body
  %16 = load i32* %4, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %4, align 4
  br label %trp_init3.for.cond

trp_init3.for.end:                                ; preds = %trp_init3.for.cond
  %18 = load i32* %2, align 4
  %19 = and i32 %18, 2
  store i32 %19, i32* %2, align 4
  %20 = load i32* %2, align 4
  br label %trp_init3.return

trp_init3.return:                                 ; preds = %trp_init3.for.end
  ret void
}

attributes #0 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf"="true" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "unsafe-fp-math"="false" "use-soft-float"="false" }

!redefine.annotations = !{!0, !1, !2, !3, !4, !5}

!0 = metadata !{metadata !"HyperOp", void ()* @redefine_start1, metadata !"Static"}
!1 = metadata !{metadata !"Entry", metadata !0}
!2 = metadata !{metadata !"HyperOp", void (i32, %struct.TP3_TAG**)* @redefine_start2, metadata !"Static"}
!3 = metadata !{metadata !"Exit", metadata !2}
!4 = metadata !{metadata !"HyperOp", void (%struct.TP3_TAG*)* @trp_init3, metadata !"Static"}
!5 = metadata !{metadata !"Intermediate", metadata !4}

-----------Patching created function redefine_start2--------------
accumulated bbs:
newName01,

----------Adding consumed by metadata----------
  %call = call i32 @trp_init(%struct.TP3_TAG* %0)
cloned inst second:  %8 = load i32* %i, align 4
producer function:trp_init3
how many clones?1
added metadata on instruction that belongs to parent trp_init3 and is mapped to slot 0 when the function has 2 and is of type:0:  %1 = alloca i32, align 4, !ConsumedBy !6

----------Dealing with conditional branches from other HyperOps----------
number of conditional jump sources:0

----------Dealing with unconditional branches from other HyperOps----------
number of unconditional jump sources:1
what was callsite size earlier??0

----------Adding a predicate from entry hyperop if there are no incoming edges to the hyperop----------
after patching function redefine_start2, module:; ModuleID = './Working/tpu_init.ll'
target datalayout = "E-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-n32"
target triple = "redefine"

%struct.TP3_TAG = type { i32, i32, i32 }

@redefine_in_placeholder = common global i32 0, align 4
@redefine_out_TPUMCR = common global [2 x i32] zeroinitializer, align 4

; Function Attrs: nounwind
define i32 @trp_init(%struct.TP3_TAG* %tp3) #0 {
entry:
  %tp3.addr = alloca %struct.TP3_TAG*, align 4
  %i = alloca i32, align 4
  %psl = alloca i32, align 4
  %psl_filler = alloca i32, align 4
  store %struct.TP3_TAG* %tp3, %struct.TP3_TAG** %tp3.addr, align 4
  %0 = load i32* @redefine_in_placeholder, align 4
  %1 = load %struct.TP3_TAG** %tp3.addr, align 4
  %TPUMCR1 = getelementptr inbounds %struct.TP3_TAG* %1, i32 0, i32 0
  store i32 %0, i32* %TPUMCR1, align 4
  %2 = load %struct.TP3_TAG** %tp3.addr, align 4
  %TPUMCR2 = getelementptr inbounds %struct.TP3_TAG* %2, i32 0, i32 1
  store i32 0, i32* %TPUMCR2, align 4
  %3 = load %struct.TP3_TAG** %tp3.addr, align 4
  %TPUMCR3 = getelementptr inbounds %struct.TP3_TAG* %3, i32 0, i32 2
  store i32 1, i32* %TPUMCR3, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %psl_filler, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32* %psl_filler, align 4
  %cmp = icmp slt i32 %4, 5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32* %psl_filler, align 4
  %inc1 = add nsw i32 %6, 1
  store i32 %inc1, i32* %psl_filler, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %7 = load i32* %i, align 4
  %and = and i32 %7, 2
  store i32 %and, i32* %i, align 4
  %8 = load i32* %i, align 4
  ret i32 %8
}

; Function Attrs: nounwind
define void @redefine_start() #0 {
entry:
  %tpu = alloca %struct.TP3_TAG*, align 4
  %0 = load %struct.TP3_TAG** %tpu, align 4
  br label %newName0

newName0:                                         ; preds = %redefine_start1.entry, %entry
  %call = call i32 @trp_init(%struct.TP3_TAG* %0)
  br label %newName01

newName01:                                        ; preds = %newName0
  store i32 %call, i32* getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1), align 4
  %1 = load %struct.TP3_TAG** %tpu, align 4
  %TPUMCR1 = getelementptr inbounds %struct.TP3_TAG* %1, i32 0, i32 0
  %2 = load i32* %TPUMCR1, align 4
  store i32 %2, i32* getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0), align 4
  ret void
}

define void @redefine_start1() {
redefine_start1.entry:
  %0 = alloca %struct.TP3_TAG*, align 4
  %1 = load %struct.TP3_TAG** %0, align 4
  br label %newName0

redefine_start1.return:                           ; No predecessors!
  ret void
}

define void @redefine_start2(i32 inreg, %struct.TP3_TAG**) {
redefine_start2.newName01:
  store i32 %0, i32* getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1), align 4
  %2 = load %struct.TP3_TAG** %1, align 4
  %3 = getelementptr inbounds %struct.TP3_TAG* %2, i32 0, i32 0
  %4 = load i32* %3, align 4
  store i32 %4, i32* getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0), align 4
  br label %redefine_start2.return

redefine_start2.return:                           ; preds = %redefine_start2.newName01
  ret void
}

define void @trp_init3(%struct.TP3_TAG*) {
trp_init3.entry:
  %1 = alloca i32, align 4, !ConsumedBy !6
  %2 = alloca %struct.TP3_TAG*, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store %struct.TP3_TAG* %0, %struct.TP3_TAG** %2, align 4
  %6 = load i32* @redefine_in_placeholder, align 4
  %7 = load %struct.TP3_TAG** %2, align 4
  %8 = getelementptr inbounds %struct.TP3_TAG* %7, i32 0, i32 0
  store i32 %6, i32* %8, align 4
  %9 = load %struct.TP3_TAG** %2, align 4
  %10 = getelementptr inbounds %struct.TP3_TAG* %9, i32 0, i32 1
  store i32 0, i32* %10, align 4
  %11 = load %struct.TP3_TAG** %2, align 4
  %12 = getelementptr inbounds %struct.TP3_TAG* %11, i32 0, i32 2
  store i32 1, i32* %12, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %5, align 4
  br label %trp_init3.for.cond

trp_init3.for.cond:                               ; preds = %trp_init3.for.inc, %trp_init3.entry
  %13 = load i32* %5, align 4
  %14 = icmp slt i32 %13, 5
  br i1 %14, label %trp_init3.for.body, label %trp_init3.for.end

trp_init3.for.body:                               ; preds = %trp_init3.for.cond
  %15 = load i32* %3, align 4
  %16 = add nsw i32 %15, 1
  store i32 %16, i32* %3, align 4
  br label %trp_init3.for.inc

trp_init3.for.inc:                                ; preds = %trp_init3.for.body
  %17 = load i32* %5, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %5, align 4
  br label %trp_init3.for.cond

trp_init3.for.end:                                ; preds = %trp_init3.for.cond
  %19 = load i32* %3, align 4
  %20 = and i32 %19, 2
  store i32 %20, i32* %3, align 4
  %21 = load i32* %3, align 4
  store i32 %21, i32* %1, align 4
  br label %trp_init3.return

trp_init3.return:                                 ; preds = %trp_init3.for.end
  ret void
}

attributes #0 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf"="true" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "unsafe-fp-math"="false" "use-soft-float"="false" }

!redefine.annotations = !{!0, !1, !2, !3, !4, !5}

!0 = metadata !{metadata !"HyperOp", void ()* @redefine_start1, metadata !"Static"}
!1 = metadata !{metadata !"Entry", metadata !0}
!2 = metadata !{metadata !"HyperOp", void (i32, %struct.TP3_TAG**)* @redefine_start2, metadata !"Static"}
!3 = metadata !{metadata !"Exit", metadata !2}
!4 = metadata !{metadata !"HyperOp", void (%struct.TP3_TAG*)* @trp_init3, metadata !"Static"}
!5 = metadata !{metadata !"Intermediate", metadata !4}
!6 = metadata !{metadata !7}
!7 = metadata !{metadata !2, metadata !"Scalar", i32 0}

-----------Patching created function trp_init3--------------
accumulated bbs:
entry,for.cond,for.body,for.inc,for.end,

----------Adding consumed by metadata----------
cloned inst second:  %tpu = alloca %struct.TP3_TAG*, align 4
producer function:redefine_start1
how many clones?1
added metadata on instruction that belongs to parent redefine_start1 and is mapped to slot 0 when the function has 1 and is of type:1:  %0 = alloca %struct.TP3_TAG*, align 4, !ConsumedBy !6

----------Dealing with conditional branches from other HyperOps----------
number of conditional jump sources:0

----------Dealing with unconditional branches from other HyperOps----------
number of unconditional jump sources:1
what was callsite size earlier??1

----------Adding a predicate from entry hyperop if there are no incoming edges to the hyperop----------
after patching function trp_init3, module:; ModuleID = './Working/tpu_init.ll'
target datalayout = "E-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-n32"
target triple = "redefine"

%struct.TP3_TAG = type { i32, i32, i32 }

@redefine_in_placeholder = common global i32 0, align 4
@redefine_out_TPUMCR = common global [2 x i32] zeroinitializer, align 4

; Function Attrs: nounwind
define i32 @trp_init(%struct.TP3_TAG* %tp3) #0 {
entry:
  %tp3.addr = alloca %struct.TP3_TAG*, align 4
  %i = alloca i32, align 4
  %psl = alloca i32, align 4
  %psl_filler = alloca i32, align 4
  store %struct.TP3_TAG* %tp3, %struct.TP3_TAG** %tp3.addr, align 4
  %0 = load i32* @redefine_in_placeholder, align 4
  %1 = load %struct.TP3_TAG** %tp3.addr, align 4
  %TPUMCR1 = getelementptr inbounds %struct.TP3_TAG* %1, i32 0, i32 0
  store i32 %0, i32* %TPUMCR1, align 4
  %2 = load %struct.TP3_TAG** %tp3.addr, align 4
  %TPUMCR2 = getelementptr inbounds %struct.TP3_TAG* %2, i32 0, i32 1
  store i32 0, i32* %TPUMCR2, align 4
  %3 = load %struct.TP3_TAG** %tp3.addr, align 4
  %TPUMCR3 = getelementptr inbounds %struct.TP3_TAG* %3, i32 0, i32 2
  store i32 1, i32* %TPUMCR3, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %psl_filler, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32* %psl_filler, align 4
  %cmp = icmp slt i32 %4, 5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32* %psl_filler, align 4
  %inc1 = add nsw i32 %6, 1
  store i32 %inc1, i32* %psl_filler, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %7 = load i32* %i, align 4
  %and = and i32 %7, 2
  store i32 %and, i32* %i, align 4
  %8 = load i32* %i, align 4
  ret i32 %8
}

; Function Attrs: nounwind
define void @redefine_start() #0 {
entry:
  %tpu = alloca %struct.TP3_TAG*, align 4
  %0 = load %struct.TP3_TAG** %tpu, align 4
  br label %newName0

newName0:                                         ; preds = %entry
  %call = call i32 @trp_init(%struct.TP3_TAG* %0)
  br label %newName01

newName01:                                        ; preds = %newName0
  store i32 %call, i32* getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1), align 4
  %1 = load %struct.TP3_TAG** %tpu, align 4
  %TPUMCR1 = getelementptr inbounds %struct.TP3_TAG* %1, i32 0, i32 0
  %2 = load i32* %TPUMCR1, align 4
  store i32 %2, i32* getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0), align 4
  ret void
}

define void @redefine_start1() {
redefine_start1.entry:
  %0 = alloca %struct.TP3_TAG*, align 4, !ConsumedBy !6
  %1 = load %struct.TP3_TAG** %0, align 4
  br label %redefine_start1.return

redefine_start1.return:                           ; preds = %redefine_start1.entry
  ret void
}

define void @redefine_start2(i32 inreg, %struct.TP3_TAG**) {
redefine_start2.newName01:
  store i32 %0, i32* getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1), align 4
  %2 = load %struct.TP3_TAG** %1, align 4
  %3 = getelementptr inbounds %struct.TP3_TAG* %2, i32 0, i32 0
  %4 = load i32* %3, align 4
  store i32 %4, i32* getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0), align 4
  br label %redefine_start2.return

redefine_start2.return:                           ; preds = %redefine_start2.newName01
  ret void
}

define void @trp_init3(%struct.TP3_TAG*) {
trp_init3.entry:
  %1 = alloca i32, align 4, !ConsumedBy !8
  %2 = alloca %struct.TP3_TAG*, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store %struct.TP3_TAG* %0, %struct.TP3_TAG** %2, align 4
  %6 = load i32* @redefine_in_placeholder, align 4
  %7 = load %struct.TP3_TAG** %2, align 4
  %8 = getelementptr inbounds %struct.TP3_TAG* %7, i32 0, i32 0
  store i32 %6, i32* %8, align 4
  %9 = load %struct.TP3_TAG** %2, align 4
  %10 = getelementptr inbounds %struct.TP3_TAG* %9, i32 0, i32 1
  store i32 0, i32* %10, align 4
  %11 = load %struct.TP3_TAG** %2, align 4
  %12 = getelementptr inbounds %struct.TP3_TAG* %11, i32 0, i32 2
  store i32 1, i32* %12, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %5, align 4
  br label %trp_init3.for.cond

trp_init3.for.cond:                               ; preds = %trp_init3.for.inc, %trp_init3.entry
  %13 = load i32* %5, align 4
  %14 = icmp slt i32 %13, 5
  br i1 %14, label %trp_init3.for.body, label %trp_init3.for.end

trp_init3.for.body:                               ; preds = %trp_init3.for.cond
  %15 = load i32* %3, align 4
  %16 = add nsw i32 %15, 1
  store i32 %16, i32* %3, align 4
  br label %trp_init3.for.inc

trp_init3.for.inc:                                ; preds = %trp_init3.for.body
  %17 = load i32* %5, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %5, align 4
  br label %trp_init3.for.cond

trp_init3.for.end:                                ; preds = %trp_init3.for.cond
  %19 = load i32* %3, align 4
  %20 = and i32 %19, 2
  store i32 %20, i32* %3, align 4
  %21 = load i32* %3, align 4
  store i32 %21, i32* %1, align 4
  br label %trp_init3.return

trp_init3.return:                                 ; preds = %trp_init3.for.end
  ret void
}

attributes #0 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf"="true" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "unsafe-fp-math"="false" "use-soft-float"="false" }

!redefine.annotations = !{!0, !1, !2, !3, !4, !5}

!0 = metadata !{metadata !"HyperOp", void ()* @redefine_start1, metadata !"Static"}
!1 = metadata !{metadata !"Entry", metadata !0}
!2 = metadata !{metadata !"HyperOp", void (i32, %struct.TP3_TAG**)* @redefine_start2, metadata !"Static"}
!3 = metadata !{metadata !"Exit", metadata !2}
!4 = metadata !{metadata !"HyperOp", void (%struct.TP3_TAG*)* @trp_init3, metadata !"Static"}
!5 = metadata !{metadata !"Intermediate", metadata !4}
!6 = metadata !{metadata !7}
!7 = metadata !{metadata !4, metadata !"LocalReference", i32 0}
!8 = metadata !{metadata !9}
!9 = metadata !{metadata !2, metadata !"Scalar", i32 0}

----------Adding sync edges to dangling HyperOps----------

-----------Re-routing sync edges from end hyperop to the newly created end HyperOp-----------
whats in module now?; ModuleID = './Working/tpu_init.ll'
target datalayout = "E-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-n32"
target triple = "redefine"

%struct.TP3_TAG = type { i32, i32, i32 }

@redefine_in_placeholder = common global i32 0, align 4
@redefine_out_TPUMCR = common global [2 x i32] zeroinitializer, align 4

; Function Attrs: nounwind
define i32 @trp_init(%struct.TP3_TAG* %tp3) #0 {
entry:
  %tp3.addr = alloca %struct.TP3_TAG*, align 4
  %i = alloca i32, align 4
  %psl = alloca i32, align 4
  %psl_filler = alloca i32, align 4
  store %struct.TP3_TAG* %tp3, %struct.TP3_TAG** %tp3.addr, align 4
  %0 = load i32* @redefine_in_placeholder, align 4
  %1 = load %struct.TP3_TAG** %tp3.addr, align 4
  %TPUMCR1 = getelementptr inbounds %struct.TP3_TAG* %1, i32 0, i32 0
  store i32 %0, i32* %TPUMCR1, align 4
  %2 = load %struct.TP3_TAG** %tp3.addr, align 4
  %TPUMCR2 = getelementptr inbounds %struct.TP3_TAG* %2, i32 0, i32 1
  store i32 0, i32* %TPUMCR2, align 4
  %3 = load %struct.TP3_TAG** %tp3.addr, align 4
  %TPUMCR3 = getelementptr inbounds %struct.TP3_TAG* %3, i32 0, i32 2
  store i32 1, i32* %TPUMCR3, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %psl_filler, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32* %psl_filler, align 4
  %cmp = icmp slt i32 %4, 5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32* %psl_filler, align 4
  %inc1 = add nsw i32 %6, 1
  store i32 %inc1, i32* %psl_filler, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %7 = load i32* %i, align 4
  %and = and i32 %7, 2
  store i32 %and, i32* %i, align 4
  %8 = load i32* %i, align 4
  ret i32 %8
}

; Function Attrs: nounwind
define void @redefine_start() #0 {
entry:
  %tpu = alloca %struct.TP3_TAG*, align 4
  %0 = load %struct.TP3_TAG** %tpu, align 4
  br label %newName0

newName0:                                         ; preds = %entry
  %call = call i32 @trp_init(%struct.TP3_TAG* %0)
  br label %newName01

newName01:                                        ; preds = %newName0
  store i32 %call, i32* getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1), align 4
  %1 = load %struct.TP3_TAG** %tpu, align 4
  %TPUMCR1 = getelementptr inbounds %struct.TP3_TAG* %1, i32 0, i32 0
  %2 = load i32* %TPUMCR1, align 4
  store i32 %2, i32* getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0), align 4
  ret void
}

define void @redefine_start1() {
redefine_start1.entry:
  %0 = alloca %struct.TP3_TAG*, align 4, !ConsumedBy !6
  %1 = load %struct.TP3_TAG** %0, align 4
  br label %redefine_start1.return

redefine_start1.return:                           ; preds = %redefine_start1.entry
  ret void
}

define void @redefine_start2(i32 inreg, %struct.TP3_TAG**) {
redefine_start2.newName01:
  store i32 %0, i32* getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1), align 4
  %2 = load %struct.TP3_TAG** %1, align 4
  %3 = getelementptr inbounds %struct.TP3_TAG* %2, i32 0, i32 0
  %4 = load i32* %3, align 4
  store i32 %4, i32* getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0), align 4
  br label %redefine_start2.return

redefine_start2.return:                           ; preds = %redefine_start2.newName01
  ret void
}

define void @trp_init3(%struct.TP3_TAG*) {
trp_init3.entry:
  %1 = alloca i32, align 4, !ConsumedBy !8
  %2 = alloca %struct.TP3_TAG*, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store %struct.TP3_TAG* %0, %struct.TP3_TAG** %2, align 4
  %6 = load i32* @redefine_in_placeholder, align 4
  %7 = load %struct.TP3_TAG** %2, align 4
  %8 = getelementptr inbounds %struct.TP3_TAG* %7, i32 0, i32 0
  store i32 %6, i32* %8, align 4
  %9 = load %struct.TP3_TAG** %2, align 4
  %10 = getelementptr inbounds %struct.TP3_TAG* %9, i32 0, i32 1
  store i32 0, i32* %10, align 4
  %11 = load %struct.TP3_TAG** %2, align 4
  %12 = getelementptr inbounds %struct.TP3_TAG* %11, i32 0, i32 2
  store i32 1, i32* %12, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %5, align 4
  br label %trp_init3.for.cond

trp_init3.for.cond:                               ; preds = %trp_init3.for.inc, %trp_init3.entry
  %13 = load i32* %5, align 4
  %14 = icmp slt i32 %13, 5
  br i1 %14, label %trp_init3.for.body, label %trp_init3.for.end

trp_init3.for.body:                               ; preds = %trp_init3.for.cond
  %15 = load i32* %3, align 4
  %16 = add nsw i32 %15, 1
  store i32 %16, i32* %3, align 4
  br label %trp_init3.for.inc

trp_init3.for.inc:                                ; preds = %trp_init3.for.body
  %17 = load i32* %5, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %5, align 4
  br label %trp_init3.for.cond

trp_init3.for.end:                                ; preds = %trp_init3.for.cond
  %19 = load i32* %3, align 4
  %20 = and i32 %19, 2
  store i32 %20, i32* %3, align 4
  %21 = load i32* %3, align 4
  store i32 %21, i32* %1, align 4
  br label %trp_init3.return

trp_init3.return:                                 ; preds = %trp_init3.for.end
  ret void
}

attributes #0 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf"="true" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "unsafe-fp-math"="false" "use-soft-float"="false" }

!redefine.annotations = !{!0, !1, !2, !3, !4, !5}

!0 = metadata !{metadata !"HyperOp", void ()* @redefine_start1, metadata !"Static"}
!1 = metadata !{metadata !"Entry", metadata !0}
!2 = metadata !{metadata !"HyperOp", void (i32, %struct.TP3_TAG**)* @redefine_start2, metadata !"Static"}
!3 = metadata !{metadata !"Exit", metadata !2}
!4 = metadata !{metadata !"HyperOp", void (%struct.TP3_TAG*)* @trp_init3, metadata !"Static"}
!5 = metadata !{metadata !"Intermediate", metadata !4}
!6 = metadata !{metadata !7}
!7 = metadata !{metadata !4, metadata !"LocalReference", i32 0}
!8 = metadata !{metadata !9}
!9 = metadata !{metadata !2, metadata !"Scalar", i32 0}

-----------Deleting unused functions-----------
deleting contents of function:trp_init
deleting contents of function:redefine_start
Final module contents:; ModuleID = './Working/tpu_init.ll'
target datalayout = "E-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-n32"
target triple = "redefine"

%struct.TP3_TAG = type { i32, i32, i32 }

@redefine_in_placeholder = common global i32 0, align 4
@redefine_out_TPUMCR = common global [2 x i32] zeroinitializer, align 4

define void @redefine_start1() {
redefine_start1.entry:
  %0 = alloca %struct.TP3_TAG*, align 4, !ConsumedBy !6
  %1 = load %struct.TP3_TAG** %0, align 4
  br label %redefine_start1.return

redefine_start1.return:                           ; preds = %redefine_start1.entry
  ret void
}

define void @redefine_start2(i32 inreg, %struct.TP3_TAG**) {
redefine_start2.newName01:
  store i32 %0, i32* getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 1), align 4
  %2 = load %struct.TP3_TAG** %1, align 4
  %3 = getelementptr inbounds %struct.TP3_TAG* %2, i32 0, i32 0
  %4 = load i32* %3, align 4
  store i32 %4, i32* getelementptr inbounds ([2 x i32]* @redefine_out_TPUMCR, i32 0, i32 0), align 4
  br label %redefine_start2.return

redefine_start2.return:                           ; preds = %redefine_start2.newName01
  ret void
}

define void @trp_init3(%struct.TP3_TAG*) {
trp_init3.entry:
  %1 = alloca i32, align 4, !ConsumedBy !8
  %2 = alloca %struct.TP3_TAG*, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store %struct.TP3_TAG* %0, %struct.TP3_TAG** %2, align 4
  %6 = load i32* @redefine_in_placeholder, align 4
  %7 = load %struct.TP3_TAG** %2, align 4
  %8 = getelementptr inbounds %struct.TP3_TAG* %7, i32 0, i32 0
  store i32 %6, i32* %8, align 4
  %9 = load %struct.TP3_TAG** %2, align 4
  %10 = getelementptr inbounds %struct.TP3_TAG* %9, i32 0, i32 1
  store i32 0, i32* %10, align 4
  %11 = load %struct.TP3_TAG** %2, align 4
  %12 = getelementptr inbounds %struct.TP3_TAG* %11, i32 0, i32 2
  store i32 1, i32* %12, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %5, align 4
  br label %trp_init3.for.cond

trp_init3.for.cond:                               ; preds = %trp_init3.for.inc, %trp_init3.entry
  %13 = load i32* %5, align 4
  %14 = icmp slt i32 %13, 5
  br i1 %14, label %trp_init3.for.body, label %trp_init3.for.end

trp_init3.for.body:                               ; preds = %trp_init3.for.cond
  %15 = load i32* %3, align 4
  %16 = add nsw i32 %15, 1
  store i32 %16, i32* %3, align 4
  br label %trp_init3.for.inc

trp_init3.for.inc:                                ; preds = %trp_init3.for.body
  %17 = load i32* %5, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %5, align 4
  br label %trp_init3.for.cond

trp_init3.for.end:                                ; preds = %trp_init3.for.cond
  %19 = load i32* %3, align 4
  %20 = and i32 %19, 2
  store i32 %20, i32* %3, align 4
  %21 = load i32* %3, align 4
  store i32 %21, i32* %1, align 4
  br label %trp_init3.return

trp_init3.return:                                 ; preds = %trp_init3.for.end
  ret void
}

!redefine.annotations = !{!0, !1, !2, !3, !4, !5}

!0 = metadata !{metadata !"HyperOp", void ()* @redefine_start1, metadata !"Static"}
!1 = metadata !{metadata !"Entry", metadata !0}
!2 = metadata !{metadata !"HyperOp", void (i32, %struct.TP3_TAG**)* @redefine_start2, metadata !"Static"}
!3 = metadata !{metadata !"Exit", metadata !2}
!4 = metadata !{metadata !"HyperOp", void (%struct.TP3_TAG*)* @trp_init3, metadata !"Static"}
!5 = metadata !{metadata !"Intermediate", metadata !4}
!6 = metadata !{metadata !7}
!7 = metadata !{metadata !4, metadata !"LocalReference", i32 0}
!8 = metadata !{metadata !9}
!9 = metadata !{metadata !2, metadata !"Scalar", i32 0}
