Args: /home/arka/Workspace/work/Git_Compiler_Repo/redefine-tests/ECU_KERNELS/../../..//MM_Compiler_latest/build/Release+Asserts/bin/llc --mattr=+has4ce --mtriple redefine -debug ./Working/runningprotection_HyOpPass.ll -o ./Working/runningprotection.as 

Features:+has4ce
CPU:REDEFINE

CGP: Found      local addrmode: [Base:%0]
CGP: Found      local addrmode: [Base:%1]
CGP: Found      local addrmode: [Base:%1]
CGP: Found      local addrmode: [Base:%0]
CGP: Found      local addrmode: [Base:%1]
CGP: Found      local addrmode: [Base:%1]
To merge:

redefine_start1.entry:
  %0 = bitcast float* @var to float*
  store float 0x3FE6666660000000, float* %0, align 4
  %1 = alloca i32*, align 4, !ConsumedBy !6
  store i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 0), i32** %1
  %2 = load i32** %1
  br label %redefine_start1.return



Computing probabilities for redefine_start1.return
new hop:redefine_start1
new hyop#0:redefine_start1
new hop:redefine_start2
new hyop#1:redefine_start2
new hop:running_protection3
new hyop#2:running_protection3
problems setting inputs?
skipping abort
source hop:redefine_start1
frame size for hop redefine_start1:4
source hop:redefine_start2
frame size for hop redefine_start2:8
source hop:running_protection3
frame size for hop running_protection3:20
max mem frame size:20
digraph{
redefine_start1[label="Name:redefine_start1,Dom:NULL, PostDom:NULL,Map:0:0, Context frame:0,SyncCount:1"];
redefine_start1->running_protection3[label=localref];
redefine_start2[label="Name:redefine_start2,Dom:NULL, PostDom:NULL,Map:0:0, Context frame:0,SyncCount:0"];
running_protection3[label="Name:running_protection3,Dom:NULL, PostDom:NULL,Map:0:0, Context frame:0,SyncCount:0"];
running_protection3->redefine_start2[label=localref];
}
Setting domf of node redefine_start1 to size 0
Setting domf of node redefine_start2 to size 0
Setting domf of node running_protection3 to size 0
idom of node:redefine_start1
idom of node:running_protection3

------
forwarding address to redefine_start1:

------
forwarding address to redefine_start2:

------
forwarding address to running_protection3:

Dominant sequence computed:
redefine_start1->running_protection3->redefine_start2->

Dominant sequence computed:
redefine_start1->running_protection3->redefine_start2->
before merging, num of clusters:1
each cluster:
redefine_start1,running_protection3,redefine_start2,
Minimizing ordering edges
setting context frame id of redefine_start1 to 0
setting context frame id of running_protection3 to 1
setting context frame id of redefine_start2 to 2
Computing whether there is a control/scalar path between a pair of HyperOps communicating via memory and adding sync edges if there is no control path
adding a sync edge between redefine_start1 and running_protection3
adding a sync edge between running_protection3 and redefine_start2
If the producer and consumer are mapped to different CRs, treat them as localrefs only instead of scalars to avoid reconciles
problems setting inputs?
generated cfg:Setting domf of node redefine_start1 to size 0
Setting domf of node redefine_start2 to size 0
Setting domf of node running_protection3 to size 0
idom of node:redefine_start1
idom of node:running_protection3
Delivering reaching predicate with decrement count in case operands to be delivered are on the non taken path
before decrementing sync, graph:Decrementing sync count for nodes with sync edges coming from mutually exclusive paths
updating node with incoming sync edges redefine_start1
updating node with incoming sync edges redefine_start2
updating node with incoming sync edges running_protection3
after minimizing cluster and converting scalar edges to local refs, graph:digraph{
redefine_start1[label="Name:redefine_start1,Dom:NULL, PostDom:running_protection3,Map:0:0, Context frame:0,SyncCount:1"];
redefine_start1->running_protection3[label=sync];
redefine_start1->running_protection3[label=localref];
redefine_start2[label="Name:redefine_start2,Dom:running_protection3, PostDom:NULL,Map:0:0, Context frame:2,SyncCount:1"];
running_protection3[label="Name:running_protection3,Dom:redefine_start1, PostDom:redefine_start2,Map:0:0, Context frame:1,SyncCount:1"];
running_protection3->redefine_start2[label=localref];
running_protection3->redefine_start2[label=sync];
}
num of clusters:1
num constraints:0
setting target resource 0
setting target resource 0
setting target resource 0
digraph{
redefine_start1[label="Name:redefine_start1,Dom:NULL, PostDom:running_protection3,Map:0:0, Context frame:0,SyncCount:1"];
redefine_start1->running_protection3[label=sync];
redefine_start1->running_protection3[label=localref];
redefine_start2[label="Name:redefine_start2,Dom:running_protection3, PostDom:NULL,Map:0:0, Context frame:2,SyncCount:1"];
running_protection3[label="Name:running_protection3,Dom:redefine_start1, PostDom:redefine_start2,Map:0:0, Context frame:1,SyncCount:1"];
running_protection3->redefine_start2[label=localref];
running_protection3->redefine_start2[label=sync];
}



=== redefine_start1
I was here to add @var = global float 0x3FE6666660000000, align 4
store visit is after?  store float 0x3FE6666660000000, float* %0, align 4
I was here to add float 0x3FE6666660000000
whats in dag after store?SelectionDAG has 6 nodes:
  0x2239170: i32 = Constant<0>

    0x221bb88: ch = EntryToken [ORD=2]

    0x2239070: f32 = ConstantFP<7.000000e-01> [ORD=2]

    0x2238f70: i32 = GlobalAddress<float* @var> 0 [ORD=1]

    0x2239270: i32 = undef [ORD=2]

  0x2239370: ch = store 0x221bb88, 0x2239070, 0x2238f70, 0x2239270<ST4[%0]> [ORD=2]


store visit is after?  store i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 0), i32** %1
I was here to add i32* getelementptr inbounds ([6 x i32]* @redefine_in_a, i32 0, i32 0)
I was here to add @redefine_in_a = common global [6 x i32] zeroinitializer, align 4
I was here to add   %1 = alloca i32*, align 4, !ConsumedBy !6
whats in dag after store?SelectionDAG has 9 nodes:
  0x2239170: i32 = Constant<0>

  0x2239270: i32 = undef [ORD=2]

      0x221bb88: ch = EntryToken [ORD=2]

      0x2239070: f32 = ConstantFP<7.000000e-01> [ORD=2]

      0x2238f70: i32 = GlobalAddress<float* @var> 0 [ORD=1]

      0x2239270: <multiple use>
    0x2239370: ch = store 0x221bb88, 0x2239070, 0x2238f70, 0x2239270<ST4[%0]> [ORD=2]

    0x2239470: i32 = GlobalAddress<[6 x i32]* @redefine_in_a> 0 [ORD=3]

    0x2239570: i32 = FrameIndex<0> [ORD=4]

    0x2239270: <multiple use>
  0x2239670: ch = store 0x2239370, 0x2239470, 0x2239570, 0x2239270<ST4[%1]> [ORD=4]


visiting load instruction   %2 = load i32** %1
with I type i32*and sd value :0x2239570: i32 = FrameIndex<0>
new load?0x2239770: i32,ch = load 0x2239670, 0x2239570, 0x2239270<LD4[%1]>
dag after load is dealt with?SelectionDAG has 10 nodes:
  0x2239170: i32 = Constant<0>

  0x2239270: i32 = undef [ORD=2]

  0x2239570: i32 = FrameIndex<0> [ORD=4]

        0x221bb88: ch = EntryToken [ORD=2]

        0x2239070: f32 = ConstantFP<7.000000e-01> [ORD=2]

        0x2238f70: i32 = GlobalAddress<float* @var> 0 [ORD=1]

        0x2239270: <multiple use>
      0x2239370: ch = store 0x221bb88, 0x2239070, 0x2238f70, 0x2239270<ST4[%0]> [ORD=2]

      0x2239470: i32 = GlobalAddress<[6 x i32]* @redefine_in_a> 0 [ORD=3]

      0x2239570: <multiple use>
      0x2239270: <multiple use>
    0x2239670: ch = store 0x2239370, 0x2239470, 0x2239570, 0x2239270<ST4[%1]> [ORD=4]

    0x2239570: <multiple use>
    0x2239270: <multiple use>
  0x2239770: i32,ch = load 0x2239670, 0x2239570, 0x2239270<LD4[%1]>

      0x221bb88: ch = EntryToken [ORD=2]

      0x2239070: f32 = ConstantFP<7.000000e-01> [ORD=2]

      0x2238f70: i32 = GlobalAddress<float* @var> 0 [ORD=1]

      0x2239270: <multiple use>
    0x2239370: ch = store 0x221bb88, 0x2239070, 0x2238f70, 0x2239270<ST4[%0]> [ORD=2]

    0x2239470: i32 = GlobalAddress<[6 x i32]* @redefine_in_a> 0 [ORD=3]

    0x2239570: <multiple use>
    0x2239270: <multiple use>
  0x2239670: ch = store 0x2239370, 0x2239470, 0x2239570, 0x2239270<ST4[%1]> [ORD=4]


Initial selection DAG: BB#0 'redefine_start1:redefine_start1.return'
SelectionDAG has 10 nodes:
  0x2239170: i32 = Constant<0>

  0x2239270: i32 = undef [ORD=2]

  0x2239570: i32 = FrameIndex<0> [ORD=4]

        0x221bb88: ch = EntryToken [ORD=2]

        0x2239070: f32 = ConstantFP<7.000000e-01> [ORD=2]

        0x2238f70: i32 = GlobalAddress<float* @var> 0 [ORD=1]

        0x2239270: <multiple use>
      0x2239370: ch = store 0x221bb88, 0x2239070, 0x2238f70, 0x2239270<ST4[%0]> [ORD=2]

      0x2239470: i32 = GlobalAddress<[6 x i32]* @redefine_in_a> 0 [ORD=3]

      0x2239570: <multiple use>
      0x2239270: <multiple use>
    0x2239670: ch = store 0x2239370, 0x2239470, 0x2239570, 0x2239270<ST4[%1]> [ORD=4]

    0x2239570: <multiple use>
    0x2239270: <multiple use>
  0x2239770: i32,ch = load 0x2239670, 0x2239570, 0x2239270<LD4[%1]> [ORD=5]

      0x221bb88: ch = EntryToken [ORD=2]

      0x2239070: f32 = ConstantFP<7.000000e-01> [ORD=2]

      0x2238f70: i32 = GlobalAddress<float* @var> 0 [ORD=1]

      0x2239270: <multiple use>
    0x2239370: ch = store 0x221bb88, 0x2239070, 0x2238f70, 0x2239270<ST4[%0]> [ORD=2]

    0x2239470: i32 = GlobalAddress<[6 x i32]* @redefine_in_a> 0 [ORD=3]

    0x2239570: <multiple use>
    0x2239270: <multiple use>
  0x2239670: ch = store 0x2239370, 0x2239470, 0x2239570, 0x2239270<ST4[%1]> [ORD=4]



Replacing.3 0x2239370: ch = store 0x221bb88, 0x2239070, 0x2238f70, 0x2239270<ST4[%0]> [ORD=2]

With: 0x2239870: ch = store 0x221bb88, 0x2239770, 0x2238f70, 0x2239270<ST4[%0]>

Optimized lowered selection DAG: BB#0 'redefine_start1:redefine_start1.return'
SelectionDAG has 8 nodes:
  0x2239270: i32 = undef [ORD=2]

      0x221bb88: ch = EntryToken [ORD=2]

      0x2239770: i32 = Constant<1060320051>

      0x2238f70: i32 = GlobalAddress<float* @var> 0 [ORD=1]

      0x2239270: <multiple use>
    0x2239870: ch = store 0x221bb88, 0x2239770, 0x2238f70, 0x2239270<ST4[%0]>

    0x2239470: i32 = GlobalAddress<[6 x i32]* @redefine_in_a> 0 [ORD=3]

    0x2239570: i32 = FrameIndex<0> [ORD=4]

    0x2239270: <multiple use>
  0x2239670: ch = store 0x2239870, 0x2239470, 0x2239570, 0x2239270<ST4[%1]> [ORD=4]


Legally typed node: 0x2239770: i32 = Constant<1060320051> [ID=0]

Legally typed node: 0x2239570: i32 = FrameIndex<0> [ORD=4] [ID=0]

Legally typed node: 0x2239470: i32 = GlobalAddress<[6 x i32]* @redefine_in_a> 0 [ORD=3] [ID=0]

Legally typed node: 0x2239270: i32 = undef [ORD=2] [ID=0]

Legally typed node: 0x2238f70: i32 = GlobalAddress<float* @var> 0 [ORD=1] [ID=0]

Legally typed node: 0x221bb88: ch = EntryToken [ORD=2] [ID=0]

Legally typed node: 0x2239870: ch = store 0x221bb88, 0x2239770, 0x2238f70, 0x2239270<ST4[%0]> [ID=0]

Legally typed node: 0x2239670: ch = store 0x2239870, 0x2239470, 0x2239570, 0x2239270<ST4[%1]> [ORD=4] [ID=0]

Legally typed node: 0x7fff6e802f00: ch = handlenode 0x2239670 [ID=0]

Type-legalized selection DAG: BB#0 'redefine_start1:redefine_start1.return'
SelectionDAG has 8 nodes:
  0x2239270: i32 = undef [ORD=2] [ID=-3]

      0x221bb88: ch = EntryToken [ORD=2] [ID=-3]

      0x2239770: i32 = Constant<1060320051> [ID=-3]

      0x2238f70: i32 = GlobalAddress<float* @var> 0 [ORD=1] [ID=-3]

      0x2239270: <multiple use>
    0x2239870: ch = store 0x221bb88, 0x2239770, 0x2238f70, 0x2239270<ST4[%0]> [ID=-3]

    0x2239470: i32 = GlobalAddress<[6 x i32]* @redefine_in_a> 0 [ORD=3] [ID=-3]

    0x2239570: i32 = FrameIndex<0> [ORD=4] [ID=-3]

    0x2239270: <multiple use>
  0x2239670: ch = store 0x2239870, 0x2239470, 0x2239570, 0x2239270<ST4[%1]> [ORD=4] [ID=-3]


Legalized selection DAG: BB#0 'redefine_start1:redefine_start1.return'
SelectionDAG has 16 nodes:
  0x2239270: i32 = undef [ORD=2] [ID=2]

      0x221bb88: ch = EntryToken [ORD=2] [ID=0]

      0x2239770: i32 = Constant<1060320051> [ID=5]

          0x2239470: i32 = TargetGlobalAddress<float* @var> 0 [TF=2]

        0x2239c70: i32 = REDEFINEISD::Hi 0x2239470

          0x2239b70: i32 = TargetGlobalAddress<float* @var> 0 [TF=3]

        0x2239d70: i32 = REDEFINEISD::Lo 0x2239b70

      0x223bca0: i32 = add 0x2239c70, 0x2239d70

      0x2239270: <multiple use>
    0x2239870: ch = store 0x221bb88, 0x2239770, 0x223bca0, 0x2239270<ST4[%0]> [ID=6]

        0x2239170: i32 = TargetGlobalAddress<[6 x i32]* @redefine_in_a> 0 [TF=2]

      0x2239370: i32 = REDEFINEISD::Hi 0x2239170

        0x2239070: i32 = TargetGlobalAddress<[6 x i32]* @redefine_in_a> 0 [TF=3]

      0x2239970: i32 = REDEFINEISD::Lo 0x2239070

    0x2239a70: i32 = add 0x2239370, 0x2239970

    0x2239570: i32 = FrameIndex<0> [ORD=4] [ID=4]

    0x2239270: <multiple use>
  0x2239670: ch = store 0x2239870, 0x2239a70, 0x2239570, 0x2239270<ST4[%1]> [ORD=4] [ID=7]


Optimized legalized selection DAG: BB#0 'redefine_start1:redefine_start1.return'
SelectionDAG has 16 nodes:
  0x2239270: i32 = undef [ORD=2] [ID=2]

      0x221bb88: ch = EntryToken [ORD=2] [ID=0]

      0x2239770: i32 = Constant<1060320051> [ID=5]

          0x2239470: i32 = TargetGlobalAddress<float* @var> 0 [TF=2]

        0x2239c70: i32 = REDEFINEISD::Hi 0x2239470

          0x2239b70: i32 = TargetGlobalAddress<float* @var> 0 [TF=3]

        0x2239d70: i32 = REDEFINEISD::Lo 0x2239b70

      0x223bca0: i32 = add 0x2239c70, 0x2239d70

      0x2239270: <multiple use>
    0x2239870: ch = store 0x221bb88, 0x2239770, 0x223bca0, 0x2239270<ST4[%0]> [ID=6]

        0x2239170: i32 = TargetGlobalAddress<[6 x i32]* @redefine_in_a> 0 [TF=2]

      0x2239370: i32 = REDEFINEISD::Hi 0x2239170

        0x2239070: i32 = TargetGlobalAddress<[6 x i32]* @redefine_in_a> 0 [TF=3]

      0x2239970: i32 = REDEFINEISD::Lo 0x2239070

    0x2239a70: i32 = add 0x2239370, 0x2239970

    0x2239570: i32 = FrameIndex<0> [ORD=4] [ID=4]

    0x2239270: <multiple use>
  0x2239670: ch = store 0x2239870, 0x2239a70, 0x2239570, 0x2239270<ST4[%1]> [ORD=4] [ID=7]


===== Instruction selection begins: BB#0 'redefine_start1.return'
ISEL: Starting pattern match on root node: 0x2239670: ch = store 0x2239870, 0x2239a70, 0x2239570, 0x2239270<ST4[%1]> [ORD=4] [ID=15]

  Morphed node: 0x2239670: ch = SW 0x2239a70, 0x2239570, 0x2238f70, 0x2239870<Mem:ST4[%1]> [ORD=4]

ISEL: Match complete!
=> 0x2239670: ch = SW 0x2239a70, 0x2239570, 0x2238f70, 0x2239870<Mem:ST4[%1]> [ORD=4]

ISEL: Starting pattern match on root node: 0x2239870: ch = store 0x221bb88, 0x2239770, 0x223bca0, 0x2239270<ST4[%0]> [ID=14]

  Initial Opcode index to 178
  Morphed node: 0x2239870: ch = SW 0x2239770, 0x223bca0, 0x2238f70, 0x221bb88<Mem:ST4[%0]>

ISEL: Match complete!
=> 0x2239870: ch = SW 0x2239770, 0x223bca0, 0x2238f70, 0x221bb88<Mem:ST4[%0]>

ISEL: Starting pattern match on root node: 0x223bca0: i32 = add 0x2239c70, 0x2239d70 [ID=13]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x223bca0: i32 = ADD 0x2239d70, 0x2239c70

ISEL: Match complete!
=> 0x223bca0: i32 = ADD 0x2239d70, 0x2239c70

ISEL: Starting pattern match on root node: 0x2239a70: i32 = add 0x2239370, 0x2239970 [ID=12]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x2239a70: i32 = ADD 0x2239970, 0x2239370

ISEL: Match complete!
=> 0x2239a70: i32 = ADD 0x2239970, 0x2239370

ISEL: Starting pattern match on root node: 0x2239d70: i32 = REDEFINEISD::Lo 0x2239b70 [ID=11]

  Initial Opcode index to 1204
  Morphed node: 0x2239d70: i32 = ADDI 0x2239270, 0x2239b70

ISEL: Match complete!
=> 0x2239d70: i32 = ADDI 0x2239270, 0x2239b70

ISEL: Starting pattern match on root node: 0x2239c70: i32 = REDEFINEISD::Hi 0x2239470 [ID=10]

  Initial Opcode index to 1186
  Morphed node: 0x2239c70: i32 = LUI 0x2239470

ISEL: Match complete!
=> 0x2239c70: i32 = LUI 0x2239470

ISEL: Starting pattern match on root node: 0x2239970: i32 = REDEFINEISD::Lo 0x2239070 [ID=9]

  Initial Opcode index to 1204
  Morphed node: 0x2239970: i32 = ADDI 0x2239270, 0x2239070

ISEL: Match complete!
=> 0x2239970: i32 = ADDI 0x2239270, 0x2239070

ISEL: Starting pattern match on root node: 0x2239370: i32 = REDEFINEISD::Hi 0x2239170 [ID=8]

  Initial Opcode index to 1186
  Morphed node: 0x2239370: i32 = LUI 0x2239170

ISEL: Match complete!
=> 0x2239370: i32 = LUI 0x2239170

=> 0x2239b70: i32 = TargetGlobalAddress<float* @var> 0 [TF=3]

=> 0x2239470: i32 = TargetGlobalAddress<float* @var> 0 [TF=2]

=> 0x2239070: i32 = TargetGlobalAddress<[6 x i32]* @redefine_in_a> 0 [TF=3]

=> 0x2239170: i32 = TargetGlobalAddress<[6 x i32]* @redefine_in_a> 0 [TF=2]

ISEL: Starting pattern match on root node: 0x2239770: i32 = Constant<1060320051> [ID=3]

  Initial Opcode index to 1226
comparing 0 and 1060320051 and returning value:0
  Skipped scope entry (due to false predicate) at index 1228, continuing at 1236
  Skipped scope entry (due to false predicate) at index 1240, continuing at 1256
  Morphed node: 0x2239770: i32 = ADDI 0x2239270, 0x223bda0

ISEL: Match complete!
=> 0x2239770: i32 = ADDI 0x2239270, 0x223bda0

=> 0x221bb88: ch = EntryToken [ORD=2]

===== Instruction selection ends:
Selected selection DAG: BB#0 'redefine_start1:redefine_start1.return'
SelectionDAG has 20 nodes:
  0x2238f70: i32 = TargetConstant<0>

  0x2239270: i32 = Register %zero

        0x2239270: <multiple use>
        0x2239070: i32 = TargetGlobalAddress<[6 x i32]* @redefine_in_a> 0 [TF=3]

      0x2239970: i32 = ADDI 0x2239270, 0x2239070

        0x2239170: i32 = TargetGlobalAddress<[6 x i32]* @redefine_in_a> 0 [TF=2]

      0x2239370: i32 = LUI 0x2239170

    0x2239a70: i32 = ADD 0x2239970, 0x2239370

      0x223bea0: i32 = Register %t5

      0x223bfa0: i32 = TargetFrameIndex<0>

    0x2239570: i32 = ADDI 0x223bea0, 0x223bfa0 [ORD=4]

    0x2238f70: <multiple use>
        0x2239270: <multiple use>
        0x223bda0: i32 = TargetConstant<1060320051>

      0x2239770: i32 = ADDI 0x2239270, 0x223bda0

          0x2239270: <multiple use>
          0x2239b70: i32 = TargetGlobalAddress<float* @var> 0 [TF=3]

        0x2239d70: i32 = ADDI 0x2239270, 0x2239b70

          0x2239470: i32 = TargetGlobalAddress<float* @var> 0 [TF=2]

        0x2239c70: i32 = LUI 0x2239470

      0x223bca0: i32 = ADD 0x2239d70, 0x2239c70

      0x2238f70: <multiple use>
      0x221bb88: ch = EntryToken [ORD=2]

    0x2239870: ch = SW 0x2239770, 0x223bca0, 0x2238f70, 0x221bb88<Mem:ST4[%0]>

  0x2239670: ch = SW 0x2239a70, 0x2239570, 0x2238f70, 0x2239870<Mem:ST4[%1]> [ORD=4]


********** List Scheduling BB#0 'redefine_start1.return' **********
SU(0): 0x2239670: ch = SW 0x2239a70, 0x2239570, 0x2238f70, 0x2239870<Mem:ST4[%1]> [ORD=4] [ID=0]

  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 0
  Predecessors:
   val SU(7): Latency=1
   val SU(6): Latency=1
   ch  SU(1): Latency=1

SU(1): 0x2239870: ch = SW 0x2239770, 0x223bca0, 0x2238f70, 0x221bb88<Mem:ST4[%0]> [ID=1]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
   val SU(5): Latency=1
   val SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x223bca0: i32 = ADD 0x2239d70, 0x2239c70 [ID=2]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
   val SU(4): Latency=1
   val SU(3): Latency=1
  Successors:
   val SU(1): Latency=1

SU(3): 0x2239c70: i32 = LUI 0x2239470 [ID=3]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(2): Latency=1

SU(4): 0x2239d70: i32 = ADDI 0x2239270, 0x2239b70 [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(2): Latency=1

SU(5): 0x2239770: i32 = ADDI 0x2239270, 0x223bda0 [ID=5]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
   val SU(1): Latency=1

SU(6): 0x2239570: i32 = ADDI 0x223bea0, 0x223bfa0 [ORD=4] [ID=6]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
   val SU(0): Latency=1

SU(7): 0x2239a70: i32 = ADD 0x2239970, 0x2239370 [ID=7]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
   val SU(9): Latency=1
   val SU(8): Latency=1
  Successors:
   val SU(0): Latency=1

SU(8): 0x2239370: i32 = LUI 0x2239170 [ID=8]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
   val SU(7): Latency=1

SU(9): 0x2239970: i32 = ADDI 0x2239270, 0x2239070 [ID=9]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
   val SU(7): Latency=1


Examining Available:
Height 0: SU(0): 0x2239670: ch = SW 0x2239a70, 0x2239570, 0x2238f70, 0x2239870<Mem:ST4[%1]> [ORD=4] [ID=0]


*** Scheduling [0]: SU(0): 0x2239670: ch = SW 0x2239a70, 0x2239570, 0x2238f70, 0x2239870<Mem:ST4[%1]> [ORD=4] [ID=0]


Examining Available:
Height 1: SU(7): 0x2239a70: i32 = ADD 0x2239970, 0x2239370 [ID=7]

Height 1: SU(1): 0x2239870: ch = SW 0x2239770, 0x223bca0, 0x2238f70, 0x221bb88<Mem:ST4[%0]> [ID=1]

Height 1: SU(6): 0x2239570: i32 = ADDI 0x223bea0, 0x223bfa0 [ORD=4] [ID=6]


*** Scheduling [1]: SU(7): 0x2239a70: i32 = ADD 0x2239970, 0x2239370 [ID=7]


Examining Available:
Height 2: SU(9): 0x2239970: i32 = ADDI 0x2239270, 0x2239070 [ID=9]

Height 2: SU(8): 0x2239370: i32 = LUI 0x2239170 [ID=8]

Height 1: SU(1): 0x2239870: ch = SW 0x2239770, 0x223bca0, 0x2238f70, 0x221bb88<Mem:ST4[%0]> [ID=1]

Height 1: SU(6): 0x2239570: i32 = ADDI 0x223bea0, 0x223bfa0 [ORD=4] [ID=6]


*** Scheduling [2]: SU(9): 0x2239970: i32 = ADDI 0x2239270, 0x2239070 [ID=9]


Examining Available:
Height 2: SU(8): 0x2239370: i32 = LUI 0x2239170 [ID=8]

Height 1: SU(1): 0x2239870: ch = SW 0x2239770, 0x223bca0, 0x2238f70, 0x221bb88<Mem:ST4[%0]> [ID=1]

Height 1: SU(6): 0x2239570: i32 = ADDI 0x223bea0, 0x223bfa0 [ORD=4] [ID=6]


*** Scheduling [3]: SU(8): 0x2239370: i32 = LUI 0x2239170 [ID=8]


Examining Available:
Height 1: SU(1): 0x2239870: ch = SW 0x2239770, 0x223bca0, 0x2238f70, 0x221bb88<Mem:ST4[%0]> [ID=1]

Height 1: SU(6): 0x2239570: i32 = ADDI 0x223bea0, 0x223bfa0 [ORD=4] [ID=6]


*** Scheduling [4]: SU(1): 0x2239870: ch = SW 0x2239770, 0x223bca0, 0x2238f70, 0x221bb88<Mem:ST4[%0]> [ID=1]


Examining Available:
Height 5: SU(5): 0x2239770: i32 = ADDI 0x2239270, 0x223bda0 [ID=5]

Height 5: SU(2): 0x223bca0: i32 = ADD 0x2239d70, 0x2239c70 [ID=2]

Height 1: SU(6): 0x2239570: i32 = ADDI 0x223bea0, 0x223bfa0 [ORD=4] [ID=6]


*** Scheduling [5]: SU(5): 0x2239770: i32 = ADDI 0x2239270, 0x223bda0 [ID=5]


Examining Available:
Height 5: SU(2): 0x223bca0: i32 = ADD 0x2239d70, 0x2239c70 [ID=2]

Height 1: SU(6): 0x2239570: i32 = ADDI 0x223bea0, 0x223bfa0 [ORD=4] [ID=6]


*** Scheduling [6]: SU(2): 0x223bca0: i32 = ADD 0x2239d70, 0x2239c70 [ID=2]


Examining Available:
Height 7: SU(4): 0x2239d70: i32 = ADDI 0x2239270, 0x2239b70 [ID=4]

Height 7: SU(3): 0x2239c70: i32 = LUI 0x2239470 [ID=3]

Height 1: SU(6): 0x2239570: i32 = ADDI 0x223bea0, 0x223bfa0 [ORD=4] [ID=6]


*** Scheduling [7]: SU(4): 0x2239d70: i32 = ADDI 0x2239270, 0x2239b70 [ID=4]


Examining Available:
Height 7: SU(3): 0x2239c70: i32 = LUI 0x2239470 [ID=3]

Height 1: SU(6): 0x2239570: i32 = ADDI 0x223bea0, 0x223bfa0 [ORD=4] [ID=6]


*** Scheduling [8]: SU(3): 0x2239c70: i32 = LUI 0x2239470 [ID=3]


Examining Available:
Height 1: SU(6): 0x2239570: i32 = ADDI 0x223bea0, 0x223bfa0 [ORD=4] [ID=6]


*** Scheduling [9]: SU(6): 0x2239570: i32 = ADDI 0x223bea0, 0x223bfa0 [ORD=4] [ID=6]

*** Final schedule ***
SU(6): 0x2239570: i32 = ADDI 0x223bea0, 0x223bfa0 [ORD=4] [ID=6]

SU(3): 0x2239c70: i32 = LUI 0x2239470 [ID=3]

SU(4): 0x2239d70: i32 = ADDI 0x2239270, 0x2239b70 [ID=4]

SU(2): 0x223bca0: i32 = ADD 0x2239d70, 0x2239c70 [ID=2]

SU(5): 0x2239770: i32 = ADDI 0x2239270, 0x223bda0 [ID=5]

SU(1): 0x2239870: ch = SW 0x2239770, 0x223bca0, 0x2238f70, 0x221bb88<Mem:ST4[%0]> [ID=1]

SU(8): 0x2239370: i32 = LUI 0x2239170 [ID=8]

SU(9): 0x2239970: i32 = ADDI 0x2239270, 0x2239070 [ID=9]

SU(7): 0x2239a70: i32 = ADD 0x2239970, 0x2239370 [ID=7]

SU(0): 0x2239670: ch = SW 0x2239a70, 0x2239570, 0x2238f70, 0x2239870<Mem:ST4[%1]> [ORD=4] [ID=0]


Total amount of phi nodes to update: 0
# Machine code for function redefine_start1: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start1.return
16B		%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
32B		%vreg1<def> = LUI <ga:@var>[TF=2]; GR32Bit:%vreg1
48B		%vreg2<def> = ADDI %zero, <ga:@var>[TF=3]; GR32Bit:%vreg2
64B		%vreg3<def> = ADD %vreg2<kill>, %vreg1<kill>; GR32Bit:%vreg3,%vreg2,%vreg1
80B		%vreg4<def> = ADDI %zero, 1060320051; GR32Bit:%vreg4
96B		SW %vreg4<kill>, %vreg3<kill>, 0; mem:ST4[%0] GR32Bit:%vreg4,%vreg3
112B		%vreg5<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg5
128B		%vreg6<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg6
144B		%vreg7<def> = ADD %vreg6<kill>, %vreg5<kill>; GR32Bit:%vreg7,%vreg6,%vreg5
160B		SW %vreg7<kill>, %vreg0<kill>, 0; mem:ST4[%1] GR32Bit:%vreg7,%vreg0

# End machine code for function redefine_start1.

********** Stack Coloring **********
********** Function: redefine_start1
Found 0 markers and 1 slots
Slot structure:
Slot #0 - 4 bytes.
Total Stack size: 4 bytes

Will not try to merge slots.
Removed 0 markers.
******** Pre-regalloc Machine LICM: redefine_start1 ********
******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: redefine_start1
********** PROCESS IMPLICIT DEFS **********
********** Function: redefine_start1
********** REWRITING TWO-ADDR INSTRS **********
********** Function: redefine_start1
# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start1.return
16B		%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
32B		%vreg1<def> = LUI <ga:@var>[TF=2]; GR32Bit:%vreg1
48B		%vreg2<def> = ADDI %zero, <ga:@var>[TF=3]; GR32Bit:%vreg2
64B		%vreg3<def> = ADD %vreg2<kill>, %vreg1<kill>; GR32Bit:%vreg3,%vreg2,%vreg1
80B		%vreg4<def> = ADDI %zero, 1060320051; GR32Bit:%vreg4
96B		SW %vreg4<kill>, %vreg3<kill>, 0; mem:ST4[%0] GR32Bit:%vreg4,%vreg3
112B		%vreg5<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg5
128B		%vreg6<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg6
144B		%vreg7<def> = ADD %vreg6<kill>, %vreg5<kill>; GR32Bit:%vreg7,%vreg6,%vreg5
160B		SW %vreg7<kill>, %vreg0<kill>, 0; mem:ST4[%1] GR32Bit:%vreg7,%vreg0

# End machine code for function redefine_start1.

Computing live-in reg-units in ABI blocks.
Created 0 new intervals.
********** INTERVALS **********
%vreg0 = [16r,160r:0)  0@16r
%vreg1 = [32r,64r:0)  0@32r
%vreg2 = [48r,64r:0)  0@48r
%vreg3 = [64r,96r:0)  0@64r
%vreg4 = [80r,96r:0)  0@80r
%vreg5 = [112r,144r:0)  0@112r
%vreg6 = [128r,144r:0)  0@128r
%vreg7 = [144r,160r:0)  0@144r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start1.return
16B		%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
32B		%vreg1<def> = LUI <ga:@var>[TF=2]; GR32Bit:%vreg1
48B		%vreg2<def> = ADDI %zero, <ga:@var>[TF=3]; GR32Bit:%vreg2
64B		%vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
80B		%vreg4<def> = ADDI %zero, 1060320051; GR32Bit:%vreg4
96B		SW %vreg4, %vreg3, 0; mem:ST4[%0] GR32Bit:%vreg4,%vreg3
112B		%vreg5<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg5
128B		%vreg6<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg6
144B		%vreg7<def> = ADD %vreg6, %vreg5; GR32Bit:%vreg7,%vreg6,%vreg5
160B		SW %vreg7, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg7,%vreg0

# End machine code for function redefine_start1.

********** SIMPLE REGISTER COALESCING **********
********** Function: redefine_start1
********** JOINING INTERVALS ***********
redefine_start1.return:
Trying to inflate 0 regs.
********** INTERVALS **********
%vreg0 = [16r,160r:0)  0@16r
%vreg1 = [32r,64r:0)  0@32r
%vreg2 = [48r,64r:0)  0@48r
%vreg3 = [64r,96r:0)  0@64r
%vreg4 = [80r,96r:0)  0@80r
%vreg5 = [112r,144r:0)  0@112r
%vreg6 = [128r,144r:0)  0@128r
%vreg7 = [144r,160r:0)  0@144r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start1.return
16B		%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
32B		%vreg1<def> = LUI <ga:@var>[TF=2]; GR32Bit:%vreg1
48B		%vreg2<def> = ADDI %zero, <ga:@var>[TF=3]; GR32Bit:%vreg2
64B		%vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
80B		%vreg4<def> = ADDI %zero, 1060320051; GR32Bit:%vreg4
96B		SW %vreg4, %vreg3, 0; mem:ST4[%0] GR32Bit:%vreg4,%vreg3
112B		%vreg5<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg5
128B		%vreg6<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg6
144B		%vreg7<def> = ADD %vreg6, %vreg5; GR32Bit:%vreg7,%vreg6,%vreg5
160B		SW %vreg7, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg7,%vreg0

# End machine code for function redefine_start1.

Before MISched:
# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %redefine_start1.return
	%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
	%vreg1<def> = LUI <ga:@var>[TF=2]; GR32Bit:%vreg1
	%vreg2<def> = ADDI %zero, <ga:@var>[TF=3]; GR32Bit:%vreg2
	%vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
	%vreg4<def> = ADDI %zero, 1060320051; GR32Bit:%vreg4
	SW %vreg4, %vreg3, 0; mem:ST4[%0] GR32Bit:%vreg4,%vreg3
	%vreg5<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg5
	%vreg6<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg6
	%vreg7<def> = ADD %vreg6, %vreg5; GR32Bit:%vreg7,%vreg6,%vreg5
	SW %vreg7, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg7,%vreg0

# End machine code for function redefine_start1.


-------------
Starting new basic block BB#0
********** MI Scheduling **********
redefine_start1:BB#0 redefine_start1.return
  From: %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
    To: End Remaining: 0
Max Pressure: GR32Bit=3
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 3
Excess PSets: 
2 subtrees:
  SU(0) in tree 0
  SU(1) in tree 1
  SU(2) in tree 1
  SU(3) in tree 1
  SU(4) in tree 1
  SU(5) in tree 1
  SU(6) in tree 0
  SU(7) in tree 0
  SU(8) in tree 0
  SU(9) in tree 0
SU(0):   %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(9): Latency=5 Reg=%vreg0

SU(1):   %vreg1<def> = LUI <ga:@var>[TF=2]; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(3): Latency=5 Reg=%vreg1

SU(2):   %vreg2<def> = ADDI %zero, <ga:@var>[TF=3]; GR32Bit:%vreg2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(3): Latency=5 Reg=%vreg2

SU(3):   %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg2
   val SU(1): Latency=5 Reg=%vreg1
  Successors:
   val SU(5): Latency=5 Reg=%vreg3

SU(4):   %vreg4<def> = ADDI %zero, 1060320051; GR32Bit:%vreg4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
   val SU(5): Latency=4 Reg=%vreg4

SU(5):   SW %vreg4, %vreg3, 0; mem:ST4[%0] GR32Bit:%vreg4,%vreg3
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 10
  Height             : 0
  Predecessors:
   val SU(3): Latency=5 Reg=%vreg3
   val SU(4): Latency=4 Reg=%vreg4
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(6):   %vreg5<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
   val SU(8): Latency=5 Reg=%vreg5

SU(7):   %vreg6<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg6
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
   val SU(8): Latency=5 Reg=%vreg6

SU(8):   %vreg7<def> = ADD %vreg6, %vreg5; GR32Bit:%vreg7,%vreg6,%vreg5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
   val SU(7): Latency=5 Reg=%vreg6
   val SU(6): Latency=5 Reg=%vreg5
  Successors:
   val SU(9): Latency=4 Reg=%vreg7

SU(9):   SW %vreg7, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg7,%vreg0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 9
  Height             : 0
  Predecessors:
   val SU(8): Latency=4 Reg=%vreg7
   val SU(0): Latency=5 Reg=%vreg0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(9): Latency=5 Reg=%vreg0

SU(1):   %vreg1<def> = LUI <ga:@var>[TF=2]; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(3): Latency=5 Reg=%vreg1

SU(2):   %vreg2<def> = ADDI %zero, <ga:@var>[TF=3]; GR32Bit:%vreg2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(3): Latency=5 Reg=%vreg2

SU(3):   %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg2
   val SU(1): Latency=5 Reg=%vreg1
  Successors:
   val SU(5): Latency=5 Reg=%vreg3

SU(4):   %vreg4<def> = ADDI %zero, 1060320051; GR32Bit:%vreg4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
   val SU(5): Latency=4 Reg=%vreg4

SU(5):   SW %vreg4, %vreg3, 0; mem:ST4[%0] GR32Bit:%vreg4,%vreg3
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 10
  Height             : 0
  Predecessors:
   val SU(3): Latency=5 Reg=%vreg3
   val SU(4): Latency=4 Reg=%vreg4
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(6):   %vreg5<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
   val SU(8): Latency=5 Reg=%vreg5

SU(7):   %vreg6<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg6
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
   val SU(8): Latency=5 Reg=%vreg6

SU(8):   %vreg7<def> = ADD %vreg6, %vreg5; GR32Bit:%vreg7,%vreg6,%vreg5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
   val SU(7): Latency=5 Reg=%vreg6
   val SU(6): Latency=5 Reg=%vreg5
  Successors:
   val SU(9): Latency=4 Reg=%vreg7

SU(9):   SW %vreg7, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg7,%vreg0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 9
  Height             : 0
  Predecessors:
   val SU(8): Latency=4 Reg=%vreg7
   val SU(0): Latency=5 Reg=%vreg0
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(7)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg6<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg6
handleMove 128B -> 8B: %vreg6<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg6
     %vreg6:	[128r,144r:0)  0@128r
        -->	[8r,144r:0)  0@8r
     zero:	EMPTY
        -->	EMPTY
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
Pick node SU(6)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg5<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg5
handleMove 112B -> 24B: %vreg5<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg5
     %vreg5:	[112r,144r:0)  0@112r
        -->	[24r,144r:0)  0@24r
Pick node SU(8)  ILP: 3 / 6 = 0.5 Tree: 0 @0
Scheduling %vreg7<def> = ADD %vreg6, %vreg5; GR32Bit:%vreg7,%vreg6,%vreg5
handleMove 144B -> 28B: %vreg7<def> = ADD %vreg6, %vreg5; GR32Bit:%vreg7,%vreg6,%vreg5
     %vreg7:	[144r,160r:0)  0@144r
        -->	[28r,160r:0)  0@28r
     %vreg6:	[8r,144r:0)  0@8r
        -->	[8r,28r:0)  0@8r
     %vreg5:	[24r,144r:0)  0@24r
        -->	[24r,28r:0)  0@24r
Pick node SU(9)  ILP: 5 / 10 = 0.5 Tree: 0 @0
Scheduling SW %vreg7, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg7,%vreg0

*** Renumbered SlotIndexes 28-44 ***
handleMove 160B -> 36B: SW %vreg7, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg7,%vreg0
     %vreg7:	[28r,160r:0)  0@28r
        -->	[28r,36r:0)  0@28r
     %vreg0:	[16r,160r:0)  0@16r
        -->	[16r,36r:0)  0@16r
Pick node SU(4)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg4<def> = ADDI %zero, 1060320051; GR32Bit:%vreg4
handleMove 80B -> 40B: %vreg4<def> = ADDI %zero, 1060320051; GR32Bit:%vreg4
     %vreg4:	[80r,96r:0)  0@80r
        -->	[40r,96r:0)  0@40r
     zero:	EMPTY
        -->	EMPTY
Pick node SU(2)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg2<def> = ADDI %zero, <ga:@var>[TF=3]; GR32Bit:%vreg2

*** Renumbered SlotIndexes 40-72 ***
handleMove 64B -> 48B: %vreg2<def> = ADDI %zero, <ga:@var>[TF=3]; GR32Bit:%vreg2
     %vreg2:	[64r,72r:0)  0@64r
        -->	[48r,72r:0)  0@48r
     zero:	EMPTY
        -->	EMPTY
Pick node SU(1)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg1<def> = LUI <ga:@var>[TF=2]; GR32Bit:%vreg1
Pick node SU(3)  ILP: 3 / 6 = 0.5 Tree: 1 @0
Scheduling %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
Pick node SU(5)  ILP: 5 / 11 = 0.454545 Tree: 1 @0
Scheduling SW %vreg4, %vreg3, 0; mem:ST4[%0] GR32Bit:%vreg4,%vreg3
*** Final schedule for BB#0 ***
SU(7):   %vreg6<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg6
SU(0):   %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
SU(6):   %vreg5<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg5
SU(8):   %vreg7<def> = ADD %vreg6, %vreg5; GR32Bit:%vreg7,%vreg6,%vreg5
SU(9):   SW %vreg7, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg7,%vreg0
SU(4):   %vreg4<def> = ADDI %zero, 1060320051; GR32Bit:%vreg4
SU(2):   %vreg2<def> = ADDI %zero, <ga:@var>[TF=3]; GR32Bit:%vreg2
SU(1):   %vreg1<def> = LUI <ga:@var>[TF=2]; GR32Bit:%vreg1
SU(3):   %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
SU(5):   SW %vreg4, %vreg3, 0; mem:ST4[%0] GR32Bit:%vreg4,%vreg3


*** Renumbered SlotIndexes 4-108 ***

*** Renumbered SlotIndexes 16-136 ***

*** Renumbered SlotIndexes 28-156 ***

*** Renumbered SlotIndexes 40-184 ***

*** Renumbered SlotIndexes 52-196 ***

*** Renumbered SlotIndexes 64-208 ***

*** Renumbered SlotIndexes 76-220 ***

*** Renumbered SlotIndexes 88-232 ***

*** Renumbered SlotIndexes 100-244 ***

*** Renumbered SlotIndexes 112-256 ***

*** Renumbered SlotIndexes 124-268 ***

*** Renumbered SlotIndexes 136-280 ***

*** Renumbered SlotIndexes 148-292 ***

*** Renumbered SlotIndexes 160-304 ***

*** Renumbered SlotIndexes 172-316 ***

*** Renumbered SlotIndexes 184-328 ***

*** Renumbered SlotIndexes 196-340 ***

*** Renumbered SlotIndexes 208-352 ***

*** Renumbered SlotIndexes 220-364 ***

*** Renumbered SlotIndexes 232-376 ***

*** Renumbered SlotIndexes 244-388 ***

*** Renumbered SlotIndexes 256-400 ***

*** Renumbered SlotIndexes 268-412 ***

*** Renumbered SlotIndexes 280-424 ***

*** Renumbered SlotIndexes 292-436 ***

*** Renumbered SlotIndexes 304-448 ***

*** Renumbered SlotIndexes 316-460 ***

*** Renumbered SlotIndexes 328-472 ***

*** Renumbered SlotIndexes 340-484 ***

*** Renumbered SlotIndexes 352-496 ***

*** Renumbered SlotIndexes 364-508 ***

*** Renumbered SlotIndexes 376-520 ***

*** Renumbered SlotIndexes 388-532 ***

*** Renumbered SlotIndexes 400-544 ***
Partitioning instructions of the region into multiple CEs
instr:  %vreg6<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg6
instr:  %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
instr:  %vreg5<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg5
instr:  %vreg7<def> = ADD %vreg6, %vreg5; GR32Bit:%vreg7,%vreg6,%vreg5
instr:  SW %vreg7, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg7,%vreg0
instr:  %vreg4<def> = ADDI %zero, 1060320051; GR32Bit:%vreg4
instr:  %vreg2<def> = ADDI %zero, <ga:@var>[TF=3]; GR32Bit:%vreg2
instr:  %vreg1<def> = LUI <ga:@var>[TF=2]; GR32Bit:%vreg1
instr:  %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
instr:  SW %vreg4, %vreg3, 0; mem:ST4[%0] GR32Bit:%vreg4,%vreg3
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
before falloc, state of bb0:BB#0: derived from LLVM BB %redefine_start1.return
	%vreg8<def> = ADD %t5, %zero; GR32Bit:%vreg8
	%vreg10<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg10
	%vreg11<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg11
	%vreg12<def> = SRLI %vreg11, 12; GR32Bit:%vreg12,%vreg11
	%vreg13<def> = ADD %vreg10, %vreg12; GR32Bit:%vreg13,%vreg10,%vreg12
	%vreg14<def> = ADDI %zero, 20; GR32Bit:%vreg14
	%vreg15<def> = SRLI %t5, 22; GR32Bit:%vreg15
	%vreg16<def> = SRLI %t5, 12; GR32Bit:%vreg16
	%vreg17<def> = ANDI %vreg16, 15; GR32Bit:%vreg17,%vreg16
	%vreg18<def> = SRLI %t5, 6; GR32Bit:%vreg18
	%vreg19<def> = ANDI %vreg18, 63; GR32Bit:%vreg19,%vreg18
	%vreg20<def> = ADDI %zero, 832; GR32Bit:%vreg20
	%vreg21<def> = MUL %vreg15, %vreg20; GR32Bit:%vreg21,%vreg15,%vreg20
	%vreg22<def> = ADDI %zero, 52; GR32Bit:%vreg22
	%vreg23<def> = MUL %vreg17, %vreg22; GR32Bit:%vreg23,%vreg17,%vreg22
	%vreg24<def> = ADD %vreg23, %vreg19; GR32Bit:%vreg24,%vreg23,%vreg19
	%vreg25<def> = ADD %vreg24, %vreg21; GR32Bit:%vreg25,%vreg24,%vreg21
	%vreg26<def> = MUL %vreg25, %vreg14; GR32Bit:%vreg26,%vreg25,%vreg14
	%vreg9<def> = ADD %vreg13, %vreg26; GR32Bit:%vreg9,%vreg13,%vreg26
	%vreg6<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg6
	%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
	%vreg5<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg5
	%vreg7<def> = ADD %vreg6, %vreg5; GR32Bit:%vreg7,%vreg6,%vreg5
	SW %vreg7, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg7,%vreg0
	%vreg4<def> = ADDI %zero, 1060320051; GR32Bit:%vreg4
	%vreg2<def> = ADDI %zero, <ga:@var>[TF=3]; GR32Bit:%vreg2
	%vreg1<def> = LUI <ga:@var>[TF=2]; GR32Bit:%vreg1
	%vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
	SW %vreg4, %vreg3, 0; mem:ST4[%0] GR32Bit:%vreg4,%vreg3
	%vreg27<def> = ADD %t5, %zero; GR32Bit:%vreg27
	%vreg29<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg29
	%vreg30<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg30
	%vreg31<def> = SRLI %vreg30, 12; GR32Bit:%vreg31,%vreg30
	%vreg32<def> = ADD %vreg29, %vreg31; GR32Bit:%vreg32,%vreg29,%vreg31
	%vreg33<def> = ADDI %zero, 20; GR32Bit:%vreg33
	%vreg34<def> = SRLI %t5, 22; GR32Bit:%vreg34
	%vreg35<def> = SRLI %t5, 12; GR32Bit:%vreg35
	%vreg36<def> = ANDI %vreg35, 15; GR32Bit:%vreg36,%vreg35
	%vreg37<def> = SRLI %t5, 6; GR32Bit:%vreg37
	%vreg38<def> = ANDI %vreg37, 63; GR32Bit:%vreg38,%vreg37
	%vreg39<def> = ADDI %zero, 832; GR32Bit:%vreg39
	%vreg40<def> = MUL %vreg34, %vreg39; GR32Bit:%vreg40,%vreg34,%vreg39
	%vreg41<def> = ADDI %zero, 52; GR32Bit:%vreg41
	%vreg42<def> = MUL %vreg36, %vreg41; GR32Bit:%vreg42,%vreg36,%vreg41
	%vreg43<def> = ADD %vreg42, %vreg38; GR32Bit:%vreg43,%vreg42,%vreg38
	%vreg44<def> = ADD %vreg43, %vreg40; GR32Bit:%vreg44,%vreg43,%vreg40
	%vreg45<def> = MUL %vreg44, %vreg33; GR32Bit:%vreg45,%vreg44,%vreg33
	%vreg28<def> = ADD %vreg32, %vreg45; GR32Bit:%vreg28,%vreg32,%vreg45
	%vreg46<def> = ADD %t5, %zero; GR32Bit:%vreg46
	%vreg48<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg48
	%vreg49<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg49
	%vreg50<def> = SRLI %vreg49, 12; GR32Bit:%vreg50,%vreg49
	%vreg51<def> = ADD %vreg48, %vreg50; GR32Bit:%vreg51,%vreg48,%vreg50
	%vreg52<def> = ADDI %zero, 20; GR32Bit:%vreg52
	%vreg53<def> = SRLI %t5, 22; GR32Bit:%vreg53
	%vreg54<def> = SRLI %t5, 12; GR32Bit:%vreg54
	%vreg55<def> = ANDI %vreg54, 15; GR32Bit:%vreg55,%vreg54
	%vreg56<def> = SRLI %t5, 6; GR32Bit:%vreg56
	%vreg57<def> = ANDI %vreg56, 63; GR32Bit:%vreg57,%vreg56
	%vreg58<def> = ADDI %zero, 832; GR32Bit:%vreg58
	%vreg59<def> = MUL %vreg53, %vreg58; GR32Bit:%vreg59,%vreg53,%vreg58
	%vreg60<def> = ADDI %zero, 52; GR32Bit:%vreg60
	%vreg61<def> = MUL %vreg55, %vreg60; GR32Bit:%vreg61,%vreg55,%vreg60
	%vreg62<def> = ADD %vreg61, %vreg57; GR32Bit:%vreg62,%vreg61,%vreg57
	%vreg63<def> = ADD %vreg62, %vreg59; GR32Bit:%vreg63,%vreg62,%vreg59
	%vreg64<def> = MUL %vreg63, %vreg52; GR32Bit:%vreg64,%vreg63,%vreg52
	%vreg47<def> = ADD %vreg51, %vreg64; GR32Bit:%vreg47,%vreg51,%vreg64
	%vreg65<def> = ADD %t5, %zero; GR32Bit:%vreg65
	%vreg67<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg67
	%vreg68<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg68
	%vreg69<def> = SRLI %vreg68, 12; GR32Bit:%vreg69,%vreg68
	%vreg70<def> = ADD %vreg67, %vreg69; GR32Bit:%vreg70,%vreg67,%vreg69
	%vreg71<def> = ADDI %zero, 20; GR32Bit:%vreg71
	%vreg72<def> = SRLI %t5, 22; GR32Bit:%vreg72
	%vreg73<def> = SRLI %t5, 12; GR32Bit:%vreg73
	%vreg74<def> = ANDI %vreg73, 15; GR32Bit:%vreg74,%vreg73
	%vreg75<def> = SRLI %t5, 6; GR32Bit:%vreg75
	%vreg76<def> = ANDI %vreg75, 63; GR32Bit:%vreg76,%vreg75
	%vreg77<def> = ADDI %zero, 832; GR32Bit:%vreg77
	%vreg78<def> = MUL %vreg72, %vreg77; GR32Bit:%vreg78,%vreg72,%vreg77
	%vreg79<def> = ADDI %zero, 52; GR32Bit:%vreg79
	%vreg80<def> = MUL %vreg74, %vreg79; GR32Bit:%vreg80,%vreg74,%vreg79
	%vreg81<def> = ADD %vreg80, %vreg76; GR32Bit:%vreg81,%vreg80,%vreg76
	%vreg82<def> = ADD %vreg81, %vreg78; GR32Bit:%vreg82,%vreg81,%vreg78
	%vreg83<def> = MUL %vreg82, %vreg71; GR32Bit:%vreg83,%vreg82,%vreg71
	%vreg66<def> = ADD %vreg70, %vreg83; GR32Bit:%vreg66,%vreg70,%vreg83
Adding all fallocs first to avoid stalls due to sequential fallocs and fbinds
Adding writecm(for writing sync count to context frames) and fbind instructions
live end of child is itself
live end of child is itself
Adding localref sw instructions to hyperOp redefine_start1

*** Renumbered SlotIndexes 412-556 ***

*** Renumbered SlotIndexes 424-568 ***

*** Renumbered SlotIndexes 436-580 ***

*** Renumbered SlotIndexes 448-592 ***

*** Renumbered SlotIndexes 460-604 ***

*** Renumbered SlotIndexes 472-616 ***

*** Renumbered SlotIndexes 484-628 ***

*** Renumbered SlotIndexes 496-640 ***

*** Renumbered SlotIndexes 508-652 ***
localref sw to running_protection3:  SW %vreg104, %vreg103, 16; GR32Bit:%vreg104,%vreg103
Adding writecm instructions to hyperOp redefine_start1
Adding writecmp and sync instructions
problem with which child exactly?running_protection3 with edge of type:6

*** Renumbered SlotIndexes 520-664 ***

*** Renumbered SlotIndexes 532-676 ***

*** Renumbered SlotIndexes 544-688 ***
Adding endHyperOp instructions to each pHyperOp

*** Renumbered SlotIndexes 556-700 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 568-712 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 580-724 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 592-736 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 604-748 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 616-760 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0
After Shuffling regions of basic block, state of BB#0:
BB#0: derived from LLVM BB %redefine_start1.return
	%vreg8<def> = ADD %t5, %zero; GR32Bit:%vreg8
	%vreg10<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg10
	%vreg11<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg11
	%vreg12<def> = SRLI %vreg11, 12; GR32Bit:%vreg12,%vreg11
	%vreg13<def> = ADD %vreg10, %vreg12; GR32Bit:%vreg13,%vreg10,%vreg12
	%vreg14<def> = ADDI %zero, 20; GR32Bit:%vreg14
	%vreg15<def> = SRLI %t5, 22; GR32Bit:%vreg15
	%vreg16<def> = SRLI %t5, 12; GR32Bit:%vreg16
	%vreg17<def> = ANDI %vreg16, 15; GR32Bit:%vreg17,%vreg16
	%vreg18<def> = SRLI %t5, 6; GR32Bit:%vreg18
	%vreg19<def> = ANDI %vreg18, 63; GR32Bit:%vreg19,%vreg18
	%vreg20<def> = ADDI %zero, 832; GR32Bit:%vreg20
	%vreg21<def> = MUL %vreg15, %vreg20; GR32Bit:%vreg21,%vreg15,%vreg20
	%vreg22<def> = ADDI %zero, 52; GR32Bit:%vreg22
	%vreg23<def> = MUL %vreg17, %vreg22; GR32Bit:%vreg23,%vreg17,%vreg22
	%vreg24<def> = ADD %vreg23, %vreg19; GR32Bit:%vreg24,%vreg23,%vreg19
	%vreg25<def> = ADD %vreg24, %vreg21; GR32Bit:%vreg25,%vreg24,%vreg21
	%vreg26<def> = MUL %vreg25, %vreg14; GR32Bit:%vreg26,%vreg25,%vreg14
	%vreg9<def> = ADD %vreg13, %vreg26; GR32Bit:%vreg9,%vreg13,%vreg26
	%vreg6<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg6
	%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
	%vreg5<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg5
	%vreg7<def> = ADD %vreg6, %vreg5; GR32Bit:%vreg7,%vreg6,%vreg5
	SW %vreg7, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg7,%vreg0
	%vreg4<def> = ADDI %zero, 1060320051; GR32Bit:%vreg4
	%vreg2<def> = ADDI %zero, <ga:@var>[TF=3]; GR32Bit:%vreg2
	%vreg1<def> = LUI <ga:@var>[TF=2]; GR32Bit:%vreg1
	%vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
	SW %vreg4, %vreg3, 0; mem:ST4[%0] GR32Bit:%vreg4,%vreg3
	%vreg84<def> = ADDI %zero, 64; GR32Bit:%vreg84
	%vreg85<def> = ADDI %zero, 1; GR32Bit:%vreg85
	WRITECM %vreg84, %vreg85, 60; GR32Bit:%vreg84,%vreg85
	%vreg86<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg86
	%vreg87<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg87
	%vreg88<def> = SRLI %vreg87, 12; GR32Bit:%vreg88,%vreg87
	%vreg89<def> = ADD %vreg86, %vreg88; GR32Bit:%vreg89,%vreg86,%vreg88
	%vreg90<def> = ADDI %zero, 20; GR32Bit:%vreg90
	%vreg91<def> = SRLI %vreg84, 22; GR32Bit:%vreg91,%vreg84
	%vreg92<def> = SRLI %vreg84, 12; GR32Bit:%vreg92,%vreg84
	%vreg93<def> = ANDI %vreg92, 15; GR32Bit:%vreg93,%vreg92
	%vreg94<def> = SRLI %vreg84, 6; GR32Bit:%vreg94,%vreg84
	%vreg95<def> = ANDI %vreg94, 63; GR32Bit:%vreg95,%vreg94
	%vreg96<def> = ADDI %zero, 832; GR32Bit:%vreg96
	%vreg97<def> = MUL %vreg91, %vreg96; GR32Bit:%vreg97,%vreg91,%vreg96
	%vreg98<def> = ADDI %zero, 52; GR32Bit:%vreg98
	%vreg99<def> = MUL %vreg93, %vreg98; GR32Bit:%vreg99,%vreg93,%vreg98
	%vreg100<def> = ADD %vreg99, %vreg95; GR32Bit:%vreg100,%vreg99,%vreg95
	%vreg101<def> = ADD %vreg100, %vreg97; GR32Bit:%vreg101,%vreg100,%vreg97
	%vreg102<def> = MUL %vreg101, %vreg90; GR32Bit:%vreg102,%vreg101,%vreg90
	%vreg103<def> = ADD %vreg102, %vreg89; GR32Bit:%vreg103,%vreg102,%vreg89
	%vreg104<def> = LW %t5, 0; GR32Bit:%vreg104
	SW %vreg104, %vreg103, 16; GR32Bit:%vreg104,%vreg103
	%vreg105<def> = LUI 1; GR32Bit:%vreg105
	WRITEPM %vreg105, %vreg84, 0; GR32Bit:%vreg105,%vreg84
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg27<def> = ADD %t5, %zero; GR32Bit:%vreg27
	%vreg29<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg29
	%vreg30<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg30
	%vreg31<def> = SRLI %vreg30, 12; GR32Bit:%vreg31,%vreg30
	%vreg32<def> = ADD %vreg29, %vreg31; GR32Bit:%vreg32,%vreg29,%vreg31
	%vreg33<def> = ADDI %zero, 20; GR32Bit:%vreg33
	%vreg34<def> = SRLI %t5, 22; GR32Bit:%vreg34
	%vreg35<def> = SRLI %t5, 12; GR32Bit:%vreg35
	%vreg36<def> = ANDI %vreg35, 15; GR32Bit:%vreg36,%vreg35
	%vreg37<def> = SRLI %t5, 6; GR32Bit:%vreg37
	%vreg38<def> = ANDI %vreg37, 63; GR32Bit:%vreg38,%vreg37
	%vreg39<def> = ADDI %zero, 832; GR32Bit:%vreg39
	%vreg40<def> = MUL %vreg34, %vreg39; GR32Bit:%vreg40,%vreg34,%vreg39
	%vreg41<def> = ADDI %zero, 52; GR32Bit:%vreg41
	%vreg42<def> = MUL %vreg36, %vreg41; GR32Bit:%vreg42,%vreg36,%vreg41
	%vreg43<def> = ADD %vreg42, %vreg38; GR32Bit:%vreg43,%vreg42,%vreg38
	%vreg44<def> = ADD %vreg43, %vreg40; GR32Bit:%vreg44,%vreg43,%vreg40
	%vreg45<def> = MUL %vreg44, %vreg33; GR32Bit:%vreg45,%vreg44,%vreg33
	%vreg28<def> = ADD %vreg32, %vreg45; GR32Bit:%vreg28,%vreg32,%vreg45
	%vreg106<def> = LUI 1; GR32Bit:%vreg106
	%vreg107<def> = DREADPM %vreg106, 0; GR32Bit:%vreg107,%vreg106
	%vreg108<def> = ADDI %zero, -1; GR32Bit:%vreg108
	SYNC %vreg107, %vreg108, 60; GR32Bit:%vreg107,%vreg108
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg46<def> = ADD %t5, %zero; GR32Bit:%vreg46
	%vreg48<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg48
	%vreg49<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg49
	%vreg50<def> = SRLI %vreg49, 12; GR32Bit:%vreg50,%vreg49
	%vreg51<def> = ADD %vreg48, %vreg50; GR32Bit:%vreg51,%vreg48,%vreg50
	%vreg52<def> = ADDI %zero, 20; GR32Bit:%vreg52
	%vreg53<def> = SRLI %t5, 22; GR32Bit:%vreg53
	%vreg54<def> = SRLI %t5, 12; GR32Bit:%vreg54
	%vreg55<def> = ANDI %vreg54, 15; GR32Bit:%vreg55,%vreg54
	%vreg56<def> = SRLI %t5, 6; GR32Bit:%vreg56
	%vreg57<def> = ANDI %vreg56, 63; GR32Bit:%vreg57,%vreg56
	%vreg58<def> = ADDI %zero, 832; GR32Bit:%vreg58
	%vreg59<def> = MUL %vreg53, %vreg58; GR32Bit:%vreg59,%vreg53,%vreg58
	%vreg60<def> = ADDI %zero, 52; GR32Bit:%vreg60
	%vreg61<def> = MUL %vreg55, %vreg60; GR32Bit:%vreg61,%vreg55,%vreg60
	%vreg62<def> = ADD %vreg61, %vreg57; GR32Bit:%vreg62,%vreg61,%vreg57
	%vreg63<def> = ADD %vreg62, %vreg59; GR32Bit:%vreg63,%vreg62,%vreg59
	%vreg64<def> = MUL %vreg63, %vreg52; GR32Bit:%vreg64,%vreg63,%vreg52
	%vreg47<def> = ADD %vreg51, %vreg64; GR32Bit:%vreg47,%vreg51,%vreg64
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg65<def> = ADD %t5, %zero; GR32Bit:%vreg65
	%vreg67<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg67
	%vreg68<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg68
	%vreg69<def> = SRLI %vreg68, 12; GR32Bit:%vreg69,%vreg68
	%vreg70<def> = ADD %vreg67, %vreg69; GR32Bit:%vreg70,%vreg67,%vreg69
	%vreg71<def> = ADDI %zero, 20; GR32Bit:%vreg71
	%vreg72<def> = SRLI %t5, 22; GR32Bit:%vreg72
	%vreg73<def> = SRLI %t5, 12; GR32Bit:%vreg73
	%vreg74<def> = ANDI %vreg73, 15; GR32Bit:%vreg74,%vreg73
	%vreg75<def> = SRLI %t5, 6; GR32Bit:%vreg75
	%vreg76<def> = ANDI %vreg75, 63; GR32Bit:%vreg76,%vreg75
	%vreg77<def> = ADDI %zero, 832; GR32Bit:%vreg77
	%vreg78<def> = MUL %vreg72, %vreg77; GR32Bit:%vreg78,%vreg72,%vreg77
	%vreg79<def> = ADDI %zero, 52; GR32Bit:%vreg79
	%vreg80<def> = MUL %vreg74, %vreg79; GR32Bit:%vreg80,%vreg74,%vreg79
	%vreg81<def> = ADD %vreg80, %vreg76; GR32Bit:%vreg81,%vreg80,%vreg76
	%vreg82<def> = ADD %vreg81, %vreg78; GR32Bit:%vreg82,%vreg81,%vreg78
	%vreg83<def> = MUL %vreg82, %vreg71; GR32Bit:%vreg83,%vreg82,%vreg71
	%vreg66<def> = ADD %vreg70, %vreg83; GR32Bit:%vreg66,%vreg70,%vreg83
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 316-884 ***

*** Renumbered SlotIndexes 304-904 ***

*** Renumbered SlotIndexes 216-952 ***

*** Renumbered SlotIndexes 204-972 ***

*** Renumbered SlotIndexes 204-988 ***

*** Renumbered SlotIndexes 204-1004 ***

*** Renumbered SlotIndexes 204-1020 ***

*** Renumbered SlotIndexes 112-1064 ***

*** Renumbered SlotIndexes 100-1084 ***

*** Renumbered SlotIndexes 100-1100 ***

*** Renumbered SlotIndexes 100-1116 ***

*** Renumbered SlotIndexes 100-1132 ***

*** Renumbered SlotIndexes 100-1148 ***

*** Renumbered SlotIndexes 100-1164 ***

*** Renumbered SlotIndexes 100-1180 ***

*** Renumbered SlotIndexes 100-1196 ***

*** Renumbered SlotIndexes 100-1212 ***

*** Renumbered SlotIndexes 100-1228 ***

*** Renumbered SlotIndexes 100-1244 ***

*** Renumbered SlotIndexes 100-1260 ***

*** Renumbered SlotIndexes 100-1276 ***

*** Renumbered SlotIndexes 100-1292 ***

*** Renumbered SlotIndexes 100-1308 ***

*** Renumbered SlotIndexes 100-1324 ***

*** Renumbered SlotIndexes 100-1340 ***

*** Renumbered SlotIndexes 100-1356 ***

*** Renumbered SlotIndexes 100-1372 ***

*** Renumbered SlotIndexes 12-1412 ***
Creating pHyperOp bundles for CEs for bb0
  %vreg27<def> = ADD %t5, %zero; GR32Bit:%vreg27
starting at   %vreg8<def> = ADD %t5, %zero; GR32Bit:%vreg8
  %vreg46<def> = ADD %t5, %zero; GR32Bit:%vreg46
starting at   %vreg27<def> = ADD %t5, %zero; GR32Bit:%vreg27
  %vreg65<def> = ADD %t5, %zero; GR32Bit:%vreg65
starting at   %vreg46<def> = ADD %t5, %zero; GR32Bit:%vreg46
starting at   %vreg65<def> = ADD %t5, %zero; GR32Bit:%vreg65
After bundling, state of BB0:BB#0: derived from LLVM BB %redefine_start1.return
	%vreg8<def> = ADD %t5, %zero; GR32Bit:%vreg8
	  * %vreg10<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg10
	  * %vreg11<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg11
	  * %vreg12<def> = SRLI %vreg11, 12; GR32Bit:%vreg12,%vreg11
	  * %vreg13<def> = ADD %vreg10, %vreg12; GR32Bit:%vreg13,%vreg10,%vreg12
	  * %vreg14<def> = ADDI %zero, 20; GR32Bit:%vreg14
	  * %vreg15<def> = SRLI %t5, 22; GR32Bit:%vreg15
	  * %vreg16<def> = SRLI %t5, 12; GR32Bit:%vreg16
	  * %vreg17<def> = ANDI %vreg16, 15; GR32Bit:%vreg17,%vreg16
	  * %vreg18<def> = SRLI %t5, 6; GR32Bit:%vreg18
	  * %vreg19<def> = ANDI %vreg18, 63; GR32Bit:%vreg19,%vreg18
	  * %vreg20<def> = ADDI %zero, 832; GR32Bit:%vreg20
	  * %vreg21<def> = MUL %vreg15, %vreg20; GR32Bit:%vreg21,%vreg15,%vreg20
	  * %vreg22<def> = ADDI %zero, 52; GR32Bit:%vreg22
	  * %vreg23<def> = MUL %vreg17, %vreg22; GR32Bit:%vreg23,%vreg17,%vreg22
	  * %vreg24<def> = ADD %vreg23, %vreg19; GR32Bit:%vreg24,%vreg23,%vreg19
	  * %vreg25<def> = ADD %vreg24, %vreg21; GR32Bit:%vreg25,%vreg24,%vreg21
	  * %vreg26<def> = MUL %vreg25, %vreg14; GR32Bit:%vreg26,%vreg25,%vreg14
	  * %vreg9<def> = ADD %vreg13, %vreg26; GR32Bit:%vreg9,%vreg13,%vreg26
	  * %vreg6<def> = ADDI %zero, <ga:@redefine_in_a>[TF=3]; GR32Bit:%vreg6
	  * %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
	  * %vreg5<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg5
	  * %vreg7<def> = ADD %vreg6, %vreg5; GR32Bit:%vreg7,%vreg6,%vreg5
	  * SW %vreg7, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg7,%vreg0
	  * %vreg4<def> = ADDI %zero, 1060320051; GR32Bit:%vreg4
	  * %vreg2<def> = ADDI %zero, <ga:@var>[TF=3]; GR32Bit:%vreg2
	  * %vreg1<def> = LUI <ga:@var>[TF=2]; GR32Bit:%vreg1
	  * %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
	  * SW %vreg4, %vreg3, 0; mem:ST4[%0] GR32Bit:%vreg4,%vreg3
	  * %vreg84<def> = ADDI %zero, 64; GR32Bit:%vreg84
	  * %vreg85<def> = ADDI %zero, 1; GR32Bit:%vreg85
	  * WRITECM %vreg84, %vreg85, 60; GR32Bit:%vreg84,%vreg85
	  * %vreg86<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg86
	  * %vreg87<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg87
	  * %vreg88<def> = SRLI %vreg87, 12; GR32Bit:%vreg88,%vreg87
	  * %vreg89<def> = ADD %vreg86, %vreg88; GR32Bit:%vreg89,%vreg86,%vreg88
	  * %vreg90<def> = ADDI %zero, 20; GR32Bit:%vreg90
	  * %vreg91<def> = SRLI %vreg84, 22; GR32Bit:%vreg91,%vreg84
	  * %vreg92<def> = SRLI %vreg84, 12; GR32Bit:%vreg92,%vreg84
	  * %vreg93<def> = ANDI %vreg92, 15; GR32Bit:%vreg93,%vreg92
	  * %vreg94<def> = SRLI %vreg84, 6; GR32Bit:%vreg94,%vreg84
	  * %vreg95<def> = ANDI %vreg94, 63; GR32Bit:%vreg95,%vreg94
	  * %vreg96<def> = ADDI %zero, 832; GR32Bit:%vreg96
	  * %vreg97<def> = MUL %vreg91, %vreg96; GR32Bit:%vreg97,%vreg91,%vreg96
	  * %vreg98<def> = ADDI %zero, 52; GR32Bit:%vreg98
	  * %vreg99<def> = MUL %vreg93, %vreg98; GR32Bit:%vreg99,%vreg93,%vreg98
	  * %vreg100<def> = ADD %vreg99, %vreg95; GR32Bit:%vreg100,%vreg99,%vreg95
	  * %vreg101<def> = ADD %vreg100, %vreg97; GR32Bit:%vreg101,%vreg100,%vreg97
	  * %vreg102<def> = MUL %vreg101, %vreg90; GR32Bit:%vreg102,%vreg101,%vreg90
	  * %vreg103<def> = ADD %vreg102, %vreg89; GR32Bit:%vreg103,%vreg102,%vreg89
	  * %vreg104<def> = LW %t5, 0; GR32Bit:%vreg104
	  * SW %vreg104, %vreg103, 16; GR32Bit:%vreg104,%vreg103
	  * %vreg105<def> = LUI 1; GR32Bit:%vreg105
	  * WRITEPM %vreg105, %vreg84, 0; GR32Bit:%vreg105,%vreg84
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg27<def> = ADD %t5, %zero; GR32Bit:%vreg27
	  * %vreg29<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg29
	  * %vreg30<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg30
	  * %vreg31<def> = SRLI %vreg30, 12; GR32Bit:%vreg31,%vreg30
	  * %vreg32<def> = ADD %vreg29, %vreg31; GR32Bit:%vreg32,%vreg29,%vreg31
	  * %vreg33<def> = ADDI %zero, 20; GR32Bit:%vreg33
	  * %vreg34<def> = SRLI %t5, 22; GR32Bit:%vreg34
	  * %vreg35<def> = SRLI %t5, 12; GR32Bit:%vreg35
	  * %vreg36<def> = ANDI %vreg35, 15; GR32Bit:%vreg36,%vreg35
	  * %vreg37<def> = SRLI %t5, 6; GR32Bit:%vreg37
	  * %vreg38<def> = ANDI %vreg37, 63; GR32Bit:%vreg38,%vreg37
	  * %vreg39<def> = ADDI %zero, 832; GR32Bit:%vreg39
	  * %vreg40<def> = MUL %vreg34, %vreg39; GR32Bit:%vreg40,%vreg34,%vreg39
	  * %vreg41<def> = ADDI %zero, 52; GR32Bit:%vreg41
	  * %vreg42<def> = MUL %vreg36, %vreg41; GR32Bit:%vreg42,%vreg36,%vreg41
	  * %vreg43<def> = ADD %vreg42, %vreg38; GR32Bit:%vreg43,%vreg42,%vreg38
	  * %vreg44<def> = ADD %vreg43, %vreg40; GR32Bit:%vreg44,%vreg43,%vreg40
	  * %vreg45<def> = MUL %vreg44, %vreg33; GR32Bit:%vreg45,%vreg44,%vreg33
	  * %vreg28<def> = ADD %vreg32, %vreg45; GR32Bit:%vreg28,%vreg32,%vreg45
	  * %vreg106<def> = LUI 1; GR32Bit:%vreg106
	  * %vreg107<def> = DREADPM %vreg106, 0; GR32Bit:%vreg107,%vreg106
	  * %vreg108<def> = ADDI %zero, -1; GR32Bit:%vreg108
	  * SYNC %vreg107, %vreg108, 60; GR32Bit:%vreg107,%vreg108
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg46<def> = ADD %t5, %zero; GR32Bit:%vreg46
	  * %vreg48<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg48
	  * %vreg49<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg49
	  * %vreg50<def> = SRLI %vreg49, 12; GR32Bit:%vreg50,%vreg49
	  * %vreg51<def> = ADD %vreg48, %vreg50; GR32Bit:%vreg51,%vreg48,%vreg50
	  * %vreg52<def> = ADDI %zero, 20; GR32Bit:%vreg52
	  * %vreg53<def> = SRLI %t5, 22; GR32Bit:%vreg53
	  * %vreg54<def> = SRLI %t5, 12; GR32Bit:%vreg54
	  * %vreg55<def> = ANDI %vreg54, 15; GR32Bit:%vreg55,%vreg54
	  * %vreg56<def> = SRLI %t5, 6; GR32Bit:%vreg56
	  * %vreg57<def> = ANDI %vreg56, 63; GR32Bit:%vreg57,%vreg56
	  * %vreg58<def> = ADDI %zero, 832; GR32Bit:%vreg58
	  * %vreg59<def> = MUL %vreg53, %vreg58; GR32Bit:%vreg59,%vreg53,%vreg58
	  * %vreg60<def> = ADDI %zero, 52; GR32Bit:%vreg60
	  * %vreg61<def> = MUL %vreg55, %vreg60; GR32Bit:%vreg61,%vreg55,%vreg60
	  * %vreg62<def> = ADD %vreg61, %vreg57; GR32Bit:%vreg62,%vreg61,%vreg57
	  * %vreg63<def> = ADD %vreg62, %vreg59; GR32Bit:%vreg63,%vreg62,%vreg59
	  * %vreg64<def> = MUL %vreg63, %vreg52; GR32Bit:%vreg64,%vreg63,%vreg52
	  * %vreg47<def> = ADD %vreg51, %vreg64; GR32Bit:%vreg47,%vreg51,%vreg64
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg65<def> = ADD %t5, %zero; GR32Bit:%vreg65
	  * %vreg67<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg67
	  * %vreg68<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg68
	  * %vreg69<def> = SRLI %vreg68, 12; GR32Bit:%vreg69,%vreg68
	  * %vreg70<def> = ADD %vreg67, %vreg69; GR32Bit:%vreg70,%vreg67,%vreg69
	  * %vreg71<def> = ADDI %zero, 20; GR32Bit:%vreg71
	  * %vreg72<def> = SRLI %t5, 22; GR32Bit:%vreg72
	  * %vreg73<def> = SRLI %t5, 12; GR32Bit:%vreg73
	  * %vreg74<def> = ANDI %vreg73, 15; GR32Bit:%vreg74,%vreg73
	  * %vreg75<def> = SRLI %t5, 6; GR32Bit:%vreg75
	  * %vreg76<def> = ANDI %vreg75, 63; GR32Bit:%vreg76,%vreg75
	  * %vreg77<def> = ADDI %zero, 832; GR32Bit:%vreg77
	  * %vreg78<def> = MUL %vreg72, %vreg77; GR32Bit:%vreg78,%vreg72,%vreg77
	  * %vreg79<def> = ADDI %zero, 52; GR32Bit:%vreg79
	  * %vreg80<def> = MUL %vreg74, %vreg79; GR32Bit:%vreg80,%vreg74,%vreg79
	  * %vreg81<def> = ADD %vreg80, %vreg76; GR32Bit:%vreg81,%vreg80,%vreg76
	  * %vreg82<def> = ADD %vreg81, %vreg78; GR32Bit:%vreg82,%vreg81,%vreg78
	  * %vreg83<def> = MUL %vreg82, %vreg71; GR32Bit:%vreg83,%vreg82,%vreg71
	  * %vreg66<def> = ADD %vreg70, %vreg83; GR32Bit:%vreg66,%vreg70,%vreg83
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
Patching the instructions that are supposed to use the physical registers r30 and r31
Computing live-in reg-units in ABI blocks.
Created 0 new intervals.

*** Renumbered SlotIndexes 8-1432 ***

*** Renumbered SlotIndexes 172-1444 ***

*** Renumbered SlotIndexes 232-1456 ***
********** INTERVALS **********
zero = EMPTY
%vreg0 = [188r,212r:0)  0@188r
%vreg1 = [248r,256r:0)  0@248r
%vreg2 = [228r,256r:0)  0@228r
%vreg3 = [256r,264r:0)  0@256r
%vreg4 = [220r,264r:0)  0@220r
%vreg5 = [196r,204r:0)  0@196r
%vreg6 = [168r,204r:0)  0@168r
%vreg7 = [204r,212r:0)  0@204r
%vreg8 = [4r,4d:0)  0@4r
%vreg9 = [160r,160d:0)  0@160r
%vreg10 = [24r,48r:0)  0@24r
%vreg11 = [32r,40r:0)  0@32r
%vreg12 = [40r,48r:0)  0@40r
%vreg13 = [48r,160r:0)  0@48r
%vreg14 = [56r,152r:0)  0@56r
%vreg15 = [64r,112r:0)  0@64r
%vreg16 = [72r,80r:0)  0@72r
%vreg17 = [80r,128r:0)  0@80r
%vreg18 = [88r,96r:0)  0@88r
%vreg19 = [96r,136r:0)  0@96r
%vreg20 = [104r,112r:0)  0@104r
%vreg21 = [112r,144r:0)  0@112r
%vreg22 = [120r,128r:0)  0@120r
%vreg23 = [128r,136r:0)  0@128r
%vreg24 = [136r,144r:0)  0@136r
%vreg25 = [144r,152r:0)  0@144r
%vreg26 = [152r,160r:0)  0@152r
%vreg27 = [496r,496d:0)  0@496r
%vreg28 = [640r,640d:0)  0@640r
%vreg29 = [504r,528r:0)  0@504r
%vreg30 = [512r,520r:0)  0@512r
%vreg31 = [520r,528r:0)  0@520r
%vreg32 = [528r,640r:0)  0@528r
%vreg33 = [536r,632r:0)  0@536r
%vreg34 = [544r,592r:0)  0@544r
%vreg35 = [552r,560r:0)  0@552r
%vreg36 = [560r,608r:0)  0@560r
%vreg37 = [568r,576r:0)  0@568r
%vreg38 = [576r,616r:0)  0@576r
%vreg39 = [584r,592r:0)  0@584r
%vreg40 = [592r,624r:0)  0@592r
%vreg41 = [600r,608r:0)  0@600r
%vreg42 = [608r,616r:0)  0@608r
%vreg43 = [616r,624r:0)  0@616r
%vreg44 = [624r,632r:0)  0@624r
%vreg45 = [632r,640r:0)  0@632r
%vreg46 = [704r,704d:0)  0@704r
%vreg47 = [848r,848d:0)  0@848r
%vreg48 = [712r,736r:0)  0@712r
%vreg49 = [720r,728r:0)  0@720r
%vreg50 = [728r,736r:0)  0@728r
%vreg51 = [736r,848r:0)  0@736r
%vreg52 = [744r,840r:0)  0@744r
%vreg53 = [752r,800r:0)  0@752r
%vreg54 = [760r,768r:0)  0@760r
%vreg55 = [768r,816r:0)  0@768r
%vreg56 = [776r,784r:0)  0@776r
%vreg57 = [784r,824r:0)  0@784r
%vreg58 = [792r,800r:0)  0@792r
%vreg59 = [800r,832r:0)  0@800r
%vreg60 = [808r,816r:0)  0@808r
%vreg61 = [816r,824r:0)  0@816r
%vreg62 = [824r,832r:0)  0@824r
%vreg63 = [832r,840r:0)  0@832r
%vreg64 = [840r,848r:0)  0@840r
%vreg65 = [880r,880d:0)  0@880r
%vreg66 = [1024r,1024d:0)  0@1024r
%vreg67 = [888r,912r:0)  0@888r
%vreg68 = [896r,904r:0)  0@896r
%vreg69 = [904r,912r:0)  0@904r
%vreg70 = [912r,1024r:0)  0@912r
%vreg71 = [920r,1016r:0)  0@920r
%vreg72 = [928r,976r:0)  0@928r
%vreg73 = [936r,944r:0)  0@936r
%vreg74 = [944r,992r:0)  0@944r
%vreg75 = [952r,960r:0)  0@952r
%vreg76 = [960r,1000r:0)  0@960r
%vreg77 = [968r,976r:0)  0@968r
%vreg78 = [976r,1008r:0)  0@976r
%vreg79 = [984r,992r:0)  0@984r
%vreg80 = [992r,1000r:0)  0@992r
%vreg81 = [1000r,1008r:0)  0@1000r
%vreg82 = [1008r,1016r:0)  0@1008r
%vreg83 = [1016r,1024r:0)  0@1016r
%vreg84 = [272r,464r:0)  0@272r
%vreg85 = [280r,288r:0)  0@280r
%vreg86 = [296r,320r:0)  0@296r
%vreg87 = [304r,312r:0)  0@304r
%vreg88 = [312r,320r:0)  0@312r
%vreg89 = [320r,432r:0)  0@320r
%vreg90 = [328r,424r:0)  0@328r
%vreg91 = [336r,384r:0)  0@336r
%vreg92 = [344r,352r:0)  0@344r
%vreg93 = [352r,400r:0)  0@352r
%vreg94 = [360r,368r:0)  0@360r
%vreg95 = [368r,408r:0)  0@368r
%vreg96 = [376r,384r:0)  0@376r
%vreg97 = [384r,416r:0)  0@384r
%vreg98 = [392r,400r:0)  0@392r
%vreg99 = [400r,408r:0)  0@400r
%vreg100 = [408r,416r:0)  0@408r
%vreg101 = [416r,424r:0)  0@416r
%vreg102 = [424r,432r:0)  0@424r
%vreg103 = [432r,448r:0)  0@432r
%vreg104 = [440r,448r:0)  0@440r
%vreg105 = [456r,464r:0)  0@456r
%vreg106 = [648r,656r:0)  0@648r
%vreg107 = [656r,1456B:0)  0@656r
%vreg108 = [664r,672r:0)  0@664r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start1.return
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg10<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg10
4B		  * %vreg11<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg11
4B		  * %vreg12<def> = SRLI %vreg11, 12; GR32Bit:%vreg12,%vreg11
4B		  * %vreg13<def> = ADD %vreg10, %vreg12; GR32Bit:%vreg13,%vreg10,%vreg12
4B		  * %vreg14<def> = ADDI %zero, 20; GR32Bit:%vreg14
4B		  * %vreg15<def> = SRLI %t5, 22; GR32Bit:%vreg15
4B		  * %vreg16<def> = SRLI %t5, 12; GR32Bit:%vreg16
4B		  * %vreg17<def> = ANDI %vreg16, 15; GR32Bit:%vreg17,%vreg16
4B		  * %vreg18<def> = SRLI %t5, 6; GR32Bit:%vreg18
4B		  * %vreg19<def> = ANDI %vreg18, 63; GR32Bit:%vreg19,%vreg18
4B		  * %vreg20<def> = ADDI %zero, 832; GR32Bit:%vreg20
4B		  * %vreg21<def> = MUL %vreg15, %vreg20; GR32Bit:%vreg21,%vreg15,%vreg20
4B		  * %vreg22<def> = ADDI %zero, 52; GR32Bit:%vreg22
4B		  * %vreg23<def> = MUL %vreg17, %vreg22; GR32Bit:%vreg23,%vreg17,%vreg22
4B		  * %vreg24<def> = ADD %vreg23, %vreg19; GR32Bit:%vreg24,%vreg23,%vreg19
4B		  * %vreg25<def> = ADD %vreg24, %vreg21; GR32Bit:%vreg25,%vreg24,%vreg21
4B		  * %vreg26<def> = MUL %vreg25, %vreg14; GR32Bit:%vreg26,%vreg25,%vreg14
4B		  * %t5<def> = ADD %vreg13, %vreg26; GR32Bit:%vreg13,%vreg26
4B		  * %vreg6<def> = LUI <MCSym="%lo("ga#256")">; GR32Bit:%vreg6
4B		  * SRLI %vreg6, %vreg6, 12; GR32Bit:%vreg6
4B		  * %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
4B		  * %vreg5<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg5
4B		  * %vreg7<def> = ADD %vreg6, %vreg5; GR32Bit:%vreg7,%vreg6,%vreg5
4B		  * SW %vreg7, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg7,%vreg0
4B		  * %vreg4<def> = LUI 258867; GR32Bit:%vreg4
4B		  * %a5<def> = LUI 819
4B		  * %a5<def> = SRLI %a5<internal>, 12
4B		  * ADD %vreg4, %vreg4, %a5; GR32Bit:%vreg4
4B		  * %vreg2<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg2
4B		  * SRLI %vreg2, %vreg2, 12; GR32Bit:%vreg2
4B		  * %vreg1<def> = LUI <ga:@var>[TF=2]; GR32Bit:%vreg1
4B		  * %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
4B		  * SW %vreg4, %vreg3, 0; mem:ST4[%0] GR32Bit:%vreg4,%vreg3
4B		  * %vreg84<def> = ADDI %zero, 64; GR32Bit:%vreg84
4B		  * %vreg85<def> = ADDI %zero, 1; GR32Bit:%vreg85
4B		  * WRITECM %vreg84, %vreg85, 60; GR32Bit:%vreg84,%vreg85
4B		  * %vreg86<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg86
4B		  * %vreg87<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg87
4B		  * %vreg88<def> = SRLI %vreg87, 12; GR32Bit:%vreg88,%vreg87
4B		  * %vreg89<def> = ADD %vreg86, %vreg88; GR32Bit:%vreg89,%vreg86,%vreg88
4B		  * %vreg90<def> = ADDI %zero, 20; GR32Bit:%vreg90
4B		  * %vreg91<def> = SRLI %vreg84, 22; GR32Bit:%vreg91,%vreg84
4B		  * %vreg92<def> = SRLI %vreg84, 12; GR32Bit:%vreg92,%vreg84
4B		  * %vreg93<def> = ANDI %vreg92, 15; GR32Bit:%vreg93,%vreg92
4B		  * %vreg94<def> = SRLI %vreg84, 6; GR32Bit:%vreg94,%vreg84
4B		  * %vreg95<def> = ANDI %vreg94, 63; GR32Bit:%vreg95,%vreg94
4B		  * %vreg96<def> = ADDI %zero, 832; GR32Bit:%vreg96
4B		  * %vreg97<def> = MUL %vreg91, %vreg96; GR32Bit:%vreg97,%vreg91,%vreg96
4B		  * %vreg98<def> = ADDI %zero, 52; GR32Bit:%vreg98
4B		  * %vreg99<def> = MUL %vreg93, %vreg98; GR32Bit:%vreg99,%vreg93,%vreg98
4B		  * %vreg100<def> = ADD %vreg99, %vreg95; GR32Bit:%vreg100,%vreg99,%vreg95
4B		  * %vreg101<def> = ADD %vreg100, %vreg97; GR32Bit:%vreg101,%vreg100,%vreg97
4B		  * %vreg102<def> = MUL %vreg101, %vreg90; GR32Bit:%vreg102,%vreg101,%vreg90
4B		  * %vreg103<def> = ADD %vreg102, %vreg89; GR32Bit:%vreg103,%vreg102,%vreg89
4B		  * %vreg104<def> = LW %t5, 0; GR32Bit:%vreg104
4B		  * SW %vreg104, %vreg103, 16; GR32Bit:%vreg104,%vreg103
4B		  * %vreg105<def> = LUI 1; GR32Bit:%vreg105
4B		  * WRITEPM %vreg105, %vreg84, 0; GR32Bit:%vreg105,%vreg84
4B		  * END 0
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
496B		%t4<def> = ADD %t5, %zero
496B		  * %vreg29<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg29
496B		  * %vreg30<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg30
496B		  * %vreg31<def> = SRLI %vreg30, 12; GR32Bit:%vreg31,%vreg30
496B		  * %vreg32<def> = ADD %vreg29, %vreg31; GR32Bit:%vreg32,%vreg29,%vreg31
496B		  * %vreg33<def> = ADDI %zero, 20; GR32Bit:%vreg33
496B		  * %vreg34<def> = SRLI %t5, 22; GR32Bit:%vreg34
496B		  * %vreg35<def> = SRLI %t5, 12; GR32Bit:%vreg35
496B		  * %vreg36<def> = ANDI %vreg35, 15; GR32Bit:%vreg36,%vreg35
496B		  * %vreg37<def> = SRLI %t5, 6; GR32Bit:%vreg37
496B		  * %vreg38<def> = ANDI %vreg37, 63; GR32Bit:%vreg38,%vreg37
496B		  * %vreg39<def> = ADDI %zero, 832; GR32Bit:%vreg39
496B		  * %vreg40<def> = MUL %vreg34, %vreg39; GR32Bit:%vreg40,%vreg34,%vreg39
496B		  * %vreg41<def> = ADDI %zero, 52; GR32Bit:%vreg41
496B		  * %vreg42<def> = MUL %vreg36, %vreg41; GR32Bit:%vreg42,%vreg36,%vreg41
496B		  * %vreg43<def> = ADD %vreg42, %vreg38; GR32Bit:%vreg43,%vreg42,%vreg38
496B		  * %vreg44<def> = ADD %vreg43, %vreg40; GR32Bit:%vreg44,%vreg43,%vreg40
496B		  * %vreg45<def> = MUL %vreg44, %vreg33; GR32Bit:%vreg45,%vreg44,%vreg33
496B		  * %t5<def> = ADD %vreg32, %vreg45; GR32Bit:%vreg32,%vreg45
496B		  * %vreg106<def> = LUI 1; GR32Bit:%vreg106
496B		  * %vreg107<def> = DREADPM %vreg106, 0; GR32Bit:%vreg107,%vreg106
496B		  * %vreg108<def> = LUI 1048575; GR32Bit:%vreg108
496B		  * %a5<def> = LUI 4095
496B		  * %a5<def> = SRLI %a5<internal>, 12
496B		  * ADD %vreg108, %vreg108, %a5; GR32Bit:%vreg108
496B		  * SYNC %vreg107, %vreg108, 60; GR32Bit:%vreg107,%vreg108
496B		  * END 0
496B		  * %zero<def> = ADDI %zero, 0
496B		  * %zero<def> = ADDI %zero, 0
704B		%t4<def> = ADD %t5, %zero
704B		  * %vreg48<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg48
704B		  * %vreg49<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg49
704B		  * %vreg50<def> = SRLI %vreg49, 12; GR32Bit:%vreg50,%vreg49
704B		  * %vreg51<def> = ADD %vreg48, %vreg50; GR32Bit:%vreg51,%vreg48,%vreg50
704B		  * %vreg52<def> = ADDI %zero, 20; GR32Bit:%vreg52
704B		  * %vreg53<def> = SRLI %t5, 22; GR32Bit:%vreg53
704B		  * %vreg54<def> = SRLI %t5, 12; GR32Bit:%vreg54
704B		  * %vreg55<def> = ANDI %vreg54, 15; GR32Bit:%vreg55,%vreg54
704B		  * %vreg56<def> = SRLI %t5, 6; GR32Bit:%vreg56
704B		  * %vreg57<def> = ANDI %vreg56, 63; GR32Bit:%vreg57,%vreg56
704B		  * %vreg58<def> = ADDI %zero, 832; GR32Bit:%vreg58
704B		  * %vreg59<def> = MUL %vreg53, %vreg58; GR32Bit:%vreg59,%vreg53,%vreg58
704B		  * %vreg60<def> = ADDI %zero, 52; GR32Bit:%vreg60
704B		  * %vreg61<def> = MUL %vreg55, %vreg60; GR32Bit:%vreg61,%vreg55,%vreg60
704B		  * %vreg62<def> = ADD %vreg61, %vreg57; GR32Bit:%vreg62,%vreg61,%vreg57
704B		  * %vreg63<def> = ADD %vreg62, %vreg59; GR32Bit:%vreg63,%vreg62,%vreg59
704B		  * %vreg64<def> = MUL %vreg63, %vreg52; GR32Bit:%vreg64,%vreg63,%vreg52
704B		  * %t5<def> = ADD %vreg51, %vreg64; GR32Bit:%vreg51,%vreg64
704B		  * END 0
704B		  * %zero<def> = ADDI %zero, 0
704B		  * %zero<def> = ADDI %zero, 0
880B		%t4<def> = ADD %t5, %zero
880B		  * %vreg67<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg67
880B		  * %vreg68<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg68
880B		  * %vreg69<def> = SRLI %vreg68, 12; GR32Bit:%vreg69,%vreg68
880B		  * %vreg70<def> = ADD %vreg67, %vreg69; GR32Bit:%vreg70,%vreg67,%vreg69
880B		  * %vreg71<def> = ADDI %zero, 20; GR32Bit:%vreg71
880B		  * %vreg72<def> = SRLI %t5, 22; GR32Bit:%vreg72
880B		  * %vreg73<def> = SRLI %t5, 12; GR32Bit:%vreg73
880B		  * %vreg74<def> = ANDI %vreg73, 15; GR32Bit:%vreg74,%vreg73
880B		  * %vreg75<def> = SRLI %t5, 6; GR32Bit:%vreg75
880B		  * %vreg76<def> = ANDI %vreg75, 63; GR32Bit:%vreg76,%vreg75
880B		  * %vreg77<def> = ADDI %zero, 832; GR32Bit:%vreg77
880B		  * %vreg78<def> = MUL %vreg72, %vreg77; GR32Bit:%vreg78,%vreg72,%vreg77
880B		  * %vreg79<def> = ADDI %zero, 52; GR32Bit:%vreg79
880B		  * %vreg80<def> = MUL %vreg74, %vreg79; GR32Bit:%vreg80,%vreg74,%vreg79
880B		  * %vreg81<def> = ADD %vreg80, %vreg76; GR32Bit:%vreg81,%vreg80,%vreg76
880B		  * %vreg82<def> = ADD %vreg81, %vreg78; GR32Bit:%vreg82,%vreg81,%vreg78
880B		  * %vreg83<def> = MUL %vreg82, %vreg71; GR32Bit:%vreg83,%vreg82,%vreg71
880B		  * %t5<def> = ADD %vreg70, %vreg83; GR32Bit:%vreg70,%vreg83
880B		  * END 0
880B		  * %zero<def> = ADDI %zero, 0
880B		  * %zero<def> = ADDI %zero, 0

# End machine code for function redefine_start1.

********** COMPUTING LIVE DEBUG VARIABLES: redefine_start1 **********
********** DEBUG VARIABLES **********
********** Compute Spill Weights **********
********** Function: redefine_start1
********** GREEDY REGISTER ALLOCATION **********
********** Function: redefine_start1

selectOrSplit GR32Bit:%vreg107 [656r,1456B:0)  0@656r
AllocationOrder(GR32Bit) = [ %t0 %t1 %t2 %fp %a0 %a1 %a2 %a3 %a4 %a6 %a7 %t3 %ra %sp %gp %tp %s0 %s1 %s2 %s3 %s4 %s5 %s6 %s7 %s8 %s9 %s10 %s11 ]
assigning %vreg107 to %t0: t0

selectOrSplit GR32Bit:%vreg84 [272r,464r:0)  0@272r
assigning %vreg84 to %t0: t0

selectOrSplit GR32Bit:%vreg13 [48r,160r:0)  0@48r
assigning %vreg13 to %t0: t0

selectOrSplit GR32Bit:%vreg32 [528r,640r:0)  0@528r
assigning %vreg32 to %t0: t0

selectOrSplit GR32Bit:%vreg51 [736r,848r:0)  0@736r
assigning %vreg51 to %t1: t1

selectOrSplit GR32Bit:%vreg70 [912r,1024r:0)  0@912r
assigning %vreg70 to %t1: t1

selectOrSplit GR32Bit:%vreg89 [320r,432r:0)  0@320r
assigning %vreg89 to %t1: t1

selectOrSplit GR32Bit:%vreg14 [56r,152r:0)  0@56r
assigning %vreg14 to %t1: t1

selectOrSplit GR32Bit:%vreg33 [536r,632r:0)  0@536r
assigning %vreg33 to %t1: t1

selectOrSplit GR32Bit:%vreg52 [744r,840r:0)  0@744r
assigning %vreg52 to %t2: t2

selectOrSplit GR32Bit:%vreg71 [920r,1016r:0)  0@920r
assigning %vreg71 to %t2: t2

selectOrSplit GR32Bit:%vreg90 [328r,424r:0)  0@328r
assigning %vreg90 to %t2: t2

selectOrSplit GR32Bit:%vreg15 [64r,112r:0)  0@64r
assigning %vreg15 to %t2: t2

selectOrSplit GR32Bit:%vreg17 [80r,128r:0)  0@80r
assigning %vreg17 to %fp: fp

selectOrSplit GR32Bit:%vreg34 [544r,592r:0)  0@544r
assigning %vreg34 to %t2: t2

selectOrSplit GR32Bit:%vreg36 [560r,608r:0)  0@560r
assigning %vreg36 to %fp: fp

selectOrSplit GR32Bit:%vreg53 [752r,800r:0)  0@752r
assigning %vreg53 to %fp: fp

selectOrSplit GR32Bit:%vreg55 [768r,816r:0)  0@768r
assigning %vreg55 to %a0: a0

selectOrSplit GR32Bit:%vreg72 [928r,976r:0)  0@928r
assigning %vreg72 to %fp: fp

selectOrSplit GR32Bit:%vreg74 [944r,992r:0)  0@944r
assigning %vreg74 to %a0: a0

selectOrSplit GR32Bit:%vreg91 [336r,384r:0)  0@336r
assigning %vreg91 to %fp: fp

selectOrSplit GR32Bit:%vreg93 [352r,400r:0)  0@352r
assigning %vreg93 to %a0: a0

selectOrSplit GR32Bit:%vreg4 [220r,264r:0)  0@220r
assigning %vreg4 to %t0: t0

selectOrSplit GR32Bit:%vreg19 [96r,136r:0)  0@96r
assigning %vreg19 to %a0: a0

selectOrSplit GR32Bit:%vreg38 [576r,616r:0)  0@576r
assigning %vreg38 to %a0: a0

selectOrSplit GR32Bit:%vreg57 [784r,824r:0)  0@784r
assigning %vreg57 to %a1: a1

selectOrSplit GR32Bit:%vreg76 [960r,1000r:0)  0@960r
assigning %vreg76 to %a1: a1

selectOrSplit GR32Bit:%vreg95 [368r,408r:0)  0@368r
assigning %vreg95 to %a1: a1

selectOrSplit GR32Bit:%vreg6 [168r,204r:0)  0@168r
assigning %vreg6 to %t0: t0

selectOrSplit GR32Bit:%vreg21 [112r,144r:0)  0@112r
assigning %vreg21 to %t2: t2

selectOrSplit GR32Bit:%vreg40 [592r,624r:0)  0@592r
assigning %vreg40 to %t2: t2

selectOrSplit GR32Bit:%vreg59 [800r,832r:0)  0@800r
assigning %vreg59 to %fp: fp

selectOrSplit GR32Bit:%vreg78 [976r,1008r:0)  0@976r
assigning %vreg78 to %fp: fp

selectOrSplit GR32Bit:%vreg97 [384r,416r:0)  0@384r
assigning %vreg97 to %fp: fp

selectOrSplit GR32Bit:%vreg2 [228r,256r:0)  0@228r
assigning %vreg2 to %t1: t1

selectOrSplit GR32Bit:%vreg0 [188r,212r:0)  0@188r
assigning %vreg0 to %t1: t1

selectOrSplit GR32Bit:%vreg10 [24r,48r:0)  0@24r
assigning %vreg10 to %t0: t0

selectOrSplit GR32Bit:%vreg29 [504r,528r:0)  0@504r
assigning %vreg29 to %t0: t0

selectOrSplit GR32Bit:%vreg48 [712r,736r:0)  0@712r
assigning %vreg48 to %t1: t1

selectOrSplit GR32Bit:%vreg67 [888r,912r:0)  0@888r
assigning %vreg67 to %t1: t1

selectOrSplit GR32Bit:%vreg86 [296r,320r:0)  0@296r
assigning %vreg86 to %t1: t1

selectOrSplit GR32Bit:%vreg103 [432r,448r:0)  0@432r
assigning %vreg103 to %t1: t1

selectOrSplit GR32Bit:%vreg1 [248r,256r:0)  0@248r
assigning %vreg1 to %t2: t2

selectOrSplit GR32Bit:%vreg3 [256r,264r:0)  0@256r
assigning %vreg3 to %t1: t1

selectOrSplit GR32Bit:%vreg5 [196r,204r:0)  0@196r
assigning %vreg5 to %t2: t2

selectOrSplit GR32Bit:%vreg7 [204r,212r:0)  0@204r
assigning %vreg7 to %t0: t0

selectOrSplit GR32Bit:%vreg11 [32r,40r:0)  0@32r
assigning %vreg11 to %t1: t1

selectOrSplit GR32Bit:%vreg12 [40r,48r:0)  0@40r
assigning %vreg12 to %t1: t1

selectOrSplit GR32Bit:%vreg16 [72r,80r:0)  0@72r
assigning %vreg16 to %fp: fp

selectOrSplit GR32Bit:%vreg18 [88r,96r:0)  0@88r
assigning %vreg18 to %a0: a0

selectOrSplit GR32Bit:%vreg20 [104r,112r:0)  0@104r
assigning %vreg20 to %a1: a1

selectOrSplit GR32Bit:%vreg22 [120r,128r:0)  0@120r
assigning %vreg22 to %a1: a1

selectOrSplit GR32Bit:%vreg23 [128r,136r:0)  0@128r
assigning %vreg23 to %fp: fp

selectOrSplit GR32Bit:%vreg24 [136r,144r:0)  0@136r
assigning %vreg24 to %fp: fp

selectOrSplit GR32Bit:%vreg25 [144r,152r:0)  0@144r
assigning %vreg25 to %t2: t2

selectOrSplit GR32Bit:%vreg26 [152r,160r:0)  0@152r
assigning %vreg26 to %t1: t1

selectOrSplit GR32Bit:%vreg30 [512r,520r:0)  0@512r
assigning %vreg30 to %t1: t1

selectOrSplit GR32Bit:%vreg31 [520r,528r:0)  0@520r
assigning %vreg31 to %t1: t1

selectOrSplit GR32Bit:%vreg35 [552r,560r:0)  0@552r
assigning %vreg35 to %fp: fp

selectOrSplit GR32Bit:%vreg37 [568r,576r:0)  0@568r
assigning %vreg37 to %a0: a0

selectOrSplit GR32Bit:%vreg39 [584r,592r:0)  0@584r
assigning %vreg39 to %a1: a1

selectOrSplit GR32Bit:%vreg41 [600r,608r:0)  0@600r
assigning %vreg41 to %a1: a1

selectOrSplit GR32Bit:%vreg42 [608r,616r:0)  0@608r
assigning %vreg42 to %fp: fp

selectOrSplit GR32Bit:%vreg43 [616r,624r:0)  0@616r
assigning %vreg43 to %fp: fp

selectOrSplit GR32Bit:%vreg44 [624r,632r:0)  0@624r
assigning %vreg44 to %t2: t2

selectOrSplit GR32Bit:%vreg45 [632r,640r:0)  0@632r
assigning %vreg45 to %t1: t1

selectOrSplit GR32Bit:%vreg49 [720r,728r:0)  0@720r
assigning %vreg49 to %t2: t2

selectOrSplit GR32Bit:%vreg50 [728r,736r:0)  0@728r
assigning %vreg50 to %t2: t2

selectOrSplit GR32Bit:%vreg54 [760r,768r:0)  0@760r
assigning %vreg54 to %a0: a0

selectOrSplit GR32Bit:%vreg56 [776r,784r:0)  0@776r
assigning %vreg56 to %a1: a1

selectOrSplit GR32Bit:%vreg58 [792r,800r:0)  0@792r
assigning %vreg58 to %a2: a2

selectOrSplit GR32Bit:%vreg60 [808r,816r:0)  0@808r
assigning %vreg60 to %a2: a2

selectOrSplit GR32Bit:%vreg61 [816r,824r:0)  0@816r
assigning %vreg61 to %a0: a0

selectOrSplit GR32Bit:%vreg62 [824r,832r:0)  0@824r
assigning %vreg62 to %a0: a0

selectOrSplit GR32Bit:%vreg63 [832r,840r:0)  0@832r
assigning %vreg63 to %fp: fp

selectOrSplit GR32Bit:%vreg64 [840r,848r:0)  0@840r
assigning %vreg64 to %t2: t2

selectOrSplit GR32Bit:%vreg68 [896r,904r:0)  0@896r
assigning %vreg68 to %t2: t2

selectOrSplit GR32Bit:%vreg69 [904r,912r:0)  0@904r
assigning %vreg69 to %t2: t2

selectOrSplit GR32Bit:%vreg73 [936r,944r:0)  0@936r
assigning %vreg73 to %a0: a0

selectOrSplit GR32Bit:%vreg75 [952r,960r:0)  0@952r
assigning %vreg75 to %a1: a1

selectOrSplit GR32Bit:%vreg77 [968r,976r:0)  0@968r
assigning %vreg77 to %a2: a2

selectOrSplit GR32Bit:%vreg79 [984r,992r:0)  0@984r
assigning %vreg79 to %a2: a2

selectOrSplit GR32Bit:%vreg80 [992r,1000r:0)  0@992r
assigning %vreg80 to %a0: a0

selectOrSplit GR32Bit:%vreg81 [1000r,1008r:0)  0@1000r
assigning %vreg81 to %a0: a0

selectOrSplit GR32Bit:%vreg82 [1008r,1016r:0)  0@1008r
assigning %vreg82 to %fp: fp

selectOrSplit GR32Bit:%vreg83 [1016r,1024r:0)  0@1016r
assigning %vreg83 to %t2: t2

selectOrSplit GR32Bit:%vreg85 [280r,288r:0)  0@280r
assigning %vreg85 to %t1: t1

selectOrSplit GR32Bit:%vreg87 [304r,312r:0)  0@304r
assigning %vreg87 to %t2: t2

selectOrSplit GR32Bit:%vreg88 [312r,320r:0)  0@312r
assigning %vreg88 to %t2: t2

selectOrSplit GR32Bit:%vreg92 [344r,352r:0)  0@344r
assigning %vreg92 to %a0: a0

selectOrSplit GR32Bit:%vreg94 [360r,368r:0)  0@360r
assigning %vreg94 to %a1: a1

selectOrSplit GR32Bit:%vreg96 [376r,384r:0)  0@376r
assigning %vreg96 to %a2: a2

selectOrSplit GR32Bit:%vreg98 [392r,400r:0)  0@392r
assigning %vreg98 to %a2: a2

selectOrSplit GR32Bit:%vreg99 [400r,408r:0)  0@400r
assigning %vreg99 to %a0: a0

selectOrSplit GR32Bit:%vreg100 [408r,416r:0)  0@408r
assigning %vreg100 to %a0: a0

selectOrSplit GR32Bit:%vreg101 [416r,424r:0)  0@416r
assigning %vreg101 to %fp: fp

selectOrSplit GR32Bit:%vreg102 [424r,432r:0)  0@424r
assigning %vreg102 to %t2: t2

selectOrSplit GR32Bit:%vreg104 [440r,448r:0)  0@440r
assigning %vreg104 to %t2: t2

selectOrSplit GR32Bit:%vreg105 [456r,464r:0)  0@456r
assigning %vreg105 to %t1: t1

selectOrSplit GR32Bit:%vreg106 [648r,656r:0)  0@648r
assigning %vreg106 to %t0: t0

selectOrSplit GR32Bit:%vreg108 [664r,672r:0)  0@664r
assigning %vreg108 to %t1: t1
********** REWRITE VIRTUAL REGISTERS **********
********** Function: redefine_start1
********** REGISTER MAP **********
[%vreg0 -> %t1] GR32Bit
[%vreg1 -> %t2] GR32Bit
[%vreg2 -> %t1] GR32Bit
[%vreg3 -> %t1] GR32Bit
[%vreg4 -> %t0] GR32Bit
[%vreg5 -> %t2] GR32Bit
[%vreg6 -> %t0] GR32Bit
[%vreg7 -> %t0] GR32Bit
[%vreg10 -> %t0] GR32Bit
[%vreg11 -> %t1] GR32Bit
[%vreg12 -> %t1] GR32Bit
[%vreg13 -> %t0] GR32Bit
[%vreg14 -> %t1] GR32Bit
[%vreg15 -> %t2] GR32Bit
[%vreg16 -> %fp] GR32Bit
[%vreg17 -> %fp] GR32Bit
[%vreg18 -> %a0] GR32Bit
[%vreg19 -> %a0] GR32Bit
[%vreg20 -> %a1] GR32Bit
[%vreg21 -> %t2] GR32Bit
[%vreg22 -> %a1] GR32Bit
[%vreg23 -> %fp] GR32Bit
[%vreg24 -> %fp] GR32Bit
[%vreg25 -> %t2] GR32Bit
[%vreg26 -> %t1] GR32Bit
[%vreg29 -> %t0] GR32Bit
[%vreg30 -> %t1] GR32Bit
[%vreg31 -> %t1] GR32Bit
[%vreg32 -> %t0] GR32Bit
[%vreg33 -> %t1] GR32Bit
[%vreg34 -> %t2] GR32Bit
[%vreg35 -> %fp] GR32Bit
[%vreg36 -> %fp] GR32Bit
[%vreg37 -> %a0] GR32Bit
[%vreg38 -> %a0] GR32Bit
[%vreg39 -> %a1] GR32Bit
[%vreg40 -> %t2] GR32Bit
[%vreg41 -> %a1] GR32Bit
[%vreg42 -> %fp] GR32Bit
[%vreg43 -> %fp] GR32Bit
[%vreg44 -> %t2] GR32Bit
[%vreg45 -> %t1] GR32Bit
[%vreg48 -> %t1] GR32Bit
[%vreg49 -> %t2] GR32Bit
[%vreg50 -> %t2] GR32Bit
[%vreg51 -> %t1] GR32Bit
[%vreg52 -> %t2] GR32Bit
[%vreg53 -> %fp] GR32Bit
[%vreg54 -> %a0] GR32Bit
[%vreg55 -> %a0] GR32Bit
[%vreg56 -> %a1] GR32Bit
[%vreg57 -> %a1] GR32Bit
[%vreg58 -> %a2] GR32Bit
[%vreg59 -> %fp] GR32Bit
[%vreg60 -> %a2] GR32Bit
[%vreg61 -> %a0] GR32Bit
[%vreg62 -> %a0] GR32Bit
[%vreg63 -> %fp] GR32Bit
[%vreg64 -> %t2] GR32Bit
[%vreg67 -> %t1] GR32Bit
[%vreg68 -> %t2] GR32Bit
[%vreg69 -> %t2] GR32Bit
[%vreg70 -> %t1] GR32Bit
[%vreg71 -> %t2] GR32Bit
[%vreg72 -> %fp] GR32Bit
[%vreg73 -> %a0] GR32Bit
[%vreg74 -> %a0] GR32Bit
[%vreg75 -> %a1] GR32Bit
[%vreg76 -> %a1] GR32Bit
[%vreg77 -> %a2] GR32Bit
[%vreg78 -> %fp] GR32Bit
[%vreg79 -> %a2] GR32Bit
[%vreg80 -> %a0] GR32Bit
[%vreg81 -> %a0] GR32Bit
[%vreg82 -> %fp] GR32Bit
[%vreg83 -> %t2] GR32Bit
[%vreg84 -> %t0] GR32Bit
[%vreg85 -> %t1] GR32Bit
[%vreg86 -> %t1] GR32Bit
[%vreg87 -> %t2] GR32Bit
[%vreg88 -> %t2] GR32Bit
[%vreg89 -> %t1] GR32Bit
[%vreg90 -> %t2] GR32Bit
[%vreg91 -> %fp] GR32Bit
[%vreg92 -> %a0] GR32Bit
[%vreg93 -> %a0] GR32Bit
[%vreg94 -> %a1] GR32Bit
[%vreg95 -> %a1] GR32Bit
[%vreg96 -> %a2] GR32Bit
[%vreg97 -> %fp] GR32Bit
[%vreg98 -> %a2] GR32Bit
[%vreg99 -> %a0] GR32Bit
[%vreg100 -> %a0] GR32Bit
[%vreg101 -> %fp] GR32Bit
[%vreg102 -> %t2] GR32Bit
[%vreg103 -> %t1] GR32Bit
[%vreg104 -> %t2] GR32Bit
[%vreg105 -> %t1] GR32Bit
[%vreg106 -> %t0] GR32Bit
[%vreg107 -> %t0] GR32Bit
[%vreg108 -> %t1] GR32Bit

0B	BB#0: derived from LLVM BB %redefine_start1.return
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg10<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg10
4B		  * %vreg11<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg11
4B		  * %vreg12<def> = SRLI %vreg11<kill>, 12; GR32Bit:%vreg12,%vreg11
4B		  * %vreg13<def> = ADD %vreg10<kill>, %vreg12<kill>; GR32Bit:%vreg13,%vreg10,%vreg12
4B		  * %vreg14<def> = ADDI %zero, 20; GR32Bit:%vreg14
4B		  * %vreg15<def> = SRLI %t5, 22; GR32Bit:%vreg15
4B		  * %vreg16<def> = SRLI %t5, 12; GR32Bit:%vreg16
4B		  * %vreg17<def> = ANDI %vreg16<kill>, 15; GR32Bit:%vreg17,%vreg16
4B		  * %vreg18<def> = SRLI %t5, 6; GR32Bit:%vreg18
4B		  * %vreg19<def> = ANDI %vreg18<kill>, 63; GR32Bit:%vreg19,%vreg18
4B		  * %vreg20<def> = ADDI %zero, 832; GR32Bit:%vreg20
4B		  * %vreg21<def> = MUL %vreg15<kill>, %vreg20<kill>; GR32Bit:%vreg21,%vreg15,%vreg20
4B		  * %vreg22<def> = ADDI %zero, 52; GR32Bit:%vreg22
4B		  * %vreg23<def> = MUL %vreg17<kill>, %vreg22<kill>; GR32Bit:%vreg23,%vreg17,%vreg22
4B		  * %vreg24<def> = ADD %vreg23<kill>, %vreg19<kill>; GR32Bit:%vreg24,%vreg23,%vreg19
4B		  * %vreg25<def> = ADD %vreg24<kill>, %vreg21<kill>; GR32Bit:%vreg25,%vreg24,%vreg21
4B		  * %vreg26<def> = MUL %vreg25<kill>, %vreg14<kill>; GR32Bit:%vreg26,%vreg25,%vreg14
4B		  * %t5<def> = ADD %vreg13<kill>, %vreg26<kill>; GR32Bit:%vreg13,%vreg26
4B		  * %vreg6<def> = LUI <MCSym="%lo("ga#256")">; GR32Bit:%vreg6
4B		  * SRLI %vreg6, %vreg6, 12; GR32Bit:%vreg6
4B		  * %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
4B		  * %vreg5<def> = LUI <ga:@redefine_in_a>[TF=2]; GR32Bit:%vreg5
4B		  * %vreg7<def> = ADD %vreg6<kill>, %vreg5<kill>; GR32Bit:%vreg7,%vreg6,%vreg5
4B		  * SW %vreg7<kill>, %vreg0<kill>, 0; mem:ST4[%1] GR32Bit:%vreg7,%vreg0
4B		  * %vreg4<def> = LUI 258867; GR32Bit:%vreg4
4B		  * %a5<def> = LUI 819
4B		  * %a5<def> = SRLI %a5<internal>, 12
4B		  * ADD %vreg4, %vreg4, %a5; GR32Bit:%vreg4
4B		  * %vreg2<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg2
4B		  * SRLI %vreg2, %vreg2, 12; GR32Bit:%vreg2
4B		  * %vreg1<def> = LUI <ga:@var>[TF=2]; GR32Bit:%vreg1
4B		  * %vreg3<def> = ADD %vreg2<kill>, %vreg1<kill>; GR32Bit:%vreg3,%vreg2,%vreg1
4B		  * SW %vreg4<kill>, %vreg3<kill>, 0; mem:ST4[%0] GR32Bit:%vreg4,%vreg3
4B		  * %vreg84<def> = ADDI %zero, 64; GR32Bit:%vreg84
4B		  * %vreg85<def> = ADDI %zero, 1; GR32Bit:%vreg85
4B		  * WRITECM %vreg84, %vreg85<kill>, 60; GR32Bit:%vreg84,%vreg85
4B		  * %vreg86<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg86
4B		  * %vreg87<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg87
4B		  * %vreg88<def> = SRLI %vreg87<kill>, 12; GR32Bit:%vreg88,%vreg87
4B		  * %vreg89<def> = ADD %vreg86<kill>, %vreg88<kill>; GR32Bit:%vreg89,%vreg86,%vreg88
4B		  * %vreg90<def> = ADDI %zero, 20; GR32Bit:%vreg90
4B		  * %vreg91<def> = SRLI %vreg84, 22; GR32Bit:%vreg91,%vreg84
4B		  * %vreg92<def> = SRLI %vreg84, 12; GR32Bit:%vreg92,%vreg84
4B		  * %vreg93<def> = ANDI %vreg92<kill>, 15; GR32Bit:%vreg93,%vreg92
4B		  * %vreg94<def> = SRLI %vreg84, 6; GR32Bit:%vreg94,%vreg84
4B		  * %vreg95<def> = ANDI %vreg94<kill>, 63; GR32Bit:%vreg95,%vreg94
4B		  * %vreg96<def> = ADDI %zero, 832; GR32Bit:%vreg96
4B		  * %vreg97<def> = MUL %vreg91<kill>, %vreg96<kill>; GR32Bit:%vreg97,%vreg91,%vreg96
4B		  * %vreg98<def> = ADDI %zero, 52; GR32Bit:%vreg98
4B		  * %vreg99<def> = MUL %vreg93<kill>, %vreg98<kill>; GR32Bit:%vreg99,%vreg93,%vreg98
4B		  * %vreg100<def> = ADD %vreg99<kill>, %vreg95<kill>; GR32Bit:%vreg100,%vreg99,%vreg95
4B		  * %vreg101<def> = ADD %vreg100<kill>, %vreg97<kill>; GR32Bit:%vreg101,%vreg100,%vreg97
4B		  * %vreg102<def> = MUL %vreg101<kill>, %vreg90<kill>; GR32Bit:%vreg102,%vreg101,%vreg90
4B		  * %vreg103<def> = ADD %vreg102<kill>, %vreg89<kill>; GR32Bit:%vreg103,%vreg102,%vreg89
4B		  * %vreg104<def> = LW %t5, 0; GR32Bit:%vreg104
4B		  * SW %vreg104<kill>, %vreg103<kill>, 16; GR32Bit:%vreg104,%vreg103
4B		  * %vreg105<def> = LUI 1; GR32Bit:%vreg105
4B		  * WRITEPM %vreg105<kill>, %vreg84<kill>, 0; GR32Bit:%vreg105,%vreg84
4B		  * END 0
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
496B		%t4<def> = ADD %t5, %zero
496B		  * %vreg29<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg29
496B		  * %vreg30<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg30
496B		  * %vreg31<def> = SRLI %vreg30<kill>, 12; GR32Bit:%vreg31,%vreg30
496B		  * %vreg32<def> = ADD %vreg29<kill>, %vreg31<kill>; GR32Bit:%vreg32,%vreg29,%vreg31
496B		  * %vreg33<def> = ADDI %zero, 20; GR32Bit:%vreg33
496B		  * %vreg34<def> = SRLI %t5, 22; GR32Bit:%vreg34
496B		  * %vreg35<def> = SRLI %t5, 12; GR32Bit:%vreg35
496B		  * %vreg36<def> = ANDI %vreg35<kill>, 15; GR32Bit:%vreg36,%vreg35
496B		  * %vreg37<def> = SRLI %t5, 6; GR32Bit:%vreg37
496B		  * %vreg38<def> = ANDI %vreg37<kill>, 63; GR32Bit:%vreg38,%vreg37
496B		  * %vreg39<def> = ADDI %zero, 832; GR32Bit:%vreg39
496B		  * %vreg40<def> = MUL %vreg34<kill>, %vreg39<kill>; GR32Bit:%vreg40,%vreg34,%vreg39
496B		  * %vreg41<def> = ADDI %zero, 52; GR32Bit:%vreg41
496B		  * %vreg42<def> = MUL %vreg36<kill>, %vreg41<kill>; GR32Bit:%vreg42,%vreg36,%vreg41
496B		  * %vreg43<def> = ADD %vreg42<kill>, %vreg38<kill>; GR32Bit:%vreg43,%vreg42,%vreg38
496B		  * %vreg44<def> = ADD %vreg43<kill>, %vreg40<kill>; GR32Bit:%vreg44,%vreg43,%vreg40
496B		  * %vreg45<def> = MUL %vreg44<kill>, %vreg33<kill>; GR32Bit:%vreg45,%vreg44,%vreg33
496B		  * %t5<def> = ADD %vreg32<kill>, %vreg45<kill>; GR32Bit:%vreg32,%vreg45
496B		  * %vreg106<def> = LUI 1; GR32Bit:%vreg106
496B		  * %vreg107<def> = DREADPM %vreg106<kill>, 0; GR32Bit:%vreg107,%vreg106
496B		  * %vreg108<def> = LUI 1048575; GR32Bit:%vreg108
496B		  * %a5<def> = LUI 4095
496B		  * %a5<def> = SRLI %a5<internal>, 12
496B		  * ADD %vreg108, %vreg108, %a5; GR32Bit:%vreg108
496B		  * SYNC %vreg107, %vreg108<kill>, 60; GR32Bit:%vreg107,%vreg108
496B		  * END 0
496B		  * %zero<def> = ADDI %zero, 0
496B		  * %zero<def> = ADDI %zero, 0
704B		%t4<def> = ADD %t5, %zero
704B		  * %vreg48<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg48
704B		  * %vreg49<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg49
704B		  * %vreg50<def> = SRLI %vreg49<kill>, 12; GR32Bit:%vreg50,%vreg49
704B		  * %vreg51<def> = ADD %vreg48<kill>, %vreg50<kill>; GR32Bit:%vreg51,%vreg48,%vreg50
704B		  * %vreg52<def> = ADDI %zero, 20; GR32Bit:%vreg52
704B		  * %vreg53<def> = SRLI %t5, 22; GR32Bit:%vreg53
704B		  * %vreg54<def> = SRLI %t5, 12; GR32Bit:%vreg54
704B		  * %vreg55<def> = ANDI %vreg54<kill>, 15; GR32Bit:%vreg55,%vreg54
704B		  * %vreg56<def> = SRLI %t5, 6; GR32Bit:%vreg56
704B		  * %vreg57<def> = ANDI %vreg56<kill>, 63; GR32Bit:%vreg57,%vreg56
704B		  * %vreg58<def> = ADDI %zero, 832; GR32Bit:%vreg58
704B		  * %vreg59<def> = MUL %vreg53<kill>, %vreg58<kill>; GR32Bit:%vreg59,%vreg53,%vreg58
704B		  * %vreg60<def> = ADDI %zero, 52; GR32Bit:%vreg60
704B		  * %vreg61<def> = MUL %vreg55<kill>, %vreg60<kill>; GR32Bit:%vreg61,%vreg55,%vreg60
704B		  * %vreg62<def> = ADD %vreg61<kill>, %vreg57<kill>; GR32Bit:%vreg62,%vreg61,%vreg57
704B		  * %vreg63<def> = ADD %vreg62<kill>, %vreg59<kill>; GR32Bit:%vreg63,%vreg62,%vreg59
704B		  * %vreg64<def> = MUL %vreg63<kill>, %vreg52<kill>; GR32Bit:%vreg64,%vreg63,%vreg52
704B		  * %t5<def> = ADD %vreg51<kill>, %vreg64<kill>; GR32Bit:%vreg51,%vreg64
704B		  * END 0
704B		  * %zero<def> = ADDI %zero, 0
704B		  * %zero<def> = ADDI %zero, 0
880B		%t4<def> = ADD %t5, %zero
880B		  * %vreg67<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg67
880B		  * %vreg68<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg68
880B		  * %vreg69<def> = SRLI %vreg68<kill>, 12; GR32Bit:%vreg69,%vreg68
880B		  * %vreg70<def> = ADD %vreg67<kill>, %vreg69<kill>; GR32Bit:%vreg70,%vreg67,%vreg69
880B		  * %vreg71<def> = ADDI %zero, 20; GR32Bit:%vreg71
880B		  * %vreg72<def> = SRLI %t5, 22; GR32Bit:%vreg72
880B		  * %vreg73<def> = SRLI %t5, 12; GR32Bit:%vreg73
880B		  * %vreg74<def> = ANDI %vreg73<kill>, 15; GR32Bit:%vreg74,%vreg73
880B		  * %vreg75<def> = SRLI %t5, 6; GR32Bit:%vreg75
880B		  * %vreg76<def> = ANDI %vreg75<kill>, 63; GR32Bit:%vreg76,%vreg75
880B		  * %vreg77<def> = ADDI %zero, 832; GR32Bit:%vreg77
880B		  * %vreg78<def> = MUL %vreg72<kill>, %vreg77<kill>; GR32Bit:%vreg78,%vreg72,%vreg77
880B		  * %vreg79<def> = ADDI %zero, 52; GR32Bit:%vreg79
880B		  * %vreg80<def> = MUL %vreg74<kill>, %vreg79<kill>; GR32Bit:%vreg80,%vreg74,%vreg79
880B		  * %vreg81<def> = ADD %vreg80<kill>, %vreg76<kill>; GR32Bit:%vreg81,%vreg80,%vreg76
880B		  * %vreg82<def> = ADD %vreg81<kill>, %vreg78<kill>; GR32Bit:%vreg82,%vreg81,%vreg78
880B		  * %vreg83<def> = MUL %vreg82<kill>, %vreg71<kill>; GR32Bit:%vreg83,%vreg82,%vreg71
880B		  * %t5<def> = ADD %vreg70<kill>, %vreg83<kill>; GR32Bit:%vreg70,%vreg83
880B		  * END 0
880B		  * %zero<def> = ADDI %zero, 0
880B		  * %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#768")">
> %t1<def> = LUI <MCSym="%lo("ga#768")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 20
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = LUI <MCSym="%lo("ga#256")">
> SRLI %t0, %t0, 12
> %t1<def> = ADDI %t5, <fi#0>
> %t2<def> = LUI <ga:@redefine_in_a>[TF=2]
> %t0<def> = ADD %t0<kill>, %t2<kill>
> SW %t0<kill>, %t1<kill>, 0; mem:ST4[%1]
> %t0<def> = LUI 258867
> %a5<def> = LUI 819
> %a5<def> = SRLI %a5<internal>, 12
> ADD %t0, %t0, %a5
> %t1<def> = LUI <MCSym="%lo("ga#0")">
> SRLI %t1, %t1, 12
> %t2<def> = LUI <ga:@var>[TF=2]
> %t1<def> = ADD %t1<kill>, %t2<kill>
> SW %t0<kill>, %t1<kill>, 0; mem:ST4[%0]
> %t0<def> = ADDI %zero, 64
> %t1<def> = ADDI %zero, 1
> WRITECM %t0, %t1<kill>, 60
> %t1<def> = LUI <MCSym="%hi("ga#768")">
> %t2<def> = LUI <MCSym="%lo("ga#768")">
> %t2<def> = SRLI %t2<kill>, 12
> %t1<def> = ADD %t1<kill>, %t2<kill>
> %t2<def> = ADDI %zero, 20
> %fp<def> = SRLI %t0, 22
> %a0<def> = SRLI %t0, 12
> %a0<def> = ANDI %a0<kill>, 15
> %a1<def> = SRLI %t0, 6
> %a1<def> = ANDI %a1<kill>, 63
> %a2<def> = ADDI %zero, 832
> %fp<def> = MUL %fp<kill>, %a2<kill>
> %a2<def> = ADDI %zero, 52
> %a0<def> = MUL %a0<kill>, %a2<kill>
> %a0<def> = ADD %a0<kill>, %a1<kill>
> %fp<def> = ADD %a0<kill>, %fp<kill>
> %t2<def> = MUL %fp<kill>, %t2<kill>
> %t1<def> = ADD %t2<kill>, %t1<kill>
> %t2<def> = LW %t5, 0
> SW %t2<kill>, %t1<kill>, 16
> %t1<def> = LUI 1
> WRITEPM %t1<kill>, %t0<kill>, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#768")">
> %t1<def> = LUI <MCSym="%lo("ga#768")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 20
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = LUI 1
> %t0<def> = DREADPM %t0<kill>, 0
> %t1<def> = LUI 1048575
> %a5<def> = LUI 4095
> %a5<def> = SRLI %a5<internal>, 12
> ADD %t1, %t1, %a5
> SYNC %t0, %t1<kill>, 60
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t1<def> = LUI <MCSym="%hi("ga#768")">
> %t2<def> = LUI <MCSym="%lo("ga#768")">
> %t2<def> = SRLI %t2<kill>, 12
> %t1<def> = ADD %t1<kill>, %t2<kill>
> %t2<def> = ADDI %zero, 20
> %fp<def> = SRLI %t5, 22
> %a0<def> = SRLI %t5, 12
> %a0<def> = ANDI %a0<kill>, 15
> %a1<def> = SRLI %t5, 6
> %a1<def> = ANDI %a1<kill>, 63
> %a2<def> = ADDI %zero, 832
> %fp<def> = MUL %fp<kill>, %a2<kill>
> %a2<def> = ADDI %zero, 52
> %a0<def> = MUL %a0<kill>, %a2<kill>
> %a0<def> = ADD %a0<kill>, %a1<kill>
> %fp<def> = ADD %a0<kill>, %fp<kill>
> %t2<def> = MUL %fp<kill>, %t2<kill>
> %t5<def> = ADD %t1<kill>, %t2<kill>
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t1<def> = LUI <MCSym="%hi("ga#768")">
> %t2<def> = LUI <MCSym="%lo("ga#768")">
> %t2<def> = SRLI %t2<kill>, 12
> %t1<def> = ADD %t1<kill>, %t2<kill>
> %t2<def> = ADDI %zero, 20
> %fp<def> = SRLI %t5, 22
> %a0<def> = SRLI %t5, 12
> %a0<def> = ANDI %a0<kill>, 15
> %a1<def> = SRLI %t5, 6
> %a1<def> = ANDI %a1<kill>, 63
> %a2<def> = ADDI %zero, 832
> %fp<def> = MUL %fp<kill>, %a2<kill>
> %a2<def> = ADDI %zero, 52
> %a0<def> = MUL %a0<kill>, %a2<kill>
> %a0<def> = ADD %a0<kill>, %a1<kill>
> %fp<def> = ADD %a0<kill>, %fp<kill>
> %t2<def> = MUL %fp<kill>, %t2<kill>
> %t5<def> = ADD %t1<kill>, %t2<kill>
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
********** EMITTING LIVE DEBUG VARIABLES **********
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: redefine_start1
max x:0, min x:0
max y:0, min y:0
current state of mf:# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %redefine_start1.return
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#768")">
	  * %t1<def> = LUI <MCSym="%lo("ga#768")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 20
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = LUI <MCSym="%lo("ga#256")">
	  * SRLI %t0, %t0, 12
	  * %t1<def> = ADDI %t5, <fi#0>
	  * %t2<def> = LUI <ga:@redefine_in_a>[TF=2]
	  * %t0<def> = ADD %t0<kill>, %t2<kill>
	  * SW %t0<kill>, %t1<kill>, 0; mem:ST4[%1]
	  * %t0<def> = LUI 258867
	  * %a5<def> = LUI 819
	  * %a5<def> = SRLI %a5<internal>, 12
	  * ADD %t0, %t0, %a5
	  * %t1<def> = LUI <MCSym="%lo("ga#0")">
	  * SRLI %t1, %t1, 12
	  * %t2<def> = LUI <ga:@var>[TF=2]
	  * %t1<def> = ADD %t1<kill>, %t2<kill>
	  * SW %t0<kill>, %t1<kill>, 0; mem:ST4[%0]
	  * %t0<def> = ADDI %zero, 64
	  * %t1<def> = ADDI %zero, 1
	  * WRITECM %t0, %t1<kill>, 60
	  * %t1<def> = LUI <MCSym="%hi("ga#768")">
	  * %t2<def> = LUI <MCSym="%lo("ga#768")">
	  * %t2<def> = SRLI %t2<kill>, 12
	  * %t1<def> = ADD %t1<kill>, %t2<kill>
	  * %t2<def> = ADDI %zero, 20
	  * %fp<def> = SRLI %t0, 22
	  * %a0<def> = SRLI %t0, 12
	  * %a0<def> = ANDI %a0<kill>, 15
	  * %a1<def> = SRLI %t0, 6
	  * %a1<def> = ANDI %a1<kill>, 63
	  * %a2<def> = ADDI %zero, 832
	  * %fp<def> = MUL %fp<kill>, %a2<kill>
	  * %a2<def> = ADDI %zero, 52
	  * %a0<def> = MUL %a0<kill>, %a2<kill>
	  * %a0<def> = ADD %a0<kill>, %a1<kill>
	  * %fp<def> = ADD %a0<kill>, %fp<kill>
	  * %t2<def> = MUL %fp<kill>, %t2<kill>
	  * %t1<def> = ADD %t2<kill>, %t1<kill>
	  * %t2<def> = LW %t5, 0
	  * SW %t2<kill>, %t1<kill>, 16
	  * %t1<def> = LUI 1
	  * WRITEPM %t1<kill>, %t0<kill>, 0
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#768")">
	  * %t1<def> = LUI <MCSym="%lo("ga#768")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 20
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = LUI 1
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * %t1<def> = LUI 1048575
	  * %a5<def> = LUI 4095
	  * %a5<def> = SRLI %a5<internal>, 12
	  * ADD %t1, %t1, %a5
	  * SYNC %t0, %t1<kill>, 60
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t1<def> = LUI <MCSym="%hi("ga#768")">
	  * %t2<def> = LUI <MCSym="%lo("ga#768")">
	  * %t2<def> = SRLI %t2<kill>, 12
	  * %t1<def> = ADD %t1<kill>, %t2<kill>
	  * %t2<def> = ADDI %zero, 20
	  * %fp<def> = SRLI %t5, 22
	  * %a0<def> = SRLI %t5, 12
	  * %a0<def> = ANDI %a0<kill>, 15
	  * %a1<def> = SRLI %t5, 6
	  * %a1<def> = ANDI %a1<kill>, 63
	  * %a2<def> = ADDI %zero, 832
	  * %fp<def> = MUL %fp<kill>, %a2<kill>
	  * %a2<def> = ADDI %zero, 52
	  * %a0<def> = MUL %a0<kill>, %a2<kill>
	  * %a0<def> = ADD %a0<kill>, %a1<kill>
	  * %fp<def> = ADD %a0<kill>, %fp<kill>
	  * %t2<def> = MUL %fp<kill>, %t2<kill>
	  * %t5<def> = ADD %t1<kill>, %t2<kill>
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t1<def> = LUI <MCSym="%hi("ga#768")">
	  * %t2<def> = LUI <MCSym="%lo("ga#768")">
	  * %t2<def> = SRLI %t2<kill>, 12
	  * %t1<def> = ADD %t1<kill>, %t2<kill>
	  * %t2<def> = ADDI %zero, 20
	  * %fp<def> = SRLI %t5, 22
	  * %a0<def> = SRLI %t5, 12
	  * %a0<def> = ANDI %a0<kill>, 15
	  * %a1<def> = SRLI %t5, 6
	  * %a1<def> = ANDI %a1<kill>, 63
	  * %a2<def> = ADDI %zero, 832
	  * %fp<def> = MUL %fp<kill>, %a2<kill>
	  * %a2<def> = ADDI %zero, 52
	  * %a0<def> = MUL %a0<kill>, %a2<kill>
	  * %a0<def> = ADD %a0<kill>, %a1<kill>
	  * %fp<def> = ADD %a0<kill>, %fp<kill>
	  * %t2<def> = MUL %fp<kill>, %t2<kill>
	  * %t5<def> = ADD %t1<kill>, %t2<kill>
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0

# End machine code for function redefine_start1.

lowering frame index for func redefine_start1:0 TO VAL:0
CGP: Found      local addrmode: [Base:%1]
CGP: Found      local addrmode: [Base:%1]
CGP: Found      local addrmode: [16 + Base:%2]
CGP: Found      local addrmode: [Base:@redefine_out_b]
CGP: Found      local addrmode: [Base:%1]
CGP: Found      local addrmode: [20 + Base:%5]
CGP: Found      local addrmode: [4 + Base:@redefine_out_b]
Computing probabilities for redefine_start2.return
Computing probabilities for redefine_start2.newName01



=== redefine_start2
store visit is after?  store i32* %0, i32** %1, align 4
I was here to add i32* %0
arg match found with argIndex:-1
Argument does not have assigned frame index!
The value is an argument for which I am here to get arg frame index as:0
whats the index?-1
I was here to add   %1 = alloca i32*, align 4
whats in dag after store?SelectionDAG has 7 nodes:
  0x221bb88: ch = EntryToken [ORD=6]

  0x223bfa0: i32 = FrameIndex<-1> [ORD=6]

  0x223bea0: i32 = undef [ORD=6]

    0x221bb88: <multiple use>
    0x223bfa0: <multiple use>
    0x223bea0: <multiple use>
  0x223bda0: i32,ch = load 0x221bb88, 0x223bfa0, 0x223bea0<LD4[FixedStack-1]>

  0x2238f70: i32 = Constant<0>

    0x221bb88: <multiple use>
    0x223bfa0: <multiple use>
    0x2239270: i32 = FrameIndex<0> [ORD=6]

    0x223bea0: <multiple use>
  0x2239670: ch = store 0x221bb88, 0x223bfa0, 0x2239270, 0x223bea0<ST4[%1]> [ORD=6]


visiting load instruction   %2 = load i32** %1, align 4
with I type i32*and sd value :0x2239270: i32 = FrameIndex<0>
new load?0x2239870: i32,ch = load 0x2239670, 0x2239270, 0x223bea0<LD4[%1]>
dag after load is dealt with?SelectionDAG has 8 nodes:
  0x221bb88: ch = EntryToken [ORD=6]

  0x223bfa0: i32 = FrameIndex<-1> [ORD=6]

  0x223bea0: i32 = undef [ORD=6]

    0x221bb88: <multiple use>
    0x223bfa0: <multiple use>
    0x223bea0: <multiple use>
  0x223bda0: i32,ch = load 0x221bb88, 0x223bfa0, 0x223bea0<LD4[FixedStack-1]>

  0x2239270: i32 = FrameIndex<0> [ORD=6]

  0x2238f70: i32 = Constant<0>

      0x221bb88: <multiple use>
      0x223bfa0: <multiple use>
      0x2239270: <multiple use>
      0x223bea0: <multiple use>
    0x2239670: ch = store 0x221bb88, 0x223bfa0, 0x2239270, 0x223bea0<ST4[%1]> [ORD=6]

    0x2239270: <multiple use>
    0x223bea0: <multiple use>
  0x2239870: i32,ch = load 0x2239670, 0x2239270, 0x223bea0<LD4[%1]>

    0x221bb88: <multiple use>
    0x223bfa0: <multiple use>
    0x2239270: <multiple use>
    0x223bea0: <multiple use>
  0x2239670: ch = store 0x221bb88, 0x223bfa0, 0x2239270, 0x223bea0<ST4[%1]> [ORD=6]


visiting load instruction   %4 = load i32* %3, align 4
with I type i32and sd value :0x2239d70: i32 = add 0x2239870, 0x2239a70
new load?0x2239c70: i32,ch = load 0x2239670, 0x2239d70, 0x223bea0<LD4[%3]>
dag after load is dealt with?SelectionDAG has 12 nodes:
  0x221bb88: ch = EntryToken [ORD=6]

  0x223bfa0: i32 = FrameIndex<-1> [ORD=6]

  0x223bea0: i32 = undef [ORD=6]

    0x221bb88: <multiple use>
    0x223bfa0: <multiple use>
    0x223bea0: <multiple use>
  0x223bda0: i32,ch = load 0x221bb88, 0x223bfa0, 0x223bea0<LD4[FixedStack-1]>

  0x2239270: i32 = FrameIndex<0> [ORD=6]

  0x2238f70: i32 = Constant<0>

  0x223bca0: i64 = Constant<16>

    0x2239670: <multiple use>
        0x2239670: <multiple use>
        0x2239270: <multiple use>
        0x223bea0: <multiple use>
      0x2239870: i32,ch = load 0x2239670, 0x2239270, 0x223bea0<LD4[%1]> [ORD=7]

      0x2239a70: i32 = Constant<16> [ORD=8]

    0x2239d70: i32 = add 0x2239870, 0x2239a70 [ORD=8]

    0x223bea0: <multiple use>
  0x2239c70: i32,ch = load 0x2239670, 0x2239d70, 0x223bea0<LD4[%3]>

    0x221bb88: <multiple use>
    0x223bfa0: <multiple use>
    0x2239270: <multiple use>
    0x223bea0: <multiple use>
  0x2239670: ch = store 0x221bb88, 0x223bfa0, 0x2239270, 0x223bea0<ST4[%1]> [ORD=6]


store visit is after?  store i32 %4, i32* getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0), align 4
I was here to add i32* getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)
I was here to add @redefine_out_b = common global [2 x i32] zeroinitializer, align 4
whats in dag after store?SelectionDAG has 15 nodes:
  0x221bb88: ch = EntryToken [ORD=6]

  0x223bfa0: i32 = FrameIndex<-1> [ORD=6]

  0x223bea0: i32 = undef [ORD=6]

    0x221bb88: <multiple use>
    0x223bfa0: <multiple use>
    0x223bea0: <multiple use>
  0x223bda0: i32,ch = load 0x221bb88, 0x223bfa0, 0x223bea0<LD4[FixedStack-1]>

  0x2239270: i32 = FrameIndex<0> [ORD=6]

  0x2238f70: i32 = Constant<0>

    0x221bb88: <multiple use>
    0x223bfa0: <multiple use>
    0x2239270: <multiple use>
    0x223bea0: <multiple use>
  0x2239670: ch = store 0x221bb88, 0x223bfa0, 0x2239270, 0x223bea0<ST4[%1]> [ORD=6]

    0x2239670: <multiple use>
    0x2239270: <multiple use>
    0x223bea0: <multiple use>
  0x2239870: i32,ch = load 0x2239670, 0x2239270, 0x223bea0<LD4[%1]> [ORD=7]

  0x223bca0: i64 = Constant<16>

    0x2239670: <multiple use>
      0x2239870: <multiple use>
      0x2239a70: i32 = Constant<16> [ORD=8]

    0x2239d70: i32 = add 0x2239870, 0x2239a70 [ORD=8]

    0x223bea0: <multiple use>
  0x2239c70: i32,ch = load 0x2239670, 0x2239d70, 0x223bea0<LD4[%3]> [ORD=9]

      0x2239870: <multiple use>
      0x2239c70: <multiple use>
    0x2239370: ch = TokenFactor 0x2239870:1, 0x2239c70:1 [ORD=11]

    0x2239c70: <multiple use>
    0x2239970: i32 = GlobalAddress<[2 x i32]* @redefine_out_b> 0 [ORD=10]

    0x223bea0: <multiple use>
  0x2239b70: ch = store 0x2239370, 0x2239c70, 0x2239970, 0x223bea0<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=11]


visiting load instruction   %5 = load i32** %1, align 4
with I type i32*and sd value :0x2239270: i32 = FrameIndex<0>
new load?0x2239470: i32,ch = load 0x2239b70, 0x2239270, 0x223bea0<LD4[%1]>
dag after load is dealt with?SelectionDAG has 16 nodes:
  0x221bb88: ch = EntryToken [ORD=6]

  0x223bfa0: i32 = FrameIndex<-1> [ORD=6]

  0x223bea0: i32 = undef [ORD=6]

    0x221bb88: <multiple use>
    0x223bfa0: <multiple use>
    0x223bea0: <multiple use>
  0x223bda0: i32,ch = load 0x221bb88, 0x223bfa0, 0x223bea0<LD4[FixedStack-1]>

  0x2239270: i32 = FrameIndex<0> [ORD=6]

  0x2238f70: i32 = Constant<0>

    0x221bb88: <multiple use>
    0x223bfa0: <multiple use>
    0x2239270: <multiple use>
    0x223bea0: <multiple use>
  0x2239670: ch = store 0x221bb88, 0x223bfa0, 0x2239270, 0x223bea0<ST4[%1]> [ORD=6]

    0x2239670: <multiple use>
    0x2239270: <multiple use>
    0x223bea0: <multiple use>
  0x2239870: i32,ch = load 0x2239670, 0x2239270, 0x223bea0<LD4[%1]> [ORD=7]

  0x223bca0: i64 = Constant<16>

    0x2239670: <multiple use>
      0x2239870: <multiple use>
      0x2239a70: i32 = Constant<16> [ORD=8]

    0x2239d70: i32 = add 0x2239870, 0x2239a70 [ORD=8]

    0x223bea0: <multiple use>
  0x2239c70: i32,ch = load 0x2239670, 0x2239d70, 0x223bea0<LD4[%3]> [ORD=9]

        0x2239870: <multiple use>
        0x2239c70: <multiple use>
      0x2239370: ch = TokenFactor 0x2239870:1, 0x2239c70:1 [ORD=11]

      0x2239c70: <multiple use>
      0x2239970: i32 = GlobalAddress<[2 x i32]* @redefine_out_b> 0 [ORD=10]

      0x223bea0: <multiple use>
    0x2239b70: ch = store 0x2239370, 0x2239c70, 0x2239970, 0x223bea0<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=11]

    0x2239270: <multiple use>
    0x223bea0: <multiple use>
  0x2239470: i32,ch = load 0x2239b70, 0x2239270, 0x223bea0<LD4[%1]>

      0x2239870: <multiple use>
      0x2239c70: <multiple use>
    0x2239370: ch = TokenFactor 0x2239870:1, 0x2239c70:1 [ORD=11]

    0x2239c70: <multiple use>
    0x2239970: i32 = GlobalAddress<[2 x i32]* @redefine_out_b> 0 [ORD=10]

    0x223bea0: <multiple use>
  0x2239b70: ch = store 0x2239370, 0x2239c70, 0x2239970, 0x223bea0<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=11]


visiting load instruction   %7 = load i32* %6, align 4
with I type i32and sd value :0x2239770: i32 = add 0x2239470, 0x2239170
new load?0x2239570: i32,ch = load 0x2239b70, 0x2239770, 0x223bea0<LD4[%6]>
dag after load is dealt with?SelectionDAG has 20 nodes:
  0x221bb88: ch = EntryToken [ORD=6]

  0x223bfa0: i32 = FrameIndex<-1> [ORD=6]

  0x223bea0: i32 = undef [ORD=6]

    0x221bb88: <multiple use>
    0x223bfa0: <multiple use>
    0x223bea0: <multiple use>
  0x223bda0: i32,ch = load 0x221bb88, 0x223bfa0, 0x223bea0<LD4[FixedStack-1]>

  0x2239270: i32 = FrameIndex<0> [ORD=6]

  0x2238f70: i32 = Constant<0>

    0x221bb88: <multiple use>
    0x223bfa0: <multiple use>
    0x2239270: <multiple use>
    0x223bea0: <multiple use>
  0x2239670: ch = store 0x221bb88, 0x223bfa0, 0x2239270, 0x223bea0<ST4[%1]> [ORD=6]

    0x2239670: <multiple use>
    0x2239270: <multiple use>
    0x223bea0: <multiple use>
  0x2239870: i32,ch = load 0x2239670, 0x2239270, 0x223bea0<LD4[%1]> [ORD=7]

  0x223bca0: i64 = Constant<16>

    0x2239670: <multiple use>
      0x2239870: <multiple use>
      0x2239a70: i32 = Constant<16> [ORD=8]

    0x2239d70: i32 = add 0x2239870, 0x2239a70 [ORD=8]

    0x223bea0: <multiple use>
  0x2239c70: i32,ch = load 0x2239670, 0x2239d70, 0x223bea0<LD4[%3]> [ORD=9]

  0x2239070: i64 = Constant<20>

    0x2239b70: <multiple use>
        0x2239b70: <multiple use>
        0x2239270: <multiple use>
        0x223bea0: <multiple use>
      0x2239470: i32,ch = load 0x2239b70, 0x2239270, 0x223bea0<LD4[%1]> [ORD=12]

      0x2239170: i32 = Constant<20> [ORD=13]

    0x2239770: i32 = add 0x2239470, 0x2239170 [ORD=13]

    0x223bea0: <multiple use>
  0x2239570: i32,ch = load 0x2239b70, 0x2239770, 0x223bea0<LD4[%6]>

      0x2239870: <multiple use>
      0x2239c70: <multiple use>
    0x2239370: ch = TokenFactor 0x2239870:1, 0x2239c70:1 [ORD=11]

    0x2239c70: <multiple use>
    0x2239970: i32 = GlobalAddress<[2 x i32]* @redefine_out_b> 0 [ORD=10]

    0x223bea0: <multiple use>
  0x2239b70: ch = store 0x2239370, 0x2239c70, 0x2239970, 0x223bea0<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=11]


store visit is after?  store i32 %7, i32* getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1), align 4
I was here to add i32* getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)
whats in dag after store?SelectionDAG has 25 nodes:
  0x221bb88: ch = EntryToken [ORD=6]

  0x223bfa0: i32 = FrameIndex<-1> [ORD=6]

  0x223bea0: i32 = undef [ORD=6]

    0x221bb88: <multiple use>
    0x223bfa0: <multiple use>
    0x223bea0: <multiple use>
  0x223bda0: i32,ch = load 0x221bb88, 0x223bfa0, 0x223bea0<LD4[FixedStack-1]>

  0x2239270: i32 = FrameIndex<0> [ORD=6]

  0x2238f70: i32 = Constant<0>

    0x221bb88: <multiple use>
    0x223bfa0: <multiple use>
    0x2239270: <multiple use>
    0x223bea0: <multiple use>
  0x2239670: ch = store 0x221bb88, 0x223bfa0, 0x2239270, 0x223bea0<ST4[%1]> [ORD=6]

    0x2239670: <multiple use>
    0x2239270: <multiple use>
    0x223bea0: <multiple use>
  0x2239870: i32,ch = load 0x2239670, 0x2239270, 0x223bea0<LD4[%1]> [ORD=7]

  0x223bca0: i64 = Constant<16>

    0x2239670: <multiple use>
      0x2239870: <multiple use>
      0x2239a70: i32 = Constant<16> [ORD=8]

    0x2239d70: i32 = add 0x2239870, 0x2239a70 [ORD=8]

    0x223bea0: <multiple use>
  0x2239c70: i32,ch = load 0x2239670, 0x2239d70, 0x223bea0<LD4[%3]> [ORD=9]

  0x2239970: i32 = GlobalAddress<[2 x i32]* @redefine_out_b> 0 [ORD=10]

      0x2239870: <multiple use>
      0x2239c70: <multiple use>
    0x2239370: ch = TokenFactor 0x2239870:1, 0x2239c70:1 [ORD=11]

    0x2239c70: <multiple use>
    0x2239970: <multiple use>
    0x223bea0: <multiple use>
  0x2239b70: ch = store 0x2239370, 0x2239c70, 0x2239970, 0x223bea0<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=11]

    0x2239b70: <multiple use>
    0x2239270: <multiple use>
    0x223bea0: <multiple use>
  0x2239470: i32,ch = load 0x2239b70, 0x2239270, 0x223bea0<LD4[%1]> [ORD=12]

  0x2239070: i64 = Constant<20>

    0x2239b70: <multiple use>
      0x2239470: <multiple use>
      0x2239170: i32 = Constant<20> [ORD=13]

    0x2239770: i32 = add 0x2239470, 0x2239170 [ORD=13]

    0x223bea0: <multiple use>
  0x2239570: i32,ch = load 0x2239b70, 0x2239770, 0x223bea0<LD4[%6]> [ORD=14]

  0x223c0a0: i64 = Constant<4>

      0x2239470: <multiple use>
      0x2239570: <multiple use>
    0x223c3a0: ch = TokenFactor 0x2239470:1, 0x2239570:1 [ORD=16]

    0x2239570: <multiple use>
      0x2239970: <multiple use>
      0x223c1a0: i32 = Constant<4> [ORD=15]

    0x223c2a0: i32 = add 0x2239970, 0x223c1a0 [ORD=15]

    0x223bea0: <multiple use>
  0x223c4a0: ch = store 0x223c3a0, 0x2239570, 0x223c2a0, 0x223bea0<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=16]


Initial selection DAG: BB#0 'redefine_start2:redefine_start2.newName01'
SelectionDAG has 25 nodes:
  0x221bb88: ch = EntryToken [ORD=6]

  0x223bfa0: i32 = FrameIndex<-1> [ORD=6]

  0x223bea0: i32 = undef [ORD=6]

    0x221bb88: <multiple use>
    0x223bfa0: <multiple use>
    0x223bea0: <multiple use>
  0x223bda0: i32,ch = load 0x221bb88, 0x223bfa0, 0x223bea0<LD4[FixedStack-1]>

  0x2239270: i32 = FrameIndex<0> [ORD=6]

  0x2238f70: i32 = Constant<0>

    0x221bb88: <multiple use>
    0x223bfa0: <multiple use>
    0x2239270: <multiple use>
    0x223bea0: <multiple use>
  0x2239670: ch = store 0x221bb88, 0x223bfa0, 0x2239270, 0x223bea0<ST4[%1]> [ORD=6]

    0x2239670: <multiple use>
    0x2239270: <multiple use>
    0x223bea0: <multiple use>
  0x2239870: i32,ch = load 0x2239670, 0x2239270, 0x223bea0<LD4[%1]> [ORD=7]

  0x223bca0: i64 = Constant<16>

    0x2239670: <multiple use>
      0x2239870: <multiple use>
      0x2239a70: i32 = Constant<16> [ORD=8]

    0x2239d70: i32 = add 0x2239870, 0x2239a70 [ORD=8]

    0x223bea0: <multiple use>
  0x2239c70: i32,ch = load 0x2239670, 0x2239d70, 0x223bea0<LD4[%3]> [ORD=9]

  0x2239970: i32 = GlobalAddress<[2 x i32]* @redefine_out_b> 0 [ORD=10]

      0x2239870: <multiple use>
      0x2239c70: <multiple use>
    0x2239370: ch = TokenFactor 0x2239870:1, 0x2239c70:1 [ORD=11]

    0x2239c70: <multiple use>
    0x2239970: <multiple use>
    0x223bea0: <multiple use>
  0x2239b70: ch = store 0x2239370, 0x2239c70, 0x2239970, 0x223bea0<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=11]

    0x2239b70: <multiple use>
    0x2239270: <multiple use>
    0x223bea0: <multiple use>
  0x2239470: i32,ch = load 0x2239b70, 0x2239270, 0x223bea0<LD4[%1]> [ORD=12]

  0x2239070: i64 = Constant<20>

    0x2239b70: <multiple use>
      0x2239470: <multiple use>
      0x2239170: i32 = Constant<20> [ORD=13]

    0x2239770: i32 = add 0x2239470, 0x2239170 [ORD=13]

    0x223bea0: <multiple use>
  0x2239570: i32,ch = load 0x2239b70, 0x2239770, 0x223bea0<LD4[%6]> [ORD=14]

  0x223c0a0: i64 = Constant<4>

      0x2239470: <multiple use>
      0x2239570: <multiple use>
    0x223c3a0: ch = TokenFactor 0x2239470:1, 0x2239570:1 [ORD=16]

    0x2239570: <multiple use>
      0x2239970: <multiple use>
      0x223c1a0: i32 = Constant<4> [ORD=15]

    0x223c2a0: i32 = add 0x2239970, 0x223c1a0 [ORD=15]

    0x223bea0: <multiple use>
  0x223c4a0: ch = store 0x223c3a0, 0x2239570, 0x223c2a0, 0x223bea0<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=16]



Replacing.1 0x2239870: i32,ch = load 0x2239670, 0x2239270, 0x223bea0<LD4[%1]> [ORD=7]

With: 0x223bfa0: i32 = FrameIndex<-1> [ORD=6]
 and 1 other values

Replacing.1 0x2239c70: i32,ch = load 0x2239670, 0x2239d70, 0x223bea0<LD4[%3](align=16)> [ORD=9]

With: 0x2239c70: i32,ch = load 0x2239670, 0x2239d70, 0x223bea0<LD4[%3](align=16)> [ORD=9]
 and 1 other values

Replacing.3 0x2239370: ch = TokenFactor 0x2239670, 0x2239c70:1 [ORD=11]

With: 0x2239c70: i32,ch = load 0x2239670, 0x2239d70, 0x223bea0<LD4[%3](align=16)> [ORD=9]

Optimized lowered selection DAG: BB#0 'redefine_start2:redefine_start2.newName01'
SelectionDAG has 18 nodes:
  0x223bfa0: i32 = FrameIndex<-1> [ORD=6]

  0x223bea0: i32 = undef [ORD=6]

  0x2239270: i32 = FrameIndex<0> [ORD=6]

      0x221bb88: ch = EntryToken [ORD=6]

      0x223bfa0: <multiple use>
      0x2239270: <multiple use>
      0x223bea0: <multiple use>
    0x2239670: ch = store 0x221bb88, 0x223bfa0, 0x2239270, 0x223bea0<ST4[%1]> [ORD=6]

      0x223bfa0: <multiple use>
      0x2239a70: i32 = Constant<16> [ORD=8]

    0x2239d70: i32 = add 0x223bfa0, 0x2239a70 [ORD=8]

    0x223bea0: <multiple use>
  0x2239c70: i32,ch = load 0x2239670, 0x2239d70, 0x223bea0<LD4[%3](align=16)> [ORD=9]

  0x2239970: i32 = GlobalAddress<[2 x i32]* @redefine_out_b> 0 [ORD=10]

    0x2239c70: <multiple use>
    0x2239c70: <multiple use>
    0x2239970: <multiple use>
    0x223bea0: <multiple use>
  0x2239b70: ch = store 0x2239c70:1, 0x2239c70, 0x2239970, 0x223bea0<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=11]

    0x2239b70: <multiple use>
    0x2239270: <multiple use>
    0x223bea0: <multiple use>
  0x2239470: i32,ch = load 0x2239b70, 0x2239270, 0x223bea0<LD4[%1]> [ORD=12]

    0x2239b70: <multiple use>
      0x2239470: <multiple use>
      0x2239170: i32 = Constant<20> [ORD=13]

    0x2239770: i32 = add 0x2239470, 0x2239170 [ORD=13]

    0x223bea0: <multiple use>
  0x2239570: i32,ch = load 0x2239b70, 0x2239770, 0x223bea0<LD4[%6]> [ORD=14]

      0x2239470: <multiple use>
      0x2239570: <multiple use>
    0x223c3a0: ch = TokenFactor 0x2239470:1, 0x2239570:1 [ORD=16]

    0x2239570: <multiple use>
      0x2239970: <multiple use>
      0x223c1a0: i32 = Constant<4> [ORD=15]

    0x223c2a0: i32 = add 0x2239970, 0x223c1a0 [ORD=15]

    0x223bea0: <multiple use>
  0x223c4a0: ch = store 0x223c3a0, 0x2239570, 0x223c2a0, 0x223bea0<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=16]


Legally typed node: 0x223c1a0: i32 = Constant<4> [ORD=15] [ID=0]

Legally typed node: 0x2239170: i32 = Constant<20> [ORD=13] [ID=0]

Legally typed node: 0x2239970: i32 = GlobalAddress<[2 x i32]* @redefine_out_b> 0 [ORD=10] [ID=0]

Legally typed node: 0x223c2a0: i32 = add 0x2239970, 0x223c1a0 [ORD=15] [ID=0]

Legally typed node: 0x2239a70: i32 = Constant<16> [ORD=8] [ID=0]

Legally typed node: 0x2239270: i32 = FrameIndex<0> [ORD=6] [ID=0]

Legally typed node: 0x223bea0: i32 = undef [ORD=6] [ID=0]

Legally typed node: 0x223bfa0: i32 = FrameIndex<-1> [ORD=6] [ID=0]

Legally typed node: 0x2239d70: i32 = add 0x223bfa0, 0x2239a70 [ORD=8] [ID=0]

Legally typed node: 0x221bb88: ch = EntryToken [ORD=6] [ID=0]

Legally typed node: 0x2239670: ch = store 0x221bb88, 0x223bfa0, 0x2239270, 0x223bea0<ST4[%1]> [ORD=6] [ID=0]

Legally typed node: 0x2239c70: i32,ch = load 0x2239670, 0x2239d70, 0x223bea0<LD4[%3](align=16)> [ORD=9] [ID=0]

Legally typed node: 0x2239b70: ch = store 0x2239c70:1, 0x2239c70, 0x2239970, 0x223bea0<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=11] [ID=0]

Legally typed node: 0x2239470: i32,ch = load 0x2239b70, 0x2239270, 0x223bea0<LD4[%1]> [ORD=12] [ID=0]

Legally typed node: 0x2239770: i32 = add 0x2239470, 0x2239170 [ORD=13] [ID=0]

Legally typed node: 0x2239570: i32,ch = load 0x2239b70, 0x2239770, 0x223bea0<LD4[%6]> [ORD=14] [ID=0]

Legally typed node: 0x223c3a0: ch = TokenFactor 0x2239470:1, 0x2239570:1 [ORD=16] [ID=0]

Legally typed node: 0x223c4a0: ch = store 0x223c3a0, 0x2239570, 0x223c2a0, 0x223bea0<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=16] [ID=0]

Legally typed node: 0x7fff6e802f00: ch = handlenode 0x223c4a0 [ID=0]

Type-legalized selection DAG: BB#0 'redefine_start2:redefine_start2.newName01'
SelectionDAG has 18 nodes:
  0x223bfa0: i32 = FrameIndex<-1> [ORD=6] [ID=-3]

  0x223bea0: i32 = undef [ORD=6] [ID=-3]

  0x2239270: i32 = FrameIndex<0> [ORD=6] [ID=-3]

      0x221bb88: ch = EntryToken [ORD=6] [ID=-3]

      0x223bfa0: <multiple use>
      0x2239270: <multiple use>
      0x223bea0: <multiple use>
    0x2239670: ch = store 0x221bb88, 0x223bfa0, 0x2239270, 0x223bea0<ST4[%1]> [ORD=6] [ID=-3]

      0x223bfa0: <multiple use>
      0x2239a70: i32 = Constant<16> [ORD=8] [ID=-3]

    0x2239d70: i32 = add 0x223bfa0, 0x2239a70 [ORD=8] [ID=-3]

    0x223bea0: <multiple use>
  0x2239c70: i32,ch = load 0x2239670, 0x2239d70, 0x223bea0<LD4[%3](align=16)> [ORD=9] [ID=-3]

  0x2239970: i32 = GlobalAddress<[2 x i32]* @redefine_out_b> 0 [ORD=10] [ID=-3]

    0x2239c70: <multiple use>
    0x2239c70: <multiple use>
    0x2239970: <multiple use>
    0x223bea0: <multiple use>
  0x2239b70: ch = store 0x2239c70:1, 0x2239c70, 0x2239970, 0x223bea0<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=11] [ID=-3]

    0x2239b70: <multiple use>
    0x2239270: <multiple use>
    0x223bea0: <multiple use>
  0x2239470: i32,ch = load 0x2239b70, 0x2239270, 0x223bea0<LD4[%1]> [ORD=12] [ID=-3]

    0x2239b70: <multiple use>
      0x2239470: <multiple use>
      0x2239170: i32 = Constant<20> [ORD=13] [ID=-3]

    0x2239770: i32 = add 0x2239470, 0x2239170 [ORD=13] [ID=-3]

    0x223bea0: <multiple use>
  0x2239570: i32,ch = load 0x2239b70, 0x2239770, 0x223bea0<LD4[%6]> [ORD=14] [ID=-3]

      0x2239470: <multiple use>
      0x2239570: <multiple use>
    0x223c3a0: ch = TokenFactor 0x2239470:1, 0x2239570:1 [ORD=16] [ID=-3]

    0x2239570: <multiple use>
      0x2239970: <multiple use>
      0x223c1a0: i32 = Constant<4> [ORD=15] [ID=-3]

    0x223c2a0: i32 = add 0x2239970, 0x223c1a0 [ORD=15] [ID=-3]

    0x223bea0: <multiple use>
  0x223c4a0: ch = store 0x223c3a0, 0x2239570, 0x223c2a0, 0x223bea0<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=16] [ID=-3]


Legalized selection DAG: BB#0 'redefine_start2:redefine_start2.newName01'
SelectionDAG has 22 nodes:
  0x223bfa0: i32 = FrameIndex<-1> [ORD=6] [ID=1]

  0x223bea0: i32 = undef [ORD=6] [ID=2]

  0x2239270: i32 = FrameIndex<0> [ORD=6] [ID=3]

      0x221bb88: ch = EntryToken [ORD=6] [ID=0]

      0x223bfa0: <multiple use>
      0x2239270: <multiple use>
      0x223bea0: <multiple use>
    0x2239670: ch = store 0x221bb88, 0x223bfa0, 0x2239270, 0x223bea0<ST4[%1]> [ORD=6] [ID=8]

      0x223bfa0: <multiple use>
      0x2239a70: i32 = Constant<16> [ORD=8] [ID=4]

    0x2239d70: i32 = add 0x223bfa0, 0x2239a70 [ORD=8] [ID=9]

    0x223bea0: <multiple use>
  0x2239c70: i32,ch = load 0x2239670, 0x2239d70, 0x223bea0<LD4[%3](align=16)> [ORD=9] [ID=11]

    0x2239c70: <multiple use>
    0x2239c70: <multiple use>
    0x223bca0: <multiple use>
    0x223bea0: <multiple use>
  0x2239b70: ch = store 0x2239c70:1, 0x2239c70, 0x223bca0, 0x223bea0<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=11] [ID=12]

    0x2239b70: <multiple use>
    0x2239270: <multiple use>
    0x223bea0: <multiple use>
  0x2239470: i32,ch = load 0x2239b70, 0x2239270, 0x223bea0<LD4[%1]> [ORD=12] [ID=13]

    0x2239b70: <multiple use>
      0x2239470: <multiple use>
      0x2239170: i32 = Constant<20> [ORD=13] [ID=6]

    0x2239770: i32 = add 0x2239470, 0x2239170 [ORD=13] [ID=14]

    0x223bea0: <multiple use>
  0x2239570: i32,ch = load 0x2239b70, 0x2239770, 0x223bea0<LD4[%6]> [ORD=14] [ID=15]

      0x2238f70: i32 = TargetGlobalAddress<[2 x i32]* @redefine_out_b> 0 [TF=2]

    0x2239370: i32 = REDEFINEISD::Hi 0x2238f70

      0x223bda0: i32 = TargetGlobalAddress<[2 x i32]* @redefine_out_b> 0 [TF=3]

    0x2239870: i32 = REDEFINEISD::Lo 0x223bda0

  0x223bca0: i32 = add 0x2239370, 0x2239870

      0x2239470: <multiple use>
      0x2239570: <multiple use>
    0x223c3a0: ch = TokenFactor 0x2239470:1, 0x2239570:1 [ORD=16] [ID=16]

    0x2239570: <multiple use>
      0x223bca0: <multiple use>
      0x223c1a0: i32 = Constant<4> [ORD=15] [ID=7]

    0x223c2a0: i32 = add 0x223bca0, 0x223c1a0 [ORD=15] [ID=10]

    0x223bea0: <multiple use>
  0x223c4a0: ch = store 0x223c3a0, 0x2239570, 0x223c2a0, 0x223bea0<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=16] [ID=17]


Optimized legalized selection DAG: BB#0 'redefine_start2:redefine_start2.newName01'
SelectionDAG has 22 nodes:
  0x223bfa0: i32 = FrameIndex<-1> [ORD=6] [ID=1]

  0x223bea0: i32 = undef [ORD=6] [ID=2]

  0x2239270: i32 = FrameIndex<0> [ORD=6] [ID=3]

      0x221bb88: ch = EntryToken [ORD=6] [ID=0]

      0x223bfa0: <multiple use>
      0x2239270: <multiple use>
      0x223bea0: <multiple use>
    0x2239670: ch = store 0x221bb88, 0x223bfa0, 0x2239270, 0x223bea0<ST4[%1]> [ORD=6] [ID=8]

      0x223bfa0: <multiple use>
      0x2239a70: i32 = Constant<16> [ORD=8] [ID=4]

    0x2239d70: i32 = add 0x223bfa0, 0x2239a70 [ORD=8] [ID=9]

    0x223bea0: <multiple use>
  0x2239c70: i32,ch = load 0x2239670, 0x2239d70, 0x223bea0<LD4[%3](align=16)> [ORD=9] [ID=11]

    0x2239c70: <multiple use>
    0x2239c70: <multiple use>
    0x223bca0: <multiple use>
    0x223bea0: <multiple use>
  0x2239b70: ch = store 0x2239c70:1, 0x2239c70, 0x223bca0, 0x223bea0<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=11] [ID=12]

    0x2239b70: <multiple use>
    0x2239270: <multiple use>
    0x223bea0: <multiple use>
  0x2239470: i32,ch = load 0x2239b70, 0x2239270, 0x223bea0<LD4[%1]> [ORD=12] [ID=13]

    0x2239b70: <multiple use>
      0x2239470: <multiple use>
      0x2239170: i32 = Constant<20> [ORD=13] [ID=6]

    0x2239770: i32 = add 0x2239470, 0x2239170 [ORD=13] [ID=14]

    0x223bea0: <multiple use>
  0x2239570: i32,ch = load 0x2239b70, 0x2239770, 0x223bea0<LD4[%6]> [ORD=14] [ID=15]

      0x2238f70: i32 = TargetGlobalAddress<[2 x i32]* @redefine_out_b> 0 [TF=2]

    0x2239370: i32 = REDEFINEISD::Hi 0x2238f70

      0x223bda0: i32 = TargetGlobalAddress<[2 x i32]* @redefine_out_b> 0 [TF=3]

    0x2239870: i32 = REDEFINEISD::Lo 0x223bda0

  0x223bca0: i32 = add 0x2239370, 0x2239870

      0x2239470: <multiple use>
      0x2239570: <multiple use>
    0x223c3a0: ch = TokenFactor 0x2239470:1, 0x2239570:1 [ORD=16] [ID=16]

    0x2239570: <multiple use>
      0x223bca0: <multiple use>
      0x223c1a0: i32 = Constant<4> [ORD=15] [ID=7]

    0x223c2a0: i32 = add 0x223bca0, 0x223c1a0 [ORD=15] [ID=10]

    0x223bea0: <multiple use>
  0x223c4a0: ch = store 0x223c3a0, 0x2239570, 0x223c2a0, 0x223bea0<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=16] [ID=17]


===== Instruction selection begins: BB#0 'redefine_start2.newName01'
ISEL: Starting pattern match on root node: 0x223c4a0: ch = store 0x223c3a0, 0x2239570, 0x223c2a0, 0x223bea0<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=16] [ID=21]

  Initial Opcode index to 178
  Morphed node: 0x223c4a0: ch = SW 0x2239570, 0x223bca0, 0x2239970, 0x223c3a0<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=16]

ISEL: Match complete!
=> 0x223c4a0: ch = SW 0x2239570, 0x223bca0, 0x2239970, 0x223c3a0<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=16]

=> 0x223c3a0: ch = TokenFactor 0x2239470:1, 0x2239570:1 [ORD=16]

ISEL: Starting pattern match on root node: 0x2239570: i32,ch = load 0x2239b70, 0x2239770, 0x223bea0<LD4[%6]> [ORD=14] [ID=19]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2239570: i32,ch = LW 0x2239470, 0x223c1a0, 0x2239b70<Mem:LD4[%6]> [ORD=14]

ISEL: Match complete!
=> 0x2239570: i32,ch = LW 0x2239470, 0x223c1a0, 0x2239b70<Mem:LD4[%6]> [ORD=14]

ISEL: Starting pattern match on root node: 0x2239470: i32,ch = load 0x2239b70, 0x2239270, 0x223bea0<LD4[%1]> [ORD=12] [ID=17]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2239470: i32,ch = LW 0x2239270, 0x2239170, 0x2239b70<Mem:LD4[%1]> [ORD=12]

ISEL: Match complete!
=> 0x2239470: i32,ch = LW 0x2239270, 0x2239170, 0x2239b70<Mem:LD4[%1]> [ORD=12]

ISEL: Starting pattern match on root node: 0x2239b70: ch = store 0x2239c70:1, 0x2239c70, 0x223bca0, 0x223bea0<ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=11] [ID=15]

  Initial Opcode index to 178
  Morphed node: 0x2239b70: ch = SW 0x2239c70, 0x223bca0, 0x2239170, 0x2239c70:1<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=11]

ISEL: Match complete!
=> 0x2239b70: ch = SW 0x2239c70, 0x223bca0, 0x2239170, 0x2239c70:1<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=11]

ISEL: Starting pattern match on root node: 0x223bca0: i32 = add 0x2239370, 0x2239870 [ID=14]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x223bca0: i32 = ADD 0x2239870, 0x2239370

ISEL: Match complete!
=> 0x223bca0: i32 = ADD 0x2239870, 0x2239370

ISEL: Starting pattern match on root node: 0x2239c70: i32,ch = load 0x2239670, 0x2239d70, 0x223bea0<LD4[%3](align=16)> [ORD=9] [ID=13]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2239c70: i32,ch = LW 0x223bfa0, 0x223c0a0, 0x2239670<Mem:LD4[%3](align=16)> [ORD=9]

ISEL: Match complete!
=> 0x2239c70: i32,ch = LW 0x223bfa0, 0x223c0a0, 0x2239670<Mem:LD4[%3](align=16)> [ORD=9]

ISEL: Starting pattern match on root node: 0x2239870: i32 = REDEFINEISD::Lo 0x223bda0 [ID=12]

  Initial Opcode index to 1204
  Morphed node: 0x2239870: i32 = ADDI 0x2239a70, 0x223bda0

ISEL: Match complete!
=> 0x2239870: i32 = ADDI 0x2239a70, 0x223bda0

ISEL: Starting pattern match on root node: 0x2239370: i32 = REDEFINEISD::Hi 0x2238f70 [ID=11]

  Initial Opcode index to 1186
  Morphed node: 0x2239370: i32 = LUI 0x2238f70

ISEL: Match complete!
=> 0x2239370: i32 = LUI 0x2238f70

ISEL: Starting pattern match on root node: 0x2239670: ch = store 0x221bb88, 0x223bfa0, 0x2239270, 0x223bea0<ST4[%1]> [ORD=6] [ID=9]

  Initial Opcode index to 178
  Morphed node: 0x2239670: ch = SW 0x223bfa0, 0x2239270, 0x2239170, 0x221bb88<Mem:ST4[%1]> [ORD=6]

ISEL: Match complete!
=> 0x2239670: ch = SW 0x223bfa0, 0x2239270, 0x2239170, 0x221bb88<Mem:ST4[%1]> [ORD=6]

=> 0x223bda0: i32 = TargetGlobalAddress<[2 x i32]* @redefine_out_b> 0 [TF=3]

=> 0x2238f70: i32 = TargetGlobalAddress<[2 x i32]* @redefine_out_b> 0 [TF=2]

=> 0x221bb88: ch = EntryToken [ORD=6]

===== Instruction selection ends:
Selected selection DAG: BB#0 'redefine_start2:redefine_start2.newName01'
SelectionDAG has 23 nodes:
    0x2239070: <multiple use>
    0x223c0a0: i32 = TargetConstant<16>

      0x2239070: <multiple use>
      0x2239d70: <multiple use>
      0x2239170: <multiple use>
      0x221bb88: ch = EntryToken [ORD=6]

    0x2239670: ch = SW 0x2239070, 0x2239d70, 0x2239170, 0x221bb88<Mem:ST4[%1]> [ORD=6]

  0x2239c70: i32,ch = LW 0x2239070, 0x223c0a0, 0x2239670<Mem:LD4[%3](align=16)> [ORD=9]

      0x2239a70: i32 = Register %zero

      0x223bda0: i32 = TargetGlobalAddress<[2 x i32]* @redefine_out_b> 0 [TF=3]

    0x2239870: i32 = ADDI 0x2239a70, 0x223bda0

      0x2238f70: i32 = TargetGlobalAddress<[2 x i32]* @redefine_out_b> 0 [TF=2]

    0x2239370: i32 = LUI 0x2238f70

  0x223bca0: i32 = ADD 0x2239870, 0x2239370

    0x2239c70: <multiple use>
    0x223bca0: <multiple use>
    0x2239170: <multiple use>
    0x2239c70: <multiple use>
  0x2239b70: ch = SW 0x2239c70, 0x223bca0, 0x2239170, 0x2239c70:1<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=11]

    0x2239d70: <multiple use>
    0x2239170: <multiple use>
    0x2239b70: <multiple use>
  0x2239470: i32,ch = LW 0x2239d70, 0x2239170, 0x2239b70<Mem:LD4[%1]> [ORD=12]

    0x2239470: <multiple use>
    0x223c1a0: i32 = TargetConstant<20>

    0x2239b70: <multiple use>
  0x2239570: i32,ch = LW 0x2239470, 0x223c1a0, 0x2239b70<Mem:LD4[%6]> [ORD=14]

  0x2239170: i32 = TargetConstant<0>

  0x2239770: i32 = Register %t5

    0x2239770: <multiple use>
    0x223c2a0: i32 = TargetFrameIndex<-1>

  0x2239070: i32 = ADDI 0x2239770, 0x223c2a0 [ORD=6]

    0x2239770: <multiple use>
    0x223bea0: i32 = TargetFrameIndex<0>

  0x2239d70: i32 = ADDI 0x2239770, 0x223bea0 [ORD=6]

    0x2239570: <multiple use>
    0x223bca0: <multiple use>
    0x2239970: i32 = TargetConstant<4>

      0x2239470: <multiple use>
      0x2239570: <multiple use>
    0x223c3a0: ch = TokenFactor 0x2239470:1, 0x2239570:1 [ORD=16]

  0x223c4a0: ch = SW 0x2239570, 0x223bca0, 0x2239970, 0x223c3a0<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=16]


********** List Scheduling BB#0 'redefine_start2.newName01' **********
SU(0): 0x223c4a0: ch = SW 0x2239570, 0x223bca0, 0x2239970, 0x223c3a0<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=16] [ID=0]

  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
   val SU(11): Latency=1
   val SU(8): Latency=1
   ch  SU(1): Latency=0

SU(1): 0x223c3a0: ch = TokenFactor 0x2239470:1, 0x2239570:1 [ORD=16] [ID=1]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
   ch  SU(2): Latency=1
   ch  SU(11): Latency=1
  Successors:
   ch  SU(0): Latency=0

SU(2): 0x2239470: i32,ch = LW 0x2239d70, 0x2239170, 0x2239b70<Mem:LD4[%1]> [ORD=12] [ID=2]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
   val SU(7): Latency=1
   ch  SU(3): Latency=1
  Successors:
   ch  SU(1): Latency=1
   val SU(11): Latency=1

SU(3): 0x2239b70: ch = SW 0x2239c70, 0x223bca0, 0x2239170, 0x2239c70:1<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=11] [ID=3]

  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 3
  Predecessors:
   val SU(4): Latency=1
   val SU(8): Latency=1
   ch  SU(4): Latency=1
  Successors:
   ch  SU(2): Latency=1
   ch  SU(11): Latency=1

SU(4): 0x2239c70: i32,ch = LW 0x2239070, 0x223c0a0, 0x2239670<Mem:LD4[%3](align=16)> [ORD=9] [ID=4]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 4
  Predecessors:
   val SU(6): Latency=1
   ch  SU(5): Latency=1
  Successors:
   val SU(3): Latency=1
   ch  SU(3): Latency=1

SU(5): 0x2239670: ch = SW 0x2239070, 0x2239d70, 0x2239170, 0x221bb88<Mem:ST4[%1]> [ORD=6] [ID=5]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 5
  Predecessors:
   val SU(6): Latency=1
   val SU(7): Latency=1
  Successors:
   ch  SU(4): Latency=1

SU(6): 0x2239070: i32 = ADDI 0x2239770, 0x223c2a0 [ORD=6] [ID=6]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
   val SU(4): Latency=1
   val SU(5): Latency=1

SU(7): 0x2239d70: i32 = ADDI 0x2239770, 0x223bea0 [ORD=6] [ID=7]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
   val SU(2): Latency=1
   val SU(5): Latency=1

SU(8): 0x223bca0: i32 = ADD 0x2239870, 0x2239370 [ID=8]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
   val SU(10): Latency=1
   val SU(9): Latency=1
  Successors:
   val SU(0): Latency=1
   val SU(3): Latency=1

SU(9): 0x2239370: i32 = LUI 0x2238f70 [ID=9]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
   val SU(8): Latency=1

SU(10): 0x2239870: i32 = ADDI 0x2239a70, 0x223bda0 [ID=10]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
   val SU(8): Latency=1

SU(11): 0x2239570: i32,ch = LW 0x2239470, 0x223c1a0, 0x2239b70<Mem:LD4[%6]> [ORD=14] [ID=11]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
   val SU(2): Latency=1
   ch  SU(3): Latency=1
  Successors:
   val SU(0): Latency=1
   ch  SU(1): Latency=1


Examining Available:
Height 0: SU(0): 0x223c4a0: ch = SW 0x2239570, 0x223bca0, 0x2239970, 0x223c3a0<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=16] [ID=0]


*** Scheduling [0]: SU(0): 0x223c4a0: ch = SW 0x2239570, 0x223bca0, 0x2239970, 0x223c3a0<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=16] [ID=0]


Examining Available:
Height 0: SU(1): 0x223c3a0: ch = TokenFactor 0x2239470:1, 0x2239570:1 [ORD=16] [ID=1]


*** Scheduling [1]: SU(1): 0x223c3a0: ch = TokenFactor 0x2239470:1, 0x2239570:1 [ORD=16] [ID=1]


Examining Available:
Height 2: SU(11): 0x2239570: i32,ch = LW 0x2239470, 0x223c1a0, 0x2239b70<Mem:LD4[%6]> [ORD=14] [ID=11]


*** Scheduling [2]: SU(11): 0x2239570: i32,ch = LW 0x2239470, 0x223c1a0, 0x2239b70<Mem:LD4[%6]> [ORD=14] [ID=11]


Examining Available:
Height 3: SU(2): 0x2239470: i32,ch = LW 0x2239d70, 0x2239170, 0x2239b70<Mem:LD4[%1]> [ORD=12] [ID=2]


*** Scheduling [3]: SU(2): 0x2239470: i32,ch = LW 0x2239d70, 0x2239170, 0x2239b70<Mem:LD4[%1]> [ORD=12] [ID=2]


Examining Available:
Height 4: SU(3): 0x2239b70: ch = SW 0x2239c70, 0x223bca0, 0x2239170, 0x2239c70:1<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=11] [ID=3]


*** Scheduling [4]: SU(3): 0x2239b70: ch = SW 0x2239c70, 0x223bca0, 0x2239170, 0x2239c70:1<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=11] [ID=3]


Examining Available:
Height 5: SU(8): 0x223bca0: i32 = ADD 0x2239870, 0x2239370 [ID=8]

Height 5: SU(4): 0x2239c70: i32,ch = LW 0x2239070, 0x223c0a0, 0x2239670<Mem:LD4[%3](align=16)> [ORD=9] [ID=4]


*** Scheduling [5]: SU(8): 0x223bca0: i32 = ADD 0x2239870, 0x2239370 [ID=8]


Examining Available:
Height 6: SU(10): 0x2239870: i32 = ADDI 0x2239a70, 0x223bda0 [ID=10]

Height 6: SU(9): 0x2239370: i32 = LUI 0x2238f70 [ID=9]

Height 5: SU(4): 0x2239c70: i32,ch = LW 0x2239070, 0x223c0a0, 0x2239670<Mem:LD4[%3](align=16)> [ORD=9] [ID=4]


*** Scheduling [6]: SU(10): 0x2239870: i32 = ADDI 0x2239a70, 0x223bda0 [ID=10]


Examining Available:
Height 6: SU(9): 0x2239370: i32 = LUI 0x2238f70 [ID=9]

Height 5: SU(4): 0x2239c70: i32,ch = LW 0x2239070, 0x223c0a0, 0x2239670<Mem:LD4[%3](align=16)> [ORD=9] [ID=4]


*** Scheduling [7]: SU(9): 0x2239370: i32 = LUI 0x2238f70 [ID=9]


Examining Available:
Height 5: SU(4): 0x2239c70: i32,ch = LW 0x2239070, 0x223c0a0, 0x2239670<Mem:LD4[%3](align=16)> [ORD=9] [ID=4]


*** Scheduling [8]: SU(4): 0x2239c70: i32,ch = LW 0x2239070, 0x223c0a0, 0x2239670<Mem:LD4[%3](align=16)> [ORD=9] [ID=4]


Examining Available:
Height 9: SU(5): 0x2239670: ch = SW 0x2239070, 0x2239d70, 0x2239170, 0x221bb88<Mem:ST4[%1]> [ORD=6] [ID=5]


*** Scheduling [9]: SU(5): 0x2239670: ch = SW 0x2239070, 0x2239d70, 0x2239170, 0x221bb88<Mem:ST4[%1]> [ORD=6] [ID=5]


Examining Available:
Height 10: SU(6): 0x2239070: i32 = ADDI 0x2239770, 0x223c2a0 [ORD=6] [ID=6]

Height 10: SU(7): 0x2239d70: i32 = ADDI 0x2239770, 0x223bea0 [ORD=6] [ID=7]


*** Scheduling [10]: SU(6): 0x2239070: i32 = ADDI 0x2239770, 0x223c2a0 [ORD=6] [ID=6]


Examining Available:
Height 10: SU(7): 0x2239d70: i32 = ADDI 0x2239770, 0x223bea0 [ORD=6] [ID=7]


*** Scheduling [11]: SU(7): 0x2239d70: i32 = ADDI 0x2239770, 0x223bea0 [ORD=6] [ID=7]

*** Final schedule ***
SU(7): 0x2239d70: i32 = ADDI 0x2239770, 0x223bea0 [ORD=6] [ID=7]

SU(6): 0x2239070: i32 = ADDI 0x2239770, 0x223c2a0 [ORD=6] [ID=6]

SU(5): 0x2239670: ch = SW 0x2239070, 0x2239d70, 0x2239170, 0x221bb88<Mem:ST4[%1]> [ORD=6] [ID=5]

SU(4): 0x2239c70: i32,ch = LW 0x2239070, 0x223c0a0, 0x2239670<Mem:LD4[%3](align=16)> [ORD=9] [ID=4]

SU(9): 0x2239370: i32 = LUI 0x2238f70 [ID=9]

SU(10): 0x2239870: i32 = ADDI 0x2239a70, 0x223bda0 [ID=10]

SU(8): 0x223bca0: i32 = ADD 0x2239870, 0x2239370 [ID=8]

SU(3): 0x2239b70: ch = SW 0x2239c70, 0x223bca0, 0x2239170, 0x2239c70:1<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]> [ORD=11] [ID=3]

SU(2): 0x2239470: i32,ch = LW 0x2239d70, 0x2239170, 0x2239b70<Mem:LD4[%1]> [ORD=12] [ID=2]

SU(11): 0x2239570: i32,ch = LW 0x2239470, 0x223c1a0, 0x2239b70<Mem:LD4[%6]> [ORD=14] [ID=11]

SU(1): 0x223c3a0: ch = TokenFactor 0x2239470:1, 0x2239570:1 [ORD=16] [ID=1]

SU(0): 0x223c4a0: ch = SW 0x2239570, 0x223bca0, 0x2239970, 0x223c3a0<Mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)]> [ORD=16] [ID=0]


Total amount of phi nodes to update: 0
Initial selection DAG: BB#1 'redefine_start2:redefine_start2.return'
SelectionDAG has 1 nodes:
  0x221bb88: ch = EntryToken


Optimized lowered selection DAG: BB#1 'redefine_start2:redefine_start2.return'
SelectionDAG has 1 nodes:
  0x221bb88: ch = EntryToken


Legally typed node: 0x221bb88: ch = EntryToken [ID=0]

Legally typed node: 0x7fff6e802f00: ch = handlenode 0x221bb88 [ID=0]

Type-legalized selection DAG: BB#1 'redefine_start2:redefine_start2.return'
SelectionDAG has 1 nodes:
  0x221bb88: ch = EntryToken [ID=-3]


Legalized selection DAG: BB#1 'redefine_start2:redefine_start2.return'
SelectionDAG has 1 nodes:
  0x221bb88: ch = EntryToken [ID=0]


Optimized legalized selection DAG: BB#1 'redefine_start2:redefine_start2.return'
SelectionDAG has 1 nodes:
  0x221bb88: ch = EntryToken [ID=0]


===== Instruction selection begins: BB#1 'redefine_start2.return'
=> 0x221bb88: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: BB#1 'redefine_start2:redefine_start2.return'
SelectionDAG has 1 nodes:
  0x221bb88: ch = EntryToken


********** List Scheduling BB#1 'redefine_start2.return' **********
*** Final schedule ***

Total amount of phi nodes to update: 0

*** Tail-duplicating BB#1

Merging into block: BB#0: derived from LLVM BB %redefine_start2.newName01
	%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
	%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
	SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
	%vreg2<def> = LW %vreg1, 16; mem:LD4[%3](align=16) GR32Bit:%vreg2,%vreg1
	%vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
	%vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
	%vreg5<def> = ADD %vreg4<kill>, %vreg3<kill>; GR32Bit:%vreg5,%vreg4,%vreg3
	SW %vreg2<kill>, %vreg5, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
	%vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
	%vreg7<def> = LW %vreg6<kill>, 20; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
	SW %vreg7<kill>, %vreg5, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5
    Successors according to CFG: BB#1
From MBB: BB#1: derived from LLVM BB %redefine_start2.return
    Predecessors according to CFG: BB#0

Removing MBB: BB#1: derived from LLVM BB %redefine_start2.return
# Machine code for function redefine_start2: SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start2.newName01
16B		%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
48B		SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
64B		%vreg2<def> = LW %vreg1, 16; mem:LD4[%3](align=16) GR32Bit:%vreg2,%vreg1
80B		%vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
96B		%vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
112B		%vreg5<def> = ADD %vreg4<kill>, %vreg3<kill>; GR32Bit:%vreg5,%vreg4,%vreg3
128B		SW %vreg2<kill>, %vreg5, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
144B		%vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
160B		%vreg7<def> = LW %vreg6<kill>, 20; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
176B		SW %vreg7<kill>, %vreg5, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5

# End machine code for function redefine_start2.

********** Stack Coloring **********
********** Function: redefine_start2
Found 0 markers and 1 slots
Slot structure:
Slot #0 - 4 bytes.
Total Stack size: 4 bytes

Will not try to merge slots.
Removed 0 markers.
******** Pre-regalloc Machine LICM: redefine_start2 ********
******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: redefine_start2
********** PROCESS IMPLICIT DEFS **********
********** Function: redefine_start2
********** REWRITING TWO-ADDR INSTRS **********
********** Function: redefine_start2
# Machine code for function redefine_start2: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start2.newName01
16B		%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
48B		SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
64B		%vreg2<def> = LW %vreg1<kill>, 16; mem:LD4[%3](align=16) GR32Bit:%vreg2,%vreg1
80B		%vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
96B		%vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
112B		%vreg5<def> = ADD %vreg4<kill>, %vreg3<kill>; GR32Bit:%vreg5,%vreg4,%vreg3
128B		SW %vreg2<kill>, %vreg5, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
144B		%vreg6<def> = LW %vreg0<kill>, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
160B		%vreg7<def> = LW %vreg6<kill>, 20; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
176B		SW %vreg7<kill>, %vreg5<kill>, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5

# End machine code for function redefine_start2.

Computing live-in reg-units in ABI blocks.
Created 0 new intervals.
********** INTERVALS **********
%vreg0 = [16r,144r:0)  0@16r
%vreg1 = [32r,64r:0)  0@32r
%vreg2 = [64r,128r:0)  0@64r
%vreg3 = [80r,112r:0)  0@80r
%vreg4 = [96r,112r:0)  0@96r
%vreg5 = [112r,176r:0)  0@112r
%vreg6 = [144r,160r:0)  0@144r
%vreg7 = [160r,176r:0)  0@160r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start2: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start2.newName01
16B		%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
48B		SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
64B		%vreg2<def> = LW %vreg1, 16; mem:LD4[%3](align=16) GR32Bit:%vreg2,%vreg1
80B		%vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
96B		%vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
112B		%vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
128B		SW %vreg2, %vreg5, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
144B		%vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
160B		%vreg7<def> = LW %vreg6, 20; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
176B		SW %vreg7, %vreg5, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5

# End machine code for function redefine_start2.

********** SIMPLE REGISTER COALESCING **********
********** Function: redefine_start2
********** JOINING INTERVALS ***********
redefine_start2.newName01:
Trying to inflate 0 regs.
********** INTERVALS **********
%vreg0 = [16r,144r:0)  0@16r
%vreg1 = [32r,64r:0)  0@32r
%vreg2 = [64r,128r:0)  0@64r
%vreg3 = [80r,112r:0)  0@80r
%vreg4 = [96r,112r:0)  0@96r
%vreg5 = [112r,176r:0)  0@112r
%vreg6 = [144r,160r:0)  0@144r
%vreg7 = [160r,176r:0)  0@160r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start2: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start2.newName01
16B		%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
48B		SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
64B		%vreg2<def> = LW %vreg1, 16; mem:LD4[%3](align=16) GR32Bit:%vreg2,%vreg1
80B		%vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
96B		%vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
112B		%vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
128B		SW %vreg2, %vreg5, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
144B		%vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
160B		%vreg7<def> = LW %vreg6, 20; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
176B		SW %vreg7, %vreg5, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5

# End machine code for function redefine_start2.

Before MISched:
# Machine code for function redefine_start2: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %redefine_start2.newName01
	%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
	%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
	SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
	%vreg2<def> = LW %vreg1, 16; mem:LD4[%3](align=16) GR32Bit:%vreg2,%vreg1
	%vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
	%vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
	%vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
	SW %vreg2, %vreg5, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
	%vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
	%vreg7<def> = LW %vreg6, 20; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
	SW %vreg7, %vreg5, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5

# End machine code for function redefine_start2.


-------------
Starting new basic block BB#0
********** MI Scheduling **********
redefine_start2:BB#0 redefine_start2.newName01
  From: %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
    To: End Remaining: 0
Max Pressure: GR32Bit=4
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 4
Excess PSets: 
3 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 1
  SU(4) in tree 1
  SU(5) in tree 1
  SU(6) in tree 1
  SU(7) in tree 1
  SU(8) in tree 2
  SU(9) in tree 2
  SU(10) in tree 2
SU(0):   %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 23
  Successors:
   val SU(8): Latency=5 Reg=%vreg0
   val SU(2): Latency=5 Reg=%vreg0

SU(1):   %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
   val SU(3): Latency=5 Reg=%vreg1
   val SU(2): Latency=4 Reg=%vreg1

SU(2):   SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 13
  Depth              : 5
  Height             : 18
  Predecessors:
   val SU(1): Latency=4 Reg=%vreg1
   val SU(0): Latency=5 Reg=%vreg0
  Successors:
   ch  SU(8): Latency=1
   ch  SU(9): Latency=1
   ch  SU(3): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(3):   %vreg2<def> = LW %vreg1, 16; mem:LD4[%3](align=16) GR32Bit:%vreg2,%vreg1
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 6
  Height             : 5
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg1
   ch  SU(2): Latency=1
  Successors:
   val SU(7): Latency=2 Reg=%vreg2
   ch  SU(7): Latency=0

SU(4):   %vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
   val SU(6): Latency=5 Reg=%vreg3

SU(5):   %vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
   val SU(6): Latency=5 Reg=%vreg4

SU(6):   %vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 8
  Predecessors:
   val SU(5): Latency=5 Reg=%vreg4
   val SU(4): Latency=5 Reg=%vreg3
  Successors:
   val SU(10): Latency=5 Reg=%vreg5
   val SU(7): Latency=5 Reg=%vreg5

SU(7):   SW %vreg2, %vreg5, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 13
  Depth              : 10
  Height             : 3
  Predecessors:
   val SU(3): Latency=2 Reg=%vreg2
   val SU(6): Latency=5 Reg=%vreg5
   ch  SU(3): Latency=0
  Successors:
   ch  SU(10): Latency=0
   ch  SU(9): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(8):   %vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 6
  Height             : 17
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg0
   ch  SU(2): Latency=1
  Successors:
   val SU(9): Latency=15 Reg=%vreg6

SU(9):   %vreg7<def> = LW %vreg6, 20; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 21
  Height             : 2
  Predecessors:
   val SU(8): Latency=15 Reg=%vreg6
   ch  SU(7): Latency=1
   ch  SU(2): Latency=1
  Successors:
   val SU(10): Latency=2 Reg=%vreg7
   ch  SU(10): Latency=0

SU(10):   SW %vreg7, %vreg5, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 23
  Height             : 0
  Predecessors:
   val SU(9): Latency=2 Reg=%vreg7
   val SU(6): Latency=5 Reg=%vreg5
   ch  SU(9): Latency=0
   ch  SU(7): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 23
  Successors:
   val SU(8): Latency=5 Reg=%vreg0
   val SU(2): Latency=5 Reg=%vreg0

SU(1):   %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
   val SU(3): Latency=5 Reg=%vreg1
   val SU(2): Latency=4 Reg=%vreg1

SU(2):   SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 13
  Depth              : 5
  Height             : 18
  Predecessors:
   val SU(1): Latency=4 Reg=%vreg1
   val SU(0): Latency=5 Reg=%vreg0
  Successors:
   ch  SU(8): Latency=1
   ch  SU(9): Latency=1
   ch  SU(3): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(3):   %vreg2<def> = LW %vreg1, 16; mem:LD4[%3](align=16) GR32Bit:%vreg2,%vreg1
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 6
  Height             : 5
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg1
   ch  SU(2): Latency=1
  Successors:
   val SU(7): Latency=2 Reg=%vreg2
   ch  SU(7): Latency=0

SU(4):   %vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
   val SU(6): Latency=5 Reg=%vreg3

SU(5):   %vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
   val SU(6): Latency=5 Reg=%vreg4

SU(6):   %vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 8
  Predecessors:
   val SU(5): Latency=5 Reg=%vreg4
   val SU(4): Latency=5 Reg=%vreg3
  Successors:
   val SU(10): Latency=5 Reg=%vreg5
   val SU(7): Latency=5 Reg=%vreg5

SU(7):   SW %vreg2, %vreg5, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 10
  Height             : 3
  Predecessors:
   val SU(3): Latency=2 Reg=%vreg2
   val SU(6): Latency=5 Reg=%vreg5
   ch  SU(3): Latency=0
  Successors:
   ch  SU(10): Latency=0
   ch  SU(9): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(8):   %vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 6
  Height             : 17
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg0
   ch  SU(2): Latency=1
  Successors:
   val SU(9): Latency=15 Reg=%vreg6

SU(9):   %vreg7<def> = LW %vreg6, 20; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 21
  Height             : 2
  Predecessors:
   val SU(8): Latency=15 Reg=%vreg6
   ch  SU(7): Latency=1
   ch  SU(2): Latency=1
  Successors:
   val SU(10): Latency=2 Reg=%vreg7
   ch  SU(10): Latency=0

SU(10):   SW %vreg7, %vreg5, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 23
  Height             : 0
  Predecessors:
   val SU(9): Latency=2 Reg=%vreg7
   val SU(6): Latency=5 Reg=%vreg5
   ch  SU(9): Latency=0
   ch  SU(7): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(4)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
handleMove 80B -> 8B: %vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
     %vreg3:	[80r,112r:0)  0@80r
        -->	[8r,112r:0)  0@8r
  Tree: 2 @5
Pick node SU(5)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
handleMove 96B -> 12B: %vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
     %vreg4:	[96r,112r:0)  0@96r
        -->	[12r,112r:0)  0@12r
     zero:	EMPTY
        -->	EMPTY
Pick node SU(6)  ILP: 3 / 6 = 0.5 Tree: 1 @0
Scheduling %vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3

*** Renumbered SlotIndexes 12-28 ***
handleMove 112B -> 20B: %vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
     %vreg5:	[112r,176r:0)  0@112r
        -->	[20r,176r:0)  0@20r
     %vreg4:	[12r,112r:0)  0@12r
        -->	[12r,20r:0)  0@12r
     %vreg3:	[8r,112r:0)  0@8r
        -->	[8r,20r:0)  0@8r
Pick node SU(1)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
handleMove 32B -> 24B: %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
     %vreg1:	[32r,64r:0)  0@32r
        -->	[24r,64r:0)  0@24r
     t5:	EMPTY
        -->	EMPTY
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
Pick node SU(2)  ILP: 3 / 6 = 0.5 Tree: 0 @0
Scheduling SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
Pick node SU(3)  ILP: 1 / 7 = 0.142857 Tree: 1 @0
Scheduling %vreg2<def> = LW %vreg1, 16; mem:LD4[%3](align=16) GR32Bit:%vreg2,%vreg1
Pick node SU(7)  ILP: 5 / 11 = 0.454545 Tree: 1 @0
Scheduling SW %vreg2, %vreg5, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
Pick node SU(8)  ILP: 1 / 7 = 0.142857 Tree: 2 @5
Scheduling %vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
  Tree: 1 @5
Pick node SU(9)  ILP: 2 / 22 = 0.0909091 Tree: 2 @5
Scheduling %vreg7<def> = LW %vreg6, 20; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
Pick node SU(10)  ILP: 3 / 24 = 0.125 Tree: 2 @5
Scheduling SW %vreg7, %vreg5, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5
*** Final schedule for BB#0 ***
SU(4):   %vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
SU(5):   %vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
SU(6):   %vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
SU(1):   %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
SU(0):   %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
SU(2):   SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
SU(3):   %vreg2<def> = LW %vreg1, 16; mem:LD4[%3](align=16) GR32Bit:%vreg2,%vreg1
SU(7):   SW %vreg2, %vreg5, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
SU(8):   %vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
SU(9):   %vreg7<def> = LW %vreg6, 20; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
SU(10):   SW %vreg7, %vreg5, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5


*** Renumbered SlotIndexes 4-76 ***

*** Renumbered SlotIndexes 16-104 ***

*** Renumbered SlotIndexes 28-124 ***

*** Renumbered SlotIndexes 40-152 ***

*** Renumbered SlotIndexes 52-172 ***

*** Renumbered SlotIndexes 64-200 ***

*** Renumbered SlotIndexes 76-212 ***

*** Renumbered SlotIndexes 88-224 ***

*** Renumbered SlotIndexes 100-236 ***

*** Renumbered SlotIndexes 112-248 ***

*** Renumbered SlotIndexes 124-260 ***

*** Renumbered SlotIndexes 136-272 ***

*** Renumbered SlotIndexes 148-284 ***

*** Renumbered SlotIndexes 160-296 ***

*** Renumbered SlotIndexes 172-308 ***

*** Renumbered SlotIndexes 184-320 ***

*** Renumbered SlotIndexes 196-332 ***

*** Renumbered SlotIndexes 208-344 ***

*** Renumbered SlotIndexes 220-356 ***

*** Renumbered SlotIndexes 232-368 ***

*** Renumbered SlotIndexes 244-380 ***

*** Renumbered SlotIndexes 256-392 ***

*** Renumbered SlotIndexes 268-404 ***

*** Renumbered SlotIndexes 280-416 ***

*** Renumbered SlotIndexes 292-428 ***

*** Renumbered SlotIndexes 304-440 ***

*** Renumbered SlotIndexes 316-452 ***

*** Renumbered SlotIndexes 328-464 ***

*** Renumbered SlotIndexes 340-476 ***

*** Renumbered SlotIndexes 352-488 ***

*** Renumbered SlotIndexes 364-500 ***

*** Renumbered SlotIndexes 376-512 ***

*** Renumbered SlotIndexes 388-524 ***

*** Renumbered SlotIndexes 400-536 ***
Partitioning instructions of the region into multiple CEs
instr:  %vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
instr:  %vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
instr:  %vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
instr:  %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
instr:  %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
instr:  SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
instr:  %vreg2<def> = LW %vreg1, 16; mem:LD4[%3](align=16) GR32Bit:%vreg2,%vreg1
instr:  SW %vreg2, %vreg5, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
instr:  %vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
instr:  %vreg7<def> = LW %vreg6, 20; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
instr:  SW %vreg7, %vreg5, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
before falloc, state of bb0:BB#0: derived from LLVM BB %redefine_start2.newName01
	%vreg8<def> = ADD %t5, %zero; GR32Bit:%vreg8
	%vreg10<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg10
	%vreg11<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg11
	%vreg12<def> = SRLI %vreg11, 12; GR32Bit:%vreg12,%vreg11
	%vreg13<def> = ADD %vreg10, %vreg12; GR32Bit:%vreg13,%vreg10,%vreg12
	%vreg14<def> = ADDI %zero, 20; GR32Bit:%vreg14
	%vreg15<def> = SRLI %t5, 22; GR32Bit:%vreg15
	%vreg16<def> = SRLI %t5, 12; GR32Bit:%vreg16
	%vreg17<def> = ANDI %vreg16, 15; GR32Bit:%vreg17,%vreg16
	%vreg18<def> = SRLI %t5, 6; GR32Bit:%vreg18
	%vreg19<def> = ANDI %vreg18, 63; GR32Bit:%vreg19,%vreg18
	%vreg20<def> = ADDI %zero, 832; GR32Bit:%vreg20
	%vreg21<def> = MUL %vreg15, %vreg20; GR32Bit:%vreg21,%vreg15,%vreg20
	%vreg22<def> = ADDI %zero, 52; GR32Bit:%vreg22
	%vreg23<def> = MUL %vreg17, %vreg22; GR32Bit:%vreg23,%vreg17,%vreg22
	%vreg24<def> = ADD %vreg23, %vreg19; GR32Bit:%vreg24,%vreg23,%vreg19
	%vreg25<def> = ADD %vreg24, %vreg21; GR32Bit:%vreg25,%vreg24,%vreg21
	%vreg26<def> = MUL %vreg25, %vreg14; GR32Bit:%vreg26,%vreg25,%vreg14
	%vreg9<def> = ADD %vreg13, %vreg26; GR32Bit:%vreg9,%vreg13,%vreg26
	%vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
	%vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
	%vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
	%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
	%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
	SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
	%vreg2<def> = LW %vreg1, 16; mem:LD4[%3](align=16) GR32Bit:%vreg2,%vreg1
	SW %vreg2, %vreg5, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
	%vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
	%vreg7<def> = LW %vreg6, 20; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
	SW %vreg7, %vreg5, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5
	%vreg27<def> = ADD %t5, %zero; GR32Bit:%vreg27
	%vreg29<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg29
	%vreg30<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg30
	%vreg31<def> = SRLI %vreg30, 12; GR32Bit:%vreg31,%vreg30
	%vreg32<def> = ADD %vreg29, %vreg31; GR32Bit:%vreg32,%vreg29,%vreg31
	%vreg33<def> = ADDI %zero, 20; GR32Bit:%vreg33
	%vreg34<def> = SRLI %t5, 22; GR32Bit:%vreg34
	%vreg35<def> = SRLI %t5, 12; GR32Bit:%vreg35
	%vreg36<def> = ANDI %vreg35, 15; GR32Bit:%vreg36,%vreg35
	%vreg37<def> = SRLI %t5, 6; GR32Bit:%vreg37
	%vreg38<def> = ANDI %vreg37, 63; GR32Bit:%vreg38,%vreg37
	%vreg39<def> = ADDI %zero, 832; GR32Bit:%vreg39
	%vreg40<def> = MUL %vreg34, %vreg39; GR32Bit:%vreg40,%vreg34,%vreg39
	%vreg41<def> = ADDI %zero, 52; GR32Bit:%vreg41
	%vreg42<def> = MUL %vreg36, %vreg41; GR32Bit:%vreg42,%vreg36,%vreg41
	%vreg43<def> = ADD %vreg42, %vreg38; GR32Bit:%vreg43,%vreg42,%vreg38
	%vreg44<def> = ADD %vreg43, %vreg40; GR32Bit:%vreg44,%vreg43,%vreg40
	%vreg45<def> = MUL %vreg44, %vreg33; GR32Bit:%vreg45,%vreg44,%vreg33
	%vreg28<def> = ADD %vreg32, %vreg45; GR32Bit:%vreg28,%vreg32,%vreg45
	%vreg46<def> = ADD %t5, %zero; GR32Bit:%vreg46
	%vreg48<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg48
	%vreg49<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg49
	%vreg50<def> = SRLI %vreg49, 12; GR32Bit:%vreg50,%vreg49
	%vreg51<def> = ADD %vreg48, %vreg50; GR32Bit:%vreg51,%vreg48,%vreg50
	%vreg52<def> = ADDI %zero, 20; GR32Bit:%vreg52
	%vreg53<def> = SRLI %t5, 22; GR32Bit:%vreg53
	%vreg54<def> = SRLI %t5, 12; GR32Bit:%vreg54
	%vreg55<def> = ANDI %vreg54, 15; GR32Bit:%vreg55,%vreg54
	%vreg56<def> = SRLI %t5, 6; GR32Bit:%vreg56
	%vreg57<def> = ANDI %vreg56, 63; GR32Bit:%vreg57,%vreg56
	%vreg58<def> = ADDI %zero, 832; GR32Bit:%vreg58
	%vreg59<def> = MUL %vreg53, %vreg58; GR32Bit:%vreg59,%vreg53,%vreg58
	%vreg60<def> = ADDI %zero, 52; GR32Bit:%vreg60
	%vreg61<def> = MUL %vreg55, %vreg60; GR32Bit:%vreg61,%vreg55,%vreg60
	%vreg62<def> = ADD %vreg61, %vreg57; GR32Bit:%vreg62,%vreg61,%vreg57
	%vreg63<def> = ADD %vreg62, %vreg59; GR32Bit:%vreg63,%vreg62,%vreg59
	%vreg64<def> = MUL %vreg63, %vreg52; GR32Bit:%vreg64,%vreg63,%vreg52
	%vreg47<def> = ADD %vreg51, %vreg64; GR32Bit:%vreg47,%vreg51,%vreg64
	%vreg65<def> = ADD %t5, %zero; GR32Bit:%vreg65
	%vreg67<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg67
	%vreg68<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg68
	%vreg69<def> = SRLI %vreg68, 12; GR32Bit:%vreg69,%vreg68
	%vreg70<def> = ADD %vreg67, %vreg69; GR32Bit:%vreg70,%vreg67,%vreg69
	%vreg71<def> = ADDI %zero, 20; GR32Bit:%vreg71
	%vreg72<def> = SRLI %t5, 22; GR32Bit:%vreg72
	%vreg73<def> = SRLI %t5, 12; GR32Bit:%vreg73
	%vreg74<def> = ANDI %vreg73, 15; GR32Bit:%vreg74,%vreg73
	%vreg75<def> = SRLI %t5, 6; GR32Bit:%vreg75
	%vreg76<def> = ANDI %vreg75, 63; GR32Bit:%vreg76,%vreg75
	%vreg77<def> = ADDI %zero, 832; GR32Bit:%vreg77
	%vreg78<def> = MUL %vreg72, %vreg77; GR32Bit:%vreg78,%vreg72,%vreg77
	%vreg79<def> = ADDI %zero, 52; GR32Bit:%vreg79
	%vreg80<def> = MUL %vreg74, %vreg79; GR32Bit:%vreg80,%vreg74,%vreg79
	%vreg81<def> = ADD %vreg80, %vreg76; GR32Bit:%vreg81,%vreg80,%vreg76
	%vreg82<def> = ADD %vreg81, %vreg78; GR32Bit:%vreg82,%vreg81,%vreg78
	%vreg83<def> = MUL %vreg82, %vreg71; GR32Bit:%vreg83,%vreg82,%vreg71
	%vreg66<def> = ADD %vreg70, %vreg83; GR32Bit:%vreg66,%vreg70,%vreg83
Adding all fallocs first to avoid stalls due to sequential fallocs and fbinds
Adding writecm(for writing sync count to context frames) and fbind instructions
live end of child is itself
live end of child is itself
Adding localref sw instructions to hyperOp redefine_start2
Adding writecm instructions to hyperOp redefine_start2
Adding writecmp and sync instructions
Adding endHyperOp instructions to each pHyperOp

*** Renumbered SlotIndexes 412-548 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 424-560 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 436-572 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 448-584 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 460-596 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 472-608 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0
After Shuffling regions of basic block, state of BB#0:
BB#0: derived from LLVM BB %redefine_start2.newName01
	%vreg8<def> = ADD %t5, %zero; GR32Bit:%vreg8
	%vreg10<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg10
	%vreg11<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg11
	%vreg12<def> = SRLI %vreg11, 12; GR32Bit:%vreg12,%vreg11
	%vreg13<def> = ADD %vreg10, %vreg12; GR32Bit:%vreg13,%vreg10,%vreg12
	%vreg14<def> = ADDI %zero, 20; GR32Bit:%vreg14
	%vreg15<def> = SRLI %t5, 22; GR32Bit:%vreg15
	%vreg16<def> = SRLI %t5, 12; GR32Bit:%vreg16
	%vreg17<def> = ANDI %vreg16, 15; GR32Bit:%vreg17,%vreg16
	%vreg18<def> = SRLI %t5, 6; GR32Bit:%vreg18
	%vreg19<def> = ANDI %vreg18, 63; GR32Bit:%vreg19,%vreg18
	%vreg20<def> = ADDI %zero, 832; GR32Bit:%vreg20
	%vreg21<def> = MUL %vreg15, %vreg20; GR32Bit:%vreg21,%vreg15,%vreg20
	%vreg22<def> = ADDI %zero, 52; GR32Bit:%vreg22
	%vreg23<def> = MUL %vreg17, %vreg22; GR32Bit:%vreg23,%vreg17,%vreg22
	%vreg24<def> = ADD %vreg23, %vreg19; GR32Bit:%vreg24,%vreg23,%vreg19
	%vreg25<def> = ADD %vreg24, %vreg21; GR32Bit:%vreg25,%vreg24,%vreg21
	%vreg26<def> = MUL %vreg25, %vreg14; GR32Bit:%vreg26,%vreg25,%vreg14
	%vreg9<def> = ADD %vreg13, %vreg26; GR32Bit:%vreg9,%vreg13,%vreg26
	%vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
	%vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
	%vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
	%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
	%vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
	SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
	%vreg2<def> = LW %vreg1, 16; mem:LD4[%3](align=16) GR32Bit:%vreg2,%vreg1
	SW %vreg2, %vreg5, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
	%vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
	%vreg7<def> = LW %vreg6, 20; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
	SW %vreg7, %vreg5, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5
	FDELETE %t4, 0
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg27<def> = ADD %t5, %zero; GR32Bit:%vreg27
	%vreg29<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg29
	%vreg30<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg30
	%vreg31<def> = SRLI %vreg30, 12; GR32Bit:%vreg31,%vreg30
	%vreg32<def> = ADD %vreg29, %vreg31; GR32Bit:%vreg32,%vreg29,%vreg31
	%vreg33<def> = ADDI %zero, 20; GR32Bit:%vreg33
	%vreg34<def> = SRLI %t5, 22; GR32Bit:%vreg34
	%vreg35<def> = SRLI %t5, 12; GR32Bit:%vreg35
	%vreg36<def> = ANDI %vreg35, 15; GR32Bit:%vreg36,%vreg35
	%vreg37<def> = SRLI %t5, 6; GR32Bit:%vreg37
	%vreg38<def> = ANDI %vreg37, 63; GR32Bit:%vreg38,%vreg37
	%vreg39<def> = ADDI %zero, 832; GR32Bit:%vreg39
	%vreg40<def> = MUL %vreg34, %vreg39; GR32Bit:%vreg40,%vreg34,%vreg39
	%vreg41<def> = ADDI %zero, 52; GR32Bit:%vreg41
	%vreg42<def> = MUL %vreg36, %vreg41; GR32Bit:%vreg42,%vreg36,%vreg41
	%vreg43<def> = ADD %vreg42, %vreg38; GR32Bit:%vreg43,%vreg42,%vreg38
	%vreg44<def> = ADD %vreg43, %vreg40; GR32Bit:%vreg44,%vreg43,%vreg40
	%vreg45<def> = MUL %vreg44, %vreg33; GR32Bit:%vreg45,%vreg44,%vreg33
	%vreg28<def> = ADD %vreg32, %vreg45; GR32Bit:%vreg28,%vreg32,%vreg45
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg46<def> = ADD %t5, %zero; GR32Bit:%vreg46
	%vreg48<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg48
	%vreg49<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg49
	%vreg50<def> = SRLI %vreg49, 12; GR32Bit:%vreg50,%vreg49
	%vreg51<def> = ADD %vreg48, %vreg50; GR32Bit:%vreg51,%vreg48,%vreg50
	%vreg52<def> = ADDI %zero, 20; GR32Bit:%vreg52
	%vreg53<def> = SRLI %t5, 22; GR32Bit:%vreg53
	%vreg54<def> = SRLI %t5, 12; GR32Bit:%vreg54
	%vreg55<def> = ANDI %vreg54, 15; GR32Bit:%vreg55,%vreg54
	%vreg56<def> = SRLI %t5, 6; GR32Bit:%vreg56
	%vreg57<def> = ANDI %vreg56, 63; GR32Bit:%vreg57,%vreg56
	%vreg58<def> = ADDI %zero, 832; GR32Bit:%vreg58
	%vreg59<def> = MUL %vreg53, %vreg58; GR32Bit:%vreg59,%vreg53,%vreg58
	%vreg60<def> = ADDI %zero, 52; GR32Bit:%vreg60
	%vreg61<def> = MUL %vreg55, %vreg60; GR32Bit:%vreg61,%vreg55,%vreg60
	%vreg62<def> = ADD %vreg61, %vreg57; GR32Bit:%vreg62,%vreg61,%vreg57
	%vreg63<def> = ADD %vreg62, %vreg59; GR32Bit:%vreg63,%vreg62,%vreg59
	%vreg64<def> = MUL %vreg63, %vreg52; GR32Bit:%vreg64,%vreg63,%vreg52
	%vreg47<def> = ADD %vreg51, %vreg64; GR32Bit:%vreg47,%vreg51,%vreg64
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg65<def> = ADD %t5, %zero; GR32Bit:%vreg65
	%vreg67<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg67
	%vreg68<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg68
	%vreg69<def> = SRLI %vreg68, 12; GR32Bit:%vreg69,%vreg68
	%vreg70<def> = ADD %vreg67, %vreg69; GR32Bit:%vreg70,%vreg67,%vreg69
	%vreg71<def> = ADDI %zero, 20; GR32Bit:%vreg71
	%vreg72<def> = SRLI %t5, 22; GR32Bit:%vreg72
	%vreg73<def> = SRLI %t5, 12; GR32Bit:%vreg73
	%vreg74<def> = ANDI %vreg73, 15; GR32Bit:%vreg74,%vreg73
	%vreg75<def> = SRLI %t5, 6; GR32Bit:%vreg75
	%vreg76<def> = ANDI %vreg75, 63; GR32Bit:%vreg76,%vreg75
	%vreg77<def> = ADDI %zero, 832; GR32Bit:%vreg77
	%vreg78<def> = MUL %vreg72, %vreg77; GR32Bit:%vreg78,%vreg72,%vreg77
	%vreg79<def> = ADDI %zero, 52; GR32Bit:%vreg79
	%vreg80<def> = MUL %vreg74, %vreg79; GR32Bit:%vreg80,%vreg74,%vreg79
	%vreg81<def> = ADD %vreg80, %vreg76; GR32Bit:%vreg81,%vreg80,%vreg76
	%vreg82<def> = ADD %vreg81, %vreg78; GR32Bit:%vreg82,%vreg81,%vreg78
	%vreg83<def> = MUL %vreg82, %vreg71; GR32Bit:%vreg83,%vreg82,%vreg71
	%vreg66<def> = ADD %vreg70, %vreg83; GR32Bit:%vreg66,%vreg70,%vreg83
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 316-684 ***

*** Renumbered SlotIndexes 304-704 ***

*** Renumbered SlotIndexes 216-752 ***

*** Renumbered SlotIndexes 204-772 ***

*** Renumbered SlotIndexes 204-788 ***

*** Renumbered SlotIndexes 112-832 ***

*** Renumbered SlotIndexes 100-852 ***

*** Renumbered SlotIndexes 100-868 ***

*** Renumbered SlotIndexes 100-884 ***

*** Renumbered SlotIndexes 100-900 ***

*** Renumbered SlotIndexes 100-916 ***

*** Renumbered SlotIndexes 100-932 ***

*** Renumbered SlotIndexes 100-948 ***

*** Renumbered SlotIndexes 12-996 ***
Creating pHyperOp bundles for CEs for bb0
  %vreg27<def> = ADD %t5, %zero; GR32Bit:%vreg27
starting at   %vreg8<def> = ADD %t5, %zero; GR32Bit:%vreg8
  %vreg46<def> = ADD %t5, %zero; GR32Bit:%vreg46
starting at   %vreg27<def> = ADD %t5, %zero; GR32Bit:%vreg27
  %vreg65<def> = ADD %t5, %zero; GR32Bit:%vreg65
starting at   %vreg46<def> = ADD %t5, %zero; GR32Bit:%vreg46
starting at   %vreg65<def> = ADD %t5, %zero; GR32Bit:%vreg65
After bundling, state of BB0:BB#0: derived from LLVM BB %redefine_start2.newName01
	%vreg8<def> = ADD %t5, %zero; GR32Bit:%vreg8
	  * %vreg10<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg10
	  * %vreg11<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg11
	  * %vreg12<def> = SRLI %vreg11, 12; GR32Bit:%vreg12,%vreg11
	  * %vreg13<def> = ADD %vreg10, %vreg12; GR32Bit:%vreg13,%vreg10,%vreg12
	  * %vreg14<def> = ADDI %zero, 20; GR32Bit:%vreg14
	  * %vreg15<def> = SRLI %t5, 22; GR32Bit:%vreg15
	  * %vreg16<def> = SRLI %t5, 12; GR32Bit:%vreg16
	  * %vreg17<def> = ANDI %vreg16, 15; GR32Bit:%vreg17,%vreg16
	  * %vreg18<def> = SRLI %t5, 6; GR32Bit:%vreg18
	  * %vreg19<def> = ANDI %vreg18, 63; GR32Bit:%vreg19,%vreg18
	  * %vreg20<def> = ADDI %zero, 832; GR32Bit:%vreg20
	  * %vreg21<def> = MUL %vreg15, %vreg20; GR32Bit:%vreg21,%vreg15,%vreg20
	  * %vreg22<def> = ADDI %zero, 52; GR32Bit:%vreg22
	  * %vreg23<def> = MUL %vreg17, %vreg22; GR32Bit:%vreg23,%vreg17,%vreg22
	  * %vreg24<def> = ADD %vreg23, %vreg19; GR32Bit:%vreg24,%vreg23,%vreg19
	  * %vreg25<def> = ADD %vreg24, %vreg21; GR32Bit:%vreg25,%vreg24,%vreg21
	  * %vreg26<def> = MUL %vreg25, %vreg14; GR32Bit:%vreg26,%vreg25,%vreg14
	  * %vreg9<def> = ADD %vreg13, %vreg26; GR32Bit:%vreg9,%vreg13,%vreg26
	  * %vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
	  * %vreg4<def> = ADDI %zero, <ga:@redefine_out_b>[TF=3]; GR32Bit:%vreg4
	  * %vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
	  * %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
	  * %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
	  * SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
	  * %vreg2<def> = LW %vreg1, 16; mem:LD4[%3](align=16) GR32Bit:%vreg2,%vreg1
	  * SW %vreg2, %vreg5, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
	  * %vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
	  * %vreg7<def> = LW %vreg6, 20; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
	  * SW %vreg7, %vreg5, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5
	  * FDELETE %t4, 0
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg27<def> = ADD %t5, %zero; GR32Bit:%vreg27
	  * %vreg29<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg29
	  * %vreg30<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg30
	  * %vreg31<def> = SRLI %vreg30, 12; GR32Bit:%vreg31,%vreg30
	  * %vreg32<def> = ADD %vreg29, %vreg31; GR32Bit:%vreg32,%vreg29,%vreg31
	  * %vreg33<def> = ADDI %zero, 20; GR32Bit:%vreg33
	  * %vreg34<def> = SRLI %t5, 22; GR32Bit:%vreg34
	  * %vreg35<def> = SRLI %t5, 12; GR32Bit:%vreg35
	  * %vreg36<def> = ANDI %vreg35, 15; GR32Bit:%vreg36,%vreg35
	  * %vreg37<def> = SRLI %t5, 6; GR32Bit:%vreg37
	  * %vreg38<def> = ANDI %vreg37, 63; GR32Bit:%vreg38,%vreg37
	  * %vreg39<def> = ADDI %zero, 832; GR32Bit:%vreg39
	  * %vreg40<def> = MUL %vreg34, %vreg39; GR32Bit:%vreg40,%vreg34,%vreg39
	  * %vreg41<def> = ADDI %zero, 52; GR32Bit:%vreg41
	  * %vreg42<def> = MUL %vreg36, %vreg41; GR32Bit:%vreg42,%vreg36,%vreg41
	  * %vreg43<def> = ADD %vreg42, %vreg38; GR32Bit:%vreg43,%vreg42,%vreg38
	  * %vreg44<def> = ADD %vreg43, %vreg40; GR32Bit:%vreg44,%vreg43,%vreg40
	  * %vreg45<def> = MUL %vreg44, %vreg33; GR32Bit:%vreg45,%vreg44,%vreg33
	  * %vreg28<def> = ADD %vreg32, %vreg45; GR32Bit:%vreg28,%vreg32,%vreg45
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg46<def> = ADD %t5, %zero; GR32Bit:%vreg46
	  * %vreg48<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg48
	  * %vreg49<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg49
	  * %vreg50<def> = SRLI %vreg49, 12; GR32Bit:%vreg50,%vreg49
	  * %vreg51<def> = ADD %vreg48, %vreg50; GR32Bit:%vreg51,%vreg48,%vreg50
	  * %vreg52<def> = ADDI %zero, 20; GR32Bit:%vreg52
	  * %vreg53<def> = SRLI %t5, 22; GR32Bit:%vreg53
	  * %vreg54<def> = SRLI %t5, 12; GR32Bit:%vreg54
	  * %vreg55<def> = ANDI %vreg54, 15; GR32Bit:%vreg55,%vreg54
	  * %vreg56<def> = SRLI %t5, 6; GR32Bit:%vreg56
	  * %vreg57<def> = ANDI %vreg56, 63; GR32Bit:%vreg57,%vreg56
	  * %vreg58<def> = ADDI %zero, 832; GR32Bit:%vreg58
	  * %vreg59<def> = MUL %vreg53, %vreg58; GR32Bit:%vreg59,%vreg53,%vreg58
	  * %vreg60<def> = ADDI %zero, 52; GR32Bit:%vreg60
	  * %vreg61<def> = MUL %vreg55, %vreg60; GR32Bit:%vreg61,%vreg55,%vreg60
	  * %vreg62<def> = ADD %vreg61, %vreg57; GR32Bit:%vreg62,%vreg61,%vreg57
	  * %vreg63<def> = ADD %vreg62, %vreg59; GR32Bit:%vreg63,%vreg62,%vreg59
	  * %vreg64<def> = MUL %vreg63, %vreg52; GR32Bit:%vreg64,%vreg63,%vreg52
	  * %vreg47<def> = ADD %vreg51, %vreg64; GR32Bit:%vreg47,%vreg51,%vreg64
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg65<def> = ADD %t5, %zero; GR32Bit:%vreg65
	  * %vreg67<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg67
	  * %vreg68<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg68
	  * %vreg69<def> = SRLI %vreg68, 12; GR32Bit:%vreg69,%vreg68
	  * %vreg70<def> = ADD %vreg67, %vreg69; GR32Bit:%vreg70,%vreg67,%vreg69
	  * %vreg71<def> = ADDI %zero, 20; GR32Bit:%vreg71
	  * %vreg72<def> = SRLI %t5, 22; GR32Bit:%vreg72
	  * %vreg73<def> = SRLI %t5, 12; GR32Bit:%vreg73
	  * %vreg74<def> = ANDI %vreg73, 15; GR32Bit:%vreg74,%vreg73
	  * %vreg75<def> = SRLI %t5, 6; GR32Bit:%vreg75
	  * %vreg76<def> = ANDI %vreg75, 63; GR32Bit:%vreg76,%vreg75
	  * %vreg77<def> = ADDI %zero, 832; GR32Bit:%vreg77
	  * %vreg78<def> = MUL %vreg72, %vreg77; GR32Bit:%vreg78,%vreg72,%vreg77
	  * %vreg79<def> = ADDI %zero, 52; GR32Bit:%vreg79
	  * %vreg80<def> = MUL %vreg74, %vreg79; GR32Bit:%vreg80,%vreg74,%vreg79
	  * %vreg81<def> = ADD %vreg80, %vreg76; GR32Bit:%vreg81,%vreg80,%vreg76
	  * %vreg82<def> = ADD %vreg81, %vreg78; GR32Bit:%vreg82,%vreg81,%vreg78
	  * %vreg83<def> = MUL %vreg82, %vreg71; GR32Bit:%vreg83,%vreg82,%vreg71
	  * %vreg66<def> = ADD %vreg70, %vreg83; GR32Bit:%vreg66,%vreg70,%vreg83
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
Patching the instructions that are supposed to use the physical registers r30 and r31
Computing live-in reg-units in ABI blocks.
Created 0 new intervals.

*** Renumbered SlotIndexes 8-1016 ***
********** INTERVALS **********
t5 = EMPTY
zero = EMPTY
%vreg0 = [200r,232r:0)  0@200r
%vreg1 = [192r,216r:0)  0@192r
%vreg2 = [216r,224r:0)  0@216r
%vreg3 = [168r,184r:0)  0@168r
%vreg4 = [176r,184r:0)  0@176r
%vreg5 = [184r,248r:0)  0@184r
%vreg6 = [232r,240r:0)  0@232r
%vreg7 = [240r,248r:0)  0@240r
%vreg8 = [4r,4d:0)  0@4r
%vreg9 = [160r,160d:0)  0@160r
%vreg10 = [24r,48r:0)  0@24r
%vreg11 = [32r,40r:0)  0@32r
%vreg12 = [40r,48r:0)  0@40r
%vreg13 = [48r,160r:0)  0@48r
%vreg14 = [56r,152r:0)  0@56r
%vreg15 = [64r,112r:0)  0@64r
%vreg16 = [72r,80r:0)  0@72r
%vreg17 = [80r,128r:0)  0@80r
%vreg18 = [88r,96r:0)  0@88r
%vreg19 = [96r,136r:0)  0@96r
%vreg20 = [104r,112r:0)  0@104r
%vreg21 = [112r,144r:0)  0@112r
%vreg22 = [120r,128r:0)  0@120r
%vreg23 = [128r,136r:0)  0@128r
%vreg24 = [136r,144r:0)  0@136r
%vreg25 = [144r,152r:0)  0@144r
%vreg26 = [152r,160r:0)  0@152r
%vreg27 = [288r,288d:0)  0@288r
%vreg28 = [432r,432d:0)  0@432r
%vreg29 = [296r,320r:0)  0@296r
%vreg30 = [304r,312r:0)  0@304r
%vreg31 = [312r,320r:0)  0@312r
%vreg32 = [320r,432r:0)  0@320r
%vreg33 = [328r,424r:0)  0@328r
%vreg34 = [336r,384r:0)  0@336r
%vreg35 = [344r,352r:0)  0@344r
%vreg36 = [352r,400r:0)  0@352r
%vreg37 = [360r,368r:0)  0@360r
%vreg38 = [368r,408r:0)  0@368r
%vreg39 = [376r,384r:0)  0@376r
%vreg40 = [384r,416r:0)  0@384r
%vreg41 = [392r,400r:0)  0@392r
%vreg42 = [400r,408r:0)  0@400r
%vreg43 = [408r,416r:0)  0@408r
%vreg44 = [416r,424r:0)  0@416r
%vreg45 = [424r,432r:0)  0@424r
%vreg46 = [464r,464d:0)  0@464r
%vreg47 = [608r,608d:0)  0@608r
%vreg48 = [472r,496r:0)  0@472r
%vreg49 = [480r,488r:0)  0@480r
%vreg50 = [488r,496r:0)  0@488r
%vreg51 = [496r,608r:0)  0@496r
%vreg52 = [504r,600r:0)  0@504r
%vreg53 = [512r,560r:0)  0@512r
%vreg54 = [520r,528r:0)  0@520r
%vreg55 = [528r,576r:0)  0@528r
%vreg56 = [536r,544r:0)  0@536r
%vreg57 = [544r,584r:0)  0@544r
%vreg58 = [552r,560r:0)  0@552r
%vreg59 = [560r,592r:0)  0@560r
%vreg60 = [568r,576r:0)  0@568r
%vreg61 = [576r,584r:0)  0@576r
%vreg62 = [584r,592r:0)  0@584r
%vreg63 = [592r,600r:0)  0@592r
%vreg64 = [600r,608r:0)  0@600r
%vreg65 = [640r,640d:0)  0@640r
%vreg66 = [784r,784d:0)  0@784r
%vreg67 = [648r,672r:0)  0@648r
%vreg68 = [656r,664r:0)  0@656r
%vreg69 = [664r,672r:0)  0@664r
%vreg70 = [672r,784r:0)  0@672r
%vreg71 = [680r,776r:0)  0@680r
%vreg72 = [688r,736r:0)  0@688r
%vreg73 = [696r,704r:0)  0@696r
%vreg74 = [704r,752r:0)  0@704r
%vreg75 = [712r,720r:0)  0@712r
%vreg76 = [720r,760r:0)  0@720r
%vreg77 = [728r,736r:0)  0@728r
%vreg78 = [736r,768r:0)  0@736r
%vreg79 = [744r,752r:0)  0@744r
%vreg80 = [752r,760r:0)  0@752r
%vreg81 = [760r,768r:0)  0@760r
%vreg82 = [768r,776r:0)  0@768r
%vreg83 = [776r,784r:0)  0@776r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start2: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start2.newName01
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg10<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg10
4B		  * %vreg11<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg11
4B		  * %vreg12<def> = SRLI %vreg11, 12; GR32Bit:%vreg12,%vreg11
4B		  * %vreg13<def> = ADD %vreg10, %vreg12; GR32Bit:%vreg13,%vreg10,%vreg12
4B		  * %vreg14<def> = ADDI %zero, 20; GR32Bit:%vreg14
4B		  * %vreg15<def> = SRLI %t5, 22; GR32Bit:%vreg15
4B		  * %vreg16<def> = SRLI %t5, 12; GR32Bit:%vreg16
4B		  * %vreg17<def> = ANDI %vreg16, 15; GR32Bit:%vreg17,%vreg16
4B		  * %vreg18<def> = SRLI %t5, 6; GR32Bit:%vreg18
4B		  * %vreg19<def> = ANDI %vreg18, 63; GR32Bit:%vreg19,%vreg18
4B		  * %vreg20<def> = ADDI %zero, 832; GR32Bit:%vreg20
4B		  * %vreg21<def> = MUL %vreg15, %vreg20; GR32Bit:%vreg21,%vreg15,%vreg20
4B		  * %vreg22<def> = ADDI %zero, 52; GR32Bit:%vreg22
4B		  * %vreg23<def> = MUL %vreg17, %vreg22; GR32Bit:%vreg23,%vreg17,%vreg22
4B		  * %vreg24<def> = ADD %vreg23, %vreg19; GR32Bit:%vreg24,%vreg23,%vreg19
4B		  * %vreg25<def> = ADD %vreg24, %vreg21; GR32Bit:%vreg25,%vreg24,%vreg21
4B		  * %vreg26<def> = MUL %vreg25, %vreg14; GR32Bit:%vreg26,%vreg25,%vreg14
4B		  * %t5<def> = ADD %vreg13, %vreg26; GR32Bit:%vreg13,%vreg26
4B		  * %vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
4B		  * %vreg4<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg4
4B		  * SRLI %vreg4, %vreg4, 12; GR32Bit:%vreg4
4B		  * %vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
4B		  * %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
4B		  * %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
4B		  * SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
4B		  * %vreg2<def> = LW %vreg1, 16; mem:LD4[%3](align=16) GR32Bit:%vreg2,%vreg1
4B		  * SW %vreg2, %vreg5, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
4B		  * %vreg6<def> = LW %vreg0, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
4B		  * %vreg7<def> = LW %vreg6, 20; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
4B		  * SW %vreg7, %vreg5, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5
4B		  * FDELETE %t4, 0
4B		  * END 0
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
288B		%t4<def> = ADD %t5, %zero
288B		  * %vreg29<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg29
288B		  * %vreg30<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg30
288B		  * %vreg31<def> = SRLI %vreg30, 12; GR32Bit:%vreg31,%vreg30
288B		  * %vreg32<def> = ADD %vreg29, %vreg31; GR32Bit:%vreg32,%vreg29,%vreg31
288B		  * %vreg33<def> = ADDI %zero, 20; GR32Bit:%vreg33
288B		  * %vreg34<def> = SRLI %t5, 22; GR32Bit:%vreg34
288B		  * %vreg35<def> = SRLI %t5, 12; GR32Bit:%vreg35
288B		  * %vreg36<def> = ANDI %vreg35, 15; GR32Bit:%vreg36,%vreg35
288B		  * %vreg37<def> = SRLI %t5, 6; GR32Bit:%vreg37
288B		  * %vreg38<def> = ANDI %vreg37, 63; GR32Bit:%vreg38,%vreg37
288B		  * %vreg39<def> = ADDI %zero, 832; GR32Bit:%vreg39
288B		  * %vreg40<def> = MUL %vreg34, %vreg39; GR32Bit:%vreg40,%vreg34,%vreg39
288B		  * %vreg41<def> = ADDI %zero, 52; GR32Bit:%vreg41
288B		  * %vreg42<def> = MUL %vreg36, %vreg41; GR32Bit:%vreg42,%vreg36,%vreg41
288B		  * %vreg43<def> = ADD %vreg42, %vreg38; GR32Bit:%vreg43,%vreg42,%vreg38
288B		  * %vreg44<def> = ADD %vreg43, %vreg40; GR32Bit:%vreg44,%vreg43,%vreg40
288B		  * %vreg45<def> = MUL %vreg44, %vreg33; GR32Bit:%vreg45,%vreg44,%vreg33
288B		  * %t5<def> = ADD %vreg32, %vreg45; GR32Bit:%vreg32,%vreg45
288B		  * END 0
288B		  * %zero<def> = ADDI %zero, 0
288B		  * %zero<def> = ADDI %zero, 0
464B		%t4<def> = ADD %t5, %zero
464B		  * %vreg48<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg48
464B		  * %vreg49<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg49
464B		  * %vreg50<def> = SRLI %vreg49, 12; GR32Bit:%vreg50,%vreg49
464B		  * %vreg51<def> = ADD %vreg48, %vreg50; GR32Bit:%vreg51,%vreg48,%vreg50
464B		  * %vreg52<def> = ADDI %zero, 20; GR32Bit:%vreg52
464B		  * %vreg53<def> = SRLI %t5, 22; GR32Bit:%vreg53
464B		  * %vreg54<def> = SRLI %t5, 12; GR32Bit:%vreg54
464B		  * %vreg55<def> = ANDI %vreg54, 15; GR32Bit:%vreg55,%vreg54
464B		  * %vreg56<def> = SRLI %t5, 6; GR32Bit:%vreg56
464B		  * %vreg57<def> = ANDI %vreg56, 63; GR32Bit:%vreg57,%vreg56
464B		  * %vreg58<def> = ADDI %zero, 832; GR32Bit:%vreg58
464B		  * %vreg59<def> = MUL %vreg53, %vreg58; GR32Bit:%vreg59,%vreg53,%vreg58
464B		  * %vreg60<def> = ADDI %zero, 52; GR32Bit:%vreg60
464B		  * %vreg61<def> = MUL %vreg55, %vreg60; GR32Bit:%vreg61,%vreg55,%vreg60
464B		  * %vreg62<def> = ADD %vreg61, %vreg57; GR32Bit:%vreg62,%vreg61,%vreg57
464B		  * %vreg63<def> = ADD %vreg62, %vreg59; GR32Bit:%vreg63,%vreg62,%vreg59
464B		  * %vreg64<def> = MUL %vreg63, %vreg52; GR32Bit:%vreg64,%vreg63,%vreg52
464B		  * %t5<def> = ADD %vreg51, %vreg64; GR32Bit:%vreg51,%vreg64
464B		  * END 0
464B		  * %zero<def> = ADDI %zero, 0
464B		  * %zero<def> = ADDI %zero, 0
640B		%t4<def> = ADD %t5, %zero
640B		  * %vreg67<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg67
640B		  * %vreg68<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg68
640B		  * %vreg69<def> = SRLI %vreg68, 12; GR32Bit:%vreg69,%vreg68
640B		  * %vreg70<def> = ADD %vreg67, %vreg69; GR32Bit:%vreg70,%vreg67,%vreg69
640B		  * %vreg71<def> = ADDI %zero, 20; GR32Bit:%vreg71
640B		  * %vreg72<def> = SRLI %t5, 22; GR32Bit:%vreg72
640B		  * %vreg73<def> = SRLI %t5, 12; GR32Bit:%vreg73
640B		  * %vreg74<def> = ANDI %vreg73, 15; GR32Bit:%vreg74,%vreg73
640B		  * %vreg75<def> = SRLI %t5, 6; GR32Bit:%vreg75
640B		  * %vreg76<def> = ANDI %vreg75, 63; GR32Bit:%vreg76,%vreg75
640B		  * %vreg77<def> = ADDI %zero, 832; GR32Bit:%vreg77
640B		  * %vreg78<def> = MUL %vreg72, %vreg77; GR32Bit:%vreg78,%vreg72,%vreg77
640B		  * %vreg79<def> = ADDI %zero, 52; GR32Bit:%vreg79
640B		  * %vreg80<def> = MUL %vreg74, %vreg79; GR32Bit:%vreg80,%vreg74,%vreg79
640B		  * %vreg81<def> = ADD %vreg80, %vreg76; GR32Bit:%vreg81,%vreg80,%vreg76
640B		  * %vreg82<def> = ADD %vreg81, %vreg78; GR32Bit:%vreg82,%vreg81,%vreg78
640B		  * %vreg83<def> = MUL %vreg82, %vreg71; GR32Bit:%vreg83,%vreg82,%vreg71
640B		  * %t5<def> = ADD %vreg70, %vreg83; GR32Bit:%vreg70,%vreg83
640B		  * END 0
640B		  * %zero<def> = ADDI %zero, 0
640B		  * %zero<def> = ADDI %zero, 0

# End machine code for function redefine_start2.

********** COMPUTING LIVE DEBUG VARIABLES: redefine_start2 **********
********** DEBUG VARIABLES **********
********** Compute Spill Weights **********
********** Function: redefine_start2
********** GREEDY REGISTER ALLOCATION **********
********** Function: redefine_start2

selectOrSplit GR32Bit:%vreg13 [48r,160r:0)  0@48r
assigning %vreg13 to %t0: t0

selectOrSplit GR32Bit:%vreg32 [320r,432r:0)  0@320r
assigning %vreg32 to %t0: t0

selectOrSplit GR32Bit:%vreg51 [496r,608r:0)  0@496r
assigning %vreg51 to %t0: t0

selectOrSplit GR32Bit:%vreg70 [672r,784r:0)  0@672r
assigning %vreg70 to %t0: t0

selectOrSplit GR32Bit:%vreg14 [56r,152r:0)  0@56r
assigning %vreg14 to %t1: t1

selectOrSplit GR32Bit:%vreg33 [328r,424r:0)  0@328r
assigning %vreg33 to %t1: t1

selectOrSplit GR32Bit:%vreg52 [504r,600r:0)  0@504r
assigning %vreg52 to %t1: t1

selectOrSplit GR32Bit:%vreg71 [680r,776r:0)  0@680r
assigning %vreg71 to %t1: t1

selectOrSplit GR32Bit:%vreg5 [184r,248r:0)  0@184r
assigning %vreg5 to %t0: t0

selectOrSplit GR32Bit:%vreg15 [64r,112r:0)  0@64r
assigning %vreg15 to %t2: t2

selectOrSplit GR32Bit:%vreg17 [80r,128r:0)  0@80r
assigning %vreg17 to %fp: fp

selectOrSplit GR32Bit:%vreg34 [336r,384r:0)  0@336r
assigning %vreg34 to %t2: t2

selectOrSplit GR32Bit:%vreg36 [352r,400r:0)  0@352r
assigning %vreg36 to %fp: fp

selectOrSplit GR32Bit:%vreg53 [512r,560r:0)  0@512r
assigning %vreg53 to %t2: t2

selectOrSplit GR32Bit:%vreg55 [528r,576r:0)  0@528r
assigning %vreg55 to %fp: fp

selectOrSplit GR32Bit:%vreg72 [688r,736r:0)  0@688r
assigning %vreg72 to %t2: t2

selectOrSplit GR32Bit:%vreg74 [704r,752r:0)  0@704r
assigning %vreg74 to %fp: fp

selectOrSplit GR32Bit:%vreg19 [96r,136r:0)  0@96r
assigning %vreg19 to %a0: a0

selectOrSplit GR32Bit:%vreg38 [368r,408r:0)  0@368r
assigning %vreg38 to %a0: a0

selectOrSplit GR32Bit:%vreg57 [544r,584r:0)  0@544r
assigning %vreg57 to %a0: a0

selectOrSplit GR32Bit:%vreg76 [720r,760r:0)  0@720r
assigning %vreg76 to %a0: a0

selectOrSplit GR32Bit:%vreg0 [200r,232r:0)  0@200r
assigning %vreg0 to %t1: t1

selectOrSplit GR32Bit:%vreg21 [112r,144r:0)  0@112r
assigning %vreg21 to %t2: t2

selectOrSplit GR32Bit:%vreg40 [384r,416r:0)  0@384r
assigning %vreg40 to %t2: t2

selectOrSplit GR32Bit:%vreg59 [560r,592r:0)  0@560r
assigning %vreg59 to %t2: t2

selectOrSplit GR32Bit:%vreg78 [736r,768r:0)  0@736r
assigning %vreg78 to %t2: t2

selectOrSplit GR32Bit:%vreg1 [192r,216r:0)  0@192r
assigning %vreg1 to %t2: t2

selectOrSplit GR32Bit:%vreg10 [24r,48r:0)  0@24r
assigning %vreg10 to %t0: t0

selectOrSplit GR32Bit:%vreg29 [296r,320r:0)  0@296r
assigning %vreg29 to %t0: t0

selectOrSplit GR32Bit:%vreg48 [472r,496r:0)  0@472r
assigning %vreg48 to %t0: t0

selectOrSplit GR32Bit:%vreg67 [648r,672r:0)  0@648r
assigning %vreg67 to %t0: t0

selectOrSplit GR32Bit:%vreg3 [168r,184r:0)  0@168r
assigning %vreg3 to %t0: t0

selectOrSplit GR32Bit:%vreg2 [216r,224r:0)  0@216r
assigning %vreg2 to %t2: t2

selectOrSplit GR32Bit:%vreg4 [176r,184r:0)  0@176r
assigning %vreg4 to %t1: t1

selectOrSplit GR32Bit:%vreg6 [232r,240r:0)  0@232r
assigning %vreg6 to %t1: t1

selectOrSplit GR32Bit:%vreg7 [240r,248r:0)  0@240r
assigning %vreg7 to %t1: t1

selectOrSplit GR32Bit:%vreg11 [32r,40r:0)  0@32r
assigning %vreg11 to %t1: t1

selectOrSplit GR32Bit:%vreg12 [40r,48r:0)  0@40r
assigning %vreg12 to %t1: t1

selectOrSplit GR32Bit:%vreg16 [72r,80r:0)  0@72r
assigning %vreg16 to %fp: fp

selectOrSplit GR32Bit:%vreg18 [88r,96r:0)  0@88r
assigning %vreg18 to %a0: a0

selectOrSplit GR32Bit:%vreg20 [104r,112r:0)  0@104r
assigning %vreg20 to %a1: a1

selectOrSplit GR32Bit:%vreg22 [120r,128r:0)  0@120r
assigning %vreg22 to %a1: a1

selectOrSplit GR32Bit:%vreg23 [128r,136r:0)  0@128r
assigning %vreg23 to %fp: fp

selectOrSplit GR32Bit:%vreg24 [136r,144r:0)  0@136r
assigning %vreg24 to %fp: fp

selectOrSplit GR32Bit:%vreg25 [144r,152r:0)  0@144r
assigning %vreg25 to %t2: t2

selectOrSplit GR32Bit:%vreg26 [152r,160r:0)  0@152r
assigning %vreg26 to %t1: t1

selectOrSplit GR32Bit:%vreg30 [304r,312r:0)  0@304r
assigning %vreg30 to %t1: t1

selectOrSplit GR32Bit:%vreg31 [312r,320r:0)  0@312r
assigning %vreg31 to %t1: t1

selectOrSplit GR32Bit:%vreg35 [344r,352r:0)  0@344r
assigning %vreg35 to %fp: fp

selectOrSplit GR32Bit:%vreg37 [360r,368r:0)  0@360r
assigning %vreg37 to %a0: a0

selectOrSplit GR32Bit:%vreg39 [376r,384r:0)  0@376r
assigning %vreg39 to %a1: a1

selectOrSplit GR32Bit:%vreg41 [392r,400r:0)  0@392r
assigning %vreg41 to %a1: a1

selectOrSplit GR32Bit:%vreg42 [400r,408r:0)  0@400r
assigning %vreg42 to %fp: fp

selectOrSplit GR32Bit:%vreg43 [408r,416r:0)  0@408r
assigning %vreg43 to %fp: fp

selectOrSplit GR32Bit:%vreg44 [416r,424r:0)  0@416r
assigning %vreg44 to %t2: t2

selectOrSplit GR32Bit:%vreg45 [424r,432r:0)  0@424r
assigning %vreg45 to %t1: t1

selectOrSplit GR32Bit:%vreg49 [480r,488r:0)  0@480r
assigning %vreg49 to %t1: t1

selectOrSplit GR32Bit:%vreg50 [488r,496r:0)  0@488r
assigning %vreg50 to %t1: t1

selectOrSplit GR32Bit:%vreg54 [520r,528r:0)  0@520r
assigning %vreg54 to %fp: fp

selectOrSplit GR32Bit:%vreg56 [536r,544r:0)  0@536r
assigning %vreg56 to %a0: a0

selectOrSplit GR32Bit:%vreg58 [552r,560r:0)  0@552r
assigning %vreg58 to %a1: a1

selectOrSplit GR32Bit:%vreg60 [568r,576r:0)  0@568r
assigning %vreg60 to %a1: a1

selectOrSplit GR32Bit:%vreg61 [576r,584r:0)  0@576r
assigning %vreg61 to %fp: fp

selectOrSplit GR32Bit:%vreg62 [584r,592r:0)  0@584r
assigning %vreg62 to %fp: fp

selectOrSplit GR32Bit:%vreg63 [592r,600r:0)  0@592r
assigning %vreg63 to %t2: t2

selectOrSplit GR32Bit:%vreg64 [600r,608r:0)  0@600r
assigning %vreg64 to %t1: t1

selectOrSplit GR32Bit:%vreg68 [656r,664r:0)  0@656r
assigning %vreg68 to %t1: t1

selectOrSplit GR32Bit:%vreg69 [664r,672r:0)  0@664r
assigning %vreg69 to %t1: t1

selectOrSplit GR32Bit:%vreg73 [696r,704r:0)  0@696r
assigning %vreg73 to %fp: fp

selectOrSplit GR32Bit:%vreg75 [712r,720r:0)  0@712r
assigning %vreg75 to %a0: a0

selectOrSplit GR32Bit:%vreg77 [728r,736r:0)  0@728r
assigning %vreg77 to %a1: a1

selectOrSplit GR32Bit:%vreg79 [744r,752r:0)  0@744r
assigning %vreg79 to %a1: a1

selectOrSplit GR32Bit:%vreg80 [752r,760r:0)  0@752r
assigning %vreg80 to %fp: fp

selectOrSplit GR32Bit:%vreg81 [760r,768r:0)  0@760r
assigning %vreg81 to %fp: fp

selectOrSplit GR32Bit:%vreg82 [768r,776r:0)  0@768r
assigning %vreg82 to %t2: t2

selectOrSplit GR32Bit:%vreg83 [776r,784r:0)  0@776r
assigning %vreg83 to %t1: t1
********** REWRITE VIRTUAL REGISTERS **********
********** Function: redefine_start2
********** REGISTER MAP **********
[%vreg0 -> %t1] GR32Bit
[%vreg1 -> %t2] GR32Bit
[%vreg2 -> %t2] GR32Bit
[%vreg3 -> %t0] GR32Bit
[%vreg4 -> %t1] GR32Bit
[%vreg5 -> %t0] GR32Bit
[%vreg6 -> %t1] GR32Bit
[%vreg7 -> %t1] GR32Bit
[%vreg10 -> %t0] GR32Bit
[%vreg11 -> %t1] GR32Bit
[%vreg12 -> %t1] GR32Bit
[%vreg13 -> %t0] GR32Bit
[%vreg14 -> %t1] GR32Bit
[%vreg15 -> %t2] GR32Bit
[%vreg16 -> %fp] GR32Bit
[%vreg17 -> %fp] GR32Bit
[%vreg18 -> %a0] GR32Bit
[%vreg19 -> %a0] GR32Bit
[%vreg20 -> %a1] GR32Bit
[%vreg21 -> %t2] GR32Bit
[%vreg22 -> %a1] GR32Bit
[%vreg23 -> %fp] GR32Bit
[%vreg24 -> %fp] GR32Bit
[%vreg25 -> %t2] GR32Bit
[%vreg26 -> %t1] GR32Bit
[%vreg29 -> %t0] GR32Bit
[%vreg30 -> %t1] GR32Bit
[%vreg31 -> %t1] GR32Bit
[%vreg32 -> %t0] GR32Bit
[%vreg33 -> %t1] GR32Bit
[%vreg34 -> %t2] GR32Bit
[%vreg35 -> %fp] GR32Bit
[%vreg36 -> %fp] GR32Bit
[%vreg37 -> %a0] GR32Bit
[%vreg38 -> %a0] GR32Bit
[%vreg39 -> %a1] GR32Bit
[%vreg40 -> %t2] GR32Bit
[%vreg41 -> %a1] GR32Bit
[%vreg42 -> %fp] GR32Bit
[%vreg43 -> %fp] GR32Bit
[%vreg44 -> %t2] GR32Bit
[%vreg45 -> %t1] GR32Bit
[%vreg48 -> %t0] GR32Bit
[%vreg49 -> %t1] GR32Bit
[%vreg50 -> %t1] GR32Bit
[%vreg51 -> %t0] GR32Bit
[%vreg52 -> %t1] GR32Bit
[%vreg53 -> %t2] GR32Bit
[%vreg54 -> %fp] GR32Bit
[%vreg55 -> %fp] GR32Bit
[%vreg56 -> %a0] GR32Bit
[%vreg57 -> %a0] GR32Bit
[%vreg58 -> %a1] GR32Bit
[%vreg59 -> %t2] GR32Bit
[%vreg60 -> %a1] GR32Bit
[%vreg61 -> %fp] GR32Bit
[%vreg62 -> %fp] GR32Bit
[%vreg63 -> %t2] GR32Bit
[%vreg64 -> %t1] GR32Bit
[%vreg67 -> %t0] GR32Bit
[%vreg68 -> %t1] GR32Bit
[%vreg69 -> %t1] GR32Bit
[%vreg70 -> %t0] GR32Bit
[%vreg71 -> %t1] GR32Bit
[%vreg72 -> %t2] GR32Bit
[%vreg73 -> %fp] GR32Bit
[%vreg74 -> %fp] GR32Bit
[%vreg75 -> %a0] GR32Bit
[%vreg76 -> %a0] GR32Bit
[%vreg77 -> %a1] GR32Bit
[%vreg78 -> %t2] GR32Bit
[%vreg79 -> %a1] GR32Bit
[%vreg80 -> %fp] GR32Bit
[%vreg81 -> %fp] GR32Bit
[%vreg82 -> %t2] GR32Bit
[%vreg83 -> %t1] GR32Bit

0B	BB#0: derived from LLVM BB %redefine_start2.newName01
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg10<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg10
4B		  * %vreg11<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg11
4B		  * %vreg12<def> = SRLI %vreg11<kill>, 12; GR32Bit:%vreg12,%vreg11
4B		  * %vreg13<def> = ADD %vreg10<kill>, %vreg12<kill>; GR32Bit:%vreg13,%vreg10,%vreg12
4B		  * %vreg14<def> = ADDI %zero, 20; GR32Bit:%vreg14
4B		  * %vreg15<def> = SRLI %t5, 22; GR32Bit:%vreg15
4B		  * %vreg16<def> = SRLI %t5, 12; GR32Bit:%vreg16
4B		  * %vreg17<def> = ANDI %vreg16<kill>, 15; GR32Bit:%vreg17,%vreg16
4B		  * %vreg18<def> = SRLI %t5, 6; GR32Bit:%vreg18
4B		  * %vreg19<def> = ANDI %vreg18<kill>, 63; GR32Bit:%vreg19,%vreg18
4B		  * %vreg20<def> = ADDI %zero, 832; GR32Bit:%vreg20
4B		  * %vreg21<def> = MUL %vreg15<kill>, %vreg20<kill>; GR32Bit:%vreg21,%vreg15,%vreg20
4B		  * %vreg22<def> = ADDI %zero, 52; GR32Bit:%vreg22
4B		  * %vreg23<def> = MUL %vreg17<kill>, %vreg22<kill>; GR32Bit:%vreg23,%vreg17,%vreg22
4B		  * %vreg24<def> = ADD %vreg23<kill>, %vreg19<kill>; GR32Bit:%vreg24,%vreg23,%vreg19
4B		  * %vreg25<def> = ADD %vreg24<kill>, %vreg21<kill>; GR32Bit:%vreg25,%vreg24,%vreg21
4B		  * %vreg26<def> = MUL %vreg25<kill>, %vreg14<kill>; GR32Bit:%vreg26,%vreg25,%vreg14
4B		  * %t5<def> = ADD %vreg13<kill>, %vreg26<kill>; GR32Bit:%vreg13,%vreg26
4B		  * %vreg3<def> = LUI <ga:@redefine_out_b>[TF=2]; GR32Bit:%vreg3
4B		  * %vreg4<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg4
4B		  * SRLI %vreg4, %vreg4, 12; GR32Bit:%vreg4
4B		  * %vreg5<def> = ADD %vreg4<kill>, %vreg3<kill>; GR32Bit:%vreg5,%vreg4,%vreg3
4B		  * %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
4B		  * %vreg0<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg0
4B		  * SW %vreg1, %vreg0, 0; mem:ST4[%1] GR32Bit:%vreg1,%vreg0
4B		  * %vreg2<def> = LW %vreg1<kill>, 16; mem:LD4[%3](align=16) GR32Bit:%vreg2,%vreg1
4B		  * SW %vreg2<kill>, %vreg5, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)] GR32Bit:%vreg2,%vreg5
4B		  * %vreg6<def> = LW %vreg0<kill>, 0; mem:LD4[%1] GR32Bit:%vreg6,%vreg0
4B		  * %vreg7<def> = LW %vreg6<kill>, 20; mem:LD4[%6] GR32Bit:%vreg7,%vreg6
4B		  * SW %vreg7<kill>, %vreg5<kill>, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)] GR32Bit:%vreg7,%vreg5
4B		  * FDELETE %t4, 0
4B		  * END 0
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
288B		%t4<def> = ADD %t5, %zero
288B		  * %vreg29<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg29
288B		  * %vreg30<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg30
288B		  * %vreg31<def> = SRLI %vreg30<kill>, 12; GR32Bit:%vreg31,%vreg30
288B		  * %vreg32<def> = ADD %vreg29<kill>, %vreg31<kill>; GR32Bit:%vreg32,%vreg29,%vreg31
288B		  * %vreg33<def> = ADDI %zero, 20; GR32Bit:%vreg33
288B		  * %vreg34<def> = SRLI %t5, 22; GR32Bit:%vreg34
288B		  * %vreg35<def> = SRLI %t5, 12; GR32Bit:%vreg35
288B		  * %vreg36<def> = ANDI %vreg35<kill>, 15; GR32Bit:%vreg36,%vreg35
288B		  * %vreg37<def> = SRLI %t5, 6; GR32Bit:%vreg37
288B		  * %vreg38<def> = ANDI %vreg37<kill>, 63; GR32Bit:%vreg38,%vreg37
288B		  * %vreg39<def> = ADDI %zero, 832; GR32Bit:%vreg39
288B		  * %vreg40<def> = MUL %vreg34<kill>, %vreg39<kill>; GR32Bit:%vreg40,%vreg34,%vreg39
288B		  * %vreg41<def> = ADDI %zero, 52; GR32Bit:%vreg41
288B		  * %vreg42<def> = MUL %vreg36<kill>, %vreg41<kill>; GR32Bit:%vreg42,%vreg36,%vreg41
288B		  * %vreg43<def> = ADD %vreg42<kill>, %vreg38<kill>; GR32Bit:%vreg43,%vreg42,%vreg38
288B		  * %vreg44<def> = ADD %vreg43<kill>, %vreg40<kill>; GR32Bit:%vreg44,%vreg43,%vreg40
288B		  * %vreg45<def> = MUL %vreg44<kill>, %vreg33<kill>; GR32Bit:%vreg45,%vreg44,%vreg33
288B		  * %t5<def> = ADD %vreg32<kill>, %vreg45<kill>; GR32Bit:%vreg32,%vreg45
288B		  * END 0
288B		  * %zero<def> = ADDI %zero, 0
288B		  * %zero<def> = ADDI %zero, 0
464B		%t4<def> = ADD %t5, %zero
464B		  * %vreg48<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg48
464B		  * %vreg49<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg49
464B		  * %vreg50<def> = SRLI %vreg49<kill>, 12; GR32Bit:%vreg50,%vreg49
464B		  * %vreg51<def> = ADD %vreg48<kill>, %vreg50<kill>; GR32Bit:%vreg51,%vreg48,%vreg50
464B		  * %vreg52<def> = ADDI %zero, 20; GR32Bit:%vreg52
464B		  * %vreg53<def> = SRLI %t5, 22; GR32Bit:%vreg53
464B		  * %vreg54<def> = SRLI %t5, 12; GR32Bit:%vreg54
464B		  * %vreg55<def> = ANDI %vreg54<kill>, 15; GR32Bit:%vreg55,%vreg54
464B		  * %vreg56<def> = SRLI %t5, 6; GR32Bit:%vreg56
464B		  * %vreg57<def> = ANDI %vreg56<kill>, 63; GR32Bit:%vreg57,%vreg56
464B		  * %vreg58<def> = ADDI %zero, 832; GR32Bit:%vreg58
464B		  * %vreg59<def> = MUL %vreg53<kill>, %vreg58<kill>; GR32Bit:%vreg59,%vreg53,%vreg58
464B		  * %vreg60<def> = ADDI %zero, 52; GR32Bit:%vreg60
464B		  * %vreg61<def> = MUL %vreg55<kill>, %vreg60<kill>; GR32Bit:%vreg61,%vreg55,%vreg60
464B		  * %vreg62<def> = ADD %vreg61<kill>, %vreg57<kill>; GR32Bit:%vreg62,%vreg61,%vreg57
464B		  * %vreg63<def> = ADD %vreg62<kill>, %vreg59<kill>; GR32Bit:%vreg63,%vreg62,%vreg59
464B		  * %vreg64<def> = MUL %vreg63<kill>, %vreg52<kill>; GR32Bit:%vreg64,%vreg63,%vreg52
464B		  * %t5<def> = ADD %vreg51<kill>, %vreg64<kill>; GR32Bit:%vreg51,%vreg64
464B		  * END 0
464B		  * %zero<def> = ADDI %zero, 0
464B		  * %zero<def> = ADDI %zero, 0
640B		%t4<def> = ADD %t5, %zero
640B		  * %vreg67<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg67
640B		  * %vreg68<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg68
640B		  * %vreg69<def> = SRLI %vreg68<kill>, 12; GR32Bit:%vreg69,%vreg68
640B		  * %vreg70<def> = ADD %vreg67<kill>, %vreg69<kill>; GR32Bit:%vreg70,%vreg67,%vreg69
640B		  * %vreg71<def> = ADDI %zero, 20; GR32Bit:%vreg71
640B		  * %vreg72<def> = SRLI %t5, 22; GR32Bit:%vreg72
640B		  * %vreg73<def> = SRLI %t5, 12; GR32Bit:%vreg73
640B		  * %vreg74<def> = ANDI %vreg73<kill>, 15; GR32Bit:%vreg74,%vreg73
640B		  * %vreg75<def> = SRLI %t5, 6; GR32Bit:%vreg75
640B		  * %vreg76<def> = ANDI %vreg75<kill>, 63; GR32Bit:%vreg76,%vreg75
640B		  * %vreg77<def> = ADDI %zero, 832; GR32Bit:%vreg77
640B		  * %vreg78<def> = MUL %vreg72<kill>, %vreg77<kill>; GR32Bit:%vreg78,%vreg72,%vreg77
640B		  * %vreg79<def> = ADDI %zero, 52; GR32Bit:%vreg79
640B		  * %vreg80<def> = MUL %vreg74<kill>, %vreg79<kill>; GR32Bit:%vreg80,%vreg74,%vreg79
640B		  * %vreg81<def> = ADD %vreg80<kill>, %vreg76<kill>; GR32Bit:%vreg81,%vreg80,%vreg76
640B		  * %vreg82<def> = ADD %vreg81<kill>, %vreg78<kill>; GR32Bit:%vreg82,%vreg81,%vreg78
640B		  * %vreg83<def> = MUL %vreg82<kill>, %vreg71<kill>; GR32Bit:%vreg83,%vreg82,%vreg71
640B		  * %t5<def> = ADD %vreg70<kill>, %vreg83<kill>; GR32Bit:%vreg70,%vreg83
640B		  * END 0
640B		  * %zero<def> = ADDI %zero, 0
640B		  * %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#768")">
> %t1<def> = LUI <MCSym="%lo("ga#768")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 20
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = LUI <ga:@redefine_out_b>[TF=2]
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> SRLI %t1, %t1, 12
> %t0<def> = ADD %t1<kill>, %t0<kill>
> %t2<def> = ADDI %t5, <fi#-1>
> %t1<def> = ADDI %t5, <fi#0>
> SW %t2, %t1, 0; mem:ST4[%1]
> %t2<def> = LW %t2<kill>, 16; mem:LD4[%3](align=16)
> SW %t2<kill>, %t0, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]
> %t1<def> = LW %t1<kill>, 0; mem:LD4[%1]
> %t1<def> = LW %t1<kill>, 20; mem:LD4[%6]
> SW %t1<kill>, %t0<kill>, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)]
> FDELETE %t4, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#768")">
> %t1<def> = LUI <MCSym="%lo("ga#768")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 20
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#768")">
> %t1<def> = LUI <MCSym="%lo("ga#768")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 20
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#768")">
> %t1<def> = LUI <MCSym="%lo("ga#768")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 20
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
********** EMITTING LIVE DEBUG VARIABLES **********
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: redefine_start2
current state of mf:# Machine code for function redefine_start2: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %redefine_start2.newName01
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#768")">
	  * %t1<def> = LUI <MCSym="%lo("ga#768")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 20
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = LUI <ga:@redefine_out_b>[TF=2]
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * SRLI %t1, %t1, 12
	  * %t0<def> = ADD %t1<kill>, %t0<kill>
	  * %t2<def> = ADDI %t5, <fi#-1>
	  * %t1<def> = ADDI %t5, <fi#0>
	  * SW %t2, %t1, 0; mem:ST4[%1]
	  * %t2<def> = LW %t2<kill>, 16; mem:LD4[%3](align=16)
	  * SW %t2<kill>, %t0, 0; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 0)]
	  * %t1<def> = LW %t1<kill>, 0; mem:LD4[%1]
	  * %t1<def> = LW %t1<kill>, 20; mem:LD4[%6]
	  * SW %t1<kill>, %t0<kill>, 4; mem:ST4[getelementptr inbounds ([2 x i32]* @redefine_out_b, i32 0, i32 1)]
	  * FDELETE %t4, 0
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#768")">
	  * %t1<def> = LUI <MCSym="%lo("ga#768")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 20
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#768")">
	  * %t1<def> = LUI <MCSym="%lo("ga#768")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 20
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#768")">
	  * %t1<def> = LUI <MCSym="%lo("ga#768")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 20
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0

# End machine code for function redefine_start2.

lowering frame index for func redefine_start2:-1 TO VAL:4
lowering frame index for func redefine_start2:0 TO VAL:0
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:%6]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [4 + Base:%9]
CGP: Found      local addrmode: [Base:%4]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:@var]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [20 + Base:%16]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [16 + Base:%18]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [8 + Base:%20]
CGP: Found      local addrmode: [Base:%4]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [16 + Base:%28]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [20 + Base:%30]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [12 + Base:%32]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [20 + Base:%36]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [16 + Base:%38]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:%1]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:%6]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [4 + Base:%9]
CGP: Found      local addrmode: [Base:%4]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:@var]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [20 + Base:%16]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [16 + Base:%18]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [8 + Base:%20]
CGP: Found      local addrmode: [Base:%4]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [16 + Base:%28]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [20 + Base:%30]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [12 + Base:%32]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [20 + Base:%36]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [16 + Base:%38]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:%1]
To merge:

running_protection3.if.end17:                     ; preds = %running_protection3.if.then14, %running_protection3.if.end10
  %40 = load i32** %2, align 4
  store i32* %40, i32** %1, align 4
  br label %running_protection3.return



Computing probabilities for running_protection3.return
Computing probabilities for running_protection3.if.then14
Computing probabilities for running_protection3.if.end10
Computing probabilities for running_protection3.if.then7
Computing probabilities for running_protection3.if.end
Computing probabilities for running_protection3.if.then
Computing probabilities for running_protection3.entry



=== running_protection3
store visit is after?  store i32* %0, i32** %2, align 4
I was here to add i32* %0
arg match found with argIndex:-1
Argument does not have assigned frame index!
The value is an argument for which I am here to get arg frame index as:0
whats the index?-1
I was here to add   %2 = alloca i32*, align 4
whats in dag after store?SelectionDAG has 7 nodes:
  0x221bb88: ch = EntryToken [ORD=17]

  0x2239d70: i32 = FrameIndex<-1> [ORD=17]

  0x223bea0: i32 = undef [ORD=17]

    0x221bb88: <multiple use>
    0x2239d70: <multiple use>
    0x223bea0: <multiple use>
  0x2239a70: i32,ch = load 0x221bb88, 0x2239d70, 0x223bea0<LD4[FixedStack-1]>

  0x2239070: i32 = Constant<0>

    0x221bb88: <multiple use>
    0x2239d70: <multiple use>
    0x223c0a0: i32 = FrameIndex<1> [ORD=17]

    0x223bea0: <multiple use>
  0x223c2a0: ch = store 0x221bb88, 0x2239d70, 0x223c0a0, 0x223bea0<ST4[%2]> [ORD=17]


visiting load instruction   %5 = load i32** %2, align 4
with I type i32*and sd value :0x223c0a0: i32 = FrameIndex<1>
new load?0x2239770: i32,ch = load 0x223c2a0, 0x223c0a0, 0x223bea0<LD4[%2]>
dag after load is dealt with?SelectionDAG has 8 nodes:
  0x221bb88: ch = EntryToken [ORD=17]

  0x2239d70: i32 = FrameIndex<-1> [ORD=17]

  0x223bea0: i32 = undef [ORD=17]

    0x221bb88: <multiple use>
    0x2239d70: <multiple use>
    0x223bea0: <multiple use>
  0x2239a70: i32,ch = load 0x221bb88, 0x2239d70, 0x223bea0<LD4[FixedStack-1]>

  0x223c0a0: i32 = FrameIndex<1> [ORD=17]

  0x2239070: i32 = Constant<0>

      0x221bb88: <multiple use>
      0x2239d70: <multiple use>
      0x223c0a0: <multiple use>
      0x223bea0: <multiple use>
    0x223c2a0: ch = store 0x221bb88, 0x2239d70, 0x223c0a0, 0x223bea0<ST4[%2]> [ORD=17]

    0x223c0a0: <multiple use>
    0x223bea0: <multiple use>
  0x2239770: i32,ch = load 0x223c2a0, 0x223c0a0, 0x223bea0<LD4[%2]>

    0x221bb88: <multiple use>
    0x2239d70: <multiple use>
    0x223c0a0: <multiple use>
    0x223bea0: <multiple use>
  0x223c2a0: ch = store 0x221bb88, 0x2239d70, 0x223c0a0, 0x223bea0<ST4[%2]> [ORD=17]


visiting load instruction   %8 = load float* %7, align 4
with I type floatand sd value :0x2239770: i32,ch = load 0x223c2a0, 0x223c0a0, 0x223bea0<LD4[%2]>
new load?0x2239170: f32,ch = load 0x223c2a0, 0x2239770, 0x223bea0<LD4[%7]>
dag after load is dealt with?SelectionDAG has 9 nodes:
  0x221bb88: ch = EntryToken [ORD=17]

  0x2239d70: i32 = FrameIndex<-1> [ORD=17]

  0x223bea0: i32 = undef [ORD=17]

    0x221bb88: <multiple use>
    0x2239d70: <multiple use>
    0x223bea0: <multiple use>
  0x2239a70: i32,ch = load 0x221bb88, 0x2239d70, 0x223bea0<LD4[FixedStack-1]>

  0x223c0a0: i32 = FrameIndex<1> [ORD=17]

  0x2239070: i32 = Constant<0>

    0x223c2a0: <multiple use>
      0x223c2a0: <multiple use>
      0x223c0a0: <multiple use>
      0x223bea0: <multiple use>
    0x2239770: i32,ch = load 0x223c2a0, 0x223c0a0, 0x223bea0<LD4[%2]> [ORD=18]

    0x223bea0: <multiple use>
  0x2239170: f32,ch = load 0x223c2a0, 0x2239770, 0x223bea0<LD4[%7]>

    0x221bb88: <multiple use>
    0x2239d70: <multiple use>
    0x223c0a0: <multiple use>
    0x223bea0: <multiple use>
  0x223c2a0: ch = store 0x221bb88, 0x2239d70, 0x223c0a0, 0x223bea0<ST4[%2]> [ORD=17]


store visit is after?  store float %8, float* %3, align 4
I was here to add   %3 = alloca float, align 4
whats in dag after store?SelectionDAG has 12 nodes:
  0x221bb88: ch = EntryToken [ORD=17]

  0x2239d70: i32 = FrameIndex<-1> [ORD=17]

  0x223bea0: i32 = undef [ORD=17]

    0x221bb88: <multiple use>
    0x2239d70: <multiple use>
    0x223bea0: <multiple use>
  0x2239a70: i32,ch = load 0x221bb88, 0x2239d70, 0x223bea0<LD4[FixedStack-1]>

  0x223c0a0: i32 = FrameIndex<1> [ORD=17]

  0x2239070: i32 = Constant<0>

    0x221bb88: <multiple use>
    0x2239d70: <multiple use>
    0x223c0a0: <multiple use>
    0x223bea0: <multiple use>
  0x223c2a0: ch = store 0x221bb88, 0x2239d70, 0x223c0a0, 0x223bea0<ST4[%2]> [ORD=17]

    0x223c2a0: <multiple use>
    0x223c0a0: <multiple use>
    0x223bea0: <multiple use>
  0x2239770: i32,ch = load 0x223c2a0, 0x223c0a0, 0x223bea0<LD4[%2]> [ORD=18]

    0x223c2a0: <multiple use>
    0x2239770: <multiple use>
    0x223bea0: <multiple use>
  0x2239170: f32,ch = load 0x223c2a0, 0x2239770, 0x223bea0<LD4[%7]> [ORD=21]

      0x2239770: <multiple use>
      0x2239170: <multiple use>
    0x2239970: ch = TokenFactor 0x2239770:1, 0x2239170:1 [ORD=22]

    0x2239170: <multiple use>
    0x223c1a0: i32 = FrameIndex<2> [ORD=22]

    0x223bea0: <multiple use>
  0x223c4a0: ch = store 0x2239970, 0x2239170, 0x223c1a0, 0x223bea0<ST4[%3]> [ORD=22]


visiting load instruction   %9 = load i32** %2, align 4
with I type i32*and sd value :0x223c0a0: i32 = FrameIndex<1>
new load?0x223c3a0: i32,ch = load 0x223c4a0, 0x223c0a0, 0x223bea0<LD4[%2]>
dag after load is dealt with?SelectionDAG has 13 nodes:
  0x221bb88: ch = EntryToken [ORD=17]

  0x2239d70: i32 = FrameIndex<-1> [ORD=17]

  0x223bea0: i32 = undef [ORD=17]

    0x221bb88: <multiple use>
    0x2239d70: <multiple use>
    0x223bea0: <multiple use>
  0x2239a70: i32,ch = load 0x221bb88, 0x2239d70, 0x223bea0<LD4[FixedStack-1]>

  0x223c0a0: i32 = FrameIndex<1> [ORD=17]

  0x2239070: i32 = Constant<0>

    0x221bb88: <multiple use>
    0x2239d70: <multiple use>
    0x223c0a0: <multiple use>
    0x223bea0: <multiple use>
  0x223c2a0: ch = store 0x221bb88, 0x2239d70, 0x223c0a0, 0x223bea0<ST4[%2]> [ORD=17]

    0x223c2a0: <multiple use>
    0x223c0a0: <multiple use>
    0x223bea0: <multiple use>
  0x2239770: i32,ch = load 0x223c2a0, 0x223c0a0, 0x223bea0<LD4[%2]> [ORD=18]

    0x223c2a0: <multiple use>
    0x2239770: <multiple use>
    0x223bea0: <multiple use>
  0x2239170: f32,ch = load 0x223c2a0, 0x2239770, 0x223bea0<LD4[%7]> [ORD=21]

        0x2239770: <multiple use>
        0x2239170: <multiple use>
      0x2239970: ch = TokenFactor 0x2239770:1, 0x2239170:1 [ORD=22]

      0x2239170: <multiple use>
      0x223c1a0: i32 = FrameIndex<2> [ORD=22]

      0x223bea0: <multiple use>
    0x223c4a0: ch = store 0x2239970, 0x2239170, 0x223c1a0, 0x223bea0<ST4[%3]> [ORD=22]

    0x223c0a0: <multiple use>
    0x223bea0: <multiple use>
  0x223c3a0: i32,ch = load 0x223c4a0, 0x223c0a0, 0x223bea0<LD4[%2]>

      0x2239770: <multiple use>
      0x2239170: <multiple use>
    0x2239970: ch = TokenFactor 0x2239770:1, 0x2239170:1 [ORD=22]

    0x2239170: <multiple use>
    0x223c1a0: i32 = FrameIndex<2> [ORD=22]

    0x223bea0: <multiple use>
  0x223c4a0: ch = store 0x2239970, 0x2239170, 0x223c1a0, 0x223bea0<ST4[%3]> [ORD=22]


visiting load instruction   %12 = load float* %11, align 4
with I type floatand sd value :0x2239b70: i32 = add 0x223c3a0, 0x2239470
new load?0x223bca0: f32,ch = load 0x223c4a0, 0x2239b70, 0x223bea0<LD4[%11]>
dag after load is dealt with?SelectionDAG has 17 nodes:
  0x221bb88: ch = EntryToken [ORD=17]

  0x2239d70: i32 = FrameIndex<-1> [ORD=17]

  0x223bea0: i32 = undef [ORD=17]

    0x221bb88: <multiple use>
    0x2239d70: <multiple use>
    0x223bea0: <multiple use>
  0x2239a70: i32,ch = load 0x221bb88, 0x2239d70, 0x223bea0<LD4[FixedStack-1]>

  0x223c0a0: i32 = FrameIndex<1> [ORD=17]

  0x2239070: i32 = Constant<0>

    0x221bb88: <multiple use>
    0x2239d70: <multiple use>
    0x223c0a0: <multiple use>
    0x223bea0: <multiple use>
  0x223c2a0: ch = store 0x221bb88, 0x2239d70, 0x223c0a0, 0x223bea0<ST4[%2]> [ORD=17]

    0x223c2a0: <multiple use>
    0x223c0a0: <multiple use>
    0x223bea0: <multiple use>
  0x2239770: i32,ch = load 0x223c2a0, 0x223c0a0, 0x223bea0<LD4[%2]> [ORD=18]

    0x223c2a0: <multiple use>
    0x2239770: <multiple use>
    0x223bea0: <multiple use>
  0x2239170: f32,ch = load 0x223c2a0, 0x2239770, 0x223bea0<LD4[%7]> [ORD=21]

  0x2239570: i64 = Constant<4>

    0x223c4a0: <multiple use>
        0x223c4a0: <multiple use>
        0x223c0a0: <multiple use>
        0x223bea0: <multiple use>
      0x223c3a0: i32,ch = load 0x223c4a0, 0x223c0a0, 0x223bea0<LD4[%2]> [ORD=23]

      0x2239470: i32 = Constant<4> [ORD=24]

    0x2239b70: i32 = add 0x223c3a0, 0x2239470 [ORD=24]

    0x223bea0: <multiple use>
  0x223bca0: f32,ch = load 0x223c4a0, 0x2239b70, 0x223bea0<LD4[%11]>

      0x2239770: <multiple use>
      0x2239170: <multiple use>
    0x2239970: ch = TokenFactor 0x2239770:1, 0x2239170:1 [ORD=22]

    0x2239170: <multiple use>
    0x223c1a0: i32 = FrameIndex<2> [ORD=22]

    0x223bea0: <multiple use>
  0x223c4a0: ch = store 0x2239970, 0x2239170, 0x223c1a0, 0x223bea0<ST4[%3]> [ORD=22]


store visit is after?  store float %12, float* %4, align 4
I was here to add   %4 = alloca float, align 4
whats in dag after store?SelectionDAG has 20 nodes:
  0x221bb88: ch = EntryToken [ORD=17]

  0x2239d70: i32 = FrameIndex<-1> [ORD=17]

  0x223bea0: i32 = undef [ORD=17]

    0x221bb88: <multiple use>
    0x2239d70: <multiple use>
    0x223bea0: <multiple use>
  0x2239a70: i32,ch = load 0x221bb88, 0x2239d70, 0x223bea0<LD4[FixedStack-1]>

  0x223c0a0: i32 = FrameIndex<1> [ORD=17]

  0x2239070: i32 = Constant<0>

    0x221bb88: <multiple use>
    0x2239d70: <multiple use>
    0x223c0a0: <multiple use>
    0x223bea0: <multiple use>
  0x223c2a0: ch = store 0x221bb88, 0x2239d70, 0x223c0a0, 0x223bea0<ST4[%2]> [ORD=17]

    0x223c2a0: <multiple use>
    0x223c0a0: <multiple use>
    0x223bea0: <multiple use>
  0x2239770: i32,ch = load 0x223c2a0, 0x223c0a0, 0x223bea0<LD4[%2]> [ORD=18]

    0x223c2a0: <multiple use>
    0x2239770: <multiple use>
    0x223bea0: <multiple use>
  0x2239170: f32,ch = load 0x223c2a0, 0x2239770, 0x223bea0<LD4[%7]> [ORD=21]

      0x2239770: <multiple use>
      0x2239170: <multiple use>
    0x2239970: ch = TokenFactor 0x2239770:1, 0x2239170:1 [ORD=22]

    0x2239170: <multiple use>
    0x223c1a0: i32 = FrameIndex<2> [ORD=22]

    0x223bea0: <multiple use>
  0x223c4a0: ch = store 0x2239970, 0x2239170, 0x223c1a0, 0x223bea0<ST4[%3]> [ORD=22]

    0x223c4a0: <multiple use>
    0x223c0a0: <multiple use>
    0x223bea0: <multiple use>
  0x223c3a0: i32,ch = load 0x223c4a0, 0x223c0a0, 0x223bea0<LD4[%2]> [ORD=23]

  0x2239570: i64 = Constant<4>

    0x223c4a0: <multiple use>
      0x223c3a0: <multiple use>
      0x2239470: i32 = Constant<4> [ORD=24]

    0x2239b70: i32 = add 0x223c3a0, 0x2239470 [ORD=24]

    0x223bea0: <multiple use>
  0x223bca0: f32,ch = load 0x223c4a0, 0x2239b70, 0x223bea0<LD4[%11]> [ORD=26]

      0x223c3a0: <multiple use>
      0x223bca0: <multiple use>
    0x2239870: ch = TokenFactor 0x223c3a0:1, 0x223bca0:1 [ORD=27]

    0x223bca0: <multiple use>
    0x2239c70: i32 = FrameIndex<3> [ORD=27]

    0x223bea0: <multiple use>
  0x2239370: ch = store 0x2239870, 0x223bca0, 0x2239c70, 0x223bea0<ST4[%4]> [ORD=27]


visiting load instruction   %13 = load float* %3, align 4
with I type floatand sd value :0x223c1a0: i32 = FrameIndex<2>
new load?0x2239670: f32,ch = load 0x2239370, 0x223c1a0, 0x223bea0<LD4[%3]>
dag after load is dealt with?SelectionDAG has 21 nodes:
  0x221bb88: ch = EntryToken [ORD=17]

  0x2239d70: i32 = FrameIndex<-1> [ORD=17]

  0x223bea0: i32 = undef [ORD=17]

    0x221bb88: <multiple use>
    0x2239d70: <multiple use>
    0x223bea0: <multiple use>
  0x2239a70: i32,ch = load 0x221bb88, 0x2239d70, 0x223bea0<LD4[FixedStack-1]>

  0x223c0a0: i32 = FrameIndex<1> [ORD=17]

  0x2239070: i32 = Constant<0>

    0x221bb88: <multiple use>
    0x2239d70: <multiple use>
    0x223c0a0: <multiple use>
    0x223bea0: <multiple use>
  0x223c2a0: ch = store 0x221bb88, 0x2239d70, 0x223c0a0, 0x223bea0<ST4[%2]> [ORD=17]

    0x223c2a0: <multiple use>
    0x223c0a0: <multiple use>
    0x223bea0: <multiple use>
  0x2239770: i32,ch = load 0x223c2a0, 0x223c0a0, 0x223bea0<LD4[%2]> [ORD=18]

    0x223c2a0: <multiple use>
    0x2239770: <multiple use>
    0x223bea0: <multiple use>
  0x2239170: f32,ch = load 0x223c2a0, 0x2239770, 0x223bea0<LD4[%7]> [ORD=21]

  0x223c1a0: i32 = FrameIndex<2> [ORD=22]

      0x2239770: <multiple use>
      0x2239170: <multiple use>
    0x2239970: ch = TokenFactor 0x2239770:1, 0x2239170:1 [ORD=22]

    0x2239170: <multiple use>
    0x223c1a0: <multiple use>
    0x223bea0: <multiple use>
  0x223c4a0: ch = store 0x2239970, 0x2239170, 0x223c1a0, 0x223bea0<ST4[%3]> [ORD=22]

    0x223c4a0: <multiple use>
    0x223c0a0: <multiple use>
    0x223bea0: <multiple use>
  0x223c3a0: i32,ch = load 0x223c4a0, 0x223c0a0, 0x223bea0<LD4[%2]> [ORD=23]

  0x2239570: i64 = Constant<4>

    0x223c4a0: <multiple use>
      0x223c3a0: <multiple use>
      0x2239470: i32 = Constant<4> [ORD=24]

    0x2239b70: i32 = add 0x223c3a0, 0x2239470 [ORD=24]

    0x223bea0: <multiple use>
  0x223bca0: f32,ch = load 0x223c4a0, 0x2239b70, 0x223bea0<LD4[%11]> [ORD=26]

        0x223c3a0: <multiple use>
        0x223bca0: <multiple use>
      0x2239870: ch = TokenFactor 0x223c3a0:1, 0x223bca0:1 [ORD=27]

      0x223bca0: <multiple use>
      0x2239c70: i32 = FrameIndex<3> [ORD=27]

      0x223bea0: <multiple use>
    0x2239370: ch = store 0x2239870, 0x223bca0, 0x2239c70, 0x223bea0<ST4[%4]> [ORD=27]

    0x223c1a0: <multiple use>
    0x223bea0: <multiple use>
  0x2239670: f32,ch = load 0x2239370, 0x223c1a0, 0x223bea0<LD4[%3]>

      0x223c3a0: <multiple use>
      0x223bca0: <multiple use>
    0x2239870: ch = TokenFactor 0x223c3a0:1, 0x223bca0:1 [ORD=27]

    0x223bca0: <multiple use>
    0x2239c70: i32 = FrameIndex<3> [ORD=27]

    0x223bea0: <multiple use>
  0x2239370: ch = store 0x2239870, 0x223bca0, 0x2239c70, 0x223bea0<ST4[%4]> [ORD=27]


visiting load instruction   %14 = load float* @var, align 4
I was here to add @var = global float 0x3FE6666660000000, align 4
with I type floatand sd value :0x223bda0: i32 = GlobalAddress<float* @var> 0
new load?0x2238f70: f32,ch = load 0x2239370, 0x223bda0, 0x223bea0<LD4[@var]>
dag after load is dealt with?SelectionDAG has 23 nodes:
  0x221bb88: ch = EntryToken [ORD=17]

  0x2239d70: i32 = FrameIndex<-1> [ORD=17]

  0x223bea0: i32 = undef [ORD=17]

    0x221bb88: <multiple use>
    0x2239d70: <multiple use>
    0x223bea0: <multiple use>
  0x2239a70: i32,ch = load 0x221bb88, 0x2239d70, 0x223bea0<LD4[FixedStack-1]>

  0x223c0a0: i32 = FrameIndex<1> [ORD=17]

  0x2239070: i32 = Constant<0>

    0x221bb88: <multiple use>
    0x2239d70: <multiple use>
    0x223c0a0: <multiple use>
    0x223bea0: <multiple use>
  0x223c2a0: ch = store 0x221bb88, 0x2239d70, 0x223c0a0, 0x223bea0<ST4[%2]> [ORD=17]

    0x223c2a0: <multiple use>
    0x223c0a0: <multiple use>
    0x223bea0: <multiple use>
  0x2239770: i32,ch = load 0x223c2a0, 0x223c0a0, 0x223bea0<LD4[%2]> [ORD=18]

    0x223c2a0: <multiple use>
    0x2239770: <multiple use>
    0x223bea0: <multiple use>
  0x2239170: f32,ch = load 0x223c2a0, 0x2239770, 0x223bea0<LD4[%7]> [ORD=21]

  0x223c1a0: i32 = FrameIndex<2> [ORD=22]

      0x2239770: <multiple use>
      0x2239170: <multiple use>
    0x2239970: ch = TokenFactor 0x2239770:1, 0x2239170:1 [ORD=22]

    0x2239170: <multiple use>
    0x223c1a0: <multiple use>
    0x223bea0: <multiple use>
  0x223c4a0: ch = store 0x2239970, 0x2239170, 0x223c1a0, 0x223bea0<ST4[%3]> [ORD=22]

    0x223c4a0: <multiple use>
    0x223c0a0: <multiple use>
    0x223bea0: <multiple use>
  0x223c3a0: i32,ch = load 0x223c4a0, 0x223c0a0, 0x223bea0<LD4[%2]> [ORD=23]

  0x2239570: i64 = Constant<4>

    0x223c4a0: <multiple use>
      0x223c3a0: <multiple use>
      0x2239470: i32 = Constant<4> [ORD=24]

    0x2239b70: i32 = add 0x223c3a0, 0x2239470 [ORD=24]

    0x223bea0: <multiple use>
  0x223bca0: f32,ch = load 0x223c4a0, 0x2239b70, 0x223bea0<LD4[%11]> [ORD=26]

    0x2239370: <multiple use>
    0x223c1a0: <multiple use>
    0x223bea0: <multiple use>
  0x2239670: f32,ch = load 0x2239370, 0x223c1a0, 0x223bea0<LD4[%3]> [ORD=28]

    0x2239370: <multiple use>
    0x223bda0: i32 = GlobalAddress<float* @var> 0

    0x223bea0: <multiple use>
  0x2238f70: f32,ch = load 0x2239370, 0x223bda0, 0x223bea0<LD4[@var]>

      0x223c3a0: <multiple use>
      0x223bca0: <multiple use>
    0x2239870: ch = TokenFactor 0x223c3a0:1, 0x223bca0:1 [ORD=27]

    0x223bca0: <multiple use>
    0x2239c70: i32 = FrameIndex<3> [ORD=27]

    0x223bea0: <multiple use>
  0x2239370: ch = store 0x2239870, 0x223bca0, 0x2239c70, 0x223bea0<ST4[%4]> [ORD=27]


Initial selection DAG: BB#0 'running_protection3:running_protection3.entry'
SelectionDAG has 31 nodes:
  0x221bb88: ch = EntryToken [ORD=17]

  0x2239d70: i32 = FrameIndex<-1> [ORD=17]

  0x223bea0: i32 = undef [ORD=17]

    0x221bb88: <multiple use>
    0x2239d70: <multiple use>
    0x223bea0: <multiple use>
  0x2239a70: i32,ch = load 0x221bb88, 0x2239d70, 0x223bea0<LD4[FixedStack-1]>

  0x223c0a0: i32 = FrameIndex<1> [ORD=17]

  0x2239070: i32 = Constant<0>

    0x221bb88: <multiple use>
    0x2239d70: <multiple use>
    0x223c0a0: <multiple use>
    0x223bea0: <multiple use>
  0x223c2a0: ch = store 0x221bb88, 0x2239d70, 0x223c0a0, 0x223bea0<ST4[%2]> [ORD=17]

    0x223c2a0: <multiple use>
    0x223c0a0: <multiple use>
    0x223bea0: <multiple use>
  0x2239770: i32,ch = load 0x223c2a0, 0x223c0a0, 0x223bea0<LD4[%2]> [ORD=18]

    0x223c2a0: <multiple use>
    0x2239770: <multiple use>
    0x223bea0: <multiple use>
  0x2239170: f32,ch = load 0x223c2a0, 0x2239770, 0x223bea0<LD4[%7]> [ORD=21]

  0x223c1a0: i32 = FrameIndex<2> [ORD=22]

      0x2239770: <multiple use>
      0x2239170: <multiple use>
    0x2239970: ch = TokenFactor 0x2239770:1, 0x2239170:1 [ORD=22]

    0x2239170: <multiple use>
    0x223c1a0: <multiple use>
    0x223bea0: <multiple use>
  0x223c4a0: ch = store 0x2239970, 0x2239170, 0x223c1a0, 0x223bea0<ST4[%3]> [ORD=22]

    0x223c4a0: <multiple use>
    0x223c0a0: <multiple use>
    0x223bea0: <multiple use>
  0x223c3a0: i32,ch = load 0x223c4a0, 0x223c0a0, 0x223bea0<LD4[%2]> [ORD=23]

  0x2239570: i64 = Constant<4>

    0x223c4a0: <multiple use>
      0x223c3a0: <multiple use>
      0x2239470: i32 = Constant<4> [ORD=24]

    0x2239b70: i32 = add 0x223c3a0, 0x2239470 [ORD=24]

    0x223bea0: <multiple use>
  0x223bca0: f32,ch = load 0x223c4a0, 0x2239b70, 0x223bea0<LD4[%11]> [ORD=26]

      0x223c3a0: <multiple use>
      0x223bca0: <multiple use>
    0x2239870: ch = TokenFactor 0x223c3a0:1, 0x223bca0:1 [ORD=27]

    0x223bca0: <multiple use>
    0x2239c70: i32 = FrameIndex<3> [ORD=27]

    0x223bea0: <multiple use>
  0x2239370: ch = store 0x2239870, 0x223bca0, 0x2239c70, 0x223bea0<ST4[%4]> [ORD=27]

      0x2239370: <multiple use>
            0x2239370: <multiple use>
            0x223c1a0: <multiple use>
            0x223bea0: <multiple use>
          0x2239670: f32,ch = load 0x2239370, 0x223c1a0, 0x223bea0<LD4[%3]> [ORD=28]

            0x2239370: <multiple use>
            0x223bda0: i32 = GlobalAddress<float* @var> 0 [ORD=29]

            0x223bea0: <multiple use>
          0x2238f70: f32,ch = load 0x2239370, 0x223bda0, 0x223bea0<LD4[@var]> [ORD=29]

          0x223bfa0: ch = setolt [ORD=30]

        0x2239270: i1 = setcc 0x2239670, 0x2238f70, 0x223bfa0 [ORD=30]

        0x223c5a0: i1 = Constant<-1>

      0x223c6a0: i1 = xor 0x2239270, 0x223c5a0

      0x223c7a0: ch = BasicBlock<running_protection3.if.end 0x2247f00>

    0x223c8a0: ch = brcond 0x2239370, 0x223c6a0, 0x223c7a0

    0x223c9a0: ch = BasicBlock<running_protection3.if.then 0x2247e50>

  0x223caa0: ch = br 0x223c8a0, 0x223c9a0



Replacing.3 0x223c6a0: i1 = xor 0x2239270, 0x223c5a0

With: 0x224fc90: i1 = setcc 0x2239670, 0x2238f70, 0x224fb90


Replacing.1 0x2239770: i32,ch = load 0x223c2a0, 0x223c0a0, 0x223bea0<LD4[%2]> [ORD=18]

With: 0x2239d70: i32 = FrameIndex<-1> [ORD=17]
 and 1 other values

Replacing.1 0x2239170: f32,ch = load 0x223c2a0, 0x2239d70, 0x223bea0<LD4[%7](align=16)> [ORD=21]

With: 0x2239170: f32,ch = load 0x223c2a0, 0x2239d70, 0x223bea0<LD4[%7](align=16)> [ORD=21]
 and 1 other values

Replacing.3 0x2239970: ch = TokenFactor 0x223c2a0, 0x2239170:1 [ORD=22]

With: 0x2239170: f32,ch = load 0x223c2a0, 0x2239d70, 0x223bea0<LD4[%7](align=16)> [ORD=21]

Optimized lowered selection DAG: BB#0 'running_protection3:running_protection3.entry'
SelectionDAG has 24 nodes:
  0x2239d70: i32 = FrameIndex<-1> [ORD=17]

  0x223bea0: i32 = undef [ORD=17]

  0x223c0a0: i32 = FrameIndex<1> [ORD=17]

      0x221bb88: ch = EntryToken [ORD=17]

      0x2239d70: <multiple use>
      0x223c0a0: <multiple use>
      0x223bea0: <multiple use>
    0x223c2a0: ch = store 0x221bb88, 0x2239d70, 0x223c0a0, 0x223bea0<ST4[%2]> [ORD=17]

    0x2239d70: <multiple use>
    0x223bea0: <multiple use>
  0x2239170: f32,ch = load 0x223c2a0, 0x2239d70, 0x223bea0<LD4[%7](align=16)> [ORD=21]

  0x223c1a0: i32 = FrameIndex<2> [ORD=22]

    0x2239170: <multiple use>
    0x2239170: <multiple use>
    0x223c1a0: <multiple use>
    0x223bea0: <multiple use>
  0x223c4a0: ch = store 0x2239170:1, 0x2239170, 0x223c1a0, 0x223bea0<ST4[%3]> [ORD=22]

    0x223c4a0: <multiple use>
    0x223c0a0: <multiple use>
    0x223bea0: <multiple use>
  0x223c3a0: i32,ch = load 0x223c4a0, 0x223c0a0, 0x223bea0<LD4[%2]> [ORD=23]

    0x223c4a0: <multiple use>
      0x223c3a0: <multiple use>
      0x2239470: i32 = Constant<4> [ORD=24]

    0x2239b70: i32 = add 0x223c3a0, 0x2239470 [ORD=24]

    0x223bea0: <multiple use>
  0x223bca0: f32,ch = load 0x223c4a0, 0x2239b70, 0x223bea0<LD4[%11]> [ORD=26]

      0x223c3a0: <multiple use>
      0x223bca0: <multiple use>
    0x2239870: ch = TokenFactor 0x223c3a0:1, 0x223bca0:1 [ORD=27]

    0x223bca0: <multiple use>
    0x2239c70: i32 = FrameIndex<3> [ORD=27]

    0x223bea0: <multiple use>
  0x2239370: ch = store 0x2239870, 0x223bca0, 0x2239c70, 0x223bea0<ST4[%4]> [ORD=27]

      0x2239370: <multiple use>
          0x2239370: <multiple use>
          0x223c1a0: <multiple use>
          0x223bea0: <multiple use>
        0x2239670: f32,ch = load 0x2239370, 0x223c1a0, 0x223bea0<LD4[%3]> [ORD=28]

          0x2239370: <multiple use>
          0x223bda0: i32 = GlobalAddress<float* @var> 0 [ORD=29]

          0x223bea0: <multiple use>
        0x2238f70: f32,ch = load 0x2239370, 0x223bda0, 0x223bea0<LD4[@var]> [ORD=29]

        0x224fb90: ch = setuge

      0x224fc90: i1 = setcc 0x2239670, 0x2238f70, 0x224fb90

      0x223c7a0: ch = BasicBlock<running_protection3.if.end 0x2247f00>

    0x223c8a0: ch = brcond 0x2239370, 0x224fc90, 0x223c7a0

    0x223c9a0: ch = BasicBlock<running_protection3.if.then 0x2247e50>

  0x223caa0: ch = br 0x223c8a0, 0x223c9a0


Legally typed node: 0x224fb90: ch = setuge [ID=0]

Legally typed node: 0x223c9a0: ch = BasicBlock<running_protection3.if.then 0x2247e50> [ID=0]

Legally typed node: 0x223c7a0: ch = BasicBlock<running_protection3.if.end 0x2247f00> [ID=0]

Legally typed node: 0x223bda0: i32 = GlobalAddress<float* @var> 0 [ORD=29] [ID=0]

Legally typed node: 0x2239c70: i32 = FrameIndex<3> [ORD=27] [ID=0]

Legally typed node: 0x2239470: i32 = Constant<4> [ORD=24] [ID=0]

Legally typed node: 0x223c1a0: i32 = FrameIndex<2> [ORD=22] [ID=0]

Legally typed node: 0x223c0a0: i32 = FrameIndex<1> [ORD=17] [ID=0]

Legally typed node: 0x223bea0: i32 = undef [ORD=17] [ID=0]

Legally typed node: 0x2239d70: i32 = FrameIndex<-1> [ORD=17] [ID=0]

Legally typed node: 0x221bb88: ch = EntryToken [ORD=17] [ID=0]

Legally typed node: 0x223c2a0: ch = store 0x221bb88, 0x2239d70, 0x223c0a0, 0x223bea0<ST4[%2]> [ORD=17] [ID=0]

Legally typed node: 0x2239170: f32,ch = load 0x223c2a0, 0x2239d70, 0x223bea0<LD4[%7](align=16)> [ORD=21] [ID=0]

Legally typed node: 0x223c4a0: ch = store 0x2239170:1, 0x2239170, 0x223c1a0, 0x223bea0<ST4[%3]> [ORD=22] [ID=0]

Legally typed node: 0x223c3a0: i32,ch = load 0x223c4a0, 0x223c0a0, 0x223bea0<LD4[%2]> [ORD=23] [ID=0]

Legally typed node: 0x2239b70: i32 = add 0x223c3a0, 0x2239470 [ORD=24] [ID=0]

Legally typed node: 0x223bca0: f32,ch = load 0x223c4a0, 0x2239b70, 0x223bea0<LD4[%11]> [ORD=26] [ID=0]

Legally typed node: 0x2239870: ch = TokenFactor 0x223c3a0:1, 0x223bca0:1 [ORD=27] [ID=0]

Legally typed node: 0x2239370: ch = store 0x2239870, 0x223bca0, 0x2239c70, 0x223bea0<ST4[%4]> [ORD=27] [ID=0]

Legally typed node: 0x2239670: f32,ch = load 0x2239370, 0x223c1a0, 0x223bea0<LD4[%3]> [ORD=28] [ID=0]

Legally typed node: 0x2238f70: f32,ch = load 0x2239370, 0x223bda0, 0x223bea0<LD4[@var]> [ORD=29] [ID=0]

Promote integer result: 0x224fc90: i1 = setcc 0x2239670, 0x2238f70, 0x224fb90 [ID=0]

Promote integer operand: 0x223c8a0: ch = brcond 0x2239370, 0x224fc90, 0x223c7a0 [ID=0]

Promote integer operand: 0x2239a70: i32 = zero_extend 0x224fc90 [ID=0]

Legally typed node: 0x2239970: i32 = Constant<1> [ID=0]

Legally typed node: 0x2239070: i32 = setcc 0x2239670, 0x2238f70, 0x224fb90 [ID=0]

Legally typed node: 0x2239770: i32 = and 0x2239070, 0x2239970 [ID=0]

Legally typed node: 0x223c8a0: ch = brcond 0x2239370, 0x2239770, 0x223c7a0 [ID=0]

Legally typed node: 0x223caa0: ch = br 0x223c8a0, 0x223c9a0 [ID=0]

Legally typed node: 0x7fff6e802f00: ch = handlenode 0x223caa0 [ID=0]

Type-legalized selection DAG: BB#0 'running_protection3:running_protection3.entry'
SelectionDAG has 26 nodes:
  0x2239d70: i32 = FrameIndex<-1> [ORD=17] [ID=-3]

  0x223bea0: i32 = undef [ORD=17] [ID=-3]

  0x223c0a0: i32 = FrameIndex<1> [ORD=17] [ID=-3]

      0x221bb88: ch = EntryToken [ORD=17] [ID=-3]

      0x2239d70: <multiple use>
      0x223c0a0: <multiple use>
      0x223bea0: <multiple use>
    0x223c2a0: ch = store 0x221bb88, 0x2239d70, 0x223c0a0, 0x223bea0<ST4[%2]> [ORD=17] [ID=-3]

    0x2239d70: <multiple use>
    0x223bea0: <multiple use>
  0x2239170: f32,ch = load 0x223c2a0, 0x2239d70, 0x223bea0<LD4[%7](align=16)> [ORD=21] [ID=-3]

  0x223c1a0: i32 = FrameIndex<2> [ORD=22] [ID=-3]

    0x2239170: <multiple use>
    0x2239170: <multiple use>
    0x223c1a0: <multiple use>
    0x223bea0: <multiple use>
  0x223c4a0: ch = store 0x2239170:1, 0x2239170, 0x223c1a0, 0x223bea0<ST4[%3]> [ORD=22] [ID=-3]

    0x223c4a0: <multiple use>
    0x223c0a0: <multiple use>
    0x223bea0: <multiple use>
  0x223c3a0: i32,ch = load 0x223c4a0, 0x223c0a0, 0x223bea0<LD4[%2]> [ORD=23] [ID=-3]

    0x223c4a0: <multiple use>
      0x223c3a0: <multiple use>
      0x2239470: i32 = Constant<4> [ORD=24] [ID=-3]

    0x2239b70: i32 = add 0x223c3a0, 0x2239470 [ORD=24] [ID=-3]

    0x223bea0: <multiple use>
  0x223bca0: f32,ch = load 0x223c4a0, 0x2239b70, 0x223bea0<LD4[%11]> [ORD=26] [ID=-3]

      0x223c3a0: <multiple use>
      0x223bca0: <multiple use>
    0x2239870: ch = TokenFactor 0x223c3a0:1, 0x223bca0:1 [ORD=27] [ID=-3]

    0x223bca0: <multiple use>
    0x2239c70: i32 = FrameIndex<3> [ORD=27] [ID=-3]

    0x223bea0: <multiple use>
  0x2239370: ch = store 0x2239870, 0x223bca0, 0x2239c70, 0x223bea0<ST4[%4]> [ORD=27] [ID=-3]

      0x2239370: <multiple use>
            0x2239370: <multiple use>
            0x223c1a0: <multiple use>
            0x223bea0: <multiple use>
          0x2239670: f32,ch = load 0x2239370, 0x223c1a0, 0x223bea0<LD4[%3]> [ORD=28] [ID=-3]

            0x2239370: <multiple use>
            0x223bda0: i32 = GlobalAddress<float* @var> 0 [ORD=29] [ID=-3]

            0x223bea0: <multiple use>
          0x2238f70: f32,ch = load 0x2239370, 0x223bda0, 0x223bea0<LD4[@var]> [ORD=29] [ID=-3]

          0x224fb90: ch = setuge [ID=-3]

        0x2239070: i32 = setcc 0x2239670, 0x2238f70, 0x224fb90 [ID=-3]

        0x2239970: i32 = Constant<1> [ID=-3]

      0x2239770: i32 = and 0x2239070, 0x2239970 [ID=-3]

      0x223c7a0: ch = BasicBlock<running_protection3.if.end 0x2247f00> [ID=-3]

    0x223c8a0: ch = brcond 0x2239370, 0x2239770, 0x223c7a0 [ID=-3]

    0x223c9a0: ch = BasicBlock<running_protection3.if.then 0x2247e50> [ID=-3]

  0x223caa0: ch = br 0x223c8a0, 0x223c9a0 [ID=-3]



Replacing.2 0x2239770: i32 = and 0x2239070, 0x2239970 [ID=-3]

With: 0x2239070: i32 = setcc 0x2239670, 0x2238f70, 0x224fb90 [ID=-3]

Optimized type-legalized selection DAG: BB#0 'running_protection3:running_protection3.entry'
SelectionDAG has 24 nodes:
  0x2239d70: i32 = FrameIndex<-1> [ORD=17] [ID=-3]

  0x223bea0: i32 = undef [ORD=17] [ID=-3]

  0x223c0a0: i32 = FrameIndex<1> [ORD=17] [ID=-3]

      0x221bb88: ch = EntryToken [ORD=17] [ID=-3]

      0x2239d70: <multiple use>
      0x223c0a0: <multiple use>
      0x223bea0: <multiple use>
    0x223c2a0: ch = store 0x221bb88, 0x2239d70, 0x223c0a0, 0x223bea0<ST4[%2]> [ORD=17] [ID=-3]

    0x2239d70: <multiple use>
    0x223bea0: <multiple use>
  0x2239170: f32,ch = load 0x223c2a0, 0x2239d70, 0x223bea0<LD4[%7](align=16)> [ORD=21] [ID=-3]

  0x223c1a0: i32 = FrameIndex<2> [ORD=22] [ID=-3]

    0x2239170: <multiple use>
    0x2239170: <multiple use>
    0x223c1a0: <multiple use>
    0x223bea0: <multiple use>
  0x223c4a0: ch = store 0x2239170:1, 0x2239170, 0x223c1a0, 0x223bea0<ST4[%3]> [ORD=22] [ID=-3]

    0x223c4a0: <multiple use>
    0x223c0a0: <multiple use>
    0x223bea0: <multiple use>
  0x223c3a0: i32,ch = load 0x223c4a0, 0x223c0a0, 0x223bea0<LD4[%2]> [ORD=23] [ID=-3]

    0x223c4a0: <multiple use>
      0x223c3a0: <multiple use>
      0x2239470: i32 = Constant<4> [ORD=24] [ID=-3]

    0x2239b70: i32 = add 0x223c3a0, 0x2239470 [ORD=24] [ID=-3]

    0x223bea0: <multiple use>
  0x223bca0: f32,ch = load 0x223c4a0, 0x2239b70, 0x223bea0<LD4[%11]> [ORD=26] [ID=-3]

      0x223c3a0: <multiple use>
      0x223bca0: <multiple use>
    0x2239870: ch = TokenFactor 0x223c3a0:1, 0x223bca0:1 [ORD=27] [ID=-3]

    0x223bca0: <multiple use>
    0x2239c70: i32 = FrameIndex<3> [ORD=27] [ID=-3]

    0x223bea0: <multiple use>
  0x2239370: ch = store 0x2239870, 0x223bca0, 0x2239c70, 0x223bea0<ST4[%4]> [ORD=27] [ID=-3]

      0x2239370: <multiple use>
          0x2239370: <multiple use>
          0x223c1a0: <multiple use>
          0x223bea0: <multiple use>
        0x2239670: f32,ch = load 0x2239370, 0x223c1a0, 0x223bea0<LD4[%3]> [ORD=28] [ID=-3]

          0x2239370: <multiple use>
          0x223bda0: i32 = GlobalAddress<float* @var> 0 [ORD=29] [ID=-3]

          0x223bea0: <multiple use>
        0x2238f70: f32,ch = load 0x2239370, 0x223bda0, 0x223bea0<LD4[@var]> [ORD=29] [ID=-3]

        0x224fb90: ch = setuge [ID=-3]

      0x2239070: i32 = setcc 0x2239670, 0x2238f70, 0x224fb90 [ID=-3]

      0x223c7a0: ch = BasicBlock<running_protection3.if.end 0x2247f00> [ID=-3]

    0x223c8a0: ch = brcond 0x2239370, 0x2239070, 0x223c7a0 [ID=-3]

    0x223c9a0: ch = BasicBlock<running_protection3.if.then 0x2247e50> [ID=-3]

  0x223caa0: ch = br 0x223c8a0, 0x223c9a0 [ID=-3]


Legalized selection DAG: BB#0 'running_protection3:running_protection3.entry'
SelectionDAG has 28 nodes:
  0x2239d70: i32 = FrameIndex<-1> [ORD=17] [ID=1]

  0x223bea0: i32 = undef [ORD=17] [ID=2]

  0x223c0a0: i32 = FrameIndex<1> [ORD=17] [ID=3]

  0x223c1a0: i32 = FrameIndex<2> [ORD=22] [ID=4]

      0x221bb88: ch = EntryToken [ORD=17] [ID=0]

      0x2239d70: <multiple use>
      0x223c0a0: <multiple use>
      0x223bea0: <multiple use>
    0x223c2a0: ch = store 0x221bb88, 0x2239d70, 0x223c0a0, 0x223bea0<ST4[%2]> [ORD=17] [ID=11]

    0x2239d70: <multiple use>
    0x223bea0: <multiple use>
  0x2239170: f32,ch = load 0x223c2a0, 0x2239d70, 0x223bea0<LD4[%7](align=16)> [ORD=21] [ID=12]

    0x2239170: <multiple use>
    0x2239170: <multiple use>
    0x223c1a0: <multiple use>
    0x223bea0: <multiple use>
  0x223c4a0: ch = store 0x2239170:1, 0x2239170, 0x223c1a0, 0x223bea0<ST4[%3]> [ORD=22] [ID=13]

    0x223c4a0: <multiple use>
    0x223c0a0: <multiple use>
    0x223bea0: <multiple use>
  0x223c3a0: i32,ch = load 0x223c4a0, 0x223c0a0, 0x223bea0<LD4[%2]> [ORD=23] [ID=14]

    0x223c4a0: <multiple use>
      0x223c3a0: <multiple use>
      0x2239470: i32 = Constant<4> [ORD=24] [ID=5]

    0x2239b70: i32 = add 0x223c3a0, 0x2239470 [ORD=24] [ID=15]

    0x223bea0: <multiple use>
  0x223bca0: f32,ch = load 0x223c4a0, 0x2239b70, 0x223bea0<LD4[%11]> [ORD=26] [ID=16]

      0x223c3a0: <multiple use>
      0x223bca0: <multiple use>
    0x2239870: ch = TokenFactor 0x223c3a0:1, 0x223bca0:1 [ORD=27] [ID=17]

    0x223bca0: <multiple use>
    0x2239c70: i32 = FrameIndex<3> [ORD=27] [ID=6]

    0x223bea0: <multiple use>
  0x2239370: ch = store 0x2239870, 0x223bca0, 0x2239c70, 0x223bea0<ST4[%4]> [ORD=27] [ID=18]

      0x2239370: <multiple use>
          0x2239370: <multiple use>
          0x223c1a0: <multiple use>
          0x223bea0: <multiple use>
        0x2239670: f32,ch = load 0x2239370, 0x223c1a0, 0x223bea0<LD4[%3]> [ORD=28] [ID=20]

          0x2239370: <multiple use>
              0x2239970: i32 = TargetGlobalAddress<float* @var> 0 [TF=2]

            0x224fc90: i32 = REDEFINEISD::Hi 0x2239970

              0x2239770: i32 = TargetGlobalAddress<float* @var> 0 [TF=3]

            0x2239a70: i32 = REDEFINEISD::Lo 0x2239770

          0x2239570: i32 = add 0x224fc90, 0x2239a70

          0x223bea0: <multiple use>
        0x2238f70: f32,ch = load 0x2239370, 0x2239570, 0x223bea0<LD4[@var]> [ORD=29] [ID=19]

        0x224fb90: ch = setuge [ID=10]

      0x2239070: i32 = setcc 0x2239670, 0x2238f70, 0x224fb90 [ID=21]

      0x223c7a0: ch = BasicBlock<running_protection3.if.end 0x2247f00> [ID=8]

    0x223c8a0: ch = brcond 0x2239370, 0x2239070, 0x223c7a0 [ID=22]

    0x223c9a0: ch = BasicBlock<running_protection3.if.then 0x2247e50> [ID=9]

  0x223caa0: ch = br 0x223c8a0, 0x223c9a0 [ID=23]


Optimized legalized selection DAG: BB#0 'running_protection3:running_protection3.entry'
SelectionDAG has 28 nodes:
  0x2239d70: i32 = FrameIndex<-1> [ORD=17] [ID=1]

  0x223bea0: i32 = undef [ORD=17] [ID=2]

  0x223c0a0: i32 = FrameIndex<1> [ORD=17] [ID=3]

  0x223c1a0: i32 = FrameIndex<2> [ORD=22] [ID=4]

      0x221bb88: ch = EntryToken [ORD=17] [ID=0]

      0x2239d70: <multiple use>
      0x223c0a0: <multiple use>
      0x223bea0: <multiple use>
    0x223c2a0: ch = store 0x221bb88, 0x2239d70, 0x223c0a0, 0x223bea0<ST4[%2]> [ORD=17] [ID=11]

    0x2239d70: <multiple use>
    0x223bea0: <multiple use>
  0x2239170: f32,ch = load 0x223c2a0, 0x2239d70, 0x223bea0<LD4[%7](align=16)> [ORD=21] [ID=12]

    0x2239170: <multiple use>
    0x2239170: <multiple use>
    0x223c1a0: <multiple use>
    0x223bea0: <multiple use>
  0x223c4a0: ch = store 0x2239170:1, 0x2239170, 0x223c1a0, 0x223bea0<ST4[%3]> [ORD=22] [ID=13]

    0x223c4a0: <multiple use>
    0x223c0a0: <multiple use>
    0x223bea0: <multiple use>
  0x223c3a0: i32,ch = load 0x223c4a0, 0x223c0a0, 0x223bea0<LD4[%2]> [ORD=23] [ID=14]

    0x223c4a0: <multiple use>
      0x223c3a0: <multiple use>
      0x2239470: i32 = Constant<4> [ORD=24] [ID=5]

    0x2239b70: i32 = add 0x223c3a0, 0x2239470 [ORD=24] [ID=15]

    0x223bea0: <multiple use>
  0x223bca0: f32,ch = load 0x223c4a0, 0x2239b70, 0x223bea0<LD4[%11]> [ORD=26] [ID=16]

      0x223c3a0: <multiple use>
      0x223bca0: <multiple use>
    0x2239870: ch = TokenFactor 0x223c3a0:1, 0x223bca0:1 [ORD=27] [ID=17]

    0x223bca0: <multiple use>
    0x2239c70: i32 = FrameIndex<3> [ORD=27] [ID=6]

    0x223bea0: <multiple use>
  0x2239370: ch = store 0x2239870, 0x223bca0, 0x2239c70, 0x223bea0<ST4[%4]> [ORD=27] [ID=18]

      0x2239370: <multiple use>
          0x2239370: <multiple use>
          0x223c1a0: <multiple use>
          0x223bea0: <multiple use>
        0x2239670: f32,ch = load 0x2239370, 0x223c1a0, 0x223bea0<LD4[%3]> [ORD=28] [ID=20]

          0x2239370: <multiple use>
              0x2239970: i32 = TargetGlobalAddress<float* @var> 0 [TF=2]

            0x224fc90: i32 = REDEFINEISD::Hi 0x2239970

              0x2239770: i32 = TargetGlobalAddress<float* @var> 0 [TF=3]

            0x2239a70: i32 = REDEFINEISD::Lo 0x2239770

          0x2239570: i32 = add 0x224fc90, 0x2239a70

          0x223bea0: <multiple use>
        0x2238f70: f32,ch = load 0x2239370, 0x2239570, 0x223bea0<LD4[@var]> [ORD=29] [ID=19]

        0x224fb90: ch = setuge [ID=10]

      0x2239070: i32 = setcc 0x2239670, 0x2238f70, 0x224fb90 [ID=21]

      0x223c7a0: ch = BasicBlock<running_protection3.if.end 0x2247f00> [ID=8]

    0x223c8a0: ch = brcond 0x2239370, 0x2239070, 0x223c7a0 [ID=22]

    0x223c9a0: ch = BasicBlock<running_protection3.if.then 0x2247e50> [ID=9]

  0x223caa0: ch = br 0x223c8a0, 0x223c9a0 [ID=23]


===== Instruction selection begins: BB#0 'running_protection3.entry'
ISEL: Starting pattern match on root node: 0x223caa0: ch = br 0x223c8a0, 0x223c9a0 [ID=27]

  Initial Opcode index to 1938
  Morphed node: 0x223caa0: ch = JAL 0x223c9a0, 0x223c8a0

ISEL: Match complete!
=> 0x223caa0: ch = JAL 0x223c9a0, 0x223c8a0

ISEL: Starting pattern match on root node: 0x223c8a0: ch = brcond 0x2239370, 0x2239070, 0x223c7a0 [ID=26]

  Initial Opcode index to 1439
  Match failed at index 1449
  Continuing at 1676
  Morphed node: 0x223c8a0: ch = BNE 0x223c7a0, 0x2239070, 0x223bda0, 0x2239370

ISEL: Match complete!
=> 0x223c8a0: ch = BNE 0x223c7a0, 0x2239070, 0x223bda0, 0x2239370

ISEL: Starting pattern match on root node: 0x2239070: i32 = setcc 0x2239670, 0x2238f70, 0x224fb90 [ID=25]

  Initial Opcode index to 642
  Match failed at index 648
  Continuing at 688
  Match failed at index 690
  Continuing at 899
  Skipped scope entry (due to false predicate) at index 908, continuing at 920
  Skipped scope entry (due to false predicate) at index 921, continuing at 933
  Skipped scope entry (due to false predicate) at index 934, continuing at 946
  Skipped scope entry (due to false predicate) at index 947, continuing at 959
  Skipped scope entry (due to false predicate) at index 960, continuing at 972
  Skipped scope entry (due to false predicate) at index 973, continuing at 985
  Skipped scope entry (due to false predicate) at index 986, continuing at 998
  Skipped scope entry (due to false predicate) at index 999, continuing at 1011
  Skipped scope entry (due to false predicate) at index 1012, continuing at 1024
  Morphed node: 0x2239070: i32 = FULE_S 0x2239670, 0x2238f70

ISEL: Match complete!
=> 0x2239070: i32 = FULE_S 0x2239670, 0x2238f70

ISEL: Starting pattern match on root node: 0x2239670: f32,ch = load 0x2239370, 0x223c1a0, 0x223bea0<LD4[%3]> [ORD=28] [ID=24]

  Initial Opcode index to 5
  TypeSwitch[f32] from 10 to 159
  Morphed node: 0x2239670: f32,ch = FLW 0x223c1a0, 0x224fb90, 0x2239370<Mem:LD4[%3]> [ORD=28]

ISEL: Match complete!
=> 0x2239670: f32,ch = FLW 0x223c1a0, 0x224fb90, 0x2239370<Mem:LD4[%3]> [ORD=28]

ISEL: Starting pattern match on root node: 0x2238f70: f32,ch = load 0x2239370, 0x2239570, 0x223bea0<LD4[@var]> [ORD=29] [ID=23]

  Initial Opcode index to 5
  TypeSwitch[f32] from 10 to 159
  Morphed node: 0x2238f70: f32,ch = FLW 0x2239570, 0x224fb90, 0x2239370<Mem:LD4[@var]> [ORD=29]

ISEL: Match complete!
=> 0x2238f70: f32,ch = FLW 0x2239570, 0x224fb90, 0x2239370<Mem:LD4[@var]> [ORD=29]

ISEL: Starting pattern match on root node: 0x2239370: ch = store 0x2239870, 0x223bca0, 0x2239c70, 0x223bea0<ST4[%4]> [ORD=27] [ID=22]

  Initial Opcode index to 178
  Skipped scope entry (due to false predicate) at index 183, continuing at 243
  Morphed node: 0x2239370: ch = FSW 0x223bca0, 0x2239c70, 0x224fb90, 0x2239870<Mem:ST4[%4]> [ORD=27]

ISEL: Match complete!
=> 0x2239370: ch = FSW 0x223bca0, 0x2239c70, 0x224fb90, 0x2239870<Mem:ST4[%4]> [ORD=27]

=> 0x2239870: ch = TokenFactor 0x223c3a0:1, 0x223bca0:1 [ORD=27]

ISEL: Starting pattern match on root node: 0x223bca0: f32,ch = load 0x223c4a0, 0x2239b70, 0x223bea0<LD4[%11]> [ORD=26] [ID=20]

  Initial Opcode index to 5
  TypeSwitch[f32] from 10 to 159
  Morphed node: 0x223bca0: f32,ch = FLW 0x223c3a0, 0x223bfa0, 0x223c4a0<Mem:LD4[%11]> [ORD=26]

ISEL: Match complete!
=> 0x223bca0: f32,ch = FLW 0x223c3a0, 0x223bfa0, 0x223c4a0<Mem:LD4[%11]> [ORD=26]

ISEL: Starting pattern match on root node: 0x223c3a0: i32,ch = load 0x223c4a0, 0x223c0a0, 0x223bea0<LD4[%2]> [ORD=23] [ID=18]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x223c3a0: i32,ch = LW 0x223c0a0, 0x224fb90, 0x223c4a0<Mem:LD4[%2]> [ORD=23]

ISEL: Match complete!
=> 0x223c3a0: i32,ch = LW 0x223c0a0, 0x224fb90, 0x223c4a0<Mem:LD4[%2]> [ORD=23]

ISEL: Starting pattern match on root node: 0x223c4a0: ch = store 0x2239170:1, 0x2239170, 0x223c1a0, 0x223bea0<ST4[%3]> [ORD=22] [ID=17]

  Initial Opcode index to 178
  Skipped scope entry (due to false predicate) at index 183, continuing at 243
  Morphed node: 0x223c4a0: ch = FSW 0x2239170, 0x223c1a0, 0x224fb90, 0x2239170:1<Mem:ST4[%3]> [ORD=22]

ISEL: Match complete!
=> 0x223c4a0: ch = FSW 0x2239170, 0x223c1a0, 0x224fb90, 0x2239170:1<Mem:ST4[%3]> [ORD=22]

ISEL: Starting pattern match on root node: 0x2239570: i32 = add 0x224fc90, 0x2239a70 [ID=16]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x2239570: i32 = ADD 0x2239a70, 0x224fc90

ISEL: Match complete!
=> 0x2239570: i32 = ADD 0x2239a70, 0x224fc90

ISEL: Starting pattern match on root node: 0x2239170: f32,ch = load 0x223c2a0, 0x2239d70, 0x223bea0<LD4[%7](align=16)> [ORD=21] [ID=15]

  Initial Opcode index to 5
  TypeSwitch[f32] from 10 to 159
  Morphed node: 0x2239170: f32,ch = FLW 0x2239d70, 0x224fb90, 0x223c2a0<Mem:LD4[%7](align=16)> [ORD=21]

ISEL: Match complete!
=> 0x2239170: f32,ch = FLW 0x2239d70, 0x224fb90, 0x223c2a0<Mem:LD4[%7](align=16)> [ORD=21]

ISEL: Starting pattern match on root node: 0x2239a70: i32 = REDEFINEISD::Lo 0x2239770 [ID=14]

  Initial Opcode index to 1204
  Morphed node: 0x2239a70: i32 = ADDI 0x223bda0, 0x2239770

ISEL: Match complete!
=> 0x2239a70: i32 = ADDI 0x223bda0, 0x2239770

ISEL: Starting pattern match on root node: 0x224fc90: i32 = REDEFINEISD::Hi 0x2239970 [ID=13]

  Initial Opcode index to 1186
  Morphed node: 0x224fc90: i32 = LUI 0x2239970

ISEL: Match complete!
=> 0x224fc90: i32 = LUI 0x2239970

ISEL: Starting pattern match on root node: 0x223c2a0: ch = store 0x221bb88, 0x2239d70, 0x223c0a0, 0x223bea0<ST4[%2]> [ORD=17] [ID=12]

  Initial Opcode index to 178
  Morphed node: 0x223c2a0: ch = SW 0x2239d70, 0x223c0a0, 0x224fb90, 0x221bb88<Mem:ST4[%2]> [ORD=17]

ISEL: Match complete!
=> 0x223c2a0: ch = SW 0x2239d70, 0x223c0a0, 0x224fb90, 0x221bb88<Mem:ST4[%2]> [ORD=17]

=> 0x2239770: i32 = TargetGlobalAddress<float* @var> 0 [TF=3]

=> 0x2239970: i32 = TargetGlobalAddress<float* @var> 0 [TF=2]

=> 0x223c9a0: ch = BasicBlock<running_protection3.if.then 0x2247e50>

=> 0x223c7a0: ch = BasicBlock<running_protection3.if.end 0x2247f00>

=> 0x221bb88: ch = EntryToken [ORD=17]

===== Instruction selection ends:
Selected selection DAG: BB#0 'running_protection3:running_protection3.entry'
SelectionDAG has 32 nodes:
    0x223c6a0: <multiple use>
    0x224fb90: <multiple use>
      0x223c6a0: <multiple use>
      0x223c5a0: <multiple use>
      0x224fb90: <multiple use>
      0x221bb88: ch = EntryToken [ORD=17]

    0x223c2a0: ch = SW 0x223c6a0, 0x223c5a0, 0x224fb90, 0x221bb88<Mem:ST4[%2]> [ORD=17]

  0x2239170: f32,ch = FLW 0x223c6a0, 0x224fb90, 0x223c2a0<Mem:LD4[%7](align=16)> [ORD=21]

    0x2239170: <multiple use>
    0x2239270: <multiple use>
    0x224fb90: <multiple use>
    0x2239170: <multiple use>
  0x223c4a0: ch = FSW 0x2239170, 0x2239270, 0x224fb90, 0x2239170:1<Mem:ST4[%3]> [ORD=22]

    0x223c5a0: <multiple use>
    0x224fb90: <multiple use>
    0x223c4a0: <multiple use>
  0x223c3a0: i32,ch = LW 0x223c5a0, 0x224fb90, 0x223c4a0<Mem:LD4[%2]> [ORD=23]

    0x223c3a0: <multiple use>
    0x223bfa0: i32 = TargetConstant<4>

    0x223c4a0: <multiple use>
  0x223bca0: f32,ch = FLW 0x223c3a0, 0x223bfa0, 0x223c4a0<Mem:LD4[%11]> [ORD=26]

    0x223bca0: <multiple use>
      0x223bea0: <multiple use>
      0x2239470: i32 = TargetFrameIndex<3>

    0x2239c70: i32 = ADDI 0x223bea0, 0x2239470 [ORD=27]

    0x224fb90: <multiple use>
      0x223c3a0: <multiple use>
      0x223bca0: <multiple use>
    0x2239870: ch = TokenFactor 0x223c3a0:1, 0x223bca0:1 [ORD=27]

  0x2239370: ch = FSW 0x223bca0, 0x2239c70, 0x224fb90, 0x2239870<Mem:ST4[%4]> [ORD=27]

  0x223bda0: i32 = Register %zero

  0x224fb90: i32 = TargetConstant<0>

  0x223bea0: i32 = Register %t5

    0x223bea0: <multiple use>
    0x2239b70: i32 = TargetFrameIndex<2>

  0x2239270: i32 = ADDI 0x223bea0, 0x2239b70 [ORD=22]

    0x223bea0: <multiple use>
    0x223c1a0: i32 = TargetFrameIndex<1>

  0x223c5a0: i32 = ADDI 0x223bea0, 0x223c1a0 [ORD=17]

    0x223bea0: <multiple use>
    0x223c0a0: i32 = TargetFrameIndex<-1>

  0x223c6a0: i32 = ADDI 0x223bea0, 0x223c0a0 [ORD=17]

    0x223c9a0: ch = BasicBlock<running_protection3.if.then 0x2247e50>

      0x223c7a0: ch = BasicBlock<running_protection3.if.end 0x2247f00>

          0x2239270: <multiple use>
          0x224fb90: <multiple use>
          0x2239370: <multiple use>
        0x2239670: f32,ch = FLW 0x2239270, 0x224fb90, 0x2239370<Mem:LD4[%3]> [ORD=28]

              0x223bda0: <multiple use>
              0x2239770: i32 = TargetGlobalAddress<float* @var> 0 [TF=3]

            0x2239a70: i32 = ADDI 0x223bda0, 0x2239770

              0x2239970: i32 = TargetGlobalAddress<float* @var> 0 [TF=2]

            0x224fc90: i32 = LUI 0x2239970

          0x2239570: i32 = ADD 0x2239a70, 0x224fc90

          0x224fb90: <multiple use>
          0x2239370: <multiple use>
        0x2238f70: f32,ch = FLW 0x2239570, 0x224fb90, 0x2239370<Mem:LD4[@var]> [ORD=29]

      0x2239070: i32 = FULE_S 0x2239670, 0x2238f70

      0x223bda0: <multiple use>
      0x2239370: <multiple use>
    0x223c8a0: ch = BNE 0x223c7a0, 0x2239070, 0x223bda0, 0x2239370

  0x223caa0: ch = JAL 0x223c9a0, 0x223c8a0


********** List Scheduling BB#0 'running_protection3.entry' **********
SU(0): 0x223caa0: ch = JAL 0x223c9a0, 0x223c8a0 [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x223c8a0: ch = BNE 0x223c7a0, 0x2239070, 0x223bda0, 0x2239370 [ID=1]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
   val SU(13): Latency=1
   ch  SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x2239370: ch = FSW 0x223bca0, 0x2239c70, 0x224fb90, 0x2239870<Mem:ST4[%4]> [ORD=27] [ID=2]

  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 4
  Predecessors:
   val SU(12): Latency=1
   val SU(11): Latency=1
   ch  SU(3): Latency=0
  Successors:
   ch  SU(1): Latency=1
   ch  SU(14): Latency=1
   ch  SU(18): Latency=1

SU(3): 0x2239870: ch = TokenFactor 0x223c3a0:1, 0x223bca0:1 [ORD=27] [ID=3]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 4
  Predecessors:
   ch  SU(4): Latency=1
   ch  SU(12): Latency=1
  Successors:
   ch  SU(2): Latency=0

SU(4): 0x223c3a0: i32,ch = LW 0x223c5a0, 0x224fb90, 0x223c4a0<Mem:LD4[%2]> [ORD=23] [ID=4]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
   val SU(10): Latency=1
   ch  SU(5): Latency=1
  Successors:
   ch  SU(3): Latency=1
   val SU(12): Latency=1

SU(5): 0x223c4a0: ch = FSW 0x2239170, 0x2239270, 0x224fb90, 0x2239170:1<Mem:ST4[%3]> [ORD=22] [ID=5]

  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 7
  Predecessors:
   val SU(7): Latency=1
   val SU(6): Latency=1
   ch  SU(7): Latency=1
  Successors:
   ch  SU(4): Latency=1
   ch  SU(12): Latency=1

SU(6): 0x2239270: i32 = ADDI 0x223bea0, 0x2239b70 [ORD=22] [ID=6]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 8
  Successors:
   val SU(5): Latency=1
   val SU(18): Latency=1

SU(7): 0x2239170: f32,ch = FLW 0x223c6a0, 0x224fb90, 0x223c2a0<Mem:LD4[%7](align=16)> [ORD=21] [ID=7]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 8
  Predecessors:
   val SU(9): Latency=1
   ch  SU(8): Latency=1
  Successors:
   val SU(5): Latency=1
   ch  SU(5): Latency=1

SU(8): 0x223c2a0: ch = SW 0x223c6a0, 0x223c5a0, 0x224fb90, 0x221bb88<Mem:ST4[%2]> [ORD=17] [ID=8]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 9
  Predecessors:
   val SU(9): Latency=1
   val SU(10): Latency=1
  Successors:
   ch  SU(7): Latency=1

SU(9): 0x223c6a0: i32 = ADDI 0x223bea0, 0x223c0a0 [ORD=17] [ID=9]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 10
  Successors:
   val SU(7): Latency=1
   val SU(8): Latency=1

SU(10): 0x223c5a0: i32 = ADDI 0x223bea0, 0x223c1a0 [ORD=17] [ID=10]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 10
  Successors:
   val SU(4): Latency=1
   val SU(8): Latency=1

SU(11): 0x2239c70: i32 = ADDI 0x223bea0, 0x2239470 [ORD=27] [ID=11]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
   val SU(2): Latency=1

SU(12): 0x223bca0: f32,ch = FLW 0x223c3a0, 0x223bfa0, 0x223c4a0<Mem:LD4[%11]> [ORD=26] [ID=12]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 5
  Height             : 5
  Predecessors:
   val SU(4): Latency=1
   ch  SU(5): Latency=1
  Successors:
   val SU(2): Latency=1
   ch  SU(3): Latency=1

SU(13): 0x2239070: i32 = FULE_S 0x2239670, 0x2238f70 [ID=13]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 8
  Height             : 2
  Predecessors:
   val SU(18): Latency=1
   val SU(14): Latency=1
  Successors:
   val SU(1): Latency=1

SU(14): 0x2238f70: f32,ch = FLW 0x2239570, 0x224fb90, 0x2239370<Mem:LD4[@var]> [ORD=29] [ID=14]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 7
  Height             : 3
  Predecessors:
   val SU(15): Latency=1
   ch  SU(2): Latency=1
  Successors:
   val SU(13): Latency=1

SU(15): 0x2239570: i32 = ADD 0x2239a70, 0x224fc90 [ID=15]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
   val SU(17): Latency=1
   val SU(16): Latency=1
  Successors:
   val SU(14): Latency=1

SU(16): 0x224fc90: i32 = LUI 0x2239970 [ID=16]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
   val SU(15): Latency=1

SU(17): 0x2239a70: i32 = ADDI 0x223bda0, 0x2239770 [ID=17]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
   val SU(15): Latency=1

SU(18): 0x2239670: f32,ch = FLW 0x2239270, 0x224fb90, 0x2239370<Mem:LD4[%3]> [ORD=28] [ID=18]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 7
  Height             : 3
  Predecessors:
   val SU(6): Latency=1
   ch  SU(2): Latency=1
  Successors:
   val SU(13): Latency=1


Examining Available:
Height 0: SU(0): 0x223caa0: ch = JAL 0x223c9a0, 0x223c8a0 [ID=0]


*** Scheduling [0]: SU(0): 0x223caa0: ch = JAL 0x223c9a0, 0x223c8a0 [ID=0]


Examining Available:
Height 1: SU(1): 0x223c8a0: ch = BNE 0x223c7a0, 0x2239070, 0x223bda0, 0x2239370 [ID=1]


*** Scheduling [1]: SU(1): 0x223c8a0: ch = BNE 0x223c7a0, 0x2239070, 0x223bda0, 0x2239370 [ID=1]


Examining Available:
Height 2: SU(13): 0x2239070: i32 = FULE_S 0x2239670, 0x2238f70 [ID=13]


*** Scheduling [2]: SU(13): 0x2239070: i32 = FULE_S 0x2239670, 0x2238f70 [ID=13]


Examining Available:
Height 3: SU(14): 0x2238f70: f32,ch = FLW 0x2239570, 0x224fb90, 0x2239370<Mem:LD4[@var]> [ORD=29] [ID=14]

Height 3: SU(18): 0x2239670: f32,ch = FLW 0x2239270, 0x224fb90, 0x2239370<Mem:LD4[%3]> [ORD=28] [ID=18]


*** Scheduling [3]: SU(14): 0x2238f70: f32,ch = FLW 0x2239570, 0x224fb90, 0x2239370<Mem:LD4[@var]> [ORD=29] [ID=14]


Examining Available:
Height 4: SU(15): 0x2239570: i32 = ADD 0x2239a70, 0x224fc90 [ID=15]

Height 3: SU(18): 0x2239670: f32,ch = FLW 0x2239270, 0x224fb90, 0x2239370<Mem:LD4[%3]> [ORD=28] [ID=18]


*** Scheduling [4]: SU(15): 0x2239570: i32 = ADD 0x2239a70, 0x224fc90 [ID=15]


Examining Available:
Height 5: SU(17): 0x2239a70: i32 = ADDI 0x223bda0, 0x2239770 [ID=17]

Height 5: SU(16): 0x224fc90: i32 = LUI 0x2239970 [ID=16]

Height 3: SU(18): 0x2239670: f32,ch = FLW 0x2239270, 0x224fb90, 0x2239370<Mem:LD4[%3]> [ORD=28] [ID=18]


*** Scheduling [5]: SU(17): 0x2239a70: i32 = ADDI 0x223bda0, 0x2239770 [ID=17]


Examining Available:
Height 5: SU(16): 0x224fc90: i32 = LUI 0x2239970 [ID=16]

Height 3: SU(18): 0x2239670: f32,ch = FLW 0x2239270, 0x224fb90, 0x2239370<Mem:LD4[%3]> [ORD=28] [ID=18]


*** Scheduling [6]: SU(16): 0x224fc90: i32 = LUI 0x2239970 [ID=16]


Examining Available:
Height 3: SU(18): 0x2239670: f32,ch = FLW 0x2239270, 0x224fb90, 0x2239370<Mem:LD4[%3]> [ORD=28] [ID=18]


*** Scheduling [7]: SU(18): 0x2239670: f32,ch = FLW 0x2239270, 0x224fb90, 0x2239370<Mem:LD4[%3]> [ORD=28] [ID=18]


Examining Available:
Height 8: SU(2): 0x2239370: ch = FSW 0x223bca0, 0x2239c70, 0x224fb90, 0x2239870<Mem:ST4[%4]> [ORD=27] [ID=2]


*** Scheduling [8]: SU(2): 0x2239370: ch = FSW 0x223bca0, 0x2239c70, 0x224fb90, 0x2239870<Mem:ST4[%4]> [ORD=27] [ID=2]


Examining Available:
Height 8: SU(3): 0x2239870: ch = TokenFactor 0x223c3a0:1, 0x223bca0:1 [ORD=27] [ID=3]

Height 9: SU(11): 0x2239c70: i32 = ADDI 0x223bea0, 0x2239470 [ORD=27] [ID=11]


*** Scheduling [9]: SU(3): 0x2239870: ch = TokenFactor 0x223c3a0:1, 0x223bca0:1 [ORD=27] [ID=3]


Examining Available:
Height 9: SU(11): 0x2239c70: i32 = ADDI 0x223bea0, 0x2239470 [ORD=27] [ID=11]

Height 10: SU(12): 0x223bca0: f32,ch = FLW 0x223c3a0, 0x223bfa0, 0x223c4a0<Mem:LD4[%11]> [ORD=26] [ID=12]


*** Scheduling [10]: SU(11): 0x2239c70: i32 = ADDI 0x223bea0, 0x2239470 [ORD=27] [ID=11]


Examining Available:
Height 10: SU(12): 0x223bca0: f32,ch = FLW 0x223c3a0, 0x223bfa0, 0x223c4a0<Mem:LD4[%11]> [ORD=26] [ID=12]


*** Scheduling [11]: SU(12): 0x223bca0: f32,ch = FLW 0x223c3a0, 0x223bfa0, 0x223c4a0<Mem:LD4[%11]> [ORD=26] [ID=12]


Examining Available:
Height 12: SU(4): 0x223c3a0: i32,ch = LW 0x223c5a0, 0x224fb90, 0x223c4a0<Mem:LD4[%2]> [ORD=23] [ID=4]


*** Scheduling [12]: SU(4): 0x223c3a0: i32,ch = LW 0x223c5a0, 0x224fb90, 0x223c4a0<Mem:LD4[%2]> [ORD=23] [ID=4]


Examining Available:
Height 13: SU(5): 0x223c4a0: ch = FSW 0x2239170, 0x2239270, 0x224fb90, 0x2239170:1<Mem:ST4[%3]> [ORD=22] [ID=5]


*** Scheduling [13]: SU(5): 0x223c4a0: ch = FSW 0x2239170, 0x2239270, 0x224fb90, 0x2239170:1<Mem:ST4[%3]> [ORD=22] [ID=5]


Examining Available:
Height 14: SU(6): 0x2239270: i32 = ADDI 0x223bea0, 0x2239b70 [ORD=22] [ID=6]

Height 14: SU(7): 0x2239170: f32,ch = FLW 0x223c6a0, 0x224fb90, 0x223c2a0<Mem:LD4[%7](align=16)> [ORD=21] [ID=7]


*** Scheduling [14]: SU(6): 0x2239270: i32 = ADDI 0x223bea0, 0x2239b70 [ORD=22] [ID=6]


Examining Available:
Height 14: SU(7): 0x2239170: f32,ch = FLW 0x223c6a0, 0x224fb90, 0x223c2a0<Mem:LD4[%7](align=16)> [ORD=21] [ID=7]


*** Scheduling [15]: SU(7): 0x2239170: f32,ch = FLW 0x223c6a0, 0x224fb90, 0x223c2a0<Mem:LD4[%7](align=16)> [ORD=21] [ID=7]


Examining Available:
Height 16: SU(8): 0x223c2a0: ch = SW 0x223c6a0, 0x223c5a0, 0x224fb90, 0x221bb88<Mem:ST4[%2]> [ORD=17] [ID=8]


*** Scheduling [16]: SU(8): 0x223c2a0: ch = SW 0x223c6a0, 0x223c5a0, 0x224fb90, 0x221bb88<Mem:ST4[%2]> [ORD=17] [ID=8]


Examining Available:
Height 17: SU(9): 0x223c6a0: i32 = ADDI 0x223bea0, 0x223c0a0 [ORD=17] [ID=9]

Height 17: SU(10): 0x223c5a0: i32 = ADDI 0x223bea0, 0x223c1a0 [ORD=17] [ID=10]


*** Scheduling [17]: SU(9): 0x223c6a0: i32 = ADDI 0x223bea0, 0x223c0a0 [ORD=17] [ID=9]


Examining Available:
Height 17: SU(10): 0x223c5a0: i32 = ADDI 0x223bea0, 0x223c1a0 [ORD=17] [ID=10]


*** Scheduling [18]: SU(10): 0x223c5a0: i32 = ADDI 0x223bea0, 0x223c1a0 [ORD=17] [ID=10]

*** Final schedule ***
SU(10): 0x223c5a0: i32 = ADDI 0x223bea0, 0x223c1a0 [ORD=17] [ID=10]

SU(9): 0x223c6a0: i32 = ADDI 0x223bea0, 0x223c0a0 [ORD=17] [ID=9]

SU(8): 0x223c2a0: ch = SW 0x223c6a0, 0x223c5a0, 0x224fb90, 0x221bb88<Mem:ST4[%2]> [ORD=17] [ID=8]

SU(7): 0x2239170: f32,ch = FLW 0x223c6a0, 0x224fb90, 0x223c2a0<Mem:LD4[%7](align=16)> [ORD=21] [ID=7]

SU(6): 0x2239270: i32 = ADDI 0x223bea0, 0x2239b70 [ORD=22] [ID=6]

SU(5): 0x223c4a0: ch = FSW 0x2239170, 0x2239270, 0x224fb90, 0x2239170:1<Mem:ST4[%3]> [ORD=22] [ID=5]

SU(4): 0x223c3a0: i32,ch = LW 0x223c5a0, 0x224fb90, 0x223c4a0<Mem:LD4[%2]> [ORD=23] [ID=4]

SU(12): 0x223bca0: f32,ch = FLW 0x223c3a0, 0x223bfa0, 0x223c4a0<Mem:LD4[%11]> [ORD=26] [ID=12]

SU(11): 0x2239c70: i32 = ADDI 0x223bea0, 0x2239470 [ORD=27] [ID=11]

SU(3): 0x2239870: ch = TokenFactor 0x223c3a0:1, 0x223bca0:1 [ORD=27] [ID=3]

SU(2): 0x2239370: ch = FSW 0x223bca0, 0x2239c70, 0x224fb90, 0x2239870<Mem:ST4[%4]> [ORD=27] [ID=2]

SU(18): 0x2239670: f32,ch = FLW 0x2239270, 0x224fb90, 0x2239370<Mem:LD4[%3]> [ORD=28] [ID=18]

SU(16): 0x224fc90: i32 = LUI 0x2239970 [ID=16]

SU(17): 0x2239a70: i32 = ADDI 0x223bda0, 0x2239770 [ID=17]

SU(15): 0x2239570: i32 = ADD 0x2239a70, 0x224fc90 [ID=15]

SU(14): 0x2238f70: f32,ch = FLW 0x2239570, 0x224fb90, 0x2239370<Mem:LD4[@var]> [ORD=29] [ID=14]

SU(13): 0x2239070: i32 = FULE_S 0x2239670, 0x2238f70 [ID=13]

SU(1): 0x223c8a0: ch = BNE 0x223c7a0, 0x2239070, 0x223bda0, 0x2239370 [ID=1]

SU(0): 0x223caa0: ch = JAL 0x223c9a0, 0x223c8a0 [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %16 = load i32** %2, align 4
I was here to add   %2 = alloca i32*, align 4
with I type i32*and sd value :0x223c6a0: i32 = FrameIndex<1>
new load?0x223c1a0: i32,ch = load 0x221bb88, 0x223c6a0, 0x223c5a0<LD4[%2]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x223c0a0: i32 = Constant<0>

    0x221bb88: ch = EntryToken

    0x223c6a0: i32 = FrameIndex<1>

    0x223c5a0: i32 = undef

  0x223c1a0: i32,ch = load 0x221bb88, 0x223c6a0, 0x223c5a0<LD4[%2]>

  0x221bb88: ch = EntryToken


store visit is after?  store i32 16, i32* %17, align 4
I was here to add i32 16
whats in dag after store?SelectionDAG has 10 nodes:
  0x223c0a0: i32 = Constant<0>

  0x223c5a0: i32 = undef [ORD=31]

    0x221bb88: ch = EntryToken [ORD=31]

    0x223c6a0: i32 = FrameIndex<1> [ORD=31]

    0x223c5a0: <multiple use>
  0x223c1a0: i32,ch = load 0x221bb88, 0x223c6a0, 0x223c5a0<LD4[%2]> [ORD=31]

  0x2239270: i64 = Constant<20>

    0x223c1a0: <multiple use>
    0x223bea0: i32 = Constant<16> [ORD=33]

      0x223c1a0: <multiple use>
      0x2239b70: i32 = Constant<20> [ORD=32]

    0x2239470: i32 = add 0x223c1a0, 0x2239b70 [ORD=32]

    0x223c5a0: <multiple use>
  0x223bfa0: ch = store 0x223c1a0:1, 0x223bea0, 0x2239470, 0x223c5a0<ST4[%17]> [ORD=33]


visiting load instruction   %18 = load i32** %2, align 4
with I type i32*and sd value :0x223c6a0: i32 = FrameIndex<1>
new load?0x224fb90: i32,ch = load 0x223bfa0, 0x223c6a0, 0x223c5a0<LD4[%2]>
dag after load is dealt with?SelectionDAG has 11 nodes:
  0x223c6a0: i32 = FrameIndex<1> [ORD=31]

  0x223c0a0: i32 = Constant<0>

  0x223c5a0: i32 = undef [ORD=31]

    0x221bb88: ch = EntryToken [ORD=31]

    0x223c6a0: <multiple use>
    0x223c5a0: <multiple use>
  0x223c1a0: i32,ch = load 0x221bb88, 0x223c6a0, 0x223c5a0<LD4[%2]> [ORD=31]

  0x2239270: i64 = Constant<20>

      0x223c1a0: <multiple use>
      0x223bea0: i32 = Constant<16> [ORD=33]

        0x223c1a0: <multiple use>
        0x2239b70: i32 = Constant<20> [ORD=32]

      0x2239470: i32 = add 0x223c1a0, 0x2239b70 [ORD=32]

      0x223c5a0: <multiple use>
    0x223bfa0: ch = store 0x223c1a0:1, 0x223bea0, 0x2239470, 0x223c5a0<ST4[%17]> [ORD=33]

    0x223c6a0: <multiple use>
    0x223c5a0: <multiple use>
  0x224fb90: i32,ch = load 0x223bfa0, 0x223c6a0, 0x223c5a0<LD4[%2]>

    0x223c1a0: <multiple use>
    0x223bea0: i32 = Constant<16> [ORD=33]

      0x223c1a0: <multiple use>
      0x2239b70: i32 = Constant<20> [ORD=32]

    0x2239470: i32 = add 0x223c1a0, 0x2239b70 [ORD=32]

    0x223c5a0: <multiple use>
  0x223bfa0: ch = store 0x223c1a0:1, 0x223bea0, 0x2239470, 0x223c5a0<ST4[%17]> [ORD=33]


store visit is after?  store i32 4, i32* %19, align 4
I was here to add i32 4
whats in dag after store?SelectionDAG has 15 nodes:
  0x223c6a0: i32 = FrameIndex<1> [ORD=31]

  0x223c0a0: i32 = Constant<0>

  0x223c5a0: i32 = undef [ORD=31]

    0x221bb88: ch = EntryToken [ORD=31]

    0x223c6a0: <multiple use>
    0x223c5a0: <multiple use>
  0x223c1a0: i32,ch = load 0x221bb88, 0x223c6a0, 0x223c5a0<LD4[%2]> [ORD=31]

  0x2239270: i64 = Constant<20>

  0x223bea0: i32 = Constant<16> [ORD=33]

      0x223c1a0: <multiple use>
      0x223bea0: <multiple use>
        0x223c1a0: <multiple use>
        0x2239b70: i32 = Constant<20> [ORD=32]

      0x2239470: i32 = add 0x223c1a0, 0x2239b70 [ORD=32]

      0x223c5a0: <multiple use>
    0x223bfa0: ch = store 0x223c1a0:1, 0x223bea0, 0x2239470, 0x223c5a0<ST4[%17]> [ORD=33]

    0x223c6a0: <multiple use>
    0x223c5a0: <multiple use>
  0x224fb90: i32,ch = load 0x223bfa0, 0x223c6a0, 0x223c5a0<LD4[%2]> [ORD=34]

  0x223bda0: i64 = Constant<16>

    0x224fb90: <multiple use>
    0x223c8a0: i32 = Constant<4> [ORD=36]

      0x224fb90: <multiple use>
      0x223bea0: <multiple use>
    0x223caa0: i32 = add 0x224fb90, 0x223bea0 [ORD=35]

    0x223c5a0: <multiple use>
  0x2239070: ch = store 0x224fb90:1, 0x223c8a0, 0x223caa0, 0x223c5a0<ST4[%19]> [ORD=36]


Initial selection DAG: BB#1 'running_protection3:running_protection3.if.then'
SelectionDAG has 15 nodes:
  0x223c6a0: i32 = FrameIndex<1> [ORD=31]

  0x223c0a0: i32 = Constant<0>

  0x223c5a0: i32 = undef [ORD=31]

    0x221bb88: ch = EntryToken [ORD=31]

    0x223c6a0: <multiple use>
    0x223c5a0: <multiple use>
  0x223c1a0: i32,ch = load 0x221bb88, 0x223c6a0, 0x223c5a0<LD4[%2]> [ORD=31]

  0x2239270: i64 = Constant<20>

  0x223bea0: i32 = Constant<16> [ORD=33]

      0x223c1a0: <multiple use>
      0x223bea0: <multiple use>
        0x223c1a0: <multiple use>
        0x2239b70: i32 = Constant<20> [ORD=32]

      0x2239470: i32 = add 0x223c1a0, 0x2239b70 [ORD=32]

      0x223c5a0: <multiple use>
    0x223bfa0: ch = store 0x223c1a0:1, 0x223bea0, 0x2239470, 0x223c5a0<ST4[%17]> [ORD=33]

    0x223c6a0: <multiple use>
    0x223c5a0: <multiple use>
  0x224fb90: i32,ch = load 0x223bfa0, 0x223c6a0, 0x223c5a0<LD4[%2]> [ORD=34]

  0x223bda0: i64 = Constant<16>

    0x224fb90: <multiple use>
    0x223c8a0: i32 = Constant<4> [ORD=36]

      0x224fb90: <multiple use>
      0x223bea0: <multiple use>
    0x223caa0: i32 = add 0x224fb90, 0x223bea0 [ORD=35]

    0x223c5a0: <multiple use>
  0x2239070: ch = store 0x224fb90:1, 0x223c8a0, 0x223caa0, 0x223c5a0<ST4[%19]> [ORD=36]


Optimized lowered selection DAG: BB#1 'running_protection3:running_protection3.if.then'
SelectionDAG has 12 nodes:
  0x223c6a0: i32 = FrameIndex<1> [ORD=31]

  0x223c5a0: i32 = undef [ORD=31]

    0x221bb88: ch = EntryToken [ORD=31]

    0x223c6a0: <multiple use>
    0x223c5a0: <multiple use>
  0x223c1a0: i32,ch = load 0x221bb88, 0x223c6a0, 0x223c5a0<LD4[%2]> [ORD=31]

  0x223bea0: i32 = Constant<16> [ORD=33]

      0x223c1a0: <multiple use>
      0x223bea0: <multiple use>
        0x223c1a0: <multiple use>
        0x2239b70: i32 = Constant<20> [ORD=32]

      0x2239470: i32 = add 0x223c1a0, 0x2239b70 [ORD=32]

      0x223c5a0: <multiple use>
    0x223bfa0: ch = store 0x223c1a0:1, 0x223bea0, 0x2239470, 0x223c5a0<ST4[%17]> [ORD=33]

    0x223c6a0: <multiple use>
    0x223c5a0: <multiple use>
  0x224fb90: i32,ch = load 0x223bfa0, 0x223c6a0, 0x223c5a0<LD4[%2]> [ORD=34]

    0x224fb90: <multiple use>
    0x223c8a0: i32 = Constant<4> [ORD=36]

      0x224fb90: <multiple use>
      0x223bea0: <multiple use>
    0x223caa0: i32 = add 0x224fb90, 0x223bea0 [ORD=35]

    0x223c5a0: <multiple use>
  0x2239070: ch = store 0x224fb90:1, 0x223c8a0, 0x223caa0, 0x223c5a0<ST4[%19]> [ORD=36]


Legally typed node: 0x223c8a0: i32 = Constant<4> [ORD=36] [ID=0]

Legally typed node: 0x223bea0: i32 = Constant<16> [ORD=33] [ID=0]

Legally typed node: 0x2239b70: i32 = Constant<20> [ORD=32] [ID=0]

Legally typed node: 0x223c5a0: i32 = undef [ORD=31] [ID=0]

Legally typed node: 0x223c6a0: i32 = FrameIndex<1> [ORD=31] [ID=0]

Legally typed node: 0x221bb88: ch = EntryToken [ORD=31] [ID=0]

Legally typed node: 0x223c1a0: i32,ch = load 0x221bb88, 0x223c6a0, 0x223c5a0<LD4[%2]> [ORD=31] [ID=0]

Legally typed node: 0x2239470: i32 = add 0x223c1a0, 0x2239b70 [ORD=32] [ID=0]

Legally typed node: 0x223bfa0: ch = store 0x223c1a0:1, 0x223bea0, 0x2239470, 0x223c5a0<ST4[%17]> [ORD=33] [ID=0]

Legally typed node: 0x224fb90: i32,ch = load 0x223bfa0, 0x223c6a0, 0x223c5a0<LD4[%2]> [ORD=34] [ID=0]

Legally typed node: 0x223caa0: i32 = add 0x224fb90, 0x223bea0 [ORD=35] [ID=0]

Legally typed node: 0x2239070: ch = store 0x224fb90:1, 0x223c8a0, 0x223caa0, 0x223c5a0<ST4[%19]> [ORD=36] [ID=0]

Legally typed node: 0x7fff6e802f00: ch = handlenode 0x2239070 [ID=0]

Type-legalized selection DAG: BB#1 'running_protection3:running_protection3.if.then'
SelectionDAG has 12 nodes:
  0x223c6a0: i32 = FrameIndex<1> [ORD=31] [ID=-3]

  0x223c5a0: i32 = undef [ORD=31] [ID=-3]

    0x221bb88: ch = EntryToken [ORD=31] [ID=-3]

    0x223c6a0: <multiple use>
    0x223c5a0: <multiple use>
  0x223c1a0: i32,ch = load 0x221bb88, 0x223c6a0, 0x223c5a0<LD4[%2]> [ORD=31] [ID=-3]

  0x223bea0: i32 = Constant<16> [ORD=33] [ID=-3]

      0x223c1a0: <multiple use>
      0x223bea0: <multiple use>
        0x223c1a0: <multiple use>
        0x2239b70: i32 = Constant<20> [ORD=32] [ID=-3]

      0x2239470: i32 = add 0x223c1a0, 0x2239b70 [ORD=32] [ID=-3]

      0x223c5a0: <multiple use>
    0x223bfa0: ch = store 0x223c1a0:1, 0x223bea0, 0x2239470, 0x223c5a0<ST4[%17]> [ORD=33] [ID=-3]

    0x223c6a0: <multiple use>
    0x223c5a0: <multiple use>
  0x224fb90: i32,ch = load 0x223bfa0, 0x223c6a0, 0x223c5a0<LD4[%2]> [ORD=34] [ID=-3]

    0x224fb90: <multiple use>
    0x223c8a0: i32 = Constant<4> [ORD=36] [ID=-3]

      0x224fb90: <multiple use>
      0x223bea0: <multiple use>
    0x223caa0: i32 = add 0x224fb90, 0x223bea0 [ORD=35] [ID=-3]

    0x223c5a0: <multiple use>
  0x2239070: ch = store 0x224fb90:1, 0x223c8a0, 0x223caa0, 0x223c5a0<ST4[%19]> [ORD=36] [ID=-3]


Legalized selection DAG: BB#1 'running_protection3:running_protection3.if.then'
SelectionDAG has 12 nodes:
  0x223c6a0: i32 = FrameIndex<1> [ORD=31] [ID=1]

  0x223c5a0: i32 = undef [ORD=31] [ID=2]

  0x223bea0: i32 = Constant<16> [ORD=33] [ID=4]

    0x221bb88: ch = EntryToken [ORD=31] [ID=0]

    0x223c6a0: <multiple use>
    0x223c5a0: <multiple use>
  0x223c1a0: i32,ch = load 0x221bb88, 0x223c6a0, 0x223c5a0<LD4[%2]> [ORD=31] [ID=6]

      0x223c1a0: <multiple use>
      0x223bea0: <multiple use>
        0x223c1a0: <multiple use>
        0x2239b70: i32 = Constant<20> [ORD=32] [ID=3]

      0x2239470: i32 = add 0x223c1a0, 0x2239b70 [ORD=32] [ID=7]

      0x223c5a0: <multiple use>
    0x223bfa0: ch = store 0x223c1a0:1, 0x223bea0, 0x2239470, 0x223c5a0<ST4[%17]> [ORD=33] [ID=8]

    0x223c6a0: <multiple use>
    0x223c5a0: <multiple use>
  0x224fb90: i32,ch = load 0x223bfa0, 0x223c6a0, 0x223c5a0<LD4[%2]> [ORD=34] [ID=9]

    0x224fb90: <multiple use>
    0x223c8a0: i32 = Constant<4> [ORD=36] [ID=5]

      0x224fb90: <multiple use>
      0x223bea0: <multiple use>
    0x223caa0: i32 = add 0x224fb90, 0x223bea0 [ORD=35] [ID=10]

    0x223c5a0: <multiple use>
  0x2239070: ch = store 0x224fb90:1, 0x223c8a0, 0x223caa0, 0x223c5a0<ST4[%19]> [ORD=36] [ID=11]


Optimized legalized selection DAG: BB#1 'running_protection3:running_protection3.if.then'
SelectionDAG has 12 nodes:
  0x223c6a0: i32 = FrameIndex<1> [ORD=31] [ID=1]

  0x223c5a0: i32 = undef [ORD=31] [ID=2]

  0x223bea0: i32 = Constant<16> [ORD=33] [ID=4]

    0x221bb88: ch = EntryToken [ORD=31] [ID=0]

    0x223c6a0: <multiple use>
    0x223c5a0: <multiple use>
  0x223c1a0: i32,ch = load 0x221bb88, 0x223c6a0, 0x223c5a0<LD4[%2]> [ORD=31] [ID=6]

      0x223c1a0: <multiple use>
      0x223bea0: <multiple use>
        0x223c1a0: <multiple use>
        0x2239b70: i32 = Constant<20> [ORD=32] [ID=3]

      0x2239470: i32 = add 0x223c1a0, 0x2239b70 [ORD=32] [ID=7]

      0x223c5a0: <multiple use>
    0x223bfa0: ch = store 0x223c1a0:1, 0x223bea0, 0x2239470, 0x223c5a0<ST4[%17]> [ORD=33] [ID=8]

    0x223c6a0: <multiple use>
    0x223c5a0: <multiple use>
  0x224fb90: i32,ch = load 0x223bfa0, 0x223c6a0, 0x223c5a0<LD4[%2]> [ORD=34] [ID=9]

    0x224fb90: <multiple use>
    0x223c8a0: i32 = Constant<4> [ORD=36] [ID=5]

      0x224fb90: <multiple use>
      0x223bea0: <multiple use>
    0x223caa0: i32 = add 0x224fb90, 0x223bea0 [ORD=35] [ID=10]

    0x223c5a0: <multiple use>
  0x2239070: ch = store 0x224fb90:1, 0x223c8a0, 0x223caa0, 0x223c5a0<ST4[%19]> [ORD=36] [ID=11]


===== Instruction selection begins: BB#1 'running_protection3.if.then'
ISEL: Starting pattern match on root node: 0x2239070: ch = store 0x224fb90:1, 0x223c8a0, 0x223caa0, 0x223c5a0<ST4[%19]> [ORD=36] [ID=11]

  Initial Opcode index to 178
  Morphed node: 0x2239070: ch = SW 0x223c8a0, 0x224fb90, 0x223c0a0, 0x224fb90:1<Mem:ST4[%19]> [ORD=36]

ISEL: Match complete!
=> 0x2239070: ch = SW 0x223c8a0, 0x224fb90, 0x223c0a0, 0x224fb90:1<Mem:ST4[%19]> [ORD=36]

ISEL: Starting pattern match on root node: 0x224fb90: i32,ch = load 0x223bfa0, 0x223c6a0, 0x223c5a0<LD4[%2]> [ORD=34] [ID=9]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x224fb90: i32,ch = LW 0x223c6a0, 0x223caa0, 0x223bfa0<Mem:LD4[%2]> [ORD=34]

ISEL: Match complete!
=> 0x224fb90: i32,ch = LW 0x223c6a0, 0x223caa0, 0x223bfa0<Mem:LD4[%2]> [ORD=34]

ISEL: Starting pattern match on root node: 0x223bfa0: ch = store 0x223c1a0:1, 0x223bea0, 0x2239470, 0x223c5a0<ST4[%17]> [ORD=33] [ID=8]

  Initial Opcode index to 178
  Morphed node: 0x223bfa0: ch = SW 0x223bea0, 0x223c1a0, 0x2239270, 0x223c1a0:1<Mem:ST4[%17]> [ORD=33]

ISEL: Match complete!
=> 0x223bfa0: ch = SW 0x223bea0, 0x223c1a0, 0x2239270, 0x223c1a0:1<Mem:ST4[%17]> [ORD=33]

ISEL: Starting pattern match on root node: 0x223c1a0: i32,ch = load 0x221bb88, 0x223c6a0, 0x223c5a0<LD4[%2]> [ORD=31] [ID=6]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x223c1a0: i32,ch = LW 0x223c6a0, 0x223caa0, 0x221bb88<Mem:LD4[%2]> [ORD=31]

ISEL: Match complete!
=> 0x223c1a0: i32,ch = LW 0x223c6a0, 0x223caa0, 0x221bb88<Mem:LD4[%2]> [ORD=31]

ISEL: Starting pattern match on root node: 0x223c8a0: i32 = Constant<4> [ORD=36] [ID=5]

  Initial Opcode index to 1226
comparing 0 and 4 and returning value:0
  Skipped scope entry (due to false predicate) at index 1228, continuing at 1236
  Morphed node: 0x223c8a0: i32 = ADDI 0x223c5a0, 0x2239b70 [ORD=36]

ISEL: Match complete!
=> 0x223c8a0: i32 = ADDI 0x223c5a0, 0x2239b70 [ORD=36]

ISEL: Starting pattern match on root node: 0x223bea0: i32 = Constant<16> [ORD=33] [ID=4]

  Initial Opcode index to 1226
comparing 0 and 16 and returning value:0
  Skipped scope entry (due to false predicate) at index 1228, continuing at 1236
  Morphed node: 0x223bea0: i32 = ADDI 0x223c5a0, 0x223c0a0 [ORD=33]

ISEL: Match complete!
=> 0x223bea0: i32 = ADDI 0x223c5a0, 0x223c0a0 [ORD=33]

=> 0x221bb88: ch = EntryToken [ORD=31]

===== Instruction selection ends:
Selected selection DAG: BB#1 'running_protection3:running_protection3.if.then'
SelectionDAG has 15 nodes:
    0x2239670: <multiple use>
    0x223caa0: <multiple use>
    0x221bb88: ch = EntryToken [ORD=31]

  0x223c1a0: i32,ch = LW 0x2239670, 0x223caa0, 0x221bb88<Mem:LD4[%2]> [ORD=31]

    0x2239670: <multiple use>
    0x223caa0: <multiple use>
        0x223c5a0: <multiple use>
        0x223c0a0: <multiple use>
      0x223bea0: i32 = ADDI 0x223c5a0, 0x223c0a0 [ORD=33]

      0x223c1a0: <multiple use>
      0x2239270: i32 = TargetConstant<20>

      0x223c1a0: <multiple use>
    0x223bfa0: ch = SW 0x223bea0, 0x223c1a0, 0x2239270, 0x223c1a0:1<Mem:ST4[%17]> [ORD=33]

  0x224fb90: i32,ch = LW 0x2239670, 0x223caa0, 0x223bfa0<Mem:LD4[%2]> [ORD=34]

  0x223c0a0: i32 = TargetConstant<16>

  0x223caa0: i32 = TargetConstant<0>

  0x223c5a0: i32 = Register %zero

    0x2239470: i32 = Register %t5

    0x223bda0: i32 = TargetFrameIndex<1>

  0x2239670: i32 = ADDI 0x2239470, 0x223bda0 [ORD=31]

      0x223c5a0: <multiple use>
      0x2239b70: i32 = TargetConstant<4>

    0x223c8a0: i32 = ADDI 0x223c5a0, 0x2239b70 [ORD=36]

    0x224fb90: <multiple use>
    0x223c0a0: <multiple use>
    0x224fb90: <multiple use>
  0x2239070: ch = SW 0x223c8a0, 0x224fb90, 0x223c0a0, 0x224fb90:1<Mem:ST4[%19]> [ORD=36]


********** List Scheduling BB#1 'running_protection3.if.then' **********
SU(0): 0x2239070: ch = SW 0x223c8a0, 0x224fb90, 0x223c0a0, 0x224fb90:1<Mem:ST4[%19]> [ORD=36] [ID=0]

  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
   val SU(6): Latency=1
   val SU(1): Latency=1
   ch  SU(1): Latency=1

SU(1): 0x224fb90: i32,ch = LW 0x2239670, 0x223caa0, 0x223bfa0<Mem:LD4[%2]> [ORD=34] [ID=1]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(5): Latency=1
   ch  SU(2): Latency=1
  Successors:
   val SU(0): Latency=1
   ch  SU(0): Latency=1

SU(2): 0x223bfa0: ch = SW 0x223bea0, 0x223c1a0, 0x2239270, 0x223c1a0:1<Mem:ST4[%17]> [ORD=33] [ID=2]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(4): Latency=1
   val SU(3): Latency=1
   ch  SU(3): Latency=1
  Successors:
   ch  SU(1): Latency=1

SU(3): 0x223c1a0: i32,ch = LW 0x2239670, 0x223caa0, 0x221bb88<Mem:LD4[%2]> [ORD=31] [ID=3]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(5): Latency=1
  Successors:
   val SU(2): Latency=1
   ch  SU(2): Latency=1

SU(4): 0x223bea0: i32 = ADDI 0x223c5a0, 0x223c0a0 [ORD=33] [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(2): Latency=1

SU(5): 0x2239670: i32 = ADDI 0x2239470, 0x223bda0 [ORD=31] [ID=5]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(1): Latency=1
   val SU(3): Latency=1

SU(6): 0x223c8a0: i32 = ADDI 0x223c5a0, 0x2239b70 [ORD=36] [ID=6]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
   val SU(0): Latency=1


Examining Available:
Height 0: SU(0): 0x2239070: ch = SW 0x223c8a0, 0x224fb90, 0x223c0a0, 0x224fb90:1<Mem:ST4[%19]> [ORD=36] [ID=0]


*** Scheduling [0]: SU(0): 0x2239070: ch = SW 0x223c8a0, 0x224fb90, 0x223c0a0, 0x224fb90:1<Mem:ST4[%19]> [ORD=36] [ID=0]


Examining Available:
Height 1: SU(6): 0x223c8a0: i32 = ADDI 0x223c5a0, 0x2239b70 [ORD=36] [ID=6]

Height 1: SU(1): 0x224fb90: i32,ch = LW 0x2239670, 0x223caa0, 0x223bfa0<Mem:LD4[%2]> [ORD=34] [ID=1]


*** Scheduling [1]: SU(6): 0x223c8a0: i32 = ADDI 0x223c5a0, 0x2239b70 [ORD=36] [ID=6]


Examining Available:
Height 1: SU(1): 0x224fb90: i32,ch = LW 0x2239670, 0x223caa0, 0x223bfa0<Mem:LD4[%2]> [ORD=34] [ID=1]


*** Scheduling [2]: SU(1): 0x224fb90: i32,ch = LW 0x2239670, 0x223caa0, 0x223bfa0<Mem:LD4[%2]> [ORD=34] [ID=1]


Examining Available:
Height 3: SU(2): 0x223bfa0: ch = SW 0x223bea0, 0x223c1a0, 0x2239270, 0x223c1a0:1<Mem:ST4[%17]> [ORD=33] [ID=2]


*** Scheduling [3]: SU(2): 0x223bfa0: ch = SW 0x223bea0, 0x223c1a0, 0x2239270, 0x223c1a0:1<Mem:ST4[%17]> [ORD=33] [ID=2]


Examining Available:
Height 4: SU(4): 0x223bea0: i32 = ADDI 0x223c5a0, 0x223c0a0 [ORD=33] [ID=4]

Height 4: SU(3): 0x223c1a0: i32,ch = LW 0x2239670, 0x223caa0, 0x221bb88<Mem:LD4[%2]> [ORD=31] [ID=3]


*** Scheduling [4]: SU(4): 0x223bea0: i32 = ADDI 0x223c5a0, 0x223c0a0 [ORD=33] [ID=4]


Examining Available:
Height 4: SU(3): 0x223c1a0: i32,ch = LW 0x2239670, 0x223caa0, 0x221bb88<Mem:LD4[%2]> [ORD=31] [ID=3]


*** Scheduling [5]: SU(3): 0x223c1a0: i32,ch = LW 0x2239670, 0x223caa0, 0x221bb88<Mem:LD4[%2]> [ORD=31] [ID=3]


Examining Available:
Height 6: SU(5): 0x2239670: i32 = ADDI 0x2239470, 0x223bda0 [ORD=31] [ID=5]


*** Scheduling [6]: SU(5): 0x2239670: i32 = ADDI 0x2239470, 0x223bda0 [ORD=31] [ID=5]

*** Final schedule ***
SU(5): 0x2239670: i32 = ADDI 0x2239470, 0x223bda0 [ORD=31] [ID=5]

SU(3): 0x223c1a0: i32,ch = LW 0x2239670, 0x223caa0, 0x221bb88<Mem:LD4[%2]> [ORD=31] [ID=3]

SU(4): 0x223bea0: i32 = ADDI 0x223c5a0, 0x223c0a0 [ORD=33] [ID=4]

SU(2): 0x223bfa0: ch = SW 0x223bea0, 0x223c1a0, 0x2239270, 0x223c1a0:1<Mem:ST4[%17]> [ORD=33] [ID=2]

SU(1): 0x224fb90: i32,ch = LW 0x2239670, 0x223caa0, 0x223bfa0<Mem:LD4[%2]> [ORD=34] [ID=1]

SU(6): 0x223c8a0: i32 = ADDI 0x223c5a0, 0x2239b70 [ORD=36] [ID=6]

SU(0): 0x2239070: ch = SW 0x223c8a0, 0x224fb90, 0x223c0a0, 0x224fb90:1<Mem:ST4[%19]> [ORD=36] [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %20 = load i32** %2, align 4
I was here to add   %2 = alloca i32*, align 4
with I type i32*and sd value :0x2239670: i32 = FrameIndex<1>
new load?0x2239b70: i32,ch = load 0x221bb88, 0x2239670, 0x2239470<LD4[%2]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x223bda0: i32 = Constant<0>

    0x221bb88: ch = EntryToken

    0x2239670: i32 = FrameIndex<1>

    0x2239470: i32 = undef

  0x2239b70: i32,ch = load 0x221bb88, 0x2239670, 0x2239470<LD4[%2]>

  0x221bb88: ch = EntryToken


visiting load instruction   %22 = load i32* %21, align 4
with I type i32and sd value :0x223caa0: i32 = add 0x2239b70, 0x2239270
new load?0x223c0a0: i32,ch = load 0x221bb88, 0x223caa0, 0x2239470<LD4[%21]>
dag after load is dealt with?SelectionDAG has 9 nodes:
  0x223bda0: i32 = Constant<0>

  0x2239470: i32 = undef [ORD=37]

  0x223c5a0: i64 = Constant<8>

    0x221bb88: <multiple use>
        0x221bb88: <multiple use>
        0x2239670: i32 = FrameIndex<1> [ORD=37]

        0x2239470: <multiple use>
      0x2239b70: i32,ch = load 0x221bb88, 0x2239670, 0x2239470<LD4[%2]> [ORD=37]

      0x2239270: i32 = Constant<8> [ORD=38]

    0x223caa0: i32 = add 0x2239b70, 0x2239270 [ORD=38]

    0x2239470: <multiple use>
  0x223c0a0: i32,ch = load 0x221bb88, 0x223caa0, 0x2239470<LD4[%21]>

  0x221bb88: ch = EntryToken [ORD=37]


visiting load instruction   %24 = load float* %4, align 4
I was here to add   %4 = alloca float, align 4
with I type floatand sd value :0x224fb90: i32 = FrameIndex<3>
new load?0x223bfa0: f32,ch = load 0x221bb88, 0x224fb90, 0x2239470<LD4[%4]>
dag after load is dealt with?SelectionDAG has 12 nodes:
  0x223bda0: i32 = Constant<0>

  0x2239470: i32 = undef [ORD=37]

  0x223c5a0: i64 = Constant<8>

      0x221bb88: <multiple use>
          0x221bb88: <multiple use>
          0x2239670: i32 = FrameIndex<1> [ORD=37]

          0x2239470: <multiple use>
        0x2239b70: i32,ch = load 0x221bb88, 0x2239670, 0x2239470<LD4[%2]> [ORD=37]

        0x2239270: i32 = Constant<8> [ORD=38]

      0x223caa0: i32 = add 0x2239b70, 0x2239270 [ORD=38]

      0x2239470: <multiple use>
    0x223c0a0: i32,ch = load 0x221bb88, 0x223caa0, 0x2239470<LD4[%21]> [ORD=39]

  0x2239070: f32 = sint_to_fp 0x223c0a0 [ORD=40]

    0x221bb88: <multiple use>
    0x224fb90: i32 = FrameIndex<3>

    0x2239470: <multiple use>
  0x223bfa0: f32,ch = load 0x221bb88, 0x224fb90, 0x2239470<LD4[%4]>

  0x221bb88: ch = EntryToken [ORD=37]


I was here to add float 2.000000e+00
I was here to add float 3.500000e+02
Initial selection DAG: BB#2 'running_protection3:running_protection3.if.end'
SelectionDAG has 24 nodes:
  0x221bb88: ch = EntryToken [ORD=37]

  0x223bda0: i32 = Constant<0>

  0x2239470: i32 = undef [ORD=37]

  0x223c5a0: i64 = Constant<8>

      0x221bb88: <multiple use>
              0x221bb88: <multiple use>
                  0x221bb88: <multiple use>
                  0x2239670: i32 = FrameIndex<1> [ORD=37]

                  0x2239470: <multiple use>
                0x2239b70: i32,ch = load 0x221bb88, 0x2239670, 0x2239470<LD4[%2]> [ORD=37]

                0x2239270: i32 = Constant<8> [ORD=38]

              0x223caa0: i32 = add 0x2239b70, 0x2239270 [ORD=38]

              0x2239470: <multiple use>
            0x223c0a0: i32,ch = load 0x221bb88, 0x223caa0, 0x2239470<LD4[%21]> [ORD=39]

          0x2239070: f32 = sint_to_fp 0x223c0a0 [ORD=40]

                0x221bb88: <multiple use>
                0x224fb90: i32 = FrameIndex<3> [ORD=41]

                0x2239470: <multiple use>
              0x223bfa0: f32,ch = load 0x221bb88, 0x224fb90, 0x2239470<LD4[%4]> [ORD=41]

              0x223c1a0: f32 = ConstantFP<2.000000e+00> [ORD=42]

            0x223c8a0: f32 = fmul 0x223bfa0, 0x223c1a0 [ORD=42]

            0x223bea0: f32 = ConstantFP<3.500000e+02> [ORD=43]

          0x223c6a0: f32 = fadd 0x223c8a0, 0x223bea0 [ORD=43]

          0x2238f70: ch = setolt [ORD=44]

        0x2239370: i1 = setcc 0x2239070, 0x223c6a0, 0x2238f70 [ORD=44]

        0x2239870: i1 = Constant<-1>

      0x223bca0: i1 = xor 0x2239370, 0x2239870

      0x223c3a0: ch = BasicBlock<running_protection3.if.end10 0x2248060>

    0x223c4a0: ch = brcond 0x221bb88, 0x223bca0, 0x223c3a0

    0x2239570: ch = BasicBlock<running_protection3.if.then7 0x2247fb0>

  0x2239170: ch = br 0x223c4a0, 0x2239570



Replacing.3 0x223bca0: i1 = xor 0x2239370, 0x2239870

With: 0x224fc90: i1 = setcc 0x2239070, 0x223c6a0, 0x2239a70


Replacing.3 0x223c8a0: f32 = fmul 0x223bfa0, 0x223c1a0 [ORD=42]

With: 0x2238f70: f32 = fadd 0x223bfa0, 0x223bfa0

Optimized lowered selection DAG: BB#2 'running_protection3:running_protection3.if.end'
SelectionDAG has 19 nodes:
  0x221bb88: ch = EntryToken [ORD=37]

  0x2239470: i32 = undef [ORD=37]

    0x221bb88: <multiple use>
    0x224fb90: i32 = FrameIndex<3> [ORD=41]

    0x2239470: <multiple use>
  0x223bfa0: f32,ch = load 0x221bb88, 0x224fb90, 0x2239470<LD4[%4]> [ORD=41]

      0x221bb88: <multiple use>
            0x221bb88: <multiple use>
                0x221bb88: <multiple use>
                0x2239670: i32 = FrameIndex<1> [ORD=37]

                0x2239470: <multiple use>
              0x2239b70: i32,ch = load 0x221bb88, 0x2239670, 0x2239470<LD4[%2]> [ORD=37]

              0x2239270: i32 = Constant<8> [ORD=38]

            0x223caa0: i32 = add 0x2239b70, 0x2239270 [ORD=38]

            0x2239470: <multiple use>
          0x223c0a0: i32,ch = load 0x221bb88, 0x223caa0, 0x2239470<LD4[%21]> [ORD=39]

        0x2239070: f32 = sint_to_fp 0x223c0a0 [ORD=40]

            0x223bfa0: <multiple use>
            0x223bfa0: <multiple use>
          0x2238f70: f32 = fadd 0x223bfa0, 0x223bfa0

          0x223bea0: f32 = ConstantFP<3.500000e+02> [ORD=43]

        0x223c6a0: f32 = fadd 0x2238f70, 0x223bea0 [ORD=43]

        0x2239a70: ch = setuge

      0x224fc90: i1 = setcc 0x2239070, 0x223c6a0, 0x2239a70

      0x223c3a0: ch = BasicBlock<running_protection3.if.end10 0x2248060>

    0x223c4a0: ch = brcond 0x221bb88, 0x224fc90, 0x223c3a0

    0x2239570: ch = BasicBlock<running_protection3.if.then7 0x2247fb0>

  0x2239170: ch = br 0x223c4a0, 0x2239570


Legally typed node: 0x2239a70: ch = setuge [ID=0]

Legally typed node: 0x2239570: ch = BasicBlock<running_protection3.if.then7 0x2247fb0> [ID=0]

Legally typed node: 0x223c3a0: ch = BasicBlock<running_protection3.if.end10 0x2248060> [ID=0]

Legally typed node: 0x223bea0: f32 = ConstantFP<3.500000e+02> [ORD=43] [ID=0]

Legally typed node: 0x224fb90: i32 = FrameIndex<3> [ORD=41] [ID=0]

Legally typed node: 0x2239270: i32 = Constant<8> [ORD=38] [ID=0]

Legally typed node: 0x2239470: i32 = undef [ORD=37] [ID=0]

Legally typed node: 0x2239670: i32 = FrameIndex<1> [ORD=37] [ID=0]

Legally typed node: 0x221bb88: ch = EntryToken [ORD=37] [ID=0]

Legally typed node: 0x2239b70: i32,ch = load 0x221bb88, 0x2239670, 0x2239470<LD4[%2]> [ORD=37] [ID=0]

Legally typed node: 0x223caa0: i32 = add 0x2239b70, 0x2239270 [ORD=38] [ID=0]

Legally typed node: 0x223c0a0: i32,ch = load 0x221bb88, 0x223caa0, 0x2239470<LD4[%21]> [ORD=39] [ID=0]

Legally typed node: 0x2239070: f32 = sint_to_fp 0x223c0a0 [ORD=40] [ID=0]

Legally typed node: 0x223bfa0: f32,ch = load 0x221bb88, 0x224fb90, 0x2239470<LD4[%4]> [ORD=41] [ID=0]

Legally typed node: 0x2238f70: f32 = fadd 0x223bfa0, 0x223bfa0 [ID=0]

Legally typed node: 0x223c6a0: f32 = fadd 0x2238f70, 0x223bea0 [ORD=43] [ID=0]

Promote integer result: 0x224fc90: i1 = setcc 0x2239070, 0x223c6a0, 0x2239a70 [ID=0]

Promote integer operand: 0x223c4a0: ch = brcond 0x221bb88, 0x224fc90, 0x223c3a0 [ID=0]

Promote integer operand: 0x223c5a0: i32 = zero_extend 0x224fc90 [ID=0]

Legally typed node: 0x223c1a0: i32 = Constant<1> [ID=0]

Legally typed node: 0x223bda0: i32 = setcc 0x2239070, 0x223c6a0, 0x2239a70 [ID=0]

Legally typed node: 0x223c8a0: i32 = and 0x223bda0, 0x223c1a0 [ID=0]

Legally typed node: 0x223c4a0: ch = brcond 0x221bb88, 0x223c8a0, 0x223c3a0 [ID=0]

Legally typed node: 0x2239170: ch = br 0x223c4a0, 0x2239570 [ID=0]

Legally typed node: 0x7fff6e802f00: ch = handlenode 0x2239170 [ID=0]

Type-legalized selection DAG: BB#2 'running_protection3:running_protection3.if.end'
SelectionDAG has 21 nodes:
  0x221bb88: ch = EntryToken [ORD=37] [ID=-3]

  0x2239470: i32 = undef [ORD=37] [ID=-3]

    0x221bb88: <multiple use>
    0x224fb90: i32 = FrameIndex<3> [ORD=41] [ID=-3]

    0x2239470: <multiple use>
  0x223bfa0: f32,ch = load 0x221bb88, 0x224fb90, 0x2239470<LD4[%4]> [ORD=41] [ID=-3]

      0x221bb88: <multiple use>
              0x221bb88: <multiple use>
                  0x221bb88: <multiple use>
                  0x2239670: i32 = FrameIndex<1> [ORD=37] [ID=-3]

                  0x2239470: <multiple use>
                0x2239b70: i32,ch = load 0x221bb88, 0x2239670, 0x2239470<LD4[%2]> [ORD=37] [ID=-3]

                0x2239270: i32 = Constant<8> [ORD=38] [ID=-3]

              0x223caa0: i32 = add 0x2239b70, 0x2239270 [ORD=38] [ID=-3]

              0x2239470: <multiple use>
            0x223c0a0: i32,ch = load 0x221bb88, 0x223caa0, 0x2239470<LD4[%21]> [ORD=39] [ID=-3]

          0x2239070: f32 = sint_to_fp 0x223c0a0 [ORD=40] [ID=-3]

              0x223bfa0: <multiple use>
              0x223bfa0: <multiple use>
            0x2238f70: f32 = fadd 0x223bfa0, 0x223bfa0 [ID=-3]

            0x223bea0: f32 = ConstantFP<3.500000e+02> [ORD=43] [ID=-3]

          0x223c6a0: f32 = fadd 0x2238f70, 0x223bea0 [ORD=43] [ID=-3]

          0x2239a70: ch = setuge [ID=-3]

        0x223bda0: i32 = setcc 0x2239070, 0x223c6a0, 0x2239a70 [ID=-3]

        0x223c1a0: i32 = Constant<1> [ID=-3]

      0x223c8a0: i32 = and 0x223bda0, 0x223c1a0 [ID=-3]

      0x223c3a0: ch = BasicBlock<running_protection3.if.end10 0x2248060> [ID=-3]

    0x223c4a0: ch = brcond 0x221bb88, 0x223c8a0, 0x223c3a0 [ID=-3]

    0x2239570: ch = BasicBlock<running_protection3.if.then7 0x2247fb0> [ID=-3]

  0x2239170: ch = br 0x223c4a0, 0x2239570 [ID=-3]



Replacing.2 0x223c8a0: i32 = and 0x223bda0, 0x223c1a0 [ID=-3]

With: 0x223bda0: i32 = setcc 0x2239070, 0x223c6a0, 0x2239a70 [ID=-3]

Optimized type-legalized selection DAG: BB#2 'running_protection3:running_protection3.if.end'
SelectionDAG has 19 nodes:
  0x221bb88: ch = EntryToken [ORD=37] [ID=-3]

  0x2239470: i32 = undef [ORD=37] [ID=-3]

    0x221bb88: <multiple use>
    0x224fb90: i32 = FrameIndex<3> [ORD=41] [ID=-3]

    0x2239470: <multiple use>
  0x223bfa0: f32,ch = load 0x221bb88, 0x224fb90, 0x2239470<LD4[%4]> [ORD=41] [ID=-3]

      0x221bb88: <multiple use>
            0x221bb88: <multiple use>
                0x221bb88: <multiple use>
                0x2239670: i32 = FrameIndex<1> [ORD=37] [ID=-3]

                0x2239470: <multiple use>
              0x2239b70: i32,ch = load 0x221bb88, 0x2239670, 0x2239470<LD4[%2]> [ORD=37] [ID=-3]

              0x2239270: i32 = Constant<8> [ORD=38] [ID=-3]

            0x223caa0: i32 = add 0x2239b70, 0x2239270 [ORD=38] [ID=-3]

            0x2239470: <multiple use>
          0x223c0a0: i32,ch = load 0x221bb88, 0x223caa0, 0x2239470<LD4[%21]> [ORD=39] [ID=-3]

        0x2239070: f32 = sint_to_fp 0x223c0a0 [ORD=40] [ID=-3]

            0x223bfa0: <multiple use>
            0x223bfa0: <multiple use>
          0x2238f70: f32 = fadd 0x223bfa0, 0x223bfa0 [ID=-3]

          0x223bea0: f32 = ConstantFP<3.500000e+02> [ORD=43] [ID=-3]

        0x223c6a0: f32 = fadd 0x2238f70, 0x223bea0 [ORD=43] [ID=-3]

        0x2239a70: ch = setuge [ID=-3]

      0x223bda0: i32 = setcc 0x2239070, 0x223c6a0, 0x2239a70 [ID=-3]

      0x223c3a0: ch = BasicBlock<running_protection3.if.end10 0x2248060> [ID=-3]

    0x223c4a0: ch = brcond 0x221bb88, 0x223bda0, 0x223c3a0 [ID=-3]

    0x2239570: ch = BasicBlock<running_protection3.if.then7 0x2247fb0> [ID=-3]

  0x2239170: ch = br 0x223c4a0, 0x2239570 [ID=-3]


Legalized selection DAG: BB#2 'running_protection3:running_protection3.if.end'
SelectionDAG has 19 nodes:
  0x221bb88: ch = EntryToken [ORD=37] [ID=0]

  0x2239470: i32 = undef [ORD=37] [ID=2]

    0x221bb88: <multiple use>
    0x224fb90: i32 = FrameIndex<3> [ORD=41] [ID=4]

    0x2239470: <multiple use>
  0x223bfa0: f32,ch = load 0x221bb88, 0x224fb90, 0x2239470<LD4[%4]> [ORD=41] [ID=10]

      0x221bb88: <multiple use>
            0x221bb88: <multiple use>
                0x221bb88: <multiple use>
                0x2239670: i32 = FrameIndex<1> [ORD=37] [ID=1]

                0x2239470: <multiple use>
              0x2239b70: i32,ch = load 0x221bb88, 0x2239670, 0x2239470<LD4[%2]> [ORD=37] [ID=9]

              0x2239270: i32 = Constant<8> [ORD=38] [ID=3]

            0x223caa0: i32 = add 0x2239b70, 0x2239270 [ORD=38] [ID=11]

            0x2239470: <multiple use>
          0x223c0a0: i32,ch = load 0x221bb88, 0x223caa0, 0x2239470<LD4[%21]> [ORD=39] [ID=13]

        0x2239070: f32 = sint_to_fp 0x223c0a0 [ORD=40] [ID=15]

            0x223bfa0: <multiple use>
            0x223bfa0: <multiple use>
          0x2238f70: f32 = fadd 0x223bfa0, 0x223bfa0 [ID=12]

          0x223c1a0: i32 = Constant<1135542272>

        0x223c6a0: f32 = fadd 0x2238f70, 0x223c1a0 [ORD=43] [ID=14]

        0x2239a70: ch = setuge [ID=8]

      0x223bda0: i32 = setcc 0x2239070, 0x223c6a0, 0x2239a70 [ID=16]

      0x223c3a0: ch = BasicBlock<running_protection3.if.end10 0x2248060> [ID=6]

    0x223c4a0: ch = brcond 0x221bb88, 0x223bda0, 0x223c3a0 [ID=17]

    0x2239570: ch = BasicBlock<running_protection3.if.then7 0x2247fb0> [ID=7]

  0x2239170: ch = br 0x223c4a0, 0x2239570 [ID=18]


Optimized legalized selection DAG: BB#2 'running_protection3:running_protection3.if.end'
SelectionDAG has 19 nodes:
  0x221bb88: ch = EntryToken [ORD=37] [ID=0]

  0x2239470: i32 = undef [ORD=37] [ID=2]

    0x221bb88: <multiple use>
    0x224fb90: i32 = FrameIndex<3> [ORD=41] [ID=4]

    0x2239470: <multiple use>
  0x223bfa0: f32,ch = load 0x221bb88, 0x224fb90, 0x2239470<LD4[%4]> [ORD=41] [ID=10]

      0x221bb88: <multiple use>
            0x221bb88: <multiple use>
                0x221bb88: <multiple use>
                0x2239670: i32 = FrameIndex<1> [ORD=37] [ID=1]

                0x2239470: <multiple use>
              0x2239b70: i32,ch = load 0x221bb88, 0x2239670, 0x2239470<LD4[%2]> [ORD=37] [ID=9]

              0x2239270: i32 = Constant<8> [ORD=38] [ID=3]

            0x223caa0: i32 = add 0x2239b70, 0x2239270 [ORD=38] [ID=11]

            0x2239470: <multiple use>
          0x223c0a0: i32,ch = load 0x221bb88, 0x223caa0, 0x2239470<LD4[%21]> [ORD=39] [ID=13]

        0x2239070: f32 = sint_to_fp 0x223c0a0 [ORD=40] [ID=15]

            0x223bfa0: <multiple use>
            0x223bfa0: <multiple use>
          0x2238f70: f32 = fadd 0x223bfa0, 0x223bfa0 [ID=12]

          0x223c1a0: i32 = Constant<1135542272>

        0x223c6a0: f32 = fadd 0x2238f70, 0x223c1a0 [ORD=43] [ID=14]

        0x2239a70: ch = setuge [ID=8]

      0x223bda0: i32 = setcc 0x2239070, 0x223c6a0, 0x2239a70 [ID=16]

      0x223c3a0: ch = BasicBlock<running_protection3.if.end10 0x2248060> [ID=6]

    0x223c4a0: ch = brcond 0x221bb88, 0x223bda0, 0x223c3a0 [ID=17]

    0x2239570: ch = BasicBlock<running_protection3.if.then7 0x2247fb0> [ID=7]

  0x2239170: ch = br 0x223c4a0, 0x2239570 [ID=18]


===== Instruction selection begins: BB#2 'running_protection3.if.end'
ISEL: Starting pattern match on root node: 0x2239170: ch = br 0x223c4a0, 0x2239570 [ID=18]

  Initial Opcode index to 1938
  Morphed node: 0x2239170: ch = JAL 0x2239570, 0x223c4a0

ISEL: Match complete!
=> 0x2239170: ch = JAL 0x2239570, 0x223c4a0

ISEL: Starting pattern match on root node: 0x223c4a0: ch = brcond 0x221bb88, 0x223bda0, 0x223c3a0 [ID=17]

  Initial Opcode index to 1439
  Match failed at index 1449
  Continuing at 1676
  Morphed node: 0x223c4a0: ch = BNE 0x223c3a0, 0x223bda0, 0x223bea0, 0x221bb88

ISEL: Match complete!
=> 0x223c4a0: ch = BNE 0x223c3a0, 0x223bda0, 0x223bea0, 0x221bb88

ISEL: Starting pattern match on root node: 0x223bda0: i32 = setcc 0x2239070, 0x223c6a0, 0x2239a70 [ID=16]

  Initial Opcode index to 642
  Match failed at index 648
  Continuing at 688
  Match failed at index 690
  Continuing at 899
  Skipped scope entry (due to false predicate) at index 908, continuing at 920
  Skipped scope entry (due to false predicate) at index 921, continuing at 933
  Skipped scope entry (due to false predicate) at index 934, continuing at 946
  Skipped scope entry (due to false predicate) at index 947, continuing at 959
  Skipped scope entry (due to false predicate) at index 960, continuing at 972
  Skipped scope entry (due to false predicate) at index 973, continuing at 985
  Skipped scope entry (due to false predicate) at index 986, continuing at 998
  Skipped scope entry (due to false predicate) at index 999, continuing at 1011
  Skipped scope entry (due to false predicate) at index 1012, continuing at 1024
  Morphed node: 0x223bda0: i32 = FULE_S 0x2239070, 0x223c6a0

ISEL: Match complete!
=> 0x223bda0: i32 = FULE_S 0x2239070, 0x223c6a0

ISEL: Starting pattern match on root node: 0x2239070: f32 = sint_to_fp 0x223c0a0 [ORD=40] [ID=15]

  Initial Opcode index to 2155
  Morphed node: 0x2239070: f32 = FCVT_S_W_RDY 0x223c0a0 [ORD=40]

ISEL: Match complete!
=> 0x2239070: f32 = FCVT_S_W_RDY 0x223c0a0 [ORD=40]

ISEL: Starting pattern match on root node: 0x223c6a0: f32 = fadd 0x2238f70, 0x223c1a0 [ORD=43] [ID=14]

  Initial Opcode index to 1736
  Match failed at index 1740
  Continuing at 1757
  Match failed at index 1763
  Continuing at 1779
  Morphed node: 0x223c6a0: f32 = FADD_S_RDY 0x223c1a0, 0x2238f70 [ORD=43]

ISEL: Match complete!
=> 0x223c6a0: f32 = FADD_S_RDY 0x223c1a0, 0x2238f70 [ORD=43]

ISEL: Starting pattern match on root node: 0x223c0a0: i32,ch = load 0x221bb88, 0x223caa0, 0x2239470<LD4[%21]> [ORD=39] [ID=13]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x223c0a0: i32,ch = LW 0x2239b70, 0x2239a70, 0x221bb88<Mem:LD4[%21]> [ORD=39]

ISEL: Match complete!
=> 0x223c0a0: i32,ch = LW 0x2239b70, 0x2239a70, 0x221bb88<Mem:LD4[%21]> [ORD=39]

ISEL: Starting pattern match on root node: 0x2238f70: f32 = fadd 0x223bfa0, 0x223bfa0 [ID=12]

  Initial Opcode index to 1736
  Match failed at index 1740
  Continuing at 1757
  Match failed at index 1763
  Continuing at 1779
  Morphed node: 0x2238f70: f32 = FADD_S_RDY 0x223bfa0, 0x223bfa0

ISEL: Match complete!
=> 0x2238f70: f32 = FADD_S_RDY 0x223bfa0, 0x223bfa0

ISEL: Starting pattern match on root node: 0x223bfa0: f32,ch = load 0x221bb88, 0x224fb90, 0x2239470<LD4[%4]> [ORD=41] [ID=10]

  Initial Opcode index to 5
  TypeSwitch[f32] from 10 to 159
  Morphed node: 0x223bfa0: f32,ch = FLW 0x224fb90, 0x2239270, 0x221bb88<Mem:LD4[%4]> [ORD=41]

ISEL: Match complete!
=> 0x223bfa0: f32,ch = FLW 0x224fb90, 0x2239270, 0x221bb88<Mem:LD4[%4]> [ORD=41]

ISEL: Starting pattern match on root node: 0x2239b70: i32,ch = load 0x221bb88, 0x2239670, 0x2239470<LD4[%2]> [ORD=37] [ID=9]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2239b70: i32,ch = LW 0x2239670, 0x2239270, 0x221bb88<Mem:LD4[%2]> [ORD=37]

ISEL: Match complete!
=> 0x2239b70: i32,ch = LW 0x2239670, 0x2239270, 0x221bb88<Mem:LD4[%2]> [ORD=37]

ISEL: Starting pattern match on root node: 0x223c1a0: i32 = Constant<1135542272> [ID=8]

  Initial Opcode index to 1226
comparing 0 and 1135542272 and returning value:0
  Skipped scope entry (due to false predicate) at index 1228, continuing at 1236
  Skipped scope entry (due to false predicate) at index 1240, continuing at 1256
  Morphed node: 0x223c1a0: i32 = ADDI 0x223bea0, 0x2239470

ISEL: Match complete!
=> 0x223c1a0: i32 = ADDI 0x223bea0, 0x2239470

=> 0x2239570: ch = BasicBlock<running_protection3.if.then7 0x2247fb0>

=> 0x223c3a0: ch = BasicBlock<running_protection3.if.end10 0x2248060>

=> 0x221bb88: ch = EntryToken [ORD=37]

===== Instruction selection ends:
Selected selection DAG: BB#2 'running_protection3:running_protection3.if.end'
SelectionDAG has 22 nodes:
  0x221bb88: ch = EntryToken [ORD=37]

      0x223caa0: <multiple use>
      0x223c8a0: i32 = TargetFrameIndex<3>

    0x224fb90: i32 = ADDI 0x223caa0, 0x223c8a0 [ORD=41]

    0x2239270: <multiple use>
    0x221bb88: <multiple use>
  0x223bfa0: f32,ch = FLW 0x224fb90, 0x2239270, 0x221bb88<Mem:LD4[%4]> [ORD=41]

  0x223bea0: i32 = Register %zero

  0x2239270: i32 = TargetConstant<0>

  0x223caa0: i32 = Register %t5

    0x2239570: ch = BasicBlock<running_protection3.if.then7 0x2247fb0>

      0x223c3a0: ch = BasicBlock<running_protection3.if.end10 0x2248060>

                0x223caa0: <multiple use>
                0x224fc90: i32 = TargetFrameIndex<1>

              0x2239670: i32 = ADDI 0x223caa0, 0x224fc90 [ORD=37]

              0x2239270: <multiple use>
              0x221bb88: <multiple use>
            0x2239b70: i32,ch = LW 0x2239670, 0x2239270, 0x221bb88<Mem:LD4[%2]> [ORD=37]

            0x2239a70: i32 = TargetConstant<8>

            0x221bb88: <multiple use>
          0x223c0a0: i32,ch = LW 0x2239b70, 0x2239a70, 0x221bb88<Mem:LD4[%21]> [ORD=39]

        0x2239070: f32 = FCVT_S_W_RDY 0x223c0a0 [ORD=40]

            0x223bea0: <multiple use>
            0x2239470: i32 = TargetConstant<1135542272>

          0x223c1a0: i32 = ADDI 0x223bea0, 0x2239470

            0x223bfa0: <multiple use>
            0x223bfa0: <multiple use>
          0x2238f70: f32 = FADD_S_RDY 0x223bfa0, 0x223bfa0

        0x223c6a0: f32 = FADD_S_RDY 0x223c1a0, 0x2238f70 [ORD=43]

      0x223bda0: i32 = FULE_S 0x2239070, 0x223c6a0

      0x223bea0: <multiple use>
      0x221bb88: <multiple use>
    0x223c4a0: ch = BNE 0x223c3a0, 0x223bda0, 0x223bea0, 0x221bb88

  0x2239170: ch = JAL 0x2239570, 0x223c4a0


********** List Scheduling BB#2 'running_protection3.if.end' **********
SU(0): 0x2239170: ch = JAL 0x2239570, 0x223c4a0 [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x223c4a0: ch = BNE 0x223c3a0, 0x223bda0, 0x223bea0, 0x221bb88 [ID=1]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
   val SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x223bda0: i32 = FULE_S 0x2239070, 0x223c6a0 [ID=2]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
   val SU(8): Latency=1
   val SU(3): Latency=1
  Successors:
   val SU(1): Latency=1

SU(3): 0x223c6a0: f32 = FADD_S_RDY 0x223c1a0, 0x2238f70 [ORD=43] [ID=3]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 3
  Height             : 3
  Predecessors:
   val SU(7): Latency=1
   val SU(4): Latency=1
  Successors:
   val SU(2): Latency=1

SU(4): 0x2238f70: f32 = FADD_S_RDY 0x223bfa0, 0x223bfa0 [ID=4]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 4
  Predecessors:
   val SU(5): Latency=1
  Successors:
   val SU(3): Latency=1

SU(5): 0x223bfa0: f32,ch = FLW 0x224fb90, 0x2239270, 0x221bb88<Mem:LD4[%4]> [ORD=41] [ID=5]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 5
  Predecessors:
   val SU(6): Latency=1
  Successors:
   val SU(4): Latency=1

SU(6): 0x224fb90: i32 = ADDI 0x223caa0, 0x223c8a0 [ORD=41] [ID=6]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
   val SU(5): Latency=1

SU(7): 0x223c1a0: i32 = ADDI 0x223bea0, 0x2239470 [ID=7]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(3): Latency=1

SU(8): 0x2239070: f32 = FCVT_S_W_RDY 0x223c0a0 [ORD=40] [ID=8]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 3
  Height             : 3
  Predecessors:
   val SU(9): Latency=1
  Successors:
   val SU(2): Latency=1

SU(9): 0x223c0a0: i32,ch = LW 0x2239b70, 0x2239a70, 0x221bb88<Mem:LD4[%21]> [ORD=39] [ID=9]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 4
  Predecessors:
   val SU(10): Latency=1
  Successors:
   val SU(8): Latency=1

SU(10): 0x2239b70: i32,ch = LW 0x2239670, 0x2239270, 0x221bb88<Mem:LD4[%2]> [ORD=37] [ID=10]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 5
  Predecessors:
   val SU(11): Latency=1
  Successors:
   val SU(9): Latency=1

SU(11): 0x2239670: i32 = ADDI 0x223caa0, 0x224fc90 [ORD=37] [ID=11]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
   val SU(10): Latency=1


Examining Available:
Height 0: SU(0): 0x2239170: ch = JAL 0x2239570, 0x223c4a0 [ID=0]


*** Scheduling [0]: SU(0): 0x2239170: ch = JAL 0x2239570, 0x223c4a0 [ID=0]


Examining Available:
Height 1: SU(1): 0x223c4a0: ch = BNE 0x223c3a0, 0x223bda0, 0x223bea0, 0x221bb88 [ID=1]


*** Scheduling [1]: SU(1): 0x223c4a0: ch = BNE 0x223c3a0, 0x223bda0, 0x223bea0, 0x221bb88 [ID=1]


Examining Available:
Height 2: SU(2): 0x223bda0: i32 = FULE_S 0x2239070, 0x223c6a0 [ID=2]


*** Scheduling [2]: SU(2): 0x223bda0: i32 = FULE_S 0x2239070, 0x223c6a0 [ID=2]


Examining Available:
Height 3: SU(3): 0x223c6a0: f32 = FADD_S_RDY 0x223c1a0, 0x2238f70 [ORD=43] [ID=3]

Height 3: SU(8): 0x2239070: f32 = FCVT_S_W_RDY 0x223c0a0 [ORD=40] [ID=8]


*** Scheduling [3]: SU(3): 0x223c6a0: f32 = FADD_S_RDY 0x223c1a0, 0x2238f70 [ORD=43] [ID=3]


Examining Available:
Height 4: SU(7): 0x223c1a0: i32 = ADDI 0x223bea0, 0x2239470 [ID=7]

Height 4: SU(4): 0x2238f70: f32 = FADD_S_RDY 0x223bfa0, 0x223bfa0 [ID=4]

Height 3: SU(8): 0x2239070: f32 = FCVT_S_W_RDY 0x223c0a0 [ORD=40] [ID=8]


*** Scheduling [4]: SU(7): 0x223c1a0: i32 = ADDI 0x223bea0, 0x2239470 [ID=7]


Examining Available:
Height 4: SU(4): 0x2238f70: f32 = FADD_S_RDY 0x223bfa0, 0x223bfa0 [ID=4]

Height 3: SU(8): 0x2239070: f32 = FCVT_S_W_RDY 0x223c0a0 [ORD=40] [ID=8]


*** Scheduling [5]: SU(4): 0x2238f70: f32 = FADD_S_RDY 0x223bfa0, 0x223bfa0 [ID=4]


Examining Available:
Height 6: SU(5): 0x223bfa0: f32,ch = FLW 0x224fb90, 0x2239270, 0x221bb88<Mem:LD4[%4]> [ORD=41] [ID=5]

Height 3: SU(8): 0x2239070: f32 = FCVT_S_W_RDY 0x223c0a0 [ORD=40] [ID=8]


*** Scheduling [6]: SU(5): 0x223bfa0: f32,ch = FLW 0x224fb90, 0x2239270, 0x221bb88<Mem:LD4[%4]> [ORD=41] [ID=5]


Examining Available:
Height 7: SU(6): 0x224fb90: i32 = ADDI 0x223caa0, 0x223c8a0 [ORD=41] [ID=6]

Height 3: SU(8): 0x2239070: f32 = FCVT_S_W_RDY 0x223c0a0 [ORD=40] [ID=8]


*** Scheduling [7]: SU(6): 0x224fb90: i32 = ADDI 0x223caa0, 0x223c8a0 [ORD=41] [ID=6]


Examining Available:
Height 3: SU(8): 0x2239070: f32 = FCVT_S_W_RDY 0x223c0a0 [ORD=40] [ID=8]


*** Scheduling [8]: SU(8): 0x2239070: f32 = FCVT_S_W_RDY 0x223c0a0 [ORD=40] [ID=8]


Examining Available:
Height 9: SU(9): 0x223c0a0: i32,ch = LW 0x2239b70, 0x2239a70, 0x221bb88<Mem:LD4[%21]> [ORD=39] [ID=9]


*** Scheduling [9]: SU(9): 0x223c0a0: i32,ch = LW 0x2239b70, 0x2239a70, 0x221bb88<Mem:LD4[%21]> [ORD=39] [ID=9]


Examining Available:
Height 10: SU(10): 0x2239b70: i32,ch = LW 0x2239670, 0x2239270, 0x221bb88<Mem:LD4[%2]> [ORD=37] [ID=10]


*** Scheduling [10]: SU(10): 0x2239b70: i32,ch = LW 0x2239670, 0x2239270, 0x221bb88<Mem:LD4[%2]> [ORD=37] [ID=10]


Examining Available:
Height 11: SU(11): 0x2239670: i32 = ADDI 0x223caa0, 0x224fc90 [ORD=37] [ID=11]


*** Scheduling [11]: SU(11): 0x2239670: i32 = ADDI 0x223caa0, 0x224fc90 [ORD=37] [ID=11]

*** Final schedule ***
SU(11): 0x2239670: i32 = ADDI 0x223caa0, 0x224fc90 [ORD=37] [ID=11]

SU(10): 0x2239b70: i32,ch = LW 0x2239670, 0x2239270, 0x221bb88<Mem:LD4[%2]> [ORD=37] [ID=10]

SU(9): 0x223c0a0: i32,ch = LW 0x2239b70, 0x2239a70, 0x221bb88<Mem:LD4[%21]> [ORD=39] [ID=9]

SU(8): 0x2239070: f32 = FCVT_S_W_RDY 0x223c0a0 [ORD=40] [ID=8]

SU(6): 0x224fb90: i32 = ADDI 0x223caa0, 0x223c8a0 [ORD=41] [ID=6]

SU(5): 0x223bfa0: f32,ch = FLW 0x224fb90, 0x2239270, 0x221bb88<Mem:LD4[%4]> [ORD=41] [ID=5]

SU(4): 0x2238f70: f32 = FADD_S_RDY 0x223bfa0, 0x223bfa0 [ID=4]

SU(7): 0x223c1a0: i32 = ADDI 0x223bea0, 0x2239470 [ID=7]

SU(3): 0x223c6a0: f32 = FADD_S_RDY 0x223c1a0, 0x2238f70 [ORD=43] [ID=3]

SU(2): 0x223bda0: i32 = FULE_S 0x2239070, 0x223c6a0 [ID=2]

SU(1): 0x223c4a0: ch = BNE 0x223c3a0, 0x223bda0, 0x223bea0, 0x221bb88 [ID=1]

SU(0): 0x2239170: ch = JAL 0x2239570, 0x223c4a0 [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %28 = load i32** %2, align 4
I was here to add   %2 = alloca i32*, align 4
with I type i32*and sd value :0x224fc90: i32 = FrameIndex<1>
new load?0x2239470: i32,ch = load 0x221bb88, 0x224fc90, 0x223caa0<LD4[%2]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x223c8a0: i32 = Constant<0>

    0x221bb88: ch = EntryToken

    0x224fc90: i32 = FrameIndex<1>

    0x223caa0: i32 = undef

  0x2239470: i32,ch = load 0x221bb88, 0x224fc90, 0x223caa0<LD4[%2]>

  0x221bb88: ch = EntryToken


store visit is after?  store i32 32, i32* %29, align 4
I was here to add i32 32
whats in dag after store?SelectionDAG has 10 nodes:
  0x223c8a0: i32 = Constant<0>

  0x223caa0: i32 = undef [ORD=45]

    0x221bb88: ch = EntryToken [ORD=45]

    0x224fc90: i32 = FrameIndex<1> [ORD=45]

    0x223caa0: <multiple use>
  0x2239470: i32,ch = load 0x221bb88, 0x224fc90, 0x223caa0<LD4[%2]> [ORD=45]

  0x2239270: i64 = Constant<16>

    0x2239470: <multiple use>
    0x2239170: i32 = Constant<32> [ORD=47]

      0x2239470: <multiple use>
      0x2239a70: i32 = Constant<16> [ORD=46]

    0x223bea0: i32 = add 0x2239470, 0x2239a70 [ORD=46]

    0x223caa0: <multiple use>
  0x223c4a0: ch = store 0x2239470:1, 0x2239170, 0x223bea0, 0x223caa0<ST4[%29]> [ORD=47]


visiting load instruction   %30 = load i32** %2, align 4
with I type i32*and sd value :0x224fc90: i32 = FrameIndex<1>
new load?0x223bda0: i32,ch = load 0x223c4a0, 0x224fc90, 0x223caa0<LD4[%2]>
dag after load is dealt with?SelectionDAG has 11 nodes:
  0x224fc90: i32 = FrameIndex<1> [ORD=45]

  0x223c8a0: i32 = Constant<0>

  0x223caa0: i32 = undef [ORD=45]

    0x221bb88: ch = EntryToken [ORD=45]

    0x224fc90: <multiple use>
    0x223caa0: <multiple use>
  0x2239470: i32,ch = load 0x221bb88, 0x224fc90, 0x223caa0<LD4[%2]> [ORD=45]

  0x2239270: i64 = Constant<16>

      0x2239470: <multiple use>
      0x2239170: i32 = Constant<32> [ORD=47]

        0x2239470: <multiple use>
        0x2239a70: i32 = Constant<16> [ORD=46]

      0x223bea0: i32 = add 0x2239470, 0x2239a70 [ORD=46]

      0x223caa0: <multiple use>
    0x223c4a0: ch = store 0x2239470:1, 0x2239170, 0x223bea0, 0x223caa0<ST4[%29]> [ORD=47]

    0x224fc90: <multiple use>
    0x223caa0: <multiple use>
  0x223bda0: i32,ch = load 0x223c4a0, 0x224fc90, 0x223caa0<LD4[%2]>

    0x2239470: <multiple use>
    0x2239170: i32 = Constant<32> [ORD=47]

      0x2239470: <multiple use>
      0x2239a70: i32 = Constant<16> [ORD=46]

    0x223bea0: i32 = add 0x2239470, 0x2239a70 [ORD=46]

    0x223caa0: <multiple use>
  0x223c4a0: ch = store 0x2239470:1, 0x2239170, 0x223bea0, 0x223caa0<ST4[%29]> [ORD=47]


store visit is after?  store i32 16, i32* %31, align 4
I was here to add i32 16
whats in dag after store?SelectionDAG has 15 nodes:
  0x224fc90: i32 = FrameIndex<1> [ORD=45]

  0x223c8a0: i32 = Constant<0>

  0x223caa0: i32 = undef [ORD=45]

    0x221bb88: ch = EntryToken [ORD=45]

    0x224fc90: <multiple use>
    0x223caa0: <multiple use>
  0x2239470: i32,ch = load 0x221bb88, 0x224fc90, 0x223caa0<LD4[%2]> [ORD=45]

  0x2239270: i64 = Constant<16>

  0x2239a70: i32 = Constant<16> [ORD=46]

      0x2239470: <multiple use>
      0x2239170: i32 = Constant<32> [ORD=47]

        0x2239470: <multiple use>
        0x2239a70: <multiple use>
      0x223bea0: i32 = add 0x2239470, 0x2239a70 [ORD=46]

      0x223caa0: <multiple use>
    0x223c4a0: ch = store 0x2239470:1, 0x2239170, 0x223bea0, 0x223caa0<ST4[%29]> [ORD=47]

    0x224fc90: <multiple use>
    0x223caa0: <multiple use>
  0x223bda0: i32,ch = load 0x223c4a0, 0x224fc90, 0x223caa0<LD4[%2]> [ORD=48]

  0x2239070: i64 = Constant<20>

    0x223bda0: <multiple use>
    0x2239a70: <multiple use>
      0x223bda0: <multiple use>
      0x223c6a0: i32 = Constant<20> [ORD=49]

    0x223c0a0: i32 = add 0x223bda0, 0x223c6a0 [ORD=49]

    0x223caa0: <multiple use>
  0x2238f70: ch = store 0x223bda0:1, 0x2239a70, 0x223c0a0, 0x223caa0<ST4[%31]> [ORD=50]


Initial selection DAG: BB#3 'running_protection3:running_protection3.if.then7'
SelectionDAG has 15 nodes:
  0x224fc90: i32 = FrameIndex<1> [ORD=45]

  0x223c8a0: i32 = Constant<0>

  0x223caa0: i32 = undef [ORD=45]

    0x221bb88: ch = EntryToken [ORD=45]

    0x224fc90: <multiple use>
    0x223caa0: <multiple use>
  0x2239470: i32,ch = load 0x221bb88, 0x224fc90, 0x223caa0<LD4[%2]> [ORD=45]

  0x2239270: i64 = Constant<16>

  0x2239a70: i32 = Constant<16> [ORD=46]

      0x2239470: <multiple use>
      0x2239170: i32 = Constant<32> [ORD=47]

        0x2239470: <multiple use>
        0x2239a70: <multiple use>
      0x223bea0: i32 = add 0x2239470, 0x2239a70 [ORD=46]

      0x223caa0: <multiple use>
    0x223c4a0: ch = store 0x2239470:1, 0x2239170, 0x223bea0, 0x223caa0<ST4[%29]> [ORD=47]

    0x224fc90: <multiple use>
    0x223caa0: <multiple use>
  0x223bda0: i32,ch = load 0x223c4a0, 0x224fc90, 0x223caa0<LD4[%2]> [ORD=48]

  0x2239070: i64 = Constant<20>

    0x223bda0: <multiple use>
    0x2239a70: <multiple use>
      0x223bda0: <multiple use>
      0x223c6a0: i32 = Constant<20> [ORD=49]

    0x223c0a0: i32 = add 0x223bda0, 0x223c6a0 [ORD=49]

    0x223caa0: <multiple use>
  0x2238f70: ch = store 0x223bda0:1, 0x2239a70, 0x223c0a0, 0x223caa0<ST4[%31]> [ORD=50]


Optimized lowered selection DAG: BB#3 'running_protection3:running_protection3.if.then7'
SelectionDAG has 12 nodes:
  0x224fc90: i32 = FrameIndex<1> [ORD=45]

  0x223caa0: i32 = undef [ORD=45]

    0x221bb88: ch = EntryToken [ORD=45]

    0x224fc90: <multiple use>
    0x223caa0: <multiple use>
  0x2239470: i32,ch = load 0x221bb88, 0x224fc90, 0x223caa0<LD4[%2]> [ORD=45]

  0x2239a70: i32 = Constant<16> [ORD=46]

      0x2239470: <multiple use>
      0x2239170: i32 = Constant<32> [ORD=47]

        0x2239470: <multiple use>
        0x2239a70: <multiple use>
      0x223bea0: i32 = add 0x2239470, 0x2239a70 [ORD=46]

      0x223caa0: <multiple use>
    0x223c4a0: ch = store 0x2239470:1, 0x2239170, 0x223bea0, 0x223caa0<ST4[%29]> [ORD=47]

    0x224fc90: <multiple use>
    0x223caa0: <multiple use>
  0x223bda0: i32,ch = load 0x223c4a0, 0x224fc90, 0x223caa0<LD4[%2]> [ORD=48]

    0x223bda0: <multiple use>
    0x2239a70: <multiple use>
      0x223bda0: <multiple use>
      0x223c6a0: i32 = Constant<20> [ORD=49]

    0x223c0a0: i32 = add 0x223bda0, 0x223c6a0 [ORD=49]

    0x223caa0: <multiple use>
  0x2238f70: ch = store 0x223bda0:1, 0x2239a70, 0x223c0a0, 0x223caa0<ST4[%31]> [ORD=50]


Legally typed node: 0x223c6a0: i32 = Constant<20> [ORD=49] [ID=0]

Legally typed node: 0x2239170: i32 = Constant<32> [ORD=47] [ID=0]

Legally typed node: 0x2239a70: i32 = Constant<16> [ORD=46] [ID=0]

Legally typed node: 0x223caa0: i32 = undef [ORD=45] [ID=0]

Legally typed node: 0x224fc90: i32 = FrameIndex<1> [ORD=45] [ID=0]

Legally typed node: 0x221bb88: ch = EntryToken [ORD=45] [ID=0]

Legally typed node: 0x2239470: i32,ch = load 0x221bb88, 0x224fc90, 0x223caa0<LD4[%2]> [ORD=45] [ID=0]

Legally typed node: 0x223bea0: i32 = add 0x2239470, 0x2239a70 [ORD=46] [ID=0]

Legally typed node: 0x223c4a0: ch = store 0x2239470:1, 0x2239170, 0x223bea0, 0x223caa0<ST4[%29]> [ORD=47] [ID=0]

Legally typed node: 0x223bda0: i32,ch = load 0x223c4a0, 0x224fc90, 0x223caa0<LD4[%2]> [ORD=48] [ID=0]

Legally typed node: 0x223c0a0: i32 = add 0x223bda0, 0x223c6a0 [ORD=49] [ID=0]

Legally typed node: 0x2238f70: ch = store 0x223bda0:1, 0x2239a70, 0x223c0a0, 0x223caa0<ST4[%31]> [ORD=50] [ID=0]

Legally typed node: 0x7fff6e802f00: ch = handlenode 0x2238f70 [ID=0]

Type-legalized selection DAG: BB#3 'running_protection3:running_protection3.if.then7'
SelectionDAG has 12 nodes:
  0x224fc90: i32 = FrameIndex<1> [ORD=45] [ID=-3]

  0x223caa0: i32 = undef [ORD=45] [ID=-3]

    0x221bb88: ch = EntryToken [ORD=45] [ID=-3]

    0x224fc90: <multiple use>
    0x223caa0: <multiple use>
  0x2239470: i32,ch = load 0x221bb88, 0x224fc90, 0x223caa0<LD4[%2]> [ORD=45] [ID=-3]

  0x2239a70: i32 = Constant<16> [ORD=46] [ID=-3]

      0x2239470: <multiple use>
      0x2239170: i32 = Constant<32> [ORD=47] [ID=-3]

        0x2239470: <multiple use>
        0x2239a70: <multiple use>
      0x223bea0: i32 = add 0x2239470, 0x2239a70 [ORD=46] [ID=-3]

      0x223caa0: <multiple use>
    0x223c4a0: ch = store 0x2239470:1, 0x2239170, 0x223bea0, 0x223caa0<ST4[%29]> [ORD=47] [ID=-3]

    0x224fc90: <multiple use>
    0x223caa0: <multiple use>
  0x223bda0: i32,ch = load 0x223c4a0, 0x224fc90, 0x223caa0<LD4[%2]> [ORD=48] [ID=-3]

    0x223bda0: <multiple use>
    0x2239a70: <multiple use>
      0x223bda0: <multiple use>
      0x223c6a0: i32 = Constant<20> [ORD=49] [ID=-3]

    0x223c0a0: i32 = add 0x223bda0, 0x223c6a0 [ORD=49] [ID=-3]

    0x223caa0: <multiple use>
  0x2238f70: ch = store 0x223bda0:1, 0x2239a70, 0x223c0a0, 0x223caa0<ST4[%31]> [ORD=50] [ID=-3]


Legalized selection DAG: BB#3 'running_protection3:running_protection3.if.then7'
SelectionDAG has 12 nodes:
  0x224fc90: i32 = FrameIndex<1> [ORD=45] [ID=1]

  0x223caa0: i32 = undef [ORD=45] [ID=2]

  0x2239a70: i32 = Constant<16> [ORD=46] [ID=3]

    0x221bb88: ch = EntryToken [ORD=45] [ID=0]

    0x224fc90: <multiple use>
    0x223caa0: <multiple use>
  0x2239470: i32,ch = load 0x221bb88, 0x224fc90, 0x223caa0<LD4[%2]> [ORD=45] [ID=6]

      0x2239470: <multiple use>
      0x2239170: i32 = Constant<32> [ORD=47] [ID=4]

        0x2239470: <multiple use>
        0x2239a70: <multiple use>
      0x223bea0: i32 = add 0x2239470, 0x2239a70 [ORD=46] [ID=7]

      0x223caa0: <multiple use>
    0x223c4a0: ch = store 0x2239470:1, 0x2239170, 0x223bea0, 0x223caa0<ST4[%29]> [ORD=47] [ID=8]

    0x224fc90: <multiple use>
    0x223caa0: <multiple use>
  0x223bda0: i32,ch = load 0x223c4a0, 0x224fc90, 0x223caa0<LD4[%2]> [ORD=48] [ID=9]

    0x223bda0: <multiple use>
    0x2239a70: <multiple use>
      0x223bda0: <multiple use>
      0x223c6a0: i32 = Constant<20> [ORD=49] [ID=5]

    0x223c0a0: i32 = add 0x223bda0, 0x223c6a0 [ORD=49] [ID=10]

    0x223caa0: <multiple use>
  0x2238f70: ch = store 0x223bda0:1, 0x2239a70, 0x223c0a0, 0x223caa0<ST4[%31]> [ORD=50] [ID=11]


Optimized legalized selection DAG: BB#3 'running_protection3:running_protection3.if.then7'
SelectionDAG has 12 nodes:
  0x224fc90: i32 = FrameIndex<1> [ORD=45] [ID=1]

  0x223caa0: i32 = undef [ORD=45] [ID=2]

  0x2239a70: i32 = Constant<16> [ORD=46] [ID=3]

    0x221bb88: ch = EntryToken [ORD=45] [ID=0]

    0x224fc90: <multiple use>
    0x223caa0: <multiple use>
  0x2239470: i32,ch = load 0x221bb88, 0x224fc90, 0x223caa0<LD4[%2]> [ORD=45] [ID=6]

      0x2239470: <multiple use>
      0x2239170: i32 = Constant<32> [ORD=47] [ID=4]

        0x2239470: <multiple use>
        0x2239a70: <multiple use>
      0x223bea0: i32 = add 0x2239470, 0x2239a70 [ORD=46] [ID=7]

      0x223caa0: <multiple use>
    0x223c4a0: ch = store 0x2239470:1, 0x2239170, 0x223bea0, 0x223caa0<ST4[%29]> [ORD=47] [ID=8]

    0x224fc90: <multiple use>
    0x223caa0: <multiple use>
  0x223bda0: i32,ch = load 0x223c4a0, 0x224fc90, 0x223caa0<LD4[%2]> [ORD=48] [ID=9]

    0x223bda0: <multiple use>
    0x2239a70: <multiple use>
      0x223bda0: <multiple use>
      0x223c6a0: i32 = Constant<20> [ORD=49] [ID=5]

    0x223c0a0: i32 = add 0x223bda0, 0x223c6a0 [ORD=49] [ID=10]

    0x223caa0: <multiple use>
  0x2238f70: ch = store 0x223bda0:1, 0x2239a70, 0x223c0a0, 0x223caa0<ST4[%31]> [ORD=50] [ID=11]


===== Instruction selection begins: BB#3 'running_protection3.if.then7'
ISEL: Starting pattern match on root node: 0x2238f70: ch = store 0x223bda0:1, 0x2239a70, 0x223c0a0, 0x223caa0<ST4[%31]> [ORD=50] [ID=11]

  Initial Opcode index to 178
  Morphed node: 0x2238f70: ch = SW 0x2239a70, 0x223bda0, 0x223c8a0, 0x223bda0:1<Mem:ST4[%31]> [ORD=50]

ISEL: Match complete!
=> 0x2238f70: ch = SW 0x2239a70, 0x223bda0, 0x223c8a0, 0x223bda0:1<Mem:ST4[%31]> [ORD=50]

ISEL: Starting pattern match on root node: 0x223bda0: i32,ch = load 0x223c4a0, 0x224fc90, 0x223caa0<LD4[%2]> [ORD=48] [ID=9]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x223bda0: i32,ch = LW 0x224fc90, 0x223c6a0, 0x223c4a0<Mem:LD4[%2]> [ORD=48]

ISEL: Match complete!
=> 0x223bda0: i32,ch = LW 0x224fc90, 0x223c6a0, 0x223c4a0<Mem:LD4[%2]> [ORD=48]

ISEL: Starting pattern match on root node: 0x223c4a0: ch = store 0x2239470:1, 0x2239170, 0x223bea0, 0x223caa0<ST4[%29]> [ORD=47] [ID=8]

  Initial Opcode index to 178
  Morphed node: 0x223c4a0: ch = SW 0x2239170, 0x2239470, 0x223c0a0, 0x2239470:1<Mem:ST4[%29]> [ORD=47]

ISEL: Match complete!
=> 0x223c4a0: ch = SW 0x2239170, 0x2239470, 0x223c0a0, 0x2239470:1<Mem:ST4[%29]> [ORD=47]

ISEL: Starting pattern match on root node: 0x2239470: i32,ch = load 0x221bb88, 0x224fc90, 0x223caa0<LD4[%2]> [ORD=45] [ID=6]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2239470: i32,ch = LW 0x224fc90, 0x223c6a0, 0x221bb88<Mem:LD4[%2]> [ORD=45]

ISEL: Match complete!
=> 0x2239470: i32,ch = LW 0x224fc90, 0x223c6a0, 0x221bb88<Mem:LD4[%2]> [ORD=45]

ISEL: Starting pattern match on root node: 0x2239170: i32 = Constant<32> [ORD=47] [ID=4]

  Initial Opcode index to 1226
comparing 0 and 32 and returning value:0
  Skipped scope entry (due to false predicate) at index 1228, continuing at 1236
  Morphed node: 0x2239170: i32 = ADDI 0x223caa0, 0x223bea0 [ORD=47]

ISEL: Match complete!
=> 0x2239170: i32 = ADDI 0x223caa0, 0x223bea0 [ORD=47]

ISEL: Starting pattern match on root node: 0x2239a70: i32 = Constant<16> [ORD=46] [ID=3]

  Initial Opcode index to 1226
comparing 0 and 16 and returning value:0
  Skipped scope entry (due to false predicate) at index 1228, continuing at 1236
  Morphed node: 0x2239a70: i32 = ADDI 0x223caa0, 0x223c0a0 [ORD=46]

ISEL: Match complete!
=> 0x2239a70: i32 = ADDI 0x223caa0, 0x223c0a0 [ORD=46]

=> 0x221bb88: ch = EntryToken [ORD=45]

===== Instruction selection ends:
Selected selection DAG: BB#3 'running_protection3:running_protection3.if.then7'
SelectionDAG has 15 nodes:
    0x223bfa0: <multiple use>
    0x223c6a0: <multiple use>
    0x221bb88: ch = EntryToken [ORD=45]

  0x2239470: i32,ch = LW 0x223bfa0, 0x223c6a0, 0x221bb88<Mem:LD4[%2]> [ORD=45]

    0x223bfa0: <multiple use>
    0x223c6a0: <multiple use>
        0x223caa0: <multiple use>
        0x223bea0: i32 = TargetConstant<32>

      0x2239170: i32 = ADDI 0x223caa0, 0x223bea0 [ORD=47]

      0x2239470: <multiple use>
      0x223c0a0: <multiple use>
      0x2239470: <multiple use>
    0x223c4a0: ch = SW 0x2239170, 0x2239470, 0x223c0a0, 0x2239470:1<Mem:ST4[%29]> [ORD=47]

  0x223bda0: i32,ch = LW 0x223bfa0, 0x223c6a0, 0x223c4a0<Mem:LD4[%2]> [ORD=48]

  0x223c6a0: i32 = TargetConstant<0>

  0x223c0a0: i32 = TargetConstant<16>

  0x223caa0: i32 = Register %zero

    0x2239270: i32 = Register %t5

    0x2239070: i32 = TargetFrameIndex<1>

  0x223bfa0: i32 = ADDI 0x2239270, 0x2239070 [ORD=45]

      0x223caa0: <multiple use>
      0x223c0a0: <multiple use>
    0x2239a70: i32 = ADDI 0x223caa0, 0x223c0a0 [ORD=46]

    0x223bda0: <multiple use>
    0x223c8a0: i32 = TargetConstant<20>

    0x223bda0: <multiple use>
  0x2238f70: ch = SW 0x2239a70, 0x223bda0, 0x223c8a0, 0x223bda0:1<Mem:ST4[%31]> [ORD=50]


********** List Scheduling BB#3 'running_protection3.if.then7' **********
SU(0): 0x2238f70: ch = SW 0x2239a70, 0x223bda0, 0x223c8a0, 0x223bda0:1<Mem:ST4[%31]> [ORD=50] [ID=0]

  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
   val SU(6): Latency=1
   val SU(1): Latency=1
   ch  SU(1): Latency=1

SU(1): 0x223bda0: i32,ch = LW 0x223bfa0, 0x223c6a0, 0x223c4a0<Mem:LD4[%2]> [ORD=48] [ID=1]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(5): Latency=1
   ch  SU(2): Latency=1
  Successors:
   val SU(0): Latency=1
   ch  SU(0): Latency=1

SU(2): 0x223c4a0: ch = SW 0x2239170, 0x2239470, 0x223c0a0, 0x2239470:1<Mem:ST4[%29]> [ORD=47] [ID=2]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(4): Latency=1
   val SU(3): Latency=1
   ch  SU(3): Latency=1
  Successors:
   ch  SU(1): Latency=1

SU(3): 0x2239470: i32,ch = LW 0x223bfa0, 0x223c6a0, 0x221bb88<Mem:LD4[%2]> [ORD=45] [ID=3]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(5): Latency=1
  Successors:
   val SU(2): Latency=1
   ch  SU(2): Latency=1

SU(4): 0x2239170: i32 = ADDI 0x223caa0, 0x223bea0 [ORD=47] [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(2): Latency=1

SU(5): 0x223bfa0: i32 = ADDI 0x2239270, 0x2239070 [ORD=45] [ID=5]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(1): Latency=1
   val SU(3): Latency=1

SU(6): 0x2239a70: i32 = ADDI 0x223caa0, 0x223c0a0 [ORD=46] [ID=6]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
   val SU(0): Latency=1


Examining Available:
Height 0: SU(0): 0x2238f70: ch = SW 0x2239a70, 0x223bda0, 0x223c8a0, 0x223bda0:1<Mem:ST4[%31]> [ORD=50] [ID=0]


*** Scheduling [0]: SU(0): 0x2238f70: ch = SW 0x2239a70, 0x223bda0, 0x223c8a0, 0x223bda0:1<Mem:ST4[%31]> [ORD=50] [ID=0]


Examining Available:
Height 1: SU(1): 0x223bda0: i32,ch = LW 0x223bfa0, 0x223c6a0, 0x223c4a0<Mem:LD4[%2]> [ORD=48] [ID=1]

Height 1: SU(6): 0x2239a70: i32 = ADDI 0x223caa0, 0x223c0a0 [ORD=46] [ID=6]


*** Scheduling [1]: SU(1): 0x223bda0: i32,ch = LW 0x223bfa0, 0x223c6a0, 0x223c4a0<Mem:LD4[%2]> [ORD=48] [ID=1]


Examining Available:
Height 2: SU(2): 0x223c4a0: ch = SW 0x2239170, 0x2239470, 0x223c0a0, 0x2239470:1<Mem:ST4[%29]> [ORD=47] [ID=2]

Height 1: SU(6): 0x2239a70: i32 = ADDI 0x223caa0, 0x223c0a0 [ORD=46] [ID=6]


*** Scheduling [2]: SU(2): 0x223c4a0: ch = SW 0x2239170, 0x2239470, 0x223c0a0, 0x2239470:1<Mem:ST4[%29]> [ORD=47] [ID=2]


Examining Available:
Height 3: SU(4): 0x2239170: i32 = ADDI 0x223caa0, 0x223bea0 [ORD=47] [ID=4]

Height 1: SU(6): 0x2239a70: i32 = ADDI 0x223caa0, 0x223c0a0 [ORD=46] [ID=6]

Height 3: SU(3): 0x2239470: i32,ch = LW 0x223bfa0, 0x223c6a0, 0x221bb88<Mem:LD4[%2]> [ORD=45] [ID=3]


*** Scheduling [3]: SU(4): 0x2239170: i32 = ADDI 0x223caa0, 0x223bea0 [ORD=47] [ID=4]


Examining Available:
Height 1: SU(6): 0x2239a70: i32 = ADDI 0x223caa0, 0x223c0a0 [ORD=46] [ID=6]

Height 3: SU(3): 0x2239470: i32,ch = LW 0x223bfa0, 0x223c6a0, 0x221bb88<Mem:LD4[%2]> [ORD=45] [ID=3]


*** Scheduling [4]: SU(6): 0x2239a70: i32 = ADDI 0x223caa0, 0x223c0a0 [ORD=46] [ID=6]


Examining Available:
Height 3: SU(3): 0x2239470: i32,ch = LW 0x223bfa0, 0x223c6a0, 0x221bb88<Mem:LD4[%2]> [ORD=45] [ID=3]


*** Scheduling [5]: SU(3): 0x2239470: i32,ch = LW 0x223bfa0, 0x223c6a0, 0x221bb88<Mem:LD4[%2]> [ORD=45] [ID=3]


Examining Available:
Height 6: SU(5): 0x223bfa0: i32 = ADDI 0x2239270, 0x2239070 [ORD=45] [ID=5]


*** Scheduling [6]: SU(5): 0x223bfa0: i32 = ADDI 0x2239270, 0x2239070 [ORD=45] [ID=5]

*** Final schedule ***
SU(5): 0x223bfa0: i32 = ADDI 0x2239270, 0x2239070 [ORD=45] [ID=5]

SU(3): 0x2239470: i32,ch = LW 0x223bfa0, 0x223c6a0, 0x221bb88<Mem:LD4[%2]> [ORD=45] [ID=3]

SU(6): 0x2239a70: i32 = ADDI 0x223caa0, 0x223c0a0 [ORD=46] [ID=6]

SU(4): 0x2239170: i32 = ADDI 0x223caa0, 0x223bea0 [ORD=47] [ID=4]

SU(2): 0x223c4a0: ch = SW 0x2239170, 0x2239470, 0x223c0a0, 0x2239470:1<Mem:ST4[%29]> [ORD=47] [ID=2]

SU(1): 0x223bda0: i32,ch = LW 0x223bfa0, 0x223c6a0, 0x223c4a0<Mem:LD4[%2]> [ORD=48] [ID=1]

SU(0): 0x2238f70: ch = SW 0x2239a70, 0x223bda0, 0x223c8a0, 0x223bda0:1<Mem:ST4[%31]> [ORD=50] [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %32 = load i32** %2, align 4
I was here to add   %2 = alloca i32*, align 4
with I type i32*and sd value :0x223bfa0: i32 = FrameIndex<1>
new load?0x223bea0: i32,ch = load 0x221bb88, 0x223bfa0, 0x2239270<LD4[%2]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x2239070: i32 = Constant<0>

    0x221bb88: ch = EntryToken

    0x223bfa0: i32 = FrameIndex<1>

    0x2239270: i32 = undef

  0x223bea0: i32,ch = load 0x221bb88, 0x223bfa0, 0x2239270<LD4[%2]>

  0x221bb88: ch = EntryToken


visiting load instruction   %34 = load i32* %33, align 4
with I type i32and sd value :0x223c6a0: i32 = add 0x223bea0, 0x223c0a0
new load?0x223c8a0: i32,ch = load 0x221bb88, 0x223c6a0, 0x2239270<LD4[%33]>
dag after load is dealt with?SelectionDAG has 9 nodes:
  0x2239070: i32 = Constant<0>

  0x2239270: i32 = undef [ORD=51]

  0x223caa0: i64 = Constant<12>

    0x221bb88: <multiple use>
        0x221bb88: <multiple use>
        0x223bfa0: i32 = FrameIndex<1> [ORD=51]

        0x2239270: <multiple use>
      0x223bea0: i32,ch = load 0x221bb88, 0x223bfa0, 0x2239270<LD4[%2]> [ORD=51]

      0x223c0a0: i32 = Constant<12> [ORD=52]

    0x223c6a0: i32 = add 0x223bea0, 0x223c0a0 [ORD=52]

    0x2239270: <multiple use>
  0x223c8a0: i32,ch = load 0x221bb88, 0x223c6a0, 0x2239270<LD4[%33]>

  0x221bb88: ch = EntryToken [ORD=51]


I was here to add i32 116
Initial selection DAG: BB#4 'running_protection3:running_protection3.if.end10'
SelectionDAG has 18 nodes:
  0x221bb88: ch = EntryToken [ORD=51]

  0x2239070: i32 = Constant<0>

  0x2239270: i32 = undef [ORD=51]

  0x223caa0: i64 = Constant<12>

      0x221bb88: <multiple use>
            0x221bb88: <multiple use>
                0x221bb88: <multiple use>
                0x223bfa0: i32 = FrameIndex<1> [ORD=51]

                0x2239270: <multiple use>
              0x223bea0: i32,ch = load 0x221bb88, 0x223bfa0, 0x2239270<LD4[%2]> [ORD=51]

              0x223c0a0: i32 = Constant<12> [ORD=52]

            0x223c6a0: i32 = add 0x223bea0, 0x223c0a0 [ORD=52]

            0x2239270: <multiple use>
          0x223c8a0: i32,ch = load 0x221bb88, 0x223c6a0, 0x2239270<LD4[%33]> [ORD=53]

          0x2238f70: i32 = Constant<116> [ORD=54]

          0x223bda0: ch = setgt [ORD=54]

        0x223c4a0: i1 = setcc 0x223c8a0, 0x2238f70, 0x223bda0 [ORD=54]

        0x2239470: i1 = Constant<-1>

      0x2239170: i1 = xor 0x223c4a0, 0x2239470

      0x2239a70: ch = BasicBlock<running_protection3.return 0x22481c0>

    0x224fc90: ch = brcond 0x221bb88, 0x2239170, 0x2239a70

    0x2239b70: ch = BasicBlock<running_protection3.if.then14 0x2248110>

  0x223c1a0: ch = br 0x224fc90, 0x2239b70



Replacing.3 0x2239170: i1 = xor 0x223c4a0, 0x2239470

With: 0x223c3a0: i1 = setcc 0x223c8a0, 0x2238f70, 0x2239570


Replacing.3 0x223c3a0: i1 = setcc 0x223c8a0, 0x2238f70, 0x2239570

With: 0x2239470: i1 = setcc 0x223c8a0, 0x223bda0, 0x223c4a0

Optimized lowered selection DAG: BB#4 'running_protection3:running_protection3.if.end10'
SelectionDAG has 14 nodes:
  0x221bb88: ch = EntryToken [ORD=51]

  0x2239270: i32 = undef [ORD=51]

      0x221bb88: <multiple use>
          0x221bb88: <multiple use>
              0x221bb88: <multiple use>
              0x223bfa0: i32 = FrameIndex<1> [ORD=51]

              0x2239270: <multiple use>
            0x223bea0: i32,ch = load 0x221bb88, 0x223bfa0, 0x2239270<LD4[%2]> [ORD=51]

            0x223c0a0: i32 = Constant<12> [ORD=52]

          0x223c6a0: i32 = add 0x223bea0, 0x223c0a0 [ORD=52]

          0x2239270: <multiple use>
        0x223c8a0: i32,ch = load 0x221bb88, 0x223c6a0, 0x2239270<LD4[%33]> [ORD=53]

        0x223bda0: i32 = Constant<117>

        0x223c4a0: ch = setlt

      0x2239470: i1 = setcc 0x223c8a0, 0x223bda0, 0x223c4a0

      0x2239a70: ch = BasicBlock<running_protection3.return 0x22481c0>

    0x224fc90: ch = brcond 0x221bb88, 0x2239470, 0x2239a70

    0x2239b70: ch = BasicBlock<running_protection3.if.then14 0x2248110>

  0x223c1a0: ch = br 0x224fc90, 0x2239b70


Legally typed node: 0x223c4a0: ch = setlt [ID=0]

Legally typed node: 0x223bda0: i32 = Constant<117> [ID=0]

Legally typed node: 0x2239b70: ch = BasicBlock<running_protection3.if.then14 0x2248110> [ID=0]

Legally typed node: 0x2239a70: ch = BasicBlock<running_protection3.return 0x22481c0> [ID=0]

Legally typed node: 0x223c0a0: i32 = Constant<12> [ORD=52] [ID=0]

Legally typed node: 0x2239270: i32 = undef [ORD=51] [ID=0]

Legally typed node: 0x223bfa0: i32 = FrameIndex<1> [ORD=51] [ID=0]

Legally typed node: 0x221bb88: ch = EntryToken [ORD=51] [ID=0]

Legally typed node: 0x223bea0: i32,ch = load 0x221bb88, 0x223bfa0, 0x2239270<LD4[%2]> [ORD=51] [ID=0]

Legally typed node: 0x223c6a0: i32 = add 0x223bea0, 0x223c0a0 [ORD=52] [ID=0]

Legally typed node: 0x223c8a0: i32,ch = load 0x221bb88, 0x223c6a0, 0x2239270<LD4[%33]> [ORD=53] [ID=0]

Promote integer result: 0x2239470: i1 = setcc 0x223c8a0, 0x223bda0, 0x223c4a0 [ID=0]

Promote integer operand: 0x224fc90: ch = brcond 0x221bb88, 0x2239470, 0x2239a70 [ID=0]

Promote integer operand: 0x223caa0: i32 = zero_extend 0x2239470 [ID=0]

Legally typed node: 0x2238f70: i32 = Constant<1> [ID=0]

Legally typed node: 0x2239070: i32 = setcc 0x223c8a0, 0x223bda0, 0x223c4a0 [ID=0]

Legally typed node: 0x2239570: i32 = and 0x2239070, 0x2238f70 [ID=0]

Legally typed node: 0x224fc90: ch = brcond 0x221bb88, 0x2239570, 0x2239a70 [ID=0]

Legally typed node: 0x223c1a0: ch = br 0x224fc90, 0x2239b70 [ID=0]

Legally typed node: 0x7fff6e802f00: ch = handlenode 0x223c1a0 [ID=0]

Type-legalized selection DAG: BB#4 'running_protection3:running_protection3.if.end10'
SelectionDAG has 16 nodes:
  0x221bb88: ch = EntryToken [ORD=51] [ID=-3]

  0x2239270: i32 = undef [ORD=51] [ID=-3]

      0x221bb88: <multiple use>
            0x221bb88: <multiple use>
                0x221bb88: <multiple use>
                0x223bfa0: i32 = FrameIndex<1> [ORD=51] [ID=-3]

                0x2239270: <multiple use>
              0x223bea0: i32,ch = load 0x221bb88, 0x223bfa0, 0x2239270<LD4[%2]> [ORD=51] [ID=-3]

              0x223c0a0: i32 = Constant<12> [ORD=52] [ID=-3]

            0x223c6a0: i32 = add 0x223bea0, 0x223c0a0 [ORD=52] [ID=-3]

            0x2239270: <multiple use>
          0x223c8a0: i32,ch = load 0x221bb88, 0x223c6a0, 0x2239270<LD4[%33]> [ORD=53] [ID=-3]

          0x223bda0: i32 = Constant<117> [ID=-3]

          0x223c4a0: ch = setlt [ID=-3]

        0x2239070: i32 = setcc 0x223c8a0, 0x223bda0, 0x223c4a0 [ID=-3]

        0x2238f70: i32 = Constant<1> [ID=-3]

      0x2239570: i32 = and 0x2239070, 0x2238f70 [ID=-3]

      0x2239a70: ch = BasicBlock<running_protection3.return 0x22481c0> [ID=-3]

    0x224fc90: ch = brcond 0x221bb88, 0x2239570, 0x2239a70 [ID=-3]

    0x2239b70: ch = BasicBlock<running_protection3.if.then14 0x2248110> [ID=-3]

  0x223c1a0: ch = br 0x224fc90, 0x2239b70 [ID=-3]



Replacing.2 0x2239570: i32 = and 0x2239070, 0x2238f70 [ID=-3]

With: 0x2239070: i32 = setcc 0x223c8a0, 0x223bda0, 0x223c4a0 [ID=-3]

Optimized type-legalized selection DAG: BB#4 'running_protection3:running_protection3.if.end10'
SelectionDAG has 14 nodes:
  0x221bb88: ch = EntryToken [ORD=51] [ID=-3]

  0x2239270: i32 = undef [ORD=51] [ID=-3]

      0x221bb88: <multiple use>
          0x221bb88: <multiple use>
              0x221bb88: <multiple use>
              0x223bfa0: i32 = FrameIndex<1> [ORD=51] [ID=-3]

              0x2239270: <multiple use>
            0x223bea0: i32,ch = load 0x221bb88, 0x223bfa0, 0x2239270<LD4[%2]> [ORD=51] [ID=-3]

            0x223c0a0: i32 = Constant<12> [ORD=52] [ID=-3]

          0x223c6a0: i32 = add 0x223bea0, 0x223c0a0 [ORD=52] [ID=-3]

          0x2239270: <multiple use>
        0x223c8a0: i32,ch = load 0x221bb88, 0x223c6a0, 0x2239270<LD4[%33]> [ORD=53] [ID=-3]

        0x223bda0: i32 = Constant<117> [ID=-3]

        0x223c4a0: ch = setlt [ID=-3]

      0x2239070: i32 = setcc 0x223c8a0, 0x223bda0, 0x223c4a0 [ID=-3]

      0x2239a70: ch = BasicBlock<running_protection3.return 0x22481c0> [ID=-3]

    0x224fc90: ch = brcond 0x221bb88, 0x2239070, 0x2239a70 [ID=-3]

    0x2239b70: ch = BasicBlock<running_protection3.if.then14 0x2248110> [ID=-3]

  0x223c1a0: ch = br 0x224fc90, 0x2239b70 [ID=-3]


Legalized selection DAG: BB#4 'running_protection3:running_protection3.if.end10'
SelectionDAG has 14 nodes:
  0x221bb88: ch = EntryToken [ORD=51] [ID=0]

  0x2239270: i32 = undef [ORD=51] [ID=2]

      0x221bb88: <multiple use>
          0x221bb88: <multiple use>
              0x221bb88: <multiple use>
              0x223bfa0: i32 = FrameIndex<1> [ORD=51] [ID=1]

              0x2239270: <multiple use>
            0x223bea0: i32,ch = load 0x221bb88, 0x223bfa0, 0x2239270<LD4[%2]> [ORD=51] [ID=8]

            0x223c0a0: i32 = Constant<12> [ORD=52] [ID=3]

          0x223c6a0: i32 = add 0x223bea0, 0x223c0a0 [ORD=52] [ID=9]

          0x2239270: <multiple use>
        0x223c8a0: i32,ch = load 0x221bb88, 0x223c6a0, 0x2239270<LD4[%33]> [ORD=53] [ID=10]

        0x223bda0: i32 = Constant<117> [ID=6]

        0x223c4a0: ch = setlt [ID=7]

      0x2239070: i32 = setcc 0x223c8a0, 0x223bda0, 0x223c4a0 [ID=11]

      0x2239a70: ch = BasicBlock<running_protection3.return 0x22481c0> [ID=4]

    0x224fc90: ch = brcond 0x221bb88, 0x2239070, 0x2239a70 [ID=12]

    0x2239b70: ch = BasicBlock<running_protection3.if.then14 0x2248110> [ID=5]

  0x223c1a0: ch = br 0x224fc90, 0x2239b70 [ID=13]


Optimized legalized selection DAG: BB#4 'running_protection3:running_protection3.if.end10'
SelectionDAG has 14 nodes:
  0x221bb88: ch = EntryToken [ORD=51] [ID=0]

  0x2239270: i32 = undef [ORD=51] [ID=2]

      0x221bb88: <multiple use>
          0x221bb88: <multiple use>
              0x221bb88: <multiple use>
              0x223bfa0: i32 = FrameIndex<1> [ORD=51] [ID=1]

              0x2239270: <multiple use>
            0x223bea0: i32,ch = load 0x221bb88, 0x223bfa0, 0x2239270<LD4[%2]> [ORD=51] [ID=8]

            0x223c0a0: i32 = Constant<12> [ORD=52] [ID=3]

          0x223c6a0: i32 = add 0x223bea0, 0x223c0a0 [ORD=52] [ID=9]

          0x2239270: <multiple use>
        0x223c8a0: i32,ch = load 0x221bb88, 0x223c6a0, 0x2239270<LD4[%33]> [ORD=53] [ID=10]

        0x223bda0: i32 = Constant<117> [ID=6]

        0x223c4a0: ch = setlt [ID=7]

      0x2239070: i32 = setcc 0x223c8a0, 0x223bda0, 0x223c4a0 [ID=11]

      0x2239a70: ch = BasicBlock<running_protection3.return 0x22481c0> [ID=4]

    0x224fc90: ch = brcond 0x221bb88, 0x2239070, 0x2239a70 [ID=12]

    0x2239b70: ch = BasicBlock<running_protection3.if.then14 0x2248110> [ID=5]

  0x223c1a0: ch = br 0x224fc90, 0x2239b70 [ID=13]


===== Instruction selection begins: BB#4 'running_protection3.if.end10'
ISEL: Starting pattern match on root node: 0x223c1a0: ch = br 0x224fc90, 0x2239b70 [ID=13]

  Initial Opcode index to 1938
  Morphed node: 0x223c1a0: ch = JAL 0x2239b70, 0x224fc90

ISEL: Match complete!
=> 0x223c1a0: ch = JAL 0x2239b70, 0x224fc90

ISEL: Starting pattern match on root node: 0x224fc90: ch = brcond 0x221bb88, 0x2239070, 0x2239a70 [ID=12]

  Initial Opcode index to 1439
  Skipped scope entry (due to false predicate) at index 1456, continuing at 1477
  Skipped scope entry (due to false predicate) at index 1478, continuing at 1499
  Morphed node: 0x224fc90: ch = BLT 0x2239a70, 0x223c8a0, 0x223bda0, 0x221bb88

ISEL: Match complete!
=> 0x224fc90: ch = BLT 0x2239a70, 0x223c8a0, 0x223bda0, 0x221bb88

ISEL: Starting pattern match on root node: 0x223c8a0: i32,ch = load 0x221bb88, 0x223c6a0, 0x2239270<LD4[%33]> [ORD=53] [ID=10]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x223c8a0: i32,ch = LW 0x223bea0, 0x223c4a0, 0x221bb88<Mem:LD4[%33]> [ORD=53]

ISEL: Match complete!
=> 0x223c8a0: i32,ch = LW 0x223bea0, 0x223c4a0, 0x221bb88<Mem:LD4[%33]> [ORD=53]

ISEL: Starting pattern match on root node: 0x223bea0: i32,ch = load 0x221bb88, 0x223bfa0, 0x2239270<LD4[%2]> [ORD=51] [ID=8]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x223bea0: i32,ch = LW 0x223bfa0, 0x223c0a0, 0x221bb88<Mem:LD4[%2]> [ORD=51]

ISEL: Match complete!
=> 0x223bea0: i32,ch = LW 0x223bfa0, 0x223c0a0, 0x221bb88<Mem:LD4[%2]> [ORD=51]

ISEL: Starting pattern match on root node: 0x223bda0: i32 = Constant<117> [ID=6]

  Initial Opcode index to 1226
comparing 0 and 117 and returning value:0
  Skipped scope entry (due to false predicate) at index 1228, continuing at 1236
  Morphed node: 0x223bda0: i32 = ADDI 0x2239270, 0x223c6a0

ISEL: Match complete!
=> 0x223bda0: i32 = ADDI 0x2239270, 0x223c6a0

=> 0x2239b70: ch = BasicBlock<running_protection3.if.then14 0x2248110>

=> 0x2239a70: ch = BasicBlock<running_protection3.return 0x22481c0>

=> 0x221bb88: ch = EntryToken [ORD=51]

===== Instruction selection ends:
Selected selection DAG: BB#4 'running_protection3:running_protection3.if.end10'
SelectionDAG has 15 nodes:
  0x221bb88: ch = EntryToken [ORD=51]

    0x2239b70: ch = BasicBlock<running_protection3.if.then14 0x2248110>

      0x2239a70: ch = BasicBlock<running_protection3.return 0x22481c0>

            0x2239070: i32 = Register %t5

            0x2238f70: i32 = TargetFrameIndex<1>

          0x223bfa0: i32 = ADDI 0x2239070, 0x2238f70 [ORD=51]

          0x223c0a0: i32 = TargetConstant<0>

          0x221bb88: <multiple use>
        0x223bea0: i32,ch = LW 0x223bfa0, 0x223c0a0, 0x221bb88<Mem:LD4[%2]> [ORD=51]

        0x223c4a0: i32 = TargetConstant<12>

        0x221bb88: <multiple use>
      0x223c8a0: i32,ch = LW 0x223bea0, 0x223c4a0, 0x221bb88<Mem:LD4[%33]> [ORD=53]

        0x2239270: i32 = Register %zero

        0x223c6a0: i32 = TargetConstant<117>

      0x223bda0: i32 = ADDI 0x2239270, 0x223c6a0

      0x221bb88: <multiple use>
    0x224fc90: ch = BLT 0x2239a70, 0x223c8a0, 0x223bda0, 0x221bb88

  0x223c1a0: ch = JAL 0x2239b70, 0x224fc90


********** List Scheduling BB#4 'running_protection3.if.end10' **********
SU(0): 0x223c1a0: ch = JAL 0x2239b70, 0x224fc90 [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x224fc90: ch = BLT 0x2239a70, 0x223c8a0, 0x223bda0, 0x221bb88 [ID=1]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(3): Latency=1
   val SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x223bda0: i32 = ADDI 0x2239270, 0x223c6a0 [ID=2]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
   val SU(1): Latency=1

SU(3): 0x223c8a0: i32,ch = LW 0x223bea0, 0x223c4a0, 0x221bb88<Mem:LD4[%33]> [ORD=53] [ID=3]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(4): Latency=1
  Successors:
   val SU(1): Latency=1

SU(4): 0x223bea0: i32,ch = LW 0x223bfa0, 0x223c0a0, 0x221bb88<Mem:LD4[%2]> [ORD=51] [ID=4]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(5): Latency=1
  Successors:
   val SU(3): Latency=1

SU(5): 0x223bfa0: i32 = ADDI 0x2239070, 0x2238f70 [ORD=51] [ID=5]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(4): Latency=1


Examining Available:
Height 0: SU(0): 0x223c1a0: ch = JAL 0x2239b70, 0x224fc90 [ID=0]


*** Scheduling [0]: SU(0): 0x223c1a0: ch = JAL 0x2239b70, 0x224fc90 [ID=0]


Examining Available:
Height 1: SU(1): 0x224fc90: ch = BLT 0x2239a70, 0x223c8a0, 0x223bda0, 0x221bb88 [ID=1]


*** Scheduling [1]: SU(1): 0x224fc90: ch = BLT 0x2239a70, 0x223c8a0, 0x223bda0, 0x221bb88 [ID=1]


Examining Available:
Height 2: SU(2): 0x223bda0: i32 = ADDI 0x2239270, 0x223c6a0 [ID=2]

Height 2: SU(3): 0x223c8a0: i32,ch = LW 0x223bea0, 0x223c4a0, 0x221bb88<Mem:LD4[%33]> [ORD=53] [ID=3]


*** Scheduling [2]: SU(2): 0x223bda0: i32 = ADDI 0x2239270, 0x223c6a0 [ID=2]


Examining Available:
Height 2: SU(3): 0x223c8a0: i32,ch = LW 0x223bea0, 0x223c4a0, 0x221bb88<Mem:LD4[%33]> [ORD=53] [ID=3]


*** Scheduling [3]: SU(3): 0x223c8a0: i32,ch = LW 0x223bea0, 0x223c4a0, 0x221bb88<Mem:LD4[%33]> [ORD=53] [ID=3]


Examining Available:
Height 4: SU(4): 0x223bea0: i32,ch = LW 0x223bfa0, 0x223c0a0, 0x221bb88<Mem:LD4[%2]> [ORD=51] [ID=4]


*** Scheduling [4]: SU(4): 0x223bea0: i32,ch = LW 0x223bfa0, 0x223c0a0, 0x221bb88<Mem:LD4[%2]> [ORD=51] [ID=4]


Examining Available:
Height 5: SU(5): 0x223bfa0: i32 = ADDI 0x2239070, 0x2238f70 [ORD=51] [ID=5]


*** Scheduling [5]: SU(5): 0x223bfa0: i32 = ADDI 0x2239070, 0x2238f70 [ORD=51] [ID=5]

*** Final schedule ***
SU(5): 0x223bfa0: i32 = ADDI 0x2239070, 0x2238f70 [ORD=51] [ID=5]

SU(4): 0x223bea0: i32,ch = LW 0x223bfa0, 0x223c0a0, 0x221bb88<Mem:LD4[%2]> [ORD=51] [ID=4]

SU(3): 0x223c8a0: i32,ch = LW 0x223bea0, 0x223c4a0, 0x221bb88<Mem:LD4[%33]> [ORD=53] [ID=3]

SU(2): 0x223bda0: i32 = ADDI 0x2239270, 0x223c6a0 [ID=2]

SU(1): 0x224fc90: ch = BLT 0x2239a70, 0x223c8a0, 0x223bda0, 0x221bb88 [ID=1]

SU(0): 0x223c1a0: ch = JAL 0x2239b70, 0x224fc90 [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %36 = load i32** %2, align 4
I was here to add   %2 = alloca i32*, align 4
with I type i32*and sd value :0x2238f70: i32 = FrameIndex<1>
new load?0x2239270: i32,ch = load 0x221bb88, 0x2238f70, 0x223c6a0<LD4[%2]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x2239070: i32 = Constant<0>

    0x221bb88: ch = EntryToken

    0x2238f70: i32 = FrameIndex<1>

    0x223c6a0: i32 = undef

  0x2239270: i32,ch = load 0x221bb88, 0x2238f70, 0x223c6a0<LD4[%2]>

  0x221bb88: ch = EntryToken


store visit is after?  store i32 16, i32* %37, align 4
I was here to add i32 16
whats in dag after store?SelectionDAG has 10 nodes:
  0x2239070: i32 = Constant<0>

  0x223c6a0: i32 = undef [ORD=55]

    0x221bb88: ch = EntryToken [ORD=55]

    0x2238f70: i32 = FrameIndex<1> [ORD=55]

    0x223c6a0: <multiple use>
  0x2239270: i32,ch = load 0x221bb88, 0x2238f70, 0x223c6a0<LD4[%2]> [ORD=55]

  0x223c0a0: i64 = Constant<20>

    0x2239270: <multiple use>
    0x224fc90: i32 = Constant<16> [ORD=57]

      0x2239270: <multiple use>
      0x223c4a0: i32 = Constant<20> [ORD=56]

    0x223c1a0: i32 = add 0x2239270, 0x223c4a0 [ORD=56]

    0x223c6a0: <multiple use>
  0x223c8a0: ch = store 0x2239270:1, 0x224fc90, 0x223c1a0, 0x223c6a0<ST4[%37]> [ORD=57]


visiting load instruction   %38 = load i32** %2, align 4
with I type i32*and sd value :0x2238f70: i32 = FrameIndex<1>
new load?0x223bea0: i32,ch = load 0x223c8a0, 0x2238f70, 0x223c6a0<LD4[%2]>
dag after load is dealt with?SelectionDAG has 11 nodes:
  0x2238f70: i32 = FrameIndex<1> [ORD=55]

  0x2239070: i32 = Constant<0>

  0x223c6a0: i32 = undef [ORD=55]

    0x221bb88: ch = EntryToken [ORD=55]

    0x2238f70: <multiple use>
    0x223c6a0: <multiple use>
  0x2239270: i32,ch = load 0x221bb88, 0x2238f70, 0x223c6a0<LD4[%2]> [ORD=55]

  0x223c0a0: i64 = Constant<20>

      0x2239270: <multiple use>
      0x224fc90: i32 = Constant<16> [ORD=57]

        0x2239270: <multiple use>
        0x223c4a0: i32 = Constant<20> [ORD=56]

      0x223c1a0: i32 = add 0x2239270, 0x223c4a0 [ORD=56]

      0x223c6a0: <multiple use>
    0x223c8a0: ch = store 0x2239270:1, 0x224fc90, 0x223c1a0, 0x223c6a0<ST4[%37]> [ORD=57]

    0x2238f70: <multiple use>
    0x223c6a0: <multiple use>
  0x223bea0: i32,ch = load 0x223c8a0, 0x2238f70, 0x223c6a0<LD4[%2]>

    0x2239270: <multiple use>
    0x224fc90: i32 = Constant<16> [ORD=57]

      0x2239270: <multiple use>
      0x223c4a0: i32 = Constant<20> [ORD=56]

    0x223c1a0: i32 = add 0x2239270, 0x223c4a0 [ORD=56]

    0x223c6a0: <multiple use>
  0x223c8a0: ch = store 0x2239270:1, 0x224fc90, 0x223c1a0, 0x223c6a0<ST4[%37]> [ORD=57]


store visit is after?  store i32 16, i32* %39, align 4
whats in dag after store?SelectionDAG has 14 nodes:
  0x2238f70: i32 = FrameIndex<1> [ORD=55]

  0x2239070: i32 = Constant<0>

  0x223c6a0: i32 = undef [ORD=55]

    0x221bb88: ch = EntryToken [ORD=55]

    0x2238f70: <multiple use>
    0x223c6a0: <multiple use>
  0x2239270: i32,ch = load 0x221bb88, 0x2238f70, 0x223c6a0<LD4[%2]> [ORD=55]

  0x223c0a0: i64 = Constant<20>

  0x224fc90: i32 = Constant<16> [ORD=57]

      0x2239270: <multiple use>
      0x224fc90: <multiple use>
        0x2239270: <multiple use>
        0x223c4a0: i32 = Constant<20> [ORD=56]

      0x223c1a0: i32 = add 0x2239270, 0x223c4a0 [ORD=56]

      0x223c6a0: <multiple use>
    0x223c8a0: ch = store 0x2239270:1, 0x224fc90, 0x223c1a0, 0x223c6a0<ST4[%37]> [ORD=57]

    0x2238f70: <multiple use>
    0x223c6a0: <multiple use>
  0x223bea0: i32,ch = load 0x223c8a0, 0x2238f70, 0x223c6a0<LD4[%2]> [ORD=58]

  0x223bda0: i64 = Constant<16>

    0x223bea0: <multiple use>
    0x224fc90: <multiple use>
      0x223bea0: <multiple use>
      0x224fc90: <multiple use>
    0x2239b70: i32 = add 0x223bea0, 0x224fc90 [ORD=59]

    0x223c6a0: <multiple use>
  0x2239a70: ch = store 0x223bea0:1, 0x224fc90, 0x2239b70, 0x223c6a0<ST4[%39]> [ORD=60]


Initial selection DAG: BB#5 'running_protection3:running_protection3.if.then14'
SelectionDAG has 14 nodes:
  0x2238f70: i32 = FrameIndex<1> [ORD=55]

  0x2239070: i32 = Constant<0>

  0x223c6a0: i32 = undef [ORD=55]

    0x221bb88: ch = EntryToken [ORD=55]

    0x2238f70: <multiple use>
    0x223c6a0: <multiple use>
  0x2239270: i32,ch = load 0x221bb88, 0x2238f70, 0x223c6a0<LD4[%2]> [ORD=55]

  0x223c0a0: i64 = Constant<20>

  0x224fc90: i32 = Constant<16> [ORD=57]

      0x2239270: <multiple use>
      0x224fc90: <multiple use>
        0x2239270: <multiple use>
        0x223c4a0: i32 = Constant<20> [ORD=56]

      0x223c1a0: i32 = add 0x2239270, 0x223c4a0 [ORD=56]

      0x223c6a0: <multiple use>
    0x223c8a0: ch = store 0x2239270:1, 0x224fc90, 0x223c1a0, 0x223c6a0<ST4[%37]> [ORD=57]

    0x2238f70: <multiple use>
    0x223c6a0: <multiple use>
  0x223bea0: i32,ch = load 0x223c8a0, 0x2238f70, 0x223c6a0<LD4[%2]> [ORD=58]

  0x223bda0: i64 = Constant<16>

    0x223bea0: <multiple use>
    0x224fc90: <multiple use>
      0x223bea0: <multiple use>
      0x224fc90: <multiple use>
    0x2239b70: i32 = add 0x223bea0, 0x224fc90 [ORD=59]

    0x223c6a0: <multiple use>
  0x2239a70: ch = store 0x223bea0:1, 0x224fc90, 0x2239b70, 0x223c6a0<ST4[%39]> [ORD=60]


Optimized lowered selection DAG: BB#5 'running_protection3:running_protection3.if.then14'
SelectionDAG has 11 nodes:
  0x2238f70: i32 = FrameIndex<1> [ORD=55]

  0x223c6a0: i32 = undef [ORD=55]

    0x221bb88: ch = EntryToken [ORD=55]

    0x2238f70: <multiple use>
    0x223c6a0: <multiple use>
  0x2239270: i32,ch = load 0x221bb88, 0x2238f70, 0x223c6a0<LD4[%2]> [ORD=55]

  0x224fc90: i32 = Constant<16> [ORD=57]

      0x2239270: <multiple use>
      0x224fc90: <multiple use>
        0x2239270: <multiple use>
        0x223c4a0: i32 = Constant<20> [ORD=56]

      0x223c1a0: i32 = add 0x2239270, 0x223c4a0 [ORD=56]

      0x223c6a0: <multiple use>
    0x223c8a0: ch = store 0x2239270:1, 0x224fc90, 0x223c1a0, 0x223c6a0<ST4[%37]> [ORD=57]

    0x2238f70: <multiple use>
    0x223c6a0: <multiple use>
  0x223bea0: i32,ch = load 0x223c8a0, 0x2238f70, 0x223c6a0<LD4[%2]> [ORD=58]

    0x223bea0: <multiple use>
    0x224fc90: <multiple use>
      0x223bea0: <multiple use>
      0x224fc90: <multiple use>
    0x2239b70: i32 = add 0x223bea0, 0x224fc90 [ORD=59]

    0x223c6a0: <multiple use>
  0x2239a70: ch = store 0x223bea0:1, 0x224fc90, 0x2239b70, 0x223c6a0<ST4[%39]> [ORD=60]


Legally typed node: 0x224fc90: i32 = Constant<16> [ORD=57] [ID=0]

Legally typed node: 0x223c4a0: i32 = Constant<20> [ORD=56] [ID=0]

Legally typed node: 0x223c6a0: i32 = undef [ORD=55] [ID=0]

Legally typed node: 0x2238f70: i32 = FrameIndex<1> [ORD=55] [ID=0]

Legally typed node: 0x221bb88: ch = EntryToken [ORD=55] [ID=0]

Legally typed node: 0x2239270: i32,ch = load 0x221bb88, 0x2238f70, 0x223c6a0<LD4[%2]> [ORD=55] [ID=0]

Legally typed node: 0x223c1a0: i32 = add 0x2239270, 0x223c4a0 [ORD=56] [ID=0]

Legally typed node: 0x223c8a0: ch = store 0x2239270:1, 0x224fc90, 0x223c1a0, 0x223c6a0<ST4[%37]> [ORD=57] [ID=0]

Legally typed node: 0x223bea0: i32,ch = load 0x223c8a0, 0x2238f70, 0x223c6a0<LD4[%2]> [ORD=58] [ID=0]

Legally typed node: 0x2239b70: i32 = add 0x223bea0, 0x224fc90 [ORD=59] [ID=0]

Legally typed node: 0x2239a70: ch = store 0x223bea0:1, 0x224fc90, 0x2239b70, 0x223c6a0<ST4[%39]> [ORD=60] [ID=0]

Legally typed node: 0x7fff6e802f00: ch = handlenode 0x2239a70 [ID=0]

Type-legalized selection DAG: BB#5 'running_protection3:running_protection3.if.then14'
SelectionDAG has 11 nodes:
  0x2238f70: i32 = FrameIndex<1> [ORD=55] [ID=-3]

  0x223c6a0: i32 = undef [ORD=55] [ID=-3]

    0x221bb88: ch = EntryToken [ORD=55] [ID=-3]

    0x2238f70: <multiple use>
    0x223c6a0: <multiple use>
  0x2239270: i32,ch = load 0x221bb88, 0x2238f70, 0x223c6a0<LD4[%2]> [ORD=55] [ID=-3]

  0x224fc90: i32 = Constant<16> [ORD=57] [ID=-3]

      0x2239270: <multiple use>
      0x224fc90: <multiple use>
        0x2239270: <multiple use>
        0x223c4a0: i32 = Constant<20> [ORD=56] [ID=-3]

      0x223c1a0: i32 = add 0x2239270, 0x223c4a0 [ORD=56] [ID=-3]

      0x223c6a0: <multiple use>
    0x223c8a0: ch = store 0x2239270:1, 0x224fc90, 0x223c1a0, 0x223c6a0<ST4[%37]> [ORD=57] [ID=-3]

    0x2238f70: <multiple use>
    0x223c6a0: <multiple use>
  0x223bea0: i32,ch = load 0x223c8a0, 0x2238f70, 0x223c6a0<LD4[%2]> [ORD=58] [ID=-3]

    0x223bea0: <multiple use>
    0x224fc90: <multiple use>
      0x223bea0: <multiple use>
      0x224fc90: <multiple use>
    0x2239b70: i32 = add 0x223bea0, 0x224fc90 [ORD=59] [ID=-3]

    0x223c6a0: <multiple use>
  0x2239a70: ch = store 0x223bea0:1, 0x224fc90, 0x2239b70, 0x223c6a0<ST4[%39]> [ORD=60] [ID=-3]


Legalized selection DAG: BB#5 'running_protection3:running_protection3.if.then14'
SelectionDAG has 11 nodes:
  0x2238f70: i32 = FrameIndex<1> [ORD=55] [ID=1]

  0x223c6a0: i32 = undef [ORD=55] [ID=2]

  0x224fc90: i32 = Constant<16> [ORD=57] [ID=4]

    0x221bb88: ch = EntryToken [ORD=55] [ID=0]

    0x2238f70: <multiple use>
    0x223c6a0: <multiple use>
  0x2239270: i32,ch = load 0x221bb88, 0x2238f70, 0x223c6a0<LD4[%2]> [ORD=55] [ID=5]

      0x2239270: <multiple use>
      0x224fc90: <multiple use>
        0x2239270: <multiple use>
        0x223c4a0: i32 = Constant<20> [ORD=56] [ID=3]

      0x223c1a0: i32 = add 0x2239270, 0x223c4a0 [ORD=56] [ID=6]

      0x223c6a0: <multiple use>
    0x223c8a0: ch = store 0x2239270:1, 0x224fc90, 0x223c1a0, 0x223c6a0<ST4[%37]> [ORD=57] [ID=7]

    0x2238f70: <multiple use>
    0x223c6a0: <multiple use>
  0x223bea0: i32,ch = load 0x223c8a0, 0x2238f70, 0x223c6a0<LD4[%2]> [ORD=58] [ID=8]

    0x223bea0: <multiple use>
    0x224fc90: <multiple use>
      0x223bea0: <multiple use>
      0x224fc90: <multiple use>
    0x2239b70: i32 = add 0x223bea0, 0x224fc90 [ORD=59] [ID=9]

    0x223c6a0: <multiple use>
  0x2239a70: ch = store 0x223bea0:1, 0x224fc90, 0x2239b70, 0x223c6a0<ST4[%39]> [ORD=60] [ID=10]


Optimized legalized selection DAG: BB#5 'running_protection3:running_protection3.if.then14'
SelectionDAG has 11 nodes:
  0x2238f70: i32 = FrameIndex<1> [ORD=55] [ID=1]

  0x223c6a0: i32 = undef [ORD=55] [ID=2]

  0x224fc90: i32 = Constant<16> [ORD=57] [ID=4]

    0x221bb88: ch = EntryToken [ORD=55] [ID=0]

    0x2238f70: <multiple use>
    0x223c6a0: <multiple use>
  0x2239270: i32,ch = load 0x221bb88, 0x2238f70, 0x223c6a0<LD4[%2]> [ORD=55] [ID=5]

      0x2239270: <multiple use>
      0x224fc90: <multiple use>
        0x2239270: <multiple use>
        0x223c4a0: i32 = Constant<20> [ORD=56] [ID=3]

      0x223c1a0: i32 = add 0x2239270, 0x223c4a0 [ORD=56] [ID=6]

      0x223c6a0: <multiple use>
    0x223c8a0: ch = store 0x2239270:1, 0x224fc90, 0x223c1a0, 0x223c6a0<ST4[%37]> [ORD=57] [ID=7]

    0x2238f70: <multiple use>
    0x223c6a0: <multiple use>
  0x223bea0: i32,ch = load 0x223c8a0, 0x2238f70, 0x223c6a0<LD4[%2]> [ORD=58] [ID=8]

    0x223bea0: <multiple use>
    0x224fc90: <multiple use>
      0x223bea0: <multiple use>
      0x224fc90: <multiple use>
    0x2239b70: i32 = add 0x223bea0, 0x224fc90 [ORD=59] [ID=9]

    0x223c6a0: <multiple use>
  0x2239a70: ch = store 0x223bea0:1, 0x224fc90, 0x2239b70, 0x223c6a0<ST4[%39]> [ORD=60] [ID=10]


===== Instruction selection begins: BB#5 'running_protection3.if.then14'
ISEL: Starting pattern match on root node: 0x2239a70: ch = store 0x223bea0:1, 0x224fc90, 0x2239b70, 0x223c6a0<ST4[%39]> [ORD=60] [ID=10]

  Initial Opcode index to 178
  Morphed node: 0x2239a70: ch = SW 0x224fc90, 0x223bea0, 0x2239070, 0x223bea0:1<Mem:ST4[%39]> [ORD=60]

ISEL: Match complete!
=> 0x2239a70: ch = SW 0x224fc90, 0x223bea0, 0x2239070, 0x223bea0:1<Mem:ST4[%39]> [ORD=60]

ISEL: Starting pattern match on root node: 0x223bea0: i32,ch = load 0x223c8a0, 0x2238f70, 0x223c6a0<LD4[%2]> [ORD=58] [ID=8]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x223bea0: i32,ch = LW 0x2238f70, 0x2239b70, 0x223c8a0<Mem:LD4[%2]> [ORD=58]

ISEL: Match complete!
=> 0x223bea0: i32,ch = LW 0x2238f70, 0x2239b70, 0x223c8a0<Mem:LD4[%2]> [ORD=58]

ISEL: Starting pattern match on root node: 0x223c8a0: ch = store 0x2239270:1, 0x224fc90, 0x223c1a0, 0x223c6a0<ST4[%37]> [ORD=57] [ID=7]

  Initial Opcode index to 178
  Morphed node: 0x223c8a0: ch = SW 0x224fc90, 0x2239270, 0x223c0a0, 0x2239270:1<Mem:ST4[%37]> [ORD=57]

ISEL: Match complete!
=> 0x223c8a0: ch = SW 0x224fc90, 0x2239270, 0x223c0a0, 0x2239270:1<Mem:ST4[%37]> [ORD=57]

ISEL: Starting pattern match on root node: 0x2239270: i32,ch = load 0x221bb88, 0x2238f70, 0x223c6a0<LD4[%2]> [ORD=55] [ID=5]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x2239270: i32,ch = LW 0x2238f70, 0x2239b70, 0x221bb88<Mem:LD4[%2]> [ORD=55]

ISEL: Match complete!
=> 0x2239270: i32,ch = LW 0x2238f70, 0x2239b70, 0x221bb88<Mem:LD4[%2]> [ORD=55]

ISEL: Starting pattern match on root node: 0x224fc90: i32 = Constant<16> [ORD=57] [ID=4]

  Initial Opcode index to 1226
comparing 0 and 16 and returning value:0
  Skipped scope entry (due to false predicate) at index 1228, continuing at 1236
  Morphed node: 0x224fc90: i32 = ADDI 0x223c6a0, 0x2239070 [ORD=57]

ISEL: Match complete!
=> 0x224fc90: i32 = ADDI 0x223c6a0, 0x2239070 [ORD=57]

=> 0x221bb88: ch = EntryToken [ORD=55]

===== Instruction selection ends:
Selected selection DAG: BB#5 'running_protection3:running_protection3.if.then14'
SelectionDAG has 13 nodes:
    0x223c6a0: i32 = Register %zero

    0x2239070: <multiple use>
  0x224fc90: i32 = ADDI 0x223c6a0, 0x2239070 [ORD=57]

    0x223bda0: <multiple use>
    0x2239b70: <multiple use>
    0x221bb88: ch = EntryToken [ORD=55]

  0x2239270: i32,ch = LW 0x223bda0, 0x2239b70, 0x221bb88<Mem:LD4[%2]> [ORD=55]

    0x223bda0: <multiple use>
    0x2239b70: <multiple use>
      0x224fc90: <multiple use>
      0x2239270: <multiple use>
      0x223c0a0: i32 = TargetConstant<20>

      0x2239270: <multiple use>
    0x223c8a0: ch = SW 0x224fc90, 0x2239270, 0x223c0a0, 0x2239270:1<Mem:ST4[%37]> [ORD=57]

  0x223bea0: i32,ch = LW 0x223bda0, 0x2239b70, 0x223c8a0<Mem:LD4[%2]> [ORD=58]

  0x2239070: i32 = TargetConstant<16>

  0x2239b70: i32 = TargetConstant<0>

    0x223c4a0: i32 = Register %t5

    0x223c1a0: i32 = TargetFrameIndex<1>

  0x223bda0: i32 = ADDI 0x223c4a0, 0x223c1a0 [ORD=55]

    0x224fc90: <multiple use>
    0x223bea0: <multiple use>
    0x2239070: <multiple use>
    0x223bea0: <multiple use>
  0x2239a70: ch = SW 0x224fc90, 0x223bea0, 0x2239070, 0x223bea0:1<Mem:ST4[%39]> [ORD=60]


********** List Scheduling BB#5 'running_protection3.if.then14' **********
SU(0): 0x2239a70: ch = SW 0x224fc90, 0x223bea0, 0x2239070, 0x223bea0:1<Mem:ST4[%39]> [ORD=60] [ID=0]

  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
   val SU(5): Latency=1
   val SU(1): Latency=1
   ch  SU(1): Latency=1

SU(1): 0x223bea0: i32,ch = LW 0x223bda0, 0x2239b70, 0x223c8a0<Mem:LD4[%2]> [ORD=58] [ID=1]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(4): Latency=1
   ch  SU(2): Latency=1
  Successors:
   val SU(0): Latency=1
   ch  SU(0): Latency=1

SU(2): 0x223c8a0: ch = SW 0x224fc90, 0x2239270, 0x223c0a0, 0x2239270:1<Mem:ST4[%37]> [ORD=57] [ID=2]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(5): Latency=1
   val SU(3): Latency=1
   ch  SU(3): Latency=1
  Successors:
   ch  SU(1): Latency=1

SU(3): 0x2239270: i32,ch = LW 0x223bda0, 0x2239b70, 0x221bb88<Mem:LD4[%2]> [ORD=55] [ID=3]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(4): Latency=1
  Successors:
   val SU(2): Latency=1
   ch  SU(2): Latency=1

SU(4): 0x223bda0: i32 = ADDI 0x223c4a0, 0x223c1a0 [ORD=55] [ID=4]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(1): Latency=1
   val SU(3): Latency=1

SU(5): 0x224fc90: i32 = ADDI 0x223c6a0, 0x2239070 [ORD=57] [ID=5]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(0): Latency=1
   val SU(2): Latency=1


Examining Available:
Height 0: SU(0): 0x2239a70: ch = SW 0x224fc90, 0x223bea0, 0x2239070, 0x223bea0:1<Mem:ST4[%39]> [ORD=60] [ID=0]


*** Scheduling [0]: SU(0): 0x2239a70: ch = SW 0x224fc90, 0x223bea0, 0x2239070, 0x223bea0:1<Mem:ST4[%39]> [ORD=60] [ID=0]


Examining Available:
Height 1: SU(1): 0x223bea0: i32,ch = LW 0x223bda0, 0x2239b70, 0x223c8a0<Mem:LD4[%2]> [ORD=58] [ID=1]


*** Scheduling [1]: SU(1): 0x223bea0: i32,ch = LW 0x223bda0, 0x2239b70, 0x223c8a0<Mem:LD4[%2]> [ORD=58] [ID=1]


Examining Available:
Height 2: SU(2): 0x223c8a0: ch = SW 0x224fc90, 0x2239270, 0x223c0a0, 0x2239270:1<Mem:ST4[%37]> [ORD=57] [ID=2]


*** Scheduling [2]: SU(2): 0x223c8a0: ch = SW 0x224fc90, 0x2239270, 0x223c0a0, 0x2239270:1<Mem:ST4[%37]> [ORD=57] [ID=2]


Examining Available:
Height 3: SU(5): 0x224fc90: i32 = ADDI 0x223c6a0, 0x2239070 [ORD=57] [ID=5]

Height 3: SU(3): 0x2239270: i32,ch = LW 0x223bda0, 0x2239b70, 0x221bb88<Mem:LD4[%2]> [ORD=55] [ID=3]


*** Scheduling [3]: SU(5): 0x224fc90: i32 = ADDI 0x223c6a0, 0x2239070 [ORD=57] [ID=5]


Examining Available:
Height 3: SU(3): 0x2239270: i32,ch = LW 0x223bda0, 0x2239b70, 0x221bb88<Mem:LD4[%2]> [ORD=55] [ID=3]


*** Scheduling [4]: SU(3): 0x2239270: i32,ch = LW 0x223bda0, 0x2239b70, 0x221bb88<Mem:LD4[%2]> [ORD=55] [ID=3]


Examining Available:
Height 5: SU(4): 0x223bda0: i32 = ADDI 0x223c4a0, 0x223c1a0 [ORD=55] [ID=4]


*** Scheduling [5]: SU(4): 0x223bda0: i32 = ADDI 0x223c4a0, 0x223c1a0 [ORD=55] [ID=4]

*** Final schedule ***
SU(4): 0x223bda0: i32 = ADDI 0x223c4a0, 0x223c1a0 [ORD=55] [ID=4]

SU(3): 0x2239270: i32,ch = LW 0x223bda0, 0x2239b70, 0x221bb88<Mem:LD4[%2]> [ORD=55] [ID=3]

SU(5): 0x224fc90: i32 = ADDI 0x223c6a0, 0x2239070 [ORD=57] [ID=5]

SU(2): 0x223c8a0: ch = SW 0x224fc90, 0x2239270, 0x223c0a0, 0x2239270:1<Mem:ST4[%37]> [ORD=57] [ID=2]

SU(1): 0x223bea0: i32,ch = LW 0x223bda0, 0x2239b70, 0x223c8a0<Mem:LD4[%2]> [ORD=58] [ID=1]

SU(0): 0x2239a70: ch = SW 0x224fc90, 0x223bea0, 0x2239070, 0x223bea0:1<Mem:ST4[%39]> [ORD=60] [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %40 = load i32** %2, align 4
I was here to add   %2 = alloca i32*, align 4
with I type i32*and sd value :0x223bda0: i32 = FrameIndex<1>
new load?0x223c6a0: i32,ch = load 0x221bb88, 0x223bda0, 0x223c4a0<LD4[%2]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x223c1a0: i32 = Constant<0>

    0x221bb88: ch = EntryToken

    0x223bda0: i32 = FrameIndex<1>

    0x223c4a0: i32 = undef

  0x223c6a0: i32,ch = load 0x221bb88, 0x223bda0, 0x223c4a0<LD4[%2]>

  0x221bb88: ch = EntryToken


store visit is after?  store i32* %40, i32** %1, align 4
I was here to add   %1 = alloca i32*, align 4, !ConsumedBy !6
whats in dag after store?SelectionDAG has 7 nodes:
  0x223c1a0: i32 = Constant<0>

  0x223c4a0: i32 = undef [ORD=61]

    0x221bb88: ch = EntryToken [ORD=61]

    0x223bda0: i32 = FrameIndex<1> [ORD=61]

    0x223c4a0: <multiple use>
  0x223c6a0: i32,ch = load 0x221bb88, 0x223bda0, 0x223c4a0<LD4[%2]> [ORD=61]

    0x223c6a0: <multiple use>
    0x223c6a0: <multiple use>
    0x223c0a0: i32 = FrameIndex<0> [ORD=62]

    0x223c4a0: <multiple use>
  0x2239b70: ch = store 0x223c6a0:1, 0x223c6a0, 0x223c0a0, 0x223c4a0<ST4[%1]> [ORD=62]


Initial selection DAG: BB#6 'running_protection3:running_protection3.return'
SelectionDAG has 7 nodes:
  0x223c1a0: i32 = Constant<0>

  0x223c4a0: i32 = undef [ORD=61]

    0x221bb88: ch = EntryToken [ORD=61]

    0x223bda0: i32 = FrameIndex<1> [ORD=61]

    0x223c4a0: <multiple use>
  0x223c6a0: i32,ch = load 0x221bb88, 0x223bda0, 0x223c4a0<LD4[%2]> [ORD=61]

    0x223c6a0: <multiple use>
    0x223c6a0: <multiple use>
    0x223c0a0: i32 = FrameIndex<0> [ORD=62]

    0x223c4a0: <multiple use>
  0x2239b70: ch = store 0x223c6a0:1, 0x223c6a0, 0x223c0a0, 0x223c4a0<ST4[%1]> [ORD=62]


Optimized lowered selection DAG: BB#6 'running_protection3:running_protection3.return'
SelectionDAG has 6 nodes:
  0x223c4a0: i32 = undef [ORD=61]

    0x221bb88: ch = EntryToken [ORD=61]

    0x223bda0: i32 = FrameIndex<1> [ORD=61]

    0x223c4a0: <multiple use>
  0x223c6a0: i32,ch = load 0x221bb88, 0x223bda0, 0x223c4a0<LD4[%2]> [ORD=61]

    0x223c6a0: <multiple use>
    0x223c6a0: <multiple use>
    0x223c0a0: i32 = FrameIndex<0> [ORD=62]

    0x223c4a0: <multiple use>
  0x2239b70: ch = store 0x223c6a0:1, 0x223c6a0, 0x223c0a0, 0x223c4a0<ST4[%1]> [ORD=62]


Legally typed node: 0x223c0a0: i32 = FrameIndex<0> [ORD=62] [ID=0]

Legally typed node: 0x223c4a0: i32 = undef [ORD=61] [ID=0]

Legally typed node: 0x223bda0: i32 = FrameIndex<1> [ORD=61] [ID=0]

Legally typed node: 0x221bb88: ch = EntryToken [ORD=61] [ID=0]

Legally typed node: 0x223c6a0: i32,ch = load 0x221bb88, 0x223bda0, 0x223c4a0<LD4[%2]> [ORD=61] [ID=0]

Legally typed node: 0x2239b70: ch = store 0x223c6a0:1, 0x223c6a0, 0x223c0a0, 0x223c4a0<ST4[%1]> [ORD=62] [ID=0]

Legally typed node: 0x7fff6e802f00: ch = handlenode 0x2239b70 [ID=0]

Type-legalized selection DAG: BB#6 'running_protection3:running_protection3.return'
SelectionDAG has 6 nodes:
  0x223c4a0: i32 = undef [ORD=61] [ID=-3]

    0x221bb88: ch = EntryToken [ORD=61] [ID=-3]

    0x223bda0: i32 = FrameIndex<1> [ORD=61] [ID=-3]

    0x223c4a0: <multiple use>
  0x223c6a0: i32,ch = load 0x221bb88, 0x223bda0, 0x223c4a0<LD4[%2]> [ORD=61] [ID=-3]

    0x223c6a0: <multiple use>
    0x223c6a0: <multiple use>
    0x223c0a0: i32 = FrameIndex<0> [ORD=62] [ID=-3]

    0x223c4a0: <multiple use>
  0x2239b70: ch = store 0x223c6a0:1, 0x223c6a0, 0x223c0a0, 0x223c4a0<ST4[%1]> [ORD=62] [ID=-3]


Legalized selection DAG: BB#6 'running_protection3:running_protection3.return'
SelectionDAG has 6 nodes:
  0x223c4a0: i32 = undef [ORD=61] [ID=2]

    0x221bb88: ch = EntryToken [ORD=61] [ID=0]

    0x223bda0: i32 = FrameIndex<1> [ORD=61] [ID=1]

    0x223c4a0: <multiple use>
  0x223c6a0: i32,ch = load 0x221bb88, 0x223bda0, 0x223c4a0<LD4[%2]> [ORD=61] [ID=4]

    0x223c6a0: <multiple use>
    0x223c6a0: <multiple use>
    0x223c0a0: i32 = FrameIndex<0> [ORD=62] [ID=3]

    0x223c4a0: <multiple use>
  0x2239b70: ch = store 0x223c6a0:1, 0x223c6a0, 0x223c0a0, 0x223c4a0<ST4[%1]> [ORD=62] [ID=5]


Optimized legalized selection DAG: BB#6 'running_protection3:running_protection3.return'
SelectionDAG has 6 nodes:
  0x223c4a0: i32 = undef [ORD=61] [ID=2]

    0x221bb88: ch = EntryToken [ORD=61] [ID=0]

    0x223bda0: i32 = FrameIndex<1> [ORD=61] [ID=1]

    0x223c4a0: <multiple use>
  0x223c6a0: i32,ch = load 0x221bb88, 0x223bda0, 0x223c4a0<LD4[%2]> [ORD=61] [ID=4]

    0x223c6a0: <multiple use>
    0x223c6a0: <multiple use>
    0x223c0a0: i32 = FrameIndex<0> [ORD=62] [ID=3]

    0x223c4a0: <multiple use>
  0x2239b70: ch = store 0x223c6a0:1, 0x223c6a0, 0x223c0a0, 0x223c4a0<ST4[%1]> [ORD=62] [ID=5]


===== Instruction selection begins: BB#6 'running_protection3.return'
ISEL: Starting pattern match on root node: 0x2239b70: ch = store 0x223c6a0:1, 0x223c6a0, 0x223c0a0, 0x223c4a0<ST4[%1]> [ORD=62] [ID=5]

  Initial Opcode index to 178
  Morphed node: 0x2239b70: ch = SW 0x223c6a0, 0x223c0a0, 0x223c1a0, 0x223c6a0:1<Mem:ST4[%1]> [ORD=62]

ISEL: Match complete!
=> 0x2239b70: ch = SW 0x223c6a0, 0x223c0a0, 0x223c1a0, 0x223c6a0:1<Mem:ST4[%1]> [ORD=62]

ISEL: Starting pattern match on root node: 0x223c6a0: i32,ch = load 0x221bb88, 0x223bda0, 0x223c4a0<LD4[%2]> [ORD=61] [ID=4]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x223c6a0: i32,ch = LW 0x223bda0, 0x223c1a0, 0x221bb88<Mem:LD4[%2]> [ORD=61]

ISEL: Match complete!
=> 0x223c6a0: i32,ch = LW 0x223bda0, 0x223c1a0, 0x221bb88<Mem:LD4[%2]> [ORD=61]

=> 0x221bb88: ch = EntryToken [ORD=61]

===== Instruction selection ends:
Selected selection DAG: BB#6 'running_protection3:running_protection3.return'
SelectionDAG has 9 nodes:
      0x223c4a0: <multiple use>
      0x2239a70: i32 = TargetFrameIndex<1>

    0x223bda0: i32 = ADDI 0x223c4a0, 0x2239a70 [ORD=61]

    0x223c1a0: <multiple use>
    0x221bb88: ch = EntryToken [ORD=61]

  0x223c6a0: i32,ch = LW 0x223bda0, 0x223c1a0, 0x221bb88<Mem:LD4[%2]> [ORD=61]

  0x223c1a0: i32 = TargetConstant<0>

  0x223c4a0: i32 = Register %t5

    0x223c6a0: <multiple use>
      0x223c4a0: <multiple use>
      0x2239070: i32 = TargetFrameIndex<0>

    0x223c0a0: i32 = ADDI 0x223c4a0, 0x2239070 [ORD=62]

    0x223c1a0: <multiple use>
    0x223c6a0: <multiple use>
  0x2239b70: ch = SW 0x223c6a0, 0x223c0a0, 0x223c1a0, 0x223c6a0:1<Mem:ST4[%1]> [ORD=62]


********** List Scheduling BB#6 'running_protection3.return' **********
SU(0): 0x2239b70: ch = SW 0x223c6a0, 0x223c0a0, 0x223c1a0, 0x223c6a0:1<Mem:ST4[%1]> [ORD=62] [ID=0]

  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
   val SU(2): Latency=1
   val SU(1): Latency=1
   ch  SU(2): Latency=1

SU(1): 0x223c0a0: i32 = ADDI 0x223c4a0, 0x2239070 [ORD=62] [ID=1]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
   val SU(0): Latency=1

SU(2): 0x223c6a0: i32,ch = LW 0x223bda0, 0x223c1a0, 0x221bb88<Mem:LD4[%2]> [ORD=61] [ID=2]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
   val SU(3): Latency=1
  Successors:
   val SU(0): Latency=1
   ch  SU(0): Latency=1

SU(3): 0x223bda0: i32 = ADDI 0x223c4a0, 0x2239a70 [ORD=61] [ID=3]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
   val SU(2): Latency=1


Examining Available:
Height 0: SU(0): 0x2239b70: ch = SW 0x223c6a0, 0x223c0a0, 0x223c1a0, 0x223c6a0:1<Mem:ST4[%1]> [ORD=62] [ID=0]


*** Scheduling [0]: SU(0): 0x2239b70: ch = SW 0x223c6a0, 0x223c0a0, 0x223c1a0, 0x223c6a0:1<Mem:ST4[%1]> [ORD=62] [ID=0]


Examining Available:
Height 1: SU(1): 0x223c0a0: i32 = ADDI 0x223c4a0, 0x2239070 [ORD=62] [ID=1]

Height 1: SU(2): 0x223c6a0: i32,ch = LW 0x223bda0, 0x223c1a0, 0x221bb88<Mem:LD4[%2]> [ORD=61] [ID=2]


*** Scheduling [1]: SU(1): 0x223c0a0: i32 = ADDI 0x223c4a0, 0x2239070 [ORD=62] [ID=1]


Examining Available:
Height 1: SU(2): 0x223c6a0: i32,ch = LW 0x223bda0, 0x223c1a0, 0x221bb88<Mem:LD4[%2]> [ORD=61] [ID=2]


*** Scheduling [2]: SU(2): 0x223c6a0: i32,ch = LW 0x223bda0, 0x223c1a0, 0x221bb88<Mem:LD4[%2]> [ORD=61] [ID=2]


Examining Available:
Height 3: SU(3): 0x223bda0: i32 = ADDI 0x223c4a0, 0x2239a70 [ORD=61] [ID=3]


*** Scheduling [3]: SU(3): 0x223bda0: i32 = ADDI 0x223c4a0, 0x2239a70 [ORD=61] [ID=3]

*** Final schedule ***
SU(3): 0x223bda0: i32 = ADDI 0x223c4a0, 0x2239a70 [ORD=61] [ID=3]

SU(2): 0x223c6a0: i32,ch = LW 0x223bda0, 0x223c1a0, 0x221bb88<Mem:LD4[%2]> [ORD=61] [ID=2]

SU(1): 0x223c0a0: i32 = ADDI 0x223c4a0, 0x2239070 [ORD=62] [ID=1]

SU(0): 0x2239b70: ch = SW 0x223c6a0, 0x223c0a0, 0x223c1a0, 0x223c6a0:1<Mem:ST4[%1]> [ORD=62] [ID=0]


Total amount of phi nodes to update: 0
# Machine code for function running_protection3: SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %running_protection3.entry
16B		%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
48B		SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
64B		%vreg2<def> = FLW %vreg1, 0; mem:LD4[%7](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
80B		%vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
96B		FSW %vreg2<kill>, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
112B		%vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
128B		%vreg5<def> = FLW %vreg4<kill>, 4; mem:LD4[%11] FP32Bit:%vreg5 GR32Bit:%vreg4
144B		%vreg6<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg6
160B		FSW %vreg5<kill>, %vreg6<kill>, 0; mem:ST4[%4] FP32Bit:%vreg5 GR32Bit:%vreg6
176B		%vreg7<def> = FLW %vreg3, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg3
192B		%vreg8<def> = LUI <ga:@var>[TF=2]; GR32Bit:%vreg8
208B		%vreg9<def> = ADDI %zero, <ga:@var>[TF=3]; GR32Bit:%vreg9
224B		%vreg10<def> = ADD %vreg9<kill>, %vreg8<kill>; GR32Bit:%vreg10,%vreg9,%vreg8
240B		%vreg11<def> = FLW %vreg10<kill>, 0; mem:LD4[@var] FP32Bit:%vreg11 GR32Bit:%vreg10
256B		%vreg12<def> = FULE_S %vreg7<kill>, %vreg11<kill>; GR32Bit:%vreg12 FP32Bit:%vreg7,%vreg11
272B		BNE <BB#2>, %vreg12<kill>, %zero; GR32Bit:%vreg12
288B		JAL <BB#1>
	    Successors according to CFG: BB#1(16) BB#2(16)

304B	BB#1: derived from LLVM BB %running_protection3.if.then
	    Predecessors according to CFG: BB#0
320B		%vreg13<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg13
336B		%vreg14<def> = LW %vreg13, 0; mem:LD4[%2] GR32Bit:%vreg14,%vreg13
352B		%vreg15<def> = ADDI %zero, 16; GR32Bit:%vreg15
368B		SW %vreg15<kill>, %vreg14<kill>, 20; mem:ST4[%17] GR32Bit:%vreg15,%vreg14
384B		%vreg16<def> = LW %vreg13, 0; mem:LD4[%2] GR32Bit:%vreg16,%vreg13
400B		%vreg17<def> = ADDI %zero, 4; GR32Bit:%vreg17
416B		SW %vreg17<kill>, %vreg16<kill>, 16; mem:ST4[%19] GR32Bit:%vreg17,%vreg16
	    Successors according to CFG: BB#2

432B	BB#2: derived from LLVM BB %running_protection3.if.end
	    Predecessors according to CFG: BB#0 BB#1
448B		%vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
464B		%vreg19<def> = LW %vreg18<kill>, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
480B		%vreg20<def> = LW %vreg19<kill>, 8; mem:LD4[%21] GR32Bit:%vreg20,%vreg19
496B		%vreg21<def> = FCVT_S_W_RDY %vreg20<kill>; FP32Bit:%vreg21 GR32Bit:%vreg20
512B		%vreg22<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg22
528B		%vreg23<def> = FLW %vreg22<kill>, 0; mem:LD4[%4] FP32Bit:%vreg23 GR32Bit:%vreg22
544B		%vreg24<def> = FADD_S_RDY %vreg23, %vreg23; FP32Bit:%vreg24,%vreg23,%vreg23
560B		%vreg25<def> = ADDI %zero, 1135542272; GR32Bit:%vreg25
576B		%vreg27<def> = COPY %vreg25; FP32Bit:%vreg27 GR32Bit:%vreg25
592B		%vreg26<def> = FADD_S_RDY %vreg27<kill>, %vreg24<kill>; FP32Bit:%vreg26,%vreg27,%vreg24
608B		%vreg28<def> = FULE_S %vreg21<kill>, %vreg26<kill>; GR32Bit:%vreg28 FP32Bit:%vreg21,%vreg26
624B		BNE <BB#4>, %vreg28<kill>, %zero; GR32Bit:%vreg28
640B		JAL <BB#3>
	    Successors according to CFG: BB#3(16) BB#4(16)

656B	BB#3: derived from LLVM BB %running_protection3.if.then7
	    Predecessors according to CFG: BB#2
672B		%vreg29<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg29
688B		%vreg30<def> = LW %vreg29, 0; mem:LD4[%2] GR32Bit:%vreg30,%vreg29
704B		%vreg31<def> = ADDI %zero, 16; GR32Bit:%vreg31
720B		%vreg32<def> = ADDI %zero, 32; GR32Bit:%vreg32
736B		SW %vreg32<kill>, %vreg30<kill>, 16; mem:ST4[%29] GR32Bit:%vreg32,%vreg30
752B		%vreg33<def> = LW %vreg29, 0; mem:LD4[%2] GR32Bit:%vreg33,%vreg29
768B		SW %vreg31<kill>, %vreg33<kill>, 20; mem:ST4[%31] GR32Bit:%vreg31,%vreg33
	    Successors according to CFG: BB#4

784B	BB#4: derived from LLVM BB %running_protection3.if.end10
	    Predecessors according to CFG: BB#2 BB#3
800B		%vreg34<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg34
816B		%vreg35<def> = LW %vreg34<kill>, 0; mem:LD4[%2] GR32Bit:%vreg35,%vreg34
832B		%vreg36<def> = LW %vreg35<kill>, 12; mem:LD4[%33] GR32Bit:%vreg36,%vreg35
848B		%vreg37<def> = ADDI %zero, 117; GR32Bit:%vreg37
864B		BLT <BB#6>, %vreg36<kill>, %vreg37<kill>; GR32Bit:%vreg36,%vreg37
880B		JAL <BB#5>
	    Successors according to CFG: BB#5(16) BB#6(16)

896B	BB#5: derived from LLVM BB %running_protection3.if.then14
	    Predecessors according to CFG: BB#4
912B		%vreg38<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg38
928B		%vreg39<def> = LW %vreg38, 0; mem:LD4[%2] GR32Bit:%vreg39,%vreg38
944B		%vreg40<def> = ADDI %zero, 16; GR32Bit:%vreg40
960B		SW %vreg40, %vreg39<kill>, 20; mem:ST4[%37] GR32Bit:%vreg40,%vreg39
976B		%vreg41<def> = LW %vreg38, 0; mem:LD4[%2] GR32Bit:%vreg41,%vreg38
992B		SW %vreg40, %vreg41<kill>, 16; mem:ST4[%39] GR32Bit:%vreg40,%vreg41
	    Successors according to CFG: BB#6

1008B	BB#6: derived from LLVM BB %running_protection3.return
	    Predecessors according to CFG: BB#4 BB#5
1024B		%vreg42<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg42
1040B		%vreg43<def> = LW %vreg42<kill>, 0; mem:LD4[%2] GR32Bit:%vreg43,%vreg42
1056B		%vreg44<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg44
1072B		SW %vreg43<kill>, %vreg44<kill>, 0; mem:ST4[%1] GR32Bit:%vreg43,%vreg44

# End machine code for function running_protection3.

********** Stack Coloring **********
********** Function: running_protection3
Found 0 markers and 4 slots
Slot structure:
Slot #0 - 4 bytes.
Slot #1 - 4 bytes.
Slot #2 - 4 bytes.
Slot #3 - 4 bytes.
Total Stack size: 16 bytes

Will not try to merge slots.
Removed 0 markers.
******** Pre-regalloc Machine LICM: running_protection3 ********
******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: running_protection3
********** PROCESS IMPLICIT DEFS **********
********** Function: running_protection3
********** REWRITING TWO-ADDR INSTRS **********
********** Function: running_protection3
# Machine code for function running_protection3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %running_protection3.entry
16B		%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
48B		SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
64B		%vreg2<def> = FLW %vreg1<kill>, 0; mem:LD4[%7](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
80B		%vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
96B		FSW %vreg2<kill>, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
112B		%vreg4<def> = LW %vreg0<kill>, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
128B		%vreg5<def> = FLW %vreg4<kill>, 4; mem:LD4[%11] FP32Bit:%vreg5 GR32Bit:%vreg4
144B		%vreg6<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg6
160B		FSW %vreg5<kill>, %vreg6<kill>, 0; mem:ST4[%4] FP32Bit:%vreg5 GR32Bit:%vreg6
176B		%vreg7<def> = FLW %vreg3<kill>, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg3
192B		%vreg8<def> = LUI <ga:@var>[TF=2]; GR32Bit:%vreg8
208B		%vreg9<def> = ADDI %zero, <ga:@var>[TF=3]; GR32Bit:%vreg9
224B		%vreg10<def> = ADD %vreg9<kill>, %vreg8<kill>; GR32Bit:%vreg10,%vreg9,%vreg8
240B		%vreg11<def> = FLW %vreg10<kill>, 0; mem:LD4[@var] FP32Bit:%vreg11 GR32Bit:%vreg10
256B		%vreg12<def> = FULE_S %vreg7<kill>, %vreg11<kill>; GR32Bit:%vreg12 FP32Bit:%vreg7,%vreg11
272B		BNE <BB#2>, %vreg12<kill>, %zero; GR32Bit:%vreg12
288B		JAL <BB#1>
	    Successors according to CFG: BB#1(16) BB#2(16)

304B	BB#1: derived from LLVM BB %running_protection3.if.then
	    Predecessors according to CFG: BB#0
320B		%vreg13<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg13
336B		%vreg14<def> = LW %vreg13, 0; mem:LD4[%2] GR32Bit:%vreg14,%vreg13
352B		%vreg15<def> = ADDI %zero, 16; GR32Bit:%vreg15
368B		SW %vreg15<kill>, %vreg14<kill>, 20; mem:ST4[%17] GR32Bit:%vreg15,%vreg14
384B		%vreg16<def> = LW %vreg13<kill>, 0; mem:LD4[%2] GR32Bit:%vreg16,%vreg13
400B		%vreg17<def> = ADDI %zero, 4; GR32Bit:%vreg17
416B		SW %vreg17<kill>, %vreg16<kill>, 16; mem:ST4[%19] GR32Bit:%vreg17,%vreg16
	    Successors according to CFG: BB#2

432B	BB#2: derived from LLVM BB %running_protection3.if.end
	    Predecessors according to CFG: BB#0 BB#1
448B		%vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
464B		%vreg19<def> = LW %vreg18<kill>, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
480B		%vreg20<def> = LW %vreg19<kill>, 8; mem:LD4[%21] GR32Bit:%vreg20,%vreg19
496B		%vreg21<def> = FCVT_S_W_RDY %vreg20<kill>; FP32Bit:%vreg21 GR32Bit:%vreg20
512B		%vreg22<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg22
528B		%vreg23<def> = FLW %vreg22<kill>, 0; mem:LD4[%4] FP32Bit:%vreg23 GR32Bit:%vreg22
544B		%vreg24<def> = FADD_S_RDY %vreg23<kill>, %vreg23; FP32Bit:%vreg24,%vreg23,%vreg23
560B		%vreg25<def> = ADDI %zero, 1135542272; GR32Bit:%vreg25
576B		%vreg27<def> = COPY %vreg25<kill>; FP32Bit:%vreg27 GR32Bit:%vreg25
592B		%vreg26<def> = FADD_S_RDY %vreg27<kill>, %vreg24<kill>; FP32Bit:%vreg26,%vreg27,%vreg24
608B		%vreg28<def> = FULE_S %vreg21<kill>, %vreg26<kill>; GR32Bit:%vreg28 FP32Bit:%vreg21,%vreg26
624B		BNE <BB#4>, %vreg28<kill>, %zero; GR32Bit:%vreg28
640B		JAL <BB#3>
	    Successors according to CFG: BB#3(16) BB#4(16)

656B	BB#3: derived from LLVM BB %running_protection3.if.then7
	    Predecessors according to CFG: BB#2
672B		%vreg29<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg29
688B		%vreg30<def> = LW %vreg29, 0; mem:LD4[%2] GR32Bit:%vreg30,%vreg29
704B		%vreg31<def> = ADDI %zero, 16; GR32Bit:%vreg31
720B		%vreg32<def> = ADDI %zero, 32; GR32Bit:%vreg32
736B		SW %vreg32<kill>, %vreg30<kill>, 16; mem:ST4[%29] GR32Bit:%vreg32,%vreg30
752B		%vreg33<def> = LW %vreg29<kill>, 0; mem:LD4[%2] GR32Bit:%vreg33,%vreg29
768B		SW %vreg31<kill>, %vreg33<kill>, 20; mem:ST4[%31] GR32Bit:%vreg31,%vreg33
	    Successors according to CFG: BB#4

784B	BB#4: derived from LLVM BB %running_protection3.if.end10
	    Predecessors according to CFG: BB#2 BB#3
800B		%vreg34<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg34
816B		%vreg35<def> = LW %vreg34<kill>, 0; mem:LD4[%2] GR32Bit:%vreg35,%vreg34
832B		%vreg36<def> = LW %vreg35<kill>, 12; mem:LD4[%33] GR32Bit:%vreg36,%vreg35
848B		%vreg37<def> = ADDI %zero, 117; GR32Bit:%vreg37
864B		BLT <BB#6>, %vreg36<kill>, %vreg37<kill>; GR32Bit:%vreg36,%vreg37
880B		JAL <BB#5>
	    Successors according to CFG: BB#5(16) BB#6(16)

896B	BB#5: derived from LLVM BB %running_protection3.if.then14
	    Predecessors according to CFG: BB#4
912B		%vreg38<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg38
928B		%vreg39<def> = LW %vreg38, 0; mem:LD4[%2] GR32Bit:%vreg39,%vreg38
944B		%vreg40<def> = ADDI %zero, 16; GR32Bit:%vreg40
960B		SW %vreg40, %vreg39<kill>, 20; mem:ST4[%37] GR32Bit:%vreg40,%vreg39
976B		%vreg41<def> = LW %vreg38<kill>, 0; mem:LD4[%2] GR32Bit:%vreg41,%vreg38
992B		SW %vreg40<kill>, %vreg41<kill>, 16; mem:ST4[%39] GR32Bit:%vreg40,%vreg41
	    Successors according to CFG: BB#6

1008B	BB#6: derived from LLVM BB %running_protection3.return
	    Predecessors according to CFG: BB#4 BB#5
1024B		%vreg42<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg42
1040B		%vreg43<def> = LW %vreg42<kill>, 0; mem:LD4[%2] GR32Bit:%vreg43,%vreg42
1056B		%vreg44<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg44
1072B		SW %vreg43<kill>, %vreg44<kill>, 0; mem:ST4[%1] GR32Bit:%vreg43,%vreg44

# End machine code for function running_protection3.

Computing live-in reg-units in ABI blocks.
Created 0 new intervals.
********** INTERVALS **********
%vreg0 = [16r,112r:0)  0@16r
%vreg1 = [32r,64r:0)  0@32r
%vreg2 = [64r,96r:0)  0@64r
%vreg3 = [80r,176r:0)  0@80r
%vreg4 = [112r,128r:0)  0@112r
%vreg5 = [128r,160r:0)  0@128r
%vreg6 = [144r,160r:0)  0@144r
%vreg7 = [176r,256r:0)  0@176r
%vreg8 = [192r,224r:0)  0@192r
%vreg9 = [208r,224r:0)  0@208r
%vreg10 = [224r,240r:0)  0@224r
%vreg11 = [240r,256r:0)  0@240r
%vreg12 = [256r,272r:0)  0@256r
%vreg13 = [320r,384r:0)  0@320r
%vreg14 = [336r,368r:0)  0@336r
%vreg15 = [352r,368r:0)  0@352r
%vreg16 = [384r,416r:0)  0@384r
%vreg17 = [400r,416r:0)  0@400r
%vreg18 = [448r,464r:0)  0@448r
%vreg19 = [464r,480r:0)  0@464r
%vreg20 = [480r,496r:0)  0@480r
%vreg21 = [496r,608r:0)  0@496r
%vreg22 = [512r,528r:0)  0@512r
%vreg23 = [528r,544r:0)  0@528r
%vreg24 = [544r,592r:0)  0@544r
%vreg25 = [560r,576r:0)  0@560r
%vreg26 = [592r,608r:0)  0@592r
%vreg27 = [576r,592r:0)  0@576r
%vreg28 = [608r,624r:0)  0@608r
%vreg29 = [672r,752r:0)  0@672r
%vreg30 = [688r,736r:0)  0@688r
%vreg31 = [704r,768r:0)  0@704r
%vreg32 = [720r,736r:0)  0@720r
%vreg33 = [752r,768r:0)  0@752r
%vreg34 = [800r,816r:0)  0@800r
%vreg35 = [816r,832r:0)  0@816r
%vreg36 = [832r,864r:0)  0@832r
%vreg37 = [848r,864r:0)  0@848r
%vreg38 = [912r,976r:0)  0@912r
%vreg39 = [928r,960r:0)  0@928r
%vreg40 = [944r,992r:0)  0@944r
%vreg41 = [976r,992r:0)  0@976r
%vreg42 = [1024r,1040r:0)  0@1024r
%vreg43 = [1040r,1072r:0)  0@1040r
%vreg44 = [1056r,1072r:0)  0@1056r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function running_protection3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %running_protection3.entry
16B		%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
48B		SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
64B		%vreg2<def> = FLW %vreg1, 0; mem:LD4[%7](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
80B		%vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
96B		FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
112B		%vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
128B		%vreg5<def> = FLW %vreg4, 4; mem:LD4[%11] FP32Bit:%vreg5 GR32Bit:%vreg4
144B		%vreg6<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg6
160B		FSW %vreg5, %vreg6, 0; mem:ST4[%4] FP32Bit:%vreg5 GR32Bit:%vreg6
176B		%vreg7<def> = FLW %vreg3, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg3
192B		%vreg8<def> = LUI <ga:@var>[TF=2]; GR32Bit:%vreg8
208B		%vreg9<def> = ADDI %zero, <ga:@var>[TF=3]; GR32Bit:%vreg9
224B		%vreg10<def> = ADD %vreg9, %vreg8; GR32Bit:%vreg10,%vreg9,%vreg8
240B		%vreg11<def> = FLW %vreg10, 0; mem:LD4[@var] FP32Bit:%vreg11 GR32Bit:%vreg10
256B		%vreg12<def> = FULE_S %vreg7, %vreg11; GR32Bit:%vreg12 FP32Bit:%vreg7,%vreg11
272B		BNE <BB#2>, %vreg12, %zero; GR32Bit:%vreg12
288B		JAL <BB#1>
	    Successors according to CFG: BB#1(16) BB#2(16)

304B	BB#1: derived from LLVM BB %running_protection3.if.then
	    Predecessors according to CFG: BB#0
320B		%vreg13<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg13
336B		%vreg14<def> = LW %vreg13, 0; mem:LD4[%2] GR32Bit:%vreg14,%vreg13
352B		%vreg15<def> = ADDI %zero, 16; GR32Bit:%vreg15
368B		SW %vreg15, %vreg14, 20; mem:ST4[%17] GR32Bit:%vreg15,%vreg14
384B		%vreg16<def> = LW %vreg13, 0; mem:LD4[%2] GR32Bit:%vreg16,%vreg13
400B		%vreg17<def> = ADDI %zero, 4; GR32Bit:%vreg17
416B		SW %vreg17, %vreg16, 16; mem:ST4[%19] GR32Bit:%vreg17,%vreg16
	    Successors according to CFG: BB#2

432B	BB#2: derived from LLVM BB %running_protection3.if.end
	    Predecessors according to CFG: BB#0 BB#1
448B		%vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
464B		%vreg19<def> = LW %vreg18, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
480B		%vreg20<def> = LW %vreg19, 8; mem:LD4[%21] GR32Bit:%vreg20,%vreg19
496B		%vreg21<def> = FCVT_S_W_RDY %vreg20; FP32Bit:%vreg21 GR32Bit:%vreg20
512B		%vreg22<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg22
528B		%vreg23<def> = FLW %vreg22, 0; mem:LD4[%4] FP32Bit:%vreg23 GR32Bit:%vreg22
544B		%vreg24<def> = FADD_S_RDY %vreg23, %vreg23; FP32Bit:%vreg24,%vreg23,%vreg23
560B		%vreg25<def> = ADDI %zero, 1135542272; GR32Bit:%vreg25
576B		%vreg27<def> = COPY %vreg25; FP32Bit:%vreg27 GR32Bit:%vreg25
592B		%vreg26<def> = FADD_S_RDY %vreg27, %vreg24; FP32Bit:%vreg26,%vreg27,%vreg24
608B		%vreg28<def> = FULE_S %vreg21, %vreg26; GR32Bit:%vreg28 FP32Bit:%vreg21,%vreg26
624B		BNE <BB#4>, %vreg28, %zero; GR32Bit:%vreg28
640B		JAL <BB#3>
	    Successors according to CFG: BB#3(16) BB#4(16)

656B	BB#3: derived from LLVM BB %running_protection3.if.then7
	    Predecessors according to CFG: BB#2
672B		%vreg29<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg29
688B		%vreg30<def> = LW %vreg29, 0; mem:LD4[%2] GR32Bit:%vreg30,%vreg29
704B		%vreg31<def> = ADDI %zero, 16; GR32Bit:%vreg31
720B		%vreg32<def> = ADDI %zero, 32; GR32Bit:%vreg32
736B		SW %vreg32, %vreg30, 16; mem:ST4[%29] GR32Bit:%vreg32,%vreg30
752B		%vreg33<def> = LW %vreg29, 0; mem:LD4[%2] GR32Bit:%vreg33,%vreg29
768B		SW %vreg31, %vreg33, 20; mem:ST4[%31] GR32Bit:%vreg31,%vreg33
	    Successors according to CFG: BB#4

784B	BB#4: derived from LLVM BB %running_protection3.if.end10
	    Predecessors according to CFG: BB#2 BB#3
800B		%vreg34<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg34
816B		%vreg35<def> = LW %vreg34, 0; mem:LD4[%2] GR32Bit:%vreg35,%vreg34
832B		%vreg36<def> = LW %vreg35, 12; mem:LD4[%33] GR32Bit:%vreg36,%vreg35
848B		%vreg37<def> = ADDI %zero, 117; GR32Bit:%vreg37
864B		BLT <BB#6>, %vreg36, %vreg37; GR32Bit:%vreg36,%vreg37
880B		JAL <BB#5>
	    Successors according to CFG: BB#5(16) BB#6(16)

896B	BB#5: derived from LLVM BB %running_protection3.if.then14
	    Predecessors according to CFG: BB#4
912B		%vreg38<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg38
928B		%vreg39<def> = LW %vreg38, 0; mem:LD4[%2] GR32Bit:%vreg39,%vreg38
944B		%vreg40<def> = ADDI %zero, 16; GR32Bit:%vreg40
960B		SW %vreg40, %vreg39, 20; mem:ST4[%37] GR32Bit:%vreg40,%vreg39
976B		%vreg41<def> = LW %vreg38, 0; mem:LD4[%2] GR32Bit:%vreg41,%vreg38
992B		SW %vreg40, %vreg41, 16; mem:ST4[%39] GR32Bit:%vreg40,%vreg41
	    Successors according to CFG: BB#6

1008B	BB#6: derived from LLVM BB %running_protection3.return
	    Predecessors according to CFG: BB#4 BB#5
1024B		%vreg42<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg42
1040B		%vreg43<def> = LW %vreg42, 0; mem:LD4[%2] GR32Bit:%vreg43,%vreg42
1056B		%vreg44<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg44
1072B		SW %vreg43, %vreg44, 0; mem:ST4[%1] GR32Bit:%vreg43,%vreg44

# End machine code for function running_protection3.

********** SIMPLE REGISTER COALESCING **********
********** Function: running_protection3
********** JOINING INTERVALS ***********
running_protection3.if.end:
running_protection3.if.end10:
running_protection3.entry:
running_protection3.if.then:
running_protection3.if.then7:
running_protection3.if.then14:
running_protection3.return:
576B	%vreg27<def> = COPY %vreg25; FP32Bit:%vreg27 GR32Bit:%vreg25
	Not coalescable.
Trying to inflate 0 regs.
********** INTERVALS **********
%vreg0 = [16r,112r:0)  0@16r
%vreg1 = [32r,64r:0)  0@32r
%vreg2 = [64r,96r:0)  0@64r
%vreg3 = [80r,176r:0)  0@80r
%vreg4 = [112r,128r:0)  0@112r
%vreg5 = [128r,160r:0)  0@128r
%vreg6 = [144r,160r:0)  0@144r
%vreg7 = [176r,256r:0)  0@176r
%vreg8 = [192r,224r:0)  0@192r
%vreg9 = [208r,224r:0)  0@208r
%vreg10 = [224r,240r:0)  0@224r
%vreg11 = [240r,256r:0)  0@240r
%vreg12 = [256r,272r:0)  0@256r
%vreg13 = [320r,384r:0)  0@320r
%vreg14 = [336r,368r:0)  0@336r
%vreg15 = [352r,368r:0)  0@352r
%vreg16 = [384r,416r:0)  0@384r
%vreg17 = [400r,416r:0)  0@400r
%vreg18 = [448r,464r:0)  0@448r
%vreg19 = [464r,480r:0)  0@464r
%vreg20 = [480r,496r:0)  0@480r
%vreg21 = [496r,608r:0)  0@496r
%vreg22 = [512r,528r:0)  0@512r
%vreg23 = [528r,544r:0)  0@528r
%vreg24 = [544r,592r:0)  0@544r
%vreg25 = [560r,576r:0)  0@560r
%vreg26 = [592r,608r:0)  0@592r
%vreg27 = [576r,592r:0)  0@576r
%vreg28 = [608r,624r:0)  0@608r
%vreg29 = [672r,752r:0)  0@672r
%vreg30 = [688r,736r:0)  0@688r
%vreg31 = [704r,768r:0)  0@704r
%vreg32 = [720r,736r:0)  0@720r
%vreg33 = [752r,768r:0)  0@752r
%vreg34 = [800r,816r:0)  0@800r
%vreg35 = [816r,832r:0)  0@816r
%vreg36 = [832r,864r:0)  0@832r
%vreg37 = [848r,864r:0)  0@848r
%vreg38 = [912r,976r:0)  0@912r
%vreg39 = [928r,960r:0)  0@928r
%vreg40 = [944r,992r:0)  0@944r
%vreg41 = [976r,992r:0)  0@976r
%vreg42 = [1024r,1040r:0)  0@1024r
%vreg43 = [1040r,1072r:0)  0@1040r
%vreg44 = [1056r,1072r:0)  0@1056r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function running_protection3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %running_protection3.entry
16B		%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
48B		SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
64B		%vreg2<def> = FLW %vreg1, 0; mem:LD4[%7](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
80B		%vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
96B		FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
112B		%vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
128B		%vreg5<def> = FLW %vreg4, 4; mem:LD4[%11] FP32Bit:%vreg5 GR32Bit:%vreg4
144B		%vreg6<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg6
160B		FSW %vreg5, %vreg6, 0; mem:ST4[%4] FP32Bit:%vreg5 GR32Bit:%vreg6
176B		%vreg7<def> = FLW %vreg3, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg3
192B		%vreg8<def> = LUI <ga:@var>[TF=2]; GR32Bit:%vreg8
208B		%vreg9<def> = ADDI %zero, <ga:@var>[TF=3]; GR32Bit:%vreg9
224B		%vreg10<def> = ADD %vreg9, %vreg8; GR32Bit:%vreg10,%vreg9,%vreg8
240B		%vreg11<def> = FLW %vreg10, 0; mem:LD4[@var] FP32Bit:%vreg11 GR32Bit:%vreg10
256B		%vreg12<def> = FULE_S %vreg7, %vreg11; GR32Bit:%vreg12 FP32Bit:%vreg7,%vreg11
272B		BNE <BB#2>, %vreg12, %zero; GR32Bit:%vreg12
288B		JAL <BB#1>
	    Successors according to CFG: BB#1(16) BB#2(16)

304B	BB#1: derived from LLVM BB %running_protection3.if.then
	    Predecessors according to CFG: BB#0
320B		%vreg13<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg13
336B		%vreg14<def> = LW %vreg13, 0; mem:LD4[%2] GR32Bit:%vreg14,%vreg13
352B		%vreg15<def> = ADDI %zero, 16; GR32Bit:%vreg15
368B		SW %vreg15, %vreg14, 20; mem:ST4[%17] GR32Bit:%vreg15,%vreg14
384B		%vreg16<def> = LW %vreg13, 0; mem:LD4[%2] GR32Bit:%vreg16,%vreg13
400B		%vreg17<def> = ADDI %zero, 4; GR32Bit:%vreg17
416B		SW %vreg17, %vreg16, 16; mem:ST4[%19] GR32Bit:%vreg17,%vreg16
	    Successors according to CFG: BB#2

432B	BB#2: derived from LLVM BB %running_protection3.if.end
	    Predecessors according to CFG: BB#0 BB#1
448B		%vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
464B		%vreg19<def> = LW %vreg18, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
480B		%vreg20<def> = LW %vreg19, 8; mem:LD4[%21] GR32Bit:%vreg20,%vreg19
496B		%vreg21<def> = FCVT_S_W_RDY %vreg20; FP32Bit:%vreg21 GR32Bit:%vreg20
512B		%vreg22<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg22
528B		%vreg23<def> = FLW %vreg22, 0; mem:LD4[%4] FP32Bit:%vreg23 GR32Bit:%vreg22
544B		%vreg24<def> = FADD_S_RDY %vreg23, %vreg23; FP32Bit:%vreg24,%vreg23,%vreg23
560B		%vreg25<def> = ADDI %zero, 1135542272; GR32Bit:%vreg25
576B		%vreg27<def> = COPY %vreg25; FP32Bit:%vreg27 GR32Bit:%vreg25
592B		%vreg26<def> = FADD_S_RDY %vreg27, %vreg24; FP32Bit:%vreg26,%vreg27,%vreg24
608B		%vreg28<def> = FULE_S %vreg21, %vreg26; GR32Bit:%vreg28 FP32Bit:%vreg21,%vreg26
624B		BNE <BB#4>, %vreg28, %zero; GR32Bit:%vreg28
640B		JAL <BB#3>
	    Successors according to CFG: BB#3(16) BB#4(16)

656B	BB#3: derived from LLVM BB %running_protection3.if.then7
	    Predecessors according to CFG: BB#2
672B		%vreg29<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg29
688B		%vreg30<def> = LW %vreg29, 0; mem:LD4[%2] GR32Bit:%vreg30,%vreg29
704B		%vreg31<def> = ADDI %zero, 16; GR32Bit:%vreg31
720B		%vreg32<def> = ADDI %zero, 32; GR32Bit:%vreg32
736B		SW %vreg32, %vreg30, 16; mem:ST4[%29] GR32Bit:%vreg32,%vreg30
752B		%vreg33<def> = LW %vreg29, 0; mem:LD4[%2] GR32Bit:%vreg33,%vreg29
768B		SW %vreg31, %vreg33, 20; mem:ST4[%31] GR32Bit:%vreg31,%vreg33
	    Successors according to CFG: BB#4

784B	BB#4: derived from LLVM BB %running_protection3.if.end10
	    Predecessors according to CFG: BB#2 BB#3
800B		%vreg34<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg34
816B		%vreg35<def> = LW %vreg34, 0; mem:LD4[%2] GR32Bit:%vreg35,%vreg34
832B		%vreg36<def> = LW %vreg35, 12; mem:LD4[%33] GR32Bit:%vreg36,%vreg35
848B		%vreg37<def> = ADDI %zero, 117; GR32Bit:%vreg37
864B		BLT <BB#6>, %vreg36, %vreg37; GR32Bit:%vreg36,%vreg37
880B		JAL <BB#5>
	    Successors according to CFG: BB#5(16) BB#6(16)

896B	BB#5: derived from LLVM BB %running_protection3.if.then14
	    Predecessors according to CFG: BB#4
912B		%vreg38<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg38
928B		%vreg39<def> = LW %vreg38, 0; mem:LD4[%2] GR32Bit:%vreg39,%vreg38
944B		%vreg40<def> = ADDI %zero, 16; GR32Bit:%vreg40
960B		SW %vreg40, %vreg39, 20; mem:ST4[%37] GR32Bit:%vreg40,%vreg39
976B		%vreg41<def> = LW %vreg38, 0; mem:LD4[%2] GR32Bit:%vreg41,%vreg38
992B		SW %vreg40, %vreg41, 16; mem:ST4[%39] GR32Bit:%vreg40,%vreg41
	    Successors according to CFG: BB#6

1008B	BB#6: derived from LLVM BB %running_protection3.return
	    Predecessors according to CFG: BB#4 BB#5
1024B		%vreg42<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg42
1040B		%vreg43<def> = LW %vreg42, 0; mem:LD4[%2] GR32Bit:%vreg43,%vreg42
1056B		%vreg44<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg44
1072B		SW %vreg43, %vreg44, 0; mem:ST4[%1] GR32Bit:%vreg43,%vreg44

# End machine code for function running_protection3.

Before MISched:
# Machine code for function running_protection3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %running_protection3.entry
	%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
	%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
	SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
	%vreg2<def> = FLW %vreg1, 0; mem:LD4[%7](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
	%vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
	FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
	%vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
	%vreg5<def> = FLW %vreg4, 4; mem:LD4[%11] FP32Bit:%vreg5 GR32Bit:%vreg4
	%vreg6<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg6
	FSW %vreg5, %vreg6, 0; mem:ST4[%4] FP32Bit:%vreg5 GR32Bit:%vreg6
	%vreg7<def> = FLW %vreg3, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg3
	%vreg8<def> = LUI <ga:@var>[TF=2]; GR32Bit:%vreg8
	%vreg9<def> = ADDI %zero, <ga:@var>[TF=3]; GR32Bit:%vreg9
	%vreg10<def> = ADD %vreg9, %vreg8; GR32Bit:%vreg10,%vreg9,%vreg8
	%vreg11<def> = FLW %vreg10, 0; mem:LD4[@var] FP32Bit:%vreg11 GR32Bit:%vreg10
	%vreg12<def> = FULE_S %vreg7, %vreg11; GR32Bit:%vreg12 FP32Bit:%vreg7,%vreg11
	BNE <BB#2>, %vreg12, %zero; GR32Bit:%vreg12
	JAL <BB#1>
    Successors according to CFG: BB#1(16) BB#2(16)

BB#1: derived from LLVM BB %running_protection3.if.then
    Predecessors according to CFG: BB#0
	%vreg13<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg13
	%vreg14<def> = LW %vreg13, 0; mem:LD4[%2] GR32Bit:%vreg14,%vreg13
	%vreg15<def> = ADDI %zero, 16; GR32Bit:%vreg15
	SW %vreg15, %vreg14, 20; mem:ST4[%17] GR32Bit:%vreg15,%vreg14
	%vreg16<def> = LW %vreg13, 0; mem:LD4[%2] GR32Bit:%vreg16,%vreg13
	%vreg17<def> = ADDI %zero, 4; GR32Bit:%vreg17
	SW %vreg17, %vreg16, 16; mem:ST4[%19] GR32Bit:%vreg17,%vreg16
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %running_protection3.if.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
	%vreg19<def> = LW %vreg18, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
	%vreg20<def> = LW %vreg19, 8; mem:LD4[%21] GR32Bit:%vreg20,%vreg19
	%vreg21<def> = FCVT_S_W_RDY %vreg20; FP32Bit:%vreg21 GR32Bit:%vreg20
	%vreg22<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg22
	%vreg23<def> = FLW %vreg22, 0; mem:LD4[%4] FP32Bit:%vreg23 GR32Bit:%vreg22
	%vreg24<def> = FADD_S_RDY %vreg23, %vreg23; FP32Bit:%vreg24,%vreg23,%vreg23
	%vreg25<def> = ADDI %zero, 1135542272; GR32Bit:%vreg25
	%vreg27<def> = COPY %vreg25; FP32Bit:%vreg27 GR32Bit:%vreg25
	%vreg26<def> = FADD_S_RDY %vreg27, %vreg24; FP32Bit:%vreg26,%vreg27,%vreg24
	%vreg28<def> = FULE_S %vreg21, %vreg26; GR32Bit:%vreg28 FP32Bit:%vreg21,%vreg26
	BNE <BB#4>, %vreg28, %zero; GR32Bit:%vreg28
	JAL <BB#3>
    Successors according to CFG: BB#3(16) BB#4(16)

BB#3: derived from LLVM BB %running_protection3.if.then7
    Predecessors according to CFG: BB#2
	%vreg29<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg29
	%vreg30<def> = LW %vreg29, 0; mem:LD4[%2] GR32Bit:%vreg30,%vreg29
	%vreg31<def> = ADDI %zero, 16; GR32Bit:%vreg31
	%vreg32<def> = ADDI %zero, 32; GR32Bit:%vreg32
	SW %vreg32, %vreg30, 16; mem:ST4[%29] GR32Bit:%vreg32,%vreg30
	%vreg33<def> = LW %vreg29, 0; mem:LD4[%2] GR32Bit:%vreg33,%vreg29
	SW %vreg31, %vreg33, 20; mem:ST4[%31] GR32Bit:%vreg31,%vreg33
    Successors according to CFG: BB#4

BB#4: derived from LLVM BB %running_protection3.if.end10
    Predecessors according to CFG: BB#2 BB#3
	%vreg34<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg34
	%vreg35<def> = LW %vreg34, 0; mem:LD4[%2] GR32Bit:%vreg35,%vreg34
	%vreg36<def> = LW %vreg35, 12; mem:LD4[%33] GR32Bit:%vreg36,%vreg35
	%vreg37<def> = ADDI %zero, 117; GR32Bit:%vreg37
	BLT <BB#6>, %vreg36, %vreg37; GR32Bit:%vreg36,%vreg37
	JAL <BB#5>
    Successors according to CFG: BB#5(16) BB#6(16)

BB#5: derived from LLVM BB %running_protection3.if.then14
    Predecessors according to CFG: BB#4
	%vreg38<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg38
	%vreg39<def> = LW %vreg38, 0; mem:LD4[%2] GR32Bit:%vreg39,%vreg38
	%vreg40<def> = ADDI %zero, 16; GR32Bit:%vreg40
	SW %vreg40, %vreg39, 20; mem:ST4[%37] GR32Bit:%vreg40,%vreg39
	%vreg41<def> = LW %vreg38, 0; mem:LD4[%2] GR32Bit:%vreg41,%vreg38
	SW %vreg40, %vreg41, 16; mem:ST4[%39] GR32Bit:%vreg40,%vreg41
    Successors according to CFG: BB#6

BB#6: derived from LLVM BB %running_protection3.return
    Predecessors according to CFG: BB#4 BB#5
	%vreg42<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg42
	%vreg43<def> = LW %vreg42, 0; mem:LD4[%2] GR32Bit:%vreg43,%vreg42
	%vreg44<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg44
	SW %vreg43, %vreg44, 0; mem:ST4[%1] GR32Bit:%vreg43,%vreg44

# End machine code for function running_protection3.


-------------
Starting new basic block BB#0
********** MI Scheduling **********
running_protection3:BB#0 running_protection3.entry
  From: JAL <BB#1>
    To: JAL <BB#1>
 Remaining: 17
Max Pressure: Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 0
Excess PSets: 
0 subtrees:
*** Final schedule for BB#0 ***

Partitioning instructions of the region into multiple CEs

*** Renumbered SlotIndexes 300-316 ***

*** Renumbered SlotIndexes 312-344 ***

*** Renumbered SlotIndexes 324-364 ***

*** Renumbered SlotIndexes 336-392 ***

*** Renumbered SlotIndexes 348-412 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
********** MI Scheduling **********
running_protection3:BB#0 running_protection3.entry
  From: %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
    To: BNE <BB#2>, %vreg12, %zero; GR32Bit:%vreg12
 Remaining: 0
Max Pressure: FP32Bit=2
GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 2
GR32BitLimit 32 Actual 2
Excess PSets: 
4 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 1
  SU(4) in tree 1
  SU(5) in tree 1
  SU(6) in tree 2
  SU(7) in tree 2
  SU(8) in tree 2
  SU(9) in tree 2
  SU(10) in tree 3
  SU(11) in tree 3
  SU(12) in tree 3
  SU(13) in tree 3
  SU(14) in tree 3
  SU(15) in tree 3
SU(0):   %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
   val SU(6): Latency=5 Reg=%vreg0
   val SU(2): Latency=5 Reg=%vreg0

SU(1):   %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 28
  Successors:
   val SU(3): Latency=5 Reg=%vreg1
   val SU(2): Latency=4 Reg=%vreg1

SU(2):   SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 13
  Depth              : 5
  Height             : 24
  Predecessors:
   val SU(1): Latency=4 Reg=%vreg1
   val SU(0): Latency=5 Reg=%vreg0
  Successors:
   ch  SU(6): Latency=1
   ch  SU(7): Latency=1
   ch  SU(3): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(3):   %vreg2<def> = FLW %vreg1, 0; mem:LD4[%7](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 14
  Depth              : 6
  Height             : 23
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg1
   ch  SU(2): Latency=1
  Successors:
   val SU(5): Latency=2 Reg=%vreg2
   ch  SU(9): Latency=0
   ch  SU(5): Latency=0

SU(4):   %vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 26
  Successors:
   val SU(10): Latency=5 Reg=%vreg3
   val SU(5): Latency=5 Reg=%vreg3

SU(5):   FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 13
  Depth              : 8
  Height             : 21
  Predecessors:
   val SU(3): Latency=2 Reg=%vreg2
   val SU(4): Latency=5 Reg=%vreg3
   ch  SU(3): Latency=0
  Successors:
   ch  SU(10): Latency=1
   ch  SU(7): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(6):   %vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 6
  Height             : 17
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg0
   ch  SU(2): Latency=1
  Successors:
   val SU(7): Latency=15 Reg=%vreg4

SU(7):   %vreg5<def> = FLW %vreg4, 4; mem:LD4[%11] FP32Bit:%vreg5 GR32Bit:%vreg4
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 21
  Height             : 2
  Predecessors:
   val SU(6): Latency=15 Reg=%vreg4
   ch  SU(5): Latency=1
   ch  SU(2): Latency=1
  Successors:
   val SU(9): Latency=2 Reg=%vreg5
   ch  SU(9): Latency=0

SU(8):   %vreg6<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg6
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(9): Latency=5 Reg=%vreg6

SU(9):   FSW %vreg5, %vreg6, 0; mem:ST4[%4] FP32Bit:%vreg5 GR32Bit:%vreg6
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 23
  Height             : 0
  Predecessors:
   val SU(7): Latency=2 Reg=%vreg5
   val SU(8): Latency=5 Reg=%vreg6
   ch  SU(7): Latency=0
   ch  SU(3): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(10):   %vreg7<def> = FLW %vreg3, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg3
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 9
  Height             : 20
  Predecessors:
   val SU(4): Latency=5 Reg=%vreg3
   ch  SU(5): Latency=1
  Successors:
   val SU(15): Latency=15 Reg=%vreg7

SU(11):   %vreg8<def> = LUI <ga:@var>[TF=2]; GR32Bit:%vreg8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 30
  Successors:
   val SU(13): Latency=5 Reg=%vreg8

SU(12):   %vreg9<def> = ADDI %zero, <ga:@var>[TF=3]; GR32Bit:%vreg9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 30
  Successors:
   val SU(13): Latency=5 Reg=%vreg9

SU(13):   %vreg10<def> = ADD %vreg9, %vreg8; GR32Bit:%vreg10,%vreg9,%vreg8
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 25
  Predecessors:
   val SU(12): Latency=5 Reg=%vreg9
   val SU(11): Latency=5 Reg=%vreg8
  Successors:
   val SU(14): Latency=5 Reg=%vreg10

SU(14):   %vreg11<def> = FLW %vreg10, 0; mem:LD4[@var] FP32Bit:%vreg11 GR32Bit:%vreg10
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 20
  Predecessors:
   val SU(13): Latency=5 Reg=%vreg10
  Successors:
   val SU(15): Latency=15 Reg=%vreg11

SU(15):   %vreg12<def> = FULE_S %vreg7, %vreg11; GR32Bit:%vreg12 FP32Bit:%vreg7,%vreg11
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 5
  Predecessors:
   val SU(14): Latency=15 Reg=%vreg11
   val SU(10): Latency=15 Reg=%vreg7
  Successors:
   val SU(4294967295): Latency=5 Reg=%vreg12

SU(0):   %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
   val SU(6): Latency=5 Reg=%vreg0
   val SU(2): Latency=5 Reg=%vreg0

SU(1):   %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 28
  Successors:
   val SU(3): Latency=5 Reg=%vreg1
   val SU(2): Latency=4 Reg=%vreg1

SU(2):   SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 13
  Depth              : 5
  Height             : 24
  Predecessors:
   val SU(1): Latency=4 Reg=%vreg1
   val SU(0): Latency=5 Reg=%vreg0
  Successors:
   ch  SU(6): Latency=1
   ch  SU(7): Latency=1
   ch  SU(3): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(3):   %vreg2<def> = FLW %vreg1, 0; mem:LD4[%7](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 14
  Depth              : 6
  Height             : 23
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg1
   ch  SU(2): Latency=1
  Successors:
   val SU(5): Latency=2 Reg=%vreg2
   ch  SU(9): Latency=0
   ch  SU(5): Latency=0

SU(4):   %vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 26
  Successors:
   val SU(10): Latency=5 Reg=%vreg3
   val SU(5): Latency=5 Reg=%vreg3

SU(5):   FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 8
  Height             : 21
  Predecessors:
   val SU(3): Latency=2 Reg=%vreg2
   val SU(4): Latency=5 Reg=%vreg3
   ch  SU(3): Latency=0
  Successors:
   ch  SU(10): Latency=1
   ch  SU(7): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(6):   %vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 6
  Height             : 17
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg0
   ch  SU(2): Latency=1
  Successors:
   val SU(7): Latency=15 Reg=%vreg4

SU(7):   %vreg5<def> = FLW %vreg4, 4; mem:LD4[%11] FP32Bit:%vreg5 GR32Bit:%vreg4
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 21
  Height             : 2
  Predecessors:
   val SU(6): Latency=15 Reg=%vreg4
   ch  SU(5): Latency=1
   ch  SU(2): Latency=1
  Successors:
   val SU(9): Latency=2 Reg=%vreg5
   ch  SU(9): Latency=0

SU(8):   %vreg6<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg6
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(9): Latency=5 Reg=%vreg6

SU(9):   FSW %vreg5, %vreg6, 0; mem:ST4[%4] FP32Bit:%vreg5 GR32Bit:%vreg6
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 23
  Height             : 0
  Predecessors:
   val SU(7): Latency=2 Reg=%vreg5
   val SU(8): Latency=5 Reg=%vreg6
   ch  SU(7): Latency=0
   ch  SU(3): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(10):   %vreg7<def> = FLW %vreg3, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg3
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 9
  Height             : 20
  Predecessors:
   val SU(4): Latency=5 Reg=%vreg3
   ch  SU(5): Latency=1
  Successors:
   val SU(15): Latency=15 Reg=%vreg7

SU(11):   %vreg8<def> = LUI <ga:@var>[TF=2]; GR32Bit:%vreg8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 30
  Successors:
   val SU(13): Latency=5 Reg=%vreg8

SU(12):   %vreg9<def> = ADDI %zero, <ga:@var>[TF=3]; GR32Bit:%vreg9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 30
  Successors:
   val SU(13): Latency=5 Reg=%vreg9

SU(13):   %vreg10<def> = ADD %vreg9, %vreg8; GR32Bit:%vreg10,%vreg9,%vreg8
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 25
  Predecessors:
   val SU(12): Latency=5 Reg=%vreg9
   val SU(11): Latency=5 Reg=%vreg8
  Successors:
   val SU(14): Latency=5 Reg=%vreg10

SU(14):   %vreg11<def> = FLW %vreg10, 0; mem:LD4[@var] FP32Bit:%vreg11 GR32Bit:%vreg10
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 20
  Predecessors:
   val SU(13): Latency=5 Reg=%vreg10
  Successors:
   val SU(15): Latency=15 Reg=%vreg11

SU(15):   %vreg12<def> = FULE_S %vreg7, %vreg11; GR32Bit:%vreg12 FP32Bit:%vreg7,%vreg11
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 5
  Predecessors:
   val SU(14): Latency=15 Reg=%vreg11
   val SU(10): Latency=15 Reg=%vreg7
  Successors:
   val SU(4294967295): Latency=5 Reg=%vreg12

Pick node SU(12)  ILP: 1 / 1 = 1 Tree: 3 @0
Scheduling %vreg9<def> = ADDI %zero, <ga:@var>[TF=3]; GR32Bit:%vreg9
handleMove 208B -> 8B: %vreg9<def> = ADDI %zero, <ga:@var>[TF=3]; GR32Bit:%vreg9
     %vreg9:	[208r,224r:0)  0@208r
        -->	[8r,224r:0)  0@8r
     zero:	[312r,312d:7)[320r,320d:6)[324r,324d:5)[332r,332d:4)[336r,336d:3)[344r,344d:2)[348r,348d:1)[356r,356d:0)  0@356r 1@348r 2@344r 3@336r 4@332r 5@324r 6@320r 7@312r
        -->	[312r,312d:7)[320r,320d:6)[324r,324d:5)[332r,332d:4)[336r,336d:3)[344r,344d:2)[348r,348d:1)[356r,356d:0)  0@356r 1@348r 2@344r 3@336r 4@332r 5@324r 6@320r 7@312r
Pick node SU(11)  ILP: 1 / 1 = 1 Tree: 3 @0
Scheduling %vreg8<def> = LUI <ga:@var>[TF=2]; GR32Bit:%vreg8
handleMove 192B -> 12B: %vreg8<def> = LUI <ga:@var>[TF=2]; GR32Bit:%vreg8
     %vreg8:	[192r,224r:0)  0@192r
        -->	[12r,224r:0)  0@12r
Pick node SU(13)  ILP: 3 / 6 = 0.5 Tree: 3 @0
Scheduling %vreg10<def> = ADD %vreg9, %vreg8; GR32Bit:%vreg10,%vreg9,%vreg8

*** Renumbered SlotIndexes 12-28 ***
handleMove 224B -> 20B: %vreg10<def> = ADD %vreg9, %vreg8; GR32Bit:%vreg10,%vreg9,%vreg8
     %vreg10:	[224r,240r:0)  0@224r
        -->	[20r,240r:0)  0@20r
     %vreg9:	[8r,224r:0)  0@8r
        -->	[8r,20r:0)  0@8r
     %vreg8:	[12r,224r:0)  0@12r
        -->	[12r,20r:0)  0@12r
Pick node SU(14)  ILP: 4 / 11 = 0.363636 Tree: 3 @0
Scheduling %vreg11<def> = FLW %vreg10, 0; mem:LD4[@var] FP32Bit:%vreg11 GR32Bit:%vreg10
handleMove 240B -> 24B: %vreg11<def> = FLW %vreg10, 0; mem:LD4[@var] FP32Bit:%vreg11 GR32Bit:%vreg10
     %vreg11:	[240r,256r:0)  0@240r
        -->	[24r,256r:0)  0@24r
     %vreg10:	[20r,240r:0)  0@20r
        -->	[20r,24r:0)  0@20r
Pick node SU(1)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1

*** Renumbered SlotIndexes 24-56 ***
handleMove 48B -> 32B: %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
     %vreg1:	[48r,64r:0)  0@48r
        -->	[32r,64r:0)  0@32r
     t5:	EMPTY
        -->	EMPTY
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
Pick node SU(2)  ILP: 3 / 6 = 0.5 Tree: 0 @0
Scheduling SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
Pick node SU(8)  ILP: 1 / 1 = 1 Tree: 2 @0
Scheduling %vreg6<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg6
handleMove 144B -> 60B: %vreg6<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg6
     %vreg6:	[144r,160r:0)  0@144r
        -->	[60r,160r:0)  0@60r
     t5:	EMPTY
        -->	EMPTY
Pick node SU(6)  ILP: 1 / 7 = 0.142857 Tree: 2 @0
Scheduling %vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0

*** Renumbered SlotIndexes 60-76 ***
handleMove 112B -> 68B: %vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
     %vreg4:	[112r,128r:0)  0@112r
        -->	[68r,128r:0)  0@68r
     %vreg0:	[40r,112r:0)  0@40r
        -->	[40r,68r:0)  0@40r
Pick node SU(4)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
handleMove 80B -> 72B: %vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
     %vreg3:	[80r,176r:0)  0@80r
        -->	[72r,176r:0)  0@72r
     t5:	EMPTY
        -->	EMPTY
Pick node SU(3)  ILP: 1 / 7 = 0.142857 Tree: 1 @0
Scheduling %vreg2<def> = FLW %vreg1, 0; mem:LD4[%7](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
Pick node SU(5)  ILP: 3 / 9 = 0.333333 Tree: 1 @0
Scheduling FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
Pick node SU(10)  ILP: 1 / 10 = 0.1 Tree: 3 @0
Scheduling %vreg7<def> = FLW %vreg3, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg3
handleMove 176B -> 104B: %vreg7<def> = FLW %vreg3, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg3
     %vreg7:	[176r,256r:0)  0@176r
        -->	[104r,256r:0)  0@104r
     %vreg3:	[72r,176r:0)  0@72r
        -->	[72r,104r:0)  0@72r
Pick node SU(15)  ILP: 6 / 26 = 0.230769 Tree: 3 @0
Scheduling %vreg12<def> = FULE_S %vreg7, %vreg11; GR32Bit:%vreg12 FP32Bit:%vreg7,%vreg11
handleMove 256B -> 108B: %vreg12<def> = FULE_S %vreg7, %vreg11; GR32Bit:%vreg12 FP32Bit:%vreg7,%vreg11
     %vreg12:	[256r,272r:0)  0@256r
        -->	[108r,272r:0)  0@108r
     %vreg7:	[104r,256r:0)  0@104r
        -->	[104r,108r:0)  0@104r
     %vreg11:	[24r,256r:0)  0@24r
        -->	[24r,108r:0)  0@24r
Pick node SU(7)  ILP: 2 / 22 = 0.0909091 Tree: 2 @0
Scheduling %vreg5<def> = FLW %vreg4, 4; mem:LD4[%11] FP32Bit:%vreg5 GR32Bit:%vreg4
Pick node SU(9)  ILP: 4 / 24 = 0.166667 Tree: 2 @0
Scheduling FSW %vreg5, %vreg6, 0; mem:ST4[%4] FP32Bit:%vreg5 GR32Bit:%vreg6
*** Final schedule for BB#0 ***
SU(12):   %vreg9<def> = ADDI %zero, <ga:@var>[TF=3]; GR32Bit:%vreg9
SU(11):   %vreg8<def> = LUI <ga:@var>[TF=2]; GR32Bit:%vreg8
SU(13):   %vreg10<def> = ADD %vreg9, %vreg8; GR32Bit:%vreg10,%vreg9,%vreg8
SU(14):   %vreg11<def> = FLW %vreg10, 0; mem:LD4[@var] FP32Bit:%vreg11 GR32Bit:%vreg10
SU(1):   %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
SU(0):   %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
SU(2):   SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
SU(8):   %vreg6<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg6
SU(6):   %vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
SU(4):   %vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
SU(3):   %vreg2<def> = FLW %vreg1, 0; mem:LD4[%7](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
SU(5):   FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
SU(10):   %vreg7<def> = FLW %vreg3, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg3
SU(15):   %vreg12<def> = FULE_S %vreg7, %vreg11; GR32Bit:%vreg12 FP32Bit:%vreg7,%vreg11
SU(7):   %vreg5<def> = FLW %vreg4, 4; mem:LD4[%11] FP32Bit:%vreg5 GR32Bit:%vreg4
SU(9):   FSW %vreg5, %vreg6, 0; mem:ST4[%4] FP32Bit:%vreg5 GR32Bit:%vreg6


*** Renumbered SlotIndexes 4-172 ***

*** Renumbered SlotIndexes 16-200 ***

*** Renumbered SlotIndexes 28-220 ***

*** Renumbered SlotIndexes 40-248 ***

*** Renumbered SlotIndexes 52-268 ***

*** Renumbered SlotIndexes 64-472 ***

*** Renumbered SlotIndexes 76-492 ***

*** Renumbered SlotIndexes 88-520 ***

*** Renumbered SlotIndexes 100-540 ***

*** Renumbered SlotIndexes 112-568 ***

*** Renumbered SlotIndexes 124-588 ***

*** Renumbered SlotIndexes 136-616 ***

*** Renumbered SlotIndexes 148-636 ***

*** Renumbered SlotIndexes 160-664 ***

*** Renumbered SlotIndexes 172-684 ***

*** Renumbered SlotIndexes 184-712 ***

*** Renumbered SlotIndexes 196-732 ***

*** Renumbered SlotIndexes 208-760 ***

*** Renumbered SlotIndexes 220-780 ***

*** Renumbered SlotIndexes 232-808 ***

*** Renumbered SlotIndexes 244-828 ***

*** Renumbered SlotIndexes 256-856 ***

*** Renumbered SlotIndexes 268-876 ***

*** Renumbered SlotIndexes 280-904 ***

*** Renumbered SlotIndexes 292-924 ***

*** Renumbered SlotIndexes 304-952 ***

*** Renumbered SlotIndexes 316-972 ***

*** Renumbered SlotIndexes 328-1000 ***

*** Renumbered SlotIndexes 340-1020 ***

*** Renumbered SlotIndexes 352-1048 ***

*** Renumbered SlotIndexes 364-1068 ***

*** Renumbered SlotIndexes 376-1096 ***

*** Renumbered SlotIndexes 388-1108 ***

*** Renumbered SlotIndexes 400-1120 ***
Partitioning instructions of the region into multiple CEs
instr:  %vreg9<def> = ADDI %zero, <ga:@var>[TF=3]; GR32Bit:%vreg9
instr:  %vreg8<def> = LUI <ga:@var>[TF=2]; GR32Bit:%vreg8
instr:  %vreg10<def> = ADD %vreg9, %vreg8; GR32Bit:%vreg10,%vreg9,%vreg8
instr:  %vreg11<def> = FLW %vreg10, 0; mem:LD4[@var] FP32Bit:%vreg11 GR32Bit:%vreg10
instr:  %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
instr:  %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
instr:  SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
instr:  %vreg6<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg6
instr:  %vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
instr:  %vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
instr:  %vreg2<def> = FLW %vreg1, 0; mem:LD4[%7](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
instr:  FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
instr:  %vreg7<def> = FLW %vreg3, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg3
instr:  %vreg12<def> = FULE_S %vreg7, %vreg11; GR32Bit:%vreg12 FP32Bit:%vreg7,%vreg11
instr:  %vreg5<def> = FLW %vreg4, 4; mem:LD4[%11] FP32Bit:%vreg5 GR32Bit:%vreg4
instr:  FSW %vreg5, %vreg6, 0; mem:ST4[%4] FP32Bit:%vreg5 GR32Bit:%vreg6

*** Renumbered SlotIndexes 572-1132 ***

*** Renumbered SlotIndexes 584-1144 ***

*** Renumbered SlotIndexes 596-1156 ***

*** Renumbered SlotIndexes 608-1168 ***

*** Renumbered SlotIndexes 620-1180 ***

*** Renumbered SlotIndexes 632-1192 ***

*** Renumbered SlotIndexes 700-1204 ***

*** Renumbered SlotIndexes 712-1216 ***

*** Renumbered SlotIndexes 724-1228 ***

*** Renumbered SlotIndexes 736-1240 ***

*** Renumbered SlotIndexes 748-1252 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs

renaming register of operand that belongs to ce 1 but was defined in0
%vreg12<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg12<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg12<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg12
renaming register of operand that belongs to ce 2 but was defined in0
%vreg12
renaming register of operand that belongs to ce 3 but was defined in0
%vreg12After Shuffling regions of basic block, state of BB#0:
BB#0: derived from LLVM BB %running_protection3.entry
	%vreg45<def> = ADD %t5, %zero; GR32Bit:%vreg45
	%vreg47<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg47
	%vreg48<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg48
	%vreg49<def> = SRLI %vreg48, 12; GR32Bit:%vreg49,%vreg48
	%vreg50<def> = ADD %vreg47, %vreg49; GR32Bit:%vreg50,%vreg47,%vreg49
	%vreg51<def> = ADDI %zero, 20; GR32Bit:%vreg51
	%vreg52<def> = SRLI %t5, 22; GR32Bit:%vreg52
	%vreg53<def> = SRLI %t5, 12; GR32Bit:%vreg53
	%vreg54<def> = ANDI %vreg53, 15; GR32Bit:%vreg54,%vreg53
	%vreg55<def> = SRLI %t5, 6; GR32Bit:%vreg55
	%vreg56<def> = ANDI %vreg55, 63; GR32Bit:%vreg56,%vreg55
	%vreg57<def> = ADDI %zero, 832; GR32Bit:%vreg57
	%vreg58<def> = MUL %vreg52, %vreg57; GR32Bit:%vreg58,%vreg52,%vreg57
	%vreg59<def> = ADDI %zero, 52; GR32Bit:%vreg59
	%vreg60<def> = MUL %vreg54, %vreg59; GR32Bit:%vreg60,%vreg54,%vreg59
	%vreg61<def> = ADD %vreg60, %vreg56; GR32Bit:%vreg61,%vreg60,%vreg56
	%vreg62<def> = ADD %vreg61, %vreg58; GR32Bit:%vreg62,%vreg61,%vreg58
	%vreg63<def> = MUL %vreg62, %vreg51; GR32Bit:%vreg63,%vreg62,%vreg51
	%vreg46<def> = ADD %vreg50, %vreg63; GR32Bit:%vreg46,%vreg50,%vreg63
	%vreg9<def> = ADDI %zero, <ga:@var>[TF=3]; GR32Bit:%vreg9
	%vreg8<def> = LUI <ga:@var>[TF=2]; GR32Bit:%vreg8
	%vreg10<def> = ADD %vreg9, %vreg8; GR32Bit:%vreg10,%vreg9,%vreg8
	%vreg11<def> = FLW %vreg10, 0; mem:LD4[@var] FP32Bit:%vreg11 GR32Bit:%vreg10
	%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
	%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
	SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
	%vreg6<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg6
	%vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
	%vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
	%vreg2<def> = FLW %vreg1, 0; mem:LD4[%7](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
	FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
	%vreg7<def> = FLW %vreg3, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg3
	%vreg12<def> = FULE_S %vreg7, %vreg11; GR32Bit:%vreg12 FP32Bit:%vreg7,%vreg11
	%vreg5<def> = FLW %vreg4, 4; mem:LD4[%11] FP32Bit:%vreg5 GR32Bit:%vreg4
	FSW %vreg5, %vreg6, 0; mem:ST4[%4] FP32Bit:%vreg5 GR32Bit:%vreg6
	%vreg121<def> = LUI 1; GR32Bit:%vreg121
	WRITEPM %vreg121, %vreg12, 0; GR32Bit:%vreg121,%vreg12
	%vreg123<def> = LUI 2; GR32Bit:%vreg123
	WRITEPM %vreg123, %vreg12, 0; GR32Bit:%vreg123,%vreg12
	%vreg125<def> = LUI 3; GR32Bit:%vreg125
	WRITEPM %vreg125, %vreg12, 0; GR32Bit:%vreg125,%vreg12
	BNE <BB#2>, %vreg12, %zero; GR32Bit:%vreg12
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#1>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg64<def> = ADD %t5, %zero; GR32Bit:%vreg64
	%vreg66<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg66
	%vreg67<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg67
	%vreg68<def> = SRLI %vreg67, 12; GR32Bit:%vreg68,%vreg67
	%vreg69<def> = ADD %vreg66, %vreg68; GR32Bit:%vreg69,%vreg66,%vreg68
	%vreg70<def> = ADDI %zero, 20; GR32Bit:%vreg70
	%vreg71<def> = SRLI %t5, 22; GR32Bit:%vreg71
	%vreg72<def> = SRLI %t5, 12; GR32Bit:%vreg72
	%vreg73<def> = ANDI %vreg72, 15; GR32Bit:%vreg73,%vreg72
	%vreg74<def> = SRLI %t5, 6; GR32Bit:%vreg74
	%vreg75<def> = ANDI %vreg74, 63; GR32Bit:%vreg75,%vreg74
	%vreg76<def> = ADDI %zero, 832; GR32Bit:%vreg76
	%vreg77<def> = MUL %vreg71, %vreg76; GR32Bit:%vreg77,%vreg71,%vreg76
	%vreg78<def> = ADDI %zero, 52; GR32Bit:%vreg78
	%vreg79<def> = MUL %vreg73, %vreg78; GR32Bit:%vreg79,%vreg73,%vreg78
	%vreg80<def> = ADD %vreg79, %vreg75; GR32Bit:%vreg80,%vreg79,%vreg75
	%vreg81<def> = ADD %vreg80, %vreg77; GR32Bit:%vreg81,%vreg80,%vreg77
	%vreg82<def> = MUL %vreg81, %vreg70; GR32Bit:%vreg82,%vreg81,%vreg70
	%vreg65<def> = ADD %vreg69, %vreg82; GR32Bit:%vreg65,%vreg69,%vreg82
	%vreg122<def> = LUI 1; GR32Bit:%vreg122
	%vreg127<def> = DREADPM %vreg122, 0; GR32Bit:%vreg127,%vreg122
	BNE <BB#2>, %vreg127, %zero; GR32Bit:%vreg127
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#1>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg83<def> = ADD %t5, %zero; GR32Bit:%vreg83
	%vreg85<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg85
	%vreg86<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg86
	%vreg87<def> = SRLI %vreg86, 12; GR32Bit:%vreg87,%vreg86
	%vreg88<def> = ADD %vreg85, %vreg87; GR32Bit:%vreg88,%vreg85,%vreg87
	%vreg89<def> = ADDI %zero, 20; GR32Bit:%vreg89
	%vreg90<def> = SRLI %t5, 22; GR32Bit:%vreg90
	%vreg91<def> = SRLI %t5, 12; GR32Bit:%vreg91
	%vreg92<def> = ANDI %vreg91, 15; GR32Bit:%vreg92,%vreg91
	%vreg93<def> = SRLI %t5, 6; GR32Bit:%vreg93
	%vreg94<def> = ANDI %vreg93, 63; GR32Bit:%vreg94,%vreg93
	%vreg95<def> = ADDI %zero, 832; GR32Bit:%vreg95
	%vreg96<def> = MUL %vreg90, %vreg95; GR32Bit:%vreg96,%vreg90,%vreg95
	%vreg97<def> = ADDI %zero, 52; GR32Bit:%vreg97
	%vreg98<def> = MUL %vreg92, %vreg97; GR32Bit:%vreg98,%vreg92,%vreg97
	%vreg99<def> = ADD %vreg98, %vreg94; GR32Bit:%vreg99,%vreg98,%vreg94
	%vreg100<def> = ADD %vreg99, %vreg96; GR32Bit:%vreg100,%vreg99,%vreg96
	%vreg101<def> = MUL %vreg100, %vreg89; GR32Bit:%vreg101,%vreg100,%vreg89
	%vreg84<def> = ADD %vreg88, %vreg101; GR32Bit:%vreg84,%vreg88,%vreg101
	%vreg124<def> = LUI 2; GR32Bit:%vreg124
	%vreg128<def> = DREADPM %vreg124, 0; GR32Bit:%vreg128,%vreg124
	BNE <BB#2>, %vreg128, %zero; GR32Bit:%vreg128
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#1>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg102<def> = ADD %t5, %zero; GR32Bit:%vreg102
	%vreg104<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg104
	%vreg105<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg105
	%vreg106<def> = SRLI %vreg105, 12; GR32Bit:%vreg106,%vreg105
	%vreg107<def> = ADD %vreg104, %vreg106; GR32Bit:%vreg107,%vreg104,%vreg106
	%vreg108<def> = ADDI %zero, 20; GR32Bit:%vreg108
	%vreg109<def> = SRLI %t5, 22; GR32Bit:%vreg109
	%vreg110<def> = SRLI %t5, 12; GR32Bit:%vreg110
	%vreg111<def> = ANDI %vreg110, 15; GR32Bit:%vreg111,%vreg110
	%vreg112<def> = SRLI %t5, 6; GR32Bit:%vreg112
	%vreg113<def> = ANDI %vreg112, 63; GR32Bit:%vreg113,%vreg112
	%vreg114<def> = ADDI %zero, 832; GR32Bit:%vreg114
	%vreg115<def> = MUL %vreg109, %vreg114; GR32Bit:%vreg115,%vreg109,%vreg114
	%vreg116<def> = ADDI %zero, 52; GR32Bit:%vreg116
	%vreg117<def> = MUL %vreg111, %vreg116; GR32Bit:%vreg117,%vreg111,%vreg116
	%vreg118<def> = ADD %vreg117, %vreg113; GR32Bit:%vreg118,%vreg117,%vreg113
	%vreg119<def> = ADD %vreg118, %vreg115; GR32Bit:%vreg119,%vreg118,%vreg115
	%vreg120<def> = MUL %vreg119, %vreg108; GR32Bit:%vreg120,%vreg119,%vreg108
	%vreg103<def> = ADD %vreg107, %vreg120; GR32Bit:%vreg103,%vreg107,%vreg120
	%vreg126<def> = LUI 3; GR32Bit:%vreg126
	%vreg129<def> = DREADPM %vreg126, 0; GR32Bit:%vreg129,%vreg126
	BNE <BB#2>, %vreg129, %zero; GR32Bit:%vreg129
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#1>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#1(16) BB#2(16)

*** Renumbered SlotIndexes 316-1348 ***

*** Renumbered SlotIndexes 304-1368 ***

*** Renumbered SlotIndexes 304-1384 ***

*** Renumbered SlotIndexes 304-1400 ***

*** Renumbered SlotIndexes 304-1416 ***

*** Renumbered SlotIndexes 216-1456 ***

*** Renumbered SlotIndexes 204-1476 ***

*** Renumbered SlotIndexes 204-1492 ***

*** Renumbered SlotIndexes 204-1508 ***

*** Renumbered SlotIndexes 204-1524 ***

*** Renumbered SlotIndexes 112-1576 ***

*** Renumbered SlotIndexes 100-1596 ***

*** Renumbered SlotIndexes 100-1612 ***

*** Renumbered SlotIndexes 100-1628 ***

*** Renumbered SlotIndexes 100-1644 ***

*** Renumbered SlotIndexes 100-1660 ***

*** Renumbered SlotIndexes 100-1676 ***

*** Renumbered SlotIndexes 100-1692 ***

*** Renumbered SlotIndexes 100-1708 ***

*** Renumbered SlotIndexes 100-1724 ***

*** Renumbered SlotIndexes 100-1740 ***

*** Renumbered SlotIndexes 100-1756 ***

*** Renumbered SlotIndexes 100-1772 ***

*** Renumbered SlotIndexes 100-1788 ***

*** Renumbered SlotIndexes 100-1804 ***

*** Renumbered SlotIndexes 12-1844 ***
Creating pHyperOp bundles for CEs for bb0
  %vreg64<def> = ADD %t5, %zero; GR32Bit:%vreg64
starting at   %vreg45<def> = ADD %t5, %zero; GR32Bit:%vreg45
  %vreg83<def> = ADD %t5, %zero; GR32Bit:%vreg83
starting at   %vreg64<def> = ADD %t5, %zero; GR32Bit:%vreg64
  %vreg102<def> = ADD %t5, %zero; GR32Bit:%vreg102
starting at   %vreg83<def> = ADD %t5, %zero; GR32Bit:%vreg83
starting at   %vreg102<def> = ADD %t5, %zero; GR32Bit:%vreg102
After bundling, state of BB0:BB#0: derived from LLVM BB %running_protection3.entry
	%vreg45<def> = ADD %t5, %zero; GR32Bit:%vreg45
	  * %vreg47<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg47
	  * %vreg48<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg48
	  * %vreg49<def> = SRLI %vreg48, 12; GR32Bit:%vreg49,%vreg48
	  * %vreg50<def> = ADD %vreg47, %vreg49; GR32Bit:%vreg50,%vreg47,%vreg49
	  * %vreg51<def> = ADDI %zero, 20; GR32Bit:%vreg51
	  * %vreg52<def> = SRLI %t5, 22; GR32Bit:%vreg52
	  * %vreg53<def> = SRLI %t5, 12; GR32Bit:%vreg53
	  * %vreg54<def> = ANDI %vreg53, 15; GR32Bit:%vreg54,%vreg53
	  * %vreg55<def> = SRLI %t5, 6; GR32Bit:%vreg55
	  * %vreg56<def> = ANDI %vreg55, 63; GR32Bit:%vreg56,%vreg55
	  * %vreg57<def> = ADDI %zero, 832; GR32Bit:%vreg57
	  * %vreg58<def> = MUL %vreg52, %vreg57; GR32Bit:%vreg58,%vreg52,%vreg57
	  * %vreg59<def> = ADDI %zero, 52; GR32Bit:%vreg59
	  * %vreg60<def> = MUL %vreg54, %vreg59; GR32Bit:%vreg60,%vreg54,%vreg59
	  * %vreg61<def> = ADD %vreg60, %vreg56; GR32Bit:%vreg61,%vreg60,%vreg56
	  * %vreg62<def> = ADD %vreg61, %vreg58; GR32Bit:%vreg62,%vreg61,%vreg58
	  * %vreg63<def> = MUL %vreg62, %vreg51; GR32Bit:%vreg63,%vreg62,%vreg51
	  * %vreg46<def> = ADD %vreg50, %vreg63; GR32Bit:%vreg46,%vreg50,%vreg63
	  * %vreg9<def> = ADDI %zero, <ga:@var>[TF=3]; GR32Bit:%vreg9
	  * %vreg8<def> = LUI <ga:@var>[TF=2]; GR32Bit:%vreg8
	  * %vreg10<def> = ADD %vreg9, %vreg8; GR32Bit:%vreg10,%vreg9,%vreg8
	  * %vreg11<def> = FLW %vreg10, 0; mem:LD4[@var] FP32Bit:%vreg11 GR32Bit:%vreg10
	  * %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
	  * %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
	  * SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
	  * %vreg6<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg6
	  * %vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
	  * %vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
	  * %vreg2<def> = FLW %vreg1, 0; mem:LD4[%7](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
	  * FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
	  * %vreg7<def> = FLW %vreg3, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg3
	  * %vreg12<def> = FULE_S %vreg7, %vreg11; GR32Bit:%vreg12 FP32Bit:%vreg7,%vreg11
	  * %vreg5<def> = FLW %vreg4, 4; mem:LD4[%11] FP32Bit:%vreg5 GR32Bit:%vreg4
	  * FSW %vreg5, %vreg6, 0; mem:ST4[%4] FP32Bit:%vreg5 GR32Bit:%vreg6
	  * %vreg121<def> = LUI 1; GR32Bit:%vreg121
	  * WRITEPM %vreg121, %vreg12, 0; GR32Bit:%vreg121,%vreg12
	  * %vreg123<def> = LUI 2; GR32Bit:%vreg123
	  * WRITEPM %vreg123, %vreg12, 0; GR32Bit:%vreg123,%vreg12
	  * %vreg125<def> = LUI 3; GR32Bit:%vreg125
	  * WRITEPM %vreg125, %vreg12, 0; GR32Bit:%vreg125,%vreg12
	  * BNE <BB#2>, %vreg12, %zero; GR32Bit:%vreg12
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg64<def> = ADD %t5, %zero; GR32Bit:%vreg64
	  * %vreg66<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg66
	  * %vreg67<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg67
	  * %vreg68<def> = SRLI %vreg67, 12; GR32Bit:%vreg68,%vreg67
	  * %vreg69<def> = ADD %vreg66, %vreg68; GR32Bit:%vreg69,%vreg66,%vreg68
	  * %vreg70<def> = ADDI %zero, 20; GR32Bit:%vreg70
	  * %vreg71<def> = SRLI %t5, 22; GR32Bit:%vreg71
	  * %vreg72<def> = SRLI %t5, 12; GR32Bit:%vreg72
	  * %vreg73<def> = ANDI %vreg72, 15; GR32Bit:%vreg73,%vreg72
	  * %vreg74<def> = SRLI %t5, 6; GR32Bit:%vreg74
	  * %vreg75<def> = ANDI %vreg74, 63; GR32Bit:%vreg75,%vreg74
	  * %vreg76<def> = ADDI %zero, 832; GR32Bit:%vreg76
	  * %vreg77<def> = MUL %vreg71, %vreg76; GR32Bit:%vreg77,%vreg71,%vreg76
	  * %vreg78<def> = ADDI %zero, 52; GR32Bit:%vreg78
	  * %vreg79<def> = MUL %vreg73, %vreg78; GR32Bit:%vreg79,%vreg73,%vreg78
	  * %vreg80<def> = ADD %vreg79, %vreg75; GR32Bit:%vreg80,%vreg79,%vreg75
	  * %vreg81<def> = ADD %vreg80, %vreg77; GR32Bit:%vreg81,%vreg80,%vreg77
	  * %vreg82<def> = MUL %vreg81, %vreg70; GR32Bit:%vreg82,%vreg81,%vreg70
	  * %vreg65<def> = ADD %vreg69, %vreg82; GR32Bit:%vreg65,%vreg69,%vreg82
	  * %vreg122<def> = LUI 1; GR32Bit:%vreg122
	  * %vreg127<def> = DREADPM %vreg122, 0; GR32Bit:%vreg127,%vreg122
	  * BNE <BB#2>, %vreg127, %zero; GR32Bit:%vreg127
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg83<def> = ADD %t5, %zero; GR32Bit:%vreg83
	  * %vreg85<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg85
	  * %vreg86<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg86
	  * %vreg87<def> = SRLI %vreg86, 12; GR32Bit:%vreg87,%vreg86
	  * %vreg88<def> = ADD %vreg85, %vreg87; GR32Bit:%vreg88,%vreg85,%vreg87
	  * %vreg89<def> = ADDI %zero, 20; GR32Bit:%vreg89
	  * %vreg90<def> = SRLI %t5, 22; GR32Bit:%vreg90
	  * %vreg91<def> = SRLI %t5, 12; GR32Bit:%vreg91
	  * %vreg92<def> = ANDI %vreg91, 15; GR32Bit:%vreg92,%vreg91
	  * %vreg93<def> = SRLI %t5, 6; GR32Bit:%vreg93
	  * %vreg94<def> = ANDI %vreg93, 63; GR32Bit:%vreg94,%vreg93
	  * %vreg95<def> = ADDI %zero, 832; GR32Bit:%vreg95
	  * %vreg96<def> = MUL %vreg90, %vreg95; GR32Bit:%vreg96,%vreg90,%vreg95
	  * %vreg97<def> = ADDI %zero, 52; GR32Bit:%vreg97
	  * %vreg98<def> = MUL %vreg92, %vreg97; GR32Bit:%vreg98,%vreg92,%vreg97
	  * %vreg99<def> = ADD %vreg98, %vreg94; GR32Bit:%vreg99,%vreg98,%vreg94
	  * %vreg100<def> = ADD %vreg99, %vreg96; GR32Bit:%vreg100,%vreg99,%vreg96
	  * %vreg101<def> = MUL %vreg100, %vreg89; GR32Bit:%vreg101,%vreg100,%vreg89
	  * %vreg84<def> = ADD %vreg88, %vreg101; GR32Bit:%vreg84,%vreg88,%vreg101
	  * %vreg124<def> = LUI 2; GR32Bit:%vreg124
	  * %vreg128<def> = DREADPM %vreg124, 0; GR32Bit:%vreg128,%vreg124
	  * BNE <BB#2>, %vreg128, %zero; GR32Bit:%vreg128
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg102<def> = ADD %t5, %zero; GR32Bit:%vreg102
	  * %vreg104<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg104
	  * %vreg105<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg105
	  * %vreg106<def> = SRLI %vreg105, 12; GR32Bit:%vreg106,%vreg105
	  * %vreg107<def> = ADD %vreg104, %vreg106; GR32Bit:%vreg107,%vreg104,%vreg106
	  * %vreg108<def> = ADDI %zero, 20; GR32Bit:%vreg108
	  * %vreg109<def> = SRLI %t5, 22; GR32Bit:%vreg109
	  * %vreg110<def> = SRLI %t5, 12; GR32Bit:%vreg110
	  * %vreg111<def> = ANDI %vreg110, 15; GR32Bit:%vreg111,%vreg110
	  * %vreg112<def> = SRLI %t5, 6; GR32Bit:%vreg112
	  * %vreg113<def> = ANDI %vreg112, 63; GR32Bit:%vreg113,%vreg112
	  * %vreg114<def> = ADDI %zero, 832; GR32Bit:%vreg114
	  * %vreg115<def> = MUL %vreg109, %vreg114; GR32Bit:%vreg115,%vreg109,%vreg114
	  * %vreg116<def> = ADDI %zero, 52; GR32Bit:%vreg116
	  * %vreg117<def> = MUL %vreg111, %vreg116; GR32Bit:%vreg117,%vreg111,%vreg116
	  * %vreg118<def> = ADD %vreg117, %vreg113; GR32Bit:%vreg118,%vreg117,%vreg113
	  * %vreg119<def> = ADD %vreg118, %vreg115; GR32Bit:%vreg119,%vreg118,%vreg115
	  * %vreg120<def> = MUL %vreg119, %vreg108; GR32Bit:%vreg120,%vreg119,%vreg108
	  * %vreg103<def> = ADD %vreg107, %vreg120; GR32Bit:%vreg103,%vreg107,%vreg120
	  * %vreg126<def> = LUI 3; GR32Bit:%vreg126
	  * %vreg129<def> = DREADPM %vreg126, 0; GR32Bit:%vreg129,%vreg126
	  * BNE <BB#2>, %vreg129, %zero; GR32Bit:%vreg129
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#1(16) BB#2(16)

-------------
Starting new basic block BB#1
********** MI Scheduling **********
running_protection3:BB#1 running_protection3.if.then
  From: %vreg13<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg13
    To: End Remaining: 0
Max Pressure: GR32Bit=3
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 3
Excess PSets: 
2 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 1
  SU(5) in tree 1
  SU(6) in tree 1
SU(0):   %vreg13<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 36
  Successors:
   val SU(4): Latency=5 Reg=%vreg13
   val SU(1): Latency=5 Reg=%vreg13

SU(1):   %vreg14<def> = LW %vreg13, 0; mem:LD4[%2] GR32Bit:%vreg14,%vreg13
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 31
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg13
  Successors:
   val SU(3): Latency=15 Reg=%vreg14
   ch  SU(3): Latency=0

SU(2):   %vreg15<def> = ADDI %zero, 16; GR32Bit:%vreg15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
   val SU(3): Latency=4 Reg=%vreg15

SU(3):   SW %vreg15, %vreg14, 20; mem:ST4[%17] GR32Bit:%vreg15,%vreg14
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 20
  Height             : 16
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg14
   val SU(2): Latency=4 Reg=%vreg15
   ch  SU(1): Latency=0
  Successors:
   ch  SU(6): Latency=0
   ch  SU(4): Latency=1

SU(4):   %vreg16<def> = LW %vreg13, 0; mem:LD4[%2] GR32Bit:%vreg16,%vreg13
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 21
  Height             : 15
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg13
   ch  SU(3): Latency=1
  Successors:
   val SU(6): Latency=15 Reg=%vreg16
   ch  SU(6): Latency=0

SU(5):   %vreg17<def> = ADDI %zero, 4; GR32Bit:%vreg17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
   val SU(6): Latency=4 Reg=%vreg17

SU(6):   SW %vreg17, %vreg16, 16; mem:ST4[%19] GR32Bit:%vreg17,%vreg16
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 36
  Height             : 0
  Predecessors:
   val SU(4): Latency=15 Reg=%vreg16
   val SU(5): Latency=4 Reg=%vreg17
   ch  SU(4): Latency=0
   ch  SU(3): Latency=0

SU(0):   %vreg13<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 36
  Successors:
   val SU(4): Latency=5 Reg=%vreg13
   val SU(1): Latency=5 Reg=%vreg13

SU(1):   %vreg14<def> = LW %vreg13, 0; mem:LD4[%2] GR32Bit:%vreg14,%vreg13
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 31
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg13
  Successors:
   val SU(3): Latency=15 Reg=%vreg14
   ch  SU(3): Latency=0

SU(2):   %vreg15<def> = ADDI %zero, 16; GR32Bit:%vreg15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
   val SU(3): Latency=4 Reg=%vreg15

SU(3):   SW %vreg15, %vreg14, 20; mem:ST4[%17] GR32Bit:%vreg15,%vreg14
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 20
  Height             : 16
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg14
   val SU(2): Latency=4 Reg=%vreg15
   ch  SU(1): Latency=0
  Successors:
   ch  SU(6): Latency=0
   ch  SU(4): Latency=1

SU(4):   %vreg16<def> = LW %vreg13, 0; mem:LD4[%2] GR32Bit:%vreg16,%vreg13
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 21
  Height             : 15
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg13
   ch  SU(3): Latency=1
  Successors:
   val SU(6): Latency=15 Reg=%vreg16
   ch  SU(6): Latency=0

SU(5):   %vreg17<def> = ADDI %zero, 4; GR32Bit:%vreg17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
   val SU(6): Latency=4 Reg=%vreg17

SU(6):   SW %vreg17, %vreg16, 16; mem:ST4[%19] GR32Bit:%vreg17,%vreg16
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 36
  Height             : 0
  Predecessors:
   val SU(4): Latency=15 Reg=%vreg16
   val SU(5): Latency=4 Reg=%vreg17
   ch  SU(4): Latency=0
   ch  SU(3): Latency=0

Pick node SU(5)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg17<def> = ADDI %zero, 4; GR32Bit:%vreg17
handleMove 1500B -> 1456B: %vreg17<def> = ADDI %zero, 4; GR32Bit:%vreg17
     %vreg17:	[1500r,1508r:0)  0@1500r
        -->	[1456r,1508r:0)  0@1456r
     zero:	[1388r,1388d:7)[1396r,1396d:6)[1404r,1404d:5)[1412r,1412d:4)[1420r,1420d:3)[1428r,1428d:2)[1436r,1436d:1)[1444r,1444d:0)  0@1444r 1@1436r 2@1428r 3@1420r 4@1412r 5@1404r 6@1396r 7@1388r
        -->	[1388r,1388d:7)[1396r,1396d:6)[1404r,1404d:5)[1412r,1412d:4)[1420r,1420d:3)[1428r,1428d:2)[1436r,1436d:1)[1444r,1444d:0)  0@1444r 1@1436r 2@1428r 3@1420r 4@1412r 5@1404r 6@1396r 7@1388r
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg13<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg13
Pick node SU(2)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg15<def> = ADDI %zero, 16; GR32Bit:%vreg15
handleMove 1476B -> 1464B: %vreg15<def> = ADDI %zero, 16; GR32Bit:%vreg15
     %vreg15:	[1476r,1484r:0)  0@1476r
        -->	[1464r,1484r:0)  0@1464r
     zero:	[1388r,1388d:7)[1396r,1396d:6)[1404r,1404d:5)[1412r,1412d:4)[1420r,1420d:3)[1428r,1428d:2)[1436r,1436d:1)[1444r,1444d:0)  0@1444r 1@1436r 2@1428r 3@1420r 4@1412r 5@1404r 6@1396r 7@1388r
        -->	[1388r,1388d:7)[1396r,1396d:6)[1404r,1404d:5)[1412r,1412d:4)[1420r,1420d:3)[1428r,1428d:2)[1436r,1436d:1)[1444r,1444d:0)  0@1444r 1@1436r 2@1428r 3@1420r 4@1412r 5@1404r 6@1396r 7@1388r
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg14<def> = LW %vreg13, 0; mem:LD4[%2] GR32Bit:%vreg14,%vreg13
Pick node SU(3)  ILP: 4 / 21 = 0.190476 Tree: 0 @0
Scheduling SW %vreg15, %vreg14, 20; mem:ST4[%17] GR32Bit:%vreg15,%vreg14
Pick node SU(4)  ILP: 1 / 22 = 0.0454545 Tree: 1 @0
Scheduling %vreg16<def> = LW %vreg13, 0; mem:LD4[%2] GR32Bit:%vreg16,%vreg13
Pick node SU(6)  ILP: 3 / 37 = 0.0810811 Tree: 1 @0
Scheduling SW %vreg17, %vreg16, 16; mem:ST4[%19] GR32Bit:%vreg17,%vreg16
*** Final schedule for BB#1 ***
SU(5):   %vreg17<def> = ADDI %zero, 4; GR32Bit:%vreg17
SU(0):   %vreg13<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg13
SU(2):   %vreg15<def> = ADDI %zero, 16; GR32Bit:%vreg15
SU(1):   %vreg14<def> = LW %vreg13, 0; mem:LD4[%2] GR32Bit:%vreg14,%vreg13
SU(3):   SW %vreg15, %vreg14, 20; mem:ST4[%17] GR32Bit:%vreg15,%vreg14
SU(4):   %vreg16<def> = LW %vreg13, 0; mem:LD4[%2] GR32Bit:%vreg16,%vreg13
SU(6):   SW %vreg17, %vreg16, 16; mem:ST4[%19] GR32Bit:%vreg17,%vreg16

Partitioning instructions of the region into multiple CEs
instr:  %vreg17<def> = ADDI %zero, 4; GR32Bit:%vreg17
instr:  %vreg13<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg13
instr:  %vreg15<def> = ADDI %zero, 16; GR32Bit:%vreg15
instr:  %vreg14<def> = LW %vreg13, 0; mem:LD4[%2] GR32Bit:%vreg14,%vreg13
instr:  SW %vreg15, %vreg14, 20; mem:ST4[%17] GR32Bit:%vreg15,%vreg14
instr:  %vreg16<def> = LW %vreg13, 0; mem:LD4[%2] GR32Bit:%vreg16,%vreg13
instr:  SW %vreg17, %vreg16, 16; mem:ST4[%19] GR32Bit:%vreg17,%vreg16
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
After Shuffling regions of basic block, state of BB#1:
BB#1: derived from LLVM BB %running_protection3.if.then
    Predecessors according to CFG: BB#0
	%vreg17<def> = ADDI %zero, 4; GR32Bit:%vreg17
	%vreg13<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg13
	%vreg15<def> = ADDI %zero, 16; GR32Bit:%vreg15
	%vreg14<def> = LW %vreg13, 0; mem:LD4[%2] GR32Bit:%vreg14,%vreg13
	SW %vreg15, %vreg14, 20; mem:ST4[%17] GR32Bit:%vreg15,%vreg14
	%vreg16<def> = LW %vreg13, 0; mem:LD4[%2] GR32Bit:%vreg16,%vreg13
	SW %vreg17, %vreg16, 16; mem:ST4[%19] GR32Bit:%vreg17,%vreg16
    Successors according to CFG: BB#2
Creating pHyperOp bundles for CEs for bb1
starting at   %vreg17<def> = ADDI %zero, 4; GR32Bit:%vreg17

*** Renumbered SlotIndexes 1456-1864 ***
starting at   %zero<def> = ADDI %zero, 0
starting at   %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 1468-1876 ***
starting at   %zero<def> = ADDI %zero, 0
After bundling, state of BB1:BB#1: derived from LLVM BB %running_protection3.if.then
    Predecessors according to CFG: BB#0
	%vreg17<def> = ADDI %zero, 4; GR32Bit:%vreg17
	  * %vreg13<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg13
	  * %vreg15<def> = ADDI %zero, 16; GR32Bit:%vreg15
	  * %vreg14<def> = LW %vreg13, 0; mem:LD4[%2] GR32Bit:%vreg14,%vreg13
	  * SW %vreg15, %vreg14, 20; mem:ST4[%17] GR32Bit:%vreg15,%vreg14
	  * %vreg16<def> = LW %vreg13, 0; mem:LD4[%2] GR32Bit:%vreg16,%vreg13
	  * SW %vreg17, %vreg16, 16; mem:ST4[%19] GR32Bit:%vreg17,%vreg16
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#2

-------------
Starting new basic block BB#2
********** MI Scheduling **********
running_protection3:BB#2 running_protection3.if.end
  From: JAL <BB#3>
    To: JAL <BB#3>
 Remaining: 12
Max Pressure: Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 0
Excess PSets: 
0 subtrees:
*** Final schedule for BB#2 ***

Partitioning instructions of the region into multiple CEs

*** Renumbered SlotIndexes 1656-1888 ***

*** Renumbered SlotIndexes 1668-1900 ***

*** Renumbered SlotIndexes 1680-1912 ***

*** Renumbered SlotIndexes 1692-1924 ***

*** Renumbered SlotIndexes 1704-1936 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
********** MI Scheduling **********
running_protection3:BB#2 running_protection3.if.end
  From: %vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
    To: BNE <BB#4>, %vreg28, %zero; GR32Bit:%vreg28
 Remaining: 0
Max Pressure: FP32Bit=3
GR32Bit=1
Live In: 
Live Out: 
FP32BitLimit 32 Actual 3
GR32BitLimit 32 Actual 1
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 0
  SU(5) in tree 0
  SU(6) in tree 0
  SU(7) in tree 0
  SU(8) in tree 0
  SU(9) in tree 0
  SU(10) in tree 0
SU(0):   %vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 45
  Successors:
   val SU(1): Latency=5 Reg=%vreg18

SU(1):   %vreg19<def> = LW %vreg18, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 40
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg18
  Successors:
   val SU(2): Latency=15 Reg=%vreg19

SU(2):   %vreg20<def> = LW %vreg19, 8; mem:LD4[%21] GR32Bit:%vreg20,%vreg19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 20
  Height             : 25
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg19
  Successors:
   val SU(3): Latency=15 Reg=%vreg20

SU(3):   %vreg21<def> = FCVT_S_W_RDY %vreg20; FP32Bit:%vreg21 GR32Bit:%vreg20
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 35
  Height             : 10
  Predecessors:
   val SU(2): Latency=15 Reg=%vreg20
  Successors:
   val SU(10): Latency=5 Reg=%vreg21

SU(4):   %vreg22<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
   val SU(5): Latency=5 Reg=%vreg22

SU(5):   %vreg23<def> = FLW %vreg22, 0; mem:LD4[%4] FP32Bit:%vreg23 GR32Bit:%vreg22
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 30
  Predecessors:
   val SU(4): Latency=5 Reg=%vreg22
  Successors:
   val SU(6): Latency=15 Reg=%vreg23

SU(6):   %vreg24<def> = FADD_S_RDY %vreg23, %vreg23; FP32Bit:%vreg24,%vreg23,%vreg23
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 15
  Predecessors:
   val SU(5): Latency=15 Reg=%vreg23
  Successors:
   val SU(9): Latency=5 Reg=%vreg24

SU(7):   %vreg25<def> = ADDI %zero, 1135542272; GR32Bit:%vreg25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
   val SU(8): Latency=4 Reg=%vreg25

SU(8):   %vreg27<def> = COPY %vreg25; FP32Bit:%vreg27 GR32Bit:%vreg25
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 10
  Predecessors:
   val SU(7): Latency=4 Reg=%vreg25
  Successors:
   val SU(9): Latency=0 Reg=%vreg27

SU(9):   %vreg26<def> = FADD_S_RDY %vreg27, %vreg24; FP32Bit:%vreg26,%vreg27,%vreg24
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 10
  Predecessors:
   val SU(6): Latency=5 Reg=%vreg24
   val SU(8): Latency=0 Reg=%vreg27
  Successors:
   val SU(10): Latency=5 Reg=%vreg26

SU(10):   %vreg28<def> = FULE_S %vreg21, %vreg26; GR32Bit:%vreg28 FP32Bit:%vreg21,%vreg26
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 40
  Height             : 5
  Predecessors:
   val SU(3): Latency=5 Reg=%vreg21
   val SU(9): Latency=5 Reg=%vreg26
  Successors:
   val SU(4294967295): Latency=5 Reg=%vreg28

SU(0):   %vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 45
  Successors:
   val SU(1): Latency=5 Reg=%vreg18

SU(1):   %vreg19<def> = LW %vreg18, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 40
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg18
  Successors:
   val SU(2): Latency=15 Reg=%vreg19

SU(2):   %vreg20<def> = LW %vreg19, 8; mem:LD4[%21] GR32Bit:%vreg20,%vreg19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 20
  Height             : 25
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg19
  Successors:
   val SU(3): Latency=15 Reg=%vreg20

SU(3):   %vreg21<def> = FCVT_S_W_RDY %vreg20; FP32Bit:%vreg21 GR32Bit:%vreg20
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 35
  Height             : 10
  Predecessors:
   val SU(2): Latency=15 Reg=%vreg20
  Successors:
   val SU(10): Latency=5 Reg=%vreg21

SU(4):   %vreg22<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
   val SU(5): Latency=5 Reg=%vreg22

SU(5):   %vreg23<def> = FLW %vreg22, 0; mem:LD4[%4] FP32Bit:%vreg23 GR32Bit:%vreg22
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 30
  Predecessors:
   val SU(4): Latency=5 Reg=%vreg22
  Successors:
   val SU(6): Latency=15 Reg=%vreg23

SU(6):   %vreg24<def> = FADD_S_RDY %vreg23, %vreg23; FP32Bit:%vreg24,%vreg23,%vreg23
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 15
  Predecessors:
   val SU(5): Latency=15 Reg=%vreg23
  Successors:
   val SU(9): Latency=5 Reg=%vreg24

SU(7):   %vreg25<def> = ADDI %zero, 1135542272; GR32Bit:%vreg25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
   val SU(8): Latency=4 Reg=%vreg25

SU(8):   %vreg27<def> = COPY %vreg25; FP32Bit:%vreg27 GR32Bit:%vreg25
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 10
  Predecessors:
   val SU(7): Latency=4 Reg=%vreg25
  Successors:
   val SU(9): Latency=0 Reg=%vreg27

SU(9):   %vreg26<def> = FADD_S_RDY %vreg27, %vreg24; FP32Bit:%vreg26,%vreg27,%vreg24
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 10
  Predecessors:
   val SU(6): Latency=5 Reg=%vreg24
   val SU(8): Latency=0 Reg=%vreg27
  Successors:
   val SU(10): Latency=5 Reg=%vreg26

SU(10):   %vreg28<def> = FULE_S %vreg21, %vreg26; GR32Bit:%vreg28 FP32Bit:%vreg21,%vreg26
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 4
  Depth              : 40
  Height             : 5
  Predecessors:
   val SU(3): Latency=5 Reg=%vreg21
   val SU(9): Latency=5 Reg=%vreg26
  Successors:
   val SU(4294967295): Latency=5 Reg=%vreg28

Pick node SU(7)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg25<def> = ADDI %zero, 1135542272; GR32Bit:%vreg25
handleMove 1612B -> 1552B: %vreg25<def> = ADDI %zero, 1135542272; GR32Bit:%vreg25
     %vreg25:	[1612r,1620r:0)  0@1612r
        -->	[1552r,1620r:0)  0@1552r
     zero:	[1388r,1388d:7)[1396r,1396d:6)[1404r,1404d:5)[1412r,1412d:4)[1420r,1420d:3)[1428r,1428d:2)[1436r,1436d:1)[1444r,1444d:0)  0@1444r 1@1436r 2@1428r 3@1420r 4@1412r 5@1404r 6@1396r 7@1388r
        -->	[1388r,1388d:7)[1396r,1396d:6)[1404r,1404d:5)[1412r,1412d:4)[1420r,1420d:3)[1428r,1428d:2)[1436r,1436d:1)[1444r,1444d:0)  0@1444r 1@1436r 2@1428r 3@1420r 4@1412r 5@1404r 6@1396r 7@1388r
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
Pick node SU(4)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg22<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg22
handleMove 1588B -> 1560B: %vreg22<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg22
     %vreg22:	[1588r,1596r:0)  0@1588r
        -->	[1560r,1596r:0)  0@1560r
     t5:	EMPTY
        -->	EMPTY
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg19<def> = LW %vreg18, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
Pick node SU(5)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg23<def> = FLW %vreg22, 0; mem:LD4[%4] FP32Bit:%vreg23 GR32Bit:%vreg22
handleMove 1596B -> 1568B: %vreg23<def> = FLW %vreg22, 0; mem:LD4[%4] FP32Bit:%vreg23 GR32Bit:%vreg22
     %vreg23:	[1596r,1604r:0)  0@1596r
        -->	[1568r,1604r:0)  0@1568r
     %vreg22:	[1560r,1596r:0)  0@1560r
        -->	[1560r,1568r:0)  0@1560r
Pick node SU(8)  ILP: 1 / 5 = 0.2 Tree: 0 @0
Scheduling %vreg27<def> = COPY %vreg25; FP32Bit:%vreg27 GR32Bit:%vreg25

*** Renumbered SlotIndexes 1568-1976 ***
handleMove 1632B -> 1576B: %vreg27<def> = COPY %vreg25; FP32Bit:%vreg27 GR32Bit:%vreg25
     %vreg27:	[1632r,1640r:0)  0@1632r
        -->	[1576r,1640r:0)  0@1576r
     %vreg25:	[1552r,1632r:0)  0@1552r
        -->	[1552r,1576r:0)  0@1552r
Pick node SU(2)  ILP: 3 / 21 = 0.142857 Tree: 0 @0
Scheduling %vreg20<def> = LW %vreg19, 8; mem:LD4[%21] GR32Bit:%vreg20,%vreg19
Pick node SU(6)  ILP: 3 / 21 = 0.142857 Tree: 0 @0
Scheduling %vreg24<def> = FADD_S_RDY %vreg23, %vreg23; FP32Bit:%vreg24,%vreg23,%vreg23
handleMove 1616B -> 1588B: %vreg24<def> = FADD_S_RDY %vreg23, %vreg23; FP32Bit:%vreg24,%vreg23,%vreg23
     %vreg24:	[1616r,1640r:0)  0@1616r
        -->	[1588r,1640r:0)  0@1588r
     %vreg23:	[1568r,1616r:0)  0@1568r
        -->	[1568r,1588r:0)  0@1568r
Pick node SU(9)  ILP: 5 / 26 = 0.192308 Tree: 0 @0
Scheduling %vreg26<def> = FADD_S_RDY %vreg27, %vreg24; FP32Bit:%vreg26,%vreg27,%vreg24

*** Renumbered SlotIndexes 1588-1988 ***
handleMove 1652B -> 1596B: %vreg26<def> = FADD_S_RDY %vreg27, %vreg24; FP32Bit:%vreg26,%vreg27,%vreg24
     %vreg26:	[1652r,1660r:0)  0@1652r
        -->	[1596r,1660r:0)  0@1596r
     %vreg27:	[1576r,1652r:0)  0@1576r
        -->	[1576r,1596r:0)  0@1576r
     %vreg24:	[1588r,1652r:0)  0@1588r
        -->	[1588r,1596r:0)  0@1588r
Pick node SU(3)  ILP: 4 / 36 = 0.111111 Tree: 0 @0
Scheduling %vreg21<def> = FCVT_S_W_RDY %vreg20; FP32Bit:%vreg21 GR32Bit:%vreg20
Pick node SU(10)  ILP: 10 / 41 = 0.243902 Tree: 0 @0
Scheduling %vreg28<def> = FULE_S %vreg21, %vreg26; GR32Bit:%vreg28 FP32Bit:%vreg21,%vreg26
*** Final schedule for BB#2 ***
SU(7):   %vreg25<def> = ADDI %zero, 1135542272; GR32Bit:%vreg25
SU(0):   %vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
SU(4):   %vreg22<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg22
SU(1):   %vreg19<def> = LW %vreg18, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
SU(5):   %vreg23<def> = FLW %vreg22, 0; mem:LD4[%4] FP32Bit:%vreg23 GR32Bit:%vreg22
SU(8):   %vreg27<def> = COPY %vreg25; FP32Bit:%vreg27 GR32Bit:%vreg25
SU(2):   %vreg20<def> = LW %vreg19, 8; mem:LD4[%21] GR32Bit:%vreg20,%vreg19
SU(6):   %vreg24<def> = FADD_S_RDY %vreg23, %vreg23; FP32Bit:%vreg24,%vreg23,%vreg23
SU(9):   %vreg26<def> = FADD_S_RDY %vreg27, %vreg24; FP32Bit:%vreg26,%vreg27,%vreg24
SU(3):   %vreg21<def> = FCVT_S_W_RDY %vreg20; FP32Bit:%vreg21 GR32Bit:%vreg20
SU(10):   %vreg28<def> = FULE_S %vreg21, %vreg26; GR32Bit:%vreg28 FP32Bit:%vreg21,%vreg26

Partitioning instructions of the region into multiple CEs
instr:  %vreg25<def> = ADDI %zero, 1135542272; GR32Bit:%vreg25
instr:  %vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
instr:  %vreg22<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg22
instr:  %vreg19<def> = LW %vreg18, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
instr:  %vreg23<def> = FLW %vreg22, 0; mem:LD4[%4] FP32Bit:%vreg23 GR32Bit:%vreg22
instr:  %vreg27<def> = COPY %vreg25; FP32Bit:%vreg27 GR32Bit:%vreg25
instr:  %vreg20<def> = LW %vreg19, 8; mem:LD4[%21] GR32Bit:%vreg20,%vreg19
instr:  %vreg24<def> = FADD_S_RDY %vreg23, %vreg23; FP32Bit:%vreg24,%vreg23,%vreg23
instr:  %vreg26<def> = FADD_S_RDY %vreg27, %vreg24; FP32Bit:%vreg26,%vreg27,%vreg24
instr:  %vreg21<def> = FCVT_S_W_RDY %vreg20; FP32Bit:%vreg21 GR32Bit:%vreg20
instr:  %vreg28<def> = FULE_S %vreg21, %vreg26; GR32Bit:%vreg28 FP32Bit:%vreg21,%vreg26

*** Renumbered SlotIndexes 1664-2000 ***

*** Renumbered SlotIndexes 1676-2012 ***

*** Renumbered SlotIndexes 1688-2024 ***

*** Renumbered SlotIndexes 1700-2036 ***

*** Renumbered SlotIndexes 1712-2048 ***

*** Renumbered SlotIndexes 1724-2060 ***

*** Renumbered SlotIndexes 1744-2072 ***

*** Renumbered SlotIndexes 1756-2084 ***

*** Renumbered SlotIndexes 1768-2096 ***

*** Renumbered SlotIndexes 1780-2108 ***

*** Renumbered SlotIndexes 1792-2120 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs

renaming register of operand that belongs to ce 1 but was defined in0
%vreg28<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg28<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg28<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg28
renaming register of operand that belongs to ce 2 but was defined in0
%vreg28
renaming register of operand that belongs to ce 3 but was defined in0
%vreg28After Shuffling regions of basic block, state of BB#2:
BB#2: derived from LLVM BB %running_protection3.if.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg25<def> = ADDI %zero, 1135542272; GR32Bit:%vreg25
	%vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
	%vreg22<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg22
	%vreg19<def> = LW %vreg18, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
	%vreg23<def> = FLW %vreg22, 0; mem:LD4[%4] FP32Bit:%vreg23 GR32Bit:%vreg22
	%vreg27<def> = COPY %vreg25; FP32Bit:%vreg27 GR32Bit:%vreg25
	%vreg20<def> = LW %vreg19, 8; mem:LD4[%21] GR32Bit:%vreg20,%vreg19
	%vreg24<def> = FADD_S_RDY %vreg23, %vreg23; FP32Bit:%vreg24,%vreg23,%vreg23
	%vreg26<def> = FADD_S_RDY %vreg27, %vreg24; FP32Bit:%vreg26,%vreg27,%vreg24
	%vreg21<def> = FCVT_S_W_RDY %vreg20; FP32Bit:%vreg21 GR32Bit:%vreg20
	%vreg28<def> = FULE_S %vreg21, %vreg26; GR32Bit:%vreg28 FP32Bit:%vreg21,%vreg26
	%vreg130<def> = LUI 1; GR32Bit:%vreg130
	WRITEPM %vreg130, %vreg28, 0; GR32Bit:%vreg130,%vreg28
	%vreg132<def> = LUI 2; GR32Bit:%vreg132
	WRITEPM %vreg132, %vreg28, 0; GR32Bit:%vreg132,%vreg28
	%vreg134<def> = LUI 3; GR32Bit:%vreg134
	WRITEPM %vreg134, %vreg28, 0; GR32Bit:%vreg134,%vreg28
	BNE <BB#4>, %vreg28, %zero; GR32Bit:%vreg28
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#3>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg131<def> = LUI 1; GR32Bit:%vreg131
	%vreg136<def> = DREADPM %vreg131, 0; GR32Bit:%vreg136,%vreg131
	BNE <BB#4>, %vreg136, %zero; GR32Bit:%vreg136
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#3>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg133<def> = LUI 2; GR32Bit:%vreg133
	%vreg137<def> = DREADPM %vreg133, 0; GR32Bit:%vreg137,%vreg133
	BNE <BB#4>, %vreg137, %zero; GR32Bit:%vreg137
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#3>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg135<def> = LUI 3; GR32Bit:%vreg135
	%vreg138<def> = DREADPM %vreg135, 0; GR32Bit:%vreg138,%vreg135
	BNE <BB#4>, %vreg138, %zero; GR32Bit:%vreg138
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#3>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#3(16) BB#4(16)

*** Renumbered SlotIndexes 1708-2164 ***

*** Renumbered SlotIndexes 1708-2180 ***

*** Renumbered SlotIndexes 1708-2196 ***

*** Renumbered SlotIndexes 1684-2220 ***

*** Renumbered SlotIndexes 1684-2236 ***

*** Renumbered SlotIndexes 1684-2252 ***

*** Renumbered SlotIndexes 1664-2280 ***

*** Renumbered SlotIndexes 1664-2296 ***

*** Renumbered SlotIndexes 1664-2312 ***

*** Renumbered SlotIndexes 1664-2328 ***

*** Renumbered SlotIndexes 1664-2344 ***
Creating pHyperOp bundles for CEs for bb2
  %vreg131<def> = LUI 1; GR32Bit:%vreg131
starting at   %vreg25<def> = ADDI %zero, 1135542272; GR32Bit:%vreg25
  %vreg133<def> = LUI 2; GR32Bit:%vreg133
starting at   %vreg131<def> = LUI 1; GR32Bit:%vreg131
  %vreg135<def> = LUI 3; GR32Bit:%vreg135
starting at   %vreg133<def> = LUI 2; GR32Bit:%vreg133
starting at   %vreg135<def> = LUI 3; GR32Bit:%vreg135
After bundling, state of BB2:BB#2: derived from LLVM BB %running_protection3.if.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg25<def> = ADDI %zero, 1135542272; GR32Bit:%vreg25
	  * %vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
	  * %vreg22<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg22
	  * %vreg19<def> = LW %vreg18, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
	  * %vreg23<def> = FLW %vreg22, 0; mem:LD4[%4] FP32Bit:%vreg23 GR32Bit:%vreg22
	  * %vreg27<def> = COPY %vreg25; FP32Bit:%vreg27 GR32Bit:%vreg25
	  * %vreg20<def> = LW %vreg19, 8; mem:LD4[%21] GR32Bit:%vreg20,%vreg19
	  * %vreg24<def> = FADD_S_RDY %vreg23, %vreg23; FP32Bit:%vreg24,%vreg23,%vreg23
	  * %vreg26<def> = FADD_S_RDY %vreg27, %vreg24; FP32Bit:%vreg26,%vreg27,%vreg24
	  * %vreg21<def> = FCVT_S_W_RDY %vreg20; FP32Bit:%vreg21 GR32Bit:%vreg20
	  * %vreg28<def> = FULE_S %vreg21, %vreg26; GR32Bit:%vreg28 FP32Bit:%vreg21,%vreg26
	  * %vreg130<def> = LUI 1; GR32Bit:%vreg130
	  * WRITEPM %vreg130, %vreg28, 0; GR32Bit:%vreg130,%vreg28
	  * %vreg132<def> = LUI 2; GR32Bit:%vreg132
	  * WRITEPM %vreg132, %vreg28, 0; GR32Bit:%vreg132,%vreg28
	  * %vreg134<def> = LUI 3; GR32Bit:%vreg134
	  * WRITEPM %vreg134, %vreg28, 0; GR32Bit:%vreg134,%vreg28
	  * BNE <BB#4>, %vreg28, %zero; GR32Bit:%vreg28
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#3>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg131<def> = LUI 1; GR32Bit:%vreg131
	  * %vreg136<def> = DREADPM %vreg131, 0; GR32Bit:%vreg136,%vreg131
	  * BNE <BB#4>, %vreg136, %zero; GR32Bit:%vreg136
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#3>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg133<def> = LUI 2; GR32Bit:%vreg133
	  * %vreg137<def> = DREADPM %vreg133, 0; GR32Bit:%vreg137,%vreg133
	  * BNE <BB#4>, %vreg137, %zero; GR32Bit:%vreg137
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#3>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg135<def> = LUI 3; GR32Bit:%vreg135
	  * %vreg138<def> = DREADPM %vreg135, 0; GR32Bit:%vreg138,%vreg135
	  * BNE <BB#4>, %vreg138, %zero; GR32Bit:%vreg138
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#3>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#3(16) BB#4(16)

-------------
Starting new basic block BB#3
********** MI Scheduling **********
running_protection3:BB#3 running_protection3.if.then7
  From: %vreg29<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg29
    To: End Remaining: 0
Max Pressure: GR32Bit=4
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 4
Excess PSets: 
2 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 1
  SU(3) in tree 0
  SU(4) in tree 0
  SU(5) in tree 1
  SU(6) in tree 1
SU(0):   %vreg29<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg29
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 36
  Successors:
   val SU(5): Latency=5 Reg=%vreg29
   val SU(1): Latency=5 Reg=%vreg29

SU(1):   %vreg30<def> = LW %vreg29, 0; mem:LD4[%2] GR32Bit:%vreg30,%vreg29
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 31
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg29
  Successors:
   val SU(4): Latency=15 Reg=%vreg30
   ch  SU(4): Latency=0

SU(2):   %vreg31<def> = ADDI %zero, 16; GR32Bit:%vreg31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
   val SU(6): Latency=4 Reg=%vreg31

SU(3):   %vreg32<def> = ADDI %zero, 32; GR32Bit:%vreg32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
   val SU(4): Latency=4 Reg=%vreg32

SU(4):   SW %vreg32, %vreg30, 16; mem:ST4[%29] GR32Bit:%vreg32,%vreg30
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 20
  Height             : 16
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg30
   val SU(3): Latency=4 Reg=%vreg32
   ch  SU(1): Latency=0
  Successors:
   ch  SU(6): Latency=0
   ch  SU(5): Latency=1

SU(5):   %vreg33<def> = LW %vreg29, 0; mem:LD4[%2] GR32Bit:%vreg33,%vreg29
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 21
  Height             : 15
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg29
   ch  SU(4): Latency=1
  Successors:
   val SU(6): Latency=15 Reg=%vreg33
   ch  SU(6): Latency=0

SU(6):   SW %vreg31, %vreg33, 20; mem:ST4[%31] GR32Bit:%vreg31,%vreg33
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 36
  Height             : 0
  Predecessors:
   val SU(5): Latency=15 Reg=%vreg33
   val SU(2): Latency=4 Reg=%vreg31
   ch  SU(5): Latency=0
   ch  SU(4): Latency=0

SU(0):   %vreg29<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg29
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 36
  Successors:
   val SU(5): Latency=5 Reg=%vreg29
   val SU(1): Latency=5 Reg=%vreg29

SU(1):   %vreg30<def> = LW %vreg29, 0; mem:LD4[%2] GR32Bit:%vreg30,%vreg29
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 31
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg29
  Successors:
   val SU(4): Latency=15 Reg=%vreg30
   ch  SU(4): Latency=0

SU(2):   %vreg31<def> = ADDI %zero, 16; GR32Bit:%vreg31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
   val SU(6): Latency=4 Reg=%vreg31

SU(3):   %vreg32<def> = ADDI %zero, 32; GR32Bit:%vreg32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
   val SU(4): Latency=4 Reg=%vreg32

SU(4):   SW %vreg32, %vreg30, 16; mem:ST4[%29] GR32Bit:%vreg32,%vreg30
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 20
  Height             : 16
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg30
   val SU(3): Latency=4 Reg=%vreg32
   ch  SU(1): Latency=0
  Successors:
   ch  SU(6): Latency=0
   ch  SU(5): Latency=1

SU(5):   %vreg33<def> = LW %vreg29, 0; mem:LD4[%2] GR32Bit:%vreg33,%vreg29
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 21
  Height             : 15
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg29
   ch  SU(4): Latency=1
  Successors:
   val SU(6): Latency=15 Reg=%vreg33
   ch  SU(6): Latency=0

SU(6):   SW %vreg31, %vreg33, 20; mem:ST4[%31] GR32Bit:%vreg31,%vreg33
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 36
  Height             : 0
  Predecessors:
   val SU(5): Latency=15 Reg=%vreg33
   val SU(2): Latency=4 Reg=%vreg31
   ch  SU(5): Latency=0
   ch  SU(4): Latency=0

Pick node SU(3)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg32<def> = ADDI %zero, 32; GR32Bit:%vreg32
handleMove 2160B -> 2132B: %vreg32<def> = ADDI %zero, 32; GR32Bit:%vreg32
     %vreg32:	[2160r,2168r:0)  0@2160r
        -->	[2132r,2168r:0)  0@2132r
     zero:	[1388r,1388d:7)[1396r,1396d:6)[1404r,1404d:5)[1412r,1412d:4)[1420r,1420d:3)[1428r,1428d:2)[1436r,1436d:1)[1444r,1444d:0)  0@1444r 1@1436r 2@1428r 3@1420r 4@1412r 5@1404r 6@1396r 7@1388r
        -->	[1388r,1388d:7)[1396r,1396d:6)[1404r,1404d:5)[1412r,1412d:4)[1420r,1420d:3)[1428r,1428d:2)[1436r,1436d:1)[1444r,1444d:0)  0@1444r 1@1436r 2@1428r 3@1420r 4@1412r 5@1404r 6@1396r 7@1388r
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg29<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg29
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg30<def> = LW %vreg29, 0; mem:LD4[%2] GR32Bit:%vreg30,%vreg29
Pick node SU(4)  ILP: 4 / 21 = 0.190476 Tree: 0 @0
Scheduling SW %vreg32, %vreg30, 16; mem:ST4[%29] GR32Bit:%vreg32,%vreg30
handleMove 2168B -> 2148B: SW %vreg32, %vreg30, 16; mem:ST4[%29] GR32Bit:%vreg32,%vreg30
     %vreg32:	[2132r,2168r:0)  0@2132r
        -->	[2132r,2148r:0)  0@2132r
     %vreg30:	[2144r,2168r:0)  0@2144r
        -->	[2144r,2148r:0)  0@2144r
Pick node SU(2)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg31<def> = ADDI %zero, 16; GR32Bit:%vreg31
Pick node SU(5)  ILP: 1 / 22 = 0.0454545 Tree: 1 @0
Scheduling %vreg33<def> = LW %vreg29, 0; mem:LD4[%2] GR32Bit:%vreg33,%vreg29
Pick node SU(6)  ILP: 3 / 37 = 0.0810811 Tree: 1 @0
Scheduling SW %vreg31, %vreg33, 20; mem:ST4[%31] GR32Bit:%vreg31,%vreg33
*** Final schedule for BB#3 ***
SU(3):   %vreg32<def> = ADDI %zero, 32; GR32Bit:%vreg32
SU(0):   %vreg29<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg29
SU(1):   %vreg30<def> = LW %vreg29, 0; mem:LD4[%2] GR32Bit:%vreg30,%vreg29
SU(4):   SW %vreg32, %vreg30, 16; mem:ST4[%29] GR32Bit:%vreg32,%vreg30
SU(2):   %vreg31<def> = ADDI %zero, 16; GR32Bit:%vreg31
SU(5):   %vreg33<def> = LW %vreg29, 0; mem:LD4[%2] GR32Bit:%vreg33,%vreg29
SU(6):   SW %vreg31, %vreg33, 20; mem:ST4[%31] GR32Bit:%vreg31,%vreg33

Partitioning instructions of the region into multiple CEs
instr:  %vreg32<def> = ADDI %zero, 32; GR32Bit:%vreg32
instr:  %vreg29<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg29
instr:  %vreg30<def> = LW %vreg29, 0; mem:LD4[%2] GR32Bit:%vreg30,%vreg29
instr:  SW %vreg32, %vreg30, 16; mem:ST4[%29] GR32Bit:%vreg32,%vreg30
instr:  %vreg31<def> = ADDI %zero, 16; GR32Bit:%vreg31
instr:  %vreg33<def> = LW %vreg29, 0; mem:LD4[%2] GR32Bit:%vreg33,%vreg29
instr:  SW %vreg31, %vreg33, 20; mem:ST4[%31] GR32Bit:%vreg31,%vreg33
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
After Shuffling regions of basic block, state of BB#3:
BB#3: derived from LLVM BB %running_protection3.if.then7
    Predecessors according to CFG: BB#2
	%vreg32<def> = ADDI %zero, 32; GR32Bit:%vreg32
	%vreg29<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg29
	%vreg30<def> = LW %vreg29, 0; mem:LD4[%2] GR32Bit:%vreg30,%vreg29
	SW %vreg32, %vreg30, 16; mem:ST4[%29] GR32Bit:%vreg32,%vreg30
	%vreg31<def> = ADDI %zero, 16; GR32Bit:%vreg31
	%vreg33<def> = LW %vreg29, 0; mem:LD4[%2] GR32Bit:%vreg33,%vreg29
	SW %vreg31, %vreg33, 20; mem:ST4[%31] GR32Bit:%vreg31,%vreg33
    Successors according to CFG: BB#4
Creating pHyperOp bundles for CEs for bb3
starting at   %vreg32<def> = ADDI %zero, 32; GR32Bit:%vreg32

*** Renumbered SlotIndexes 2132-2364 ***
starting at   %zero<def> = ADDI %zero, 0
starting at   %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 2144-2376 ***
starting at   %zero<def> = ADDI %zero, 0
After bundling, state of BB3:BB#3: derived from LLVM BB %running_protection3.if.then7
    Predecessors according to CFG: BB#2
	%vreg32<def> = ADDI %zero, 32; GR32Bit:%vreg32
	  * %vreg29<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg29
	  * %vreg30<def> = LW %vreg29, 0; mem:LD4[%2] GR32Bit:%vreg30,%vreg29
	  * SW %vreg32, %vreg30, 16; mem:ST4[%29] GR32Bit:%vreg32,%vreg30
	  * %vreg31<def> = ADDI %zero, 16; GR32Bit:%vreg31
	  * %vreg33<def> = LW %vreg29, 0; mem:LD4[%2] GR32Bit:%vreg33,%vreg29
	  * SW %vreg31, %vreg33, 20; mem:ST4[%31] GR32Bit:%vreg31,%vreg33
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#4

-------------
Starting new basic block BB#4
********** MI Scheduling **********
running_protection3:BB#4 running_protection3.if.end10
  From: JAL <BB#5>
    To: JAL <BB#5>
 Remaining: 5
Max Pressure: Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 0
Excess PSets: 
0 subtrees:
*** Final schedule for BB#4 ***

Partitioning instructions of the region into multiple CEs

*** Renumbered SlotIndexes 2276-2388 ***

*** Renumbered SlotIndexes 2288-2400 ***

*** Renumbered SlotIndexes 2300-2412 ***

*** Renumbered SlotIndexes 2312-2424 ***

*** Renumbered SlotIndexes 2324-2436 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
********** MI Scheduling **********
running_protection3:BB#4 running_protection3.if.end10
  From: %vreg34<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg34
    To: BLT <BB#6>, %vreg36, %vreg37; GR32Bit:%vreg36,%vreg37
 Remaining: 0
Max Pressure: GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 2
Excess PSets: 
2 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 1
SU(0):   %vreg34<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg34
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
   val SU(1): Latency=5 Reg=%vreg34

SU(1):   %vreg35<def> = LW %vreg34, 0; mem:LD4[%2] GR32Bit:%vreg35,%vreg34
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 30
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg34
  Successors:
   val SU(2): Latency=15 Reg=%vreg35

SU(2):   %vreg36<def> = LW %vreg35, 12; mem:LD4[%33] GR32Bit:%vreg36,%vreg35
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 20
  Height             : 15
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg35
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg36

SU(3):   %vreg37<def> = ADDI %zero, 117; GR32Bit:%vreg37
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(4294967295): Latency=5 Reg=%vreg37

SU(0):   %vreg34<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg34
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
   val SU(1): Latency=5 Reg=%vreg34

SU(1):   %vreg35<def> = LW %vreg34, 0; mem:LD4[%2] GR32Bit:%vreg35,%vreg34
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 30
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg34
  Successors:
   val SU(2): Latency=15 Reg=%vreg35

SU(2):   %vreg36<def> = LW %vreg35, 12; mem:LD4[%33] GR32Bit:%vreg36,%vreg35
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 14
  Depth              : 20
  Height             : 15
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg35
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg36

SU(3):   %vreg37<def> = ADDI %zero, 117; GR32Bit:%vreg37
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(4294967295): Latency=5 Reg=%vreg37

Pick node SU(3)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg37<def> = ADDI %zero, 117; GR32Bit:%vreg37
handleMove 2256B -> 2228B: %vreg37<def> = ADDI %zero, 117; GR32Bit:%vreg37
     %vreg37:	[2256r,2264r:0)  0@2256r
        -->	[2228r,2264r:0)  0@2228r
     zero:	[1388r,1388d:7)[1396r,1396d:6)[1404r,1404d:5)[1412r,1412d:4)[1420r,1420d:3)[1428r,1428d:2)[1436r,1436d:1)[1444r,1444d:0)  0@1444r 1@1436r 2@1428r 3@1420r 4@1412r 5@1404r 6@1396r 7@1388r
        -->	[1388r,1388d:7)[1396r,1396d:6)[1404r,1404d:5)[1412r,1412d:4)[1420r,1420d:3)[1428r,1428d:2)[1436r,1436d:1)[1444r,1444d:0)  0@1444r 1@1436r 2@1428r 3@1420r 4@1412r 5@1404r 6@1396r 7@1388r
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg34<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg34
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg35<def> = LW %vreg34, 0; mem:LD4[%2] GR32Bit:%vreg35,%vreg34
Pick node SU(2)  ILP: 3 / 21 = 0.142857 Tree: 0 @0
Scheduling %vreg36<def> = LW %vreg35, 12; mem:LD4[%33] GR32Bit:%vreg36,%vreg35
*** Final schedule for BB#4 ***
SU(3):   %vreg37<def> = ADDI %zero, 117; GR32Bit:%vreg37
SU(0):   %vreg34<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg34
SU(1):   %vreg35<def> = LW %vreg34, 0; mem:LD4[%2] GR32Bit:%vreg35,%vreg34
SU(2):   %vreg36<def> = LW %vreg35, 12; mem:LD4[%33] GR32Bit:%vreg36,%vreg35

Partitioning instructions of the region into multiple CEs
instr:  %vreg37<def> = ADDI %zero, 117; GR32Bit:%vreg37
instr:  %vreg34<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg34
instr:  %vreg35<def> = LW %vreg34, 0; mem:LD4[%2] GR32Bit:%vreg35,%vreg34
instr:  %vreg36<def> = LW %vreg35, 12; mem:LD4[%33] GR32Bit:%vreg36,%vreg35

*** Renumbered SlotIndexes 2252-2476 ***

*** Renumbered SlotIndexes 2264-2488 ***

*** Renumbered SlotIndexes 2276-2500 ***

*** Renumbered SlotIndexes 2288-2512 ***

*** Renumbered SlotIndexes 2300-2524 ***

*** Renumbered SlotIndexes 2312-2536 ***

*** Renumbered SlotIndexes 2324-2548 ***

*** Renumbered SlotIndexes 2336-2560 ***

*** Renumbered SlotIndexes 2348-2572 ***

*** Renumbered SlotIndexes 2376-2584 ***

*** Renumbered SlotIndexes 2388-2596 ***

*** Renumbered SlotIndexes 2400-2608 ***

*** Renumbered SlotIndexes 2412-2620 ***

*** Renumbered SlotIndexes 2424-2632 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs

renaming register of operand that belongs to ce 1 but was defined in0
%vreg36<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg36<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg36<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg37<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg37<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg37<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg36
renaming register of operand that belongs to ce 1 but was defined in0
%vreg37
renaming register of operand that belongs to ce 2 but was defined in0
%vreg36
renaming register of operand that belongs to ce 2 but was defined in0
%vreg37
renaming register of operand that belongs to ce 3 but was defined in0
%vreg36
renaming register of operand that belongs to ce 3 but was defined in0
%vreg37After Shuffling regions of basic block, state of BB#4:
BB#4: derived from LLVM BB %running_protection3.if.end10
    Predecessors according to CFG: BB#2 BB#3
	%vreg37<def> = ADDI %zero, 117; GR32Bit:%vreg37
	%vreg34<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg34
	%vreg35<def> = LW %vreg34, 0; mem:LD4[%2] GR32Bit:%vreg35,%vreg34
	%vreg36<def> = LW %vreg35, 12; mem:LD4[%33] GR32Bit:%vreg36,%vreg35
	%vreg139<def> = LUI 1; GR32Bit:%vreg139
	WRITEPM %vreg139, %vreg36, 0; GR32Bit:%vreg139,%vreg36
	%vreg141<def> = LUI 2; GR32Bit:%vreg141
	WRITEPM %vreg141, %vreg36, 0; GR32Bit:%vreg141,%vreg36
	%vreg143<def> = LUI 3; GR32Bit:%vreg143
	WRITEPM %vreg143, %vreg36, 0; GR32Bit:%vreg143,%vreg36
	WRITEPM %vreg139, %vreg37, 4; GR32Bit:%vreg139,%vreg37
	WRITEPM %vreg141, %vreg37, 4; GR32Bit:%vreg141,%vreg37
	WRITEPM %vreg143, %vreg37, 4; GR32Bit:%vreg143,%vreg37
	BLT <BB#6>, %vreg36, %vreg37; GR32Bit:%vreg36,%vreg37
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#5>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg140<def> = LUI 1; GR32Bit:%vreg140
	%vreg145<def> = DREADPM %vreg140, 0; GR32Bit:%vreg145,%vreg140
	%vreg148<def> = DREADPM %vreg140, 4; GR32Bit:%vreg148,%vreg140
	BLT <BB#6>, %vreg145, %vreg148; GR32Bit:%vreg145,%vreg148
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#5>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg142<def> = LUI 2; GR32Bit:%vreg142
	%vreg146<def> = DREADPM %vreg142, 0; GR32Bit:%vreg146,%vreg142
	%vreg149<def> = DREADPM %vreg142, 4; GR32Bit:%vreg149,%vreg142
	BLT <BB#6>, %vreg146, %vreg149; GR32Bit:%vreg146,%vreg149
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#5>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg144<def> = LUI 3; GR32Bit:%vreg144
	%vreg147<def> = DREADPM %vreg144, 0; GR32Bit:%vreg147,%vreg144
	%vreg150<def> = DREADPM %vreg144, 4; GR32Bit:%vreg150,%vreg144
	BLT <BB#6>, %vreg147, %vreg150; GR32Bit:%vreg147,%vreg150
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#5>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#5(16) BB#6(16)

*** Renumbered SlotIndexes 2296-2688 ***

*** Renumbered SlotIndexes 2296-2704 ***

*** Renumbered SlotIndexes 2296-2720 ***

*** Renumbered SlotIndexes 2296-2736 ***

*** Renumbered SlotIndexes 2272-2752 ***

*** Renumbered SlotIndexes 2272-2768 ***

*** Renumbered SlotIndexes 2272-2784 ***

*** Renumbered SlotIndexes 2272-2800 ***

*** Renumbered SlotIndexes 2252-2820 ***

*** Renumbered SlotIndexes 2252-2836 ***

*** Renumbered SlotIndexes 2252-2852 ***

*** Renumbered SlotIndexes 2252-2868 ***

*** Renumbered SlotIndexes 2252-2884 ***

*** Renumbered SlotIndexes 2252-2900 ***

*** Renumbered SlotIndexes 2252-2916 ***
Creating pHyperOp bundles for CEs for bb4
  %vreg140<def> = LUI 1; GR32Bit:%vreg140
starting at   %vreg37<def> = ADDI %zero, 117; GR32Bit:%vreg37
  %vreg142<def> = LUI 2; GR32Bit:%vreg142
starting at   %vreg140<def> = LUI 1; GR32Bit:%vreg140
  %vreg144<def> = LUI 3; GR32Bit:%vreg144
starting at   %vreg142<def> = LUI 2; GR32Bit:%vreg142
starting at   %vreg144<def> = LUI 3; GR32Bit:%vreg144
After bundling, state of BB4:BB#4: derived from LLVM BB %running_protection3.if.end10
    Predecessors according to CFG: BB#2 BB#3
	%vreg37<def> = ADDI %zero, 117; GR32Bit:%vreg37
	  * %vreg34<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg34
	  * %vreg35<def> = LW %vreg34, 0; mem:LD4[%2] GR32Bit:%vreg35,%vreg34
	  * %vreg36<def> = LW %vreg35, 12; mem:LD4[%33] GR32Bit:%vreg36,%vreg35
	  * %vreg139<def> = LUI 1; GR32Bit:%vreg139
	  * WRITEPM %vreg139, %vreg36, 0; GR32Bit:%vreg139,%vreg36
	  * %vreg141<def> = LUI 2; GR32Bit:%vreg141
	  * WRITEPM %vreg141, %vreg36, 0; GR32Bit:%vreg141,%vreg36
	  * %vreg143<def> = LUI 3; GR32Bit:%vreg143
	  * WRITEPM %vreg143, %vreg36, 0; GR32Bit:%vreg143,%vreg36
	  * WRITEPM %vreg139, %vreg37, 4; GR32Bit:%vreg139,%vreg37
	  * WRITEPM %vreg141, %vreg37, 4; GR32Bit:%vreg141,%vreg37
	  * WRITEPM %vreg143, %vreg37, 4; GR32Bit:%vreg143,%vreg37
	  * BLT <BB#6>, %vreg36, %vreg37; GR32Bit:%vreg36,%vreg37
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#5>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg140<def> = LUI 1; GR32Bit:%vreg140
	  * %vreg145<def> = DREADPM %vreg140, 0; GR32Bit:%vreg145,%vreg140
	  * %vreg148<def> = DREADPM %vreg140, 4; GR32Bit:%vreg148,%vreg140
	  * BLT <BB#6>, %vreg145, %vreg148; GR32Bit:%vreg145,%vreg148
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#5>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg142<def> = LUI 2; GR32Bit:%vreg142
	  * %vreg146<def> = DREADPM %vreg142, 0; GR32Bit:%vreg146,%vreg142
	  * %vreg149<def> = DREADPM %vreg142, 4; GR32Bit:%vreg149,%vreg142
	  * BLT <BB#6>, %vreg146, %vreg149; GR32Bit:%vreg146,%vreg149
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#5>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg144<def> = LUI 3; GR32Bit:%vreg144
	  * %vreg147<def> = DREADPM %vreg144, 0; GR32Bit:%vreg147,%vreg144
	  * %vreg150<def> = DREADPM %vreg144, 4; GR32Bit:%vreg150,%vreg144
	  * BLT <BB#6>, %vreg147, %vreg150; GR32Bit:%vreg147,%vreg150
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#5>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#5(16) BB#6(16)

-------------
Starting new basic block BB#5
********** MI Scheduling **********
running_protection3:BB#5 running_protection3.if.then14
  From: %vreg38<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg38
    To: End Remaining: 0
Max Pressure: GR32Bit=3
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 3
Excess PSets: 
2 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 1
  SU(5) in tree 1
SU(0):   %vreg38<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg38
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 36
  Successors:
   val SU(4): Latency=5 Reg=%vreg38
   val SU(1): Latency=5 Reg=%vreg38

SU(1):   %vreg39<def> = LW %vreg38, 0; mem:LD4[%2] GR32Bit:%vreg39,%vreg38
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 31
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg38
  Successors:
   val SU(3): Latency=15 Reg=%vreg39
   ch  SU(3): Latency=0

SU(2):   %vreg40<def> = ADDI %zero, 16; GR32Bit:%vreg40
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
   val SU(5): Latency=4 Reg=%vreg40
   val SU(3): Latency=4 Reg=%vreg40

SU(3):   SW %vreg40, %vreg39, 20; mem:ST4[%37] GR32Bit:%vreg40,%vreg39
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 20
  Height             : 16
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg39
   val SU(2): Latency=4 Reg=%vreg40
   ch  SU(1): Latency=0
  Successors:
   ch  SU(5): Latency=0
   ch  SU(4): Latency=1

SU(4):   %vreg41<def> = LW %vreg38, 0; mem:LD4[%2] GR32Bit:%vreg41,%vreg38
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 21
  Height             : 15
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg38
   ch  SU(3): Latency=1
  Successors:
   val SU(5): Latency=15 Reg=%vreg41
   ch  SU(5): Latency=0

SU(5):   SW %vreg40, %vreg41, 16; mem:ST4[%39] GR32Bit:%vreg40,%vreg41
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 36
  Height             : 0
  Predecessors:
   val SU(4): Latency=15 Reg=%vreg41
   val SU(2): Latency=4 Reg=%vreg40
   ch  SU(4): Latency=0
   ch  SU(3): Latency=0

SU(0):   %vreg38<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg38
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 36
  Successors:
   val SU(4): Latency=5 Reg=%vreg38
   val SU(1): Latency=5 Reg=%vreg38

SU(1):   %vreg39<def> = LW %vreg38, 0; mem:LD4[%2] GR32Bit:%vreg39,%vreg38
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 31
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg38
  Successors:
   val SU(3): Latency=15 Reg=%vreg39
   ch  SU(3): Latency=0

SU(2):   %vreg40<def> = ADDI %zero, 16; GR32Bit:%vreg40
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
   val SU(5): Latency=4 Reg=%vreg40
   val SU(3): Latency=4 Reg=%vreg40

SU(3):   SW %vreg40, %vreg39, 20; mem:ST4[%37] GR32Bit:%vreg40,%vreg39
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 20
  Height             : 16
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg39
   val SU(2): Latency=4 Reg=%vreg40
   ch  SU(1): Latency=0
  Successors:
   ch  SU(5): Latency=0
   ch  SU(4): Latency=1

SU(4):   %vreg41<def> = LW %vreg38, 0; mem:LD4[%2] GR32Bit:%vreg41,%vreg38
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 21
  Height             : 15
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg38
   ch  SU(3): Latency=1
  Successors:
   val SU(5): Latency=15 Reg=%vreg41
   ch  SU(5): Latency=0

SU(5):   SW %vreg40, %vreg41, 16; mem:ST4[%39] GR32Bit:%vreg40,%vreg41
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 36
  Height             : 0
  Predecessors:
   val SU(4): Latency=15 Reg=%vreg41
   val SU(2): Latency=4 Reg=%vreg40
   ch  SU(4): Latency=0
   ch  SU(3): Latency=0

Pick node SU(2)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg40<def> = ADDI %zero, 16; GR32Bit:%vreg40
handleMove 2844B -> 2824B: %vreg40<def> = ADDI %zero, 16; GR32Bit:%vreg40
     %vreg40:	[2844r,2868r:0)  0@2844r
        -->	[2824r,2868r:0)  0@2824r
     zero:	[1388r,1388d:7)[1396r,1396d:6)[1404r,1404d:5)[1412r,1412d:4)[1420r,1420d:3)[1428r,1428d:2)[1436r,1436d:1)[1444r,1444d:0)  0@1444r 1@1436r 2@1428r 3@1420r 4@1412r 5@1404r 6@1396r 7@1388r
        -->	[1388r,1388d:7)[1396r,1396d:6)[1404r,1404d:5)[1412r,1412d:4)[1420r,1420d:3)[1428r,1428d:2)[1436r,1436d:1)[1444r,1444d:0)  0@1444r 1@1436r 2@1428r 3@1420r 4@1412r 5@1404r 6@1396r 7@1388r
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg38<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg38
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg39<def> = LW %vreg38, 0; mem:LD4[%2] GR32Bit:%vreg39,%vreg38
Pick node SU(3)  ILP: 4 / 21 = 0.190476 Tree: 0 @0
Scheduling SW %vreg40, %vreg39, 20; mem:ST4[%37] GR32Bit:%vreg40,%vreg39
Pick node SU(4)  ILP: 1 / 22 = 0.0454545 Tree: 1 @0
Scheduling %vreg41<def> = LW %vreg38, 0; mem:LD4[%2] GR32Bit:%vreg41,%vreg38
Pick node SU(5)  ILP: 2 / 37 = 0.0540541 Tree: 1 @0
Scheduling SW %vreg40, %vreg41, 16; mem:ST4[%39] GR32Bit:%vreg40,%vreg41
*** Final schedule for BB#5 ***
SU(2):   %vreg40<def> = ADDI %zero, 16; GR32Bit:%vreg40
SU(0):   %vreg38<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg38
SU(1):   %vreg39<def> = LW %vreg38, 0; mem:LD4[%2] GR32Bit:%vreg39,%vreg38
SU(3):   SW %vreg40, %vreg39, 20; mem:ST4[%37] GR32Bit:%vreg40,%vreg39
SU(4):   %vreg41<def> = LW %vreg38, 0; mem:LD4[%2] GR32Bit:%vreg41,%vreg38
SU(5):   SW %vreg40, %vreg41, 16; mem:ST4[%39] GR32Bit:%vreg40,%vreg41

Partitioning instructions of the region into multiple CEs
instr:  %vreg40<def> = ADDI %zero, 16; GR32Bit:%vreg40
instr:  %vreg38<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg38
instr:  %vreg39<def> = LW %vreg38, 0; mem:LD4[%2] GR32Bit:%vreg39,%vreg38
instr:  SW %vreg40, %vreg39, 20; mem:ST4[%37] GR32Bit:%vreg40,%vreg39
instr:  %vreg41<def> = LW %vreg38, 0; mem:LD4[%2] GR32Bit:%vreg41,%vreg38
instr:  SW %vreg40, %vreg41, 16; mem:ST4[%39] GR32Bit:%vreg40,%vreg41
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
After Shuffling regions of basic block, state of BB#5:
BB#5: derived from LLVM BB %running_protection3.if.then14
    Predecessors according to CFG: BB#4
	%vreg40<def> = ADDI %zero, 16; GR32Bit:%vreg40
	%vreg38<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg38
	%vreg39<def> = LW %vreg38, 0; mem:LD4[%2] GR32Bit:%vreg39,%vreg38
	SW %vreg40, %vreg39, 20; mem:ST4[%37] GR32Bit:%vreg40,%vreg39
	%vreg41<def> = LW %vreg38, 0; mem:LD4[%2] GR32Bit:%vreg41,%vreg38
	SW %vreg40, %vreg41, 16; mem:ST4[%39] GR32Bit:%vreg40,%vreg41
    Successors according to CFG: BB#6
Creating pHyperOp bundles for CEs for bb5
starting at   %vreg40<def> = ADDI %zero, 16; GR32Bit:%vreg40

*** Renumbered SlotIndexes 2824-2928 ***
starting at   %zero<def> = ADDI %zero, 0
starting at   %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 2836-2940 ***
starting at   %zero<def> = ADDI %zero, 0
After bundling, state of BB5:BB#5: derived from LLVM BB %running_protection3.if.then14
    Predecessors according to CFG: BB#4
	%vreg40<def> = ADDI %zero, 16; GR32Bit:%vreg40
	  * %vreg38<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg38
	  * %vreg39<def> = LW %vreg38, 0; mem:LD4[%2] GR32Bit:%vreg39,%vreg38
	  * SW %vreg40, %vreg39, 20; mem:ST4[%37] GR32Bit:%vreg40,%vreg39
	  * %vreg41<def> = LW %vreg38, 0; mem:LD4[%2] GR32Bit:%vreg41,%vreg38
	  * SW %vreg40, %vreg41, 16; mem:ST4[%39] GR32Bit:%vreg40,%vreg41
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#6

-------------
Starting new basic block BB#6
********** MI Scheduling **********
running_protection3:BB#6 running_protection3.return
  From: %vreg42<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg42
    To: End Remaining: 0
Max Pressure: GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 2
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
SU(0):   %vreg42<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg42
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
   val SU(1): Latency=5 Reg=%vreg42

SU(1):   %vreg43<def> = LW %vreg42, 0; mem:LD4[%2] GR32Bit:%vreg43,%vreg42
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 2
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg42
  Successors:
   val SU(3): Latency=2 Reg=%vreg43

SU(2):   %vreg44<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg44
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(3): Latency=5 Reg=%vreg44

SU(3):   SW %vreg43, %vreg44, 0; mem:ST4[%1] GR32Bit:%vreg43,%vreg44
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 7
  Height             : 0
  Predecessors:
   val SU(1): Latency=2 Reg=%vreg43
   val SU(2): Latency=5 Reg=%vreg44
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg42<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg42
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
   val SU(1): Latency=5 Reg=%vreg42

SU(1):   %vreg43<def> = LW %vreg42, 0; mem:LD4[%2] GR32Bit:%vreg43,%vreg42
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 2
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg42
  Successors:
   val SU(3): Latency=2 Reg=%vreg43

SU(2):   %vreg44<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg44
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(3): Latency=5 Reg=%vreg44

SU(3):   SW %vreg43, %vreg44, 0; mem:ST4[%1] GR32Bit:%vreg43,%vreg44
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 7
  Height             : 0
  Predecessors:
   val SU(1): Latency=2 Reg=%vreg43
   val SU(2): Latency=5 Reg=%vreg44
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(2)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg44<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg44
handleMove 2924B -> 2904B: %vreg44<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg44
     %vreg44:	[2924r,2932r:0)  0@2924r
        -->	[2904r,2932r:0)  0@2904r
     t5:	EMPTY
        -->	EMPTY
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg42<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg42
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg43<def> = LW %vreg42, 0; mem:LD4[%2] GR32Bit:%vreg43,%vreg42
Pick node SU(3)  ILP: 4 / 8 = 0.5 Tree: 0 @0
Scheduling SW %vreg43, %vreg44, 0; mem:ST4[%1] GR32Bit:%vreg43,%vreg44
*** Final schedule for BB#6 ***
SU(2):   %vreg44<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg44
SU(0):   %vreg42<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg42
SU(1):   %vreg43<def> = LW %vreg42, 0; mem:LD4[%2] GR32Bit:%vreg43,%vreg42
SU(3):   SW %vreg43, %vreg44, 0; mem:ST4[%1] GR32Bit:%vreg43,%vreg44

Partitioning instructions of the region into multiple CEs
instr:  %vreg44<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg44
instr:  %vreg42<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg42
instr:  %vreg43<def> = LW %vreg42, 0; mem:LD4[%2] GR32Bit:%vreg43,%vreg42
instr:  SW %vreg43, %vreg44, 0; mem:ST4[%1] GR32Bit:%vreg43,%vreg44
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
before falloc, state of bb6:BB#6: derived from LLVM BB %running_protection3.return
    Predecessors according to CFG: BB#4 BB#5
	%vreg44<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg44
	%vreg42<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg42
	%vreg43<def> = LW %vreg42, 0; mem:LD4[%2] GR32Bit:%vreg43,%vreg42
	SW %vreg43, %vreg44, 0; mem:ST4[%1] GR32Bit:%vreg43,%vreg44
Adding all fallocs first to avoid stalls due to sequential fallocs and fbinds
Adding writecm(for writing sync count to context frames) and fbind instructions
live end of child is itself
live end of child is itself
Adding localref sw instructions to hyperOp running_protection3

*** Renumbered SlotIndexes 2936-2952 ***

*** Renumbered SlotIndexes 2948-2964 ***

*** Renumbered SlotIndexes 2960-2976 ***

*** Renumbered SlotIndexes 2972-2988 ***

*** Renumbered SlotIndexes 2984-3000 ***

*** Renumbered SlotIndexes 2996-3012 ***

*** Renumbered SlotIndexes 3008-3024 ***

*** Renumbered SlotIndexes 3020-3036 ***

*** Renumbered SlotIndexes 3032-3048 ***
localref sw to redefine_start2:  SW %vreg171, %vreg170, 4; GR32Bit:%vreg171,%vreg170
Adding writecm instructions to hyperOp running_protection3
Adding writecmp and sync instructions
problem with which child exactly?redefine_start2 with edge of type:6

*** Renumbered SlotIndexes 3044-3060 ***

*** Renumbered SlotIndexes 3056-3072 ***

*** Renumbered SlotIndexes 3068-3084 ***

*** Renumbered SlotIndexes 3080-3096 ***
Adding endHyperOp instructions to each pHyperOp

*** Renumbered SlotIndexes 3084-3108 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 3096-3120 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 3108-3132 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 3120-3144 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 3132-3156 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 3144-3168 ***
  %zero<def> = ADDI %zero, 0
After Shuffling regions of basic block, state of BB#6:
BB#6: derived from LLVM BB %running_protection3.return
    Predecessors according to CFG: BB#4 BB#5
	%vreg44<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg44
	%vreg42<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg42
	%vreg43<def> = LW %vreg42, 0; mem:LD4[%2] GR32Bit:%vreg43,%vreg42
	SW %vreg43, %vreg44, 0; mem:ST4[%1] GR32Bit:%vreg43,%vreg44
	%vreg151<def> = ADDI %zero, 128; GR32Bit:%vreg151
	%vreg152<def> = ADDI %zero, 1; GR32Bit:%vreg152
	WRITECM %vreg151, %vreg152, 60; GR32Bit:%vreg151,%vreg152
	%vreg153<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg153
	%vreg154<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg154
	%vreg155<def> = SRLI %vreg154, 12; GR32Bit:%vreg155,%vreg154
	%vreg156<def> = ADD %vreg153, %vreg155; GR32Bit:%vreg156,%vreg153,%vreg155
	%vreg157<def> = ADDI %zero, 20; GR32Bit:%vreg157
	%vreg158<def> = SRLI %vreg151, 22; GR32Bit:%vreg158,%vreg151
	%vreg159<def> = SRLI %vreg151, 12; GR32Bit:%vreg159,%vreg151
	%vreg160<def> = ANDI %vreg159, 15; GR32Bit:%vreg160,%vreg159
	%vreg161<def> = SRLI %vreg151, 6; GR32Bit:%vreg161,%vreg151
	%vreg162<def> = ANDI %vreg161, 63; GR32Bit:%vreg162,%vreg161
	%vreg163<def> = ADDI %zero, 832; GR32Bit:%vreg163
	%vreg164<def> = MUL %vreg158, %vreg163; GR32Bit:%vreg164,%vreg158,%vreg163
	%vreg165<def> = ADDI %zero, 52; GR32Bit:%vreg165
	%vreg166<def> = MUL %vreg160, %vreg165; GR32Bit:%vreg166,%vreg160,%vreg165
	%vreg167<def> = ADD %vreg166, %vreg162; GR32Bit:%vreg167,%vreg166,%vreg162
	%vreg168<def> = ADD %vreg167, %vreg164; GR32Bit:%vreg168,%vreg167,%vreg164
	%vreg169<def> = MUL %vreg168, %vreg157; GR32Bit:%vreg169,%vreg168,%vreg157
	%vreg170<def> = ADD %vreg169, %vreg156; GR32Bit:%vreg170,%vreg169,%vreg156
	%vreg171<def> = LW %t5, 0; GR32Bit:%vreg171
	SW %vreg171, %vreg170, 4; GR32Bit:%vreg171,%vreg170
	%vreg172<def> = LUI 1; GR32Bit:%vreg172
	WRITEPM %vreg172, %vreg151, 0; GR32Bit:%vreg172,%vreg151
	FDELETE %t4, 0
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg173<def> = LUI 1; GR32Bit:%vreg173
	%vreg174<def> = DREADPM %vreg173, 0; GR32Bit:%vreg174,%vreg173
	%vreg175<def> = ADDI %zero, -1; GR32Bit:%vreg175
	SYNC %vreg174, %vreg175, 60; GR32Bit:%vreg174,%vreg175
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 3056-3216 ***

*** Renumbered SlotIndexes 3056-3232 ***

*** Renumbered SlotIndexes 2944-3280 ***

*** Renumbered SlotIndexes 2932-3300 ***
Creating pHyperOp bundles for CEs for bb6
  %vreg173<def> = LUI 1; GR32Bit:%vreg173
starting at   %vreg44<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg44
  END 0
starting at   %vreg173<def> = LUI 1; GR32Bit:%vreg173
  END 0
starting at   END 0
starting at   END 0
After bundling, state of BB6:BB#6: derived from LLVM BB %running_protection3.return
    Predecessors according to CFG: BB#4 BB#5
	%vreg44<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg44
	  * %vreg42<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg42
	  * %vreg43<def> = LW %vreg42, 0; mem:LD4[%2] GR32Bit:%vreg43,%vreg42
	  * SW %vreg43, %vreg44, 0; mem:ST4[%1] GR32Bit:%vreg43,%vreg44
	  * %vreg151<def> = ADDI %zero, 128; GR32Bit:%vreg151
	  * %vreg152<def> = ADDI %zero, 1; GR32Bit:%vreg152
	  * WRITECM %vreg151, %vreg152, 60; GR32Bit:%vreg151,%vreg152
	  * %vreg153<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg153
	  * %vreg154<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg154
	  * %vreg155<def> = SRLI %vreg154, 12; GR32Bit:%vreg155,%vreg154
	  * %vreg156<def> = ADD %vreg153, %vreg155; GR32Bit:%vreg156,%vreg153,%vreg155
	  * %vreg157<def> = ADDI %zero, 20; GR32Bit:%vreg157
	  * %vreg158<def> = SRLI %vreg151, 22; GR32Bit:%vreg158,%vreg151
	  * %vreg159<def> = SRLI %vreg151, 12; GR32Bit:%vreg159,%vreg151
	  * %vreg160<def> = ANDI %vreg159, 15; GR32Bit:%vreg160,%vreg159
	  * %vreg161<def> = SRLI %vreg151, 6; GR32Bit:%vreg161,%vreg151
	  * %vreg162<def> = ANDI %vreg161, 63; GR32Bit:%vreg162,%vreg161
	  * %vreg163<def> = ADDI %zero, 832; GR32Bit:%vreg163
	  * %vreg164<def> = MUL %vreg158, %vreg163; GR32Bit:%vreg164,%vreg158,%vreg163
	  * %vreg165<def> = ADDI %zero, 52; GR32Bit:%vreg165
	  * %vreg166<def> = MUL %vreg160, %vreg165; GR32Bit:%vreg166,%vreg160,%vreg165
	  * %vreg167<def> = ADD %vreg166, %vreg162; GR32Bit:%vreg167,%vreg166,%vreg162
	  * %vreg168<def> = ADD %vreg167, %vreg164; GR32Bit:%vreg168,%vreg167,%vreg164
	  * %vreg169<def> = MUL %vreg168, %vreg157; GR32Bit:%vreg169,%vreg168,%vreg157
	  * %vreg170<def> = ADD %vreg169, %vreg156; GR32Bit:%vreg170,%vreg169,%vreg156
	  * %vreg171<def> = LW %t5, 0; GR32Bit:%vreg171
	  * SW %vreg171, %vreg170, 4; GR32Bit:%vreg171,%vreg170
	  * %vreg172<def> = LUI 1; GR32Bit:%vreg172
	  * WRITEPM %vreg172, %vreg151, 0; GR32Bit:%vreg172,%vreg151
	  * FDELETE %t4, 0
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg173<def> = LUI 1; GR32Bit:%vreg173
	  * %vreg174<def> = DREADPM %vreg173, 0; GR32Bit:%vreg174,%vreg173
	  * %vreg175<def> = ADDI %zero, -1; GR32Bit:%vreg175
	  * SYNC %vreg174, %vreg175, 60; GR32Bit:%vreg174,%vreg175
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
Patching the instructions that are supposed to use the physical registers r30 and r31
Computing live-in reg-units in ABI blocks.
Created 0 new intervals.

*** Renumbered SlotIndexes 8-3408 ***

*** Renumbered SlotIndexes 172-3420 ***

*** Renumbered SlotIndexes 1600-3432 ***
********** INTERVALS **********
t5 = EMPTY
zero = [1420r,1420d:7)[1428r,1428d:6)[1436r,1436d:5)[1444r,1444d:4)[1452r,1452d:3)[1460r,1460d:2)[1468r,1468d:1)[1476r,1476d:0)  0@1476r 1@1468r 2@1460r 3@1452r 4@1444r 5@1436r 6@1428r 7@1420r
%vreg0 = [220r,244r:0)  0@220r
%vreg1 = [212r,260r:0)  0@212r
%vreg2 = [260r,268r:0)  0@260r
%vreg3 = [252r,276r:0)  0@252r
%vreg4 = [244r,292r:0)  0@244r
%vreg5 = [292r,300r:0)  0@292r
%vreg6 = [236r,300r:0)  0@236r
%vreg7 = [276r,284r:0)  0@276r
%vreg8 = [188r,196r:0)  0@188r
%vreg9 = [168r,196r:0)  0@168r
%vreg10 = [196r,204r:0)  0@196r
%vreg11 = [204r,284r:0)  0@204r
%vreg12 = [284r,356r:0)  0@284r
%vreg13 = [1524r,1564r:0)  0@1524r
%vreg14 = [1540r,1556r:0)  0@1540r
%vreg15 = [1532r,1556r:0)  0@1532r
%vreg16 = [1564r,1580r:0)  0@1564r
%vreg17 = [1492r,1580r:0)  0@1492r
%vreg18 = [1616r,1632r:0)  0@1616r
%vreg19 = [1632r,1656r:0)  0@1632r
%vreg20 = [1656r,1680r:0)  0@1656r
%vreg21 = [1680r,1736r:0)  0@1680r
%vreg22 = [1624r,1640r:0)  0@1624r
%vreg23 = [1640r,1664r:0)  0@1640r
%vreg24 = [1664r,1672r:0)  0@1664r
%vreg25 = [1596r,1648r:0)  0@1596r
%vreg26 = [1672r,1736r:0)  0@1672r
%vreg27 = [1648r,1672r:0)  0@1648r
%vreg28 = [1736r,1792r:0)  0@1736r
%vreg29 = [2256r,2304r:0)  0@2256r
%vreg30 = [2264r,2272r:0)  0@2264r
%vreg31 = [2280r,2312r:0)  0@2280r
%vreg32 = [2224r,2272r:0)  0@2224r
%vreg33 = [2304r,2312r:0)  0@2304r
%vreg34 = [2336r,2344r:0)  0@2336r
%vreg35 = [2344r,2352r:0)  0@2344r
%vreg36 = [2352r,2432r:0)  0@2352r
%vreg37 = [2328r,2432r:0)  0@2328r
%vreg38 = [2968r,3000r:0)  0@2968r
%vreg39 = [2976r,2992r:0)  0@2976r
%vreg40 = [2936r,3008r:0)  0@2936r
%vreg41 = [3000r,3008r:0)  0@3000r
%vreg42 = [3032r,3040r:0)  0@3032r
%vreg43 = [3040r,3056r:0)  0@3040r
%vreg44 = [3024r,3056r:0)  0@3024r
%vreg45 = [4r,4d:0)  0@4r
%vreg46 = [160r,160d:0)  0@160r
%vreg47 = [24r,48r:0)  0@24r
%vreg48 = [32r,40r:0)  0@32r
%vreg49 = [40r,48r:0)  0@40r
%vreg50 = [48r,160r:0)  0@48r
%vreg51 = [56r,152r:0)  0@56r
%vreg52 = [64r,112r:0)  0@64r
%vreg53 = [72r,80r:0)  0@72r
%vreg54 = [80r,128r:0)  0@80r
%vreg55 = [88r,96r:0)  0@88r
%vreg56 = [96r,136r:0)  0@96r
%vreg57 = [104r,112r:0)  0@104r
%vreg58 = [112r,144r:0)  0@112r
%vreg59 = [120r,128r:0)  0@120r
%vreg60 = [128r,136r:0)  0@128r
%vreg61 = [136r,144r:0)  0@136r
%vreg62 = [144r,152r:0)  0@144r
%vreg63 = [152r,160r:0)  0@152r
%vreg64 = [404r,404d:0)  0@404r
%vreg65 = [548r,548d:0)  0@548r
%vreg66 = [412r,436r:0)  0@412r
%vreg67 = [420r,428r:0)  0@420r
%vreg68 = [428r,436r:0)  0@428r
%vreg69 = [436r,548r:0)  0@436r
%vreg70 = [444r,540r:0)  0@444r
%vreg71 = [452r,500r:0)  0@452r
%vreg72 = [460r,468r:0)  0@460r
%vreg73 = [468r,516r:0)  0@468r
%vreg74 = [476r,484r:0)  0@476r
%vreg75 = [484r,524r:0)  0@484r
%vreg76 = [492r,500r:0)  0@492r
%vreg77 = [500r,532r:0)  0@500r
%vreg78 = [508r,516r:0)  0@508r
%vreg79 = [516r,524r:0)  0@516r
%vreg80 = [524r,532r:0)  0@524r
%vreg81 = [532r,540r:0)  0@532r
%vreg82 = [540r,548r:0)  0@540r
%vreg83 = [620r,620d:0)  0@620r
%vreg84 = [764r,764d:0)  0@764r
%vreg85 = [628r,652r:0)  0@628r
%vreg86 = [636r,644r:0)  0@636r
%vreg87 = [644r,652r:0)  0@644r
%vreg88 = [652r,764r:0)  0@652r
%vreg89 = [660r,756r:0)  0@660r
%vreg90 = [668r,716r:0)  0@668r
%vreg91 = [676r,684r:0)  0@676r
%vreg92 = [684r,732r:0)  0@684r
%vreg93 = [692r,700r:0)  0@692r
%vreg94 = [700r,740r:0)  0@700r
%vreg95 = [708r,716r:0)  0@708r
%vreg96 = [716r,748r:0)  0@716r
%vreg97 = [724r,732r:0)  0@724r
%vreg98 = [732r,740r:0)  0@732r
%vreg99 = [740r,748r:0)  0@740r
%vreg100 = [748r,756r:0)  0@748r
%vreg101 = [756r,764r:0)  0@756r
%vreg102 = [836r,836d:0)  0@836r
%vreg103 = [980r,980d:0)  0@980r
%vreg104 = [844r,868r:0)  0@844r
%vreg105 = [852r,860r:0)  0@852r
%vreg106 = [860r,868r:0)  0@860r
%vreg107 = [868r,980r:0)  0@868r
%vreg108 = [876r,972r:0)  0@876r
%vreg109 = [884r,932r:0)  0@884r
%vreg110 = [892r,900r:0)  0@892r
%vreg111 = [900r,948r:0)  0@900r
%vreg112 = [908r,916r:0)  0@908r
%vreg113 = [916r,956r:0)  0@916r
%vreg114 = [924r,932r:0)  0@924r
%vreg115 = [932r,964r:0)  0@932r
%vreg116 = [940r,948r:0)  0@940r
%vreg117 = [948r,956r:0)  0@948r
%vreg118 = [956r,964r:0)  0@956r
%vreg119 = [964r,972r:0)  0@964r
%vreg120 = [972r,980r:0)  0@972r
%vreg121 = [308r,316r:0)  0@308r
%vreg122 = [556r,564r:0)  0@556r
%vreg123 = [324r,332r:0)  0@324r
%vreg124 = [772r,780r:0)  0@772r
%vreg125 = [340r,348r:0)  0@340r
%vreg126 = [1220r,1236r:0)  0@1220r
%vreg127 = [564r,572r:0)  0@564r
%vreg128 = [780r,788r:0)  0@780r
%vreg129 = [1236r,1316r:0)  0@1236r
%vreg130 = [1744r,1752r:0)  0@1744r
%vreg131 = [1840r,1856r:0)  0@1840r
%vreg132 = [1760r,1768r:0)  0@1760r
%vreg133 = [1920r,1936r:0)  0@1920r
%vreg134 = [1776r,1784r:0)  0@1776r
%vreg135 = [2000r,2016r:0)  0@2000r
%vreg136 = [1856r,1864r:0)  0@1856r
%vreg137 = [1936r,1944r:0)  0@1936r
%vreg138 = [2016r,2048r:0)  0@2016r
%vreg139 = [2360r,2408r:0)  0@2360r
%vreg140 = [2480r,2504r:0)  0@2480r
%vreg141 = [2376r,2416r:0)  0@2376r
%vreg142 = [2568r,2592r:0)  0@2568r
%vreg143 = [2392r,2424r:0)  0@2392r
%vreg144 = [2656r,2720r:0)  0@2656r
%vreg145 = [2496r,2512r:0)  0@2496r
%vreg146 = [2584r,2600r:0)  0@2584r
%vreg147 = [2672r,2760r:0)  0@2672r
%vreg148 = [2504r,2512r:0)  0@2504r
%vreg149 = [2592r,2600r:0)  0@2592r
%vreg150 = [2720r,2760r:0)  0@2720r
%vreg151 = [3064r,3256r:0)  0@3064r
%vreg152 = [3072r,3080r:0)  0@3072r
%vreg153 = [3088r,3112r:0)  0@3088r
%vreg154 = [3096r,3104r:0)  0@3096r
%vreg155 = [3104r,3112r:0)  0@3104r
%vreg156 = [3112r,3224r:0)  0@3112r
%vreg157 = [3120r,3216r:0)  0@3120r
%vreg158 = [3128r,3176r:0)  0@3128r
%vreg159 = [3136r,3144r:0)  0@3136r
%vreg160 = [3144r,3192r:0)  0@3144r
%vreg161 = [3152r,3160r:0)  0@3152r
%vreg162 = [3160r,3200r:0)  0@3160r
%vreg163 = [3168r,3176r:0)  0@3168r
%vreg164 = [3176r,3208r:0)  0@3176r
%vreg165 = [3184r,3192r:0)  0@3184r
%vreg166 = [3192r,3200r:0)  0@3192r
%vreg167 = [3200r,3208r:0)  0@3200r
%vreg168 = [3208r,3216r:0)  0@3208r
%vreg169 = [3216r,3224r:0)  0@3216r
%vreg170 = [3224r,3240r:0)  0@3224r
%vreg171 = [3232r,3240r:0)  0@3232r
%vreg172 = [3248r,3256r:0)  0@3248r
%vreg173 = [3296r,3304r:0)  0@3296r
%vreg174 = [3304r,3432B:0)  0@3304r
%vreg175 = [3312r,3320r:0)  0@3312r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function running_protection3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %running_protection3.entry
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg47<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg47
4B		  * %vreg48<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg48
4B		  * %vreg49<def> = SRLI %vreg48, 12; GR32Bit:%vreg49,%vreg48
4B		  * %vreg50<def> = ADD %vreg47, %vreg49; GR32Bit:%vreg50,%vreg47,%vreg49
4B		  * %vreg51<def> = ADDI %zero, 20; GR32Bit:%vreg51
4B		  * %vreg52<def> = SRLI %t5, 22; GR32Bit:%vreg52
4B		  * %vreg53<def> = SRLI %t5, 12; GR32Bit:%vreg53
4B		  * %vreg54<def> = ANDI %vreg53, 15; GR32Bit:%vreg54,%vreg53
4B		  * %vreg55<def> = SRLI %t5, 6; GR32Bit:%vreg55
4B		  * %vreg56<def> = ANDI %vreg55, 63; GR32Bit:%vreg56,%vreg55
4B		  * %vreg57<def> = ADDI %zero, 832; GR32Bit:%vreg57
4B		  * %vreg58<def> = MUL %vreg52, %vreg57; GR32Bit:%vreg58,%vreg52,%vreg57
4B		  * %vreg59<def> = ADDI %zero, 52; GR32Bit:%vreg59
4B		  * %vreg60<def> = MUL %vreg54, %vreg59; GR32Bit:%vreg60,%vreg54,%vreg59
4B		  * %vreg61<def> = ADD %vreg60, %vreg56; GR32Bit:%vreg61,%vreg60,%vreg56
4B		  * %vreg62<def> = ADD %vreg61, %vreg58; GR32Bit:%vreg62,%vreg61,%vreg58
4B		  * %vreg63<def> = MUL %vreg62, %vreg51; GR32Bit:%vreg63,%vreg62,%vreg51
4B		  * %t5<def> = ADD %vreg50, %vreg63; GR32Bit:%vreg50,%vreg63
4B		  * %vreg9<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg9
4B		  * SRLI %vreg9, %vreg9, 12; GR32Bit:%vreg9
4B		  * %vreg8<def> = LUI <ga:@var>[TF=2]; GR32Bit:%vreg8
4B		  * %vreg10<def> = ADD %vreg9, %vreg8; GR32Bit:%vreg10,%vreg9,%vreg8
4B		  * %vreg11<def> = FLW %vreg10, 0; mem:LD4[@var] FP32Bit:%vreg11 GR32Bit:%vreg10
4B		  * %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
4B		  * %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
4B		  * SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
4B		  * %vreg6<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg6
4B		  * %vreg4<def> = LW %vreg0, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
4B		  * %vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
4B		  * %vreg2<def> = FLW %vreg1, 0; mem:LD4[%7](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
4B		  * FSW %vreg2, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
4B		  * %vreg7<def> = FLW %vreg3, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg3
4B		  * %vreg12<def> = FULE_S %vreg7, %vreg11; GR32Bit:%vreg12 FP32Bit:%vreg7,%vreg11
4B		  * %vreg5<def> = FLW %vreg4, 4; mem:LD4[%11] FP32Bit:%vreg5 GR32Bit:%vreg4
4B		  * FSW %vreg5, %vreg6, 0; mem:ST4[%4] FP32Bit:%vreg5 GR32Bit:%vreg6
4B		  * %vreg121<def> = LUI 1; GR32Bit:%vreg121
4B		  * WRITEPM %vreg121, %vreg12, 0; GR32Bit:%vreg121,%vreg12
4B		  * %vreg123<def> = LUI 2; GR32Bit:%vreg123
4B		  * WRITEPM %vreg123, %vreg12, 0; GR32Bit:%vreg123,%vreg12
4B		  * %vreg125<def> = LUI 3; GR32Bit:%vreg125
4B		  * WRITEPM %vreg125, %vreg12, 0; GR32Bit:%vreg125,%vreg12
4B		  * BNE <BB#2>, %vreg12, %zero; GR32Bit:%vreg12
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
4B		  * JAL <BB#1>
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
404B		%t4<def> = ADD %t5, %zero
404B		  * %vreg66<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg66
404B		  * %vreg67<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg67
404B		  * %vreg68<def> = SRLI %vreg67, 12; GR32Bit:%vreg68,%vreg67
404B		  * %vreg69<def> = ADD %vreg66, %vreg68; GR32Bit:%vreg69,%vreg66,%vreg68
404B		  * %vreg70<def> = ADDI %zero, 20; GR32Bit:%vreg70
404B		  * %vreg71<def> = SRLI %t5, 22; GR32Bit:%vreg71
404B		  * %vreg72<def> = SRLI %t5, 12; GR32Bit:%vreg72
404B		  * %vreg73<def> = ANDI %vreg72, 15; GR32Bit:%vreg73,%vreg72
404B		  * %vreg74<def> = SRLI %t5, 6; GR32Bit:%vreg74
404B		  * %vreg75<def> = ANDI %vreg74, 63; GR32Bit:%vreg75,%vreg74
404B		  * %vreg76<def> = ADDI %zero, 832; GR32Bit:%vreg76
404B		  * %vreg77<def> = MUL %vreg71, %vreg76; GR32Bit:%vreg77,%vreg71,%vreg76
404B		  * %vreg78<def> = ADDI %zero, 52; GR32Bit:%vreg78
404B		  * %vreg79<def> = MUL %vreg73, %vreg78; GR32Bit:%vreg79,%vreg73,%vreg78
404B		  * %vreg80<def> = ADD %vreg79, %vreg75; GR32Bit:%vreg80,%vreg79,%vreg75
404B		  * %vreg81<def> = ADD %vreg80, %vreg77; GR32Bit:%vreg81,%vreg80,%vreg77
404B		  * %vreg82<def> = MUL %vreg81, %vreg70; GR32Bit:%vreg82,%vreg81,%vreg70
404B		  * %t5<def> = ADD %vreg69, %vreg82; GR32Bit:%vreg69,%vreg82
404B		  * %vreg122<def> = LUI 1; GR32Bit:%vreg122
404B		  * %vreg127<def> = DREADPM %vreg122, 0; GR32Bit:%vreg127,%vreg122
404B		  * BNE <BB#2>, %vreg127, %zero; GR32Bit:%vreg127
404B		  * %zero<def> = ADDI %zero, 0
404B		  * %zero<def> = ADDI %zero, 0
404B		  * JAL <BB#1>
404B		  * %zero<def> = ADDI %zero, 0
404B		  * %zero<def> = ADDI %zero, 0
620B		%t4<def> = ADD %t5, %zero
620B		  * %vreg85<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg85
620B		  * %vreg86<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg86
620B		  * %vreg87<def> = SRLI %vreg86, 12; GR32Bit:%vreg87,%vreg86
620B		  * %vreg88<def> = ADD %vreg85, %vreg87; GR32Bit:%vreg88,%vreg85,%vreg87
620B		  * %vreg89<def> = ADDI %zero, 20; GR32Bit:%vreg89
620B		  * %vreg90<def> = SRLI %t5, 22; GR32Bit:%vreg90
620B		  * %vreg91<def> = SRLI %t5, 12; GR32Bit:%vreg91
620B		  * %vreg92<def> = ANDI %vreg91, 15; GR32Bit:%vreg92,%vreg91
620B		  * %vreg93<def> = SRLI %t5, 6; GR32Bit:%vreg93
620B		  * %vreg94<def> = ANDI %vreg93, 63; GR32Bit:%vreg94,%vreg93
620B		  * %vreg95<def> = ADDI %zero, 832; GR32Bit:%vreg95
620B		  * %vreg96<def> = MUL %vreg90, %vreg95; GR32Bit:%vreg96,%vreg90,%vreg95
620B		  * %vreg97<def> = ADDI %zero, 52; GR32Bit:%vreg97
620B		  * %vreg98<def> = MUL %vreg92, %vreg97; GR32Bit:%vreg98,%vreg92,%vreg97
620B		  * %vreg99<def> = ADD %vreg98, %vreg94; GR32Bit:%vreg99,%vreg98,%vreg94
620B		  * %vreg100<def> = ADD %vreg99, %vreg96; GR32Bit:%vreg100,%vreg99,%vreg96
620B		  * %vreg101<def> = MUL %vreg100, %vreg89; GR32Bit:%vreg101,%vreg100,%vreg89
620B		  * %t5<def> = ADD %vreg88, %vreg101; GR32Bit:%vreg88,%vreg101
620B		  * %vreg124<def> = LUI 2; GR32Bit:%vreg124
620B		  * %vreg128<def> = DREADPM %vreg124, 0; GR32Bit:%vreg128,%vreg124
620B		  * BNE <BB#2>, %vreg128, %zero; GR32Bit:%vreg128
620B		  * %zero<def> = ADDI %zero, 0
620B		  * %zero<def> = ADDI %zero, 0
620B		  * JAL <BB#1>
620B		  * %zero<def> = ADDI %zero, 0
620B		  * %zero<def> = ADDI %zero, 0
836B		%t4<def> = ADD %t5, %zero
836B		  * %vreg104<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg104
836B		  * %vreg105<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg105
836B		  * %vreg106<def> = SRLI %vreg105, 12; GR32Bit:%vreg106,%vreg105
836B		  * %vreg107<def> = ADD %vreg104, %vreg106; GR32Bit:%vreg107,%vreg104,%vreg106
836B		  * %vreg108<def> = ADDI %zero, 20; GR32Bit:%vreg108
836B		  * %vreg109<def> = SRLI %t5, 22; GR32Bit:%vreg109
836B		  * %vreg110<def> = SRLI %t5, 12; GR32Bit:%vreg110
836B		  * %vreg111<def> = ANDI %vreg110, 15; GR32Bit:%vreg111,%vreg110
836B		  * %vreg112<def> = SRLI %t5, 6; GR32Bit:%vreg112
836B		  * %vreg113<def> = ANDI %vreg112, 63; GR32Bit:%vreg113,%vreg112
836B		  * %vreg114<def> = ADDI %zero, 832; GR32Bit:%vreg114
836B		  * %vreg115<def> = MUL %vreg109, %vreg114; GR32Bit:%vreg115,%vreg109,%vreg114
836B		  * %vreg116<def> = ADDI %zero, 52; GR32Bit:%vreg116
836B		  * %vreg117<def> = MUL %vreg111, %vreg116; GR32Bit:%vreg117,%vreg111,%vreg116
836B		  * %vreg118<def> = ADD %vreg117, %vreg113; GR32Bit:%vreg118,%vreg117,%vreg113
836B		  * %vreg119<def> = ADD %vreg118, %vreg115; GR32Bit:%vreg119,%vreg118,%vreg115
836B		  * %vreg120<def> = MUL %vreg119, %vreg108; GR32Bit:%vreg120,%vreg119,%vreg108
836B		  * %t5<def> = ADD %vreg107, %vreg120; GR32Bit:%vreg107,%vreg120
836B		  * %vreg126<def> = LUI 3; GR32Bit:%vreg126
836B		  * %vreg129<def> = DREADPM %vreg126, 0; GR32Bit:%vreg129,%vreg126
836B		  * BNE <BB#2>, %vreg129, %zero; GR32Bit:%vreg129
836B		  * %zero<def> = ADDI %zero, 0
836B		  * %zero<def> = ADDI %zero, 0
836B		  * JAL <BB#1>
836B		  * %zero<def> = ADDI %zero, 0
836B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#1(16) BB#2(16)

1484B	BB#1: derived from LLVM BB %running_protection3.if.then
	    Predecessors according to CFG: BB#0
1492B		%vreg17<def> = ADDI %zero, 4; GR32Bit:%vreg17
1492B		  * %vreg13<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg13
1492B		  * %vreg15<def> = ADDI %zero, 16; GR32Bit:%vreg15
1492B		  * %vreg14<def> = LW %vreg13, 0; mem:LD4[%2] GR32Bit:%vreg14,%vreg13
1492B		  * SW %vreg15, %vreg14, 20; mem:ST4[%17] GR32Bit:%vreg15,%vreg14
1492B		  * %vreg16<def> = LW %vreg13, 0; mem:LD4[%2] GR32Bit:%vreg16,%vreg13
1492B		  * SW %vreg17, %vreg16, 16; mem:ST4[%19] GR32Bit:%vreg17,%vreg16
1500B		%zero<def> = ADDI %zero, 0
1508B		%zero<def> = ADDI %zero, 0
1516B		%zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#2

1588B	BB#2: derived from LLVM BB %running_protection3.if.end
	    Predecessors according to CFG: BB#0 BB#1
168B		%vreg25<def> = LUI 277232; GR32Bit:%vreg25
168B		  * %a5<def> = LUI 0
168B		  * %a5<def> = SRLI %a5<internal>, 12
168B		  * ADD %vreg25, %vreg25, %a5; GR32Bit:%vreg25
168B		  * %vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
168B		  * %vreg22<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg22
168B		  * %vreg19<def> = LW %vreg18, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
168B		  * %vreg23<def> = FLW %vreg22, 0; mem:LD4[%4] FP32Bit:%vreg23 GR32Bit:%vreg22
168B		  * %vreg27<def> = COPY %vreg25; FP32Bit:%vreg27 GR32Bit:%vreg25
168B		  * %vreg20<def> = LW %vreg19, 8; mem:LD4[%21] GR32Bit:%vreg20,%vreg19
168B		  * %vreg24<def> = FADD_S_RDY %vreg23, %vreg23; FP32Bit:%vreg24,%vreg23,%vreg23
168B		  * %vreg26<def> = FADD_S_RDY %vreg27, %vreg24; FP32Bit:%vreg26,%vreg27,%vreg24
168B		  * %vreg21<def> = FCVT_S_W_RDY %vreg20; FP32Bit:%vreg21 GR32Bit:%vreg20
168B		  * %vreg28<def> = FULE_S %vreg21, %vreg26; GR32Bit:%vreg28 FP32Bit:%vreg21,%vreg26
168B		  * %vreg130<def> = LUI 1; GR32Bit:%vreg130
168B		  * WRITEPM %vreg130, %vreg28, 0; GR32Bit:%vreg130,%vreg28
168B		  * %vreg132<def> = LUI 2; GR32Bit:%vreg132
168B		  * WRITEPM %vreg132, %vreg28, 0; GR32Bit:%vreg132,%vreg28
168B		  * %vreg134<def> = LUI 3; GR32Bit:%vreg134
168B		  * WRITEPM %vreg134, %vreg28, 0; GR32Bit:%vreg134,%vreg28
168B		  * BNE <BB#4>, %vreg28, %zero; GR32Bit:%vreg28
168B		  * %zero<def> = ADDI %zero, 0
168B		  * %zero<def> = ADDI %zero, 0
168B		  * JAL <BB#3>
168B		  * %zero<def> = ADDI %zero, 0
168B		  * %zero<def> = ADDI %zero, 0
1840B		%vreg131<def> = LUI 1; GR32Bit:%vreg131
1840B		  * %vreg136<def> = DREADPM %vreg131, 0; GR32Bit:%vreg136,%vreg131
1840B		  * BNE <BB#4>, %vreg136, %zero; GR32Bit:%vreg136
1840B		  * %zero<def> = ADDI %zero, 0
1840B		  * %zero<def> = ADDI %zero, 0
1840B		  * JAL <BB#3>
1840B		  * %zero<def> = ADDI %zero, 0
1840B		  * %zero<def> = ADDI %zero, 0
1920B		%vreg133<def> = LUI 2; GR32Bit:%vreg133
1920B		  * %vreg137<def> = DREADPM %vreg133, 0; GR32Bit:%vreg137,%vreg133
1920B		  * BNE <BB#4>, %vreg137, %zero; GR32Bit:%vreg137
1920B		  * %zero<def> = ADDI %zero, 0
1920B		  * %zero<def> = ADDI %zero, 0
1920B		  * JAL <BB#3>
1920B		  * %zero<def> = ADDI %zero, 0
1920B		  * %zero<def> = ADDI %zero, 0
2000B		%vreg135<def> = LUI 3; GR32Bit:%vreg135
2000B		  * %vreg138<def> = DREADPM %vreg135, 0; GR32Bit:%vreg138,%vreg135
2000B		  * BNE <BB#4>, %vreg138, %zero; GR32Bit:%vreg138
2000B		  * %zero<def> = ADDI %zero, 0
2000B		  * %zero<def> = ADDI %zero, 0
2000B		  * JAL <BB#3>
2000B		  * %zero<def> = ADDI %zero, 0
2000B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#3(16) BB#4(16)

2216B	BB#3: derived from LLVM BB %running_protection3.if.then7
	    Predecessors according to CFG: BB#2
2224B		%vreg32<def> = ADDI %zero, 32; GR32Bit:%vreg32
2224B		  * %vreg29<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg29
2224B		  * %vreg30<def> = LW %vreg29, 0; mem:LD4[%2] GR32Bit:%vreg30,%vreg29
2224B		  * SW %vreg32, %vreg30, 16; mem:ST4[%29] GR32Bit:%vreg32,%vreg30
2224B		  * %vreg31<def> = ADDI %zero, 16; GR32Bit:%vreg31
2224B		  * %vreg33<def> = LW %vreg29, 0; mem:LD4[%2] GR32Bit:%vreg33,%vreg29
2224B		  * SW %vreg31, %vreg33, 20; mem:ST4[%31] GR32Bit:%vreg31,%vreg33
2232B		%zero<def> = ADDI %zero, 0
2240B		%zero<def> = ADDI %zero, 0
2248B		%zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#4

2320B	BB#4: derived from LLVM BB %running_protection3.if.end10
	    Predecessors according to CFG: BB#2 BB#3
2328B		%vreg37<def> = ADDI %zero, 117; GR32Bit:%vreg37
2328B		  * %vreg34<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg34
2328B		  * %vreg35<def> = LW %vreg34, 0; mem:LD4[%2] GR32Bit:%vreg35,%vreg34
2328B		  * %vreg36<def> = LW %vreg35, 12; mem:LD4[%33] GR32Bit:%vreg36,%vreg35
2328B		  * %vreg139<def> = LUI 1; GR32Bit:%vreg139
2328B		  * WRITEPM %vreg139, %vreg36, 0; GR32Bit:%vreg139,%vreg36
2328B		  * %vreg141<def> = LUI 2; GR32Bit:%vreg141
2328B		  * WRITEPM %vreg141, %vreg36, 0; GR32Bit:%vreg141,%vreg36
2328B		  * %vreg143<def> = LUI 3; GR32Bit:%vreg143
2328B		  * WRITEPM %vreg143, %vreg36, 0; GR32Bit:%vreg143,%vreg36
2328B		  * WRITEPM %vreg139, %vreg37, 4; GR32Bit:%vreg139,%vreg37
2328B		  * WRITEPM %vreg141, %vreg37, 4; GR32Bit:%vreg141,%vreg37
2328B		  * WRITEPM %vreg143, %vreg37, 4; GR32Bit:%vreg143,%vreg37
2328B		  * BLT <BB#6>, %vreg36, %vreg37; GR32Bit:%vreg36,%vreg37
2328B		  * %zero<def> = ADDI %zero, 0
2328B		  * %zero<def> = ADDI %zero, 0
2328B		  * JAL <BB#5>
2328B		  * %zero<def> = ADDI %zero, 0
2328B		  * %zero<def> = ADDI %zero, 0
2480B		%vreg140<def> = LUI 1; GR32Bit:%vreg140
2480B		  * %vreg145<def> = DREADPM %vreg140, 0; GR32Bit:%vreg145,%vreg140
2480B		  * %vreg148<def> = DREADPM %vreg140, 4; GR32Bit:%vreg148,%vreg140
2480B		  * BLT <BB#6>, %vreg145, %vreg148; GR32Bit:%vreg145,%vreg148
2480B		  * %zero<def> = ADDI %zero, 0
2480B		  * %zero<def> = ADDI %zero, 0
2480B		  * JAL <BB#5>
2480B		  * %zero<def> = ADDI %zero, 0
2480B		  * %zero<def> = ADDI %zero, 0
2568B		%vreg142<def> = LUI 2; GR32Bit:%vreg142
2568B		  * %vreg146<def> = DREADPM %vreg142, 0; GR32Bit:%vreg146,%vreg142
2568B		  * %vreg149<def> = DREADPM %vreg142, 4; GR32Bit:%vreg149,%vreg142
2568B		  * BLT <BB#6>, %vreg146, %vreg149; GR32Bit:%vreg146,%vreg149
2568B		  * %zero<def> = ADDI %zero, 0
2568B		  * %zero<def> = ADDI %zero, 0
2568B		  * JAL <BB#5>
2568B		  * %zero<def> = ADDI %zero, 0
2568B		  * %zero<def> = ADDI %zero, 0
2656B		%vreg144<def> = LUI 3; GR32Bit:%vreg144
2656B		  * %vreg147<def> = DREADPM %vreg144, 0; GR32Bit:%vreg147,%vreg144
2656B		  * %vreg150<def> = DREADPM %vreg144, 4; GR32Bit:%vreg150,%vreg144
2656B		  * BLT <BB#6>, %vreg147, %vreg150; GR32Bit:%vreg147,%vreg150
2656B		  * %zero<def> = ADDI %zero, 0
2656B		  * %zero<def> = ADDI %zero, 0
2656B		  * JAL <BB#5>
2656B		  * %zero<def> = ADDI %zero, 0
2656B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#5(16) BB#6(16)

2928B	BB#5: derived from LLVM BB %running_protection3.if.then14
	    Predecessors according to CFG: BB#4
2936B		%vreg40<def> = ADDI %zero, 16; GR32Bit:%vreg40
2936B		  * %vreg38<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg38
2936B		  * %vreg39<def> = LW %vreg38, 0; mem:LD4[%2] GR32Bit:%vreg39,%vreg38
2936B		  * SW %vreg40, %vreg39, 20; mem:ST4[%37] GR32Bit:%vreg40,%vreg39
2936B		  * %vreg41<def> = LW %vreg38, 0; mem:LD4[%2] GR32Bit:%vreg41,%vreg38
2936B		  * SW %vreg40, %vreg41, 16; mem:ST4[%39] GR32Bit:%vreg40,%vreg41
2944B		%zero<def> = ADDI %zero, 0
2952B		%zero<def> = ADDI %zero, 0
2960B		%zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#6

3016B	BB#6: derived from LLVM BB %running_protection3.return
	    Predecessors according to CFG: BB#4 BB#5
3024B		%vreg44<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg44
3024B		  * %vreg42<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg42
3024B		  * %vreg43<def> = LW %vreg42, 0; mem:LD4[%2] GR32Bit:%vreg43,%vreg42
3024B		  * SW %vreg43, %vreg44, 0; mem:ST4[%1] GR32Bit:%vreg43,%vreg44
3024B		  * %vreg151<def> = ADDI %zero, 128; GR32Bit:%vreg151
3024B		  * %vreg152<def> = ADDI %zero, 1; GR32Bit:%vreg152
3024B		  * WRITECM %vreg151, %vreg152, 60; GR32Bit:%vreg151,%vreg152
3024B		  * %vreg153<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg153
3024B		  * %vreg154<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg154
3024B		  * %vreg155<def> = SRLI %vreg154, 12; GR32Bit:%vreg155,%vreg154
3024B		  * %vreg156<def> = ADD %vreg153, %vreg155; GR32Bit:%vreg156,%vreg153,%vreg155
3024B		  * %vreg157<def> = ADDI %zero, 20; GR32Bit:%vreg157
3024B		  * %vreg158<def> = SRLI %vreg151, 22; GR32Bit:%vreg158,%vreg151
3024B		  * %vreg159<def> = SRLI %vreg151, 12; GR32Bit:%vreg159,%vreg151
3024B		  * %vreg160<def> = ANDI %vreg159, 15; GR32Bit:%vreg160,%vreg159
3024B		  * %vreg161<def> = SRLI %vreg151, 6; GR32Bit:%vreg161,%vreg151
3024B		  * %vreg162<def> = ANDI %vreg161, 63; GR32Bit:%vreg162,%vreg161
3024B		  * %vreg163<def> = ADDI %zero, 832; GR32Bit:%vreg163
3024B		  * %vreg164<def> = MUL %vreg158, %vreg163; GR32Bit:%vreg164,%vreg158,%vreg163
3024B		  * %vreg165<def> = ADDI %zero, 52; GR32Bit:%vreg165
3024B		  * %vreg166<def> = MUL %vreg160, %vreg165; GR32Bit:%vreg166,%vreg160,%vreg165
3024B		  * %vreg167<def> = ADD %vreg166, %vreg162; GR32Bit:%vreg167,%vreg166,%vreg162
3024B		  * %vreg168<def> = ADD %vreg167, %vreg164; GR32Bit:%vreg168,%vreg167,%vreg164
3024B		  * %vreg169<def> = MUL %vreg168, %vreg157; GR32Bit:%vreg169,%vreg168,%vreg157
3024B		  * %vreg170<def> = ADD %vreg169, %vreg156; GR32Bit:%vreg170,%vreg169,%vreg156
3024B		  * %vreg171<def> = LW %t5, 0; GR32Bit:%vreg171
3024B		  * SW %vreg171, %vreg170, 4; GR32Bit:%vreg171,%vreg170
3024B		  * %vreg172<def> = LUI 1; GR32Bit:%vreg172
3024B		  * WRITEPM %vreg172, %vreg151, 0; GR32Bit:%vreg172,%vreg151
3024B		  * FDELETE %t4, 0
3024B		  * END 0
3024B		  * %zero<def> = ADDI %zero, 0
3024B		  * %zero<def> = ADDI %zero, 0
3296B		%vreg173<def> = LUI 1; GR32Bit:%vreg173
3296B		  * %vreg174<def> = DREADPM %vreg173, 0; GR32Bit:%vreg174,%vreg173
3296B		  * %vreg175<def> = LUI 1048575; GR32Bit:%vreg175
3296B		  * %a5<def> = LUI 4095
3296B		  * %a5<def> = SRLI %a5<internal>, 12
3296B		  * ADD %vreg175, %vreg175, %a5; GR32Bit:%vreg175
3296B		  * SYNC %vreg174, %vreg175, 60; GR32Bit:%vreg174,%vreg175
3296B		  * END 0
3296B		  * %zero<def> = ADDI %zero, 0
3296B		  * %zero<def> = ADDI %zero, 0
3376B		END 0
3376B		  * %zero<def> = ADDI %zero, 0
3376B		  * %zero<def> = ADDI %zero, 0
3400B		END 0
3400B		  * %zero<def> = ADDI %zero, 0
3400B		  * %zero<def> = ADDI %zero, 0

# End machine code for function running_protection3.

********** COMPUTING LIVE DEBUG VARIABLES: running_protection3 **********
********** DEBUG VARIABLES **********
********** Compute Spill Weights **********
********** Function: running_protection3
********** GREEDY REGISTER ALLOCATION **********
********** Function: running_protection3

selectOrSplit GR32Bit:%vreg151 [3064r,3256r:0)  0@3064r
assigning %vreg151 to %t0: t0

selectOrSplit GR32Bit:%vreg174 [3304r,3432B:0)  0@3304r
assigning %vreg174 to %t0: t0

selectOrSplit GR32Bit:%vreg50 [48r,160r:0)  0@48r
assigning %vreg50 to %t0: t0

selectOrSplit GR32Bit:%vreg69 [436r,548r:0)  0@436r
assigning %vreg69 to %t0: t0

selectOrSplit GR32Bit:%vreg88 [652r,764r:0)  0@652r
assigning %vreg88 to %t0: t0

selectOrSplit GR32Bit:%vreg107 [868r,980r:0)  0@868r
assigning %vreg107 to %t0: t0

selectOrSplit GR32Bit:%vreg156 [3112r,3224r:0)  0@3112r
assigning %vreg156 to %t1: t1

selectOrSplit GR32Bit:%vreg37 [2328r,2432r:0)  0@2328r
assigning %vreg37 to %t0: t0

selectOrSplit GR32Bit:%vreg51 [56r,152r:0)  0@56r
assigning %vreg51 to %t1: t1

selectOrSplit GR32Bit:%vreg70 [444r,540r:0)  0@444r
assigning %vreg70 to %t1: t1

selectOrSplit GR32Bit:%vreg89 [660r,756r:0)  0@660r
assigning %vreg89 to %t1: t1

selectOrSplit GR32Bit:%vreg108 [876r,972r:0)  0@876r
assigning %vreg108 to %t1: t1

selectOrSplit GR32Bit:%vreg157 [3120r,3216r:0)  0@3120r
assigning %vreg157 to %t2: t2

selectOrSplit GR32Bit:%vreg17 [1492r,1580r:0)  0@1492r
assigning %vreg17 to %t0: t0

selectOrSplit GR32Bit:%vreg147 [2672r,2760r:0)  0@2672r
assigning %vreg147 to %t0: t0

selectOrSplit FP32Bit:%vreg11 [204r,284r:0)  0@204r
AllocationOrder(FP32Bit) = [ %ft1 %ft2 %ft3 %ft4 %ft5 %ft6 %ft7 %fs0 %fs1 %fa0 %fa1 %fa2 %fa3 %fa4 %fa5 %fa6 %fa7 %fs2 %fs3 %fs4 %fs5 %fs6 %fs7 %fs8 %fs9 %fs10 %fs11 %ft8 %ft9 %ft10 %ft11 ]
assigning %vreg11 to %ft1: ft1

selectOrSplit GR32Bit:%vreg36 [2352r,2432r:0)  0@2352r
assigning %vreg36 to %t1: t1

selectOrSplit GR32Bit:%vreg129 [1236r,1316r:0)  0@1236r
assigning %vreg129 to %t0: t0

selectOrSplit GR32Bit:%vreg12 [284r,356r:0)  0@284r
assigning %vreg12 to %t0: t0

selectOrSplit GR32Bit:%vreg40 [2936r,3008r:0)  0@2936r
assigning %vreg40 to %t0: t0

selectOrSplit GR32Bit:%vreg6 [236r,300r:0)  0@236r
assigning %vreg6 to %t1: t1

selectOrSplit FP32Bit:%vreg26 [1672r,1736r:0)  0@1672r
assigning %vreg26 to %ft1: ft1

selectOrSplit GR32Bit:%vreg144 [2656r,2720r:0)  0@2656r
assigning %vreg144 to %t1: t1

selectOrSplit FP32Bit:%vreg21 [1680r,1736r:0)  0@1680r
assigning %vreg21 to %ft2: ft2

selectOrSplit GR32Bit:%vreg28 [1736r,1792r:0)  0@1736r
assigning %vreg28 to %t0: t0

selectOrSplit GR32Bit:%vreg25 [1596r,1648r:0)  0@1596r
assigning %vreg25 to %t0: t0

selectOrSplit GR32Bit:%vreg1 [212r,260r:0)  0@212r
assigning %vreg1 to %t0: t0

selectOrSplit GR32Bit:%vreg4 [244r,292r:0)  0@244r
assigning %vreg4 to %t2: t2

selectOrSplit GR32Bit:%vreg29 [2256r,2304r:0)  0@2256r
assigning %vreg29 to %t0: t0

selectOrSplit GR32Bit:%vreg32 [2224r,2272r:0)  0@2224r
assigning %vreg32 to %t1: t1

selectOrSplit GR32Bit:%vreg52 [64r,112r:0)  0@64r
assigning %vreg52 to %t2: t2

selectOrSplit GR32Bit:%vreg54 [80r,128r:0)  0@80r
assigning %vreg54 to %fp: fp

selectOrSplit GR32Bit:%vreg71 [452r,500r:0)  0@452r
assigning %vreg71 to %t2: t2

selectOrSplit GR32Bit:%vreg73 [468r,516r:0)  0@468r
assigning %vreg73 to %fp: fp

selectOrSplit GR32Bit:%vreg90 [668r,716r:0)  0@668r
assigning %vreg90 to %t2: t2

selectOrSplit GR32Bit:%vreg92 [684r,732r:0)  0@684r
assigning %vreg92 to %fp: fp

selectOrSplit GR32Bit:%vreg109 [884r,932r:0)  0@884r
assigning %vreg109 to %t2: t2

selectOrSplit GR32Bit:%vreg111 [900r,948r:0)  0@900r
assigning %vreg111 to %fp: fp

selectOrSplit GR32Bit:%vreg139 [2360r,2408r:0)  0@2360r
assigning %vreg139 to %t2: t2

selectOrSplit GR32Bit:%vreg158 [3128r,3176r:0)  0@3128r
assigning %vreg158 to %fp: fp

selectOrSplit GR32Bit:%vreg160 [3144r,3192r:0)  0@3144r
assigning %vreg160 to %a0: a0

selectOrSplit GR32Bit:%vreg13 [1524r,1564r:0)  0@1524r
assigning %vreg13 to %t1: t1

selectOrSplit GR32Bit:%vreg56 [96r,136r:0)  0@96r
assigning %vreg56 to %a0: a0

selectOrSplit GR32Bit:%vreg75 [484r,524r:0)  0@484r
assigning %vreg75 to %a0: a0

selectOrSplit GR32Bit:%vreg94 [700r,740r:0)  0@700r
assigning %vreg94 to %a0: a0

selectOrSplit GR32Bit:%vreg113 [916r,956r:0)  0@916r
assigning %vreg113 to %a0: a0

selectOrSplit GR32Bit:%vreg141 [2376r,2416r:0)  0@2376r
assigning %vreg141 to %fp: fp

selectOrSplit GR32Bit:%vreg150 [2720r,2760r:0)  0@2720r
assigning %vreg150 to %t1: t1

selectOrSplit GR32Bit:%vreg162 [3160r,3200r:0)  0@3160r
assigning %vreg162 to %a1: a1

selectOrSplit GR32Bit:%vreg31 [2280r,2312r:0)  0@2280r
assigning %vreg31 to %t1: t1

selectOrSplit GR32Bit:%vreg38 [2968r,3000r:0)  0@2968r
assigning %vreg38 to %t1: t1

selectOrSplit GR32Bit:%vreg44 [3024r,3056r:0)  0@3024r
assigning %vreg44 to %t0: t0

selectOrSplit GR32Bit:%vreg58 [112r,144r:0)  0@112r
assigning %vreg58 to %t2: t2

selectOrSplit GR32Bit:%vreg77 [500r,532r:0)  0@500r
assigning %vreg77 to %t2: t2

selectOrSplit GR32Bit:%vreg96 [716r,748r:0)  0@716r
assigning %vreg96 to %t2: t2

selectOrSplit GR32Bit:%vreg115 [932r,964r:0)  0@932r
assigning %vreg115 to %t2: t2

selectOrSplit GR32Bit:%vreg138 [2016r,2048r:0)  0@2016r
assigning %vreg138 to %t0: t0

selectOrSplit GR32Bit:%vreg143 [2392r,2424r:0)  0@2392r
assigning %vreg143 to %a0: a0

selectOrSplit GR32Bit:%vreg164 [3176r,3208r:0)  0@3176r
assigning %vreg164 to %fp: fp

selectOrSplit GR32Bit:%vreg9 [168r,196r:0)  0@168r
assigning %vreg9 to %t0: t0

selectOrSplit GR32Bit:%vreg0 [220r,244r:0)  0@220r
assigning %vreg0 to %t2: t2

selectOrSplit GR32Bit:%vreg3 [252r,276r:0)  0@252r
assigning %vreg3 to %fp: fp

selectOrSplit GR32Bit:%vreg15 [1532r,1556r:0)  0@1532r
assigning %vreg15 to %t2: t2

selectOrSplit GR32Bit:%vreg19 [1632r,1656r:0)  0@1632r
assigning %vreg19 to %t1: t1

selectOrSplit GR32Bit:%vreg20 [1656r,1680r:0)  0@1656r
assigning %vreg20 to %t0: t0

selectOrSplit FP32Bit:%vreg23 [1640r,1664r:0)  0@1640r
assigning %vreg23 to %ft1: ft1

selectOrSplit FP32Bit:%vreg27 [1648r,1672r:0)  0@1648r
assigning %vreg27 to %ft2: ft2

selectOrSplit GR32Bit:%vreg47 [24r,48r:0)  0@24r
assigning %vreg47 to %t0: t0

selectOrSplit GR32Bit:%vreg66 [412r,436r:0)  0@412r
assigning %vreg66 to %t0: t0

selectOrSplit GR32Bit:%vreg85 [628r,652r:0)  0@628r
assigning %vreg85 to %t0: t0

selectOrSplit GR32Bit:%vreg104 [844r,868r:0)  0@844r
assigning %vreg104 to %t0: t0

selectOrSplit GR32Bit:%vreg140 [2480r,2504r:0)  0@2480r
assigning %vreg140 to %t0: t0

selectOrSplit GR32Bit:%vreg142 [2568r,2592r:0)  0@2568r
assigning %vreg142 to %t0: t0

selectOrSplit GR32Bit:%vreg153 [3088r,3112r:0)  0@3088r
assigning %vreg153 to %t1: t1

selectOrSplit GR32Bit:%vreg14 [1540r,1556r:0)  0@1540r
assigning %vreg14 to %fp: fp

selectOrSplit GR32Bit:%vreg16 [1564r,1580r:0)  0@1564r
assigning %vreg16 to %t1: t1

selectOrSplit GR32Bit:%vreg18 [1616r,1632r:0)  0@1616r
assigning %vreg18 to %t1: t1

selectOrSplit GR32Bit:%vreg22 [1624r,1640r:0)  0@1624r
assigning %vreg22 to %t2: t2

selectOrSplit GR32Bit:%vreg39 [2976r,2992r:0)  0@2976r
assigning %vreg39 to %t2: t2

selectOrSplit GR32Bit:%vreg43 [3040r,3056r:0)  0@3040r
assigning %vreg43 to %t1: t1

selectOrSplit GR32Bit:%vreg126 [1220r,1236r:0)  0@1220r
assigning %vreg126 to %t0: t0

selectOrSplit GR32Bit:%vreg131 [1840r,1856r:0)  0@1840r
assigning %vreg131 to %t0: t0

selectOrSplit GR32Bit:%vreg133 [1920r,1936r:0)  0@1920r
assigning %vreg133 to %t0: t0

selectOrSplit GR32Bit:%vreg135 [2000r,2016r:0)  0@2000r
assigning %vreg135 to %t0: t0

selectOrSplit GR32Bit:%vreg145 [2496r,2512r:0)  0@2496r
assigning %vreg145 to %t1: t1

selectOrSplit GR32Bit:%vreg146 [2584r,2600r:0)  0@2584r
assigning %vreg146 to %t1: t1

selectOrSplit GR32Bit:%vreg170 [3224r,3240r:0)  0@3224r
assigning %vreg170 to %t1: t1

selectOrSplit FP32Bit:%vreg2 [260r,268r:0)  0@260r
assigning %vreg2 to %ft2: ft2

selectOrSplit FP32Bit:%vreg5 [292r,300r:0)  0@292r
assigning %vreg5 to %ft1: ft1

selectOrSplit FP32Bit:%vreg7 [276r,284r:0)  0@276r
assigning %vreg7 to %ft2: ft2

selectOrSplit GR32Bit:%vreg8 [188r,196r:0)  0@188r
assigning %vreg8 to %t1: t1

selectOrSplit GR32Bit:%vreg10 [196r,204r:0)  0@196r
assigning %vreg10 to %t0: t0

selectOrSplit FP32Bit:%vreg24 [1664r,1672r:0)  0@1664r
assigning %vreg24 to %ft1: ft1

selectOrSplit GR32Bit:%vreg30 [2264r,2272r:0)  0@2264r
assigning %vreg30 to %t2: t2

selectOrSplit GR32Bit:%vreg33 [2304r,2312r:0)  0@2304r
assigning %vreg33 to %t0: t0

selectOrSplit GR32Bit:%vreg34 [2336r,2344r:0)  0@2336r
assigning %vreg34 to %t1: t1

selectOrSplit GR32Bit:%vreg35 [2344r,2352r:0)  0@2344r
assigning %vreg35 to %t1: t1

selectOrSplit GR32Bit:%vreg41 [3000r,3008r:0)  0@3000r
assigning %vreg41 to %t1: t1

selectOrSplit GR32Bit:%vreg42 [3032r,3040r:0)  0@3032r
assigning %vreg42 to %t1: t1

selectOrSplit GR32Bit:%vreg48 [32r,40r:0)  0@32r
assigning %vreg48 to %t1: t1

selectOrSplit GR32Bit:%vreg49 [40r,48r:0)  0@40r
assigning %vreg49 to %t1: t1

selectOrSplit GR32Bit:%vreg53 [72r,80r:0)  0@72r
assigning %vreg53 to %fp: fp

selectOrSplit GR32Bit:%vreg55 [88r,96r:0)  0@88r
assigning %vreg55 to %a0: a0

selectOrSplit GR32Bit:%vreg57 [104r,112r:0)  0@104r
assigning %vreg57 to %a1: a1

selectOrSplit GR32Bit:%vreg59 [120r,128r:0)  0@120r
assigning %vreg59 to %a1: a1

selectOrSplit GR32Bit:%vreg60 [128r,136r:0)  0@128r
assigning %vreg60 to %fp: fp

selectOrSplit GR32Bit:%vreg61 [136r,144r:0)  0@136r
assigning %vreg61 to %fp: fp

selectOrSplit GR32Bit:%vreg62 [144r,152r:0)  0@144r
assigning %vreg62 to %t2: t2

selectOrSplit GR32Bit:%vreg63 [152r,160r:0)  0@152r
assigning %vreg63 to %t1: t1

selectOrSplit GR32Bit:%vreg67 [420r,428r:0)  0@420r
assigning %vreg67 to %t1: t1

selectOrSplit GR32Bit:%vreg68 [428r,436r:0)  0@428r
assigning %vreg68 to %t1: t1

selectOrSplit GR32Bit:%vreg72 [460r,468r:0)  0@460r
assigning %vreg72 to %fp: fp

selectOrSplit GR32Bit:%vreg74 [476r,484r:0)  0@476r
assigning %vreg74 to %a0: a0

selectOrSplit GR32Bit:%vreg76 [492r,500r:0)  0@492r
assigning %vreg76 to %a1: a1

selectOrSplit GR32Bit:%vreg78 [508r,516r:0)  0@508r
assigning %vreg78 to %a1: a1

selectOrSplit GR32Bit:%vreg79 [516r,524r:0)  0@516r
assigning %vreg79 to %fp: fp

selectOrSplit GR32Bit:%vreg80 [524r,532r:0)  0@524r
assigning %vreg80 to %fp: fp

selectOrSplit GR32Bit:%vreg81 [532r,540r:0)  0@532r
assigning %vreg81 to %t2: t2

selectOrSplit GR32Bit:%vreg82 [540r,548r:0)  0@540r
assigning %vreg82 to %t1: t1

selectOrSplit GR32Bit:%vreg86 [636r,644r:0)  0@636r
assigning %vreg86 to %t1: t1

selectOrSplit GR32Bit:%vreg87 [644r,652r:0)  0@644r
assigning %vreg87 to %t1: t1

selectOrSplit GR32Bit:%vreg91 [676r,684r:0)  0@676r
assigning %vreg91 to %fp: fp

selectOrSplit GR32Bit:%vreg93 [692r,700r:0)  0@692r
assigning %vreg93 to %a0: a0

selectOrSplit GR32Bit:%vreg95 [708r,716r:0)  0@708r
assigning %vreg95 to %a1: a1

selectOrSplit GR32Bit:%vreg97 [724r,732r:0)  0@724r
assigning %vreg97 to %a1: a1

selectOrSplit GR32Bit:%vreg98 [732r,740r:0)  0@732r
assigning %vreg98 to %fp: fp

selectOrSplit GR32Bit:%vreg99 [740r,748r:0)  0@740r
assigning %vreg99 to %fp: fp

selectOrSplit GR32Bit:%vreg100 [748r,756r:0)  0@748r
assigning %vreg100 to %t2: t2

selectOrSplit GR32Bit:%vreg101 [756r,764r:0)  0@756r
assigning %vreg101 to %t1: t1

selectOrSplit GR32Bit:%vreg105 [852r,860r:0)  0@852r
assigning %vreg105 to %t1: t1

selectOrSplit GR32Bit:%vreg106 [860r,868r:0)  0@860r
assigning %vreg106 to %t1: t1

selectOrSplit GR32Bit:%vreg110 [892r,900r:0)  0@892r
assigning %vreg110 to %fp: fp

selectOrSplit GR32Bit:%vreg112 [908r,916r:0)  0@908r
assigning %vreg112 to %a0: a0

selectOrSplit GR32Bit:%vreg114 [924r,932r:0)  0@924r
assigning %vreg114 to %a1: a1

selectOrSplit GR32Bit:%vreg116 [940r,948r:0)  0@940r
assigning %vreg116 to %a1: a1

selectOrSplit GR32Bit:%vreg117 [948r,956r:0)  0@948r
assigning %vreg117 to %fp: fp

selectOrSplit GR32Bit:%vreg118 [956r,964r:0)  0@956r
assigning %vreg118 to %fp: fp

selectOrSplit GR32Bit:%vreg119 [964r,972r:0)  0@964r
assigning %vreg119 to %t2: t2

selectOrSplit GR32Bit:%vreg120 [972r,980r:0)  0@972r
assigning %vreg120 to %t1: t1

selectOrSplit GR32Bit:%vreg121 [308r,316r:0)  0@308r
assigning %vreg121 to %t1: t1

selectOrSplit GR32Bit:%vreg122 [556r,564r:0)  0@556r
assigning %vreg122 to %t0: t0

selectOrSplit GR32Bit:%vreg123 [324r,332r:0)  0@324r
assigning %vreg123 to %t1: t1

selectOrSplit GR32Bit:%vreg124 [772r,780r:0)  0@772r
assigning %vreg124 to %t0: t0

selectOrSplit GR32Bit:%vreg125 [340r,348r:0)  0@340r
assigning %vreg125 to %t1: t1

selectOrSplit GR32Bit:%vreg127 [564r,572r:0)  0@564r
assigning %vreg127 to %t0: t0

selectOrSplit GR32Bit:%vreg128 [780r,788r:0)  0@780r
assigning %vreg128 to %t0: t0

selectOrSplit GR32Bit:%vreg130 [1744r,1752r:0)  0@1744r
assigning %vreg130 to %t1: t1

selectOrSplit GR32Bit:%vreg132 [1760r,1768r:0)  0@1760r
assigning %vreg132 to %t1: t1

selectOrSplit GR32Bit:%vreg134 [1776r,1784r:0)  0@1776r
assigning %vreg134 to %t1: t1

selectOrSplit GR32Bit:%vreg136 [1856r,1864r:0)  0@1856r
assigning %vreg136 to %t0: t0

selectOrSplit GR32Bit:%vreg137 [1936r,1944r:0)  0@1936r
assigning %vreg137 to %t0: t0

selectOrSplit GR32Bit:%vreg148 [2504r,2512r:0)  0@2504r
assigning %vreg148 to %t0: t0

selectOrSplit GR32Bit:%vreg149 [2592r,2600r:0)  0@2592r
assigning %vreg149 to %t0: t0

selectOrSplit GR32Bit:%vreg152 [3072r,3080r:0)  0@3072r
assigning %vreg152 to %t1: t1

selectOrSplit GR32Bit:%vreg154 [3096r,3104r:0)  0@3096r
assigning %vreg154 to %t2: t2

selectOrSplit GR32Bit:%vreg155 [3104r,3112r:0)  0@3104r
assigning %vreg155 to %t2: t2

selectOrSplit GR32Bit:%vreg159 [3136r,3144r:0)  0@3136r
assigning %vreg159 to %a0: a0

selectOrSplit GR32Bit:%vreg161 [3152r,3160r:0)  0@3152r
assigning %vreg161 to %a1: a1

selectOrSplit GR32Bit:%vreg163 [3168r,3176r:0)  0@3168r
assigning %vreg163 to %a2: a2

selectOrSplit GR32Bit:%vreg165 [3184r,3192r:0)  0@3184r
assigning %vreg165 to %a2: a2

selectOrSplit GR32Bit:%vreg166 [3192r,3200r:0)  0@3192r
assigning %vreg166 to %a0: a0

selectOrSplit GR32Bit:%vreg167 [3200r,3208r:0)  0@3200r
assigning %vreg167 to %a0: a0

selectOrSplit GR32Bit:%vreg168 [3208r,3216r:0)  0@3208r
assigning %vreg168 to %fp: fp

selectOrSplit GR32Bit:%vreg169 [3216r,3224r:0)  0@3216r
assigning %vreg169 to %t2: t2

selectOrSplit GR32Bit:%vreg171 [3232r,3240r:0)  0@3232r
assigning %vreg171 to %t2: t2

selectOrSplit GR32Bit:%vreg172 [3248r,3256r:0)  0@3248r
assigning %vreg172 to %t1: t1

selectOrSplit GR32Bit:%vreg173 [3296r,3304r:0)  0@3296r
assigning %vreg173 to %t0: t0

selectOrSplit GR32Bit:%vreg175 [3312r,3320r:0)  0@3312r
assigning %vreg175 to %t1: t1
********** REWRITE VIRTUAL REGISTERS **********
********** Function: running_protection3
********** REGISTER MAP **********
[%vreg0 -> %t2] GR32Bit
[%vreg1 -> %t0] GR32Bit
[%vreg2 -> %ft2] FP32Bit
[%vreg3 -> %fp] GR32Bit
[%vreg4 -> %t2] GR32Bit
[%vreg5 -> %ft1] FP32Bit
[%vreg6 -> %t1] GR32Bit
[%vreg7 -> %ft2] FP32Bit
[%vreg8 -> %t1] GR32Bit
[%vreg9 -> %t0] GR32Bit
[%vreg10 -> %t0] GR32Bit
[%vreg11 -> %ft1] FP32Bit
[%vreg12 -> %t0] GR32Bit
[%vreg13 -> %t1] GR32Bit
[%vreg14 -> %fp] GR32Bit
[%vreg15 -> %t2] GR32Bit
[%vreg16 -> %t1] GR32Bit
[%vreg17 -> %t0] GR32Bit
[%vreg18 -> %t1] GR32Bit
[%vreg19 -> %t1] GR32Bit
[%vreg20 -> %t0] GR32Bit
[%vreg21 -> %ft2] FP32Bit
[%vreg22 -> %t2] GR32Bit
[%vreg23 -> %ft1] FP32Bit
[%vreg24 -> %ft1] FP32Bit
[%vreg25 -> %t0] GR32Bit
[%vreg26 -> %ft1] FP32Bit
[%vreg27 -> %ft2] FP32Bit
[%vreg28 -> %t0] GR32Bit
[%vreg29 -> %t0] GR32Bit
[%vreg30 -> %t2] GR32Bit
[%vreg31 -> %t1] GR32Bit
[%vreg32 -> %t1] GR32Bit
[%vreg33 -> %t0] GR32Bit
[%vreg34 -> %t1] GR32Bit
[%vreg35 -> %t1] GR32Bit
[%vreg36 -> %t1] GR32Bit
[%vreg37 -> %t0] GR32Bit
[%vreg38 -> %t1] GR32Bit
[%vreg39 -> %t2] GR32Bit
[%vreg40 -> %t0] GR32Bit
[%vreg41 -> %t1] GR32Bit
[%vreg42 -> %t1] GR32Bit
[%vreg43 -> %t1] GR32Bit
[%vreg44 -> %t0] GR32Bit
[%vreg47 -> %t0] GR32Bit
[%vreg48 -> %t1] GR32Bit
[%vreg49 -> %t1] GR32Bit
[%vreg50 -> %t0] GR32Bit
[%vreg51 -> %t1] GR32Bit
[%vreg52 -> %t2] GR32Bit
[%vreg53 -> %fp] GR32Bit
[%vreg54 -> %fp] GR32Bit
[%vreg55 -> %a0] GR32Bit
[%vreg56 -> %a0] GR32Bit
[%vreg57 -> %a1] GR32Bit
[%vreg58 -> %t2] GR32Bit
[%vreg59 -> %a1] GR32Bit
[%vreg60 -> %fp] GR32Bit
[%vreg61 -> %fp] GR32Bit
[%vreg62 -> %t2] GR32Bit
[%vreg63 -> %t1] GR32Bit
[%vreg66 -> %t0] GR32Bit
[%vreg67 -> %t1] GR32Bit
[%vreg68 -> %t1] GR32Bit
[%vreg69 -> %t0] GR32Bit
[%vreg70 -> %t1] GR32Bit
[%vreg71 -> %t2] GR32Bit
[%vreg72 -> %fp] GR32Bit
[%vreg73 -> %fp] GR32Bit
[%vreg74 -> %a0] GR32Bit
[%vreg75 -> %a0] GR32Bit
[%vreg76 -> %a1] GR32Bit
[%vreg77 -> %t2] GR32Bit
[%vreg78 -> %a1] GR32Bit
[%vreg79 -> %fp] GR32Bit
[%vreg80 -> %fp] GR32Bit
[%vreg81 -> %t2] GR32Bit
[%vreg82 -> %t1] GR32Bit
[%vreg85 -> %t0] GR32Bit
[%vreg86 -> %t1] GR32Bit
[%vreg87 -> %t1] GR32Bit
[%vreg88 -> %t0] GR32Bit
[%vreg89 -> %t1] GR32Bit
[%vreg90 -> %t2] GR32Bit
[%vreg91 -> %fp] GR32Bit
[%vreg92 -> %fp] GR32Bit
[%vreg93 -> %a0] GR32Bit
[%vreg94 -> %a0] GR32Bit
[%vreg95 -> %a1] GR32Bit
[%vreg96 -> %t2] GR32Bit
[%vreg97 -> %a1] GR32Bit
[%vreg98 -> %fp] GR32Bit
[%vreg99 -> %fp] GR32Bit
[%vreg100 -> %t2] GR32Bit
[%vreg101 -> %t1] GR32Bit
[%vreg104 -> %t0] GR32Bit
[%vreg105 -> %t1] GR32Bit
[%vreg106 -> %t1] GR32Bit
[%vreg107 -> %t0] GR32Bit
[%vreg108 -> %t1] GR32Bit
[%vreg109 -> %t2] GR32Bit
[%vreg110 -> %fp] GR32Bit
[%vreg111 -> %fp] GR32Bit
[%vreg112 -> %a0] GR32Bit
[%vreg113 -> %a0] GR32Bit
[%vreg114 -> %a1] GR32Bit
[%vreg115 -> %t2] GR32Bit
[%vreg116 -> %a1] GR32Bit
[%vreg117 -> %fp] GR32Bit
[%vreg118 -> %fp] GR32Bit
[%vreg119 -> %t2] GR32Bit
[%vreg120 -> %t1] GR32Bit
[%vreg121 -> %t1] GR32Bit
[%vreg122 -> %t0] GR32Bit
[%vreg123 -> %t1] GR32Bit
[%vreg124 -> %t0] GR32Bit
[%vreg125 -> %t1] GR32Bit
[%vreg126 -> %t0] GR32Bit
[%vreg127 -> %t0] GR32Bit
[%vreg128 -> %t0] GR32Bit
[%vreg129 -> %t0] GR32Bit
[%vreg130 -> %t1] GR32Bit
[%vreg131 -> %t0] GR32Bit
[%vreg132 -> %t1] GR32Bit
[%vreg133 -> %t0] GR32Bit
[%vreg134 -> %t1] GR32Bit
[%vreg135 -> %t0] GR32Bit
[%vreg136 -> %t0] GR32Bit
[%vreg137 -> %t0] GR32Bit
[%vreg138 -> %t0] GR32Bit
[%vreg139 -> %t2] GR32Bit
[%vreg140 -> %t0] GR32Bit
[%vreg141 -> %fp] GR32Bit
[%vreg142 -> %t0] GR32Bit
[%vreg143 -> %a0] GR32Bit
[%vreg144 -> %t1] GR32Bit
[%vreg145 -> %t1] GR32Bit
[%vreg146 -> %t1] GR32Bit
[%vreg147 -> %t0] GR32Bit
[%vreg148 -> %t0] GR32Bit
[%vreg149 -> %t0] GR32Bit
[%vreg150 -> %t1] GR32Bit
[%vreg151 -> %t0] GR32Bit
[%vreg152 -> %t1] GR32Bit
[%vreg153 -> %t1] GR32Bit
[%vreg154 -> %t2] GR32Bit
[%vreg155 -> %t2] GR32Bit
[%vreg156 -> %t1] GR32Bit
[%vreg157 -> %t2] GR32Bit
[%vreg158 -> %fp] GR32Bit
[%vreg159 -> %a0] GR32Bit
[%vreg160 -> %a0] GR32Bit
[%vreg161 -> %a1] GR32Bit
[%vreg162 -> %a1] GR32Bit
[%vreg163 -> %a2] GR32Bit
[%vreg164 -> %fp] GR32Bit
[%vreg165 -> %a2] GR32Bit
[%vreg166 -> %a0] GR32Bit
[%vreg167 -> %a0] GR32Bit
[%vreg168 -> %fp] GR32Bit
[%vreg169 -> %t2] GR32Bit
[%vreg170 -> %t1] GR32Bit
[%vreg171 -> %t2] GR32Bit
[%vreg172 -> %t1] GR32Bit
[%vreg173 -> %t0] GR32Bit
[%vreg174 -> %t0] GR32Bit
[%vreg175 -> %t1] GR32Bit

0B	BB#0: derived from LLVM BB %running_protection3.entry
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg47<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg47
4B		  * %vreg48<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg48
4B		  * %vreg49<def> = SRLI %vreg48<kill>, 12; GR32Bit:%vreg49,%vreg48
4B		  * %vreg50<def> = ADD %vreg47<kill>, %vreg49<kill>; GR32Bit:%vreg50,%vreg47,%vreg49
4B		  * %vreg51<def> = ADDI %zero, 20; GR32Bit:%vreg51
4B		  * %vreg52<def> = SRLI %t5, 22; GR32Bit:%vreg52
4B		  * %vreg53<def> = SRLI %t5, 12; GR32Bit:%vreg53
4B		  * %vreg54<def> = ANDI %vreg53<kill>, 15; GR32Bit:%vreg54,%vreg53
4B		  * %vreg55<def> = SRLI %t5, 6; GR32Bit:%vreg55
4B		  * %vreg56<def> = ANDI %vreg55<kill>, 63; GR32Bit:%vreg56,%vreg55
4B		  * %vreg57<def> = ADDI %zero, 832; GR32Bit:%vreg57
4B		  * %vreg58<def> = MUL %vreg52<kill>, %vreg57<kill>; GR32Bit:%vreg58,%vreg52,%vreg57
4B		  * %vreg59<def> = ADDI %zero, 52; GR32Bit:%vreg59
4B		  * %vreg60<def> = MUL %vreg54<kill>, %vreg59<kill>; GR32Bit:%vreg60,%vreg54,%vreg59
4B		  * %vreg61<def> = ADD %vreg60<kill>, %vreg56<kill>; GR32Bit:%vreg61,%vreg60,%vreg56
4B		  * %vreg62<def> = ADD %vreg61<kill>, %vreg58<kill>; GR32Bit:%vreg62,%vreg61,%vreg58
4B		  * %vreg63<def> = MUL %vreg62<kill>, %vreg51<kill>; GR32Bit:%vreg63,%vreg62,%vreg51
4B		  * %t5<def> = ADD %vreg50<kill>, %vreg63<kill>; GR32Bit:%vreg50,%vreg63
4B		  * %vreg9<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg9
4B		  * SRLI %vreg9, %vreg9, 12; GR32Bit:%vreg9
4B		  * %vreg8<def> = LUI <ga:@var>[TF=2]; GR32Bit:%vreg8
4B		  * %vreg10<def> = ADD %vreg9<kill>, %vreg8<kill>; GR32Bit:%vreg10,%vreg9,%vreg8
4B		  * %vreg11<def> = FLW %vreg10<kill>, 0; mem:LD4[@var] FP32Bit:%vreg11 GR32Bit:%vreg10
4B		  * %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
4B		  * %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
4B		  * SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
4B		  * %vreg6<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg6
4B		  * %vreg4<def> = LW %vreg0<kill>, 0; mem:LD4[%2] GR32Bit:%vreg4,%vreg0
4B		  * %vreg3<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg3
4B		  * %vreg2<def> = FLW %vreg1<kill>, 0; mem:LD4[%7](align=16) FP32Bit:%vreg2 GR32Bit:%vreg1
4B		  * FSW %vreg2<kill>, %vreg3, 0; mem:ST4[%3] FP32Bit:%vreg2 GR32Bit:%vreg3
4B		  * %vreg7<def> = FLW %vreg3<kill>, 0; mem:LD4[%3] FP32Bit:%vreg7 GR32Bit:%vreg3
4B		  * %vreg12<def> = FULE_S %vreg7<kill>, %vreg11<kill>; GR32Bit:%vreg12 FP32Bit:%vreg7,%vreg11
4B		  * %vreg5<def> = FLW %vreg4<kill>, 4; mem:LD4[%11] FP32Bit:%vreg5 GR32Bit:%vreg4
4B		  * FSW %vreg5<kill>, %vreg6<kill>, 0; mem:ST4[%4] FP32Bit:%vreg5 GR32Bit:%vreg6
4B		  * %vreg121<def> = LUI 1; GR32Bit:%vreg121
4B		  * WRITEPM %vreg121<kill>, %vreg12, 0; GR32Bit:%vreg121,%vreg12
4B		  * %vreg123<def> = LUI 2; GR32Bit:%vreg123
4B		  * WRITEPM %vreg123<kill>, %vreg12, 0; GR32Bit:%vreg123,%vreg12
4B		  * %vreg125<def> = LUI 3; GR32Bit:%vreg125
4B		  * WRITEPM %vreg125<kill>, %vreg12, 0; GR32Bit:%vreg125,%vreg12
4B		  * BNE <BB#2>, %vreg12<kill>, %zero; GR32Bit:%vreg12
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
4B		  * JAL <BB#1>
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
404B		%t4<def> = ADD %t5, %zero
404B		  * %vreg66<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg66
404B		  * %vreg67<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg67
404B		  * %vreg68<def> = SRLI %vreg67<kill>, 12; GR32Bit:%vreg68,%vreg67
404B		  * %vreg69<def> = ADD %vreg66<kill>, %vreg68<kill>; GR32Bit:%vreg69,%vreg66,%vreg68
404B		  * %vreg70<def> = ADDI %zero, 20; GR32Bit:%vreg70
404B		  * %vreg71<def> = SRLI %t5, 22; GR32Bit:%vreg71
404B		  * %vreg72<def> = SRLI %t5, 12; GR32Bit:%vreg72
404B		  * %vreg73<def> = ANDI %vreg72<kill>, 15; GR32Bit:%vreg73,%vreg72
404B		  * %vreg74<def> = SRLI %t5, 6; GR32Bit:%vreg74
404B		  * %vreg75<def> = ANDI %vreg74<kill>, 63; GR32Bit:%vreg75,%vreg74
404B		  * %vreg76<def> = ADDI %zero, 832; GR32Bit:%vreg76
404B		  * %vreg77<def> = MUL %vreg71<kill>, %vreg76<kill>; GR32Bit:%vreg77,%vreg71,%vreg76
404B		  * %vreg78<def> = ADDI %zero, 52; GR32Bit:%vreg78
404B		  * %vreg79<def> = MUL %vreg73<kill>, %vreg78<kill>; GR32Bit:%vreg79,%vreg73,%vreg78
404B		  * %vreg80<def> = ADD %vreg79<kill>, %vreg75<kill>; GR32Bit:%vreg80,%vreg79,%vreg75
404B		  * %vreg81<def> = ADD %vreg80<kill>, %vreg77<kill>; GR32Bit:%vreg81,%vreg80,%vreg77
404B		  * %vreg82<def> = MUL %vreg81<kill>, %vreg70<kill>; GR32Bit:%vreg82,%vreg81,%vreg70
404B		  * %t5<def> = ADD %vreg69<kill>, %vreg82<kill>; GR32Bit:%vreg69,%vreg82
404B		  * %vreg122<def> = LUI 1; GR32Bit:%vreg122
404B		  * %vreg127<def> = DREADPM %vreg122<kill>, 0; GR32Bit:%vreg127,%vreg122
404B		  * BNE <BB#2>, %vreg127<kill>, %zero; GR32Bit:%vreg127
404B		  * %zero<def> = ADDI %zero, 0
404B		  * %zero<def> = ADDI %zero, 0
404B		  * JAL <BB#1>
404B		  * %zero<def> = ADDI %zero, 0
404B		  * %zero<def> = ADDI %zero, 0
620B		%t4<def> = ADD %t5, %zero
620B		  * %vreg85<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg85
620B		  * %vreg86<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg86
620B		  * %vreg87<def> = SRLI %vreg86<kill>, 12; GR32Bit:%vreg87,%vreg86
620B		  * %vreg88<def> = ADD %vreg85<kill>, %vreg87<kill>; GR32Bit:%vreg88,%vreg85,%vreg87
620B		  * %vreg89<def> = ADDI %zero, 20; GR32Bit:%vreg89
620B		  * %vreg90<def> = SRLI %t5, 22; GR32Bit:%vreg90
620B		  * %vreg91<def> = SRLI %t5, 12; GR32Bit:%vreg91
620B		  * %vreg92<def> = ANDI %vreg91<kill>, 15; GR32Bit:%vreg92,%vreg91
620B		  * %vreg93<def> = SRLI %t5, 6; GR32Bit:%vreg93
620B		  * %vreg94<def> = ANDI %vreg93<kill>, 63; GR32Bit:%vreg94,%vreg93
620B		  * %vreg95<def> = ADDI %zero, 832; GR32Bit:%vreg95
620B		  * %vreg96<def> = MUL %vreg90<kill>, %vreg95<kill>; GR32Bit:%vreg96,%vreg90,%vreg95
620B		  * %vreg97<def> = ADDI %zero, 52; GR32Bit:%vreg97
620B		  * %vreg98<def> = MUL %vreg92<kill>, %vreg97<kill>; GR32Bit:%vreg98,%vreg92,%vreg97
620B		  * %vreg99<def> = ADD %vreg98<kill>, %vreg94<kill>; GR32Bit:%vreg99,%vreg98,%vreg94
620B		  * %vreg100<def> = ADD %vreg99<kill>, %vreg96<kill>; GR32Bit:%vreg100,%vreg99,%vreg96
620B		  * %vreg101<def> = MUL %vreg100<kill>, %vreg89<kill>; GR32Bit:%vreg101,%vreg100,%vreg89
620B		  * %t5<def> = ADD %vreg88<kill>, %vreg101<kill>; GR32Bit:%vreg88,%vreg101
620B		  * %vreg124<def> = LUI 2; GR32Bit:%vreg124
620B		  * %vreg128<def> = DREADPM %vreg124<kill>, 0; GR32Bit:%vreg128,%vreg124
620B		  * BNE <BB#2>, %vreg128<kill>, %zero; GR32Bit:%vreg128
620B		  * %zero<def> = ADDI %zero, 0
620B		  * %zero<def> = ADDI %zero, 0
620B		  * JAL <BB#1>
620B		  * %zero<def> = ADDI %zero, 0
620B		  * %zero<def> = ADDI %zero, 0
836B		%t4<def> = ADD %t5, %zero
836B		  * %vreg104<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg104
836B		  * %vreg105<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg105
836B		  * %vreg106<def> = SRLI %vreg105<kill>, 12; GR32Bit:%vreg106,%vreg105
836B		  * %vreg107<def> = ADD %vreg104<kill>, %vreg106<kill>; GR32Bit:%vreg107,%vreg104,%vreg106
836B		  * %vreg108<def> = ADDI %zero, 20; GR32Bit:%vreg108
836B		  * %vreg109<def> = SRLI %t5, 22; GR32Bit:%vreg109
836B		  * %vreg110<def> = SRLI %t5, 12; GR32Bit:%vreg110
836B		  * %vreg111<def> = ANDI %vreg110<kill>, 15; GR32Bit:%vreg111,%vreg110
836B		  * %vreg112<def> = SRLI %t5, 6; GR32Bit:%vreg112
836B		  * %vreg113<def> = ANDI %vreg112<kill>, 63; GR32Bit:%vreg113,%vreg112
836B		  * %vreg114<def> = ADDI %zero, 832; GR32Bit:%vreg114
836B		  * %vreg115<def> = MUL %vreg109<kill>, %vreg114<kill>; GR32Bit:%vreg115,%vreg109,%vreg114
836B		  * %vreg116<def> = ADDI %zero, 52; GR32Bit:%vreg116
836B		  * %vreg117<def> = MUL %vreg111<kill>, %vreg116<kill>; GR32Bit:%vreg117,%vreg111,%vreg116
836B		  * %vreg118<def> = ADD %vreg117<kill>, %vreg113<kill>; GR32Bit:%vreg118,%vreg117,%vreg113
836B		  * %vreg119<def> = ADD %vreg118<kill>, %vreg115<kill>; GR32Bit:%vreg119,%vreg118,%vreg115
836B		  * %vreg120<def> = MUL %vreg119<kill>, %vreg108<kill>; GR32Bit:%vreg120,%vreg119,%vreg108
836B		  * %t5<def> = ADD %vreg107<kill>, %vreg120<kill>; GR32Bit:%vreg107,%vreg120
836B		  * %vreg126<def> = LUI 3; GR32Bit:%vreg126
836B		  * %vreg129<def> = DREADPM %vreg126<kill>, 0; GR32Bit:%vreg129,%vreg126
836B		  * BNE <BB#2>, %vreg129<kill>, %zero; GR32Bit:%vreg129
836B		  * %zero<def> = ADDI %zero, 0
836B		  * %zero<def> = ADDI %zero, 0
836B		  * JAL <BB#1>
836B		  * %zero<def> = ADDI %zero, 0
836B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#1(16) BB#2(16)
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#768")">
> %t1<def> = LUI <MCSym="%lo("ga#768")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 20
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = LUI <MCSym="%lo("ga#0")">
> SRLI %t0, %t0, 12
> %t1<def> = LUI <ga:@var>[TF=2]
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %ft1<def> = FLW %t0<kill>, 0; mem:LD4[@var]
> %t0<def> = ADDI %t5, <fi#-1>
> %t2<def> = ADDI %t5, <fi#1>
> SW %t0, %t2, 0; mem:ST4[%2]
> %t1<def> = ADDI %t5, <fi#3>
> %t2<def> = LW %t2<kill>, 0; mem:LD4[%2]
> %fp<def> = ADDI %t5, <fi#2>
> %ft2<def> = FLW %t0<kill>, 0; mem:LD4[%7](align=16)
> FSW %ft2<kill>, %fp, 0; mem:ST4[%3]
> %ft2<def> = FLW %fp<kill>, 0; mem:LD4[%3]
> %t0<def> = FULE_S %ft2<kill>, %ft1<kill>
> %ft1<def> = FLW %t2<kill>, 4; mem:LD4[%11]
> FSW %ft1<kill>, %t1<kill>, 0; mem:ST4[%4]
> %t1<def> = LUI 1
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 2
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 3
> WRITEPM %t1<kill>, %t0, 0
> BNE <BB#2>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#1>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#768")">
> %t1<def> = LUI <MCSym="%lo("ga#768")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 20
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = LUI 1
> %t0<def> = DREADPM %t0<kill>, 0
> BNE <BB#2>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#1>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#768")">
> %t1<def> = LUI <MCSym="%lo("ga#768")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 20
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = LUI 2
> %t0<def> = DREADPM %t0<kill>, 0
> BNE <BB#2>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#1>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#768")">
> %t1<def> = LUI <MCSym="%lo("ga#768")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 20
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = LUI 3
> %t0<def> = DREADPM %t0<kill>, 0
> BNE <BB#2>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#1>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
1484B	BB#1: derived from LLVM BB %running_protection3.if.then
	    Predecessors according to CFG: BB#0
1492B		%vreg17<def> = ADDI %zero, 4; GR32Bit:%vreg17
1492B		  * %vreg13<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg13
1492B		  * %vreg15<def> = ADDI %zero, 16; GR32Bit:%vreg15
1492B		  * %vreg14<def> = LW %vreg13, 0; mem:LD4[%2] GR32Bit:%vreg14,%vreg13
1492B		  * SW %vreg15<kill>, %vreg14<kill>, 20; mem:ST4[%17] GR32Bit:%vreg15,%vreg14
1492B		  * %vreg16<def> = LW %vreg13<kill>, 0; mem:LD4[%2] GR32Bit:%vreg16,%vreg13
1492B		  * SW %vreg17<kill>, %vreg16<kill>, 16; mem:ST4[%19] GR32Bit:%vreg17,%vreg16
1500B		%zero<def> = ADDI %zero, 0
1508B		%zero<def> = ADDI %zero, 0
1516B		%zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#2
> %t0<def> = ADDI %zero, 4
> %t1<def> = ADDI %t5, <fi#1>
> %t2<def> = ADDI %zero, 16
> %fp<def> = LW %t1, 0; mem:LD4[%2]
> SW %t2<kill>, %fp<kill>, 20; mem:ST4[%17]
> %t1<def> = LW %t1<kill>, 0; mem:LD4[%2]
> SW %t0<kill>, %t1<kill>, 16; mem:ST4[%19]
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
1588B	BB#2: derived from LLVM BB %running_protection3.if.end
	    Predecessors according to CFG: BB#0 BB#1
168B		%vreg25<def> = LUI 277232; GR32Bit:%vreg25
168B		  * %a5<def> = LUI 0
168B		  * %a5<def> = SRLI %a5<internal>, 12
168B		  * ADD %vreg25, %vreg25, %a5; GR32Bit:%vreg25
168B		  * %vreg18<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg18
168B		  * %vreg22<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg22
168B		  * %vreg19<def> = LW %vreg18<kill>, 0; mem:LD4[%2] GR32Bit:%vreg19,%vreg18
168B		  * %vreg23<def> = FLW %vreg22<kill>, 0; mem:LD4[%4] FP32Bit:%vreg23 GR32Bit:%vreg22
168B		  * %vreg27<def> = COPY %vreg25<kill>; FP32Bit:%vreg27 GR32Bit:%vreg25
168B		  * %vreg20<def> = LW %vreg19<kill>, 8; mem:LD4[%21] GR32Bit:%vreg20,%vreg19
168B		  * %vreg24<def> = FADD_S_RDY %vreg23<kill>, %vreg23; FP32Bit:%vreg24,%vreg23,%vreg23
168B		  * %vreg26<def> = FADD_S_RDY %vreg27<kill>, %vreg24<kill>; FP32Bit:%vreg26,%vreg27,%vreg24
168B		  * %vreg21<def> = FCVT_S_W_RDY %vreg20<kill>; FP32Bit:%vreg21 GR32Bit:%vreg20
168B		  * %vreg28<def> = FULE_S %vreg21<kill>, %vreg26<kill>; GR32Bit:%vreg28 FP32Bit:%vreg21,%vreg26
168B		  * %vreg130<def> = LUI 1; GR32Bit:%vreg130
168B		  * WRITEPM %vreg130<kill>, %vreg28, 0; GR32Bit:%vreg130,%vreg28
168B		  * %vreg132<def> = LUI 2; GR32Bit:%vreg132
168B		  * WRITEPM %vreg132<kill>, %vreg28, 0; GR32Bit:%vreg132,%vreg28
168B		  * %vreg134<def> = LUI 3; GR32Bit:%vreg134
168B		  * WRITEPM %vreg134<kill>, %vreg28, 0; GR32Bit:%vreg134,%vreg28
168B		  * BNE <BB#4>, %vreg28<kill>, %zero; GR32Bit:%vreg28
168B		  * %zero<def> = ADDI %zero, 0
168B		  * %zero<def> = ADDI %zero, 0
168B		  * JAL <BB#3>
168B		  * %zero<def> = ADDI %zero, 0
168B		  * %zero<def> = ADDI %zero, 0
1840B		%vreg131<def> = LUI 1; GR32Bit:%vreg131
1840B		  * %vreg136<def> = DREADPM %vreg131<kill>, 0; GR32Bit:%vreg136,%vreg131
1840B		  * BNE <BB#4>, %vreg136<kill>, %zero; GR32Bit:%vreg136
1840B		  * %zero<def> = ADDI %zero, 0
1840B		  * %zero<def> = ADDI %zero, 0
1840B		  * JAL <BB#3>
1840B		  * %zero<def> = ADDI %zero, 0
1840B		  * %zero<def> = ADDI %zero, 0
1920B		%vreg133<def> = LUI 2; GR32Bit:%vreg133
1920B		  * %vreg137<def> = DREADPM %vreg133<kill>, 0; GR32Bit:%vreg137,%vreg133
1920B		  * BNE <BB#4>, %vreg137<kill>, %zero; GR32Bit:%vreg137
1920B		  * %zero<def> = ADDI %zero, 0
1920B		  * %zero<def> = ADDI %zero, 0
1920B		  * JAL <BB#3>
1920B		  * %zero<def> = ADDI %zero, 0
1920B		  * %zero<def> = ADDI %zero, 0
2000B		%vreg135<def> = LUI 3; GR32Bit:%vreg135
2000B		  * %vreg138<def> = DREADPM %vreg135<kill>, 0; GR32Bit:%vreg138,%vreg135
2000B		  * BNE <BB#4>, %vreg138<kill>, %zero; GR32Bit:%vreg138
2000B		  * %zero<def> = ADDI %zero, 0
2000B		  * %zero<def> = ADDI %zero, 0
2000B		  * JAL <BB#3>
2000B		  * %zero<def> = ADDI %zero, 0
2000B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#3(16) BB#4(16)
> %t0<def> = LUI 277232
> %a5<def> = LUI 0
> %a5<def> = SRLI %a5<internal>, 12
> ADD %t0, %t0, %a5
> %t1<def> = ADDI %t5, <fi#1>
> %t2<def> = ADDI %t5, <fi#3>
> %t1<def> = LW %t1<kill>, 0; mem:LD4[%2]
> %ft1<def> = FLW %t2<kill>, 0; mem:LD4[%4]
> %ft2<def> = COPY %t0<kill>
> %t0<def> = LW %t1<kill>, 8; mem:LD4[%21]
> %ft1<def> = FADD_S_RDY %ft1<kill>, %ft1
> %ft1<def> = FADD_S_RDY %ft2<kill>, %ft1<kill>
> %ft2<def> = FCVT_S_W_RDY %t0<kill>
> %t0<def> = FULE_S %ft2<kill>, %ft1<kill>
> %t1<def> = LUI 1
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 2
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 3
> WRITEPM %t1<kill>, %t0, 0
> BNE <BB#4>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#3>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 1
> %t0<def> = DREADPM %t0<kill>, 0
> BNE <BB#4>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#3>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 2
> %t0<def> = DREADPM %t0<kill>, 0
> BNE <BB#4>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#3>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 3
> %t0<def> = DREADPM %t0<kill>, 0
> BNE <BB#4>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#3>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
2216B	BB#3: derived from LLVM BB %running_protection3.if.then7
	    Predecessors according to CFG: BB#2
2224B		%vreg32<def> = ADDI %zero, 32; GR32Bit:%vreg32
2224B		  * %vreg29<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg29
2224B		  * %vreg30<def> = LW %vreg29, 0; mem:LD4[%2] GR32Bit:%vreg30,%vreg29
2224B		  * SW %vreg32<kill>, %vreg30<kill>, 16; mem:ST4[%29] GR32Bit:%vreg32,%vreg30
2224B		  * %vreg31<def> = ADDI %zero, 16; GR32Bit:%vreg31
2224B		  * %vreg33<def> = LW %vreg29<kill>, 0; mem:LD4[%2] GR32Bit:%vreg33,%vreg29
2224B		  * SW %vreg31<kill>, %vreg33<kill>, 20; mem:ST4[%31] GR32Bit:%vreg31,%vreg33
2232B		%zero<def> = ADDI %zero, 0
2240B		%zero<def> = ADDI %zero, 0
2248B		%zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#4
> %t1<def> = ADDI %zero, 32
> %t0<def> = ADDI %t5, <fi#1>
> %t2<def> = LW %t0, 0; mem:LD4[%2]
> SW %t1<kill>, %t2<kill>, 16; mem:ST4[%29]
> %t1<def> = ADDI %zero, 16
> %t0<def> = LW %t0<kill>, 0; mem:LD4[%2]
> SW %t1<kill>, %t0<kill>, 20; mem:ST4[%31]
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
2320B	BB#4: derived from LLVM BB %running_protection3.if.end10
	    Predecessors according to CFG: BB#2 BB#3
2328B		%vreg37<def> = ADDI %zero, 117; GR32Bit:%vreg37
2328B		  * %vreg34<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg34
2328B		  * %vreg35<def> = LW %vreg34<kill>, 0; mem:LD4[%2] GR32Bit:%vreg35,%vreg34
2328B		  * %vreg36<def> = LW %vreg35<kill>, 12; mem:LD4[%33] GR32Bit:%vreg36,%vreg35
2328B		  * %vreg139<def> = LUI 1; GR32Bit:%vreg139
2328B		  * WRITEPM %vreg139, %vreg36, 0; GR32Bit:%vreg139,%vreg36
2328B		  * %vreg141<def> = LUI 2; GR32Bit:%vreg141
2328B		  * WRITEPM %vreg141, %vreg36, 0; GR32Bit:%vreg141,%vreg36
2328B		  * %vreg143<def> = LUI 3; GR32Bit:%vreg143
2328B		  * WRITEPM %vreg143, %vreg36, 0; GR32Bit:%vreg143,%vreg36
2328B		  * WRITEPM %vreg139<kill>, %vreg37, 4; GR32Bit:%vreg139,%vreg37
2328B		  * WRITEPM %vreg141<kill>, %vreg37, 4; GR32Bit:%vreg141,%vreg37
2328B		  * WRITEPM %vreg143<kill>, %vreg37, 4; GR32Bit:%vreg143,%vreg37
2328B		  * BLT <BB#6>, %vreg36<kill>, %vreg37<kill>; GR32Bit:%vreg36,%vreg37
2328B		  * %zero<def> = ADDI %zero, 0
2328B		  * %zero<def> = ADDI %zero, 0
2328B		  * JAL <BB#5>
2328B		  * %zero<def> = ADDI %zero, 0
2328B		  * %zero<def> = ADDI %zero, 0
2480B		%vreg140<def> = LUI 1; GR32Bit:%vreg140
2480B		  * %vreg145<def> = DREADPM %vreg140, 0; GR32Bit:%vreg145,%vreg140
2480B		  * %vreg148<def> = DREADPM %vreg140<kill>, 4; GR32Bit:%vreg148,%vreg140
2480B		  * BLT <BB#6>, %vreg145<kill>, %vreg148<kill>; GR32Bit:%vreg145,%vreg148
2480B		  * %zero<def> = ADDI %zero, 0
2480B		  * %zero<def> = ADDI %zero, 0
2480B		  * JAL <BB#5>
2480B		  * %zero<def> = ADDI %zero, 0
2480B		  * %zero<def> = ADDI %zero, 0
2568B		%vreg142<def> = LUI 2; GR32Bit:%vreg142
2568B		  * %vreg146<def> = DREADPM %vreg142, 0; GR32Bit:%vreg146,%vreg142
2568B		  * %vreg149<def> = DREADPM %vreg142<kill>, 4; GR32Bit:%vreg149,%vreg142
2568B		  * BLT <BB#6>, %vreg146<kill>, %vreg149<kill>; GR32Bit:%vreg146,%vreg149
2568B		  * %zero<def> = ADDI %zero, 0
2568B		  * %zero<def> = ADDI %zero, 0
2568B		  * JAL <BB#5>
2568B		  * %zero<def> = ADDI %zero, 0
2568B		  * %zero<def> = ADDI %zero, 0
2656B		%vreg144<def> = LUI 3; GR32Bit:%vreg144
2656B		  * %vreg147<def> = DREADPM %vreg144, 0; GR32Bit:%vreg147,%vreg144
2656B		  * %vreg150<def> = DREADPM %vreg144<kill>, 4; GR32Bit:%vreg150,%vreg144
2656B		  * BLT <BB#6>, %vreg147<kill>, %vreg150<kill>; GR32Bit:%vreg147,%vreg150
2656B		  * %zero<def> = ADDI %zero, 0
2656B		  * %zero<def> = ADDI %zero, 0
2656B		  * JAL <BB#5>
2656B		  * %zero<def> = ADDI %zero, 0
2656B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#5(16) BB#6(16)
> %t0<def> = ADDI %zero, 117
> %t1<def> = ADDI %t5, <fi#1>
> %t1<def> = LW %t1<kill>, 0; mem:LD4[%2]
> %t1<def> = LW %t1<kill>, 12; mem:LD4[%33]
> %t2<def> = LUI 1
> WRITEPM %t2, %t1, 0
> %fp<def> = LUI 2
> WRITEPM %fp, %t1, 0
> %a0<def> = LUI 3
> WRITEPM %a0, %t1, 0
> WRITEPM %t2<kill>, %t0, 4
> WRITEPM %fp<kill>, %t0, 4
> WRITEPM %a0<kill>, %t0, 4
> BLT <BB#6>, %t1<kill>, %t0<kill>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#5>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 1
> %t1<def> = DREADPM %t0, 0
> %t0<def> = DREADPM %t0<kill>, 4
> BLT <BB#6>, %t1<kill>, %t0<kill>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#5>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 2
> %t1<def> = DREADPM %t0, 0
> %t0<def> = DREADPM %t0<kill>, 4
> BLT <BB#6>, %t1<kill>, %t0<kill>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#5>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t1<def> = LUI 3
> %t0<def> = DREADPM %t1, 0
> %t1<def> = DREADPM %t1<kill>, 4
> BLT <BB#6>, %t0<kill>, %t1<kill>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#5>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
2928B	BB#5: derived from LLVM BB %running_protection3.if.then14
	    Predecessors according to CFG: BB#4
2936B		%vreg40<def> = ADDI %zero, 16; GR32Bit:%vreg40
2936B		  * %vreg38<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg38
2936B		  * %vreg39<def> = LW %vreg38, 0; mem:LD4[%2] GR32Bit:%vreg39,%vreg38
2936B		  * SW %vreg40, %vreg39<kill>, 20; mem:ST4[%37] GR32Bit:%vreg40,%vreg39
2936B		  * %vreg41<def> = LW %vreg38<kill>, 0; mem:LD4[%2] GR32Bit:%vreg41,%vreg38
2936B		  * SW %vreg40<kill>, %vreg41<kill>, 16; mem:ST4[%39] GR32Bit:%vreg40,%vreg41
2944B		%zero<def> = ADDI %zero, 0
2952B		%zero<def> = ADDI %zero, 0
2960B		%zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#6
> %t0<def> = ADDI %zero, 16
> %t1<def> = ADDI %t5, <fi#1>
> %t2<def> = LW %t1, 0; mem:LD4[%2]
> SW %t0, %t2<kill>, 20; mem:ST4[%37]
> %t1<def> = LW %t1<kill>, 0; mem:LD4[%2]
> SW %t0<kill>, %t1<kill>, 16; mem:ST4[%39]
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
3016B	BB#6: derived from LLVM BB %running_protection3.return
	    Predecessors according to CFG: BB#4 BB#5
3024B		%vreg44<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg44
3024B		  * %vreg42<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg42
3024B		  * %vreg43<def> = LW %vreg42<kill>, 0; mem:LD4[%2] GR32Bit:%vreg43,%vreg42
3024B		  * SW %vreg43<kill>, %vreg44<kill>, 0; mem:ST4[%1] GR32Bit:%vreg43,%vreg44
3024B		  * %vreg151<def> = ADDI %zero, 128; GR32Bit:%vreg151
3024B		  * %vreg152<def> = ADDI %zero, 1; GR32Bit:%vreg152
3024B		  * WRITECM %vreg151, %vreg152<kill>, 60; GR32Bit:%vreg151,%vreg152
3024B		  * %vreg153<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg153
3024B		  * %vreg154<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg154
3024B		  * %vreg155<def> = SRLI %vreg154<kill>, 12; GR32Bit:%vreg155,%vreg154
3024B		  * %vreg156<def> = ADD %vreg153<kill>, %vreg155<kill>; GR32Bit:%vreg156,%vreg153,%vreg155
3024B		  * %vreg157<def> = ADDI %zero, 20; GR32Bit:%vreg157
3024B		  * %vreg158<def> = SRLI %vreg151, 22; GR32Bit:%vreg158,%vreg151
3024B		  * %vreg159<def> = SRLI %vreg151, 12; GR32Bit:%vreg159,%vreg151
3024B		  * %vreg160<def> = ANDI %vreg159<kill>, 15; GR32Bit:%vreg160,%vreg159
3024B		  * %vreg161<def> = SRLI %vreg151, 6; GR32Bit:%vreg161,%vreg151
3024B		  * %vreg162<def> = ANDI %vreg161<kill>, 63; GR32Bit:%vreg162,%vreg161
3024B		  * %vreg163<def> = ADDI %zero, 832; GR32Bit:%vreg163
3024B		  * %vreg164<def> = MUL %vreg158<kill>, %vreg163<kill>; GR32Bit:%vreg164,%vreg158,%vreg163
3024B		  * %vreg165<def> = ADDI %zero, 52; GR32Bit:%vreg165
3024B		  * %vreg166<def> = MUL %vreg160<kill>, %vreg165<kill>; GR32Bit:%vreg166,%vreg160,%vreg165
3024B		  * %vreg167<def> = ADD %vreg166<kill>, %vreg162<kill>; GR32Bit:%vreg167,%vreg166,%vreg162
3024B		  * %vreg168<def> = ADD %vreg167<kill>, %vreg164<kill>; GR32Bit:%vreg168,%vreg167,%vreg164
3024B		  * %vreg169<def> = MUL %vreg168<kill>, %vreg157<kill>; GR32Bit:%vreg169,%vreg168,%vreg157
3024B		  * %vreg170<def> = ADD %vreg169<kill>, %vreg156<kill>; GR32Bit:%vreg170,%vreg169,%vreg156
3024B		  * %vreg171<def> = LW %t5, 0; GR32Bit:%vreg171
3024B		  * SW %vreg171<kill>, %vreg170<kill>, 4; GR32Bit:%vreg171,%vreg170
3024B		  * %vreg172<def> = LUI 1; GR32Bit:%vreg172
3024B		  * WRITEPM %vreg172<kill>, %vreg151<kill>, 0; GR32Bit:%vreg172,%vreg151
3024B		  * FDELETE %t4, 0
3024B		  * END 0
3024B		  * %zero<def> = ADDI %zero, 0
3024B		  * %zero<def> = ADDI %zero, 0
3296B		%vreg173<def> = LUI 1; GR32Bit:%vreg173
3296B		  * %vreg174<def> = DREADPM %vreg173<kill>, 0; GR32Bit:%vreg174,%vreg173
3296B		  * %vreg175<def> = LUI 1048575; GR32Bit:%vreg175
3296B		  * %a5<def> = LUI 4095
3296B		  * %a5<def> = SRLI %a5<internal>, 12
3296B		  * ADD %vreg175, %vreg175, %a5; GR32Bit:%vreg175
3296B		  * SYNC %vreg174, %vreg175<kill>, 60; GR32Bit:%vreg174,%vreg175
3296B		  * END 0
3296B		  * %zero<def> = ADDI %zero, 0
3296B		  * %zero<def> = ADDI %zero, 0
3376B		END 0
3376B		  * %zero<def> = ADDI %zero, 0
3376B		  * %zero<def> = ADDI %zero, 0
3400B		END 0
3400B		  * %zero<def> = ADDI %zero, 0
3400B		  * %zero<def> = ADDI %zero, 0
> %t0<def> = ADDI %t5, <fi#0>
> %t1<def> = ADDI %t5, <fi#1>
> %t1<def> = LW %t1<kill>, 0; mem:LD4[%2]
> SW %t1<kill>, %t0<kill>, 0; mem:ST4[%1]
> %t0<def> = ADDI %zero, 128
> %t1<def> = ADDI %zero, 1
> WRITECM %t0, %t1<kill>, 60
> %t1<def> = LUI <MCSym="%hi("ga#768")">
> %t2<def> = LUI <MCSym="%lo("ga#768")">
> %t2<def> = SRLI %t2<kill>, 12
> %t1<def> = ADD %t1<kill>, %t2<kill>
> %t2<def> = ADDI %zero, 20
> %fp<def> = SRLI %t0, 22
> %a0<def> = SRLI %t0, 12
> %a0<def> = ANDI %a0<kill>, 15
> %a1<def> = SRLI %t0, 6
> %a1<def> = ANDI %a1<kill>, 63
> %a2<def> = ADDI %zero, 832
> %fp<def> = MUL %fp<kill>, %a2<kill>
> %a2<def> = ADDI %zero, 52
> %a0<def> = MUL %a0<kill>, %a2<kill>
> %a0<def> = ADD %a0<kill>, %a1<kill>
> %fp<def> = ADD %a0<kill>, %fp<kill>
> %t2<def> = MUL %fp<kill>, %t2<kill>
> %t1<def> = ADD %t2<kill>, %t1<kill>
> %t2<def> = LW %t5, 0
> SW %t2<kill>, %t1<kill>, 4
> %t1<def> = LUI 1
> WRITEPM %t1<kill>, %t0<kill>, 0
> FDELETE %t4, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 1
> %t0<def> = DREADPM %t0<kill>, 0
> %t1<def> = LUI 1048575
> %a5<def> = LUI 4095
> %a5<def> = SRLI %a5<internal>, 12
> ADD %t1, %t1, %a5
> SYNC %t0, %t1<kill>, 60
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
********** EMITTING LIVE DEBUG VARIABLES **********
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: running_protection3
real copy:   %ft2<def> = COPY %t0<kill>
  %ft2<def> = COPY %t0<kill>
replaced by: %t0<def> = LUI 277232
current state of mf:# Machine code for function running_protection3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %running_protection3.entry
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#768")">
	  * %t1<def> = LUI <MCSym="%lo("ga#768")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 20
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = LUI <MCSym="%lo("ga#0")">
	  * SRLI %t0, %t0, 12
	  * %t1<def> = LUI <ga:@var>[TF=2]
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %ft1<def> = FLW %t0<kill>, 0; mem:LD4[@var]
	  * %t0<def> = ADDI %t5, <fi#-1>
	  * %t2<def> = ADDI %t5, <fi#1>
	  * SW %t0, %t2, 0; mem:ST4[%2]
	  * %t1<def> = ADDI %t5, <fi#3>
	  * %t2<def> = LW %t2<kill>, 0; mem:LD4[%2]
	  * %fp<def> = ADDI %t5, <fi#2>
	  * %ft2<def> = FLW %t0<kill>, 0; mem:LD4[%7](align=16)
	  * FSW %ft2<kill>, %fp, 0; mem:ST4[%3]
	  * %ft2<def> = FLW %fp<kill>, 0; mem:LD4[%3]
	  * %t0<def> = FULE_S %ft2<kill>, %ft1<kill>
	  * %ft1<def> = FLW %t2<kill>, 4; mem:LD4[%11]
	  * FSW %ft1<kill>, %t1<kill>, 0; mem:ST4[%4]
	  * %t1<def> = LUI 1
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 2
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 3
	  * WRITEPM %t1<kill>, %t0, 0
	  * BNE <BB#2>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#768")">
	  * %t1<def> = LUI <MCSym="%lo("ga#768")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 20
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = LUI 1
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BNE <BB#2>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#768")">
	  * %t1<def> = LUI <MCSym="%lo("ga#768")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 20
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = LUI 2
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BNE <BB#2>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#768")">
	  * %t1<def> = LUI <MCSym="%lo("ga#768")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 20
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = LUI 3
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BNE <BB#2>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#1(16) BB#2(16)

BB#1: derived from LLVM BB %running_protection3.if.then
    Predecessors according to CFG: BB#0
	%t0<def> = ADDI %zero, 4
	  * %t1<def> = ADDI %t5, <fi#1>
	  * %t2<def> = ADDI %zero, 16
	  * %fp<def> = LW %t1, 0; mem:LD4[%2]
	  * SW %t2<kill>, %fp<kill>, 20; mem:ST4[%17]
	  * %t1<def> = LW %t1<kill>, 0; mem:LD4[%2]
	  * SW %t0<kill>, %t1<kill>, 16; mem:ST4[%19]
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %running_protection3.if.end
    Predecessors according to CFG: BB#0 BB#1
	%t0<def> = LUI 277232
	  * %a5<def> = LUI 0
	  * %a5<def> = SRLI %a5<internal>, 12
	  * ADD %t0, %t0, %a5
	  * %t1<def> = ADDI %t5, <fi#1>
	  * %t2<def> = ADDI %t5, <fi#3>
	  * %t1<def> = LW %t1<kill>, 0; mem:LD4[%2]
	  * %ft1<def> = FLW %t2<kill>, 0; mem:LD4[%4]
	  * %ft2<def> = FMV_S_X %t0<kill>
	  * %t0<def> = LW %t1<kill>, 8; mem:LD4[%21]
	  * %ft1<def> = FADD_S_RDY %ft1<kill>, %ft1
	  * %ft1<def> = FADD_S_RDY %ft2<kill>, %ft1<kill>
	  * %ft2<def> = FCVT_S_W_RDY %t0<kill>
	  * %t0<def> = FULE_S %ft2<kill>, %ft1<kill>
	  * %t1<def> = LUI 1
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 2
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 3
	  * WRITEPM %t1<kill>, %t0, 0
	  * BNE <BB#4>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#3>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 1
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BNE <BB#4>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#3>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 2
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BNE <BB#4>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#3>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 3
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BNE <BB#4>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#3>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#3(16) BB#4(16)

BB#3: derived from LLVM BB %running_protection3.if.then7
    Predecessors according to CFG: BB#2
	%t1<def> = ADDI %zero, 32
	  * %t0<def> = ADDI %t5, <fi#1>
	  * %t2<def> = LW %t0, 0; mem:LD4[%2]
	  * SW %t1<kill>, %t2<kill>, 16; mem:ST4[%29]
	  * %t1<def> = ADDI %zero, 16
	  * %t0<def> = LW %t0<kill>, 0; mem:LD4[%2]
	  * SW %t1<kill>, %t0<kill>, 20; mem:ST4[%31]
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#4

BB#4: derived from LLVM BB %running_protection3.if.end10
    Predecessors according to CFG: BB#2 BB#3
	%t0<def> = ADDI %zero, 117
	  * %t1<def> = ADDI %t5, <fi#1>
	  * %t1<def> = LW %t1<kill>, 0; mem:LD4[%2]
	  * %t1<def> = LW %t1<kill>, 12; mem:LD4[%33]
	  * %t2<def> = LUI 1
	  * WRITEPM %t2, %t1, 0
	  * %fp<def> = LUI 2
	  * WRITEPM %fp, %t1, 0
	  * %a0<def> = LUI 3
	  * WRITEPM %a0, %t1, 0
	  * WRITEPM %t2<kill>, %t0, 4
	  * WRITEPM %fp<kill>, %t0, 4
	  * WRITEPM %a0<kill>, %t0, 4
	  * BLT <BB#6>, %t1<kill>, %t0<kill>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#5>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 1
	  * %t1<def> = DREADPM %t0, 0
	  * %t0<def> = DREADPM %t0<kill>, 4
	  * BLT <BB#6>, %t1<kill>, %t0<kill>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#5>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 2
	  * %t1<def> = DREADPM %t0, 0
	  * %t0<def> = DREADPM %t0<kill>, 4
	  * BLT <BB#6>, %t1<kill>, %t0<kill>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#5>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t1<def> = LUI 3
	  * %t0<def> = DREADPM %t1, 0
	  * %t1<def> = DREADPM %t1<kill>, 4
	  * BLT <BB#6>, %t0<kill>, %t1<kill>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#5>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#5(16) BB#6(16)

BB#5: derived from LLVM BB %running_protection3.if.then14
    Predecessors according to CFG: BB#4
	%t0<def> = ADDI %zero, 16
	  * %t1<def> = ADDI %t5, <fi#1>
	  * %t2<def> = LW %t1, 0; mem:LD4[%2]
	  * SW %t0, %t2<kill>, 20; mem:ST4[%37]
	  * %t1<def> = LW %t1<kill>, 0; mem:LD4[%2]
	  * SW %t0<kill>, %t1<kill>, 16; mem:ST4[%39]
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#6

BB#6: derived from LLVM BB %running_protection3.return
    Predecessors according to CFG: BB#4 BB#5
	%t0<def> = ADDI %t5, <fi#0>
	  * %t1<def> = ADDI %t5, <fi#1>
	  * %t1<def> = LW %t1<kill>, 0; mem:LD4[%2]
	  * SW %t1<kill>, %t0<kill>, 0; mem:ST4[%1]
	  * %t0<def> = ADDI %zero, 128
	  * %t1<def> = ADDI %zero, 1
	  * WRITECM %t0, %t1<kill>, 60
	  * %t1<def> = LUI <MCSym="%hi("ga#768")">
	  * %t2<def> = LUI <MCSym="%lo("ga#768")">
	  * %t2<def> = SRLI %t2<kill>, 12
	  * %t1<def> = ADD %t1<kill>, %t2<kill>
	  * %t2<def> = ADDI %zero, 20
	  * %fp<def> = SRLI %t0, 22
	  * %a0<def> = SRLI %t0, 12
	  * %a0<def> = ANDI %a0<kill>, 15
	  * %a1<def> = SRLI %t0, 6
	  * %a1<def> = ANDI %a1<kill>, 63
	  * %a2<def> = ADDI %zero, 832
	  * %fp<def> = MUL %fp<kill>, %a2<kill>
	  * %a2<def> = ADDI %zero, 52
	  * %a0<def> = MUL %a0<kill>, %a2<kill>
	  * %a0<def> = ADD %a0<kill>, %a1<kill>
	  * %fp<def> = ADD %a0<kill>, %fp<kill>
	  * %t2<def> = MUL %fp<kill>, %t2<kill>
	  * %t1<def> = ADD %t2<kill>, %t1<kill>
	  * %t2<def> = LW %t5, 0
	  * SW %t2<kill>, %t1<kill>, 4
	  * %t1<def> = LUI 1
	  * WRITEPM %t1<kill>, %t0<kill>, 0
	  * FDELETE %t4, 0
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 1
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * %t1<def> = LUI 1048575
	  * %a5<def> = LUI 4095
	  * %a5<def> = SRLI %a5<internal>, 12
	  * ADD %t1, %t1, %a5
	  * SYNC %t0, %t1<kill>, 60
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0

# End machine code for function running_protection3.

lowering frame index for func running_protection3:-1 TO VAL:16
lowering frame index for func running_protection3:1 TO VAL:4
lowering frame index for func running_protection3:3 TO VAL:12
lowering frame index for func running_protection3:2 TO VAL:8
lowering frame index for func running_protection3:1 TO VAL:4
lowering frame index for func running_protection3:1 TO VAL:4
lowering frame index for func running_protection3:3 TO VAL:12
lowering frame index for func running_protection3:1 TO VAL:4
lowering frame index for func running_protection3:1 TO VAL:4
lowering frame index for func running_protection3:1 TO VAL:4
lowering frame index for func running_protection3:0 TO VAL:0
lowering frame index for func running_protection3:1 TO VAL:4
