Args: /home/arka/Workspace/work/Git_Compiler_Repo/redefine-tests/ECU_KERNELS/../../..//MM_Compiler_latest/build/Release+Asserts/bin/llc --mattr=+has4ce --mtriple redefine -debug ./Working/eicas_1_HyOpPass.ll -o ./Working/eicas_1.as 

Features:+has4ce
CPU:REDEFINE

CGP: Found      local addrmode: [Base:%0]
CGP: Found      local addrmode: [Base:%1]
CGP: Found      local addrmode: [Base:%1]
CGP: Found      local addrmode: [Base:%0]
CGP: Found      local addrmode: [Base:%1]
CGP: Found      local addrmode: [Base:%1]
To merge:

redefine_start1.entry:
  %0 = bitcast i32* @eicas_discretes to i32*
  store i32 0, i32* %0, align 4
  %1 = alloca i32*, align 4, !ConsumedBy !6
  store i32* getelementptr inbounds ([10 x i32]* @redefine_in_sensors, i32 0, i32 0), i32** %1
  %2 = load i32** %1
  br label %redefine_start1.return



Computing probabilities for redefine_start1.return
new hop:redefine_start1
new hyop#0:redefine_start1
new hop:redefine_start2
new hyop#1:redefine_start2
new hop:AssignFunction3
new hyop#2:AssignFunction3
problems setting inputs?
skipping abort
source hop:redefine_start1
frame size for hop redefine_start1:4
source hop:redefine_start2
source hop:AssignFunction3
frame size for hop AssignFunction3:12
max mem frame size:12
digraph{
redefine_start1[label="Name:redefine_start1,Dom:NULL, PostDom:NULL,Map:0:0, Context frame:0,SyncCount:1"];
redefine_start1->AssignFunction3[label=localref];
redefine_start2[label="Name:redefine_start2,Dom:NULL, PostDom:NULL,Map:0:0, Context frame:0,SyncCount:0"];
AssignFunction3[label="Name:AssignFunction3,Dom:NULL, PostDom:NULL,Map:0:0, Context frame:0,SyncCount:0"];
AssignFunction3->redefine_start2[label=scalar0];
}
Setting domf of node redefine_start1 to size 0
Setting domf of node redefine_start2 to size 0
Setting domf of node AssignFunction3 to size 0
idom of node:redefine_start1
idom of node:AssignFunction3

------
forwarding address to redefine_start1:

------
forwarding address to redefine_start2:

------
forwarding address to AssignFunction3:

Dominant sequence computed:
redefine_start1->AssignFunction3->redefine_start2->

Dominant sequence computed:
redefine_start1->AssignFunction3->redefine_start2->
before merging, num of clusters:1
each cluster:
redefine_start1,AssignFunction3,redefine_start2,
Minimizing ordering edges
setting context frame id of redefine_start1 to 0
setting context frame id of AssignFunction3 to 1
setting context frame id of redefine_start2 to 2
Computing whether there is a control/scalar path between a pair of HyperOps communicating via memory and adding sync edges if there is no control path
adding a sync edge between redefine_start1 and AssignFunction3
If the producer and consumer are mapped to different CRs, treat them as localrefs only instead of scalars to avoid reconciles
problems setting inputs?
generated cfg:Setting domf of node redefine_start1 to size 0
Setting domf of node redefine_start2 to size 0
Setting domf of node AssignFunction3 to size 0
idom of node:redefine_start1
idom of node:AssignFunction3
Delivering reaching predicate with decrement count in case operands to be delivered are on the non taken path
before decrementing sync, graph:Decrementing sync count for nodes with sync edges coming from mutually exclusive paths
updating node with incoming sync edges redefine_start1
updating node with incoming sync edges AssignFunction3
after minimizing cluster and converting scalar edges to local refs, graph:digraph{
redefine_start1[label="Name:redefine_start1,Dom:NULL, PostDom:AssignFunction3,Map:0:0, Context frame:0,SyncCount:1"];
redefine_start1->AssignFunction3[label=localref];
redefine_start1->AssignFunction3[label=sync];
redefine_start2[label="Name:redefine_start2,Dom:AssignFunction3, PostDom:NULL,Map:0:0, Context frame:2,SyncCount:0"];
AssignFunction3[label="Name:AssignFunction3,Dom:redefine_start1, PostDom:redefine_start2,Map:0:0, Context frame:1,SyncCount:1"];
AssignFunction3->redefine_start2[label=scalar0];
}
num of clusters:1
num constraints:0
setting target resource 0
setting target resource 0
setting target resource 0
digraph{
redefine_start1[label="Name:redefine_start1,Dom:NULL, PostDom:AssignFunction3,Map:0:0, Context frame:0,SyncCount:1"];
redefine_start1->AssignFunction3[label=localref];
redefine_start1->AssignFunction3[label=sync];
redefine_start2[label="Name:redefine_start2,Dom:AssignFunction3, PostDom:NULL,Map:0:0, Context frame:2,SyncCount:0"];
AssignFunction3[label="Name:AssignFunction3,Dom:redefine_start1, PostDom:redefine_start2,Map:0:0, Context frame:1,SyncCount:1"];
AssignFunction3->redefine_start2[label=scalar0];
}



=== redefine_start1
I was here to add @eicas_discretes = global i32 0, align 4
store visit is after?  store i32 0, i32* %0, align 4
I was here to add i32 0
whats in dag after store?SelectionDAG has 5 nodes:
    0x1d09b38: ch = EntryToken [ORD=2]

    0x1d266e0: i32 = Constant<0> [ORD=2]

    0x1d265e0: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=1]

    0x1d267e0: i32 = undef [ORD=2]

  0x1d268e0: ch = store 0x1d09b38, 0x1d266e0, 0x1d265e0, 0x1d267e0<ST4[%0]> [ORD=2]


store visit is after?  store i32* getelementptr inbounds ([10 x i32]* @redefine_in_sensors, i32 0, i32 0), i32** %1
I was here to add i32* getelementptr inbounds ([10 x i32]* @redefine_in_sensors, i32 0, i32 0)
I was here to add @redefine_in_sensors = common global [10 x i32] zeroinitializer, align 4
I was here to add   %1 = alloca i32*, align 4, !ConsumedBy !6
whats in dag after store?SelectionDAG has 8 nodes:
  0x1d267e0: i32 = undef [ORD=2]

      0x1d09b38: ch = EntryToken [ORD=2]

      0x1d266e0: i32 = Constant<0> [ORD=2]

      0x1d265e0: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=1]

      0x1d267e0: <multiple use>
    0x1d268e0: ch = store 0x1d09b38, 0x1d266e0, 0x1d265e0, 0x1d267e0<ST4[%0]> [ORD=2]

    0x1d269e0: i32 = GlobalAddress<[10 x i32]* @redefine_in_sensors> 0 [ORD=3]

    0x1d26ae0: i32 = FrameIndex<0> [ORD=4]

    0x1d267e0: <multiple use>
  0x1d26be0: ch = store 0x1d268e0, 0x1d269e0, 0x1d26ae0, 0x1d267e0<ST4[%1]> [ORD=4]


visiting load instruction   %2 = load i32** %1
with I type i32*and sd value :0x1d26ae0: i32 = FrameIndex<0>
new load?0x1d26ce0: i32,ch = load 0x1d26be0, 0x1d26ae0, 0x1d267e0<LD4[%1]>
dag after load is dealt with?SelectionDAG has 9 nodes:
  0x1d267e0: i32 = undef [ORD=2]

  0x1d26ae0: i32 = FrameIndex<0> [ORD=4]

        0x1d09b38: ch = EntryToken [ORD=2]

        0x1d266e0: i32 = Constant<0> [ORD=2]

        0x1d265e0: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=1]

        0x1d267e0: <multiple use>
      0x1d268e0: ch = store 0x1d09b38, 0x1d266e0, 0x1d265e0, 0x1d267e0<ST4[%0]> [ORD=2]

      0x1d269e0: i32 = GlobalAddress<[10 x i32]* @redefine_in_sensors> 0 [ORD=3]

      0x1d26ae0: <multiple use>
      0x1d267e0: <multiple use>
    0x1d26be0: ch = store 0x1d268e0, 0x1d269e0, 0x1d26ae0, 0x1d267e0<ST4[%1]> [ORD=4]

    0x1d26ae0: <multiple use>
    0x1d267e0: <multiple use>
  0x1d26ce0: i32,ch = load 0x1d26be0, 0x1d26ae0, 0x1d267e0<LD4[%1]>

      0x1d09b38: ch = EntryToken [ORD=2]

      0x1d266e0: i32 = Constant<0> [ORD=2]

      0x1d265e0: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=1]

      0x1d267e0: <multiple use>
    0x1d268e0: ch = store 0x1d09b38, 0x1d266e0, 0x1d265e0, 0x1d267e0<ST4[%0]> [ORD=2]

    0x1d269e0: i32 = GlobalAddress<[10 x i32]* @redefine_in_sensors> 0 [ORD=3]

    0x1d26ae0: <multiple use>
    0x1d267e0: <multiple use>
  0x1d26be0: ch = store 0x1d268e0, 0x1d269e0, 0x1d26ae0, 0x1d267e0<ST4[%1]> [ORD=4]


Initial selection DAG: BB#0 'redefine_start1:redefine_start1.return'
SelectionDAG has 9 nodes:
  0x1d267e0: i32 = undef [ORD=2]

  0x1d26ae0: i32 = FrameIndex<0> [ORD=4]

        0x1d09b38: ch = EntryToken [ORD=2]

        0x1d266e0: i32 = Constant<0> [ORD=2]

        0x1d265e0: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=1]

        0x1d267e0: <multiple use>
      0x1d268e0: ch = store 0x1d09b38, 0x1d266e0, 0x1d265e0, 0x1d267e0<ST4[%0]> [ORD=2]

      0x1d269e0: i32 = GlobalAddress<[10 x i32]* @redefine_in_sensors> 0 [ORD=3]

      0x1d26ae0: <multiple use>
      0x1d267e0: <multiple use>
    0x1d26be0: ch = store 0x1d268e0, 0x1d269e0, 0x1d26ae0, 0x1d267e0<ST4[%1]> [ORD=4]

    0x1d26ae0: <multiple use>
    0x1d267e0: <multiple use>
  0x1d26ce0: i32,ch = load 0x1d26be0, 0x1d26ae0, 0x1d267e0<LD4[%1]> [ORD=5]

      0x1d09b38: ch = EntryToken [ORD=2]

      0x1d266e0: i32 = Constant<0> [ORD=2]

      0x1d265e0: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=1]

      0x1d267e0: <multiple use>
    0x1d268e0: ch = store 0x1d09b38, 0x1d266e0, 0x1d265e0, 0x1d267e0<ST4[%0]> [ORD=2]

    0x1d269e0: i32 = GlobalAddress<[10 x i32]* @redefine_in_sensors> 0 [ORD=3]

    0x1d26ae0: <multiple use>
    0x1d267e0: <multiple use>
  0x1d26be0: ch = store 0x1d268e0, 0x1d269e0, 0x1d26ae0, 0x1d267e0<ST4[%1]> [ORD=4]


Optimized lowered selection DAG: BB#0 'redefine_start1:redefine_start1.return'
SelectionDAG has 8 nodes:
  0x1d267e0: i32 = undef [ORD=2]

      0x1d09b38: ch = EntryToken [ORD=2]

      0x1d266e0: i32 = Constant<0> [ORD=2]

      0x1d265e0: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=1]

      0x1d267e0: <multiple use>
    0x1d268e0: ch = store 0x1d09b38, 0x1d266e0, 0x1d265e0, 0x1d267e0<ST4[%0]> [ORD=2]

    0x1d269e0: i32 = GlobalAddress<[10 x i32]* @redefine_in_sensors> 0 [ORD=3]

    0x1d26ae0: i32 = FrameIndex<0> [ORD=4]

    0x1d267e0: <multiple use>
  0x1d26be0: ch = store 0x1d268e0, 0x1d269e0, 0x1d26ae0, 0x1d267e0<ST4[%1]> [ORD=4]


Legally typed node: 0x1d26ae0: i32 = FrameIndex<0> [ORD=4] [ID=0]

Legally typed node: 0x1d269e0: i32 = GlobalAddress<[10 x i32]* @redefine_in_sensors> 0 [ORD=3] [ID=0]

Legally typed node: 0x1d267e0: i32 = undef [ORD=2] [ID=0]

Legally typed node: 0x1d266e0: i32 = Constant<0> [ORD=2] [ID=0]

Legally typed node: 0x1d265e0: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=1] [ID=0]

Legally typed node: 0x1d09b38: ch = EntryToken [ORD=2] [ID=0]

Legally typed node: 0x1d268e0: ch = store 0x1d09b38, 0x1d266e0, 0x1d265e0, 0x1d267e0<ST4[%0]> [ORD=2] [ID=0]

Legally typed node: 0x1d26be0: ch = store 0x1d268e0, 0x1d269e0, 0x1d26ae0, 0x1d267e0<ST4[%1]> [ORD=4] [ID=0]

Legally typed node: 0x7fff243c9bc0: ch = handlenode 0x1d26be0 [ID=0]

Type-legalized selection DAG: BB#0 'redefine_start1:redefine_start1.return'
SelectionDAG has 8 nodes:
  0x1d267e0: i32 = undef [ORD=2] [ID=-3]

      0x1d09b38: ch = EntryToken [ORD=2] [ID=-3]

      0x1d266e0: i32 = Constant<0> [ORD=2] [ID=-3]

      0x1d265e0: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=1] [ID=-3]

      0x1d267e0: <multiple use>
    0x1d268e0: ch = store 0x1d09b38, 0x1d266e0, 0x1d265e0, 0x1d267e0<ST4[%0]> [ORD=2] [ID=-3]

    0x1d269e0: i32 = GlobalAddress<[10 x i32]* @redefine_in_sensors> 0 [ORD=3] [ID=-3]

    0x1d26ae0: i32 = FrameIndex<0> [ORD=4] [ID=-3]

    0x1d267e0: <multiple use>
  0x1d26be0: ch = store 0x1d268e0, 0x1d269e0, 0x1d26ae0, 0x1d267e0<ST4[%1]> [ORD=4] [ID=-3]


Legalized selection DAG: BB#0 'redefine_start1:redefine_start1.return'
SelectionDAG has 16 nodes:
  0x1d267e0: i32 = undef [ORD=2] [ID=3]

      0x1d09b38: ch = EntryToken [ORD=2] [ID=0]

      0x1d266e0: i32 = Constant<0> [ORD=2] [ID=2]

          0x1d269e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

        0x1d272e0: i32 = REDEFINEISD::Hi 0x1d269e0

          0x1d271e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

        0x1d273e0: i32 = REDEFINEISD::Lo 0x1d271e0

      0x1d29220: i32 = add 0x1d272e0, 0x1d273e0

      0x1d267e0: <multiple use>
    0x1d268e0: ch = store 0x1d09b38, 0x1d266e0, 0x1d29220, 0x1d267e0<ST4[%0]> [ORD=2] [ID=6]

        0x1d26ce0: i32 = TargetGlobalAddress<[10 x i32]* @redefine_in_sensors> 0 [TF=2]

      0x1d26ee0: i32 = REDEFINEISD::Hi 0x1d26ce0

        0x1d26de0: i32 = TargetGlobalAddress<[10 x i32]* @redefine_in_sensors> 0 [TF=3]

      0x1d26fe0: i32 = REDEFINEISD::Lo 0x1d26de0

    0x1d270e0: i32 = add 0x1d26ee0, 0x1d26fe0

    0x1d26ae0: i32 = FrameIndex<0> [ORD=4] [ID=5]

    0x1d267e0: <multiple use>
  0x1d26be0: ch = store 0x1d268e0, 0x1d270e0, 0x1d26ae0, 0x1d267e0<ST4[%1]> [ORD=4] [ID=7]


Optimized legalized selection DAG: BB#0 'redefine_start1:redefine_start1.return'
SelectionDAG has 16 nodes:
  0x1d267e0: i32 = undef [ORD=2] [ID=3]

      0x1d09b38: ch = EntryToken [ORD=2] [ID=0]

      0x1d266e0: i32 = Constant<0> [ORD=2] [ID=2]

          0x1d269e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

        0x1d272e0: i32 = REDEFINEISD::Hi 0x1d269e0

          0x1d271e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

        0x1d273e0: i32 = REDEFINEISD::Lo 0x1d271e0

      0x1d29220: i32 = add 0x1d272e0, 0x1d273e0

      0x1d267e0: <multiple use>
    0x1d268e0: ch = store 0x1d09b38, 0x1d266e0, 0x1d29220, 0x1d267e0<ST4[%0]> [ORD=2] [ID=6]

        0x1d26ce0: i32 = TargetGlobalAddress<[10 x i32]* @redefine_in_sensors> 0 [TF=2]

      0x1d26ee0: i32 = REDEFINEISD::Hi 0x1d26ce0

        0x1d26de0: i32 = TargetGlobalAddress<[10 x i32]* @redefine_in_sensors> 0 [TF=3]

      0x1d26fe0: i32 = REDEFINEISD::Lo 0x1d26de0

    0x1d270e0: i32 = add 0x1d26ee0, 0x1d26fe0

    0x1d26ae0: i32 = FrameIndex<0> [ORD=4] [ID=5]

    0x1d267e0: <multiple use>
  0x1d26be0: ch = store 0x1d268e0, 0x1d270e0, 0x1d26ae0, 0x1d267e0<ST4[%1]> [ORD=4] [ID=7]


===== Instruction selection begins: BB#0 'redefine_start1.return'
ISEL: Starting pattern match on root node: 0x1d26be0: ch = store 0x1d268e0, 0x1d270e0, 0x1d26ae0, 0x1d267e0<ST4[%1]> [ORD=4] [ID=15]

  Morphed node: 0x1d26be0: ch = SW 0x1d270e0, 0x1d26ae0, 0x1d265e0, 0x1d268e0<Mem:ST4[%1]> [ORD=4]

ISEL: Match complete!
=> 0x1d26be0: ch = SW 0x1d270e0, 0x1d26ae0, 0x1d265e0, 0x1d268e0<Mem:ST4[%1]> [ORD=4]

ISEL: Starting pattern match on root node: 0x1d268e0: ch = store 0x1d09b38, 0x1d266e0, 0x1d29220, 0x1d267e0<ST4[%0]> [ORD=2] [ID=14]

  Initial Opcode index to 178
  Morphed node: 0x1d268e0: ch = SW 0x1d266e0, 0x1d29220, 0x1d265e0, 0x1d09b38<Mem:ST4[%0]> [ORD=2]

ISEL: Match complete!
=> 0x1d268e0: ch = SW 0x1d266e0, 0x1d29220, 0x1d265e0, 0x1d09b38<Mem:ST4[%0]> [ORD=2]

ISEL: Starting pattern match on root node: 0x1d29220: i32 = add 0x1d272e0, 0x1d273e0 [ID=13]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x1d29220: i32 = ADD 0x1d273e0, 0x1d272e0

ISEL: Match complete!
=> 0x1d29220: i32 = ADD 0x1d273e0, 0x1d272e0

ISEL: Starting pattern match on root node: 0x1d270e0: i32 = add 0x1d26ee0, 0x1d26fe0 [ID=12]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x1d270e0: i32 = ADD 0x1d26fe0, 0x1d26ee0

ISEL: Match complete!
=> 0x1d270e0: i32 = ADD 0x1d26fe0, 0x1d26ee0

ISEL: Starting pattern match on root node: 0x1d273e0: i32 = REDEFINEISD::Lo 0x1d271e0 [ID=11]

  Initial Opcode index to 1204
  Morphed node: 0x1d273e0: i32 = ADDI 0x1d267e0, 0x1d271e0

ISEL: Match complete!
=> 0x1d273e0: i32 = ADDI 0x1d267e0, 0x1d271e0

ISEL: Starting pattern match on root node: 0x1d272e0: i32 = REDEFINEISD::Hi 0x1d269e0 [ID=10]

  Initial Opcode index to 1186
  Morphed node: 0x1d272e0: i32 = LUI 0x1d269e0

ISEL: Match complete!
=> 0x1d272e0: i32 = LUI 0x1d269e0

ISEL: Starting pattern match on root node: 0x1d26fe0: i32 = REDEFINEISD::Lo 0x1d26de0 [ID=9]

  Initial Opcode index to 1204
  Morphed node: 0x1d26fe0: i32 = ADDI 0x1d267e0, 0x1d26de0

ISEL: Match complete!
=> 0x1d26fe0: i32 = ADDI 0x1d267e0, 0x1d26de0

ISEL: Starting pattern match on root node: 0x1d26ee0: i32 = REDEFINEISD::Hi 0x1d26ce0 [ID=8]

  Initial Opcode index to 1186
  Morphed node: 0x1d26ee0: i32 = LUI 0x1d26ce0

ISEL: Match complete!
=> 0x1d26ee0: i32 = LUI 0x1d26ce0

=> 0x1d271e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

=> 0x1d269e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

=> 0x1d26de0: i32 = TargetGlobalAddress<[10 x i32]* @redefine_in_sensors> 0 [TF=3]

=> 0x1d26ce0: i32 = TargetGlobalAddress<[10 x i32]* @redefine_in_sensors> 0 [TF=2]

ISEL: Starting pattern match on root node: 0x1d266e0: i32 = Constant<0> [ORD=2] [ID=1]

  Initial Opcode index to 1226
comparing 0 and 0 and returning value:1
ISEL: Match complete!
=> 0x1d266e0: i32 = Constant<0> [ORD=2] [ID=1]

=> 0x1d09b38: ch = EntryToken [ORD=2]

===== Instruction selection ends:
Selected selection DAG: BB#0 'redefine_start1:redefine_start1.return'
SelectionDAG has 18 nodes:
  0x1d265e0: i32 = TargetConstant<0>

  0x1d267e0: i32 = Register %zero

        0x1d267e0: <multiple use>
        0x1d26de0: i32 = TargetGlobalAddress<[10 x i32]* @redefine_in_sensors> 0 [TF=3]

      0x1d26fe0: i32 = ADDI 0x1d267e0, 0x1d26de0

        0x1d26ce0: i32 = TargetGlobalAddress<[10 x i32]* @redefine_in_sensors> 0 [TF=2]

      0x1d26ee0: i32 = LUI 0x1d26ce0

    0x1d270e0: i32 = ADD 0x1d26fe0, 0x1d26ee0

      0x1d29320: i32 = Register %t5

      0x1d29420: i32 = TargetFrameIndex<0>

    0x1d26ae0: i32 = ADDI 0x1d29320, 0x1d29420 [ORD=4]

    0x1d265e0: <multiple use>
      0x1d267e0: <multiple use>
          0x1d267e0: <multiple use>
          0x1d271e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

        0x1d273e0: i32 = ADDI 0x1d267e0, 0x1d271e0

          0x1d269e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

        0x1d272e0: i32 = LUI 0x1d269e0

      0x1d29220: i32 = ADD 0x1d273e0, 0x1d272e0

      0x1d265e0: <multiple use>
      0x1d09b38: ch = EntryToken [ORD=2]

    0x1d268e0: ch = SW 0x1d267e0, 0x1d29220, 0x1d265e0, 0x1d09b38<Mem:ST4[%0]> [ORD=2]

  0x1d26be0: ch = SW 0x1d270e0, 0x1d26ae0, 0x1d265e0, 0x1d268e0<Mem:ST4[%1]> [ORD=4]


********** List Scheduling BB#0 'redefine_start1.return' **********
SU(0): 0x1d26be0: ch = SW 0x1d270e0, 0x1d26ae0, 0x1d265e0, 0x1d268e0<Mem:ST4[%1]> [ORD=4] [ID=0]

  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 0
  Predecessors:
   val SU(6): Latency=1
   val SU(5): Latency=1
   ch  SU(1): Latency=1

SU(1): 0x1d268e0: ch = SW 0x1d267e0, 0x1d29220, 0x1d265e0, 0x1d09b38<Mem:ST4[%0]> [ORD=2] [ID=1]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
   val SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x1d29220: i32 = ADD 0x1d273e0, 0x1d272e0 [ID=2]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
   val SU(4): Latency=1
   val SU(3): Latency=1
  Successors:
   val SU(1): Latency=1

SU(3): 0x1d272e0: i32 = LUI 0x1d269e0 [ID=3]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(2): Latency=1

SU(4): 0x1d273e0: i32 = ADDI 0x1d267e0, 0x1d271e0 [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(2): Latency=1

SU(5): 0x1d26ae0: i32 = ADDI 0x1d29320, 0x1d29420 [ORD=4] [ID=5]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
   val SU(0): Latency=1

SU(6): 0x1d270e0: i32 = ADD 0x1d26fe0, 0x1d26ee0 [ID=6]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
   val SU(8): Latency=1
   val SU(7): Latency=1
  Successors:
   val SU(0): Latency=1

SU(7): 0x1d26ee0: i32 = LUI 0x1d26ce0 [ID=7]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
   val SU(6): Latency=1

SU(8): 0x1d26fe0: i32 = ADDI 0x1d267e0, 0x1d26de0 [ID=8]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
   val SU(6): Latency=1


Examining Available:
Height 0: SU(0): 0x1d26be0: ch = SW 0x1d270e0, 0x1d26ae0, 0x1d265e0, 0x1d268e0<Mem:ST4[%1]> [ORD=4] [ID=0]


*** Scheduling [0]: SU(0): 0x1d26be0: ch = SW 0x1d270e0, 0x1d26ae0, 0x1d265e0, 0x1d268e0<Mem:ST4[%1]> [ORD=4] [ID=0]


Examining Available:
Height 1: SU(6): 0x1d270e0: i32 = ADD 0x1d26fe0, 0x1d26ee0 [ID=6]

Height 1: SU(5): 0x1d26ae0: i32 = ADDI 0x1d29320, 0x1d29420 [ORD=4] [ID=5]

Height 1: SU(1): 0x1d268e0: ch = SW 0x1d267e0, 0x1d29220, 0x1d265e0, 0x1d09b38<Mem:ST4[%0]> [ORD=2] [ID=1]


*** Scheduling [1]: SU(6): 0x1d270e0: i32 = ADD 0x1d26fe0, 0x1d26ee0 [ID=6]


Examining Available:
Height 2: SU(8): 0x1d26fe0: i32 = ADDI 0x1d267e0, 0x1d26de0 [ID=8]

Height 2: SU(7): 0x1d26ee0: i32 = LUI 0x1d26ce0 [ID=7]

Height 1: SU(5): 0x1d26ae0: i32 = ADDI 0x1d29320, 0x1d29420 [ORD=4] [ID=5]

Height 1: SU(1): 0x1d268e0: ch = SW 0x1d267e0, 0x1d29220, 0x1d265e0, 0x1d09b38<Mem:ST4[%0]> [ORD=2] [ID=1]


*** Scheduling [2]: SU(8): 0x1d26fe0: i32 = ADDI 0x1d267e0, 0x1d26de0 [ID=8]


Examining Available:
Height 2: SU(7): 0x1d26ee0: i32 = LUI 0x1d26ce0 [ID=7]

Height 1: SU(5): 0x1d26ae0: i32 = ADDI 0x1d29320, 0x1d29420 [ORD=4] [ID=5]

Height 1: SU(1): 0x1d268e0: ch = SW 0x1d267e0, 0x1d29220, 0x1d265e0, 0x1d09b38<Mem:ST4[%0]> [ORD=2] [ID=1]


*** Scheduling [3]: SU(7): 0x1d26ee0: i32 = LUI 0x1d26ce0 [ID=7]


Examining Available:
Height 1: SU(5): 0x1d26ae0: i32 = ADDI 0x1d29320, 0x1d29420 [ORD=4] [ID=5]

Height 1: SU(1): 0x1d268e0: ch = SW 0x1d267e0, 0x1d29220, 0x1d265e0, 0x1d09b38<Mem:ST4[%0]> [ORD=2] [ID=1]


*** Scheduling [4]: SU(5): 0x1d26ae0: i32 = ADDI 0x1d29320, 0x1d29420 [ORD=4] [ID=5]


Examining Available:
Height 1: SU(1): 0x1d268e0: ch = SW 0x1d267e0, 0x1d29220, 0x1d265e0, 0x1d09b38<Mem:ST4[%0]> [ORD=2] [ID=1]


*** Scheduling [5]: SU(1): 0x1d268e0: ch = SW 0x1d267e0, 0x1d29220, 0x1d265e0, 0x1d09b38<Mem:ST4[%0]> [ORD=2] [ID=1]


Examining Available:
Height 6: SU(2): 0x1d29220: i32 = ADD 0x1d273e0, 0x1d272e0 [ID=2]


*** Scheduling [6]: SU(2): 0x1d29220: i32 = ADD 0x1d273e0, 0x1d272e0 [ID=2]


Examining Available:
Height 7: SU(4): 0x1d273e0: i32 = ADDI 0x1d267e0, 0x1d271e0 [ID=4]

Height 7: SU(3): 0x1d272e0: i32 = LUI 0x1d269e0 [ID=3]


*** Scheduling [7]: SU(4): 0x1d273e0: i32 = ADDI 0x1d267e0, 0x1d271e0 [ID=4]


Examining Available:
Height 7: SU(3): 0x1d272e0: i32 = LUI 0x1d269e0 [ID=3]


*** Scheduling [8]: SU(3): 0x1d272e0: i32 = LUI 0x1d269e0 [ID=3]

*** Final schedule ***
SU(3): 0x1d272e0: i32 = LUI 0x1d269e0 [ID=3]

SU(4): 0x1d273e0: i32 = ADDI 0x1d267e0, 0x1d271e0 [ID=4]

SU(2): 0x1d29220: i32 = ADD 0x1d273e0, 0x1d272e0 [ID=2]

SU(1): 0x1d268e0: ch = SW 0x1d267e0, 0x1d29220, 0x1d265e0, 0x1d09b38<Mem:ST4[%0]> [ORD=2] [ID=1]

SU(5): 0x1d26ae0: i32 = ADDI 0x1d29320, 0x1d29420 [ORD=4] [ID=5]

SU(7): 0x1d26ee0: i32 = LUI 0x1d26ce0 [ID=7]

SU(8): 0x1d26fe0: i32 = ADDI 0x1d267e0, 0x1d26de0 [ID=8]

SU(6): 0x1d270e0: i32 = ADD 0x1d26fe0, 0x1d26ee0 [ID=6]

SU(0): 0x1d26be0: ch = SW 0x1d270e0, 0x1d26ae0, 0x1d265e0, 0x1d268e0<Mem:ST4[%1]> [ORD=4] [ID=0]


Total amount of phi nodes to update: 0
# Machine code for function redefine_start1: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start1.return
16B		%vreg0<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg1
48B		%vreg2<def> = ADD %vreg1<kill>, %vreg0<kill>; GR32Bit:%vreg2,%vreg1,%vreg0
64B		SW %zero, %vreg2<kill>, 0; mem:ST4[%0] GR32Bit:%vreg2
80B		%vreg3<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg3
96B		%vreg4<def> = LUI <ga:@redefine_in_sensors>[TF=2]; GR32Bit:%vreg4
112B		%vreg5<def> = ADDI %zero, <ga:@redefine_in_sensors>[TF=3]; GR32Bit:%vreg5
128B		%vreg6<def> = ADD %vreg5<kill>, %vreg4<kill>; GR32Bit:%vreg6,%vreg5,%vreg4
144B		SW %vreg6<kill>, %vreg3<kill>, 0; mem:ST4[%1] GR32Bit:%vreg6,%vreg3

# End machine code for function redefine_start1.

********** Stack Coloring **********
********** Function: redefine_start1
Found 0 markers and 1 slots
Slot structure:
Slot #0 - 4 bytes.
Total Stack size: 4 bytes

Will not try to merge slots.
Removed 0 markers.
******** Pre-regalloc Machine LICM: redefine_start1 ********
******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: redefine_start1
********** PROCESS IMPLICIT DEFS **********
********** Function: redefine_start1
********** REWRITING TWO-ADDR INSTRS **********
********** Function: redefine_start1
# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start1.return
16B		%vreg0<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg1
48B		%vreg2<def> = ADD %vreg1<kill>, %vreg0<kill>; GR32Bit:%vreg2,%vreg1,%vreg0
64B		SW %zero, %vreg2<kill>, 0; mem:ST4[%0] GR32Bit:%vreg2
80B		%vreg3<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg3
96B		%vreg4<def> = LUI <ga:@redefine_in_sensors>[TF=2]; GR32Bit:%vreg4
112B		%vreg5<def> = ADDI %zero, <ga:@redefine_in_sensors>[TF=3]; GR32Bit:%vreg5
128B		%vreg6<def> = ADD %vreg5<kill>, %vreg4<kill>; GR32Bit:%vreg6,%vreg5,%vreg4
144B		SW %vreg6<kill>, %vreg3<kill>, 0; mem:ST4[%1] GR32Bit:%vreg6,%vreg3

# End machine code for function redefine_start1.

Computing live-in reg-units in ABI blocks.
Created 0 new intervals.
********** INTERVALS **********
%vreg0 = [16r,48r:0)  0@16r
%vreg1 = [32r,48r:0)  0@32r
%vreg2 = [48r,64r:0)  0@48r
%vreg3 = [80r,144r:0)  0@80r
%vreg4 = [96r,128r:0)  0@96r
%vreg5 = [112r,128r:0)  0@112r
%vreg6 = [128r,144r:0)  0@128r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start1.return
16B		%vreg0<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg1
48B		%vreg2<def> = ADD %vreg1, %vreg0; GR32Bit:%vreg2,%vreg1,%vreg0
64B		SW %zero, %vreg2, 0; mem:ST4[%0] GR32Bit:%vreg2
80B		%vreg3<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg3
96B		%vreg4<def> = LUI <ga:@redefine_in_sensors>[TF=2]; GR32Bit:%vreg4
112B		%vreg5<def> = ADDI %zero, <ga:@redefine_in_sensors>[TF=3]; GR32Bit:%vreg5
128B		%vreg6<def> = ADD %vreg5, %vreg4; GR32Bit:%vreg6,%vreg5,%vreg4
144B		SW %vreg6, %vreg3, 0; mem:ST4[%1] GR32Bit:%vreg6,%vreg3

# End machine code for function redefine_start1.

********** SIMPLE REGISTER COALESCING **********
********** Function: redefine_start1
********** JOINING INTERVALS ***********
redefine_start1.return:
Trying to inflate 0 regs.
********** INTERVALS **********
%vreg0 = [16r,48r:0)  0@16r
%vreg1 = [32r,48r:0)  0@32r
%vreg2 = [48r,64r:0)  0@48r
%vreg3 = [80r,144r:0)  0@80r
%vreg4 = [96r,128r:0)  0@96r
%vreg5 = [112r,128r:0)  0@112r
%vreg6 = [128r,144r:0)  0@128r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start1.return
16B		%vreg0<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg1
48B		%vreg2<def> = ADD %vreg1, %vreg0; GR32Bit:%vreg2,%vreg1,%vreg0
64B		SW %zero, %vreg2, 0; mem:ST4[%0] GR32Bit:%vreg2
80B		%vreg3<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg3
96B		%vreg4<def> = LUI <ga:@redefine_in_sensors>[TF=2]; GR32Bit:%vreg4
112B		%vreg5<def> = ADDI %zero, <ga:@redefine_in_sensors>[TF=3]; GR32Bit:%vreg5
128B		%vreg6<def> = ADD %vreg5, %vreg4; GR32Bit:%vreg6,%vreg5,%vreg4
144B		SW %vreg6, %vreg3, 0; mem:ST4[%1] GR32Bit:%vreg6,%vreg3

# End machine code for function redefine_start1.

Before MISched:
# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %redefine_start1.return
	%vreg0<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg0
	%vreg1<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg1
	%vreg2<def> = ADD %vreg1, %vreg0; GR32Bit:%vreg2,%vreg1,%vreg0
	SW %zero, %vreg2, 0; mem:ST4[%0] GR32Bit:%vreg2
	%vreg3<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg3
	%vreg4<def> = LUI <ga:@redefine_in_sensors>[TF=2]; GR32Bit:%vreg4
	%vreg5<def> = ADDI %zero, <ga:@redefine_in_sensors>[TF=3]; GR32Bit:%vreg5
	%vreg6<def> = ADD %vreg5, %vreg4; GR32Bit:%vreg6,%vreg5,%vreg4
	SW %vreg6, %vreg3, 0; mem:ST4[%1] GR32Bit:%vreg6,%vreg3

# End machine code for function redefine_start1.


-------------
Starting new basic block BB#0
********** MI Scheduling **********
redefine_start1:BB#0 redefine_start1.return
  From: %vreg0<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg0
    To: End Remaining: 0
Max Pressure: GR32Bit=3
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 3
Excess PSets: 
2 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 1
  SU(5) in tree 1
  SU(6) in tree 1
  SU(7) in tree 1
  SU(8) in tree 1
SU(0):   %vreg0<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(2): Latency=5 Reg=%vreg0

SU(1):   %vreg1<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(2): Latency=5 Reg=%vreg1

SU(2):   %vreg2<def> = ADD %vreg1, %vreg0; GR32Bit:%vreg2,%vreg1,%vreg0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg1
   val SU(0): Latency=5 Reg=%vreg0
  Successors:
   val SU(3): Latency=5 Reg=%vreg2

SU(3):   SW %zero, %vreg2, 0; mem:ST4[%0] GR32Bit:%vreg2
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 10
  Height             : 0
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg2
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(4):   %vreg3<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(8): Latency=5 Reg=%vreg3

SU(5):   %vreg4<def> = LUI <ga:@redefine_in_sensors>[TF=2]; GR32Bit:%vreg4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
   val SU(7): Latency=5 Reg=%vreg4

SU(6):   %vreg5<def> = ADDI %zero, <ga:@redefine_in_sensors>[TF=3]; GR32Bit:%vreg5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
   val SU(7): Latency=5 Reg=%vreg5

SU(7):   %vreg6<def> = ADD %vreg5, %vreg4; GR32Bit:%vreg6,%vreg5,%vreg4
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
   val SU(6): Latency=5 Reg=%vreg5
   val SU(5): Latency=5 Reg=%vreg4
  Successors:
   val SU(8): Latency=4 Reg=%vreg6

SU(8):   SW %vreg6, %vreg3, 0; mem:ST4[%1] GR32Bit:%vreg6,%vreg3
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 9
  Height             : 0
  Predecessors:
   val SU(7): Latency=4 Reg=%vreg6
   val SU(4): Latency=5 Reg=%vreg3
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg0<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(2): Latency=5 Reg=%vreg0

SU(1):   %vreg1<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(2): Latency=5 Reg=%vreg1

SU(2):   %vreg2<def> = ADD %vreg1, %vreg0; GR32Bit:%vreg2,%vreg1,%vreg0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg1
   val SU(0): Latency=5 Reg=%vreg0
  Successors:
   val SU(3): Latency=5 Reg=%vreg2

SU(3):   SW %zero, %vreg2, 0; mem:ST4[%0] GR32Bit:%vreg2
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 10
  Height             : 0
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg2
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(4):   %vreg3<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(8): Latency=5 Reg=%vreg3

SU(5):   %vreg4<def> = LUI <ga:@redefine_in_sensors>[TF=2]; GR32Bit:%vreg4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
   val SU(7): Latency=5 Reg=%vreg4

SU(6):   %vreg5<def> = ADDI %zero, <ga:@redefine_in_sensors>[TF=3]; GR32Bit:%vreg5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
   val SU(7): Latency=5 Reg=%vreg5

SU(7):   %vreg6<def> = ADD %vreg5, %vreg4; GR32Bit:%vreg6,%vreg5,%vreg4
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
   val SU(6): Latency=5 Reg=%vreg5
   val SU(5): Latency=5 Reg=%vreg4
  Successors:
   val SU(8): Latency=4 Reg=%vreg6

SU(8):   SW %vreg6, %vreg3, 0; mem:ST4[%1] GR32Bit:%vreg6,%vreg3
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 9
  Height             : 0
  Predecessors:
   val SU(7): Latency=4 Reg=%vreg6
   val SU(4): Latency=5 Reg=%vreg3
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(4)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg3<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg3
handleMove 80B -> 8B: %vreg3<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg3
     %vreg3:	[80r,144r:0)  0@80r
        -->	[8r,144r:0)  0@8r
     t5:	EMPTY
        -->	EMPTY
Pick node SU(5)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg4<def> = LUI <ga:@redefine_in_sensors>[TF=2]; GR32Bit:%vreg4
handleMove 96B -> 12B: %vreg4<def> = LUI <ga:@redefine_in_sensors>[TF=2]; GR32Bit:%vreg4
     %vreg4:	[96r,128r:0)  0@96r
        -->	[12r,128r:0)  0@12r
Pick node SU(6)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg5<def> = ADDI %zero, <ga:@redefine_in_sensors>[TF=3]; GR32Bit:%vreg5

*** Renumbered SlotIndexes 12-28 ***
handleMove 112B -> 20B: %vreg5<def> = ADDI %zero, <ga:@redefine_in_sensors>[TF=3]; GR32Bit:%vreg5
     %vreg5:	[112r,128r:0)  0@112r
        -->	[20r,128r:0)  0@20r
     zero:	EMPTY
        -->	EMPTY
Pick node SU(7)  ILP: 3 / 6 = 0.5 Tree: 1 @0
Scheduling %vreg6<def> = ADD %vreg5, %vreg4; GR32Bit:%vreg6,%vreg5,%vreg4
handleMove 128B -> 24B: %vreg6<def> = ADD %vreg5, %vreg4; GR32Bit:%vreg6,%vreg5,%vreg4
     %vreg6:	[128r,144r:0)  0@128r
        -->	[24r,144r:0)  0@24r
     %vreg5:	[20r,128r:0)  0@20r
        -->	[20r,24r:0)  0@20r
     %vreg4:	[12r,128r:0)  0@12r
        -->	[12r,24r:0)  0@12r
Pick node SU(8)  ILP: 5 / 10 = 0.5 Tree: 1 @0
Scheduling SW %vreg6, %vreg3, 0; mem:ST4[%1] GR32Bit:%vreg6,%vreg3

*** Renumbered SlotIndexes 24-56 ***
handleMove 144B -> 32B: SW %vreg6, %vreg3, 0; mem:ST4[%1] GR32Bit:%vreg6,%vreg3
     %vreg6:	[24r,144r:0)  0@24r
        -->	[24r,32r:0)  0@24r
     %vreg3:	[8r,144r:0)  0@8r
        -->	[8r,32r:0)  0@8r
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg0<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg0
Pick node SU(1)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg1<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg1
Pick node SU(2)  ILP: 3 / 6 = 0.5 Tree: 0 @0
Scheduling %vreg2<def> = ADD %vreg1, %vreg0; GR32Bit:%vreg2,%vreg1,%vreg0
Pick node SU(3)  ILP: 4 / 11 = 0.363636 Tree: 0 @0
Scheduling SW %zero, %vreg2, 0; mem:ST4[%0] GR32Bit:%vreg2
*** Final schedule for BB#0 ***
SU(4):   %vreg3<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg3
SU(5):   %vreg4<def> = LUI <ga:@redefine_in_sensors>[TF=2]; GR32Bit:%vreg4
SU(6):   %vreg5<def> = ADDI %zero, <ga:@redefine_in_sensors>[TF=3]; GR32Bit:%vreg5
SU(7):   %vreg6<def> = ADD %vreg5, %vreg4; GR32Bit:%vreg6,%vreg5,%vreg4
SU(8):   SW %vreg6, %vreg3, 0; mem:ST4[%1] GR32Bit:%vreg6,%vreg3
SU(0):   %vreg0<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg0
SU(1):   %vreg1<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg1
SU(2):   %vreg2<def> = ADD %vreg1, %vreg0; GR32Bit:%vreg2,%vreg1,%vreg0
SU(3):   SW %zero, %vreg2, 0; mem:ST4[%0] GR32Bit:%vreg2


*** Renumbered SlotIndexes 4-92 ***

*** Renumbered SlotIndexes 16-120 ***

*** Renumbered SlotIndexes 28-140 ***

*** Renumbered SlotIndexes 40-168 ***

*** Renumbered SlotIndexes 52-180 ***

*** Renumbered SlotIndexes 64-192 ***

*** Renumbered SlotIndexes 76-204 ***

*** Renumbered SlotIndexes 88-216 ***

*** Renumbered SlotIndexes 100-228 ***

*** Renumbered SlotIndexes 112-240 ***

*** Renumbered SlotIndexes 124-252 ***

*** Renumbered SlotIndexes 136-264 ***

*** Renumbered SlotIndexes 148-276 ***

*** Renumbered SlotIndexes 160-288 ***

*** Renumbered SlotIndexes 172-300 ***

*** Renumbered SlotIndexes 184-312 ***

*** Renumbered SlotIndexes 196-324 ***

*** Renumbered SlotIndexes 208-336 ***

*** Renumbered SlotIndexes 220-348 ***

*** Renumbered SlotIndexes 232-360 ***

*** Renumbered SlotIndexes 244-372 ***

*** Renumbered SlotIndexes 256-384 ***

*** Renumbered SlotIndexes 268-396 ***

*** Renumbered SlotIndexes 280-408 ***

*** Renumbered SlotIndexes 292-420 ***

*** Renumbered SlotIndexes 304-432 ***

*** Renumbered SlotIndexes 316-444 ***

*** Renumbered SlotIndexes 328-456 ***

*** Renumbered SlotIndexes 340-468 ***

*** Renumbered SlotIndexes 352-480 ***

*** Renumbered SlotIndexes 364-492 ***

*** Renumbered SlotIndexes 376-504 ***

*** Renumbered SlotIndexes 388-516 ***

*** Renumbered SlotIndexes 400-528 ***
Partitioning instructions of the region into multiple CEs
instr:  %vreg3<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg3
instr:  %vreg4<def> = LUI <ga:@redefine_in_sensors>[TF=2]; GR32Bit:%vreg4
instr:  %vreg5<def> = ADDI %zero, <ga:@redefine_in_sensors>[TF=3]; GR32Bit:%vreg5
instr:  %vreg6<def> = ADD %vreg5, %vreg4; GR32Bit:%vreg6,%vreg5,%vreg4
instr:  SW %vreg6, %vreg3, 0; mem:ST4[%1] GR32Bit:%vreg6,%vreg3
instr:  %vreg0<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg0
instr:  %vreg1<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg1
instr:  %vreg2<def> = ADD %vreg1, %vreg0; GR32Bit:%vreg2,%vreg1,%vreg0
instr:  SW %zero, %vreg2, 0; mem:ST4[%0] GR32Bit:%vreg2
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
before falloc, state of bb0:BB#0: derived from LLVM BB %redefine_start1.return
	%vreg7<def> = ADD %t5, %zero; GR32Bit:%vreg7
	%vreg9<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg9
	%vreg10<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg10
	%vreg11<def> = SRLI %vreg10, 12; GR32Bit:%vreg11,%vreg10
	%vreg12<def> = ADD %vreg9, %vreg11; GR32Bit:%vreg12,%vreg9,%vreg11
	%vreg13<def> = ADDI %zero, 12; GR32Bit:%vreg13
	%vreg14<def> = SRLI %t5, 22; GR32Bit:%vreg14
	%vreg15<def> = SRLI %t5, 12; GR32Bit:%vreg15
	%vreg16<def> = ANDI %vreg15, 15; GR32Bit:%vreg16,%vreg15
	%vreg17<def> = SRLI %t5, 6; GR32Bit:%vreg17
	%vreg18<def> = ANDI %vreg17, 63; GR32Bit:%vreg18,%vreg17
	%vreg19<def> = ADDI %zero, 832; GR32Bit:%vreg19
	%vreg20<def> = MUL %vreg14, %vreg19; GR32Bit:%vreg20,%vreg14,%vreg19
	%vreg21<def> = ADDI %zero, 52; GR32Bit:%vreg21
	%vreg22<def> = MUL %vreg16, %vreg21; GR32Bit:%vreg22,%vreg16,%vreg21
	%vreg23<def> = ADD %vreg22, %vreg18; GR32Bit:%vreg23,%vreg22,%vreg18
	%vreg24<def> = ADD %vreg23, %vreg20; GR32Bit:%vreg24,%vreg23,%vreg20
	%vreg25<def> = MUL %vreg24, %vreg13; GR32Bit:%vreg25,%vreg24,%vreg13
	%vreg8<def> = ADD %vreg12, %vreg25; GR32Bit:%vreg8,%vreg12,%vreg25
	%vreg3<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg3
	%vreg4<def> = LUI <ga:@redefine_in_sensors>[TF=2]; GR32Bit:%vreg4
	%vreg5<def> = ADDI %zero, <ga:@redefine_in_sensors>[TF=3]; GR32Bit:%vreg5
	%vreg6<def> = ADD %vreg5, %vreg4; GR32Bit:%vreg6,%vreg5,%vreg4
	SW %vreg6, %vreg3, 0; mem:ST4[%1] GR32Bit:%vreg6,%vreg3
	%vreg0<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg0
	%vreg1<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg1
	%vreg2<def> = ADD %vreg1, %vreg0; GR32Bit:%vreg2,%vreg1,%vreg0
	SW %zero, %vreg2, 0; mem:ST4[%0] GR32Bit:%vreg2
	%vreg26<def> = ADD %t5, %zero; GR32Bit:%vreg26
	%vreg28<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg28
	%vreg29<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg29
	%vreg30<def> = SRLI %vreg29, 12; GR32Bit:%vreg30,%vreg29
	%vreg31<def> = ADD %vreg28, %vreg30; GR32Bit:%vreg31,%vreg28,%vreg30
	%vreg32<def> = ADDI %zero, 12; GR32Bit:%vreg32
	%vreg33<def> = SRLI %t5, 22; GR32Bit:%vreg33
	%vreg34<def> = SRLI %t5, 12; GR32Bit:%vreg34
	%vreg35<def> = ANDI %vreg34, 15; GR32Bit:%vreg35,%vreg34
	%vreg36<def> = SRLI %t5, 6; GR32Bit:%vreg36
	%vreg37<def> = ANDI %vreg36, 63; GR32Bit:%vreg37,%vreg36
	%vreg38<def> = ADDI %zero, 832; GR32Bit:%vreg38
	%vreg39<def> = MUL %vreg33, %vreg38; GR32Bit:%vreg39,%vreg33,%vreg38
	%vreg40<def> = ADDI %zero, 52; GR32Bit:%vreg40
	%vreg41<def> = MUL %vreg35, %vreg40; GR32Bit:%vreg41,%vreg35,%vreg40
	%vreg42<def> = ADD %vreg41, %vreg37; GR32Bit:%vreg42,%vreg41,%vreg37
	%vreg43<def> = ADD %vreg42, %vreg39; GR32Bit:%vreg43,%vreg42,%vreg39
	%vreg44<def> = MUL %vreg43, %vreg32; GR32Bit:%vreg44,%vreg43,%vreg32
	%vreg27<def> = ADD %vreg31, %vreg44; GR32Bit:%vreg27,%vreg31,%vreg44
	%vreg45<def> = ADD %t5, %zero; GR32Bit:%vreg45
	%vreg47<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg47
	%vreg48<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg48
	%vreg49<def> = SRLI %vreg48, 12; GR32Bit:%vreg49,%vreg48
	%vreg50<def> = ADD %vreg47, %vreg49; GR32Bit:%vreg50,%vreg47,%vreg49
	%vreg51<def> = ADDI %zero, 12; GR32Bit:%vreg51
	%vreg52<def> = SRLI %t5, 22; GR32Bit:%vreg52
	%vreg53<def> = SRLI %t5, 12; GR32Bit:%vreg53
	%vreg54<def> = ANDI %vreg53, 15; GR32Bit:%vreg54,%vreg53
	%vreg55<def> = SRLI %t5, 6; GR32Bit:%vreg55
	%vreg56<def> = ANDI %vreg55, 63; GR32Bit:%vreg56,%vreg55
	%vreg57<def> = ADDI %zero, 832; GR32Bit:%vreg57
	%vreg58<def> = MUL %vreg52, %vreg57; GR32Bit:%vreg58,%vreg52,%vreg57
	%vreg59<def> = ADDI %zero, 52; GR32Bit:%vreg59
	%vreg60<def> = MUL %vreg54, %vreg59; GR32Bit:%vreg60,%vreg54,%vreg59
	%vreg61<def> = ADD %vreg60, %vreg56; GR32Bit:%vreg61,%vreg60,%vreg56
	%vreg62<def> = ADD %vreg61, %vreg58; GR32Bit:%vreg62,%vreg61,%vreg58
	%vreg63<def> = MUL %vreg62, %vreg51; GR32Bit:%vreg63,%vreg62,%vreg51
	%vreg46<def> = ADD %vreg50, %vreg63; GR32Bit:%vreg46,%vreg50,%vreg63
	%vreg64<def> = ADD %t5, %zero; GR32Bit:%vreg64
	%vreg66<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg66
	%vreg67<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg67
	%vreg68<def> = SRLI %vreg67, 12; GR32Bit:%vreg68,%vreg67
	%vreg69<def> = ADD %vreg66, %vreg68; GR32Bit:%vreg69,%vreg66,%vreg68
	%vreg70<def> = ADDI %zero, 12; GR32Bit:%vreg70
	%vreg71<def> = SRLI %t5, 22; GR32Bit:%vreg71
	%vreg72<def> = SRLI %t5, 12; GR32Bit:%vreg72
	%vreg73<def> = ANDI %vreg72, 15; GR32Bit:%vreg73,%vreg72
	%vreg74<def> = SRLI %t5, 6; GR32Bit:%vreg74
	%vreg75<def> = ANDI %vreg74, 63; GR32Bit:%vreg75,%vreg74
	%vreg76<def> = ADDI %zero, 832; GR32Bit:%vreg76
	%vreg77<def> = MUL %vreg71, %vreg76; GR32Bit:%vreg77,%vreg71,%vreg76
	%vreg78<def> = ADDI %zero, 52; GR32Bit:%vreg78
	%vreg79<def> = MUL %vreg73, %vreg78; GR32Bit:%vreg79,%vreg73,%vreg78
	%vreg80<def> = ADD %vreg79, %vreg75; GR32Bit:%vreg80,%vreg79,%vreg75
	%vreg81<def> = ADD %vreg80, %vreg77; GR32Bit:%vreg81,%vreg80,%vreg77
	%vreg82<def> = MUL %vreg81, %vreg70; GR32Bit:%vreg82,%vreg81,%vreg70
	%vreg65<def> = ADD %vreg69, %vreg82; GR32Bit:%vreg65,%vreg69,%vreg82
Adding all fallocs first to avoid stalls due to sequential fallocs and fbinds
Adding writecm(for writing sync count to context frames) and fbind instructions
live end of child is itself
live end of child is itself
Adding localref sw instructions to hyperOp redefine_start1

*** Renumbered SlotIndexes 412-540 ***

*** Renumbered SlotIndexes 424-552 ***

*** Renumbered SlotIndexes 436-564 ***

*** Renumbered SlotIndexes 448-576 ***

*** Renumbered SlotIndexes 460-588 ***

*** Renumbered SlotIndexes 472-600 ***

*** Renumbered SlotIndexes 484-612 ***

*** Renumbered SlotIndexes 496-624 ***

*** Renumbered SlotIndexes 508-636 ***
localref sw to AssignFunction3:  SW %vreg103, %vreg102, 8; GR32Bit:%vreg103,%vreg102
Adding writecm instructions to hyperOp redefine_start1
Adding writecmp and sync instructions
problem with which child exactly?AssignFunction3 with edge of type:6

*** Renumbered SlotIndexes 520-648 ***

*** Renumbered SlotIndexes 532-660 ***

*** Renumbered SlotIndexes 544-672 ***
Adding endHyperOp instructions to each pHyperOp

*** Renumbered SlotIndexes 556-684 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 568-696 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 580-708 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 592-720 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 604-732 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 616-744 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0
After Shuffling regions of basic block, state of BB#0:
BB#0: derived from LLVM BB %redefine_start1.return
	%vreg7<def> = ADD %t5, %zero; GR32Bit:%vreg7
	%vreg9<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg9
	%vreg10<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg10
	%vreg11<def> = SRLI %vreg10, 12; GR32Bit:%vreg11,%vreg10
	%vreg12<def> = ADD %vreg9, %vreg11; GR32Bit:%vreg12,%vreg9,%vreg11
	%vreg13<def> = ADDI %zero, 12; GR32Bit:%vreg13
	%vreg14<def> = SRLI %t5, 22; GR32Bit:%vreg14
	%vreg15<def> = SRLI %t5, 12; GR32Bit:%vreg15
	%vreg16<def> = ANDI %vreg15, 15; GR32Bit:%vreg16,%vreg15
	%vreg17<def> = SRLI %t5, 6; GR32Bit:%vreg17
	%vreg18<def> = ANDI %vreg17, 63; GR32Bit:%vreg18,%vreg17
	%vreg19<def> = ADDI %zero, 832; GR32Bit:%vreg19
	%vreg20<def> = MUL %vreg14, %vreg19; GR32Bit:%vreg20,%vreg14,%vreg19
	%vreg21<def> = ADDI %zero, 52; GR32Bit:%vreg21
	%vreg22<def> = MUL %vreg16, %vreg21; GR32Bit:%vreg22,%vreg16,%vreg21
	%vreg23<def> = ADD %vreg22, %vreg18; GR32Bit:%vreg23,%vreg22,%vreg18
	%vreg24<def> = ADD %vreg23, %vreg20; GR32Bit:%vreg24,%vreg23,%vreg20
	%vreg25<def> = MUL %vreg24, %vreg13; GR32Bit:%vreg25,%vreg24,%vreg13
	%vreg8<def> = ADD %vreg12, %vreg25; GR32Bit:%vreg8,%vreg12,%vreg25
	%vreg3<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg3
	%vreg4<def> = LUI <ga:@redefine_in_sensors>[TF=2]; GR32Bit:%vreg4
	%vreg5<def> = ADDI %zero, <ga:@redefine_in_sensors>[TF=3]; GR32Bit:%vreg5
	%vreg6<def> = ADD %vreg5, %vreg4; GR32Bit:%vreg6,%vreg5,%vreg4
	SW %vreg6, %vreg3, 0; mem:ST4[%1] GR32Bit:%vreg6,%vreg3
	%vreg0<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg0
	%vreg1<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg1
	%vreg2<def> = ADD %vreg1, %vreg0; GR32Bit:%vreg2,%vreg1,%vreg0
	SW %zero, %vreg2, 0; mem:ST4[%0] GR32Bit:%vreg2
	%vreg83<def> = ADDI %zero, 64; GR32Bit:%vreg83
	%vreg84<def> = ADDI %zero, 1; GR32Bit:%vreg84
	WRITECM %vreg83, %vreg84, 60; GR32Bit:%vreg83,%vreg84
	%vreg85<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg85
	%vreg86<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg86
	%vreg87<def> = SRLI %vreg86, 12; GR32Bit:%vreg87,%vreg86
	%vreg88<def> = ADD %vreg85, %vreg87; GR32Bit:%vreg88,%vreg85,%vreg87
	%vreg89<def> = ADDI %zero, 12; GR32Bit:%vreg89
	%vreg90<def> = SRLI %vreg83, 22; GR32Bit:%vreg90,%vreg83
	%vreg91<def> = SRLI %vreg83, 12; GR32Bit:%vreg91,%vreg83
	%vreg92<def> = ANDI %vreg91, 15; GR32Bit:%vreg92,%vreg91
	%vreg93<def> = SRLI %vreg83, 6; GR32Bit:%vreg93,%vreg83
	%vreg94<def> = ANDI %vreg93, 63; GR32Bit:%vreg94,%vreg93
	%vreg95<def> = ADDI %zero, 832; GR32Bit:%vreg95
	%vreg96<def> = MUL %vreg90, %vreg95; GR32Bit:%vreg96,%vreg90,%vreg95
	%vreg97<def> = ADDI %zero, 52; GR32Bit:%vreg97
	%vreg98<def> = MUL %vreg92, %vreg97; GR32Bit:%vreg98,%vreg92,%vreg97
	%vreg99<def> = ADD %vreg98, %vreg94; GR32Bit:%vreg99,%vreg98,%vreg94
	%vreg100<def> = ADD %vreg99, %vreg96; GR32Bit:%vreg100,%vreg99,%vreg96
	%vreg101<def> = MUL %vreg100, %vreg89; GR32Bit:%vreg101,%vreg100,%vreg89
	%vreg102<def> = ADD %vreg101, %vreg88; GR32Bit:%vreg102,%vreg101,%vreg88
	%vreg103<def> = LW %t5, 0; GR32Bit:%vreg103
	SW %vreg103, %vreg102, 8; GR32Bit:%vreg103,%vreg102
	%vreg104<def> = LUI 1; GR32Bit:%vreg104
	WRITEPM %vreg104, %vreg83, 0; GR32Bit:%vreg104,%vreg83
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg26<def> = ADD %t5, %zero; GR32Bit:%vreg26
	%vreg28<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg28
	%vreg29<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg29
	%vreg30<def> = SRLI %vreg29, 12; GR32Bit:%vreg30,%vreg29
	%vreg31<def> = ADD %vreg28, %vreg30; GR32Bit:%vreg31,%vreg28,%vreg30
	%vreg32<def> = ADDI %zero, 12; GR32Bit:%vreg32
	%vreg33<def> = SRLI %t5, 22; GR32Bit:%vreg33
	%vreg34<def> = SRLI %t5, 12; GR32Bit:%vreg34
	%vreg35<def> = ANDI %vreg34, 15; GR32Bit:%vreg35,%vreg34
	%vreg36<def> = SRLI %t5, 6; GR32Bit:%vreg36
	%vreg37<def> = ANDI %vreg36, 63; GR32Bit:%vreg37,%vreg36
	%vreg38<def> = ADDI %zero, 832; GR32Bit:%vreg38
	%vreg39<def> = MUL %vreg33, %vreg38; GR32Bit:%vreg39,%vreg33,%vreg38
	%vreg40<def> = ADDI %zero, 52; GR32Bit:%vreg40
	%vreg41<def> = MUL %vreg35, %vreg40; GR32Bit:%vreg41,%vreg35,%vreg40
	%vreg42<def> = ADD %vreg41, %vreg37; GR32Bit:%vreg42,%vreg41,%vreg37
	%vreg43<def> = ADD %vreg42, %vreg39; GR32Bit:%vreg43,%vreg42,%vreg39
	%vreg44<def> = MUL %vreg43, %vreg32; GR32Bit:%vreg44,%vreg43,%vreg32
	%vreg27<def> = ADD %vreg31, %vreg44; GR32Bit:%vreg27,%vreg31,%vreg44
	%vreg105<def> = LUI 1; GR32Bit:%vreg105
	%vreg106<def> = DREADPM %vreg105, 0; GR32Bit:%vreg106,%vreg105
	%vreg107<def> = ADDI %zero, -1; GR32Bit:%vreg107
	SYNC %vreg106, %vreg107, 60; GR32Bit:%vreg106,%vreg107
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg45<def> = ADD %t5, %zero; GR32Bit:%vreg45
	%vreg47<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg47
	%vreg48<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg48
	%vreg49<def> = SRLI %vreg48, 12; GR32Bit:%vreg49,%vreg48
	%vreg50<def> = ADD %vreg47, %vreg49; GR32Bit:%vreg50,%vreg47,%vreg49
	%vreg51<def> = ADDI %zero, 12; GR32Bit:%vreg51
	%vreg52<def> = SRLI %t5, 22; GR32Bit:%vreg52
	%vreg53<def> = SRLI %t5, 12; GR32Bit:%vreg53
	%vreg54<def> = ANDI %vreg53, 15; GR32Bit:%vreg54,%vreg53
	%vreg55<def> = SRLI %t5, 6; GR32Bit:%vreg55
	%vreg56<def> = ANDI %vreg55, 63; GR32Bit:%vreg56,%vreg55
	%vreg57<def> = ADDI %zero, 832; GR32Bit:%vreg57
	%vreg58<def> = MUL %vreg52, %vreg57; GR32Bit:%vreg58,%vreg52,%vreg57
	%vreg59<def> = ADDI %zero, 52; GR32Bit:%vreg59
	%vreg60<def> = MUL %vreg54, %vreg59; GR32Bit:%vreg60,%vreg54,%vreg59
	%vreg61<def> = ADD %vreg60, %vreg56; GR32Bit:%vreg61,%vreg60,%vreg56
	%vreg62<def> = ADD %vreg61, %vreg58; GR32Bit:%vreg62,%vreg61,%vreg58
	%vreg63<def> = MUL %vreg62, %vreg51; GR32Bit:%vreg63,%vreg62,%vreg51
	%vreg46<def> = ADD %vreg50, %vreg63; GR32Bit:%vreg46,%vreg50,%vreg63
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg64<def> = ADD %t5, %zero; GR32Bit:%vreg64
	%vreg66<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg66
	%vreg67<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg67
	%vreg68<def> = SRLI %vreg67, 12; GR32Bit:%vreg68,%vreg67
	%vreg69<def> = ADD %vreg66, %vreg68; GR32Bit:%vreg69,%vreg66,%vreg68
	%vreg70<def> = ADDI %zero, 12; GR32Bit:%vreg70
	%vreg71<def> = SRLI %t5, 22; GR32Bit:%vreg71
	%vreg72<def> = SRLI %t5, 12; GR32Bit:%vreg72
	%vreg73<def> = ANDI %vreg72, 15; GR32Bit:%vreg73,%vreg72
	%vreg74<def> = SRLI %t5, 6; GR32Bit:%vreg74
	%vreg75<def> = ANDI %vreg74, 63; GR32Bit:%vreg75,%vreg74
	%vreg76<def> = ADDI %zero, 832; GR32Bit:%vreg76
	%vreg77<def> = MUL %vreg71, %vreg76; GR32Bit:%vreg77,%vreg71,%vreg76
	%vreg78<def> = ADDI %zero, 52; GR32Bit:%vreg78
	%vreg79<def> = MUL %vreg73, %vreg78; GR32Bit:%vreg79,%vreg73,%vreg78
	%vreg80<def> = ADD %vreg79, %vreg75; GR32Bit:%vreg80,%vreg79,%vreg75
	%vreg81<def> = ADD %vreg80, %vreg77; GR32Bit:%vreg81,%vreg80,%vreg77
	%vreg82<def> = MUL %vreg81, %vreg70; GR32Bit:%vreg82,%vreg81,%vreg70
	%vreg65<def> = ADD %vreg69, %vreg82; GR32Bit:%vreg65,%vreg69,%vreg82
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 316-868 ***

*** Renumbered SlotIndexes 304-888 ***

*** Renumbered SlotIndexes 216-936 ***

*** Renumbered SlotIndexes 204-956 ***

*** Renumbered SlotIndexes 204-972 ***

*** Renumbered SlotIndexes 204-988 ***

*** Renumbered SlotIndexes 204-1004 ***

*** Renumbered SlotIndexes 112-1048 ***

*** Renumbered SlotIndexes 100-1068 ***

*** Renumbered SlotIndexes 100-1084 ***

*** Renumbered SlotIndexes 100-1100 ***

*** Renumbered SlotIndexes 100-1116 ***

*** Renumbered SlotIndexes 100-1132 ***

*** Renumbered SlotIndexes 100-1148 ***

*** Renumbered SlotIndexes 100-1164 ***

*** Renumbered SlotIndexes 100-1180 ***

*** Renumbered SlotIndexes 100-1196 ***

*** Renumbered SlotIndexes 100-1212 ***

*** Renumbered SlotIndexes 100-1228 ***

*** Renumbered SlotIndexes 100-1244 ***

*** Renumbered SlotIndexes 100-1260 ***

*** Renumbered SlotIndexes 100-1276 ***

*** Renumbered SlotIndexes 100-1292 ***

*** Renumbered SlotIndexes 100-1308 ***

*** Renumbered SlotIndexes 100-1324 ***

*** Renumbered SlotIndexes 100-1340 ***

*** Renumbered SlotIndexes 12-1388 ***
Creating pHyperOp bundles for CEs for bb0
  %vreg26<def> = ADD %t5, %zero; GR32Bit:%vreg26
starting at   %vreg7<def> = ADD %t5, %zero; GR32Bit:%vreg7
  %vreg45<def> = ADD %t5, %zero; GR32Bit:%vreg45
starting at   %vreg26<def> = ADD %t5, %zero; GR32Bit:%vreg26
  %vreg64<def> = ADD %t5, %zero; GR32Bit:%vreg64
starting at   %vreg45<def> = ADD %t5, %zero; GR32Bit:%vreg45
starting at   %vreg64<def> = ADD %t5, %zero; GR32Bit:%vreg64
After bundling, state of BB0:BB#0: derived from LLVM BB %redefine_start1.return
	%vreg7<def> = ADD %t5, %zero; GR32Bit:%vreg7
	  * %vreg9<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg9
	  * %vreg10<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg10
	  * %vreg11<def> = SRLI %vreg10, 12; GR32Bit:%vreg11,%vreg10
	  * %vreg12<def> = ADD %vreg9, %vreg11; GR32Bit:%vreg12,%vreg9,%vreg11
	  * %vreg13<def> = ADDI %zero, 12; GR32Bit:%vreg13
	  * %vreg14<def> = SRLI %t5, 22; GR32Bit:%vreg14
	  * %vreg15<def> = SRLI %t5, 12; GR32Bit:%vreg15
	  * %vreg16<def> = ANDI %vreg15, 15; GR32Bit:%vreg16,%vreg15
	  * %vreg17<def> = SRLI %t5, 6; GR32Bit:%vreg17
	  * %vreg18<def> = ANDI %vreg17, 63; GR32Bit:%vreg18,%vreg17
	  * %vreg19<def> = ADDI %zero, 832; GR32Bit:%vreg19
	  * %vreg20<def> = MUL %vreg14, %vreg19; GR32Bit:%vreg20,%vreg14,%vreg19
	  * %vreg21<def> = ADDI %zero, 52; GR32Bit:%vreg21
	  * %vreg22<def> = MUL %vreg16, %vreg21; GR32Bit:%vreg22,%vreg16,%vreg21
	  * %vreg23<def> = ADD %vreg22, %vreg18; GR32Bit:%vreg23,%vreg22,%vreg18
	  * %vreg24<def> = ADD %vreg23, %vreg20; GR32Bit:%vreg24,%vreg23,%vreg20
	  * %vreg25<def> = MUL %vreg24, %vreg13; GR32Bit:%vreg25,%vreg24,%vreg13
	  * %vreg8<def> = ADD %vreg12, %vreg25; GR32Bit:%vreg8,%vreg12,%vreg25
	  * %vreg3<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg3
	  * %vreg4<def> = LUI <ga:@redefine_in_sensors>[TF=2]; GR32Bit:%vreg4
	  * %vreg5<def> = ADDI %zero, <ga:@redefine_in_sensors>[TF=3]; GR32Bit:%vreg5
	  * %vreg6<def> = ADD %vreg5, %vreg4; GR32Bit:%vreg6,%vreg5,%vreg4
	  * SW %vreg6, %vreg3, 0; mem:ST4[%1] GR32Bit:%vreg6,%vreg3
	  * %vreg0<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg0
	  * %vreg1<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg1
	  * %vreg2<def> = ADD %vreg1, %vreg0; GR32Bit:%vreg2,%vreg1,%vreg0
	  * SW %zero, %vreg2, 0; mem:ST4[%0] GR32Bit:%vreg2
	  * %vreg83<def> = ADDI %zero, 64; GR32Bit:%vreg83
	  * %vreg84<def> = ADDI %zero, 1; GR32Bit:%vreg84
	  * WRITECM %vreg83, %vreg84, 60; GR32Bit:%vreg83,%vreg84
	  * %vreg85<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg85
	  * %vreg86<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg86
	  * %vreg87<def> = SRLI %vreg86, 12; GR32Bit:%vreg87,%vreg86
	  * %vreg88<def> = ADD %vreg85, %vreg87; GR32Bit:%vreg88,%vreg85,%vreg87
	  * %vreg89<def> = ADDI %zero, 12; GR32Bit:%vreg89
	  * %vreg90<def> = SRLI %vreg83, 22; GR32Bit:%vreg90,%vreg83
	  * %vreg91<def> = SRLI %vreg83, 12; GR32Bit:%vreg91,%vreg83
	  * %vreg92<def> = ANDI %vreg91, 15; GR32Bit:%vreg92,%vreg91
	  * %vreg93<def> = SRLI %vreg83, 6; GR32Bit:%vreg93,%vreg83
	  * %vreg94<def> = ANDI %vreg93, 63; GR32Bit:%vreg94,%vreg93
	  * %vreg95<def> = ADDI %zero, 832; GR32Bit:%vreg95
	  * %vreg96<def> = MUL %vreg90, %vreg95; GR32Bit:%vreg96,%vreg90,%vreg95
	  * %vreg97<def> = ADDI %zero, 52; GR32Bit:%vreg97
	  * %vreg98<def> = MUL %vreg92, %vreg97; GR32Bit:%vreg98,%vreg92,%vreg97
	  * %vreg99<def> = ADD %vreg98, %vreg94; GR32Bit:%vreg99,%vreg98,%vreg94
	  * %vreg100<def> = ADD %vreg99, %vreg96; GR32Bit:%vreg100,%vreg99,%vreg96
	  * %vreg101<def> = MUL %vreg100, %vreg89; GR32Bit:%vreg101,%vreg100,%vreg89
	  * %vreg102<def> = ADD %vreg101, %vreg88; GR32Bit:%vreg102,%vreg101,%vreg88
	  * %vreg103<def> = LW %t5, 0; GR32Bit:%vreg103
	  * SW %vreg103, %vreg102, 8; GR32Bit:%vreg103,%vreg102
	  * %vreg104<def> = LUI 1; GR32Bit:%vreg104
	  * WRITEPM %vreg104, %vreg83, 0; GR32Bit:%vreg104,%vreg83
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg26<def> = ADD %t5, %zero; GR32Bit:%vreg26
	  * %vreg28<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg28
	  * %vreg29<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg29
	  * %vreg30<def> = SRLI %vreg29, 12; GR32Bit:%vreg30,%vreg29
	  * %vreg31<def> = ADD %vreg28, %vreg30; GR32Bit:%vreg31,%vreg28,%vreg30
	  * %vreg32<def> = ADDI %zero, 12; GR32Bit:%vreg32
	  * %vreg33<def> = SRLI %t5, 22; GR32Bit:%vreg33
	  * %vreg34<def> = SRLI %t5, 12; GR32Bit:%vreg34
	  * %vreg35<def> = ANDI %vreg34, 15; GR32Bit:%vreg35,%vreg34
	  * %vreg36<def> = SRLI %t5, 6; GR32Bit:%vreg36
	  * %vreg37<def> = ANDI %vreg36, 63; GR32Bit:%vreg37,%vreg36
	  * %vreg38<def> = ADDI %zero, 832; GR32Bit:%vreg38
	  * %vreg39<def> = MUL %vreg33, %vreg38; GR32Bit:%vreg39,%vreg33,%vreg38
	  * %vreg40<def> = ADDI %zero, 52; GR32Bit:%vreg40
	  * %vreg41<def> = MUL %vreg35, %vreg40; GR32Bit:%vreg41,%vreg35,%vreg40
	  * %vreg42<def> = ADD %vreg41, %vreg37; GR32Bit:%vreg42,%vreg41,%vreg37
	  * %vreg43<def> = ADD %vreg42, %vreg39; GR32Bit:%vreg43,%vreg42,%vreg39
	  * %vreg44<def> = MUL %vreg43, %vreg32; GR32Bit:%vreg44,%vreg43,%vreg32
	  * %vreg27<def> = ADD %vreg31, %vreg44; GR32Bit:%vreg27,%vreg31,%vreg44
	  * %vreg105<def> = LUI 1; GR32Bit:%vreg105
	  * %vreg106<def> = DREADPM %vreg105, 0; GR32Bit:%vreg106,%vreg105
	  * %vreg107<def> = ADDI %zero, -1; GR32Bit:%vreg107
	  * SYNC %vreg106, %vreg107, 60; GR32Bit:%vreg106,%vreg107
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg45<def> = ADD %t5, %zero; GR32Bit:%vreg45
	  * %vreg47<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg47
	  * %vreg48<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg48
	  * %vreg49<def> = SRLI %vreg48, 12; GR32Bit:%vreg49,%vreg48
	  * %vreg50<def> = ADD %vreg47, %vreg49; GR32Bit:%vreg50,%vreg47,%vreg49
	  * %vreg51<def> = ADDI %zero, 12; GR32Bit:%vreg51
	  * %vreg52<def> = SRLI %t5, 22; GR32Bit:%vreg52
	  * %vreg53<def> = SRLI %t5, 12; GR32Bit:%vreg53
	  * %vreg54<def> = ANDI %vreg53, 15; GR32Bit:%vreg54,%vreg53
	  * %vreg55<def> = SRLI %t5, 6; GR32Bit:%vreg55
	  * %vreg56<def> = ANDI %vreg55, 63; GR32Bit:%vreg56,%vreg55
	  * %vreg57<def> = ADDI %zero, 832; GR32Bit:%vreg57
	  * %vreg58<def> = MUL %vreg52, %vreg57; GR32Bit:%vreg58,%vreg52,%vreg57
	  * %vreg59<def> = ADDI %zero, 52; GR32Bit:%vreg59
	  * %vreg60<def> = MUL %vreg54, %vreg59; GR32Bit:%vreg60,%vreg54,%vreg59
	  * %vreg61<def> = ADD %vreg60, %vreg56; GR32Bit:%vreg61,%vreg60,%vreg56
	  * %vreg62<def> = ADD %vreg61, %vreg58; GR32Bit:%vreg62,%vreg61,%vreg58
	  * %vreg63<def> = MUL %vreg62, %vreg51; GR32Bit:%vreg63,%vreg62,%vreg51
	  * %vreg46<def> = ADD %vreg50, %vreg63; GR32Bit:%vreg46,%vreg50,%vreg63
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg64<def> = ADD %t5, %zero; GR32Bit:%vreg64
	  * %vreg66<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg66
	  * %vreg67<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg67
	  * %vreg68<def> = SRLI %vreg67, 12; GR32Bit:%vreg68,%vreg67
	  * %vreg69<def> = ADD %vreg66, %vreg68; GR32Bit:%vreg69,%vreg66,%vreg68
	  * %vreg70<def> = ADDI %zero, 12; GR32Bit:%vreg70
	  * %vreg71<def> = SRLI %t5, 22; GR32Bit:%vreg71
	  * %vreg72<def> = SRLI %t5, 12; GR32Bit:%vreg72
	  * %vreg73<def> = ANDI %vreg72, 15; GR32Bit:%vreg73,%vreg72
	  * %vreg74<def> = SRLI %t5, 6; GR32Bit:%vreg74
	  * %vreg75<def> = ANDI %vreg74, 63; GR32Bit:%vreg75,%vreg74
	  * %vreg76<def> = ADDI %zero, 832; GR32Bit:%vreg76
	  * %vreg77<def> = MUL %vreg71, %vreg76; GR32Bit:%vreg77,%vreg71,%vreg76
	  * %vreg78<def> = ADDI %zero, 52; GR32Bit:%vreg78
	  * %vreg79<def> = MUL %vreg73, %vreg78; GR32Bit:%vreg79,%vreg73,%vreg78
	  * %vreg80<def> = ADD %vreg79, %vreg75; GR32Bit:%vreg80,%vreg79,%vreg75
	  * %vreg81<def> = ADD %vreg80, %vreg77; GR32Bit:%vreg81,%vreg80,%vreg77
	  * %vreg82<def> = MUL %vreg81, %vreg70; GR32Bit:%vreg82,%vreg81,%vreg70
	  * %vreg65<def> = ADD %vreg69, %vreg82; GR32Bit:%vreg65,%vreg69,%vreg82
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
Patching the instructions that are supposed to use the physical registers r30 and r31
Computing live-in reg-units in ABI blocks.
Created 0 new intervals.

*** Renumbered SlotIndexes 8-1408 ***

*** Renumbered SlotIndexes 220-1420 ***
********** INTERVALS **********
t5 = EMPTY
zero = EMPTY
%vreg0 = [208r,236r:0)  0@208r
%vreg1 = [216r,236r:0)  0@216r
%vreg2 = [236r,244r:0)  0@236r
%vreg3 = [168r,200r:0)  0@168r
%vreg4 = [176r,192r:0)  0@176r
%vreg5 = [184r,192r:0)  0@184r
%vreg6 = [192r,200r:0)  0@192r
%vreg7 = [4r,4d:0)  0@4r
%vreg8 = [160r,160d:0)  0@160r
%vreg9 = [24r,48r:0)  0@24r
%vreg10 = [32r,40r:0)  0@32r
%vreg11 = [40r,48r:0)  0@40r
%vreg12 = [48r,160r:0)  0@48r
%vreg13 = [56r,152r:0)  0@56r
%vreg14 = [64r,112r:0)  0@64r
%vreg15 = [72r,80r:0)  0@72r
%vreg16 = [80r,128r:0)  0@80r
%vreg17 = [88r,96r:0)  0@88r
%vreg18 = [96r,136r:0)  0@96r
%vreg19 = [104r,112r:0)  0@104r
%vreg20 = [112r,144r:0)  0@112r
%vreg21 = [120r,128r:0)  0@120r
%vreg22 = [128r,136r:0)  0@128r
%vreg23 = [136r,144r:0)  0@136r
%vreg24 = [144r,152r:0)  0@144r
%vreg25 = [152r,160r:0)  0@152r
%vreg26 = [476r,476d:0)  0@476r
%vreg27 = [620r,620d:0)  0@620r
%vreg28 = [484r,508r:0)  0@484r
%vreg29 = [492r,500r:0)  0@492r
%vreg30 = [500r,508r:0)  0@500r
%vreg31 = [508r,620r:0)  0@508r
%vreg32 = [516r,612r:0)  0@516r
%vreg33 = [524r,572r:0)  0@524r
%vreg34 = [532r,540r:0)  0@532r
%vreg35 = [540r,588r:0)  0@540r
%vreg36 = [548r,556r:0)  0@548r
%vreg37 = [556r,596r:0)  0@556r
%vreg38 = [564r,572r:0)  0@564r
%vreg39 = [572r,604r:0)  0@572r
%vreg40 = [580r,588r:0)  0@580r
%vreg41 = [588r,596r:0)  0@588r
%vreg42 = [596r,604r:0)  0@596r
%vreg43 = [604r,612r:0)  0@604r
%vreg44 = [612r,620r:0)  0@612r
%vreg45 = [684r,684d:0)  0@684r
%vreg46 = [828r,828d:0)  0@828r
%vreg47 = [692r,716r:0)  0@692r
%vreg48 = [700r,708r:0)  0@700r
%vreg49 = [708r,716r:0)  0@708r
%vreg50 = [716r,828r:0)  0@716r
%vreg51 = [724r,820r:0)  0@724r
%vreg52 = [732r,780r:0)  0@732r
%vreg53 = [740r,748r:0)  0@740r
%vreg54 = [748r,796r:0)  0@748r
%vreg55 = [756r,764r:0)  0@756r
%vreg56 = [764r,804r:0)  0@764r
%vreg57 = [772r,780r:0)  0@772r
%vreg58 = [780r,812r:0)  0@780r
%vreg59 = [788r,796r:0)  0@788r
%vreg60 = [796r,804r:0)  0@796r
%vreg61 = [804r,812r:0)  0@804r
%vreg62 = [812r,820r:0)  0@812r
%vreg63 = [820r,828r:0)  0@820r
%vreg64 = [860r,860d:0)  0@860r
%vreg65 = [1004r,1004d:0)  0@1004r
%vreg66 = [868r,892r:0)  0@868r
%vreg67 = [876r,884r:0)  0@876r
%vreg68 = [884r,892r:0)  0@884r
%vreg69 = [892r,1004r:0)  0@892r
%vreg70 = [900r,996r:0)  0@900r
%vreg71 = [908r,956r:0)  0@908r
%vreg72 = [916r,924r:0)  0@916r
%vreg73 = [924r,972r:0)  0@924r
%vreg74 = [932r,940r:0)  0@932r
%vreg75 = [940r,980r:0)  0@940r
%vreg76 = [948r,956r:0)  0@948r
%vreg77 = [956r,988r:0)  0@956r
%vreg78 = [964r,972r:0)  0@964r
%vreg79 = [972r,980r:0)  0@972r
%vreg80 = [980r,988r:0)  0@980r
%vreg81 = [988r,996r:0)  0@988r
%vreg82 = [996r,1004r:0)  0@996r
%vreg83 = [252r,444r:0)  0@252r
%vreg84 = [260r,268r:0)  0@260r
%vreg85 = [276r,300r:0)  0@276r
%vreg86 = [284r,292r:0)  0@284r
%vreg87 = [292r,300r:0)  0@292r
%vreg88 = [300r,412r:0)  0@300r
%vreg89 = [308r,404r:0)  0@308r
%vreg90 = [316r,364r:0)  0@316r
%vreg91 = [324r,332r:0)  0@324r
%vreg92 = [332r,380r:0)  0@332r
%vreg93 = [340r,348r:0)  0@340r
%vreg94 = [348r,388r:0)  0@348r
%vreg95 = [356r,364r:0)  0@356r
%vreg96 = [364r,396r:0)  0@364r
%vreg97 = [372r,380r:0)  0@372r
%vreg98 = [380r,388r:0)  0@380r
%vreg99 = [388r,396r:0)  0@388r
%vreg100 = [396r,404r:0)  0@396r
%vreg101 = [404r,412r:0)  0@404r
%vreg102 = [412r,428r:0)  0@412r
%vreg103 = [420r,428r:0)  0@420r
%vreg104 = [436r,444r:0)  0@436r
%vreg105 = [628r,636r:0)  0@628r
%vreg106 = [636r,1420B:0)  0@636r
%vreg107 = [644r,652r:0)  0@644r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start1.return
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg9<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg9
4B		  * %vreg10<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg10
4B		  * %vreg11<def> = SRLI %vreg10, 12; GR32Bit:%vreg11,%vreg10
4B		  * %vreg12<def> = ADD %vreg9, %vreg11; GR32Bit:%vreg12,%vreg9,%vreg11
4B		  * %vreg13<def> = ADDI %zero, 12; GR32Bit:%vreg13
4B		  * %vreg14<def> = SRLI %t5, 22; GR32Bit:%vreg14
4B		  * %vreg15<def> = SRLI %t5, 12; GR32Bit:%vreg15
4B		  * %vreg16<def> = ANDI %vreg15, 15; GR32Bit:%vreg16,%vreg15
4B		  * %vreg17<def> = SRLI %t5, 6; GR32Bit:%vreg17
4B		  * %vreg18<def> = ANDI %vreg17, 63; GR32Bit:%vreg18,%vreg17
4B		  * %vreg19<def> = ADDI %zero, 832; GR32Bit:%vreg19
4B		  * %vreg20<def> = MUL %vreg14, %vreg19; GR32Bit:%vreg20,%vreg14,%vreg19
4B		  * %vreg21<def> = ADDI %zero, 52; GR32Bit:%vreg21
4B		  * %vreg22<def> = MUL %vreg16, %vreg21; GR32Bit:%vreg22,%vreg16,%vreg21
4B		  * %vreg23<def> = ADD %vreg22, %vreg18; GR32Bit:%vreg23,%vreg22,%vreg18
4B		  * %vreg24<def> = ADD %vreg23, %vreg20; GR32Bit:%vreg24,%vreg23,%vreg20
4B		  * %vreg25<def> = MUL %vreg24, %vreg13; GR32Bit:%vreg25,%vreg24,%vreg13
4B		  * %t5<def> = ADD %vreg12, %vreg25; GR32Bit:%vreg12,%vreg25
4B		  * %vreg3<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg3
4B		  * %vreg4<def> = LUI <ga:@redefine_in_sensors>[TF=2]; GR32Bit:%vreg4
4B		  * %vreg5<def> = LUI <MCSym="%lo("ga#256")">; GR32Bit:%vreg5
4B		  * SRLI %vreg5, %vreg5, 12; GR32Bit:%vreg5
4B		  * %vreg6<def> = ADD %vreg5, %vreg4; GR32Bit:%vreg6,%vreg5,%vreg4
4B		  * SW %vreg6, %vreg3, 0; mem:ST4[%1] GR32Bit:%vreg6,%vreg3
4B		  * %vreg0<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg0
4B		  * %vreg1<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg1
4B		  * SRLI %vreg1, %vreg1, 12; GR32Bit:%vreg1
4B		  * %vreg2<def> = ADD %vreg1, %vreg0; GR32Bit:%vreg2,%vreg1,%vreg0
4B		  * SW %zero, %vreg2, 0; mem:ST4[%0] GR32Bit:%vreg2
4B		  * %vreg83<def> = ADDI %zero, 64; GR32Bit:%vreg83
4B		  * %vreg84<def> = ADDI %zero, 1; GR32Bit:%vreg84
4B		  * WRITECM %vreg83, %vreg84, 60; GR32Bit:%vreg83,%vreg84
4B		  * %vreg85<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg85
4B		  * %vreg86<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg86
4B		  * %vreg87<def> = SRLI %vreg86, 12; GR32Bit:%vreg87,%vreg86
4B		  * %vreg88<def> = ADD %vreg85, %vreg87; GR32Bit:%vreg88,%vreg85,%vreg87
4B		  * %vreg89<def> = ADDI %zero, 12; GR32Bit:%vreg89
4B		  * %vreg90<def> = SRLI %vreg83, 22; GR32Bit:%vreg90,%vreg83
4B		  * %vreg91<def> = SRLI %vreg83, 12; GR32Bit:%vreg91,%vreg83
4B		  * %vreg92<def> = ANDI %vreg91, 15; GR32Bit:%vreg92,%vreg91
4B		  * %vreg93<def> = SRLI %vreg83, 6; GR32Bit:%vreg93,%vreg83
4B		  * %vreg94<def> = ANDI %vreg93, 63; GR32Bit:%vreg94,%vreg93
4B		  * %vreg95<def> = ADDI %zero, 832; GR32Bit:%vreg95
4B		  * %vreg96<def> = MUL %vreg90, %vreg95; GR32Bit:%vreg96,%vreg90,%vreg95
4B		  * %vreg97<def> = ADDI %zero, 52; GR32Bit:%vreg97
4B		  * %vreg98<def> = MUL %vreg92, %vreg97; GR32Bit:%vreg98,%vreg92,%vreg97
4B		  * %vreg99<def> = ADD %vreg98, %vreg94; GR32Bit:%vreg99,%vreg98,%vreg94
4B		  * %vreg100<def> = ADD %vreg99, %vreg96; GR32Bit:%vreg100,%vreg99,%vreg96
4B		  * %vreg101<def> = MUL %vreg100, %vreg89; GR32Bit:%vreg101,%vreg100,%vreg89
4B		  * %vreg102<def> = ADD %vreg101, %vreg88; GR32Bit:%vreg102,%vreg101,%vreg88
4B		  * %vreg103<def> = LW %t5, 0; GR32Bit:%vreg103
4B		  * SW %vreg103, %vreg102, 8; GR32Bit:%vreg103,%vreg102
4B		  * %vreg104<def> = LUI 1; GR32Bit:%vreg104
4B		  * WRITEPM %vreg104, %vreg83, 0; GR32Bit:%vreg104,%vreg83
4B		  * END 0
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
476B		%t4<def> = ADD %t5, %zero
476B		  * %vreg28<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg28
476B		  * %vreg29<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg29
476B		  * %vreg30<def> = SRLI %vreg29, 12; GR32Bit:%vreg30,%vreg29
476B		  * %vreg31<def> = ADD %vreg28, %vreg30; GR32Bit:%vreg31,%vreg28,%vreg30
476B		  * %vreg32<def> = ADDI %zero, 12; GR32Bit:%vreg32
476B		  * %vreg33<def> = SRLI %t5, 22; GR32Bit:%vreg33
476B		  * %vreg34<def> = SRLI %t5, 12; GR32Bit:%vreg34
476B		  * %vreg35<def> = ANDI %vreg34, 15; GR32Bit:%vreg35,%vreg34
476B		  * %vreg36<def> = SRLI %t5, 6; GR32Bit:%vreg36
476B		  * %vreg37<def> = ANDI %vreg36, 63; GR32Bit:%vreg37,%vreg36
476B		  * %vreg38<def> = ADDI %zero, 832; GR32Bit:%vreg38
476B		  * %vreg39<def> = MUL %vreg33, %vreg38; GR32Bit:%vreg39,%vreg33,%vreg38
476B		  * %vreg40<def> = ADDI %zero, 52; GR32Bit:%vreg40
476B		  * %vreg41<def> = MUL %vreg35, %vreg40; GR32Bit:%vreg41,%vreg35,%vreg40
476B		  * %vreg42<def> = ADD %vreg41, %vreg37; GR32Bit:%vreg42,%vreg41,%vreg37
476B		  * %vreg43<def> = ADD %vreg42, %vreg39; GR32Bit:%vreg43,%vreg42,%vreg39
476B		  * %vreg44<def> = MUL %vreg43, %vreg32; GR32Bit:%vreg44,%vreg43,%vreg32
476B		  * %t5<def> = ADD %vreg31, %vreg44; GR32Bit:%vreg31,%vreg44
476B		  * %vreg105<def> = LUI 1; GR32Bit:%vreg105
476B		  * %vreg106<def> = DREADPM %vreg105, 0; GR32Bit:%vreg106,%vreg105
476B		  * %vreg107<def> = LUI 1048575; GR32Bit:%vreg107
476B		  * %a5<def> = LUI 4095
476B		  * %a5<def> = SRLI %a5<internal>, 12
476B		  * ADD %vreg107, %vreg107, %a5; GR32Bit:%vreg107
476B		  * SYNC %vreg106, %vreg107, 60; GR32Bit:%vreg106,%vreg107
476B		  * END 0
476B		  * %zero<def> = ADDI %zero, 0
476B		  * %zero<def> = ADDI %zero, 0
684B		%t4<def> = ADD %t5, %zero
684B		  * %vreg47<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg47
684B		  * %vreg48<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg48
684B		  * %vreg49<def> = SRLI %vreg48, 12; GR32Bit:%vreg49,%vreg48
684B		  * %vreg50<def> = ADD %vreg47, %vreg49; GR32Bit:%vreg50,%vreg47,%vreg49
684B		  * %vreg51<def> = ADDI %zero, 12; GR32Bit:%vreg51
684B		  * %vreg52<def> = SRLI %t5, 22; GR32Bit:%vreg52
684B		  * %vreg53<def> = SRLI %t5, 12; GR32Bit:%vreg53
684B		  * %vreg54<def> = ANDI %vreg53, 15; GR32Bit:%vreg54,%vreg53
684B		  * %vreg55<def> = SRLI %t5, 6; GR32Bit:%vreg55
684B		  * %vreg56<def> = ANDI %vreg55, 63; GR32Bit:%vreg56,%vreg55
684B		  * %vreg57<def> = ADDI %zero, 832; GR32Bit:%vreg57
684B		  * %vreg58<def> = MUL %vreg52, %vreg57; GR32Bit:%vreg58,%vreg52,%vreg57
684B		  * %vreg59<def> = ADDI %zero, 52; GR32Bit:%vreg59
684B		  * %vreg60<def> = MUL %vreg54, %vreg59; GR32Bit:%vreg60,%vreg54,%vreg59
684B		  * %vreg61<def> = ADD %vreg60, %vreg56; GR32Bit:%vreg61,%vreg60,%vreg56
684B		  * %vreg62<def> = ADD %vreg61, %vreg58; GR32Bit:%vreg62,%vreg61,%vreg58
684B		  * %vreg63<def> = MUL %vreg62, %vreg51; GR32Bit:%vreg63,%vreg62,%vreg51
684B		  * %t5<def> = ADD %vreg50, %vreg63; GR32Bit:%vreg50,%vreg63
684B		  * END 0
684B		  * %zero<def> = ADDI %zero, 0
684B		  * %zero<def> = ADDI %zero, 0
860B		%t4<def> = ADD %t5, %zero
860B		  * %vreg66<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg66
860B		  * %vreg67<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg67
860B		  * %vreg68<def> = SRLI %vreg67, 12; GR32Bit:%vreg68,%vreg67
860B		  * %vreg69<def> = ADD %vreg66, %vreg68; GR32Bit:%vreg69,%vreg66,%vreg68
860B		  * %vreg70<def> = ADDI %zero, 12; GR32Bit:%vreg70
860B		  * %vreg71<def> = SRLI %t5, 22; GR32Bit:%vreg71
860B		  * %vreg72<def> = SRLI %t5, 12; GR32Bit:%vreg72
860B		  * %vreg73<def> = ANDI %vreg72, 15; GR32Bit:%vreg73,%vreg72
860B		  * %vreg74<def> = SRLI %t5, 6; GR32Bit:%vreg74
860B		  * %vreg75<def> = ANDI %vreg74, 63; GR32Bit:%vreg75,%vreg74
860B		  * %vreg76<def> = ADDI %zero, 832; GR32Bit:%vreg76
860B		  * %vreg77<def> = MUL %vreg71, %vreg76; GR32Bit:%vreg77,%vreg71,%vreg76
860B		  * %vreg78<def> = ADDI %zero, 52; GR32Bit:%vreg78
860B		  * %vreg79<def> = MUL %vreg73, %vreg78; GR32Bit:%vreg79,%vreg73,%vreg78
860B		  * %vreg80<def> = ADD %vreg79, %vreg75; GR32Bit:%vreg80,%vreg79,%vreg75
860B		  * %vreg81<def> = ADD %vreg80, %vreg77; GR32Bit:%vreg81,%vreg80,%vreg77
860B		  * %vreg82<def> = MUL %vreg81, %vreg70; GR32Bit:%vreg82,%vreg81,%vreg70
860B		  * %t5<def> = ADD %vreg69, %vreg82; GR32Bit:%vreg69,%vreg82
860B		  * END 0
860B		  * %zero<def> = ADDI %zero, 0
860B		  * %zero<def> = ADDI %zero, 0

# End machine code for function redefine_start1.

********** COMPUTING LIVE DEBUG VARIABLES: redefine_start1 **********
********** DEBUG VARIABLES **********
********** Compute Spill Weights **********
********** Function: redefine_start1
********** GREEDY REGISTER ALLOCATION **********
********** Function: redefine_start1

selectOrSplit GR32Bit:%vreg106 [636r,1420B:0)  0@636r
AllocationOrder(GR32Bit) = [ %t0 %t1 %t2 %fp %a0 %a1 %a2 %a3 %a4 %a6 %a7 %t3 %ra %sp %gp %tp %s0 %s1 %s2 %s3 %s4 %s5 %s6 %s7 %s8 %s9 %s10 %s11 ]
assigning %vreg106 to %t0: t0

selectOrSplit GR32Bit:%vreg83 [252r,444r:0)  0@252r
assigning %vreg83 to %t0: t0

selectOrSplit GR32Bit:%vreg12 [48r,160r:0)  0@48r
assigning %vreg12 to %t0: t0

selectOrSplit GR32Bit:%vreg31 [508r,620r:0)  0@508r
assigning %vreg31 to %t0: t0

selectOrSplit GR32Bit:%vreg50 [716r,828r:0)  0@716r
assigning %vreg50 to %t1: t1

selectOrSplit GR32Bit:%vreg69 [892r,1004r:0)  0@892r
assigning %vreg69 to %t1: t1

selectOrSplit GR32Bit:%vreg88 [300r,412r:0)  0@300r
assigning %vreg88 to %t1: t1

selectOrSplit GR32Bit:%vreg13 [56r,152r:0)  0@56r
assigning %vreg13 to %t1: t1

selectOrSplit GR32Bit:%vreg32 [516r,612r:0)  0@516r
assigning %vreg32 to %t1: t1

selectOrSplit GR32Bit:%vreg51 [724r,820r:0)  0@724r
assigning %vreg51 to %t2: t2

selectOrSplit GR32Bit:%vreg70 [900r,996r:0)  0@900r
assigning %vreg70 to %t2: t2

selectOrSplit GR32Bit:%vreg89 [308r,404r:0)  0@308r
assigning %vreg89 to %t2: t2

selectOrSplit GR32Bit:%vreg14 [64r,112r:0)  0@64r
assigning %vreg14 to %t2: t2

selectOrSplit GR32Bit:%vreg16 [80r,128r:0)  0@80r
assigning %vreg16 to %fp: fp

selectOrSplit GR32Bit:%vreg33 [524r,572r:0)  0@524r
assigning %vreg33 to %t2: t2

selectOrSplit GR32Bit:%vreg35 [540r,588r:0)  0@540r
assigning %vreg35 to %fp: fp

selectOrSplit GR32Bit:%vreg52 [732r,780r:0)  0@732r
assigning %vreg52 to %fp: fp

selectOrSplit GR32Bit:%vreg54 [748r,796r:0)  0@748r
assigning %vreg54 to %a0: a0

selectOrSplit GR32Bit:%vreg71 [908r,956r:0)  0@908r
assigning %vreg71 to %fp: fp

selectOrSplit GR32Bit:%vreg73 [924r,972r:0)  0@924r
assigning %vreg73 to %a0: a0

selectOrSplit GR32Bit:%vreg90 [316r,364r:0)  0@316r
assigning %vreg90 to %fp: fp

selectOrSplit GR32Bit:%vreg92 [332r,380r:0)  0@332r
assigning %vreg92 to %a0: a0

selectOrSplit GR32Bit:%vreg18 [96r,136r:0)  0@96r
assigning %vreg18 to %a0: a0

selectOrSplit GR32Bit:%vreg37 [556r,596r:0)  0@556r
assigning %vreg37 to %a0: a0

selectOrSplit GR32Bit:%vreg56 [764r,804r:0)  0@764r
assigning %vreg56 to %a1: a1

selectOrSplit GR32Bit:%vreg75 [940r,980r:0)  0@940r
assigning %vreg75 to %a1: a1

selectOrSplit GR32Bit:%vreg94 [348r,388r:0)  0@348r
assigning %vreg94 to %a1: a1

selectOrSplit GR32Bit:%vreg3 [168r,200r:0)  0@168r
assigning %vreg3 to %t0: t0

selectOrSplit GR32Bit:%vreg20 [112r,144r:0)  0@112r
assigning %vreg20 to %t2: t2

selectOrSplit GR32Bit:%vreg39 [572r,604r:0)  0@572r
assigning %vreg39 to %t2: t2

selectOrSplit GR32Bit:%vreg58 [780r,812r:0)  0@780r
assigning %vreg58 to %fp: fp

selectOrSplit GR32Bit:%vreg77 [956r,988r:0)  0@956r
assigning %vreg77 to %fp: fp

selectOrSplit GR32Bit:%vreg96 [364r,396r:0)  0@364r
assigning %vreg96 to %fp: fp

selectOrSplit GR32Bit:%vreg0 [208r,236r:0)  0@208r
assigning %vreg0 to %t0: t0

selectOrSplit GR32Bit:%vreg9 [24r,48r:0)  0@24r
assigning %vreg9 to %t0: t0

selectOrSplit GR32Bit:%vreg28 [484r,508r:0)  0@484r
assigning %vreg28 to %t0: t0

selectOrSplit GR32Bit:%vreg47 [692r,716r:0)  0@692r
assigning %vreg47 to %t1: t1

selectOrSplit GR32Bit:%vreg66 [868r,892r:0)  0@868r
assigning %vreg66 to %t1: t1

selectOrSplit GR32Bit:%vreg85 [276r,300r:0)  0@276r
assigning %vreg85 to %t1: t1

selectOrSplit GR32Bit:%vreg1 [216r,236r:0)  0@216r
assigning %vreg1 to %t1: t1

selectOrSplit GR32Bit:%vreg4 [176r,192r:0)  0@176r
assigning %vreg4 to %t1: t1

selectOrSplit GR32Bit:%vreg102 [412r,428r:0)  0@412r
assigning %vreg102 to %t1: t1

selectOrSplit GR32Bit:%vreg2 [236r,244r:0)  0@236r
assigning %vreg2 to %t0: t0

selectOrSplit GR32Bit:%vreg5 [184r,192r:0)  0@184r
assigning %vreg5 to %t2: t2

selectOrSplit GR32Bit:%vreg6 [192r,200r:0)  0@192r
assigning %vreg6 to %t1: t1

selectOrSplit GR32Bit:%vreg10 [32r,40r:0)  0@32r
assigning %vreg10 to %t1: t1

selectOrSplit GR32Bit:%vreg11 [40r,48r:0)  0@40r
assigning %vreg11 to %t1: t1

selectOrSplit GR32Bit:%vreg15 [72r,80r:0)  0@72r
assigning %vreg15 to %fp: fp

selectOrSplit GR32Bit:%vreg17 [88r,96r:0)  0@88r
assigning %vreg17 to %a0: a0

selectOrSplit GR32Bit:%vreg19 [104r,112r:0)  0@104r
assigning %vreg19 to %a1: a1

selectOrSplit GR32Bit:%vreg21 [120r,128r:0)  0@120r
assigning %vreg21 to %a1: a1

selectOrSplit GR32Bit:%vreg22 [128r,136r:0)  0@128r
assigning %vreg22 to %fp: fp

selectOrSplit GR32Bit:%vreg23 [136r,144r:0)  0@136r
assigning %vreg23 to %fp: fp

selectOrSplit GR32Bit:%vreg24 [144r,152r:0)  0@144r
assigning %vreg24 to %t2: t2

selectOrSplit GR32Bit:%vreg25 [152r,160r:0)  0@152r
assigning %vreg25 to %t1: t1

selectOrSplit GR32Bit:%vreg29 [492r,500r:0)  0@492r
assigning %vreg29 to %t1: t1

selectOrSplit GR32Bit:%vreg30 [500r,508r:0)  0@500r
assigning %vreg30 to %t1: t1

selectOrSplit GR32Bit:%vreg34 [532r,540r:0)  0@532r
assigning %vreg34 to %fp: fp

selectOrSplit GR32Bit:%vreg36 [548r,556r:0)  0@548r
assigning %vreg36 to %a0: a0

selectOrSplit GR32Bit:%vreg38 [564r,572r:0)  0@564r
assigning %vreg38 to %a1: a1

selectOrSplit GR32Bit:%vreg40 [580r,588r:0)  0@580r
assigning %vreg40 to %a1: a1

selectOrSplit GR32Bit:%vreg41 [588r,596r:0)  0@588r
assigning %vreg41 to %fp: fp

selectOrSplit GR32Bit:%vreg42 [596r,604r:0)  0@596r
assigning %vreg42 to %fp: fp

selectOrSplit GR32Bit:%vreg43 [604r,612r:0)  0@604r
assigning %vreg43 to %t2: t2

selectOrSplit GR32Bit:%vreg44 [612r,620r:0)  0@612r
assigning %vreg44 to %t1: t1

selectOrSplit GR32Bit:%vreg48 [700r,708r:0)  0@700r
assigning %vreg48 to %t2: t2

selectOrSplit GR32Bit:%vreg49 [708r,716r:0)  0@708r
assigning %vreg49 to %t2: t2

selectOrSplit GR32Bit:%vreg53 [740r,748r:0)  0@740r
assigning %vreg53 to %a0: a0

selectOrSplit GR32Bit:%vreg55 [756r,764r:0)  0@756r
assigning %vreg55 to %a1: a1

selectOrSplit GR32Bit:%vreg57 [772r,780r:0)  0@772r
assigning %vreg57 to %a2: a2

selectOrSplit GR32Bit:%vreg59 [788r,796r:0)  0@788r
assigning %vreg59 to %a2: a2

selectOrSplit GR32Bit:%vreg60 [796r,804r:0)  0@796r
assigning %vreg60 to %a0: a0

selectOrSplit GR32Bit:%vreg61 [804r,812r:0)  0@804r
assigning %vreg61 to %a0: a0

selectOrSplit GR32Bit:%vreg62 [812r,820r:0)  0@812r
assigning %vreg62 to %fp: fp

selectOrSplit GR32Bit:%vreg63 [820r,828r:0)  0@820r
assigning %vreg63 to %t2: t2

selectOrSplit GR32Bit:%vreg67 [876r,884r:0)  0@876r
assigning %vreg67 to %t2: t2

selectOrSplit GR32Bit:%vreg68 [884r,892r:0)  0@884r
assigning %vreg68 to %t2: t2

selectOrSplit GR32Bit:%vreg72 [916r,924r:0)  0@916r
assigning %vreg72 to %a0: a0

selectOrSplit GR32Bit:%vreg74 [932r,940r:0)  0@932r
assigning %vreg74 to %a1: a1

selectOrSplit GR32Bit:%vreg76 [948r,956r:0)  0@948r
assigning %vreg76 to %a2: a2

selectOrSplit GR32Bit:%vreg78 [964r,972r:0)  0@964r
assigning %vreg78 to %a2: a2

selectOrSplit GR32Bit:%vreg79 [972r,980r:0)  0@972r
assigning %vreg79 to %a0: a0

selectOrSplit GR32Bit:%vreg80 [980r,988r:0)  0@980r
assigning %vreg80 to %a0: a0

selectOrSplit GR32Bit:%vreg81 [988r,996r:0)  0@988r
assigning %vreg81 to %fp: fp

selectOrSplit GR32Bit:%vreg82 [996r,1004r:0)  0@996r
assigning %vreg82 to %t2: t2

selectOrSplit GR32Bit:%vreg84 [260r,268r:0)  0@260r
assigning %vreg84 to %t1: t1

selectOrSplit GR32Bit:%vreg86 [284r,292r:0)  0@284r
assigning %vreg86 to %t2: t2

selectOrSplit GR32Bit:%vreg87 [292r,300r:0)  0@292r
assigning %vreg87 to %t2: t2

selectOrSplit GR32Bit:%vreg91 [324r,332r:0)  0@324r
assigning %vreg91 to %a0: a0

selectOrSplit GR32Bit:%vreg93 [340r,348r:0)  0@340r
assigning %vreg93 to %a1: a1

selectOrSplit GR32Bit:%vreg95 [356r,364r:0)  0@356r
assigning %vreg95 to %a2: a2

selectOrSplit GR32Bit:%vreg97 [372r,380r:0)  0@372r
assigning %vreg97 to %a2: a2

selectOrSplit GR32Bit:%vreg98 [380r,388r:0)  0@380r
assigning %vreg98 to %a0: a0

selectOrSplit GR32Bit:%vreg99 [388r,396r:0)  0@388r
assigning %vreg99 to %a0: a0

selectOrSplit GR32Bit:%vreg100 [396r,404r:0)  0@396r
assigning %vreg100 to %fp: fp

selectOrSplit GR32Bit:%vreg101 [404r,412r:0)  0@404r
assigning %vreg101 to %t2: t2

selectOrSplit GR32Bit:%vreg103 [420r,428r:0)  0@420r
assigning %vreg103 to %t2: t2

selectOrSplit GR32Bit:%vreg104 [436r,444r:0)  0@436r
assigning %vreg104 to %t1: t1

selectOrSplit GR32Bit:%vreg105 [628r,636r:0)  0@628r
assigning %vreg105 to %t0: t0

selectOrSplit GR32Bit:%vreg107 [644r,652r:0)  0@644r
assigning %vreg107 to %t1: t1
********** REWRITE VIRTUAL REGISTERS **********
********** Function: redefine_start1
********** REGISTER MAP **********
[%vreg0 -> %t0] GR32Bit
[%vreg1 -> %t1] GR32Bit
[%vreg2 -> %t0] GR32Bit
[%vreg3 -> %t0] GR32Bit
[%vreg4 -> %t1] GR32Bit
[%vreg5 -> %t2] GR32Bit
[%vreg6 -> %t1] GR32Bit
[%vreg9 -> %t0] GR32Bit
[%vreg10 -> %t1] GR32Bit
[%vreg11 -> %t1] GR32Bit
[%vreg12 -> %t0] GR32Bit
[%vreg13 -> %t1] GR32Bit
[%vreg14 -> %t2] GR32Bit
[%vreg15 -> %fp] GR32Bit
[%vreg16 -> %fp] GR32Bit
[%vreg17 -> %a0] GR32Bit
[%vreg18 -> %a0] GR32Bit
[%vreg19 -> %a1] GR32Bit
[%vreg20 -> %t2] GR32Bit
[%vreg21 -> %a1] GR32Bit
[%vreg22 -> %fp] GR32Bit
[%vreg23 -> %fp] GR32Bit
[%vreg24 -> %t2] GR32Bit
[%vreg25 -> %t1] GR32Bit
[%vreg28 -> %t0] GR32Bit
[%vreg29 -> %t1] GR32Bit
[%vreg30 -> %t1] GR32Bit
[%vreg31 -> %t0] GR32Bit
[%vreg32 -> %t1] GR32Bit
[%vreg33 -> %t2] GR32Bit
[%vreg34 -> %fp] GR32Bit
[%vreg35 -> %fp] GR32Bit
[%vreg36 -> %a0] GR32Bit
[%vreg37 -> %a0] GR32Bit
[%vreg38 -> %a1] GR32Bit
[%vreg39 -> %t2] GR32Bit
[%vreg40 -> %a1] GR32Bit
[%vreg41 -> %fp] GR32Bit
[%vreg42 -> %fp] GR32Bit
[%vreg43 -> %t2] GR32Bit
[%vreg44 -> %t1] GR32Bit
[%vreg47 -> %t1] GR32Bit
[%vreg48 -> %t2] GR32Bit
[%vreg49 -> %t2] GR32Bit
[%vreg50 -> %t1] GR32Bit
[%vreg51 -> %t2] GR32Bit
[%vreg52 -> %fp] GR32Bit
[%vreg53 -> %a0] GR32Bit
[%vreg54 -> %a0] GR32Bit
[%vreg55 -> %a1] GR32Bit
[%vreg56 -> %a1] GR32Bit
[%vreg57 -> %a2] GR32Bit
[%vreg58 -> %fp] GR32Bit
[%vreg59 -> %a2] GR32Bit
[%vreg60 -> %a0] GR32Bit
[%vreg61 -> %a0] GR32Bit
[%vreg62 -> %fp] GR32Bit
[%vreg63 -> %t2] GR32Bit
[%vreg66 -> %t1] GR32Bit
[%vreg67 -> %t2] GR32Bit
[%vreg68 -> %t2] GR32Bit
[%vreg69 -> %t1] GR32Bit
[%vreg70 -> %t2] GR32Bit
[%vreg71 -> %fp] GR32Bit
[%vreg72 -> %a0] GR32Bit
[%vreg73 -> %a0] GR32Bit
[%vreg74 -> %a1] GR32Bit
[%vreg75 -> %a1] GR32Bit
[%vreg76 -> %a2] GR32Bit
[%vreg77 -> %fp] GR32Bit
[%vreg78 -> %a2] GR32Bit
[%vreg79 -> %a0] GR32Bit
[%vreg80 -> %a0] GR32Bit
[%vreg81 -> %fp] GR32Bit
[%vreg82 -> %t2] GR32Bit
[%vreg83 -> %t0] GR32Bit
[%vreg84 -> %t1] GR32Bit
[%vreg85 -> %t1] GR32Bit
[%vreg86 -> %t2] GR32Bit
[%vreg87 -> %t2] GR32Bit
[%vreg88 -> %t1] GR32Bit
[%vreg89 -> %t2] GR32Bit
[%vreg90 -> %fp] GR32Bit
[%vreg91 -> %a0] GR32Bit
[%vreg92 -> %a0] GR32Bit
[%vreg93 -> %a1] GR32Bit
[%vreg94 -> %a1] GR32Bit
[%vreg95 -> %a2] GR32Bit
[%vreg96 -> %fp] GR32Bit
[%vreg97 -> %a2] GR32Bit
[%vreg98 -> %a0] GR32Bit
[%vreg99 -> %a0] GR32Bit
[%vreg100 -> %fp] GR32Bit
[%vreg101 -> %t2] GR32Bit
[%vreg102 -> %t1] GR32Bit
[%vreg103 -> %t2] GR32Bit
[%vreg104 -> %t1] GR32Bit
[%vreg105 -> %t0] GR32Bit
[%vreg106 -> %t0] GR32Bit
[%vreg107 -> %t1] GR32Bit

0B	BB#0: derived from LLVM BB %redefine_start1.return
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg9<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg9
4B		  * %vreg10<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg10
4B		  * %vreg11<def> = SRLI %vreg10<kill>, 12; GR32Bit:%vreg11,%vreg10
4B		  * %vreg12<def> = ADD %vreg9<kill>, %vreg11<kill>; GR32Bit:%vreg12,%vreg9,%vreg11
4B		  * %vreg13<def> = ADDI %zero, 12; GR32Bit:%vreg13
4B		  * %vreg14<def> = SRLI %t5, 22; GR32Bit:%vreg14
4B		  * %vreg15<def> = SRLI %t5, 12; GR32Bit:%vreg15
4B		  * %vreg16<def> = ANDI %vreg15<kill>, 15; GR32Bit:%vreg16,%vreg15
4B		  * %vreg17<def> = SRLI %t5, 6; GR32Bit:%vreg17
4B		  * %vreg18<def> = ANDI %vreg17<kill>, 63; GR32Bit:%vreg18,%vreg17
4B		  * %vreg19<def> = ADDI %zero, 832; GR32Bit:%vreg19
4B		  * %vreg20<def> = MUL %vreg14<kill>, %vreg19<kill>; GR32Bit:%vreg20,%vreg14,%vreg19
4B		  * %vreg21<def> = ADDI %zero, 52; GR32Bit:%vreg21
4B		  * %vreg22<def> = MUL %vreg16<kill>, %vreg21<kill>; GR32Bit:%vreg22,%vreg16,%vreg21
4B		  * %vreg23<def> = ADD %vreg22<kill>, %vreg18<kill>; GR32Bit:%vreg23,%vreg22,%vreg18
4B		  * %vreg24<def> = ADD %vreg23<kill>, %vreg20<kill>; GR32Bit:%vreg24,%vreg23,%vreg20
4B		  * %vreg25<def> = MUL %vreg24<kill>, %vreg13<kill>; GR32Bit:%vreg25,%vreg24,%vreg13
4B		  * %t5<def> = ADD %vreg12<kill>, %vreg25<kill>; GR32Bit:%vreg12,%vreg25
4B		  * %vreg3<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg3
4B		  * %vreg4<def> = LUI <ga:@redefine_in_sensors>[TF=2]; GR32Bit:%vreg4
4B		  * %vreg5<def> = LUI <MCSym="%lo("ga#256")">; GR32Bit:%vreg5
4B		  * SRLI %vreg5, %vreg5, 12; GR32Bit:%vreg5
4B		  * %vreg6<def> = ADD %vreg5<kill>, %vreg4<kill>; GR32Bit:%vreg6,%vreg5,%vreg4
4B		  * SW %vreg6<kill>, %vreg3<kill>, 0; mem:ST4[%1] GR32Bit:%vreg6,%vreg3
4B		  * %vreg0<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg0
4B		  * %vreg1<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg1
4B		  * SRLI %vreg1, %vreg1, 12; GR32Bit:%vreg1
4B		  * %vreg2<def> = ADD %vreg1<kill>, %vreg0<kill>; GR32Bit:%vreg2,%vreg1,%vreg0
4B		  * SW %zero, %vreg2<kill>, 0; mem:ST4[%0] GR32Bit:%vreg2
4B		  * %vreg83<def> = ADDI %zero, 64; GR32Bit:%vreg83
4B		  * %vreg84<def> = ADDI %zero, 1; GR32Bit:%vreg84
4B		  * WRITECM %vreg83, %vreg84<kill>, 60; GR32Bit:%vreg83,%vreg84
4B		  * %vreg85<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg85
4B		  * %vreg86<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg86
4B		  * %vreg87<def> = SRLI %vreg86<kill>, 12; GR32Bit:%vreg87,%vreg86
4B		  * %vreg88<def> = ADD %vreg85<kill>, %vreg87<kill>; GR32Bit:%vreg88,%vreg85,%vreg87
4B		  * %vreg89<def> = ADDI %zero, 12; GR32Bit:%vreg89
4B		  * %vreg90<def> = SRLI %vreg83, 22; GR32Bit:%vreg90,%vreg83
4B		  * %vreg91<def> = SRLI %vreg83, 12; GR32Bit:%vreg91,%vreg83
4B		  * %vreg92<def> = ANDI %vreg91<kill>, 15; GR32Bit:%vreg92,%vreg91
4B		  * %vreg93<def> = SRLI %vreg83, 6; GR32Bit:%vreg93,%vreg83
4B		  * %vreg94<def> = ANDI %vreg93<kill>, 63; GR32Bit:%vreg94,%vreg93
4B		  * %vreg95<def> = ADDI %zero, 832; GR32Bit:%vreg95
4B		  * %vreg96<def> = MUL %vreg90<kill>, %vreg95<kill>; GR32Bit:%vreg96,%vreg90,%vreg95
4B		  * %vreg97<def> = ADDI %zero, 52; GR32Bit:%vreg97
4B		  * %vreg98<def> = MUL %vreg92<kill>, %vreg97<kill>; GR32Bit:%vreg98,%vreg92,%vreg97
4B		  * %vreg99<def> = ADD %vreg98<kill>, %vreg94<kill>; GR32Bit:%vreg99,%vreg98,%vreg94
4B		  * %vreg100<def> = ADD %vreg99<kill>, %vreg96<kill>; GR32Bit:%vreg100,%vreg99,%vreg96
4B		  * %vreg101<def> = MUL %vreg100<kill>, %vreg89<kill>; GR32Bit:%vreg101,%vreg100,%vreg89
4B		  * %vreg102<def> = ADD %vreg101<kill>, %vreg88<kill>; GR32Bit:%vreg102,%vreg101,%vreg88
4B		  * %vreg103<def> = LW %t5, 0; GR32Bit:%vreg103
4B		  * SW %vreg103<kill>, %vreg102<kill>, 8; GR32Bit:%vreg103,%vreg102
4B		  * %vreg104<def> = LUI 1; GR32Bit:%vreg104
4B		  * WRITEPM %vreg104<kill>, %vreg83<kill>, 0; GR32Bit:%vreg104,%vreg83
4B		  * END 0
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
476B		%t4<def> = ADD %t5, %zero
476B		  * %vreg28<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg28
476B		  * %vreg29<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg29
476B		  * %vreg30<def> = SRLI %vreg29<kill>, 12; GR32Bit:%vreg30,%vreg29
476B		  * %vreg31<def> = ADD %vreg28<kill>, %vreg30<kill>; GR32Bit:%vreg31,%vreg28,%vreg30
476B		  * %vreg32<def> = ADDI %zero, 12; GR32Bit:%vreg32
476B		  * %vreg33<def> = SRLI %t5, 22; GR32Bit:%vreg33
476B		  * %vreg34<def> = SRLI %t5, 12; GR32Bit:%vreg34
476B		  * %vreg35<def> = ANDI %vreg34<kill>, 15; GR32Bit:%vreg35,%vreg34
476B		  * %vreg36<def> = SRLI %t5, 6; GR32Bit:%vreg36
476B		  * %vreg37<def> = ANDI %vreg36<kill>, 63; GR32Bit:%vreg37,%vreg36
476B		  * %vreg38<def> = ADDI %zero, 832; GR32Bit:%vreg38
476B		  * %vreg39<def> = MUL %vreg33<kill>, %vreg38<kill>; GR32Bit:%vreg39,%vreg33,%vreg38
476B		  * %vreg40<def> = ADDI %zero, 52; GR32Bit:%vreg40
476B		  * %vreg41<def> = MUL %vreg35<kill>, %vreg40<kill>; GR32Bit:%vreg41,%vreg35,%vreg40
476B		  * %vreg42<def> = ADD %vreg41<kill>, %vreg37<kill>; GR32Bit:%vreg42,%vreg41,%vreg37
476B		  * %vreg43<def> = ADD %vreg42<kill>, %vreg39<kill>; GR32Bit:%vreg43,%vreg42,%vreg39
476B		  * %vreg44<def> = MUL %vreg43<kill>, %vreg32<kill>; GR32Bit:%vreg44,%vreg43,%vreg32
476B		  * %t5<def> = ADD %vreg31<kill>, %vreg44<kill>; GR32Bit:%vreg31,%vreg44
476B		  * %vreg105<def> = LUI 1; GR32Bit:%vreg105
476B		  * %vreg106<def> = DREADPM %vreg105<kill>, 0; GR32Bit:%vreg106,%vreg105
476B		  * %vreg107<def> = LUI 1048575; GR32Bit:%vreg107
476B		  * %a5<def> = LUI 4095
476B		  * %a5<def> = SRLI %a5<internal>, 12
476B		  * ADD %vreg107, %vreg107, %a5; GR32Bit:%vreg107
476B		  * SYNC %vreg106, %vreg107<kill>, 60; GR32Bit:%vreg106,%vreg107
476B		  * END 0
476B		  * %zero<def> = ADDI %zero, 0
476B		  * %zero<def> = ADDI %zero, 0
684B		%t4<def> = ADD %t5, %zero
684B		  * %vreg47<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg47
684B		  * %vreg48<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg48
684B		  * %vreg49<def> = SRLI %vreg48<kill>, 12; GR32Bit:%vreg49,%vreg48
684B		  * %vreg50<def> = ADD %vreg47<kill>, %vreg49<kill>; GR32Bit:%vreg50,%vreg47,%vreg49
684B		  * %vreg51<def> = ADDI %zero, 12; GR32Bit:%vreg51
684B		  * %vreg52<def> = SRLI %t5, 22; GR32Bit:%vreg52
684B		  * %vreg53<def> = SRLI %t5, 12; GR32Bit:%vreg53
684B		  * %vreg54<def> = ANDI %vreg53<kill>, 15; GR32Bit:%vreg54,%vreg53
684B		  * %vreg55<def> = SRLI %t5, 6; GR32Bit:%vreg55
684B		  * %vreg56<def> = ANDI %vreg55<kill>, 63; GR32Bit:%vreg56,%vreg55
684B		  * %vreg57<def> = ADDI %zero, 832; GR32Bit:%vreg57
684B		  * %vreg58<def> = MUL %vreg52<kill>, %vreg57<kill>; GR32Bit:%vreg58,%vreg52,%vreg57
684B		  * %vreg59<def> = ADDI %zero, 52; GR32Bit:%vreg59
684B		  * %vreg60<def> = MUL %vreg54<kill>, %vreg59<kill>; GR32Bit:%vreg60,%vreg54,%vreg59
684B		  * %vreg61<def> = ADD %vreg60<kill>, %vreg56<kill>; GR32Bit:%vreg61,%vreg60,%vreg56
684B		  * %vreg62<def> = ADD %vreg61<kill>, %vreg58<kill>; GR32Bit:%vreg62,%vreg61,%vreg58
684B		  * %vreg63<def> = MUL %vreg62<kill>, %vreg51<kill>; GR32Bit:%vreg63,%vreg62,%vreg51
684B		  * %t5<def> = ADD %vreg50<kill>, %vreg63<kill>; GR32Bit:%vreg50,%vreg63
684B		  * END 0
684B		  * %zero<def> = ADDI %zero, 0
684B		  * %zero<def> = ADDI %zero, 0
860B		%t4<def> = ADD %t5, %zero
860B		  * %vreg66<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg66
860B		  * %vreg67<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg67
860B		  * %vreg68<def> = SRLI %vreg67<kill>, 12; GR32Bit:%vreg68,%vreg67
860B		  * %vreg69<def> = ADD %vreg66<kill>, %vreg68<kill>; GR32Bit:%vreg69,%vreg66,%vreg68
860B		  * %vreg70<def> = ADDI %zero, 12; GR32Bit:%vreg70
860B		  * %vreg71<def> = SRLI %t5, 22; GR32Bit:%vreg71
860B		  * %vreg72<def> = SRLI %t5, 12; GR32Bit:%vreg72
860B		  * %vreg73<def> = ANDI %vreg72<kill>, 15; GR32Bit:%vreg73,%vreg72
860B		  * %vreg74<def> = SRLI %t5, 6; GR32Bit:%vreg74
860B		  * %vreg75<def> = ANDI %vreg74<kill>, 63; GR32Bit:%vreg75,%vreg74
860B		  * %vreg76<def> = ADDI %zero, 832; GR32Bit:%vreg76
860B		  * %vreg77<def> = MUL %vreg71<kill>, %vreg76<kill>; GR32Bit:%vreg77,%vreg71,%vreg76
860B		  * %vreg78<def> = ADDI %zero, 52; GR32Bit:%vreg78
860B		  * %vreg79<def> = MUL %vreg73<kill>, %vreg78<kill>; GR32Bit:%vreg79,%vreg73,%vreg78
860B		  * %vreg80<def> = ADD %vreg79<kill>, %vreg75<kill>; GR32Bit:%vreg80,%vreg79,%vreg75
860B		  * %vreg81<def> = ADD %vreg80<kill>, %vreg77<kill>; GR32Bit:%vreg81,%vreg80,%vreg77
860B		  * %vreg82<def> = MUL %vreg81<kill>, %vreg70<kill>; GR32Bit:%vreg82,%vreg81,%vreg70
860B		  * %t5<def> = ADD %vreg69<kill>, %vreg82<kill>; GR32Bit:%vreg69,%vreg82
860B		  * END 0
860B		  * %zero<def> = ADDI %zero, 0
860B		  * %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#768")">
> %t1<def> = LUI <MCSym="%lo("ga#768")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 12
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = ADDI %t5, <fi#0>
> %t1<def> = LUI <ga:@redefine_in_sensors>[TF=2]
> %t2<def> = LUI <MCSym="%lo("ga#256")">
> SRLI %t2, %t2, 12
> %t1<def> = ADD %t2<kill>, %t1<kill>
> SW %t1<kill>, %t0<kill>, 0; mem:ST4[%1]
> %t0<def> = LUI <ga:@eicas_discretes>[TF=2]
> %t1<def> = LUI <MCSym="%lo("ga#0")">
> SRLI %t1, %t1, 12
> %t0<def> = ADD %t1<kill>, %t0<kill>
> SW %zero, %t0<kill>, 0; mem:ST4[%0]
> %t0<def> = ADDI %zero, 64
> %t1<def> = ADDI %zero, 1
> WRITECM %t0, %t1<kill>, 60
> %t1<def> = LUI <MCSym="%hi("ga#768")">
> %t2<def> = LUI <MCSym="%lo("ga#768")">
> %t2<def> = SRLI %t2<kill>, 12
> %t1<def> = ADD %t1<kill>, %t2<kill>
> %t2<def> = ADDI %zero, 12
> %fp<def> = SRLI %t0, 22
> %a0<def> = SRLI %t0, 12
> %a0<def> = ANDI %a0<kill>, 15
> %a1<def> = SRLI %t0, 6
> %a1<def> = ANDI %a1<kill>, 63
> %a2<def> = ADDI %zero, 832
> %fp<def> = MUL %fp<kill>, %a2<kill>
> %a2<def> = ADDI %zero, 52
> %a0<def> = MUL %a0<kill>, %a2<kill>
> %a0<def> = ADD %a0<kill>, %a1<kill>
> %fp<def> = ADD %a0<kill>, %fp<kill>
> %t2<def> = MUL %fp<kill>, %t2<kill>
> %t1<def> = ADD %t2<kill>, %t1<kill>
> %t2<def> = LW %t5, 0
> SW %t2<kill>, %t1<kill>, 8
> %t1<def> = LUI 1
> WRITEPM %t1<kill>, %t0<kill>, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#768")">
> %t1<def> = LUI <MCSym="%lo("ga#768")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 12
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = LUI 1
> %t0<def> = DREADPM %t0<kill>, 0
> %t1<def> = LUI 1048575
> %a5<def> = LUI 4095
> %a5<def> = SRLI %a5<internal>, 12
> ADD %t1, %t1, %a5
> SYNC %t0, %t1<kill>, 60
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t1<def> = LUI <MCSym="%hi("ga#768")">
> %t2<def> = LUI <MCSym="%lo("ga#768")">
> %t2<def> = SRLI %t2<kill>, 12
> %t1<def> = ADD %t1<kill>, %t2<kill>
> %t2<def> = ADDI %zero, 12
> %fp<def> = SRLI %t5, 22
> %a0<def> = SRLI %t5, 12
> %a0<def> = ANDI %a0<kill>, 15
> %a1<def> = SRLI %t5, 6
> %a1<def> = ANDI %a1<kill>, 63
> %a2<def> = ADDI %zero, 832
> %fp<def> = MUL %fp<kill>, %a2<kill>
> %a2<def> = ADDI %zero, 52
> %a0<def> = MUL %a0<kill>, %a2<kill>
> %a0<def> = ADD %a0<kill>, %a1<kill>
> %fp<def> = ADD %a0<kill>, %fp<kill>
> %t2<def> = MUL %fp<kill>, %t2<kill>
> %t5<def> = ADD %t1<kill>, %t2<kill>
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t1<def> = LUI <MCSym="%hi("ga#768")">
> %t2<def> = LUI <MCSym="%lo("ga#768")">
> %t2<def> = SRLI %t2<kill>, 12
> %t1<def> = ADD %t1<kill>, %t2<kill>
> %t2<def> = ADDI %zero, 12
> %fp<def> = SRLI %t5, 22
> %a0<def> = SRLI %t5, 12
> %a0<def> = ANDI %a0<kill>, 15
> %a1<def> = SRLI %t5, 6
> %a1<def> = ANDI %a1<kill>, 63
> %a2<def> = ADDI %zero, 832
> %fp<def> = MUL %fp<kill>, %a2<kill>
> %a2<def> = ADDI %zero, 52
> %a0<def> = MUL %a0<kill>, %a2<kill>
> %a0<def> = ADD %a0<kill>, %a1<kill>
> %fp<def> = ADD %a0<kill>, %fp<kill>
> %t2<def> = MUL %fp<kill>, %t2<kill>
> %t5<def> = ADD %t1<kill>, %t2<kill>
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
********** EMITTING LIVE DEBUG VARIABLES **********
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: redefine_start1
max x:0, min x:0
max y:0, min y:0
current state of mf:# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %redefine_start1.return
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#768")">
	  * %t1<def> = LUI <MCSym="%lo("ga#768")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 12
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = ADDI %t5, <fi#0>
	  * %t1<def> = LUI <ga:@redefine_in_sensors>[TF=2]
	  * %t2<def> = LUI <MCSym="%lo("ga#256")">
	  * SRLI %t2, %t2, 12
	  * %t1<def> = ADD %t2<kill>, %t1<kill>
	  * SW %t1<kill>, %t0<kill>, 0; mem:ST4[%1]
	  * %t0<def> = LUI <ga:@eicas_discretes>[TF=2]
	  * %t1<def> = LUI <MCSym="%lo("ga#0")">
	  * SRLI %t1, %t1, 12
	  * %t0<def> = ADD %t1<kill>, %t0<kill>
	  * SW %zero, %t0<kill>, 0; mem:ST4[%0]
	  * %t0<def> = ADDI %zero, 64
	  * %t1<def> = ADDI %zero, 1
	  * WRITECM %t0, %t1<kill>, 60
	  * %t1<def> = LUI <MCSym="%hi("ga#768")">
	  * %t2<def> = LUI <MCSym="%lo("ga#768")">
	  * %t2<def> = SRLI %t2<kill>, 12
	  * %t1<def> = ADD %t1<kill>, %t2<kill>
	  * %t2<def> = ADDI %zero, 12
	  * %fp<def> = SRLI %t0, 22
	  * %a0<def> = SRLI %t0, 12
	  * %a0<def> = ANDI %a0<kill>, 15
	  * %a1<def> = SRLI %t0, 6
	  * %a1<def> = ANDI %a1<kill>, 63
	  * %a2<def> = ADDI %zero, 832
	  * %fp<def> = MUL %fp<kill>, %a2<kill>
	  * %a2<def> = ADDI %zero, 52
	  * %a0<def> = MUL %a0<kill>, %a2<kill>
	  * %a0<def> = ADD %a0<kill>, %a1<kill>
	  * %fp<def> = ADD %a0<kill>, %fp<kill>
	  * %t2<def> = MUL %fp<kill>, %t2<kill>
	  * %t1<def> = ADD %t2<kill>, %t1<kill>
	  * %t2<def> = LW %t5, 0
	  * SW %t2<kill>, %t1<kill>, 8
	  * %t1<def> = LUI 1
	  * WRITEPM %t1<kill>, %t0<kill>, 0
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#768")">
	  * %t1<def> = LUI <MCSym="%lo("ga#768")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 12
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = LUI 1
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * %t1<def> = LUI 1048575
	  * %a5<def> = LUI 4095
	  * %a5<def> = SRLI %a5<internal>, 12
	  * ADD %t1, %t1, %a5
	  * SYNC %t0, %t1<kill>, 60
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t1<def> = LUI <MCSym="%hi("ga#768")">
	  * %t2<def> = LUI <MCSym="%lo("ga#768")">
	  * %t2<def> = SRLI %t2<kill>, 12
	  * %t1<def> = ADD %t1<kill>, %t2<kill>
	  * %t2<def> = ADDI %zero, 12
	  * %fp<def> = SRLI %t5, 22
	  * %a0<def> = SRLI %t5, 12
	  * %a0<def> = ANDI %a0<kill>, 15
	  * %a1<def> = SRLI %t5, 6
	  * %a1<def> = ANDI %a1<kill>, 63
	  * %a2<def> = ADDI %zero, 832
	  * %fp<def> = MUL %fp<kill>, %a2<kill>
	  * %a2<def> = ADDI %zero, 52
	  * %a0<def> = MUL %a0<kill>, %a2<kill>
	  * %a0<def> = ADD %a0<kill>, %a1<kill>
	  * %fp<def> = ADD %a0<kill>, %fp<kill>
	  * %t2<def> = MUL %fp<kill>, %t2<kill>
	  * %t5<def> = ADD %t1<kill>, %t2<kill>
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t1<def> = LUI <MCSym="%hi("ga#768")">
	  * %t2<def> = LUI <MCSym="%lo("ga#768")">
	  * %t2<def> = SRLI %t2<kill>, 12
	  * %t1<def> = ADD %t1<kill>, %t2<kill>
	  * %t2<def> = ADDI %zero, 12
	  * %fp<def> = SRLI %t5, 22
	  * %a0<def> = SRLI %t5, 12
	  * %a0<def> = ANDI %a0<kill>, 15
	  * %a1<def> = SRLI %t5, 6
	  * %a1<def> = ANDI %a1<kill>, 63
	  * %a2<def> = ADDI %zero, 832
	  * %fp<def> = MUL %fp<kill>, %a2<kill>
	  * %a2<def> = ADDI %zero, 52
	  * %a0<def> = MUL %a0<kill>, %a2<kill>
	  * %a0<def> = ADD %a0<kill>, %a1<kill>
	  * %fp<def> = ADD %a0<kill>, %fp<kill>
	  * %t2<def> = MUL %fp<kill>, %t2<kill>
	  * %t5<def> = ADD %t1<kill>, %t2<kill>
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0

# End machine code for function redefine_start1.

lowering frame index for func redefine_start1:0 TO VAL:0
CGP: Found      local addrmode: [Base:@redefine_out_eicas_discretes]
Computing probabilities for redefine_start2.return
Computing probabilities for redefine_start2.newName01



=== redefine_start2
store visit is after?  store i32 %0, i32* @redefine_out_eicas_discretes, align 4
I was here to add @redefine_out_eicas_discretes = common global i32 0, align 4
whats in dag after store?SelectionDAG has 7 nodes:
  0x1d09b38: ch = EntryToken [ORD=6]

  0x1d265e0: i32 = Constant<0>

    0x1d09b38: <multiple use>
      0x1d09b38: <multiple use>
      0x1d29420: i32 = Register %vreg0 [ORD=6]

    0x1d29320: i32,ch = CopyFromReg 0x1d09b38, 0x1d29420 [ORD=6]

    0x1d267e0: i32 = GlobalAddress<i32* @redefine_out_eicas_discretes> 0 [ORD=6]

    0x1d26be0: i32 = undef [ORD=6]

  0x1d268e0: ch = store 0x1d09b38, 0x1d29320, 0x1d267e0, 0x1d26be0<ST4[@redefine_out_eicas_discretes]> [ORD=6]


Initial selection DAG: BB#0 'redefine_start2:redefine_start2.newName01'
SelectionDAG has 7 nodes:
  0x1d09b38: ch = EntryToken [ORD=6]

  0x1d265e0: i32 = Constant<0>

    0x1d09b38: <multiple use>
      0x1d09b38: <multiple use>
      0x1d29420: i32 = Register %vreg0 [ORD=6]

    0x1d29320: i32,ch = CopyFromReg 0x1d09b38, 0x1d29420 [ORD=6]

    0x1d267e0: i32 = GlobalAddress<i32* @redefine_out_eicas_discretes> 0 [ORD=6]

    0x1d26be0: i32 = undef [ORD=6]

  0x1d268e0: ch = store 0x1d09b38, 0x1d29320, 0x1d267e0, 0x1d26be0<ST4[@redefine_out_eicas_discretes]> [ORD=6]


Optimized lowered selection DAG: BB#0 'redefine_start2:redefine_start2.newName01'
SelectionDAG has 6 nodes:
  0x1d09b38: ch = EntryToken [ORD=6]

    0x1d09b38: <multiple use>
      0x1d09b38: <multiple use>
      0x1d29420: i32 = Register %vreg0 [ORD=6]

    0x1d29320: i32,ch = CopyFromReg 0x1d09b38, 0x1d29420 [ORD=6]

    0x1d267e0: i32 = GlobalAddress<i32* @redefine_out_eicas_discretes> 0 [ORD=6]

    0x1d26be0: i32 = undef [ORD=6]

  0x1d268e0: ch = store 0x1d09b38, 0x1d29320, 0x1d267e0, 0x1d26be0<ST4[@redefine_out_eicas_discretes]> [ORD=6]


Legally typed node: 0x1d26be0: i32 = undef [ORD=6] [ID=0]

Legally typed node: 0x1d267e0: i32 = GlobalAddress<i32* @redefine_out_eicas_discretes> 0 [ORD=6] [ID=0]

Legally typed node: 0x1d29420: i32 = Register %vreg0 [ORD=6] [ID=0]

Legally typed node: 0x1d09b38: ch = EntryToken [ORD=6] [ID=0]

Legally typed node: 0x1d29320: i32,ch = CopyFromReg 0x1d09b38, 0x1d29420 [ORD=6] [ID=0]

Legally typed node: 0x1d268e0: ch = store 0x1d09b38, 0x1d29320, 0x1d267e0, 0x1d26be0<ST4[@redefine_out_eicas_discretes]> [ORD=6] [ID=0]

Legally typed node: 0x7fff243c9bc0: ch = handlenode 0x1d268e0 [ID=0]

Type-legalized selection DAG: BB#0 'redefine_start2:redefine_start2.newName01'
SelectionDAG has 6 nodes:
  0x1d09b38: ch = EntryToken [ORD=6] [ID=-3]

    0x1d09b38: <multiple use>
      0x1d09b38: <multiple use>
      0x1d29420: i32 = Register %vreg0 [ORD=6] [ID=-3]

    0x1d29320: i32,ch = CopyFromReg 0x1d09b38, 0x1d29420 [ORD=6] [ID=-3]

    0x1d267e0: i32 = GlobalAddress<i32* @redefine_out_eicas_discretes> 0 [ORD=6] [ID=-3]

    0x1d26be0: i32 = undef [ORD=6] [ID=-3]

  0x1d268e0: ch = store 0x1d09b38, 0x1d29320, 0x1d267e0, 0x1d26be0<ST4[@redefine_out_eicas_discretes]> [ORD=6] [ID=-3]


Legalized selection DAG: BB#0 'redefine_start2:redefine_start2.newName01'
SelectionDAG has 10 nodes:
  0x1d09b38: ch = EntryToken [ORD=6] [ID=0]

    0x1d09b38: <multiple use>
      0x1d09b38: <multiple use>
      0x1d29420: i32 = Register %vreg0 [ORD=6] [ID=1]

    0x1d29320: i32,ch = CopyFromReg 0x1d09b38, 0x1d29420 [ORD=6] [ID=4]

        0x1d265e0: i32 = TargetGlobalAddress<i32* @redefine_out_eicas_discretes> 0 [TF=2]

      0x1d270e0: i32 = REDEFINEISD::Hi 0x1d265e0

        0x1d29220: i32 = TargetGlobalAddress<i32* @redefine_out_eicas_discretes> 0 [TF=3]

      0x1d273e0: i32 = REDEFINEISD::Lo 0x1d29220

    0x1d272e0: i32 = add 0x1d270e0, 0x1d273e0

    0x1d26be0: i32 = undef [ORD=6] [ID=3]

  0x1d268e0: ch = store 0x1d09b38, 0x1d29320, 0x1d272e0, 0x1d26be0<ST4[@redefine_out_eicas_discretes]> [ORD=6] [ID=5]


Optimized legalized selection DAG: BB#0 'redefine_start2:redefine_start2.newName01'
SelectionDAG has 10 nodes:
  0x1d09b38: ch = EntryToken [ORD=6] [ID=0]

    0x1d09b38: <multiple use>
      0x1d09b38: <multiple use>
      0x1d29420: i32 = Register %vreg0 [ORD=6] [ID=1]

    0x1d29320: i32,ch = CopyFromReg 0x1d09b38, 0x1d29420 [ORD=6] [ID=4]

        0x1d265e0: i32 = TargetGlobalAddress<i32* @redefine_out_eicas_discretes> 0 [TF=2]

      0x1d270e0: i32 = REDEFINEISD::Hi 0x1d265e0

        0x1d29220: i32 = TargetGlobalAddress<i32* @redefine_out_eicas_discretes> 0 [TF=3]

      0x1d273e0: i32 = REDEFINEISD::Lo 0x1d29220

    0x1d272e0: i32 = add 0x1d270e0, 0x1d273e0

    0x1d26be0: i32 = undef [ORD=6] [ID=3]

  0x1d268e0: ch = store 0x1d09b38, 0x1d29320, 0x1d272e0, 0x1d26be0<ST4[@redefine_out_eicas_discretes]> [ORD=6] [ID=5]


===== Instruction selection begins: BB#0 'redefine_start2.newName01'
ISEL: Starting pattern match on root node: 0x1d268e0: ch = store 0x1d09b38, 0x1d29320, 0x1d272e0, 0x1d26be0<ST4[@redefine_out_eicas_discretes]> [ORD=6] [ID=9]

  Initial Opcode index to 178
  Morphed node: 0x1d268e0: ch = SW 0x1d29320, 0x1d272e0, 0x1d267e0, 0x1d09b38<Mem:ST4[@redefine_out_eicas_discretes]> [ORD=6]

ISEL: Match complete!
=> 0x1d268e0: ch = SW 0x1d29320, 0x1d272e0, 0x1d267e0, 0x1d09b38<Mem:ST4[@redefine_out_eicas_discretes]> [ORD=6]

ISEL: Starting pattern match on root node: 0x1d272e0: i32 = add 0x1d270e0, 0x1d273e0 [ID=8]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x1d272e0: i32 = ADD 0x1d273e0, 0x1d270e0

ISEL: Match complete!
=> 0x1d272e0: i32 = ADD 0x1d273e0, 0x1d270e0

ISEL: Starting pattern match on root node: 0x1d273e0: i32 = REDEFINEISD::Lo 0x1d29220 [ID=7]

  Initial Opcode index to 1204
  Morphed node: 0x1d273e0: i32 = ADDI 0x1d26be0, 0x1d29220

ISEL: Match complete!
=> 0x1d273e0: i32 = ADDI 0x1d26be0, 0x1d29220

ISEL: Starting pattern match on root node: 0x1d270e0: i32 = REDEFINEISD::Hi 0x1d265e0 [ID=6]

  Initial Opcode index to 1186
  Morphed node: 0x1d270e0: i32 = LUI 0x1d265e0

ISEL: Match complete!
=> 0x1d270e0: i32 = LUI 0x1d265e0

=> 0x1d29320: i32,ch = CopyFromReg 0x1d09b38, 0x1d29420 [ORD=6]

=> 0x1d29220: i32 = TargetGlobalAddress<i32* @redefine_out_eicas_discretes> 0 [TF=3]

=> 0x1d265e0: i32 = TargetGlobalAddress<i32* @redefine_out_eicas_discretes> 0 [TF=2]

=> 0x1d29420: i32 = Register %vreg0 [ORD=6]

=> 0x1d09b38: ch = EntryToken [ORD=6]

===== Instruction selection ends:
Selected selection DAG: BB#0 'redefine_start2:redefine_start2.newName01'
SelectionDAG has 11 nodes:
  0x1d09b38: ch = EntryToken [ORD=6]

      0x1d09b38: <multiple use>
      0x1d29420: i32 = Register %vreg0 [ORD=6]

    0x1d29320: i32,ch = CopyFromReg 0x1d09b38, 0x1d29420 [ORD=6]

        0x1d26be0: i32 = Register %zero

        0x1d29220: i32 = TargetGlobalAddress<i32* @redefine_out_eicas_discretes> 0 [TF=3]

      0x1d273e0: i32 = ADDI 0x1d26be0, 0x1d29220

        0x1d265e0: i32 = TargetGlobalAddress<i32* @redefine_out_eicas_discretes> 0 [TF=2]

      0x1d270e0: i32 = LUI 0x1d265e0

    0x1d272e0: i32 = ADD 0x1d273e0, 0x1d270e0

    0x1d267e0: i32 = TargetConstant<0>

    0x1d09b38: <multiple use>
  0x1d268e0: ch = SW 0x1d29320, 0x1d272e0, 0x1d267e0, 0x1d09b38<Mem:ST4[@redefine_out_eicas_discretes]> [ORD=6]


********** List Scheduling BB#0 'redefine_start2.newName01' **********
SU(0): 0x1d268e0: ch = SW 0x1d29320, 0x1d272e0, 0x1d267e0, 0x1d09b38<Mem:ST4[@redefine_out_eicas_discretes]> [ORD=6] [ID=0]

  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
   val SU(4): Latency=1
   val SU(1): Latency=1

SU(1): 0x1d272e0: i32 = ADD 0x1d273e0, 0x1d270e0 [ID=1]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
   val SU(3): Latency=1
   val SU(2): Latency=1
  Successors:
   val SU(0): Latency=1

SU(2): 0x1d270e0: i32 = LUI 0x1d265e0 [ID=2]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
   val SU(1): Latency=1

SU(3): 0x1d273e0: i32 = ADDI 0x1d26be0, 0x1d29220 [ID=3]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
   val SU(1): Latency=1

SU(4): 0x1d29320: i32,ch = CopyFromReg 0x1d09b38, 0x1d29420 [ORD=6] [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
   val SU(0): Latency=1


Examining Available:
Height 0: SU(0): 0x1d268e0: ch = SW 0x1d29320, 0x1d272e0, 0x1d267e0, 0x1d09b38<Mem:ST4[@redefine_out_eicas_discretes]> [ORD=6] [ID=0]


*** Scheduling [0]: SU(0): 0x1d268e0: ch = SW 0x1d29320, 0x1d272e0, 0x1d267e0, 0x1d09b38<Mem:ST4[@redefine_out_eicas_discretes]> [ORD=6] [ID=0]


Examining Available:
Height 1: SU(1): 0x1d272e0: i32 = ADD 0x1d273e0, 0x1d270e0 [ID=1]

Height 1: SU(4): 0x1d29320: i32,ch = CopyFromReg 0x1d09b38, 0x1d29420 [ORD=6] [ID=4]


*** Scheduling [1]: SU(1): 0x1d272e0: i32 = ADD 0x1d273e0, 0x1d270e0 [ID=1]


Examining Available:
Height 2: SU(3): 0x1d273e0: i32 = ADDI 0x1d26be0, 0x1d29220 [ID=3]

Height 2: SU(2): 0x1d270e0: i32 = LUI 0x1d265e0 [ID=2]

Height 1: SU(4): 0x1d29320: i32,ch = CopyFromReg 0x1d09b38, 0x1d29420 [ORD=6] [ID=4]


*** Scheduling [2]: SU(3): 0x1d273e0: i32 = ADDI 0x1d26be0, 0x1d29220 [ID=3]


Examining Available:
Height 2: SU(2): 0x1d270e0: i32 = LUI 0x1d265e0 [ID=2]

Height 1: SU(4): 0x1d29320: i32,ch = CopyFromReg 0x1d09b38, 0x1d29420 [ORD=6] [ID=4]


*** Scheduling [3]: SU(2): 0x1d270e0: i32 = LUI 0x1d265e0 [ID=2]


Examining Available:
Height 1: SU(4): 0x1d29320: i32,ch = CopyFromReg 0x1d09b38, 0x1d29420 [ORD=6] [ID=4]


*** Scheduling [4]: SU(4): 0x1d29320: i32,ch = CopyFromReg 0x1d09b38, 0x1d29420 [ORD=6] [ID=4]

*** Final schedule ***
SU(4): 0x1d29320: i32,ch = CopyFromReg 0x1d09b38, 0x1d29420 [ORD=6] [ID=4]

SU(2): 0x1d270e0: i32 = LUI 0x1d265e0 [ID=2]

SU(3): 0x1d273e0: i32 = ADDI 0x1d26be0, 0x1d29220 [ID=3]

SU(1): 0x1d272e0: i32 = ADD 0x1d273e0, 0x1d270e0 [ID=1]

SU(0): 0x1d268e0: ch = SW 0x1d29320, 0x1d272e0, 0x1d267e0, 0x1d09b38<Mem:ST4[@redefine_out_eicas_discretes]> [ORD=6] [ID=0]


Total amount of phi nodes to update: 0
Initial selection DAG: BB#1 'redefine_start2:redefine_start2.return'
SelectionDAG has 1 nodes:
  0x1d09b38: ch = EntryToken


Optimized lowered selection DAG: BB#1 'redefine_start2:redefine_start2.return'
SelectionDAG has 1 nodes:
  0x1d09b38: ch = EntryToken


Legally typed node: 0x1d09b38: ch = EntryToken [ID=0]

Legally typed node: 0x7fff243c9bc0: ch = handlenode 0x1d09b38 [ID=0]

Type-legalized selection DAG: BB#1 'redefine_start2:redefine_start2.return'
SelectionDAG has 1 nodes:
  0x1d09b38: ch = EntryToken [ID=-3]


Legalized selection DAG: BB#1 'redefine_start2:redefine_start2.return'
SelectionDAG has 1 nodes:
  0x1d09b38: ch = EntryToken [ID=0]


Optimized legalized selection DAG: BB#1 'redefine_start2:redefine_start2.return'
SelectionDAG has 1 nodes:
  0x1d09b38: ch = EntryToken [ID=0]


===== Instruction selection begins: BB#1 'redefine_start2.return'
=> 0x1d09b38: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: BB#1 'redefine_start2:redefine_start2.return'
SelectionDAG has 1 nodes:
  0x1d09b38: ch = EntryToken


********** List Scheduling BB#1 'redefine_start2.return' **********
*** Final schedule ***

Total amount of phi nodes to update: 0

*** Tail-duplicating BB#1

Merging into block: BB#0: derived from LLVM BB %redefine_start2.newName01
    Live Ins: %ra
	%vreg0<def> = COPY %ra; GR32Bit:%vreg0
	%vreg1<def> = LUI <ga:@redefine_out_eicas_discretes>[TF=2]; GR32Bit:%vreg1
	%vreg2<def> = ADDI %zero, <ga:@redefine_out_eicas_discretes>[TF=3]; GR32Bit:%vreg2
	%vreg3<def> = ADD %vreg2<kill>, %vreg1<kill>; GR32Bit:%vreg3,%vreg2,%vreg1
	SW %vreg0, %vreg3<kill>, 0; mem:ST4[@redefine_out_eicas_discretes] GR32Bit:%vreg0,%vreg3
    Successors according to CFG: BB#1
From MBB: BB#1: derived from LLVM BB %redefine_start2.return
    Predecessors according to CFG: BB#0

Removing MBB: BB#1: derived from LLVM BB %redefine_start2.return
# Machine code for function redefine_start2: SSA
Function Live Ins: %ra in %vreg0

0B	BB#0: derived from LLVM BB %redefine_start2.newName01
	    Live Ins: %ra
16B		%vreg0<def> = COPY %ra; GR32Bit:%vreg0
32B		%vreg1<def> = LUI <ga:@redefine_out_eicas_discretes>[TF=2]; GR32Bit:%vreg1
48B		%vreg2<def> = ADDI %zero, <ga:@redefine_out_eicas_discretes>[TF=3]; GR32Bit:%vreg2
64B		%vreg3<def> = ADD %vreg2<kill>, %vreg1<kill>; GR32Bit:%vreg3,%vreg2,%vreg1
80B		SW %vreg0, %vreg3<kill>, 0; mem:ST4[@redefine_out_eicas_discretes] GR32Bit:%vreg0,%vreg3

# End machine code for function redefine_start2.

********** Stack Coloring **********
********** Function: redefine_start2
******** Pre-regalloc Machine LICM: redefine_start2 ********
******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: redefine_start2
********** PROCESS IMPLICIT DEFS **********
********** Function: redefine_start2
********** REWRITING TWO-ADDR INSTRS **********
********** Function: redefine_start2
# Machine code for function redefine_start2: Post SSA
Function Live Ins: %ra in %vreg0

0B	BB#0: derived from LLVM BB %redefine_start2.newName01
	    Live Ins: %ra
16B		%vreg0<def> = COPY %ra<kill>; GR32Bit:%vreg0
32B		%vreg1<def> = LUI <ga:@redefine_out_eicas_discretes>[TF=2]; GR32Bit:%vreg1
48B		%vreg2<def> = ADDI %zero, <ga:@redefine_out_eicas_discretes>[TF=3]; GR32Bit:%vreg2
64B		%vreg3<def> = ADD %vreg2<kill>, %vreg1<kill>; GR32Bit:%vreg3,%vreg2,%vreg1
80B		SW %vreg0<kill>, %vreg3<kill>, 0; mem:ST4[@redefine_out_eicas_discretes] GR32Bit:%vreg0,%vreg3

# End machine code for function redefine_start2.

Computing live-in reg-units in ABI blocks.
0B	BB#0 ra#0
Created 1 new intervals.
********** INTERVALS **********
ra = [0B,16r:0)  0@0B-phi
%vreg0 = [16r,80r:0)  0@16r
%vreg1 = [32r,64r:0)  0@32r
%vreg2 = [48r,64r:0)  0@48r
%vreg3 = [64r,80r:0)  0@64r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start2: Post SSA
Function Live Ins: %ra in %vreg0

0B	BB#0: derived from LLVM BB %redefine_start2.newName01
	    Live Ins: %ra
16B		%vreg0<def> = COPY %ra; GR32Bit:%vreg0
32B		%vreg1<def> = LUI <ga:@redefine_out_eicas_discretes>[TF=2]; GR32Bit:%vreg1
48B		%vreg2<def> = ADDI %zero, <ga:@redefine_out_eicas_discretes>[TF=3]; GR32Bit:%vreg2
64B		%vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
80B		SW %vreg0, %vreg3, 0; mem:ST4[@redefine_out_eicas_discretes] GR32Bit:%vreg0,%vreg3

# End machine code for function redefine_start2.

********** SIMPLE REGISTER COALESCING **********
********** Function: redefine_start2
********** JOINING INTERVALS ***********
redefine_start2.newName01:
16B	%vreg0<def> = COPY %ra; GR32Bit:%vreg0
	Considering merging %vreg0 with %ra
	Can only merge into reserved registers.
Trying to inflate 0 regs.
********** INTERVALS **********
ra = [0B,16r:0)  0@0B-phi
%vreg0 = [16r,80r:0)  0@16r
%vreg1 = [32r,64r:0)  0@32r
%vreg2 = [48r,64r:0)  0@48r
%vreg3 = [64r,80r:0)  0@64r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start2: Post SSA
Function Live Ins: %ra in %vreg0

0B	BB#0: derived from LLVM BB %redefine_start2.newName01
	    Live Ins: %ra
16B		%vreg0<def> = COPY %ra; GR32Bit:%vreg0
32B		%vreg1<def> = LUI <ga:@redefine_out_eicas_discretes>[TF=2]; GR32Bit:%vreg1
48B		%vreg2<def> = ADDI %zero, <ga:@redefine_out_eicas_discretes>[TF=3]; GR32Bit:%vreg2
64B		%vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
80B		SW %vreg0, %vreg3, 0; mem:ST4[@redefine_out_eicas_discretes] GR32Bit:%vreg0,%vreg3

# End machine code for function redefine_start2.

Before MISched:
# Machine code for function redefine_start2: Post SSA
Function Live Ins: %ra in %vreg0

BB#0: derived from LLVM BB %redefine_start2.newName01
    Live Ins: %ra
	%vreg0<def> = COPY %ra; GR32Bit:%vreg0
	%vreg1<def> = LUI <ga:@redefine_out_eicas_discretes>[TF=2]; GR32Bit:%vreg1
	%vreg2<def> = ADDI %zero, <ga:@redefine_out_eicas_discretes>[TF=3]; GR32Bit:%vreg2
	%vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
	SW %vreg0, %vreg3, 0; mem:ST4[@redefine_out_eicas_discretes] GR32Bit:%vreg0,%vreg3

# End machine code for function redefine_start2.


-------------
Starting new basic block BB#0
********** MI Scheduling **********
redefine_start2:BB#0 redefine_start2.newName01
  From: %vreg0<def> = COPY %ra; GR32Bit:%vreg0
    To: End Remaining: 0
Max Pressure: GR32Bit=3
Live In: %gp 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 3
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 0
SU(0):   %vreg0<def> = COPY %ra; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
   val SU(4): Latency=0 Reg=%vreg0

SU(1):   %vreg1<def> = LUI <ga:@redefine_out_eicas_discretes>[TF=2]; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(3): Latency=5 Reg=%vreg1

SU(2):   %vreg2<def> = ADDI %zero, <ga:@redefine_out_eicas_discretes>[TF=3]; GR32Bit:%vreg2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(3): Latency=5 Reg=%vreg2

SU(3):   %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg2
   val SU(1): Latency=5 Reg=%vreg1
  Successors:
   val SU(4): Latency=5 Reg=%vreg3

SU(4):   SW %vreg0, %vreg3, 0; mem:ST4[@redefine_out_eicas_discretes] GR32Bit:%vreg0,%vreg3
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 10
  Height             : 0
  Predecessors:
   val SU(3): Latency=5 Reg=%vreg3
   val SU(0): Latency=0 Reg=%vreg0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg0<def> = COPY %ra; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
   val SU(4): Latency=0 Reg=%vreg0

SU(1):   %vreg1<def> = LUI <ga:@redefine_out_eicas_discretes>[TF=2]; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(3): Latency=5 Reg=%vreg1

SU(2):   %vreg2<def> = ADDI %zero, <ga:@redefine_out_eicas_discretes>[TF=3]; GR32Bit:%vreg2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
   val SU(3): Latency=5 Reg=%vreg2

SU(3):   %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg2
   val SU(1): Latency=5 Reg=%vreg1
  Successors:
   val SU(4): Latency=5 Reg=%vreg3

SU(4):   SW %vreg0, %vreg3, 0; mem:ST4[@redefine_out_eicas_discretes] GR32Bit:%vreg0,%vreg3
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 10
  Height             : 0
  Predecessors:
   val SU(3): Latency=5 Reg=%vreg3
   val SU(0): Latency=0 Reg=%vreg0
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(2)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg2<def> = ADDI %zero, <ga:@redefine_out_eicas_discretes>[TF=3]; GR32Bit:%vreg2
handleMove 48B -> 8B: %vreg2<def> = ADDI %zero, <ga:@redefine_out_eicas_discretes>[TF=3]; GR32Bit:%vreg2
     %vreg2:	[48r,64r:0)  0@48r
        -->	[8r,64r:0)  0@8r
     zero:	EMPTY
        -->	EMPTY
Pick node SU(1)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg1<def> = LUI <ga:@redefine_out_eicas_discretes>[TF=2]; GR32Bit:%vreg1
handleMove 32B -> 12B: %vreg1<def> = LUI <ga:@redefine_out_eicas_discretes>[TF=2]; GR32Bit:%vreg1
     %vreg1:	[32r,64r:0)  0@32r
        -->	[12r,64r:0)  0@12r
Pick node SU(3)  ILP: 3 / 6 = 0.5 Tree: 0 @0
Scheduling %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1

*** Renumbered SlotIndexes 12-28 ***
handleMove 64B -> 20B: %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
     %vreg3:	[64r,80r:0)  0@64r
        -->	[20r,80r:0)  0@20r
     %vreg2:	[8r,64r:0)  0@8r
        -->	[8r,20r:0)  0@8r
     %vreg1:	[12r,64r:0)  0@12r
        -->	[12r,20r:0)  0@12r
Pick node SU(0)  ILP: 0 / 1 = 0 Tree: 0 @0
Scheduling %vreg0<def> = COPY %ra; GR32Bit:%vreg0
Pick node SU(4)  ILP: 4 / 11 = 0.363636 Tree: 0 @0
Scheduling SW %vreg0, %vreg3, 0; mem:ST4[@redefine_out_eicas_discretes] GR32Bit:%vreg0,%vreg3
*** Final schedule for BB#0 ***
SU(2):   %vreg2<def> = ADDI %zero, <ga:@redefine_out_eicas_discretes>[TF=3]; GR32Bit:%vreg2
SU(1):   %vreg1<def> = LUI <ga:@redefine_out_eicas_discretes>[TF=2]; GR32Bit:%vreg1
SU(3):   %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
SU(0):   %vreg0<def> = COPY %ra; GR32Bit:%vreg0
SU(4):   SW %vreg0, %vreg3, 0; mem:ST4[@redefine_out_eicas_discretes] GR32Bit:%vreg0,%vreg3


*** Renumbered SlotIndexes 4-60 ***

*** Renumbered SlotIndexes 16-88 ***

*** Renumbered SlotIndexes 28-108 ***

*** Renumbered SlotIndexes 40-120 ***

*** Renumbered SlotIndexes 52-132 ***

*** Renumbered SlotIndexes 64-144 ***

*** Renumbered SlotIndexes 76-156 ***

*** Renumbered SlotIndexes 88-168 ***

*** Renumbered SlotIndexes 100-180 ***

*** Renumbered SlotIndexes 112-192 ***

*** Renumbered SlotIndexes 124-204 ***

*** Renumbered SlotIndexes 136-216 ***

*** Renumbered SlotIndexes 148-228 ***

*** Renumbered SlotIndexes 160-240 ***

*** Renumbered SlotIndexes 172-252 ***

*** Renumbered SlotIndexes 184-264 ***

*** Renumbered SlotIndexes 196-276 ***

*** Renumbered SlotIndexes 208-288 ***

*** Renumbered SlotIndexes 220-300 ***

*** Renumbered SlotIndexes 232-312 ***

*** Renumbered SlotIndexes 244-324 ***

*** Renumbered SlotIndexes 256-336 ***

*** Renumbered SlotIndexes 268-348 ***

*** Renumbered SlotIndexes 280-360 ***

*** Renumbered SlotIndexes 292-372 ***

*** Renumbered SlotIndexes 304-384 ***

*** Renumbered SlotIndexes 316-396 ***

*** Renumbered SlotIndexes 328-408 ***

*** Renumbered SlotIndexes 340-420 ***

*** Renumbered SlotIndexes 352-432 ***

*** Renumbered SlotIndexes 364-444 ***

*** Renumbered SlotIndexes 376-456 ***

*** Renumbered SlotIndexes 388-468 ***

*** Renumbered SlotIndexes 400-480 ***
Partitioning instructions of the region into multiple CEs
instr:  %vreg2<def> = ADDI %zero, <ga:@redefine_out_eicas_discretes>[TF=3]; GR32Bit:%vreg2
instr:  %vreg1<def> = LUI <ga:@redefine_out_eicas_discretes>[TF=2]; GR32Bit:%vreg1
instr:  %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
instr:  %vreg0<def> = COPY %ra; GR32Bit:%vreg0
instr:  SW %vreg0, %vreg3, 0; mem:ST4[@redefine_out_eicas_discretes] GR32Bit:%vreg0,%vreg3
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
before falloc, state of bb0:BB#0: derived from LLVM BB %redefine_start2.newName01
    Live Ins: %ra
	%vreg4<def> = ADD %t5, %zero; GR32Bit:%vreg4
	%vreg6<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg6
	%vreg7<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg7
	%vreg8<def> = SRLI %vreg7, 12; GR32Bit:%vreg8,%vreg7
	%vreg9<def> = ADD %vreg6, %vreg8; GR32Bit:%vreg9,%vreg6,%vreg8
	%vreg10<def> = ADDI %zero, 12; GR32Bit:%vreg10
	%vreg11<def> = SRLI %t5, 22; GR32Bit:%vreg11
	%vreg12<def> = SRLI %t5, 12; GR32Bit:%vreg12
	%vreg13<def> = ANDI %vreg12, 15; GR32Bit:%vreg13,%vreg12
	%vreg14<def> = SRLI %t5, 6; GR32Bit:%vreg14
	%vreg15<def> = ANDI %vreg14, 63; GR32Bit:%vreg15,%vreg14
	%vreg16<def> = ADDI %zero, 832; GR32Bit:%vreg16
	%vreg17<def> = MUL %vreg11, %vreg16; GR32Bit:%vreg17,%vreg11,%vreg16
	%vreg18<def> = ADDI %zero, 52; GR32Bit:%vreg18
	%vreg19<def> = MUL %vreg13, %vreg18; GR32Bit:%vreg19,%vreg13,%vreg18
	%vreg20<def> = ADD %vreg19, %vreg15; GR32Bit:%vreg20,%vreg19,%vreg15
	%vreg21<def> = ADD %vreg20, %vreg17; GR32Bit:%vreg21,%vreg20,%vreg17
	%vreg22<def> = MUL %vreg21, %vreg10; GR32Bit:%vreg22,%vreg21,%vreg10
	%vreg5<def> = ADD %vreg9, %vreg22; GR32Bit:%vreg5,%vreg9,%vreg22
	%vreg2<def> = ADDI %zero, <ga:@redefine_out_eicas_discretes>[TF=3]; GR32Bit:%vreg2
	%vreg1<def> = LUI <ga:@redefine_out_eicas_discretes>[TF=2]; GR32Bit:%vreg1
	%vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
	%vreg0<def> = COPY %ra; GR32Bit:%vreg0
	SW %vreg0, %vreg3, 0; mem:ST4[@redefine_out_eicas_discretes] GR32Bit:%vreg0,%vreg3
	%vreg23<def> = ADD %t5, %zero; GR32Bit:%vreg23
	%vreg25<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg25
	%vreg26<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg26
	%vreg27<def> = SRLI %vreg26, 12; GR32Bit:%vreg27,%vreg26
	%vreg28<def> = ADD %vreg25, %vreg27; GR32Bit:%vreg28,%vreg25,%vreg27
	%vreg29<def> = ADDI %zero, 12; GR32Bit:%vreg29
	%vreg30<def> = SRLI %t5, 22; GR32Bit:%vreg30
	%vreg31<def> = SRLI %t5, 12; GR32Bit:%vreg31
	%vreg32<def> = ANDI %vreg31, 15; GR32Bit:%vreg32,%vreg31
	%vreg33<def> = SRLI %t5, 6; GR32Bit:%vreg33
	%vreg34<def> = ANDI %vreg33, 63; GR32Bit:%vreg34,%vreg33
	%vreg35<def> = ADDI %zero, 832; GR32Bit:%vreg35
	%vreg36<def> = MUL %vreg30, %vreg35; GR32Bit:%vreg36,%vreg30,%vreg35
	%vreg37<def> = ADDI %zero, 52; GR32Bit:%vreg37
	%vreg38<def> = MUL %vreg32, %vreg37; GR32Bit:%vreg38,%vreg32,%vreg37
	%vreg39<def> = ADD %vreg38, %vreg34; GR32Bit:%vreg39,%vreg38,%vreg34
	%vreg40<def> = ADD %vreg39, %vreg36; GR32Bit:%vreg40,%vreg39,%vreg36
	%vreg41<def> = MUL %vreg40, %vreg29; GR32Bit:%vreg41,%vreg40,%vreg29
	%vreg24<def> = ADD %vreg28, %vreg41; GR32Bit:%vreg24,%vreg28,%vreg41
	%vreg42<def> = ADD %t5, %zero; GR32Bit:%vreg42
	%vreg44<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg44
	%vreg45<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg45
	%vreg46<def> = SRLI %vreg45, 12; GR32Bit:%vreg46,%vreg45
	%vreg47<def> = ADD %vreg44, %vreg46; GR32Bit:%vreg47,%vreg44,%vreg46
	%vreg48<def> = ADDI %zero, 12; GR32Bit:%vreg48
	%vreg49<def> = SRLI %t5, 22; GR32Bit:%vreg49
	%vreg50<def> = SRLI %t5, 12; GR32Bit:%vreg50
	%vreg51<def> = ANDI %vreg50, 15; GR32Bit:%vreg51,%vreg50
	%vreg52<def> = SRLI %t5, 6; GR32Bit:%vreg52
	%vreg53<def> = ANDI %vreg52, 63; GR32Bit:%vreg53,%vreg52
	%vreg54<def> = ADDI %zero, 832; GR32Bit:%vreg54
	%vreg55<def> = MUL %vreg49, %vreg54; GR32Bit:%vreg55,%vreg49,%vreg54
	%vreg56<def> = ADDI %zero, 52; GR32Bit:%vreg56
	%vreg57<def> = MUL %vreg51, %vreg56; GR32Bit:%vreg57,%vreg51,%vreg56
	%vreg58<def> = ADD %vreg57, %vreg53; GR32Bit:%vreg58,%vreg57,%vreg53
	%vreg59<def> = ADD %vreg58, %vreg55; GR32Bit:%vreg59,%vreg58,%vreg55
	%vreg60<def> = MUL %vreg59, %vreg48; GR32Bit:%vreg60,%vreg59,%vreg48
	%vreg43<def> = ADD %vreg47, %vreg60; GR32Bit:%vreg43,%vreg47,%vreg60
	%vreg61<def> = ADD %t5, %zero; GR32Bit:%vreg61
	%vreg63<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg63
	%vreg64<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg64
	%vreg65<def> = SRLI %vreg64, 12; GR32Bit:%vreg65,%vreg64
	%vreg66<def> = ADD %vreg63, %vreg65; GR32Bit:%vreg66,%vreg63,%vreg65
	%vreg67<def> = ADDI %zero, 12; GR32Bit:%vreg67
	%vreg68<def> = SRLI %t5, 22; GR32Bit:%vreg68
	%vreg69<def> = SRLI %t5, 12; GR32Bit:%vreg69
	%vreg70<def> = ANDI %vreg69, 15; GR32Bit:%vreg70,%vreg69
	%vreg71<def> = SRLI %t5, 6; GR32Bit:%vreg71
	%vreg72<def> = ANDI %vreg71, 63; GR32Bit:%vreg72,%vreg71
	%vreg73<def> = ADDI %zero, 832; GR32Bit:%vreg73
	%vreg74<def> = MUL %vreg68, %vreg73; GR32Bit:%vreg74,%vreg68,%vreg73
	%vreg75<def> = ADDI %zero, 52; GR32Bit:%vreg75
	%vreg76<def> = MUL %vreg70, %vreg75; GR32Bit:%vreg76,%vreg70,%vreg75
	%vreg77<def> = ADD %vreg76, %vreg72; GR32Bit:%vreg77,%vreg76,%vreg72
	%vreg78<def> = ADD %vreg77, %vreg74; GR32Bit:%vreg78,%vreg77,%vreg74
	%vreg79<def> = MUL %vreg78, %vreg67; GR32Bit:%vreg79,%vreg78,%vreg67
	%vreg62<def> = ADD %vreg66, %vreg79; GR32Bit:%vreg62,%vreg66,%vreg79
Adding all fallocs first to avoid stalls due to sequential fallocs and fbinds
Adding writecm(for writing sync count to context frames) and fbind instructions
live end of child is itself
live end of child is itself
Adding localref sw instructions to hyperOp redefine_start2
Adding writecm instructions to hyperOp redefine_start2
Adding writecmp and sync instructions
Adding endHyperOp instructions to each pHyperOp

*** Renumbered SlotIndexes 412-492 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 424-504 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 436-516 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 448-528 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 460-540 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 472-552 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0
After Shuffling regions of basic block, state of BB#0:
BB#0: derived from LLVM BB %redefine_start2.newName01
    Live Ins: %ra
	%vreg4<def> = ADD %t5, %zero; GR32Bit:%vreg4
	%vreg6<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg6
	%vreg7<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg7
	%vreg8<def> = SRLI %vreg7, 12; GR32Bit:%vreg8,%vreg7
	%vreg9<def> = ADD %vreg6, %vreg8; GR32Bit:%vreg9,%vreg6,%vreg8
	%vreg10<def> = ADDI %zero, 12; GR32Bit:%vreg10
	%vreg11<def> = SRLI %t5, 22; GR32Bit:%vreg11
	%vreg12<def> = SRLI %t5, 12; GR32Bit:%vreg12
	%vreg13<def> = ANDI %vreg12, 15; GR32Bit:%vreg13,%vreg12
	%vreg14<def> = SRLI %t5, 6; GR32Bit:%vreg14
	%vreg15<def> = ANDI %vreg14, 63; GR32Bit:%vreg15,%vreg14
	%vreg16<def> = ADDI %zero, 832; GR32Bit:%vreg16
	%vreg17<def> = MUL %vreg11, %vreg16; GR32Bit:%vreg17,%vreg11,%vreg16
	%vreg18<def> = ADDI %zero, 52; GR32Bit:%vreg18
	%vreg19<def> = MUL %vreg13, %vreg18; GR32Bit:%vreg19,%vreg13,%vreg18
	%vreg20<def> = ADD %vreg19, %vreg15; GR32Bit:%vreg20,%vreg19,%vreg15
	%vreg21<def> = ADD %vreg20, %vreg17; GR32Bit:%vreg21,%vreg20,%vreg17
	%vreg22<def> = MUL %vreg21, %vreg10; GR32Bit:%vreg22,%vreg21,%vreg10
	%vreg5<def> = ADD %vreg9, %vreg22; GR32Bit:%vreg5,%vreg9,%vreg22
	%vreg2<def> = ADDI %zero, <ga:@redefine_out_eicas_discretes>[TF=3]; GR32Bit:%vreg2
	%vreg1<def> = LUI <ga:@redefine_out_eicas_discretes>[TF=2]; GR32Bit:%vreg1
	%vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
	%vreg0<def> = COPY %ra; GR32Bit:%vreg0
	SW %vreg0, %vreg3, 0; mem:ST4[@redefine_out_eicas_discretes] GR32Bit:%vreg0,%vreg3
	FDELETE %t4, 0
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg23<def> = ADD %t5, %zero; GR32Bit:%vreg23
	%vreg25<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg25
	%vreg26<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg26
	%vreg27<def> = SRLI %vreg26, 12; GR32Bit:%vreg27,%vreg26
	%vreg28<def> = ADD %vreg25, %vreg27; GR32Bit:%vreg28,%vreg25,%vreg27
	%vreg29<def> = ADDI %zero, 12; GR32Bit:%vreg29
	%vreg30<def> = SRLI %t5, 22; GR32Bit:%vreg30
	%vreg31<def> = SRLI %t5, 12; GR32Bit:%vreg31
	%vreg32<def> = ANDI %vreg31, 15; GR32Bit:%vreg32,%vreg31
	%vreg33<def> = SRLI %t5, 6; GR32Bit:%vreg33
	%vreg34<def> = ANDI %vreg33, 63; GR32Bit:%vreg34,%vreg33
	%vreg35<def> = ADDI %zero, 832; GR32Bit:%vreg35
	%vreg36<def> = MUL %vreg30, %vreg35; GR32Bit:%vreg36,%vreg30,%vreg35
	%vreg37<def> = ADDI %zero, 52; GR32Bit:%vreg37
	%vreg38<def> = MUL %vreg32, %vreg37; GR32Bit:%vreg38,%vreg32,%vreg37
	%vreg39<def> = ADD %vreg38, %vreg34; GR32Bit:%vreg39,%vreg38,%vreg34
	%vreg40<def> = ADD %vreg39, %vreg36; GR32Bit:%vreg40,%vreg39,%vreg36
	%vreg41<def> = MUL %vreg40, %vreg29; GR32Bit:%vreg41,%vreg40,%vreg29
	%vreg24<def> = ADD %vreg28, %vreg41; GR32Bit:%vreg24,%vreg28,%vreg41
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg42<def> = ADD %t5, %zero; GR32Bit:%vreg42
	%vreg44<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg44
	%vreg45<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg45
	%vreg46<def> = SRLI %vreg45, 12; GR32Bit:%vreg46,%vreg45
	%vreg47<def> = ADD %vreg44, %vreg46; GR32Bit:%vreg47,%vreg44,%vreg46
	%vreg48<def> = ADDI %zero, 12; GR32Bit:%vreg48
	%vreg49<def> = SRLI %t5, 22; GR32Bit:%vreg49
	%vreg50<def> = SRLI %t5, 12; GR32Bit:%vreg50
	%vreg51<def> = ANDI %vreg50, 15; GR32Bit:%vreg51,%vreg50
	%vreg52<def> = SRLI %t5, 6; GR32Bit:%vreg52
	%vreg53<def> = ANDI %vreg52, 63; GR32Bit:%vreg53,%vreg52
	%vreg54<def> = ADDI %zero, 832; GR32Bit:%vreg54
	%vreg55<def> = MUL %vreg49, %vreg54; GR32Bit:%vreg55,%vreg49,%vreg54
	%vreg56<def> = ADDI %zero, 52; GR32Bit:%vreg56
	%vreg57<def> = MUL %vreg51, %vreg56; GR32Bit:%vreg57,%vreg51,%vreg56
	%vreg58<def> = ADD %vreg57, %vreg53; GR32Bit:%vreg58,%vreg57,%vreg53
	%vreg59<def> = ADD %vreg58, %vreg55; GR32Bit:%vreg59,%vreg58,%vreg55
	%vreg60<def> = MUL %vreg59, %vreg48; GR32Bit:%vreg60,%vreg59,%vreg48
	%vreg43<def> = ADD %vreg47, %vreg60; GR32Bit:%vreg43,%vreg47,%vreg60
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg61<def> = ADD %t5, %zero; GR32Bit:%vreg61
	%vreg63<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg63
	%vreg64<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg64
	%vreg65<def> = SRLI %vreg64, 12; GR32Bit:%vreg65,%vreg64
	%vreg66<def> = ADD %vreg63, %vreg65; GR32Bit:%vreg66,%vreg63,%vreg65
	%vreg67<def> = ADDI %zero, 12; GR32Bit:%vreg67
	%vreg68<def> = SRLI %t5, 22; GR32Bit:%vreg68
	%vreg69<def> = SRLI %t5, 12; GR32Bit:%vreg69
	%vreg70<def> = ANDI %vreg69, 15; GR32Bit:%vreg70,%vreg69
	%vreg71<def> = SRLI %t5, 6; GR32Bit:%vreg71
	%vreg72<def> = ANDI %vreg71, 63; GR32Bit:%vreg72,%vreg71
	%vreg73<def> = ADDI %zero, 832; GR32Bit:%vreg73
	%vreg74<def> = MUL %vreg68, %vreg73; GR32Bit:%vreg74,%vreg68,%vreg73
	%vreg75<def> = ADDI %zero, 52; GR32Bit:%vreg75
	%vreg76<def> = MUL %vreg70, %vreg75; GR32Bit:%vreg76,%vreg70,%vreg75
	%vreg77<def> = ADD %vreg76, %vreg72; GR32Bit:%vreg77,%vreg76,%vreg72
	%vreg78<def> = ADD %vreg77, %vreg74; GR32Bit:%vreg78,%vreg77,%vreg74
	%vreg79<def> = MUL %vreg78, %vreg67; GR32Bit:%vreg79,%vreg78,%vreg67
	%vreg62<def> = ADD %vreg66, %vreg79; GR32Bit:%vreg62,%vreg66,%vreg79
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 316-628 ***

*** Renumbered SlotIndexes 304-648 ***

*** Renumbered SlotIndexes 216-696 ***

*** Renumbered SlotIndexes 204-716 ***

*** Renumbered SlotIndexes 204-732 ***

*** Renumbered SlotIndexes 112-776 ***

*** Renumbered SlotIndexes 100-796 ***

*** Renumbered SlotIndexes 100-812 ***

*** Renumbered SlotIndexes 100-828 ***

*** Renumbered SlotIndexes 100-844 ***

*** Renumbered SlotIndexes 12-892 ***
Creating pHyperOp bundles for CEs for bb0
  %vreg23<def> = ADD %t5, %zero; GR32Bit:%vreg23
starting at   %vreg4<def> = ADD %t5, %zero; GR32Bit:%vreg4
  %vreg42<def> = ADD %t5, %zero; GR32Bit:%vreg42
starting at   %vreg23<def> = ADD %t5, %zero; GR32Bit:%vreg23
  %vreg61<def> = ADD %t5, %zero; GR32Bit:%vreg61
starting at   %vreg42<def> = ADD %t5, %zero; GR32Bit:%vreg42
starting at   %vreg61<def> = ADD %t5, %zero; GR32Bit:%vreg61
After bundling, state of BB0:BB#0: derived from LLVM BB %redefine_start2.newName01
    Live Ins: %ra
	%vreg4<def> = ADD %t5, %zero; GR32Bit:%vreg4
	  * %vreg6<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg6
	  * %vreg7<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg7
	  * %vreg8<def> = SRLI %vreg7, 12; GR32Bit:%vreg8,%vreg7
	  * %vreg9<def> = ADD %vreg6, %vreg8; GR32Bit:%vreg9,%vreg6,%vreg8
	  * %vreg10<def> = ADDI %zero, 12; GR32Bit:%vreg10
	  * %vreg11<def> = SRLI %t5, 22; GR32Bit:%vreg11
	  * %vreg12<def> = SRLI %t5, 12; GR32Bit:%vreg12
	  * %vreg13<def> = ANDI %vreg12, 15; GR32Bit:%vreg13,%vreg12
	  * %vreg14<def> = SRLI %t5, 6; GR32Bit:%vreg14
	  * %vreg15<def> = ANDI %vreg14, 63; GR32Bit:%vreg15,%vreg14
	  * %vreg16<def> = ADDI %zero, 832; GR32Bit:%vreg16
	  * %vreg17<def> = MUL %vreg11, %vreg16; GR32Bit:%vreg17,%vreg11,%vreg16
	  * %vreg18<def> = ADDI %zero, 52; GR32Bit:%vreg18
	  * %vreg19<def> = MUL %vreg13, %vreg18; GR32Bit:%vreg19,%vreg13,%vreg18
	  * %vreg20<def> = ADD %vreg19, %vreg15; GR32Bit:%vreg20,%vreg19,%vreg15
	  * %vreg21<def> = ADD %vreg20, %vreg17; GR32Bit:%vreg21,%vreg20,%vreg17
	  * %vreg22<def> = MUL %vreg21, %vreg10; GR32Bit:%vreg22,%vreg21,%vreg10
	  * %vreg5<def> = ADD %vreg9, %vreg22; GR32Bit:%vreg5,%vreg9,%vreg22
	  * %vreg2<def> = ADDI %zero, <ga:@redefine_out_eicas_discretes>[TF=3]; GR32Bit:%vreg2
	  * %vreg1<def> = LUI <ga:@redefine_out_eicas_discretes>[TF=2]; GR32Bit:%vreg1
	  * %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
	  * %vreg0<def> = COPY %ra; GR32Bit:%vreg0
	  * SW %vreg0, %vreg3, 0; mem:ST4[@redefine_out_eicas_discretes] GR32Bit:%vreg0,%vreg3
	  * FDELETE %t4, 0
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg23<def> = ADD %t5, %zero; GR32Bit:%vreg23
	  * %vreg25<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg25
	  * %vreg26<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg26
	  * %vreg27<def> = SRLI %vreg26, 12; GR32Bit:%vreg27,%vreg26
	  * %vreg28<def> = ADD %vreg25, %vreg27; GR32Bit:%vreg28,%vreg25,%vreg27
	  * %vreg29<def> = ADDI %zero, 12; GR32Bit:%vreg29
	  * %vreg30<def> = SRLI %t5, 22; GR32Bit:%vreg30
	  * %vreg31<def> = SRLI %t5, 12; GR32Bit:%vreg31
	  * %vreg32<def> = ANDI %vreg31, 15; GR32Bit:%vreg32,%vreg31
	  * %vreg33<def> = SRLI %t5, 6; GR32Bit:%vreg33
	  * %vreg34<def> = ANDI %vreg33, 63; GR32Bit:%vreg34,%vreg33
	  * %vreg35<def> = ADDI %zero, 832; GR32Bit:%vreg35
	  * %vreg36<def> = MUL %vreg30, %vreg35; GR32Bit:%vreg36,%vreg30,%vreg35
	  * %vreg37<def> = ADDI %zero, 52; GR32Bit:%vreg37
	  * %vreg38<def> = MUL %vreg32, %vreg37; GR32Bit:%vreg38,%vreg32,%vreg37
	  * %vreg39<def> = ADD %vreg38, %vreg34; GR32Bit:%vreg39,%vreg38,%vreg34
	  * %vreg40<def> = ADD %vreg39, %vreg36; GR32Bit:%vreg40,%vreg39,%vreg36
	  * %vreg41<def> = MUL %vreg40, %vreg29; GR32Bit:%vreg41,%vreg40,%vreg29
	  * %vreg24<def> = ADD %vreg28, %vreg41; GR32Bit:%vreg24,%vreg28,%vreg41
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg42<def> = ADD %t5, %zero; GR32Bit:%vreg42
	  * %vreg44<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg44
	  * %vreg45<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg45
	  * %vreg46<def> = SRLI %vreg45, 12; GR32Bit:%vreg46,%vreg45
	  * %vreg47<def> = ADD %vreg44, %vreg46; GR32Bit:%vreg47,%vreg44,%vreg46
	  * %vreg48<def> = ADDI %zero, 12; GR32Bit:%vreg48
	  * %vreg49<def> = SRLI %t5, 22; GR32Bit:%vreg49
	  * %vreg50<def> = SRLI %t5, 12; GR32Bit:%vreg50
	  * %vreg51<def> = ANDI %vreg50, 15; GR32Bit:%vreg51,%vreg50
	  * %vreg52<def> = SRLI %t5, 6; GR32Bit:%vreg52
	  * %vreg53<def> = ANDI %vreg52, 63; GR32Bit:%vreg53,%vreg52
	  * %vreg54<def> = ADDI %zero, 832; GR32Bit:%vreg54
	  * %vreg55<def> = MUL %vreg49, %vreg54; GR32Bit:%vreg55,%vreg49,%vreg54
	  * %vreg56<def> = ADDI %zero, 52; GR32Bit:%vreg56
	  * %vreg57<def> = MUL %vreg51, %vreg56; GR32Bit:%vreg57,%vreg51,%vreg56
	  * %vreg58<def> = ADD %vreg57, %vreg53; GR32Bit:%vreg58,%vreg57,%vreg53
	  * %vreg59<def> = ADD %vreg58, %vreg55; GR32Bit:%vreg59,%vreg58,%vreg55
	  * %vreg60<def> = MUL %vreg59, %vreg48; GR32Bit:%vreg60,%vreg59,%vreg48
	  * %vreg43<def> = ADD %vreg47, %vreg60; GR32Bit:%vreg43,%vreg47,%vreg60
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg61<def> = ADD %t5, %zero; GR32Bit:%vreg61
	  * %vreg63<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg63
	  * %vreg64<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg64
	  * %vreg65<def> = SRLI %vreg64, 12; GR32Bit:%vreg65,%vreg64
	  * %vreg66<def> = ADD %vreg63, %vreg65; GR32Bit:%vreg66,%vreg63,%vreg65
	  * %vreg67<def> = ADDI %zero, 12; GR32Bit:%vreg67
	  * %vreg68<def> = SRLI %t5, 22; GR32Bit:%vreg68
	  * %vreg69<def> = SRLI %t5, 12; GR32Bit:%vreg69
	  * %vreg70<def> = ANDI %vreg69, 15; GR32Bit:%vreg70,%vreg69
	  * %vreg71<def> = SRLI %t5, 6; GR32Bit:%vreg71
	  * %vreg72<def> = ANDI %vreg71, 63; GR32Bit:%vreg72,%vreg71
	  * %vreg73<def> = ADDI %zero, 832; GR32Bit:%vreg73
	  * %vreg74<def> = MUL %vreg68, %vreg73; GR32Bit:%vreg74,%vreg68,%vreg73
	  * %vreg75<def> = ADDI %zero, 52; GR32Bit:%vreg75
	  * %vreg76<def> = MUL %vreg70, %vreg75; GR32Bit:%vreg76,%vreg70,%vreg75
	  * %vreg77<def> = ADD %vreg76, %vreg72; GR32Bit:%vreg77,%vreg76,%vreg72
	  * %vreg78<def> = ADD %vreg77, %vreg74; GR32Bit:%vreg78,%vreg77,%vreg74
	  * %vreg79<def> = MUL %vreg78, %vreg67; GR32Bit:%vreg79,%vreg78,%vreg67
	  * %vreg62<def> = ADD %vreg66, %vreg79; GR32Bit:%vreg62,%vreg66,%vreg79
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
%physreg43,Patching the instructions that are supposed to use the physical registers r30 and r31
Computing live-in reg-units in ABI blocks.
0B	BB#0 ra#0
Created 0 new intervals.

*** Renumbered SlotIndexes 8-912 ***
********** INTERVALS **********
ra = [0B,872r:0)  0@0B-phi
zero = EMPTY
%vreg0 = [192r,200r:0)  0@192r
%vreg1 = [176r,184r:0)  0@176r
%vreg2 = [168r,184r:0)  0@168r
%vreg3 = [184r,200r:0)  0@184r
%vreg4 = [4r,4d:0)  0@4r
%vreg5 = [160r,160d:0)  0@160r
%vreg6 = [24r,48r:0)  0@24r
%vreg7 = [32r,40r:0)  0@32r
%vreg8 = [40r,48r:0)  0@40r
%vreg9 = [48r,160r:0)  0@48r
%vreg10 = [56r,152r:0)  0@56r
%vreg11 = [64r,112r:0)  0@64r
%vreg12 = [72r,80r:0)  0@72r
%vreg13 = [80r,128r:0)  0@80r
%vreg14 = [88r,96r:0)  0@88r
%vreg15 = [96r,136r:0)  0@96r
%vreg16 = [104r,112r:0)  0@104r
%vreg17 = [112r,144r:0)  0@112r
%vreg18 = [120r,128r:0)  0@120r
%vreg19 = [128r,136r:0)  0@128r
%vreg20 = [136r,144r:0)  0@136r
%vreg21 = [144r,152r:0)  0@144r
%vreg22 = [152r,160r:0)  0@152r
%vreg23 = [240r,240d:0)  0@240r
%vreg24 = [384r,384d:0)  0@384r
%vreg25 = [248r,272r:0)  0@248r
%vreg26 = [256r,264r:0)  0@256r
%vreg27 = [264r,272r:0)  0@264r
%vreg28 = [272r,384r:0)  0@272r
%vreg29 = [280r,376r:0)  0@280r
%vreg30 = [288r,336r:0)  0@288r
%vreg31 = [296r,304r:0)  0@296r
%vreg32 = [304r,352r:0)  0@304r
%vreg33 = [312r,320r:0)  0@312r
%vreg34 = [320r,360r:0)  0@320r
%vreg35 = [328r,336r:0)  0@328r
%vreg36 = [336r,368r:0)  0@336r
%vreg37 = [344r,352r:0)  0@344r
%vreg38 = [352r,360r:0)  0@352r
%vreg39 = [360r,368r:0)  0@360r
%vreg40 = [368r,376r:0)  0@368r
%vreg41 = [376r,384r:0)  0@376r
%vreg42 = [416r,416d:0)  0@416r
%vreg43 = [560r,560d:0)  0@560r
%vreg44 = [424r,448r:0)  0@424r
%vreg45 = [432r,440r:0)  0@432r
%vreg46 = [440r,448r:0)  0@440r
%vreg47 = [448r,560r:0)  0@448r
%vreg48 = [456r,552r:0)  0@456r
%vreg49 = [464r,512r:0)  0@464r
%vreg50 = [472r,480r:0)  0@472r
%vreg51 = [480r,528r:0)  0@480r
%vreg52 = [488r,496r:0)  0@488r
%vreg53 = [496r,536r:0)  0@496r
%vreg54 = [504r,512r:0)  0@504r
%vreg55 = [512r,544r:0)  0@512r
%vreg56 = [520r,528r:0)  0@520r
%vreg57 = [528r,536r:0)  0@528r
%vreg58 = [536r,544r:0)  0@536r
%vreg59 = [544r,552r:0)  0@544r
%vreg60 = [552r,560r:0)  0@552r
%vreg61 = [592r,592d:0)  0@592r
%vreg62 = [736r,736d:0)  0@736r
%vreg63 = [600r,624r:0)  0@600r
%vreg64 = [608r,616r:0)  0@608r
%vreg65 = [616r,624r:0)  0@616r
%vreg66 = [624r,736r:0)  0@624r
%vreg67 = [632r,728r:0)  0@632r
%vreg68 = [640r,688r:0)  0@640r
%vreg69 = [648r,656r:0)  0@648r
%vreg70 = [656r,704r:0)  0@656r
%vreg71 = [664r,672r:0)  0@664r
%vreg72 = [672r,712r:0)  0@672r
%vreg73 = [680r,688r:0)  0@680r
%vreg74 = [688r,720r:0)  0@688r
%vreg75 = [696r,704r:0)  0@696r
%vreg76 = [704r,712r:0)  0@704r
%vreg77 = [712r,720r:0)  0@712r
%vreg78 = [720r,728r:0)  0@720r
%vreg79 = [728r,736r:0)  0@728r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start2: Post SSA
Function Live Ins: %ra in %vreg0

0B	BB#0: derived from LLVM BB %redefine_start2.newName01
	    Live Ins: %ra
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg6<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg6
4B		  * %vreg7<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg7
4B		  * %vreg8<def> = SRLI %vreg7, 12; GR32Bit:%vreg8,%vreg7
4B		  * %vreg9<def> = ADD %vreg6, %vreg8; GR32Bit:%vreg9,%vreg6,%vreg8
4B		  * %vreg10<def> = ADDI %zero, 12; GR32Bit:%vreg10
4B		  * %vreg11<def> = SRLI %t5, 22; GR32Bit:%vreg11
4B		  * %vreg12<def> = SRLI %t5, 12; GR32Bit:%vreg12
4B		  * %vreg13<def> = ANDI %vreg12, 15; GR32Bit:%vreg13,%vreg12
4B		  * %vreg14<def> = SRLI %t5, 6; GR32Bit:%vreg14
4B		  * %vreg15<def> = ANDI %vreg14, 63; GR32Bit:%vreg15,%vreg14
4B		  * %vreg16<def> = ADDI %zero, 832; GR32Bit:%vreg16
4B		  * %vreg17<def> = MUL %vreg11, %vreg16; GR32Bit:%vreg17,%vreg11,%vreg16
4B		  * %vreg18<def> = ADDI %zero, 52; GR32Bit:%vreg18
4B		  * %vreg19<def> = MUL %vreg13, %vreg18; GR32Bit:%vreg19,%vreg13,%vreg18
4B		  * %vreg20<def> = ADD %vreg19, %vreg15; GR32Bit:%vreg20,%vreg19,%vreg15
4B		  * %vreg21<def> = ADD %vreg20, %vreg17; GR32Bit:%vreg21,%vreg20,%vreg17
4B		  * %vreg22<def> = MUL %vreg21, %vreg10; GR32Bit:%vreg22,%vreg21,%vreg10
4B		  * %t5<def> = ADD %vreg9, %vreg22; GR32Bit:%vreg9,%vreg22
4B		  * %vreg2<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg2
4B		  * SRLI %vreg2, %vreg2, 12; GR32Bit:%vreg2
4B		  * %vreg1<def> = LUI <ga:@redefine_out_eicas_discretes>[TF=2]; GR32Bit:%vreg1
4B		  * %vreg3<def> = ADD %vreg2, %vreg1; GR32Bit:%vreg3,%vreg2,%vreg1
4B		  * %vreg0<def> = COPY %ra; GR32Bit:%vreg0
4B		  * SW %vreg0, %vreg3, 0; mem:ST4[@redefine_out_eicas_discretes] GR32Bit:%vreg0,%vreg3
4B		  * FDELETE %t4, 0
4B		  * END 0
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
240B		%t4<def> = ADD %t5, %zero
240B		  * %vreg25<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg25
240B		  * %vreg26<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg26
240B		  * %vreg27<def> = SRLI %vreg26, 12; GR32Bit:%vreg27,%vreg26
240B		  * %vreg28<def> = ADD %vreg25, %vreg27; GR32Bit:%vreg28,%vreg25,%vreg27
240B		  * %vreg29<def> = ADDI %zero, 12; GR32Bit:%vreg29
240B		  * %vreg30<def> = SRLI %t5, 22; GR32Bit:%vreg30
240B		  * %vreg31<def> = SRLI %t5, 12; GR32Bit:%vreg31
240B		  * %vreg32<def> = ANDI %vreg31, 15; GR32Bit:%vreg32,%vreg31
240B		  * %vreg33<def> = SRLI %t5, 6; GR32Bit:%vreg33
240B		  * %vreg34<def> = ANDI %vreg33, 63; GR32Bit:%vreg34,%vreg33
240B		  * %vreg35<def> = ADDI %zero, 832; GR32Bit:%vreg35
240B		  * %vreg36<def> = MUL %vreg30, %vreg35; GR32Bit:%vreg36,%vreg30,%vreg35
240B		  * %vreg37<def> = ADDI %zero, 52; GR32Bit:%vreg37
240B		  * %vreg38<def> = MUL %vreg32, %vreg37; GR32Bit:%vreg38,%vreg32,%vreg37
240B		  * %vreg39<def> = ADD %vreg38, %vreg34; GR32Bit:%vreg39,%vreg38,%vreg34
240B		  * %vreg40<def> = ADD %vreg39, %vreg36; GR32Bit:%vreg40,%vreg39,%vreg36
240B		  * %vreg41<def> = MUL %vreg40, %vreg29; GR32Bit:%vreg41,%vreg40,%vreg29
240B		  * %t5<def> = ADD %vreg28, %vreg41; GR32Bit:%vreg28,%vreg41
240B		  * END 0
240B		  * %zero<def> = ADDI %zero, 0
240B		  * %zero<def> = ADDI %zero, 0
416B		%t4<def> = ADD %t5, %zero
416B		  * %vreg44<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg44
416B		  * %vreg45<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg45
416B		  * %vreg46<def> = SRLI %vreg45, 12; GR32Bit:%vreg46,%vreg45
416B		  * %vreg47<def> = ADD %vreg44, %vreg46; GR32Bit:%vreg47,%vreg44,%vreg46
416B		  * %vreg48<def> = ADDI %zero, 12; GR32Bit:%vreg48
416B		  * %vreg49<def> = SRLI %t5, 22; GR32Bit:%vreg49
416B		  * %vreg50<def> = SRLI %t5, 12; GR32Bit:%vreg50
416B		  * %vreg51<def> = ANDI %vreg50, 15; GR32Bit:%vreg51,%vreg50
416B		  * %vreg52<def> = SRLI %t5, 6; GR32Bit:%vreg52
416B		  * %vreg53<def> = ANDI %vreg52, 63; GR32Bit:%vreg53,%vreg52
416B		  * %vreg54<def> = ADDI %zero, 832; GR32Bit:%vreg54
416B		  * %vreg55<def> = MUL %vreg49, %vreg54; GR32Bit:%vreg55,%vreg49,%vreg54
416B		  * %vreg56<def> = ADDI %zero, 52; GR32Bit:%vreg56
416B		  * %vreg57<def> = MUL %vreg51, %vreg56; GR32Bit:%vreg57,%vreg51,%vreg56
416B		  * %vreg58<def> = ADD %vreg57, %vreg53; GR32Bit:%vreg58,%vreg57,%vreg53
416B		  * %vreg59<def> = ADD %vreg58, %vreg55; GR32Bit:%vreg59,%vreg58,%vreg55
416B		  * %vreg60<def> = MUL %vreg59, %vreg48; GR32Bit:%vreg60,%vreg59,%vreg48
416B		  * %t5<def> = ADD %vreg47, %vreg60; GR32Bit:%vreg47,%vreg60
416B		  * END 0
416B		  * %zero<def> = ADDI %zero, 0
416B		  * %zero<def> = ADDI %zero, 0
592B		%t4<def> = ADD %t5, %zero
592B		  * %vreg63<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg63
592B		  * %vreg64<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg64
592B		  * %vreg65<def> = SRLI %vreg64, 12; GR32Bit:%vreg65,%vreg64
592B		  * %vreg66<def> = ADD %vreg63, %vreg65; GR32Bit:%vreg66,%vreg63,%vreg65
592B		  * %vreg67<def> = ADDI %zero, 12; GR32Bit:%vreg67
592B		  * %vreg68<def> = SRLI %t5, 22; GR32Bit:%vreg68
592B		  * %vreg69<def> = SRLI %t5, 12; GR32Bit:%vreg69
592B		  * %vreg70<def> = ANDI %vreg69, 15; GR32Bit:%vreg70,%vreg69
592B		  * %vreg71<def> = SRLI %t5, 6; GR32Bit:%vreg71
592B		  * %vreg72<def> = ANDI %vreg71, 63; GR32Bit:%vreg72,%vreg71
592B		  * %vreg73<def> = ADDI %zero, 832; GR32Bit:%vreg73
592B		  * %vreg74<def> = MUL %vreg68, %vreg73; GR32Bit:%vreg74,%vreg68,%vreg73
592B		  * %vreg75<def> = ADDI %zero, 52; GR32Bit:%vreg75
592B		  * %vreg76<def> = MUL %vreg70, %vreg75; GR32Bit:%vreg76,%vreg70,%vreg75
592B		  * %vreg77<def> = ADD %vreg76, %vreg72; GR32Bit:%vreg77,%vreg76,%vreg72
592B		  * %vreg78<def> = ADD %vreg77, %vreg74; GR32Bit:%vreg78,%vreg77,%vreg74
592B		  * %vreg79<def> = MUL %vreg78, %vreg67; GR32Bit:%vreg79,%vreg78,%vreg67
592B		  * %t5<def> = ADD %vreg66, %vreg79; GR32Bit:%vreg66,%vreg79
592B		  * END 0
592B		  * %zero<def> = ADDI %zero, 0
592B		  * %zero<def> = ADDI %zero, 0

# End machine code for function redefine_start2.

********** COMPUTING LIVE DEBUG VARIABLES: redefine_start2 **********
********** DEBUG VARIABLES **********
********** Compute Spill Weights **********
********** Function: redefine_start2
********** GREEDY REGISTER ALLOCATION **********
********** Function: redefine_start2
Replacing 43 with 43 for instruction%vreg0<def> = COPY %ra; GR32Bit:%vreg0

selectOrSplit GR32Bit:%vreg0 [192r,200r:0)  0@192r
hints: %ra
reg 2147483648 that was live-in gets phys reg:43 instead of phys reg:43
assigning %vreg0 to %ra: ra

selectOrSplit GR32Bit:%vreg9 [48r,160r:0)  0@48r
assigning %vreg9 to %t0: t0

selectOrSplit GR32Bit:%vreg28 [272r,384r:0)  0@272r
assigning %vreg28 to %t0: t0

selectOrSplit GR32Bit:%vreg47 [448r,560r:0)  0@448r
assigning %vreg47 to %t0: t0

selectOrSplit GR32Bit:%vreg66 [624r,736r:0)  0@624r
assigning %vreg66 to %t0: t0

selectOrSplit GR32Bit:%vreg10 [56r,152r:0)  0@56r
assigning %vreg10 to %t1: t1

selectOrSplit GR32Bit:%vreg29 [280r,376r:0)  0@280r
assigning %vreg29 to %t1: t1

selectOrSplit GR32Bit:%vreg48 [456r,552r:0)  0@456r
assigning %vreg48 to %t1: t1

selectOrSplit GR32Bit:%vreg67 [632r,728r:0)  0@632r
assigning %vreg67 to %t1: t1

selectOrSplit GR32Bit:%vreg11 [64r,112r:0)  0@64r
assigning %vreg11 to %t2: t2

selectOrSplit GR32Bit:%vreg13 [80r,128r:0)  0@80r
assigning %vreg13 to %fp: fp

selectOrSplit GR32Bit:%vreg30 [288r,336r:0)  0@288r
assigning %vreg30 to %t2: t2

selectOrSplit GR32Bit:%vreg32 [304r,352r:0)  0@304r
assigning %vreg32 to %fp: fp

selectOrSplit GR32Bit:%vreg49 [464r,512r:0)  0@464r
assigning %vreg49 to %t2: t2

selectOrSplit GR32Bit:%vreg51 [480r,528r:0)  0@480r
assigning %vreg51 to %fp: fp

selectOrSplit GR32Bit:%vreg68 [640r,688r:0)  0@640r
assigning %vreg68 to %t2: t2

selectOrSplit GR32Bit:%vreg70 [656r,704r:0)  0@656r
assigning %vreg70 to %fp: fp

selectOrSplit GR32Bit:%vreg15 [96r,136r:0)  0@96r
assigning %vreg15 to %a0: a0

selectOrSplit GR32Bit:%vreg34 [320r,360r:0)  0@320r
assigning %vreg34 to %a0: a0

selectOrSplit GR32Bit:%vreg53 [496r,536r:0)  0@496r
assigning %vreg53 to %a0: a0

selectOrSplit GR32Bit:%vreg72 [672r,712r:0)  0@672r
assigning %vreg72 to %a0: a0

selectOrSplit GR32Bit:%vreg17 [112r,144r:0)  0@112r
assigning %vreg17 to %t2: t2

selectOrSplit GR32Bit:%vreg36 [336r,368r:0)  0@336r
assigning %vreg36 to %t2: t2

selectOrSplit GR32Bit:%vreg55 [512r,544r:0)  0@512r
assigning %vreg55 to %t2: t2

selectOrSplit GR32Bit:%vreg74 [688r,720r:0)  0@688r
assigning %vreg74 to %t2: t2

selectOrSplit GR32Bit:%vreg6 [24r,48r:0)  0@24r
assigning %vreg6 to %t0: t0

selectOrSplit GR32Bit:%vreg25 [248r,272r:0)  0@248r
assigning %vreg25 to %t0: t0

selectOrSplit GR32Bit:%vreg44 [424r,448r:0)  0@424r
assigning %vreg44 to %t0: t0

selectOrSplit GR32Bit:%vreg63 [600r,624r:0)  0@600r
assigning %vreg63 to %t0: t0

selectOrSplit GR32Bit:%vreg2 [168r,184r:0)  0@168r
assigning %vreg2 to %t0: t0

selectOrSplit GR32Bit:%vreg3 [184r,200r:0)  0@184r
assigning %vreg3 to %t0: t0

selectOrSplit GR32Bit:%vreg1 [176r,184r:0)  0@176r
assigning %vreg1 to %t1: t1

selectOrSplit GR32Bit:%vreg7 [32r,40r:0)  0@32r
assigning %vreg7 to %t1: t1

selectOrSplit GR32Bit:%vreg8 [40r,48r:0)  0@40r
assigning %vreg8 to %t1: t1

selectOrSplit GR32Bit:%vreg12 [72r,80r:0)  0@72r
assigning %vreg12 to %fp: fp

selectOrSplit GR32Bit:%vreg14 [88r,96r:0)  0@88r
assigning %vreg14 to %a0: a0

selectOrSplit GR32Bit:%vreg16 [104r,112r:0)  0@104r
assigning %vreg16 to %a1: a1

selectOrSplit GR32Bit:%vreg18 [120r,128r:0)  0@120r
assigning %vreg18 to %a1: a1

selectOrSplit GR32Bit:%vreg19 [128r,136r:0)  0@128r
assigning %vreg19 to %fp: fp

selectOrSplit GR32Bit:%vreg20 [136r,144r:0)  0@136r
assigning %vreg20 to %fp: fp

selectOrSplit GR32Bit:%vreg21 [144r,152r:0)  0@144r
assigning %vreg21 to %t2: t2

selectOrSplit GR32Bit:%vreg22 [152r,160r:0)  0@152r
assigning %vreg22 to %t1: t1

selectOrSplit GR32Bit:%vreg26 [256r,264r:0)  0@256r
assigning %vreg26 to %t1: t1

selectOrSplit GR32Bit:%vreg27 [264r,272r:0)  0@264r
assigning %vreg27 to %t1: t1

selectOrSplit GR32Bit:%vreg31 [296r,304r:0)  0@296r
assigning %vreg31 to %fp: fp

selectOrSplit GR32Bit:%vreg33 [312r,320r:0)  0@312r
assigning %vreg33 to %a0: a0

selectOrSplit GR32Bit:%vreg35 [328r,336r:0)  0@328r
assigning %vreg35 to %a1: a1

selectOrSplit GR32Bit:%vreg37 [344r,352r:0)  0@344r
assigning %vreg37 to %a1: a1

selectOrSplit GR32Bit:%vreg38 [352r,360r:0)  0@352r
assigning %vreg38 to %fp: fp

selectOrSplit GR32Bit:%vreg39 [360r,368r:0)  0@360r
assigning %vreg39 to %fp: fp

selectOrSplit GR32Bit:%vreg40 [368r,376r:0)  0@368r
assigning %vreg40 to %t2: t2

selectOrSplit GR32Bit:%vreg41 [376r,384r:0)  0@376r
assigning %vreg41 to %t1: t1

selectOrSplit GR32Bit:%vreg45 [432r,440r:0)  0@432r
assigning %vreg45 to %t1: t1

selectOrSplit GR32Bit:%vreg46 [440r,448r:0)  0@440r
assigning %vreg46 to %t1: t1

selectOrSplit GR32Bit:%vreg50 [472r,480r:0)  0@472r
assigning %vreg50 to %fp: fp

selectOrSplit GR32Bit:%vreg52 [488r,496r:0)  0@488r
assigning %vreg52 to %a0: a0

selectOrSplit GR32Bit:%vreg54 [504r,512r:0)  0@504r
assigning %vreg54 to %a1: a1

selectOrSplit GR32Bit:%vreg56 [520r,528r:0)  0@520r
assigning %vreg56 to %a1: a1

selectOrSplit GR32Bit:%vreg57 [528r,536r:0)  0@528r
assigning %vreg57 to %fp: fp

selectOrSplit GR32Bit:%vreg58 [536r,544r:0)  0@536r
assigning %vreg58 to %fp: fp

selectOrSplit GR32Bit:%vreg59 [544r,552r:0)  0@544r
assigning %vreg59 to %t2: t2

selectOrSplit GR32Bit:%vreg60 [552r,560r:0)  0@552r
assigning %vreg60 to %t1: t1

selectOrSplit GR32Bit:%vreg64 [608r,616r:0)  0@608r
assigning %vreg64 to %t1: t1

selectOrSplit GR32Bit:%vreg65 [616r,624r:0)  0@616r
assigning %vreg65 to %t1: t1

selectOrSplit GR32Bit:%vreg69 [648r,656r:0)  0@648r
assigning %vreg69 to %fp: fp

selectOrSplit GR32Bit:%vreg71 [664r,672r:0)  0@664r
assigning %vreg71 to %a0: a0

selectOrSplit GR32Bit:%vreg73 [680r,688r:0)  0@680r
assigning %vreg73 to %a1: a1

selectOrSplit GR32Bit:%vreg75 [696r,704r:0)  0@696r
assigning %vreg75 to %a1: a1

selectOrSplit GR32Bit:%vreg76 [704r,712r:0)  0@704r
assigning %vreg76 to %fp: fp

selectOrSplit GR32Bit:%vreg77 [712r,720r:0)  0@712r
assigning %vreg77 to %fp: fp

selectOrSplit GR32Bit:%vreg78 [720r,728r:0)  0@720r
assigning %vreg78 to %t2: t2

selectOrSplit GR32Bit:%vreg79 [728r,736r:0)  0@728r
assigning %vreg79 to %t1: t1
********** REWRITE VIRTUAL REGISTERS **********
********** Function: redefine_start2
********** REGISTER MAP **********
[%vreg0 -> %ra] GR32Bit
[%vreg1 -> %t1] GR32Bit
[%vreg2 -> %t0] GR32Bit
[%vreg3 -> %t0] GR32Bit
[%vreg6 -> %t0] GR32Bit
[%vreg7 -> %t1] GR32Bit
[%vreg8 -> %t1] GR32Bit
[%vreg9 -> %t0] GR32Bit
[%vreg10 -> %t1] GR32Bit
[%vreg11 -> %t2] GR32Bit
[%vreg12 -> %fp] GR32Bit
[%vreg13 -> %fp] GR32Bit
[%vreg14 -> %a0] GR32Bit
[%vreg15 -> %a0] GR32Bit
[%vreg16 -> %a1] GR32Bit
[%vreg17 -> %t2] GR32Bit
[%vreg18 -> %a1] GR32Bit
[%vreg19 -> %fp] GR32Bit
[%vreg20 -> %fp] GR32Bit
[%vreg21 -> %t2] GR32Bit
[%vreg22 -> %t1] GR32Bit
[%vreg25 -> %t0] GR32Bit
[%vreg26 -> %t1] GR32Bit
[%vreg27 -> %t1] GR32Bit
[%vreg28 -> %t0] GR32Bit
[%vreg29 -> %t1] GR32Bit
[%vreg30 -> %t2] GR32Bit
[%vreg31 -> %fp] GR32Bit
[%vreg32 -> %fp] GR32Bit
[%vreg33 -> %a0] GR32Bit
[%vreg34 -> %a0] GR32Bit
[%vreg35 -> %a1] GR32Bit
[%vreg36 -> %t2] GR32Bit
[%vreg37 -> %a1] GR32Bit
[%vreg38 -> %fp] GR32Bit
[%vreg39 -> %fp] GR32Bit
[%vreg40 -> %t2] GR32Bit
[%vreg41 -> %t1] GR32Bit
[%vreg44 -> %t0] GR32Bit
[%vreg45 -> %t1] GR32Bit
[%vreg46 -> %t1] GR32Bit
[%vreg47 -> %t0] GR32Bit
[%vreg48 -> %t1] GR32Bit
[%vreg49 -> %t2] GR32Bit
[%vreg50 -> %fp] GR32Bit
[%vreg51 -> %fp] GR32Bit
[%vreg52 -> %a0] GR32Bit
[%vreg53 -> %a0] GR32Bit
[%vreg54 -> %a1] GR32Bit
[%vreg55 -> %t2] GR32Bit
[%vreg56 -> %a1] GR32Bit
[%vreg57 -> %fp] GR32Bit
[%vreg58 -> %fp] GR32Bit
[%vreg59 -> %t2] GR32Bit
[%vreg60 -> %t1] GR32Bit
[%vreg63 -> %t0] GR32Bit
[%vreg64 -> %t1] GR32Bit
[%vreg65 -> %t1] GR32Bit
[%vreg66 -> %t0] GR32Bit
[%vreg67 -> %t1] GR32Bit
[%vreg68 -> %t2] GR32Bit
[%vreg69 -> %fp] GR32Bit
[%vreg70 -> %fp] GR32Bit
[%vreg71 -> %a0] GR32Bit
[%vreg72 -> %a0] GR32Bit
[%vreg73 -> %a1] GR32Bit
[%vreg74 -> %t2] GR32Bit
[%vreg75 -> %a1] GR32Bit
[%vreg76 -> %fp] GR32Bit
[%vreg77 -> %fp] GR32Bit
[%vreg78 -> %t2] GR32Bit
[%vreg79 -> %t1] GR32Bit

0B	BB#0: derived from LLVM BB %redefine_start2.newName01
	    Live Ins: %ra
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg6<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg6
4B		  * %vreg7<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg7
4B		  * %vreg8<def> = SRLI %vreg7<kill>, 12; GR32Bit:%vreg8,%vreg7
4B		  * %vreg9<def> = ADD %vreg6<kill>, %vreg8<kill>; GR32Bit:%vreg9,%vreg6,%vreg8
4B		  * %vreg10<def> = ADDI %zero, 12; GR32Bit:%vreg10
4B		  * %vreg11<def> = SRLI %t5, 22; GR32Bit:%vreg11
4B		  * %vreg12<def> = SRLI %t5, 12; GR32Bit:%vreg12
4B		  * %vreg13<def> = ANDI %vreg12<kill>, 15; GR32Bit:%vreg13,%vreg12
4B		  * %vreg14<def> = SRLI %t5, 6; GR32Bit:%vreg14
4B		  * %vreg15<def> = ANDI %vreg14<kill>, 63; GR32Bit:%vreg15,%vreg14
4B		  * %vreg16<def> = ADDI %zero, 832; GR32Bit:%vreg16
4B		  * %vreg17<def> = MUL %vreg11<kill>, %vreg16<kill>; GR32Bit:%vreg17,%vreg11,%vreg16
4B		  * %vreg18<def> = ADDI %zero, 52; GR32Bit:%vreg18
4B		  * %vreg19<def> = MUL %vreg13<kill>, %vreg18<kill>; GR32Bit:%vreg19,%vreg13,%vreg18
4B		  * %vreg20<def> = ADD %vreg19<kill>, %vreg15<kill>; GR32Bit:%vreg20,%vreg19,%vreg15
4B		  * %vreg21<def> = ADD %vreg20<kill>, %vreg17<kill>; GR32Bit:%vreg21,%vreg20,%vreg17
4B		  * %vreg22<def> = MUL %vreg21<kill>, %vreg10<kill>; GR32Bit:%vreg22,%vreg21,%vreg10
4B		  * %t5<def> = ADD %vreg9<kill>, %vreg22<kill>; GR32Bit:%vreg9,%vreg22
4B		  * %vreg2<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg2
4B		  * SRLI %vreg2, %vreg2, 12; GR32Bit:%vreg2
4B		  * %vreg1<def> = LUI <ga:@redefine_out_eicas_discretes>[TF=2]; GR32Bit:%vreg1
4B		  * %vreg3<def> = ADD %vreg2<kill>, %vreg1<kill>; GR32Bit:%vreg3,%vreg2,%vreg1
4B		  * %vreg0<def> = COPY %ra; GR32Bit:%vreg0
4B		  * SW %vreg0, %vreg3<kill>, 0; mem:ST4[@redefine_out_eicas_discretes] GR32Bit:%vreg0,%vreg3
4B		  * FDELETE %t4, 0
4B		  * END 0
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
240B		%t4<def> = ADD %t5, %zero
240B		  * %vreg25<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg25
240B		  * %vreg26<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg26
240B		  * %vreg27<def> = SRLI %vreg26<kill>, 12; GR32Bit:%vreg27,%vreg26
240B		  * %vreg28<def> = ADD %vreg25<kill>, %vreg27<kill>; GR32Bit:%vreg28,%vreg25,%vreg27
240B		  * %vreg29<def> = ADDI %zero, 12; GR32Bit:%vreg29
240B		  * %vreg30<def> = SRLI %t5, 22; GR32Bit:%vreg30
240B		  * %vreg31<def> = SRLI %t5, 12; GR32Bit:%vreg31
240B		  * %vreg32<def> = ANDI %vreg31<kill>, 15; GR32Bit:%vreg32,%vreg31
240B		  * %vreg33<def> = SRLI %t5, 6; GR32Bit:%vreg33
240B		  * %vreg34<def> = ANDI %vreg33<kill>, 63; GR32Bit:%vreg34,%vreg33
240B		  * %vreg35<def> = ADDI %zero, 832; GR32Bit:%vreg35
240B		  * %vreg36<def> = MUL %vreg30<kill>, %vreg35<kill>; GR32Bit:%vreg36,%vreg30,%vreg35
240B		  * %vreg37<def> = ADDI %zero, 52; GR32Bit:%vreg37
240B		  * %vreg38<def> = MUL %vreg32<kill>, %vreg37<kill>; GR32Bit:%vreg38,%vreg32,%vreg37
240B		  * %vreg39<def> = ADD %vreg38<kill>, %vreg34<kill>; GR32Bit:%vreg39,%vreg38,%vreg34
240B		  * %vreg40<def> = ADD %vreg39<kill>, %vreg36<kill>; GR32Bit:%vreg40,%vreg39,%vreg36
240B		  * %vreg41<def> = MUL %vreg40<kill>, %vreg29<kill>; GR32Bit:%vreg41,%vreg40,%vreg29
240B		  * %t5<def> = ADD %vreg28<kill>, %vreg41<kill>; GR32Bit:%vreg28,%vreg41
240B		  * END 0
240B		  * %zero<def> = ADDI %zero, 0
240B		  * %zero<def> = ADDI %zero, 0
416B		%t4<def> = ADD %t5, %zero
416B		  * %vreg44<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg44
416B		  * %vreg45<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg45
416B		  * %vreg46<def> = SRLI %vreg45<kill>, 12; GR32Bit:%vreg46,%vreg45
416B		  * %vreg47<def> = ADD %vreg44<kill>, %vreg46<kill>; GR32Bit:%vreg47,%vreg44,%vreg46
416B		  * %vreg48<def> = ADDI %zero, 12; GR32Bit:%vreg48
416B		  * %vreg49<def> = SRLI %t5, 22; GR32Bit:%vreg49
416B		  * %vreg50<def> = SRLI %t5, 12; GR32Bit:%vreg50
416B		  * %vreg51<def> = ANDI %vreg50<kill>, 15; GR32Bit:%vreg51,%vreg50
416B		  * %vreg52<def> = SRLI %t5, 6; GR32Bit:%vreg52
416B		  * %vreg53<def> = ANDI %vreg52<kill>, 63; GR32Bit:%vreg53,%vreg52
416B		  * %vreg54<def> = ADDI %zero, 832; GR32Bit:%vreg54
416B		  * %vreg55<def> = MUL %vreg49<kill>, %vreg54<kill>; GR32Bit:%vreg55,%vreg49,%vreg54
416B		  * %vreg56<def> = ADDI %zero, 52; GR32Bit:%vreg56
416B		  * %vreg57<def> = MUL %vreg51<kill>, %vreg56<kill>; GR32Bit:%vreg57,%vreg51,%vreg56
416B		  * %vreg58<def> = ADD %vreg57<kill>, %vreg53<kill>; GR32Bit:%vreg58,%vreg57,%vreg53
416B		  * %vreg59<def> = ADD %vreg58<kill>, %vreg55<kill>; GR32Bit:%vreg59,%vreg58,%vreg55
416B		  * %vreg60<def> = MUL %vreg59<kill>, %vreg48<kill>; GR32Bit:%vreg60,%vreg59,%vreg48
416B		  * %t5<def> = ADD %vreg47<kill>, %vreg60<kill>; GR32Bit:%vreg47,%vreg60
416B		  * END 0
416B		  * %zero<def> = ADDI %zero, 0
416B		  * %zero<def> = ADDI %zero, 0
592B		%t4<def> = ADD %t5, %zero
592B		  * %vreg63<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg63
592B		  * %vreg64<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg64
592B		  * %vreg65<def> = SRLI %vreg64<kill>, 12; GR32Bit:%vreg65,%vreg64
592B		  * %vreg66<def> = ADD %vreg63<kill>, %vreg65<kill>; GR32Bit:%vreg66,%vreg63,%vreg65
592B		  * %vreg67<def> = ADDI %zero, 12; GR32Bit:%vreg67
592B		  * %vreg68<def> = SRLI %t5, 22; GR32Bit:%vreg68
592B		  * %vreg69<def> = SRLI %t5, 12; GR32Bit:%vreg69
592B		  * %vreg70<def> = ANDI %vreg69<kill>, 15; GR32Bit:%vreg70,%vreg69
592B		  * %vreg71<def> = SRLI %t5, 6; GR32Bit:%vreg71
592B		  * %vreg72<def> = ANDI %vreg71<kill>, 63; GR32Bit:%vreg72,%vreg71
592B		  * %vreg73<def> = ADDI %zero, 832; GR32Bit:%vreg73
592B		  * %vreg74<def> = MUL %vreg68<kill>, %vreg73<kill>; GR32Bit:%vreg74,%vreg68,%vreg73
592B		  * %vreg75<def> = ADDI %zero, 52; GR32Bit:%vreg75
592B		  * %vreg76<def> = MUL %vreg70<kill>, %vreg75<kill>; GR32Bit:%vreg76,%vreg70,%vreg75
592B		  * %vreg77<def> = ADD %vreg76<kill>, %vreg72<kill>; GR32Bit:%vreg77,%vreg76,%vreg72
592B		  * %vreg78<def> = ADD %vreg77<kill>, %vreg74<kill>; GR32Bit:%vreg78,%vreg77,%vreg74
592B		  * %vreg79<def> = MUL %vreg78<kill>, %vreg67<kill>; GR32Bit:%vreg79,%vreg78,%vreg67
592B		  * %t5<def> = ADD %vreg66<kill>, %vreg79<kill>; GR32Bit:%vreg66,%vreg79
592B		  * END 0
592B		  * %zero<def> = ADDI %zero, 0
592B		  * %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#768")">
> %t1<def> = LUI <MCSym="%lo("ga#768")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 12
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = LUI <MCSym="%lo("ga#512")">
> SRLI %t0, %t0, 12
> %t1<def> = LUI <ga:@redefine_out_eicas_discretes>[TF=2]
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %ra<def> = COPY %ra
Deleting identity copy.
> SW %ra, %t0<kill>, 0; mem:ST4[@redefine_out_eicas_discretes]
> FDELETE %t4, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#768")">
> %t1<def> = LUI <MCSym="%lo("ga#768")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 12
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#768")">
> %t1<def> = LUI <MCSym="%lo("ga#768")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 12
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#768")">
> %t1<def> = LUI <MCSym="%lo("ga#768")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 12
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
********** EMITTING LIVE DEBUG VARIABLES **********
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: redefine_start2
current state of mf:# Machine code for function redefine_start2: Post SSA
Function Live Ins: %ra in %vreg0

BB#0: derived from LLVM BB %redefine_start2.newName01
    Live Ins: %ra
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#768")">
	  * %t1<def> = LUI <MCSym="%lo("ga#768")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 12
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = LUI <MCSym="%lo("ga#512")">
	  * SRLI %t0, %t0, 12
	  * %t1<def> = LUI <ga:@redefine_out_eicas_discretes>[TF=2]
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * SW %ra, %t0<kill>, 0; mem:ST4[@redefine_out_eicas_discretes]
	  * FDELETE %t4, 0
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#768")">
	  * %t1<def> = LUI <MCSym="%lo("ga#768")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 12
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#768")">
	  * %t1<def> = LUI <MCSym="%lo("ga#768")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 12
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#768")">
	  * %t1<def> = LUI <MCSym="%lo("ga#768")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 12
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0

# End machine code for function redefine_start2.

CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:%4]
CGP: Found      local addrmode: [Base:@eicas_discretes]
CGP: Found      local addrmode: [Base:@eicas_discretes]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [4 + Base:%9]
CGP: Found      local addrmode: [Base:@eicas_discretes]
CGP: Found      local addrmode: [Base:@eicas_discretes]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [8 + Base:%15]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [12 + Base:%19]
CGP: Found      local addrmode: [Base:@eicas_discretes]
CGP: Found      local addrmode: [Base:@eicas_discretes]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [16 + Base:%25]
CGP: Found      local addrmode: [Base:@eicas_discretes]
CGP: Found      local addrmode: [Base:@eicas_discretes]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [20 + Base:%31]
CGP: Found      local addrmode: [Base:@eicas_discretes]
CGP: Found      local addrmode: [Base:@eicas_discretes]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [24 + Base:%37]
CGP: Found      local addrmode: [Base:@eicas_discretes]
CGP: Found      local addrmode: [Base:@eicas_discretes]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [28 + Base:%43]
CGP: Found      local addrmode: [Base:@eicas_discretes]
CGP: Found      local addrmode: [Base:@eicas_discretes]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [32 + Base:%49]
CGP: Found      local addrmode: [Base:@eicas_discretes]
CGP: Found      local addrmode: [Base:@eicas_discretes]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [36 + Base:%55]
CGP: Found      local addrmode: [Base:@eicas_discretes]
CGP: Found      local addrmode: [Base:@eicas_discretes]
CGP: Found      local addrmode: [Base:@eicas_discretes]
CGP: Found      local addrmode: [Base:%1]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:%4]
CGP: Found      local addrmode: [Base:@eicas_discretes]
CGP: Found      local addrmode: [Base:@eicas_discretes]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [4 + Base:%9]
CGP: Found      local addrmode: [Base:@eicas_discretes]
CGP: Found      local addrmode: [Base:@eicas_discretes]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [8 + Base:%15]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [12 + Base:%19]
CGP: Found      local addrmode: [Base:@eicas_discretes]
CGP: Found      local addrmode: [Base:@eicas_discretes]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [16 + Base:%25]
CGP: Found      local addrmode: [Base:@eicas_discretes]
CGP: Found      local addrmode: [Base:@eicas_discretes]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [20 + Base:%31]
CGP: Found      local addrmode: [Base:@eicas_discretes]
CGP: Found      local addrmode: [Base:@eicas_discretes]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [24 + Base:%37]
CGP: Found      local addrmode: [Base:@eicas_discretes]
CGP: Found      local addrmode: [Base:@eicas_discretes]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [28 + Base:%43]
CGP: Found      local addrmode: [Base:@eicas_discretes]
CGP: Found      local addrmode: [Base:@eicas_discretes]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [32 + Base:%49]
CGP: Found      local addrmode: [Base:@eicas_discretes]
CGP: Found      local addrmode: [Base:@eicas_discretes]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [36 + Base:%55]
CGP: Found      local addrmode: [Base:@eicas_discretes]
CGP: Found      local addrmode: [Base:@eicas_discretes]
CGP: Found      local addrmode: [Base:@eicas_discretes]
CGP: Found      local addrmode: [Base:%1]
To merge:

AssignFunction3.if.end41:                         ; preds = %AssignFunction3.if.then39, %AssignFunction3.if.end36
  %61 = load i32* @eicas_discretes, align 4
  store i32 %61, i32* %1, align 4
  br label %AssignFunction3.return



Computing probabilities for AssignFunction3.return
Computing probabilities for AssignFunction3.if.then39
Computing probabilities for AssignFunction3.if.end36
set edge AssignFunction3.if.end36 -> 0 successor weight to 20
set edge AssignFunction3.if.end36 -> 1 successor weight to 12
Computing probabilities for AssignFunction3.if.then34
Computing probabilities for AssignFunction3.if.end31
set edge AssignFunction3.if.end31 -> 0 successor weight to 20
set edge AssignFunction3.if.end31 -> 1 successor weight to 12
Computing probabilities for AssignFunction3.if.then29
Computing probabilities for AssignFunction3.if.end26
set edge AssignFunction3.if.end26 -> 0 successor weight to 20
set edge AssignFunction3.if.end26 -> 1 successor weight to 12
Computing probabilities for AssignFunction3.if.then24
Computing probabilities for AssignFunction3.if.end21
set edge AssignFunction3.if.end21 -> 0 successor weight to 20
set edge AssignFunction3.if.end21 -> 1 successor weight to 12
Computing probabilities for AssignFunction3.if.then19
Computing probabilities for AssignFunction3.if.end16
set edge AssignFunction3.if.end16 -> 0 successor weight to 20
set edge AssignFunction3.if.end16 -> 1 successor weight to 12
Computing probabilities for AssignFunction3.if.then14
Computing probabilities for AssignFunction3.if.end11
set edge AssignFunction3.if.end11 -> 0 successor weight to 20
set edge AssignFunction3.if.end11 -> 1 successor weight to 12
Computing probabilities for AssignFunction3.if.then9
Computing probabilities for AssignFunction3.lor.lhs.false
Computing probabilities for AssignFunction3.if.end5
Computing probabilities for AssignFunction3.if.then3
Computing probabilities for AssignFunction3.if.end
set edge AssignFunction3.if.end -> 0 successor weight to 20
set edge AssignFunction3.if.end -> 1 successor weight to 12
Computing probabilities for AssignFunction3.if.then
Computing probabilities for AssignFunction3.entry
set edge AssignFunction3.entry -> 0 successor weight to 20
set edge AssignFunction3.entry -> 1 successor weight to 12



=== AssignFunction3
store visit is after?  store i32* %0, i32** %2, align 4
I was here to add i32* %0
arg match found with argIndex:-1
Argument does not have assigned frame index!
The value is an argument for which I am here to get arg frame index as:0
whats the index?-1
I was here to add   %2 = alloca i32*, align 4
whats in dag after store?SelectionDAG has 7 nodes:
  0x1d09b38: ch = EntryToken [ORD=7]

  0x1d26be0: i32 = FrameIndex<-1> [ORD=7]

  0x1d267e0: i32 = undef [ORD=7]

    0x1d09b38: <multiple use>
    0x1d26be0: <multiple use>
    0x1d267e0: <multiple use>
  0x1d268e0: i32,ch = load 0x1d09b38, 0x1d26be0, 0x1d267e0<LD4[FixedStack-1]>

  0x1d273e0: i32 = Constant<0>

    0x1d09b38: <multiple use>
    0x1d26be0: <multiple use>
    0x1d272e0: i32 = FrameIndex<1> [ORD=7]

    0x1d267e0: <multiple use>
  0x1d270e0: ch = store 0x1d09b38, 0x1d26be0, 0x1d272e0, 0x1d267e0<ST4[%2]> [ORD=7]


visiting load instruction   %3 = load i32** %2, align 4
with I type i32*and sd value :0x1d272e0: i32 = FrameIndex<1>
new load?0x1d29320: i32,ch = load 0x1d270e0, 0x1d272e0, 0x1d267e0<LD4[%2]>
dag after load is dealt with?SelectionDAG has 8 nodes:
  0x1d09b38: ch = EntryToken [ORD=7]

  0x1d26be0: i32 = FrameIndex<-1> [ORD=7]

  0x1d267e0: i32 = undef [ORD=7]

    0x1d09b38: <multiple use>
    0x1d26be0: <multiple use>
    0x1d267e0: <multiple use>
  0x1d268e0: i32,ch = load 0x1d09b38, 0x1d26be0, 0x1d267e0<LD4[FixedStack-1]>

  0x1d272e0: i32 = FrameIndex<1> [ORD=7]

  0x1d273e0: i32 = Constant<0>

      0x1d09b38: <multiple use>
      0x1d26be0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d267e0: <multiple use>
    0x1d270e0: ch = store 0x1d09b38, 0x1d26be0, 0x1d272e0, 0x1d267e0<ST4[%2]> [ORD=7]

    0x1d272e0: <multiple use>
    0x1d267e0: <multiple use>
  0x1d29320: i32,ch = load 0x1d270e0, 0x1d272e0, 0x1d267e0<LD4[%2]>

    0x1d09b38: <multiple use>
    0x1d26be0: <multiple use>
    0x1d272e0: <multiple use>
    0x1d267e0: <multiple use>
  0x1d270e0: ch = store 0x1d09b38, 0x1d26be0, 0x1d272e0, 0x1d267e0<ST4[%2]> [ORD=7]


visiting load instruction   %5 = load i32* %4, align 4
with I type i32and sd value :0x1d29320: i32,ch = load 0x1d270e0, 0x1d272e0, 0x1d267e0<LD4[%2]>
new load?0x1d29220: i32,ch = load 0x1d270e0, 0x1d29320, 0x1d267e0<LD4[%4]>
dag after load is dealt with?SelectionDAG has 9 nodes:
  0x1d09b38: ch = EntryToken [ORD=7]

  0x1d26be0: i32 = FrameIndex<-1> [ORD=7]

  0x1d267e0: i32 = undef [ORD=7]

    0x1d09b38: <multiple use>
    0x1d26be0: <multiple use>
    0x1d267e0: <multiple use>
  0x1d268e0: i32,ch = load 0x1d09b38, 0x1d26be0, 0x1d267e0<LD4[FixedStack-1]>

  0x1d272e0: i32 = FrameIndex<1> [ORD=7]

  0x1d273e0: i32 = Constant<0>

    0x1d270e0: <multiple use>
      0x1d270e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d267e0: <multiple use>
    0x1d29320: i32,ch = load 0x1d270e0, 0x1d272e0, 0x1d267e0<LD4[%2]> [ORD=8]

    0x1d267e0: <multiple use>
  0x1d29220: i32,ch = load 0x1d270e0, 0x1d29320, 0x1d267e0<LD4[%4]>

    0x1d09b38: <multiple use>
    0x1d26be0: <multiple use>
    0x1d272e0: <multiple use>
    0x1d267e0: <multiple use>
  0x1d270e0: ch = store 0x1d09b38, 0x1d26be0, 0x1d272e0, 0x1d267e0<ST4[%2]> [ORD=7]


I was here to add i32 0
Initial selection DAG: BB#0 'AssignFunction3:AssignFunction3.entry'
SelectionDAG has 17 nodes:
  0x1d09b38: ch = EntryToken [ORD=7]

  0x1d26be0: i32 = FrameIndex<-1> [ORD=7]

  0x1d267e0: i32 = undef [ORD=7]

    0x1d09b38: <multiple use>
    0x1d26be0: <multiple use>
    0x1d267e0: <multiple use>
  0x1d268e0: i32,ch = load 0x1d09b38, 0x1d26be0, 0x1d267e0<LD4[FixedStack-1]>

  0x1d272e0: i32 = FrameIndex<1> [ORD=7]

    0x1d09b38: <multiple use>
    0x1d26be0: <multiple use>
    0x1d272e0: <multiple use>
    0x1d267e0: <multiple use>
  0x1d270e0: ch = store 0x1d09b38, 0x1d26be0, 0x1d272e0, 0x1d267e0<ST4[%2]> [ORD=7]

      0x1d270e0: <multiple use>
            0x1d270e0: <multiple use>
              0x1d270e0: <multiple use>
              0x1d272e0: <multiple use>
              0x1d267e0: <multiple use>
            0x1d29320: i32,ch = load 0x1d270e0, 0x1d272e0, 0x1d267e0<LD4[%2]> [ORD=8]

            0x1d267e0: <multiple use>
          0x1d29220: i32,ch = load 0x1d270e0, 0x1d29320, 0x1d267e0<LD4[%4]> [ORD=10]

          0x1d273e0: i32 = Constant<0> [ORD=11]

          0x1d265e0: ch = setne [ORD=11]

        0x1d29420: i1 = setcc 0x1d29220, 0x1d273e0, 0x1d265e0 [ORD=11]

        0x1d26fe0: i1 = Constant<-1>

      0x1d26ee0: i1 = xor 0x1d29420, 0x1d26fe0

      0x1d271e0: ch = BasicBlock<AssignFunction3.if.end 0x1d361d0>

    0x1d269e0: ch = brcond 0x1d270e0, 0x1d26ee0, 0x1d271e0

    0x1d26de0: ch = BasicBlock<AssignFunction3.if.then 0x1d36120>

  0x1d26ce0: ch = br 0x1d269e0, 0x1d26de0



Replacing.3 0x1d26ee0: i1 = xor 0x1d29420, 0x1d26fe0

With: 0x1d266e0: i1 = setcc 0x1d29220, 0x1d273e0, 0x1d26ae0


Replacing.1 0x1d29320: i32,ch = load 0x1d270e0, 0x1d272e0, 0x1d267e0<LD4[%2]> [ORD=8]

With: 0x1d26be0: i32 = FrameIndex<-1> [ORD=7]
 and 1 other values

Replacing.1 0x1d29220: i32,ch = load 0x1d270e0, 0x1d26be0, 0x1d267e0<LD4[%4](align=16)> [ORD=10]

With: 0x1d29220: i32,ch = load 0x1d270e0, 0x1d26be0, 0x1d267e0<LD4[%4](align=16)> [ORD=10]
 and 1 other values
Optimized lowered selection DAG: BB#0 'AssignFunction3:AssignFunction3.entry'
SelectionDAG has 13 nodes:
  0x1d26be0: i32 = FrameIndex<-1> [ORD=7]

  0x1d267e0: i32 = undef [ORD=7]

    0x1d09b38: ch = EntryToken [ORD=7]

    0x1d26be0: <multiple use>
    0x1d272e0: i32 = FrameIndex<1> [ORD=7]

    0x1d267e0: <multiple use>
  0x1d270e0: ch = store 0x1d09b38, 0x1d26be0, 0x1d272e0, 0x1d267e0<ST4[%2]> [ORD=7]

      0x1d270e0: <multiple use>
          0x1d270e0: <multiple use>
          0x1d26be0: <multiple use>
          0x1d267e0: <multiple use>
        0x1d29220: i32,ch = load 0x1d270e0, 0x1d26be0, 0x1d267e0<LD4[%4](align=16)> [ORD=10]

        0x1d273e0: i32 = Constant<0> [ORD=11]

        0x1d26ae0: ch = seteq

      0x1d266e0: i1 = setcc 0x1d29220, 0x1d273e0, 0x1d26ae0

      0x1d271e0: ch = BasicBlock<AssignFunction3.if.end 0x1d361d0>

    0x1d269e0: ch = brcond 0x1d270e0, 0x1d266e0, 0x1d271e0

    0x1d26de0: ch = BasicBlock<AssignFunction3.if.then 0x1d36120>

  0x1d26ce0: ch = br 0x1d269e0, 0x1d26de0


Legally typed node: 0x1d26ae0: ch = seteq [ID=0]

Legally typed node: 0x1d26de0: ch = BasicBlock<AssignFunction3.if.then 0x1d36120> [ID=0]

Legally typed node: 0x1d271e0: ch = BasicBlock<AssignFunction3.if.end 0x1d361d0> [ID=0]

Legally typed node: 0x1d273e0: i32 = Constant<0> [ORD=11] [ID=0]

Legally typed node: 0x1d272e0: i32 = FrameIndex<1> [ORD=7] [ID=0]

Legally typed node: 0x1d267e0: i32 = undef [ORD=7] [ID=0]

Legally typed node: 0x1d26be0: i32 = FrameIndex<-1> [ORD=7] [ID=0]

Legally typed node: 0x1d09b38: ch = EntryToken [ORD=7] [ID=0]

Legally typed node: 0x1d270e0: ch = store 0x1d09b38, 0x1d26be0, 0x1d272e0, 0x1d267e0<ST4[%2]> [ORD=7] [ID=0]

Legally typed node: 0x1d29220: i32,ch = load 0x1d270e0, 0x1d26be0, 0x1d267e0<LD4[%4](align=16)> [ORD=10] [ID=0]

Promote integer result: 0x1d266e0: i1 = setcc 0x1d29220, 0x1d273e0, 0x1d26ae0 [ID=0]

Promote integer operand: 0x1d269e0: ch = brcond 0x1d270e0, 0x1d266e0, 0x1d271e0 [ID=0]

Promote integer operand: 0x1d29320: i32 = zero_extend 0x1d266e0 [ID=0]

Legally typed node: 0x1d265e0: i32 = Constant<1> [ID=0]

Legally typed node: 0x1d268e0: i32 = setcc 0x1d29220, 0x1d273e0, 0x1d26ae0 [ID=0]

Legally typed node: 0x1d29420: i32 = and 0x1d268e0, 0x1d265e0 [ID=0]

Legally typed node: 0x1d269e0: ch = brcond 0x1d270e0, 0x1d29420, 0x1d271e0 [ID=0]

Legally typed node: 0x1d26ce0: ch = br 0x1d269e0, 0x1d26de0 [ID=0]

Legally typed node: 0x7fff243c9bc0: ch = handlenode 0x1d26ce0 [ID=0]

Type-legalized selection DAG: BB#0 'AssignFunction3:AssignFunction3.entry'
SelectionDAG has 15 nodes:
  0x1d26be0: i32 = FrameIndex<-1> [ORD=7] [ID=-3]

  0x1d267e0: i32 = undef [ORD=7] [ID=-3]

    0x1d09b38: ch = EntryToken [ORD=7] [ID=-3]

    0x1d26be0: <multiple use>
    0x1d272e0: i32 = FrameIndex<1> [ORD=7] [ID=-3]

    0x1d267e0: <multiple use>
  0x1d270e0: ch = store 0x1d09b38, 0x1d26be0, 0x1d272e0, 0x1d267e0<ST4[%2]> [ORD=7] [ID=-3]

      0x1d270e0: <multiple use>
            0x1d270e0: <multiple use>
            0x1d26be0: <multiple use>
            0x1d267e0: <multiple use>
          0x1d29220: i32,ch = load 0x1d270e0, 0x1d26be0, 0x1d267e0<LD4[%4](align=16)> [ORD=10] [ID=-3]

          0x1d273e0: i32 = Constant<0> [ORD=11] [ID=-3]

          0x1d26ae0: ch = seteq [ID=-3]

        0x1d268e0: i32 = setcc 0x1d29220, 0x1d273e0, 0x1d26ae0 [ID=-3]

        0x1d265e0: i32 = Constant<1> [ID=-3]

      0x1d29420: i32 = and 0x1d268e0, 0x1d265e0 [ID=-3]

      0x1d271e0: ch = BasicBlock<AssignFunction3.if.end 0x1d361d0> [ID=-3]

    0x1d269e0: ch = brcond 0x1d270e0, 0x1d29420, 0x1d271e0 [ID=-3]

    0x1d26de0: ch = BasicBlock<AssignFunction3.if.then 0x1d36120> [ID=-3]

  0x1d26ce0: ch = br 0x1d269e0, 0x1d26de0 [ID=-3]



Replacing.2 0x1d29420: i32 = and 0x1d268e0, 0x1d265e0 [ID=-3]

With: 0x1d268e0: i32 = setcc 0x1d29220, 0x1d273e0, 0x1d26ae0 [ID=-3]

Optimized type-legalized selection DAG: BB#0 'AssignFunction3:AssignFunction3.entry'
SelectionDAG has 13 nodes:
  0x1d26be0: i32 = FrameIndex<-1> [ORD=7] [ID=-3]

  0x1d267e0: i32 = undef [ORD=7] [ID=-3]

    0x1d09b38: ch = EntryToken [ORD=7] [ID=-3]

    0x1d26be0: <multiple use>
    0x1d272e0: i32 = FrameIndex<1> [ORD=7] [ID=-3]

    0x1d267e0: <multiple use>
  0x1d270e0: ch = store 0x1d09b38, 0x1d26be0, 0x1d272e0, 0x1d267e0<ST4[%2]> [ORD=7] [ID=-3]

      0x1d270e0: <multiple use>
          0x1d270e0: <multiple use>
          0x1d26be0: <multiple use>
          0x1d267e0: <multiple use>
        0x1d29220: i32,ch = load 0x1d270e0, 0x1d26be0, 0x1d267e0<LD4[%4](align=16)> [ORD=10] [ID=-3]

        0x1d273e0: i32 = Constant<0> [ORD=11] [ID=-3]

        0x1d26ae0: ch = seteq [ID=-3]

      0x1d268e0: i32 = setcc 0x1d29220, 0x1d273e0, 0x1d26ae0 [ID=-3]

      0x1d271e0: ch = BasicBlock<AssignFunction3.if.end 0x1d361d0> [ID=-3]

    0x1d269e0: ch = brcond 0x1d270e0, 0x1d268e0, 0x1d271e0 [ID=-3]

    0x1d26de0: ch = BasicBlock<AssignFunction3.if.then 0x1d36120> [ID=-3]

  0x1d26ce0: ch = br 0x1d269e0, 0x1d26de0 [ID=-3]


Legalized selection DAG: BB#0 'AssignFunction3:AssignFunction3.entry'
SelectionDAG has 13 nodes:
  0x1d26be0: i32 = FrameIndex<-1> [ORD=7] [ID=1]

  0x1d267e0: i32 = undef [ORD=7] [ID=2]

    0x1d09b38: ch = EntryToken [ORD=7] [ID=0]

    0x1d26be0: <multiple use>
    0x1d272e0: i32 = FrameIndex<1> [ORD=7] [ID=3]

    0x1d267e0: <multiple use>
  0x1d270e0: ch = store 0x1d09b38, 0x1d26be0, 0x1d272e0, 0x1d267e0<ST4[%2]> [ORD=7] [ID=8]

      0x1d270e0: <multiple use>
          0x1d270e0: <multiple use>
          0x1d26be0: <multiple use>
          0x1d267e0: <multiple use>
        0x1d29220: i32,ch = load 0x1d270e0, 0x1d26be0, 0x1d267e0<LD4[%4](align=16)> [ORD=10] [ID=9]

        0x1d273e0: i32 = Constant<0> [ORD=11] [ID=4]

        0x1d26ae0: ch = seteq [ID=7]

      0x1d268e0: i32 = setcc 0x1d29220, 0x1d273e0, 0x1d26ae0 [ID=10]

      0x1d271e0: ch = BasicBlock<AssignFunction3.if.end 0x1d361d0> [ID=5]

    0x1d269e0: ch = brcond 0x1d270e0, 0x1d268e0, 0x1d271e0 [ID=11]

    0x1d26de0: ch = BasicBlock<AssignFunction3.if.then 0x1d36120> [ID=6]

  0x1d26ce0: ch = br 0x1d269e0, 0x1d26de0 [ID=12]


Optimized legalized selection DAG: BB#0 'AssignFunction3:AssignFunction3.entry'
SelectionDAG has 13 nodes:
  0x1d26be0: i32 = FrameIndex<-1> [ORD=7] [ID=1]

  0x1d267e0: i32 = undef [ORD=7] [ID=2]

    0x1d09b38: ch = EntryToken [ORD=7] [ID=0]

    0x1d26be0: <multiple use>
    0x1d272e0: i32 = FrameIndex<1> [ORD=7] [ID=3]

    0x1d267e0: <multiple use>
  0x1d270e0: ch = store 0x1d09b38, 0x1d26be0, 0x1d272e0, 0x1d267e0<ST4[%2]> [ORD=7] [ID=8]

      0x1d270e0: <multiple use>
          0x1d270e0: <multiple use>
          0x1d26be0: <multiple use>
          0x1d267e0: <multiple use>
        0x1d29220: i32,ch = load 0x1d270e0, 0x1d26be0, 0x1d267e0<LD4[%4](align=16)> [ORD=10] [ID=9]

        0x1d273e0: i32 = Constant<0> [ORD=11] [ID=4]

        0x1d26ae0: ch = seteq [ID=7]

      0x1d268e0: i32 = setcc 0x1d29220, 0x1d273e0, 0x1d26ae0 [ID=10]

      0x1d271e0: ch = BasicBlock<AssignFunction3.if.end 0x1d361d0> [ID=5]

    0x1d269e0: ch = brcond 0x1d270e0, 0x1d268e0, 0x1d271e0 [ID=11]

    0x1d26de0: ch = BasicBlock<AssignFunction3.if.then 0x1d36120> [ID=6]

  0x1d26ce0: ch = br 0x1d269e0, 0x1d26de0 [ID=12]


===== Instruction selection begins: BB#0 'AssignFunction3.entry'
ISEL: Starting pattern match on root node: 0x1d26ce0: ch = br 0x1d269e0, 0x1d26de0 [ID=12]

  Initial Opcode index to 1938
  Morphed node: 0x1d26ce0: ch = JAL 0x1d26de0, 0x1d269e0

ISEL: Match complete!
=> 0x1d26ce0: ch = JAL 0x1d26de0, 0x1d269e0

ISEL: Starting pattern match on root node: 0x1d269e0: ch = brcond 0x1d270e0, 0x1d268e0, 0x1d271e0 [ID=11]

  Initial Opcode index to 1439
  Morphed node: 0x1d269e0: ch = BEQ 0x1d271e0, 0x1d29220, 0x1d273e0, 0x1d270e0

ISEL: Match complete!
=> 0x1d269e0: ch = BEQ 0x1d271e0, 0x1d29220, 0x1d273e0, 0x1d270e0

ISEL: Starting pattern match on root node: 0x1d29220: i32,ch = load 0x1d270e0, 0x1d26be0, 0x1d267e0<LD4[%4](align=16)> [ORD=10] [ID=9]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x1d29220: i32,ch = LW 0x1d26be0, 0x1d26ae0, 0x1d270e0<Mem:LD4[%4](align=16)> [ORD=10]

ISEL: Match complete!
=> 0x1d29220: i32,ch = LW 0x1d26be0, 0x1d26ae0, 0x1d270e0<Mem:LD4[%4](align=16)> [ORD=10]

ISEL: Starting pattern match on root node: 0x1d270e0: ch = store 0x1d09b38, 0x1d26be0, 0x1d272e0, 0x1d267e0<ST4[%2]> [ORD=7] [ID=8]

  Initial Opcode index to 178
  Morphed node: 0x1d270e0: ch = SW 0x1d26be0, 0x1d272e0, 0x1d26ae0, 0x1d09b38<Mem:ST4[%2]> [ORD=7]

ISEL: Match complete!
=> 0x1d270e0: ch = SW 0x1d26be0, 0x1d272e0, 0x1d26ae0, 0x1d09b38<Mem:ST4[%2]> [ORD=7]

=> 0x1d26de0: ch = BasicBlock<AssignFunction3.if.then 0x1d36120>

=> 0x1d271e0: ch = BasicBlock<AssignFunction3.if.end 0x1d361d0>

ISEL: Starting pattern match on root node: 0x1d273e0: i32 = Constant<0> [ORD=11] [ID=4]

  Initial Opcode index to 1226
comparing 0 and 0 and returning value:1
ISEL: Match complete!
=> 0x1d273e0: i32 = Constant<0> [ORD=11] [ID=4]

=> 0x1d09b38: ch = EntryToken [ORD=7]

===== Instruction selection ends:
Selected selection DAG: BB#0 'AssignFunction3:AssignFunction3.entry'
SelectionDAG has 14 nodes:
    0x1d29420: <multiple use>
      0x1d273e0: <multiple use>
      0x1d268e0: i32 = TargetFrameIndex<1>

    0x1d272e0: i32 = ADDI 0x1d273e0, 0x1d268e0 [ORD=7]

    0x1d26ae0: <multiple use>
    0x1d09b38: ch = EntryToken [ORD=7]

  0x1d270e0: ch = SW 0x1d29420, 0x1d272e0, 0x1d26ae0, 0x1d09b38<Mem:ST4[%2]> [ORD=7]

  0x1d26ae0: i32 = TargetConstant<0>

  0x1d273e0: i32 = Register %t5

    0x1d273e0: <multiple use>
    0x1d265e0: i32 = TargetFrameIndex<-1>

  0x1d29420: i32 = ADDI 0x1d273e0, 0x1d265e0 [ORD=7]

    0x1d26de0: ch = BasicBlock<AssignFunction3.if.then 0x1d36120>

      0x1d271e0: ch = BasicBlock<AssignFunction3.if.end 0x1d361d0>

        0x1d29420: <multiple use>
        0x1d26ae0: <multiple use>
        0x1d270e0: <multiple use>
      0x1d29220: i32,ch = LW 0x1d29420, 0x1d26ae0, 0x1d270e0<Mem:LD4[%4](align=16)> [ORD=10]

      0x1d267e0: i32 = Register %zero

      0x1d270e0: <multiple use>
    0x1d269e0: ch = BEQ 0x1d271e0, 0x1d29220, 0x1d267e0, 0x1d270e0

  0x1d26ce0: ch = JAL 0x1d26de0, 0x1d269e0


********** List Scheduling BB#0 'AssignFunction3.entry' **********
SU(0): 0x1d26ce0: ch = JAL 0x1d26de0, 0x1d269e0 [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x1d269e0: ch = BEQ 0x1d271e0, 0x1d29220, 0x1d267e0, 0x1d270e0 [ID=1]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(5): Latency=1
   ch  SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x1d270e0: ch = SW 0x1d29420, 0x1d272e0, 0x1d26ae0, 0x1d09b38<Mem:ST4[%2]> [ORD=7] [ID=2]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(4): Latency=1
   val SU(3): Latency=1
  Successors:
   ch  SU(1): Latency=1
   ch  SU(5): Latency=1

SU(3): 0x1d272e0: i32 = ADDI 0x1d273e0, 0x1d268e0 [ORD=7] [ID=3]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(2): Latency=1

SU(4): 0x1d29420: i32 = ADDI 0x1d273e0, 0x1d265e0 [ORD=7] [ID=4]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(2): Latency=1
   val SU(5): Latency=1

SU(5): 0x1d29220: i32,ch = LW 0x1d29420, 0x1d26ae0, 0x1d270e0<Mem:LD4[%4](align=16)> [ORD=10] [ID=5]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(4): Latency=1
   ch  SU(2): Latency=1
  Successors:
   val SU(1): Latency=1


Examining Available:
Height 0: SU(0): 0x1d26ce0: ch = JAL 0x1d26de0, 0x1d269e0 [ID=0]


*** Scheduling [0]: SU(0): 0x1d26ce0: ch = JAL 0x1d26de0, 0x1d269e0 [ID=0]


Examining Available:
Height 1: SU(1): 0x1d269e0: ch = BEQ 0x1d271e0, 0x1d29220, 0x1d267e0, 0x1d270e0 [ID=1]


*** Scheduling [1]: SU(1): 0x1d269e0: ch = BEQ 0x1d271e0, 0x1d29220, 0x1d267e0, 0x1d270e0 [ID=1]


Examining Available:
Height 2: SU(5): 0x1d29220: i32,ch = LW 0x1d29420, 0x1d26ae0, 0x1d270e0<Mem:LD4[%4](align=16)> [ORD=10] [ID=5]


*** Scheduling [2]: SU(5): 0x1d29220: i32,ch = LW 0x1d29420, 0x1d26ae0, 0x1d270e0<Mem:LD4[%4](align=16)> [ORD=10] [ID=5]


Examining Available:
Height 3: SU(2): 0x1d270e0: ch = SW 0x1d29420, 0x1d272e0, 0x1d26ae0, 0x1d09b38<Mem:ST4[%2]> [ORD=7] [ID=2]


*** Scheduling [3]: SU(2): 0x1d270e0: ch = SW 0x1d29420, 0x1d272e0, 0x1d26ae0, 0x1d09b38<Mem:ST4[%2]> [ORD=7] [ID=2]


Examining Available:
Height 4: SU(4): 0x1d29420: i32 = ADDI 0x1d273e0, 0x1d265e0 [ORD=7] [ID=4]

Height 4: SU(3): 0x1d272e0: i32 = ADDI 0x1d273e0, 0x1d268e0 [ORD=7] [ID=3]


*** Scheduling [4]: SU(4): 0x1d29420: i32 = ADDI 0x1d273e0, 0x1d265e0 [ORD=7] [ID=4]


Examining Available:
Height 4: SU(3): 0x1d272e0: i32 = ADDI 0x1d273e0, 0x1d268e0 [ORD=7] [ID=3]


*** Scheduling [5]: SU(3): 0x1d272e0: i32 = ADDI 0x1d273e0, 0x1d268e0 [ORD=7] [ID=3]

*** Final schedule ***
SU(3): 0x1d272e0: i32 = ADDI 0x1d273e0, 0x1d268e0 [ORD=7] [ID=3]

SU(4): 0x1d29420: i32 = ADDI 0x1d273e0, 0x1d265e0 [ORD=7] [ID=4]

SU(2): 0x1d270e0: ch = SW 0x1d29420, 0x1d272e0, 0x1d26ae0, 0x1d09b38<Mem:ST4[%2]> [ORD=7] [ID=2]

SU(5): 0x1d29220: i32,ch = LW 0x1d29420, 0x1d26ae0, 0x1d270e0<Mem:LD4[%4](align=16)> [ORD=10] [ID=5]

SU(1): 0x1d269e0: ch = BEQ 0x1d271e0, 0x1d29220, 0x1d267e0, 0x1d270e0 [ID=1]

SU(0): 0x1d26ce0: ch = JAL 0x1d26de0, 0x1d269e0 [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %7 = load i32* @eicas_discretes, align 4
I was here to add @eicas_discretes = global i32 0, align 4
with I type i32and sd value :0x1d29420: i32 = GlobalAddress<i32* @eicas_discretes> 0
new load?0x1d273e0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d268e0<LD4[@eicas_discretes]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x1d265e0: i32 = Constant<0>

    0x1d09b38: ch = EntryToken

    0x1d29420: i32 = GlobalAddress<i32* @eicas_discretes> 0

    0x1d268e0: i32 = undef

  0x1d273e0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d268e0<LD4[@eicas_discretes]>

  0x1d09b38: ch = EntryToken


I was here to add i32 1
store visit is after?  store i32 %8, i32* @eicas_discretes, align 4
whats in dag after store?SelectionDAG has 8 nodes:
  0x1d29420: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=12]

  0x1d265e0: i32 = Constant<0>

  0x1d268e0: i32 = undef [ORD=12]

    0x1d09b38: ch = EntryToken [ORD=12]

    0x1d29420: <multiple use>
    0x1d268e0: <multiple use>
  0x1d273e0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d268e0<LD4[@eicas_discretes]> [ORD=12]

    0x1d273e0: <multiple use>
      0x1d273e0: <multiple use>
      0x1d267e0: i32 = Constant<1> [ORD=13]

    0x1d26ae0: i32 = or 0x1d273e0, 0x1d267e0 [ORD=13]

    0x1d29420: <multiple use>
    0x1d268e0: <multiple use>
  0x1d26ce0: ch = store 0x1d273e0:1, 0x1d26ae0, 0x1d29420, 0x1d268e0<ST4[@eicas_discretes]> [ORD=14]


Initial selection DAG: BB#1 'AssignFunction3:AssignFunction3.if.then'
SelectionDAG has 8 nodes:
  0x1d29420: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=12]

  0x1d265e0: i32 = Constant<0>

  0x1d268e0: i32 = undef [ORD=12]

    0x1d09b38: ch = EntryToken [ORD=12]

    0x1d29420: <multiple use>
    0x1d268e0: <multiple use>
  0x1d273e0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d268e0<LD4[@eicas_discretes]> [ORD=12]

    0x1d273e0: <multiple use>
      0x1d273e0: <multiple use>
      0x1d267e0: i32 = Constant<1> [ORD=13]

    0x1d26ae0: i32 = or 0x1d273e0, 0x1d267e0 [ORD=13]

    0x1d29420: <multiple use>
    0x1d268e0: <multiple use>
  0x1d26ce0: ch = store 0x1d273e0:1, 0x1d26ae0, 0x1d29420, 0x1d268e0<ST4[@eicas_discretes]> [ORD=14]


Optimized lowered selection DAG: BB#1 'AssignFunction3:AssignFunction3.if.then'
SelectionDAG has 7 nodes:
  0x1d29420: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=12]

  0x1d268e0: i32 = undef [ORD=12]

    0x1d09b38: ch = EntryToken [ORD=12]

    0x1d29420: <multiple use>
    0x1d268e0: <multiple use>
  0x1d273e0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d268e0<LD4[@eicas_discretes]> [ORD=12]

    0x1d273e0: <multiple use>
      0x1d273e0: <multiple use>
      0x1d267e0: i32 = Constant<1> [ORD=13]

    0x1d26ae0: i32 = or 0x1d273e0, 0x1d267e0 [ORD=13]

    0x1d29420: <multiple use>
    0x1d268e0: <multiple use>
  0x1d26ce0: ch = store 0x1d273e0:1, 0x1d26ae0, 0x1d29420, 0x1d268e0<ST4[@eicas_discretes]> [ORD=14]


Legally typed node: 0x1d267e0: i32 = Constant<1> [ORD=13] [ID=0]

Legally typed node: 0x1d268e0: i32 = undef [ORD=12] [ID=0]

Legally typed node: 0x1d29420: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=12] [ID=0]

Legally typed node: 0x1d09b38: ch = EntryToken [ORD=12] [ID=0]

Legally typed node: 0x1d273e0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d268e0<LD4[@eicas_discretes]> [ORD=12] [ID=0]

Legally typed node: 0x1d26ae0: i32 = or 0x1d273e0, 0x1d267e0 [ORD=13] [ID=0]

Legally typed node: 0x1d26ce0: ch = store 0x1d273e0:1, 0x1d26ae0, 0x1d29420, 0x1d268e0<ST4[@eicas_discretes]> [ORD=14] [ID=0]

Legally typed node: 0x7fff243c9bc0: ch = handlenode 0x1d26ce0 [ID=0]

Type-legalized selection DAG: BB#1 'AssignFunction3:AssignFunction3.if.then'
SelectionDAG has 7 nodes:
  0x1d29420: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=12] [ID=-3]

  0x1d268e0: i32 = undef [ORD=12] [ID=-3]

    0x1d09b38: ch = EntryToken [ORD=12] [ID=-3]

    0x1d29420: <multiple use>
    0x1d268e0: <multiple use>
  0x1d273e0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d268e0<LD4[@eicas_discretes]> [ORD=12] [ID=-3]

    0x1d273e0: <multiple use>
      0x1d273e0: <multiple use>
      0x1d267e0: i32 = Constant<1> [ORD=13] [ID=-3]

    0x1d26ae0: i32 = or 0x1d273e0, 0x1d267e0 [ORD=13] [ID=-3]

    0x1d29420: <multiple use>
    0x1d268e0: <multiple use>
  0x1d26ce0: ch = store 0x1d273e0:1, 0x1d26ae0, 0x1d29420, 0x1d268e0<ST4[@eicas_discretes]> [ORD=14] [ID=-3]


Legalized selection DAG: BB#1 'AssignFunction3:AssignFunction3.if.then'
SelectionDAG has 11 nodes:
  0x1d268e0: i32 = undef [ORD=12] [ID=2]

    0x1d09b38: ch = EntryToken [ORD=12] [ID=0]

    0x1d26de0: <multiple use>
    0x1d268e0: <multiple use>
  0x1d273e0: i32,ch = load 0x1d09b38, 0x1d26de0, 0x1d268e0<LD4[@eicas_discretes]> [ORD=12] [ID=4]

      0x1d265e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

    0x1d29220: i32 = REDEFINEISD::Hi 0x1d265e0

      0x1d269e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

    0x1d270e0: i32 = REDEFINEISD::Lo 0x1d269e0

  0x1d26de0: i32 = add 0x1d29220, 0x1d270e0

    0x1d273e0: <multiple use>
      0x1d273e0: <multiple use>
      0x1d267e0: i32 = Constant<1> [ORD=13] [ID=3]

    0x1d26ae0: i32 = or 0x1d273e0, 0x1d267e0 [ORD=13] [ID=5]

    0x1d26de0: <multiple use>
    0x1d268e0: <multiple use>
  0x1d26ce0: ch = store 0x1d273e0:1, 0x1d26ae0, 0x1d26de0, 0x1d268e0<ST4[@eicas_discretes]> [ORD=14] [ID=6]


Optimized legalized selection DAG: BB#1 'AssignFunction3:AssignFunction3.if.then'
SelectionDAG has 11 nodes:
  0x1d268e0: i32 = undef [ORD=12] [ID=2]

    0x1d09b38: ch = EntryToken [ORD=12] [ID=0]

    0x1d26de0: <multiple use>
    0x1d268e0: <multiple use>
  0x1d273e0: i32,ch = load 0x1d09b38, 0x1d26de0, 0x1d268e0<LD4[@eicas_discretes]> [ORD=12] [ID=4]

      0x1d265e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

    0x1d29220: i32 = REDEFINEISD::Hi 0x1d265e0

      0x1d269e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

    0x1d270e0: i32 = REDEFINEISD::Lo 0x1d269e0

  0x1d26de0: i32 = add 0x1d29220, 0x1d270e0

    0x1d273e0: <multiple use>
      0x1d273e0: <multiple use>
      0x1d267e0: i32 = Constant<1> [ORD=13] [ID=3]

    0x1d26ae0: i32 = or 0x1d273e0, 0x1d267e0 [ORD=13] [ID=5]

    0x1d26de0: <multiple use>
    0x1d268e0: <multiple use>
  0x1d26ce0: ch = store 0x1d273e0:1, 0x1d26ae0, 0x1d26de0, 0x1d268e0<ST4[@eicas_discretes]> [ORD=14] [ID=6]


===== Instruction selection begins: BB#1 'AssignFunction3.if.then'
ISEL: Starting pattern match on root node: 0x1d26ce0: ch = store 0x1d273e0:1, 0x1d26ae0, 0x1d26de0, 0x1d268e0<ST4[@eicas_discretes]> [ORD=14] [ID=10]

  Initial Opcode index to 178
  Morphed node: 0x1d26ce0: ch = SW 0x1d26ae0, 0x1d26de0, 0x1d29420, 0x1d273e0:1<Mem:ST4[@eicas_discretes]> [ORD=14]

ISEL: Match complete!
=> 0x1d26ce0: ch = SW 0x1d26ae0, 0x1d26de0, 0x1d29420, 0x1d273e0:1<Mem:ST4[@eicas_discretes]> [ORD=14]

ISEL: Starting pattern match on root node: 0x1d26ae0: i32 = or 0x1d273e0, 0x1d267e0 [ORD=13] [ID=9]

  Initial Opcode index to 567
  Morphed node: 0x1d26ae0: i32 = ORI 0x1d273e0, 0x1d271e0 [ORD=13]

ISEL: Match complete!
=> 0x1d26ae0: i32 = ORI 0x1d273e0, 0x1d271e0 [ORD=13]

ISEL: Starting pattern match on root node: 0x1d273e0: i32,ch = load 0x1d09b38, 0x1d26de0, 0x1d268e0<LD4[@eicas_discretes]> [ORD=12] [ID=8]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x1d273e0: i32,ch = LW 0x1d26de0, 0x1d29420, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=12]

ISEL: Match complete!
=> 0x1d273e0: i32,ch = LW 0x1d26de0, 0x1d29420, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=12]

ISEL: Starting pattern match on root node: 0x1d26de0: i32 = add 0x1d29220, 0x1d270e0 [ID=7]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x1d26de0: i32 = ADD 0x1d270e0, 0x1d29220

ISEL: Match complete!
=> 0x1d26de0: i32 = ADD 0x1d270e0, 0x1d29220

ISEL: Starting pattern match on root node: 0x1d270e0: i32 = REDEFINEISD::Lo 0x1d269e0 [ID=6]

  Initial Opcode index to 1204
  Morphed node: 0x1d270e0: i32 = ADDI 0x1d268e0, 0x1d269e0

ISEL: Match complete!
=> 0x1d270e0: i32 = ADDI 0x1d268e0, 0x1d269e0

ISEL: Starting pattern match on root node: 0x1d29220: i32 = REDEFINEISD::Hi 0x1d265e0 [ID=5]

  Initial Opcode index to 1186
  Morphed node: 0x1d29220: i32 = LUI 0x1d265e0

ISEL: Match complete!
=> 0x1d29220: i32 = LUI 0x1d265e0

=> 0x1d269e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

=> 0x1d265e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

=> 0x1d09b38: ch = EntryToken [ORD=12]

===== Instruction selection ends:
Selected selection DAG: BB#1 'AssignFunction3:AssignFunction3.if.then'
SelectionDAG has 12 nodes:
      0x1d268e0: i32 = Register %zero

      0x1d269e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

    0x1d270e0: i32 = ADDI 0x1d268e0, 0x1d269e0

      0x1d265e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

    0x1d29220: i32 = LUI 0x1d265e0

  0x1d26de0: i32 = ADD 0x1d270e0, 0x1d29220

    0x1d26de0: <multiple use>
    0x1d29420: <multiple use>
    0x1d09b38: ch = EntryToken [ORD=12]

  0x1d273e0: i32,ch = LW 0x1d26de0, 0x1d29420, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=12]

  0x1d29420: i32 = TargetConstant<0>

      0x1d273e0: <multiple use>
      0x1d271e0: i32 = TargetConstant<1>

    0x1d26ae0: i32 = ORI 0x1d273e0, 0x1d271e0 [ORD=13]

    0x1d26de0: <multiple use>
    0x1d29420: <multiple use>
    0x1d273e0: <multiple use>
  0x1d26ce0: ch = SW 0x1d26ae0, 0x1d26de0, 0x1d29420, 0x1d273e0:1<Mem:ST4[@eicas_discretes]> [ORD=14]


********** List Scheduling BB#1 'AssignFunction3.if.then' **********
SU(0): 0x1d26ce0: ch = SW 0x1d26ae0, 0x1d26de0, 0x1d29420, 0x1d273e0:1<Mem:ST4[@eicas_discretes]> [ORD=14] [ID=0]

  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
   val SU(5): Latency=1
   val SU(2): Latency=1
   ch  SU(1): Latency=1

SU(1): 0x1d273e0: i32,ch = LW 0x1d26de0, 0x1d29420, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=12] [ID=1]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1
   val SU(5): Latency=1

SU(2): 0x1d26de0: i32 = ADD 0x1d270e0, 0x1d29220 [ID=2]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(4): Latency=1
   val SU(3): Latency=1
  Successors:
   val SU(0): Latency=1
   val SU(1): Latency=1

SU(3): 0x1d29220: i32 = LUI 0x1d265e0 [ID=3]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(2): Latency=1

SU(4): 0x1d270e0: i32 = ADDI 0x1d268e0, 0x1d269e0 [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(2): Latency=1

SU(5): 0x1d26ae0: i32 = ORI 0x1d273e0, 0x1d271e0 [ORD=13] [ID=5]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(1): Latency=1
  Successors:
   val SU(0): Latency=1


Examining Available:
Height 0: SU(0): 0x1d26ce0: ch = SW 0x1d26ae0, 0x1d26de0, 0x1d29420, 0x1d273e0:1<Mem:ST4[@eicas_discretes]> [ORD=14] [ID=0]


*** Scheduling [0]: SU(0): 0x1d26ce0: ch = SW 0x1d26ae0, 0x1d26de0, 0x1d29420, 0x1d273e0:1<Mem:ST4[@eicas_discretes]> [ORD=14] [ID=0]


Examining Available:
Height 1: SU(5): 0x1d26ae0: i32 = ORI 0x1d273e0, 0x1d271e0 [ORD=13] [ID=5]


*** Scheduling [1]: SU(5): 0x1d26ae0: i32 = ORI 0x1d273e0, 0x1d271e0 [ORD=13] [ID=5]


Examining Available:
Height 2: SU(1): 0x1d273e0: i32,ch = LW 0x1d26de0, 0x1d29420, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=12] [ID=1]


*** Scheduling [2]: SU(1): 0x1d273e0: i32,ch = LW 0x1d26de0, 0x1d29420, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=12] [ID=1]


Examining Available:
Height 3: SU(2): 0x1d26de0: i32 = ADD 0x1d270e0, 0x1d29220 [ID=2]


*** Scheduling [3]: SU(2): 0x1d26de0: i32 = ADD 0x1d270e0, 0x1d29220 [ID=2]


Examining Available:
Height 4: SU(4): 0x1d270e0: i32 = ADDI 0x1d268e0, 0x1d269e0 [ID=4]

Height 4: SU(3): 0x1d29220: i32 = LUI 0x1d265e0 [ID=3]


*** Scheduling [4]: SU(4): 0x1d270e0: i32 = ADDI 0x1d268e0, 0x1d269e0 [ID=4]


Examining Available:
Height 4: SU(3): 0x1d29220: i32 = LUI 0x1d265e0 [ID=3]


*** Scheduling [5]: SU(3): 0x1d29220: i32 = LUI 0x1d265e0 [ID=3]

*** Final schedule ***
SU(3): 0x1d29220: i32 = LUI 0x1d265e0 [ID=3]

SU(4): 0x1d270e0: i32 = ADDI 0x1d268e0, 0x1d269e0 [ID=4]

SU(2): 0x1d26de0: i32 = ADD 0x1d270e0, 0x1d29220 [ID=2]

SU(1): 0x1d273e0: i32,ch = LW 0x1d26de0, 0x1d29420, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=12] [ID=1]

SU(5): 0x1d26ae0: i32 = ORI 0x1d273e0, 0x1d271e0 [ORD=13] [ID=5]

SU(0): 0x1d26ce0: ch = SW 0x1d26ae0, 0x1d26de0, 0x1d29420, 0x1d273e0:1<Mem:ST4[@eicas_discretes]> [ORD=14] [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %9 = load i32** %2, align 4
I was here to add   %2 = alloca i32*, align 4
with I type i32*and sd value :0x1d268e0: i32 = FrameIndex<1>
new load?0x1d26ce0: i32,ch = load 0x1d09b38, 0x1d268e0, 0x1d29420<LD4[%2]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x1d271e0: i32 = Constant<0>

    0x1d09b38: ch = EntryToken

    0x1d268e0: i32 = FrameIndex<1>

    0x1d29420: i32 = undef

  0x1d26ce0: i32,ch = load 0x1d09b38, 0x1d268e0, 0x1d29420<LD4[%2]>

  0x1d09b38: ch = EntryToken


visiting load instruction   %11 = load i32* %10, align 4
with I type i32and sd value :0x1d26de0: i32 = add 0x1d26ce0, 0x1d273e0
new load?0x1d270e0: i32,ch = load 0x1d09b38, 0x1d26de0, 0x1d29420<LD4[%10]>
dag after load is dealt with?SelectionDAG has 9 nodes:
  0x1d271e0: i32 = Constant<0>

  0x1d29420: i32 = undef [ORD=15]

  0x1d26ae0: i64 = Constant<4>

    0x1d09b38: <multiple use>
        0x1d09b38: <multiple use>
        0x1d268e0: i32 = FrameIndex<1> [ORD=15]

        0x1d29420: <multiple use>
      0x1d26ce0: i32,ch = load 0x1d09b38, 0x1d268e0, 0x1d29420<LD4[%2]> [ORD=15]

      0x1d273e0: i32 = Constant<4> [ORD=16]

    0x1d26de0: i32 = add 0x1d26ce0, 0x1d273e0 [ORD=16]

    0x1d29420: <multiple use>
  0x1d270e0: i32,ch = load 0x1d09b38, 0x1d26de0, 0x1d29420<LD4[%10]>

  0x1d09b38: ch = EntryToken [ORD=15]


I was here to add i32 0
Initial selection DAG: BB#2 'AssignFunction3:AssignFunction3.if.end'
SelectionDAG has 17 nodes:
  0x1d09b38: ch = EntryToken [ORD=15]

  0x1d29420: i32 = undef [ORD=15]

  0x1d26ae0: i64 = Constant<4>

      0x1d09b38: <multiple use>
            0x1d09b38: <multiple use>
                0x1d09b38: <multiple use>
                0x1d268e0: i32 = FrameIndex<1> [ORD=15]

                0x1d29420: <multiple use>
              0x1d26ce0: i32,ch = load 0x1d09b38, 0x1d268e0, 0x1d29420<LD4[%2]> [ORD=15]

              0x1d273e0: i32 = Constant<4> [ORD=16]

            0x1d26de0: i32 = add 0x1d26ce0, 0x1d273e0 [ORD=16]

            0x1d29420: <multiple use>
          0x1d270e0: i32,ch = load 0x1d09b38, 0x1d26de0, 0x1d29420<LD4[%10]> [ORD=17]

          0x1d271e0: i32 = Constant<0> [ORD=18]

          0x1d29220: ch = setne [ORD=18]

        0x1d269e0: i1 = setcc 0x1d270e0, 0x1d271e0, 0x1d29220 [ORD=18]

        0x1d265e0: i1 = Constant<-1>

      0x1d267e0: i1 = xor 0x1d269e0, 0x1d265e0

      0x1d272e0: ch = BasicBlock<AssignFunction3.if.end5 0x1d36330>

    0x1d26be0: ch = brcond 0x1d09b38, 0x1d267e0, 0x1d272e0

    0x1d266e0: ch = BasicBlock<AssignFunction3.if.then3 0x1d36280>

  0x1d29320: ch = br 0x1d26be0, 0x1d266e0



Replacing.3 0x1d267e0: i1 = xor 0x1d269e0, 0x1d265e0

With: 0x1d26ee0: i1 = setcc 0x1d270e0, 0x1d271e0, 0x1d26fe0

Optimized lowered selection DAG: BB#2 'AssignFunction3:AssignFunction3.if.end'
SelectionDAG has 14 nodes:
  0x1d09b38: ch = EntryToken [ORD=15]

  0x1d29420: i32 = undef [ORD=15]

      0x1d09b38: <multiple use>
          0x1d09b38: <multiple use>
              0x1d09b38: <multiple use>
              0x1d268e0: i32 = FrameIndex<1> [ORD=15]

              0x1d29420: <multiple use>
            0x1d26ce0: i32,ch = load 0x1d09b38, 0x1d268e0, 0x1d29420<LD4[%2]> [ORD=15]

            0x1d273e0: i32 = Constant<4> [ORD=16]

          0x1d26de0: i32 = add 0x1d26ce0, 0x1d273e0 [ORD=16]

          0x1d29420: <multiple use>
        0x1d270e0: i32,ch = load 0x1d09b38, 0x1d26de0, 0x1d29420<LD4[%10]> [ORD=17]

        0x1d271e0: i32 = Constant<0> [ORD=18]

        0x1d26fe0: ch = seteq

      0x1d26ee0: i1 = setcc 0x1d270e0, 0x1d271e0, 0x1d26fe0

      0x1d272e0: ch = BasicBlock<AssignFunction3.if.end5 0x1d36330>

    0x1d26be0: ch = brcond 0x1d09b38, 0x1d26ee0, 0x1d272e0

    0x1d266e0: ch = BasicBlock<AssignFunction3.if.then3 0x1d36280>

  0x1d29320: ch = br 0x1d26be0, 0x1d266e0


Legally typed node: 0x1d26fe0: ch = seteq [ID=0]

Legally typed node: 0x1d266e0: ch = BasicBlock<AssignFunction3.if.then3 0x1d36280> [ID=0]

Legally typed node: 0x1d272e0: ch = BasicBlock<AssignFunction3.if.end5 0x1d36330> [ID=0]

Legally typed node: 0x1d273e0: i32 = Constant<4> [ORD=16] [ID=0]

Legally typed node: 0x1d29420: i32 = undef [ORD=15] [ID=0]

Legally typed node: 0x1d271e0: i32 = Constant<0> [ORD=18] [ID=0]

Legally typed node: 0x1d268e0: i32 = FrameIndex<1> [ORD=15] [ID=0]

Legally typed node: 0x1d09b38: ch = EntryToken [ORD=15] [ID=0]

Legally typed node: 0x1d26ce0: i32,ch = load 0x1d09b38, 0x1d268e0, 0x1d29420<LD4[%2]> [ORD=15] [ID=0]

Legally typed node: 0x1d26de0: i32 = add 0x1d26ce0, 0x1d273e0 [ORD=16] [ID=0]

Legally typed node: 0x1d270e0: i32,ch = load 0x1d09b38, 0x1d26de0, 0x1d29420<LD4[%10]> [ORD=17] [ID=0]

Promote integer result: 0x1d26ee0: i1 = setcc 0x1d270e0, 0x1d271e0, 0x1d26fe0 [ID=0]

Promote integer operand: 0x1d26be0: ch = brcond 0x1d09b38, 0x1d26ee0, 0x1d272e0 [ID=0]

Promote integer operand: 0x1d29220: i32 = zero_extend 0x1d26ee0 [ID=0]

Legally typed node: 0x1d269e0: i32 = Constant<1> [ID=0]

Legally typed node: 0x1d26ae0: i32 = setcc 0x1d270e0, 0x1d271e0, 0x1d26fe0 [ID=0]

Legally typed node: 0x1d265e0: i32 = and 0x1d26ae0, 0x1d269e0 [ID=0]

Legally typed node: 0x1d26be0: ch = brcond 0x1d09b38, 0x1d265e0, 0x1d272e0 [ID=0]

Legally typed node: 0x1d29320: ch = br 0x1d26be0, 0x1d266e0 [ID=0]

Legally typed node: 0x7fff243c9bc0: ch = handlenode 0x1d29320 [ID=0]

Type-legalized selection DAG: BB#2 'AssignFunction3:AssignFunction3.if.end'
SelectionDAG has 16 nodes:
  0x1d09b38: ch = EntryToken [ORD=15] [ID=-3]

  0x1d29420: i32 = undef [ORD=15] [ID=-3]

      0x1d09b38: <multiple use>
            0x1d09b38: <multiple use>
                0x1d09b38: <multiple use>
                0x1d268e0: i32 = FrameIndex<1> [ORD=15] [ID=-3]

                0x1d29420: <multiple use>
              0x1d26ce0: i32,ch = load 0x1d09b38, 0x1d268e0, 0x1d29420<LD4[%2]> [ORD=15] [ID=-3]

              0x1d273e0: i32 = Constant<4> [ORD=16] [ID=-3]

            0x1d26de0: i32 = add 0x1d26ce0, 0x1d273e0 [ORD=16] [ID=-3]

            0x1d29420: <multiple use>
          0x1d270e0: i32,ch = load 0x1d09b38, 0x1d26de0, 0x1d29420<LD4[%10]> [ORD=17] [ID=-3]

          0x1d271e0: i32 = Constant<0> [ORD=18] [ID=-3]

          0x1d26fe0: ch = seteq [ID=-3]

        0x1d26ae0: i32 = setcc 0x1d270e0, 0x1d271e0, 0x1d26fe0 [ID=-3]

        0x1d269e0: i32 = Constant<1> [ID=-3]

      0x1d265e0: i32 = and 0x1d26ae0, 0x1d269e0 [ID=-3]

      0x1d272e0: ch = BasicBlock<AssignFunction3.if.end5 0x1d36330> [ID=-3]

    0x1d26be0: ch = brcond 0x1d09b38, 0x1d265e0, 0x1d272e0 [ID=-3]

    0x1d266e0: ch = BasicBlock<AssignFunction3.if.then3 0x1d36280> [ID=-3]

  0x1d29320: ch = br 0x1d26be0, 0x1d266e0 [ID=-3]



Replacing.2 0x1d265e0: i32 = and 0x1d26ae0, 0x1d269e0 [ID=-3]

With: 0x1d26ae0: i32 = setcc 0x1d270e0, 0x1d271e0, 0x1d26fe0 [ID=-3]

Optimized type-legalized selection DAG: BB#2 'AssignFunction3:AssignFunction3.if.end'
SelectionDAG has 14 nodes:
  0x1d09b38: ch = EntryToken [ORD=15] [ID=-3]

  0x1d29420: i32 = undef [ORD=15] [ID=-3]

      0x1d09b38: <multiple use>
          0x1d09b38: <multiple use>
              0x1d09b38: <multiple use>
              0x1d268e0: i32 = FrameIndex<1> [ORD=15] [ID=-3]

              0x1d29420: <multiple use>
            0x1d26ce0: i32,ch = load 0x1d09b38, 0x1d268e0, 0x1d29420<LD4[%2]> [ORD=15] [ID=-3]

            0x1d273e0: i32 = Constant<4> [ORD=16] [ID=-3]

          0x1d26de0: i32 = add 0x1d26ce0, 0x1d273e0 [ORD=16] [ID=-3]

          0x1d29420: <multiple use>
        0x1d270e0: i32,ch = load 0x1d09b38, 0x1d26de0, 0x1d29420<LD4[%10]> [ORD=17] [ID=-3]

        0x1d271e0: i32 = Constant<0> [ORD=18] [ID=-3]

        0x1d26fe0: ch = seteq [ID=-3]

      0x1d26ae0: i32 = setcc 0x1d270e0, 0x1d271e0, 0x1d26fe0 [ID=-3]

      0x1d272e0: ch = BasicBlock<AssignFunction3.if.end5 0x1d36330> [ID=-3]

    0x1d26be0: ch = brcond 0x1d09b38, 0x1d26ae0, 0x1d272e0 [ID=-3]

    0x1d266e0: ch = BasicBlock<AssignFunction3.if.then3 0x1d36280> [ID=-3]

  0x1d29320: ch = br 0x1d26be0, 0x1d266e0 [ID=-3]


Legalized selection DAG: BB#2 'AssignFunction3:AssignFunction3.if.end'
SelectionDAG has 14 nodes:
  0x1d09b38: ch = EntryToken [ORD=15] [ID=0]

  0x1d29420: i32 = undef [ORD=15] [ID=3]

      0x1d09b38: <multiple use>
          0x1d09b38: <multiple use>
              0x1d09b38: <multiple use>
              0x1d268e0: i32 = FrameIndex<1> [ORD=15] [ID=1]

              0x1d29420: <multiple use>
            0x1d26ce0: i32,ch = load 0x1d09b38, 0x1d268e0, 0x1d29420<LD4[%2]> [ORD=15] [ID=8]

            0x1d273e0: i32 = Constant<4> [ORD=16] [ID=4]

          0x1d26de0: i32 = add 0x1d26ce0, 0x1d273e0 [ORD=16] [ID=9]

          0x1d29420: <multiple use>
        0x1d270e0: i32,ch = load 0x1d09b38, 0x1d26de0, 0x1d29420<LD4[%10]> [ORD=17] [ID=10]

        0x1d271e0: i32 = Constant<0> [ORD=18] [ID=2]

        0x1d26fe0: ch = seteq [ID=7]

      0x1d26ae0: i32 = setcc 0x1d270e0, 0x1d271e0, 0x1d26fe0 [ID=11]

      0x1d272e0: ch = BasicBlock<AssignFunction3.if.end5 0x1d36330> [ID=5]

    0x1d26be0: ch = brcond 0x1d09b38, 0x1d26ae0, 0x1d272e0 [ID=12]

    0x1d266e0: ch = BasicBlock<AssignFunction3.if.then3 0x1d36280> [ID=6]

  0x1d29320: ch = br 0x1d26be0, 0x1d266e0 [ID=13]


Optimized legalized selection DAG: BB#2 'AssignFunction3:AssignFunction3.if.end'
SelectionDAG has 14 nodes:
  0x1d09b38: ch = EntryToken [ORD=15] [ID=0]

  0x1d29420: i32 = undef [ORD=15] [ID=3]

      0x1d09b38: <multiple use>
          0x1d09b38: <multiple use>
              0x1d09b38: <multiple use>
              0x1d268e0: i32 = FrameIndex<1> [ORD=15] [ID=1]

              0x1d29420: <multiple use>
            0x1d26ce0: i32,ch = load 0x1d09b38, 0x1d268e0, 0x1d29420<LD4[%2]> [ORD=15] [ID=8]

            0x1d273e0: i32 = Constant<4> [ORD=16] [ID=4]

          0x1d26de0: i32 = add 0x1d26ce0, 0x1d273e0 [ORD=16] [ID=9]

          0x1d29420: <multiple use>
        0x1d270e0: i32,ch = load 0x1d09b38, 0x1d26de0, 0x1d29420<LD4[%10]> [ORD=17] [ID=10]

        0x1d271e0: i32 = Constant<0> [ORD=18] [ID=2]

        0x1d26fe0: ch = seteq [ID=7]

      0x1d26ae0: i32 = setcc 0x1d270e0, 0x1d271e0, 0x1d26fe0 [ID=11]

      0x1d272e0: ch = BasicBlock<AssignFunction3.if.end5 0x1d36330> [ID=5]

    0x1d26be0: ch = brcond 0x1d09b38, 0x1d26ae0, 0x1d272e0 [ID=12]

    0x1d266e0: ch = BasicBlock<AssignFunction3.if.then3 0x1d36280> [ID=6]

  0x1d29320: ch = br 0x1d26be0, 0x1d266e0 [ID=13]


===== Instruction selection begins: BB#2 'AssignFunction3.if.end'
ISEL: Starting pattern match on root node: 0x1d29320: ch = br 0x1d26be0, 0x1d266e0 [ID=13]

  Initial Opcode index to 1938
  Morphed node: 0x1d29320: ch = JAL 0x1d266e0, 0x1d26be0

ISEL: Match complete!
=> 0x1d29320: ch = JAL 0x1d266e0, 0x1d26be0

ISEL: Starting pattern match on root node: 0x1d26be0: ch = brcond 0x1d09b38, 0x1d26ae0, 0x1d272e0 [ID=12]

  Initial Opcode index to 1439
  Morphed node: 0x1d26be0: ch = BEQ 0x1d272e0, 0x1d270e0, 0x1d271e0, 0x1d09b38

ISEL: Match complete!
=> 0x1d26be0: ch = BEQ 0x1d272e0, 0x1d270e0, 0x1d271e0, 0x1d09b38

ISEL: Starting pattern match on root node: 0x1d270e0: i32,ch = load 0x1d09b38, 0x1d26de0, 0x1d29420<LD4[%10]> [ORD=17] [ID=10]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x1d270e0: i32,ch = LW 0x1d26ce0, 0x1d26fe0, 0x1d09b38<Mem:LD4[%10]> [ORD=17]

ISEL: Match complete!
=> 0x1d270e0: i32,ch = LW 0x1d26ce0, 0x1d26fe0, 0x1d09b38<Mem:LD4[%10]> [ORD=17]

ISEL: Starting pattern match on root node: 0x1d26ce0: i32,ch = load 0x1d09b38, 0x1d268e0, 0x1d29420<LD4[%2]> [ORD=15] [ID=8]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x1d26ce0: i32,ch = LW 0x1d268e0, 0x1d273e0, 0x1d09b38<Mem:LD4[%2]> [ORD=15]

ISEL: Match complete!
=> 0x1d26ce0: i32,ch = LW 0x1d268e0, 0x1d273e0, 0x1d09b38<Mem:LD4[%2]> [ORD=15]

=> 0x1d266e0: ch = BasicBlock<AssignFunction3.if.then3 0x1d36280>

=> 0x1d272e0: ch = BasicBlock<AssignFunction3.if.end5 0x1d36330>

ISEL: Starting pattern match on root node: 0x1d271e0: i32 = Constant<0> [ORD=18] [ID=2]

  Initial Opcode index to 1226
comparing 0 and 0 and returning value:1
ISEL: Match complete!
=> 0x1d271e0: i32 = Constant<0> [ORD=18] [ID=2]

=> 0x1d09b38: ch = EntryToken [ORD=15]

===== Instruction selection ends:
Selected selection DAG: BB#2 'AssignFunction3:AssignFunction3.if.end'
SelectionDAG has 13 nodes:
  0x1d09b38: ch = EntryToken [ORD=15]

    0x1d266e0: ch = BasicBlock<AssignFunction3.if.then3 0x1d36280>

      0x1d272e0: ch = BasicBlock<AssignFunction3.if.end5 0x1d36330>

            0x1d271e0: i32 = Register %t5

            0x1d26de0: i32 = TargetFrameIndex<1>

          0x1d268e0: i32 = ADDI 0x1d271e0, 0x1d26de0 [ORD=15]

          0x1d273e0: i32 = TargetConstant<0>

          0x1d09b38: <multiple use>
        0x1d26ce0: i32,ch = LW 0x1d268e0, 0x1d273e0, 0x1d09b38<Mem:LD4[%2]> [ORD=15]

        0x1d26fe0: i32 = TargetConstant<4>

        0x1d09b38: <multiple use>
      0x1d270e0: i32,ch = LW 0x1d26ce0, 0x1d26fe0, 0x1d09b38<Mem:LD4[%10]> [ORD=17]

      0x1d29420: i32 = Register %zero

      0x1d09b38: <multiple use>
    0x1d26be0: ch = BEQ 0x1d272e0, 0x1d270e0, 0x1d29420, 0x1d09b38

  0x1d29320: ch = JAL 0x1d266e0, 0x1d26be0


********** List Scheduling BB#2 'AssignFunction3.if.end' **********
SU(0): 0x1d29320: ch = JAL 0x1d266e0, 0x1d26be0 [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x1d26be0: ch = BEQ 0x1d272e0, 0x1d270e0, 0x1d29420, 0x1d09b38 [ID=1]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x1d270e0: i32,ch = LW 0x1d26ce0, 0x1d26fe0, 0x1d09b38<Mem:LD4[%10]> [ORD=17] [ID=2]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(3): Latency=1
  Successors:
   val SU(1): Latency=1

SU(3): 0x1d26ce0: i32,ch = LW 0x1d268e0, 0x1d273e0, 0x1d09b38<Mem:LD4[%2]> [ORD=15] [ID=3]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(4): Latency=1
  Successors:
   val SU(2): Latency=1

SU(4): 0x1d268e0: i32 = ADDI 0x1d271e0, 0x1d26de0 [ORD=15] [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(3): Latency=1


Examining Available:
Height 0: SU(0): 0x1d29320: ch = JAL 0x1d266e0, 0x1d26be0 [ID=0]


*** Scheduling [0]: SU(0): 0x1d29320: ch = JAL 0x1d266e0, 0x1d26be0 [ID=0]


Examining Available:
Height 1: SU(1): 0x1d26be0: ch = BEQ 0x1d272e0, 0x1d270e0, 0x1d29420, 0x1d09b38 [ID=1]


*** Scheduling [1]: SU(1): 0x1d26be0: ch = BEQ 0x1d272e0, 0x1d270e0, 0x1d29420, 0x1d09b38 [ID=1]


Examining Available:
Height 2: SU(2): 0x1d270e0: i32,ch = LW 0x1d26ce0, 0x1d26fe0, 0x1d09b38<Mem:LD4[%10]> [ORD=17] [ID=2]


*** Scheduling [2]: SU(2): 0x1d270e0: i32,ch = LW 0x1d26ce0, 0x1d26fe0, 0x1d09b38<Mem:LD4[%10]> [ORD=17] [ID=2]


Examining Available:
Height 3: SU(3): 0x1d26ce0: i32,ch = LW 0x1d268e0, 0x1d273e0, 0x1d09b38<Mem:LD4[%2]> [ORD=15] [ID=3]


*** Scheduling [3]: SU(3): 0x1d26ce0: i32,ch = LW 0x1d268e0, 0x1d273e0, 0x1d09b38<Mem:LD4[%2]> [ORD=15] [ID=3]


Examining Available:
Height 4: SU(4): 0x1d268e0: i32 = ADDI 0x1d271e0, 0x1d26de0 [ORD=15] [ID=4]


*** Scheduling [4]: SU(4): 0x1d268e0: i32 = ADDI 0x1d271e0, 0x1d26de0 [ORD=15] [ID=4]

*** Final schedule ***
SU(4): 0x1d268e0: i32 = ADDI 0x1d271e0, 0x1d26de0 [ORD=15] [ID=4]

SU(3): 0x1d26ce0: i32,ch = LW 0x1d268e0, 0x1d273e0, 0x1d09b38<Mem:LD4[%2]> [ORD=15] [ID=3]

SU(2): 0x1d270e0: i32,ch = LW 0x1d26ce0, 0x1d26fe0, 0x1d09b38<Mem:LD4[%10]> [ORD=17] [ID=2]

SU(1): 0x1d26be0: ch = BEQ 0x1d272e0, 0x1d270e0, 0x1d29420, 0x1d09b38 [ID=1]

SU(0): 0x1d29320: ch = JAL 0x1d266e0, 0x1d26be0 [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %13 = load i32* @eicas_discretes, align 4
I was here to add @eicas_discretes = global i32 0, align 4
with I type i32and sd value :0x1d26de0: i32 = GlobalAddress<i32* @eicas_discretes> 0
new load?0x1d273e0: i32,ch = load 0x1d09b38, 0x1d26de0, 0x1d29420<LD4[@eicas_discretes]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x1d271e0: i32 = Constant<0>

    0x1d09b38: ch = EntryToken

    0x1d26de0: i32 = GlobalAddress<i32* @eicas_discretes> 0

    0x1d29420: i32 = undef

  0x1d273e0: i32,ch = load 0x1d09b38, 0x1d26de0, 0x1d29420<LD4[@eicas_discretes]>

  0x1d09b38: ch = EntryToken


I was here to add i32 2
store visit is after?  store i32 %14, i32* @eicas_discretes, align 4
whats in dag after store?SelectionDAG has 8 nodes:
  0x1d26de0: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=19]

  0x1d271e0: i32 = Constant<0>

  0x1d29420: i32 = undef [ORD=19]

    0x1d09b38: ch = EntryToken [ORD=19]

    0x1d26de0: <multiple use>
    0x1d29420: <multiple use>
  0x1d273e0: i32,ch = load 0x1d09b38, 0x1d26de0, 0x1d29420<LD4[@eicas_discretes]> [ORD=19]

    0x1d273e0: <multiple use>
      0x1d273e0: <multiple use>
      0x1d26fe0: i32 = Constant<2> [ORD=20]

    0x1d29320: i32 = or 0x1d273e0, 0x1d26fe0 [ORD=20]

    0x1d26de0: <multiple use>
    0x1d29420: <multiple use>
  0x1d26be0: ch = store 0x1d273e0:1, 0x1d29320, 0x1d26de0, 0x1d29420<ST4[@eicas_discretes]> [ORD=21]


Initial selection DAG: BB#3 'AssignFunction3:AssignFunction3.if.then3'
SelectionDAG has 8 nodes:
  0x1d26de0: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=19]

  0x1d271e0: i32 = Constant<0>

  0x1d29420: i32 = undef [ORD=19]

    0x1d09b38: ch = EntryToken [ORD=19]

    0x1d26de0: <multiple use>
    0x1d29420: <multiple use>
  0x1d273e0: i32,ch = load 0x1d09b38, 0x1d26de0, 0x1d29420<LD4[@eicas_discretes]> [ORD=19]

    0x1d273e0: <multiple use>
      0x1d273e0: <multiple use>
      0x1d26fe0: i32 = Constant<2> [ORD=20]

    0x1d29320: i32 = or 0x1d273e0, 0x1d26fe0 [ORD=20]

    0x1d26de0: <multiple use>
    0x1d29420: <multiple use>
  0x1d26be0: ch = store 0x1d273e0:1, 0x1d29320, 0x1d26de0, 0x1d29420<ST4[@eicas_discretes]> [ORD=21]


Optimized lowered selection DAG: BB#3 'AssignFunction3:AssignFunction3.if.then3'
SelectionDAG has 7 nodes:
  0x1d26de0: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=19]

  0x1d29420: i32 = undef [ORD=19]

    0x1d09b38: ch = EntryToken [ORD=19]

    0x1d26de0: <multiple use>
    0x1d29420: <multiple use>
  0x1d273e0: i32,ch = load 0x1d09b38, 0x1d26de0, 0x1d29420<LD4[@eicas_discretes]> [ORD=19]

    0x1d273e0: <multiple use>
      0x1d273e0: <multiple use>
      0x1d26fe0: i32 = Constant<2> [ORD=20]

    0x1d29320: i32 = or 0x1d273e0, 0x1d26fe0 [ORD=20]

    0x1d26de0: <multiple use>
    0x1d29420: <multiple use>
  0x1d26be0: ch = store 0x1d273e0:1, 0x1d29320, 0x1d26de0, 0x1d29420<ST4[@eicas_discretes]> [ORD=21]


Legally typed node: 0x1d26fe0: i32 = Constant<2> [ORD=20] [ID=0]

Legally typed node: 0x1d29420: i32 = undef [ORD=19] [ID=0]

Legally typed node: 0x1d26de0: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=19] [ID=0]

Legally typed node: 0x1d09b38: ch = EntryToken [ORD=19] [ID=0]

Legally typed node: 0x1d273e0: i32,ch = load 0x1d09b38, 0x1d26de0, 0x1d29420<LD4[@eicas_discretes]> [ORD=19] [ID=0]

Legally typed node: 0x1d29320: i32 = or 0x1d273e0, 0x1d26fe0 [ORD=20] [ID=0]

Legally typed node: 0x1d26be0: ch = store 0x1d273e0:1, 0x1d29320, 0x1d26de0, 0x1d29420<ST4[@eicas_discretes]> [ORD=21] [ID=0]

Legally typed node: 0x7fff243c9bc0: ch = handlenode 0x1d26be0 [ID=0]

Type-legalized selection DAG: BB#3 'AssignFunction3:AssignFunction3.if.then3'
SelectionDAG has 7 nodes:
  0x1d26de0: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=19] [ID=-3]

  0x1d29420: i32 = undef [ORD=19] [ID=-3]

    0x1d09b38: ch = EntryToken [ORD=19] [ID=-3]

    0x1d26de0: <multiple use>
    0x1d29420: <multiple use>
  0x1d273e0: i32,ch = load 0x1d09b38, 0x1d26de0, 0x1d29420<LD4[@eicas_discretes]> [ORD=19] [ID=-3]

    0x1d273e0: <multiple use>
      0x1d273e0: <multiple use>
      0x1d26fe0: i32 = Constant<2> [ORD=20] [ID=-3]

    0x1d29320: i32 = or 0x1d273e0, 0x1d26fe0 [ORD=20] [ID=-3]

    0x1d26de0: <multiple use>
    0x1d29420: <multiple use>
  0x1d26be0: ch = store 0x1d273e0:1, 0x1d29320, 0x1d26de0, 0x1d29420<ST4[@eicas_discretes]> [ORD=21] [ID=-3]


Legalized selection DAG: BB#3 'AssignFunction3:AssignFunction3.if.then3'
SelectionDAG has 11 nodes:
  0x1d29420: i32 = undef [ORD=19] [ID=2]

    0x1d09b38: ch = EntryToken [ORD=19] [ID=0]

    0x1d272e0: <multiple use>
    0x1d29420: <multiple use>
  0x1d273e0: i32,ch = load 0x1d09b38, 0x1d272e0, 0x1d29420<LD4[@eicas_discretes]> [ORD=19] [ID=4]

      0x1d271e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

    0x1d26ce0: i32 = REDEFINEISD::Hi 0x1d271e0

      0x1d270e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

    0x1d266e0: i32 = REDEFINEISD::Lo 0x1d270e0

  0x1d272e0: i32 = add 0x1d26ce0, 0x1d266e0

    0x1d273e0: <multiple use>
      0x1d273e0: <multiple use>
      0x1d26fe0: i32 = Constant<2> [ORD=20] [ID=3]

    0x1d29320: i32 = or 0x1d273e0, 0x1d26fe0 [ORD=20] [ID=5]

    0x1d272e0: <multiple use>
    0x1d29420: <multiple use>
  0x1d26be0: ch = store 0x1d273e0:1, 0x1d29320, 0x1d272e0, 0x1d29420<ST4[@eicas_discretes]> [ORD=21] [ID=6]


Optimized legalized selection DAG: BB#3 'AssignFunction3:AssignFunction3.if.then3'
SelectionDAG has 11 nodes:
  0x1d29420: i32 = undef [ORD=19] [ID=2]

    0x1d09b38: ch = EntryToken [ORD=19] [ID=0]

    0x1d272e0: <multiple use>
    0x1d29420: <multiple use>
  0x1d273e0: i32,ch = load 0x1d09b38, 0x1d272e0, 0x1d29420<LD4[@eicas_discretes]> [ORD=19] [ID=4]

      0x1d271e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

    0x1d26ce0: i32 = REDEFINEISD::Hi 0x1d271e0

      0x1d270e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

    0x1d266e0: i32 = REDEFINEISD::Lo 0x1d270e0

  0x1d272e0: i32 = add 0x1d26ce0, 0x1d266e0

    0x1d273e0: <multiple use>
      0x1d273e0: <multiple use>
      0x1d26fe0: i32 = Constant<2> [ORD=20] [ID=3]

    0x1d29320: i32 = or 0x1d273e0, 0x1d26fe0 [ORD=20] [ID=5]

    0x1d272e0: <multiple use>
    0x1d29420: <multiple use>
  0x1d26be0: ch = store 0x1d273e0:1, 0x1d29320, 0x1d272e0, 0x1d29420<ST4[@eicas_discretes]> [ORD=21] [ID=6]


===== Instruction selection begins: BB#3 'AssignFunction3.if.then3'
ISEL: Starting pattern match on root node: 0x1d26be0: ch = store 0x1d273e0:1, 0x1d29320, 0x1d272e0, 0x1d29420<ST4[@eicas_discretes]> [ORD=21] [ID=10]

  Initial Opcode index to 178
  Morphed node: 0x1d26be0: ch = SW 0x1d29320, 0x1d272e0, 0x1d26de0, 0x1d273e0:1<Mem:ST4[@eicas_discretes]> [ORD=21]

ISEL: Match complete!
=> 0x1d26be0: ch = SW 0x1d29320, 0x1d272e0, 0x1d26de0, 0x1d273e0:1<Mem:ST4[@eicas_discretes]> [ORD=21]

ISEL: Starting pattern match on root node: 0x1d29320: i32 = or 0x1d273e0, 0x1d26fe0 [ORD=20] [ID=9]

  Initial Opcode index to 567
  Morphed node: 0x1d29320: i32 = ORI 0x1d273e0, 0x1d268e0 [ORD=20]

ISEL: Match complete!
=> 0x1d29320: i32 = ORI 0x1d273e0, 0x1d268e0 [ORD=20]

ISEL: Starting pattern match on root node: 0x1d273e0: i32,ch = load 0x1d09b38, 0x1d272e0, 0x1d29420<LD4[@eicas_discretes]> [ORD=19] [ID=8]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x1d273e0: i32,ch = LW 0x1d272e0, 0x1d26de0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=19]

ISEL: Match complete!
=> 0x1d273e0: i32,ch = LW 0x1d272e0, 0x1d26de0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=19]

ISEL: Starting pattern match on root node: 0x1d272e0: i32 = add 0x1d26ce0, 0x1d266e0 [ID=7]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x1d272e0: i32 = ADD 0x1d266e0, 0x1d26ce0

ISEL: Match complete!
=> 0x1d272e0: i32 = ADD 0x1d266e0, 0x1d26ce0

ISEL: Starting pattern match on root node: 0x1d266e0: i32 = REDEFINEISD::Lo 0x1d270e0 [ID=6]

  Initial Opcode index to 1204
  Morphed node: 0x1d266e0: i32 = ADDI 0x1d29420, 0x1d270e0

ISEL: Match complete!
=> 0x1d266e0: i32 = ADDI 0x1d29420, 0x1d270e0

ISEL: Starting pattern match on root node: 0x1d26ce0: i32 = REDEFINEISD::Hi 0x1d271e0 [ID=5]

  Initial Opcode index to 1186
  Morphed node: 0x1d26ce0: i32 = LUI 0x1d271e0

ISEL: Match complete!
=> 0x1d26ce0: i32 = LUI 0x1d271e0

=> 0x1d270e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

=> 0x1d271e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

=> 0x1d09b38: ch = EntryToken [ORD=19]

===== Instruction selection ends:
Selected selection DAG: BB#3 'AssignFunction3:AssignFunction3.if.then3'
SelectionDAG has 12 nodes:
      0x1d29420: i32 = Register %zero

      0x1d270e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

    0x1d266e0: i32 = ADDI 0x1d29420, 0x1d270e0

      0x1d271e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

    0x1d26ce0: i32 = LUI 0x1d271e0

  0x1d272e0: i32 = ADD 0x1d266e0, 0x1d26ce0

    0x1d272e0: <multiple use>
    0x1d26de0: <multiple use>
    0x1d09b38: ch = EntryToken [ORD=19]

  0x1d273e0: i32,ch = LW 0x1d272e0, 0x1d26de0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=19]

  0x1d26de0: i32 = TargetConstant<0>

      0x1d273e0: <multiple use>
      0x1d268e0: i32 = TargetConstant<2>

    0x1d29320: i32 = ORI 0x1d273e0, 0x1d268e0 [ORD=20]

    0x1d272e0: <multiple use>
    0x1d26de0: <multiple use>
    0x1d273e0: <multiple use>
  0x1d26be0: ch = SW 0x1d29320, 0x1d272e0, 0x1d26de0, 0x1d273e0:1<Mem:ST4[@eicas_discretes]> [ORD=21]


********** List Scheduling BB#3 'AssignFunction3.if.then3' **********
SU(0): 0x1d26be0: ch = SW 0x1d29320, 0x1d272e0, 0x1d26de0, 0x1d273e0:1<Mem:ST4[@eicas_discretes]> [ORD=21] [ID=0]

  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
   val SU(5): Latency=1
   val SU(2): Latency=1
   ch  SU(1): Latency=1

SU(1): 0x1d273e0: i32,ch = LW 0x1d272e0, 0x1d26de0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=19] [ID=1]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1
   val SU(5): Latency=1

SU(2): 0x1d272e0: i32 = ADD 0x1d266e0, 0x1d26ce0 [ID=2]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(4): Latency=1
   val SU(3): Latency=1
  Successors:
   val SU(0): Latency=1
   val SU(1): Latency=1

SU(3): 0x1d26ce0: i32 = LUI 0x1d271e0 [ID=3]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(2): Latency=1

SU(4): 0x1d266e0: i32 = ADDI 0x1d29420, 0x1d270e0 [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(2): Latency=1

SU(5): 0x1d29320: i32 = ORI 0x1d273e0, 0x1d268e0 [ORD=20] [ID=5]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(1): Latency=1
  Successors:
   val SU(0): Latency=1


Examining Available:
Height 0: SU(0): 0x1d26be0: ch = SW 0x1d29320, 0x1d272e0, 0x1d26de0, 0x1d273e0:1<Mem:ST4[@eicas_discretes]> [ORD=21] [ID=0]


*** Scheduling [0]: SU(0): 0x1d26be0: ch = SW 0x1d29320, 0x1d272e0, 0x1d26de0, 0x1d273e0:1<Mem:ST4[@eicas_discretes]> [ORD=21] [ID=0]


Examining Available:
Height 1: SU(5): 0x1d29320: i32 = ORI 0x1d273e0, 0x1d268e0 [ORD=20] [ID=5]


*** Scheduling [1]: SU(5): 0x1d29320: i32 = ORI 0x1d273e0, 0x1d268e0 [ORD=20] [ID=5]


Examining Available:
Height 2: SU(1): 0x1d273e0: i32,ch = LW 0x1d272e0, 0x1d26de0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=19] [ID=1]


*** Scheduling [2]: SU(1): 0x1d273e0: i32,ch = LW 0x1d272e0, 0x1d26de0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=19] [ID=1]


Examining Available:
Height 3: SU(2): 0x1d272e0: i32 = ADD 0x1d266e0, 0x1d26ce0 [ID=2]


*** Scheduling [3]: SU(2): 0x1d272e0: i32 = ADD 0x1d266e0, 0x1d26ce0 [ID=2]


Examining Available:
Height 4: SU(4): 0x1d266e0: i32 = ADDI 0x1d29420, 0x1d270e0 [ID=4]

Height 4: SU(3): 0x1d26ce0: i32 = LUI 0x1d271e0 [ID=3]


*** Scheduling [4]: SU(4): 0x1d266e0: i32 = ADDI 0x1d29420, 0x1d270e0 [ID=4]


Examining Available:
Height 4: SU(3): 0x1d26ce0: i32 = LUI 0x1d271e0 [ID=3]


*** Scheduling [5]: SU(3): 0x1d26ce0: i32 = LUI 0x1d271e0 [ID=3]

*** Final schedule ***
SU(3): 0x1d26ce0: i32 = LUI 0x1d271e0 [ID=3]

SU(4): 0x1d266e0: i32 = ADDI 0x1d29420, 0x1d270e0 [ID=4]

SU(2): 0x1d272e0: i32 = ADD 0x1d266e0, 0x1d26ce0 [ID=2]

SU(1): 0x1d273e0: i32,ch = LW 0x1d272e0, 0x1d26de0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=19] [ID=1]

SU(5): 0x1d29320: i32 = ORI 0x1d273e0, 0x1d268e0 [ORD=20] [ID=5]

SU(0): 0x1d26be0: ch = SW 0x1d29320, 0x1d272e0, 0x1d26de0, 0x1d273e0:1<Mem:ST4[@eicas_discretes]> [ORD=21] [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %15 = load i32** %2, align 4
I was here to add   %2 = alloca i32*, align 4
with I type i32*and sd value :0x1d29420: i32 = FrameIndex<1>
new load?0x1d26be0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d26de0<LD4[%2]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x1d268e0: i32 = Constant<0>

    0x1d09b38: ch = EntryToken

    0x1d29420: i32 = FrameIndex<1>

    0x1d26de0: i32 = undef

  0x1d26be0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d26de0<LD4[%2]>

  0x1d09b38: ch = EntryToken


visiting load instruction   %17 = load i32* %16, align 4
with I type i32and sd value :0x1d272e0: i32 = add 0x1d26be0, 0x1d273e0
new load?0x1d266e0: i32,ch = load 0x1d09b38, 0x1d272e0, 0x1d26de0<LD4[%16]>
dag after load is dealt with?SelectionDAG has 9 nodes:
  0x1d268e0: i32 = Constant<0>

  0x1d26de0: i32 = undef [ORD=22]

  0x1d29320: i64 = Constant<8>

    0x1d09b38: <multiple use>
        0x1d09b38: <multiple use>
        0x1d29420: i32 = FrameIndex<1> [ORD=22]

        0x1d26de0: <multiple use>
      0x1d26be0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d26de0<LD4[%2]> [ORD=22]

      0x1d273e0: i32 = Constant<8> [ORD=23]

    0x1d272e0: i32 = add 0x1d26be0, 0x1d273e0 [ORD=23]

    0x1d26de0: <multiple use>
  0x1d266e0: i32,ch = load 0x1d09b38, 0x1d272e0, 0x1d26de0<LD4[%16]>

  0x1d09b38: ch = EntryToken [ORD=22]


I was here to add i32 250
Initial selection DAG: BB#4 'AssignFunction3:AssignFunction3.if.end5'
SelectionDAG has 16 nodes:
  0x1d09b38: ch = EntryToken [ORD=22]

  0x1d268e0: i32 = Constant<0>

  0x1d26de0: i32 = undef [ORD=22]

  0x1d29320: i64 = Constant<8>

      0x1d09b38: <multiple use>
          0x1d09b38: <multiple use>
              0x1d09b38: <multiple use>
              0x1d29420: i32 = FrameIndex<1> [ORD=22]

              0x1d26de0: <multiple use>
            0x1d26be0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d26de0<LD4[%2]> [ORD=22]

            0x1d273e0: i32 = Constant<8> [ORD=23]

          0x1d272e0: i32 = add 0x1d26be0, 0x1d273e0 [ORD=23]

          0x1d26de0: <multiple use>
        0x1d266e0: i32,ch = load 0x1d09b38, 0x1d272e0, 0x1d26de0<LD4[%16]> [ORD=24]

        0x1d26ce0: i32 = Constant<250> [ORD=25]

        0x1d270e0: ch = setgt [ORD=25]

      0x1d271e0: i1 = setcc 0x1d266e0, 0x1d26ce0, 0x1d270e0 [ORD=25]

      0x1d26fe0: ch = BasicBlock<AssignFunction3.if.then9 0x1d36490>

    0x1d26ae0: ch = brcond 0x1d09b38, 0x1d271e0, 0x1d26fe0

    0x1d269e0: ch = BasicBlock<AssignFunction3.lor.lhs.false 0x1d363e0>

  0x1d265e0: ch = br 0x1d26ae0, 0x1d269e0


Optimized lowered selection DAG: BB#4 'AssignFunction3:AssignFunction3.if.end5'
SelectionDAG has 14 nodes:
  0x1d09b38: ch = EntryToken [ORD=22]

  0x1d26de0: i32 = undef [ORD=22]

      0x1d09b38: <multiple use>
          0x1d09b38: <multiple use>
              0x1d09b38: <multiple use>
              0x1d29420: i32 = FrameIndex<1> [ORD=22]

              0x1d26de0: <multiple use>
            0x1d26be0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d26de0<LD4[%2]> [ORD=22]

            0x1d273e0: i32 = Constant<8> [ORD=23]

          0x1d272e0: i32 = add 0x1d26be0, 0x1d273e0 [ORD=23]

          0x1d26de0: <multiple use>
        0x1d266e0: i32,ch = load 0x1d09b38, 0x1d272e0, 0x1d26de0<LD4[%16]> [ORD=24]

        0x1d26ce0: i32 = Constant<250> [ORD=25]

        0x1d270e0: ch = setgt [ORD=25]

      0x1d271e0: i1 = setcc 0x1d266e0, 0x1d26ce0, 0x1d270e0 [ORD=25]

      0x1d26fe0: ch = BasicBlock<AssignFunction3.if.then9 0x1d36490>

    0x1d26ae0: ch = brcond 0x1d09b38, 0x1d271e0, 0x1d26fe0

    0x1d269e0: ch = BasicBlock<AssignFunction3.lor.lhs.false 0x1d363e0>

  0x1d265e0: ch = br 0x1d26ae0, 0x1d269e0


Legally typed node: 0x1d269e0: ch = BasicBlock<AssignFunction3.lor.lhs.false 0x1d363e0> [ID=0]

Legally typed node: 0x1d26fe0: ch = BasicBlock<AssignFunction3.if.then9 0x1d36490> [ID=0]

Legally typed node: 0x1d270e0: ch = setgt [ORD=25] [ID=0]

Legally typed node: 0x1d26ce0: i32 = Constant<250> [ORD=25] [ID=0]

Legally typed node: 0x1d273e0: i32 = Constant<8> [ORD=23] [ID=0]

Legally typed node: 0x1d26de0: i32 = undef [ORD=22] [ID=0]

Legally typed node: 0x1d29420: i32 = FrameIndex<1> [ORD=22] [ID=0]

Legally typed node: 0x1d09b38: ch = EntryToken [ORD=22] [ID=0]

Legally typed node: 0x1d26be0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d26de0<LD4[%2]> [ORD=22] [ID=0]

Legally typed node: 0x1d272e0: i32 = add 0x1d26be0, 0x1d273e0 [ORD=23] [ID=0]

Legally typed node: 0x1d266e0: i32,ch = load 0x1d09b38, 0x1d272e0, 0x1d26de0<LD4[%16]> [ORD=24] [ID=0]

Promote integer result: 0x1d271e0: i1 = setcc 0x1d266e0, 0x1d26ce0, 0x1d270e0 [ORD=25] [ID=0]

Promote integer operand: 0x1d26ae0: ch = brcond 0x1d09b38, 0x1d271e0, 0x1d26fe0 [ID=0]

Promote integer operand: 0x1d29320: i32 = zero_extend 0x1d271e0 [ID=0]

Legally typed node: 0x1d26ee0: i32 = Constant<1> [ID=0]

Legally typed node: 0x1d268e0: i32 = setcc 0x1d266e0, 0x1d26ce0, 0x1d270e0 [ORD=25] [ID=0]

Legally typed node: 0x1d29220: i32 = and 0x1d268e0, 0x1d26ee0 [ID=0]

Legally typed node: 0x1d26ae0: ch = brcond 0x1d09b38, 0x1d29220, 0x1d26fe0 [ID=0]

Legally typed node: 0x1d265e0: ch = br 0x1d26ae0, 0x1d269e0 [ID=0]

Legally typed node: 0x7fff243c9bc0: ch = handlenode 0x1d265e0 [ID=0]

Type-legalized selection DAG: BB#4 'AssignFunction3:AssignFunction3.if.end5'
SelectionDAG has 16 nodes:
  0x1d09b38: ch = EntryToken [ORD=22] [ID=-3]

  0x1d26de0: i32 = undef [ORD=22] [ID=-3]

      0x1d09b38: <multiple use>
            0x1d09b38: <multiple use>
                0x1d09b38: <multiple use>
                0x1d29420: i32 = FrameIndex<1> [ORD=22] [ID=-3]

                0x1d26de0: <multiple use>
              0x1d26be0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d26de0<LD4[%2]> [ORD=22] [ID=-3]

              0x1d273e0: i32 = Constant<8> [ORD=23] [ID=-3]

            0x1d272e0: i32 = add 0x1d26be0, 0x1d273e0 [ORD=23] [ID=-3]

            0x1d26de0: <multiple use>
          0x1d266e0: i32,ch = load 0x1d09b38, 0x1d272e0, 0x1d26de0<LD4[%16]> [ORD=24] [ID=-3]

          0x1d26ce0: i32 = Constant<250> [ORD=25] [ID=-3]

          0x1d270e0: ch = setgt [ORD=25] [ID=-3]

        0x1d268e0: i32 = setcc 0x1d266e0, 0x1d26ce0, 0x1d270e0 [ORD=25] [ID=-3]

        0x1d26ee0: i32 = Constant<1> [ID=-3]

      0x1d29220: i32 = and 0x1d268e0, 0x1d26ee0 [ID=-3]

      0x1d26fe0: ch = BasicBlock<AssignFunction3.if.then9 0x1d36490> [ID=-3]

    0x1d26ae0: ch = brcond 0x1d09b38, 0x1d29220, 0x1d26fe0 [ID=-3]

    0x1d269e0: ch = BasicBlock<AssignFunction3.lor.lhs.false 0x1d363e0> [ID=-3]

  0x1d265e0: ch = br 0x1d26ae0, 0x1d269e0 [ID=-3]



Replacing.2 0x1d29220: i32 = and 0x1d268e0, 0x1d26ee0 [ID=-3]

With: 0x1d268e0: i32 = setcc 0x1d266e0, 0x1d26ce0, 0x1d270e0 [ORD=25] [ID=-3]

Optimized type-legalized selection DAG: BB#4 'AssignFunction3:AssignFunction3.if.end5'
SelectionDAG has 14 nodes:
  0x1d09b38: ch = EntryToken [ORD=22] [ID=-3]

  0x1d26de0: i32 = undef [ORD=22] [ID=-3]

      0x1d09b38: <multiple use>
          0x1d09b38: <multiple use>
              0x1d09b38: <multiple use>
              0x1d29420: i32 = FrameIndex<1> [ORD=22] [ID=-3]

              0x1d26de0: <multiple use>
            0x1d26be0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d26de0<LD4[%2]> [ORD=22] [ID=-3]

            0x1d273e0: i32 = Constant<8> [ORD=23] [ID=-3]

          0x1d272e0: i32 = add 0x1d26be0, 0x1d273e0 [ORD=23] [ID=-3]

          0x1d26de0: <multiple use>
        0x1d266e0: i32,ch = load 0x1d09b38, 0x1d272e0, 0x1d26de0<LD4[%16]> [ORD=24] [ID=-3]

        0x1d26ce0: i32 = Constant<250> [ORD=25] [ID=-3]

        0x1d270e0: ch = setgt [ORD=25] [ID=-3]

      0x1d268e0: i32 = setcc 0x1d266e0, 0x1d26ce0, 0x1d270e0 [ORD=25] [ID=-3]

      0x1d26fe0: ch = BasicBlock<AssignFunction3.if.then9 0x1d36490> [ID=-3]

    0x1d26ae0: ch = brcond 0x1d09b38, 0x1d268e0, 0x1d26fe0 [ID=-3]

    0x1d269e0: ch = BasicBlock<AssignFunction3.lor.lhs.false 0x1d363e0> [ID=-3]

  0x1d265e0: ch = br 0x1d26ae0, 0x1d269e0 [ID=-3]


Legalized selection DAG: BB#4 'AssignFunction3:AssignFunction3.if.end5'
SelectionDAG has 14 nodes:
  0x1d09b38: ch = EntryToken [ORD=22] [ID=0]

  0x1d26de0: i32 = undef [ORD=22] [ID=2]

      0x1d09b38: <multiple use>
          0x1d09b38: <multiple use>
              0x1d09b38: <multiple use>
              0x1d29420: i32 = FrameIndex<1> [ORD=22] [ID=1]

              0x1d26de0: <multiple use>
            0x1d26be0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d26de0<LD4[%2]> [ORD=22] [ID=8]

            0x1d273e0: i32 = Constant<8> [ORD=23] [ID=3]

          0x1d272e0: i32 = add 0x1d26be0, 0x1d273e0 [ORD=23] [ID=9]

          0x1d26de0: <multiple use>
        0x1d266e0: i32,ch = load 0x1d09b38, 0x1d272e0, 0x1d26de0<LD4[%16]> [ORD=24] [ID=10]

        0x1d26ce0: i32 = Constant<250> [ORD=25] [ID=4]

        0x1d270e0: ch = setgt [ORD=25] [ID=5]

      0x1d268e0: i32 = setcc 0x1d266e0, 0x1d26ce0, 0x1d270e0 [ORD=25] [ID=11]

      0x1d26fe0: ch = BasicBlock<AssignFunction3.if.then9 0x1d36490> [ID=6]

    0x1d26ae0: ch = brcond 0x1d09b38, 0x1d268e0, 0x1d26fe0 [ID=12]

    0x1d269e0: ch = BasicBlock<AssignFunction3.lor.lhs.false 0x1d363e0> [ID=7]

  0x1d265e0: ch = br 0x1d26ae0, 0x1d269e0 [ID=13]


Optimized legalized selection DAG: BB#4 'AssignFunction3:AssignFunction3.if.end5'
SelectionDAG has 14 nodes:
  0x1d09b38: ch = EntryToken [ORD=22] [ID=0]

  0x1d26de0: i32 = undef [ORD=22] [ID=2]

      0x1d09b38: <multiple use>
          0x1d09b38: <multiple use>
              0x1d09b38: <multiple use>
              0x1d29420: i32 = FrameIndex<1> [ORD=22] [ID=1]

              0x1d26de0: <multiple use>
            0x1d26be0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d26de0<LD4[%2]> [ORD=22] [ID=8]

            0x1d273e0: i32 = Constant<8> [ORD=23] [ID=3]

          0x1d272e0: i32 = add 0x1d26be0, 0x1d273e0 [ORD=23] [ID=9]

          0x1d26de0: <multiple use>
        0x1d266e0: i32,ch = load 0x1d09b38, 0x1d272e0, 0x1d26de0<LD4[%16]> [ORD=24] [ID=10]

        0x1d26ce0: i32 = Constant<250> [ORD=25] [ID=4]

        0x1d270e0: ch = setgt [ORD=25] [ID=5]

      0x1d268e0: i32 = setcc 0x1d266e0, 0x1d26ce0, 0x1d270e0 [ORD=25] [ID=11]

      0x1d26fe0: ch = BasicBlock<AssignFunction3.if.then9 0x1d36490> [ID=6]

    0x1d26ae0: ch = brcond 0x1d09b38, 0x1d268e0, 0x1d26fe0 [ID=12]

    0x1d269e0: ch = BasicBlock<AssignFunction3.lor.lhs.false 0x1d363e0> [ID=7]

  0x1d265e0: ch = br 0x1d26ae0, 0x1d269e0 [ID=13]


===== Instruction selection begins: BB#4 'AssignFunction3.if.end5'
ISEL: Starting pattern match on root node: 0x1d265e0: ch = br 0x1d26ae0, 0x1d269e0 [ID=13]

  Initial Opcode index to 1938
  Morphed node: 0x1d265e0: ch = JAL 0x1d269e0, 0x1d26ae0

ISEL: Match complete!
=> 0x1d265e0: ch = JAL 0x1d269e0, 0x1d26ae0

ISEL: Starting pattern match on root node: 0x1d26ae0: ch = brcond 0x1d09b38, 0x1d268e0, 0x1d26fe0 [ID=12]

  Initial Opcode index to 1439
  Skipped scope entry (due to false predicate) at index 1456, continuing at 1477
  Skipped scope entry (due to false predicate) at index 1478, continuing at 1499
  Skipped scope entry (due to false predicate) at index 1500, continuing at 1521
  Skipped scope entry (due to false predicate) at index 1522, continuing at 1543
  Skipped scope entry (due to false predicate) at index 1544, continuing at 1565
  Skipped scope entry (due to false predicate) at index 1566, continuing at 1587
  Morphed node: 0x1d26ae0: ch = BGT 0x1d26fe0, 0x1d266e0, 0x1d26ce0, 0x1d09b38

ISEL: Match complete!
=> 0x1d26ae0: ch = BGT 0x1d26fe0, 0x1d266e0, 0x1d26ce0, 0x1d09b38

ISEL: Starting pattern match on root node: 0x1d266e0: i32,ch = load 0x1d09b38, 0x1d272e0, 0x1d26de0<LD4[%16]> [ORD=24] [ID=10]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x1d266e0: i32,ch = LW 0x1d26be0, 0x1d270e0, 0x1d09b38<Mem:LD4[%16]> [ORD=24]

ISEL: Match complete!
=> 0x1d266e0: i32,ch = LW 0x1d26be0, 0x1d270e0, 0x1d09b38<Mem:LD4[%16]> [ORD=24]

ISEL: Starting pattern match on root node: 0x1d26be0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d26de0<LD4[%2]> [ORD=22] [ID=8]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x1d26be0: i32,ch = LW 0x1d29420, 0x1d273e0, 0x1d09b38<Mem:LD4[%2]> [ORD=22]

ISEL: Match complete!
=> 0x1d26be0: i32,ch = LW 0x1d29420, 0x1d273e0, 0x1d09b38<Mem:LD4[%2]> [ORD=22]

=> 0x1d269e0: ch = BasicBlock<AssignFunction3.lor.lhs.false 0x1d363e0>

=> 0x1d26fe0: ch = BasicBlock<AssignFunction3.if.then9 0x1d36490>

ISEL: Starting pattern match on root node: 0x1d26ce0: i32 = Constant<250> [ORD=25] [ID=4]

  Initial Opcode index to 1226
comparing 0 and 250 and returning value:0
  Skipped scope entry (due to false predicate) at index 1228, continuing at 1236
  Morphed node: 0x1d26ce0: i32 = ADDI 0x1d26de0, 0x1d272e0 [ORD=25]

ISEL: Match complete!
=> 0x1d26ce0: i32 = ADDI 0x1d26de0, 0x1d272e0 [ORD=25]

=> 0x1d09b38: ch = EntryToken [ORD=22]

===== Instruction selection ends:
Selected selection DAG: BB#4 'AssignFunction3:AssignFunction3.if.end5'
SelectionDAG has 15 nodes:
  0x1d09b38: ch = EntryToken [ORD=22]

    0x1d269e0: ch = BasicBlock<AssignFunction3.lor.lhs.false 0x1d363e0>

      0x1d26fe0: ch = BasicBlock<AssignFunction3.if.then9 0x1d36490>

            0x1d268e0: i32 = Register %t5

            0x1d26ee0: i32 = TargetFrameIndex<1>

          0x1d29420: i32 = ADDI 0x1d268e0, 0x1d26ee0 [ORD=22]

          0x1d273e0: i32 = TargetConstant<0>

          0x1d09b38: <multiple use>
        0x1d26be0: i32,ch = LW 0x1d29420, 0x1d273e0, 0x1d09b38<Mem:LD4[%2]> [ORD=22]

        0x1d270e0: i32 = TargetConstant<8>

        0x1d09b38: <multiple use>
      0x1d266e0: i32,ch = LW 0x1d26be0, 0x1d270e0, 0x1d09b38<Mem:LD4[%16]> [ORD=24]

        0x1d26de0: i32 = Register %zero

        0x1d272e0: i32 = TargetConstant<250>

      0x1d26ce0: i32 = ADDI 0x1d26de0, 0x1d272e0 [ORD=25]

      0x1d09b38: <multiple use>
    0x1d26ae0: ch = BGT 0x1d26fe0, 0x1d266e0, 0x1d26ce0, 0x1d09b38

  0x1d265e0: ch = JAL 0x1d269e0, 0x1d26ae0


********** List Scheduling BB#4 'AssignFunction3.if.end5' **********
SU(0): 0x1d265e0: ch = JAL 0x1d269e0, 0x1d26ae0 [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x1d26ae0: ch = BGT 0x1d26fe0, 0x1d266e0, 0x1d26ce0, 0x1d09b38 [ID=1]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(3): Latency=1
   val SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x1d26ce0: i32 = ADDI 0x1d26de0, 0x1d272e0 [ORD=25] [ID=2]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
   val SU(1): Latency=1

SU(3): 0x1d266e0: i32,ch = LW 0x1d26be0, 0x1d270e0, 0x1d09b38<Mem:LD4[%16]> [ORD=24] [ID=3]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(4): Latency=1
  Successors:
   val SU(1): Latency=1

SU(4): 0x1d26be0: i32,ch = LW 0x1d29420, 0x1d273e0, 0x1d09b38<Mem:LD4[%2]> [ORD=22] [ID=4]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(5): Latency=1
  Successors:
   val SU(3): Latency=1

SU(5): 0x1d29420: i32 = ADDI 0x1d268e0, 0x1d26ee0 [ORD=22] [ID=5]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(4): Latency=1


Examining Available:
Height 0: SU(0): 0x1d265e0: ch = JAL 0x1d269e0, 0x1d26ae0 [ID=0]


*** Scheduling [0]: SU(0): 0x1d265e0: ch = JAL 0x1d269e0, 0x1d26ae0 [ID=0]


Examining Available:
Height 1: SU(1): 0x1d26ae0: ch = BGT 0x1d26fe0, 0x1d266e0, 0x1d26ce0, 0x1d09b38 [ID=1]


*** Scheduling [1]: SU(1): 0x1d26ae0: ch = BGT 0x1d26fe0, 0x1d266e0, 0x1d26ce0, 0x1d09b38 [ID=1]


Examining Available:
Height 2: SU(2): 0x1d26ce0: i32 = ADDI 0x1d26de0, 0x1d272e0 [ORD=25] [ID=2]

Height 2: SU(3): 0x1d266e0: i32,ch = LW 0x1d26be0, 0x1d270e0, 0x1d09b38<Mem:LD4[%16]> [ORD=24] [ID=3]


*** Scheduling [2]: SU(2): 0x1d26ce0: i32 = ADDI 0x1d26de0, 0x1d272e0 [ORD=25] [ID=2]


Examining Available:
Height 2: SU(3): 0x1d266e0: i32,ch = LW 0x1d26be0, 0x1d270e0, 0x1d09b38<Mem:LD4[%16]> [ORD=24] [ID=3]


*** Scheduling [3]: SU(3): 0x1d266e0: i32,ch = LW 0x1d26be0, 0x1d270e0, 0x1d09b38<Mem:LD4[%16]> [ORD=24] [ID=3]


Examining Available:
Height 4: SU(4): 0x1d26be0: i32,ch = LW 0x1d29420, 0x1d273e0, 0x1d09b38<Mem:LD4[%2]> [ORD=22] [ID=4]


*** Scheduling [4]: SU(4): 0x1d26be0: i32,ch = LW 0x1d29420, 0x1d273e0, 0x1d09b38<Mem:LD4[%2]> [ORD=22] [ID=4]


Examining Available:
Height 5: SU(5): 0x1d29420: i32 = ADDI 0x1d268e0, 0x1d26ee0 [ORD=22] [ID=5]


*** Scheduling [5]: SU(5): 0x1d29420: i32 = ADDI 0x1d268e0, 0x1d26ee0 [ORD=22] [ID=5]

*** Final schedule ***
SU(5): 0x1d29420: i32 = ADDI 0x1d268e0, 0x1d26ee0 [ORD=22] [ID=5]

SU(4): 0x1d26be0: i32,ch = LW 0x1d29420, 0x1d273e0, 0x1d09b38<Mem:LD4[%2]> [ORD=22] [ID=4]

SU(3): 0x1d266e0: i32,ch = LW 0x1d26be0, 0x1d270e0, 0x1d09b38<Mem:LD4[%16]> [ORD=24] [ID=3]

SU(2): 0x1d26ce0: i32 = ADDI 0x1d26de0, 0x1d272e0 [ORD=25] [ID=2]

SU(1): 0x1d26ae0: ch = BGT 0x1d26fe0, 0x1d266e0, 0x1d26ce0, 0x1d09b38 [ID=1]

SU(0): 0x1d265e0: ch = JAL 0x1d269e0, 0x1d26ae0 [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %19 = load i32** %2, align 4
I was here to add   %2 = alloca i32*, align 4
with I type i32*and sd value :0x1d26ee0: i32 = FrameIndex<1>
new load?0x1d26de0: i32,ch = load 0x1d09b38, 0x1d26ee0, 0x1d272e0<LD4[%2]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x1d268e0: i32 = Constant<0>

    0x1d09b38: ch = EntryToken

    0x1d26ee0: i32 = FrameIndex<1>

    0x1d272e0: i32 = undef

  0x1d26de0: i32,ch = load 0x1d09b38, 0x1d26ee0, 0x1d272e0<LD4[%2]>

  0x1d09b38: ch = EntryToken


visiting load instruction   %21 = load i32* %20, align 4
with I type i32and sd value :0x1d265e0: i32 = add 0x1d26de0, 0x1d270e0
new load?0x1d26ae0: i32,ch = load 0x1d09b38, 0x1d265e0, 0x1d272e0<LD4[%20]>
dag after load is dealt with?SelectionDAG has 9 nodes:
  0x1d268e0: i32 = Constant<0>

  0x1d272e0: i32 = undef [ORD=26]

  0x1d273e0: i64 = Constant<12>

    0x1d09b38: <multiple use>
        0x1d09b38: <multiple use>
        0x1d26ee0: i32 = FrameIndex<1> [ORD=26]

        0x1d272e0: <multiple use>
      0x1d26de0: i32,ch = load 0x1d09b38, 0x1d26ee0, 0x1d272e0<LD4[%2]> [ORD=26]

      0x1d270e0: i32 = Constant<12> [ORD=27]

    0x1d265e0: i32 = add 0x1d26de0, 0x1d270e0 [ORD=27]

    0x1d272e0: <multiple use>
  0x1d26ae0: i32,ch = load 0x1d09b38, 0x1d265e0, 0x1d272e0<LD4[%20]>

  0x1d09b38: ch = EntryToken [ORD=26]


I was here to add i32 250
Initial selection DAG: BB#5 'AssignFunction3:AssignFunction3.lor.lhs.false'
SelectionDAG has 18 nodes:
  0x1d09b38: ch = EntryToken [ORD=26]

  0x1d268e0: i32 = Constant<0>

  0x1d272e0: i32 = undef [ORD=26]

  0x1d273e0: i64 = Constant<12>

      0x1d09b38: <multiple use>
            0x1d09b38: <multiple use>
                0x1d09b38: <multiple use>
                0x1d26ee0: i32 = FrameIndex<1> [ORD=26]

                0x1d272e0: <multiple use>
              0x1d26de0: i32,ch = load 0x1d09b38, 0x1d26ee0, 0x1d272e0<LD4[%2]> [ORD=26]

              0x1d270e0: i32 = Constant<12> [ORD=27]

            0x1d265e0: i32 = add 0x1d26de0, 0x1d270e0 [ORD=27]

            0x1d272e0: <multiple use>
          0x1d26ae0: i32,ch = load 0x1d09b38, 0x1d265e0, 0x1d272e0<LD4[%20]> [ORD=28]

          0x1d266e0: i32 = Constant<250> [ORD=29]

          0x1d26be0: ch = setgt [ORD=29]

        0x1d269e0: i1 = setcc 0x1d26ae0, 0x1d266e0, 0x1d26be0 [ORD=29]

        0x1d26fe0: i1 = Constant<-1>

      0x1d26ce0: i1 = xor 0x1d269e0, 0x1d26fe0

      0x1d29420: ch = BasicBlock<AssignFunction3.if.end11 0x1d36540>

    0x1d29220: ch = brcond 0x1d09b38, 0x1d26ce0, 0x1d29420

    0x1d271e0: ch = BasicBlock<AssignFunction3.if.then9 0x1d36490>

  0x1d29320: ch = br 0x1d29220, 0x1d271e0



Replacing.3 0x1d26ce0: i1 = xor 0x1d269e0, 0x1d26fe0

With: 0x1d29520: i1 = setcc 0x1d26ae0, 0x1d266e0, 0x1d267e0


Replacing.3 0x1d29520: i1 = setcc 0x1d26ae0, 0x1d266e0, 0x1d267e0

With: 0x1d26fe0: i1 = setcc 0x1d26ae0, 0x1d26be0, 0x1d269e0

Optimized lowered selection DAG: BB#5 'AssignFunction3:AssignFunction3.lor.lhs.false'
SelectionDAG has 14 nodes:
  0x1d09b38: ch = EntryToken [ORD=26]

  0x1d272e0: i32 = undef [ORD=26]

      0x1d09b38: <multiple use>
          0x1d09b38: <multiple use>
              0x1d09b38: <multiple use>
              0x1d26ee0: i32 = FrameIndex<1> [ORD=26]

              0x1d272e0: <multiple use>
            0x1d26de0: i32,ch = load 0x1d09b38, 0x1d26ee0, 0x1d272e0<LD4[%2]> [ORD=26]

            0x1d270e0: i32 = Constant<12> [ORD=27]

          0x1d265e0: i32 = add 0x1d26de0, 0x1d270e0 [ORD=27]

          0x1d272e0: <multiple use>
        0x1d26ae0: i32,ch = load 0x1d09b38, 0x1d265e0, 0x1d272e0<LD4[%20]> [ORD=28]

        0x1d26be0: i32 = Constant<251>

        0x1d269e0: ch = setlt

      0x1d26fe0: i1 = setcc 0x1d26ae0, 0x1d26be0, 0x1d269e0

      0x1d29420: ch = BasicBlock<AssignFunction3.if.end11 0x1d36540>

    0x1d29220: ch = brcond 0x1d09b38, 0x1d26fe0, 0x1d29420

    0x1d271e0: ch = BasicBlock<AssignFunction3.if.then9 0x1d36490>

  0x1d29320: ch = br 0x1d29220, 0x1d271e0


Legally typed node: 0x1d269e0: ch = setlt [ID=0]

Legally typed node: 0x1d26be0: i32 = Constant<251> [ID=0]

Legally typed node: 0x1d271e0: ch = BasicBlock<AssignFunction3.if.then9 0x1d36490> [ID=0]

Legally typed node: 0x1d29420: ch = BasicBlock<AssignFunction3.if.end11 0x1d36540> [ID=0]

Legally typed node: 0x1d270e0: i32 = Constant<12> [ORD=27] [ID=0]

Legally typed node: 0x1d272e0: i32 = undef [ORD=26] [ID=0]

Legally typed node: 0x1d26ee0: i32 = FrameIndex<1> [ORD=26] [ID=0]

Legally typed node: 0x1d09b38: ch = EntryToken [ORD=26] [ID=0]

Legally typed node: 0x1d26de0: i32,ch = load 0x1d09b38, 0x1d26ee0, 0x1d272e0<LD4[%2]> [ORD=26] [ID=0]

Legally typed node: 0x1d265e0: i32 = add 0x1d26de0, 0x1d270e0 [ORD=27] [ID=0]

Legally typed node: 0x1d26ae0: i32,ch = load 0x1d09b38, 0x1d265e0, 0x1d272e0<LD4[%20]> [ORD=28] [ID=0]

Promote integer result: 0x1d26fe0: i1 = setcc 0x1d26ae0, 0x1d26be0, 0x1d269e0 [ID=0]

Promote integer operand: 0x1d29220: ch = brcond 0x1d09b38, 0x1d26fe0, 0x1d29420 [ID=0]

Promote integer operand: 0x1d273e0: i32 = zero_extend 0x1d26fe0 [ID=0]

Legally typed node: 0x1d266e0: i32 = Constant<1> [ID=0]

Legally typed node: 0x1d268e0: i32 = setcc 0x1d26ae0, 0x1d26be0, 0x1d269e0 [ID=0]

Legally typed node: 0x1d267e0: i32 = and 0x1d268e0, 0x1d266e0 [ID=0]

Legally typed node: 0x1d29220: ch = brcond 0x1d09b38, 0x1d267e0, 0x1d29420 [ID=0]

Legally typed node: 0x1d29320: ch = br 0x1d29220, 0x1d271e0 [ID=0]

Legally typed node: 0x7fff243c9bc0: ch = handlenode 0x1d29320 [ID=0]

Type-legalized selection DAG: BB#5 'AssignFunction3:AssignFunction3.lor.lhs.false'
SelectionDAG has 16 nodes:
  0x1d09b38: ch = EntryToken [ORD=26] [ID=-3]

  0x1d272e0: i32 = undef [ORD=26] [ID=-3]

      0x1d09b38: <multiple use>
            0x1d09b38: <multiple use>
                0x1d09b38: <multiple use>
                0x1d26ee0: i32 = FrameIndex<1> [ORD=26] [ID=-3]

                0x1d272e0: <multiple use>
              0x1d26de0: i32,ch = load 0x1d09b38, 0x1d26ee0, 0x1d272e0<LD4[%2]> [ORD=26] [ID=-3]

              0x1d270e0: i32 = Constant<12> [ORD=27] [ID=-3]

            0x1d265e0: i32 = add 0x1d26de0, 0x1d270e0 [ORD=27] [ID=-3]

            0x1d272e0: <multiple use>
          0x1d26ae0: i32,ch = load 0x1d09b38, 0x1d265e0, 0x1d272e0<LD4[%20]> [ORD=28] [ID=-3]

          0x1d26be0: i32 = Constant<251> [ID=-3]

          0x1d269e0: ch = setlt [ID=-3]

        0x1d268e0: i32 = setcc 0x1d26ae0, 0x1d26be0, 0x1d269e0 [ID=-3]

        0x1d266e0: i32 = Constant<1> [ID=-3]

      0x1d267e0: i32 = and 0x1d268e0, 0x1d266e0 [ID=-3]

      0x1d29420: ch = BasicBlock<AssignFunction3.if.end11 0x1d36540> [ID=-3]

    0x1d29220: ch = brcond 0x1d09b38, 0x1d267e0, 0x1d29420 [ID=-3]

    0x1d271e0: ch = BasicBlock<AssignFunction3.if.then9 0x1d36490> [ID=-3]

  0x1d29320: ch = br 0x1d29220, 0x1d271e0 [ID=-3]



Replacing.2 0x1d267e0: i32 = and 0x1d268e0, 0x1d266e0 [ID=-3]

With: 0x1d268e0: i32 = setcc 0x1d26ae0, 0x1d26be0, 0x1d269e0 [ID=-3]

Optimized type-legalized selection DAG: BB#5 'AssignFunction3:AssignFunction3.lor.lhs.false'
SelectionDAG has 14 nodes:
  0x1d09b38: ch = EntryToken [ORD=26] [ID=-3]

  0x1d272e0: i32 = undef [ORD=26] [ID=-3]

      0x1d09b38: <multiple use>
          0x1d09b38: <multiple use>
              0x1d09b38: <multiple use>
              0x1d26ee0: i32 = FrameIndex<1> [ORD=26] [ID=-3]

              0x1d272e0: <multiple use>
            0x1d26de0: i32,ch = load 0x1d09b38, 0x1d26ee0, 0x1d272e0<LD4[%2]> [ORD=26] [ID=-3]

            0x1d270e0: i32 = Constant<12> [ORD=27] [ID=-3]

          0x1d265e0: i32 = add 0x1d26de0, 0x1d270e0 [ORD=27] [ID=-3]

          0x1d272e0: <multiple use>
        0x1d26ae0: i32,ch = load 0x1d09b38, 0x1d265e0, 0x1d272e0<LD4[%20]> [ORD=28] [ID=-3]

        0x1d26be0: i32 = Constant<251> [ID=-3]

        0x1d269e0: ch = setlt [ID=-3]

      0x1d268e0: i32 = setcc 0x1d26ae0, 0x1d26be0, 0x1d269e0 [ID=-3]

      0x1d29420: ch = BasicBlock<AssignFunction3.if.end11 0x1d36540> [ID=-3]

    0x1d29220: ch = brcond 0x1d09b38, 0x1d268e0, 0x1d29420 [ID=-3]

    0x1d271e0: ch = BasicBlock<AssignFunction3.if.then9 0x1d36490> [ID=-3]

  0x1d29320: ch = br 0x1d29220, 0x1d271e0 [ID=-3]


Legalized selection DAG: BB#5 'AssignFunction3:AssignFunction3.lor.lhs.false'
SelectionDAG has 14 nodes:
  0x1d09b38: ch = EntryToken [ORD=26] [ID=0]

  0x1d272e0: i32 = undef [ORD=26] [ID=2]

      0x1d09b38: <multiple use>
          0x1d09b38: <multiple use>
              0x1d09b38: <multiple use>
              0x1d26ee0: i32 = FrameIndex<1> [ORD=26] [ID=1]

              0x1d272e0: <multiple use>
            0x1d26de0: i32,ch = load 0x1d09b38, 0x1d26ee0, 0x1d272e0<LD4[%2]> [ORD=26] [ID=8]

            0x1d270e0: i32 = Constant<12> [ORD=27] [ID=3]

          0x1d265e0: i32 = add 0x1d26de0, 0x1d270e0 [ORD=27] [ID=9]

          0x1d272e0: <multiple use>
        0x1d26ae0: i32,ch = load 0x1d09b38, 0x1d265e0, 0x1d272e0<LD4[%20]> [ORD=28] [ID=10]

        0x1d26be0: i32 = Constant<251> [ID=6]

        0x1d269e0: ch = setlt [ID=7]

      0x1d268e0: i32 = setcc 0x1d26ae0, 0x1d26be0, 0x1d269e0 [ID=11]

      0x1d29420: ch = BasicBlock<AssignFunction3.if.end11 0x1d36540> [ID=4]

    0x1d29220: ch = brcond 0x1d09b38, 0x1d268e0, 0x1d29420 [ID=12]

    0x1d271e0: ch = BasicBlock<AssignFunction3.if.then9 0x1d36490> [ID=5]

  0x1d29320: ch = br 0x1d29220, 0x1d271e0 [ID=13]


Optimized legalized selection DAG: BB#5 'AssignFunction3:AssignFunction3.lor.lhs.false'
SelectionDAG has 14 nodes:
  0x1d09b38: ch = EntryToken [ORD=26] [ID=0]

  0x1d272e0: i32 = undef [ORD=26] [ID=2]

      0x1d09b38: <multiple use>
          0x1d09b38: <multiple use>
              0x1d09b38: <multiple use>
              0x1d26ee0: i32 = FrameIndex<1> [ORD=26] [ID=1]

              0x1d272e0: <multiple use>
            0x1d26de0: i32,ch = load 0x1d09b38, 0x1d26ee0, 0x1d272e0<LD4[%2]> [ORD=26] [ID=8]

            0x1d270e0: i32 = Constant<12> [ORD=27] [ID=3]

          0x1d265e0: i32 = add 0x1d26de0, 0x1d270e0 [ORD=27] [ID=9]

          0x1d272e0: <multiple use>
        0x1d26ae0: i32,ch = load 0x1d09b38, 0x1d265e0, 0x1d272e0<LD4[%20]> [ORD=28] [ID=10]

        0x1d26be0: i32 = Constant<251> [ID=6]

        0x1d269e0: ch = setlt [ID=7]

      0x1d268e0: i32 = setcc 0x1d26ae0, 0x1d26be0, 0x1d269e0 [ID=11]

      0x1d29420: ch = BasicBlock<AssignFunction3.if.end11 0x1d36540> [ID=4]

    0x1d29220: ch = brcond 0x1d09b38, 0x1d268e0, 0x1d29420 [ID=12]

    0x1d271e0: ch = BasicBlock<AssignFunction3.if.then9 0x1d36490> [ID=5]

  0x1d29320: ch = br 0x1d29220, 0x1d271e0 [ID=13]


===== Instruction selection begins: BB#5 'AssignFunction3.lor.lhs.false'
ISEL: Starting pattern match on root node: 0x1d29320: ch = br 0x1d29220, 0x1d271e0 [ID=13]

  Initial Opcode index to 1938
  Morphed node: 0x1d29320: ch = JAL 0x1d271e0, 0x1d29220

ISEL: Match complete!
=> 0x1d29320: ch = JAL 0x1d271e0, 0x1d29220

ISEL: Starting pattern match on root node: 0x1d29220: ch = brcond 0x1d09b38, 0x1d268e0, 0x1d29420 [ID=12]

  Initial Opcode index to 1439
  Skipped scope entry (due to false predicate) at index 1456, continuing at 1477
  Skipped scope entry (due to false predicate) at index 1478, continuing at 1499
  Morphed node: 0x1d29220: ch = BLT 0x1d29420, 0x1d26ae0, 0x1d26be0, 0x1d09b38

ISEL: Match complete!
=> 0x1d29220: ch = BLT 0x1d29420, 0x1d26ae0, 0x1d26be0, 0x1d09b38

ISEL: Starting pattern match on root node: 0x1d26ae0: i32,ch = load 0x1d09b38, 0x1d265e0, 0x1d272e0<LD4[%20]> [ORD=28] [ID=10]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x1d26ae0: i32,ch = LW 0x1d26de0, 0x1d269e0, 0x1d09b38<Mem:LD4[%20]> [ORD=28]

ISEL: Match complete!
=> 0x1d26ae0: i32,ch = LW 0x1d26de0, 0x1d269e0, 0x1d09b38<Mem:LD4[%20]> [ORD=28]

ISEL: Starting pattern match on root node: 0x1d26de0: i32,ch = load 0x1d09b38, 0x1d26ee0, 0x1d272e0<LD4[%2]> [ORD=26] [ID=8]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x1d26de0: i32,ch = LW 0x1d26ee0, 0x1d270e0, 0x1d09b38<Mem:LD4[%2]> [ORD=26]

ISEL: Match complete!
=> 0x1d26de0: i32,ch = LW 0x1d26ee0, 0x1d270e0, 0x1d09b38<Mem:LD4[%2]> [ORD=26]

ISEL: Starting pattern match on root node: 0x1d26be0: i32 = Constant<251> [ID=6]

  Initial Opcode index to 1226
comparing 0 and 251 and returning value:0
  Skipped scope entry (due to false predicate) at index 1228, continuing at 1236
  Morphed node: 0x1d26be0: i32 = ADDI 0x1d272e0, 0x1d265e0

ISEL: Match complete!
=> 0x1d26be0: i32 = ADDI 0x1d272e0, 0x1d265e0

=> 0x1d271e0: ch = BasicBlock<AssignFunction3.if.then9 0x1d36490>

=> 0x1d29420: ch = BasicBlock<AssignFunction3.if.end11 0x1d36540>

=> 0x1d09b38: ch = EntryToken [ORD=26]

===== Instruction selection ends:
Selected selection DAG: BB#5 'AssignFunction3:AssignFunction3.lor.lhs.false'
SelectionDAG has 15 nodes:
  0x1d09b38: ch = EntryToken [ORD=26]

    0x1d271e0: ch = BasicBlock<AssignFunction3.if.then9 0x1d36490>

      0x1d29420: ch = BasicBlock<AssignFunction3.if.end11 0x1d36540>

            0x1d268e0: i32 = Register %t5

            0x1d266e0: i32 = TargetFrameIndex<1>

          0x1d26ee0: i32 = ADDI 0x1d268e0, 0x1d266e0 [ORD=26]

          0x1d270e0: i32 = TargetConstant<0>

          0x1d09b38: <multiple use>
        0x1d26de0: i32,ch = LW 0x1d26ee0, 0x1d270e0, 0x1d09b38<Mem:LD4[%2]> [ORD=26]

        0x1d269e0: i32 = TargetConstant<12>

        0x1d09b38: <multiple use>
      0x1d26ae0: i32,ch = LW 0x1d26de0, 0x1d269e0, 0x1d09b38<Mem:LD4[%20]> [ORD=28]

        0x1d272e0: i32 = Register %zero

        0x1d265e0: i32 = TargetConstant<251>

      0x1d26be0: i32 = ADDI 0x1d272e0, 0x1d265e0

      0x1d09b38: <multiple use>
    0x1d29220: ch = BLT 0x1d29420, 0x1d26ae0, 0x1d26be0, 0x1d09b38

  0x1d29320: ch = JAL 0x1d271e0, 0x1d29220


********** List Scheduling BB#5 'AssignFunction3.lor.lhs.false' **********
SU(0): 0x1d29320: ch = JAL 0x1d271e0, 0x1d29220 [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x1d29220: ch = BLT 0x1d29420, 0x1d26ae0, 0x1d26be0, 0x1d09b38 [ID=1]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(3): Latency=1
   val SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x1d26be0: i32 = ADDI 0x1d272e0, 0x1d265e0 [ID=2]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
   val SU(1): Latency=1

SU(3): 0x1d26ae0: i32,ch = LW 0x1d26de0, 0x1d269e0, 0x1d09b38<Mem:LD4[%20]> [ORD=28] [ID=3]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(4): Latency=1
  Successors:
   val SU(1): Latency=1

SU(4): 0x1d26de0: i32,ch = LW 0x1d26ee0, 0x1d270e0, 0x1d09b38<Mem:LD4[%2]> [ORD=26] [ID=4]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(5): Latency=1
  Successors:
   val SU(3): Latency=1

SU(5): 0x1d26ee0: i32 = ADDI 0x1d268e0, 0x1d266e0 [ORD=26] [ID=5]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(4): Latency=1


Examining Available:
Height 0: SU(0): 0x1d29320: ch = JAL 0x1d271e0, 0x1d29220 [ID=0]


*** Scheduling [0]: SU(0): 0x1d29320: ch = JAL 0x1d271e0, 0x1d29220 [ID=0]


Examining Available:
Height 1: SU(1): 0x1d29220: ch = BLT 0x1d29420, 0x1d26ae0, 0x1d26be0, 0x1d09b38 [ID=1]


*** Scheduling [1]: SU(1): 0x1d29220: ch = BLT 0x1d29420, 0x1d26ae0, 0x1d26be0, 0x1d09b38 [ID=1]


Examining Available:
Height 2: SU(2): 0x1d26be0: i32 = ADDI 0x1d272e0, 0x1d265e0 [ID=2]

Height 2: SU(3): 0x1d26ae0: i32,ch = LW 0x1d26de0, 0x1d269e0, 0x1d09b38<Mem:LD4[%20]> [ORD=28] [ID=3]


*** Scheduling [2]: SU(2): 0x1d26be0: i32 = ADDI 0x1d272e0, 0x1d265e0 [ID=2]


Examining Available:
Height 2: SU(3): 0x1d26ae0: i32,ch = LW 0x1d26de0, 0x1d269e0, 0x1d09b38<Mem:LD4[%20]> [ORD=28] [ID=3]


*** Scheduling [3]: SU(3): 0x1d26ae0: i32,ch = LW 0x1d26de0, 0x1d269e0, 0x1d09b38<Mem:LD4[%20]> [ORD=28] [ID=3]


Examining Available:
Height 4: SU(4): 0x1d26de0: i32,ch = LW 0x1d26ee0, 0x1d270e0, 0x1d09b38<Mem:LD4[%2]> [ORD=26] [ID=4]


*** Scheduling [4]: SU(4): 0x1d26de0: i32,ch = LW 0x1d26ee0, 0x1d270e0, 0x1d09b38<Mem:LD4[%2]> [ORD=26] [ID=4]


Examining Available:
Height 5: SU(5): 0x1d26ee0: i32 = ADDI 0x1d268e0, 0x1d266e0 [ORD=26] [ID=5]


*** Scheduling [5]: SU(5): 0x1d26ee0: i32 = ADDI 0x1d268e0, 0x1d266e0 [ORD=26] [ID=5]

*** Final schedule ***
SU(5): 0x1d26ee0: i32 = ADDI 0x1d268e0, 0x1d266e0 [ORD=26] [ID=5]

SU(4): 0x1d26de0: i32,ch = LW 0x1d26ee0, 0x1d270e0, 0x1d09b38<Mem:LD4[%2]> [ORD=26] [ID=4]

SU(3): 0x1d26ae0: i32,ch = LW 0x1d26de0, 0x1d269e0, 0x1d09b38<Mem:LD4[%20]> [ORD=28] [ID=3]

SU(2): 0x1d26be0: i32 = ADDI 0x1d272e0, 0x1d265e0 [ID=2]

SU(1): 0x1d29220: ch = BLT 0x1d29420, 0x1d26ae0, 0x1d26be0, 0x1d09b38 [ID=1]

SU(0): 0x1d29320: ch = JAL 0x1d271e0, 0x1d29220 [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %23 = load i32* @eicas_discretes, align 4
I was here to add @eicas_discretes = global i32 0, align 4
with I type i32and sd value :0x1d266e0: i32 = GlobalAddress<i32* @eicas_discretes> 0
new load?0x1d272e0: i32,ch = load 0x1d09b38, 0x1d266e0, 0x1d265e0<LD4[@eicas_discretes]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x1d268e0: i32 = Constant<0>

    0x1d09b38: ch = EntryToken

    0x1d266e0: i32 = GlobalAddress<i32* @eicas_discretes> 0

    0x1d265e0: i32 = undef

  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d266e0, 0x1d265e0<LD4[@eicas_discretes]>

  0x1d09b38: ch = EntryToken


I was here to add i32 4
store visit is after?  store i32 %24, i32* @eicas_discretes, align 4
whats in dag after store?SelectionDAG has 8 nodes:
  0x1d266e0: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=30]

  0x1d268e0: i32 = Constant<0>

  0x1d265e0: i32 = undef [ORD=30]

    0x1d09b38: ch = EntryToken [ORD=30]

    0x1d266e0: <multiple use>
    0x1d265e0: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d266e0, 0x1d265e0<LD4[@eicas_discretes]> [ORD=30]

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d270e0: i32 = Constant<4> [ORD=31]

    0x1d269e0: i32 = or 0x1d272e0, 0x1d270e0 [ORD=31]

    0x1d266e0: <multiple use>
    0x1d265e0: <multiple use>
  0x1d29320: ch = store 0x1d272e0:1, 0x1d269e0, 0x1d266e0, 0x1d265e0<ST4[@eicas_discretes]> [ORD=32]


Initial selection DAG: BB#6 'AssignFunction3:AssignFunction3.if.then9'
SelectionDAG has 8 nodes:
  0x1d266e0: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=30]

  0x1d268e0: i32 = Constant<0>

  0x1d265e0: i32 = undef [ORD=30]

    0x1d09b38: ch = EntryToken [ORD=30]

    0x1d266e0: <multiple use>
    0x1d265e0: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d266e0, 0x1d265e0<LD4[@eicas_discretes]> [ORD=30]

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d270e0: i32 = Constant<4> [ORD=31]

    0x1d269e0: i32 = or 0x1d272e0, 0x1d270e0 [ORD=31]

    0x1d266e0: <multiple use>
    0x1d265e0: <multiple use>
  0x1d29320: ch = store 0x1d272e0:1, 0x1d269e0, 0x1d266e0, 0x1d265e0<ST4[@eicas_discretes]> [ORD=32]


Optimized lowered selection DAG: BB#6 'AssignFunction3:AssignFunction3.if.then9'
SelectionDAG has 7 nodes:
  0x1d266e0: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=30]

  0x1d265e0: i32 = undef [ORD=30]

    0x1d09b38: ch = EntryToken [ORD=30]

    0x1d266e0: <multiple use>
    0x1d265e0: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d266e0, 0x1d265e0<LD4[@eicas_discretes]> [ORD=30]

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d270e0: i32 = Constant<4> [ORD=31]

    0x1d269e0: i32 = or 0x1d272e0, 0x1d270e0 [ORD=31]

    0x1d266e0: <multiple use>
    0x1d265e0: <multiple use>
  0x1d29320: ch = store 0x1d272e0:1, 0x1d269e0, 0x1d266e0, 0x1d265e0<ST4[@eicas_discretes]> [ORD=32]


Legally typed node: 0x1d270e0: i32 = Constant<4> [ORD=31] [ID=0]

Legally typed node: 0x1d265e0: i32 = undef [ORD=30] [ID=0]

Legally typed node: 0x1d266e0: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=30] [ID=0]

Legally typed node: 0x1d09b38: ch = EntryToken [ORD=30] [ID=0]

Legally typed node: 0x1d272e0: i32,ch = load 0x1d09b38, 0x1d266e0, 0x1d265e0<LD4[@eicas_discretes]> [ORD=30] [ID=0]

Legally typed node: 0x1d269e0: i32 = or 0x1d272e0, 0x1d270e0 [ORD=31] [ID=0]

Legally typed node: 0x1d29320: ch = store 0x1d272e0:1, 0x1d269e0, 0x1d266e0, 0x1d265e0<ST4[@eicas_discretes]> [ORD=32] [ID=0]

Legally typed node: 0x7fff243c9bc0: ch = handlenode 0x1d29320 [ID=0]

Type-legalized selection DAG: BB#6 'AssignFunction3:AssignFunction3.if.then9'
SelectionDAG has 7 nodes:
  0x1d266e0: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=30] [ID=-3]

  0x1d265e0: i32 = undef [ORD=30] [ID=-3]

    0x1d09b38: ch = EntryToken [ORD=30] [ID=-3]

    0x1d266e0: <multiple use>
    0x1d265e0: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d266e0, 0x1d265e0<LD4[@eicas_discretes]> [ORD=30] [ID=-3]

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d270e0: i32 = Constant<4> [ORD=31] [ID=-3]

    0x1d269e0: i32 = or 0x1d272e0, 0x1d270e0 [ORD=31] [ID=-3]

    0x1d266e0: <multiple use>
    0x1d265e0: <multiple use>
  0x1d29320: ch = store 0x1d272e0:1, 0x1d269e0, 0x1d266e0, 0x1d265e0<ST4[@eicas_discretes]> [ORD=32] [ID=-3]


Legalized selection DAG: BB#6 'AssignFunction3:AssignFunction3.if.then9'
SelectionDAG has 11 nodes:
  0x1d265e0: i32 = undef [ORD=30] [ID=2]

    0x1d09b38: ch = EntryToken [ORD=30] [ID=0]

    0x1d26be0: <multiple use>
    0x1d265e0: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d26be0, 0x1d265e0<LD4[@eicas_discretes]> [ORD=30] [ID=4]

      0x1d268e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

    0x1d26ae0: i32 = REDEFINEISD::Hi 0x1d268e0

      0x1d29220: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

    0x1d26de0: i32 = REDEFINEISD::Lo 0x1d29220

  0x1d26be0: i32 = add 0x1d26ae0, 0x1d26de0

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d270e0: i32 = Constant<4> [ORD=31] [ID=3]

    0x1d269e0: i32 = or 0x1d272e0, 0x1d270e0 [ORD=31] [ID=5]

    0x1d26be0: <multiple use>
    0x1d265e0: <multiple use>
  0x1d29320: ch = store 0x1d272e0:1, 0x1d269e0, 0x1d26be0, 0x1d265e0<ST4[@eicas_discretes]> [ORD=32] [ID=6]


Optimized legalized selection DAG: BB#6 'AssignFunction3:AssignFunction3.if.then9'
SelectionDAG has 11 nodes:
  0x1d265e0: i32 = undef [ORD=30] [ID=2]

    0x1d09b38: ch = EntryToken [ORD=30] [ID=0]

    0x1d26be0: <multiple use>
    0x1d265e0: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d26be0, 0x1d265e0<LD4[@eicas_discretes]> [ORD=30] [ID=4]

      0x1d268e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

    0x1d26ae0: i32 = REDEFINEISD::Hi 0x1d268e0

      0x1d29220: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

    0x1d26de0: i32 = REDEFINEISD::Lo 0x1d29220

  0x1d26be0: i32 = add 0x1d26ae0, 0x1d26de0

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d270e0: i32 = Constant<4> [ORD=31] [ID=3]

    0x1d269e0: i32 = or 0x1d272e0, 0x1d270e0 [ORD=31] [ID=5]

    0x1d26be0: <multiple use>
    0x1d265e0: <multiple use>
  0x1d29320: ch = store 0x1d272e0:1, 0x1d269e0, 0x1d26be0, 0x1d265e0<ST4[@eicas_discretes]> [ORD=32] [ID=6]


===== Instruction selection begins: BB#6 'AssignFunction3.if.then9'
ISEL: Starting pattern match on root node: 0x1d29320: ch = store 0x1d272e0:1, 0x1d269e0, 0x1d26be0, 0x1d265e0<ST4[@eicas_discretes]> [ORD=32] [ID=10]

  Initial Opcode index to 178
  Morphed node: 0x1d29320: ch = SW 0x1d269e0, 0x1d26be0, 0x1d266e0, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=32]

ISEL: Match complete!
=> 0x1d29320: ch = SW 0x1d269e0, 0x1d26be0, 0x1d266e0, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=32]

ISEL: Starting pattern match on root node: 0x1d269e0: i32 = or 0x1d272e0, 0x1d270e0 [ORD=31] [ID=9]

  Initial Opcode index to 567
  Morphed node: 0x1d269e0: i32 = ORI 0x1d272e0, 0x1d271e0 [ORD=31]

ISEL: Match complete!
=> 0x1d269e0: i32 = ORI 0x1d272e0, 0x1d271e0 [ORD=31]

ISEL: Starting pattern match on root node: 0x1d272e0: i32,ch = load 0x1d09b38, 0x1d26be0, 0x1d265e0<LD4[@eicas_discretes]> [ORD=30] [ID=8]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x1d272e0: i32,ch = LW 0x1d26be0, 0x1d266e0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=30]

ISEL: Match complete!
=> 0x1d272e0: i32,ch = LW 0x1d26be0, 0x1d266e0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=30]

ISEL: Starting pattern match on root node: 0x1d26be0: i32 = add 0x1d26ae0, 0x1d26de0 [ID=7]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x1d26be0: i32 = ADD 0x1d26de0, 0x1d26ae0

ISEL: Match complete!
=> 0x1d26be0: i32 = ADD 0x1d26de0, 0x1d26ae0

ISEL: Starting pattern match on root node: 0x1d26de0: i32 = REDEFINEISD::Lo 0x1d29220 [ID=6]

  Initial Opcode index to 1204
  Morphed node: 0x1d26de0: i32 = ADDI 0x1d265e0, 0x1d29220

ISEL: Match complete!
=> 0x1d26de0: i32 = ADDI 0x1d265e0, 0x1d29220

ISEL: Starting pattern match on root node: 0x1d26ae0: i32 = REDEFINEISD::Hi 0x1d268e0 [ID=5]

  Initial Opcode index to 1186
  Morphed node: 0x1d26ae0: i32 = LUI 0x1d268e0

ISEL: Match complete!
=> 0x1d26ae0: i32 = LUI 0x1d268e0

=> 0x1d29220: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

=> 0x1d268e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

=> 0x1d09b38: ch = EntryToken [ORD=30]

===== Instruction selection ends:
Selected selection DAG: BB#6 'AssignFunction3:AssignFunction3.if.then9'
SelectionDAG has 12 nodes:
      0x1d265e0: i32 = Register %zero

      0x1d29220: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

    0x1d26de0: i32 = ADDI 0x1d265e0, 0x1d29220

      0x1d268e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

    0x1d26ae0: i32 = LUI 0x1d268e0

  0x1d26be0: i32 = ADD 0x1d26de0, 0x1d26ae0

    0x1d26be0: <multiple use>
    0x1d266e0: <multiple use>
    0x1d09b38: ch = EntryToken [ORD=30]

  0x1d272e0: i32,ch = LW 0x1d26be0, 0x1d266e0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=30]

  0x1d266e0: i32 = TargetConstant<0>

      0x1d272e0: <multiple use>
      0x1d271e0: i32 = TargetConstant<4>

    0x1d269e0: i32 = ORI 0x1d272e0, 0x1d271e0 [ORD=31]

    0x1d26be0: <multiple use>
    0x1d266e0: <multiple use>
    0x1d272e0: <multiple use>
  0x1d29320: ch = SW 0x1d269e0, 0x1d26be0, 0x1d266e0, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=32]


********** List Scheduling BB#6 'AssignFunction3.if.then9' **********
SU(0): 0x1d29320: ch = SW 0x1d269e0, 0x1d26be0, 0x1d266e0, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=32] [ID=0]

  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
   val SU(5): Latency=1
   val SU(2): Latency=1
   ch  SU(1): Latency=1

SU(1): 0x1d272e0: i32,ch = LW 0x1d26be0, 0x1d266e0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=30] [ID=1]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1
   val SU(5): Latency=1

SU(2): 0x1d26be0: i32 = ADD 0x1d26de0, 0x1d26ae0 [ID=2]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(4): Latency=1
   val SU(3): Latency=1
  Successors:
   val SU(0): Latency=1
   val SU(1): Latency=1

SU(3): 0x1d26ae0: i32 = LUI 0x1d268e0 [ID=3]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(2): Latency=1

SU(4): 0x1d26de0: i32 = ADDI 0x1d265e0, 0x1d29220 [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(2): Latency=1

SU(5): 0x1d269e0: i32 = ORI 0x1d272e0, 0x1d271e0 [ORD=31] [ID=5]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(1): Latency=1
  Successors:
   val SU(0): Latency=1


Examining Available:
Height 0: SU(0): 0x1d29320: ch = SW 0x1d269e0, 0x1d26be0, 0x1d266e0, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=32] [ID=0]


*** Scheduling [0]: SU(0): 0x1d29320: ch = SW 0x1d269e0, 0x1d26be0, 0x1d266e0, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=32] [ID=0]


Examining Available:
Height 1: SU(5): 0x1d269e0: i32 = ORI 0x1d272e0, 0x1d271e0 [ORD=31] [ID=5]


*** Scheduling [1]: SU(5): 0x1d269e0: i32 = ORI 0x1d272e0, 0x1d271e0 [ORD=31] [ID=5]


Examining Available:
Height 2: SU(1): 0x1d272e0: i32,ch = LW 0x1d26be0, 0x1d266e0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=30] [ID=1]


*** Scheduling [2]: SU(1): 0x1d272e0: i32,ch = LW 0x1d26be0, 0x1d266e0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=30] [ID=1]


Examining Available:
Height 3: SU(2): 0x1d26be0: i32 = ADD 0x1d26de0, 0x1d26ae0 [ID=2]


*** Scheduling [3]: SU(2): 0x1d26be0: i32 = ADD 0x1d26de0, 0x1d26ae0 [ID=2]


Examining Available:
Height 4: SU(4): 0x1d26de0: i32 = ADDI 0x1d265e0, 0x1d29220 [ID=4]

Height 4: SU(3): 0x1d26ae0: i32 = LUI 0x1d268e0 [ID=3]


*** Scheduling [4]: SU(4): 0x1d26de0: i32 = ADDI 0x1d265e0, 0x1d29220 [ID=4]


Examining Available:
Height 4: SU(3): 0x1d26ae0: i32 = LUI 0x1d268e0 [ID=3]


*** Scheduling [5]: SU(3): 0x1d26ae0: i32 = LUI 0x1d268e0 [ID=3]

*** Final schedule ***
SU(3): 0x1d26ae0: i32 = LUI 0x1d268e0 [ID=3]

SU(4): 0x1d26de0: i32 = ADDI 0x1d265e0, 0x1d29220 [ID=4]

SU(2): 0x1d26be0: i32 = ADD 0x1d26de0, 0x1d26ae0 [ID=2]

SU(1): 0x1d272e0: i32,ch = LW 0x1d26be0, 0x1d266e0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=30] [ID=1]

SU(5): 0x1d269e0: i32 = ORI 0x1d272e0, 0x1d271e0 [ORD=31] [ID=5]

SU(0): 0x1d29320: ch = SW 0x1d269e0, 0x1d26be0, 0x1d266e0, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=32] [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %25 = load i32** %2, align 4
I was here to add   %2 = alloca i32*, align 4
with I type i32*and sd value :0x1d265e0: i32 = FrameIndex<1>
new load?0x1d29320: i32,ch = load 0x1d09b38, 0x1d265e0, 0x1d266e0<LD4[%2]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x1d271e0: i32 = Constant<0>

    0x1d09b38: ch = EntryToken

    0x1d265e0: i32 = FrameIndex<1>

    0x1d266e0: i32 = undef

  0x1d29320: i32,ch = load 0x1d09b38, 0x1d265e0, 0x1d266e0<LD4[%2]>

  0x1d09b38: ch = EntryToken


visiting load instruction   %27 = load i32* %26, align 4
with I type i32and sd value :0x1d26be0: i32 = add 0x1d29320, 0x1d272e0
new load?0x1d26de0: i32,ch = load 0x1d09b38, 0x1d26be0, 0x1d266e0<LD4[%26]>
dag after load is dealt with?SelectionDAG has 9 nodes:
  0x1d271e0: i32 = Constant<0>

  0x1d266e0: i32 = undef [ORD=33]

  0x1d269e0: i64 = Constant<16>

    0x1d09b38: <multiple use>
        0x1d09b38: <multiple use>
        0x1d265e0: i32 = FrameIndex<1> [ORD=33]

        0x1d266e0: <multiple use>
      0x1d29320: i32,ch = load 0x1d09b38, 0x1d265e0, 0x1d266e0<LD4[%2]> [ORD=33]

      0x1d272e0: i32 = Constant<16> [ORD=34]

    0x1d26be0: i32 = add 0x1d29320, 0x1d272e0 [ORD=34]

    0x1d266e0: <multiple use>
  0x1d26de0: i32,ch = load 0x1d09b38, 0x1d26be0, 0x1d266e0<LD4[%26]>

  0x1d09b38: ch = EntryToken [ORD=33]


I was here to add i32 0
Initial selection DAG: BB#7 'AssignFunction3:AssignFunction3.if.end11'
SelectionDAG has 17 nodes:
  0x1d09b38: ch = EntryToken [ORD=33]

  0x1d266e0: i32 = undef [ORD=33]

  0x1d269e0: i64 = Constant<16>

      0x1d09b38: <multiple use>
            0x1d09b38: <multiple use>
                0x1d09b38: <multiple use>
                0x1d265e0: i32 = FrameIndex<1> [ORD=33]

                0x1d266e0: <multiple use>
              0x1d29320: i32,ch = load 0x1d09b38, 0x1d265e0, 0x1d266e0<LD4[%2]> [ORD=33]

              0x1d272e0: i32 = Constant<16> [ORD=34]

            0x1d26be0: i32 = add 0x1d29320, 0x1d272e0 [ORD=34]

            0x1d266e0: <multiple use>
          0x1d26de0: i32,ch = load 0x1d09b38, 0x1d26be0, 0x1d266e0<LD4[%26]> [ORD=35]

          0x1d271e0: i32 = Constant<0> [ORD=36]

          0x1d26ae0: ch = setne [ORD=36]

        0x1d29220: i1 = setcc 0x1d26de0, 0x1d271e0, 0x1d26ae0 [ORD=36]

        0x1d268e0: i1 = Constant<-1>

      0x1d270e0: i1 = xor 0x1d29220, 0x1d268e0

      0x1d29420: ch = BasicBlock<AssignFunction3.if.end16 0x1d366a0>

    0x1d26ee0: ch = brcond 0x1d09b38, 0x1d270e0, 0x1d29420

    0x1d267e0: ch = BasicBlock<AssignFunction3.if.then14 0x1d365f0>

  0x1d26fe0: ch = br 0x1d26ee0, 0x1d267e0



Replacing.3 0x1d270e0: i1 = xor 0x1d29220, 0x1d268e0

With: 0x1d29520: i1 = setcc 0x1d26de0, 0x1d271e0, 0x1d273e0

Optimized lowered selection DAG: BB#7 'AssignFunction3:AssignFunction3.if.end11'
SelectionDAG has 14 nodes:
  0x1d09b38: ch = EntryToken [ORD=33]

  0x1d266e0: i32 = undef [ORD=33]

      0x1d09b38: <multiple use>
          0x1d09b38: <multiple use>
              0x1d09b38: <multiple use>
              0x1d265e0: i32 = FrameIndex<1> [ORD=33]

              0x1d266e0: <multiple use>
            0x1d29320: i32,ch = load 0x1d09b38, 0x1d265e0, 0x1d266e0<LD4[%2]> [ORD=33]

            0x1d272e0: i32 = Constant<16> [ORD=34]

          0x1d26be0: i32 = add 0x1d29320, 0x1d272e0 [ORD=34]

          0x1d266e0: <multiple use>
        0x1d26de0: i32,ch = load 0x1d09b38, 0x1d26be0, 0x1d266e0<LD4[%26]> [ORD=35]

        0x1d271e0: i32 = Constant<0> [ORD=36]

        0x1d273e0: ch = seteq

      0x1d29520: i1 = setcc 0x1d26de0, 0x1d271e0, 0x1d273e0

      0x1d29420: ch = BasicBlock<AssignFunction3.if.end16 0x1d366a0>

    0x1d26ee0: ch = brcond 0x1d09b38, 0x1d29520, 0x1d29420

    0x1d267e0: ch = BasicBlock<AssignFunction3.if.then14 0x1d365f0>

  0x1d26fe0: ch = br 0x1d26ee0, 0x1d267e0


Legally typed node: 0x1d273e0: ch = seteq [ID=0]

Legally typed node: 0x1d267e0: ch = BasicBlock<AssignFunction3.if.then14 0x1d365f0> [ID=0]

Legally typed node: 0x1d29420: ch = BasicBlock<AssignFunction3.if.end16 0x1d366a0> [ID=0]

Legally typed node: 0x1d272e0: i32 = Constant<16> [ORD=34] [ID=0]

Legally typed node: 0x1d266e0: i32 = undef [ORD=33] [ID=0]

Legally typed node: 0x1d271e0: i32 = Constant<0> [ORD=36] [ID=0]

Legally typed node: 0x1d265e0: i32 = FrameIndex<1> [ORD=33] [ID=0]

Legally typed node: 0x1d09b38: ch = EntryToken [ORD=33] [ID=0]

Legally typed node: 0x1d29320: i32,ch = load 0x1d09b38, 0x1d265e0, 0x1d266e0<LD4[%2]> [ORD=33] [ID=0]

Legally typed node: 0x1d26be0: i32 = add 0x1d29320, 0x1d272e0 [ORD=34] [ID=0]

Legally typed node: 0x1d26de0: i32,ch = load 0x1d09b38, 0x1d26be0, 0x1d266e0<LD4[%26]> [ORD=35] [ID=0]

Promote integer result: 0x1d29520: i1 = setcc 0x1d26de0, 0x1d271e0, 0x1d273e0 [ID=0]

Promote integer operand: 0x1d26ee0: ch = brcond 0x1d09b38, 0x1d29520, 0x1d29420 [ID=0]

Promote integer operand: 0x1d26ae0: i32 = zero_extend 0x1d29520 [ID=0]

Legally typed node: 0x1d29220: i32 = Constant<1> [ID=0]

Legally typed node: 0x1d269e0: i32 = setcc 0x1d26de0, 0x1d271e0, 0x1d273e0 [ID=0]

Legally typed node: 0x1d268e0: i32 = and 0x1d269e0, 0x1d29220 [ID=0]

Legally typed node: 0x1d26ee0: ch = brcond 0x1d09b38, 0x1d268e0, 0x1d29420 [ID=0]

Legally typed node: 0x1d26fe0: ch = br 0x1d26ee0, 0x1d267e0 [ID=0]

Legally typed node: 0x7fff243c9bc0: ch = handlenode 0x1d26fe0 [ID=0]

Type-legalized selection DAG: BB#7 'AssignFunction3:AssignFunction3.if.end11'
SelectionDAG has 16 nodes:
  0x1d09b38: ch = EntryToken [ORD=33] [ID=-3]

  0x1d266e0: i32 = undef [ORD=33] [ID=-3]

      0x1d09b38: <multiple use>
            0x1d09b38: <multiple use>
                0x1d09b38: <multiple use>
                0x1d265e0: i32 = FrameIndex<1> [ORD=33] [ID=-3]

                0x1d266e0: <multiple use>
              0x1d29320: i32,ch = load 0x1d09b38, 0x1d265e0, 0x1d266e0<LD4[%2]> [ORD=33] [ID=-3]

              0x1d272e0: i32 = Constant<16> [ORD=34] [ID=-3]

            0x1d26be0: i32 = add 0x1d29320, 0x1d272e0 [ORD=34] [ID=-3]

            0x1d266e0: <multiple use>
          0x1d26de0: i32,ch = load 0x1d09b38, 0x1d26be0, 0x1d266e0<LD4[%26]> [ORD=35] [ID=-3]

          0x1d271e0: i32 = Constant<0> [ORD=36] [ID=-3]

          0x1d273e0: ch = seteq [ID=-3]

        0x1d269e0: i32 = setcc 0x1d26de0, 0x1d271e0, 0x1d273e0 [ID=-3]

        0x1d29220: i32 = Constant<1> [ID=-3]

      0x1d268e0: i32 = and 0x1d269e0, 0x1d29220 [ID=-3]

      0x1d29420: ch = BasicBlock<AssignFunction3.if.end16 0x1d366a0> [ID=-3]

    0x1d26ee0: ch = brcond 0x1d09b38, 0x1d268e0, 0x1d29420 [ID=-3]

    0x1d267e0: ch = BasicBlock<AssignFunction3.if.then14 0x1d365f0> [ID=-3]

  0x1d26fe0: ch = br 0x1d26ee0, 0x1d267e0 [ID=-3]



Replacing.2 0x1d268e0: i32 = and 0x1d269e0, 0x1d29220 [ID=-3]

With: 0x1d269e0: i32 = setcc 0x1d26de0, 0x1d271e0, 0x1d273e0 [ID=-3]

Optimized type-legalized selection DAG: BB#7 'AssignFunction3:AssignFunction3.if.end11'
SelectionDAG has 14 nodes:
  0x1d09b38: ch = EntryToken [ORD=33] [ID=-3]

  0x1d266e0: i32 = undef [ORD=33] [ID=-3]

      0x1d09b38: <multiple use>
          0x1d09b38: <multiple use>
              0x1d09b38: <multiple use>
              0x1d265e0: i32 = FrameIndex<1> [ORD=33] [ID=-3]

              0x1d266e0: <multiple use>
            0x1d29320: i32,ch = load 0x1d09b38, 0x1d265e0, 0x1d266e0<LD4[%2]> [ORD=33] [ID=-3]

            0x1d272e0: i32 = Constant<16> [ORD=34] [ID=-3]

          0x1d26be0: i32 = add 0x1d29320, 0x1d272e0 [ORD=34] [ID=-3]

          0x1d266e0: <multiple use>
        0x1d26de0: i32,ch = load 0x1d09b38, 0x1d26be0, 0x1d266e0<LD4[%26]> [ORD=35] [ID=-3]

        0x1d271e0: i32 = Constant<0> [ORD=36] [ID=-3]

        0x1d273e0: ch = seteq [ID=-3]

      0x1d269e0: i32 = setcc 0x1d26de0, 0x1d271e0, 0x1d273e0 [ID=-3]

      0x1d29420: ch = BasicBlock<AssignFunction3.if.end16 0x1d366a0> [ID=-3]

    0x1d26ee0: ch = brcond 0x1d09b38, 0x1d269e0, 0x1d29420 [ID=-3]

    0x1d267e0: ch = BasicBlock<AssignFunction3.if.then14 0x1d365f0> [ID=-3]

  0x1d26fe0: ch = br 0x1d26ee0, 0x1d267e0 [ID=-3]


Legalized selection DAG: BB#7 'AssignFunction3:AssignFunction3.if.end11'
SelectionDAG has 14 nodes:
  0x1d09b38: ch = EntryToken [ORD=33] [ID=0]

  0x1d266e0: i32 = undef [ORD=33] [ID=3]

      0x1d09b38: <multiple use>
          0x1d09b38: <multiple use>
              0x1d09b38: <multiple use>
              0x1d265e0: i32 = FrameIndex<1> [ORD=33] [ID=1]

              0x1d266e0: <multiple use>
            0x1d29320: i32,ch = load 0x1d09b38, 0x1d265e0, 0x1d266e0<LD4[%2]> [ORD=33] [ID=8]

            0x1d272e0: i32 = Constant<16> [ORD=34] [ID=4]

          0x1d26be0: i32 = add 0x1d29320, 0x1d272e0 [ORD=34] [ID=9]

          0x1d266e0: <multiple use>
        0x1d26de0: i32,ch = load 0x1d09b38, 0x1d26be0, 0x1d266e0<LD4[%26]> [ORD=35] [ID=10]

        0x1d271e0: i32 = Constant<0> [ORD=36] [ID=2]

        0x1d273e0: ch = seteq [ID=7]

      0x1d269e0: i32 = setcc 0x1d26de0, 0x1d271e0, 0x1d273e0 [ID=11]

      0x1d29420: ch = BasicBlock<AssignFunction3.if.end16 0x1d366a0> [ID=5]

    0x1d26ee0: ch = brcond 0x1d09b38, 0x1d269e0, 0x1d29420 [ID=12]

    0x1d267e0: ch = BasicBlock<AssignFunction3.if.then14 0x1d365f0> [ID=6]

  0x1d26fe0: ch = br 0x1d26ee0, 0x1d267e0 [ID=13]


Optimized legalized selection DAG: BB#7 'AssignFunction3:AssignFunction3.if.end11'
SelectionDAG has 14 nodes:
  0x1d09b38: ch = EntryToken [ORD=33] [ID=0]

  0x1d266e0: i32 = undef [ORD=33] [ID=3]

      0x1d09b38: <multiple use>
          0x1d09b38: <multiple use>
              0x1d09b38: <multiple use>
              0x1d265e0: i32 = FrameIndex<1> [ORD=33] [ID=1]

              0x1d266e0: <multiple use>
            0x1d29320: i32,ch = load 0x1d09b38, 0x1d265e0, 0x1d266e0<LD4[%2]> [ORD=33] [ID=8]

            0x1d272e0: i32 = Constant<16> [ORD=34] [ID=4]

          0x1d26be0: i32 = add 0x1d29320, 0x1d272e0 [ORD=34] [ID=9]

          0x1d266e0: <multiple use>
        0x1d26de0: i32,ch = load 0x1d09b38, 0x1d26be0, 0x1d266e0<LD4[%26]> [ORD=35] [ID=10]

        0x1d271e0: i32 = Constant<0> [ORD=36] [ID=2]

        0x1d273e0: ch = seteq [ID=7]

      0x1d269e0: i32 = setcc 0x1d26de0, 0x1d271e0, 0x1d273e0 [ID=11]

      0x1d29420: ch = BasicBlock<AssignFunction3.if.end16 0x1d366a0> [ID=5]

    0x1d26ee0: ch = brcond 0x1d09b38, 0x1d269e0, 0x1d29420 [ID=12]

    0x1d267e0: ch = BasicBlock<AssignFunction3.if.then14 0x1d365f0> [ID=6]

  0x1d26fe0: ch = br 0x1d26ee0, 0x1d267e0 [ID=13]


===== Instruction selection begins: BB#7 'AssignFunction3.if.end11'
ISEL: Starting pattern match on root node: 0x1d26fe0: ch = br 0x1d26ee0, 0x1d267e0 [ID=13]

  Initial Opcode index to 1938
  Morphed node: 0x1d26fe0: ch = JAL 0x1d267e0, 0x1d26ee0

ISEL: Match complete!
=> 0x1d26fe0: ch = JAL 0x1d267e0, 0x1d26ee0

ISEL: Starting pattern match on root node: 0x1d26ee0: ch = brcond 0x1d09b38, 0x1d269e0, 0x1d29420 [ID=12]

  Initial Opcode index to 1439
  Morphed node: 0x1d26ee0: ch = BEQ 0x1d29420, 0x1d26de0, 0x1d271e0, 0x1d09b38

ISEL: Match complete!
=> 0x1d26ee0: ch = BEQ 0x1d29420, 0x1d26de0, 0x1d271e0, 0x1d09b38

ISEL: Starting pattern match on root node: 0x1d26de0: i32,ch = load 0x1d09b38, 0x1d26be0, 0x1d266e0<LD4[%26]> [ORD=35] [ID=10]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x1d26de0: i32,ch = LW 0x1d29320, 0x1d273e0, 0x1d09b38<Mem:LD4[%26]> [ORD=35]

ISEL: Match complete!
=> 0x1d26de0: i32,ch = LW 0x1d29320, 0x1d273e0, 0x1d09b38<Mem:LD4[%26]> [ORD=35]

ISEL: Starting pattern match on root node: 0x1d29320: i32,ch = load 0x1d09b38, 0x1d265e0, 0x1d266e0<LD4[%2]> [ORD=33] [ID=8]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x1d29320: i32,ch = LW 0x1d265e0, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=33]

ISEL: Match complete!
=> 0x1d29320: i32,ch = LW 0x1d265e0, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=33]

=> 0x1d267e0: ch = BasicBlock<AssignFunction3.if.then14 0x1d365f0>

=> 0x1d29420: ch = BasicBlock<AssignFunction3.if.end16 0x1d366a0>

ISEL: Starting pattern match on root node: 0x1d271e0: i32 = Constant<0> [ORD=36] [ID=2]

  Initial Opcode index to 1226
comparing 0 and 0 and returning value:1
ISEL: Match complete!
=> 0x1d271e0: i32 = Constant<0> [ORD=36] [ID=2]

=> 0x1d09b38: ch = EntryToken [ORD=33]

===== Instruction selection ends:
Selected selection DAG: BB#7 'AssignFunction3:AssignFunction3.if.end11'
SelectionDAG has 13 nodes:
  0x1d09b38: ch = EntryToken [ORD=33]

    0x1d267e0: ch = BasicBlock<AssignFunction3.if.then14 0x1d365f0>

      0x1d29420: ch = BasicBlock<AssignFunction3.if.end16 0x1d366a0>

            0x1d271e0: i32 = Register %t5

            0x1d26be0: i32 = TargetFrameIndex<1>

          0x1d265e0: i32 = ADDI 0x1d271e0, 0x1d26be0 [ORD=33]

          0x1d272e0: i32 = TargetConstant<0>

          0x1d09b38: <multiple use>
        0x1d29320: i32,ch = LW 0x1d265e0, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=33]

        0x1d273e0: i32 = TargetConstant<16>

        0x1d09b38: <multiple use>
      0x1d26de0: i32,ch = LW 0x1d29320, 0x1d273e0, 0x1d09b38<Mem:LD4[%26]> [ORD=35]

      0x1d266e0: i32 = Register %zero

      0x1d09b38: <multiple use>
    0x1d26ee0: ch = BEQ 0x1d29420, 0x1d26de0, 0x1d266e0, 0x1d09b38

  0x1d26fe0: ch = JAL 0x1d267e0, 0x1d26ee0


********** List Scheduling BB#7 'AssignFunction3.if.end11' **********
SU(0): 0x1d26fe0: ch = JAL 0x1d267e0, 0x1d26ee0 [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x1d26ee0: ch = BEQ 0x1d29420, 0x1d26de0, 0x1d266e0, 0x1d09b38 [ID=1]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x1d26de0: i32,ch = LW 0x1d29320, 0x1d273e0, 0x1d09b38<Mem:LD4[%26]> [ORD=35] [ID=2]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(3): Latency=1
  Successors:
   val SU(1): Latency=1

SU(3): 0x1d29320: i32,ch = LW 0x1d265e0, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=33] [ID=3]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(4): Latency=1
  Successors:
   val SU(2): Latency=1

SU(4): 0x1d265e0: i32 = ADDI 0x1d271e0, 0x1d26be0 [ORD=33] [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(3): Latency=1


Examining Available:
Height 0: SU(0): 0x1d26fe0: ch = JAL 0x1d267e0, 0x1d26ee0 [ID=0]


*** Scheduling [0]: SU(0): 0x1d26fe0: ch = JAL 0x1d267e0, 0x1d26ee0 [ID=0]


Examining Available:
Height 1: SU(1): 0x1d26ee0: ch = BEQ 0x1d29420, 0x1d26de0, 0x1d266e0, 0x1d09b38 [ID=1]


*** Scheduling [1]: SU(1): 0x1d26ee0: ch = BEQ 0x1d29420, 0x1d26de0, 0x1d266e0, 0x1d09b38 [ID=1]


Examining Available:
Height 2: SU(2): 0x1d26de0: i32,ch = LW 0x1d29320, 0x1d273e0, 0x1d09b38<Mem:LD4[%26]> [ORD=35] [ID=2]


*** Scheduling [2]: SU(2): 0x1d26de0: i32,ch = LW 0x1d29320, 0x1d273e0, 0x1d09b38<Mem:LD4[%26]> [ORD=35] [ID=2]


Examining Available:
Height 3: SU(3): 0x1d29320: i32,ch = LW 0x1d265e0, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=33] [ID=3]


*** Scheduling [3]: SU(3): 0x1d29320: i32,ch = LW 0x1d265e0, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=33] [ID=3]


Examining Available:
Height 4: SU(4): 0x1d265e0: i32 = ADDI 0x1d271e0, 0x1d26be0 [ORD=33] [ID=4]


*** Scheduling [4]: SU(4): 0x1d265e0: i32 = ADDI 0x1d271e0, 0x1d26be0 [ORD=33] [ID=4]

*** Final schedule ***
SU(4): 0x1d265e0: i32 = ADDI 0x1d271e0, 0x1d26be0 [ORD=33] [ID=4]

SU(3): 0x1d29320: i32,ch = LW 0x1d265e0, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=33] [ID=3]

SU(2): 0x1d26de0: i32,ch = LW 0x1d29320, 0x1d273e0, 0x1d09b38<Mem:LD4[%26]> [ORD=35] [ID=2]

SU(1): 0x1d26ee0: ch = BEQ 0x1d29420, 0x1d26de0, 0x1d266e0, 0x1d09b38 [ID=1]

SU(0): 0x1d26fe0: ch = JAL 0x1d267e0, 0x1d26ee0 [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %29 = load i32* @eicas_discretes, align 4
I was here to add @eicas_discretes = global i32 0, align 4
with I type i32and sd value :0x1d26be0: i32 = GlobalAddress<i32* @eicas_discretes> 0
new load?0x1d272e0: i32,ch = load 0x1d09b38, 0x1d26be0, 0x1d266e0<LD4[@eicas_discretes]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x1d271e0: i32 = Constant<0>

    0x1d09b38: ch = EntryToken

    0x1d26be0: i32 = GlobalAddress<i32* @eicas_discretes> 0

    0x1d266e0: i32 = undef

  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d26be0, 0x1d266e0<LD4[@eicas_discretes]>

  0x1d09b38: ch = EntryToken


I was here to add i32 16
store visit is after?  store i32 %30, i32* @eicas_discretes, align 4
whats in dag after store?SelectionDAG has 8 nodes:
  0x1d26be0: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=37]

  0x1d271e0: i32 = Constant<0>

  0x1d266e0: i32 = undef [ORD=37]

    0x1d09b38: ch = EntryToken [ORD=37]

    0x1d26be0: <multiple use>
    0x1d266e0: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d26be0, 0x1d266e0<LD4[@eicas_discretes]> [ORD=37]

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d273e0: i32 = Constant<16> [ORD=38]

    0x1d26fe0: i32 = or 0x1d272e0, 0x1d273e0 [ORD=38]

    0x1d26be0: <multiple use>
    0x1d266e0: <multiple use>
  0x1d26ee0: ch = store 0x1d272e0:1, 0x1d26fe0, 0x1d26be0, 0x1d266e0<ST4[@eicas_discretes]> [ORD=39]


Initial selection DAG: BB#8 'AssignFunction3:AssignFunction3.if.then14'
SelectionDAG has 8 nodes:
  0x1d26be0: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=37]

  0x1d271e0: i32 = Constant<0>

  0x1d266e0: i32 = undef [ORD=37]

    0x1d09b38: ch = EntryToken [ORD=37]

    0x1d26be0: <multiple use>
    0x1d266e0: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d26be0, 0x1d266e0<LD4[@eicas_discretes]> [ORD=37]

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d273e0: i32 = Constant<16> [ORD=38]

    0x1d26fe0: i32 = or 0x1d272e0, 0x1d273e0 [ORD=38]

    0x1d26be0: <multiple use>
    0x1d266e0: <multiple use>
  0x1d26ee0: ch = store 0x1d272e0:1, 0x1d26fe0, 0x1d26be0, 0x1d266e0<ST4[@eicas_discretes]> [ORD=39]


Optimized lowered selection DAG: BB#8 'AssignFunction3:AssignFunction3.if.then14'
SelectionDAG has 7 nodes:
  0x1d26be0: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=37]

  0x1d266e0: i32 = undef [ORD=37]

    0x1d09b38: ch = EntryToken [ORD=37]

    0x1d26be0: <multiple use>
    0x1d266e0: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d26be0, 0x1d266e0<LD4[@eicas_discretes]> [ORD=37]

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d273e0: i32 = Constant<16> [ORD=38]

    0x1d26fe0: i32 = or 0x1d272e0, 0x1d273e0 [ORD=38]

    0x1d26be0: <multiple use>
    0x1d266e0: <multiple use>
  0x1d26ee0: ch = store 0x1d272e0:1, 0x1d26fe0, 0x1d26be0, 0x1d266e0<ST4[@eicas_discretes]> [ORD=39]


Legally typed node: 0x1d273e0: i32 = Constant<16> [ORD=38] [ID=0]

Legally typed node: 0x1d266e0: i32 = undef [ORD=37] [ID=0]

Legally typed node: 0x1d26be0: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=37] [ID=0]

Legally typed node: 0x1d09b38: ch = EntryToken [ORD=37] [ID=0]

Legally typed node: 0x1d272e0: i32,ch = load 0x1d09b38, 0x1d26be0, 0x1d266e0<LD4[@eicas_discretes]> [ORD=37] [ID=0]

Legally typed node: 0x1d26fe0: i32 = or 0x1d272e0, 0x1d273e0 [ORD=38] [ID=0]

Legally typed node: 0x1d26ee0: ch = store 0x1d272e0:1, 0x1d26fe0, 0x1d26be0, 0x1d266e0<ST4[@eicas_discretes]> [ORD=39] [ID=0]

Legally typed node: 0x7fff243c9bc0: ch = handlenode 0x1d26ee0 [ID=0]

Type-legalized selection DAG: BB#8 'AssignFunction3:AssignFunction3.if.then14'
SelectionDAG has 7 nodes:
  0x1d26be0: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=37] [ID=-3]

  0x1d266e0: i32 = undef [ORD=37] [ID=-3]

    0x1d09b38: ch = EntryToken [ORD=37] [ID=-3]

    0x1d26be0: <multiple use>
    0x1d266e0: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d26be0, 0x1d266e0<LD4[@eicas_discretes]> [ORD=37] [ID=-3]

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d273e0: i32 = Constant<16> [ORD=38] [ID=-3]

    0x1d26fe0: i32 = or 0x1d272e0, 0x1d273e0 [ORD=38] [ID=-3]

    0x1d26be0: <multiple use>
    0x1d266e0: <multiple use>
  0x1d26ee0: ch = store 0x1d272e0:1, 0x1d26fe0, 0x1d26be0, 0x1d266e0<ST4[@eicas_discretes]> [ORD=39] [ID=-3]


Legalized selection DAG: BB#8 'AssignFunction3:AssignFunction3.if.then14'
SelectionDAG has 11 nodes:
  0x1d266e0: i32 = undef [ORD=37] [ID=2]

    0x1d09b38: ch = EntryToken [ORD=37] [ID=0]

    0x1d29420: <multiple use>
    0x1d266e0: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d266e0<LD4[@eicas_discretes]> [ORD=37] [ID=4]

      0x1d271e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

    0x1d29320: i32 = REDEFINEISD::Hi 0x1d271e0

      0x1d26de0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

    0x1d267e0: i32 = REDEFINEISD::Lo 0x1d26de0

  0x1d29420: i32 = add 0x1d29320, 0x1d267e0

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d273e0: i32 = Constant<16> [ORD=38] [ID=3]

    0x1d26fe0: i32 = or 0x1d272e0, 0x1d273e0 [ORD=38] [ID=5]

    0x1d29420: <multiple use>
    0x1d266e0: <multiple use>
  0x1d26ee0: ch = store 0x1d272e0:1, 0x1d26fe0, 0x1d29420, 0x1d266e0<ST4[@eicas_discretes]> [ORD=39] [ID=6]


Optimized legalized selection DAG: BB#8 'AssignFunction3:AssignFunction3.if.then14'
SelectionDAG has 11 nodes:
  0x1d266e0: i32 = undef [ORD=37] [ID=2]

    0x1d09b38: ch = EntryToken [ORD=37] [ID=0]

    0x1d29420: <multiple use>
    0x1d266e0: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d266e0<LD4[@eicas_discretes]> [ORD=37] [ID=4]

      0x1d271e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

    0x1d29320: i32 = REDEFINEISD::Hi 0x1d271e0

      0x1d26de0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

    0x1d267e0: i32 = REDEFINEISD::Lo 0x1d26de0

  0x1d29420: i32 = add 0x1d29320, 0x1d267e0

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d273e0: i32 = Constant<16> [ORD=38] [ID=3]

    0x1d26fe0: i32 = or 0x1d272e0, 0x1d273e0 [ORD=38] [ID=5]

    0x1d29420: <multiple use>
    0x1d266e0: <multiple use>
  0x1d26ee0: ch = store 0x1d272e0:1, 0x1d26fe0, 0x1d29420, 0x1d266e0<ST4[@eicas_discretes]> [ORD=39] [ID=6]


===== Instruction selection begins: BB#8 'AssignFunction3.if.then14'
ISEL: Starting pattern match on root node: 0x1d26ee0: ch = store 0x1d272e0:1, 0x1d26fe0, 0x1d29420, 0x1d266e0<ST4[@eicas_discretes]> [ORD=39] [ID=10]

  Initial Opcode index to 178
  Morphed node: 0x1d26ee0: ch = SW 0x1d26fe0, 0x1d29420, 0x1d26be0, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=39]

ISEL: Match complete!
=> 0x1d26ee0: ch = SW 0x1d26fe0, 0x1d29420, 0x1d26be0, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=39]

ISEL: Starting pattern match on root node: 0x1d26fe0: i32 = or 0x1d272e0, 0x1d273e0 [ORD=38] [ID=9]

  Initial Opcode index to 567
  Morphed node: 0x1d26fe0: i32 = ORI 0x1d272e0, 0x1d265e0 [ORD=38]

ISEL: Match complete!
=> 0x1d26fe0: i32 = ORI 0x1d272e0, 0x1d265e0 [ORD=38]

ISEL: Starting pattern match on root node: 0x1d272e0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d266e0<LD4[@eicas_discretes]> [ORD=37] [ID=8]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x1d272e0: i32,ch = LW 0x1d29420, 0x1d26be0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=37]

ISEL: Match complete!
=> 0x1d272e0: i32,ch = LW 0x1d29420, 0x1d26be0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=37]

ISEL: Starting pattern match on root node: 0x1d29420: i32 = add 0x1d29320, 0x1d267e0 [ID=7]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x1d29420: i32 = ADD 0x1d267e0, 0x1d29320

ISEL: Match complete!
=> 0x1d29420: i32 = ADD 0x1d267e0, 0x1d29320

ISEL: Starting pattern match on root node: 0x1d267e0: i32 = REDEFINEISD::Lo 0x1d26de0 [ID=6]

  Initial Opcode index to 1204
  Morphed node: 0x1d267e0: i32 = ADDI 0x1d266e0, 0x1d26de0

ISEL: Match complete!
=> 0x1d267e0: i32 = ADDI 0x1d266e0, 0x1d26de0

ISEL: Starting pattern match on root node: 0x1d29320: i32 = REDEFINEISD::Hi 0x1d271e0 [ID=5]

  Initial Opcode index to 1186
  Morphed node: 0x1d29320: i32 = LUI 0x1d271e0

ISEL: Match complete!
=> 0x1d29320: i32 = LUI 0x1d271e0

=> 0x1d26de0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

=> 0x1d271e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

=> 0x1d09b38: ch = EntryToken [ORD=37]

===== Instruction selection ends:
Selected selection DAG: BB#8 'AssignFunction3:AssignFunction3.if.then14'
SelectionDAG has 12 nodes:
      0x1d266e0: i32 = Register %zero

      0x1d26de0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

    0x1d267e0: i32 = ADDI 0x1d266e0, 0x1d26de0

      0x1d271e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

    0x1d29320: i32 = LUI 0x1d271e0

  0x1d29420: i32 = ADD 0x1d267e0, 0x1d29320

    0x1d29420: <multiple use>
    0x1d26be0: <multiple use>
    0x1d09b38: ch = EntryToken [ORD=37]

  0x1d272e0: i32,ch = LW 0x1d29420, 0x1d26be0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=37]

  0x1d26be0: i32 = TargetConstant<0>

      0x1d272e0: <multiple use>
      0x1d265e0: i32 = TargetConstant<16>

    0x1d26fe0: i32 = ORI 0x1d272e0, 0x1d265e0 [ORD=38]

    0x1d29420: <multiple use>
    0x1d26be0: <multiple use>
    0x1d272e0: <multiple use>
  0x1d26ee0: ch = SW 0x1d26fe0, 0x1d29420, 0x1d26be0, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=39]


********** List Scheduling BB#8 'AssignFunction3.if.then14' **********
SU(0): 0x1d26ee0: ch = SW 0x1d26fe0, 0x1d29420, 0x1d26be0, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=39] [ID=0]

  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
   val SU(5): Latency=1
   val SU(2): Latency=1
   ch  SU(1): Latency=1

SU(1): 0x1d272e0: i32,ch = LW 0x1d29420, 0x1d26be0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=37] [ID=1]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1
   val SU(5): Latency=1

SU(2): 0x1d29420: i32 = ADD 0x1d267e0, 0x1d29320 [ID=2]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(4): Latency=1
   val SU(3): Latency=1
  Successors:
   val SU(0): Latency=1
   val SU(1): Latency=1

SU(3): 0x1d29320: i32 = LUI 0x1d271e0 [ID=3]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(2): Latency=1

SU(4): 0x1d267e0: i32 = ADDI 0x1d266e0, 0x1d26de0 [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(2): Latency=1

SU(5): 0x1d26fe0: i32 = ORI 0x1d272e0, 0x1d265e0 [ORD=38] [ID=5]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(1): Latency=1
  Successors:
   val SU(0): Latency=1


Examining Available:
Height 0: SU(0): 0x1d26ee0: ch = SW 0x1d26fe0, 0x1d29420, 0x1d26be0, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=39] [ID=0]


*** Scheduling [0]: SU(0): 0x1d26ee0: ch = SW 0x1d26fe0, 0x1d29420, 0x1d26be0, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=39] [ID=0]


Examining Available:
Height 1: SU(5): 0x1d26fe0: i32 = ORI 0x1d272e0, 0x1d265e0 [ORD=38] [ID=5]


*** Scheduling [1]: SU(5): 0x1d26fe0: i32 = ORI 0x1d272e0, 0x1d265e0 [ORD=38] [ID=5]


Examining Available:
Height 2: SU(1): 0x1d272e0: i32,ch = LW 0x1d29420, 0x1d26be0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=37] [ID=1]


*** Scheduling [2]: SU(1): 0x1d272e0: i32,ch = LW 0x1d29420, 0x1d26be0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=37] [ID=1]


Examining Available:
Height 3: SU(2): 0x1d29420: i32 = ADD 0x1d267e0, 0x1d29320 [ID=2]


*** Scheduling [3]: SU(2): 0x1d29420: i32 = ADD 0x1d267e0, 0x1d29320 [ID=2]


Examining Available:
Height 4: SU(4): 0x1d267e0: i32 = ADDI 0x1d266e0, 0x1d26de0 [ID=4]

Height 4: SU(3): 0x1d29320: i32 = LUI 0x1d271e0 [ID=3]


*** Scheduling [4]: SU(4): 0x1d267e0: i32 = ADDI 0x1d266e0, 0x1d26de0 [ID=4]


Examining Available:
Height 4: SU(3): 0x1d29320: i32 = LUI 0x1d271e0 [ID=3]


*** Scheduling [5]: SU(3): 0x1d29320: i32 = LUI 0x1d271e0 [ID=3]

*** Final schedule ***
SU(3): 0x1d29320: i32 = LUI 0x1d271e0 [ID=3]

SU(4): 0x1d267e0: i32 = ADDI 0x1d266e0, 0x1d26de0 [ID=4]

SU(2): 0x1d29420: i32 = ADD 0x1d267e0, 0x1d29320 [ID=2]

SU(1): 0x1d272e0: i32,ch = LW 0x1d29420, 0x1d26be0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=37] [ID=1]

SU(5): 0x1d26fe0: i32 = ORI 0x1d272e0, 0x1d265e0 [ORD=38] [ID=5]

SU(0): 0x1d26ee0: ch = SW 0x1d26fe0, 0x1d29420, 0x1d26be0, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=39] [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %31 = load i32** %2, align 4
I was here to add   %2 = alloca i32*, align 4
with I type i32*and sd value :0x1d266e0: i32 = FrameIndex<1>
new load?0x1d26ee0: i32,ch = load 0x1d09b38, 0x1d266e0, 0x1d26be0<LD4[%2]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x1d265e0: i32 = Constant<0>

    0x1d09b38: ch = EntryToken

    0x1d266e0: i32 = FrameIndex<1>

    0x1d26be0: i32 = undef

  0x1d26ee0: i32,ch = load 0x1d09b38, 0x1d266e0, 0x1d26be0<LD4[%2]>

  0x1d09b38: ch = EntryToken


visiting load instruction   %33 = load i32* %32, align 4
with I type i32and sd value :0x1d29420: i32 = add 0x1d26ee0, 0x1d272e0
new load?0x1d267e0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d26be0<LD4[%32]>
dag after load is dealt with?SelectionDAG has 9 nodes:
  0x1d265e0: i32 = Constant<0>

  0x1d26be0: i32 = undef [ORD=40]

  0x1d26fe0: i64 = Constant<20>

    0x1d09b38: <multiple use>
        0x1d09b38: <multiple use>
        0x1d266e0: i32 = FrameIndex<1> [ORD=40]

        0x1d26be0: <multiple use>
      0x1d26ee0: i32,ch = load 0x1d09b38, 0x1d266e0, 0x1d26be0<LD4[%2]> [ORD=40]

      0x1d272e0: i32 = Constant<20> [ORD=41]

    0x1d29420: i32 = add 0x1d26ee0, 0x1d272e0 [ORD=41]

    0x1d26be0: <multiple use>
  0x1d267e0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d26be0<LD4[%32]>

  0x1d09b38: ch = EntryToken [ORD=40]


I was here to add i32 0
Initial selection DAG: BB#9 'AssignFunction3:AssignFunction3.if.end16'
SelectionDAG has 17 nodes:
  0x1d09b38: ch = EntryToken [ORD=40]

  0x1d26be0: i32 = undef [ORD=40]

  0x1d26fe0: i64 = Constant<20>

      0x1d09b38: <multiple use>
            0x1d09b38: <multiple use>
                0x1d09b38: <multiple use>
                0x1d266e0: i32 = FrameIndex<1> [ORD=40]

                0x1d26be0: <multiple use>
              0x1d26ee0: i32,ch = load 0x1d09b38, 0x1d266e0, 0x1d26be0<LD4[%2]> [ORD=40]

              0x1d272e0: i32 = Constant<20> [ORD=41]

            0x1d29420: i32 = add 0x1d26ee0, 0x1d272e0 [ORD=41]

            0x1d26be0: <multiple use>
          0x1d267e0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d26be0<LD4[%32]> [ORD=42]

          0x1d265e0: i32 = Constant<0> [ORD=43]

          0x1d29320: ch = setne [ORD=43]

        0x1d26de0: i1 = setcc 0x1d267e0, 0x1d265e0, 0x1d29320 [ORD=43]

        0x1d271e0: i1 = Constant<-1>

      0x1d273e0: i1 = xor 0x1d26de0, 0x1d271e0

      0x1d269e0: ch = BasicBlock<AssignFunction3.if.end21 0x1d36800>

    0x1d29220: ch = brcond 0x1d09b38, 0x1d273e0, 0x1d269e0

    0x1d268e0: ch = BasicBlock<AssignFunction3.if.then19 0x1d36750>

  0x1d29520: ch = br 0x1d29220, 0x1d268e0



Replacing.3 0x1d273e0: i1 = xor 0x1d26de0, 0x1d271e0

With: 0x1d270e0: i1 = setcc 0x1d267e0, 0x1d265e0, 0x1d26ae0

Optimized lowered selection DAG: BB#9 'AssignFunction3:AssignFunction3.if.end16'
SelectionDAG has 14 nodes:
  0x1d09b38: ch = EntryToken [ORD=40]

  0x1d26be0: i32 = undef [ORD=40]

      0x1d09b38: <multiple use>
          0x1d09b38: <multiple use>
              0x1d09b38: <multiple use>
              0x1d266e0: i32 = FrameIndex<1> [ORD=40]

              0x1d26be0: <multiple use>
            0x1d26ee0: i32,ch = load 0x1d09b38, 0x1d266e0, 0x1d26be0<LD4[%2]> [ORD=40]

            0x1d272e0: i32 = Constant<20> [ORD=41]

          0x1d29420: i32 = add 0x1d26ee0, 0x1d272e0 [ORD=41]

          0x1d26be0: <multiple use>
        0x1d267e0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d26be0<LD4[%32]> [ORD=42]

        0x1d265e0: i32 = Constant<0> [ORD=43]

        0x1d26ae0: ch = seteq

      0x1d270e0: i1 = setcc 0x1d267e0, 0x1d265e0, 0x1d26ae0

      0x1d269e0: ch = BasicBlock<AssignFunction3.if.end21 0x1d36800>

    0x1d29220: ch = brcond 0x1d09b38, 0x1d270e0, 0x1d269e0

    0x1d268e0: ch = BasicBlock<AssignFunction3.if.then19 0x1d36750>

  0x1d29520: ch = br 0x1d29220, 0x1d268e0


Legally typed node: 0x1d26ae0: ch = seteq [ID=0]

Legally typed node: 0x1d268e0: ch = BasicBlock<AssignFunction3.if.then19 0x1d36750> [ID=0]

Legally typed node: 0x1d269e0: ch = BasicBlock<AssignFunction3.if.end21 0x1d36800> [ID=0]

Legally typed node: 0x1d272e0: i32 = Constant<20> [ORD=41] [ID=0]

Legally typed node: 0x1d26be0: i32 = undef [ORD=40] [ID=0]

Legally typed node: 0x1d265e0: i32 = Constant<0> [ORD=43] [ID=0]

Legally typed node: 0x1d266e0: i32 = FrameIndex<1> [ORD=40] [ID=0]

Legally typed node: 0x1d09b38: ch = EntryToken [ORD=40] [ID=0]

Legally typed node: 0x1d26ee0: i32,ch = load 0x1d09b38, 0x1d266e0, 0x1d26be0<LD4[%2]> [ORD=40] [ID=0]

Legally typed node: 0x1d29420: i32 = add 0x1d26ee0, 0x1d272e0 [ORD=41] [ID=0]

Legally typed node: 0x1d267e0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d26be0<LD4[%32]> [ORD=42] [ID=0]

Promote integer result: 0x1d270e0: i1 = setcc 0x1d267e0, 0x1d265e0, 0x1d26ae0 [ID=0]

Promote integer operand: 0x1d29220: ch = brcond 0x1d09b38, 0x1d270e0, 0x1d269e0 [ID=0]

Promote integer operand: 0x1d29320: i32 = zero_extend 0x1d270e0 [ID=0]

Legally typed node: 0x1d26de0: i32 = Constant<1> [ID=0]

Legally typed node: 0x1d26fe0: i32 = setcc 0x1d267e0, 0x1d265e0, 0x1d26ae0 [ID=0]

Legally typed node: 0x1d271e0: i32 = and 0x1d26fe0, 0x1d26de0 [ID=0]

Legally typed node: 0x1d29220: ch = brcond 0x1d09b38, 0x1d271e0, 0x1d269e0 [ID=0]

Legally typed node: 0x1d29520: ch = br 0x1d29220, 0x1d268e0 [ID=0]

Legally typed node: 0x7fff243c9bc0: ch = handlenode 0x1d29520 [ID=0]

Type-legalized selection DAG: BB#9 'AssignFunction3:AssignFunction3.if.end16'
SelectionDAG has 16 nodes:
  0x1d09b38: ch = EntryToken [ORD=40] [ID=-3]

  0x1d26be0: i32 = undef [ORD=40] [ID=-3]

      0x1d09b38: <multiple use>
            0x1d09b38: <multiple use>
                0x1d09b38: <multiple use>
                0x1d266e0: i32 = FrameIndex<1> [ORD=40] [ID=-3]

                0x1d26be0: <multiple use>
              0x1d26ee0: i32,ch = load 0x1d09b38, 0x1d266e0, 0x1d26be0<LD4[%2]> [ORD=40] [ID=-3]

              0x1d272e0: i32 = Constant<20> [ORD=41] [ID=-3]

            0x1d29420: i32 = add 0x1d26ee0, 0x1d272e0 [ORD=41] [ID=-3]

            0x1d26be0: <multiple use>
          0x1d267e0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d26be0<LD4[%32]> [ORD=42] [ID=-3]

          0x1d265e0: i32 = Constant<0> [ORD=43] [ID=-3]

          0x1d26ae0: ch = seteq [ID=-3]

        0x1d26fe0: i32 = setcc 0x1d267e0, 0x1d265e0, 0x1d26ae0 [ID=-3]

        0x1d26de0: i32 = Constant<1> [ID=-3]

      0x1d271e0: i32 = and 0x1d26fe0, 0x1d26de0 [ID=-3]

      0x1d269e0: ch = BasicBlock<AssignFunction3.if.end21 0x1d36800> [ID=-3]

    0x1d29220: ch = brcond 0x1d09b38, 0x1d271e0, 0x1d269e0 [ID=-3]

    0x1d268e0: ch = BasicBlock<AssignFunction3.if.then19 0x1d36750> [ID=-3]

  0x1d29520: ch = br 0x1d29220, 0x1d268e0 [ID=-3]



Replacing.2 0x1d271e0: i32 = and 0x1d26fe0, 0x1d26de0 [ID=-3]

With: 0x1d26fe0: i32 = setcc 0x1d267e0, 0x1d265e0, 0x1d26ae0 [ID=-3]

Optimized type-legalized selection DAG: BB#9 'AssignFunction3:AssignFunction3.if.end16'
SelectionDAG has 14 nodes:
  0x1d09b38: ch = EntryToken [ORD=40] [ID=-3]

  0x1d26be0: i32 = undef [ORD=40] [ID=-3]

      0x1d09b38: <multiple use>
          0x1d09b38: <multiple use>
              0x1d09b38: <multiple use>
              0x1d266e0: i32 = FrameIndex<1> [ORD=40] [ID=-3]

              0x1d26be0: <multiple use>
            0x1d26ee0: i32,ch = load 0x1d09b38, 0x1d266e0, 0x1d26be0<LD4[%2]> [ORD=40] [ID=-3]

            0x1d272e0: i32 = Constant<20> [ORD=41] [ID=-3]

          0x1d29420: i32 = add 0x1d26ee0, 0x1d272e0 [ORD=41] [ID=-3]

          0x1d26be0: <multiple use>
        0x1d267e0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d26be0<LD4[%32]> [ORD=42] [ID=-3]

        0x1d265e0: i32 = Constant<0> [ORD=43] [ID=-3]

        0x1d26ae0: ch = seteq [ID=-3]

      0x1d26fe0: i32 = setcc 0x1d267e0, 0x1d265e0, 0x1d26ae0 [ID=-3]

      0x1d269e0: ch = BasicBlock<AssignFunction3.if.end21 0x1d36800> [ID=-3]

    0x1d29220: ch = brcond 0x1d09b38, 0x1d26fe0, 0x1d269e0 [ID=-3]

    0x1d268e0: ch = BasicBlock<AssignFunction3.if.then19 0x1d36750> [ID=-3]

  0x1d29520: ch = br 0x1d29220, 0x1d268e0 [ID=-3]


Legalized selection DAG: BB#9 'AssignFunction3:AssignFunction3.if.end16'
SelectionDAG has 14 nodes:
  0x1d09b38: ch = EntryToken [ORD=40] [ID=0]

  0x1d26be0: i32 = undef [ORD=40] [ID=3]

      0x1d09b38: <multiple use>
          0x1d09b38: <multiple use>
              0x1d09b38: <multiple use>
              0x1d266e0: i32 = FrameIndex<1> [ORD=40] [ID=1]

              0x1d26be0: <multiple use>
            0x1d26ee0: i32,ch = load 0x1d09b38, 0x1d266e0, 0x1d26be0<LD4[%2]> [ORD=40] [ID=8]

            0x1d272e0: i32 = Constant<20> [ORD=41] [ID=4]

          0x1d29420: i32 = add 0x1d26ee0, 0x1d272e0 [ORD=41] [ID=9]

          0x1d26be0: <multiple use>
        0x1d267e0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d26be0<LD4[%32]> [ORD=42] [ID=10]

        0x1d265e0: i32 = Constant<0> [ORD=43] [ID=2]

        0x1d26ae0: ch = seteq [ID=7]

      0x1d26fe0: i32 = setcc 0x1d267e0, 0x1d265e0, 0x1d26ae0 [ID=11]

      0x1d269e0: ch = BasicBlock<AssignFunction3.if.end21 0x1d36800> [ID=5]

    0x1d29220: ch = brcond 0x1d09b38, 0x1d26fe0, 0x1d269e0 [ID=12]

    0x1d268e0: ch = BasicBlock<AssignFunction3.if.then19 0x1d36750> [ID=6]

  0x1d29520: ch = br 0x1d29220, 0x1d268e0 [ID=13]


Optimized legalized selection DAG: BB#9 'AssignFunction3:AssignFunction3.if.end16'
SelectionDAG has 14 nodes:
  0x1d09b38: ch = EntryToken [ORD=40] [ID=0]

  0x1d26be0: i32 = undef [ORD=40] [ID=3]

      0x1d09b38: <multiple use>
          0x1d09b38: <multiple use>
              0x1d09b38: <multiple use>
              0x1d266e0: i32 = FrameIndex<1> [ORD=40] [ID=1]

              0x1d26be0: <multiple use>
            0x1d26ee0: i32,ch = load 0x1d09b38, 0x1d266e0, 0x1d26be0<LD4[%2]> [ORD=40] [ID=8]

            0x1d272e0: i32 = Constant<20> [ORD=41] [ID=4]

          0x1d29420: i32 = add 0x1d26ee0, 0x1d272e0 [ORD=41] [ID=9]

          0x1d26be0: <multiple use>
        0x1d267e0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d26be0<LD4[%32]> [ORD=42] [ID=10]

        0x1d265e0: i32 = Constant<0> [ORD=43] [ID=2]

        0x1d26ae0: ch = seteq [ID=7]

      0x1d26fe0: i32 = setcc 0x1d267e0, 0x1d265e0, 0x1d26ae0 [ID=11]

      0x1d269e0: ch = BasicBlock<AssignFunction3.if.end21 0x1d36800> [ID=5]

    0x1d29220: ch = brcond 0x1d09b38, 0x1d26fe0, 0x1d269e0 [ID=12]

    0x1d268e0: ch = BasicBlock<AssignFunction3.if.then19 0x1d36750> [ID=6]

  0x1d29520: ch = br 0x1d29220, 0x1d268e0 [ID=13]


===== Instruction selection begins: BB#9 'AssignFunction3.if.end16'
ISEL: Starting pattern match on root node: 0x1d29520: ch = br 0x1d29220, 0x1d268e0 [ID=13]

  Initial Opcode index to 1938
  Morphed node: 0x1d29520: ch = JAL 0x1d268e0, 0x1d29220

ISEL: Match complete!
=> 0x1d29520: ch = JAL 0x1d268e0, 0x1d29220

ISEL: Starting pattern match on root node: 0x1d29220: ch = brcond 0x1d09b38, 0x1d26fe0, 0x1d269e0 [ID=12]

  Initial Opcode index to 1439
  Morphed node: 0x1d29220: ch = BEQ 0x1d269e0, 0x1d267e0, 0x1d265e0, 0x1d09b38

ISEL: Match complete!
=> 0x1d29220: ch = BEQ 0x1d269e0, 0x1d267e0, 0x1d265e0, 0x1d09b38

ISEL: Starting pattern match on root node: 0x1d267e0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d26be0<LD4[%32]> [ORD=42] [ID=10]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x1d267e0: i32,ch = LW 0x1d26ee0, 0x1d26ae0, 0x1d09b38<Mem:LD4[%32]> [ORD=42]

ISEL: Match complete!
=> 0x1d267e0: i32,ch = LW 0x1d26ee0, 0x1d26ae0, 0x1d09b38<Mem:LD4[%32]> [ORD=42]

ISEL: Starting pattern match on root node: 0x1d26ee0: i32,ch = load 0x1d09b38, 0x1d266e0, 0x1d26be0<LD4[%2]> [ORD=40] [ID=8]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x1d26ee0: i32,ch = LW 0x1d266e0, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=40]

ISEL: Match complete!
=> 0x1d26ee0: i32,ch = LW 0x1d266e0, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=40]

=> 0x1d268e0: ch = BasicBlock<AssignFunction3.if.then19 0x1d36750>

=> 0x1d269e0: ch = BasicBlock<AssignFunction3.if.end21 0x1d36800>

ISEL: Starting pattern match on root node: 0x1d265e0: i32 = Constant<0> [ORD=43] [ID=2]

  Initial Opcode index to 1226
comparing 0 and 0 and returning value:1
ISEL: Match complete!
=> 0x1d265e0: i32 = Constant<0> [ORD=43] [ID=2]

=> 0x1d09b38: ch = EntryToken [ORD=40]

===== Instruction selection ends:
Selected selection DAG: BB#9 'AssignFunction3:AssignFunction3.if.end16'
SelectionDAG has 13 nodes:
  0x1d09b38: ch = EntryToken [ORD=40]

    0x1d268e0: ch = BasicBlock<AssignFunction3.if.then19 0x1d36750>

      0x1d269e0: ch = BasicBlock<AssignFunction3.if.end21 0x1d36800>

            0x1d265e0: i32 = Register %t5

            0x1d29420: i32 = TargetFrameIndex<1>

          0x1d266e0: i32 = ADDI 0x1d265e0, 0x1d29420 [ORD=40]

          0x1d272e0: i32 = TargetConstant<0>

          0x1d09b38: <multiple use>
        0x1d26ee0: i32,ch = LW 0x1d266e0, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=40]

        0x1d26ae0: i32 = TargetConstant<20>

        0x1d09b38: <multiple use>
      0x1d267e0: i32,ch = LW 0x1d26ee0, 0x1d26ae0, 0x1d09b38<Mem:LD4[%32]> [ORD=42]

      0x1d26be0: i32 = Register %zero

      0x1d09b38: <multiple use>
    0x1d29220: ch = BEQ 0x1d269e0, 0x1d267e0, 0x1d26be0, 0x1d09b38

  0x1d29520: ch = JAL 0x1d268e0, 0x1d29220


********** List Scheduling BB#9 'AssignFunction3.if.end16' **********
SU(0): 0x1d29520: ch = JAL 0x1d268e0, 0x1d29220 [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x1d29220: ch = BEQ 0x1d269e0, 0x1d267e0, 0x1d26be0, 0x1d09b38 [ID=1]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x1d267e0: i32,ch = LW 0x1d26ee0, 0x1d26ae0, 0x1d09b38<Mem:LD4[%32]> [ORD=42] [ID=2]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(3): Latency=1
  Successors:
   val SU(1): Latency=1

SU(3): 0x1d26ee0: i32,ch = LW 0x1d266e0, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=40] [ID=3]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(4): Latency=1
  Successors:
   val SU(2): Latency=1

SU(4): 0x1d266e0: i32 = ADDI 0x1d265e0, 0x1d29420 [ORD=40] [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(3): Latency=1


Examining Available:
Height 0: SU(0): 0x1d29520: ch = JAL 0x1d268e0, 0x1d29220 [ID=0]


*** Scheduling [0]: SU(0): 0x1d29520: ch = JAL 0x1d268e0, 0x1d29220 [ID=0]


Examining Available:
Height 1: SU(1): 0x1d29220: ch = BEQ 0x1d269e0, 0x1d267e0, 0x1d26be0, 0x1d09b38 [ID=1]


*** Scheduling [1]: SU(1): 0x1d29220: ch = BEQ 0x1d269e0, 0x1d267e0, 0x1d26be0, 0x1d09b38 [ID=1]


Examining Available:
Height 2: SU(2): 0x1d267e0: i32,ch = LW 0x1d26ee0, 0x1d26ae0, 0x1d09b38<Mem:LD4[%32]> [ORD=42] [ID=2]


*** Scheduling [2]: SU(2): 0x1d267e0: i32,ch = LW 0x1d26ee0, 0x1d26ae0, 0x1d09b38<Mem:LD4[%32]> [ORD=42] [ID=2]


Examining Available:
Height 3: SU(3): 0x1d26ee0: i32,ch = LW 0x1d266e0, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=40] [ID=3]


*** Scheduling [3]: SU(3): 0x1d26ee0: i32,ch = LW 0x1d266e0, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=40] [ID=3]


Examining Available:
Height 4: SU(4): 0x1d266e0: i32 = ADDI 0x1d265e0, 0x1d29420 [ORD=40] [ID=4]


*** Scheduling [4]: SU(4): 0x1d266e0: i32 = ADDI 0x1d265e0, 0x1d29420 [ORD=40] [ID=4]

*** Final schedule ***
SU(4): 0x1d266e0: i32 = ADDI 0x1d265e0, 0x1d29420 [ORD=40] [ID=4]

SU(3): 0x1d26ee0: i32,ch = LW 0x1d266e0, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=40] [ID=3]

SU(2): 0x1d267e0: i32,ch = LW 0x1d26ee0, 0x1d26ae0, 0x1d09b38<Mem:LD4[%32]> [ORD=42] [ID=2]

SU(1): 0x1d29220: ch = BEQ 0x1d269e0, 0x1d267e0, 0x1d26be0, 0x1d09b38 [ID=1]

SU(0): 0x1d29520: ch = JAL 0x1d268e0, 0x1d29220 [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %35 = load i32* @eicas_discretes, align 4
I was here to add @eicas_discretes = global i32 0, align 4
with I type i32and sd value :0x1d29420: i32 = GlobalAddress<i32* @eicas_discretes> 0
new load?0x1d272e0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d26be0<LD4[@eicas_discretes]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x1d265e0: i32 = Constant<0>

    0x1d09b38: ch = EntryToken

    0x1d29420: i32 = GlobalAddress<i32* @eicas_discretes> 0

    0x1d26be0: i32 = undef

  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d26be0<LD4[@eicas_discretes]>

  0x1d09b38: ch = EntryToken


I was here to add i32 32
store visit is after?  store i32 %36, i32* @eicas_discretes, align 4
whats in dag after store?SelectionDAG has 8 nodes:
  0x1d29420: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=44]

  0x1d265e0: i32 = Constant<0>

  0x1d26be0: i32 = undef [ORD=44]

    0x1d09b38: ch = EntryToken [ORD=44]

    0x1d29420: <multiple use>
    0x1d26be0: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d26be0<LD4[@eicas_discretes]> [ORD=44]

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d26ae0: i32 = Constant<32> [ORD=45]

    0x1d29520: i32 = or 0x1d272e0, 0x1d26ae0 [ORD=45]

    0x1d29420: <multiple use>
    0x1d26be0: <multiple use>
  0x1d29220: ch = store 0x1d272e0:1, 0x1d29520, 0x1d29420, 0x1d26be0<ST4[@eicas_discretes]> [ORD=46]


Initial selection DAG: BB#10 'AssignFunction3:AssignFunction3.if.then19'
SelectionDAG has 8 nodes:
  0x1d29420: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=44]

  0x1d265e0: i32 = Constant<0>

  0x1d26be0: i32 = undef [ORD=44]

    0x1d09b38: ch = EntryToken [ORD=44]

    0x1d29420: <multiple use>
    0x1d26be0: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d26be0<LD4[@eicas_discretes]> [ORD=44]

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d26ae0: i32 = Constant<32> [ORD=45]

    0x1d29520: i32 = or 0x1d272e0, 0x1d26ae0 [ORD=45]

    0x1d29420: <multiple use>
    0x1d26be0: <multiple use>
  0x1d29220: ch = store 0x1d272e0:1, 0x1d29520, 0x1d29420, 0x1d26be0<ST4[@eicas_discretes]> [ORD=46]


Optimized lowered selection DAG: BB#10 'AssignFunction3:AssignFunction3.if.then19'
SelectionDAG has 7 nodes:
  0x1d29420: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=44]

  0x1d26be0: i32 = undef [ORD=44]

    0x1d09b38: ch = EntryToken [ORD=44]

    0x1d29420: <multiple use>
    0x1d26be0: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d26be0<LD4[@eicas_discretes]> [ORD=44]

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d26ae0: i32 = Constant<32> [ORD=45]

    0x1d29520: i32 = or 0x1d272e0, 0x1d26ae0 [ORD=45]

    0x1d29420: <multiple use>
    0x1d26be0: <multiple use>
  0x1d29220: ch = store 0x1d272e0:1, 0x1d29520, 0x1d29420, 0x1d26be0<ST4[@eicas_discretes]> [ORD=46]


Legally typed node: 0x1d26ae0: i32 = Constant<32> [ORD=45] [ID=0]

Legally typed node: 0x1d26be0: i32 = undef [ORD=44] [ID=0]

Legally typed node: 0x1d29420: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=44] [ID=0]

Legally typed node: 0x1d09b38: ch = EntryToken [ORD=44] [ID=0]

Legally typed node: 0x1d272e0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d26be0<LD4[@eicas_discretes]> [ORD=44] [ID=0]

Legally typed node: 0x1d29520: i32 = or 0x1d272e0, 0x1d26ae0 [ORD=45] [ID=0]

Legally typed node: 0x1d29220: ch = store 0x1d272e0:1, 0x1d29520, 0x1d29420, 0x1d26be0<ST4[@eicas_discretes]> [ORD=46] [ID=0]

Legally typed node: 0x7fff243c9bc0: ch = handlenode 0x1d29220 [ID=0]

Type-legalized selection DAG: BB#10 'AssignFunction3:AssignFunction3.if.then19'
SelectionDAG has 7 nodes:
  0x1d29420: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=44] [ID=-3]

  0x1d26be0: i32 = undef [ORD=44] [ID=-3]

    0x1d09b38: ch = EntryToken [ORD=44] [ID=-3]

    0x1d29420: <multiple use>
    0x1d26be0: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d26be0<LD4[@eicas_discretes]> [ORD=44] [ID=-3]

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d26ae0: i32 = Constant<32> [ORD=45] [ID=-3]

    0x1d29520: i32 = or 0x1d272e0, 0x1d26ae0 [ORD=45] [ID=-3]

    0x1d29420: <multiple use>
    0x1d26be0: <multiple use>
  0x1d29220: ch = store 0x1d272e0:1, 0x1d29520, 0x1d29420, 0x1d26be0<ST4[@eicas_discretes]> [ORD=46] [ID=-3]


Legalized selection DAG: BB#10 'AssignFunction3:AssignFunction3.if.then19'
SelectionDAG has 11 nodes:
  0x1d26be0: i32 = undef [ORD=44] [ID=2]

    0x1d09b38: ch = EntryToken [ORD=44] [ID=0]

    0x1d269e0: <multiple use>
    0x1d26be0: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d269e0, 0x1d26be0<LD4[@eicas_discretes]> [ORD=44] [ID=4]

      0x1d265e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

    0x1d26ee0: i32 = REDEFINEISD::Hi 0x1d265e0

      0x1d267e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

    0x1d268e0: i32 = REDEFINEISD::Lo 0x1d267e0

  0x1d269e0: i32 = add 0x1d26ee0, 0x1d268e0

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d26ae0: i32 = Constant<32> [ORD=45] [ID=3]

    0x1d29520: i32 = or 0x1d272e0, 0x1d26ae0 [ORD=45] [ID=5]

    0x1d269e0: <multiple use>
    0x1d26be0: <multiple use>
  0x1d29220: ch = store 0x1d272e0:1, 0x1d29520, 0x1d269e0, 0x1d26be0<ST4[@eicas_discretes]> [ORD=46] [ID=6]


Optimized legalized selection DAG: BB#10 'AssignFunction3:AssignFunction3.if.then19'
SelectionDAG has 11 nodes:
  0x1d26be0: i32 = undef [ORD=44] [ID=2]

    0x1d09b38: ch = EntryToken [ORD=44] [ID=0]

    0x1d269e0: <multiple use>
    0x1d26be0: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d269e0, 0x1d26be0<LD4[@eicas_discretes]> [ORD=44] [ID=4]

      0x1d265e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

    0x1d26ee0: i32 = REDEFINEISD::Hi 0x1d265e0

      0x1d267e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

    0x1d268e0: i32 = REDEFINEISD::Lo 0x1d267e0

  0x1d269e0: i32 = add 0x1d26ee0, 0x1d268e0

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d26ae0: i32 = Constant<32> [ORD=45] [ID=3]

    0x1d29520: i32 = or 0x1d272e0, 0x1d26ae0 [ORD=45] [ID=5]

    0x1d269e0: <multiple use>
    0x1d26be0: <multiple use>
  0x1d29220: ch = store 0x1d272e0:1, 0x1d29520, 0x1d269e0, 0x1d26be0<ST4[@eicas_discretes]> [ORD=46] [ID=6]


===== Instruction selection begins: BB#10 'AssignFunction3.if.then19'
ISEL: Starting pattern match on root node: 0x1d29220: ch = store 0x1d272e0:1, 0x1d29520, 0x1d269e0, 0x1d26be0<ST4[@eicas_discretes]> [ORD=46] [ID=10]

  Initial Opcode index to 178
  Morphed node: 0x1d29220: ch = SW 0x1d29520, 0x1d269e0, 0x1d29420, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=46]

ISEL: Match complete!
=> 0x1d29220: ch = SW 0x1d29520, 0x1d269e0, 0x1d29420, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=46]

ISEL: Starting pattern match on root node: 0x1d29520: i32 = or 0x1d272e0, 0x1d26ae0 [ORD=45] [ID=9]

  Initial Opcode index to 567
  Morphed node: 0x1d29520: i32 = ORI 0x1d272e0, 0x1d266e0 [ORD=45]

ISEL: Match complete!
=> 0x1d29520: i32 = ORI 0x1d272e0, 0x1d266e0 [ORD=45]

ISEL: Starting pattern match on root node: 0x1d272e0: i32,ch = load 0x1d09b38, 0x1d269e0, 0x1d26be0<LD4[@eicas_discretes]> [ORD=44] [ID=8]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x1d272e0: i32,ch = LW 0x1d269e0, 0x1d29420, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=44]

ISEL: Match complete!
=> 0x1d272e0: i32,ch = LW 0x1d269e0, 0x1d29420, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=44]

ISEL: Starting pattern match on root node: 0x1d269e0: i32 = add 0x1d26ee0, 0x1d268e0 [ID=7]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x1d269e0: i32 = ADD 0x1d268e0, 0x1d26ee0

ISEL: Match complete!
=> 0x1d269e0: i32 = ADD 0x1d268e0, 0x1d26ee0

ISEL: Starting pattern match on root node: 0x1d268e0: i32 = REDEFINEISD::Lo 0x1d267e0 [ID=6]

  Initial Opcode index to 1204
  Morphed node: 0x1d268e0: i32 = ADDI 0x1d26be0, 0x1d267e0

ISEL: Match complete!
=> 0x1d268e0: i32 = ADDI 0x1d26be0, 0x1d267e0

ISEL: Starting pattern match on root node: 0x1d26ee0: i32 = REDEFINEISD::Hi 0x1d265e0 [ID=5]

  Initial Opcode index to 1186
  Morphed node: 0x1d26ee0: i32 = LUI 0x1d265e0

ISEL: Match complete!
=> 0x1d26ee0: i32 = LUI 0x1d265e0

=> 0x1d267e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

=> 0x1d265e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

=> 0x1d09b38: ch = EntryToken [ORD=44]

===== Instruction selection ends:
Selected selection DAG: BB#10 'AssignFunction3:AssignFunction3.if.then19'
SelectionDAG has 12 nodes:
      0x1d26be0: i32 = Register %zero

      0x1d267e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

    0x1d268e0: i32 = ADDI 0x1d26be0, 0x1d267e0

      0x1d265e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

    0x1d26ee0: i32 = LUI 0x1d265e0

  0x1d269e0: i32 = ADD 0x1d268e0, 0x1d26ee0

    0x1d269e0: <multiple use>
    0x1d29420: <multiple use>
    0x1d09b38: ch = EntryToken [ORD=44]

  0x1d272e0: i32,ch = LW 0x1d269e0, 0x1d29420, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=44]

  0x1d29420: i32 = TargetConstant<0>

      0x1d272e0: <multiple use>
      0x1d266e0: i32 = TargetConstant<32>

    0x1d29520: i32 = ORI 0x1d272e0, 0x1d266e0 [ORD=45]

    0x1d269e0: <multiple use>
    0x1d29420: <multiple use>
    0x1d272e0: <multiple use>
  0x1d29220: ch = SW 0x1d29520, 0x1d269e0, 0x1d29420, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=46]


********** List Scheduling BB#10 'AssignFunction3.if.then19' **********
SU(0): 0x1d29220: ch = SW 0x1d29520, 0x1d269e0, 0x1d29420, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=46] [ID=0]

  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
   val SU(5): Latency=1
   val SU(2): Latency=1
   ch  SU(1): Latency=1

SU(1): 0x1d272e0: i32,ch = LW 0x1d269e0, 0x1d29420, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=44] [ID=1]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1
   val SU(5): Latency=1

SU(2): 0x1d269e0: i32 = ADD 0x1d268e0, 0x1d26ee0 [ID=2]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(4): Latency=1
   val SU(3): Latency=1
  Successors:
   val SU(0): Latency=1
   val SU(1): Latency=1

SU(3): 0x1d26ee0: i32 = LUI 0x1d265e0 [ID=3]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(2): Latency=1

SU(4): 0x1d268e0: i32 = ADDI 0x1d26be0, 0x1d267e0 [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(2): Latency=1

SU(5): 0x1d29520: i32 = ORI 0x1d272e0, 0x1d266e0 [ORD=45] [ID=5]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(1): Latency=1
  Successors:
   val SU(0): Latency=1


Examining Available:
Height 0: SU(0): 0x1d29220: ch = SW 0x1d29520, 0x1d269e0, 0x1d29420, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=46] [ID=0]


*** Scheduling [0]: SU(0): 0x1d29220: ch = SW 0x1d29520, 0x1d269e0, 0x1d29420, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=46] [ID=0]


Examining Available:
Height 1: SU(5): 0x1d29520: i32 = ORI 0x1d272e0, 0x1d266e0 [ORD=45] [ID=5]


*** Scheduling [1]: SU(5): 0x1d29520: i32 = ORI 0x1d272e0, 0x1d266e0 [ORD=45] [ID=5]


Examining Available:
Height 2: SU(1): 0x1d272e0: i32,ch = LW 0x1d269e0, 0x1d29420, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=44] [ID=1]


*** Scheduling [2]: SU(1): 0x1d272e0: i32,ch = LW 0x1d269e0, 0x1d29420, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=44] [ID=1]


Examining Available:
Height 3: SU(2): 0x1d269e0: i32 = ADD 0x1d268e0, 0x1d26ee0 [ID=2]


*** Scheduling [3]: SU(2): 0x1d269e0: i32 = ADD 0x1d268e0, 0x1d26ee0 [ID=2]


Examining Available:
Height 4: SU(4): 0x1d268e0: i32 = ADDI 0x1d26be0, 0x1d267e0 [ID=4]

Height 4: SU(3): 0x1d26ee0: i32 = LUI 0x1d265e0 [ID=3]


*** Scheduling [4]: SU(4): 0x1d268e0: i32 = ADDI 0x1d26be0, 0x1d267e0 [ID=4]


Examining Available:
Height 4: SU(3): 0x1d26ee0: i32 = LUI 0x1d265e0 [ID=3]


*** Scheduling [5]: SU(3): 0x1d26ee0: i32 = LUI 0x1d265e0 [ID=3]

*** Final schedule ***
SU(3): 0x1d26ee0: i32 = LUI 0x1d265e0 [ID=3]

SU(4): 0x1d268e0: i32 = ADDI 0x1d26be0, 0x1d267e0 [ID=4]

SU(2): 0x1d269e0: i32 = ADD 0x1d268e0, 0x1d26ee0 [ID=2]

SU(1): 0x1d272e0: i32,ch = LW 0x1d269e0, 0x1d29420, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=44] [ID=1]

SU(5): 0x1d29520: i32 = ORI 0x1d272e0, 0x1d266e0 [ORD=45] [ID=5]

SU(0): 0x1d29220: ch = SW 0x1d29520, 0x1d269e0, 0x1d29420, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=46] [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %37 = load i32** %2, align 4
I was here to add   %2 = alloca i32*, align 4
with I type i32*and sd value :0x1d26be0: i32 = FrameIndex<1>
new load?0x1d29220: i32,ch = load 0x1d09b38, 0x1d26be0, 0x1d29420<LD4[%2]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x1d266e0: i32 = Constant<0>

    0x1d09b38: ch = EntryToken

    0x1d26be0: i32 = FrameIndex<1>

    0x1d29420: i32 = undef

  0x1d29220: i32,ch = load 0x1d09b38, 0x1d26be0, 0x1d29420<LD4[%2]>

  0x1d09b38: ch = EntryToken


visiting load instruction   %39 = load i32* %38, align 4
with I type i32and sd value :0x1d269e0: i32 = add 0x1d29220, 0x1d272e0
new load?0x1d268e0: i32,ch = load 0x1d09b38, 0x1d269e0, 0x1d29420<LD4[%38]>
dag after load is dealt with?SelectionDAG has 9 nodes:
  0x1d266e0: i32 = Constant<0>

  0x1d29420: i32 = undef [ORD=47]

  0x1d29520: i64 = Constant<24>

    0x1d09b38: <multiple use>
        0x1d09b38: <multiple use>
        0x1d26be0: i32 = FrameIndex<1> [ORD=47]

        0x1d29420: <multiple use>
      0x1d29220: i32,ch = load 0x1d09b38, 0x1d26be0, 0x1d29420<LD4[%2]> [ORD=47]

      0x1d272e0: i32 = Constant<24> [ORD=48]

    0x1d269e0: i32 = add 0x1d29220, 0x1d272e0 [ORD=48]

    0x1d29420: <multiple use>
  0x1d268e0: i32,ch = load 0x1d09b38, 0x1d269e0, 0x1d29420<LD4[%38]>

  0x1d09b38: ch = EntryToken [ORD=47]


I was here to add i32 0
Initial selection DAG: BB#11 'AssignFunction3:AssignFunction3.if.end21'
SelectionDAG has 17 nodes:
  0x1d09b38: ch = EntryToken [ORD=47]

  0x1d29420: i32 = undef [ORD=47]

  0x1d29520: i64 = Constant<24>

      0x1d09b38: <multiple use>
            0x1d09b38: <multiple use>
                0x1d09b38: <multiple use>
                0x1d26be0: i32 = FrameIndex<1> [ORD=47]

                0x1d29420: <multiple use>
              0x1d29220: i32,ch = load 0x1d09b38, 0x1d26be0, 0x1d29420<LD4[%2]> [ORD=47]

              0x1d272e0: i32 = Constant<24> [ORD=48]

            0x1d269e0: i32 = add 0x1d29220, 0x1d272e0 [ORD=48]

            0x1d29420: <multiple use>
          0x1d268e0: i32,ch = load 0x1d09b38, 0x1d269e0, 0x1d29420<LD4[%38]> [ORD=49]

          0x1d266e0: i32 = Constant<0> [ORD=50]

          0x1d26ee0: ch = setne [ORD=50]

        0x1d267e0: i1 = setcc 0x1d268e0, 0x1d266e0, 0x1d26ee0 [ORD=50]

        0x1d265e0: i1 = Constant<-1>

      0x1d26ae0: i1 = xor 0x1d267e0, 0x1d265e0

      0x1d26fe0: ch = BasicBlock<AssignFunction3.if.end26 0x1d36960>

    0x1d26de0: ch = brcond 0x1d09b38, 0x1d26ae0, 0x1d26fe0

    0x1d271e0: ch = BasicBlock<AssignFunction3.if.then24 0x1d368b0>

  0x1d270e0: ch = br 0x1d26de0, 0x1d271e0



Replacing.3 0x1d26ae0: i1 = xor 0x1d267e0, 0x1d265e0

With: 0x1d273e0: i1 = setcc 0x1d268e0, 0x1d266e0, 0x1d29320

Optimized lowered selection DAG: BB#11 'AssignFunction3:AssignFunction3.if.end21'
SelectionDAG has 14 nodes:
  0x1d09b38: ch = EntryToken [ORD=47]

  0x1d29420: i32 = undef [ORD=47]

      0x1d09b38: <multiple use>
          0x1d09b38: <multiple use>
              0x1d09b38: <multiple use>
              0x1d26be0: i32 = FrameIndex<1> [ORD=47]

              0x1d29420: <multiple use>
            0x1d29220: i32,ch = load 0x1d09b38, 0x1d26be0, 0x1d29420<LD4[%2]> [ORD=47]

            0x1d272e0: i32 = Constant<24> [ORD=48]

          0x1d269e0: i32 = add 0x1d29220, 0x1d272e0 [ORD=48]

          0x1d29420: <multiple use>
        0x1d268e0: i32,ch = load 0x1d09b38, 0x1d269e0, 0x1d29420<LD4[%38]> [ORD=49]

        0x1d266e0: i32 = Constant<0> [ORD=50]

        0x1d29320: ch = seteq

      0x1d273e0: i1 = setcc 0x1d268e0, 0x1d266e0, 0x1d29320

      0x1d26fe0: ch = BasicBlock<AssignFunction3.if.end26 0x1d36960>

    0x1d26de0: ch = brcond 0x1d09b38, 0x1d273e0, 0x1d26fe0

    0x1d271e0: ch = BasicBlock<AssignFunction3.if.then24 0x1d368b0>

  0x1d270e0: ch = br 0x1d26de0, 0x1d271e0


Legally typed node: 0x1d29320: ch = seteq [ID=0]

Legally typed node: 0x1d271e0: ch = BasicBlock<AssignFunction3.if.then24 0x1d368b0> [ID=0]

Legally typed node: 0x1d26fe0: ch = BasicBlock<AssignFunction3.if.end26 0x1d36960> [ID=0]

Legally typed node: 0x1d272e0: i32 = Constant<24> [ORD=48] [ID=0]

Legally typed node: 0x1d29420: i32 = undef [ORD=47] [ID=0]

Legally typed node: 0x1d266e0: i32 = Constant<0> [ORD=50] [ID=0]

Legally typed node: 0x1d26be0: i32 = FrameIndex<1> [ORD=47] [ID=0]

Legally typed node: 0x1d09b38: ch = EntryToken [ORD=47] [ID=0]

Legally typed node: 0x1d29220: i32,ch = load 0x1d09b38, 0x1d26be0, 0x1d29420<LD4[%2]> [ORD=47] [ID=0]

Legally typed node: 0x1d269e0: i32 = add 0x1d29220, 0x1d272e0 [ORD=48] [ID=0]

Legally typed node: 0x1d268e0: i32,ch = load 0x1d09b38, 0x1d269e0, 0x1d29420<LD4[%38]> [ORD=49] [ID=0]

Promote integer result: 0x1d273e0: i1 = setcc 0x1d268e0, 0x1d266e0, 0x1d29320 [ID=0]

Promote integer operand: 0x1d26de0: ch = brcond 0x1d09b38, 0x1d273e0, 0x1d26fe0 [ID=0]

Promote integer operand: 0x1d26ee0: i32 = zero_extend 0x1d273e0 [ID=0]

Legally typed node: 0x1d267e0: i32 = Constant<1> [ID=0]

Legally typed node: 0x1d29520: i32 = setcc 0x1d268e0, 0x1d266e0, 0x1d29320 [ID=0]

Legally typed node: 0x1d265e0: i32 = and 0x1d29520, 0x1d267e0 [ID=0]

Legally typed node: 0x1d26de0: ch = brcond 0x1d09b38, 0x1d265e0, 0x1d26fe0 [ID=0]

Legally typed node: 0x1d270e0: ch = br 0x1d26de0, 0x1d271e0 [ID=0]

Legally typed node: 0x7fff243c9bc0: ch = handlenode 0x1d270e0 [ID=0]

Type-legalized selection DAG: BB#11 'AssignFunction3:AssignFunction3.if.end21'
SelectionDAG has 16 nodes:
  0x1d09b38: ch = EntryToken [ORD=47] [ID=-3]

  0x1d29420: i32 = undef [ORD=47] [ID=-3]

      0x1d09b38: <multiple use>
            0x1d09b38: <multiple use>
                0x1d09b38: <multiple use>
                0x1d26be0: i32 = FrameIndex<1> [ORD=47] [ID=-3]

                0x1d29420: <multiple use>
              0x1d29220: i32,ch = load 0x1d09b38, 0x1d26be0, 0x1d29420<LD4[%2]> [ORD=47] [ID=-3]

              0x1d272e0: i32 = Constant<24> [ORD=48] [ID=-3]

            0x1d269e0: i32 = add 0x1d29220, 0x1d272e0 [ORD=48] [ID=-3]

            0x1d29420: <multiple use>
          0x1d268e0: i32,ch = load 0x1d09b38, 0x1d269e0, 0x1d29420<LD4[%38]> [ORD=49] [ID=-3]

          0x1d266e0: i32 = Constant<0> [ORD=50] [ID=-3]

          0x1d29320: ch = seteq [ID=-3]

        0x1d29520: i32 = setcc 0x1d268e0, 0x1d266e0, 0x1d29320 [ID=-3]

        0x1d267e0: i32 = Constant<1> [ID=-3]

      0x1d265e0: i32 = and 0x1d29520, 0x1d267e0 [ID=-3]

      0x1d26fe0: ch = BasicBlock<AssignFunction3.if.end26 0x1d36960> [ID=-3]

    0x1d26de0: ch = brcond 0x1d09b38, 0x1d265e0, 0x1d26fe0 [ID=-3]

    0x1d271e0: ch = BasicBlock<AssignFunction3.if.then24 0x1d368b0> [ID=-3]

  0x1d270e0: ch = br 0x1d26de0, 0x1d271e0 [ID=-3]



Replacing.2 0x1d265e0: i32 = and 0x1d29520, 0x1d267e0 [ID=-3]

With: 0x1d29520: i32 = setcc 0x1d268e0, 0x1d266e0, 0x1d29320 [ID=-3]

Optimized type-legalized selection DAG: BB#11 'AssignFunction3:AssignFunction3.if.end21'
SelectionDAG has 14 nodes:
  0x1d09b38: ch = EntryToken [ORD=47] [ID=-3]

  0x1d29420: i32 = undef [ORD=47] [ID=-3]

      0x1d09b38: <multiple use>
          0x1d09b38: <multiple use>
              0x1d09b38: <multiple use>
              0x1d26be0: i32 = FrameIndex<1> [ORD=47] [ID=-3]

              0x1d29420: <multiple use>
            0x1d29220: i32,ch = load 0x1d09b38, 0x1d26be0, 0x1d29420<LD4[%2]> [ORD=47] [ID=-3]

            0x1d272e0: i32 = Constant<24> [ORD=48] [ID=-3]

          0x1d269e0: i32 = add 0x1d29220, 0x1d272e0 [ORD=48] [ID=-3]

          0x1d29420: <multiple use>
        0x1d268e0: i32,ch = load 0x1d09b38, 0x1d269e0, 0x1d29420<LD4[%38]> [ORD=49] [ID=-3]

        0x1d266e0: i32 = Constant<0> [ORD=50] [ID=-3]

        0x1d29320: ch = seteq [ID=-3]

      0x1d29520: i32 = setcc 0x1d268e0, 0x1d266e0, 0x1d29320 [ID=-3]

      0x1d26fe0: ch = BasicBlock<AssignFunction3.if.end26 0x1d36960> [ID=-3]

    0x1d26de0: ch = brcond 0x1d09b38, 0x1d29520, 0x1d26fe0 [ID=-3]

    0x1d271e0: ch = BasicBlock<AssignFunction3.if.then24 0x1d368b0> [ID=-3]

  0x1d270e0: ch = br 0x1d26de0, 0x1d271e0 [ID=-3]


Legalized selection DAG: BB#11 'AssignFunction3:AssignFunction3.if.end21'
SelectionDAG has 14 nodes:
  0x1d09b38: ch = EntryToken [ORD=47] [ID=0]

  0x1d29420: i32 = undef [ORD=47] [ID=3]

      0x1d09b38: <multiple use>
          0x1d09b38: <multiple use>
              0x1d09b38: <multiple use>
              0x1d26be0: i32 = FrameIndex<1> [ORD=47] [ID=1]

              0x1d29420: <multiple use>
            0x1d29220: i32,ch = load 0x1d09b38, 0x1d26be0, 0x1d29420<LD4[%2]> [ORD=47] [ID=8]

            0x1d272e0: i32 = Constant<24> [ORD=48] [ID=4]

          0x1d269e0: i32 = add 0x1d29220, 0x1d272e0 [ORD=48] [ID=9]

          0x1d29420: <multiple use>
        0x1d268e0: i32,ch = load 0x1d09b38, 0x1d269e0, 0x1d29420<LD4[%38]> [ORD=49] [ID=10]

        0x1d266e0: i32 = Constant<0> [ORD=50] [ID=2]

        0x1d29320: ch = seteq [ID=7]

      0x1d29520: i32 = setcc 0x1d268e0, 0x1d266e0, 0x1d29320 [ID=11]

      0x1d26fe0: ch = BasicBlock<AssignFunction3.if.end26 0x1d36960> [ID=5]

    0x1d26de0: ch = brcond 0x1d09b38, 0x1d29520, 0x1d26fe0 [ID=12]

    0x1d271e0: ch = BasicBlock<AssignFunction3.if.then24 0x1d368b0> [ID=6]

  0x1d270e0: ch = br 0x1d26de0, 0x1d271e0 [ID=13]


Optimized legalized selection DAG: BB#11 'AssignFunction3:AssignFunction3.if.end21'
SelectionDAG has 14 nodes:
  0x1d09b38: ch = EntryToken [ORD=47] [ID=0]

  0x1d29420: i32 = undef [ORD=47] [ID=3]

      0x1d09b38: <multiple use>
          0x1d09b38: <multiple use>
              0x1d09b38: <multiple use>
              0x1d26be0: i32 = FrameIndex<1> [ORD=47] [ID=1]

              0x1d29420: <multiple use>
            0x1d29220: i32,ch = load 0x1d09b38, 0x1d26be0, 0x1d29420<LD4[%2]> [ORD=47] [ID=8]

            0x1d272e0: i32 = Constant<24> [ORD=48] [ID=4]

          0x1d269e0: i32 = add 0x1d29220, 0x1d272e0 [ORD=48] [ID=9]

          0x1d29420: <multiple use>
        0x1d268e0: i32,ch = load 0x1d09b38, 0x1d269e0, 0x1d29420<LD4[%38]> [ORD=49] [ID=10]

        0x1d266e0: i32 = Constant<0> [ORD=50] [ID=2]

        0x1d29320: ch = seteq [ID=7]

      0x1d29520: i32 = setcc 0x1d268e0, 0x1d266e0, 0x1d29320 [ID=11]

      0x1d26fe0: ch = BasicBlock<AssignFunction3.if.end26 0x1d36960> [ID=5]

    0x1d26de0: ch = brcond 0x1d09b38, 0x1d29520, 0x1d26fe0 [ID=12]

    0x1d271e0: ch = BasicBlock<AssignFunction3.if.then24 0x1d368b0> [ID=6]

  0x1d270e0: ch = br 0x1d26de0, 0x1d271e0 [ID=13]


===== Instruction selection begins: BB#11 'AssignFunction3.if.end21'
ISEL: Starting pattern match on root node: 0x1d270e0: ch = br 0x1d26de0, 0x1d271e0 [ID=13]

  Initial Opcode index to 1938
  Morphed node: 0x1d270e0: ch = JAL 0x1d271e0, 0x1d26de0

ISEL: Match complete!
=> 0x1d270e0: ch = JAL 0x1d271e0, 0x1d26de0

ISEL: Starting pattern match on root node: 0x1d26de0: ch = brcond 0x1d09b38, 0x1d29520, 0x1d26fe0 [ID=12]

  Initial Opcode index to 1439
  Morphed node: 0x1d26de0: ch = BEQ 0x1d26fe0, 0x1d268e0, 0x1d266e0, 0x1d09b38

ISEL: Match complete!
=> 0x1d26de0: ch = BEQ 0x1d26fe0, 0x1d268e0, 0x1d266e0, 0x1d09b38

ISEL: Starting pattern match on root node: 0x1d268e0: i32,ch = load 0x1d09b38, 0x1d269e0, 0x1d29420<LD4[%38]> [ORD=49] [ID=10]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x1d268e0: i32,ch = LW 0x1d29220, 0x1d29320, 0x1d09b38<Mem:LD4[%38]> [ORD=49]

ISEL: Match complete!
=> 0x1d268e0: i32,ch = LW 0x1d29220, 0x1d29320, 0x1d09b38<Mem:LD4[%38]> [ORD=49]

ISEL: Starting pattern match on root node: 0x1d29220: i32,ch = load 0x1d09b38, 0x1d26be0, 0x1d29420<LD4[%2]> [ORD=47] [ID=8]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x1d29220: i32,ch = LW 0x1d26be0, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=47]

ISEL: Match complete!
=> 0x1d29220: i32,ch = LW 0x1d26be0, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=47]

=> 0x1d271e0: ch = BasicBlock<AssignFunction3.if.then24 0x1d368b0>

=> 0x1d26fe0: ch = BasicBlock<AssignFunction3.if.end26 0x1d36960>

ISEL: Starting pattern match on root node: 0x1d266e0: i32 = Constant<0> [ORD=50] [ID=2]

  Initial Opcode index to 1226
comparing 0 and 0 and returning value:1
ISEL: Match complete!
=> 0x1d266e0: i32 = Constant<0> [ORD=50] [ID=2]

=> 0x1d09b38: ch = EntryToken [ORD=47]

===== Instruction selection ends:
Selected selection DAG: BB#11 'AssignFunction3:AssignFunction3.if.end21'
SelectionDAG has 13 nodes:
  0x1d09b38: ch = EntryToken [ORD=47]

    0x1d271e0: ch = BasicBlock<AssignFunction3.if.then24 0x1d368b0>

      0x1d26fe0: ch = BasicBlock<AssignFunction3.if.end26 0x1d36960>

            0x1d266e0: i32 = Register %t5

            0x1d269e0: i32 = TargetFrameIndex<1>

          0x1d26be0: i32 = ADDI 0x1d266e0, 0x1d269e0 [ORD=47]

          0x1d272e0: i32 = TargetConstant<0>

          0x1d09b38: <multiple use>
        0x1d29220: i32,ch = LW 0x1d26be0, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=47]

        0x1d29320: i32 = TargetConstant<24>

        0x1d09b38: <multiple use>
      0x1d268e0: i32,ch = LW 0x1d29220, 0x1d29320, 0x1d09b38<Mem:LD4[%38]> [ORD=49]

      0x1d29420: i32 = Register %zero

      0x1d09b38: <multiple use>
    0x1d26de0: ch = BEQ 0x1d26fe0, 0x1d268e0, 0x1d29420, 0x1d09b38

  0x1d270e0: ch = JAL 0x1d271e0, 0x1d26de0


********** List Scheduling BB#11 'AssignFunction3.if.end21' **********
SU(0): 0x1d270e0: ch = JAL 0x1d271e0, 0x1d26de0 [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x1d26de0: ch = BEQ 0x1d26fe0, 0x1d268e0, 0x1d29420, 0x1d09b38 [ID=1]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x1d268e0: i32,ch = LW 0x1d29220, 0x1d29320, 0x1d09b38<Mem:LD4[%38]> [ORD=49] [ID=2]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(3): Latency=1
  Successors:
   val SU(1): Latency=1

SU(3): 0x1d29220: i32,ch = LW 0x1d26be0, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=47] [ID=3]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(4): Latency=1
  Successors:
   val SU(2): Latency=1

SU(4): 0x1d26be0: i32 = ADDI 0x1d266e0, 0x1d269e0 [ORD=47] [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(3): Latency=1


Examining Available:
Height 0: SU(0): 0x1d270e0: ch = JAL 0x1d271e0, 0x1d26de0 [ID=0]


*** Scheduling [0]: SU(0): 0x1d270e0: ch = JAL 0x1d271e0, 0x1d26de0 [ID=0]


Examining Available:
Height 1: SU(1): 0x1d26de0: ch = BEQ 0x1d26fe0, 0x1d268e0, 0x1d29420, 0x1d09b38 [ID=1]


*** Scheduling [1]: SU(1): 0x1d26de0: ch = BEQ 0x1d26fe0, 0x1d268e0, 0x1d29420, 0x1d09b38 [ID=1]


Examining Available:
Height 2: SU(2): 0x1d268e0: i32,ch = LW 0x1d29220, 0x1d29320, 0x1d09b38<Mem:LD4[%38]> [ORD=49] [ID=2]


*** Scheduling [2]: SU(2): 0x1d268e0: i32,ch = LW 0x1d29220, 0x1d29320, 0x1d09b38<Mem:LD4[%38]> [ORD=49] [ID=2]


Examining Available:
Height 3: SU(3): 0x1d29220: i32,ch = LW 0x1d26be0, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=47] [ID=3]


*** Scheduling [3]: SU(3): 0x1d29220: i32,ch = LW 0x1d26be0, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=47] [ID=3]


Examining Available:
Height 4: SU(4): 0x1d26be0: i32 = ADDI 0x1d266e0, 0x1d269e0 [ORD=47] [ID=4]


*** Scheduling [4]: SU(4): 0x1d26be0: i32 = ADDI 0x1d266e0, 0x1d269e0 [ORD=47] [ID=4]

*** Final schedule ***
SU(4): 0x1d26be0: i32 = ADDI 0x1d266e0, 0x1d269e0 [ORD=47] [ID=4]

SU(3): 0x1d29220: i32,ch = LW 0x1d26be0, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=47] [ID=3]

SU(2): 0x1d268e0: i32,ch = LW 0x1d29220, 0x1d29320, 0x1d09b38<Mem:LD4[%38]> [ORD=49] [ID=2]

SU(1): 0x1d26de0: ch = BEQ 0x1d26fe0, 0x1d268e0, 0x1d29420, 0x1d09b38 [ID=1]

SU(0): 0x1d270e0: ch = JAL 0x1d271e0, 0x1d26de0 [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %41 = load i32* @eicas_discretes, align 4
I was here to add @eicas_discretes = global i32 0, align 4
with I type i32and sd value :0x1d269e0: i32 = GlobalAddress<i32* @eicas_discretes> 0
new load?0x1d272e0: i32,ch = load 0x1d09b38, 0x1d269e0, 0x1d29420<LD4[@eicas_discretes]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x1d266e0: i32 = Constant<0>

    0x1d09b38: ch = EntryToken

    0x1d269e0: i32 = GlobalAddress<i32* @eicas_discretes> 0

    0x1d29420: i32 = undef

  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d269e0, 0x1d29420<LD4[@eicas_discretes]>

  0x1d09b38: ch = EntryToken


I was here to add i32 64
store visit is after?  store i32 %42, i32* @eicas_discretes, align 4
whats in dag after store?SelectionDAG has 8 nodes:
  0x1d269e0: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=51]

  0x1d266e0: i32 = Constant<0>

  0x1d29420: i32 = undef [ORD=51]

    0x1d09b38: ch = EntryToken [ORD=51]

    0x1d269e0: <multiple use>
    0x1d29420: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d269e0, 0x1d29420<LD4[@eicas_discretes]> [ORD=51]

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d29320: i32 = Constant<64> [ORD=52]

    0x1d270e0: i32 = or 0x1d272e0, 0x1d29320 [ORD=52]

    0x1d269e0: <multiple use>
    0x1d29420: <multiple use>
  0x1d26de0: ch = store 0x1d272e0:1, 0x1d270e0, 0x1d269e0, 0x1d29420<ST4[@eicas_discretes]> [ORD=53]


Initial selection DAG: BB#12 'AssignFunction3:AssignFunction3.if.then24'
SelectionDAG has 8 nodes:
  0x1d269e0: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=51]

  0x1d266e0: i32 = Constant<0>

  0x1d29420: i32 = undef [ORD=51]

    0x1d09b38: ch = EntryToken [ORD=51]

    0x1d269e0: <multiple use>
    0x1d29420: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d269e0, 0x1d29420<LD4[@eicas_discretes]> [ORD=51]

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d29320: i32 = Constant<64> [ORD=52]

    0x1d270e0: i32 = or 0x1d272e0, 0x1d29320 [ORD=52]

    0x1d269e0: <multiple use>
    0x1d29420: <multiple use>
  0x1d26de0: ch = store 0x1d272e0:1, 0x1d270e0, 0x1d269e0, 0x1d29420<ST4[@eicas_discretes]> [ORD=53]


Optimized lowered selection DAG: BB#12 'AssignFunction3:AssignFunction3.if.then24'
SelectionDAG has 7 nodes:
  0x1d269e0: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=51]

  0x1d29420: i32 = undef [ORD=51]

    0x1d09b38: ch = EntryToken [ORD=51]

    0x1d269e0: <multiple use>
    0x1d29420: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d269e0, 0x1d29420<LD4[@eicas_discretes]> [ORD=51]

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d29320: i32 = Constant<64> [ORD=52]

    0x1d270e0: i32 = or 0x1d272e0, 0x1d29320 [ORD=52]

    0x1d269e0: <multiple use>
    0x1d29420: <multiple use>
  0x1d26de0: ch = store 0x1d272e0:1, 0x1d270e0, 0x1d269e0, 0x1d29420<ST4[@eicas_discretes]> [ORD=53]


Legally typed node: 0x1d29320: i32 = Constant<64> [ORD=52] [ID=0]

Legally typed node: 0x1d29420: i32 = undef [ORD=51] [ID=0]

Legally typed node: 0x1d269e0: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=51] [ID=0]

Legally typed node: 0x1d09b38: ch = EntryToken [ORD=51] [ID=0]

Legally typed node: 0x1d272e0: i32,ch = load 0x1d09b38, 0x1d269e0, 0x1d29420<LD4[@eicas_discretes]> [ORD=51] [ID=0]

Legally typed node: 0x1d270e0: i32 = or 0x1d272e0, 0x1d29320 [ORD=52] [ID=0]

Legally typed node: 0x1d26de0: ch = store 0x1d272e0:1, 0x1d270e0, 0x1d269e0, 0x1d29420<ST4[@eicas_discretes]> [ORD=53] [ID=0]

Legally typed node: 0x7fff243c9bc0: ch = handlenode 0x1d26de0 [ID=0]

Type-legalized selection DAG: BB#12 'AssignFunction3:AssignFunction3.if.then24'
SelectionDAG has 7 nodes:
  0x1d269e0: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=51] [ID=-3]

  0x1d29420: i32 = undef [ORD=51] [ID=-3]

    0x1d09b38: ch = EntryToken [ORD=51] [ID=-3]

    0x1d269e0: <multiple use>
    0x1d29420: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d269e0, 0x1d29420<LD4[@eicas_discretes]> [ORD=51] [ID=-3]

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d29320: i32 = Constant<64> [ORD=52] [ID=-3]

    0x1d270e0: i32 = or 0x1d272e0, 0x1d29320 [ORD=52] [ID=-3]

    0x1d269e0: <multiple use>
    0x1d29420: <multiple use>
  0x1d26de0: ch = store 0x1d272e0:1, 0x1d270e0, 0x1d269e0, 0x1d29420<ST4[@eicas_discretes]> [ORD=53] [ID=-3]


Legalized selection DAG: BB#12 'AssignFunction3:AssignFunction3.if.then24'
SelectionDAG has 11 nodes:
  0x1d29420: i32 = undef [ORD=51] [ID=2]

    0x1d09b38: ch = EntryToken [ORD=51] [ID=0]

    0x1d26fe0: <multiple use>
    0x1d29420: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d26fe0, 0x1d29420<LD4[@eicas_discretes]> [ORD=51] [ID=4]

      0x1d266e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

    0x1d29220: i32 = REDEFINEISD::Hi 0x1d266e0

      0x1d268e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

    0x1d271e0: i32 = REDEFINEISD::Lo 0x1d268e0

  0x1d26fe0: i32 = add 0x1d29220, 0x1d271e0

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d29320: i32 = Constant<64> [ORD=52] [ID=3]

    0x1d270e0: i32 = or 0x1d272e0, 0x1d29320 [ORD=52] [ID=5]

    0x1d26fe0: <multiple use>
    0x1d29420: <multiple use>
  0x1d26de0: ch = store 0x1d272e0:1, 0x1d270e0, 0x1d26fe0, 0x1d29420<ST4[@eicas_discretes]> [ORD=53] [ID=6]


Optimized legalized selection DAG: BB#12 'AssignFunction3:AssignFunction3.if.then24'
SelectionDAG has 11 nodes:
  0x1d29420: i32 = undef [ORD=51] [ID=2]

    0x1d09b38: ch = EntryToken [ORD=51] [ID=0]

    0x1d26fe0: <multiple use>
    0x1d29420: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d26fe0, 0x1d29420<LD4[@eicas_discretes]> [ORD=51] [ID=4]

      0x1d266e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

    0x1d29220: i32 = REDEFINEISD::Hi 0x1d266e0

      0x1d268e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

    0x1d271e0: i32 = REDEFINEISD::Lo 0x1d268e0

  0x1d26fe0: i32 = add 0x1d29220, 0x1d271e0

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d29320: i32 = Constant<64> [ORD=52] [ID=3]

    0x1d270e0: i32 = or 0x1d272e0, 0x1d29320 [ORD=52] [ID=5]

    0x1d26fe0: <multiple use>
    0x1d29420: <multiple use>
  0x1d26de0: ch = store 0x1d272e0:1, 0x1d270e0, 0x1d26fe0, 0x1d29420<ST4[@eicas_discretes]> [ORD=53] [ID=6]


===== Instruction selection begins: BB#12 'AssignFunction3.if.then24'
ISEL: Starting pattern match on root node: 0x1d26de0: ch = store 0x1d272e0:1, 0x1d270e0, 0x1d26fe0, 0x1d29420<ST4[@eicas_discretes]> [ORD=53] [ID=10]

  Initial Opcode index to 178
  Morphed node: 0x1d26de0: ch = SW 0x1d270e0, 0x1d26fe0, 0x1d269e0, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=53]

ISEL: Match complete!
=> 0x1d26de0: ch = SW 0x1d270e0, 0x1d26fe0, 0x1d269e0, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=53]

ISEL: Starting pattern match on root node: 0x1d270e0: i32 = or 0x1d272e0, 0x1d29320 [ORD=52] [ID=9]

  Initial Opcode index to 567
  Morphed node: 0x1d270e0: i32 = ORI 0x1d272e0, 0x1d26be0 [ORD=52]

ISEL: Match complete!
=> 0x1d270e0: i32 = ORI 0x1d272e0, 0x1d26be0 [ORD=52]

ISEL: Starting pattern match on root node: 0x1d272e0: i32,ch = load 0x1d09b38, 0x1d26fe0, 0x1d29420<LD4[@eicas_discretes]> [ORD=51] [ID=8]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x1d272e0: i32,ch = LW 0x1d26fe0, 0x1d269e0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=51]

ISEL: Match complete!
=> 0x1d272e0: i32,ch = LW 0x1d26fe0, 0x1d269e0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=51]

ISEL: Starting pattern match on root node: 0x1d26fe0: i32 = add 0x1d29220, 0x1d271e0 [ID=7]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x1d26fe0: i32 = ADD 0x1d271e0, 0x1d29220

ISEL: Match complete!
=> 0x1d26fe0: i32 = ADD 0x1d271e0, 0x1d29220

ISEL: Starting pattern match on root node: 0x1d271e0: i32 = REDEFINEISD::Lo 0x1d268e0 [ID=6]

  Initial Opcode index to 1204
  Morphed node: 0x1d271e0: i32 = ADDI 0x1d29420, 0x1d268e0

ISEL: Match complete!
=> 0x1d271e0: i32 = ADDI 0x1d29420, 0x1d268e0

ISEL: Starting pattern match on root node: 0x1d29220: i32 = REDEFINEISD::Hi 0x1d266e0 [ID=5]

  Initial Opcode index to 1186
  Morphed node: 0x1d29220: i32 = LUI 0x1d266e0

ISEL: Match complete!
=> 0x1d29220: i32 = LUI 0x1d266e0

=> 0x1d268e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

=> 0x1d266e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

=> 0x1d09b38: ch = EntryToken [ORD=51]

===== Instruction selection ends:
Selected selection DAG: BB#12 'AssignFunction3:AssignFunction3.if.then24'
SelectionDAG has 12 nodes:
      0x1d29420: i32 = Register %zero

      0x1d268e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

    0x1d271e0: i32 = ADDI 0x1d29420, 0x1d268e0

      0x1d266e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

    0x1d29220: i32 = LUI 0x1d266e0

  0x1d26fe0: i32 = ADD 0x1d271e0, 0x1d29220

    0x1d26fe0: <multiple use>
    0x1d269e0: <multiple use>
    0x1d09b38: ch = EntryToken [ORD=51]

  0x1d272e0: i32,ch = LW 0x1d26fe0, 0x1d269e0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=51]

  0x1d269e0: i32 = TargetConstant<0>

      0x1d272e0: <multiple use>
      0x1d26be0: i32 = TargetConstant<64>

    0x1d270e0: i32 = ORI 0x1d272e0, 0x1d26be0 [ORD=52]

    0x1d26fe0: <multiple use>
    0x1d269e0: <multiple use>
    0x1d272e0: <multiple use>
  0x1d26de0: ch = SW 0x1d270e0, 0x1d26fe0, 0x1d269e0, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=53]


********** List Scheduling BB#12 'AssignFunction3.if.then24' **********
SU(0): 0x1d26de0: ch = SW 0x1d270e0, 0x1d26fe0, 0x1d269e0, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=53] [ID=0]

  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
   val SU(5): Latency=1
   val SU(2): Latency=1
   ch  SU(1): Latency=1

SU(1): 0x1d272e0: i32,ch = LW 0x1d26fe0, 0x1d269e0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=51] [ID=1]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1
   val SU(5): Latency=1

SU(2): 0x1d26fe0: i32 = ADD 0x1d271e0, 0x1d29220 [ID=2]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(4): Latency=1
   val SU(3): Latency=1
  Successors:
   val SU(0): Latency=1
   val SU(1): Latency=1

SU(3): 0x1d29220: i32 = LUI 0x1d266e0 [ID=3]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(2): Latency=1

SU(4): 0x1d271e0: i32 = ADDI 0x1d29420, 0x1d268e0 [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(2): Latency=1

SU(5): 0x1d270e0: i32 = ORI 0x1d272e0, 0x1d26be0 [ORD=52] [ID=5]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(1): Latency=1
  Successors:
   val SU(0): Latency=1


Examining Available:
Height 0: SU(0): 0x1d26de0: ch = SW 0x1d270e0, 0x1d26fe0, 0x1d269e0, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=53] [ID=0]


*** Scheduling [0]: SU(0): 0x1d26de0: ch = SW 0x1d270e0, 0x1d26fe0, 0x1d269e0, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=53] [ID=0]


Examining Available:
Height 1: SU(5): 0x1d270e0: i32 = ORI 0x1d272e0, 0x1d26be0 [ORD=52] [ID=5]


*** Scheduling [1]: SU(5): 0x1d270e0: i32 = ORI 0x1d272e0, 0x1d26be0 [ORD=52] [ID=5]


Examining Available:
Height 2: SU(1): 0x1d272e0: i32,ch = LW 0x1d26fe0, 0x1d269e0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=51] [ID=1]


*** Scheduling [2]: SU(1): 0x1d272e0: i32,ch = LW 0x1d26fe0, 0x1d269e0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=51] [ID=1]


Examining Available:
Height 3: SU(2): 0x1d26fe0: i32 = ADD 0x1d271e0, 0x1d29220 [ID=2]


*** Scheduling [3]: SU(2): 0x1d26fe0: i32 = ADD 0x1d271e0, 0x1d29220 [ID=2]


Examining Available:
Height 4: SU(4): 0x1d271e0: i32 = ADDI 0x1d29420, 0x1d268e0 [ID=4]

Height 4: SU(3): 0x1d29220: i32 = LUI 0x1d266e0 [ID=3]


*** Scheduling [4]: SU(4): 0x1d271e0: i32 = ADDI 0x1d29420, 0x1d268e0 [ID=4]


Examining Available:
Height 4: SU(3): 0x1d29220: i32 = LUI 0x1d266e0 [ID=3]


*** Scheduling [5]: SU(3): 0x1d29220: i32 = LUI 0x1d266e0 [ID=3]

*** Final schedule ***
SU(3): 0x1d29220: i32 = LUI 0x1d266e0 [ID=3]

SU(4): 0x1d271e0: i32 = ADDI 0x1d29420, 0x1d268e0 [ID=4]

SU(2): 0x1d26fe0: i32 = ADD 0x1d271e0, 0x1d29220 [ID=2]

SU(1): 0x1d272e0: i32,ch = LW 0x1d26fe0, 0x1d269e0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=51] [ID=1]

SU(5): 0x1d270e0: i32 = ORI 0x1d272e0, 0x1d26be0 [ORD=52] [ID=5]

SU(0): 0x1d26de0: ch = SW 0x1d270e0, 0x1d26fe0, 0x1d269e0, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=53] [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %43 = load i32** %2, align 4
I was here to add   %2 = alloca i32*, align 4
with I type i32*and sd value :0x1d29420: i32 = FrameIndex<1>
new load?0x1d26de0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d269e0<LD4[%2]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x1d26be0: i32 = Constant<0>

    0x1d09b38: ch = EntryToken

    0x1d29420: i32 = FrameIndex<1>

    0x1d269e0: i32 = undef

  0x1d26de0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d269e0<LD4[%2]>

  0x1d09b38: ch = EntryToken


visiting load instruction   %45 = load i32* %44, align 4
with I type i32and sd value :0x1d26fe0: i32 = add 0x1d26de0, 0x1d272e0
new load?0x1d271e0: i32,ch = load 0x1d09b38, 0x1d26fe0, 0x1d269e0<LD4[%44]>
dag after load is dealt with?SelectionDAG has 9 nodes:
  0x1d26be0: i32 = Constant<0>

  0x1d269e0: i32 = undef [ORD=54]

  0x1d270e0: i64 = Constant<28>

    0x1d09b38: <multiple use>
        0x1d09b38: <multiple use>
        0x1d29420: i32 = FrameIndex<1> [ORD=54]

        0x1d269e0: <multiple use>
      0x1d26de0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d269e0<LD4[%2]> [ORD=54]

      0x1d272e0: i32 = Constant<28> [ORD=55]

    0x1d26fe0: i32 = add 0x1d26de0, 0x1d272e0 [ORD=55]

    0x1d269e0: <multiple use>
  0x1d271e0: i32,ch = load 0x1d09b38, 0x1d26fe0, 0x1d269e0<LD4[%44]>

  0x1d09b38: ch = EntryToken [ORD=54]


I was here to add i32 0
Initial selection DAG: BB#13 'AssignFunction3:AssignFunction3.if.end26'
SelectionDAG has 17 nodes:
  0x1d09b38: ch = EntryToken [ORD=54]

  0x1d269e0: i32 = undef [ORD=54]

  0x1d270e0: i64 = Constant<28>

      0x1d09b38: <multiple use>
            0x1d09b38: <multiple use>
                0x1d09b38: <multiple use>
                0x1d29420: i32 = FrameIndex<1> [ORD=54]

                0x1d269e0: <multiple use>
              0x1d26de0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d269e0<LD4[%2]> [ORD=54]

              0x1d272e0: i32 = Constant<28> [ORD=55]

            0x1d26fe0: i32 = add 0x1d26de0, 0x1d272e0 [ORD=55]

            0x1d269e0: <multiple use>
          0x1d271e0: i32,ch = load 0x1d09b38, 0x1d26fe0, 0x1d269e0<LD4[%44]> [ORD=56]

          0x1d26be0: i32 = Constant<0> [ORD=57]

          0x1d29220: ch = setne [ORD=57]

        0x1d268e0: i1 = setcc 0x1d271e0, 0x1d26be0, 0x1d29220 [ORD=57]

        0x1d266e0: i1 = Constant<-1>

      0x1d29320: i1 = xor 0x1d268e0, 0x1d266e0

      0x1d29520: ch = BasicBlock<AssignFunction3.if.end31 0x1d36ac0>

    0x1d267e0: ch = brcond 0x1d09b38, 0x1d29320, 0x1d29520

    0x1d265e0: ch = BasicBlock<AssignFunction3.if.then29 0x1d36a10>

  0x1d273e0: ch = br 0x1d267e0, 0x1d265e0



Replacing.3 0x1d29320: i1 = xor 0x1d268e0, 0x1d266e0

With: 0x1d26ae0: i1 = setcc 0x1d271e0, 0x1d26be0, 0x1d26ee0

Optimized lowered selection DAG: BB#13 'AssignFunction3:AssignFunction3.if.end26'
SelectionDAG has 14 nodes:
  0x1d09b38: ch = EntryToken [ORD=54]

  0x1d269e0: i32 = undef [ORD=54]

      0x1d09b38: <multiple use>
          0x1d09b38: <multiple use>
              0x1d09b38: <multiple use>
              0x1d29420: i32 = FrameIndex<1> [ORD=54]

              0x1d269e0: <multiple use>
            0x1d26de0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d269e0<LD4[%2]> [ORD=54]

            0x1d272e0: i32 = Constant<28> [ORD=55]

          0x1d26fe0: i32 = add 0x1d26de0, 0x1d272e0 [ORD=55]

          0x1d269e0: <multiple use>
        0x1d271e0: i32,ch = load 0x1d09b38, 0x1d26fe0, 0x1d269e0<LD4[%44]> [ORD=56]

        0x1d26be0: i32 = Constant<0> [ORD=57]

        0x1d26ee0: ch = seteq

      0x1d26ae0: i1 = setcc 0x1d271e0, 0x1d26be0, 0x1d26ee0

      0x1d29520: ch = BasicBlock<AssignFunction3.if.end31 0x1d36ac0>

    0x1d267e0: ch = brcond 0x1d09b38, 0x1d26ae0, 0x1d29520

    0x1d265e0: ch = BasicBlock<AssignFunction3.if.then29 0x1d36a10>

  0x1d273e0: ch = br 0x1d267e0, 0x1d265e0


Legally typed node: 0x1d26ee0: ch = seteq [ID=0]

Legally typed node: 0x1d265e0: ch = BasicBlock<AssignFunction3.if.then29 0x1d36a10> [ID=0]

Legally typed node: 0x1d29520: ch = BasicBlock<AssignFunction3.if.end31 0x1d36ac0> [ID=0]

Legally typed node: 0x1d272e0: i32 = Constant<28> [ORD=55] [ID=0]

Legally typed node: 0x1d269e0: i32 = undef [ORD=54] [ID=0]

Legally typed node: 0x1d26be0: i32 = Constant<0> [ORD=57] [ID=0]

Legally typed node: 0x1d29420: i32 = FrameIndex<1> [ORD=54] [ID=0]

Legally typed node: 0x1d09b38: ch = EntryToken [ORD=54] [ID=0]

Legally typed node: 0x1d26de0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d269e0<LD4[%2]> [ORD=54] [ID=0]

Legally typed node: 0x1d26fe0: i32 = add 0x1d26de0, 0x1d272e0 [ORD=55] [ID=0]

Legally typed node: 0x1d271e0: i32,ch = load 0x1d09b38, 0x1d26fe0, 0x1d269e0<LD4[%44]> [ORD=56] [ID=0]

Promote integer result: 0x1d26ae0: i1 = setcc 0x1d271e0, 0x1d26be0, 0x1d26ee0 [ID=0]

Promote integer operand: 0x1d267e0: ch = brcond 0x1d09b38, 0x1d26ae0, 0x1d29520 [ID=0]

Promote integer operand: 0x1d29220: i32 = zero_extend 0x1d26ae0 [ID=0]

Legally typed node: 0x1d268e0: i32 = Constant<1> [ID=0]

Legally typed node: 0x1d270e0: i32 = setcc 0x1d271e0, 0x1d26be0, 0x1d26ee0 [ID=0]

Legally typed node: 0x1d266e0: i32 = and 0x1d270e0, 0x1d268e0 [ID=0]

Legally typed node: 0x1d267e0: ch = brcond 0x1d09b38, 0x1d266e0, 0x1d29520 [ID=0]

Legally typed node: 0x1d273e0: ch = br 0x1d267e0, 0x1d265e0 [ID=0]

Legally typed node: 0x7fff243c9bc0: ch = handlenode 0x1d273e0 [ID=0]

Type-legalized selection DAG: BB#13 'AssignFunction3:AssignFunction3.if.end26'
SelectionDAG has 16 nodes:
  0x1d09b38: ch = EntryToken [ORD=54] [ID=-3]

  0x1d269e0: i32 = undef [ORD=54] [ID=-3]

      0x1d09b38: <multiple use>
            0x1d09b38: <multiple use>
                0x1d09b38: <multiple use>
                0x1d29420: i32 = FrameIndex<1> [ORD=54] [ID=-3]

                0x1d269e0: <multiple use>
              0x1d26de0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d269e0<LD4[%2]> [ORD=54] [ID=-3]

              0x1d272e0: i32 = Constant<28> [ORD=55] [ID=-3]

            0x1d26fe0: i32 = add 0x1d26de0, 0x1d272e0 [ORD=55] [ID=-3]

            0x1d269e0: <multiple use>
          0x1d271e0: i32,ch = load 0x1d09b38, 0x1d26fe0, 0x1d269e0<LD4[%44]> [ORD=56] [ID=-3]

          0x1d26be0: i32 = Constant<0> [ORD=57] [ID=-3]

          0x1d26ee0: ch = seteq [ID=-3]

        0x1d270e0: i32 = setcc 0x1d271e0, 0x1d26be0, 0x1d26ee0 [ID=-3]

        0x1d268e0: i32 = Constant<1> [ID=-3]

      0x1d266e0: i32 = and 0x1d270e0, 0x1d268e0 [ID=-3]

      0x1d29520: ch = BasicBlock<AssignFunction3.if.end31 0x1d36ac0> [ID=-3]

    0x1d267e0: ch = brcond 0x1d09b38, 0x1d266e0, 0x1d29520 [ID=-3]

    0x1d265e0: ch = BasicBlock<AssignFunction3.if.then29 0x1d36a10> [ID=-3]

  0x1d273e0: ch = br 0x1d267e0, 0x1d265e0 [ID=-3]



Replacing.2 0x1d266e0: i32 = and 0x1d270e0, 0x1d268e0 [ID=-3]

With: 0x1d270e0: i32 = setcc 0x1d271e0, 0x1d26be0, 0x1d26ee0 [ID=-3]

Optimized type-legalized selection DAG: BB#13 'AssignFunction3:AssignFunction3.if.end26'
SelectionDAG has 14 nodes:
  0x1d09b38: ch = EntryToken [ORD=54] [ID=-3]

  0x1d269e0: i32 = undef [ORD=54] [ID=-3]

      0x1d09b38: <multiple use>
          0x1d09b38: <multiple use>
              0x1d09b38: <multiple use>
              0x1d29420: i32 = FrameIndex<1> [ORD=54] [ID=-3]

              0x1d269e0: <multiple use>
            0x1d26de0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d269e0<LD4[%2]> [ORD=54] [ID=-3]

            0x1d272e0: i32 = Constant<28> [ORD=55] [ID=-3]

          0x1d26fe0: i32 = add 0x1d26de0, 0x1d272e0 [ORD=55] [ID=-3]

          0x1d269e0: <multiple use>
        0x1d271e0: i32,ch = load 0x1d09b38, 0x1d26fe0, 0x1d269e0<LD4[%44]> [ORD=56] [ID=-3]

        0x1d26be0: i32 = Constant<0> [ORD=57] [ID=-3]

        0x1d26ee0: ch = seteq [ID=-3]

      0x1d270e0: i32 = setcc 0x1d271e0, 0x1d26be0, 0x1d26ee0 [ID=-3]

      0x1d29520: ch = BasicBlock<AssignFunction3.if.end31 0x1d36ac0> [ID=-3]

    0x1d267e0: ch = brcond 0x1d09b38, 0x1d270e0, 0x1d29520 [ID=-3]

    0x1d265e0: ch = BasicBlock<AssignFunction3.if.then29 0x1d36a10> [ID=-3]

  0x1d273e0: ch = br 0x1d267e0, 0x1d265e0 [ID=-3]


Legalized selection DAG: BB#13 'AssignFunction3:AssignFunction3.if.end26'
SelectionDAG has 14 nodes:
  0x1d09b38: ch = EntryToken [ORD=54] [ID=0]

  0x1d269e0: i32 = undef [ORD=54] [ID=3]

      0x1d09b38: <multiple use>
          0x1d09b38: <multiple use>
              0x1d09b38: <multiple use>
              0x1d29420: i32 = FrameIndex<1> [ORD=54] [ID=1]

              0x1d269e0: <multiple use>
            0x1d26de0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d269e0<LD4[%2]> [ORD=54] [ID=8]

            0x1d272e0: i32 = Constant<28> [ORD=55] [ID=4]

          0x1d26fe0: i32 = add 0x1d26de0, 0x1d272e0 [ORD=55] [ID=9]

          0x1d269e0: <multiple use>
        0x1d271e0: i32,ch = load 0x1d09b38, 0x1d26fe0, 0x1d269e0<LD4[%44]> [ORD=56] [ID=10]

        0x1d26be0: i32 = Constant<0> [ORD=57] [ID=2]

        0x1d26ee0: ch = seteq [ID=7]

      0x1d270e0: i32 = setcc 0x1d271e0, 0x1d26be0, 0x1d26ee0 [ID=11]

      0x1d29520: ch = BasicBlock<AssignFunction3.if.end31 0x1d36ac0> [ID=5]

    0x1d267e0: ch = brcond 0x1d09b38, 0x1d270e0, 0x1d29520 [ID=12]

    0x1d265e0: ch = BasicBlock<AssignFunction3.if.then29 0x1d36a10> [ID=6]

  0x1d273e0: ch = br 0x1d267e0, 0x1d265e0 [ID=13]


Optimized legalized selection DAG: BB#13 'AssignFunction3:AssignFunction3.if.end26'
SelectionDAG has 14 nodes:
  0x1d09b38: ch = EntryToken [ORD=54] [ID=0]

  0x1d269e0: i32 = undef [ORD=54] [ID=3]

      0x1d09b38: <multiple use>
          0x1d09b38: <multiple use>
              0x1d09b38: <multiple use>
              0x1d29420: i32 = FrameIndex<1> [ORD=54] [ID=1]

              0x1d269e0: <multiple use>
            0x1d26de0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d269e0<LD4[%2]> [ORD=54] [ID=8]

            0x1d272e0: i32 = Constant<28> [ORD=55] [ID=4]

          0x1d26fe0: i32 = add 0x1d26de0, 0x1d272e0 [ORD=55] [ID=9]

          0x1d269e0: <multiple use>
        0x1d271e0: i32,ch = load 0x1d09b38, 0x1d26fe0, 0x1d269e0<LD4[%44]> [ORD=56] [ID=10]

        0x1d26be0: i32 = Constant<0> [ORD=57] [ID=2]

        0x1d26ee0: ch = seteq [ID=7]

      0x1d270e0: i32 = setcc 0x1d271e0, 0x1d26be0, 0x1d26ee0 [ID=11]

      0x1d29520: ch = BasicBlock<AssignFunction3.if.end31 0x1d36ac0> [ID=5]

    0x1d267e0: ch = brcond 0x1d09b38, 0x1d270e0, 0x1d29520 [ID=12]

    0x1d265e0: ch = BasicBlock<AssignFunction3.if.then29 0x1d36a10> [ID=6]

  0x1d273e0: ch = br 0x1d267e0, 0x1d265e0 [ID=13]


===== Instruction selection begins: BB#13 'AssignFunction3.if.end26'
ISEL: Starting pattern match on root node: 0x1d273e0: ch = br 0x1d267e0, 0x1d265e0 [ID=13]

  Initial Opcode index to 1938
  Morphed node: 0x1d273e0: ch = JAL 0x1d265e0, 0x1d267e0

ISEL: Match complete!
=> 0x1d273e0: ch = JAL 0x1d265e0, 0x1d267e0

ISEL: Starting pattern match on root node: 0x1d267e0: ch = brcond 0x1d09b38, 0x1d270e0, 0x1d29520 [ID=12]

  Initial Opcode index to 1439
  Morphed node: 0x1d267e0: ch = BEQ 0x1d29520, 0x1d271e0, 0x1d26be0, 0x1d09b38

ISEL: Match complete!
=> 0x1d267e0: ch = BEQ 0x1d29520, 0x1d271e0, 0x1d26be0, 0x1d09b38

ISEL: Starting pattern match on root node: 0x1d271e0: i32,ch = load 0x1d09b38, 0x1d26fe0, 0x1d269e0<LD4[%44]> [ORD=56] [ID=10]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x1d271e0: i32,ch = LW 0x1d26de0, 0x1d26ee0, 0x1d09b38<Mem:LD4[%44]> [ORD=56]

ISEL: Match complete!
=> 0x1d271e0: i32,ch = LW 0x1d26de0, 0x1d26ee0, 0x1d09b38<Mem:LD4[%44]> [ORD=56]

ISEL: Starting pattern match on root node: 0x1d26de0: i32,ch = load 0x1d09b38, 0x1d29420, 0x1d269e0<LD4[%2]> [ORD=54] [ID=8]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x1d26de0: i32,ch = LW 0x1d29420, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=54]

ISEL: Match complete!
=> 0x1d26de0: i32,ch = LW 0x1d29420, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=54]

=> 0x1d265e0: ch = BasicBlock<AssignFunction3.if.then29 0x1d36a10>

=> 0x1d29520: ch = BasicBlock<AssignFunction3.if.end31 0x1d36ac0>

ISEL: Starting pattern match on root node: 0x1d26be0: i32 = Constant<0> [ORD=57] [ID=2]

  Initial Opcode index to 1226
comparing 0 and 0 and returning value:1
ISEL: Match complete!
=> 0x1d26be0: i32 = Constant<0> [ORD=57] [ID=2]

=> 0x1d09b38: ch = EntryToken [ORD=54]

===== Instruction selection ends:
Selected selection DAG: BB#13 'AssignFunction3:AssignFunction3.if.end26'
SelectionDAG has 13 nodes:
  0x1d09b38: ch = EntryToken [ORD=54]

    0x1d265e0: ch = BasicBlock<AssignFunction3.if.then29 0x1d36a10>

      0x1d29520: ch = BasicBlock<AssignFunction3.if.end31 0x1d36ac0>

            0x1d26be0: i32 = Register %t5

            0x1d26fe0: i32 = TargetFrameIndex<1>

          0x1d29420: i32 = ADDI 0x1d26be0, 0x1d26fe0 [ORD=54]

          0x1d272e0: i32 = TargetConstant<0>

          0x1d09b38: <multiple use>
        0x1d26de0: i32,ch = LW 0x1d29420, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=54]

        0x1d26ee0: i32 = TargetConstant<28>

        0x1d09b38: <multiple use>
      0x1d271e0: i32,ch = LW 0x1d26de0, 0x1d26ee0, 0x1d09b38<Mem:LD4[%44]> [ORD=56]

      0x1d269e0: i32 = Register %zero

      0x1d09b38: <multiple use>
    0x1d267e0: ch = BEQ 0x1d29520, 0x1d271e0, 0x1d269e0, 0x1d09b38

  0x1d273e0: ch = JAL 0x1d265e0, 0x1d267e0


********** List Scheduling BB#13 'AssignFunction3.if.end26' **********
SU(0): 0x1d273e0: ch = JAL 0x1d265e0, 0x1d267e0 [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x1d267e0: ch = BEQ 0x1d29520, 0x1d271e0, 0x1d269e0, 0x1d09b38 [ID=1]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x1d271e0: i32,ch = LW 0x1d26de0, 0x1d26ee0, 0x1d09b38<Mem:LD4[%44]> [ORD=56] [ID=2]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(3): Latency=1
  Successors:
   val SU(1): Latency=1

SU(3): 0x1d26de0: i32,ch = LW 0x1d29420, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=54] [ID=3]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(4): Latency=1
  Successors:
   val SU(2): Latency=1

SU(4): 0x1d29420: i32 = ADDI 0x1d26be0, 0x1d26fe0 [ORD=54] [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(3): Latency=1


Examining Available:
Height 0: SU(0): 0x1d273e0: ch = JAL 0x1d265e0, 0x1d267e0 [ID=0]


*** Scheduling [0]: SU(0): 0x1d273e0: ch = JAL 0x1d265e0, 0x1d267e0 [ID=0]


Examining Available:
Height 1: SU(1): 0x1d267e0: ch = BEQ 0x1d29520, 0x1d271e0, 0x1d269e0, 0x1d09b38 [ID=1]


*** Scheduling [1]: SU(1): 0x1d267e0: ch = BEQ 0x1d29520, 0x1d271e0, 0x1d269e0, 0x1d09b38 [ID=1]


Examining Available:
Height 2: SU(2): 0x1d271e0: i32,ch = LW 0x1d26de0, 0x1d26ee0, 0x1d09b38<Mem:LD4[%44]> [ORD=56] [ID=2]


*** Scheduling [2]: SU(2): 0x1d271e0: i32,ch = LW 0x1d26de0, 0x1d26ee0, 0x1d09b38<Mem:LD4[%44]> [ORD=56] [ID=2]


Examining Available:
Height 3: SU(3): 0x1d26de0: i32,ch = LW 0x1d29420, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=54] [ID=3]


*** Scheduling [3]: SU(3): 0x1d26de0: i32,ch = LW 0x1d29420, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=54] [ID=3]


Examining Available:
Height 4: SU(4): 0x1d29420: i32 = ADDI 0x1d26be0, 0x1d26fe0 [ORD=54] [ID=4]


*** Scheduling [4]: SU(4): 0x1d29420: i32 = ADDI 0x1d26be0, 0x1d26fe0 [ORD=54] [ID=4]

*** Final schedule ***
SU(4): 0x1d29420: i32 = ADDI 0x1d26be0, 0x1d26fe0 [ORD=54] [ID=4]

SU(3): 0x1d26de0: i32,ch = LW 0x1d29420, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=54] [ID=3]

SU(2): 0x1d271e0: i32,ch = LW 0x1d26de0, 0x1d26ee0, 0x1d09b38<Mem:LD4[%44]> [ORD=56] [ID=2]

SU(1): 0x1d267e0: ch = BEQ 0x1d29520, 0x1d271e0, 0x1d269e0, 0x1d09b38 [ID=1]

SU(0): 0x1d273e0: ch = JAL 0x1d265e0, 0x1d267e0 [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %47 = load i32* @eicas_discretes, align 4
I was here to add @eicas_discretes = global i32 0, align 4
with I type i32and sd value :0x1d26fe0: i32 = GlobalAddress<i32* @eicas_discretes> 0
new load?0x1d272e0: i32,ch = load 0x1d09b38, 0x1d26fe0, 0x1d269e0<LD4[@eicas_discretes]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x1d26be0: i32 = Constant<0>

    0x1d09b38: ch = EntryToken

    0x1d26fe0: i32 = GlobalAddress<i32* @eicas_discretes> 0

    0x1d269e0: i32 = undef

  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d26fe0, 0x1d269e0<LD4[@eicas_discretes]>

  0x1d09b38: ch = EntryToken


I was here to add i32 128
store visit is after?  store i32 %48, i32* @eicas_discretes, align 4
whats in dag after store?SelectionDAG has 8 nodes:
  0x1d26fe0: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=58]

  0x1d26be0: i32 = Constant<0>

  0x1d269e0: i32 = undef [ORD=58]

    0x1d09b38: ch = EntryToken [ORD=58]

    0x1d26fe0: <multiple use>
    0x1d269e0: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d26fe0, 0x1d269e0<LD4[@eicas_discretes]> [ORD=58]

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d26ee0: i32 = Constant<128> [ORD=59]

    0x1d273e0: i32 = or 0x1d272e0, 0x1d26ee0 [ORD=59]

    0x1d26fe0: <multiple use>
    0x1d269e0: <multiple use>
  0x1d267e0: ch = store 0x1d272e0:1, 0x1d273e0, 0x1d26fe0, 0x1d269e0<ST4[@eicas_discretes]> [ORD=60]


Initial selection DAG: BB#14 'AssignFunction3:AssignFunction3.if.then29'
SelectionDAG has 8 nodes:
  0x1d26fe0: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=58]

  0x1d26be0: i32 = Constant<0>

  0x1d269e0: i32 = undef [ORD=58]

    0x1d09b38: ch = EntryToken [ORD=58]

    0x1d26fe0: <multiple use>
    0x1d269e0: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d26fe0, 0x1d269e0<LD4[@eicas_discretes]> [ORD=58]

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d26ee0: i32 = Constant<128> [ORD=59]

    0x1d273e0: i32 = or 0x1d272e0, 0x1d26ee0 [ORD=59]

    0x1d26fe0: <multiple use>
    0x1d269e0: <multiple use>
  0x1d267e0: ch = store 0x1d272e0:1, 0x1d273e0, 0x1d26fe0, 0x1d269e0<ST4[@eicas_discretes]> [ORD=60]


Optimized lowered selection DAG: BB#14 'AssignFunction3:AssignFunction3.if.then29'
SelectionDAG has 7 nodes:
  0x1d26fe0: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=58]

  0x1d269e0: i32 = undef [ORD=58]

    0x1d09b38: ch = EntryToken [ORD=58]

    0x1d26fe0: <multiple use>
    0x1d269e0: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d26fe0, 0x1d269e0<LD4[@eicas_discretes]> [ORD=58]

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d26ee0: i32 = Constant<128> [ORD=59]

    0x1d273e0: i32 = or 0x1d272e0, 0x1d26ee0 [ORD=59]

    0x1d26fe0: <multiple use>
    0x1d269e0: <multiple use>
  0x1d267e0: ch = store 0x1d272e0:1, 0x1d273e0, 0x1d26fe0, 0x1d269e0<ST4[@eicas_discretes]> [ORD=60]


Legally typed node: 0x1d26ee0: i32 = Constant<128> [ORD=59] [ID=0]

Legally typed node: 0x1d269e0: i32 = undef [ORD=58] [ID=0]

Legally typed node: 0x1d26fe0: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=58] [ID=0]

Legally typed node: 0x1d09b38: ch = EntryToken [ORD=58] [ID=0]

Legally typed node: 0x1d272e0: i32,ch = load 0x1d09b38, 0x1d26fe0, 0x1d269e0<LD4[@eicas_discretes]> [ORD=58] [ID=0]

Legally typed node: 0x1d273e0: i32 = or 0x1d272e0, 0x1d26ee0 [ORD=59] [ID=0]

Legally typed node: 0x1d267e0: ch = store 0x1d272e0:1, 0x1d273e0, 0x1d26fe0, 0x1d269e0<ST4[@eicas_discretes]> [ORD=60] [ID=0]

Legally typed node: 0x7fff243c9bc0: ch = handlenode 0x1d267e0 [ID=0]

Type-legalized selection DAG: BB#14 'AssignFunction3:AssignFunction3.if.then29'
SelectionDAG has 7 nodes:
  0x1d26fe0: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=58] [ID=-3]

  0x1d269e0: i32 = undef [ORD=58] [ID=-3]

    0x1d09b38: ch = EntryToken [ORD=58] [ID=-3]

    0x1d26fe0: <multiple use>
    0x1d269e0: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d26fe0, 0x1d269e0<LD4[@eicas_discretes]> [ORD=58] [ID=-3]

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d26ee0: i32 = Constant<128> [ORD=59] [ID=-3]

    0x1d273e0: i32 = or 0x1d272e0, 0x1d26ee0 [ORD=59] [ID=-3]

    0x1d26fe0: <multiple use>
    0x1d269e0: <multiple use>
  0x1d267e0: ch = store 0x1d272e0:1, 0x1d273e0, 0x1d26fe0, 0x1d269e0<ST4[@eicas_discretes]> [ORD=60] [ID=-3]


Legalized selection DAG: BB#14 'AssignFunction3:AssignFunction3.if.then29'
SelectionDAG has 11 nodes:
  0x1d269e0: i32 = undef [ORD=58] [ID=2]

    0x1d09b38: ch = EntryToken [ORD=58] [ID=0]

    0x1d29520: <multiple use>
    0x1d269e0: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d29520, 0x1d269e0<LD4[@eicas_discretes]> [ORD=58] [ID=4]

      0x1d26be0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

    0x1d26de0: i32 = REDEFINEISD::Hi 0x1d26be0

      0x1d271e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

    0x1d265e0: i32 = REDEFINEISD::Lo 0x1d271e0

  0x1d29520: i32 = add 0x1d26de0, 0x1d265e0

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d26ee0: i32 = Constant<128> [ORD=59] [ID=3]

    0x1d273e0: i32 = or 0x1d272e0, 0x1d26ee0 [ORD=59] [ID=5]

    0x1d29520: <multiple use>
    0x1d269e0: <multiple use>
  0x1d267e0: ch = store 0x1d272e0:1, 0x1d273e0, 0x1d29520, 0x1d269e0<ST4[@eicas_discretes]> [ORD=60] [ID=6]


Optimized legalized selection DAG: BB#14 'AssignFunction3:AssignFunction3.if.then29'
SelectionDAG has 11 nodes:
  0x1d269e0: i32 = undef [ORD=58] [ID=2]

    0x1d09b38: ch = EntryToken [ORD=58] [ID=0]

    0x1d29520: <multiple use>
    0x1d269e0: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d29520, 0x1d269e0<LD4[@eicas_discretes]> [ORD=58] [ID=4]

      0x1d26be0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

    0x1d26de0: i32 = REDEFINEISD::Hi 0x1d26be0

      0x1d271e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

    0x1d265e0: i32 = REDEFINEISD::Lo 0x1d271e0

  0x1d29520: i32 = add 0x1d26de0, 0x1d265e0

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d26ee0: i32 = Constant<128> [ORD=59] [ID=3]

    0x1d273e0: i32 = or 0x1d272e0, 0x1d26ee0 [ORD=59] [ID=5]

    0x1d29520: <multiple use>
    0x1d269e0: <multiple use>
  0x1d267e0: ch = store 0x1d272e0:1, 0x1d273e0, 0x1d29520, 0x1d269e0<ST4[@eicas_discretes]> [ORD=60] [ID=6]


===== Instruction selection begins: BB#14 'AssignFunction3.if.then29'
ISEL: Starting pattern match on root node: 0x1d267e0: ch = store 0x1d272e0:1, 0x1d273e0, 0x1d29520, 0x1d269e0<ST4[@eicas_discretes]> [ORD=60] [ID=10]

  Initial Opcode index to 178
  Morphed node: 0x1d267e0: ch = SW 0x1d273e0, 0x1d29520, 0x1d26fe0, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=60]

ISEL: Match complete!
=> 0x1d267e0: ch = SW 0x1d273e0, 0x1d29520, 0x1d26fe0, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=60]

ISEL: Starting pattern match on root node: 0x1d273e0: i32 = or 0x1d272e0, 0x1d26ee0 [ORD=59] [ID=9]

  Initial Opcode index to 567
  Morphed node: 0x1d273e0: i32 = ORI 0x1d272e0, 0x1d29420 [ORD=59]

ISEL: Match complete!
=> 0x1d273e0: i32 = ORI 0x1d272e0, 0x1d29420 [ORD=59]

ISEL: Starting pattern match on root node: 0x1d272e0: i32,ch = load 0x1d09b38, 0x1d29520, 0x1d269e0<LD4[@eicas_discretes]> [ORD=58] [ID=8]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x1d272e0: i32,ch = LW 0x1d29520, 0x1d26fe0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=58]

ISEL: Match complete!
=> 0x1d272e0: i32,ch = LW 0x1d29520, 0x1d26fe0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=58]

ISEL: Starting pattern match on root node: 0x1d29520: i32 = add 0x1d26de0, 0x1d265e0 [ID=7]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x1d29520: i32 = ADD 0x1d265e0, 0x1d26de0

ISEL: Match complete!
=> 0x1d29520: i32 = ADD 0x1d265e0, 0x1d26de0

ISEL: Starting pattern match on root node: 0x1d265e0: i32 = REDEFINEISD::Lo 0x1d271e0 [ID=6]

  Initial Opcode index to 1204
  Morphed node: 0x1d265e0: i32 = ADDI 0x1d269e0, 0x1d271e0

ISEL: Match complete!
=> 0x1d265e0: i32 = ADDI 0x1d269e0, 0x1d271e0

ISEL: Starting pattern match on root node: 0x1d26de0: i32 = REDEFINEISD::Hi 0x1d26be0 [ID=5]

  Initial Opcode index to 1186
  Morphed node: 0x1d26de0: i32 = LUI 0x1d26be0

ISEL: Match complete!
=> 0x1d26de0: i32 = LUI 0x1d26be0

=> 0x1d271e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

=> 0x1d26be0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

=> 0x1d09b38: ch = EntryToken [ORD=58]

===== Instruction selection ends:
Selected selection DAG: BB#14 'AssignFunction3:AssignFunction3.if.then29'
SelectionDAG has 12 nodes:
      0x1d269e0: i32 = Register %zero

      0x1d271e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

    0x1d265e0: i32 = ADDI 0x1d269e0, 0x1d271e0

      0x1d26be0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

    0x1d26de0: i32 = LUI 0x1d26be0

  0x1d29520: i32 = ADD 0x1d265e0, 0x1d26de0

    0x1d29520: <multiple use>
    0x1d26fe0: <multiple use>
    0x1d09b38: ch = EntryToken [ORD=58]

  0x1d272e0: i32,ch = LW 0x1d29520, 0x1d26fe0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=58]

  0x1d26fe0: i32 = TargetConstant<0>

      0x1d272e0: <multiple use>
      0x1d29420: i32 = TargetConstant<128>

    0x1d273e0: i32 = ORI 0x1d272e0, 0x1d29420 [ORD=59]

    0x1d29520: <multiple use>
    0x1d26fe0: <multiple use>
    0x1d272e0: <multiple use>
  0x1d267e0: ch = SW 0x1d273e0, 0x1d29520, 0x1d26fe0, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=60]


********** List Scheduling BB#14 'AssignFunction3.if.then29' **********
SU(0): 0x1d267e0: ch = SW 0x1d273e0, 0x1d29520, 0x1d26fe0, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=60] [ID=0]

  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
   val SU(5): Latency=1
   val SU(2): Latency=1
   ch  SU(1): Latency=1

SU(1): 0x1d272e0: i32,ch = LW 0x1d29520, 0x1d26fe0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=58] [ID=1]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1
   val SU(5): Latency=1

SU(2): 0x1d29520: i32 = ADD 0x1d265e0, 0x1d26de0 [ID=2]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(4): Latency=1
   val SU(3): Latency=1
  Successors:
   val SU(0): Latency=1
   val SU(1): Latency=1

SU(3): 0x1d26de0: i32 = LUI 0x1d26be0 [ID=3]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(2): Latency=1

SU(4): 0x1d265e0: i32 = ADDI 0x1d269e0, 0x1d271e0 [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(2): Latency=1

SU(5): 0x1d273e0: i32 = ORI 0x1d272e0, 0x1d29420 [ORD=59] [ID=5]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(1): Latency=1
  Successors:
   val SU(0): Latency=1


Examining Available:
Height 0: SU(0): 0x1d267e0: ch = SW 0x1d273e0, 0x1d29520, 0x1d26fe0, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=60] [ID=0]


*** Scheduling [0]: SU(0): 0x1d267e0: ch = SW 0x1d273e0, 0x1d29520, 0x1d26fe0, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=60] [ID=0]


Examining Available:
Height 1: SU(5): 0x1d273e0: i32 = ORI 0x1d272e0, 0x1d29420 [ORD=59] [ID=5]


*** Scheduling [1]: SU(5): 0x1d273e0: i32 = ORI 0x1d272e0, 0x1d29420 [ORD=59] [ID=5]


Examining Available:
Height 2: SU(1): 0x1d272e0: i32,ch = LW 0x1d29520, 0x1d26fe0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=58] [ID=1]


*** Scheduling [2]: SU(1): 0x1d272e0: i32,ch = LW 0x1d29520, 0x1d26fe0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=58] [ID=1]


Examining Available:
Height 3: SU(2): 0x1d29520: i32 = ADD 0x1d265e0, 0x1d26de0 [ID=2]


*** Scheduling [3]: SU(2): 0x1d29520: i32 = ADD 0x1d265e0, 0x1d26de0 [ID=2]


Examining Available:
Height 4: SU(4): 0x1d265e0: i32 = ADDI 0x1d269e0, 0x1d271e0 [ID=4]

Height 4: SU(3): 0x1d26de0: i32 = LUI 0x1d26be0 [ID=3]


*** Scheduling [4]: SU(4): 0x1d265e0: i32 = ADDI 0x1d269e0, 0x1d271e0 [ID=4]


Examining Available:
Height 4: SU(3): 0x1d26de0: i32 = LUI 0x1d26be0 [ID=3]


*** Scheduling [5]: SU(3): 0x1d26de0: i32 = LUI 0x1d26be0 [ID=3]

*** Final schedule ***
SU(3): 0x1d26de0: i32 = LUI 0x1d26be0 [ID=3]

SU(4): 0x1d265e0: i32 = ADDI 0x1d269e0, 0x1d271e0 [ID=4]

SU(2): 0x1d29520: i32 = ADD 0x1d265e0, 0x1d26de0 [ID=2]

SU(1): 0x1d272e0: i32,ch = LW 0x1d29520, 0x1d26fe0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=58] [ID=1]

SU(5): 0x1d273e0: i32 = ORI 0x1d272e0, 0x1d29420 [ORD=59] [ID=5]

SU(0): 0x1d267e0: ch = SW 0x1d273e0, 0x1d29520, 0x1d26fe0, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=60] [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %49 = load i32** %2, align 4
I was here to add   %2 = alloca i32*, align 4
with I type i32*and sd value :0x1d269e0: i32 = FrameIndex<1>
new load?0x1d267e0: i32,ch = load 0x1d09b38, 0x1d269e0, 0x1d26fe0<LD4[%2]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x1d29420: i32 = Constant<0>

    0x1d09b38: ch = EntryToken

    0x1d269e0: i32 = FrameIndex<1>

    0x1d26fe0: i32 = undef

  0x1d267e0: i32,ch = load 0x1d09b38, 0x1d269e0, 0x1d26fe0<LD4[%2]>

  0x1d09b38: ch = EntryToken


visiting load instruction   %51 = load i32* %50, align 4
with I type i32and sd value :0x1d29520: i32 = add 0x1d267e0, 0x1d272e0
new load?0x1d265e0: i32,ch = load 0x1d09b38, 0x1d29520, 0x1d26fe0<LD4[%50]>
dag after load is dealt with?SelectionDAG has 9 nodes:
  0x1d29420: i32 = Constant<0>

  0x1d26fe0: i32 = undef [ORD=61]

  0x1d273e0: i64 = Constant<32>

    0x1d09b38: <multiple use>
        0x1d09b38: <multiple use>
        0x1d269e0: i32 = FrameIndex<1> [ORD=61]

        0x1d26fe0: <multiple use>
      0x1d267e0: i32,ch = load 0x1d09b38, 0x1d269e0, 0x1d26fe0<LD4[%2]> [ORD=61]

      0x1d272e0: i32 = Constant<32> [ORD=62]

    0x1d29520: i32 = add 0x1d267e0, 0x1d272e0 [ORD=62]

    0x1d26fe0: <multiple use>
  0x1d265e0: i32,ch = load 0x1d09b38, 0x1d29520, 0x1d26fe0<LD4[%50]>

  0x1d09b38: ch = EntryToken [ORD=61]


I was here to add i32 0
Initial selection DAG: BB#15 'AssignFunction3:AssignFunction3.if.end31'
SelectionDAG has 17 nodes:
  0x1d09b38: ch = EntryToken [ORD=61]

  0x1d26fe0: i32 = undef [ORD=61]

  0x1d273e0: i64 = Constant<32>

      0x1d09b38: <multiple use>
            0x1d09b38: <multiple use>
                0x1d09b38: <multiple use>
                0x1d269e0: i32 = FrameIndex<1> [ORD=61]

                0x1d26fe0: <multiple use>
              0x1d267e0: i32,ch = load 0x1d09b38, 0x1d269e0, 0x1d26fe0<LD4[%2]> [ORD=61]

              0x1d272e0: i32 = Constant<32> [ORD=62]

            0x1d29520: i32 = add 0x1d267e0, 0x1d272e0 [ORD=62]

            0x1d26fe0: <multiple use>
          0x1d265e0: i32,ch = load 0x1d09b38, 0x1d29520, 0x1d26fe0<LD4[%50]> [ORD=63]

          0x1d29420: i32 = Constant<0> [ORD=64]

          0x1d26de0: ch = setne [ORD=64]

        0x1d271e0: i1 = setcc 0x1d265e0, 0x1d29420, 0x1d26de0 [ORD=64]

        0x1d26be0: i1 = Constant<-1>

      0x1d26ee0: i1 = xor 0x1d271e0, 0x1d26be0

      0x1d270e0: ch = BasicBlock<AssignFunction3.if.end36 0x1d36c20>

    0x1d268e0: ch = brcond 0x1d09b38, 0x1d26ee0, 0x1d270e0

    0x1d266e0: ch = BasicBlock<AssignFunction3.if.then34 0x1d36b70>

  0x1d26ae0: ch = br 0x1d268e0, 0x1d266e0



Replacing.3 0x1d26ee0: i1 = xor 0x1d271e0, 0x1d26be0

With: 0x1d29320: i1 = setcc 0x1d265e0, 0x1d29420, 0x1d29220

Optimized lowered selection DAG: BB#15 'AssignFunction3:AssignFunction3.if.end31'
SelectionDAG has 14 nodes:
  0x1d09b38: ch = EntryToken [ORD=61]

  0x1d26fe0: i32 = undef [ORD=61]

      0x1d09b38: <multiple use>
          0x1d09b38: <multiple use>
              0x1d09b38: <multiple use>
              0x1d269e0: i32 = FrameIndex<1> [ORD=61]

              0x1d26fe0: <multiple use>
            0x1d267e0: i32,ch = load 0x1d09b38, 0x1d269e0, 0x1d26fe0<LD4[%2]> [ORD=61]

            0x1d272e0: i32 = Constant<32> [ORD=62]

          0x1d29520: i32 = add 0x1d267e0, 0x1d272e0 [ORD=62]

          0x1d26fe0: <multiple use>
        0x1d265e0: i32,ch = load 0x1d09b38, 0x1d29520, 0x1d26fe0<LD4[%50]> [ORD=63]

        0x1d29420: i32 = Constant<0> [ORD=64]

        0x1d29220: ch = seteq

      0x1d29320: i1 = setcc 0x1d265e0, 0x1d29420, 0x1d29220

      0x1d270e0: ch = BasicBlock<AssignFunction3.if.end36 0x1d36c20>

    0x1d268e0: ch = brcond 0x1d09b38, 0x1d29320, 0x1d270e0

    0x1d266e0: ch = BasicBlock<AssignFunction3.if.then34 0x1d36b70>

  0x1d26ae0: ch = br 0x1d268e0, 0x1d266e0


Legally typed node: 0x1d29220: ch = seteq [ID=0]

Legally typed node: 0x1d266e0: ch = BasicBlock<AssignFunction3.if.then34 0x1d36b70> [ID=0]

Legally typed node: 0x1d270e0: ch = BasicBlock<AssignFunction3.if.end36 0x1d36c20> [ID=0]

Legally typed node: 0x1d272e0: i32 = Constant<32> [ORD=62] [ID=0]

Legally typed node: 0x1d26fe0: i32 = undef [ORD=61] [ID=0]

Legally typed node: 0x1d29420: i32 = Constant<0> [ORD=64] [ID=0]

Legally typed node: 0x1d269e0: i32 = FrameIndex<1> [ORD=61] [ID=0]

Legally typed node: 0x1d09b38: ch = EntryToken [ORD=61] [ID=0]

Legally typed node: 0x1d267e0: i32,ch = load 0x1d09b38, 0x1d269e0, 0x1d26fe0<LD4[%2]> [ORD=61] [ID=0]

Legally typed node: 0x1d29520: i32 = add 0x1d267e0, 0x1d272e0 [ORD=62] [ID=0]

Legally typed node: 0x1d265e0: i32,ch = load 0x1d09b38, 0x1d29520, 0x1d26fe0<LD4[%50]> [ORD=63] [ID=0]

Promote integer result: 0x1d29320: i1 = setcc 0x1d265e0, 0x1d29420, 0x1d29220 [ID=0]

Promote integer operand: 0x1d268e0: ch = brcond 0x1d09b38, 0x1d29320, 0x1d270e0 [ID=0]

Promote integer operand: 0x1d26de0: i32 = zero_extend 0x1d29320 [ID=0]

Legally typed node: 0x1d271e0: i32 = Constant<1> [ID=0]

Legally typed node: 0x1d273e0: i32 = setcc 0x1d265e0, 0x1d29420, 0x1d29220 [ID=0]

Legally typed node: 0x1d26be0: i32 = and 0x1d273e0, 0x1d271e0 [ID=0]

Legally typed node: 0x1d268e0: ch = brcond 0x1d09b38, 0x1d26be0, 0x1d270e0 [ID=0]

Legally typed node: 0x1d26ae0: ch = br 0x1d268e0, 0x1d266e0 [ID=0]

Legally typed node: 0x7fff243c9bc0: ch = handlenode 0x1d26ae0 [ID=0]

Type-legalized selection DAG: BB#15 'AssignFunction3:AssignFunction3.if.end31'
SelectionDAG has 16 nodes:
  0x1d09b38: ch = EntryToken [ORD=61] [ID=-3]

  0x1d26fe0: i32 = undef [ORD=61] [ID=-3]

      0x1d09b38: <multiple use>
            0x1d09b38: <multiple use>
                0x1d09b38: <multiple use>
                0x1d269e0: i32 = FrameIndex<1> [ORD=61] [ID=-3]

                0x1d26fe0: <multiple use>
              0x1d267e0: i32,ch = load 0x1d09b38, 0x1d269e0, 0x1d26fe0<LD4[%2]> [ORD=61] [ID=-3]

              0x1d272e0: i32 = Constant<32> [ORD=62] [ID=-3]

            0x1d29520: i32 = add 0x1d267e0, 0x1d272e0 [ORD=62] [ID=-3]

            0x1d26fe0: <multiple use>
          0x1d265e0: i32,ch = load 0x1d09b38, 0x1d29520, 0x1d26fe0<LD4[%50]> [ORD=63] [ID=-3]

          0x1d29420: i32 = Constant<0> [ORD=64] [ID=-3]

          0x1d29220: ch = seteq [ID=-3]

        0x1d273e0: i32 = setcc 0x1d265e0, 0x1d29420, 0x1d29220 [ID=-3]

        0x1d271e0: i32 = Constant<1> [ID=-3]

      0x1d26be0: i32 = and 0x1d273e0, 0x1d271e0 [ID=-3]

      0x1d270e0: ch = BasicBlock<AssignFunction3.if.end36 0x1d36c20> [ID=-3]

    0x1d268e0: ch = brcond 0x1d09b38, 0x1d26be0, 0x1d270e0 [ID=-3]

    0x1d266e0: ch = BasicBlock<AssignFunction3.if.then34 0x1d36b70> [ID=-3]

  0x1d26ae0: ch = br 0x1d268e0, 0x1d266e0 [ID=-3]



Replacing.2 0x1d26be0: i32 = and 0x1d273e0, 0x1d271e0 [ID=-3]

With: 0x1d273e0: i32 = setcc 0x1d265e0, 0x1d29420, 0x1d29220 [ID=-3]

Optimized type-legalized selection DAG: BB#15 'AssignFunction3:AssignFunction3.if.end31'
SelectionDAG has 14 nodes:
  0x1d09b38: ch = EntryToken [ORD=61] [ID=-3]

  0x1d26fe0: i32 = undef [ORD=61] [ID=-3]

      0x1d09b38: <multiple use>
          0x1d09b38: <multiple use>
              0x1d09b38: <multiple use>
              0x1d269e0: i32 = FrameIndex<1> [ORD=61] [ID=-3]

              0x1d26fe0: <multiple use>
            0x1d267e0: i32,ch = load 0x1d09b38, 0x1d269e0, 0x1d26fe0<LD4[%2]> [ORD=61] [ID=-3]

            0x1d272e0: i32 = Constant<32> [ORD=62] [ID=-3]

          0x1d29520: i32 = add 0x1d267e0, 0x1d272e0 [ORD=62] [ID=-3]

          0x1d26fe0: <multiple use>
        0x1d265e0: i32,ch = load 0x1d09b38, 0x1d29520, 0x1d26fe0<LD4[%50]> [ORD=63] [ID=-3]

        0x1d29420: i32 = Constant<0> [ORD=64] [ID=-3]

        0x1d29220: ch = seteq [ID=-3]

      0x1d273e0: i32 = setcc 0x1d265e0, 0x1d29420, 0x1d29220 [ID=-3]

      0x1d270e0: ch = BasicBlock<AssignFunction3.if.end36 0x1d36c20> [ID=-3]

    0x1d268e0: ch = brcond 0x1d09b38, 0x1d273e0, 0x1d270e0 [ID=-3]

    0x1d266e0: ch = BasicBlock<AssignFunction3.if.then34 0x1d36b70> [ID=-3]

  0x1d26ae0: ch = br 0x1d268e0, 0x1d266e0 [ID=-3]


Legalized selection DAG: BB#15 'AssignFunction3:AssignFunction3.if.end31'
SelectionDAG has 14 nodes:
  0x1d09b38: ch = EntryToken [ORD=61] [ID=0]

  0x1d26fe0: i32 = undef [ORD=61] [ID=3]

      0x1d09b38: <multiple use>
          0x1d09b38: <multiple use>
              0x1d09b38: <multiple use>
              0x1d269e0: i32 = FrameIndex<1> [ORD=61] [ID=1]

              0x1d26fe0: <multiple use>
            0x1d267e0: i32,ch = load 0x1d09b38, 0x1d269e0, 0x1d26fe0<LD4[%2]> [ORD=61] [ID=8]

            0x1d272e0: i32 = Constant<32> [ORD=62] [ID=4]

          0x1d29520: i32 = add 0x1d267e0, 0x1d272e0 [ORD=62] [ID=9]

          0x1d26fe0: <multiple use>
        0x1d265e0: i32,ch = load 0x1d09b38, 0x1d29520, 0x1d26fe0<LD4[%50]> [ORD=63] [ID=10]

        0x1d29420: i32 = Constant<0> [ORD=64] [ID=2]

        0x1d29220: ch = seteq [ID=7]

      0x1d273e0: i32 = setcc 0x1d265e0, 0x1d29420, 0x1d29220 [ID=11]

      0x1d270e0: ch = BasicBlock<AssignFunction3.if.end36 0x1d36c20> [ID=5]

    0x1d268e0: ch = brcond 0x1d09b38, 0x1d273e0, 0x1d270e0 [ID=12]

    0x1d266e0: ch = BasicBlock<AssignFunction3.if.then34 0x1d36b70> [ID=6]

  0x1d26ae0: ch = br 0x1d268e0, 0x1d266e0 [ID=13]


Optimized legalized selection DAG: BB#15 'AssignFunction3:AssignFunction3.if.end31'
SelectionDAG has 14 nodes:
  0x1d09b38: ch = EntryToken [ORD=61] [ID=0]

  0x1d26fe0: i32 = undef [ORD=61] [ID=3]

      0x1d09b38: <multiple use>
          0x1d09b38: <multiple use>
              0x1d09b38: <multiple use>
              0x1d269e0: i32 = FrameIndex<1> [ORD=61] [ID=1]

              0x1d26fe0: <multiple use>
            0x1d267e0: i32,ch = load 0x1d09b38, 0x1d269e0, 0x1d26fe0<LD4[%2]> [ORD=61] [ID=8]

            0x1d272e0: i32 = Constant<32> [ORD=62] [ID=4]

          0x1d29520: i32 = add 0x1d267e0, 0x1d272e0 [ORD=62] [ID=9]

          0x1d26fe0: <multiple use>
        0x1d265e0: i32,ch = load 0x1d09b38, 0x1d29520, 0x1d26fe0<LD4[%50]> [ORD=63] [ID=10]

        0x1d29420: i32 = Constant<0> [ORD=64] [ID=2]

        0x1d29220: ch = seteq [ID=7]

      0x1d273e0: i32 = setcc 0x1d265e0, 0x1d29420, 0x1d29220 [ID=11]

      0x1d270e0: ch = BasicBlock<AssignFunction3.if.end36 0x1d36c20> [ID=5]

    0x1d268e0: ch = brcond 0x1d09b38, 0x1d273e0, 0x1d270e0 [ID=12]

    0x1d266e0: ch = BasicBlock<AssignFunction3.if.then34 0x1d36b70> [ID=6]

  0x1d26ae0: ch = br 0x1d268e0, 0x1d266e0 [ID=13]


===== Instruction selection begins: BB#15 'AssignFunction3.if.end31'
ISEL: Starting pattern match on root node: 0x1d26ae0: ch = br 0x1d268e0, 0x1d266e0 [ID=13]

  Initial Opcode index to 1938
  Morphed node: 0x1d26ae0: ch = JAL 0x1d266e0, 0x1d268e0

ISEL: Match complete!
=> 0x1d26ae0: ch = JAL 0x1d266e0, 0x1d268e0

ISEL: Starting pattern match on root node: 0x1d268e0: ch = brcond 0x1d09b38, 0x1d273e0, 0x1d270e0 [ID=12]

  Initial Opcode index to 1439
  Morphed node: 0x1d268e0: ch = BEQ 0x1d270e0, 0x1d265e0, 0x1d29420, 0x1d09b38

ISEL: Match complete!
=> 0x1d268e0: ch = BEQ 0x1d270e0, 0x1d265e0, 0x1d29420, 0x1d09b38

ISEL: Starting pattern match on root node: 0x1d265e0: i32,ch = load 0x1d09b38, 0x1d29520, 0x1d26fe0<LD4[%50]> [ORD=63] [ID=10]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x1d265e0: i32,ch = LW 0x1d267e0, 0x1d29220, 0x1d09b38<Mem:LD4[%50]> [ORD=63]

ISEL: Match complete!
=> 0x1d265e0: i32,ch = LW 0x1d267e0, 0x1d29220, 0x1d09b38<Mem:LD4[%50]> [ORD=63]

ISEL: Starting pattern match on root node: 0x1d267e0: i32,ch = load 0x1d09b38, 0x1d269e0, 0x1d26fe0<LD4[%2]> [ORD=61] [ID=8]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x1d267e0: i32,ch = LW 0x1d269e0, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=61]

ISEL: Match complete!
=> 0x1d267e0: i32,ch = LW 0x1d269e0, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=61]

=> 0x1d266e0: ch = BasicBlock<AssignFunction3.if.then34 0x1d36b70>

=> 0x1d270e0: ch = BasicBlock<AssignFunction3.if.end36 0x1d36c20>

ISEL: Starting pattern match on root node: 0x1d29420: i32 = Constant<0> [ORD=64] [ID=2]

  Initial Opcode index to 1226
comparing 0 and 0 and returning value:1
ISEL: Match complete!
=> 0x1d29420: i32 = Constant<0> [ORD=64] [ID=2]

=> 0x1d09b38: ch = EntryToken [ORD=61]

===== Instruction selection ends:
Selected selection DAG: BB#15 'AssignFunction3:AssignFunction3.if.end31'
SelectionDAG has 13 nodes:
  0x1d09b38: ch = EntryToken [ORD=61]

    0x1d266e0: ch = BasicBlock<AssignFunction3.if.then34 0x1d36b70>

      0x1d270e0: ch = BasicBlock<AssignFunction3.if.end36 0x1d36c20>

            0x1d29420: i32 = Register %t5

            0x1d29520: i32 = TargetFrameIndex<1>

          0x1d269e0: i32 = ADDI 0x1d29420, 0x1d29520 [ORD=61]

          0x1d272e0: i32 = TargetConstant<0>

          0x1d09b38: <multiple use>
        0x1d267e0: i32,ch = LW 0x1d269e0, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=61]

        0x1d29220: i32 = TargetConstant<32>

        0x1d09b38: <multiple use>
      0x1d265e0: i32,ch = LW 0x1d267e0, 0x1d29220, 0x1d09b38<Mem:LD4[%50]> [ORD=63]

      0x1d26fe0: i32 = Register %zero

      0x1d09b38: <multiple use>
    0x1d268e0: ch = BEQ 0x1d270e0, 0x1d265e0, 0x1d26fe0, 0x1d09b38

  0x1d26ae0: ch = JAL 0x1d266e0, 0x1d268e0


********** List Scheduling BB#15 'AssignFunction3.if.end31' **********
SU(0): 0x1d26ae0: ch = JAL 0x1d266e0, 0x1d268e0 [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x1d268e0: ch = BEQ 0x1d270e0, 0x1d265e0, 0x1d26fe0, 0x1d09b38 [ID=1]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x1d265e0: i32,ch = LW 0x1d267e0, 0x1d29220, 0x1d09b38<Mem:LD4[%50]> [ORD=63] [ID=2]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(3): Latency=1
  Successors:
   val SU(1): Latency=1

SU(3): 0x1d267e0: i32,ch = LW 0x1d269e0, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=61] [ID=3]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(4): Latency=1
  Successors:
   val SU(2): Latency=1

SU(4): 0x1d269e0: i32 = ADDI 0x1d29420, 0x1d29520 [ORD=61] [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(3): Latency=1


Examining Available:
Height 0: SU(0): 0x1d26ae0: ch = JAL 0x1d266e0, 0x1d268e0 [ID=0]


*** Scheduling [0]: SU(0): 0x1d26ae0: ch = JAL 0x1d266e0, 0x1d268e0 [ID=0]


Examining Available:
Height 1: SU(1): 0x1d268e0: ch = BEQ 0x1d270e0, 0x1d265e0, 0x1d26fe0, 0x1d09b38 [ID=1]


*** Scheduling [1]: SU(1): 0x1d268e0: ch = BEQ 0x1d270e0, 0x1d265e0, 0x1d26fe0, 0x1d09b38 [ID=1]


Examining Available:
Height 2: SU(2): 0x1d265e0: i32,ch = LW 0x1d267e0, 0x1d29220, 0x1d09b38<Mem:LD4[%50]> [ORD=63] [ID=2]


*** Scheduling [2]: SU(2): 0x1d265e0: i32,ch = LW 0x1d267e0, 0x1d29220, 0x1d09b38<Mem:LD4[%50]> [ORD=63] [ID=2]


Examining Available:
Height 3: SU(3): 0x1d267e0: i32,ch = LW 0x1d269e0, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=61] [ID=3]


*** Scheduling [3]: SU(3): 0x1d267e0: i32,ch = LW 0x1d269e0, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=61] [ID=3]


Examining Available:
Height 4: SU(4): 0x1d269e0: i32 = ADDI 0x1d29420, 0x1d29520 [ORD=61] [ID=4]


*** Scheduling [4]: SU(4): 0x1d269e0: i32 = ADDI 0x1d29420, 0x1d29520 [ORD=61] [ID=4]

*** Final schedule ***
SU(4): 0x1d269e0: i32 = ADDI 0x1d29420, 0x1d29520 [ORD=61] [ID=4]

SU(3): 0x1d267e0: i32,ch = LW 0x1d269e0, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=61] [ID=3]

SU(2): 0x1d265e0: i32,ch = LW 0x1d267e0, 0x1d29220, 0x1d09b38<Mem:LD4[%50]> [ORD=63] [ID=2]

SU(1): 0x1d268e0: ch = BEQ 0x1d270e0, 0x1d265e0, 0x1d26fe0, 0x1d09b38 [ID=1]

SU(0): 0x1d26ae0: ch = JAL 0x1d266e0, 0x1d268e0 [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %53 = load i32* @eicas_discretes, align 4
I was here to add @eicas_discretes = global i32 0, align 4
with I type i32and sd value :0x1d29520: i32 = GlobalAddress<i32* @eicas_discretes> 0
new load?0x1d272e0: i32,ch = load 0x1d09b38, 0x1d29520, 0x1d26fe0<LD4[@eicas_discretes]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x1d29420: i32 = Constant<0>

    0x1d09b38: ch = EntryToken

    0x1d29520: i32 = GlobalAddress<i32* @eicas_discretes> 0

    0x1d26fe0: i32 = undef

  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d29520, 0x1d26fe0<LD4[@eicas_discretes]>

  0x1d09b38: ch = EntryToken


I was here to add i32 256
store visit is after?  store i32 %54, i32* @eicas_discretes, align 4
whats in dag after store?SelectionDAG has 8 nodes:
  0x1d29520: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=65]

  0x1d29420: i32 = Constant<0>

  0x1d26fe0: i32 = undef [ORD=65]

    0x1d09b38: ch = EntryToken [ORD=65]

    0x1d29520: <multiple use>
    0x1d26fe0: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d29520, 0x1d26fe0<LD4[@eicas_discretes]> [ORD=65]

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d29220: i32 = Constant<256> [ORD=66]

    0x1d26ae0: i32 = or 0x1d272e0, 0x1d29220 [ORD=66]

    0x1d29520: <multiple use>
    0x1d26fe0: <multiple use>
  0x1d268e0: ch = store 0x1d272e0:1, 0x1d26ae0, 0x1d29520, 0x1d26fe0<ST4[@eicas_discretes]> [ORD=67]


Initial selection DAG: BB#16 'AssignFunction3:AssignFunction3.if.then34'
SelectionDAG has 8 nodes:
  0x1d29520: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=65]

  0x1d29420: i32 = Constant<0>

  0x1d26fe0: i32 = undef [ORD=65]

    0x1d09b38: ch = EntryToken [ORD=65]

    0x1d29520: <multiple use>
    0x1d26fe0: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d29520, 0x1d26fe0<LD4[@eicas_discretes]> [ORD=65]

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d29220: i32 = Constant<256> [ORD=66]

    0x1d26ae0: i32 = or 0x1d272e0, 0x1d29220 [ORD=66]

    0x1d29520: <multiple use>
    0x1d26fe0: <multiple use>
  0x1d268e0: ch = store 0x1d272e0:1, 0x1d26ae0, 0x1d29520, 0x1d26fe0<ST4[@eicas_discretes]> [ORD=67]


Optimized lowered selection DAG: BB#16 'AssignFunction3:AssignFunction3.if.then34'
SelectionDAG has 7 nodes:
  0x1d29520: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=65]

  0x1d26fe0: i32 = undef [ORD=65]

    0x1d09b38: ch = EntryToken [ORD=65]

    0x1d29520: <multiple use>
    0x1d26fe0: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d29520, 0x1d26fe0<LD4[@eicas_discretes]> [ORD=65]

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d29220: i32 = Constant<256> [ORD=66]

    0x1d26ae0: i32 = or 0x1d272e0, 0x1d29220 [ORD=66]

    0x1d29520: <multiple use>
    0x1d26fe0: <multiple use>
  0x1d268e0: ch = store 0x1d272e0:1, 0x1d26ae0, 0x1d29520, 0x1d26fe0<ST4[@eicas_discretes]> [ORD=67]


Legally typed node: 0x1d29220: i32 = Constant<256> [ORD=66] [ID=0]

Legally typed node: 0x1d26fe0: i32 = undef [ORD=65] [ID=0]

Legally typed node: 0x1d29520: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=65] [ID=0]

Legally typed node: 0x1d09b38: ch = EntryToken [ORD=65] [ID=0]

Legally typed node: 0x1d272e0: i32,ch = load 0x1d09b38, 0x1d29520, 0x1d26fe0<LD4[@eicas_discretes]> [ORD=65] [ID=0]

Legally typed node: 0x1d26ae0: i32 = or 0x1d272e0, 0x1d29220 [ORD=66] [ID=0]

Legally typed node: 0x1d268e0: ch = store 0x1d272e0:1, 0x1d26ae0, 0x1d29520, 0x1d26fe0<ST4[@eicas_discretes]> [ORD=67] [ID=0]

Legally typed node: 0x7fff243c9bc0: ch = handlenode 0x1d268e0 [ID=0]

Type-legalized selection DAG: BB#16 'AssignFunction3:AssignFunction3.if.then34'
SelectionDAG has 7 nodes:
  0x1d29520: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=65] [ID=-3]

  0x1d26fe0: i32 = undef [ORD=65] [ID=-3]

    0x1d09b38: ch = EntryToken [ORD=65] [ID=-3]

    0x1d29520: <multiple use>
    0x1d26fe0: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d29520, 0x1d26fe0<LD4[@eicas_discretes]> [ORD=65] [ID=-3]

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d29220: i32 = Constant<256> [ORD=66] [ID=-3]

    0x1d26ae0: i32 = or 0x1d272e0, 0x1d29220 [ORD=66] [ID=-3]

    0x1d29520: <multiple use>
    0x1d26fe0: <multiple use>
  0x1d268e0: ch = store 0x1d272e0:1, 0x1d26ae0, 0x1d29520, 0x1d26fe0<ST4[@eicas_discretes]> [ORD=67] [ID=-3]


Legalized selection DAG: BB#16 'AssignFunction3:AssignFunction3.if.then34'
SelectionDAG has 11 nodes:
  0x1d26fe0: i32 = undef [ORD=65] [ID=2]

    0x1d09b38: ch = EntryToken [ORD=65] [ID=0]

    0x1d270e0: <multiple use>
    0x1d26fe0: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d270e0, 0x1d26fe0<LD4[@eicas_discretes]> [ORD=65] [ID=4]

      0x1d29420: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

    0x1d267e0: i32 = REDEFINEISD::Hi 0x1d29420

      0x1d265e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

    0x1d266e0: i32 = REDEFINEISD::Lo 0x1d265e0

  0x1d270e0: i32 = add 0x1d267e0, 0x1d266e0

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d29220: i32 = Constant<256> [ORD=66] [ID=3]

    0x1d26ae0: i32 = or 0x1d272e0, 0x1d29220 [ORD=66] [ID=5]

    0x1d270e0: <multiple use>
    0x1d26fe0: <multiple use>
  0x1d268e0: ch = store 0x1d272e0:1, 0x1d26ae0, 0x1d270e0, 0x1d26fe0<ST4[@eicas_discretes]> [ORD=67] [ID=6]


Optimized legalized selection DAG: BB#16 'AssignFunction3:AssignFunction3.if.then34'
SelectionDAG has 11 nodes:
  0x1d26fe0: i32 = undef [ORD=65] [ID=2]

    0x1d09b38: ch = EntryToken [ORD=65] [ID=0]

    0x1d270e0: <multiple use>
    0x1d26fe0: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d270e0, 0x1d26fe0<LD4[@eicas_discretes]> [ORD=65] [ID=4]

      0x1d29420: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

    0x1d267e0: i32 = REDEFINEISD::Hi 0x1d29420

      0x1d265e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

    0x1d266e0: i32 = REDEFINEISD::Lo 0x1d265e0

  0x1d270e0: i32 = add 0x1d267e0, 0x1d266e0

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d29220: i32 = Constant<256> [ORD=66] [ID=3]

    0x1d26ae0: i32 = or 0x1d272e0, 0x1d29220 [ORD=66] [ID=5]

    0x1d270e0: <multiple use>
    0x1d26fe0: <multiple use>
  0x1d268e0: ch = store 0x1d272e0:1, 0x1d26ae0, 0x1d270e0, 0x1d26fe0<ST4[@eicas_discretes]> [ORD=67] [ID=6]


===== Instruction selection begins: BB#16 'AssignFunction3.if.then34'
ISEL: Starting pattern match on root node: 0x1d268e0: ch = store 0x1d272e0:1, 0x1d26ae0, 0x1d270e0, 0x1d26fe0<ST4[@eicas_discretes]> [ORD=67] [ID=10]

  Initial Opcode index to 178
  Morphed node: 0x1d268e0: ch = SW 0x1d26ae0, 0x1d270e0, 0x1d29520, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=67]

ISEL: Match complete!
=> 0x1d268e0: ch = SW 0x1d26ae0, 0x1d270e0, 0x1d29520, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=67]

ISEL: Starting pattern match on root node: 0x1d26ae0: i32 = or 0x1d272e0, 0x1d29220 [ORD=66] [ID=9]

  Initial Opcode index to 567
  Morphed node: 0x1d26ae0: i32 = ORI 0x1d272e0, 0x1d269e0 [ORD=66]

ISEL: Match complete!
=> 0x1d26ae0: i32 = ORI 0x1d272e0, 0x1d269e0 [ORD=66]

ISEL: Starting pattern match on root node: 0x1d272e0: i32,ch = load 0x1d09b38, 0x1d270e0, 0x1d26fe0<LD4[@eicas_discretes]> [ORD=65] [ID=8]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x1d272e0: i32,ch = LW 0x1d270e0, 0x1d29520, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=65]

ISEL: Match complete!
=> 0x1d272e0: i32,ch = LW 0x1d270e0, 0x1d29520, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=65]

ISEL: Starting pattern match on root node: 0x1d270e0: i32 = add 0x1d267e0, 0x1d266e0 [ID=7]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x1d270e0: i32 = ADD 0x1d266e0, 0x1d267e0

ISEL: Match complete!
=> 0x1d270e0: i32 = ADD 0x1d266e0, 0x1d267e0

ISEL: Starting pattern match on root node: 0x1d266e0: i32 = REDEFINEISD::Lo 0x1d265e0 [ID=6]

  Initial Opcode index to 1204
  Morphed node: 0x1d266e0: i32 = ADDI 0x1d26fe0, 0x1d265e0

ISEL: Match complete!
=> 0x1d266e0: i32 = ADDI 0x1d26fe0, 0x1d265e0

ISEL: Starting pattern match on root node: 0x1d267e0: i32 = REDEFINEISD::Hi 0x1d29420 [ID=5]

  Initial Opcode index to 1186
  Morphed node: 0x1d267e0: i32 = LUI 0x1d29420

ISEL: Match complete!
=> 0x1d267e0: i32 = LUI 0x1d29420

=> 0x1d265e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

=> 0x1d29420: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

=> 0x1d09b38: ch = EntryToken [ORD=65]

===== Instruction selection ends:
Selected selection DAG: BB#16 'AssignFunction3:AssignFunction3.if.then34'
SelectionDAG has 12 nodes:
      0x1d26fe0: i32 = Register %zero

      0x1d265e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

    0x1d266e0: i32 = ADDI 0x1d26fe0, 0x1d265e0

      0x1d29420: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

    0x1d267e0: i32 = LUI 0x1d29420

  0x1d270e0: i32 = ADD 0x1d266e0, 0x1d267e0

    0x1d270e0: <multiple use>
    0x1d29520: <multiple use>
    0x1d09b38: ch = EntryToken [ORD=65]

  0x1d272e0: i32,ch = LW 0x1d270e0, 0x1d29520, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=65]

  0x1d29520: i32 = TargetConstant<0>

      0x1d272e0: <multiple use>
      0x1d269e0: i32 = TargetConstant<256>

    0x1d26ae0: i32 = ORI 0x1d272e0, 0x1d269e0 [ORD=66]

    0x1d270e0: <multiple use>
    0x1d29520: <multiple use>
    0x1d272e0: <multiple use>
  0x1d268e0: ch = SW 0x1d26ae0, 0x1d270e0, 0x1d29520, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=67]


********** List Scheduling BB#16 'AssignFunction3.if.then34' **********
SU(0): 0x1d268e0: ch = SW 0x1d26ae0, 0x1d270e0, 0x1d29520, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=67] [ID=0]

  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
   val SU(5): Latency=1
   val SU(2): Latency=1
   ch  SU(1): Latency=1

SU(1): 0x1d272e0: i32,ch = LW 0x1d270e0, 0x1d29520, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=65] [ID=1]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1
   val SU(5): Latency=1

SU(2): 0x1d270e0: i32 = ADD 0x1d266e0, 0x1d267e0 [ID=2]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(4): Latency=1
   val SU(3): Latency=1
  Successors:
   val SU(0): Latency=1
   val SU(1): Latency=1

SU(3): 0x1d267e0: i32 = LUI 0x1d29420 [ID=3]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(2): Latency=1

SU(4): 0x1d266e0: i32 = ADDI 0x1d26fe0, 0x1d265e0 [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(2): Latency=1

SU(5): 0x1d26ae0: i32 = ORI 0x1d272e0, 0x1d269e0 [ORD=66] [ID=5]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(1): Latency=1
  Successors:
   val SU(0): Latency=1


Examining Available:
Height 0: SU(0): 0x1d268e0: ch = SW 0x1d26ae0, 0x1d270e0, 0x1d29520, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=67] [ID=0]


*** Scheduling [0]: SU(0): 0x1d268e0: ch = SW 0x1d26ae0, 0x1d270e0, 0x1d29520, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=67] [ID=0]


Examining Available:
Height 1: SU(5): 0x1d26ae0: i32 = ORI 0x1d272e0, 0x1d269e0 [ORD=66] [ID=5]


*** Scheduling [1]: SU(5): 0x1d26ae0: i32 = ORI 0x1d272e0, 0x1d269e0 [ORD=66] [ID=5]


Examining Available:
Height 2: SU(1): 0x1d272e0: i32,ch = LW 0x1d270e0, 0x1d29520, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=65] [ID=1]


*** Scheduling [2]: SU(1): 0x1d272e0: i32,ch = LW 0x1d270e0, 0x1d29520, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=65] [ID=1]


Examining Available:
Height 3: SU(2): 0x1d270e0: i32 = ADD 0x1d266e0, 0x1d267e0 [ID=2]


*** Scheduling [3]: SU(2): 0x1d270e0: i32 = ADD 0x1d266e0, 0x1d267e0 [ID=2]


Examining Available:
Height 4: SU(4): 0x1d266e0: i32 = ADDI 0x1d26fe0, 0x1d265e0 [ID=4]

Height 4: SU(3): 0x1d267e0: i32 = LUI 0x1d29420 [ID=3]


*** Scheduling [4]: SU(4): 0x1d266e0: i32 = ADDI 0x1d26fe0, 0x1d265e0 [ID=4]


Examining Available:
Height 4: SU(3): 0x1d267e0: i32 = LUI 0x1d29420 [ID=3]


*** Scheduling [5]: SU(3): 0x1d267e0: i32 = LUI 0x1d29420 [ID=3]

*** Final schedule ***
SU(3): 0x1d267e0: i32 = LUI 0x1d29420 [ID=3]

SU(4): 0x1d266e0: i32 = ADDI 0x1d26fe0, 0x1d265e0 [ID=4]

SU(2): 0x1d270e0: i32 = ADD 0x1d266e0, 0x1d267e0 [ID=2]

SU(1): 0x1d272e0: i32,ch = LW 0x1d270e0, 0x1d29520, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=65] [ID=1]

SU(5): 0x1d26ae0: i32 = ORI 0x1d272e0, 0x1d269e0 [ORD=66] [ID=5]

SU(0): 0x1d268e0: ch = SW 0x1d26ae0, 0x1d270e0, 0x1d29520, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=67] [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %55 = load i32** %2, align 4
I was here to add   %2 = alloca i32*, align 4
with I type i32*and sd value :0x1d26fe0: i32 = FrameIndex<1>
new load?0x1d268e0: i32,ch = load 0x1d09b38, 0x1d26fe0, 0x1d29520<LD4[%2]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x1d269e0: i32 = Constant<0>

    0x1d09b38: ch = EntryToken

    0x1d26fe0: i32 = FrameIndex<1>

    0x1d29520: i32 = undef

  0x1d268e0: i32,ch = load 0x1d09b38, 0x1d26fe0, 0x1d29520<LD4[%2]>

  0x1d09b38: ch = EntryToken


visiting load instruction   %57 = load i32* %56, align 4
with I type i32and sd value :0x1d270e0: i32 = add 0x1d268e0, 0x1d272e0
new load?0x1d266e0: i32,ch = load 0x1d09b38, 0x1d270e0, 0x1d29520<LD4[%56]>
dag after load is dealt with?SelectionDAG has 9 nodes:
  0x1d269e0: i32 = Constant<0>

  0x1d29520: i32 = undef [ORD=68]

  0x1d26ae0: i64 = Constant<36>

    0x1d09b38: <multiple use>
        0x1d09b38: <multiple use>
        0x1d26fe0: i32 = FrameIndex<1> [ORD=68]

        0x1d29520: <multiple use>
      0x1d268e0: i32,ch = load 0x1d09b38, 0x1d26fe0, 0x1d29520<LD4[%2]> [ORD=68]

      0x1d272e0: i32 = Constant<36> [ORD=69]

    0x1d270e0: i32 = add 0x1d268e0, 0x1d272e0 [ORD=69]

    0x1d29520: <multiple use>
  0x1d266e0: i32,ch = load 0x1d09b38, 0x1d270e0, 0x1d29520<LD4[%56]>

  0x1d09b38: ch = EntryToken [ORD=68]


I was here to add i32 0
Initial selection DAG: BB#17 'AssignFunction3:AssignFunction3.if.end36'
SelectionDAG has 17 nodes:
  0x1d09b38: ch = EntryToken [ORD=68]

  0x1d29520: i32 = undef [ORD=68]

  0x1d26ae0: i64 = Constant<36>

      0x1d09b38: <multiple use>
            0x1d09b38: <multiple use>
                0x1d09b38: <multiple use>
                0x1d26fe0: i32 = FrameIndex<1> [ORD=68]

                0x1d29520: <multiple use>
              0x1d268e0: i32,ch = load 0x1d09b38, 0x1d26fe0, 0x1d29520<LD4[%2]> [ORD=68]

              0x1d272e0: i32 = Constant<36> [ORD=69]

            0x1d270e0: i32 = add 0x1d268e0, 0x1d272e0 [ORD=69]

            0x1d29520: <multiple use>
          0x1d266e0: i32,ch = load 0x1d09b38, 0x1d270e0, 0x1d29520<LD4[%56]> [ORD=70]

          0x1d269e0: i32 = Constant<0> [ORD=71]

          0x1d267e0: ch = setne [ORD=71]

        0x1d265e0: i1 = setcc 0x1d266e0, 0x1d269e0, 0x1d267e0 [ORD=71]

        0x1d29420: i1 = Constant<-1>

      0x1d29220: i1 = xor 0x1d265e0, 0x1d29420

      0x1d273e0: ch = BasicBlock<AssignFunction3.return 0x1d40270>

    0x1d271e0: ch = brcond 0x1d09b38, 0x1d29220, 0x1d273e0

    0x1d26be0: ch = BasicBlock<AssignFunction3.if.then39 0x1d401c0>

  0x1d29320: ch = br 0x1d271e0, 0x1d26be0



Replacing.3 0x1d29220: i1 = xor 0x1d265e0, 0x1d29420

With: 0x1d26ee0: i1 = setcc 0x1d266e0, 0x1d269e0, 0x1d26de0

Optimized lowered selection DAG: BB#17 'AssignFunction3:AssignFunction3.if.end36'
SelectionDAG has 14 nodes:
  0x1d09b38: ch = EntryToken [ORD=68]

  0x1d29520: i32 = undef [ORD=68]

      0x1d09b38: <multiple use>
          0x1d09b38: <multiple use>
              0x1d09b38: <multiple use>
              0x1d26fe0: i32 = FrameIndex<1> [ORD=68]

              0x1d29520: <multiple use>
            0x1d268e0: i32,ch = load 0x1d09b38, 0x1d26fe0, 0x1d29520<LD4[%2]> [ORD=68]

            0x1d272e0: i32 = Constant<36> [ORD=69]

          0x1d270e0: i32 = add 0x1d268e0, 0x1d272e0 [ORD=69]

          0x1d29520: <multiple use>
        0x1d266e0: i32,ch = load 0x1d09b38, 0x1d270e0, 0x1d29520<LD4[%56]> [ORD=70]

        0x1d269e0: i32 = Constant<0> [ORD=71]

        0x1d26de0: ch = seteq

      0x1d26ee0: i1 = setcc 0x1d266e0, 0x1d269e0, 0x1d26de0

      0x1d273e0: ch = BasicBlock<AssignFunction3.return 0x1d40270>

    0x1d271e0: ch = brcond 0x1d09b38, 0x1d26ee0, 0x1d273e0

    0x1d26be0: ch = BasicBlock<AssignFunction3.if.then39 0x1d401c0>

  0x1d29320: ch = br 0x1d271e0, 0x1d26be0


Legally typed node: 0x1d26de0: ch = seteq [ID=0]

Legally typed node: 0x1d26be0: ch = BasicBlock<AssignFunction3.if.then39 0x1d401c0> [ID=0]

Legally typed node: 0x1d273e0: ch = BasicBlock<AssignFunction3.return 0x1d40270> [ID=0]

Legally typed node: 0x1d272e0: i32 = Constant<36> [ORD=69] [ID=0]

Legally typed node: 0x1d29520: i32 = undef [ORD=68] [ID=0]

Legally typed node: 0x1d269e0: i32 = Constant<0> [ORD=71] [ID=0]

Legally typed node: 0x1d26fe0: i32 = FrameIndex<1> [ORD=68] [ID=0]

Legally typed node: 0x1d09b38: ch = EntryToken [ORD=68] [ID=0]

Legally typed node: 0x1d268e0: i32,ch = load 0x1d09b38, 0x1d26fe0, 0x1d29520<LD4[%2]> [ORD=68] [ID=0]

Legally typed node: 0x1d270e0: i32 = add 0x1d268e0, 0x1d272e0 [ORD=69] [ID=0]

Legally typed node: 0x1d266e0: i32,ch = load 0x1d09b38, 0x1d270e0, 0x1d29520<LD4[%56]> [ORD=70] [ID=0]

Promote integer result: 0x1d26ee0: i1 = setcc 0x1d266e0, 0x1d269e0, 0x1d26de0 [ID=0]

Promote integer operand: 0x1d271e0: ch = brcond 0x1d09b38, 0x1d26ee0, 0x1d273e0 [ID=0]

Promote integer operand: 0x1d267e0: i32 = zero_extend 0x1d26ee0 [ID=0]

Legally typed node: 0x1d265e0: i32 = Constant<1> [ID=0]

Legally typed node: 0x1d26ae0: i32 = setcc 0x1d266e0, 0x1d269e0, 0x1d26de0 [ID=0]

Legally typed node: 0x1d29420: i32 = and 0x1d26ae0, 0x1d265e0 [ID=0]

Legally typed node: 0x1d271e0: ch = brcond 0x1d09b38, 0x1d29420, 0x1d273e0 [ID=0]

Legally typed node: 0x1d29320: ch = br 0x1d271e0, 0x1d26be0 [ID=0]

Legally typed node: 0x7fff243c9bc0: ch = handlenode 0x1d29320 [ID=0]

Type-legalized selection DAG: BB#17 'AssignFunction3:AssignFunction3.if.end36'
SelectionDAG has 16 nodes:
  0x1d09b38: ch = EntryToken [ORD=68] [ID=-3]

  0x1d29520: i32 = undef [ORD=68] [ID=-3]

      0x1d09b38: <multiple use>
            0x1d09b38: <multiple use>
                0x1d09b38: <multiple use>
                0x1d26fe0: i32 = FrameIndex<1> [ORD=68] [ID=-3]

                0x1d29520: <multiple use>
              0x1d268e0: i32,ch = load 0x1d09b38, 0x1d26fe0, 0x1d29520<LD4[%2]> [ORD=68] [ID=-3]

              0x1d272e0: i32 = Constant<36> [ORD=69] [ID=-3]

            0x1d270e0: i32 = add 0x1d268e0, 0x1d272e0 [ORD=69] [ID=-3]

            0x1d29520: <multiple use>
          0x1d266e0: i32,ch = load 0x1d09b38, 0x1d270e0, 0x1d29520<LD4[%56]> [ORD=70] [ID=-3]

          0x1d269e0: i32 = Constant<0> [ORD=71] [ID=-3]

          0x1d26de0: ch = seteq [ID=-3]

        0x1d26ae0: i32 = setcc 0x1d266e0, 0x1d269e0, 0x1d26de0 [ID=-3]

        0x1d265e0: i32 = Constant<1> [ID=-3]

      0x1d29420: i32 = and 0x1d26ae0, 0x1d265e0 [ID=-3]

      0x1d273e0: ch = BasicBlock<AssignFunction3.return 0x1d40270> [ID=-3]

    0x1d271e0: ch = brcond 0x1d09b38, 0x1d29420, 0x1d273e0 [ID=-3]

    0x1d26be0: ch = BasicBlock<AssignFunction3.if.then39 0x1d401c0> [ID=-3]

  0x1d29320: ch = br 0x1d271e0, 0x1d26be0 [ID=-3]



Replacing.2 0x1d29420: i32 = and 0x1d26ae0, 0x1d265e0 [ID=-3]

With: 0x1d26ae0: i32 = setcc 0x1d266e0, 0x1d269e0, 0x1d26de0 [ID=-3]

Optimized type-legalized selection DAG: BB#17 'AssignFunction3:AssignFunction3.if.end36'
SelectionDAG has 14 nodes:
  0x1d09b38: ch = EntryToken [ORD=68] [ID=-3]

  0x1d29520: i32 = undef [ORD=68] [ID=-3]

      0x1d09b38: <multiple use>
          0x1d09b38: <multiple use>
              0x1d09b38: <multiple use>
              0x1d26fe0: i32 = FrameIndex<1> [ORD=68] [ID=-3]

              0x1d29520: <multiple use>
            0x1d268e0: i32,ch = load 0x1d09b38, 0x1d26fe0, 0x1d29520<LD4[%2]> [ORD=68] [ID=-3]

            0x1d272e0: i32 = Constant<36> [ORD=69] [ID=-3]

          0x1d270e0: i32 = add 0x1d268e0, 0x1d272e0 [ORD=69] [ID=-3]

          0x1d29520: <multiple use>
        0x1d266e0: i32,ch = load 0x1d09b38, 0x1d270e0, 0x1d29520<LD4[%56]> [ORD=70] [ID=-3]

        0x1d269e0: i32 = Constant<0> [ORD=71] [ID=-3]

        0x1d26de0: ch = seteq [ID=-3]

      0x1d26ae0: i32 = setcc 0x1d266e0, 0x1d269e0, 0x1d26de0 [ID=-3]

      0x1d273e0: ch = BasicBlock<AssignFunction3.return 0x1d40270> [ID=-3]

    0x1d271e0: ch = brcond 0x1d09b38, 0x1d26ae0, 0x1d273e0 [ID=-3]

    0x1d26be0: ch = BasicBlock<AssignFunction3.if.then39 0x1d401c0> [ID=-3]

  0x1d29320: ch = br 0x1d271e0, 0x1d26be0 [ID=-3]


Legalized selection DAG: BB#17 'AssignFunction3:AssignFunction3.if.end36'
SelectionDAG has 14 nodes:
  0x1d09b38: ch = EntryToken [ORD=68] [ID=0]

  0x1d29520: i32 = undef [ORD=68] [ID=3]

      0x1d09b38: <multiple use>
          0x1d09b38: <multiple use>
              0x1d09b38: <multiple use>
              0x1d26fe0: i32 = FrameIndex<1> [ORD=68] [ID=1]

              0x1d29520: <multiple use>
            0x1d268e0: i32,ch = load 0x1d09b38, 0x1d26fe0, 0x1d29520<LD4[%2]> [ORD=68] [ID=8]

            0x1d272e0: i32 = Constant<36> [ORD=69] [ID=4]

          0x1d270e0: i32 = add 0x1d268e0, 0x1d272e0 [ORD=69] [ID=9]

          0x1d29520: <multiple use>
        0x1d266e0: i32,ch = load 0x1d09b38, 0x1d270e0, 0x1d29520<LD4[%56]> [ORD=70] [ID=10]

        0x1d269e0: i32 = Constant<0> [ORD=71] [ID=2]

        0x1d26de0: ch = seteq [ID=7]

      0x1d26ae0: i32 = setcc 0x1d266e0, 0x1d269e0, 0x1d26de0 [ID=11]

      0x1d273e0: ch = BasicBlock<AssignFunction3.return 0x1d40270> [ID=5]

    0x1d271e0: ch = brcond 0x1d09b38, 0x1d26ae0, 0x1d273e0 [ID=12]

    0x1d26be0: ch = BasicBlock<AssignFunction3.if.then39 0x1d401c0> [ID=6]

  0x1d29320: ch = br 0x1d271e0, 0x1d26be0 [ID=13]


Optimized legalized selection DAG: BB#17 'AssignFunction3:AssignFunction3.if.end36'
SelectionDAG has 14 nodes:
  0x1d09b38: ch = EntryToken [ORD=68] [ID=0]

  0x1d29520: i32 = undef [ORD=68] [ID=3]

      0x1d09b38: <multiple use>
          0x1d09b38: <multiple use>
              0x1d09b38: <multiple use>
              0x1d26fe0: i32 = FrameIndex<1> [ORD=68] [ID=1]

              0x1d29520: <multiple use>
            0x1d268e0: i32,ch = load 0x1d09b38, 0x1d26fe0, 0x1d29520<LD4[%2]> [ORD=68] [ID=8]

            0x1d272e0: i32 = Constant<36> [ORD=69] [ID=4]

          0x1d270e0: i32 = add 0x1d268e0, 0x1d272e0 [ORD=69] [ID=9]

          0x1d29520: <multiple use>
        0x1d266e0: i32,ch = load 0x1d09b38, 0x1d270e0, 0x1d29520<LD4[%56]> [ORD=70] [ID=10]

        0x1d269e0: i32 = Constant<0> [ORD=71] [ID=2]

        0x1d26de0: ch = seteq [ID=7]

      0x1d26ae0: i32 = setcc 0x1d266e0, 0x1d269e0, 0x1d26de0 [ID=11]

      0x1d273e0: ch = BasicBlock<AssignFunction3.return 0x1d40270> [ID=5]

    0x1d271e0: ch = brcond 0x1d09b38, 0x1d26ae0, 0x1d273e0 [ID=12]

    0x1d26be0: ch = BasicBlock<AssignFunction3.if.then39 0x1d401c0> [ID=6]

  0x1d29320: ch = br 0x1d271e0, 0x1d26be0 [ID=13]


===== Instruction selection begins: BB#17 'AssignFunction3.if.end36'
ISEL: Starting pattern match on root node: 0x1d29320: ch = br 0x1d271e0, 0x1d26be0 [ID=13]

  Initial Opcode index to 1938
  Morphed node: 0x1d29320: ch = JAL 0x1d26be0, 0x1d271e0

ISEL: Match complete!
=> 0x1d29320: ch = JAL 0x1d26be0, 0x1d271e0

ISEL: Starting pattern match on root node: 0x1d271e0: ch = brcond 0x1d09b38, 0x1d26ae0, 0x1d273e0 [ID=12]

  Initial Opcode index to 1439
  Morphed node: 0x1d271e0: ch = BEQ 0x1d273e0, 0x1d266e0, 0x1d269e0, 0x1d09b38

ISEL: Match complete!
=> 0x1d271e0: ch = BEQ 0x1d273e0, 0x1d266e0, 0x1d269e0, 0x1d09b38

ISEL: Starting pattern match on root node: 0x1d266e0: i32,ch = load 0x1d09b38, 0x1d270e0, 0x1d29520<LD4[%56]> [ORD=70] [ID=10]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x1d266e0: i32,ch = LW 0x1d268e0, 0x1d26de0, 0x1d09b38<Mem:LD4[%56]> [ORD=70]

ISEL: Match complete!
=> 0x1d266e0: i32,ch = LW 0x1d268e0, 0x1d26de0, 0x1d09b38<Mem:LD4[%56]> [ORD=70]

ISEL: Starting pattern match on root node: 0x1d268e0: i32,ch = load 0x1d09b38, 0x1d26fe0, 0x1d29520<LD4[%2]> [ORD=68] [ID=8]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x1d268e0: i32,ch = LW 0x1d26fe0, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=68]

ISEL: Match complete!
=> 0x1d268e0: i32,ch = LW 0x1d26fe0, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=68]

=> 0x1d26be0: ch = BasicBlock<AssignFunction3.if.then39 0x1d401c0>

=> 0x1d273e0: ch = BasicBlock<AssignFunction3.return 0x1d40270>

ISEL: Starting pattern match on root node: 0x1d269e0: i32 = Constant<0> [ORD=71] [ID=2]

  Initial Opcode index to 1226
comparing 0 and 0 and returning value:1
ISEL: Match complete!
=> 0x1d269e0: i32 = Constant<0> [ORD=71] [ID=2]

=> 0x1d09b38: ch = EntryToken [ORD=68]

===== Instruction selection ends:
Selected selection DAG: BB#17 'AssignFunction3:AssignFunction3.if.end36'
SelectionDAG has 13 nodes:
  0x1d09b38: ch = EntryToken [ORD=68]

    0x1d26be0: ch = BasicBlock<AssignFunction3.if.then39 0x1d401c0>

      0x1d273e0: ch = BasicBlock<AssignFunction3.return 0x1d40270>

            0x1d269e0: i32 = Register %t5

            0x1d270e0: i32 = TargetFrameIndex<1>

          0x1d26fe0: i32 = ADDI 0x1d269e0, 0x1d270e0 [ORD=68]

          0x1d272e0: i32 = TargetConstant<0>

          0x1d09b38: <multiple use>
        0x1d268e0: i32,ch = LW 0x1d26fe0, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=68]

        0x1d26de0: i32 = TargetConstant<36>

        0x1d09b38: <multiple use>
      0x1d266e0: i32,ch = LW 0x1d268e0, 0x1d26de0, 0x1d09b38<Mem:LD4[%56]> [ORD=70]

      0x1d29520: i32 = Register %zero

      0x1d09b38: <multiple use>
    0x1d271e0: ch = BEQ 0x1d273e0, 0x1d266e0, 0x1d29520, 0x1d09b38

  0x1d29320: ch = JAL 0x1d26be0, 0x1d271e0


********** List Scheduling BB#17 'AssignFunction3.if.end36' **********
SU(0): 0x1d29320: ch = JAL 0x1d26be0, 0x1d271e0 [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x1d271e0: ch = BEQ 0x1d273e0, 0x1d266e0, 0x1d29520, 0x1d09b38 [ID=1]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x1d266e0: i32,ch = LW 0x1d268e0, 0x1d26de0, 0x1d09b38<Mem:LD4[%56]> [ORD=70] [ID=2]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(3): Latency=1
  Successors:
   val SU(1): Latency=1

SU(3): 0x1d268e0: i32,ch = LW 0x1d26fe0, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=68] [ID=3]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(4): Latency=1
  Successors:
   val SU(2): Latency=1

SU(4): 0x1d26fe0: i32 = ADDI 0x1d269e0, 0x1d270e0 [ORD=68] [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(3): Latency=1


Examining Available:
Height 0: SU(0): 0x1d29320: ch = JAL 0x1d26be0, 0x1d271e0 [ID=0]


*** Scheduling [0]: SU(0): 0x1d29320: ch = JAL 0x1d26be0, 0x1d271e0 [ID=0]


Examining Available:
Height 1: SU(1): 0x1d271e0: ch = BEQ 0x1d273e0, 0x1d266e0, 0x1d29520, 0x1d09b38 [ID=1]


*** Scheduling [1]: SU(1): 0x1d271e0: ch = BEQ 0x1d273e0, 0x1d266e0, 0x1d29520, 0x1d09b38 [ID=1]


Examining Available:
Height 2: SU(2): 0x1d266e0: i32,ch = LW 0x1d268e0, 0x1d26de0, 0x1d09b38<Mem:LD4[%56]> [ORD=70] [ID=2]


*** Scheduling [2]: SU(2): 0x1d266e0: i32,ch = LW 0x1d268e0, 0x1d26de0, 0x1d09b38<Mem:LD4[%56]> [ORD=70] [ID=2]


Examining Available:
Height 3: SU(3): 0x1d268e0: i32,ch = LW 0x1d26fe0, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=68] [ID=3]


*** Scheduling [3]: SU(3): 0x1d268e0: i32,ch = LW 0x1d26fe0, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=68] [ID=3]


Examining Available:
Height 4: SU(4): 0x1d26fe0: i32 = ADDI 0x1d269e0, 0x1d270e0 [ORD=68] [ID=4]


*** Scheduling [4]: SU(4): 0x1d26fe0: i32 = ADDI 0x1d269e0, 0x1d270e0 [ORD=68] [ID=4]

*** Final schedule ***
SU(4): 0x1d26fe0: i32 = ADDI 0x1d269e0, 0x1d270e0 [ORD=68] [ID=4]

SU(3): 0x1d268e0: i32,ch = LW 0x1d26fe0, 0x1d272e0, 0x1d09b38<Mem:LD4[%2]> [ORD=68] [ID=3]

SU(2): 0x1d266e0: i32,ch = LW 0x1d268e0, 0x1d26de0, 0x1d09b38<Mem:LD4[%56]> [ORD=70] [ID=2]

SU(1): 0x1d271e0: ch = BEQ 0x1d273e0, 0x1d266e0, 0x1d29520, 0x1d09b38 [ID=1]

SU(0): 0x1d29320: ch = JAL 0x1d26be0, 0x1d271e0 [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %59 = load i32* @eicas_discretes, align 4
I was here to add @eicas_discretes = global i32 0, align 4
with I type i32and sd value :0x1d270e0: i32 = GlobalAddress<i32* @eicas_discretes> 0
new load?0x1d272e0: i32,ch = load 0x1d09b38, 0x1d270e0, 0x1d29520<LD4[@eicas_discretes]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x1d269e0: i32 = Constant<0>

    0x1d09b38: ch = EntryToken

    0x1d270e0: i32 = GlobalAddress<i32* @eicas_discretes> 0

    0x1d29520: i32 = undef

  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d270e0, 0x1d29520<LD4[@eicas_discretes]>

  0x1d09b38: ch = EntryToken


I was here to add i32 512
store visit is after?  store i32 %60, i32* @eicas_discretes, align 4
whats in dag after store?SelectionDAG has 8 nodes:
  0x1d270e0: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=72]

  0x1d269e0: i32 = Constant<0>

  0x1d29520: i32 = undef [ORD=72]

    0x1d09b38: ch = EntryToken [ORD=72]

    0x1d270e0: <multiple use>
    0x1d29520: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d270e0, 0x1d29520<LD4[@eicas_discretes]> [ORD=72]

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d26de0: i32 = Constant<512> [ORD=73]

    0x1d29320: i32 = or 0x1d272e0, 0x1d26de0 [ORD=73]

    0x1d270e0: <multiple use>
    0x1d29520: <multiple use>
  0x1d271e0: ch = store 0x1d272e0:1, 0x1d29320, 0x1d270e0, 0x1d29520<ST4[@eicas_discretes]> [ORD=74]


Initial selection DAG: BB#18 'AssignFunction3:AssignFunction3.if.then39'
SelectionDAG has 8 nodes:
  0x1d270e0: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=72]

  0x1d269e0: i32 = Constant<0>

  0x1d29520: i32 = undef [ORD=72]

    0x1d09b38: ch = EntryToken [ORD=72]

    0x1d270e0: <multiple use>
    0x1d29520: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d270e0, 0x1d29520<LD4[@eicas_discretes]> [ORD=72]

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d26de0: i32 = Constant<512> [ORD=73]

    0x1d29320: i32 = or 0x1d272e0, 0x1d26de0 [ORD=73]

    0x1d270e0: <multiple use>
    0x1d29520: <multiple use>
  0x1d271e0: ch = store 0x1d272e0:1, 0x1d29320, 0x1d270e0, 0x1d29520<ST4[@eicas_discretes]> [ORD=74]


Optimized lowered selection DAG: BB#18 'AssignFunction3:AssignFunction3.if.then39'
SelectionDAG has 7 nodes:
  0x1d270e0: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=72]

  0x1d29520: i32 = undef [ORD=72]

    0x1d09b38: ch = EntryToken [ORD=72]

    0x1d270e0: <multiple use>
    0x1d29520: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d270e0, 0x1d29520<LD4[@eicas_discretes]> [ORD=72]

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d26de0: i32 = Constant<512> [ORD=73]

    0x1d29320: i32 = or 0x1d272e0, 0x1d26de0 [ORD=73]

    0x1d270e0: <multiple use>
    0x1d29520: <multiple use>
  0x1d271e0: ch = store 0x1d272e0:1, 0x1d29320, 0x1d270e0, 0x1d29520<ST4[@eicas_discretes]> [ORD=74]


Legally typed node: 0x1d26de0: i32 = Constant<512> [ORD=73] [ID=0]

Legally typed node: 0x1d29520: i32 = undef [ORD=72] [ID=0]

Legally typed node: 0x1d270e0: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=72] [ID=0]

Legally typed node: 0x1d09b38: ch = EntryToken [ORD=72] [ID=0]

Legally typed node: 0x1d272e0: i32,ch = load 0x1d09b38, 0x1d270e0, 0x1d29520<LD4[@eicas_discretes]> [ORD=72] [ID=0]

Legally typed node: 0x1d29320: i32 = or 0x1d272e0, 0x1d26de0 [ORD=73] [ID=0]

Legally typed node: 0x1d271e0: ch = store 0x1d272e0:1, 0x1d29320, 0x1d270e0, 0x1d29520<ST4[@eicas_discretes]> [ORD=74] [ID=0]

Legally typed node: 0x7fff243c9bc0: ch = handlenode 0x1d271e0 [ID=0]

Type-legalized selection DAG: BB#18 'AssignFunction3:AssignFunction3.if.then39'
SelectionDAG has 7 nodes:
  0x1d270e0: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=72] [ID=-3]

  0x1d29520: i32 = undef [ORD=72] [ID=-3]

    0x1d09b38: ch = EntryToken [ORD=72] [ID=-3]

    0x1d270e0: <multiple use>
    0x1d29520: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d270e0, 0x1d29520<LD4[@eicas_discretes]> [ORD=72] [ID=-3]

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d26de0: i32 = Constant<512> [ORD=73] [ID=-3]

    0x1d29320: i32 = or 0x1d272e0, 0x1d26de0 [ORD=73] [ID=-3]

    0x1d270e0: <multiple use>
    0x1d29520: <multiple use>
  0x1d271e0: ch = store 0x1d272e0:1, 0x1d29320, 0x1d270e0, 0x1d29520<ST4[@eicas_discretes]> [ORD=74] [ID=-3]


Legalized selection DAG: BB#18 'AssignFunction3:AssignFunction3.if.then39'
SelectionDAG has 11 nodes:
  0x1d29520: i32 = undef [ORD=72] [ID=2]

    0x1d09b38: ch = EntryToken [ORD=72] [ID=0]

    0x1d273e0: <multiple use>
    0x1d29520: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d273e0, 0x1d29520<LD4[@eicas_discretes]> [ORD=72] [ID=4]

      0x1d269e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

    0x1d268e0: i32 = REDEFINEISD::Hi 0x1d269e0

      0x1d266e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

    0x1d26be0: i32 = REDEFINEISD::Lo 0x1d266e0

  0x1d273e0: i32 = add 0x1d268e0, 0x1d26be0

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d26de0: i32 = Constant<512> [ORD=73] [ID=3]

    0x1d29320: i32 = or 0x1d272e0, 0x1d26de0 [ORD=73] [ID=5]

    0x1d273e0: <multiple use>
    0x1d29520: <multiple use>
  0x1d271e0: ch = store 0x1d272e0:1, 0x1d29320, 0x1d273e0, 0x1d29520<ST4[@eicas_discretes]> [ORD=74] [ID=6]


Optimized legalized selection DAG: BB#18 'AssignFunction3:AssignFunction3.if.then39'
SelectionDAG has 11 nodes:
  0x1d29520: i32 = undef [ORD=72] [ID=2]

    0x1d09b38: ch = EntryToken [ORD=72] [ID=0]

    0x1d273e0: <multiple use>
    0x1d29520: <multiple use>
  0x1d272e0: i32,ch = load 0x1d09b38, 0x1d273e0, 0x1d29520<LD4[@eicas_discretes]> [ORD=72] [ID=4]

      0x1d269e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

    0x1d268e0: i32 = REDEFINEISD::Hi 0x1d269e0

      0x1d266e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

    0x1d26be0: i32 = REDEFINEISD::Lo 0x1d266e0

  0x1d273e0: i32 = add 0x1d268e0, 0x1d26be0

    0x1d272e0: <multiple use>
      0x1d272e0: <multiple use>
      0x1d26de0: i32 = Constant<512> [ORD=73] [ID=3]

    0x1d29320: i32 = or 0x1d272e0, 0x1d26de0 [ORD=73] [ID=5]

    0x1d273e0: <multiple use>
    0x1d29520: <multiple use>
  0x1d271e0: ch = store 0x1d272e0:1, 0x1d29320, 0x1d273e0, 0x1d29520<ST4[@eicas_discretes]> [ORD=74] [ID=6]


===== Instruction selection begins: BB#18 'AssignFunction3.if.then39'
ISEL: Starting pattern match on root node: 0x1d271e0: ch = store 0x1d272e0:1, 0x1d29320, 0x1d273e0, 0x1d29520<ST4[@eicas_discretes]> [ORD=74] [ID=10]

  Initial Opcode index to 178
  Morphed node: 0x1d271e0: ch = SW 0x1d29320, 0x1d273e0, 0x1d270e0, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=74]

ISEL: Match complete!
=> 0x1d271e0: ch = SW 0x1d29320, 0x1d273e0, 0x1d270e0, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=74]

ISEL: Starting pattern match on root node: 0x1d29320: i32 = or 0x1d272e0, 0x1d26de0 [ORD=73] [ID=9]

  Initial Opcode index to 567
  Morphed node: 0x1d29320: i32 = ORI 0x1d272e0, 0x1d26fe0 [ORD=73]

ISEL: Match complete!
=> 0x1d29320: i32 = ORI 0x1d272e0, 0x1d26fe0 [ORD=73]

ISEL: Starting pattern match on root node: 0x1d272e0: i32,ch = load 0x1d09b38, 0x1d273e0, 0x1d29520<LD4[@eicas_discretes]> [ORD=72] [ID=8]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x1d272e0: i32,ch = LW 0x1d273e0, 0x1d270e0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=72]

ISEL: Match complete!
=> 0x1d272e0: i32,ch = LW 0x1d273e0, 0x1d270e0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=72]

ISEL: Starting pattern match on root node: 0x1d273e0: i32 = add 0x1d268e0, 0x1d26be0 [ID=7]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x1d273e0: i32 = ADD 0x1d26be0, 0x1d268e0

ISEL: Match complete!
=> 0x1d273e0: i32 = ADD 0x1d26be0, 0x1d268e0

ISEL: Starting pattern match on root node: 0x1d26be0: i32 = REDEFINEISD::Lo 0x1d266e0 [ID=6]

  Initial Opcode index to 1204
  Morphed node: 0x1d26be0: i32 = ADDI 0x1d29520, 0x1d266e0

ISEL: Match complete!
=> 0x1d26be0: i32 = ADDI 0x1d29520, 0x1d266e0

ISEL: Starting pattern match on root node: 0x1d268e0: i32 = REDEFINEISD::Hi 0x1d269e0 [ID=5]

  Initial Opcode index to 1186
  Morphed node: 0x1d268e0: i32 = LUI 0x1d269e0

ISEL: Match complete!
=> 0x1d268e0: i32 = LUI 0x1d269e0

=> 0x1d266e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

=> 0x1d269e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

=> 0x1d09b38: ch = EntryToken [ORD=72]

===== Instruction selection ends:
Selected selection DAG: BB#18 'AssignFunction3:AssignFunction3.if.then39'
SelectionDAG has 12 nodes:
      0x1d29520: i32 = Register %zero

      0x1d266e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

    0x1d26be0: i32 = ADDI 0x1d29520, 0x1d266e0

      0x1d269e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

    0x1d268e0: i32 = LUI 0x1d269e0

  0x1d273e0: i32 = ADD 0x1d26be0, 0x1d268e0

    0x1d273e0: <multiple use>
    0x1d270e0: <multiple use>
    0x1d09b38: ch = EntryToken [ORD=72]

  0x1d272e0: i32,ch = LW 0x1d273e0, 0x1d270e0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=72]

  0x1d270e0: i32 = TargetConstant<0>

      0x1d272e0: <multiple use>
      0x1d26fe0: i32 = TargetConstant<512>

    0x1d29320: i32 = ORI 0x1d272e0, 0x1d26fe0 [ORD=73]

    0x1d273e0: <multiple use>
    0x1d270e0: <multiple use>
    0x1d272e0: <multiple use>
  0x1d271e0: ch = SW 0x1d29320, 0x1d273e0, 0x1d270e0, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=74]


********** List Scheduling BB#18 'AssignFunction3.if.then39' **********
SU(0): 0x1d271e0: ch = SW 0x1d29320, 0x1d273e0, 0x1d270e0, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=74] [ID=0]

  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
   val SU(5): Latency=1
   val SU(2): Latency=1
   ch  SU(1): Latency=1

SU(1): 0x1d272e0: i32,ch = LW 0x1d273e0, 0x1d270e0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=72] [ID=1]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1
   val SU(5): Latency=1

SU(2): 0x1d273e0: i32 = ADD 0x1d26be0, 0x1d268e0 [ID=2]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(4): Latency=1
   val SU(3): Latency=1
  Successors:
   val SU(0): Latency=1
   val SU(1): Latency=1

SU(3): 0x1d268e0: i32 = LUI 0x1d269e0 [ID=3]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(2): Latency=1

SU(4): 0x1d26be0: i32 = ADDI 0x1d29520, 0x1d266e0 [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(2): Latency=1

SU(5): 0x1d29320: i32 = ORI 0x1d272e0, 0x1d26fe0 [ORD=73] [ID=5]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(1): Latency=1
  Successors:
   val SU(0): Latency=1


Examining Available:
Height 0: SU(0): 0x1d271e0: ch = SW 0x1d29320, 0x1d273e0, 0x1d270e0, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=74] [ID=0]


*** Scheduling [0]: SU(0): 0x1d271e0: ch = SW 0x1d29320, 0x1d273e0, 0x1d270e0, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=74] [ID=0]


Examining Available:
Height 1: SU(5): 0x1d29320: i32 = ORI 0x1d272e0, 0x1d26fe0 [ORD=73] [ID=5]


*** Scheduling [1]: SU(5): 0x1d29320: i32 = ORI 0x1d272e0, 0x1d26fe0 [ORD=73] [ID=5]


Examining Available:
Height 2: SU(1): 0x1d272e0: i32,ch = LW 0x1d273e0, 0x1d270e0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=72] [ID=1]


*** Scheduling [2]: SU(1): 0x1d272e0: i32,ch = LW 0x1d273e0, 0x1d270e0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=72] [ID=1]


Examining Available:
Height 3: SU(2): 0x1d273e0: i32 = ADD 0x1d26be0, 0x1d268e0 [ID=2]


*** Scheduling [3]: SU(2): 0x1d273e0: i32 = ADD 0x1d26be0, 0x1d268e0 [ID=2]


Examining Available:
Height 4: SU(4): 0x1d26be0: i32 = ADDI 0x1d29520, 0x1d266e0 [ID=4]

Height 4: SU(3): 0x1d268e0: i32 = LUI 0x1d269e0 [ID=3]


*** Scheduling [4]: SU(4): 0x1d26be0: i32 = ADDI 0x1d29520, 0x1d266e0 [ID=4]


Examining Available:
Height 4: SU(3): 0x1d268e0: i32 = LUI 0x1d269e0 [ID=3]


*** Scheduling [5]: SU(3): 0x1d268e0: i32 = LUI 0x1d269e0 [ID=3]

*** Final schedule ***
SU(3): 0x1d268e0: i32 = LUI 0x1d269e0 [ID=3]

SU(4): 0x1d26be0: i32 = ADDI 0x1d29520, 0x1d266e0 [ID=4]

SU(2): 0x1d273e0: i32 = ADD 0x1d26be0, 0x1d268e0 [ID=2]

SU(1): 0x1d272e0: i32,ch = LW 0x1d273e0, 0x1d270e0, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=72] [ID=1]

SU(5): 0x1d29320: i32 = ORI 0x1d272e0, 0x1d26fe0 [ORD=73] [ID=5]

SU(0): 0x1d271e0: ch = SW 0x1d29320, 0x1d273e0, 0x1d270e0, 0x1d272e0:1<Mem:ST4[@eicas_discretes]> [ORD=74] [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %61 = load i32* @eicas_discretes, align 4
I was here to add @eicas_discretes = global i32 0, align 4
with I type i32and sd value :0x1d29520: i32 = GlobalAddress<i32* @eicas_discretes> 0
new load?0x1d271e0: i32,ch = load 0x1d09b38, 0x1d29520, 0x1d270e0<LD4[@eicas_discretes]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x1d26fe0: i32 = Constant<0>

    0x1d09b38: ch = EntryToken

    0x1d29520: i32 = GlobalAddress<i32* @eicas_discretes> 0

    0x1d270e0: i32 = undef

  0x1d271e0: i32,ch = load 0x1d09b38, 0x1d29520, 0x1d270e0<LD4[@eicas_discretes]>

  0x1d09b38: ch = EntryToken


store visit is after?  store i32 %61, i32* %1, align 4
I was here to add   %1 = alloca i32, align 4, !ConsumedBy !6
whats in dag after store?SelectionDAG has 7 nodes:
  0x1d26fe0: i32 = Constant<0>

  0x1d270e0: i32 = undef [ORD=75]

    0x1d09b38: ch = EntryToken [ORD=75]

    0x1d29520: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=75]

    0x1d270e0: <multiple use>
  0x1d271e0: i32,ch = load 0x1d09b38, 0x1d29520, 0x1d270e0<LD4[@eicas_discretes]> [ORD=75]

    0x1d271e0: <multiple use>
    0x1d271e0: <multiple use>
    0x1d29320: i32 = FrameIndex<0> [ORD=76]

    0x1d270e0: <multiple use>
  0x1d272e0: ch = store 0x1d271e0:1, 0x1d271e0, 0x1d29320, 0x1d270e0<ST4[%1]> [ORD=76]


Initial selection DAG: BB#19 'AssignFunction3:AssignFunction3.return'
SelectionDAG has 7 nodes:
  0x1d26fe0: i32 = Constant<0>

  0x1d270e0: i32 = undef [ORD=75]

    0x1d09b38: ch = EntryToken [ORD=75]

    0x1d29520: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=75]

    0x1d270e0: <multiple use>
  0x1d271e0: i32,ch = load 0x1d09b38, 0x1d29520, 0x1d270e0<LD4[@eicas_discretes]> [ORD=75]

    0x1d271e0: <multiple use>
    0x1d271e0: <multiple use>
    0x1d29320: i32 = FrameIndex<0> [ORD=76]

    0x1d270e0: <multiple use>
  0x1d272e0: ch = store 0x1d271e0:1, 0x1d271e0, 0x1d29320, 0x1d270e0<ST4[%1]> [ORD=76]


Optimized lowered selection DAG: BB#19 'AssignFunction3:AssignFunction3.return'
SelectionDAG has 6 nodes:
  0x1d270e0: i32 = undef [ORD=75]

    0x1d09b38: ch = EntryToken [ORD=75]

    0x1d29520: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=75]

    0x1d270e0: <multiple use>
  0x1d271e0: i32,ch = load 0x1d09b38, 0x1d29520, 0x1d270e0<LD4[@eicas_discretes]> [ORD=75]

    0x1d271e0: <multiple use>
    0x1d271e0: <multiple use>
    0x1d29320: i32 = FrameIndex<0> [ORD=76]

    0x1d270e0: <multiple use>
  0x1d272e0: ch = store 0x1d271e0:1, 0x1d271e0, 0x1d29320, 0x1d270e0<ST4[%1]> [ORD=76]


Legally typed node: 0x1d29320: i32 = FrameIndex<0> [ORD=76] [ID=0]

Legally typed node: 0x1d270e0: i32 = undef [ORD=75] [ID=0]

Legally typed node: 0x1d29520: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=75] [ID=0]

Legally typed node: 0x1d09b38: ch = EntryToken [ORD=75] [ID=0]

Legally typed node: 0x1d271e0: i32,ch = load 0x1d09b38, 0x1d29520, 0x1d270e0<LD4[@eicas_discretes]> [ORD=75] [ID=0]

Legally typed node: 0x1d272e0: ch = store 0x1d271e0:1, 0x1d271e0, 0x1d29320, 0x1d270e0<ST4[%1]> [ORD=76] [ID=0]

Legally typed node: 0x7fff243c9bc0: ch = handlenode 0x1d272e0 [ID=0]

Type-legalized selection DAG: BB#19 'AssignFunction3:AssignFunction3.return'
SelectionDAG has 6 nodes:
  0x1d270e0: i32 = undef [ORD=75] [ID=-3]

    0x1d09b38: ch = EntryToken [ORD=75] [ID=-3]

    0x1d29520: i32 = GlobalAddress<i32* @eicas_discretes> 0 [ORD=75] [ID=-3]

    0x1d270e0: <multiple use>
  0x1d271e0: i32,ch = load 0x1d09b38, 0x1d29520, 0x1d270e0<LD4[@eicas_discretes]> [ORD=75] [ID=-3]

    0x1d271e0: <multiple use>
    0x1d271e0: <multiple use>
    0x1d29320: i32 = FrameIndex<0> [ORD=76] [ID=-3]

    0x1d270e0: <multiple use>
  0x1d272e0: ch = store 0x1d271e0:1, 0x1d271e0, 0x1d29320, 0x1d270e0<ST4[%1]> [ORD=76] [ID=-3]


Legalized selection DAG: BB#19 'AssignFunction3:AssignFunction3.return'
SelectionDAG has 10 nodes:
  0x1d270e0: i32 = undef [ORD=75] [ID=2]

    0x1d09b38: ch = EntryToken [ORD=75] [ID=0]

        0x1d26fe0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

      0x1d26be0: i32 = REDEFINEISD::Hi 0x1d26fe0

        0x1d273e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

      0x1d268e0: i32 = REDEFINEISD::Lo 0x1d273e0

    0x1d266e0: i32 = add 0x1d26be0, 0x1d268e0

    0x1d270e0: <multiple use>
  0x1d271e0: i32,ch = load 0x1d09b38, 0x1d266e0, 0x1d270e0<LD4[@eicas_discretes]> [ORD=75] [ID=4]

    0x1d271e0: <multiple use>
    0x1d271e0: <multiple use>
    0x1d29320: i32 = FrameIndex<0> [ORD=76] [ID=3]

    0x1d270e0: <multiple use>
  0x1d272e0: ch = store 0x1d271e0:1, 0x1d271e0, 0x1d29320, 0x1d270e0<ST4[%1]> [ORD=76] [ID=5]


Optimized legalized selection DAG: BB#19 'AssignFunction3:AssignFunction3.return'
SelectionDAG has 10 nodes:
  0x1d270e0: i32 = undef [ORD=75] [ID=2]

    0x1d09b38: ch = EntryToken [ORD=75] [ID=0]

        0x1d26fe0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

      0x1d26be0: i32 = REDEFINEISD::Hi 0x1d26fe0

        0x1d273e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

      0x1d268e0: i32 = REDEFINEISD::Lo 0x1d273e0

    0x1d266e0: i32 = add 0x1d26be0, 0x1d268e0

    0x1d270e0: <multiple use>
  0x1d271e0: i32,ch = load 0x1d09b38, 0x1d266e0, 0x1d270e0<LD4[@eicas_discretes]> [ORD=75] [ID=4]

    0x1d271e0: <multiple use>
    0x1d271e0: <multiple use>
    0x1d29320: i32 = FrameIndex<0> [ORD=76] [ID=3]

    0x1d270e0: <multiple use>
  0x1d272e0: ch = store 0x1d271e0:1, 0x1d271e0, 0x1d29320, 0x1d270e0<ST4[%1]> [ORD=76] [ID=5]


===== Instruction selection begins: BB#19 'AssignFunction3.return'
ISEL: Starting pattern match on root node: 0x1d272e0: ch = store 0x1d271e0:1, 0x1d271e0, 0x1d29320, 0x1d270e0<ST4[%1]> [ORD=76] [ID=9]

  Initial Opcode index to 178
  Morphed node: 0x1d272e0: ch = SW 0x1d271e0, 0x1d29320, 0x1d29520, 0x1d271e0:1<Mem:ST4[%1]> [ORD=76]

ISEL: Match complete!
=> 0x1d272e0: ch = SW 0x1d271e0, 0x1d29320, 0x1d29520, 0x1d271e0:1<Mem:ST4[%1]> [ORD=76]

ISEL: Starting pattern match on root node: 0x1d271e0: i32,ch = load 0x1d09b38, 0x1d266e0, 0x1d270e0<LD4[@eicas_discretes]> [ORD=75] [ID=8]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x1d271e0: i32,ch = LW 0x1d266e0, 0x1d29520, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=75]

ISEL: Match complete!
=> 0x1d271e0: i32,ch = LW 0x1d266e0, 0x1d29520, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=75]

ISEL: Starting pattern match on root node: 0x1d266e0: i32 = add 0x1d26be0, 0x1d268e0 [ID=7]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x1d266e0: i32 = ADD 0x1d268e0, 0x1d26be0

ISEL: Match complete!
=> 0x1d266e0: i32 = ADD 0x1d268e0, 0x1d26be0

ISEL: Starting pattern match on root node: 0x1d268e0: i32 = REDEFINEISD::Lo 0x1d273e0 [ID=6]

  Initial Opcode index to 1204
  Morphed node: 0x1d268e0: i32 = ADDI 0x1d270e0, 0x1d273e0

ISEL: Match complete!
=> 0x1d268e0: i32 = ADDI 0x1d270e0, 0x1d273e0

ISEL: Starting pattern match on root node: 0x1d26be0: i32 = REDEFINEISD::Hi 0x1d26fe0 [ID=5]

  Initial Opcode index to 1186
  Morphed node: 0x1d26be0: i32 = LUI 0x1d26fe0

ISEL: Match complete!
=> 0x1d26be0: i32 = LUI 0x1d26fe0

=> 0x1d273e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

=> 0x1d26fe0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

=> 0x1d09b38: ch = EntryToken [ORD=75]

===== Instruction selection ends:
Selected selection DAG: BB#19 'AssignFunction3:AssignFunction3.return'
SelectionDAG has 13 nodes:
        0x1d270e0: i32 = Register %zero

        0x1d273e0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=3]

      0x1d268e0: i32 = ADDI 0x1d270e0, 0x1d273e0

        0x1d26fe0: i32 = TargetGlobalAddress<i32* @eicas_discretes> 0 [TF=2]

      0x1d26be0: i32 = LUI 0x1d26fe0

    0x1d266e0: i32 = ADD 0x1d268e0, 0x1d26be0

    0x1d29520: <multiple use>
    0x1d09b38: ch = EntryToken [ORD=75]

  0x1d271e0: i32,ch = LW 0x1d266e0, 0x1d29520, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=75]

  0x1d29520: i32 = TargetConstant<0>

    0x1d271e0: <multiple use>
      0x1d269e0: i32 = Register %t5

      0x1d26de0: i32 = TargetFrameIndex<0>

    0x1d29320: i32 = ADDI 0x1d269e0, 0x1d26de0 [ORD=76]

    0x1d29520: <multiple use>
    0x1d271e0: <multiple use>
  0x1d272e0: ch = SW 0x1d271e0, 0x1d29320, 0x1d29520, 0x1d271e0:1<Mem:ST4[%1]> [ORD=76]


********** List Scheduling BB#19 'AssignFunction3.return' **********
SU(0): 0x1d272e0: ch = SW 0x1d271e0, 0x1d29320, 0x1d29520, 0x1d271e0:1<Mem:ST4[%1]> [ORD=76] [ID=0]

  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 0
  Predecessors:
   val SU(2): Latency=1
   val SU(1): Latency=1
   ch  SU(2): Latency=1

SU(1): 0x1d29320: i32 = ADDI 0x1d269e0, 0x1d26de0 [ORD=76] [ID=1]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
   val SU(0): Latency=1

SU(2): 0x1d271e0: i32,ch = LW 0x1d266e0, 0x1d29520, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=75] [ID=2]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
   val SU(3): Latency=1
  Successors:
   val SU(0): Latency=1
   ch  SU(0): Latency=1

SU(3): 0x1d266e0: i32 = ADD 0x1d268e0, 0x1d26be0 [ID=3]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
   val SU(5): Latency=1
   val SU(4): Latency=1
  Successors:
   val SU(2): Latency=1

SU(4): 0x1d26be0: i32 = LUI 0x1d26fe0 [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(3): Latency=1

SU(5): 0x1d268e0: i32 = ADDI 0x1d270e0, 0x1d273e0 [ID=5]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(3): Latency=1


Examining Available:
Height 0: SU(0): 0x1d272e0: ch = SW 0x1d271e0, 0x1d29320, 0x1d29520, 0x1d271e0:1<Mem:ST4[%1]> [ORD=76] [ID=0]


*** Scheduling [0]: SU(0): 0x1d272e0: ch = SW 0x1d271e0, 0x1d29320, 0x1d29520, 0x1d271e0:1<Mem:ST4[%1]> [ORD=76] [ID=0]


Examining Available:
Height 1: SU(1): 0x1d29320: i32 = ADDI 0x1d269e0, 0x1d26de0 [ORD=76] [ID=1]

Height 1: SU(2): 0x1d271e0: i32,ch = LW 0x1d266e0, 0x1d29520, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=75] [ID=2]


*** Scheduling [1]: SU(1): 0x1d29320: i32 = ADDI 0x1d269e0, 0x1d26de0 [ORD=76] [ID=1]


Examining Available:
Height 1: SU(2): 0x1d271e0: i32,ch = LW 0x1d266e0, 0x1d29520, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=75] [ID=2]


*** Scheduling [2]: SU(2): 0x1d271e0: i32,ch = LW 0x1d266e0, 0x1d29520, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=75] [ID=2]


Examining Available:
Height 3: SU(3): 0x1d266e0: i32 = ADD 0x1d268e0, 0x1d26be0 [ID=3]


*** Scheduling [3]: SU(3): 0x1d266e0: i32 = ADD 0x1d268e0, 0x1d26be0 [ID=3]


Examining Available:
Height 4: SU(5): 0x1d268e0: i32 = ADDI 0x1d270e0, 0x1d273e0 [ID=5]

Height 4: SU(4): 0x1d26be0: i32 = LUI 0x1d26fe0 [ID=4]


*** Scheduling [4]: SU(5): 0x1d268e0: i32 = ADDI 0x1d270e0, 0x1d273e0 [ID=5]


Examining Available:
Height 4: SU(4): 0x1d26be0: i32 = LUI 0x1d26fe0 [ID=4]


*** Scheduling [5]: SU(4): 0x1d26be0: i32 = LUI 0x1d26fe0 [ID=4]

*** Final schedule ***
SU(4): 0x1d26be0: i32 = LUI 0x1d26fe0 [ID=4]

SU(5): 0x1d268e0: i32 = ADDI 0x1d270e0, 0x1d273e0 [ID=5]

SU(3): 0x1d266e0: i32 = ADD 0x1d268e0, 0x1d26be0 [ID=3]

SU(2): 0x1d271e0: i32,ch = LW 0x1d266e0, 0x1d29520, 0x1d09b38<Mem:LD4[@eicas_discretes]> [ORD=75] [ID=2]

SU(1): 0x1d29320: i32 = ADDI 0x1d269e0, 0x1d26de0 [ORD=76] [ID=1]

SU(0): 0x1d272e0: ch = SW 0x1d271e0, 0x1d29320, 0x1d29520, 0x1d271e0:1<Mem:ST4[%1]> [ORD=76] [ID=0]


Total amount of phi nodes to update: 0
# Machine code for function AssignFunction3: SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %AssignFunction3.entry
16B		%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
48B		SW %vreg1, %vreg0<kill>, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
64B		%vreg2<def> = LW %vreg1, 0; mem:LD4[%4](align=16) GR32Bit:%vreg2,%vreg1
80B		BEQ <BB#2>, %vreg2<kill>, %zero; GR32Bit:%vreg2
96B		JAL <BB#1>
	    Successors according to CFG: BB#1(20) BB#2(12)

112B	BB#1: derived from LLVM BB %AssignFunction3.if.then
	    Predecessors according to CFG: BB#0
128B		%vreg3<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg3
144B		%vreg4<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg4
160B		%vreg5<def> = ADD %vreg4<kill>, %vreg3<kill>; GR32Bit:%vreg5,%vreg4,%vreg3
176B		%vreg6<def> = LW %vreg5, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg6,%vreg5
192B		%vreg7<def> = ORI %vreg6<kill>, 1; GR32Bit:%vreg7,%vreg6
208B		SW %vreg7<kill>, %vreg5, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg7,%vreg5
	    Successors according to CFG: BB#2

224B	BB#2: derived from LLVM BB %AssignFunction3.if.end
	    Predecessors according to CFG: BB#0 BB#1
240B		%vreg8<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg8
256B		%vreg9<def> = LW %vreg8<kill>, 0; mem:LD4[%2] GR32Bit:%vreg9,%vreg8
272B		%vreg10<def> = LW %vreg9<kill>, 4; mem:LD4[%10] GR32Bit:%vreg10,%vreg9
288B		BEQ <BB#4>, %vreg10<kill>, %zero; GR32Bit:%vreg10
304B		JAL <BB#3>
	    Successors according to CFG: BB#3(20) BB#4(12)

320B	BB#3: derived from LLVM BB %AssignFunction3.if.then3
	    Predecessors according to CFG: BB#2
336B		%vreg11<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg11
352B		%vreg12<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg12
368B		%vreg13<def> = ADD %vreg12<kill>, %vreg11<kill>; GR32Bit:%vreg13,%vreg12,%vreg11
384B		%vreg14<def> = LW %vreg13, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg14,%vreg13
400B		%vreg15<def> = ORI %vreg14<kill>, 2; GR32Bit:%vreg15,%vreg14
416B		SW %vreg15<kill>, %vreg13, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg15,%vreg13
	    Successors according to CFG: BB#4

432B	BB#4: derived from LLVM BB %AssignFunction3.if.end5
	    Predecessors according to CFG: BB#2 BB#3
448B		%vreg16<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg16
464B		%vreg17<def> = LW %vreg16<kill>, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg16
480B		%vreg18<def> = LW %vreg17<kill>, 8; mem:LD4[%16] GR32Bit:%vreg18,%vreg17
496B		%vreg19<def> = ADDI %zero, 250; GR32Bit:%vreg19
512B		BGT <BB#6>, %vreg18<kill>, %vreg19<kill>; GR32Bit:%vreg18,%vreg19
528B		JAL <BB#5>
	    Successors according to CFG: BB#6(16) BB#5(16)

544B	BB#5: derived from LLVM BB %AssignFunction3.lor.lhs.false
	    Predecessors according to CFG: BB#4
560B		%vreg20<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg20
576B		%vreg21<def> = LW %vreg20<kill>, 0; mem:LD4[%2] GR32Bit:%vreg21,%vreg20
592B		%vreg22<def> = LW %vreg21<kill>, 12; mem:LD4[%20] GR32Bit:%vreg22,%vreg21
608B		%vreg23<def> = ADDI %zero, 251; GR32Bit:%vreg23
624B		BLT <BB#7>, %vreg22<kill>, %vreg23<kill>; GR32Bit:%vreg22,%vreg23
640B		JAL <BB#6>
	    Successors according to CFG: BB#6(16) BB#7(16)

656B	BB#6: derived from LLVM BB %AssignFunction3.if.then9
	    Predecessors according to CFG: BB#4 BB#5
672B		%vreg24<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg24
688B		%vreg25<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg25
704B		%vreg26<def> = ADD %vreg25<kill>, %vreg24<kill>; GR32Bit:%vreg26,%vreg25,%vreg24
720B		%vreg27<def> = LW %vreg26, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg27,%vreg26
736B		%vreg28<def> = ORI %vreg27<kill>, 4; GR32Bit:%vreg28,%vreg27
752B		SW %vreg28<kill>, %vreg26, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg28,%vreg26
	    Successors according to CFG: BB#7

768B	BB#7: derived from LLVM BB %AssignFunction3.if.end11
	    Predecessors according to CFG: BB#5 BB#6
784B		%vreg29<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg29
800B		%vreg30<def> = LW %vreg29<kill>, 0; mem:LD4[%2] GR32Bit:%vreg30,%vreg29
816B		%vreg31<def> = LW %vreg30<kill>, 16; mem:LD4[%26] GR32Bit:%vreg31,%vreg30
832B		BEQ <BB#9>, %vreg31<kill>, %zero; GR32Bit:%vreg31
848B		JAL <BB#8>
	    Successors according to CFG: BB#8(20) BB#9(12)

864B	BB#8: derived from LLVM BB %AssignFunction3.if.then14
	    Predecessors according to CFG: BB#7
880B		%vreg32<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg32
896B		%vreg33<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg33
912B		%vreg34<def> = ADD %vreg33<kill>, %vreg32<kill>; GR32Bit:%vreg34,%vreg33,%vreg32
928B		%vreg35<def> = LW %vreg34, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg35,%vreg34
944B		%vreg36<def> = ORI %vreg35<kill>, 16; GR32Bit:%vreg36,%vreg35
960B		SW %vreg36<kill>, %vreg34, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg36,%vreg34
	    Successors according to CFG: BB#9

976B	BB#9: derived from LLVM BB %AssignFunction3.if.end16
	    Predecessors according to CFG: BB#7 BB#8
992B		%vreg37<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg37
1008B		%vreg38<def> = LW %vreg37<kill>, 0; mem:LD4[%2] GR32Bit:%vreg38,%vreg37
1024B		%vreg39<def> = LW %vreg38<kill>, 20; mem:LD4[%32] GR32Bit:%vreg39,%vreg38
1040B		BEQ <BB#11>, %vreg39<kill>, %zero; GR32Bit:%vreg39
1056B		JAL <BB#10>
	    Successors according to CFG: BB#10(20) BB#11(12)

1072B	BB#10: derived from LLVM BB %AssignFunction3.if.then19
	    Predecessors according to CFG: BB#9
1088B		%vreg40<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg40
1104B		%vreg41<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg41
1120B		%vreg42<def> = ADD %vreg41<kill>, %vreg40<kill>; GR32Bit:%vreg42,%vreg41,%vreg40
1136B		%vreg43<def> = LW %vreg42, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg43,%vreg42
1152B		%vreg44<def> = ORI %vreg43<kill>, 32; GR32Bit:%vreg44,%vreg43
1168B		SW %vreg44<kill>, %vreg42, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg44,%vreg42
	    Successors according to CFG: BB#11

1184B	BB#11: derived from LLVM BB %AssignFunction3.if.end21
	    Predecessors according to CFG: BB#9 BB#10
1200B		%vreg45<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg45
1216B		%vreg46<def> = LW %vreg45<kill>, 0; mem:LD4[%2] GR32Bit:%vreg46,%vreg45
1232B		%vreg47<def> = LW %vreg46<kill>, 24; mem:LD4[%38] GR32Bit:%vreg47,%vreg46
1248B		BEQ <BB#13>, %vreg47<kill>, %zero; GR32Bit:%vreg47
1264B		JAL <BB#12>
	    Successors according to CFG: BB#12(20) BB#13(12)

1280B	BB#12: derived from LLVM BB %AssignFunction3.if.then24
	    Predecessors according to CFG: BB#11
1296B		%vreg48<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg48
1312B		%vreg49<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg49
1328B		%vreg50<def> = ADD %vreg49<kill>, %vreg48<kill>; GR32Bit:%vreg50,%vreg49,%vreg48
1344B		%vreg51<def> = LW %vreg50, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg51,%vreg50
1360B		%vreg52<def> = ORI %vreg51<kill>, 64; GR32Bit:%vreg52,%vreg51
1376B		SW %vreg52<kill>, %vreg50, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg52,%vreg50
	    Successors according to CFG: BB#13

1392B	BB#13: derived from LLVM BB %AssignFunction3.if.end26
	    Predecessors according to CFG: BB#11 BB#12
1408B		%vreg53<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg53
1424B		%vreg54<def> = LW %vreg53<kill>, 0; mem:LD4[%2] GR32Bit:%vreg54,%vreg53
1440B		%vreg55<def> = LW %vreg54<kill>, 28; mem:LD4[%44] GR32Bit:%vreg55,%vreg54
1456B		BEQ <BB#15>, %vreg55<kill>, %zero; GR32Bit:%vreg55
1472B		JAL <BB#14>
	    Successors according to CFG: BB#14(20) BB#15(12)

1488B	BB#14: derived from LLVM BB %AssignFunction3.if.then29
	    Predecessors according to CFG: BB#13
1504B		%vreg56<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg56
1520B		%vreg57<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg57
1536B		%vreg58<def> = ADD %vreg57<kill>, %vreg56<kill>; GR32Bit:%vreg58,%vreg57,%vreg56
1552B		%vreg59<def> = LW %vreg58, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg59,%vreg58
1568B		%vreg60<def> = ORI %vreg59<kill>, 128; GR32Bit:%vreg60,%vreg59
1584B		SW %vreg60<kill>, %vreg58, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg60,%vreg58
	    Successors according to CFG: BB#15

1600B	BB#15: derived from LLVM BB %AssignFunction3.if.end31
	    Predecessors according to CFG: BB#13 BB#14
1616B		%vreg61<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg61
1632B		%vreg62<def> = LW %vreg61<kill>, 0; mem:LD4[%2] GR32Bit:%vreg62,%vreg61
1648B		%vreg63<def> = LW %vreg62<kill>, 32; mem:LD4[%50] GR32Bit:%vreg63,%vreg62
1664B		BEQ <BB#17>, %vreg63<kill>, %zero; GR32Bit:%vreg63
1680B		JAL <BB#16>
	    Successors according to CFG: BB#16(20) BB#17(12)

1696B	BB#16: derived from LLVM BB %AssignFunction3.if.then34
	    Predecessors according to CFG: BB#15
1712B		%vreg64<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg64
1728B		%vreg65<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg65
1744B		%vreg66<def> = ADD %vreg65<kill>, %vreg64<kill>; GR32Bit:%vreg66,%vreg65,%vreg64
1760B		%vreg67<def> = LW %vreg66, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg67,%vreg66
1776B		%vreg68<def> = ORI %vreg67<kill>, 256; GR32Bit:%vreg68,%vreg67
1792B		SW %vreg68<kill>, %vreg66, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg68,%vreg66
	    Successors according to CFG: BB#17

1808B	BB#17: derived from LLVM BB %AssignFunction3.if.end36
	    Predecessors according to CFG: BB#15 BB#16
1824B		%vreg69<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg69
1840B		%vreg70<def> = LW %vreg69<kill>, 0; mem:LD4[%2] GR32Bit:%vreg70,%vreg69
1856B		%vreg71<def> = LW %vreg70<kill>, 36; mem:LD4[%56] GR32Bit:%vreg71,%vreg70
1872B		BEQ <BB#19>, %vreg71<kill>, %zero; GR32Bit:%vreg71
1888B		JAL <BB#18>
	    Successors according to CFG: BB#18(20) BB#19(12)

1904B	BB#18: derived from LLVM BB %AssignFunction3.if.then39
	    Predecessors according to CFG: BB#17
1920B		%vreg72<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg72
1936B		%vreg73<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg73
1952B		%vreg74<def> = ADD %vreg73<kill>, %vreg72<kill>; GR32Bit:%vreg74,%vreg73,%vreg72
1968B		%vreg75<def> = LW %vreg74, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg75,%vreg74
1984B		%vreg76<def> = ORI %vreg75<kill>, 512; GR32Bit:%vreg76,%vreg75
2000B		SW %vreg76<kill>, %vreg74, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg76,%vreg74
	    Successors according to CFG: BB#19

2016B	BB#19: derived from LLVM BB %AssignFunction3.return
	    Predecessors according to CFG: BB#17 BB#18
2032B		%vreg77<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg77
2048B		%vreg78<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg78
2064B		%vreg79<def> = ADD %vreg78<kill>, %vreg77<kill>; GR32Bit:%vreg79,%vreg78,%vreg77
2080B		%vreg80<def> = LW %vreg79<kill>, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg80,%vreg79
2096B		%vreg81<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg81
2112B		SW %vreg80<kill>, %vreg81<kill>, 0; mem:ST4[%1] GR32Bit:%vreg80,%vreg81

# End machine code for function AssignFunction3.

********** Stack Coloring **********
********** Function: AssignFunction3
Found 0 markers and 2 slots
Slot structure:
Slot #0 - 4 bytes.
Slot #1 - 4 bytes.
Total Stack size: 8 bytes

Will not try to merge slots.
Removed 0 markers.
******** Pre-regalloc Machine LICM: AssignFunction3 ********
******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: AssignFunction3
********** PROCESS IMPLICIT DEFS **********
********** Function: AssignFunction3
********** REWRITING TWO-ADDR INSTRS **********
********** Function: AssignFunction3
# Machine code for function AssignFunction3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %AssignFunction3.entry
16B		%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
48B		SW %vreg1, %vreg0<kill>, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
64B		%vreg2<def> = LW %vreg1<kill>, 0; mem:LD4[%4](align=16) GR32Bit:%vreg2,%vreg1
80B		BEQ <BB#2>, %vreg2<kill>, %zero; GR32Bit:%vreg2
96B		JAL <BB#1>
	    Successors according to CFG: BB#1(20) BB#2(12)

112B	BB#1: derived from LLVM BB %AssignFunction3.if.then
	    Predecessors according to CFG: BB#0
128B		%vreg3<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg3
144B		%vreg4<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg4
160B		%vreg5<def> = ADD %vreg4<kill>, %vreg3<kill>; GR32Bit:%vreg5,%vreg4,%vreg3
176B		%vreg6<def> = LW %vreg5, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg6,%vreg5
192B		%vreg7<def> = ORI %vreg6<kill>, 1; GR32Bit:%vreg7,%vreg6
208B		SW %vreg7<kill>, %vreg5<kill>, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg7,%vreg5
	    Successors according to CFG: BB#2

224B	BB#2: derived from LLVM BB %AssignFunction3.if.end
	    Predecessors according to CFG: BB#0 BB#1
240B		%vreg8<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg8
256B		%vreg9<def> = LW %vreg8<kill>, 0; mem:LD4[%2] GR32Bit:%vreg9,%vreg8
272B		%vreg10<def> = LW %vreg9<kill>, 4; mem:LD4[%10] GR32Bit:%vreg10,%vreg9
288B		BEQ <BB#4>, %vreg10<kill>, %zero; GR32Bit:%vreg10
304B		JAL <BB#3>
	    Successors according to CFG: BB#3(20) BB#4(12)

320B	BB#3: derived from LLVM BB %AssignFunction3.if.then3
	    Predecessors according to CFG: BB#2
336B		%vreg11<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg11
352B		%vreg12<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg12
368B		%vreg13<def> = ADD %vreg12<kill>, %vreg11<kill>; GR32Bit:%vreg13,%vreg12,%vreg11
384B		%vreg14<def> = LW %vreg13, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg14,%vreg13
400B		%vreg15<def> = ORI %vreg14<kill>, 2; GR32Bit:%vreg15,%vreg14
416B		SW %vreg15<kill>, %vreg13<kill>, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg15,%vreg13
	    Successors according to CFG: BB#4

432B	BB#4: derived from LLVM BB %AssignFunction3.if.end5
	    Predecessors according to CFG: BB#2 BB#3
448B		%vreg16<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg16
464B		%vreg17<def> = LW %vreg16<kill>, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg16
480B		%vreg18<def> = LW %vreg17<kill>, 8; mem:LD4[%16] GR32Bit:%vreg18,%vreg17
496B		%vreg19<def> = ADDI %zero, 250; GR32Bit:%vreg19
512B		BGT <BB#6>, %vreg18<kill>, %vreg19<kill>; GR32Bit:%vreg18,%vreg19
528B		JAL <BB#5>
	    Successors according to CFG: BB#6(16) BB#5(16)

544B	BB#5: derived from LLVM BB %AssignFunction3.lor.lhs.false
	    Predecessors according to CFG: BB#4
560B		%vreg20<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg20
576B		%vreg21<def> = LW %vreg20<kill>, 0; mem:LD4[%2] GR32Bit:%vreg21,%vreg20
592B		%vreg22<def> = LW %vreg21<kill>, 12; mem:LD4[%20] GR32Bit:%vreg22,%vreg21
608B		%vreg23<def> = ADDI %zero, 251; GR32Bit:%vreg23
624B		BLT <BB#7>, %vreg22<kill>, %vreg23<kill>; GR32Bit:%vreg22,%vreg23
640B		JAL <BB#6>
	    Successors according to CFG: BB#6(16) BB#7(16)

656B	BB#6: derived from LLVM BB %AssignFunction3.if.then9
	    Predecessors according to CFG: BB#4 BB#5
672B		%vreg24<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg24
688B		%vreg25<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg25
704B		%vreg26<def> = ADD %vreg25<kill>, %vreg24<kill>; GR32Bit:%vreg26,%vreg25,%vreg24
720B		%vreg27<def> = LW %vreg26, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg27,%vreg26
736B		%vreg28<def> = ORI %vreg27<kill>, 4; GR32Bit:%vreg28,%vreg27
752B		SW %vreg28<kill>, %vreg26<kill>, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg28,%vreg26
	    Successors according to CFG: BB#7

768B	BB#7: derived from LLVM BB %AssignFunction3.if.end11
	    Predecessors according to CFG: BB#5 BB#6
784B		%vreg29<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg29
800B		%vreg30<def> = LW %vreg29<kill>, 0; mem:LD4[%2] GR32Bit:%vreg30,%vreg29
816B		%vreg31<def> = LW %vreg30<kill>, 16; mem:LD4[%26] GR32Bit:%vreg31,%vreg30
832B		BEQ <BB#9>, %vreg31<kill>, %zero; GR32Bit:%vreg31
848B		JAL <BB#8>
	    Successors according to CFG: BB#8(20) BB#9(12)

864B	BB#8: derived from LLVM BB %AssignFunction3.if.then14
	    Predecessors according to CFG: BB#7
880B		%vreg32<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg32
896B		%vreg33<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg33
912B		%vreg34<def> = ADD %vreg33<kill>, %vreg32<kill>; GR32Bit:%vreg34,%vreg33,%vreg32
928B		%vreg35<def> = LW %vreg34, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg35,%vreg34
944B		%vreg36<def> = ORI %vreg35<kill>, 16; GR32Bit:%vreg36,%vreg35
960B		SW %vreg36<kill>, %vreg34<kill>, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg36,%vreg34
	    Successors according to CFG: BB#9

976B	BB#9: derived from LLVM BB %AssignFunction3.if.end16
	    Predecessors according to CFG: BB#7 BB#8
992B		%vreg37<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg37
1008B		%vreg38<def> = LW %vreg37<kill>, 0; mem:LD4[%2] GR32Bit:%vreg38,%vreg37
1024B		%vreg39<def> = LW %vreg38<kill>, 20; mem:LD4[%32] GR32Bit:%vreg39,%vreg38
1040B		BEQ <BB#11>, %vreg39<kill>, %zero; GR32Bit:%vreg39
1056B		JAL <BB#10>
	    Successors according to CFG: BB#10(20) BB#11(12)

1072B	BB#10: derived from LLVM BB %AssignFunction3.if.then19
	    Predecessors according to CFG: BB#9
1088B		%vreg40<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg40
1104B		%vreg41<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg41
1120B		%vreg42<def> = ADD %vreg41<kill>, %vreg40<kill>; GR32Bit:%vreg42,%vreg41,%vreg40
1136B		%vreg43<def> = LW %vreg42, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg43,%vreg42
1152B		%vreg44<def> = ORI %vreg43<kill>, 32; GR32Bit:%vreg44,%vreg43
1168B		SW %vreg44<kill>, %vreg42<kill>, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg44,%vreg42
	    Successors according to CFG: BB#11

1184B	BB#11: derived from LLVM BB %AssignFunction3.if.end21
	    Predecessors according to CFG: BB#9 BB#10
1200B		%vreg45<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg45
1216B		%vreg46<def> = LW %vreg45<kill>, 0; mem:LD4[%2] GR32Bit:%vreg46,%vreg45
1232B		%vreg47<def> = LW %vreg46<kill>, 24; mem:LD4[%38] GR32Bit:%vreg47,%vreg46
1248B		BEQ <BB#13>, %vreg47<kill>, %zero; GR32Bit:%vreg47
1264B		JAL <BB#12>
	    Successors according to CFG: BB#12(20) BB#13(12)

1280B	BB#12: derived from LLVM BB %AssignFunction3.if.then24
	    Predecessors according to CFG: BB#11
1296B		%vreg48<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg48
1312B		%vreg49<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg49
1328B		%vreg50<def> = ADD %vreg49<kill>, %vreg48<kill>; GR32Bit:%vreg50,%vreg49,%vreg48
1344B		%vreg51<def> = LW %vreg50, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg51,%vreg50
1360B		%vreg52<def> = ORI %vreg51<kill>, 64; GR32Bit:%vreg52,%vreg51
1376B		SW %vreg52<kill>, %vreg50<kill>, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg52,%vreg50
	    Successors according to CFG: BB#13

1392B	BB#13: derived from LLVM BB %AssignFunction3.if.end26
	    Predecessors according to CFG: BB#11 BB#12
1408B		%vreg53<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg53
1424B		%vreg54<def> = LW %vreg53<kill>, 0; mem:LD4[%2] GR32Bit:%vreg54,%vreg53
1440B		%vreg55<def> = LW %vreg54<kill>, 28; mem:LD4[%44] GR32Bit:%vreg55,%vreg54
1456B		BEQ <BB#15>, %vreg55<kill>, %zero; GR32Bit:%vreg55
1472B		JAL <BB#14>
	    Successors according to CFG: BB#14(20) BB#15(12)

1488B	BB#14: derived from LLVM BB %AssignFunction3.if.then29
	    Predecessors according to CFG: BB#13
1504B		%vreg56<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg56
1520B		%vreg57<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg57
1536B		%vreg58<def> = ADD %vreg57<kill>, %vreg56<kill>; GR32Bit:%vreg58,%vreg57,%vreg56
1552B		%vreg59<def> = LW %vreg58, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg59,%vreg58
1568B		%vreg60<def> = ORI %vreg59<kill>, 128; GR32Bit:%vreg60,%vreg59
1584B		SW %vreg60<kill>, %vreg58<kill>, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg60,%vreg58
	    Successors according to CFG: BB#15

1600B	BB#15: derived from LLVM BB %AssignFunction3.if.end31
	    Predecessors according to CFG: BB#13 BB#14
1616B		%vreg61<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg61
1632B		%vreg62<def> = LW %vreg61<kill>, 0; mem:LD4[%2] GR32Bit:%vreg62,%vreg61
1648B		%vreg63<def> = LW %vreg62<kill>, 32; mem:LD4[%50] GR32Bit:%vreg63,%vreg62
1664B		BEQ <BB#17>, %vreg63<kill>, %zero; GR32Bit:%vreg63
1680B		JAL <BB#16>
	    Successors according to CFG: BB#16(20) BB#17(12)

1696B	BB#16: derived from LLVM BB %AssignFunction3.if.then34
	    Predecessors according to CFG: BB#15
1712B		%vreg64<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg64
1728B		%vreg65<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg65
1744B		%vreg66<def> = ADD %vreg65<kill>, %vreg64<kill>; GR32Bit:%vreg66,%vreg65,%vreg64
1760B		%vreg67<def> = LW %vreg66, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg67,%vreg66
1776B		%vreg68<def> = ORI %vreg67<kill>, 256; GR32Bit:%vreg68,%vreg67
1792B		SW %vreg68<kill>, %vreg66<kill>, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg68,%vreg66
	    Successors according to CFG: BB#17

1808B	BB#17: derived from LLVM BB %AssignFunction3.if.end36
	    Predecessors according to CFG: BB#15 BB#16
1824B		%vreg69<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg69
1840B		%vreg70<def> = LW %vreg69<kill>, 0; mem:LD4[%2] GR32Bit:%vreg70,%vreg69
1856B		%vreg71<def> = LW %vreg70<kill>, 36; mem:LD4[%56] GR32Bit:%vreg71,%vreg70
1872B		BEQ <BB#19>, %vreg71<kill>, %zero; GR32Bit:%vreg71
1888B		JAL <BB#18>
	    Successors according to CFG: BB#18(20) BB#19(12)

1904B	BB#18: derived from LLVM BB %AssignFunction3.if.then39
	    Predecessors according to CFG: BB#17
1920B		%vreg72<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg72
1936B		%vreg73<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg73
1952B		%vreg74<def> = ADD %vreg73<kill>, %vreg72<kill>; GR32Bit:%vreg74,%vreg73,%vreg72
1968B		%vreg75<def> = LW %vreg74, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg75,%vreg74
1984B		%vreg76<def> = ORI %vreg75<kill>, 512; GR32Bit:%vreg76,%vreg75
2000B		SW %vreg76<kill>, %vreg74<kill>, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg76,%vreg74
	    Successors according to CFG: BB#19

2016B	BB#19: derived from LLVM BB %AssignFunction3.return
	    Predecessors according to CFG: BB#17 BB#18
2032B		%vreg77<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg77
2048B		%vreg78<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg78
2064B		%vreg79<def> = ADD %vreg78<kill>, %vreg77<kill>; GR32Bit:%vreg79,%vreg78,%vreg77
2080B		%vreg80<def> = LW %vreg79<kill>, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg80,%vreg79
2096B		%vreg81<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg81
2112B		SW %vreg80<kill>, %vreg81<kill>, 0; mem:ST4[%1] GR32Bit:%vreg80,%vreg81

# End machine code for function AssignFunction3.

Computing live-in reg-units in ABI blocks.
Created 0 new intervals.
********** INTERVALS **********
%vreg0 = [16r,48r:0)  0@16r
%vreg1 = [32r,64r:0)  0@32r
%vreg2 = [64r,80r:0)  0@64r
%vreg3 = [128r,160r:0)  0@128r
%vreg4 = [144r,160r:0)  0@144r
%vreg5 = [160r,208r:0)  0@160r
%vreg6 = [176r,192r:0)  0@176r
%vreg7 = [192r,208r:0)  0@192r
%vreg8 = [240r,256r:0)  0@240r
%vreg9 = [256r,272r:0)  0@256r
%vreg10 = [272r,288r:0)  0@272r
%vreg11 = [336r,368r:0)  0@336r
%vreg12 = [352r,368r:0)  0@352r
%vreg13 = [368r,416r:0)  0@368r
%vreg14 = [384r,400r:0)  0@384r
%vreg15 = [400r,416r:0)  0@400r
%vreg16 = [448r,464r:0)  0@448r
%vreg17 = [464r,480r:0)  0@464r
%vreg18 = [480r,512r:0)  0@480r
%vreg19 = [496r,512r:0)  0@496r
%vreg20 = [560r,576r:0)  0@560r
%vreg21 = [576r,592r:0)  0@576r
%vreg22 = [592r,624r:0)  0@592r
%vreg23 = [608r,624r:0)  0@608r
%vreg24 = [672r,704r:0)  0@672r
%vreg25 = [688r,704r:0)  0@688r
%vreg26 = [704r,752r:0)  0@704r
%vreg27 = [720r,736r:0)  0@720r
%vreg28 = [736r,752r:0)  0@736r
%vreg29 = [784r,800r:0)  0@784r
%vreg30 = [800r,816r:0)  0@800r
%vreg31 = [816r,832r:0)  0@816r
%vreg32 = [880r,912r:0)  0@880r
%vreg33 = [896r,912r:0)  0@896r
%vreg34 = [912r,960r:0)  0@912r
%vreg35 = [928r,944r:0)  0@928r
%vreg36 = [944r,960r:0)  0@944r
%vreg37 = [992r,1008r:0)  0@992r
%vreg38 = [1008r,1024r:0)  0@1008r
%vreg39 = [1024r,1040r:0)  0@1024r
%vreg40 = [1088r,1120r:0)  0@1088r
%vreg41 = [1104r,1120r:0)  0@1104r
%vreg42 = [1120r,1168r:0)  0@1120r
%vreg43 = [1136r,1152r:0)  0@1136r
%vreg44 = [1152r,1168r:0)  0@1152r
%vreg45 = [1200r,1216r:0)  0@1200r
%vreg46 = [1216r,1232r:0)  0@1216r
%vreg47 = [1232r,1248r:0)  0@1232r
%vreg48 = [1296r,1328r:0)  0@1296r
%vreg49 = [1312r,1328r:0)  0@1312r
%vreg50 = [1328r,1376r:0)  0@1328r
%vreg51 = [1344r,1360r:0)  0@1344r
%vreg52 = [1360r,1376r:0)  0@1360r
%vreg53 = [1408r,1424r:0)  0@1408r
%vreg54 = [1424r,1440r:0)  0@1424r
%vreg55 = [1440r,1456r:0)  0@1440r
%vreg56 = [1504r,1536r:0)  0@1504r
%vreg57 = [1520r,1536r:0)  0@1520r
%vreg58 = [1536r,1584r:0)  0@1536r
%vreg59 = [1552r,1568r:0)  0@1552r
%vreg60 = [1568r,1584r:0)  0@1568r
%vreg61 = [1616r,1632r:0)  0@1616r
%vreg62 = [1632r,1648r:0)  0@1632r
%vreg63 = [1648r,1664r:0)  0@1648r
%vreg64 = [1712r,1744r:0)  0@1712r
%vreg65 = [1728r,1744r:0)  0@1728r
%vreg66 = [1744r,1792r:0)  0@1744r
%vreg67 = [1760r,1776r:0)  0@1760r
%vreg68 = [1776r,1792r:0)  0@1776r
%vreg69 = [1824r,1840r:0)  0@1824r
%vreg70 = [1840r,1856r:0)  0@1840r
%vreg71 = [1856r,1872r:0)  0@1856r
%vreg72 = [1920r,1952r:0)  0@1920r
%vreg73 = [1936r,1952r:0)  0@1936r
%vreg74 = [1952r,2000r:0)  0@1952r
%vreg75 = [1968r,1984r:0)  0@1968r
%vreg76 = [1984r,2000r:0)  0@1984r
%vreg77 = [2032r,2064r:0)  0@2032r
%vreg78 = [2048r,2064r:0)  0@2048r
%vreg79 = [2064r,2080r:0)  0@2064r
%vreg80 = [2080r,2112r:0)  0@2080r
%vreg81 = [2096r,2112r:0)  0@2096r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function AssignFunction3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %AssignFunction3.entry
16B		%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
48B		SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
64B		%vreg2<def> = LW %vreg1, 0; mem:LD4[%4](align=16) GR32Bit:%vreg2,%vreg1
80B		BEQ <BB#2>, %vreg2, %zero; GR32Bit:%vreg2
96B		JAL <BB#1>
	    Successors according to CFG: BB#1(20) BB#2(12)

112B	BB#1: derived from LLVM BB %AssignFunction3.if.then
	    Predecessors according to CFG: BB#0
128B		%vreg3<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg3
144B		%vreg4<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg4
160B		%vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
176B		%vreg6<def> = LW %vreg5, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg6,%vreg5
192B		%vreg7<def> = ORI %vreg6, 1; GR32Bit:%vreg7,%vreg6
208B		SW %vreg7, %vreg5, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg7,%vreg5
	    Successors according to CFG: BB#2

224B	BB#2: derived from LLVM BB %AssignFunction3.if.end
	    Predecessors according to CFG: BB#0 BB#1
240B		%vreg8<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg8
256B		%vreg9<def> = LW %vreg8, 0; mem:LD4[%2] GR32Bit:%vreg9,%vreg8
272B		%vreg10<def> = LW %vreg9, 4; mem:LD4[%10] GR32Bit:%vreg10,%vreg9
288B		BEQ <BB#4>, %vreg10, %zero; GR32Bit:%vreg10
304B		JAL <BB#3>
	    Successors according to CFG: BB#3(20) BB#4(12)

320B	BB#3: derived from LLVM BB %AssignFunction3.if.then3
	    Predecessors according to CFG: BB#2
336B		%vreg11<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg11
352B		%vreg12<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg12
368B		%vreg13<def> = ADD %vreg12, %vreg11; GR32Bit:%vreg13,%vreg12,%vreg11
384B		%vreg14<def> = LW %vreg13, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg14,%vreg13
400B		%vreg15<def> = ORI %vreg14, 2; GR32Bit:%vreg15,%vreg14
416B		SW %vreg15, %vreg13, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg15,%vreg13
	    Successors according to CFG: BB#4

432B	BB#4: derived from LLVM BB %AssignFunction3.if.end5
	    Predecessors according to CFG: BB#2 BB#3
448B		%vreg16<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg16
464B		%vreg17<def> = LW %vreg16, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg16
480B		%vreg18<def> = LW %vreg17, 8; mem:LD4[%16] GR32Bit:%vreg18,%vreg17
496B		%vreg19<def> = ADDI %zero, 250; GR32Bit:%vreg19
512B		BGT <BB#6>, %vreg18, %vreg19; GR32Bit:%vreg18,%vreg19
528B		JAL <BB#5>
	    Successors according to CFG: BB#6(16) BB#5(16)

544B	BB#5: derived from LLVM BB %AssignFunction3.lor.lhs.false
	    Predecessors according to CFG: BB#4
560B		%vreg20<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg20
576B		%vreg21<def> = LW %vreg20, 0; mem:LD4[%2] GR32Bit:%vreg21,%vreg20
592B		%vreg22<def> = LW %vreg21, 12; mem:LD4[%20] GR32Bit:%vreg22,%vreg21
608B		%vreg23<def> = ADDI %zero, 251; GR32Bit:%vreg23
624B		BLT <BB#7>, %vreg22, %vreg23; GR32Bit:%vreg22,%vreg23
640B		JAL <BB#6>
	    Successors according to CFG: BB#6(16) BB#7(16)

656B	BB#6: derived from LLVM BB %AssignFunction3.if.then9
	    Predecessors according to CFG: BB#4 BB#5
672B		%vreg24<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg24
688B		%vreg25<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg25
704B		%vreg26<def> = ADD %vreg25, %vreg24; GR32Bit:%vreg26,%vreg25,%vreg24
720B		%vreg27<def> = LW %vreg26, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg27,%vreg26
736B		%vreg28<def> = ORI %vreg27, 4; GR32Bit:%vreg28,%vreg27
752B		SW %vreg28, %vreg26, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg28,%vreg26
	    Successors according to CFG: BB#7

768B	BB#7: derived from LLVM BB %AssignFunction3.if.end11
	    Predecessors according to CFG: BB#5 BB#6
784B		%vreg29<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg29
800B		%vreg30<def> = LW %vreg29, 0; mem:LD4[%2] GR32Bit:%vreg30,%vreg29
816B		%vreg31<def> = LW %vreg30, 16; mem:LD4[%26] GR32Bit:%vreg31,%vreg30
832B		BEQ <BB#9>, %vreg31, %zero; GR32Bit:%vreg31
848B		JAL <BB#8>
	    Successors according to CFG: BB#8(20) BB#9(12)

864B	BB#8: derived from LLVM BB %AssignFunction3.if.then14
	    Predecessors according to CFG: BB#7
880B		%vreg32<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg32
896B		%vreg33<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg33
912B		%vreg34<def> = ADD %vreg33, %vreg32; GR32Bit:%vreg34,%vreg33,%vreg32
928B		%vreg35<def> = LW %vreg34, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg35,%vreg34
944B		%vreg36<def> = ORI %vreg35, 16; GR32Bit:%vreg36,%vreg35
960B		SW %vreg36, %vreg34, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg36,%vreg34
	    Successors according to CFG: BB#9

976B	BB#9: derived from LLVM BB %AssignFunction3.if.end16
	    Predecessors according to CFG: BB#7 BB#8
992B		%vreg37<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg37
1008B		%vreg38<def> = LW %vreg37, 0; mem:LD4[%2] GR32Bit:%vreg38,%vreg37
1024B		%vreg39<def> = LW %vreg38, 20; mem:LD4[%32] GR32Bit:%vreg39,%vreg38
1040B		BEQ <BB#11>, %vreg39, %zero; GR32Bit:%vreg39
1056B		JAL <BB#10>
	    Successors according to CFG: BB#10(20) BB#11(12)

1072B	BB#10: derived from LLVM BB %AssignFunction3.if.then19
	    Predecessors according to CFG: BB#9
1088B		%vreg40<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg40
1104B		%vreg41<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg41
1120B		%vreg42<def> = ADD %vreg41, %vreg40; GR32Bit:%vreg42,%vreg41,%vreg40
1136B		%vreg43<def> = LW %vreg42, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg43,%vreg42
1152B		%vreg44<def> = ORI %vreg43, 32; GR32Bit:%vreg44,%vreg43
1168B		SW %vreg44, %vreg42, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg44,%vreg42
	    Successors according to CFG: BB#11

1184B	BB#11: derived from LLVM BB %AssignFunction3.if.end21
	    Predecessors according to CFG: BB#9 BB#10
1200B		%vreg45<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg45
1216B		%vreg46<def> = LW %vreg45, 0; mem:LD4[%2] GR32Bit:%vreg46,%vreg45
1232B		%vreg47<def> = LW %vreg46, 24; mem:LD4[%38] GR32Bit:%vreg47,%vreg46
1248B		BEQ <BB#13>, %vreg47, %zero; GR32Bit:%vreg47
1264B		JAL <BB#12>
	    Successors according to CFG: BB#12(20) BB#13(12)

1280B	BB#12: derived from LLVM BB %AssignFunction3.if.then24
	    Predecessors according to CFG: BB#11
1296B		%vreg48<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg48
1312B		%vreg49<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg49
1328B		%vreg50<def> = ADD %vreg49, %vreg48; GR32Bit:%vreg50,%vreg49,%vreg48
1344B		%vreg51<def> = LW %vreg50, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg51,%vreg50
1360B		%vreg52<def> = ORI %vreg51, 64; GR32Bit:%vreg52,%vreg51
1376B		SW %vreg52, %vreg50, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg52,%vreg50
	    Successors according to CFG: BB#13

1392B	BB#13: derived from LLVM BB %AssignFunction3.if.end26
	    Predecessors according to CFG: BB#11 BB#12
1408B		%vreg53<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg53
1424B		%vreg54<def> = LW %vreg53, 0; mem:LD4[%2] GR32Bit:%vreg54,%vreg53
1440B		%vreg55<def> = LW %vreg54, 28; mem:LD4[%44] GR32Bit:%vreg55,%vreg54
1456B		BEQ <BB#15>, %vreg55, %zero; GR32Bit:%vreg55
1472B		JAL <BB#14>
	    Successors according to CFG: BB#14(20) BB#15(12)

1488B	BB#14: derived from LLVM BB %AssignFunction3.if.then29
	    Predecessors according to CFG: BB#13
1504B		%vreg56<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg56
1520B		%vreg57<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg57
1536B		%vreg58<def> = ADD %vreg57, %vreg56; GR32Bit:%vreg58,%vreg57,%vreg56
1552B		%vreg59<def> = LW %vreg58, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg59,%vreg58
1568B		%vreg60<def> = ORI %vreg59, 128; GR32Bit:%vreg60,%vreg59
1584B		SW %vreg60, %vreg58, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg60,%vreg58
	    Successors according to CFG: BB#15

1600B	BB#15: derived from LLVM BB %AssignFunction3.if.end31
	    Predecessors according to CFG: BB#13 BB#14
1616B		%vreg61<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg61
1632B		%vreg62<def> = LW %vreg61, 0; mem:LD4[%2] GR32Bit:%vreg62,%vreg61
1648B		%vreg63<def> = LW %vreg62, 32; mem:LD4[%50] GR32Bit:%vreg63,%vreg62
1664B		BEQ <BB#17>, %vreg63, %zero; GR32Bit:%vreg63
1680B		JAL <BB#16>
	    Successors according to CFG: BB#16(20) BB#17(12)

1696B	BB#16: derived from LLVM BB %AssignFunction3.if.then34
	    Predecessors according to CFG: BB#15
1712B		%vreg64<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg64
1728B		%vreg65<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg65
1744B		%vreg66<def> = ADD %vreg65, %vreg64; GR32Bit:%vreg66,%vreg65,%vreg64
1760B		%vreg67<def> = LW %vreg66, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg67,%vreg66
1776B		%vreg68<def> = ORI %vreg67, 256; GR32Bit:%vreg68,%vreg67
1792B		SW %vreg68, %vreg66, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg68,%vreg66
	    Successors according to CFG: BB#17

1808B	BB#17: derived from LLVM BB %AssignFunction3.if.end36
	    Predecessors according to CFG: BB#15 BB#16
1824B		%vreg69<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg69
1840B		%vreg70<def> = LW %vreg69, 0; mem:LD4[%2] GR32Bit:%vreg70,%vreg69
1856B		%vreg71<def> = LW %vreg70, 36; mem:LD4[%56] GR32Bit:%vreg71,%vreg70
1872B		BEQ <BB#19>, %vreg71, %zero; GR32Bit:%vreg71
1888B		JAL <BB#18>
	    Successors according to CFG: BB#18(20) BB#19(12)

1904B	BB#18: derived from LLVM BB %AssignFunction3.if.then39
	    Predecessors according to CFG: BB#17
1920B		%vreg72<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg72
1936B		%vreg73<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg73
1952B		%vreg74<def> = ADD %vreg73, %vreg72; GR32Bit:%vreg74,%vreg73,%vreg72
1968B		%vreg75<def> = LW %vreg74, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg75,%vreg74
1984B		%vreg76<def> = ORI %vreg75, 512; GR32Bit:%vreg76,%vreg75
2000B		SW %vreg76, %vreg74, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg76,%vreg74
	    Successors according to CFG: BB#19

2016B	BB#19: derived from LLVM BB %AssignFunction3.return
	    Predecessors according to CFG: BB#17 BB#18
2032B		%vreg77<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg77
2048B		%vreg78<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg78
2064B		%vreg79<def> = ADD %vreg78, %vreg77; GR32Bit:%vreg79,%vreg78,%vreg77
2080B		%vreg80<def> = LW %vreg79, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg80,%vreg79
2096B		%vreg81<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg81
2112B		SW %vreg80, %vreg81, 0; mem:ST4[%1] GR32Bit:%vreg80,%vreg81

# End machine code for function AssignFunction3.

********** SIMPLE REGISTER COALESCING **********
********** Function: AssignFunction3
********** JOINING INTERVALS ***********
AssignFunction3.if.end:
AssignFunction3.if.end5:
AssignFunction3.if.end11:
AssignFunction3.if.end16:
AssignFunction3.if.end21:
AssignFunction3.if.end26:
AssignFunction3.if.end31:
AssignFunction3.if.end36:
AssignFunction3.lor.lhs.false:
AssignFunction3.if.then9:
AssignFunction3.entry:
AssignFunction3.if.then:
AssignFunction3.if.then3:
AssignFunction3.if.then14:
AssignFunction3.if.then19:
AssignFunction3.if.then24:
AssignFunction3.if.then29:
AssignFunction3.if.then34:
AssignFunction3.if.then39:
AssignFunction3.return:
Trying to inflate 0 regs.
********** INTERVALS **********
%vreg0 = [16r,48r:0)  0@16r
%vreg1 = [32r,64r:0)  0@32r
%vreg2 = [64r,80r:0)  0@64r
%vreg3 = [128r,160r:0)  0@128r
%vreg4 = [144r,160r:0)  0@144r
%vreg5 = [160r,208r:0)  0@160r
%vreg6 = [176r,192r:0)  0@176r
%vreg7 = [192r,208r:0)  0@192r
%vreg8 = [240r,256r:0)  0@240r
%vreg9 = [256r,272r:0)  0@256r
%vreg10 = [272r,288r:0)  0@272r
%vreg11 = [336r,368r:0)  0@336r
%vreg12 = [352r,368r:0)  0@352r
%vreg13 = [368r,416r:0)  0@368r
%vreg14 = [384r,400r:0)  0@384r
%vreg15 = [400r,416r:0)  0@400r
%vreg16 = [448r,464r:0)  0@448r
%vreg17 = [464r,480r:0)  0@464r
%vreg18 = [480r,512r:0)  0@480r
%vreg19 = [496r,512r:0)  0@496r
%vreg20 = [560r,576r:0)  0@560r
%vreg21 = [576r,592r:0)  0@576r
%vreg22 = [592r,624r:0)  0@592r
%vreg23 = [608r,624r:0)  0@608r
%vreg24 = [672r,704r:0)  0@672r
%vreg25 = [688r,704r:0)  0@688r
%vreg26 = [704r,752r:0)  0@704r
%vreg27 = [720r,736r:0)  0@720r
%vreg28 = [736r,752r:0)  0@736r
%vreg29 = [784r,800r:0)  0@784r
%vreg30 = [800r,816r:0)  0@800r
%vreg31 = [816r,832r:0)  0@816r
%vreg32 = [880r,912r:0)  0@880r
%vreg33 = [896r,912r:0)  0@896r
%vreg34 = [912r,960r:0)  0@912r
%vreg35 = [928r,944r:0)  0@928r
%vreg36 = [944r,960r:0)  0@944r
%vreg37 = [992r,1008r:0)  0@992r
%vreg38 = [1008r,1024r:0)  0@1008r
%vreg39 = [1024r,1040r:0)  0@1024r
%vreg40 = [1088r,1120r:0)  0@1088r
%vreg41 = [1104r,1120r:0)  0@1104r
%vreg42 = [1120r,1168r:0)  0@1120r
%vreg43 = [1136r,1152r:0)  0@1136r
%vreg44 = [1152r,1168r:0)  0@1152r
%vreg45 = [1200r,1216r:0)  0@1200r
%vreg46 = [1216r,1232r:0)  0@1216r
%vreg47 = [1232r,1248r:0)  0@1232r
%vreg48 = [1296r,1328r:0)  0@1296r
%vreg49 = [1312r,1328r:0)  0@1312r
%vreg50 = [1328r,1376r:0)  0@1328r
%vreg51 = [1344r,1360r:0)  0@1344r
%vreg52 = [1360r,1376r:0)  0@1360r
%vreg53 = [1408r,1424r:0)  0@1408r
%vreg54 = [1424r,1440r:0)  0@1424r
%vreg55 = [1440r,1456r:0)  0@1440r
%vreg56 = [1504r,1536r:0)  0@1504r
%vreg57 = [1520r,1536r:0)  0@1520r
%vreg58 = [1536r,1584r:0)  0@1536r
%vreg59 = [1552r,1568r:0)  0@1552r
%vreg60 = [1568r,1584r:0)  0@1568r
%vreg61 = [1616r,1632r:0)  0@1616r
%vreg62 = [1632r,1648r:0)  0@1632r
%vreg63 = [1648r,1664r:0)  0@1648r
%vreg64 = [1712r,1744r:0)  0@1712r
%vreg65 = [1728r,1744r:0)  0@1728r
%vreg66 = [1744r,1792r:0)  0@1744r
%vreg67 = [1760r,1776r:0)  0@1760r
%vreg68 = [1776r,1792r:0)  0@1776r
%vreg69 = [1824r,1840r:0)  0@1824r
%vreg70 = [1840r,1856r:0)  0@1840r
%vreg71 = [1856r,1872r:0)  0@1856r
%vreg72 = [1920r,1952r:0)  0@1920r
%vreg73 = [1936r,1952r:0)  0@1936r
%vreg74 = [1952r,2000r:0)  0@1952r
%vreg75 = [1968r,1984r:0)  0@1968r
%vreg76 = [1984r,2000r:0)  0@1984r
%vreg77 = [2032r,2064r:0)  0@2032r
%vreg78 = [2048r,2064r:0)  0@2048r
%vreg79 = [2064r,2080r:0)  0@2064r
%vreg80 = [2080r,2112r:0)  0@2080r
%vreg81 = [2096r,2112r:0)  0@2096r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function AssignFunction3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %AssignFunction3.entry
16B		%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
48B		SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
64B		%vreg2<def> = LW %vreg1, 0; mem:LD4[%4](align=16) GR32Bit:%vreg2,%vreg1
80B		BEQ <BB#2>, %vreg2, %zero; GR32Bit:%vreg2
96B		JAL <BB#1>
	    Successors according to CFG: BB#1(20) BB#2(12)

112B	BB#1: derived from LLVM BB %AssignFunction3.if.then
	    Predecessors according to CFG: BB#0
128B		%vreg3<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg3
144B		%vreg4<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg4
160B		%vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
176B		%vreg6<def> = LW %vreg5, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg6,%vreg5
192B		%vreg7<def> = ORI %vreg6, 1; GR32Bit:%vreg7,%vreg6
208B		SW %vreg7, %vreg5, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg7,%vreg5
	    Successors according to CFG: BB#2

224B	BB#2: derived from LLVM BB %AssignFunction3.if.end
	    Predecessors according to CFG: BB#0 BB#1
240B		%vreg8<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg8
256B		%vreg9<def> = LW %vreg8, 0; mem:LD4[%2] GR32Bit:%vreg9,%vreg8
272B		%vreg10<def> = LW %vreg9, 4; mem:LD4[%10] GR32Bit:%vreg10,%vreg9
288B		BEQ <BB#4>, %vreg10, %zero; GR32Bit:%vreg10
304B		JAL <BB#3>
	    Successors according to CFG: BB#3(20) BB#4(12)

320B	BB#3: derived from LLVM BB %AssignFunction3.if.then3
	    Predecessors according to CFG: BB#2
336B		%vreg11<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg11
352B		%vreg12<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg12
368B		%vreg13<def> = ADD %vreg12, %vreg11; GR32Bit:%vreg13,%vreg12,%vreg11
384B		%vreg14<def> = LW %vreg13, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg14,%vreg13
400B		%vreg15<def> = ORI %vreg14, 2; GR32Bit:%vreg15,%vreg14
416B		SW %vreg15, %vreg13, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg15,%vreg13
	    Successors according to CFG: BB#4

432B	BB#4: derived from LLVM BB %AssignFunction3.if.end5
	    Predecessors according to CFG: BB#2 BB#3
448B		%vreg16<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg16
464B		%vreg17<def> = LW %vreg16, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg16
480B		%vreg18<def> = LW %vreg17, 8; mem:LD4[%16] GR32Bit:%vreg18,%vreg17
496B		%vreg19<def> = ADDI %zero, 250; GR32Bit:%vreg19
512B		BGT <BB#6>, %vreg18, %vreg19; GR32Bit:%vreg18,%vreg19
528B		JAL <BB#5>
	    Successors according to CFG: BB#6(16) BB#5(16)

544B	BB#5: derived from LLVM BB %AssignFunction3.lor.lhs.false
	    Predecessors according to CFG: BB#4
560B		%vreg20<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg20
576B		%vreg21<def> = LW %vreg20, 0; mem:LD4[%2] GR32Bit:%vreg21,%vreg20
592B		%vreg22<def> = LW %vreg21, 12; mem:LD4[%20] GR32Bit:%vreg22,%vreg21
608B		%vreg23<def> = ADDI %zero, 251; GR32Bit:%vreg23
624B		BLT <BB#7>, %vreg22, %vreg23; GR32Bit:%vreg22,%vreg23
640B		JAL <BB#6>
	    Successors according to CFG: BB#6(16) BB#7(16)

656B	BB#6: derived from LLVM BB %AssignFunction3.if.then9
	    Predecessors according to CFG: BB#4 BB#5
672B		%vreg24<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg24
688B		%vreg25<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg25
704B		%vreg26<def> = ADD %vreg25, %vreg24; GR32Bit:%vreg26,%vreg25,%vreg24
720B		%vreg27<def> = LW %vreg26, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg27,%vreg26
736B		%vreg28<def> = ORI %vreg27, 4; GR32Bit:%vreg28,%vreg27
752B		SW %vreg28, %vreg26, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg28,%vreg26
	    Successors according to CFG: BB#7

768B	BB#7: derived from LLVM BB %AssignFunction3.if.end11
	    Predecessors according to CFG: BB#5 BB#6
784B		%vreg29<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg29
800B		%vreg30<def> = LW %vreg29, 0; mem:LD4[%2] GR32Bit:%vreg30,%vreg29
816B		%vreg31<def> = LW %vreg30, 16; mem:LD4[%26] GR32Bit:%vreg31,%vreg30
832B		BEQ <BB#9>, %vreg31, %zero; GR32Bit:%vreg31
848B		JAL <BB#8>
	    Successors according to CFG: BB#8(20) BB#9(12)

864B	BB#8: derived from LLVM BB %AssignFunction3.if.then14
	    Predecessors according to CFG: BB#7
880B		%vreg32<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg32
896B		%vreg33<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg33
912B		%vreg34<def> = ADD %vreg33, %vreg32; GR32Bit:%vreg34,%vreg33,%vreg32
928B		%vreg35<def> = LW %vreg34, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg35,%vreg34
944B		%vreg36<def> = ORI %vreg35, 16; GR32Bit:%vreg36,%vreg35
960B		SW %vreg36, %vreg34, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg36,%vreg34
	    Successors according to CFG: BB#9

976B	BB#9: derived from LLVM BB %AssignFunction3.if.end16
	    Predecessors according to CFG: BB#7 BB#8
992B		%vreg37<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg37
1008B		%vreg38<def> = LW %vreg37, 0; mem:LD4[%2] GR32Bit:%vreg38,%vreg37
1024B		%vreg39<def> = LW %vreg38, 20; mem:LD4[%32] GR32Bit:%vreg39,%vreg38
1040B		BEQ <BB#11>, %vreg39, %zero; GR32Bit:%vreg39
1056B		JAL <BB#10>
	    Successors according to CFG: BB#10(20) BB#11(12)

1072B	BB#10: derived from LLVM BB %AssignFunction3.if.then19
	    Predecessors according to CFG: BB#9
1088B		%vreg40<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg40
1104B		%vreg41<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg41
1120B		%vreg42<def> = ADD %vreg41, %vreg40; GR32Bit:%vreg42,%vreg41,%vreg40
1136B		%vreg43<def> = LW %vreg42, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg43,%vreg42
1152B		%vreg44<def> = ORI %vreg43, 32; GR32Bit:%vreg44,%vreg43
1168B		SW %vreg44, %vreg42, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg44,%vreg42
	    Successors according to CFG: BB#11

1184B	BB#11: derived from LLVM BB %AssignFunction3.if.end21
	    Predecessors according to CFG: BB#9 BB#10
1200B		%vreg45<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg45
1216B		%vreg46<def> = LW %vreg45, 0; mem:LD4[%2] GR32Bit:%vreg46,%vreg45
1232B		%vreg47<def> = LW %vreg46, 24; mem:LD4[%38] GR32Bit:%vreg47,%vreg46
1248B		BEQ <BB#13>, %vreg47, %zero; GR32Bit:%vreg47
1264B		JAL <BB#12>
	    Successors according to CFG: BB#12(20) BB#13(12)

1280B	BB#12: derived from LLVM BB %AssignFunction3.if.then24
	    Predecessors according to CFG: BB#11
1296B		%vreg48<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg48
1312B		%vreg49<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg49
1328B		%vreg50<def> = ADD %vreg49, %vreg48; GR32Bit:%vreg50,%vreg49,%vreg48
1344B		%vreg51<def> = LW %vreg50, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg51,%vreg50
1360B		%vreg52<def> = ORI %vreg51, 64; GR32Bit:%vreg52,%vreg51
1376B		SW %vreg52, %vreg50, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg52,%vreg50
	    Successors according to CFG: BB#13

1392B	BB#13: derived from LLVM BB %AssignFunction3.if.end26
	    Predecessors according to CFG: BB#11 BB#12
1408B		%vreg53<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg53
1424B		%vreg54<def> = LW %vreg53, 0; mem:LD4[%2] GR32Bit:%vreg54,%vreg53
1440B		%vreg55<def> = LW %vreg54, 28; mem:LD4[%44] GR32Bit:%vreg55,%vreg54
1456B		BEQ <BB#15>, %vreg55, %zero; GR32Bit:%vreg55
1472B		JAL <BB#14>
	    Successors according to CFG: BB#14(20) BB#15(12)

1488B	BB#14: derived from LLVM BB %AssignFunction3.if.then29
	    Predecessors according to CFG: BB#13
1504B		%vreg56<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg56
1520B		%vreg57<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg57
1536B		%vreg58<def> = ADD %vreg57, %vreg56; GR32Bit:%vreg58,%vreg57,%vreg56
1552B		%vreg59<def> = LW %vreg58, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg59,%vreg58
1568B		%vreg60<def> = ORI %vreg59, 128; GR32Bit:%vreg60,%vreg59
1584B		SW %vreg60, %vreg58, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg60,%vreg58
	    Successors according to CFG: BB#15

1600B	BB#15: derived from LLVM BB %AssignFunction3.if.end31
	    Predecessors according to CFG: BB#13 BB#14
1616B		%vreg61<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg61
1632B		%vreg62<def> = LW %vreg61, 0; mem:LD4[%2] GR32Bit:%vreg62,%vreg61
1648B		%vreg63<def> = LW %vreg62, 32; mem:LD4[%50] GR32Bit:%vreg63,%vreg62
1664B		BEQ <BB#17>, %vreg63, %zero; GR32Bit:%vreg63
1680B		JAL <BB#16>
	    Successors according to CFG: BB#16(20) BB#17(12)

1696B	BB#16: derived from LLVM BB %AssignFunction3.if.then34
	    Predecessors according to CFG: BB#15
1712B		%vreg64<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg64
1728B		%vreg65<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg65
1744B		%vreg66<def> = ADD %vreg65, %vreg64; GR32Bit:%vreg66,%vreg65,%vreg64
1760B		%vreg67<def> = LW %vreg66, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg67,%vreg66
1776B		%vreg68<def> = ORI %vreg67, 256; GR32Bit:%vreg68,%vreg67
1792B		SW %vreg68, %vreg66, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg68,%vreg66
	    Successors according to CFG: BB#17

1808B	BB#17: derived from LLVM BB %AssignFunction3.if.end36
	    Predecessors according to CFG: BB#15 BB#16
1824B		%vreg69<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg69
1840B		%vreg70<def> = LW %vreg69, 0; mem:LD4[%2] GR32Bit:%vreg70,%vreg69
1856B		%vreg71<def> = LW %vreg70, 36; mem:LD4[%56] GR32Bit:%vreg71,%vreg70
1872B		BEQ <BB#19>, %vreg71, %zero; GR32Bit:%vreg71
1888B		JAL <BB#18>
	    Successors according to CFG: BB#18(20) BB#19(12)

1904B	BB#18: derived from LLVM BB %AssignFunction3.if.then39
	    Predecessors according to CFG: BB#17
1920B		%vreg72<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg72
1936B		%vreg73<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg73
1952B		%vreg74<def> = ADD %vreg73, %vreg72; GR32Bit:%vreg74,%vreg73,%vreg72
1968B		%vreg75<def> = LW %vreg74, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg75,%vreg74
1984B		%vreg76<def> = ORI %vreg75, 512; GR32Bit:%vreg76,%vreg75
2000B		SW %vreg76, %vreg74, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg76,%vreg74
	    Successors according to CFG: BB#19

2016B	BB#19: derived from LLVM BB %AssignFunction3.return
	    Predecessors according to CFG: BB#17 BB#18
2032B		%vreg77<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg77
2048B		%vreg78<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg78
2064B		%vreg79<def> = ADD %vreg78, %vreg77; GR32Bit:%vreg79,%vreg78,%vreg77
2080B		%vreg80<def> = LW %vreg79, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg80,%vreg79
2096B		%vreg81<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg81
2112B		SW %vreg80, %vreg81, 0; mem:ST4[%1] GR32Bit:%vreg80,%vreg81

# End machine code for function AssignFunction3.

Before MISched:
# Machine code for function AssignFunction3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %AssignFunction3.entry
	%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
	%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
	SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
	%vreg2<def> = LW %vreg1, 0; mem:LD4[%4](align=16) GR32Bit:%vreg2,%vreg1
	BEQ <BB#2>, %vreg2, %zero; GR32Bit:%vreg2
	JAL <BB#1>
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %AssignFunction3.if.then
    Predecessors according to CFG: BB#0
	%vreg3<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg3
	%vreg4<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg4
	%vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
	%vreg6<def> = LW %vreg5, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg6,%vreg5
	%vreg7<def> = ORI %vreg6, 1; GR32Bit:%vreg7,%vreg6
	SW %vreg7, %vreg5, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg7,%vreg5
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %AssignFunction3.if.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg8<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg8
	%vreg9<def> = LW %vreg8, 0; mem:LD4[%2] GR32Bit:%vreg9,%vreg8
	%vreg10<def> = LW %vreg9, 4; mem:LD4[%10] GR32Bit:%vreg10,%vreg9
	BEQ <BB#4>, %vreg10, %zero; GR32Bit:%vreg10
	JAL <BB#3>
    Successors according to CFG: BB#3(20) BB#4(12)

BB#3: derived from LLVM BB %AssignFunction3.if.then3
    Predecessors according to CFG: BB#2
	%vreg11<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg11
	%vreg12<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg12
	%vreg13<def> = ADD %vreg12, %vreg11; GR32Bit:%vreg13,%vreg12,%vreg11
	%vreg14<def> = LW %vreg13, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg14,%vreg13
	%vreg15<def> = ORI %vreg14, 2; GR32Bit:%vreg15,%vreg14
	SW %vreg15, %vreg13, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg15,%vreg13
    Successors according to CFG: BB#4

BB#4: derived from LLVM BB %AssignFunction3.if.end5
    Predecessors according to CFG: BB#2 BB#3
	%vreg16<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg16
	%vreg17<def> = LW %vreg16, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg16
	%vreg18<def> = LW %vreg17, 8; mem:LD4[%16] GR32Bit:%vreg18,%vreg17
	%vreg19<def> = ADDI %zero, 250; GR32Bit:%vreg19
	BGT <BB#6>, %vreg18, %vreg19; GR32Bit:%vreg18,%vreg19
	JAL <BB#5>
    Successors according to CFG: BB#6(16) BB#5(16)

BB#5: derived from LLVM BB %AssignFunction3.lor.lhs.false
    Predecessors according to CFG: BB#4
	%vreg20<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg20
	%vreg21<def> = LW %vreg20, 0; mem:LD4[%2] GR32Bit:%vreg21,%vreg20
	%vreg22<def> = LW %vreg21, 12; mem:LD4[%20] GR32Bit:%vreg22,%vreg21
	%vreg23<def> = ADDI %zero, 251; GR32Bit:%vreg23
	BLT <BB#7>, %vreg22, %vreg23; GR32Bit:%vreg22,%vreg23
	JAL <BB#6>
    Successors according to CFG: BB#6(16) BB#7(16)

BB#6: derived from LLVM BB %AssignFunction3.if.then9
    Predecessors according to CFG: BB#4 BB#5
	%vreg24<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg24
	%vreg25<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg25
	%vreg26<def> = ADD %vreg25, %vreg24; GR32Bit:%vreg26,%vreg25,%vreg24
	%vreg27<def> = LW %vreg26, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg27,%vreg26
	%vreg28<def> = ORI %vreg27, 4; GR32Bit:%vreg28,%vreg27
	SW %vreg28, %vreg26, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg28,%vreg26
    Successors according to CFG: BB#7

BB#7: derived from LLVM BB %AssignFunction3.if.end11
    Predecessors according to CFG: BB#5 BB#6
	%vreg29<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg29
	%vreg30<def> = LW %vreg29, 0; mem:LD4[%2] GR32Bit:%vreg30,%vreg29
	%vreg31<def> = LW %vreg30, 16; mem:LD4[%26] GR32Bit:%vreg31,%vreg30
	BEQ <BB#9>, %vreg31, %zero; GR32Bit:%vreg31
	JAL <BB#8>
    Successors according to CFG: BB#8(20) BB#9(12)

BB#8: derived from LLVM BB %AssignFunction3.if.then14
    Predecessors according to CFG: BB#7
	%vreg32<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg32
	%vreg33<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg33
	%vreg34<def> = ADD %vreg33, %vreg32; GR32Bit:%vreg34,%vreg33,%vreg32
	%vreg35<def> = LW %vreg34, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg35,%vreg34
	%vreg36<def> = ORI %vreg35, 16; GR32Bit:%vreg36,%vreg35
	SW %vreg36, %vreg34, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg36,%vreg34
    Successors according to CFG: BB#9

BB#9: derived from LLVM BB %AssignFunction3.if.end16
    Predecessors according to CFG: BB#7 BB#8
	%vreg37<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg37
	%vreg38<def> = LW %vreg37, 0; mem:LD4[%2] GR32Bit:%vreg38,%vreg37
	%vreg39<def> = LW %vreg38, 20; mem:LD4[%32] GR32Bit:%vreg39,%vreg38
	BEQ <BB#11>, %vreg39, %zero; GR32Bit:%vreg39
	JAL <BB#10>
    Successors according to CFG: BB#10(20) BB#11(12)

BB#10: derived from LLVM BB %AssignFunction3.if.then19
    Predecessors according to CFG: BB#9
	%vreg40<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg40
	%vreg41<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg41
	%vreg42<def> = ADD %vreg41, %vreg40; GR32Bit:%vreg42,%vreg41,%vreg40
	%vreg43<def> = LW %vreg42, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg43,%vreg42
	%vreg44<def> = ORI %vreg43, 32; GR32Bit:%vreg44,%vreg43
	SW %vreg44, %vreg42, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg44,%vreg42
    Successors according to CFG: BB#11

BB#11: derived from LLVM BB %AssignFunction3.if.end21
    Predecessors according to CFG: BB#9 BB#10
	%vreg45<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg45
	%vreg46<def> = LW %vreg45, 0; mem:LD4[%2] GR32Bit:%vreg46,%vreg45
	%vreg47<def> = LW %vreg46, 24; mem:LD4[%38] GR32Bit:%vreg47,%vreg46
	BEQ <BB#13>, %vreg47, %zero; GR32Bit:%vreg47
	JAL <BB#12>
    Successors according to CFG: BB#12(20) BB#13(12)

BB#12: derived from LLVM BB %AssignFunction3.if.then24
    Predecessors according to CFG: BB#11
	%vreg48<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg48
	%vreg49<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg49
	%vreg50<def> = ADD %vreg49, %vreg48; GR32Bit:%vreg50,%vreg49,%vreg48
	%vreg51<def> = LW %vreg50, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg51,%vreg50
	%vreg52<def> = ORI %vreg51, 64; GR32Bit:%vreg52,%vreg51
	SW %vreg52, %vreg50, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg52,%vreg50
    Successors according to CFG: BB#13

BB#13: derived from LLVM BB %AssignFunction3.if.end26
    Predecessors according to CFG: BB#11 BB#12
	%vreg53<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg53
	%vreg54<def> = LW %vreg53, 0; mem:LD4[%2] GR32Bit:%vreg54,%vreg53
	%vreg55<def> = LW %vreg54, 28; mem:LD4[%44] GR32Bit:%vreg55,%vreg54
	BEQ <BB#15>, %vreg55, %zero; GR32Bit:%vreg55
	JAL <BB#14>
    Successors according to CFG: BB#14(20) BB#15(12)

BB#14: derived from LLVM BB %AssignFunction3.if.then29
    Predecessors according to CFG: BB#13
	%vreg56<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg56
	%vreg57<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg57
	%vreg58<def> = ADD %vreg57, %vreg56; GR32Bit:%vreg58,%vreg57,%vreg56
	%vreg59<def> = LW %vreg58, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg59,%vreg58
	%vreg60<def> = ORI %vreg59, 128; GR32Bit:%vreg60,%vreg59
	SW %vreg60, %vreg58, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg60,%vreg58
    Successors according to CFG: BB#15

BB#15: derived from LLVM BB %AssignFunction3.if.end31
    Predecessors according to CFG: BB#13 BB#14
	%vreg61<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg61
	%vreg62<def> = LW %vreg61, 0; mem:LD4[%2] GR32Bit:%vreg62,%vreg61
	%vreg63<def> = LW %vreg62, 32; mem:LD4[%50] GR32Bit:%vreg63,%vreg62
	BEQ <BB#17>, %vreg63, %zero; GR32Bit:%vreg63
	JAL <BB#16>
    Successors according to CFG: BB#16(20) BB#17(12)

BB#16: derived from LLVM BB %AssignFunction3.if.then34
    Predecessors according to CFG: BB#15
	%vreg64<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg64
	%vreg65<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg65
	%vreg66<def> = ADD %vreg65, %vreg64; GR32Bit:%vreg66,%vreg65,%vreg64
	%vreg67<def> = LW %vreg66, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg67,%vreg66
	%vreg68<def> = ORI %vreg67, 256; GR32Bit:%vreg68,%vreg67
	SW %vreg68, %vreg66, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg68,%vreg66
    Successors according to CFG: BB#17

BB#17: derived from LLVM BB %AssignFunction3.if.end36
    Predecessors according to CFG: BB#15 BB#16
	%vreg69<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg69
	%vreg70<def> = LW %vreg69, 0; mem:LD4[%2] GR32Bit:%vreg70,%vreg69
	%vreg71<def> = LW %vreg70, 36; mem:LD4[%56] GR32Bit:%vreg71,%vreg70
	BEQ <BB#19>, %vreg71, %zero; GR32Bit:%vreg71
	JAL <BB#18>
    Successors according to CFG: BB#18(20) BB#19(12)

BB#18: derived from LLVM BB %AssignFunction3.if.then39
    Predecessors according to CFG: BB#17
	%vreg72<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg72
	%vreg73<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg73
	%vreg74<def> = ADD %vreg73, %vreg72; GR32Bit:%vreg74,%vreg73,%vreg72
	%vreg75<def> = LW %vreg74, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg75,%vreg74
	%vreg76<def> = ORI %vreg75, 512; GR32Bit:%vreg76,%vreg75
	SW %vreg76, %vreg74, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg76,%vreg74
    Successors according to CFG: BB#19

BB#19: derived from LLVM BB %AssignFunction3.return
    Predecessors according to CFG: BB#17 BB#18
	%vreg77<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg77
	%vreg78<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg78
	%vreg79<def> = ADD %vreg78, %vreg77; GR32Bit:%vreg79,%vreg78,%vreg77
	%vreg80<def> = LW %vreg79, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg80,%vreg79
	%vreg81<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg81
	SW %vreg80, %vreg81, 0; mem:ST4[%1] GR32Bit:%vreg80,%vreg81

# End machine code for function AssignFunction3.


-------------
Starting new basic block BB#0
********** MI Scheduling **********
AssignFunction3:BB#0 AssignFunction3.entry
  From: JAL <BB#1>
    To: JAL <BB#1>
 Remaining: 5
Max Pressure: Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 0
Excess PSets: 
0 subtrees:
*** Final schedule for BB#0 ***

Partitioning instructions of the region into multiple CEs

*** Renumbered SlotIndexes 108-124 ***

*** Renumbered SlotIndexes 120-152 ***

*** Renumbered SlotIndexes 132-172 ***

*** Renumbered SlotIndexes 144-200 ***

*** Renumbered SlotIndexes 156-220 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
********** MI Scheduling **********
AssignFunction3:BB#0 AssignFunction3.entry
  From: %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
    To: BEQ <BB#2>, %vreg2, %zero; GR32Bit:%vreg2
 Remaining: 0
Max Pressure: GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 2
Excess PSets: 
2 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 1
SU(0):   %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
   val SU(2): Latency=5 Reg=%vreg0

SU(1):   %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
   val SU(3): Latency=5 Reg=%vreg1
   val SU(2): Latency=4 Reg=%vreg1

SU(2):   SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 5
  Height             : 16
  Predecessors:
   val SU(1): Latency=4 Reg=%vreg1
   val SU(0): Latency=5 Reg=%vreg0
  Successors:
   ch  SU(3): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(3):   %vreg2<def> = LW %vreg1, 0; mem:LD4[%4](align=16) GR32Bit:%vreg2,%vreg1
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 6
  Height             : 15
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg1
   ch  SU(2): Latency=1
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg2

SU(0):   %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
   val SU(2): Latency=5 Reg=%vreg0

SU(1):   %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
   val SU(3): Latency=5 Reg=%vreg1
   val SU(2): Latency=4 Reg=%vreg1

SU(2):   SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 5
  Height             : 16
  Predecessors:
   val SU(1): Latency=4 Reg=%vreg1
   val SU(0): Latency=5 Reg=%vreg0
  Successors:
   ch  SU(3): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(3):   %vreg2<def> = LW %vreg1, 0; mem:LD4[%4](align=16) GR32Bit:%vreg2,%vreg1
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 14
  Depth              : 6
  Height             : 15
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg1
   ch  SU(2): Latency=1
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg2

Pick node SU(1)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
handleMove 32B -> 8B: %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
     %vreg1:	[32r,64r:0)  0@32r
        -->	[8r,64r:0)  0@8r
     t5:	EMPTY
        -->	EMPTY
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
Pick node SU(2)  ILP: 3 / 6 = 0.5 Tree: 0 @0
Scheduling SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
Pick node SU(3)  ILP: 1 / 7 = 0.142857 Tree: 1 @0
Scheduling %vreg2<def> = LW %vreg1, 0; mem:LD4[%4](align=16) GR32Bit:%vreg2,%vreg1
*** Final schedule for BB#0 ***
SU(1):   %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
SU(0):   %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
SU(2):   SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
SU(3):   %vreg2<def> = LW %vreg1, 0; mem:LD4[%4](align=16) GR32Bit:%vreg2,%vreg1


*** Renumbered SlotIndexes 4-28 ***

*** Renumbered SlotIndexes 16-56 ***

*** Renumbered SlotIndexes 28-76 ***

*** Renumbered SlotIndexes 40-280 ***

*** Renumbered SlotIndexes 52-300 ***

*** Renumbered SlotIndexes 64-328 ***

*** Renumbered SlotIndexes 76-348 ***

*** Renumbered SlotIndexes 88-376 ***

*** Renumbered SlotIndexes 100-396 ***

*** Renumbered SlotIndexes 112-424 ***

*** Renumbered SlotIndexes 124-444 ***

*** Renumbered SlotIndexes 136-472 ***

*** Renumbered SlotIndexes 148-492 ***

*** Renumbered SlotIndexes 160-520 ***

*** Renumbered SlotIndexes 172-540 ***

*** Renumbered SlotIndexes 184-568 ***

*** Renumbered SlotIndexes 196-588 ***

*** Renumbered SlotIndexes 208-616 ***

*** Renumbered SlotIndexes 220-636 ***

*** Renumbered SlotIndexes 232-664 ***

*** Renumbered SlotIndexes 244-684 ***

*** Renumbered SlotIndexes 256-712 ***

*** Renumbered SlotIndexes 268-732 ***

*** Renumbered SlotIndexes 280-760 ***

*** Renumbered SlotIndexes 292-780 ***

*** Renumbered SlotIndexes 304-808 ***

*** Renumbered SlotIndexes 316-828 ***

*** Renumbered SlotIndexes 328-856 ***

*** Renumbered SlotIndexes 340-876 ***

*** Renumbered SlotIndexes 352-904 ***

*** Renumbered SlotIndexes 364-924 ***

*** Renumbered SlotIndexes 376-952 ***

*** Renumbered SlotIndexes 388-972 ***

*** Renumbered SlotIndexes 400-1000 ***
Partitioning instructions of the region into multiple CEs
instr:  %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
instr:  %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
instr:  SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
instr:  %vreg2<def> = LW %vreg1, 0; mem:LD4[%4](align=16) GR32Bit:%vreg2,%vreg1

*** Renumbered SlotIndexes 452-1020 ***

*** Renumbered SlotIndexes 464-1048 ***

*** Renumbered SlotIndexes 476-1068 ***

*** Renumbered SlotIndexes 488-1096 ***

*** Renumbered SlotIndexes 500-1116 ***

*** Renumbered SlotIndexes 512-1144 ***

*** Renumbered SlotIndexes 532-1164 ***

*** Renumbered SlotIndexes 544-1192 ***

*** Renumbered SlotIndexes 556-1212 ***

*** Renumbered SlotIndexes 568-1240 ***

*** Renumbered SlotIndexes 580-1260 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs

renaming register of operand that belongs to ce 1 but was defined in0
%vreg2<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg2<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg2<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg2
renaming register of operand that belongs to ce 2 but was defined in0
%vreg2
renaming register of operand that belongs to ce 3 but was defined in0
%vreg2After Shuffling regions of basic block, state of BB#0:
BB#0: derived from LLVM BB %AssignFunction3.entry
	%vreg82<def> = ADD %t5, %zero; GR32Bit:%vreg82
	%vreg84<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg84
	%vreg85<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg85
	%vreg86<def> = SRLI %vreg85, 12; GR32Bit:%vreg86,%vreg85
	%vreg87<def> = ADD %vreg84, %vreg86; GR32Bit:%vreg87,%vreg84,%vreg86
	%vreg88<def> = ADDI %zero, 12; GR32Bit:%vreg88
	%vreg89<def> = SRLI %t5, 22; GR32Bit:%vreg89
	%vreg90<def> = SRLI %t5, 12; GR32Bit:%vreg90
	%vreg91<def> = ANDI %vreg90, 15; GR32Bit:%vreg91,%vreg90
	%vreg92<def> = SRLI %t5, 6; GR32Bit:%vreg92
	%vreg93<def> = ANDI %vreg92, 63; GR32Bit:%vreg93,%vreg92
	%vreg94<def> = ADDI %zero, 832; GR32Bit:%vreg94
	%vreg95<def> = MUL %vreg89, %vreg94; GR32Bit:%vreg95,%vreg89,%vreg94
	%vreg96<def> = ADDI %zero, 52; GR32Bit:%vreg96
	%vreg97<def> = MUL %vreg91, %vreg96; GR32Bit:%vreg97,%vreg91,%vreg96
	%vreg98<def> = ADD %vreg97, %vreg93; GR32Bit:%vreg98,%vreg97,%vreg93
	%vreg99<def> = ADD %vreg98, %vreg95; GR32Bit:%vreg99,%vreg98,%vreg95
	%vreg100<def> = MUL %vreg99, %vreg88; GR32Bit:%vreg100,%vreg99,%vreg88
	%vreg83<def> = ADD %vreg87, %vreg100; GR32Bit:%vreg83,%vreg87,%vreg100
	%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
	%vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
	SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
	%vreg2<def> = LW %vreg1, 0; mem:LD4[%4](align=16) GR32Bit:%vreg2,%vreg1
	%vreg158<def> = LUI 1; GR32Bit:%vreg158
	WRITEPM %vreg158, %vreg2, 0; GR32Bit:%vreg158,%vreg2
	%vreg160<def> = LUI 2; GR32Bit:%vreg160
	WRITEPM %vreg160, %vreg2, 0; GR32Bit:%vreg160,%vreg2
	%vreg162<def> = LUI 3; GR32Bit:%vreg162
	WRITEPM %vreg162, %vreg2, 0; GR32Bit:%vreg162,%vreg2
	BEQ <BB#2>, %vreg2, %zero; GR32Bit:%vreg2
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#1>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg101<def> = ADD %t5, %zero; GR32Bit:%vreg101
	%vreg103<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg103
	%vreg104<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg104
	%vreg105<def> = SRLI %vreg104, 12; GR32Bit:%vreg105,%vreg104
	%vreg106<def> = ADD %vreg103, %vreg105; GR32Bit:%vreg106,%vreg103,%vreg105
	%vreg107<def> = ADDI %zero, 12; GR32Bit:%vreg107
	%vreg108<def> = SRLI %t5, 22; GR32Bit:%vreg108
	%vreg109<def> = SRLI %t5, 12; GR32Bit:%vreg109
	%vreg110<def> = ANDI %vreg109, 15; GR32Bit:%vreg110,%vreg109
	%vreg111<def> = SRLI %t5, 6; GR32Bit:%vreg111
	%vreg112<def> = ANDI %vreg111, 63; GR32Bit:%vreg112,%vreg111
	%vreg113<def> = ADDI %zero, 832; GR32Bit:%vreg113
	%vreg114<def> = MUL %vreg108, %vreg113; GR32Bit:%vreg114,%vreg108,%vreg113
	%vreg115<def> = ADDI %zero, 52; GR32Bit:%vreg115
	%vreg116<def> = MUL %vreg110, %vreg115; GR32Bit:%vreg116,%vreg110,%vreg115
	%vreg117<def> = ADD %vreg116, %vreg112; GR32Bit:%vreg117,%vreg116,%vreg112
	%vreg118<def> = ADD %vreg117, %vreg114; GR32Bit:%vreg118,%vreg117,%vreg114
	%vreg119<def> = MUL %vreg118, %vreg107; GR32Bit:%vreg119,%vreg118,%vreg107
	%vreg102<def> = ADD %vreg106, %vreg119; GR32Bit:%vreg102,%vreg106,%vreg119
	%vreg159<def> = LUI 1; GR32Bit:%vreg159
	%vreg164<def> = DREADPM %vreg159, 0; GR32Bit:%vreg164,%vreg159
	BEQ <BB#2>, %vreg164, %zero; GR32Bit:%vreg164
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#1>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg120<def> = ADD %t5, %zero; GR32Bit:%vreg120
	%vreg122<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg122
	%vreg123<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg123
	%vreg124<def> = SRLI %vreg123, 12; GR32Bit:%vreg124,%vreg123
	%vreg125<def> = ADD %vreg122, %vreg124; GR32Bit:%vreg125,%vreg122,%vreg124
	%vreg126<def> = ADDI %zero, 12; GR32Bit:%vreg126
	%vreg127<def> = SRLI %t5, 22; GR32Bit:%vreg127
	%vreg128<def> = SRLI %t5, 12; GR32Bit:%vreg128
	%vreg129<def> = ANDI %vreg128, 15; GR32Bit:%vreg129,%vreg128
	%vreg130<def> = SRLI %t5, 6; GR32Bit:%vreg130
	%vreg131<def> = ANDI %vreg130, 63; GR32Bit:%vreg131,%vreg130
	%vreg132<def> = ADDI %zero, 832; GR32Bit:%vreg132
	%vreg133<def> = MUL %vreg127, %vreg132; GR32Bit:%vreg133,%vreg127,%vreg132
	%vreg134<def> = ADDI %zero, 52; GR32Bit:%vreg134
	%vreg135<def> = MUL %vreg129, %vreg134; GR32Bit:%vreg135,%vreg129,%vreg134
	%vreg136<def> = ADD %vreg135, %vreg131; GR32Bit:%vreg136,%vreg135,%vreg131
	%vreg137<def> = ADD %vreg136, %vreg133; GR32Bit:%vreg137,%vreg136,%vreg133
	%vreg138<def> = MUL %vreg137, %vreg126; GR32Bit:%vreg138,%vreg137,%vreg126
	%vreg121<def> = ADD %vreg125, %vreg138; GR32Bit:%vreg121,%vreg125,%vreg138
	%vreg161<def> = LUI 2; GR32Bit:%vreg161
	%vreg165<def> = DREADPM %vreg161, 0; GR32Bit:%vreg165,%vreg161
	BEQ <BB#2>, %vreg165, %zero; GR32Bit:%vreg165
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#1>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg139<def> = ADD %t5, %zero; GR32Bit:%vreg139
	%vreg141<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg141
	%vreg142<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg142
	%vreg143<def> = SRLI %vreg142, 12; GR32Bit:%vreg143,%vreg142
	%vreg144<def> = ADD %vreg141, %vreg143; GR32Bit:%vreg144,%vreg141,%vreg143
	%vreg145<def> = ADDI %zero, 12; GR32Bit:%vreg145
	%vreg146<def> = SRLI %t5, 22; GR32Bit:%vreg146
	%vreg147<def> = SRLI %t5, 12; GR32Bit:%vreg147
	%vreg148<def> = ANDI %vreg147, 15; GR32Bit:%vreg148,%vreg147
	%vreg149<def> = SRLI %t5, 6; GR32Bit:%vreg149
	%vreg150<def> = ANDI %vreg149, 63; GR32Bit:%vreg150,%vreg149
	%vreg151<def> = ADDI %zero, 832; GR32Bit:%vreg151
	%vreg152<def> = MUL %vreg146, %vreg151; GR32Bit:%vreg152,%vreg146,%vreg151
	%vreg153<def> = ADDI %zero, 52; GR32Bit:%vreg153
	%vreg154<def> = MUL %vreg148, %vreg153; GR32Bit:%vreg154,%vreg148,%vreg153
	%vreg155<def> = ADD %vreg154, %vreg150; GR32Bit:%vreg155,%vreg154,%vreg150
	%vreg156<def> = ADD %vreg155, %vreg152; GR32Bit:%vreg156,%vreg155,%vreg152
	%vreg157<def> = MUL %vreg156, %vreg145; GR32Bit:%vreg157,%vreg156,%vreg145
	%vreg140<def> = ADD %vreg144, %vreg157; GR32Bit:%vreg140,%vreg144,%vreg157
	%vreg163<def> = LUI 3; GR32Bit:%vreg163
	%vreg166<def> = DREADPM %vreg163, 0; GR32Bit:%vreg166,%vreg163
	BEQ <BB#2>, %vreg166, %zero; GR32Bit:%vreg166
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#1>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#1(20) BB#2(12)

*** Renumbered SlotIndexes 316-1452 ***

*** Renumbered SlotIndexes 304-1496 ***

*** Renumbered SlotIndexes 304-1528 ***

*** Renumbered SlotIndexes 304-1560 ***

*** Renumbered SlotIndexes 304-1592 ***

*** Renumbered SlotIndexes 216-1672 ***

*** Renumbered SlotIndexes 204-1708 ***

*** Renumbered SlotIndexes 204-1740 ***

*** Renumbered SlotIndexes 204-1772 ***

*** Renumbered SlotIndexes 204-1804 ***

*** Renumbered SlotIndexes 112-1912 ***

*** Renumbered SlotIndexes 100-1948 ***

*** Renumbered SlotIndexes 100-1980 ***

*** Renumbered SlotIndexes 100-2012 ***

*** Renumbered SlotIndexes 100-2044 ***

*** Renumbered SlotIndexes 100-2076 ***

*** Renumbered SlotIndexes 100-2108 ***

*** Renumbered SlotIndexes 100-2140 ***

*** Renumbered SlotIndexes 100-2156 ***

*** Renumbered SlotIndexes 12-2196 ***
Creating pHyperOp bundles for CEs for bb0
  %vreg101<def> = ADD %t5, %zero; GR32Bit:%vreg101
starting at   %vreg82<def> = ADD %t5, %zero; GR32Bit:%vreg82
  %vreg120<def> = ADD %t5, %zero; GR32Bit:%vreg120
starting at   %vreg101<def> = ADD %t5, %zero; GR32Bit:%vreg101
  %vreg139<def> = ADD %t5, %zero; GR32Bit:%vreg139
starting at   %vreg120<def> = ADD %t5, %zero; GR32Bit:%vreg120
starting at   %vreg139<def> = ADD %t5, %zero; GR32Bit:%vreg139
After bundling, state of BB0:BB#0: derived from LLVM BB %AssignFunction3.entry
	%vreg82<def> = ADD %t5, %zero; GR32Bit:%vreg82
	  * %vreg84<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg84
	  * %vreg85<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg85
	  * %vreg86<def> = SRLI %vreg85, 12; GR32Bit:%vreg86,%vreg85
	  * %vreg87<def> = ADD %vreg84, %vreg86; GR32Bit:%vreg87,%vreg84,%vreg86
	  * %vreg88<def> = ADDI %zero, 12; GR32Bit:%vreg88
	  * %vreg89<def> = SRLI %t5, 22; GR32Bit:%vreg89
	  * %vreg90<def> = SRLI %t5, 12; GR32Bit:%vreg90
	  * %vreg91<def> = ANDI %vreg90, 15; GR32Bit:%vreg91,%vreg90
	  * %vreg92<def> = SRLI %t5, 6; GR32Bit:%vreg92
	  * %vreg93<def> = ANDI %vreg92, 63; GR32Bit:%vreg93,%vreg92
	  * %vreg94<def> = ADDI %zero, 832; GR32Bit:%vreg94
	  * %vreg95<def> = MUL %vreg89, %vreg94; GR32Bit:%vreg95,%vreg89,%vreg94
	  * %vreg96<def> = ADDI %zero, 52; GR32Bit:%vreg96
	  * %vreg97<def> = MUL %vreg91, %vreg96; GR32Bit:%vreg97,%vreg91,%vreg96
	  * %vreg98<def> = ADD %vreg97, %vreg93; GR32Bit:%vreg98,%vreg97,%vreg93
	  * %vreg99<def> = ADD %vreg98, %vreg95; GR32Bit:%vreg99,%vreg98,%vreg95
	  * %vreg100<def> = MUL %vreg99, %vreg88; GR32Bit:%vreg100,%vreg99,%vreg88
	  * %vreg83<def> = ADD %vreg87, %vreg100; GR32Bit:%vreg83,%vreg87,%vreg100
	  * %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
	  * %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
	  * SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
	  * %vreg2<def> = LW %vreg1, 0; mem:LD4[%4](align=16) GR32Bit:%vreg2,%vreg1
	  * %vreg158<def> = LUI 1; GR32Bit:%vreg158
	  * WRITEPM %vreg158, %vreg2, 0; GR32Bit:%vreg158,%vreg2
	  * %vreg160<def> = LUI 2; GR32Bit:%vreg160
	  * WRITEPM %vreg160, %vreg2, 0; GR32Bit:%vreg160,%vreg2
	  * %vreg162<def> = LUI 3; GR32Bit:%vreg162
	  * WRITEPM %vreg162, %vreg2, 0; GR32Bit:%vreg162,%vreg2
	  * BEQ <BB#2>, %vreg2, %zero; GR32Bit:%vreg2
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg101<def> = ADD %t5, %zero; GR32Bit:%vreg101
	  * %vreg103<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg103
	  * %vreg104<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg104
	  * %vreg105<def> = SRLI %vreg104, 12; GR32Bit:%vreg105,%vreg104
	  * %vreg106<def> = ADD %vreg103, %vreg105; GR32Bit:%vreg106,%vreg103,%vreg105
	  * %vreg107<def> = ADDI %zero, 12; GR32Bit:%vreg107
	  * %vreg108<def> = SRLI %t5, 22; GR32Bit:%vreg108
	  * %vreg109<def> = SRLI %t5, 12; GR32Bit:%vreg109
	  * %vreg110<def> = ANDI %vreg109, 15; GR32Bit:%vreg110,%vreg109
	  * %vreg111<def> = SRLI %t5, 6; GR32Bit:%vreg111
	  * %vreg112<def> = ANDI %vreg111, 63; GR32Bit:%vreg112,%vreg111
	  * %vreg113<def> = ADDI %zero, 832; GR32Bit:%vreg113
	  * %vreg114<def> = MUL %vreg108, %vreg113; GR32Bit:%vreg114,%vreg108,%vreg113
	  * %vreg115<def> = ADDI %zero, 52; GR32Bit:%vreg115
	  * %vreg116<def> = MUL %vreg110, %vreg115; GR32Bit:%vreg116,%vreg110,%vreg115
	  * %vreg117<def> = ADD %vreg116, %vreg112; GR32Bit:%vreg117,%vreg116,%vreg112
	  * %vreg118<def> = ADD %vreg117, %vreg114; GR32Bit:%vreg118,%vreg117,%vreg114
	  * %vreg119<def> = MUL %vreg118, %vreg107; GR32Bit:%vreg119,%vreg118,%vreg107
	  * %vreg102<def> = ADD %vreg106, %vreg119; GR32Bit:%vreg102,%vreg106,%vreg119
	  * %vreg159<def> = LUI 1; GR32Bit:%vreg159
	  * %vreg164<def> = DREADPM %vreg159, 0; GR32Bit:%vreg164,%vreg159
	  * BEQ <BB#2>, %vreg164, %zero; GR32Bit:%vreg164
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg120<def> = ADD %t5, %zero; GR32Bit:%vreg120
	  * %vreg122<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg122
	  * %vreg123<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg123
	  * %vreg124<def> = SRLI %vreg123, 12; GR32Bit:%vreg124,%vreg123
	  * %vreg125<def> = ADD %vreg122, %vreg124; GR32Bit:%vreg125,%vreg122,%vreg124
	  * %vreg126<def> = ADDI %zero, 12; GR32Bit:%vreg126
	  * %vreg127<def> = SRLI %t5, 22; GR32Bit:%vreg127
	  * %vreg128<def> = SRLI %t5, 12; GR32Bit:%vreg128
	  * %vreg129<def> = ANDI %vreg128, 15; GR32Bit:%vreg129,%vreg128
	  * %vreg130<def> = SRLI %t5, 6; GR32Bit:%vreg130
	  * %vreg131<def> = ANDI %vreg130, 63; GR32Bit:%vreg131,%vreg130
	  * %vreg132<def> = ADDI %zero, 832; GR32Bit:%vreg132
	  * %vreg133<def> = MUL %vreg127, %vreg132; GR32Bit:%vreg133,%vreg127,%vreg132
	  * %vreg134<def> = ADDI %zero, 52; GR32Bit:%vreg134
	  * %vreg135<def> = MUL %vreg129, %vreg134; GR32Bit:%vreg135,%vreg129,%vreg134
	  * %vreg136<def> = ADD %vreg135, %vreg131; GR32Bit:%vreg136,%vreg135,%vreg131
	  * %vreg137<def> = ADD %vreg136, %vreg133; GR32Bit:%vreg137,%vreg136,%vreg133
	  * %vreg138<def> = MUL %vreg137, %vreg126; GR32Bit:%vreg138,%vreg137,%vreg126
	  * %vreg121<def> = ADD %vreg125, %vreg138; GR32Bit:%vreg121,%vreg125,%vreg138
	  * %vreg161<def> = LUI 2; GR32Bit:%vreg161
	  * %vreg165<def> = DREADPM %vreg161, 0; GR32Bit:%vreg165,%vreg161
	  * BEQ <BB#2>, %vreg165, %zero; GR32Bit:%vreg165
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg139<def> = ADD %t5, %zero; GR32Bit:%vreg139
	  * %vreg141<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg141
	  * %vreg142<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg142
	  * %vreg143<def> = SRLI %vreg142, 12; GR32Bit:%vreg143,%vreg142
	  * %vreg144<def> = ADD %vreg141, %vreg143; GR32Bit:%vreg144,%vreg141,%vreg143
	  * %vreg145<def> = ADDI %zero, 12; GR32Bit:%vreg145
	  * %vreg146<def> = SRLI %t5, 22; GR32Bit:%vreg146
	  * %vreg147<def> = SRLI %t5, 12; GR32Bit:%vreg147
	  * %vreg148<def> = ANDI %vreg147, 15; GR32Bit:%vreg148,%vreg147
	  * %vreg149<def> = SRLI %t5, 6; GR32Bit:%vreg149
	  * %vreg150<def> = ANDI %vreg149, 63; GR32Bit:%vreg150,%vreg149
	  * %vreg151<def> = ADDI %zero, 832; GR32Bit:%vreg151
	  * %vreg152<def> = MUL %vreg146, %vreg151; GR32Bit:%vreg152,%vreg146,%vreg151
	  * %vreg153<def> = ADDI %zero, 52; GR32Bit:%vreg153
	  * %vreg154<def> = MUL %vreg148, %vreg153; GR32Bit:%vreg154,%vreg148,%vreg153
	  * %vreg155<def> = ADD %vreg154, %vreg150; GR32Bit:%vreg155,%vreg154,%vreg150
	  * %vreg156<def> = ADD %vreg155, %vreg152; GR32Bit:%vreg156,%vreg155,%vreg152
	  * %vreg157<def> = MUL %vreg156, %vreg145; GR32Bit:%vreg157,%vreg156,%vreg145
	  * %vreg140<def> = ADD %vreg144, %vreg157; GR32Bit:%vreg140,%vreg144,%vreg157
	  * %vreg163<def> = LUI 3; GR32Bit:%vreg163
	  * %vreg166<def> = DREADPM %vreg163, 0; GR32Bit:%vreg166,%vreg163
	  * BEQ <BB#2>, %vreg166, %zero; GR32Bit:%vreg166
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#1(20) BB#2(12)

-------------
Starting new basic block BB#1
********** MI Scheduling **********
AssignFunction3:BB#1 AssignFunction3.if.then
  From: %vreg3<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg3
    To: End Remaining: 0
Max Pressure: GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 2
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 0
  SU(5) in tree 0
SU(0):   %vreg3<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
   val SU(2): Latency=5 Reg=%vreg3

SU(1):   %vreg4<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
   val SU(2): Latency=5 Reg=%vreg4

SU(2):   %vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 24
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg4
   val SU(0): Latency=5 Reg=%vreg3
  Successors:
   val SU(5): Latency=5 Reg=%vreg5
   val SU(3): Latency=5 Reg=%vreg5

SU(3):   %vreg6<def> = LW %vreg5, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg6,%vreg5
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 19
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg5
  Successors:
   val SU(4): Latency=15 Reg=%vreg6
   ch  SU(5): Latency=0

SU(4):   %vreg7<def> = ORI %vreg6, 1; GR32Bit:%vreg7,%vreg6
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 4
  Predecessors:
   val SU(3): Latency=15 Reg=%vreg6
  Successors:
   val SU(5): Latency=4 Reg=%vreg7

SU(5):   SW %vreg7, %vreg5, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg7,%vreg5
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 29
  Height             : 0
  Predecessors:
   val SU(4): Latency=4 Reg=%vreg7
   val SU(2): Latency=5 Reg=%vreg5
   ch  SU(3): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg3<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
   val SU(2): Latency=5 Reg=%vreg3

SU(1):   %vreg4<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
   val SU(2): Latency=5 Reg=%vreg4

SU(2):   %vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 24
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg4
   val SU(0): Latency=5 Reg=%vreg3
  Successors:
   val SU(5): Latency=5 Reg=%vreg5
   val SU(3): Latency=5 Reg=%vreg5

SU(3):   %vreg6<def> = LW %vreg5, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg6,%vreg5
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 19
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg5
  Successors:
   val SU(4): Latency=15 Reg=%vreg6
   ch  SU(5): Latency=0

SU(4):   %vreg7<def> = ORI %vreg6, 1; GR32Bit:%vreg7,%vreg6
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 4
  Predecessors:
   val SU(3): Latency=15 Reg=%vreg6
  Successors:
   val SU(5): Latency=4 Reg=%vreg7

SU(5):   SW %vreg7, %vreg5, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg7,%vreg5
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 29
  Height             : 0
  Predecessors:
   val SU(4): Latency=4 Reg=%vreg7
   val SU(2): Latency=5 Reg=%vreg5
   ch  SU(3): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(1)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg4<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg4
handleMove 1204B -> 1192B: %vreg4<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg4
     %vreg4:	[1204r,1212r:0)  0@1204r
        -->	[1192r,1212r:0)  0@1192r
     zero:	[4r,4d:3)[276r,276d:2)[492r,492d:1)[708r,708d:0)  0@708r 1@492r 2@276r 3@4r
        -->	[4r,4d:3)[276r,276d:2)[492r,492d:1)[708r,708d:0)  0@708r 1@492r 2@276r 3@4r
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg3<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg3
Pick node SU(2)  ILP: 3 / 6 = 0.5 Tree: 0 @0
Scheduling %vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
Pick node SU(3)  ILP: 4 / 11 = 0.363636 Tree: 0 @0
Scheduling %vreg6<def> = LW %vreg5, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg6,%vreg5
Pick node SU(4)  ILP: 5 / 26 = 0.192308 Tree: 0 @0
Scheduling %vreg7<def> = ORI %vreg6, 1; GR32Bit:%vreg7,%vreg6
Pick node SU(5)  ILP: 6 / 30 = 0.2 Tree: 0 @0
Scheduling SW %vreg7, %vreg5, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg7,%vreg5
*** Final schedule for BB#1 ***
SU(1):   %vreg4<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg4
SU(0):   %vreg3<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg3
SU(2):   %vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
SU(3):   %vreg6<def> = LW %vreg5, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg6,%vreg5
SU(4):   %vreg7<def> = ORI %vreg6, 1; GR32Bit:%vreg7,%vreg6
SU(5):   SW %vreg7, %vreg5, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg7,%vreg5

Partitioning instructions of the region into multiple CEs
instr:  %vreg4<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg4
instr:  %vreg3<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg3
instr:  %vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
instr:  %vreg6<def> = LW %vreg5, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg6,%vreg5
instr:  %vreg7<def> = ORI %vreg6, 1; GR32Bit:%vreg7,%vreg6
instr:  SW %vreg7, %vreg5, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg7,%vreg5
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
After Shuffling regions of basic block, state of BB#1:
BB#1: derived from LLVM BB %AssignFunction3.if.then
    Predecessors according to CFG: BB#0
	%vreg4<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg4
	%vreg3<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg3
	%vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
	%vreg6<def> = LW %vreg5, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg6,%vreg5
	%vreg7<def> = ORI %vreg6, 1; GR32Bit:%vreg7,%vreg6
	SW %vreg7, %vreg5, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg7,%vreg5
    Successors according to CFG: BB#2
Creating pHyperOp bundles for CEs for bb1
starting at   %vreg4<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg4

*** Renumbered SlotIndexes 1192-2208 ***
starting at   %zero<def> = ADDI %zero, 0
starting at   %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 1204-2220 ***
starting at   %zero<def> = ADDI %zero, 0
After bundling, state of BB1:BB#1: derived from LLVM BB %AssignFunction3.if.then
    Predecessors according to CFG: BB#0
	%vreg4<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg4
	  * %vreg3<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg3
	  * %vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
	  * %vreg6<def> = LW %vreg5, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg6,%vreg5
	  * %vreg7<def> = ORI %vreg6, 1; GR32Bit:%vreg7,%vreg6
	  * SW %vreg7, %vreg5, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg7,%vreg5
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#2

-------------
Starting new basic block BB#2
********** MI Scheduling **********
AssignFunction3:BB#2 AssignFunction3.if.end
  From: JAL <BB#3>
    To: JAL <BB#3>
 Remaining: 4
Max Pressure: Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 0
Excess PSets: 
0 subtrees:
*** Final schedule for BB#2 ***

Partitioning instructions of the region into multiple CEs

*** Renumbered SlotIndexes 1312-2232 ***

*** Renumbered SlotIndexes 1324-2244 ***

*** Renumbered SlotIndexes 1336-2256 ***

*** Renumbered SlotIndexes 1348-2268 ***

*** Renumbered SlotIndexes 1360-2280 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
********** MI Scheduling **********
AssignFunction3:BB#2 AssignFunction3.if.end
  From: %vreg8<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg8
    To: BEQ <BB#4>, %vreg10, %zero; GR32Bit:%vreg10
 Remaining: 0
Max Pressure: GR32Bit=1
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 1
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
SU(0):   %vreg8<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
   val SU(1): Latency=5 Reg=%vreg8

SU(1):   %vreg9<def> = LW %vreg8, 0; mem:LD4[%2] GR32Bit:%vreg9,%vreg8
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 30
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg8
  Successors:
   val SU(2): Latency=15 Reg=%vreg9

SU(2):   %vreg10<def> = LW %vreg9, 4; mem:LD4[%10] GR32Bit:%vreg10,%vreg9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 20
  Height             : 15
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg9
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg10

SU(0):   %vreg8<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
   val SU(1): Latency=5 Reg=%vreg8

SU(1):   %vreg9<def> = LW %vreg8, 0; mem:LD4[%2] GR32Bit:%vreg9,%vreg8
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 30
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg8
  Successors:
   val SU(2): Latency=15 Reg=%vreg9

SU(2):   %vreg10<def> = LW %vreg9, 4; mem:LD4[%10] GR32Bit:%vreg10,%vreg9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 14
  Depth              : 20
  Height             : 15
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg9
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg10

Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg8<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg8
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg9<def> = LW %vreg8, 0; mem:LD4[%2] GR32Bit:%vreg9,%vreg8
Pick node SU(2)  ILP: 3 / 21 = 0.142857 Tree: 0 @0
Scheduling %vreg10<def> = LW %vreg9, 4; mem:LD4[%10] GR32Bit:%vreg10,%vreg9
*** Final schedule for BB#2 ***
SU(0):   %vreg8<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg8
SU(1):   %vreg9<def> = LW %vreg8, 0; mem:LD4[%2] GR32Bit:%vreg9,%vreg8
SU(2):   %vreg10<def> = LW %vreg9, 4; mem:LD4[%10] GR32Bit:%vreg10,%vreg9

Partitioning instructions of the region into multiple CEs
instr:  %vreg8<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg8
instr:  %vreg9<def> = LW %vreg8, 0; mem:LD4[%2] GR32Bit:%vreg9,%vreg8
instr:  %vreg10<def> = LW %vreg9, 4; mem:LD4[%10] GR32Bit:%vreg10,%vreg9

*** Renumbered SlotIndexes 1296-2320 ***

*** Renumbered SlotIndexes 1308-2332 ***

*** Renumbered SlotIndexes 1320-2344 ***

*** Renumbered SlotIndexes 1332-2356 ***

*** Renumbered SlotIndexes 1344-2368 ***

*** Renumbered SlotIndexes 1356-2380 ***

*** Renumbered SlotIndexes 1376-2392 ***

*** Renumbered SlotIndexes 1388-2404 ***

*** Renumbered SlotIndexes 1400-2416 ***

*** Renumbered SlotIndexes 1412-2428 ***

*** Renumbered SlotIndexes 1424-2440 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs

renaming register of operand that belongs to ce 1 but was defined in0
%vreg10<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg10<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg10<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg10
renaming register of operand that belongs to ce 2 but was defined in0
%vreg10
renaming register of operand that belongs to ce 3 but was defined in0
%vreg10After Shuffling regions of basic block, state of BB#2:
BB#2: derived from LLVM BB %AssignFunction3.if.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg8<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg8
	%vreg9<def> = LW %vreg8, 0; mem:LD4[%2] GR32Bit:%vreg9,%vreg8
	%vreg10<def> = LW %vreg9, 4; mem:LD4[%10] GR32Bit:%vreg10,%vreg9
	%vreg167<def> = LUI 1; GR32Bit:%vreg167
	WRITEPM %vreg167, %vreg10, 0; GR32Bit:%vreg167,%vreg10
	%vreg169<def> = LUI 2; GR32Bit:%vreg169
	WRITEPM %vreg169, %vreg10, 0; GR32Bit:%vreg169,%vreg10
	%vreg171<def> = LUI 3; GR32Bit:%vreg171
	WRITEPM %vreg171, %vreg10, 0; GR32Bit:%vreg171,%vreg10
	BEQ <BB#4>, %vreg10, %zero; GR32Bit:%vreg10
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#3>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg168<def> = LUI 1; GR32Bit:%vreg168
	%vreg173<def> = DREADPM %vreg168, 0; GR32Bit:%vreg173,%vreg168
	BEQ <BB#4>, %vreg173, %zero; GR32Bit:%vreg173
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#3>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg170<def> = LUI 2; GR32Bit:%vreg170
	%vreg174<def> = DREADPM %vreg170, 0; GR32Bit:%vreg174,%vreg170
	BEQ <BB#4>, %vreg174, %zero; GR32Bit:%vreg174
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#3>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg172<def> = LUI 3; GR32Bit:%vreg172
	%vreg175<def> = DREADPM %vreg172, 0; GR32Bit:%vreg175,%vreg172
	BEQ <BB#4>, %vreg175, %zero; GR32Bit:%vreg175
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#3>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#3(20) BB#4(12)

*** Renumbered SlotIndexes 1340-2484 ***

*** Renumbered SlotIndexes 1340-2500 ***

*** Renumbered SlotIndexes 1340-2516 ***

*** Renumbered SlotIndexes 1316-2540 ***

*** Renumbered SlotIndexes 1316-2556 ***

*** Renumbered SlotIndexes 1316-2572 ***

*** Renumbered SlotIndexes 1296-2600 ***

*** Renumbered SlotIndexes 1296-2616 ***

*** Renumbered SlotIndexes 1296-2632 ***

*** Renumbered SlotIndexes 1296-2648 ***

*** Renumbered SlotIndexes 1296-2664 ***
Creating pHyperOp bundles for CEs for bb2
  %vreg168<def> = LUI 1; GR32Bit:%vreg168
starting at   %vreg8<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg8
  %vreg170<def> = LUI 2; GR32Bit:%vreg170
starting at   %vreg168<def> = LUI 1; GR32Bit:%vreg168
  %vreg172<def> = LUI 3; GR32Bit:%vreg172
starting at   %vreg170<def> = LUI 2; GR32Bit:%vreg170
starting at   %vreg172<def> = LUI 3; GR32Bit:%vreg172
After bundling, state of BB2:BB#2: derived from LLVM BB %AssignFunction3.if.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg8<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg8
	  * %vreg9<def> = LW %vreg8, 0; mem:LD4[%2] GR32Bit:%vreg9,%vreg8
	  * %vreg10<def> = LW %vreg9, 4; mem:LD4[%10] GR32Bit:%vreg10,%vreg9
	  * %vreg167<def> = LUI 1; GR32Bit:%vreg167
	  * WRITEPM %vreg167, %vreg10, 0; GR32Bit:%vreg167,%vreg10
	  * %vreg169<def> = LUI 2; GR32Bit:%vreg169
	  * WRITEPM %vreg169, %vreg10, 0; GR32Bit:%vreg169,%vreg10
	  * %vreg171<def> = LUI 3; GR32Bit:%vreg171
	  * WRITEPM %vreg171, %vreg10, 0; GR32Bit:%vreg171,%vreg10
	  * BEQ <BB#4>, %vreg10, %zero; GR32Bit:%vreg10
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#3>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg168<def> = LUI 1; GR32Bit:%vreg168
	  * %vreg173<def> = DREADPM %vreg168, 0; GR32Bit:%vreg173,%vreg168
	  * BEQ <BB#4>, %vreg173, %zero; GR32Bit:%vreg173
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#3>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg170<def> = LUI 2; GR32Bit:%vreg170
	  * %vreg174<def> = DREADPM %vreg170, 0; GR32Bit:%vreg174,%vreg170
	  * BEQ <BB#4>, %vreg174, %zero; GR32Bit:%vreg174
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#3>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg172<def> = LUI 3; GR32Bit:%vreg172
	  * %vreg175<def> = DREADPM %vreg172, 0; GR32Bit:%vreg175,%vreg172
	  * BEQ <BB#4>, %vreg175, %zero; GR32Bit:%vreg175
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#3>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#3(20) BB#4(12)

-------------
Starting new basic block BB#3
********** MI Scheduling **********
AssignFunction3:BB#3 AssignFunction3.if.then3
  From: %vreg11<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg11
    To: End Remaining: 0
Max Pressure: GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 2
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 0
  SU(5) in tree 0
SU(0):   %vreg11<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg11
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
   val SU(2): Latency=5 Reg=%vreg11

SU(1):   %vreg12<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
   val SU(2): Latency=5 Reg=%vreg12

SU(2):   %vreg13<def> = ADD %vreg12, %vreg11; GR32Bit:%vreg13,%vreg12,%vreg11
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 24
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg12
   val SU(0): Latency=5 Reg=%vreg11
  Successors:
   val SU(5): Latency=5 Reg=%vreg13
   val SU(3): Latency=5 Reg=%vreg13

SU(3):   %vreg14<def> = LW %vreg13, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg14,%vreg13
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 19
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg13
  Successors:
   val SU(4): Latency=15 Reg=%vreg14
   ch  SU(5): Latency=0

SU(4):   %vreg15<def> = ORI %vreg14, 2; GR32Bit:%vreg15,%vreg14
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 4
  Predecessors:
   val SU(3): Latency=15 Reg=%vreg14
  Successors:
   val SU(5): Latency=4 Reg=%vreg15

SU(5):   SW %vreg15, %vreg13, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg15,%vreg13
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 29
  Height             : 0
  Predecessors:
   val SU(4): Latency=4 Reg=%vreg15
   val SU(2): Latency=5 Reg=%vreg13
   ch  SU(3): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg11<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg11
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
   val SU(2): Latency=5 Reg=%vreg11

SU(1):   %vreg12<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
   val SU(2): Latency=5 Reg=%vreg12

SU(2):   %vreg13<def> = ADD %vreg12, %vreg11; GR32Bit:%vreg13,%vreg12,%vreg11
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 24
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg12
   val SU(0): Latency=5 Reg=%vreg11
  Successors:
   val SU(5): Latency=5 Reg=%vreg13
   val SU(3): Latency=5 Reg=%vreg13

SU(3):   %vreg14<def> = LW %vreg13, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg14,%vreg13
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 19
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg13
  Successors:
   val SU(4): Latency=15 Reg=%vreg14
   ch  SU(5): Latency=0

SU(4):   %vreg15<def> = ORI %vreg14, 2; GR32Bit:%vreg15,%vreg14
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 4
  Predecessors:
   val SU(3): Latency=15 Reg=%vreg14
  Successors:
   val SU(5): Latency=4 Reg=%vreg15

SU(5):   SW %vreg15, %vreg13, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg15,%vreg13
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 29
  Height             : 0
  Predecessors:
   val SU(4): Latency=4 Reg=%vreg15
   val SU(2): Latency=5 Reg=%vreg13
   ch  SU(3): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(1)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg12<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg12
handleMove 1776B -> 1764B: %vreg12<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg12
     %vreg12:	[1776r,1784r:0)  0@1776r
        -->	[1764r,1784r:0)  0@1764r
     zero:	[4r,4d:3)[276r,276d:2)[492r,492d:1)[708r,708d:0)  0@708r 1@492r 2@276r 3@4r
        -->	[4r,4d:3)[276r,276d:2)[492r,492d:1)[708r,708d:0)  0@708r 1@492r 2@276r 3@4r
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg11<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg11
Pick node SU(2)  ILP: 3 / 6 = 0.5 Tree: 0 @0
Scheduling %vreg13<def> = ADD %vreg12, %vreg11; GR32Bit:%vreg13,%vreg12,%vreg11
Pick node SU(3)  ILP: 4 / 11 = 0.363636 Tree: 0 @0
Scheduling %vreg14<def> = LW %vreg13, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg14,%vreg13
Pick node SU(4)  ILP: 5 / 26 = 0.192308 Tree: 0 @0
Scheduling %vreg15<def> = ORI %vreg14, 2; GR32Bit:%vreg15,%vreg14
Pick node SU(5)  ILP: 6 / 30 = 0.2 Tree: 0 @0
Scheduling SW %vreg15, %vreg13, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg15,%vreg13
*** Final schedule for BB#3 ***
SU(1):   %vreg12<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg12
SU(0):   %vreg11<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg11
SU(2):   %vreg13<def> = ADD %vreg12, %vreg11; GR32Bit:%vreg13,%vreg12,%vreg11
SU(3):   %vreg14<def> = LW %vreg13, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg14,%vreg13
SU(4):   %vreg15<def> = ORI %vreg14, 2; GR32Bit:%vreg15,%vreg14
SU(5):   SW %vreg15, %vreg13, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg15,%vreg13

Partitioning instructions of the region into multiple CEs
instr:  %vreg12<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg12
instr:  %vreg11<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg11
instr:  %vreg13<def> = ADD %vreg12, %vreg11; GR32Bit:%vreg13,%vreg12,%vreg11
instr:  %vreg14<def> = LW %vreg13, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg14,%vreg13
instr:  %vreg15<def> = ORI %vreg14, 2; GR32Bit:%vreg15,%vreg14
instr:  SW %vreg15, %vreg13, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg15,%vreg13
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
After Shuffling regions of basic block, state of BB#3:
BB#3: derived from LLVM BB %AssignFunction3.if.then3
    Predecessors according to CFG: BB#2
	%vreg12<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg12
	%vreg11<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg11
	%vreg13<def> = ADD %vreg12, %vreg11; GR32Bit:%vreg13,%vreg12,%vreg11
	%vreg14<def> = LW %vreg13, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg14,%vreg13
	%vreg15<def> = ORI %vreg14, 2; GR32Bit:%vreg15,%vreg14
	SW %vreg15, %vreg13, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg15,%vreg13
    Successors according to CFG: BB#4
Creating pHyperOp bundles for CEs for bb3
starting at   %vreg12<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg12

*** Renumbered SlotIndexes 1764-2676 ***
starting at   %zero<def> = ADDI %zero, 0
starting at   %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 1776-2688 ***
starting at   %zero<def> = ADDI %zero, 0
After bundling, state of BB3:BB#3: derived from LLVM BB %AssignFunction3.if.then3
    Predecessors according to CFG: BB#2
	%vreg12<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg12
	  * %vreg11<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg11
	  * %vreg13<def> = ADD %vreg12, %vreg11; GR32Bit:%vreg13,%vreg12,%vreg11
	  * %vreg14<def> = LW %vreg13, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg14,%vreg13
	  * %vreg15<def> = ORI %vreg14, 2; GR32Bit:%vreg15,%vreg14
	  * SW %vreg15, %vreg13, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg15,%vreg13
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#4

-------------
Starting new basic block BB#4
********** MI Scheduling **********
AssignFunction3:BB#4 AssignFunction3.if.end5
  From: JAL <BB#5>
    To: JAL <BB#5>
 Remaining: 5
Max Pressure: Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 0
Excess PSets: 
0 subtrees:
*** Final schedule for BB#4 ***

Partitioning instructions of the region into multiple CEs

*** Renumbered SlotIndexes 1892-2700 ***

*** Renumbered SlotIndexes 1904-2712 ***

*** Renumbered SlotIndexes 1916-2724 ***

*** Renumbered SlotIndexes 1928-2736 ***

*** Renumbered SlotIndexes 1940-2748 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
********** MI Scheduling **********
AssignFunction3:BB#4 AssignFunction3.if.end5
  From: %vreg16<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg16
    To: BGT <BB#6>, %vreg18, %vreg19; GR32Bit:%vreg18,%vreg19
 Remaining: 0
Max Pressure: GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 2
Excess PSets: 
2 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 1
SU(0):   %vreg16<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
   val SU(1): Latency=5 Reg=%vreg16

SU(1):   %vreg17<def> = LW %vreg16, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg16
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 30
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg16
  Successors:
   val SU(2): Latency=15 Reg=%vreg17

SU(2):   %vreg18<def> = LW %vreg17, 8; mem:LD4[%16] GR32Bit:%vreg18,%vreg17
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 20
  Height             : 15
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg17
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg18

SU(3):   %vreg19<def> = ADDI %zero, 250; GR32Bit:%vreg19
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(4294967295): Latency=5 Reg=%vreg19

SU(0):   %vreg16<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
   val SU(1): Latency=5 Reg=%vreg16

SU(1):   %vreg17<def> = LW %vreg16, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg16
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 30
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg16
  Successors:
   val SU(2): Latency=15 Reg=%vreg17

SU(2):   %vreg18<def> = LW %vreg17, 8; mem:LD4[%16] GR32Bit:%vreg18,%vreg17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 14
  Depth              : 20
  Height             : 15
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg17
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg18

SU(3):   %vreg19<def> = ADDI %zero, 250; GR32Bit:%vreg19
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(4294967295): Latency=5 Reg=%vreg19

Pick node SU(3)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg19<def> = ADDI %zero, 250; GR32Bit:%vreg19
handleMove 1872B -> 1844B: %vreg19<def> = ADDI %zero, 250; GR32Bit:%vreg19
     %vreg19:	[1872r,1880r:0)  0@1872r
        -->	[1844r,1880r:0)  0@1844r
     zero:	[4r,4d:3)[276r,276d:2)[492r,492d:1)[708r,708d:0)  0@708r 1@492r 2@276r 3@4r
        -->	[4r,4d:3)[276r,276d:2)[492r,492d:1)[708r,708d:0)  0@708r 1@492r 2@276r 3@4r
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg16<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg16
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg17<def> = LW %vreg16, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg16
Pick node SU(2)  ILP: 3 / 21 = 0.142857 Tree: 0 @0
Scheduling %vreg18<def> = LW %vreg17, 8; mem:LD4[%16] GR32Bit:%vreg18,%vreg17
*** Final schedule for BB#4 ***
SU(3):   %vreg19<def> = ADDI %zero, 250; GR32Bit:%vreg19
SU(0):   %vreg16<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg16
SU(1):   %vreg17<def> = LW %vreg16, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg16
SU(2):   %vreg18<def> = LW %vreg17, 8; mem:LD4[%16] GR32Bit:%vreg18,%vreg17

Partitioning instructions of the region into multiple CEs
instr:  %vreg19<def> = ADDI %zero, 250; GR32Bit:%vreg19
instr:  %vreg16<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg16
instr:  %vreg17<def> = LW %vreg16, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg16
instr:  %vreg18<def> = LW %vreg17, 8; mem:LD4[%16] GR32Bit:%vreg18,%vreg17

*** Renumbered SlotIndexes 1868-2788 ***

*** Renumbered SlotIndexes 1880-2800 ***

*** Renumbered SlotIndexes 1892-2812 ***

*** Renumbered SlotIndexes 1904-2824 ***

*** Renumbered SlotIndexes 1916-2836 ***

*** Renumbered SlotIndexes 1928-2848 ***

*** Renumbered SlotIndexes 1940-2860 ***

*** Renumbered SlotIndexes 1952-2872 ***

*** Renumbered SlotIndexes 1964-2884 ***

*** Renumbered SlotIndexes 1992-2896 ***

*** Renumbered SlotIndexes 2004-2908 ***

*** Renumbered SlotIndexes 2016-2920 ***

*** Renumbered SlotIndexes 2028-2932 ***

*** Renumbered SlotIndexes 2040-2944 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs

renaming register of operand that belongs to ce 1 but was defined in0
%vreg18<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg18<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg18<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg19<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg19<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg19<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg18
renaming register of operand that belongs to ce 1 but was defined in0
%vreg19
renaming register of operand that belongs to ce 2 but was defined in0
%vreg18
renaming register of operand that belongs to ce 2 but was defined in0
%vreg19
renaming register of operand that belongs to ce 3 but was defined in0
%vreg18
renaming register of operand that belongs to ce 3 but was defined in0
%vreg19After Shuffling regions of basic block, state of BB#4:
BB#4: derived from LLVM BB %AssignFunction3.if.end5
    Predecessors according to CFG: BB#2 BB#3
	%vreg19<def> = ADDI %zero, 250; GR32Bit:%vreg19
	%vreg16<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg16
	%vreg17<def> = LW %vreg16, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg16
	%vreg18<def> = LW %vreg17, 8; mem:LD4[%16] GR32Bit:%vreg18,%vreg17
	%vreg176<def> = LUI 1; GR32Bit:%vreg176
	WRITEPM %vreg176, %vreg18, 0; GR32Bit:%vreg176,%vreg18
	%vreg178<def> = LUI 2; GR32Bit:%vreg178
	WRITEPM %vreg178, %vreg18, 0; GR32Bit:%vreg178,%vreg18
	%vreg180<def> = LUI 3; GR32Bit:%vreg180
	WRITEPM %vreg180, %vreg18, 0; GR32Bit:%vreg180,%vreg18
	WRITEPM %vreg176, %vreg19, 4; GR32Bit:%vreg176,%vreg19
	WRITEPM %vreg178, %vreg19, 4; GR32Bit:%vreg178,%vreg19
	WRITEPM %vreg180, %vreg19, 4; GR32Bit:%vreg180,%vreg19
	BGT <BB#6>, %vreg18, %vreg19; GR32Bit:%vreg18,%vreg19
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#5>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg177<def> = LUI 1; GR32Bit:%vreg177
	%vreg182<def> = DREADPM %vreg177, 0; GR32Bit:%vreg182,%vreg177
	%vreg185<def> = DREADPM %vreg177, 4; GR32Bit:%vreg185,%vreg177
	BGT <BB#6>, %vreg182, %vreg185; GR32Bit:%vreg182,%vreg185
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#5>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg179<def> = LUI 2; GR32Bit:%vreg179
	%vreg183<def> = DREADPM %vreg179, 0; GR32Bit:%vreg183,%vreg179
	%vreg186<def> = DREADPM %vreg179, 4; GR32Bit:%vreg186,%vreg179
	BGT <BB#6>, %vreg183, %vreg186; GR32Bit:%vreg183,%vreg186
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#5>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg181<def> = LUI 3; GR32Bit:%vreg181
	%vreg184<def> = DREADPM %vreg181, 0; GR32Bit:%vreg184,%vreg181
	%vreg187<def> = DREADPM %vreg181, 4; GR32Bit:%vreg187,%vreg181
	BGT <BB#6>, %vreg184, %vreg187; GR32Bit:%vreg184,%vreg187
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#5>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#6(16) BB#5(16)

*** Renumbered SlotIndexes 1912-3000 ***

*** Renumbered SlotIndexes 1912-3016 ***

*** Renumbered SlotIndexes 1912-3032 ***

*** Renumbered SlotIndexes 1912-3048 ***

*** Renumbered SlotIndexes 1888-3064 ***

*** Renumbered SlotIndexes 1888-3080 ***

*** Renumbered SlotIndexes 1888-3096 ***

*** Renumbered SlotIndexes 1888-3112 ***

*** Renumbered SlotIndexes 1868-3132 ***

*** Renumbered SlotIndexes 1868-3148 ***

*** Renumbered SlotIndexes 1868-3164 ***

*** Renumbered SlotIndexes 1868-3180 ***

*** Renumbered SlotIndexes 1868-3196 ***

*** Renumbered SlotIndexes 1868-3212 ***

*** Renumbered SlotIndexes 1868-3228 ***
Creating pHyperOp bundles for CEs for bb4
  %vreg177<def> = LUI 1; GR32Bit:%vreg177
starting at   %vreg19<def> = ADDI %zero, 250; GR32Bit:%vreg19
  %vreg179<def> = LUI 2; GR32Bit:%vreg179
starting at   %vreg177<def> = LUI 1; GR32Bit:%vreg177
  %vreg181<def> = LUI 3; GR32Bit:%vreg181
starting at   %vreg179<def> = LUI 2; GR32Bit:%vreg179
starting at   %vreg181<def> = LUI 3; GR32Bit:%vreg181
After bundling, state of BB4:BB#4: derived from LLVM BB %AssignFunction3.if.end5
    Predecessors according to CFG: BB#2 BB#3
	%vreg19<def> = ADDI %zero, 250; GR32Bit:%vreg19
	  * %vreg16<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg16
	  * %vreg17<def> = LW %vreg16, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg16
	  * %vreg18<def> = LW %vreg17, 8; mem:LD4[%16] GR32Bit:%vreg18,%vreg17
	  * %vreg176<def> = LUI 1; GR32Bit:%vreg176
	  * WRITEPM %vreg176, %vreg18, 0; GR32Bit:%vreg176,%vreg18
	  * %vreg178<def> = LUI 2; GR32Bit:%vreg178
	  * WRITEPM %vreg178, %vreg18, 0; GR32Bit:%vreg178,%vreg18
	  * %vreg180<def> = LUI 3; GR32Bit:%vreg180
	  * WRITEPM %vreg180, %vreg18, 0; GR32Bit:%vreg180,%vreg18
	  * WRITEPM %vreg176, %vreg19, 4; GR32Bit:%vreg176,%vreg19
	  * WRITEPM %vreg178, %vreg19, 4; GR32Bit:%vreg178,%vreg19
	  * WRITEPM %vreg180, %vreg19, 4; GR32Bit:%vreg180,%vreg19
	  * BGT <BB#6>, %vreg18, %vreg19; GR32Bit:%vreg18,%vreg19
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#5>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg177<def> = LUI 1; GR32Bit:%vreg177
	  * %vreg182<def> = DREADPM %vreg177, 0; GR32Bit:%vreg182,%vreg177
	  * %vreg185<def> = DREADPM %vreg177, 4; GR32Bit:%vreg185,%vreg177
	  * BGT <BB#6>, %vreg182, %vreg185; GR32Bit:%vreg182,%vreg185
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#5>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg179<def> = LUI 2; GR32Bit:%vreg179
	  * %vreg183<def> = DREADPM %vreg179, 0; GR32Bit:%vreg183,%vreg179
	  * %vreg186<def> = DREADPM %vreg179, 4; GR32Bit:%vreg186,%vreg179
	  * BGT <BB#6>, %vreg183, %vreg186; GR32Bit:%vreg183,%vreg186
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#5>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg181<def> = LUI 3; GR32Bit:%vreg181
	  * %vreg184<def> = DREADPM %vreg181, 0; GR32Bit:%vreg184,%vreg181
	  * %vreg187<def> = DREADPM %vreg181, 4; GR32Bit:%vreg187,%vreg181
	  * BGT <BB#6>, %vreg184, %vreg187; GR32Bit:%vreg184,%vreg187
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#5>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#6(16) BB#5(16)

-------------
Starting new basic block BB#5
********** MI Scheduling **********
AssignFunction3:BB#5 AssignFunction3.lor.lhs.false
  From: JAL <BB#6>
    To: JAL <BB#6>
 Remaining: 5
Max Pressure: Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 0
Excess PSets: 
0 subtrees:
*** Final schedule for BB#5 ***

Partitioning instructions of the region into multiple CEs

*** Renumbered SlotIndexes 2488-3240 ***

*** Renumbered SlotIndexes 2500-3252 ***

*** Renumbered SlotIndexes 2512-3264 ***

*** Renumbered SlotIndexes 2524-3276 ***

*** Renumbered SlotIndexes 2536-3288 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
********** MI Scheduling **********
AssignFunction3:BB#5 AssignFunction3.lor.lhs.false
  From: %vreg20<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg20
    To: BLT <BB#7>, %vreg22, %vreg23; GR32Bit:%vreg22,%vreg23
 Remaining: 0
Max Pressure: GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 2
Excess PSets: 
2 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 1
SU(0):   %vreg20<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
   val SU(1): Latency=5 Reg=%vreg20

SU(1):   %vreg21<def> = LW %vreg20, 0; mem:LD4[%2] GR32Bit:%vreg21,%vreg20
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 30
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg20
  Successors:
   val SU(2): Latency=15 Reg=%vreg21

SU(2):   %vreg22<def> = LW %vreg21, 12; mem:LD4[%20] GR32Bit:%vreg22,%vreg21
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 20
  Height             : 15
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg21
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg22

SU(3):   %vreg23<def> = ADDI %zero, 251; GR32Bit:%vreg23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(4294967295): Latency=5 Reg=%vreg23

SU(0):   %vreg20<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
   val SU(1): Latency=5 Reg=%vreg20

SU(1):   %vreg21<def> = LW %vreg20, 0; mem:LD4[%2] GR32Bit:%vreg21,%vreg20
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 30
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg20
  Successors:
   val SU(2): Latency=15 Reg=%vreg21

SU(2):   %vreg22<def> = LW %vreg21, 12; mem:LD4[%20] GR32Bit:%vreg22,%vreg21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 14
  Depth              : 20
  Height             : 15
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg21
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg22

SU(3):   %vreg23<def> = ADDI %zero, 251; GR32Bit:%vreg23
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(4294967295): Latency=5 Reg=%vreg23

Pick node SU(3)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg23<def> = ADDI %zero, 251; GR32Bit:%vreg23
handleMove 2468B -> 2440B: %vreg23<def> = ADDI %zero, 251; GR32Bit:%vreg23
     %vreg23:	[2468r,2476r:0)  0@2468r
        -->	[2440r,2476r:0)  0@2440r
     zero:	[4r,4d:3)[276r,276d:2)[492r,492d:1)[708r,708d:0)  0@708r 1@492r 2@276r 3@4r
        -->	[4r,4d:3)[276r,276d:2)[492r,492d:1)[708r,708d:0)  0@708r 1@492r 2@276r 3@4r
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg20<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg20
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg21<def> = LW %vreg20, 0; mem:LD4[%2] GR32Bit:%vreg21,%vreg20
Pick node SU(2)  ILP: 3 / 21 = 0.142857 Tree: 0 @0
Scheduling %vreg22<def> = LW %vreg21, 12; mem:LD4[%20] GR32Bit:%vreg22,%vreg21
*** Final schedule for BB#5 ***
SU(3):   %vreg23<def> = ADDI %zero, 251; GR32Bit:%vreg23
SU(0):   %vreg20<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg20
SU(1):   %vreg21<def> = LW %vreg20, 0; mem:LD4[%2] GR32Bit:%vreg21,%vreg20
SU(2):   %vreg22<def> = LW %vreg21, 12; mem:LD4[%20] GR32Bit:%vreg22,%vreg21

Partitioning instructions of the region into multiple CEs
instr:  %vreg23<def> = ADDI %zero, 251; GR32Bit:%vreg23
instr:  %vreg20<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg20
instr:  %vreg21<def> = LW %vreg20, 0; mem:LD4[%2] GR32Bit:%vreg21,%vreg20
instr:  %vreg22<def> = LW %vreg21, 12; mem:LD4[%20] GR32Bit:%vreg22,%vreg21

*** Renumbered SlotIndexes 2464-3328 ***

*** Renumbered SlotIndexes 2476-3340 ***

*** Renumbered SlotIndexes 2488-3352 ***

*** Renumbered SlotIndexes 2500-3364 ***

*** Renumbered SlotIndexes 2512-3376 ***

*** Renumbered SlotIndexes 2524-3388 ***

*** Renumbered SlotIndexes 2536-3400 ***

*** Renumbered SlotIndexes 2548-3412 ***

*** Renumbered SlotIndexes 2560-3424 ***

*** Renumbered SlotIndexes 2588-3436 ***

*** Renumbered SlotIndexes 2600-3448 ***

*** Renumbered SlotIndexes 2612-3460 ***

*** Renumbered SlotIndexes 2624-3472 ***

*** Renumbered SlotIndexes 2636-3484 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs

renaming register of operand that belongs to ce 1 but was defined in0
%vreg22<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg22<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg22<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg23<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg23<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg23<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg22
renaming register of operand that belongs to ce 1 but was defined in0
%vreg23
renaming register of operand that belongs to ce 2 but was defined in0
%vreg22
renaming register of operand that belongs to ce 2 but was defined in0
%vreg23
renaming register of operand that belongs to ce 3 but was defined in0
%vreg22
renaming register of operand that belongs to ce 3 but was defined in0
%vreg23After Shuffling regions of basic block, state of BB#5:
BB#5: derived from LLVM BB %AssignFunction3.lor.lhs.false
    Predecessors according to CFG: BB#4
	%vreg23<def> = ADDI %zero, 251; GR32Bit:%vreg23
	%vreg20<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg20
	%vreg21<def> = LW %vreg20, 0; mem:LD4[%2] GR32Bit:%vreg21,%vreg20
	%vreg22<def> = LW %vreg21, 12; mem:LD4[%20] GR32Bit:%vreg22,%vreg21
	%vreg188<def> = LUI 1; GR32Bit:%vreg188
	WRITEPM %vreg188, %vreg22, 0; GR32Bit:%vreg188,%vreg22
	%vreg190<def> = LUI 2; GR32Bit:%vreg190
	WRITEPM %vreg190, %vreg22, 0; GR32Bit:%vreg190,%vreg22
	%vreg192<def> = LUI 3; GR32Bit:%vreg192
	WRITEPM %vreg192, %vreg22, 0; GR32Bit:%vreg192,%vreg22
	WRITEPM %vreg188, %vreg23, 4; GR32Bit:%vreg188,%vreg23
	WRITEPM %vreg190, %vreg23, 4; GR32Bit:%vreg190,%vreg23
	WRITEPM %vreg192, %vreg23, 4; GR32Bit:%vreg192,%vreg23
	BLT <BB#7>, %vreg22, %vreg23; GR32Bit:%vreg22,%vreg23
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#6>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg189<def> = LUI 1; GR32Bit:%vreg189
	%vreg194<def> = DREADPM %vreg189, 0; GR32Bit:%vreg194,%vreg189
	%vreg197<def> = DREADPM %vreg189, 4; GR32Bit:%vreg197,%vreg189
	BLT <BB#7>, %vreg194, %vreg197; GR32Bit:%vreg194,%vreg197
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#6>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg191<def> = LUI 2; GR32Bit:%vreg191
	%vreg195<def> = DREADPM %vreg191, 0; GR32Bit:%vreg195,%vreg191
	%vreg198<def> = DREADPM %vreg191, 4; GR32Bit:%vreg198,%vreg191
	BLT <BB#7>, %vreg195, %vreg198; GR32Bit:%vreg195,%vreg198
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#6>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg193<def> = LUI 3; GR32Bit:%vreg193
	%vreg196<def> = DREADPM %vreg193, 0; GR32Bit:%vreg196,%vreg193
	%vreg199<def> = DREADPM %vreg193, 4; GR32Bit:%vreg199,%vreg193
	BLT <BB#7>, %vreg196, %vreg199; GR32Bit:%vreg196,%vreg199
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#6>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#6(16) BB#7(16)

*** Renumbered SlotIndexes 2508-3540 ***

*** Renumbered SlotIndexes 2508-3556 ***

*** Renumbered SlotIndexes 2508-3572 ***

*** Renumbered SlotIndexes 2508-3588 ***

*** Renumbered SlotIndexes 2484-3604 ***

*** Renumbered SlotIndexes 2484-3620 ***

*** Renumbered SlotIndexes 2484-3636 ***

*** Renumbered SlotIndexes 2484-3652 ***

*** Renumbered SlotIndexes 2464-3672 ***

*** Renumbered SlotIndexes 2464-3688 ***

*** Renumbered SlotIndexes 2464-3704 ***

*** Renumbered SlotIndexes 2464-3720 ***

*** Renumbered SlotIndexes 2464-3736 ***

*** Renumbered SlotIndexes 2464-3752 ***

*** Renumbered SlotIndexes 2464-3768 ***
Creating pHyperOp bundles for CEs for bb5
  %vreg189<def> = LUI 1; GR32Bit:%vreg189
starting at   %vreg23<def> = ADDI %zero, 251; GR32Bit:%vreg23
  %vreg191<def> = LUI 2; GR32Bit:%vreg191
starting at   %vreg189<def> = LUI 1; GR32Bit:%vreg189
  %vreg193<def> = LUI 3; GR32Bit:%vreg193
starting at   %vreg191<def> = LUI 2; GR32Bit:%vreg191
starting at   %vreg193<def> = LUI 3; GR32Bit:%vreg193
After bundling, state of BB5:BB#5: derived from LLVM BB %AssignFunction3.lor.lhs.false
    Predecessors according to CFG: BB#4
	%vreg23<def> = ADDI %zero, 251; GR32Bit:%vreg23
	  * %vreg20<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg20
	  * %vreg21<def> = LW %vreg20, 0; mem:LD4[%2] GR32Bit:%vreg21,%vreg20
	  * %vreg22<def> = LW %vreg21, 12; mem:LD4[%20] GR32Bit:%vreg22,%vreg21
	  * %vreg188<def> = LUI 1; GR32Bit:%vreg188
	  * WRITEPM %vreg188, %vreg22, 0; GR32Bit:%vreg188,%vreg22
	  * %vreg190<def> = LUI 2; GR32Bit:%vreg190
	  * WRITEPM %vreg190, %vreg22, 0; GR32Bit:%vreg190,%vreg22
	  * %vreg192<def> = LUI 3; GR32Bit:%vreg192
	  * WRITEPM %vreg192, %vreg22, 0; GR32Bit:%vreg192,%vreg22
	  * WRITEPM %vreg188, %vreg23, 4; GR32Bit:%vreg188,%vreg23
	  * WRITEPM %vreg190, %vreg23, 4; GR32Bit:%vreg190,%vreg23
	  * WRITEPM %vreg192, %vreg23, 4; GR32Bit:%vreg192,%vreg23
	  * BLT <BB#7>, %vreg22, %vreg23; GR32Bit:%vreg22,%vreg23
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#6>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg189<def> = LUI 1; GR32Bit:%vreg189
	  * %vreg194<def> = DREADPM %vreg189, 0; GR32Bit:%vreg194,%vreg189
	  * %vreg197<def> = DREADPM %vreg189, 4; GR32Bit:%vreg197,%vreg189
	  * BLT <BB#7>, %vreg194, %vreg197; GR32Bit:%vreg194,%vreg197
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#6>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg191<def> = LUI 2; GR32Bit:%vreg191
	  * %vreg195<def> = DREADPM %vreg191, 0; GR32Bit:%vreg195,%vreg191
	  * %vreg198<def> = DREADPM %vreg191, 4; GR32Bit:%vreg198,%vreg191
	  * BLT <BB#7>, %vreg195, %vreg198; GR32Bit:%vreg195,%vreg198
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#6>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg193<def> = LUI 3; GR32Bit:%vreg193
	  * %vreg196<def> = DREADPM %vreg193, 0; GR32Bit:%vreg196,%vreg193
	  * %vreg199<def> = DREADPM %vreg193, 4; GR32Bit:%vreg199,%vreg193
	  * BLT <BB#7>, %vreg196, %vreg199; GR32Bit:%vreg196,%vreg199
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#6>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#6(16) BB#7(16)

-------------
Starting new basic block BB#6
********** MI Scheduling **********
AssignFunction3:BB#6 AssignFunction3.if.then9
  From: %vreg24<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg24
    To: End Remaining: 0
Max Pressure: GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 2
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 0
  SU(5) in tree 0
SU(0):   %vreg24<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
   val SU(2): Latency=5 Reg=%vreg24

SU(1):   %vreg25<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
   val SU(2): Latency=5 Reg=%vreg25

SU(2):   %vreg26<def> = ADD %vreg25, %vreg24; GR32Bit:%vreg26,%vreg25,%vreg24
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 24
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg25
   val SU(0): Latency=5 Reg=%vreg24
  Successors:
   val SU(5): Latency=5 Reg=%vreg26
   val SU(3): Latency=5 Reg=%vreg26

SU(3):   %vreg27<def> = LW %vreg26, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg27,%vreg26
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 19
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg26
  Successors:
   val SU(4): Latency=15 Reg=%vreg27
   ch  SU(5): Latency=0

SU(4):   %vreg28<def> = ORI %vreg27, 4; GR32Bit:%vreg28,%vreg27
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 4
  Predecessors:
   val SU(3): Latency=15 Reg=%vreg27
  Successors:
   val SU(5): Latency=4 Reg=%vreg28

SU(5):   SW %vreg28, %vreg26, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg28,%vreg26
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 29
  Height             : 0
  Predecessors:
   val SU(4): Latency=4 Reg=%vreg28
   val SU(2): Latency=5 Reg=%vreg26
   ch  SU(3): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg24<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
   val SU(2): Latency=5 Reg=%vreg24

SU(1):   %vreg25<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
   val SU(2): Latency=5 Reg=%vreg25

SU(2):   %vreg26<def> = ADD %vreg25, %vreg24; GR32Bit:%vreg26,%vreg25,%vreg24
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 24
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg25
   val SU(0): Latency=5 Reg=%vreg24
  Successors:
   val SU(5): Latency=5 Reg=%vreg26
   val SU(3): Latency=5 Reg=%vreg26

SU(3):   %vreg27<def> = LW %vreg26, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg27,%vreg26
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 19
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg26
  Successors:
   val SU(4): Latency=15 Reg=%vreg27
   ch  SU(5): Latency=0

SU(4):   %vreg28<def> = ORI %vreg27, 4; GR32Bit:%vreg28,%vreg27
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 4
  Predecessors:
   val SU(3): Latency=15 Reg=%vreg27
  Successors:
   val SU(5): Latency=4 Reg=%vreg28

SU(5):   SW %vreg28, %vreg26, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg28,%vreg26
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 29
  Height             : 0
  Predecessors:
   val SU(4): Latency=4 Reg=%vreg28
   val SU(2): Latency=5 Reg=%vreg26
   ch  SU(3): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(1)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg25<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg25
handleMove 3048B -> 3036B: %vreg25<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg25
     %vreg25:	[3048r,3056r:0)  0@3048r
        -->	[3036r,3056r:0)  0@3036r
     zero:	[4r,4d:3)[276r,276d:2)[492r,492d:1)[708r,708d:0)  0@708r 1@492r 2@276r 3@4r
        -->	[4r,4d:3)[276r,276d:2)[492r,492d:1)[708r,708d:0)  0@708r 1@492r 2@276r 3@4r
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg24<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg24
Pick node SU(2)  ILP: 3 / 6 = 0.5 Tree: 0 @0
Scheduling %vreg26<def> = ADD %vreg25, %vreg24; GR32Bit:%vreg26,%vreg25,%vreg24
Pick node SU(3)  ILP: 4 / 11 = 0.363636 Tree: 0 @0
Scheduling %vreg27<def> = LW %vreg26, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg27,%vreg26
Pick node SU(4)  ILP: 5 / 26 = 0.192308 Tree: 0 @0
Scheduling %vreg28<def> = ORI %vreg27, 4; GR32Bit:%vreg28,%vreg27
Pick node SU(5)  ILP: 6 / 30 = 0.2 Tree: 0 @0
Scheduling SW %vreg28, %vreg26, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg28,%vreg26
*** Final schedule for BB#6 ***
SU(1):   %vreg25<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg25
SU(0):   %vreg24<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg24
SU(2):   %vreg26<def> = ADD %vreg25, %vreg24; GR32Bit:%vreg26,%vreg25,%vreg24
SU(3):   %vreg27<def> = LW %vreg26, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg27,%vreg26
SU(4):   %vreg28<def> = ORI %vreg27, 4; GR32Bit:%vreg28,%vreg27
SU(5):   SW %vreg28, %vreg26, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg28,%vreg26

Partitioning instructions of the region into multiple CEs
instr:  %vreg25<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg25
instr:  %vreg24<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg24
instr:  %vreg26<def> = ADD %vreg25, %vreg24; GR32Bit:%vreg26,%vreg25,%vreg24
instr:  %vreg27<def> = LW %vreg26, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg27,%vreg26
instr:  %vreg28<def> = ORI %vreg27, 4; GR32Bit:%vreg28,%vreg27
instr:  SW %vreg28, %vreg26, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg28,%vreg26
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
After Shuffling regions of basic block, state of BB#6:
BB#6: derived from LLVM BB %AssignFunction3.if.then9
    Predecessors according to CFG: BB#4 BB#5
	%vreg25<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg25
	%vreg24<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg24
	%vreg26<def> = ADD %vreg25, %vreg24; GR32Bit:%vreg26,%vreg25,%vreg24
	%vreg27<def> = LW %vreg26, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg27,%vreg26
	%vreg28<def> = ORI %vreg27, 4; GR32Bit:%vreg28,%vreg27
	SW %vreg28, %vreg26, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg28,%vreg26
    Successors according to CFG: BB#7
Creating pHyperOp bundles for CEs for bb6
starting at   %vreg25<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg25

*** Renumbered SlotIndexes 3036-3780 ***
starting at   %zero<def> = ADDI %zero, 0
starting at   %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 3048-3792 ***
starting at   %zero<def> = ADDI %zero, 0
After bundling, state of BB6:BB#6: derived from LLVM BB %AssignFunction3.if.then9
    Predecessors according to CFG: BB#4 BB#5
	%vreg25<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg25
	  * %vreg24<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg24
	  * %vreg26<def> = ADD %vreg25, %vreg24; GR32Bit:%vreg26,%vreg25,%vreg24
	  * %vreg27<def> = LW %vreg26, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg27,%vreg26
	  * %vreg28<def> = ORI %vreg27, 4; GR32Bit:%vreg28,%vreg27
	  * SW %vreg28, %vreg26, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg28,%vreg26
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#7

-------------
Starting new basic block BB#7
********** MI Scheduling **********
AssignFunction3:BB#7 AssignFunction3.if.end11
  From: JAL <BB#8>
    To: JAL <BB#8>
 Remaining: 4
Max Pressure: Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 0
Excess PSets: 
0 subtrees:
*** Final schedule for BB#7 ***

Partitioning instructions of the region into multiple CEs

*** Renumbered SlotIndexes 3156-3804 ***

*** Renumbered SlotIndexes 3168-3816 ***

*** Renumbered SlotIndexes 3180-3828 ***

*** Renumbered SlotIndexes 3192-3840 ***

*** Renumbered SlotIndexes 3204-3852 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
********** MI Scheduling **********
AssignFunction3:BB#7 AssignFunction3.if.end11
  From: %vreg29<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg29
    To: BEQ <BB#9>, %vreg31, %zero; GR32Bit:%vreg31
 Remaining: 0
Max Pressure: GR32Bit=1
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 1
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
SU(0):   %vreg29<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
   val SU(1): Latency=5 Reg=%vreg29

SU(1):   %vreg30<def> = LW %vreg29, 0; mem:LD4[%2] GR32Bit:%vreg30,%vreg29
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 30
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg29
  Successors:
   val SU(2): Latency=15 Reg=%vreg30

SU(2):   %vreg31<def> = LW %vreg30, 16; mem:LD4[%26] GR32Bit:%vreg31,%vreg30
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 20
  Height             : 15
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg30
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg31

SU(0):   %vreg29<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
   val SU(1): Latency=5 Reg=%vreg29

SU(1):   %vreg30<def> = LW %vreg29, 0; mem:LD4[%2] GR32Bit:%vreg30,%vreg29
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 30
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg29
  Successors:
   val SU(2): Latency=15 Reg=%vreg30

SU(2):   %vreg31<def> = LW %vreg30, 16; mem:LD4[%26] GR32Bit:%vreg31,%vreg30
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 14
  Depth              : 20
  Height             : 15
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg30
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg31

Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg29<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg29
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg30<def> = LW %vreg29, 0; mem:LD4[%2] GR32Bit:%vreg30,%vreg29
Pick node SU(2)  ILP: 3 / 21 = 0.142857 Tree: 0 @0
Scheduling %vreg31<def> = LW %vreg30, 16; mem:LD4[%26] GR32Bit:%vreg31,%vreg30
*** Final schedule for BB#7 ***
SU(0):   %vreg29<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg29
SU(1):   %vreg30<def> = LW %vreg29, 0; mem:LD4[%2] GR32Bit:%vreg30,%vreg29
SU(2):   %vreg31<def> = LW %vreg30, 16; mem:LD4[%26] GR32Bit:%vreg31,%vreg30

Partitioning instructions of the region into multiple CEs
instr:  %vreg29<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg29
instr:  %vreg30<def> = LW %vreg29, 0; mem:LD4[%2] GR32Bit:%vreg30,%vreg29
instr:  %vreg31<def> = LW %vreg30, 16; mem:LD4[%26] GR32Bit:%vreg31,%vreg30

*** Renumbered SlotIndexes 3140-3892 ***

*** Renumbered SlotIndexes 3152-3904 ***

*** Renumbered SlotIndexes 3164-3916 ***

*** Renumbered SlotIndexes 3176-3928 ***

*** Renumbered SlotIndexes 3188-3940 ***

*** Renumbered SlotIndexes 3200-3952 ***

*** Renumbered SlotIndexes 3220-3964 ***

*** Renumbered SlotIndexes 3232-3976 ***

*** Renumbered SlotIndexes 3244-3988 ***

*** Renumbered SlotIndexes 3256-4000 ***

*** Renumbered SlotIndexes 3268-4012 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs

renaming register of operand that belongs to ce 1 but was defined in0
%vreg31<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg31<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg31<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg31
renaming register of operand that belongs to ce 2 but was defined in0
%vreg31
renaming register of operand that belongs to ce 3 but was defined in0
%vreg31After Shuffling regions of basic block, state of BB#7:
BB#7: derived from LLVM BB %AssignFunction3.if.end11
    Predecessors according to CFG: BB#5 BB#6
	%vreg29<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg29
	%vreg30<def> = LW %vreg29, 0; mem:LD4[%2] GR32Bit:%vreg30,%vreg29
	%vreg31<def> = LW %vreg30, 16; mem:LD4[%26] GR32Bit:%vreg31,%vreg30
	%vreg200<def> = LUI 1; GR32Bit:%vreg200
	WRITEPM %vreg200, %vreg31, 0; GR32Bit:%vreg200,%vreg31
	%vreg202<def> = LUI 2; GR32Bit:%vreg202
	WRITEPM %vreg202, %vreg31, 0; GR32Bit:%vreg202,%vreg31
	%vreg204<def> = LUI 3; GR32Bit:%vreg204
	WRITEPM %vreg204, %vreg31, 0; GR32Bit:%vreg204,%vreg31
	BEQ <BB#9>, %vreg31, %zero; GR32Bit:%vreg31
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#8>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg201<def> = LUI 1; GR32Bit:%vreg201
	%vreg206<def> = DREADPM %vreg201, 0; GR32Bit:%vreg206,%vreg201
	BEQ <BB#9>, %vreg206, %zero; GR32Bit:%vreg206
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#8>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg203<def> = LUI 2; GR32Bit:%vreg203
	%vreg207<def> = DREADPM %vreg203, 0; GR32Bit:%vreg207,%vreg203
	BEQ <BB#9>, %vreg207, %zero; GR32Bit:%vreg207
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#8>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg205<def> = LUI 3; GR32Bit:%vreg205
	%vreg208<def> = DREADPM %vreg205, 0; GR32Bit:%vreg208,%vreg205
	BEQ <BB#9>, %vreg208, %zero; GR32Bit:%vreg208
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#8>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#8(20) BB#9(12)

*** Renumbered SlotIndexes 3184-4056 ***

*** Renumbered SlotIndexes 3184-4072 ***

*** Renumbered SlotIndexes 3184-4088 ***

*** Renumbered SlotIndexes 3160-4112 ***

*** Renumbered SlotIndexes 3160-4128 ***

*** Renumbered SlotIndexes 3160-4144 ***

*** Renumbered SlotIndexes 3140-4172 ***

*** Renumbered SlotIndexes 3140-4188 ***

*** Renumbered SlotIndexes 3140-4204 ***

*** Renumbered SlotIndexes 3140-4220 ***

*** Renumbered SlotIndexes 3140-4236 ***
Creating pHyperOp bundles for CEs for bb7
  %vreg201<def> = LUI 1; GR32Bit:%vreg201
starting at   %vreg29<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg29
  %vreg203<def> = LUI 2; GR32Bit:%vreg203
starting at   %vreg201<def> = LUI 1; GR32Bit:%vreg201
  %vreg205<def> = LUI 3; GR32Bit:%vreg205
starting at   %vreg203<def> = LUI 2; GR32Bit:%vreg203
starting at   %vreg205<def> = LUI 3; GR32Bit:%vreg205
After bundling, state of BB7:BB#7: derived from LLVM BB %AssignFunction3.if.end11
    Predecessors according to CFG: BB#5 BB#6
	%vreg29<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg29
	  * %vreg30<def> = LW %vreg29, 0; mem:LD4[%2] GR32Bit:%vreg30,%vreg29
	  * %vreg31<def> = LW %vreg30, 16; mem:LD4[%26] GR32Bit:%vreg31,%vreg30
	  * %vreg200<def> = LUI 1; GR32Bit:%vreg200
	  * WRITEPM %vreg200, %vreg31, 0; GR32Bit:%vreg200,%vreg31
	  * %vreg202<def> = LUI 2; GR32Bit:%vreg202
	  * WRITEPM %vreg202, %vreg31, 0; GR32Bit:%vreg202,%vreg31
	  * %vreg204<def> = LUI 3; GR32Bit:%vreg204
	  * WRITEPM %vreg204, %vreg31, 0; GR32Bit:%vreg204,%vreg31
	  * BEQ <BB#9>, %vreg31, %zero; GR32Bit:%vreg31
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#8>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg201<def> = LUI 1; GR32Bit:%vreg201
	  * %vreg206<def> = DREADPM %vreg201, 0; GR32Bit:%vreg206,%vreg201
	  * BEQ <BB#9>, %vreg206, %zero; GR32Bit:%vreg206
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#8>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg203<def> = LUI 2; GR32Bit:%vreg203
	  * %vreg207<def> = DREADPM %vreg203, 0; GR32Bit:%vreg207,%vreg203
	  * BEQ <BB#9>, %vreg207, %zero; GR32Bit:%vreg207
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#8>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg205<def> = LUI 3; GR32Bit:%vreg205
	  * %vreg208<def> = DREADPM %vreg205, 0; GR32Bit:%vreg208,%vreg205
	  * BEQ <BB#9>, %vreg208, %zero; GR32Bit:%vreg208
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#8>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#8(20) BB#9(12)

-------------
Starting new basic block BB#8
********** MI Scheduling **********
AssignFunction3:BB#8 AssignFunction3.if.then14
  From: %vreg32<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg32
    To: End Remaining: 0
Max Pressure: GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 2
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 0
  SU(5) in tree 0
SU(0):   %vreg32<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
   val SU(2): Latency=5 Reg=%vreg32

SU(1):   %vreg33<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
   val SU(2): Latency=5 Reg=%vreg33

SU(2):   %vreg34<def> = ADD %vreg33, %vreg32; GR32Bit:%vreg34,%vreg33,%vreg32
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 24
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg33
   val SU(0): Latency=5 Reg=%vreg32
  Successors:
   val SU(5): Latency=5 Reg=%vreg34
   val SU(3): Latency=5 Reg=%vreg34

SU(3):   %vreg35<def> = LW %vreg34, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg35,%vreg34
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 19
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg34
  Successors:
   val SU(4): Latency=15 Reg=%vreg35
   ch  SU(5): Latency=0

SU(4):   %vreg36<def> = ORI %vreg35, 16; GR32Bit:%vreg36,%vreg35
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 4
  Predecessors:
   val SU(3): Latency=15 Reg=%vreg35
  Successors:
   val SU(5): Latency=4 Reg=%vreg36

SU(5):   SW %vreg36, %vreg34, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg36,%vreg34
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 29
  Height             : 0
  Predecessors:
   val SU(4): Latency=4 Reg=%vreg36
   val SU(2): Latency=5 Reg=%vreg34
   ch  SU(3): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg32<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
   val SU(2): Latency=5 Reg=%vreg32

SU(1):   %vreg33<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
   val SU(2): Latency=5 Reg=%vreg33

SU(2):   %vreg34<def> = ADD %vreg33, %vreg32; GR32Bit:%vreg34,%vreg33,%vreg32
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 24
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg33
   val SU(0): Latency=5 Reg=%vreg32
  Successors:
   val SU(5): Latency=5 Reg=%vreg34
   val SU(3): Latency=5 Reg=%vreg34

SU(3):   %vreg35<def> = LW %vreg34, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg35,%vreg34
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 19
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg34
  Successors:
   val SU(4): Latency=15 Reg=%vreg35
   ch  SU(5): Latency=0

SU(4):   %vreg36<def> = ORI %vreg35, 16; GR32Bit:%vreg36,%vreg35
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 4
  Predecessors:
   val SU(3): Latency=15 Reg=%vreg35
  Successors:
   val SU(5): Latency=4 Reg=%vreg36

SU(5):   SW %vreg36, %vreg34, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg36,%vreg34
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 29
  Height             : 0
  Predecessors:
   val SU(4): Latency=4 Reg=%vreg36
   val SU(2): Latency=5 Reg=%vreg34
   ch  SU(3): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(1)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg33<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg33
handleMove 3620B -> 3608B: %vreg33<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg33
     %vreg33:	[3620r,3628r:0)  0@3620r
        -->	[3608r,3628r:0)  0@3608r
     zero:	[4r,4d:3)[276r,276d:2)[492r,492d:1)[708r,708d:0)  0@708r 1@492r 2@276r 3@4r
        -->	[4r,4d:3)[276r,276d:2)[492r,492d:1)[708r,708d:0)  0@708r 1@492r 2@276r 3@4r
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg32<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg32
Pick node SU(2)  ILP: 3 / 6 = 0.5 Tree: 0 @0
Scheduling %vreg34<def> = ADD %vreg33, %vreg32; GR32Bit:%vreg34,%vreg33,%vreg32
Pick node SU(3)  ILP: 4 / 11 = 0.363636 Tree: 0 @0
Scheduling %vreg35<def> = LW %vreg34, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg35,%vreg34
Pick node SU(4)  ILP: 5 / 26 = 0.192308 Tree: 0 @0
Scheduling %vreg36<def> = ORI %vreg35, 16; GR32Bit:%vreg36,%vreg35
Pick node SU(5)  ILP: 6 / 30 = 0.2 Tree: 0 @0
Scheduling SW %vreg36, %vreg34, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg36,%vreg34
*** Final schedule for BB#8 ***
SU(1):   %vreg33<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg33
SU(0):   %vreg32<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg32
SU(2):   %vreg34<def> = ADD %vreg33, %vreg32; GR32Bit:%vreg34,%vreg33,%vreg32
SU(3):   %vreg35<def> = LW %vreg34, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg35,%vreg34
SU(4):   %vreg36<def> = ORI %vreg35, 16; GR32Bit:%vreg36,%vreg35
SU(5):   SW %vreg36, %vreg34, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg36,%vreg34

Partitioning instructions of the region into multiple CEs
instr:  %vreg33<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg33
instr:  %vreg32<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg32
instr:  %vreg34<def> = ADD %vreg33, %vreg32; GR32Bit:%vreg34,%vreg33,%vreg32
instr:  %vreg35<def> = LW %vreg34, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg35,%vreg34
instr:  %vreg36<def> = ORI %vreg35, 16; GR32Bit:%vreg36,%vreg35
instr:  SW %vreg36, %vreg34, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg36,%vreg34
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
After Shuffling regions of basic block, state of BB#8:
BB#8: derived from LLVM BB %AssignFunction3.if.then14
    Predecessors according to CFG: BB#7
	%vreg33<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg33
	%vreg32<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg32
	%vreg34<def> = ADD %vreg33, %vreg32; GR32Bit:%vreg34,%vreg33,%vreg32
	%vreg35<def> = LW %vreg34, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg35,%vreg34
	%vreg36<def> = ORI %vreg35, 16; GR32Bit:%vreg36,%vreg35
	SW %vreg36, %vreg34, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg36,%vreg34
    Successors according to CFG: BB#9
Creating pHyperOp bundles for CEs for bb8
starting at   %vreg33<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg33

*** Renumbered SlotIndexes 3608-4248 ***
starting at   %zero<def> = ADDI %zero, 0
starting at   %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 3620-4260 ***
starting at   %zero<def> = ADDI %zero, 0
After bundling, state of BB8:BB#8: derived from LLVM BB %AssignFunction3.if.then14
    Predecessors according to CFG: BB#7
	%vreg33<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg33
	  * %vreg32<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg32
	  * %vreg34<def> = ADD %vreg33, %vreg32; GR32Bit:%vreg34,%vreg33,%vreg32
	  * %vreg35<def> = LW %vreg34, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg35,%vreg34
	  * %vreg36<def> = ORI %vreg35, 16; GR32Bit:%vreg36,%vreg35
	  * SW %vreg36, %vreg34, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg36,%vreg34
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#9

-------------
Starting new basic block BB#9
********** MI Scheduling **********
AssignFunction3:BB#9 AssignFunction3.if.end16
  From: JAL <BB#10>
    To: JAL <BB#10>
 Remaining: 4
Max Pressure: Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 0
Excess PSets: 
0 subtrees:
*** Final schedule for BB#9 ***

Partitioning instructions of the region into multiple CEs

*** Renumbered SlotIndexes 3728-4272 ***

*** Renumbered SlotIndexes 3740-4284 ***

*** Renumbered SlotIndexes 3752-4296 ***

*** Renumbered SlotIndexes 3764-4308 ***

*** Renumbered SlotIndexes 3776-4320 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
********** MI Scheduling **********
AssignFunction3:BB#9 AssignFunction3.if.end16
  From: %vreg37<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg37
    To: BEQ <BB#11>, %vreg39, %zero; GR32Bit:%vreg39
 Remaining: 0
Max Pressure: GR32Bit=1
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 1
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
SU(0):   %vreg37<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg37
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
   val SU(1): Latency=5 Reg=%vreg37

SU(1):   %vreg38<def> = LW %vreg37, 0; mem:LD4[%2] GR32Bit:%vreg38,%vreg37
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 30
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg37
  Successors:
   val SU(2): Latency=15 Reg=%vreg38

SU(2):   %vreg39<def> = LW %vreg38, 20; mem:LD4[%32] GR32Bit:%vreg39,%vreg38
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 20
  Height             : 15
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg38
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg39

SU(0):   %vreg37<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg37
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
   val SU(1): Latency=5 Reg=%vreg37

SU(1):   %vreg38<def> = LW %vreg37, 0; mem:LD4[%2] GR32Bit:%vreg38,%vreg37
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 30
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg37
  Successors:
   val SU(2): Latency=15 Reg=%vreg38

SU(2):   %vreg39<def> = LW %vreg38, 20; mem:LD4[%32] GR32Bit:%vreg39,%vreg38
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 14
  Depth              : 20
  Height             : 15
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg38
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg39

Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg37<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg37
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg38<def> = LW %vreg37, 0; mem:LD4[%2] GR32Bit:%vreg38,%vreg37
Pick node SU(2)  ILP: 3 / 21 = 0.142857 Tree: 0 @0
Scheduling %vreg39<def> = LW %vreg38, 20; mem:LD4[%32] GR32Bit:%vreg39,%vreg38
*** Final schedule for BB#9 ***
SU(0):   %vreg37<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg37
SU(1):   %vreg38<def> = LW %vreg37, 0; mem:LD4[%2] GR32Bit:%vreg38,%vreg37
SU(2):   %vreg39<def> = LW %vreg38, 20; mem:LD4[%32] GR32Bit:%vreg39,%vreg38

Partitioning instructions of the region into multiple CEs
instr:  %vreg37<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg37
instr:  %vreg38<def> = LW %vreg37, 0; mem:LD4[%2] GR32Bit:%vreg38,%vreg37
instr:  %vreg39<def> = LW %vreg38, 20; mem:LD4[%32] GR32Bit:%vreg39,%vreg38

*** Renumbered SlotIndexes 3712-4360 ***

*** Renumbered SlotIndexes 3724-4372 ***

*** Renumbered SlotIndexes 3736-4384 ***

*** Renumbered SlotIndexes 3748-4396 ***

*** Renumbered SlotIndexes 3760-4408 ***

*** Renumbered SlotIndexes 3772-4420 ***

*** Renumbered SlotIndexes 3792-4432 ***

*** Renumbered SlotIndexes 3804-4444 ***

*** Renumbered SlotIndexes 3816-4456 ***

*** Renumbered SlotIndexes 3828-4468 ***

*** Renumbered SlotIndexes 3840-4480 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs

renaming register of operand that belongs to ce 1 but was defined in0
%vreg39<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg39<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg39<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg39
renaming register of operand that belongs to ce 2 but was defined in0
%vreg39
renaming register of operand that belongs to ce 3 but was defined in0
%vreg39After Shuffling regions of basic block, state of BB#9:
BB#9: derived from LLVM BB %AssignFunction3.if.end16
    Predecessors according to CFG: BB#7 BB#8
	%vreg37<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg37
	%vreg38<def> = LW %vreg37, 0; mem:LD4[%2] GR32Bit:%vreg38,%vreg37
	%vreg39<def> = LW %vreg38, 20; mem:LD4[%32] GR32Bit:%vreg39,%vreg38
	%vreg209<def> = LUI 1; GR32Bit:%vreg209
	WRITEPM %vreg209, %vreg39, 0; GR32Bit:%vreg209,%vreg39
	%vreg211<def> = LUI 2; GR32Bit:%vreg211
	WRITEPM %vreg211, %vreg39, 0; GR32Bit:%vreg211,%vreg39
	%vreg213<def> = LUI 3; GR32Bit:%vreg213
	WRITEPM %vreg213, %vreg39, 0; GR32Bit:%vreg213,%vreg39
	BEQ <BB#11>, %vreg39, %zero; GR32Bit:%vreg39
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#10>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg210<def> = LUI 1; GR32Bit:%vreg210
	%vreg215<def> = DREADPM %vreg210, 0; GR32Bit:%vreg215,%vreg210
	BEQ <BB#11>, %vreg215, %zero; GR32Bit:%vreg215
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#10>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg212<def> = LUI 2; GR32Bit:%vreg212
	%vreg216<def> = DREADPM %vreg212, 0; GR32Bit:%vreg216,%vreg212
	BEQ <BB#11>, %vreg216, %zero; GR32Bit:%vreg216
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#10>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg214<def> = LUI 3; GR32Bit:%vreg214
	%vreg217<def> = DREADPM %vreg214, 0; GR32Bit:%vreg217,%vreg214
	BEQ <BB#11>, %vreg217, %zero; GR32Bit:%vreg217
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#10>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#10(20) BB#11(12)

*** Renumbered SlotIndexes 3756-4524 ***

*** Renumbered SlotIndexes 3756-4540 ***

*** Renumbered SlotIndexes 3756-4556 ***

*** Renumbered SlotIndexes 3732-4580 ***

*** Renumbered SlotIndexes 3732-4596 ***

*** Renumbered SlotIndexes 3732-4612 ***

*** Renumbered SlotIndexes 3712-4640 ***

*** Renumbered SlotIndexes 3712-4656 ***

*** Renumbered SlotIndexes 3712-4672 ***

*** Renumbered SlotIndexes 3712-4688 ***

*** Renumbered SlotIndexes 3712-4704 ***
Creating pHyperOp bundles for CEs for bb9
  %vreg210<def> = LUI 1; GR32Bit:%vreg210
starting at   %vreg37<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg37
  %vreg212<def> = LUI 2; GR32Bit:%vreg212
starting at   %vreg210<def> = LUI 1; GR32Bit:%vreg210
  %vreg214<def> = LUI 3; GR32Bit:%vreg214
starting at   %vreg212<def> = LUI 2; GR32Bit:%vreg212
starting at   %vreg214<def> = LUI 3; GR32Bit:%vreg214
After bundling, state of BB9:BB#9: derived from LLVM BB %AssignFunction3.if.end16
    Predecessors according to CFG: BB#7 BB#8
	%vreg37<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg37
	  * %vreg38<def> = LW %vreg37, 0; mem:LD4[%2] GR32Bit:%vreg38,%vreg37
	  * %vreg39<def> = LW %vreg38, 20; mem:LD4[%32] GR32Bit:%vreg39,%vreg38
	  * %vreg209<def> = LUI 1; GR32Bit:%vreg209
	  * WRITEPM %vreg209, %vreg39, 0; GR32Bit:%vreg209,%vreg39
	  * %vreg211<def> = LUI 2; GR32Bit:%vreg211
	  * WRITEPM %vreg211, %vreg39, 0; GR32Bit:%vreg211,%vreg39
	  * %vreg213<def> = LUI 3; GR32Bit:%vreg213
	  * WRITEPM %vreg213, %vreg39, 0; GR32Bit:%vreg213,%vreg39
	  * BEQ <BB#11>, %vreg39, %zero; GR32Bit:%vreg39
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#10>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg210<def> = LUI 1; GR32Bit:%vreg210
	  * %vreg215<def> = DREADPM %vreg210, 0; GR32Bit:%vreg215,%vreg210
	  * BEQ <BB#11>, %vreg215, %zero; GR32Bit:%vreg215
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#10>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg212<def> = LUI 2; GR32Bit:%vreg212
	  * %vreg216<def> = DREADPM %vreg212, 0; GR32Bit:%vreg216,%vreg212
	  * BEQ <BB#11>, %vreg216, %zero; GR32Bit:%vreg216
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#10>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg214<def> = LUI 3; GR32Bit:%vreg214
	  * %vreg217<def> = DREADPM %vreg214, 0; GR32Bit:%vreg217,%vreg214
	  * BEQ <BB#11>, %vreg217, %zero; GR32Bit:%vreg217
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#10>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#10(20) BB#11(12)

-------------
Starting new basic block BB#10
********** MI Scheduling **********
AssignFunction3:BB#10 AssignFunction3.if.then19
  From: %vreg40<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg40
    To: End Remaining: 0
Max Pressure: GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 2
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 0
  SU(5) in tree 0
SU(0):   %vreg40<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg40
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
   val SU(2): Latency=5 Reg=%vreg40

SU(1):   %vreg41<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg41
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
   val SU(2): Latency=5 Reg=%vreg41

SU(2):   %vreg42<def> = ADD %vreg41, %vreg40; GR32Bit:%vreg42,%vreg41,%vreg40
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 24
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg41
   val SU(0): Latency=5 Reg=%vreg40
  Successors:
   val SU(5): Latency=5 Reg=%vreg42
   val SU(3): Latency=5 Reg=%vreg42

SU(3):   %vreg43<def> = LW %vreg42, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg43,%vreg42
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 19
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg42
  Successors:
   val SU(4): Latency=15 Reg=%vreg43
   ch  SU(5): Latency=0

SU(4):   %vreg44<def> = ORI %vreg43, 32; GR32Bit:%vreg44,%vreg43
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 4
  Predecessors:
   val SU(3): Latency=15 Reg=%vreg43
  Successors:
   val SU(5): Latency=4 Reg=%vreg44

SU(5):   SW %vreg44, %vreg42, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg44,%vreg42
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 29
  Height             : 0
  Predecessors:
   val SU(4): Latency=4 Reg=%vreg44
   val SU(2): Latency=5 Reg=%vreg42
   ch  SU(3): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg40<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg40
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
   val SU(2): Latency=5 Reg=%vreg40

SU(1):   %vreg41<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg41
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
   val SU(2): Latency=5 Reg=%vreg41

SU(2):   %vreg42<def> = ADD %vreg41, %vreg40; GR32Bit:%vreg42,%vreg41,%vreg40
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 24
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg41
   val SU(0): Latency=5 Reg=%vreg40
  Successors:
   val SU(5): Latency=5 Reg=%vreg42
   val SU(3): Latency=5 Reg=%vreg42

SU(3):   %vreg43<def> = LW %vreg42, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg43,%vreg42
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 19
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg42
  Successors:
   val SU(4): Latency=15 Reg=%vreg43
   ch  SU(5): Latency=0

SU(4):   %vreg44<def> = ORI %vreg43, 32; GR32Bit:%vreg44,%vreg43
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 4
  Predecessors:
   val SU(3): Latency=15 Reg=%vreg43
  Successors:
   val SU(5): Latency=4 Reg=%vreg44

SU(5):   SW %vreg44, %vreg42, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg44,%vreg42
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 29
  Height             : 0
  Predecessors:
   val SU(4): Latency=4 Reg=%vreg44
   val SU(2): Latency=5 Reg=%vreg42
   ch  SU(3): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(1)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg41<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg41
handleMove 4192B -> 4180B: %vreg41<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg41
     %vreg41:	[4192r,4200r:0)  0@4192r
        -->	[4180r,4200r:0)  0@4180r
     zero:	[4r,4d:3)[276r,276d:2)[492r,492d:1)[708r,708d:0)  0@708r 1@492r 2@276r 3@4r
        -->	[4r,4d:3)[276r,276d:2)[492r,492d:1)[708r,708d:0)  0@708r 1@492r 2@276r 3@4r
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg40<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg40
Pick node SU(2)  ILP: 3 / 6 = 0.5 Tree: 0 @0
Scheduling %vreg42<def> = ADD %vreg41, %vreg40; GR32Bit:%vreg42,%vreg41,%vreg40
Pick node SU(3)  ILP: 4 / 11 = 0.363636 Tree: 0 @0
Scheduling %vreg43<def> = LW %vreg42, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg43,%vreg42
Pick node SU(4)  ILP: 5 / 26 = 0.192308 Tree: 0 @0
Scheduling %vreg44<def> = ORI %vreg43, 32; GR32Bit:%vreg44,%vreg43
Pick node SU(5)  ILP: 6 / 30 = 0.2 Tree: 0 @0
Scheduling SW %vreg44, %vreg42, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg44,%vreg42
*** Final schedule for BB#10 ***
SU(1):   %vreg41<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg41
SU(0):   %vreg40<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg40
SU(2):   %vreg42<def> = ADD %vreg41, %vreg40; GR32Bit:%vreg42,%vreg41,%vreg40
SU(3):   %vreg43<def> = LW %vreg42, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg43,%vreg42
SU(4):   %vreg44<def> = ORI %vreg43, 32; GR32Bit:%vreg44,%vreg43
SU(5):   SW %vreg44, %vreg42, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg44,%vreg42

Partitioning instructions of the region into multiple CEs
instr:  %vreg41<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg41
instr:  %vreg40<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg40
instr:  %vreg42<def> = ADD %vreg41, %vreg40; GR32Bit:%vreg42,%vreg41,%vreg40
instr:  %vreg43<def> = LW %vreg42, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg43,%vreg42
instr:  %vreg44<def> = ORI %vreg43, 32; GR32Bit:%vreg44,%vreg43
instr:  SW %vreg44, %vreg42, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg44,%vreg42
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
After Shuffling regions of basic block, state of BB#10:
BB#10: derived from LLVM BB %AssignFunction3.if.then19
    Predecessors according to CFG: BB#9
	%vreg41<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg41
	%vreg40<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg40
	%vreg42<def> = ADD %vreg41, %vreg40; GR32Bit:%vreg42,%vreg41,%vreg40
	%vreg43<def> = LW %vreg42, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg43,%vreg42
	%vreg44<def> = ORI %vreg43, 32; GR32Bit:%vreg44,%vreg43
	SW %vreg44, %vreg42, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg44,%vreg42
    Successors according to CFG: BB#11
Creating pHyperOp bundles for CEs for bb10
starting at   %vreg41<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg41

*** Renumbered SlotIndexes 4180-4716 ***
starting at   %zero<def> = ADDI %zero, 0
starting at   %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 4192-4728 ***
starting at   %zero<def> = ADDI %zero, 0
After bundling, state of BB10:BB#10: derived from LLVM BB %AssignFunction3.if.then19
    Predecessors according to CFG: BB#9
	%vreg41<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg41
	  * %vreg40<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg40
	  * %vreg42<def> = ADD %vreg41, %vreg40; GR32Bit:%vreg42,%vreg41,%vreg40
	  * %vreg43<def> = LW %vreg42, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg43,%vreg42
	  * %vreg44<def> = ORI %vreg43, 32; GR32Bit:%vreg44,%vreg43
	  * SW %vreg44, %vreg42, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg44,%vreg42
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#11

-------------
Starting new basic block BB#11
********** MI Scheduling **********
AssignFunction3:BB#11 AssignFunction3.if.end21
  From: JAL <BB#12>
    To: JAL <BB#12>
 Remaining: 4
Max Pressure: Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 0
Excess PSets: 
0 subtrees:
*** Final schedule for BB#11 ***

Partitioning instructions of the region into multiple CEs

*** Renumbered SlotIndexes 4300-4740 ***

*** Renumbered SlotIndexes 4312-4752 ***

*** Renumbered SlotIndexes 4324-4764 ***

*** Renumbered SlotIndexes 4336-4776 ***

*** Renumbered SlotIndexes 4348-4788 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
********** MI Scheduling **********
AssignFunction3:BB#11 AssignFunction3.if.end21
  From: %vreg45<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg45
    To: BEQ <BB#13>, %vreg47, %zero; GR32Bit:%vreg47
 Remaining: 0
Max Pressure: GR32Bit=1
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 1
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
SU(0):   %vreg45<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg45
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
   val SU(1): Latency=5 Reg=%vreg45

SU(1):   %vreg46<def> = LW %vreg45, 0; mem:LD4[%2] GR32Bit:%vreg46,%vreg45
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 30
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg45
  Successors:
   val SU(2): Latency=15 Reg=%vreg46

SU(2):   %vreg47<def> = LW %vreg46, 24; mem:LD4[%38] GR32Bit:%vreg47,%vreg46
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 20
  Height             : 15
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg46
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg47

SU(0):   %vreg45<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg45
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
   val SU(1): Latency=5 Reg=%vreg45

SU(1):   %vreg46<def> = LW %vreg45, 0; mem:LD4[%2] GR32Bit:%vreg46,%vreg45
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 30
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg45
  Successors:
   val SU(2): Latency=15 Reg=%vreg46

SU(2):   %vreg47<def> = LW %vreg46, 24; mem:LD4[%38] GR32Bit:%vreg47,%vreg46
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 14
  Depth              : 20
  Height             : 15
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg46
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg47

Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg45<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg45
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg46<def> = LW %vreg45, 0; mem:LD4[%2] GR32Bit:%vreg46,%vreg45
Pick node SU(2)  ILP: 3 / 21 = 0.142857 Tree: 0 @0
Scheduling %vreg47<def> = LW %vreg46, 24; mem:LD4[%38] GR32Bit:%vreg47,%vreg46
*** Final schedule for BB#11 ***
SU(0):   %vreg45<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg45
SU(1):   %vreg46<def> = LW %vreg45, 0; mem:LD4[%2] GR32Bit:%vreg46,%vreg45
SU(2):   %vreg47<def> = LW %vreg46, 24; mem:LD4[%38] GR32Bit:%vreg47,%vreg46

Partitioning instructions of the region into multiple CEs
instr:  %vreg45<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg45
instr:  %vreg46<def> = LW %vreg45, 0; mem:LD4[%2] GR32Bit:%vreg46,%vreg45
instr:  %vreg47<def> = LW %vreg46, 24; mem:LD4[%38] GR32Bit:%vreg47,%vreg46

*** Renumbered SlotIndexes 4284-4828 ***

*** Renumbered SlotIndexes 4296-4840 ***

*** Renumbered SlotIndexes 4308-4852 ***

*** Renumbered SlotIndexes 4320-4864 ***

*** Renumbered SlotIndexes 4332-4876 ***

*** Renumbered SlotIndexes 4344-4888 ***

*** Renumbered SlotIndexes 4364-4900 ***

*** Renumbered SlotIndexes 4376-4912 ***

*** Renumbered SlotIndexes 4388-4924 ***

*** Renumbered SlotIndexes 4400-4936 ***

*** Renumbered SlotIndexes 4412-4948 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs

renaming register of operand that belongs to ce 1 but was defined in0
%vreg47<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg47<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg47<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg47
renaming register of operand that belongs to ce 2 but was defined in0
%vreg47
renaming register of operand that belongs to ce 3 but was defined in0
%vreg47After Shuffling regions of basic block, state of BB#11:
BB#11: derived from LLVM BB %AssignFunction3.if.end21
    Predecessors according to CFG: BB#9 BB#10
	%vreg45<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg45
	%vreg46<def> = LW %vreg45, 0; mem:LD4[%2] GR32Bit:%vreg46,%vreg45
	%vreg47<def> = LW %vreg46, 24; mem:LD4[%38] GR32Bit:%vreg47,%vreg46
	%vreg218<def> = LUI 1; GR32Bit:%vreg218
	WRITEPM %vreg218, %vreg47, 0; GR32Bit:%vreg218,%vreg47
	%vreg220<def> = LUI 2; GR32Bit:%vreg220
	WRITEPM %vreg220, %vreg47, 0; GR32Bit:%vreg220,%vreg47
	%vreg222<def> = LUI 3; GR32Bit:%vreg222
	WRITEPM %vreg222, %vreg47, 0; GR32Bit:%vreg222,%vreg47
	BEQ <BB#13>, %vreg47, %zero; GR32Bit:%vreg47
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#12>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg219<def> = LUI 1; GR32Bit:%vreg219
	%vreg224<def> = DREADPM %vreg219, 0; GR32Bit:%vreg224,%vreg219
	BEQ <BB#13>, %vreg224, %zero; GR32Bit:%vreg224
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#12>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg221<def> = LUI 2; GR32Bit:%vreg221
	%vreg225<def> = DREADPM %vreg221, 0; GR32Bit:%vreg225,%vreg221
	BEQ <BB#13>, %vreg225, %zero; GR32Bit:%vreg225
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#12>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg223<def> = LUI 3; GR32Bit:%vreg223
	%vreg226<def> = DREADPM %vreg223, 0; GR32Bit:%vreg226,%vreg223
	BEQ <BB#13>, %vreg226, %zero; GR32Bit:%vreg226
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#12>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#12(20) BB#13(12)

*** Renumbered SlotIndexes 4328-4992 ***

*** Renumbered SlotIndexes 4328-5008 ***

*** Renumbered SlotIndexes 4328-5024 ***

*** Renumbered SlotIndexes 4304-5048 ***

*** Renumbered SlotIndexes 4304-5064 ***

*** Renumbered SlotIndexes 4304-5080 ***

*** Renumbered SlotIndexes 4284-5108 ***

*** Renumbered SlotIndexes 4284-5124 ***

*** Renumbered SlotIndexes 4284-5140 ***

*** Renumbered SlotIndexes 4284-5156 ***

*** Renumbered SlotIndexes 4284-5172 ***
Creating pHyperOp bundles for CEs for bb11
  %vreg219<def> = LUI 1; GR32Bit:%vreg219
starting at   %vreg45<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg45
  %vreg221<def> = LUI 2; GR32Bit:%vreg221
starting at   %vreg219<def> = LUI 1; GR32Bit:%vreg219
  %vreg223<def> = LUI 3; GR32Bit:%vreg223
starting at   %vreg221<def> = LUI 2; GR32Bit:%vreg221
starting at   %vreg223<def> = LUI 3; GR32Bit:%vreg223
After bundling, state of BB11:BB#11: derived from LLVM BB %AssignFunction3.if.end21
    Predecessors according to CFG: BB#9 BB#10
	%vreg45<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg45
	  * %vreg46<def> = LW %vreg45, 0; mem:LD4[%2] GR32Bit:%vreg46,%vreg45
	  * %vreg47<def> = LW %vreg46, 24; mem:LD4[%38] GR32Bit:%vreg47,%vreg46
	  * %vreg218<def> = LUI 1; GR32Bit:%vreg218
	  * WRITEPM %vreg218, %vreg47, 0; GR32Bit:%vreg218,%vreg47
	  * %vreg220<def> = LUI 2; GR32Bit:%vreg220
	  * WRITEPM %vreg220, %vreg47, 0; GR32Bit:%vreg220,%vreg47
	  * %vreg222<def> = LUI 3; GR32Bit:%vreg222
	  * WRITEPM %vreg222, %vreg47, 0; GR32Bit:%vreg222,%vreg47
	  * BEQ <BB#13>, %vreg47, %zero; GR32Bit:%vreg47
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#12>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg219<def> = LUI 1; GR32Bit:%vreg219
	  * %vreg224<def> = DREADPM %vreg219, 0; GR32Bit:%vreg224,%vreg219
	  * BEQ <BB#13>, %vreg224, %zero; GR32Bit:%vreg224
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#12>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg221<def> = LUI 2; GR32Bit:%vreg221
	  * %vreg225<def> = DREADPM %vreg221, 0; GR32Bit:%vreg225,%vreg221
	  * BEQ <BB#13>, %vreg225, %zero; GR32Bit:%vreg225
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#12>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg223<def> = LUI 3; GR32Bit:%vreg223
	  * %vreg226<def> = DREADPM %vreg223, 0; GR32Bit:%vreg226,%vreg223
	  * BEQ <BB#13>, %vreg226, %zero; GR32Bit:%vreg226
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#12>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#12(20) BB#13(12)

-------------
Starting new basic block BB#12
********** MI Scheduling **********
AssignFunction3:BB#12 AssignFunction3.if.then24
  From: %vreg48<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg48
    To: End Remaining: 0
Max Pressure: GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 2
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 0
  SU(5) in tree 0
SU(0):   %vreg48<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg48
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
   val SU(2): Latency=5 Reg=%vreg48

SU(1):   %vreg49<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg49
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
   val SU(2): Latency=5 Reg=%vreg49

SU(2):   %vreg50<def> = ADD %vreg49, %vreg48; GR32Bit:%vreg50,%vreg49,%vreg48
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 24
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg49
   val SU(0): Latency=5 Reg=%vreg48
  Successors:
   val SU(5): Latency=5 Reg=%vreg50
   val SU(3): Latency=5 Reg=%vreg50

SU(3):   %vreg51<def> = LW %vreg50, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg51,%vreg50
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 19
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg50
  Successors:
   val SU(4): Latency=15 Reg=%vreg51
   ch  SU(5): Latency=0

SU(4):   %vreg52<def> = ORI %vreg51, 64; GR32Bit:%vreg52,%vreg51
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 4
  Predecessors:
   val SU(3): Latency=15 Reg=%vreg51
  Successors:
   val SU(5): Latency=4 Reg=%vreg52

SU(5):   SW %vreg52, %vreg50, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg52,%vreg50
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 29
  Height             : 0
  Predecessors:
   val SU(4): Latency=4 Reg=%vreg52
   val SU(2): Latency=5 Reg=%vreg50
   ch  SU(3): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg48<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg48
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
   val SU(2): Latency=5 Reg=%vreg48

SU(1):   %vreg49<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg49
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
   val SU(2): Latency=5 Reg=%vreg49

SU(2):   %vreg50<def> = ADD %vreg49, %vreg48; GR32Bit:%vreg50,%vreg49,%vreg48
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 24
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg49
   val SU(0): Latency=5 Reg=%vreg48
  Successors:
   val SU(5): Latency=5 Reg=%vreg50
   val SU(3): Latency=5 Reg=%vreg50

SU(3):   %vreg51<def> = LW %vreg50, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg51,%vreg50
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 19
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg50
  Successors:
   val SU(4): Latency=15 Reg=%vreg51
   ch  SU(5): Latency=0

SU(4):   %vreg52<def> = ORI %vreg51, 64; GR32Bit:%vreg52,%vreg51
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 4
  Predecessors:
   val SU(3): Latency=15 Reg=%vreg51
  Successors:
   val SU(5): Latency=4 Reg=%vreg52

SU(5):   SW %vreg52, %vreg50, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg52,%vreg50
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 29
  Height             : 0
  Predecessors:
   val SU(4): Latency=4 Reg=%vreg52
   val SU(2): Latency=5 Reg=%vreg50
   ch  SU(3): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(1)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg49<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg49
handleMove 4764B -> 4752B: %vreg49<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg49
     %vreg49:	[4764r,4772r:0)  0@4764r
        -->	[4752r,4772r:0)  0@4752r
     zero:	[4r,4d:3)[276r,276d:2)[492r,492d:1)[708r,708d:0)  0@708r 1@492r 2@276r 3@4r
        -->	[4r,4d:3)[276r,276d:2)[492r,492d:1)[708r,708d:0)  0@708r 1@492r 2@276r 3@4r
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg48<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg48
Pick node SU(2)  ILP: 3 / 6 = 0.5 Tree: 0 @0
Scheduling %vreg50<def> = ADD %vreg49, %vreg48; GR32Bit:%vreg50,%vreg49,%vreg48
Pick node SU(3)  ILP: 4 / 11 = 0.363636 Tree: 0 @0
Scheduling %vreg51<def> = LW %vreg50, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg51,%vreg50
Pick node SU(4)  ILP: 5 / 26 = 0.192308 Tree: 0 @0
Scheduling %vreg52<def> = ORI %vreg51, 64; GR32Bit:%vreg52,%vreg51
Pick node SU(5)  ILP: 6 / 30 = 0.2 Tree: 0 @0
Scheduling SW %vreg52, %vreg50, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg52,%vreg50
*** Final schedule for BB#12 ***
SU(1):   %vreg49<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg49
SU(0):   %vreg48<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg48
SU(2):   %vreg50<def> = ADD %vreg49, %vreg48; GR32Bit:%vreg50,%vreg49,%vreg48
SU(3):   %vreg51<def> = LW %vreg50, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg51,%vreg50
SU(4):   %vreg52<def> = ORI %vreg51, 64; GR32Bit:%vreg52,%vreg51
SU(5):   SW %vreg52, %vreg50, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg52,%vreg50

Partitioning instructions of the region into multiple CEs
instr:  %vreg49<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg49
instr:  %vreg48<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg48
instr:  %vreg50<def> = ADD %vreg49, %vreg48; GR32Bit:%vreg50,%vreg49,%vreg48
instr:  %vreg51<def> = LW %vreg50, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg51,%vreg50
instr:  %vreg52<def> = ORI %vreg51, 64; GR32Bit:%vreg52,%vreg51
instr:  SW %vreg52, %vreg50, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg52,%vreg50
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
After Shuffling regions of basic block, state of BB#12:
BB#12: derived from LLVM BB %AssignFunction3.if.then24
    Predecessors according to CFG: BB#11
	%vreg49<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg49
	%vreg48<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg48
	%vreg50<def> = ADD %vreg49, %vreg48; GR32Bit:%vreg50,%vreg49,%vreg48
	%vreg51<def> = LW %vreg50, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg51,%vreg50
	%vreg52<def> = ORI %vreg51, 64; GR32Bit:%vreg52,%vreg51
	SW %vreg52, %vreg50, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg52,%vreg50
    Successors according to CFG: BB#13
Creating pHyperOp bundles for CEs for bb12
starting at   %vreg49<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg49

*** Renumbered SlotIndexes 4752-5184 ***
starting at   %zero<def> = ADDI %zero, 0
starting at   %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 4764-5196 ***
starting at   %zero<def> = ADDI %zero, 0
After bundling, state of BB12:BB#12: derived from LLVM BB %AssignFunction3.if.then24
    Predecessors according to CFG: BB#11
	%vreg49<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg49
	  * %vreg48<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg48
	  * %vreg50<def> = ADD %vreg49, %vreg48; GR32Bit:%vreg50,%vreg49,%vreg48
	  * %vreg51<def> = LW %vreg50, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg51,%vreg50
	  * %vreg52<def> = ORI %vreg51, 64; GR32Bit:%vreg52,%vreg51
	  * SW %vreg52, %vreg50, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg52,%vreg50
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#13

-------------
Starting new basic block BB#13
********** MI Scheduling **********
AssignFunction3:BB#13 AssignFunction3.if.end26
  From: JAL <BB#14>
    To: JAL <BB#14>
 Remaining: 4
Max Pressure: Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 0
Excess PSets: 
0 subtrees:
*** Final schedule for BB#13 ***

Partitioning instructions of the region into multiple CEs

*** Renumbered SlotIndexes 4872-5208 ***

*** Renumbered SlotIndexes 4884-5220 ***

*** Renumbered SlotIndexes 4896-5232 ***

*** Renumbered SlotIndexes 4908-5244 ***

*** Renumbered SlotIndexes 4920-5256 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
********** MI Scheduling **********
AssignFunction3:BB#13 AssignFunction3.if.end26
  From: %vreg53<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg53
    To: BEQ <BB#15>, %vreg55, %zero; GR32Bit:%vreg55
 Remaining: 0
Max Pressure: GR32Bit=1
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 1
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
SU(0):   %vreg53<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg53
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
   val SU(1): Latency=5 Reg=%vreg53

SU(1):   %vreg54<def> = LW %vreg53, 0; mem:LD4[%2] GR32Bit:%vreg54,%vreg53
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 30
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg53
  Successors:
   val SU(2): Latency=15 Reg=%vreg54

SU(2):   %vreg55<def> = LW %vreg54, 28; mem:LD4[%44] GR32Bit:%vreg55,%vreg54
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 20
  Height             : 15
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg54
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg55

SU(0):   %vreg53<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg53
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
   val SU(1): Latency=5 Reg=%vreg53

SU(1):   %vreg54<def> = LW %vreg53, 0; mem:LD4[%2] GR32Bit:%vreg54,%vreg53
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 30
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg53
  Successors:
   val SU(2): Latency=15 Reg=%vreg54

SU(2):   %vreg55<def> = LW %vreg54, 28; mem:LD4[%44] GR32Bit:%vreg55,%vreg54
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 14
  Depth              : 20
  Height             : 15
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg54
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg55

Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg53<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg53
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg54<def> = LW %vreg53, 0; mem:LD4[%2] GR32Bit:%vreg54,%vreg53
Pick node SU(2)  ILP: 3 / 21 = 0.142857 Tree: 0 @0
Scheduling %vreg55<def> = LW %vreg54, 28; mem:LD4[%44] GR32Bit:%vreg55,%vreg54
*** Final schedule for BB#13 ***
SU(0):   %vreg53<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg53
SU(1):   %vreg54<def> = LW %vreg53, 0; mem:LD4[%2] GR32Bit:%vreg54,%vreg53
SU(2):   %vreg55<def> = LW %vreg54, 28; mem:LD4[%44] GR32Bit:%vreg55,%vreg54

Partitioning instructions of the region into multiple CEs
instr:  %vreg53<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg53
instr:  %vreg54<def> = LW %vreg53, 0; mem:LD4[%2] GR32Bit:%vreg54,%vreg53
instr:  %vreg55<def> = LW %vreg54, 28; mem:LD4[%44] GR32Bit:%vreg55,%vreg54

*** Renumbered SlotIndexes 4856-5296 ***

*** Renumbered SlotIndexes 4868-5308 ***

*** Renumbered SlotIndexes 4880-5320 ***

*** Renumbered SlotIndexes 4892-5332 ***

*** Renumbered SlotIndexes 4904-5344 ***

*** Renumbered SlotIndexes 4916-5356 ***

*** Renumbered SlotIndexes 4936-5368 ***

*** Renumbered SlotIndexes 4948-5380 ***

*** Renumbered SlotIndexes 4960-5392 ***

*** Renumbered SlotIndexes 4972-5404 ***

*** Renumbered SlotIndexes 4984-5416 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs

renaming register of operand that belongs to ce 1 but was defined in0
%vreg55<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg55<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg55<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg55
renaming register of operand that belongs to ce 2 but was defined in0
%vreg55
renaming register of operand that belongs to ce 3 but was defined in0
%vreg55After Shuffling regions of basic block, state of BB#13:
BB#13: derived from LLVM BB %AssignFunction3.if.end26
    Predecessors according to CFG: BB#11 BB#12
	%vreg53<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg53
	%vreg54<def> = LW %vreg53, 0; mem:LD4[%2] GR32Bit:%vreg54,%vreg53
	%vreg55<def> = LW %vreg54, 28; mem:LD4[%44] GR32Bit:%vreg55,%vreg54
	%vreg227<def> = LUI 1; GR32Bit:%vreg227
	WRITEPM %vreg227, %vreg55, 0; GR32Bit:%vreg227,%vreg55
	%vreg229<def> = LUI 2; GR32Bit:%vreg229
	WRITEPM %vreg229, %vreg55, 0; GR32Bit:%vreg229,%vreg55
	%vreg231<def> = LUI 3; GR32Bit:%vreg231
	WRITEPM %vreg231, %vreg55, 0; GR32Bit:%vreg231,%vreg55
	BEQ <BB#15>, %vreg55, %zero; GR32Bit:%vreg55
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#14>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg228<def> = LUI 1; GR32Bit:%vreg228
	%vreg233<def> = DREADPM %vreg228, 0; GR32Bit:%vreg233,%vreg228
	BEQ <BB#15>, %vreg233, %zero; GR32Bit:%vreg233
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#14>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg230<def> = LUI 2; GR32Bit:%vreg230
	%vreg234<def> = DREADPM %vreg230, 0; GR32Bit:%vreg234,%vreg230
	BEQ <BB#15>, %vreg234, %zero; GR32Bit:%vreg234
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#14>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg232<def> = LUI 3; GR32Bit:%vreg232
	%vreg235<def> = DREADPM %vreg232, 0; GR32Bit:%vreg235,%vreg232
	BEQ <BB#15>, %vreg235, %zero; GR32Bit:%vreg235
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#14>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#14(20) BB#15(12)

*** Renumbered SlotIndexes 4900-5460 ***

*** Renumbered SlotIndexes 4900-5476 ***

*** Renumbered SlotIndexes 4900-5492 ***

*** Renumbered SlotIndexes 4876-5516 ***

*** Renumbered SlotIndexes 4876-5532 ***

*** Renumbered SlotIndexes 4876-5548 ***

*** Renumbered SlotIndexes 4856-5576 ***

*** Renumbered SlotIndexes 4856-5592 ***

*** Renumbered SlotIndexes 4856-5608 ***

*** Renumbered SlotIndexes 4856-5624 ***

*** Renumbered SlotIndexes 4856-5640 ***
Creating pHyperOp bundles for CEs for bb13
  %vreg228<def> = LUI 1; GR32Bit:%vreg228
starting at   %vreg53<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg53
  %vreg230<def> = LUI 2; GR32Bit:%vreg230
starting at   %vreg228<def> = LUI 1; GR32Bit:%vreg228
  %vreg232<def> = LUI 3; GR32Bit:%vreg232
starting at   %vreg230<def> = LUI 2; GR32Bit:%vreg230
starting at   %vreg232<def> = LUI 3; GR32Bit:%vreg232
After bundling, state of BB13:BB#13: derived from LLVM BB %AssignFunction3.if.end26
    Predecessors according to CFG: BB#11 BB#12
	%vreg53<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg53
	  * %vreg54<def> = LW %vreg53, 0; mem:LD4[%2] GR32Bit:%vreg54,%vreg53
	  * %vreg55<def> = LW %vreg54, 28; mem:LD4[%44] GR32Bit:%vreg55,%vreg54
	  * %vreg227<def> = LUI 1; GR32Bit:%vreg227
	  * WRITEPM %vreg227, %vreg55, 0; GR32Bit:%vreg227,%vreg55
	  * %vreg229<def> = LUI 2; GR32Bit:%vreg229
	  * WRITEPM %vreg229, %vreg55, 0; GR32Bit:%vreg229,%vreg55
	  * %vreg231<def> = LUI 3; GR32Bit:%vreg231
	  * WRITEPM %vreg231, %vreg55, 0; GR32Bit:%vreg231,%vreg55
	  * BEQ <BB#15>, %vreg55, %zero; GR32Bit:%vreg55
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#14>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg228<def> = LUI 1; GR32Bit:%vreg228
	  * %vreg233<def> = DREADPM %vreg228, 0; GR32Bit:%vreg233,%vreg228
	  * BEQ <BB#15>, %vreg233, %zero; GR32Bit:%vreg233
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#14>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg230<def> = LUI 2; GR32Bit:%vreg230
	  * %vreg234<def> = DREADPM %vreg230, 0; GR32Bit:%vreg234,%vreg230
	  * BEQ <BB#15>, %vreg234, %zero; GR32Bit:%vreg234
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#14>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg232<def> = LUI 3; GR32Bit:%vreg232
	  * %vreg235<def> = DREADPM %vreg232, 0; GR32Bit:%vreg235,%vreg232
	  * BEQ <BB#15>, %vreg235, %zero; GR32Bit:%vreg235
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#14>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#14(20) BB#15(12)

-------------
Starting new basic block BB#14
********** MI Scheduling **********
AssignFunction3:BB#14 AssignFunction3.if.then29
  From: %vreg56<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg56
    To: End Remaining: 0
Max Pressure: GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 2
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 0
  SU(5) in tree 0
SU(0):   %vreg56<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg56
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
   val SU(2): Latency=5 Reg=%vreg56

SU(1):   %vreg57<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg57
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
   val SU(2): Latency=5 Reg=%vreg57

SU(2):   %vreg58<def> = ADD %vreg57, %vreg56; GR32Bit:%vreg58,%vreg57,%vreg56
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 24
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg57
   val SU(0): Latency=5 Reg=%vreg56
  Successors:
   val SU(5): Latency=5 Reg=%vreg58
   val SU(3): Latency=5 Reg=%vreg58

SU(3):   %vreg59<def> = LW %vreg58, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg59,%vreg58
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 19
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg58
  Successors:
   val SU(4): Latency=15 Reg=%vreg59
   ch  SU(5): Latency=0

SU(4):   %vreg60<def> = ORI %vreg59, 128; GR32Bit:%vreg60,%vreg59
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 4
  Predecessors:
   val SU(3): Latency=15 Reg=%vreg59
  Successors:
   val SU(5): Latency=4 Reg=%vreg60

SU(5):   SW %vreg60, %vreg58, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg60,%vreg58
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 29
  Height             : 0
  Predecessors:
   val SU(4): Latency=4 Reg=%vreg60
   val SU(2): Latency=5 Reg=%vreg58
   ch  SU(3): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg56<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg56
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
   val SU(2): Latency=5 Reg=%vreg56

SU(1):   %vreg57<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg57
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
   val SU(2): Latency=5 Reg=%vreg57

SU(2):   %vreg58<def> = ADD %vreg57, %vreg56; GR32Bit:%vreg58,%vreg57,%vreg56
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 24
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg57
   val SU(0): Latency=5 Reg=%vreg56
  Successors:
   val SU(5): Latency=5 Reg=%vreg58
   val SU(3): Latency=5 Reg=%vreg58

SU(3):   %vreg59<def> = LW %vreg58, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg59,%vreg58
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 19
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg58
  Successors:
   val SU(4): Latency=15 Reg=%vreg59
   ch  SU(5): Latency=0

SU(4):   %vreg60<def> = ORI %vreg59, 128; GR32Bit:%vreg60,%vreg59
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 4
  Predecessors:
   val SU(3): Latency=15 Reg=%vreg59
  Successors:
   val SU(5): Latency=4 Reg=%vreg60

SU(5):   SW %vreg60, %vreg58, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg60,%vreg58
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 29
  Height             : 0
  Predecessors:
   val SU(4): Latency=4 Reg=%vreg60
   val SU(2): Latency=5 Reg=%vreg58
   ch  SU(3): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(1)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg57<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg57
handleMove 5336B -> 5324B: %vreg57<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg57
     %vreg57:	[5336r,5344r:0)  0@5336r
        -->	[5324r,5344r:0)  0@5324r
     zero:	[4r,4d:3)[276r,276d:2)[492r,492d:1)[708r,708d:0)  0@708r 1@492r 2@276r 3@4r
        -->	[4r,4d:3)[276r,276d:2)[492r,492d:1)[708r,708d:0)  0@708r 1@492r 2@276r 3@4r
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg56<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg56
Pick node SU(2)  ILP: 3 / 6 = 0.5 Tree: 0 @0
Scheduling %vreg58<def> = ADD %vreg57, %vreg56; GR32Bit:%vreg58,%vreg57,%vreg56
Pick node SU(3)  ILP: 4 / 11 = 0.363636 Tree: 0 @0
Scheduling %vreg59<def> = LW %vreg58, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg59,%vreg58
Pick node SU(4)  ILP: 5 / 26 = 0.192308 Tree: 0 @0
Scheduling %vreg60<def> = ORI %vreg59, 128; GR32Bit:%vreg60,%vreg59
Pick node SU(5)  ILP: 6 / 30 = 0.2 Tree: 0 @0
Scheduling SW %vreg60, %vreg58, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg60,%vreg58
*** Final schedule for BB#14 ***
SU(1):   %vreg57<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg57
SU(0):   %vreg56<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg56
SU(2):   %vreg58<def> = ADD %vreg57, %vreg56; GR32Bit:%vreg58,%vreg57,%vreg56
SU(3):   %vreg59<def> = LW %vreg58, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg59,%vreg58
SU(4):   %vreg60<def> = ORI %vreg59, 128; GR32Bit:%vreg60,%vreg59
SU(5):   SW %vreg60, %vreg58, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg60,%vreg58

Partitioning instructions of the region into multiple CEs
instr:  %vreg57<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg57
instr:  %vreg56<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg56
instr:  %vreg58<def> = ADD %vreg57, %vreg56; GR32Bit:%vreg58,%vreg57,%vreg56
instr:  %vreg59<def> = LW %vreg58, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg59,%vreg58
instr:  %vreg60<def> = ORI %vreg59, 128; GR32Bit:%vreg60,%vreg59
instr:  SW %vreg60, %vreg58, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg60,%vreg58
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
After Shuffling regions of basic block, state of BB#14:
BB#14: derived from LLVM BB %AssignFunction3.if.then29
    Predecessors according to CFG: BB#13
	%vreg57<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg57
	%vreg56<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg56
	%vreg58<def> = ADD %vreg57, %vreg56; GR32Bit:%vreg58,%vreg57,%vreg56
	%vreg59<def> = LW %vreg58, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg59,%vreg58
	%vreg60<def> = ORI %vreg59, 128; GR32Bit:%vreg60,%vreg59
	SW %vreg60, %vreg58, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg60,%vreg58
    Successors according to CFG: BB#15
Creating pHyperOp bundles for CEs for bb14
starting at   %vreg57<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg57

*** Renumbered SlotIndexes 5324-5652 ***
starting at   %zero<def> = ADDI %zero, 0
starting at   %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 5336-5664 ***
starting at   %zero<def> = ADDI %zero, 0
After bundling, state of BB14:BB#14: derived from LLVM BB %AssignFunction3.if.then29
    Predecessors according to CFG: BB#13
	%vreg57<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg57
	  * %vreg56<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg56
	  * %vreg58<def> = ADD %vreg57, %vreg56; GR32Bit:%vreg58,%vreg57,%vreg56
	  * %vreg59<def> = LW %vreg58, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg59,%vreg58
	  * %vreg60<def> = ORI %vreg59, 128; GR32Bit:%vreg60,%vreg59
	  * SW %vreg60, %vreg58, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg60,%vreg58
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#15

-------------
Starting new basic block BB#15
********** MI Scheduling **********
AssignFunction3:BB#15 AssignFunction3.if.end31
  From: JAL <BB#16>
    To: JAL <BB#16>
 Remaining: 4
Max Pressure: Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 0
Excess PSets: 
0 subtrees:
*** Final schedule for BB#15 ***

Partitioning instructions of the region into multiple CEs

*** Renumbered SlotIndexes 5444-5676 ***

*** Renumbered SlotIndexes 5456-5688 ***

*** Renumbered SlotIndexes 5468-5700 ***

*** Renumbered SlotIndexes 5480-5712 ***

*** Renumbered SlotIndexes 5492-5724 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
********** MI Scheduling **********
AssignFunction3:BB#15 AssignFunction3.if.end31
  From: %vreg61<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg61
    To: BEQ <BB#17>, %vreg63, %zero; GR32Bit:%vreg63
 Remaining: 0
Max Pressure: GR32Bit=1
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 1
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
SU(0):   %vreg61<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg61
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
   val SU(1): Latency=5 Reg=%vreg61

SU(1):   %vreg62<def> = LW %vreg61, 0; mem:LD4[%2] GR32Bit:%vreg62,%vreg61
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 30
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg61
  Successors:
   val SU(2): Latency=15 Reg=%vreg62

SU(2):   %vreg63<def> = LW %vreg62, 32; mem:LD4[%50] GR32Bit:%vreg63,%vreg62
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 20
  Height             : 15
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg62
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg63

SU(0):   %vreg61<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg61
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
   val SU(1): Latency=5 Reg=%vreg61

SU(1):   %vreg62<def> = LW %vreg61, 0; mem:LD4[%2] GR32Bit:%vreg62,%vreg61
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 30
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg61
  Successors:
   val SU(2): Latency=15 Reg=%vreg62

SU(2):   %vreg63<def> = LW %vreg62, 32; mem:LD4[%50] GR32Bit:%vreg63,%vreg62
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 14
  Depth              : 20
  Height             : 15
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg62
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg63

Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg61<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg61
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg62<def> = LW %vreg61, 0; mem:LD4[%2] GR32Bit:%vreg62,%vreg61
Pick node SU(2)  ILP: 3 / 21 = 0.142857 Tree: 0 @0
Scheduling %vreg63<def> = LW %vreg62, 32; mem:LD4[%50] GR32Bit:%vreg63,%vreg62
*** Final schedule for BB#15 ***
SU(0):   %vreg61<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg61
SU(1):   %vreg62<def> = LW %vreg61, 0; mem:LD4[%2] GR32Bit:%vreg62,%vreg61
SU(2):   %vreg63<def> = LW %vreg62, 32; mem:LD4[%50] GR32Bit:%vreg63,%vreg62

Partitioning instructions of the region into multiple CEs
instr:  %vreg61<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg61
instr:  %vreg62<def> = LW %vreg61, 0; mem:LD4[%2] GR32Bit:%vreg62,%vreg61
instr:  %vreg63<def> = LW %vreg62, 32; mem:LD4[%50] GR32Bit:%vreg63,%vreg62

*** Renumbered SlotIndexes 5428-5764 ***

*** Renumbered SlotIndexes 5440-5776 ***

*** Renumbered SlotIndexes 5452-5788 ***

*** Renumbered SlotIndexes 5464-5800 ***

*** Renumbered SlotIndexes 5476-5812 ***

*** Renumbered SlotIndexes 5488-5824 ***

*** Renumbered SlotIndexes 5508-5836 ***

*** Renumbered SlotIndexes 5520-5848 ***

*** Renumbered SlotIndexes 5532-5860 ***

*** Renumbered SlotIndexes 5544-5872 ***

*** Renumbered SlotIndexes 5556-5884 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs

renaming register of operand that belongs to ce 1 but was defined in0
%vreg63<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg63<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg63<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg63
renaming register of operand that belongs to ce 2 but was defined in0
%vreg63
renaming register of operand that belongs to ce 3 but was defined in0
%vreg63After Shuffling regions of basic block, state of BB#15:
BB#15: derived from LLVM BB %AssignFunction3.if.end31
    Predecessors according to CFG: BB#13 BB#14
	%vreg61<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg61
	%vreg62<def> = LW %vreg61, 0; mem:LD4[%2] GR32Bit:%vreg62,%vreg61
	%vreg63<def> = LW %vreg62, 32; mem:LD4[%50] GR32Bit:%vreg63,%vreg62
	%vreg236<def> = LUI 1; GR32Bit:%vreg236
	WRITEPM %vreg236, %vreg63, 0; GR32Bit:%vreg236,%vreg63
	%vreg238<def> = LUI 2; GR32Bit:%vreg238
	WRITEPM %vreg238, %vreg63, 0; GR32Bit:%vreg238,%vreg63
	%vreg240<def> = LUI 3; GR32Bit:%vreg240
	WRITEPM %vreg240, %vreg63, 0; GR32Bit:%vreg240,%vreg63
	BEQ <BB#17>, %vreg63, %zero; GR32Bit:%vreg63
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#16>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg237<def> = LUI 1; GR32Bit:%vreg237
	%vreg242<def> = DREADPM %vreg237, 0; GR32Bit:%vreg242,%vreg237
	BEQ <BB#17>, %vreg242, %zero; GR32Bit:%vreg242
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#16>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg239<def> = LUI 2; GR32Bit:%vreg239
	%vreg243<def> = DREADPM %vreg239, 0; GR32Bit:%vreg243,%vreg239
	BEQ <BB#17>, %vreg243, %zero; GR32Bit:%vreg243
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#16>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg241<def> = LUI 3; GR32Bit:%vreg241
	%vreg244<def> = DREADPM %vreg241, 0; GR32Bit:%vreg244,%vreg241
	BEQ <BB#17>, %vreg244, %zero; GR32Bit:%vreg244
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#16>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#16(20) BB#17(12)

*** Renumbered SlotIndexes 5472-5928 ***

*** Renumbered SlotIndexes 5472-5944 ***

*** Renumbered SlotIndexes 5472-5960 ***

*** Renumbered SlotIndexes 5448-5984 ***

*** Renumbered SlotIndexes 5448-6000 ***

*** Renumbered SlotIndexes 5448-6016 ***

*** Renumbered SlotIndexes 5428-6044 ***

*** Renumbered SlotIndexes 5428-6060 ***

*** Renumbered SlotIndexes 5428-6076 ***

*** Renumbered SlotIndexes 5428-6092 ***

*** Renumbered SlotIndexes 5428-6108 ***
Creating pHyperOp bundles for CEs for bb15
  %vreg237<def> = LUI 1; GR32Bit:%vreg237
starting at   %vreg61<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg61
  %vreg239<def> = LUI 2; GR32Bit:%vreg239
starting at   %vreg237<def> = LUI 1; GR32Bit:%vreg237
  %vreg241<def> = LUI 3; GR32Bit:%vreg241
starting at   %vreg239<def> = LUI 2; GR32Bit:%vreg239
starting at   %vreg241<def> = LUI 3; GR32Bit:%vreg241
After bundling, state of BB15:BB#15: derived from LLVM BB %AssignFunction3.if.end31
    Predecessors according to CFG: BB#13 BB#14
	%vreg61<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg61
	  * %vreg62<def> = LW %vreg61, 0; mem:LD4[%2] GR32Bit:%vreg62,%vreg61
	  * %vreg63<def> = LW %vreg62, 32; mem:LD4[%50] GR32Bit:%vreg63,%vreg62
	  * %vreg236<def> = LUI 1; GR32Bit:%vreg236
	  * WRITEPM %vreg236, %vreg63, 0; GR32Bit:%vreg236,%vreg63
	  * %vreg238<def> = LUI 2; GR32Bit:%vreg238
	  * WRITEPM %vreg238, %vreg63, 0; GR32Bit:%vreg238,%vreg63
	  * %vreg240<def> = LUI 3; GR32Bit:%vreg240
	  * WRITEPM %vreg240, %vreg63, 0; GR32Bit:%vreg240,%vreg63
	  * BEQ <BB#17>, %vreg63, %zero; GR32Bit:%vreg63
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#16>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg237<def> = LUI 1; GR32Bit:%vreg237
	  * %vreg242<def> = DREADPM %vreg237, 0; GR32Bit:%vreg242,%vreg237
	  * BEQ <BB#17>, %vreg242, %zero; GR32Bit:%vreg242
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#16>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg239<def> = LUI 2; GR32Bit:%vreg239
	  * %vreg243<def> = DREADPM %vreg239, 0; GR32Bit:%vreg243,%vreg239
	  * BEQ <BB#17>, %vreg243, %zero; GR32Bit:%vreg243
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#16>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg241<def> = LUI 3; GR32Bit:%vreg241
	  * %vreg244<def> = DREADPM %vreg241, 0; GR32Bit:%vreg244,%vreg241
	  * BEQ <BB#17>, %vreg244, %zero; GR32Bit:%vreg244
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#16>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#16(20) BB#17(12)

-------------
Starting new basic block BB#16
********** MI Scheduling **********
AssignFunction3:BB#16 AssignFunction3.if.then34
  From: %vreg64<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg64
    To: End Remaining: 0
Max Pressure: GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 2
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 0
  SU(5) in tree 0
SU(0):   %vreg64<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
   val SU(2): Latency=5 Reg=%vreg64

SU(1):   %vreg65<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg65
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
   val SU(2): Latency=5 Reg=%vreg65

SU(2):   %vreg66<def> = ADD %vreg65, %vreg64; GR32Bit:%vreg66,%vreg65,%vreg64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 24
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg65
   val SU(0): Latency=5 Reg=%vreg64
  Successors:
   val SU(5): Latency=5 Reg=%vreg66
   val SU(3): Latency=5 Reg=%vreg66

SU(3):   %vreg67<def> = LW %vreg66, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg67,%vreg66
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 19
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg66
  Successors:
   val SU(4): Latency=15 Reg=%vreg67
   ch  SU(5): Latency=0

SU(4):   %vreg68<def> = ORI %vreg67, 256; GR32Bit:%vreg68,%vreg67
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 4
  Predecessors:
   val SU(3): Latency=15 Reg=%vreg67
  Successors:
   val SU(5): Latency=4 Reg=%vreg68

SU(5):   SW %vreg68, %vreg66, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg68,%vreg66
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 29
  Height             : 0
  Predecessors:
   val SU(4): Latency=4 Reg=%vreg68
   val SU(2): Latency=5 Reg=%vreg66
   ch  SU(3): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg64<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
   val SU(2): Latency=5 Reg=%vreg64

SU(1):   %vreg65<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg65
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
   val SU(2): Latency=5 Reg=%vreg65

SU(2):   %vreg66<def> = ADD %vreg65, %vreg64; GR32Bit:%vreg66,%vreg65,%vreg64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 24
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg65
   val SU(0): Latency=5 Reg=%vreg64
  Successors:
   val SU(5): Latency=5 Reg=%vreg66
   val SU(3): Latency=5 Reg=%vreg66

SU(3):   %vreg67<def> = LW %vreg66, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg67,%vreg66
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 19
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg66
  Successors:
   val SU(4): Latency=15 Reg=%vreg67
   ch  SU(5): Latency=0

SU(4):   %vreg68<def> = ORI %vreg67, 256; GR32Bit:%vreg68,%vreg67
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 4
  Predecessors:
   val SU(3): Latency=15 Reg=%vreg67
  Successors:
   val SU(5): Latency=4 Reg=%vreg68

SU(5):   SW %vreg68, %vreg66, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg68,%vreg66
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 29
  Height             : 0
  Predecessors:
   val SU(4): Latency=4 Reg=%vreg68
   val SU(2): Latency=5 Reg=%vreg66
   ch  SU(3): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(1)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg65<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg65
handleMove 5908B -> 5896B: %vreg65<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg65
     %vreg65:	[5908r,5916r:0)  0@5908r
        -->	[5896r,5916r:0)  0@5896r
     zero:	[4r,4d:3)[276r,276d:2)[492r,492d:1)[708r,708d:0)  0@708r 1@492r 2@276r 3@4r
        -->	[4r,4d:3)[276r,276d:2)[492r,492d:1)[708r,708d:0)  0@708r 1@492r 2@276r 3@4r
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg64<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg64
Pick node SU(2)  ILP: 3 / 6 = 0.5 Tree: 0 @0
Scheduling %vreg66<def> = ADD %vreg65, %vreg64; GR32Bit:%vreg66,%vreg65,%vreg64
Pick node SU(3)  ILP: 4 / 11 = 0.363636 Tree: 0 @0
Scheduling %vreg67<def> = LW %vreg66, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg67,%vreg66
Pick node SU(4)  ILP: 5 / 26 = 0.192308 Tree: 0 @0
Scheduling %vreg68<def> = ORI %vreg67, 256; GR32Bit:%vreg68,%vreg67
Pick node SU(5)  ILP: 6 / 30 = 0.2 Tree: 0 @0
Scheduling SW %vreg68, %vreg66, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg68,%vreg66
*** Final schedule for BB#16 ***
SU(1):   %vreg65<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg65
SU(0):   %vreg64<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg64
SU(2):   %vreg66<def> = ADD %vreg65, %vreg64; GR32Bit:%vreg66,%vreg65,%vreg64
SU(3):   %vreg67<def> = LW %vreg66, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg67,%vreg66
SU(4):   %vreg68<def> = ORI %vreg67, 256; GR32Bit:%vreg68,%vreg67
SU(5):   SW %vreg68, %vreg66, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg68,%vreg66

Partitioning instructions of the region into multiple CEs
instr:  %vreg65<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg65
instr:  %vreg64<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg64
instr:  %vreg66<def> = ADD %vreg65, %vreg64; GR32Bit:%vreg66,%vreg65,%vreg64
instr:  %vreg67<def> = LW %vreg66, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg67,%vreg66
instr:  %vreg68<def> = ORI %vreg67, 256; GR32Bit:%vreg68,%vreg67
instr:  SW %vreg68, %vreg66, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg68,%vreg66
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
After Shuffling regions of basic block, state of BB#16:
BB#16: derived from LLVM BB %AssignFunction3.if.then34
    Predecessors according to CFG: BB#15
	%vreg65<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg65
	%vreg64<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg64
	%vreg66<def> = ADD %vreg65, %vreg64; GR32Bit:%vreg66,%vreg65,%vreg64
	%vreg67<def> = LW %vreg66, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg67,%vreg66
	%vreg68<def> = ORI %vreg67, 256; GR32Bit:%vreg68,%vreg67
	SW %vreg68, %vreg66, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg68,%vreg66
    Successors according to CFG: BB#17
Creating pHyperOp bundles for CEs for bb16
starting at   %vreg65<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg65

*** Renumbered SlotIndexes 5896-6120 ***
starting at   %zero<def> = ADDI %zero, 0
starting at   %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 5908-6132 ***
starting at   %zero<def> = ADDI %zero, 0
After bundling, state of BB16:BB#16: derived from LLVM BB %AssignFunction3.if.then34
    Predecessors according to CFG: BB#15
	%vreg65<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg65
	  * %vreg64<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg64
	  * %vreg66<def> = ADD %vreg65, %vreg64; GR32Bit:%vreg66,%vreg65,%vreg64
	  * %vreg67<def> = LW %vreg66, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg67,%vreg66
	  * %vreg68<def> = ORI %vreg67, 256; GR32Bit:%vreg68,%vreg67
	  * SW %vreg68, %vreg66, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg68,%vreg66
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#17

-------------
Starting new basic block BB#17
********** MI Scheduling **********
AssignFunction3:BB#17 AssignFunction3.if.end36
  From: JAL <BB#18>
    To: JAL <BB#18>
 Remaining: 4
Max Pressure: Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 0
Excess PSets: 
0 subtrees:
*** Final schedule for BB#17 ***

Partitioning instructions of the region into multiple CEs

*** Renumbered SlotIndexes 6016-6144 ***

*** Renumbered SlotIndexes 6028-6156 ***

*** Renumbered SlotIndexes 6040-6168 ***

*** Renumbered SlotIndexes 6052-6180 ***

*** Renumbered SlotIndexes 6064-6192 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
********** MI Scheduling **********
AssignFunction3:BB#17 AssignFunction3.if.end36
  From: %vreg69<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg69
    To: BEQ <BB#19>, %vreg71, %zero; GR32Bit:%vreg71
 Remaining: 0
Max Pressure: GR32Bit=1
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 1
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
SU(0):   %vreg69<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg69
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
   val SU(1): Latency=5 Reg=%vreg69

SU(1):   %vreg70<def> = LW %vreg69, 0; mem:LD4[%2] GR32Bit:%vreg70,%vreg69
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 30
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg69
  Successors:
   val SU(2): Latency=15 Reg=%vreg70

SU(2):   %vreg71<def> = LW %vreg70, 36; mem:LD4[%56] GR32Bit:%vreg71,%vreg70
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 20
  Height             : 15
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg70
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg71

SU(0):   %vreg69<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg69
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
   val SU(1): Latency=5 Reg=%vreg69

SU(1):   %vreg70<def> = LW %vreg69, 0; mem:LD4[%2] GR32Bit:%vreg70,%vreg69
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 30
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg69
  Successors:
   val SU(2): Latency=15 Reg=%vreg70

SU(2):   %vreg71<def> = LW %vreg70, 36; mem:LD4[%56] GR32Bit:%vreg71,%vreg70
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 14
  Depth              : 20
  Height             : 15
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg70
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg71

Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg69<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg69
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg70<def> = LW %vreg69, 0; mem:LD4[%2] GR32Bit:%vreg70,%vreg69
Pick node SU(2)  ILP: 3 / 21 = 0.142857 Tree: 0 @0
Scheduling %vreg71<def> = LW %vreg70, 36; mem:LD4[%56] GR32Bit:%vreg71,%vreg70
*** Final schedule for BB#17 ***
SU(0):   %vreg69<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg69
SU(1):   %vreg70<def> = LW %vreg69, 0; mem:LD4[%2] GR32Bit:%vreg70,%vreg69
SU(2):   %vreg71<def> = LW %vreg70, 36; mem:LD4[%56] GR32Bit:%vreg71,%vreg70

Partitioning instructions of the region into multiple CEs
instr:  %vreg69<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg69
instr:  %vreg70<def> = LW %vreg69, 0; mem:LD4[%2] GR32Bit:%vreg70,%vreg69
instr:  %vreg71<def> = LW %vreg70, 36; mem:LD4[%56] GR32Bit:%vreg71,%vreg70

*** Renumbered SlotIndexes 6000-6232 ***

*** Renumbered SlotIndexes 6012-6244 ***

*** Renumbered SlotIndexes 6024-6256 ***

*** Renumbered SlotIndexes 6036-6268 ***

*** Renumbered SlotIndexes 6048-6280 ***

*** Renumbered SlotIndexes 6060-6292 ***

*** Renumbered SlotIndexes 6080-6304 ***

*** Renumbered SlotIndexes 6092-6316 ***

*** Renumbered SlotIndexes 6104-6328 ***

*** Renumbered SlotIndexes 6116-6340 ***

*** Renumbered SlotIndexes 6128-6352 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs

renaming register of operand that belongs to ce 1 but was defined in0
%vreg71<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg71<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg71<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg71
renaming register of operand that belongs to ce 2 but was defined in0
%vreg71
renaming register of operand that belongs to ce 3 but was defined in0
%vreg71After Shuffling regions of basic block, state of BB#17:
BB#17: derived from LLVM BB %AssignFunction3.if.end36
    Predecessors according to CFG: BB#15 BB#16
	%vreg69<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg69
	%vreg70<def> = LW %vreg69, 0; mem:LD4[%2] GR32Bit:%vreg70,%vreg69
	%vreg71<def> = LW %vreg70, 36; mem:LD4[%56] GR32Bit:%vreg71,%vreg70
	%vreg245<def> = LUI 1; GR32Bit:%vreg245
	WRITEPM %vreg245, %vreg71, 0; GR32Bit:%vreg245,%vreg71
	%vreg247<def> = LUI 2; GR32Bit:%vreg247
	WRITEPM %vreg247, %vreg71, 0; GR32Bit:%vreg247,%vreg71
	%vreg249<def> = LUI 3; GR32Bit:%vreg249
	WRITEPM %vreg249, %vreg71, 0; GR32Bit:%vreg249,%vreg71
	BEQ <BB#19>, %vreg71, %zero; GR32Bit:%vreg71
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#18>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg246<def> = LUI 1; GR32Bit:%vreg246
	%vreg251<def> = DREADPM %vreg246, 0; GR32Bit:%vreg251,%vreg246
	BEQ <BB#19>, %vreg251, %zero; GR32Bit:%vreg251
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#18>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg248<def> = LUI 2; GR32Bit:%vreg248
	%vreg252<def> = DREADPM %vreg248, 0; GR32Bit:%vreg252,%vreg248
	BEQ <BB#19>, %vreg252, %zero; GR32Bit:%vreg252
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#18>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg250<def> = LUI 3; GR32Bit:%vreg250
	%vreg253<def> = DREADPM %vreg250, 0; GR32Bit:%vreg253,%vreg250
	BEQ <BB#19>, %vreg253, %zero; GR32Bit:%vreg253
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#18>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#18(20) BB#19(12)

*** Renumbered SlotIndexes 6044-6396 ***

*** Renumbered SlotIndexes 6044-6412 ***

*** Renumbered SlotIndexes 6044-6428 ***

*** Renumbered SlotIndexes 6020-6452 ***

*** Renumbered SlotIndexes 6020-6468 ***

*** Renumbered SlotIndexes 6020-6484 ***

*** Renumbered SlotIndexes 6000-6512 ***

*** Renumbered SlotIndexes 6000-6528 ***

*** Renumbered SlotIndexes 6000-6544 ***

*** Renumbered SlotIndexes 6000-6560 ***

*** Renumbered SlotIndexes 6000-6576 ***
Creating pHyperOp bundles for CEs for bb17
  %vreg246<def> = LUI 1; GR32Bit:%vreg246
starting at   %vreg69<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg69
  %vreg248<def> = LUI 2; GR32Bit:%vreg248
starting at   %vreg246<def> = LUI 1; GR32Bit:%vreg246
  %vreg250<def> = LUI 3; GR32Bit:%vreg250
starting at   %vreg248<def> = LUI 2; GR32Bit:%vreg248
starting at   %vreg250<def> = LUI 3; GR32Bit:%vreg250
After bundling, state of BB17:BB#17: derived from LLVM BB %AssignFunction3.if.end36
    Predecessors according to CFG: BB#15 BB#16
	%vreg69<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg69
	  * %vreg70<def> = LW %vreg69, 0; mem:LD4[%2] GR32Bit:%vreg70,%vreg69
	  * %vreg71<def> = LW %vreg70, 36; mem:LD4[%56] GR32Bit:%vreg71,%vreg70
	  * %vreg245<def> = LUI 1; GR32Bit:%vreg245
	  * WRITEPM %vreg245, %vreg71, 0; GR32Bit:%vreg245,%vreg71
	  * %vreg247<def> = LUI 2; GR32Bit:%vreg247
	  * WRITEPM %vreg247, %vreg71, 0; GR32Bit:%vreg247,%vreg71
	  * %vreg249<def> = LUI 3; GR32Bit:%vreg249
	  * WRITEPM %vreg249, %vreg71, 0; GR32Bit:%vreg249,%vreg71
	  * BEQ <BB#19>, %vreg71, %zero; GR32Bit:%vreg71
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#18>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg246<def> = LUI 1; GR32Bit:%vreg246
	  * %vreg251<def> = DREADPM %vreg246, 0; GR32Bit:%vreg251,%vreg246
	  * BEQ <BB#19>, %vreg251, %zero; GR32Bit:%vreg251
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#18>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg248<def> = LUI 2; GR32Bit:%vreg248
	  * %vreg252<def> = DREADPM %vreg248, 0; GR32Bit:%vreg252,%vreg248
	  * BEQ <BB#19>, %vreg252, %zero; GR32Bit:%vreg252
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#18>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg250<def> = LUI 3; GR32Bit:%vreg250
	  * %vreg253<def> = DREADPM %vreg250, 0; GR32Bit:%vreg253,%vreg250
	  * BEQ <BB#19>, %vreg253, %zero; GR32Bit:%vreg253
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#18>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#18(20) BB#19(12)

-------------
Starting new basic block BB#18
********** MI Scheduling **********
AssignFunction3:BB#18 AssignFunction3.if.then39
  From: %vreg72<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg72
    To: End Remaining: 0
Max Pressure: GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 2
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 0
  SU(5) in tree 0
SU(0):   %vreg72<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg72
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
   val SU(2): Latency=5 Reg=%vreg72

SU(1):   %vreg73<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg73
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
   val SU(2): Latency=5 Reg=%vreg73

SU(2):   %vreg74<def> = ADD %vreg73, %vreg72; GR32Bit:%vreg74,%vreg73,%vreg72
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 24
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg73
   val SU(0): Latency=5 Reg=%vreg72
  Successors:
   val SU(5): Latency=5 Reg=%vreg74
   val SU(3): Latency=5 Reg=%vreg74

SU(3):   %vreg75<def> = LW %vreg74, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg75,%vreg74
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 19
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg74
  Successors:
   val SU(4): Latency=15 Reg=%vreg75
   ch  SU(5): Latency=0

SU(4):   %vreg76<def> = ORI %vreg75, 512; GR32Bit:%vreg76,%vreg75
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 4
  Predecessors:
   val SU(3): Latency=15 Reg=%vreg75
  Successors:
   val SU(5): Latency=4 Reg=%vreg76

SU(5):   SW %vreg76, %vreg74, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg76,%vreg74
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 29
  Height             : 0
  Predecessors:
   val SU(4): Latency=4 Reg=%vreg76
   val SU(2): Latency=5 Reg=%vreg74
   ch  SU(3): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg72<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg72
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
   val SU(2): Latency=5 Reg=%vreg72

SU(1):   %vreg73<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg73
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
   val SU(2): Latency=5 Reg=%vreg73

SU(2):   %vreg74<def> = ADD %vreg73, %vreg72; GR32Bit:%vreg74,%vreg73,%vreg72
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 24
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg73
   val SU(0): Latency=5 Reg=%vreg72
  Successors:
   val SU(5): Latency=5 Reg=%vreg74
   val SU(3): Latency=5 Reg=%vreg74

SU(3):   %vreg75<def> = LW %vreg74, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg75,%vreg74
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 19
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg74
  Successors:
   val SU(4): Latency=15 Reg=%vreg75
   ch  SU(5): Latency=0

SU(4):   %vreg76<def> = ORI %vreg75, 512; GR32Bit:%vreg76,%vreg75
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 4
  Predecessors:
   val SU(3): Latency=15 Reg=%vreg75
  Successors:
   val SU(5): Latency=4 Reg=%vreg76

SU(5):   SW %vreg76, %vreg74, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg76,%vreg74
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 29
  Height             : 0
  Predecessors:
   val SU(4): Latency=4 Reg=%vreg76
   val SU(2): Latency=5 Reg=%vreg74
   ch  SU(3): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(1)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg73<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg73
handleMove 6480B -> 6468B: %vreg73<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg73
     %vreg73:	[6480r,6488r:0)  0@6480r
        -->	[6468r,6488r:0)  0@6468r
     zero:	[4r,4d:3)[276r,276d:2)[492r,492d:1)[708r,708d:0)  0@708r 1@492r 2@276r 3@4r
        -->	[4r,4d:3)[276r,276d:2)[492r,492d:1)[708r,708d:0)  0@708r 1@492r 2@276r 3@4r
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg72<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg72
Pick node SU(2)  ILP: 3 / 6 = 0.5 Tree: 0 @0
Scheduling %vreg74<def> = ADD %vreg73, %vreg72; GR32Bit:%vreg74,%vreg73,%vreg72
Pick node SU(3)  ILP: 4 / 11 = 0.363636 Tree: 0 @0
Scheduling %vreg75<def> = LW %vreg74, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg75,%vreg74
Pick node SU(4)  ILP: 5 / 26 = 0.192308 Tree: 0 @0
Scheduling %vreg76<def> = ORI %vreg75, 512; GR32Bit:%vreg76,%vreg75
Pick node SU(5)  ILP: 6 / 30 = 0.2 Tree: 0 @0
Scheduling SW %vreg76, %vreg74, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg76,%vreg74
*** Final schedule for BB#18 ***
SU(1):   %vreg73<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg73
SU(0):   %vreg72<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg72
SU(2):   %vreg74<def> = ADD %vreg73, %vreg72; GR32Bit:%vreg74,%vreg73,%vreg72
SU(3):   %vreg75<def> = LW %vreg74, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg75,%vreg74
SU(4):   %vreg76<def> = ORI %vreg75, 512; GR32Bit:%vreg76,%vreg75
SU(5):   SW %vreg76, %vreg74, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg76,%vreg74

Partitioning instructions of the region into multiple CEs
instr:  %vreg73<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg73
instr:  %vreg72<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg72
instr:  %vreg74<def> = ADD %vreg73, %vreg72; GR32Bit:%vreg74,%vreg73,%vreg72
instr:  %vreg75<def> = LW %vreg74, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg75,%vreg74
instr:  %vreg76<def> = ORI %vreg75, 512; GR32Bit:%vreg76,%vreg75
instr:  SW %vreg76, %vreg74, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg76,%vreg74
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
After Shuffling regions of basic block, state of BB#18:
BB#18: derived from LLVM BB %AssignFunction3.if.then39
    Predecessors according to CFG: BB#17
	%vreg73<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg73
	%vreg72<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg72
	%vreg74<def> = ADD %vreg73, %vreg72; GR32Bit:%vreg74,%vreg73,%vreg72
	%vreg75<def> = LW %vreg74, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg75,%vreg74
	%vreg76<def> = ORI %vreg75, 512; GR32Bit:%vreg76,%vreg75
	SW %vreg76, %vreg74, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg76,%vreg74
    Successors according to CFG: BB#19
Creating pHyperOp bundles for CEs for bb18
starting at   %vreg73<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg73

*** Renumbered SlotIndexes 6468-6588 ***
starting at   %zero<def> = ADDI %zero, 0
starting at   %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 6480-6600 ***
starting at   %zero<def> = ADDI %zero, 0
After bundling, state of BB18:BB#18: derived from LLVM BB %AssignFunction3.if.then39
    Predecessors according to CFG: BB#17
	%vreg73<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg73
	  * %vreg72<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg72
	  * %vreg74<def> = ADD %vreg73, %vreg72; GR32Bit:%vreg74,%vreg73,%vreg72
	  * %vreg75<def> = LW %vreg74, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg75,%vreg74
	  * %vreg76<def> = ORI %vreg75, 512; GR32Bit:%vreg76,%vreg75
	  * SW %vreg76, %vreg74, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg76,%vreg74
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#19

-------------
Starting new basic block BB#19
********** MI Scheduling **********
AssignFunction3:BB#19 AssignFunction3.return
  From: %vreg77<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg77
    To: End Remaining: 0
Max Pressure: GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 2
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 0
  SU(5) in tree 0
SU(0):   %vreg77<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg77
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
   val SU(2): Latency=5 Reg=%vreg77

SU(1):   %vreg78<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg78
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
   val SU(2): Latency=5 Reg=%vreg78

SU(2):   %vreg79<def> = ADD %vreg78, %vreg77; GR32Bit:%vreg79,%vreg78,%vreg77
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg78
   val SU(0): Latency=5 Reg=%vreg77
  Successors:
   val SU(3): Latency=5 Reg=%vreg79

SU(3):   %vreg80<def> = LW %vreg79, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg80,%vreg79
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 2
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg79
  Successors:
   val SU(5): Latency=2 Reg=%vreg80

SU(4):   %vreg81<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg81
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(5): Latency=5 Reg=%vreg81

SU(5):   SW %vreg80, %vreg81, 0; mem:ST4[%1] GR32Bit:%vreg80,%vreg81
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 12
  Height             : 0
  Predecessors:
   val SU(3): Latency=2 Reg=%vreg80
   val SU(4): Latency=5 Reg=%vreg81
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg77<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg77
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
   val SU(2): Latency=5 Reg=%vreg77

SU(1):   %vreg78<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg78
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
   val SU(2): Latency=5 Reg=%vreg78

SU(2):   %vreg79<def> = ADD %vreg78, %vreg77; GR32Bit:%vreg79,%vreg78,%vreg77
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg78
   val SU(0): Latency=5 Reg=%vreg77
  Successors:
   val SU(3): Latency=5 Reg=%vreg79

SU(3):   %vreg80<def> = LW %vreg79, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg80,%vreg79
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 2
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg79
  Successors:
   val SU(5): Latency=2 Reg=%vreg80

SU(4):   %vreg81<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg81
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(5): Latency=5 Reg=%vreg81

SU(5):   SW %vreg80, %vreg81, 0; mem:ST4[%1] GR32Bit:%vreg80,%vreg81
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 12
  Height             : 0
  Predecessors:
   val SU(3): Latency=2 Reg=%vreg80
   val SU(4): Latency=5 Reg=%vreg81
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(4)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg81<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg81
handleMove 6584B -> 6548B: %vreg81<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg81
     %vreg81:	[6584r,6592r:0)  0@6584r
        -->	[6548r,6592r:0)  0@6548r
     t5:	EMPTY
        -->	EMPTY
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg77<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg77
Pick node SU(1)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg78<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg78
Pick node SU(2)  ILP: 3 / 6 = 0.5 Tree: 0 @0
Scheduling %vreg79<def> = ADD %vreg78, %vreg77; GR32Bit:%vreg79,%vreg78,%vreg77
Pick node SU(3)  ILP: 4 / 11 = 0.363636 Tree: 0 @0
Scheduling %vreg80<def> = LW %vreg79, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg80,%vreg79
Pick node SU(5)  ILP: 6 / 13 = 0.461538 Tree: 0 @0
Scheduling SW %vreg80, %vreg81, 0; mem:ST4[%1] GR32Bit:%vreg80,%vreg81
*** Final schedule for BB#19 ***
SU(4):   %vreg81<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg81
SU(0):   %vreg77<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg77
SU(1):   %vreg78<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg78
SU(2):   %vreg79<def> = ADD %vreg78, %vreg77; GR32Bit:%vreg79,%vreg78,%vreg77
SU(3):   %vreg80<def> = LW %vreg79, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg80,%vreg79
SU(5):   SW %vreg80, %vreg81, 0; mem:ST4[%1] GR32Bit:%vreg80,%vreg81

Partitioning instructions of the region into multiple CEs
instr:  %vreg81<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg81
instr:  %vreg77<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg77
instr:  %vreg78<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg78
instr:  %vreg79<def> = ADD %vreg78, %vreg77; GR32Bit:%vreg79,%vreg78,%vreg77
instr:  %vreg80<def> = LW %vreg79, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg80,%vreg79
instr:  SW %vreg80, %vreg81, 0; mem:ST4[%1] GR32Bit:%vreg80,%vreg81
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
before falloc, state of bb19:BB#19: derived from LLVM BB %AssignFunction3.return
    Predecessors according to CFG: BB#17 BB#18
	%vreg81<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg81
	%vreg77<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg77
	%vreg78<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg78
	%vreg79<def> = ADD %vreg78, %vreg77; GR32Bit:%vreg79,%vreg78,%vreg77
	%vreg80<def> = LW %vreg79, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg80,%vreg79
	SW %vreg80, %vreg81, 0; mem:ST4[%1] GR32Bit:%vreg80,%vreg81
Adding all fallocs first to avoid stalls due to sequential fallocs and fbinds
Adding writecm(for writing sync count to context frames) and fbind instructions
live end of child is itself
live end of child is itself
Adding localref sw instructions to hyperOp AssignFunction3
Adding writecm instructions to hyperOp AssignFunction3

*** Renumbered SlotIndexes 6596-6612 ***
Adding writecmp and sync instructions
Adding endHyperOp instructions to each pHyperOp

*** Renumbered SlotIndexes 6608-6624 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 6620-6636 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 6632-6648 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 6644-6660 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 6656-6672 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 6668-6684 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0
After Shuffling regions of basic block, state of BB#19:
BB#19: derived from LLVM BB %AssignFunction3.return
    Predecessors according to CFG: BB#17 BB#18
	%vreg81<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg81
	%vreg77<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg77
	%vreg78<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg78
	%vreg79<def> = ADD %vreg78, %vreg77; GR32Bit:%vreg79,%vreg78,%vreg77
	%vreg80<def> = LW %vreg79, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg80,%vreg79
	SW %vreg80, %vreg81, 0; mem:ST4[%1] GR32Bit:%vreg80,%vreg81
	%vreg254<def> = ADDI %zero, 128; GR32Bit:%vreg254
	%vreg255<def> = LW %t5, <fi#0>; GR32Bit:%vreg255
	WRITECM %vreg254, %vreg255, 0; GR32Bit:%vreg254,%vreg255
	FDELETE %t4, 0
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 6592-6728 ***
Creating pHyperOp bundles for CEs for bb19
  END 0
starting at   %vreg81<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg81
  END 0
starting at   END 0
  END 0
starting at   END 0
starting at   END 0
After bundling, state of BB19:BB#19: derived from LLVM BB %AssignFunction3.return
    Predecessors according to CFG: BB#17 BB#18
	%vreg81<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg81
	  * %vreg77<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg77
	  * %vreg78<def> = ADDI %zero, <ga:@eicas_discretes>[TF=3]; GR32Bit:%vreg78
	  * %vreg79<def> = ADD %vreg78, %vreg77; GR32Bit:%vreg79,%vreg78,%vreg77
	  * %vreg80<def> = LW %vreg79, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg80,%vreg79
	  * SW %vreg80, %vreg81, 0; mem:ST4[%1] GR32Bit:%vreg80,%vreg81
	  * %vreg254<def> = ADDI %zero, 128; GR32Bit:%vreg254
	  * %vreg255<def> = LW %t5, <fi#0>; GR32Bit:%vreg255
	  * WRITECM %vreg254, %vreg255, 0; GR32Bit:%vreg254,%vreg255
	  * FDELETE %t4, 0
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
Patching the instructions that are supposed to use the physical registers r30 and r31
Computing live-in reg-units in ABI blocks.
Created 0 new intervals.

*** Renumbered SlotIndexes 1188-6924 ***
********** INTERVALS **********
t5 = EMPTY
zero = [4r,4d:3)[276r,276d:2)[492r,492d:1)[708r,708d:0)  0@708r 1@492r 2@276r 3@4r
%vreg0 = [156r,164r:0)  0@156r
%vreg1 = [148r,172r:0)  0@148r
%vreg2 = [172r,228r:0)  0@172r
%vreg3 = [1236r,1252r:0)  0@1236r
%vreg4 = [1204r,1252r:0)  0@1204r
%vreg5 = [1252r,1276r:0)  0@1252r
%vreg6 = [1260r,1268r:0)  0@1260r
%vreg7 = [1268r,1276r:0)  0@1268r
%vreg8 = [1292r,1300r:0)  0@1292r
%vreg9 = [1300r,1308r:0)  0@1300r
%vreg10 = [1308r,1364r:0)  0@1308r
%vreg11 = [1828r,1844r:0)  0@1828r
%vreg12 = [1796r,1844r:0)  0@1796r
%vreg13 = [1844r,1868r:0)  0@1844r
%vreg14 = [1852r,1860r:0)  0@1852r
%vreg15 = [1860r,1868r:0)  0@1860r
%vreg16 = [1892r,1900r:0)  0@1892r
%vreg17 = [1900r,1908r:0)  0@1900r
%vreg18 = [1908r,1988r:0)  0@1908r
%vreg19 = [1884r,1988r:0)  0@1884r
%vreg20 = [2500r,2508r:0)  0@2500r
%vreg21 = [2508r,2516r:0)  0@2508r
%vreg22 = [2516r,2596r:0)  0@2516r
%vreg23 = [2492r,2596r:0)  0@2492r
%vreg24 = [3132r,3148r:0)  0@3132r
%vreg25 = [3100r,3148r:0)  0@3100r
%vreg26 = [3148r,3172r:0)  0@3148r
%vreg27 = [3156r,3164r:0)  0@3156r
%vreg28 = [3164r,3172r:0)  0@3164r
%vreg29 = [3188r,3196r:0)  0@3188r
%vreg30 = [3196r,3204r:0)  0@3196r
%vreg31 = [3204r,3260r:0)  0@3204r
%vreg32 = [3724r,3740r:0)  0@3724r
%vreg33 = [3692r,3740r:0)  0@3692r
%vreg34 = [3740r,3764r:0)  0@3740r
%vreg35 = [3748r,3756r:0)  0@3748r
%vreg36 = [3756r,3764r:0)  0@3756r
%vreg37 = [3780r,3788r:0)  0@3780r
%vreg38 = [3788r,3796r:0)  0@3788r
%vreg39 = [3796r,3852r:0)  0@3796r
%vreg40 = [4316r,4332r:0)  0@4316r
%vreg41 = [4284r,4332r:0)  0@4284r
%vreg42 = [4332r,4356r:0)  0@4332r
%vreg43 = [4340r,4348r:0)  0@4340r
%vreg44 = [4348r,4356r:0)  0@4348r
%vreg45 = [4372r,4380r:0)  0@4372r
%vreg46 = [4380r,4388r:0)  0@4380r
%vreg47 = [4388r,4444r:0)  0@4388r
%vreg48 = [4908r,4924r:0)  0@4908r
%vreg49 = [4876r,4924r:0)  0@4876r
%vreg50 = [4924r,4948r:0)  0@4924r
%vreg51 = [4932r,4940r:0)  0@4932r
%vreg52 = [4940r,4948r:0)  0@4940r
%vreg53 = [4964r,4972r:0)  0@4964r
%vreg54 = [4972r,4980r:0)  0@4972r
%vreg55 = [4980r,5036r:0)  0@4980r
%vreg56 = [5500r,5516r:0)  0@5500r
%vreg57 = [5468r,5516r:0)  0@5468r
%vreg58 = [5516r,5540r:0)  0@5516r
%vreg59 = [5524r,5532r:0)  0@5524r
%vreg60 = [5532r,5540r:0)  0@5532r
%vreg61 = [5556r,5564r:0)  0@5556r
%vreg62 = [5564r,5572r:0)  0@5564r
%vreg63 = [5572r,5628r:0)  0@5572r
%vreg64 = [6092r,6108r:0)  0@6092r
%vreg65 = [6060r,6108r:0)  0@6060r
%vreg66 = [6108r,6132r:0)  0@6108r
%vreg67 = [6116r,6124r:0)  0@6116r
%vreg68 = [6124r,6132r:0)  0@6124r
%vreg69 = [6148r,6156r:0)  0@6148r
%vreg70 = [6156r,6164r:0)  0@6156r
%vreg71 = [6164r,6220r:0)  0@6164r
%vreg72 = [6684r,6700r:0)  0@6684r
%vreg73 = [6652r,6700r:0)  0@6652r
%vreg74 = [6700r,6724r:0)  0@6700r
%vreg75 = [6708r,6716r:0)  0@6708r
%vreg76 = [6716r,6724r:0)  0@6716r
%vreg77 = [6748r,6764r:0)  0@6748r
%vreg78 = [6756r,6764r:0)  0@6756r
%vreg79 = [6764r,6772r:0)  0@6764r
%vreg80 = [6772r,6788r:0)  0@6772r
%vreg81 = [6740r,6788r:0)  0@6740r
%vreg82 = [4r,4d:0)  0@4r
%vreg83 = [140r,140d:0)  0@140r
%vreg84 = [12r,28r:0)  0@12r
%vreg85 = [16r,20r:0)  0@16r
%vreg86 = [20r,28r:0)  0@20r
%vreg87 = [28r,140r:0)  0@28r
%vreg88 = [36r,132r:0)  0@36r
%vreg89 = [44r,92r:0)  0@44r
%vreg90 = [52r,60r:0)  0@52r
%vreg91 = [60r,108r:0)  0@60r
%vreg92 = [68r,76r:0)  0@68r
%vreg93 = [76r,116r:0)  0@76r
%vreg94 = [84r,92r:0)  0@84r
%vreg95 = [92r,124r:0)  0@92r
%vreg96 = [100r,108r:0)  0@100r
%vreg97 = [108r,116r:0)  0@108r
%vreg98 = [116r,124r:0)  0@116r
%vreg99 = [124r,132r:0)  0@124r
%vreg100 = [132r,140r:0)  0@132r
%vreg101 = [276r,276d:0)  0@276r
%vreg102 = [420r,420d:0)  0@420r
%vreg103 = [284r,308r:0)  0@284r
%vreg104 = [292r,300r:0)  0@292r
%vreg105 = [300r,308r:0)  0@300r
%vreg106 = [308r,420r:0)  0@308r
%vreg107 = [316r,412r:0)  0@316r
%vreg108 = [324r,372r:0)  0@324r
%vreg109 = [332r,340r:0)  0@332r
%vreg110 = [340r,388r:0)  0@340r
%vreg111 = [348r,356r:0)  0@348r
%vreg112 = [356r,396r:0)  0@356r
%vreg113 = [364r,372r:0)  0@364r
%vreg114 = [372r,404r:0)  0@372r
%vreg115 = [380r,388r:0)  0@380r
%vreg116 = [388r,396r:0)  0@388r
%vreg117 = [396r,404r:0)  0@396r
%vreg118 = [404r,412r:0)  0@404r
%vreg119 = [412r,420r:0)  0@412r
%vreg120 = [492r,492d:0)  0@492r
%vreg121 = [636r,636d:0)  0@636r
%vreg122 = [500r,524r:0)  0@500r
%vreg123 = [508r,516r:0)  0@508r
%vreg124 = [516r,524r:0)  0@516r
%vreg125 = [524r,636r:0)  0@524r
%vreg126 = [532r,628r:0)  0@532r
%vreg127 = [540r,588r:0)  0@540r
%vreg128 = [548r,556r:0)  0@548r
%vreg129 = [556r,604r:0)  0@556r
%vreg130 = [564r,572r:0)  0@564r
%vreg131 = [572r,612r:0)  0@572r
%vreg132 = [580r,588r:0)  0@580r
%vreg133 = [588r,620r:0)  0@588r
%vreg134 = [596r,604r:0)  0@596r
%vreg135 = [604r,612r:0)  0@604r
%vreg136 = [612r,620r:0)  0@612r
%vreg137 = [620r,628r:0)  0@620r
%vreg138 = [628r,636r:0)  0@628r
%vreg139 = [708r,708d:0)  0@708r
%vreg140 = [852r,852d:0)  0@852r
%vreg141 = [716r,740r:0)  0@716r
%vreg142 = [724r,732r:0)  0@724r
%vreg143 = [732r,740r:0)  0@732r
%vreg144 = [740r,852r:0)  0@740r
%vreg145 = [748r,844r:0)  0@748r
%vreg146 = [756r,804r:0)  0@756r
%vreg147 = [764r,772r:0)  0@764r
%vreg148 = [772r,820r:0)  0@772r
%vreg149 = [780r,788r:0)  0@780r
%vreg150 = [788r,828r:0)  0@788r
%vreg151 = [796r,804r:0)  0@796r
%vreg152 = [804r,836r:0)  0@804r
%vreg153 = [812r,820r:0)  0@812r
%vreg154 = [820r,828r:0)  0@820r
%vreg155 = [828r,836r:0)  0@828r
%vreg156 = [836r,844r:0)  0@836r
%vreg157 = [844r,852r:0)  0@844r
%vreg158 = [180r,188r:0)  0@180r
%vreg159 = [428r,436r:0)  0@428r
%vreg160 = [196r,204r:0)  0@196r
%vreg161 = [644r,652r:0)  0@644r
%vreg162 = [212r,220r:0)  0@212r
%vreg163 = [972r,988r:0)  0@972r
%vreg164 = [436r,444r:0)  0@436r
%vreg165 = [652r,660r:0)  0@652r
%vreg166 = [988r,1020r:0)  0@988r
%vreg167 = [1316r,1324r:0)  0@1316r
%vreg168 = [1412r,1428r:0)  0@1412r
%vreg169 = [1332r,1340r:0)  0@1332r
%vreg170 = [1492r,1508r:0)  0@1492r
%vreg171 = [1348r,1356r:0)  0@1348r
%vreg172 = [1572r,1588r:0)  0@1572r
%vreg173 = [1428r,1436r:0)  0@1428r
%vreg174 = [1508r,1516r:0)  0@1508r
%vreg175 = [1588r,1620r:0)  0@1588r
%vreg176 = [1916r,1964r:0)  0@1916r
%vreg177 = [2036r,2060r:0)  0@2036r
%vreg178 = [1932r,1972r:0)  0@1932r
%vreg179 = [2124r,2148r:0)  0@2124r
%vreg180 = [1948r,1980r:0)  0@1948r
%vreg181 = [2212r,2276r:0)  0@2212r
%vreg182 = [2052r,2068r:0)  0@2052r
%vreg183 = [2140r,2156r:0)  0@2140r
%vreg184 = [2228r,2316r:0)  0@2228r
%vreg185 = [2060r,2068r:0)  0@2060r
%vreg186 = [2148r,2156r:0)  0@2148r
%vreg187 = [2276r,2316r:0)  0@2276r
%vreg188 = [2524r,2572r:0)  0@2524r
%vreg189 = [2644r,2668r:0)  0@2644r
%vreg190 = [2540r,2580r:0)  0@2540r
%vreg191 = [2732r,2756r:0)  0@2732r
%vreg192 = [2556r,2588r:0)  0@2556r
%vreg193 = [2820r,2884r:0)  0@2820r
%vreg194 = [2660r,2676r:0)  0@2660r
%vreg195 = [2748r,2764r:0)  0@2748r
%vreg196 = [2836r,2924r:0)  0@2836r
%vreg197 = [2668r,2676r:0)  0@2668r
%vreg198 = [2756r,2764r:0)  0@2756r
%vreg199 = [2884r,2924r:0)  0@2884r
%vreg200 = [3212r,3220r:0)  0@3212r
%vreg201 = [3308r,3324r:0)  0@3308r
%vreg202 = [3228r,3236r:0)  0@3228r
%vreg203 = [3388r,3404r:0)  0@3388r
%vreg204 = [3244r,3252r:0)  0@3244r
%vreg205 = [3468r,3484r:0)  0@3468r
%vreg206 = [3324r,3332r:0)  0@3324r
%vreg207 = [3404r,3412r:0)  0@3404r
%vreg208 = [3484r,3516r:0)  0@3484r
%vreg209 = [3804r,3812r:0)  0@3804r
%vreg210 = [3900r,3916r:0)  0@3900r
%vreg211 = [3820r,3828r:0)  0@3820r
%vreg212 = [3980r,3996r:0)  0@3980r
%vreg213 = [3836r,3844r:0)  0@3836r
%vreg214 = [4060r,4076r:0)  0@4060r
%vreg215 = [3916r,3924r:0)  0@3916r
%vreg216 = [3996r,4004r:0)  0@3996r
%vreg217 = [4076r,4108r:0)  0@4076r
%vreg218 = [4396r,4404r:0)  0@4396r
%vreg219 = [4492r,4508r:0)  0@4492r
%vreg220 = [4412r,4420r:0)  0@4412r
%vreg221 = [4572r,4588r:0)  0@4572r
%vreg222 = [4428r,4436r:0)  0@4428r
%vreg223 = [4652r,4668r:0)  0@4652r
%vreg224 = [4508r,4516r:0)  0@4508r
%vreg225 = [4588r,4596r:0)  0@4588r
%vreg226 = [4668r,4700r:0)  0@4668r
%vreg227 = [4988r,4996r:0)  0@4988r
%vreg228 = [5084r,5100r:0)  0@5084r
%vreg229 = [5004r,5012r:0)  0@5004r
%vreg230 = [5164r,5180r:0)  0@5164r
%vreg231 = [5020r,5028r:0)  0@5020r
%vreg232 = [5244r,5260r:0)  0@5244r
%vreg233 = [5100r,5108r:0)  0@5100r
%vreg234 = [5180r,5188r:0)  0@5180r
%vreg235 = [5260r,5292r:0)  0@5260r
%vreg236 = [5580r,5588r:0)  0@5580r
%vreg237 = [5676r,5692r:0)  0@5676r
%vreg238 = [5596r,5604r:0)  0@5596r
%vreg239 = [5756r,5772r:0)  0@5756r
%vreg240 = [5612r,5620r:0)  0@5612r
%vreg241 = [5836r,5852r:0)  0@5836r
%vreg242 = [5692r,5700r:0)  0@5692r
%vreg243 = [5772r,5780r:0)  0@5772r
%vreg244 = [5852r,5884r:0)  0@5852r
%vreg245 = [6172r,6180r:0)  0@6172r
%vreg246 = [6268r,6284r:0)  0@6268r
%vreg247 = [6188r,6196r:0)  0@6188r
%vreg248 = [6348r,6364r:0)  0@6348r
%vreg249 = [6204r,6212r:0)  0@6204r
%vreg250 = [6428r,6444r:0)  0@6428r
%vreg251 = [6284r,6292r:0)  0@6284r
%vreg252 = [6364r,6372r:0)  0@6364r
%vreg253 = [6444r,6476r:0)  0@6444r
%vreg254 = [6796r,6812r:0)  0@6796r
%vreg255 = [6804r,6812r:0)  0@6804r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function AssignFunction3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %AssignFunction3.entry
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg84<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg84
4B		  * %vreg85<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg85
4B		  * %vreg86<def> = SRLI %vreg85, 12; GR32Bit:%vreg86,%vreg85
4B		  * %vreg87<def> = ADD %vreg84, %vreg86; GR32Bit:%vreg87,%vreg84,%vreg86
4B		  * %vreg88<def> = ADDI %zero, 12; GR32Bit:%vreg88
4B		  * %vreg89<def> = SRLI %t5, 22; GR32Bit:%vreg89
4B		  * %vreg90<def> = SRLI %t5, 12; GR32Bit:%vreg90
4B		  * %vreg91<def> = ANDI %vreg90, 15; GR32Bit:%vreg91,%vreg90
4B		  * %vreg92<def> = SRLI %t5, 6; GR32Bit:%vreg92
4B		  * %vreg93<def> = ANDI %vreg92, 63; GR32Bit:%vreg93,%vreg92
4B		  * %vreg94<def> = ADDI %zero, 832; GR32Bit:%vreg94
4B		  * %vreg95<def> = MUL %vreg89, %vreg94; GR32Bit:%vreg95,%vreg89,%vreg94
4B		  * %vreg96<def> = ADDI %zero, 52; GR32Bit:%vreg96
4B		  * %vreg97<def> = MUL %vreg91, %vreg96; GR32Bit:%vreg97,%vreg91,%vreg96
4B		  * %vreg98<def> = ADD %vreg97, %vreg93; GR32Bit:%vreg98,%vreg97,%vreg93
4B		  * %vreg99<def> = ADD %vreg98, %vreg95; GR32Bit:%vreg99,%vreg98,%vreg95
4B		  * %vreg100<def> = MUL %vreg99, %vreg88; GR32Bit:%vreg100,%vreg99,%vreg88
4B		  * %t5<def> = ADD %vreg87, %vreg100; GR32Bit:%vreg87,%vreg100
4B		  * %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
4B		  * %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
4B		  * SW %vreg1, %vreg0, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
4B		  * %vreg2<def> = LW %vreg1, 0; mem:LD4[%4](align=16) GR32Bit:%vreg2,%vreg1
4B		  * %vreg158<def> = LUI 1; GR32Bit:%vreg158
4B		  * WRITEPM %vreg158, %vreg2, 0; GR32Bit:%vreg158,%vreg2
4B		  * %vreg160<def> = LUI 2; GR32Bit:%vreg160
4B		  * WRITEPM %vreg160, %vreg2, 0; GR32Bit:%vreg160,%vreg2
4B		  * %vreg162<def> = LUI 3; GR32Bit:%vreg162
4B		  * WRITEPM %vreg162, %vreg2, 0; GR32Bit:%vreg162,%vreg2
4B		  * BEQ <BB#2>, %vreg2, %zero; GR32Bit:%vreg2
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
4B		  * JAL <BB#1>
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
276B		%t4<def> = ADD %t5, %zero
276B		  * %vreg103<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg103
276B		  * %vreg104<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg104
276B		  * %vreg105<def> = SRLI %vreg104, 12; GR32Bit:%vreg105,%vreg104
276B		  * %vreg106<def> = ADD %vreg103, %vreg105; GR32Bit:%vreg106,%vreg103,%vreg105
276B		  * %vreg107<def> = ADDI %zero, 12; GR32Bit:%vreg107
276B		  * %vreg108<def> = SRLI %t5, 22; GR32Bit:%vreg108
276B		  * %vreg109<def> = SRLI %t5, 12; GR32Bit:%vreg109
276B		  * %vreg110<def> = ANDI %vreg109, 15; GR32Bit:%vreg110,%vreg109
276B		  * %vreg111<def> = SRLI %t5, 6; GR32Bit:%vreg111
276B		  * %vreg112<def> = ANDI %vreg111, 63; GR32Bit:%vreg112,%vreg111
276B		  * %vreg113<def> = ADDI %zero, 832; GR32Bit:%vreg113
276B		  * %vreg114<def> = MUL %vreg108, %vreg113; GR32Bit:%vreg114,%vreg108,%vreg113
276B		  * %vreg115<def> = ADDI %zero, 52; GR32Bit:%vreg115
276B		  * %vreg116<def> = MUL %vreg110, %vreg115; GR32Bit:%vreg116,%vreg110,%vreg115
276B		  * %vreg117<def> = ADD %vreg116, %vreg112; GR32Bit:%vreg117,%vreg116,%vreg112
276B		  * %vreg118<def> = ADD %vreg117, %vreg114; GR32Bit:%vreg118,%vreg117,%vreg114
276B		  * %vreg119<def> = MUL %vreg118, %vreg107; GR32Bit:%vreg119,%vreg118,%vreg107
276B		  * %t5<def> = ADD %vreg106, %vreg119; GR32Bit:%vreg106,%vreg119
276B		  * %vreg159<def> = LUI 1; GR32Bit:%vreg159
276B		  * %vreg164<def> = DREADPM %vreg159, 0; GR32Bit:%vreg164,%vreg159
276B		  * BEQ <BB#2>, %vreg164, %zero; GR32Bit:%vreg164
276B		  * %zero<def> = ADDI %zero, 0
276B		  * %zero<def> = ADDI %zero, 0
276B		  * JAL <BB#1>
276B		  * %zero<def> = ADDI %zero, 0
276B		  * %zero<def> = ADDI %zero, 0
492B		%t4<def> = ADD %t5, %zero
492B		  * %vreg122<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg122
492B		  * %vreg123<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg123
492B		  * %vreg124<def> = SRLI %vreg123, 12; GR32Bit:%vreg124,%vreg123
492B		  * %vreg125<def> = ADD %vreg122, %vreg124; GR32Bit:%vreg125,%vreg122,%vreg124
492B		  * %vreg126<def> = ADDI %zero, 12; GR32Bit:%vreg126
492B		  * %vreg127<def> = SRLI %t5, 22; GR32Bit:%vreg127
492B		  * %vreg128<def> = SRLI %t5, 12; GR32Bit:%vreg128
492B		  * %vreg129<def> = ANDI %vreg128, 15; GR32Bit:%vreg129,%vreg128
492B		  * %vreg130<def> = SRLI %t5, 6; GR32Bit:%vreg130
492B		  * %vreg131<def> = ANDI %vreg130, 63; GR32Bit:%vreg131,%vreg130
492B		  * %vreg132<def> = ADDI %zero, 832; GR32Bit:%vreg132
492B		  * %vreg133<def> = MUL %vreg127, %vreg132; GR32Bit:%vreg133,%vreg127,%vreg132
492B		  * %vreg134<def> = ADDI %zero, 52; GR32Bit:%vreg134
492B		  * %vreg135<def> = MUL %vreg129, %vreg134; GR32Bit:%vreg135,%vreg129,%vreg134
492B		  * %vreg136<def> = ADD %vreg135, %vreg131; GR32Bit:%vreg136,%vreg135,%vreg131
492B		  * %vreg137<def> = ADD %vreg136, %vreg133; GR32Bit:%vreg137,%vreg136,%vreg133
492B		  * %vreg138<def> = MUL %vreg137, %vreg126; GR32Bit:%vreg138,%vreg137,%vreg126
492B		  * %t5<def> = ADD %vreg125, %vreg138; GR32Bit:%vreg125,%vreg138
492B		  * %vreg161<def> = LUI 2; GR32Bit:%vreg161
492B		  * %vreg165<def> = DREADPM %vreg161, 0; GR32Bit:%vreg165,%vreg161
492B		  * BEQ <BB#2>, %vreg165, %zero; GR32Bit:%vreg165
492B		  * %zero<def> = ADDI %zero, 0
492B		  * %zero<def> = ADDI %zero, 0
492B		  * JAL <BB#1>
492B		  * %zero<def> = ADDI %zero, 0
492B		  * %zero<def> = ADDI %zero, 0
708B		%t4<def> = ADD %t5, %zero
708B		  * %vreg141<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg141
708B		  * %vreg142<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg142
708B		  * %vreg143<def> = SRLI %vreg142, 12; GR32Bit:%vreg143,%vreg142
708B		  * %vreg144<def> = ADD %vreg141, %vreg143; GR32Bit:%vreg144,%vreg141,%vreg143
708B		  * %vreg145<def> = ADDI %zero, 12; GR32Bit:%vreg145
708B		  * %vreg146<def> = SRLI %t5, 22; GR32Bit:%vreg146
708B		  * %vreg147<def> = SRLI %t5, 12; GR32Bit:%vreg147
708B		  * %vreg148<def> = ANDI %vreg147, 15; GR32Bit:%vreg148,%vreg147
708B		  * %vreg149<def> = SRLI %t5, 6; GR32Bit:%vreg149
708B		  * %vreg150<def> = ANDI %vreg149, 63; GR32Bit:%vreg150,%vreg149
708B		  * %vreg151<def> = ADDI %zero, 832; GR32Bit:%vreg151
708B		  * %vreg152<def> = MUL %vreg146, %vreg151; GR32Bit:%vreg152,%vreg146,%vreg151
708B		  * %vreg153<def> = ADDI %zero, 52; GR32Bit:%vreg153
708B		  * %vreg154<def> = MUL %vreg148, %vreg153; GR32Bit:%vreg154,%vreg148,%vreg153
708B		  * %vreg155<def> = ADD %vreg154, %vreg150; GR32Bit:%vreg155,%vreg154,%vreg150
708B		  * %vreg156<def> = ADD %vreg155, %vreg152; GR32Bit:%vreg156,%vreg155,%vreg152
708B		  * %vreg157<def> = MUL %vreg156, %vreg145; GR32Bit:%vreg157,%vreg156,%vreg145
708B		  * %t5<def> = ADD %vreg144, %vreg157; GR32Bit:%vreg144,%vreg157
708B		  * %vreg163<def> = LUI 3; GR32Bit:%vreg163
708B		  * %vreg166<def> = DREADPM %vreg163, 0; GR32Bit:%vreg166,%vreg163
708B		  * BEQ <BB#2>, %vreg166, %zero; GR32Bit:%vreg166
708B		  * %zero<def> = ADDI %zero, 0
708B		  * %zero<def> = ADDI %zero, 0
708B		  * JAL <BB#1>
708B		  * %zero<def> = ADDI %zero, 0
708B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#1(20) BB#2(12)

1188B	BB#1: derived from LLVM BB %AssignFunction3.if.then
	    Predecessors according to CFG: BB#0
1196B		%vreg4<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg4
1196B		  * SRLI %vreg4, %vreg4, 12; GR32Bit:%vreg4
1196B		  * %vreg3<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg3
1196B		  * %vreg5<def> = ADD %vreg4, %vreg3; GR32Bit:%vreg5,%vreg4,%vreg3
1196B		  * %vreg6<def> = LW %vreg5, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg6,%vreg5
1196B		  * %vreg7<def> = ORI %vreg6, 1; GR32Bit:%vreg7,%vreg6
1196B		  * SW %vreg7, %vreg5, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg7,%vreg5
1212B		%zero<def> = ADDI %zero, 0
1220B		%zero<def> = ADDI %zero, 0
1228B		%zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#2

1284B	BB#2: derived from LLVM BB %AssignFunction3.if.end
	    Predecessors according to CFG: BB#0 BB#1
1292B		%vreg8<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg8
1292B		  * %vreg9<def> = LW %vreg8, 0; mem:LD4[%2] GR32Bit:%vreg9,%vreg8
1292B		  * %vreg10<def> = LW %vreg9, 4; mem:LD4[%10] GR32Bit:%vreg10,%vreg9
1292B		  * %vreg167<def> = LUI 1; GR32Bit:%vreg167
1292B		  * WRITEPM %vreg167, %vreg10, 0; GR32Bit:%vreg167,%vreg10
1292B		  * %vreg169<def> = LUI 2; GR32Bit:%vreg169
1292B		  * WRITEPM %vreg169, %vreg10, 0; GR32Bit:%vreg169,%vreg10
1292B		  * %vreg171<def> = LUI 3; GR32Bit:%vreg171
1292B		  * WRITEPM %vreg171, %vreg10, 0; GR32Bit:%vreg171,%vreg10
1292B		  * BEQ <BB#4>, %vreg10, %zero; GR32Bit:%vreg10
1292B		  * %zero<def> = ADDI %zero, 0
1292B		  * %zero<def> = ADDI %zero, 0
1292B		  * JAL <BB#3>
1292B		  * %zero<def> = ADDI %zero, 0
1292B		  * %zero<def> = ADDI %zero, 0
1412B		%vreg168<def> = LUI 1; GR32Bit:%vreg168
1412B		  * %vreg173<def> = DREADPM %vreg168, 0; GR32Bit:%vreg173,%vreg168
1412B		  * BEQ <BB#4>, %vreg173, %zero; GR32Bit:%vreg173
1412B		  * %zero<def> = ADDI %zero, 0
1412B		  * %zero<def> = ADDI %zero, 0
1412B		  * JAL <BB#3>
1412B		  * %zero<def> = ADDI %zero, 0
1412B		  * %zero<def> = ADDI %zero, 0
1492B		%vreg170<def> = LUI 2; GR32Bit:%vreg170
1492B		  * %vreg174<def> = DREADPM %vreg170, 0; GR32Bit:%vreg174,%vreg170
1492B		  * BEQ <BB#4>, %vreg174, %zero; GR32Bit:%vreg174
1492B		  * %zero<def> = ADDI %zero, 0
1492B		  * %zero<def> = ADDI %zero, 0
1492B		  * JAL <BB#3>
1492B		  * %zero<def> = ADDI %zero, 0
1492B		  * %zero<def> = ADDI %zero, 0
1572B		%vreg172<def> = LUI 3; GR32Bit:%vreg172
1572B		  * %vreg175<def> = DREADPM %vreg172, 0; GR32Bit:%vreg175,%vreg172
1572B		  * BEQ <BB#4>, %vreg175, %zero; GR32Bit:%vreg175
1572B		  * %zero<def> = ADDI %zero, 0
1572B		  * %zero<def> = ADDI %zero, 0
1572B		  * JAL <BB#3>
1572B		  * %zero<def> = ADDI %zero, 0
1572B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#3(20) BB#4(12)

1788B	BB#3: derived from LLVM BB %AssignFunction3.if.then3
	    Predecessors according to CFG: BB#2
1204B		%vreg12<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg12
1204B		  * SRLI %vreg12, %vreg12, 12; GR32Bit:%vreg12
1204B		  * %vreg11<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg11
1204B		  * %vreg13<def> = ADD %vreg12, %vreg11; GR32Bit:%vreg13,%vreg12,%vreg11
1204B		  * %vreg14<def> = LW %vreg13, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg14,%vreg13
1204B		  * %vreg15<def> = ORI %vreg14, 2; GR32Bit:%vreg15,%vreg14
1204B		  * SW %vreg15, %vreg13, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg15,%vreg13
1804B		%zero<def> = ADDI %zero, 0
1812B		%zero<def> = ADDI %zero, 0
1820B		%zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#4

1876B	BB#4: derived from LLVM BB %AssignFunction3.if.end5
	    Predecessors according to CFG: BB#2 BB#3
1884B		%vreg19<def> = ADDI %zero, 250; GR32Bit:%vreg19
1884B		  * %vreg16<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg16
1884B		  * %vreg17<def> = LW %vreg16, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg16
1884B		  * %vreg18<def> = LW %vreg17, 8; mem:LD4[%16] GR32Bit:%vreg18,%vreg17
1884B		  * %vreg176<def> = LUI 1; GR32Bit:%vreg176
1884B		  * WRITEPM %vreg176, %vreg18, 0; GR32Bit:%vreg176,%vreg18
1884B		  * %vreg178<def> = LUI 2; GR32Bit:%vreg178
1884B		  * WRITEPM %vreg178, %vreg18, 0; GR32Bit:%vreg178,%vreg18
1884B		  * %vreg180<def> = LUI 3; GR32Bit:%vreg180
1884B		  * WRITEPM %vreg180, %vreg18, 0; GR32Bit:%vreg180,%vreg18
1884B		  * WRITEPM %vreg176, %vreg19, 4; GR32Bit:%vreg176,%vreg19
1884B		  * WRITEPM %vreg178, %vreg19, 4; GR32Bit:%vreg178,%vreg19
1884B		  * WRITEPM %vreg180, %vreg19, 4; GR32Bit:%vreg180,%vreg19
1884B		  * BGT <BB#6>, %vreg18, %vreg19; GR32Bit:%vreg18,%vreg19
1884B		  * %zero<def> = ADDI %zero, 0
1884B		  * %zero<def> = ADDI %zero, 0
1884B		  * JAL <BB#5>
1884B		  * %zero<def> = ADDI %zero, 0
1884B		  * %zero<def> = ADDI %zero, 0
2036B		%vreg177<def> = LUI 1; GR32Bit:%vreg177
2036B		  * %vreg182<def> = DREADPM %vreg177, 0; GR32Bit:%vreg182,%vreg177
2036B		  * %vreg185<def> = DREADPM %vreg177, 4; GR32Bit:%vreg185,%vreg177
2036B		  * BGT <BB#6>, %vreg182, %vreg185; GR32Bit:%vreg182,%vreg185
2036B		  * %zero<def> = ADDI %zero, 0
2036B		  * %zero<def> = ADDI %zero, 0
2036B		  * JAL <BB#5>
2036B		  * %zero<def> = ADDI %zero, 0
2036B		  * %zero<def> = ADDI %zero, 0
2124B		%vreg179<def> = LUI 2; GR32Bit:%vreg179
2124B		  * %vreg183<def> = DREADPM %vreg179, 0; GR32Bit:%vreg183,%vreg179
2124B		  * %vreg186<def> = DREADPM %vreg179, 4; GR32Bit:%vreg186,%vreg179
2124B		  * BGT <BB#6>, %vreg183, %vreg186; GR32Bit:%vreg183,%vreg186
2124B		  * %zero<def> = ADDI %zero, 0
2124B		  * %zero<def> = ADDI %zero, 0
2124B		  * JAL <BB#5>
2124B		  * %zero<def> = ADDI %zero, 0
2124B		  * %zero<def> = ADDI %zero, 0
2212B		%vreg181<def> = LUI 3; GR32Bit:%vreg181
2212B		  * %vreg184<def> = DREADPM %vreg181, 0; GR32Bit:%vreg184,%vreg181
2212B		  * %vreg187<def> = DREADPM %vreg181, 4; GR32Bit:%vreg187,%vreg181
2212B		  * BGT <BB#6>, %vreg184, %vreg187; GR32Bit:%vreg184,%vreg187
2212B		  * %zero<def> = ADDI %zero, 0
2212B		  * %zero<def> = ADDI %zero, 0
2212B		  * JAL <BB#5>
2212B		  * %zero<def> = ADDI %zero, 0
2212B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#6(16) BB#5(16)

2484B	BB#5: derived from LLVM BB %AssignFunction3.lor.lhs.false
	    Predecessors according to CFG: BB#4
2492B		%vreg23<def> = ADDI %zero, 251; GR32Bit:%vreg23
2492B		  * %vreg20<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg20
2492B		  * %vreg21<def> = LW %vreg20, 0; mem:LD4[%2] GR32Bit:%vreg21,%vreg20
2492B		  * %vreg22<def> = LW %vreg21, 12; mem:LD4[%20] GR32Bit:%vreg22,%vreg21
2492B		  * %vreg188<def> = LUI 1; GR32Bit:%vreg188
2492B		  * WRITEPM %vreg188, %vreg22, 0; GR32Bit:%vreg188,%vreg22
2492B		  * %vreg190<def> = LUI 2; GR32Bit:%vreg190
2492B		  * WRITEPM %vreg190, %vreg22, 0; GR32Bit:%vreg190,%vreg22
2492B		  * %vreg192<def> = LUI 3; GR32Bit:%vreg192
2492B		  * WRITEPM %vreg192, %vreg22, 0; GR32Bit:%vreg192,%vreg22
2492B		  * WRITEPM %vreg188, %vreg23, 4; GR32Bit:%vreg188,%vreg23
2492B		  * WRITEPM %vreg190, %vreg23, 4; GR32Bit:%vreg190,%vreg23
2492B		  * WRITEPM %vreg192, %vreg23, 4; GR32Bit:%vreg192,%vreg23
2492B		  * BLT <BB#7>, %vreg22, %vreg23; GR32Bit:%vreg22,%vreg23
2492B		  * %zero<def> = ADDI %zero, 0
2492B		  * %zero<def> = ADDI %zero, 0
2492B		  * JAL <BB#6>
2492B		  * %zero<def> = ADDI %zero, 0
2492B		  * %zero<def> = ADDI %zero, 0
2644B		%vreg189<def> = LUI 1; GR32Bit:%vreg189
2644B		  * %vreg194<def> = DREADPM %vreg189, 0; GR32Bit:%vreg194,%vreg189
2644B		  * %vreg197<def> = DREADPM %vreg189, 4; GR32Bit:%vreg197,%vreg189
2644B		  * BLT <BB#7>, %vreg194, %vreg197; GR32Bit:%vreg194,%vreg197
2644B		  * %zero<def> = ADDI %zero, 0
2644B		  * %zero<def> = ADDI %zero, 0
2644B		  * JAL <BB#6>
2644B		  * %zero<def> = ADDI %zero, 0
2644B		  * %zero<def> = ADDI %zero, 0
2732B		%vreg191<def> = LUI 2; GR32Bit:%vreg191
2732B		  * %vreg195<def> = DREADPM %vreg191, 0; GR32Bit:%vreg195,%vreg191
2732B		  * %vreg198<def> = DREADPM %vreg191, 4; GR32Bit:%vreg198,%vreg191
2732B		  * BLT <BB#7>, %vreg195, %vreg198; GR32Bit:%vreg195,%vreg198
2732B		  * %zero<def> = ADDI %zero, 0
2732B		  * %zero<def> = ADDI %zero, 0
2732B		  * JAL <BB#6>
2732B		  * %zero<def> = ADDI %zero, 0
2732B		  * %zero<def> = ADDI %zero, 0
2820B		%vreg193<def> = LUI 3; GR32Bit:%vreg193
2820B		  * %vreg196<def> = DREADPM %vreg193, 0; GR32Bit:%vreg196,%vreg193
2820B		  * %vreg199<def> = DREADPM %vreg193, 4; GR32Bit:%vreg199,%vreg193
2820B		  * BLT <BB#7>, %vreg196, %vreg199; GR32Bit:%vreg196,%vreg199
2820B		  * %zero<def> = ADDI %zero, 0
2820B		  * %zero<def> = ADDI %zero, 0
2820B		  * JAL <BB#6>
2820B		  * %zero<def> = ADDI %zero, 0
2820B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#6(16) BB#7(16)

3092B	BB#6: derived from LLVM BB %AssignFunction3.if.then9
	    Predecessors according to CFG: BB#4 BB#5
1796B		%vreg25<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg25
1796B		  * SRLI %vreg25, %vreg25, 12; GR32Bit:%vreg25
1796B		  * %vreg24<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg24
1796B		  * %vreg26<def> = ADD %vreg25, %vreg24; GR32Bit:%vreg26,%vreg25,%vreg24
1796B		  * %vreg27<def> = LW %vreg26, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg27,%vreg26
1796B		  * %vreg28<def> = ORI %vreg27, 4; GR32Bit:%vreg28,%vreg27
1796B		  * SW %vreg28, %vreg26, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg28,%vreg26
3108B		%zero<def> = ADDI %zero, 0
3116B		%zero<def> = ADDI %zero, 0
3124B		%zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#7

3180B	BB#7: derived from LLVM BB %AssignFunction3.if.end11
	    Predecessors according to CFG: BB#5 BB#6
3188B		%vreg29<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg29
3188B		  * %vreg30<def> = LW %vreg29, 0; mem:LD4[%2] GR32Bit:%vreg30,%vreg29
3188B		  * %vreg31<def> = LW %vreg30, 16; mem:LD4[%26] GR32Bit:%vreg31,%vreg30
3188B		  * %vreg200<def> = LUI 1; GR32Bit:%vreg200
3188B		  * WRITEPM %vreg200, %vreg31, 0; GR32Bit:%vreg200,%vreg31
3188B		  * %vreg202<def> = LUI 2; GR32Bit:%vreg202
3188B		  * WRITEPM %vreg202, %vreg31, 0; GR32Bit:%vreg202,%vreg31
3188B		  * %vreg204<def> = LUI 3; GR32Bit:%vreg204
3188B		  * WRITEPM %vreg204, %vreg31, 0; GR32Bit:%vreg204,%vreg31
3188B		  * BEQ <BB#9>, %vreg31, %zero; GR32Bit:%vreg31
3188B		  * %zero<def> = ADDI %zero, 0
3188B		  * %zero<def> = ADDI %zero, 0
3188B		  * JAL <BB#8>
3188B		  * %zero<def> = ADDI %zero, 0
3188B		  * %zero<def> = ADDI %zero, 0
3308B		%vreg201<def> = LUI 1; GR32Bit:%vreg201
3308B		  * %vreg206<def> = DREADPM %vreg201, 0; GR32Bit:%vreg206,%vreg201
3308B		  * BEQ <BB#9>, %vreg206, %zero; GR32Bit:%vreg206
3308B		  * %zero<def> = ADDI %zero, 0
3308B		  * %zero<def> = ADDI %zero, 0
3308B		  * JAL <BB#8>
3308B		  * %zero<def> = ADDI %zero, 0
3308B		  * %zero<def> = ADDI %zero, 0
3388B		%vreg203<def> = LUI 2; GR32Bit:%vreg203
3388B		  * %vreg207<def> = DREADPM %vreg203, 0; GR32Bit:%vreg207,%vreg203
3388B		  * BEQ <BB#9>, %vreg207, %zero; GR32Bit:%vreg207
3388B		  * %zero<def> = ADDI %zero, 0
3388B		  * %zero<def> = ADDI %zero, 0
3388B		  * JAL <BB#8>
3388B		  * %zero<def> = ADDI %zero, 0
3388B		  * %zero<def> = ADDI %zero, 0
3468B		%vreg205<def> = LUI 3; GR32Bit:%vreg205
3468B		  * %vreg208<def> = DREADPM %vreg205, 0; GR32Bit:%vreg208,%vreg205
3468B		  * BEQ <BB#9>, %vreg208, %zero; GR32Bit:%vreg208
3468B		  * %zero<def> = ADDI %zero, 0
3468B		  * %zero<def> = ADDI %zero, 0
3468B		  * JAL <BB#8>
3468B		  * %zero<def> = ADDI %zero, 0
3468B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#8(20) BB#9(12)

3684B	BB#8: derived from LLVM BB %AssignFunction3.if.then14
	    Predecessors according to CFG: BB#7
3100B		%vreg33<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg33
3100B		  * SRLI %vreg33, %vreg33, 12; GR32Bit:%vreg33
3100B		  * %vreg32<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg32
3100B		  * %vreg34<def> = ADD %vreg33, %vreg32; GR32Bit:%vreg34,%vreg33,%vreg32
3100B		  * %vreg35<def> = LW %vreg34, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg35,%vreg34
3100B		  * %vreg36<def> = ORI %vreg35, 16; GR32Bit:%vreg36,%vreg35
3100B		  * SW %vreg36, %vreg34, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg36,%vreg34
3700B		%zero<def> = ADDI %zero, 0
3708B		%zero<def> = ADDI %zero, 0
3716B		%zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#9

3772B	BB#9: derived from LLVM BB %AssignFunction3.if.end16
	    Predecessors according to CFG: BB#7 BB#8
3780B		%vreg37<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg37
3780B		  * %vreg38<def> = LW %vreg37, 0; mem:LD4[%2] GR32Bit:%vreg38,%vreg37
3780B		  * %vreg39<def> = LW %vreg38, 20; mem:LD4[%32] GR32Bit:%vreg39,%vreg38
3780B		  * %vreg209<def> = LUI 1; GR32Bit:%vreg209
3780B		  * WRITEPM %vreg209, %vreg39, 0; GR32Bit:%vreg209,%vreg39
3780B		  * %vreg211<def> = LUI 2; GR32Bit:%vreg211
3780B		  * WRITEPM %vreg211, %vreg39, 0; GR32Bit:%vreg211,%vreg39
3780B		  * %vreg213<def> = LUI 3; GR32Bit:%vreg213
3780B		  * WRITEPM %vreg213, %vreg39, 0; GR32Bit:%vreg213,%vreg39
3780B		  * BEQ <BB#11>, %vreg39, %zero; GR32Bit:%vreg39
3780B		  * %zero<def> = ADDI %zero, 0
3780B		  * %zero<def> = ADDI %zero, 0
3780B		  * JAL <BB#10>
3780B		  * %zero<def> = ADDI %zero, 0
3780B		  * %zero<def> = ADDI %zero, 0
3900B		%vreg210<def> = LUI 1; GR32Bit:%vreg210
3900B		  * %vreg215<def> = DREADPM %vreg210, 0; GR32Bit:%vreg215,%vreg210
3900B		  * BEQ <BB#11>, %vreg215, %zero; GR32Bit:%vreg215
3900B		  * %zero<def> = ADDI %zero, 0
3900B		  * %zero<def> = ADDI %zero, 0
3900B		  * JAL <BB#10>
3900B		  * %zero<def> = ADDI %zero, 0
3900B		  * %zero<def> = ADDI %zero, 0
3980B		%vreg212<def> = LUI 2; GR32Bit:%vreg212
3980B		  * %vreg216<def> = DREADPM %vreg212, 0; GR32Bit:%vreg216,%vreg212
3980B		  * BEQ <BB#11>, %vreg216, %zero; GR32Bit:%vreg216
3980B		  * %zero<def> = ADDI %zero, 0
3980B		  * %zero<def> = ADDI %zero, 0
3980B		  * JAL <BB#10>
3980B		  * %zero<def> = ADDI %zero, 0
3980B		  * %zero<def> = ADDI %zero, 0
4060B		%vreg214<def> = LUI 3; GR32Bit:%vreg214
4060B		  * %vreg217<def> = DREADPM %vreg214, 0; GR32Bit:%vreg217,%vreg214
4060B		  * BEQ <BB#11>, %vreg217, %zero; GR32Bit:%vreg217
4060B		  * %zero<def> = ADDI %zero, 0
4060B		  * %zero<def> = ADDI %zero, 0
4060B		  * JAL <BB#10>
4060B		  * %zero<def> = ADDI %zero, 0
4060B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#10(20) BB#11(12)

4276B	BB#10: derived from LLVM BB %AssignFunction3.if.then19
	    Predecessors according to CFG: BB#9
3692B		%vreg41<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg41
3692B		  * SRLI %vreg41, %vreg41, 12; GR32Bit:%vreg41
3692B		  * %vreg40<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg40
3692B		  * %vreg42<def> = ADD %vreg41, %vreg40; GR32Bit:%vreg42,%vreg41,%vreg40
3692B		  * %vreg43<def> = LW %vreg42, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg43,%vreg42
3692B		  * %vreg44<def> = ORI %vreg43, 32; GR32Bit:%vreg44,%vreg43
3692B		  * SW %vreg44, %vreg42, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg44,%vreg42
4292B		%zero<def> = ADDI %zero, 0
4300B		%zero<def> = ADDI %zero, 0
4308B		%zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#11

4364B	BB#11: derived from LLVM BB %AssignFunction3.if.end21
	    Predecessors according to CFG: BB#9 BB#10
4372B		%vreg45<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg45
4372B		  * %vreg46<def> = LW %vreg45, 0; mem:LD4[%2] GR32Bit:%vreg46,%vreg45
4372B		  * %vreg47<def> = LW %vreg46, 24; mem:LD4[%38] GR32Bit:%vreg47,%vreg46
4372B		  * %vreg218<def> = LUI 1; GR32Bit:%vreg218
4372B		  * WRITEPM %vreg218, %vreg47, 0; GR32Bit:%vreg218,%vreg47
4372B		  * %vreg220<def> = LUI 2; GR32Bit:%vreg220
4372B		  * WRITEPM %vreg220, %vreg47, 0; GR32Bit:%vreg220,%vreg47
4372B		  * %vreg222<def> = LUI 3; GR32Bit:%vreg222
4372B		  * WRITEPM %vreg222, %vreg47, 0; GR32Bit:%vreg222,%vreg47
4372B		  * BEQ <BB#13>, %vreg47, %zero; GR32Bit:%vreg47
4372B		  * %zero<def> = ADDI %zero, 0
4372B		  * %zero<def> = ADDI %zero, 0
4372B		  * JAL <BB#12>
4372B		  * %zero<def> = ADDI %zero, 0
4372B		  * %zero<def> = ADDI %zero, 0
4492B		%vreg219<def> = LUI 1; GR32Bit:%vreg219
4492B		  * %vreg224<def> = DREADPM %vreg219, 0; GR32Bit:%vreg224,%vreg219
4492B		  * BEQ <BB#13>, %vreg224, %zero; GR32Bit:%vreg224
4492B		  * %zero<def> = ADDI %zero, 0
4492B		  * %zero<def> = ADDI %zero, 0
4492B		  * JAL <BB#12>
4492B		  * %zero<def> = ADDI %zero, 0
4492B		  * %zero<def> = ADDI %zero, 0
4572B		%vreg221<def> = LUI 2; GR32Bit:%vreg221
4572B		  * %vreg225<def> = DREADPM %vreg221, 0; GR32Bit:%vreg225,%vreg221
4572B		  * BEQ <BB#13>, %vreg225, %zero; GR32Bit:%vreg225
4572B		  * %zero<def> = ADDI %zero, 0
4572B		  * %zero<def> = ADDI %zero, 0
4572B		  * JAL <BB#12>
4572B		  * %zero<def> = ADDI %zero, 0
4572B		  * %zero<def> = ADDI %zero, 0
4652B		%vreg223<def> = LUI 3; GR32Bit:%vreg223
4652B		  * %vreg226<def> = DREADPM %vreg223, 0; GR32Bit:%vreg226,%vreg223
4652B		  * BEQ <BB#13>, %vreg226, %zero; GR32Bit:%vreg226
4652B		  * %zero<def> = ADDI %zero, 0
4652B		  * %zero<def> = ADDI %zero, 0
4652B		  * JAL <BB#12>
4652B		  * %zero<def> = ADDI %zero, 0
4652B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#12(20) BB#13(12)

4868B	BB#12: derived from LLVM BB %AssignFunction3.if.then24
	    Predecessors according to CFG: BB#11
4284B		%vreg49<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg49
4284B		  * SRLI %vreg49, %vreg49, 12; GR32Bit:%vreg49
4284B		  * %vreg48<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg48
4284B		  * %vreg50<def> = ADD %vreg49, %vreg48; GR32Bit:%vreg50,%vreg49,%vreg48
4284B		  * %vreg51<def> = LW %vreg50, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg51,%vreg50
4284B		  * %vreg52<def> = ORI %vreg51, 64; GR32Bit:%vreg52,%vreg51
4284B		  * SW %vreg52, %vreg50, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg52,%vreg50
4884B		%zero<def> = ADDI %zero, 0
4892B		%zero<def> = ADDI %zero, 0
4900B		%zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#13

4956B	BB#13: derived from LLVM BB %AssignFunction3.if.end26
	    Predecessors according to CFG: BB#11 BB#12
4964B		%vreg53<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg53
4964B		  * %vreg54<def> = LW %vreg53, 0; mem:LD4[%2] GR32Bit:%vreg54,%vreg53
4964B		  * %vreg55<def> = LW %vreg54, 28; mem:LD4[%44] GR32Bit:%vreg55,%vreg54
4964B		  * %vreg227<def> = LUI 1; GR32Bit:%vreg227
4964B		  * WRITEPM %vreg227, %vreg55, 0; GR32Bit:%vreg227,%vreg55
4964B		  * %vreg229<def> = LUI 2; GR32Bit:%vreg229
4964B		  * WRITEPM %vreg229, %vreg55, 0; GR32Bit:%vreg229,%vreg55
4964B		  * %vreg231<def> = LUI 3; GR32Bit:%vreg231
4964B		  * WRITEPM %vreg231, %vreg55, 0; GR32Bit:%vreg231,%vreg55
4964B		  * BEQ <BB#15>, %vreg55, %zero; GR32Bit:%vreg55
4964B		  * %zero<def> = ADDI %zero, 0
4964B		  * %zero<def> = ADDI %zero, 0
4964B		  * JAL <BB#14>
4964B		  * %zero<def> = ADDI %zero, 0
4964B		  * %zero<def> = ADDI %zero, 0
5084B		%vreg228<def> = LUI 1; GR32Bit:%vreg228
5084B		  * %vreg233<def> = DREADPM %vreg228, 0; GR32Bit:%vreg233,%vreg228
5084B		  * BEQ <BB#15>, %vreg233, %zero; GR32Bit:%vreg233
5084B		  * %zero<def> = ADDI %zero, 0
5084B		  * %zero<def> = ADDI %zero, 0
5084B		  * JAL <BB#14>
5084B		  * %zero<def> = ADDI %zero, 0
5084B		  * %zero<def> = ADDI %zero, 0
5164B		%vreg230<def> = LUI 2; GR32Bit:%vreg230
5164B		  * %vreg234<def> = DREADPM %vreg230, 0; GR32Bit:%vreg234,%vreg230
5164B		  * BEQ <BB#15>, %vreg234, %zero; GR32Bit:%vreg234
5164B		  * %zero<def> = ADDI %zero, 0
5164B		  * %zero<def> = ADDI %zero, 0
5164B		  * JAL <BB#14>
5164B		  * %zero<def> = ADDI %zero, 0
5164B		  * %zero<def> = ADDI %zero, 0
5244B		%vreg232<def> = LUI 3; GR32Bit:%vreg232
5244B		  * %vreg235<def> = DREADPM %vreg232, 0; GR32Bit:%vreg235,%vreg232
5244B		  * BEQ <BB#15>, %vreg235, %zero; GR32Bit:%vreg235
5244B		  * %zero<def> = ADDI %zero, 0
5244B		  * %zero<def> = ADDI %zero, 0
5244B		  * JAL <BB#14>
5244B		  * %zero<def> = ADDI %zero, 0
5244B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#14(20) BB#15(12)

5460B	BB#14: derived from LLVM BB %AssignFunction3.if.then29
	    Predecessors according to CFG: BB#13
4876B		%vreg57<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg57
4876B		  * SRLI %vreg57, %vreg57, 12; GR32Bit:%vreg57
4876B		  * %vreg56<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg56
4876B		  * %vreg58<def> = ADD %vreg57, %vreg56; GR32Bit:%vreg58,%vreg57,%vreg56
4876B		  * %vreg59<def> = LW %vreg58, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg59,%vreg58
4876B		  * %vreg60<def> = ORI %vreg59, 128; GR32Bit:%vreg60,%vreg59
4876B		  * SW %vreg60, %vreg58, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg60,%vreg58
5476B		%zero<def> = ADDI %zero, 0
5484B		%zero<def> = ADDI %zero, 0
5492B		%zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#15

5548B	BB#15: derived from LLVM BB %AssignFunction3.if.end31
	    Predecessors according to CFG: BB#13 BB#14
5556B		%vreg61<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg61
5556B		  * %vreg62<def> = LW %vreg61, 0; mem:LD4[%2] GR32Bit:%vreg62,%vreg61
5556B		  * %vreg63<def> = LW %vreg62, 32; mem:LD4[%50] GR32Bit:%vreg63,%vreg62
5556B		  * %vreg236<def> = LUI 1; GR32Bit:%vreg236
5556B		  * WRITEPM %vreg236, %vreg63, 0; GR32Bit:%vreg236,%vreg63
5556B		  * %vreg238<def> = LUI 2; GR32Bit:%vreg238
5556B		  * WRITEPM %vreg238, %vreg63, 0; GR32Bit:%vreg238,%vreg63
5556B		  * %vreg240<def> = LUI 3; GR32Bit:%vreg240
5556B		  * WRITEPM %vreg240, %vreg63, 0; GR32Bit:%vreg240,%vreg63
5556B		  * BEQ <BB#17>, %vreg63, %zero; GR32Bit:%vreg63
5556B		  * %zero<def> = ADDI %zero, 0
5556B		  * %zero<def> = ADDI %zero, 0
5556B		  * JAL <BB#16>
5556B		  * %zero<def> = ADDI %zero, 0
5556B		  * %zero<def> = ADDI %zero, 0
5676B		%vreg237<def> = LUI 1; GR32Bit:%vreg237
5676B		  * %vreg242<def> = DREADPM %vreg237, 0; GR32Bit:%vreg242,%vreg237
5676B		  * BEQ <BB#17>, %vreg242, %zero; GR32Bit:%vreg242
5676B		  * %zero<def> = ADDI %zero, 0
5676B		  * %zero<def> = ADDI %zero, 0
5676B		  * JAL <BB#16>
5676B		  * %zero<def> = ADDI %zero, 0
5676B		  * %zero<def> = ADDI %zero, 0
5756B		%vreg239<def> = LUI 2; GR32Bit:%vreg239
5756B		  * %vreg243<def> = DREADPM %vreg239, 0; GR32Bit:%vreg243,%vreg239
5756B		  * BEQ <BB#17>, %vreg243, %zero; GR32Bit:%vreg243
5756B		  * %zero<def> = ADDI %zero, 0
5756B		  * %zero<def> = ADDI %zero, 0
5756B		  * JAL <BB#16>
5756B		  * %zero<def> = ADDI %zero, 0
5756B		  * %zero<def> = ADDI %zero, 0
5836B		%vreg241<def> = LUI 3; GR32Bit:%vreg241
5836B		  * %vreg244<def> = DREADPM %vreg241, 0; GR32Bit:%vreg244,%vreg241
5836B		  * BEQ <BB#17>, %vreg244, %zero; GR32Bit:%vreg244
5836B		  * %zero<def> = ADDI %zero, 0
5836B		  * %zero<def> = ADDI %zero, 0
5836B		  * JAL <BB#16>
5836B		  * %zero<def> = ADDI %zero, 0
5836B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#16(20) BB#17(12)

6052B	BB#16: derived from LLVM BB %AssignFunction3.if.then34
	    Predecessors according to CFG: BB#15
5468B		%vreg65<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg65
5468B		  * SRLI %vreg65, %vreg65, 12; GR32Bit:%vreg65
5468B		  * %vreg64<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg64
5468B		  * %vreg66<def> = ADD %vreg65, %vreg64; GR32Bit:%vreg66,%vreg65,%vreg64
5468B		  * %vreg67<def> = LW %vreg66, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg67,%vreg66
5468B		  * %vreg68<def> = ORI %vreg67, 256; GR32Bit:%vreg68,%vreg67
5468B		  * SW %vreg68, %vreg66, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg68,%vreg66
6068B		%zero<def> = ADDI %zero, 0
6076B		%zero<def> = ADDI %zero, 0
6084B		%zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#17

6140B	BB#17: derived from LLVM BB %AssignFunction3.if.end36
	    Predecessors according to CFG: BB#15 BB#16
6148B		%vreg69<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg69
6148B		  * %vreg70<def> = LW %vreg69, 0; mem:LD4[%2] GR32Bit:%vreg70,%vreg69
6148B		  * %vreg71<def> = LW %vreg70, 36; mem:LD4[%56] GR32Bit:%vreg71,%vreg70
6148B		  * %vreg245<def> = LUI 1; GR32Bit:%vreg245
6148B		  * WRITEPM %vreg245, %vreg71, 0; GR32Bit:%vreg245,%vreg71
6148B		  * %vreg247<def> = LUI 2; GR32Bit:%vreg247
6148B		  * WRITEPM %vreg247, %vreg71, 0; GR32Bit:%vreg247,%vreg71
6148B		  * %vreg249<def> = LUI 3; GR32Bit:%vreg249
6148B		  * WRITEPM %vreg249, %vreg71, 0; GR32Bit:%vreg249,%vreg71
6148B		  * BEQ <BB#19>, %vreg71, %zero; GR32Bit:%vreg71
6148B		  * %zero<def> = ADDI %zero, 0
6148B		  * %zero<def> = ADDI %zero, 0
6148B		  * JAL <BB#18>
6148B		  * %zero<def> = ADDI %zero, 0
6148B		  * %zero<def> = ADDI %zero, 0
6268B		%vreg246<def> = LUI 1; GR32Bit:%vreg246
6268B		  * %vreg251<def> = DREADPM %vreg246, 0; GR32Bit:%vreg251,%vreg246
6268B		  * BEQ <BB#19>, %vreg251, %zero; GR32Bit:%vreg251
6268B		  * %zero<def> = ADDI %zero, 0
6268B		  * %zero<def> = ADDI %zero, 0
6268B		  * JAL <BB#18>
6268B		  * %zero<def> = ADDI %zero, 0
6268B		  * %zero<def> = ADDI %zero, 0
6348B		%vreg248<def> = LUI 2; GR32Bit:%vreg248
6348B		  * %vreg252<def> = DREADPM %vreg248, 0; GR32Bit:%vreg252,%vreg248
6348B		  * BEQ <BB#19>, %vreg252, %zero; GR32Bit:%vreg252
6348B		  * %zero<def> = ADDI %zero, 0
6348B		  * %zero<def> = ADDI %zero, 0
6348B		  * JAL <BB#18>
6348B		  * %zero<def> = ADDI %zero, 0
6348B		  * %zero<def> = ADDI %zero, 0
6428B		%vreg250<def> = LUI 3; GR32Bit:%vreg250
6428B		  * %vreg253<def> = DREADPM %vreg250, 0; GR32Bit:%vreg253,%vreg250
6428B		  * BEQ <BB#19>, %vreg253, %zero; GR32Bit:%vreg253
6428B		  * %zero<def> = ADDI %zero, 0
6428B		  * %zero<def> = ADDI %zero, 0
6428B		  * JAL <BB#18>
6428B		  * %zero<def> = ADDI %zero, 0
6428B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#18(20) BB#19(12)

6644B	BB#18: derived from LLVM BB %AssignFunction3.if.then39
	    Predecessors according to CFG: BB#17
6060B		%vreg73<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg73
6060B		  * SRLI %vreg73, %vreg73, 12; GR32Bit:%vreg73
6060B		  * %vreg72<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg72
6060B		  * %vreg74<def> = ADD %vreg73, %vreg72; GR32Bit:%vreg74,%vreg73,%vreg72
6060B		  * %vreg75<def> = LW %vreg74, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg75,%vreg74
6060B		  * %vreg76<def> = ORI %vreg75, 512; GR32Bit:%vreg76,%vreg75
6060B		  * SW %vreg76, %vreg74, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg76,%vreg74
6660B		%zero<def> = ADDI %zero, 0
6668B		%zero<def> = ADDI %zero, 0
6676B		%zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#19

6732B	BB#19: derived from LLVM BB %AssignFunction3.return
	    Predecessors according to CFG: BB#17 BB#18
6740B		%vreg81<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg81
6740B		  * %vreg77<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg77
6740B		  * %vreg78<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg78
6740B		  * SRLI %vreg78, %vreg78, 12; GR32Bit:%vreg78
6740B		  * %vreg79<def> = ADD %vreg78, %vreg77; GR32Bit:%vreg79,%vreg78,%vreg77
6740B		  * %vreg80<def> = LW %vreg79, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg80,%vreg79
6740B		  * SW %vreg80, %vreg81, 0; mem:ST4[%1] GR32Bit:%vreg80,%vreg81
6740B		  * %vreg254<def> = ADDI %zero, 128; GR32Bit:%vreg254
6740B		  * %vreg255<def> = LW %t5, <fi#0>; GR32Bit:%vreg255
6740B		  * WRITECM %vreg254, %vreg255, 0; GR32Bit:%vreg254,%vreg255
6740B		  * FDELETE %t4, 0
6740B		  * END 0
6740B		  * %zero<def> = ADDI %zero, 0
6740B		  * %zero<def> = ADDI %zero, 0
6852B		END 0
6852B		  * %zero<def> = ADDI %zero, 0
6852B		  * %zero<def> = ADDI %zero, 0
6876B		END 0
6876B		  * %zero<def> = ADDI %zero, 0
6876B		  * %zero<def> = ADDI %zero, 0
6900B		END 0
6900B		  * %zero<def> = ADDI %zero, 0
6900B		  * %zero<def> = ADDI %zero, 0

# End machine code for function AssignFunction3.

********** COMPUTING LIVE DEBUG VARIABLES: AssignFunction3 **********
********** DEBUG VARIABLES **********
********** Compute Spill Weights **********
********** Function: AssignFunction3
********** GREEDY REGISTER ALLOCATION **********
********** Function: AssignFunction3

selectOrSplit GR32Bit:%vreg87 [28r,140r:0)  0@28r
assigning %vreg87 to %t0: t0

selectOrSplit GR32Bit:%vreg106 [308r,420r:0)  0@308r
assigning %vreg106 to %t0: t0

selectOrSplit GR32Bit:%vreg125 [524r,636r:0)  0@524r
assigning %vreg125 to %t0: t0

selectOrSplit GR32Bit:%vreg144 [740r,852r:0)  0@740r
assigning %vreg144 to %t0: t0

selectOrSplit GR32Bit:%vreg19 [1884r,1988r:0)  0@1884r
assigning %vreg19 to %t0: t0

selectOrSplit GR32Bit:%vreg23 [2492r,2596r:0)  0@2492r
assigning %vreg23 to %t0: t0

selectOrSplit GR32Bit:%vreg88 [36r,132r:0)  0@36r
assigning %vreg88 to %t1: t1

selectOrSplit GR32Bit:%vreg107 [316r,412r:0)  0@316r
assigning %vreg107 to %t1: t1

selectOrSplit GR32Bit:%vreg126 [532r,628r:0)  0@532r
assigning %vreg126 to %t1: t1

selectOrSplit GR32Bit:%vreg145 [748r,844r:0)  0@748r
assigning %vreg145 to %t1: t1

selectOrSplit GR32Bit:%vreg184 [2228r,2316r:0)  0@2228r
assigning %vreg184 to %t0: t0

selectOrSplit GR32Bit:%vreg196 [2836r,2924r:0)  0@2836r
assigning %vreg196 to %t0: t0

selectOrSplit GR32Bit:%vreg18 [1908r,1988r:0)  0@1908r
assigning %vreg18 to %t1: t1

selectOrSplit GR32Bit:%vreg22 [2516r,2596r:0)  0@2516r
assigning %vreg22 to %t1: t1

selectOrSplit GR32Bit:%vreg181 [2212r,2276r:0)  0@2212r
assigning %vreg181 to %t1: t1

selectOrSplit GR32Bit:%vreg193 [2820r,2884r:0)  0@2820r
assigning %vreg193 to %t1: t1

selectOrSplit GR32Bit:%vreg2 [172r,228r:0)  0@172r
assigning %vreg2 to %t0: t0

selectOrSplit GR32Bit:%vreg10 [1308r,1364r:0)  0@1308r
assigning %vreg10 to %t0: t0

selectOrSplit GR32Bit:%vreg31 [3204r,3260r:0)  0@3204r
assigning %vreg31 to %t0: t0

selectOrSplit GR32Bit:%vreg39 [3796r,3852r:0)  0@3796r
assigning %vreg39 to %t0: t0

selectOrSplit GR32Bit:%vreg47 [4388r,4444r:0)  0@4388r
assigning %vreg47 to %t0: t0

selectOrSplit GR32Bit:%vreg55 [4980r,5036r:0)  0@4980r
assigning %vreg55 to %t0: t0

selectOrSplit GR32Bit:%vreg63 [5572r,5628r:0)  0@5572r
assigning %vreg63 to %t0: t0

selectOrSplit GR32Bit:%vreg71 [6164r,6220r:0)  0@6164r
assigning %vreg71 to %t0: t0

selectOrSplit GR32Bit:%vreg4 [1204r,1252r:0)  0@1204r
assigning %vreg4 to %t0: t0

selectOrSplit GR32Bit:%vreg12 [1796r,1844r:0)  0@1796r
assigning %vreg12 to %t0: t0

selectOrSplit GR32Bit:%vreg25 [3100r,3148r:0)  0@3100r
assigning %vreg25 to %t0: t0

selectOrSplit GR32Bit:%vreg33 [3692r,3740r:0)  0@3692r
assigning %vreg33 to %t0: t0

selectOrSplit GR32Bit:%vreg41 [4284r,4332r:0)  0@4284r
assigning %vreg41 to %t0: t0

selectOrSplit GR32Bit:%vreg49 [4876r,4924r:0)  0@4876r
assigning %vreg49 to %t0: t0

selectOrSplit GR32Bit:%vreg57 [5468r,5516r:0)  0@5468r
assigning %vreg57 to %t0: t0

selectOrSplit GR32Bit:%vreg65 [6060r,6108r:0)  0@6060r
assigning %vreg65 to %t0: t0

selectOrSplit GR32Bit:%vreg73 [6652r,6700r:0)  0@6652r
assigning %vreg73 to %t0: t0

selectOrSplit GR32Bit:%vreg81 [6740r,6788r:0)  0@6740r
assigning %vreg81 to %t0: t0

selectOrSplit GR32Bit:%vreg89 [44r,92r:0)  0@44r
assigning %vreg89 to %t2: t2

selectOrSplit GR32Bit:%vreg91 [60r,108r:0)  0@60r
assigning %vreg91 to %fp: fp

selectOrSplit GR32Bit:%vreg108 [324r,372r:0)  0@324r
assigning %vreg108 to %t2: t2

selectOrSplit GR32Bit:%vreg110 [340r,388r:0)  0@340r
assigning %vreg110 to %fp: fp

selectOrSplit GR32Bit:%vreg127 [540r,588r:0)  0@540r
assigning %vreg127 to %t2: t2

selectOrSplit GR32Bit:%vreg129 [556r,604r:0)  0@556r
assigning %vreg129 to %fp: fp

selectOrSplit GR32Bit:%vreg146 [756r,804r:0)  0@756r
assigning %vreg146 to %t2: t2

selectOrSplit GR32Bit:%vreg148 [772r,820r:0)  0@772r
assigning %vreg148 to %fp: fp

selectOrSplit GR32Bit:%vreg176 [1916r,1964r:0)  0@1916r
assigning %vreg176 to %t2: t2

selectOrSplit GR32Bit:%vreg188 [2524r,2572r:0)  0@2524r
assigning %vreg188 to %t2: t2

selectOrSplit GR32Bit:%vreg93 [76r,116r:0)  0@76r
assigning %vreg93 to %a0: a0

selectOrSplit GR32Bit:%vreg112 [356r,396r:0)  0@356r
assigning %vreg112 to %a0: a0

selectOrSplit GR32Bit:%vreg131 [572r,612r:0)  0@572r
assigning %vreg131 to %a0: a0

selectOrSplit GR32Bit:%vreg150 [788r,828r:0)  0@788r
assigning %vreg150 to %a0: a0

selectOrSplit GR32Bit:%vreg178 [1932r,1972r:0)  0@1932r
assigning %vreg178 to %fp: fp

selectOrSplit GR32Bit:%vreg187 [2276r,2316r:0)  0@2276r
assigning %vreg187 to %t1: t1

selectOrSplit GR32Bit:%vreg190 [2540r,2580r:0)  0@2540r
assigning %vreg190 to %fp: fp

selectOrSplit GR32Bit:%vreg199 [2884r,2924r:0)  0@2884r
assigning %vreg199 to %t1: t1

selectOrSplit GR32Bit:%vreg95 [92r,124r:0)  0@92r
assigning %vreg95 to %t2: t2

selectOrSplit GR32Bit:%vreg114 [372r,404r:0)  0@372r
assigning %vreg114 to %t2: t2

selectOrSplit GR32Bit:%vreg133 [588r,620r:0)  0@588r
assigning %vreg133 to %t2: t2

selectOrSplit GR32Bit:%vreg152 [804r,836r:0)  0@804r
assigning %vreg152 to %t2: t2

selectOrSplit GR32Bit:%vreg166 [988r,1020r:0)  0@988r
assigning %vreg166 to %t0: t0

selectOrSplit GR32Bit:%vreg175 [1588r,1620r:0)  0@1588r
assigning %vreg175 to %t0: t0

selectOrSplit GR32Bit:%vreg180 [1948r,1980r:0)  0@1948r
assigning %vreg180 to %a0: a0

selectOrSplit GR32Bit:%vreg192 [2556r,2588r:0)  0@2556r
assigning %vreg192 to %a0: a0

selectOrSplit GR32Bit:%vreg208 [3484r,3516r:0)  0@3484r
assigning %vreg208 to %t0: t0

selectOrSplit GR32Bit:%vreg217 [4076r,4108r:0)  0@4076r
assigning %vreg217 to %t0: t0

selectOrSplit GR32Bit:%vreg226 [4668r,4700r:0)  0@4668r
assigning %vreg226 to %t0: t0

selectOrSplit GR32Bit:%vreg235 [5260r,5292r:0)  0@5260r
assigning %vreg235 to %t0: t0

selectOrSplit GR32Bit:%vreg244 [5852r,5884r:0)  0@5852r
assigning %vreg244 to %t0: t0

selectOrSplit GR32Bit:%vreg253 [6444r,6476r:0)  0@6444r
assigning %vreg253 to %t0: t0

selectOrSplit GR32Bit:%vreg1 [148r,172r:0)  0@148r
assigning %vreg1 to %t0: t0

selectOrSplit GR32Bit:%vreg5 [1252r,1276r:0)  0@1252r
assigning %vreg5 to %t0: t0

selectOrSplit GR32Bit:%vreg13 [1844r,1868r:0)  0@1844r
assigning %vreg13 to %t0: t0

selectOrSplit GR32Bit:%vreg26 [3148r,3172r:0)  0@3148r
assigning %vreg26 to %t0: t0

selectOrSplit GR32Bit:%vreg34 [3740r,3764r:0)  0@3740r
assigning %vreg34 to %t0: t0

selectOrSplit GR32Bit:%vreg42 [4332r,4356r:0)  0@4332r
assigning %vreg42 to %t0: t0

selectOrSplit GR32Bit:%vreg50 [4924r,4948r:0)  0@4924r
assigning %vreg50 to %t0: t0

selectOrSplit GR32Bit:%vreg58 [5516r,5540r:0)  0@5516r
assigning %vreg58 to %t0: t0

selectOrSplit GR32Bit:%vreg66 [6108r,6132r:0)  0@6108r
assigning %vreg66 to %t0: t0

selectOrSplit GR32Bit:%vreg74 [6700r,6724r:0)  0@6700r
assigning %vreg74 to %t0: t0

selectOrSplit GR32Bit:%vreg103 [284r,308r:0)  0@284r
assigning %vreg103 to %t0: t0

selectOrSplit GR32Bit:%vreg122 [500r,524r:0)  0@500r
assigning %vreg122 to %t0: t0

selectOrSplit GR32Bit:%vreg141 [716r,740r:0)  0@716r
assigning %vreg141 to %t0: t0

selectOrSplit GR32Bit:%vreg177 [2036r,2060r:0)  0@2036r
assigning %vreg177 to %t0: t0

selectOrSplit GR32Bit:%vreg179 [2124r,2148r:0)  0@2124r
assigning %vreg179 to %t0: t0

selectOrSplit GR32Bit:%vreg189 [2644r,2668r:0)  0@2644r
assigning %vreg189 to %t0: t0

selectOrSplit GR32Bit:%vreg191 [2732r,2756r:0)  0@2732r
assigning %vreg191 to %t0: t0

selectOrSplit GR32Bit:%vreg3 [1236r,1252r:0)  0@1236r
assigning %vreg3 to %t1: t1

selectOrSplit GR32Bit:%vreg11 [1828r,1844r:0)  0@1828r
assigning %vreg11 to %t1: t1

selectOrSplit GR32Bit:%vreg24 [3132r,3148r:0)  0@3132r
assigning %vreg24 to %t1: t1

selectOrSplit GR32Bit:%vreg32 [3724r,3740r:0)  0@3724r
assigning %vreg32 to %t1: t1

selectOrSplit GR32Bit:%vreg40 [4316r,4332r:0)  0@4316r
assigning %vreg40 to %t1: t1

selectOrSplit GR32Bit:%vreg48 [4908r,4924r:0)  0@4908r
assigning %vreg48 to %t1: t1

selectOrSplit GR32Bit:%vreg56 [5500r,5516r:0)  0@5500r
assigning %vreg56 to %t1: t1

selectOrSplit GR32Bit:%vreg64 [6092r,6108r:0)  0@6092r
assigning %vreg64 to %t1: t1

selectOrSplit GR32Bit:%vreg72 [6684r,6700r:0)  0@6684r
assigning %vreg72 to %t1: t1

selectOrSplit GR32Bit:%vreg77 [6748r,6764r:0)  0@6748r
assigning %vreg77 to %t1: t1

selectOrSplit GR32Bit:%vreg80 [6772r,6788r:0)  0@6772r
assigning %vreg80 to %t1: t1

selectOrSplit GR32Bit:%vreg84 [12r,28r:0)  0@12r
assigning %vreg84 to %t0: t0

selectOrSplit GR32Bit:%vreg163 [972r,988r:0)  0@972r
assigning %vreg163 to %t0: t0

selectOrSplit GR32Bit:%vreg168 [1412r,1428r:0)  0@1412r
assigning %vreg168 to %t0: t0

selectOrSplit GR32Bit:%vreg170 [1492r,1508r:0)  0@1492r
assigning %vreg170 to %t0: t0

selectOrSplit GR32Bit:%vreg172 [1572r,1588r:0)  0@1572r
assigning %vreg172 to %t0: t0

selectOrSplit GR32Bit:%vreg182 [2052r,2068r:0)  0@2052r
assigning %vreg182 to %t1: t1

selectOrSplit GR32Bit:%vreg183 [2140r,2156r:0)  0@2140r
assigning %vreg183 to %t1: t1

selectOrSplit GR32Bit:%vreg194 [2660r,2676r:0)  0@2660r
assigning %vreg194 to %t1: t1

selectOrSplit GR32Bit:%vreg195 [2748r,2764r:0)  0@2748r
assigning %vreg195 to %t1: t1

selectOrSplit GR32Bit:%vreg201 [3308r,3324r:0)  0@3308r
assigning %vreg201 to %t0: t0

selectOrSplit GR32Bit:%vreg203 [3388r,3404r:0)  0@3388r
assigning %vreg203 to %t0: t0

selectOrSplit GR32Bit:%vreg205 [3468r,3484r:0)  0@3468r
assigning %vreg205 to %t0: t0

selectOrSplit GR32Bit:%vreg210 [3900r,3916r:0)  0@3900r
assigning %vreg210 to %t0: t0

selectOrSplit GR32Bit:%vreg212 [3980r,3996r:0)  0@3980r
assigning %vreg212 to %t0: t0

selectOrSplit GR32Bit:%vreg214 [4060r,4076r:0)  0@4060r
assigning %vreg214 to %t0: t0

selectOrSplit GR32Bit:%vreg219 [4492r,4508r:0)  0@4492r
assigning %vreg219 to %t0: t0

selectOrSplit GR32Bit:%vreg221 [4572r,4588r:0)  0@4572r
assigning %vreg221 to %t0: t0

selectOrSplit GR32Bit:%vreg223 [4652r,4668r:0)  0@4652r
assigning %vreg223 to %t0: t0

selectOrSplit GR32Bit:%vreg228 [5084r,5100r:0)  0@5084r
assigning %vreg228 to %t0: t0

selectOrSplit GR32Bit:%vreg230 [5164r,5180r:0)  0@5164r
assigning %vreg230 to %t0: t0

selectOrSplit GR32Bit:%vreg232 [5244r,5260r:0)  0@5244r
assigning %vreg232 to %t0: t0

selectOrSplit GR32Bit:%vreg237 [5676r,5692r:0)  0@5676r
assigning %vreg237 to %t0: t0

selectOrSplit GR32Bit:%vreg239 [5756r,5772r:0)  0@5756r
assigning %vreg239 to %t0: t0

selectOrSplit GR32Bit:%vreg241 [5836r,5852r:0)  0@5836r
assigning %vreg241 to %t0: t0

selectOrSplit GR32Bit:%vreg246 [6268r,6284r:0)  0@6268r
assigning %vreg246 to %t0: t0

selectOrSplit GR32Bit:%vreg248 [6348r,6364r:0)  0@6348r
assigning %vreg248 to %t0: t0

selectOrSplit GR32Bit:%vreg250 [6428r,6444r:0)  0@6428r
assigning %vreg250 to %t0: t0

selectOrSplit GR32Bit:%vreg254 [6796r,6812r:0)  0@6796r
assigning %vreg254 to %t0: t0

selectOrSplit GR32Bit:%vreg0 [156r,164r:0)  0@156r
assigning %vreg0 to %t1: t1

selectOrSplit GR32Bit:%vreg6 [1260r,1268r:0)  0@1260r
assigning %vreg6 to %t1: t1

selectOrSplit GR32Bit:%vreg7 [1268r,1276r:0)  0@1268r
assigning %vreg7 to %t1: t1

selectOrSplit GR32Bit:%vreg8 [1292r,1300r:0)  0@1292r
assigning %vreg8 to %t0: t0

selectOrSplit GR32Bit:%vreg9 [1300r,1308r:0)  0@1300r
assigning %vreg9 to %t0: t0

selectOrSplit GR32Bit:%vreg14 [1852r,1860r:0)  0@1852r
assigning %vreg14 to %t1: t1

selectOrSplit GR32Bit:%vreg15 [1860r,1868r:0)  0@1860r
assigning %vreg15 to %t1: t1

selectOrSplit GR32Bit:%vreg16 [1892r,1900r:0)  0@1892r
assigning %vreg16 to %t1: t1

selectOrSplit GR32Bit:%vreg17 [1900r,1908r:0)  0@1900r
assigning %vreg17 to %t1: t1

selectOrSplit GR32Bit:%vreg20 [2500r,2508r:0)  0@2500r
assigning %vreg20 to %t1: t1

selectOrSplit GR32Bit:%vreg21 [2508r,2516r:0)  0@2508r
assigning %vreg21 to %t1: t1

selectOrSplit GR32Bit:%vreg27 [3156r,3164r:0)  0@3156r
assigning %vreg27 to %t1: t1

selectOrSplit GR32Bit:%vreg28 [3164r,3172r:0)  0@3164r
assigning %vreg28 to %t1: t1

selectOrSplit GR32Bit:%vreg29 [3188r,3196r:0)  0@3188r
assigning %vreg29 to %t0: t0

selectOrSplit GR32Bit:%vreg30 [3196r,3204r:0)  0@3196r
assigning %vreg30 to %t0: t0

selectOrSplit GR32Bit:%vreg35 [3748r,3756r:0)  0@3748r
assigning %vreg35 to %t1: t1

selectOrSplit GR32Bit:%vreg36 [3756r,3764r:0)  0@3756r
assigning %vreg36 to %t1: t1

selectOrSplit GR32Bit:%vreg37 [3780r,3788r:0)  0@3780r
assigning %vreg37 to %t0: t0

selectOrSplit GR32Bit:%vreg38 [3788r,3796r:0)  0@3788r
assigning %vreg38 to %t0: t0

selectOrSplit GR32Bit:%vreg43 [4340r,4348r:0)  0@4340r
assigning %vreg43 to %t1: t1

selectOrSplit GR32Bit:%vreg44 [4348r,4356r:0)  0@4348r
assigning %vreg44 to %t1: t1

selectOrSplit GR32Bit:%vreg45 [4372r,4380r:0)  0@4372r
assigning %vreg45 to %t0: t0

selectOrSplit GR32Bit:%vreg46 [4380r,4388r:0)  0@4380r
assigning %vreg46 to %t0: t0

selectOrSplit GR32Bit:%vreg51 [4932r,4940r:0)  0@4932r
assigning %vreg51 to %t1: t1

selectOrSplit GR32Bit:%vreg52 [4940r,4948r:0)  0@4940r
assigning %vreg52 to %t1: t1

selectOrSplit GR32Bit:%vreg53 [4964r,4972r:0)  0@4964r
assigning %vreg53 to %t0: t0

selectOrSplit GR32Bit:%vreg54 [4972r,4980r:0)  0@4972r
assigning %vreg54 to %t0: t0

selectOrSplit GR32Bit:%vreg59 [5524r,5532r:0)  0@5524r
assigning %vreg59 to %t1: t1

selectOrSplit GR32Bit:%vreg60 [5532r,5540r:0)  0@5532r
assigning %vreg60 to %t1: t1

selectOrSplit GR32Bit:%vreg61 [5556r,5564r:0)  0@5556r
assigning %vreg61 to %t0: t0

selectOrSplit GR32Bit:%vreg62 [5564r,5572r:0)  0@5564r
assigning %vreg62 to %t0: t0

selectOrSplit GR32Bit:%vreg67 [6116r,6124r:0)  0@6116r
assigning %vreg67 to %t1: t1

selectOrSplit GR32Bit:%vreg68 [6124r,6132r:0)  0@6124r
assigning %vreg68 to %t1: t1

selectOrSplit GR32Bit:%vreg69 [6148r,6156r:0)  0@6148r
assigning %vreg69 to %t0: t0

selectOrSplit GR32Bit:%vreg70 [6156r,6164r:0)  0@6156r
assigning %vreg70 to %t0: t0

selectOrSplit GR32Bit:%vreg75 [6708r,6716r:0)  0@6708r
assigning %vreg75 to %t1: t1

selectOrSplit GR32Bit:%vreg76 [6716r,6724r:0)  0@6716r
assigning %vreg76 to %t1: t1

selectOrSplit GR32Bit:%vreg78 [6756r,6764r:0)  0@6756r
assigning %vreg78 to %t2: t2

selectOrSplit GR32Bit:%vreg79 [6764r,6772r:0)  0@6764r
assigning %vreg79 to %t1: t1

selectOrSplit GR32Bit:%vreg86 [20r,28r:0)  0@20r
assigning %vreg86 to %t1: t1

selectOrSplit GR32Bit:%vreg90 [52r,60r:0)  0@52r
assigning %vreg90 to %fp: fp

selectOrSplit GR32Bit:%vreg92 [68r,76r:0)  0@68r
assigning %vreg92 to %a0: a0

selectOrSplit GR32Bit:%vreg94 [84r,92r:0)  0@84r
assigning %vreg94 to %a1: a1

selectOrSplit GR32Bit:%vreg96 [100r,108r:0)  0@100r
assigning %vreg96 to %a1: a1

selectOrSplit GR32Bit:%vreg97 [108r,116r:0)  0@108r
assigning %vreg97 to %fp: fp

selectOrSplit GR32Bit:%vreg98 [116r,124r:0)  0@116r
assigning %vreg98 to %fp: fp

selectOrSplit GR32Bit:%vreg99 [124r,132r:0)  0@124r
assigning %vreg99 to %t2: t2

selectOrSplit GR32Bit:%vreg100 [132r,140r:0)  0@132r
assigning %vreg100 to %t1: t1

selectOrSplit GR32Bit:%vreg104 [292r,300r:0)  0@292r
assigning %vreg104 to %t1: t1

selectOrSplit GR32Bit:%vreg105 [300r,308r:0)  0@300r
assigning %vreg105 to %t1: t1

selectOrSplit GR32Bit:%vreg109 [332r,340r:0)  0@332r
assigning %vreg109 to %fp: fp

selectOrSplit GR32Bit:%vreg111 [348r,356r:0)  0@348r
assigning %vreg111 to %a0: a0

selectOrSplit GR32Bit:%vreg113 [364r,372r:0)  0@364r
assigning %vreg113 to %a1: a1

selectOrSplit GR32Bit:%vreg115 [380r,388r:0)  0@380r
assigning %vreg115 to %a1: a1

selectOrSplit GR32Bit:%vreg116 [388r,396r:0)  0@388r
assigning %vreg116 to %fp: fp

selectOrSplit GR32Bit:%vreg117 [396r,404r:0)  0@396r
assigning %vreg117 to %fp: fp

selectOrSplit GR32Bit:%vreg118 [404r,412r:0)  0@404r
assigning %vreg118 to %t2: t2

selectOrSplit GR32Bit:%vreg119 [412r,420r:0)  0@412r
assigning %vreg119 to %t1: t1

selectOrSplit GR32Bit:%vreg123 [508r,516r:0)  0@508r
assigning %vreg123 to %t1: t1

selectOrSplit GR32Bit:%vreg124 [516r,524r:0)  0@516r
assigning %vreg124 to %t1: t1

selectOrSplit GR32Bit:%vreg128 [548r,556r:0)  0@548r
assigning %vreg128 to %fp: fp

selectOrSplit GR32Bit:%vreg130 [564r,572r:0)  0@564r
assigning %vreg130 to %a0: a0

selectOrSplit GR32Bit:%vreg132 [580r,588r:0)  0@580r
assigning %vreg132 to %a1: a1

selectOrSplit GR32Bit:%vreg134 [596r,604r:0)  0@596r
assigning %vreg134 to %a1: a1

selectOrSplit GR32Bit:%vreg135 [604r,612r:0)  0@604r
assigning %vreg135 to %fp: fp

selectOrSplit GR32Bit:%vreg136 [612r,620r:0)  0@612r
assigning %vreg136 to %fp: fp

selectOrSplit GR32Bit:%vreg137 [620r,628r:0)  0@620r
assigning %vreg137 to %t2: t2

selectOrSplit GR32Bit:%vreg138 [628r,636r:0)  0@628r
assigning %vreg138 to %t1: t1

selectOrSplit GR32Bit:%vreg142 [724r,732r:0)  0@724r
assigning %vreg142 to %t1: t1

selectOrSplit GR32Bit:%vreg143 [732r,740r:0)  0@732r
assigning %vreg143 to %t1: t1

selectOrSplit GR32Bit:%vreg147 [764r,772r:0)  0@764r
assigning %vreg147 to %fp: fp

selectOrSplit GR32Bit:%vreg149 [780r,788r:0)  0@780r
assigning %vreg149 to %a0: a0

selectOrSplit GR32Bit:%vreg151 [796r,804r:0)  0@796r
assigning %vreg151 to %a1: a1

selectOrSplit GR32Bit:%vreg153 [812r,820r:0)  0@812r
assigning %vreg153 to %a1: a1

selectOrSplit GR32Bit:%vreg154 [820r,828r:0)  0@820r
assigning %vreg154 to %fp: fp

selectOrSplit GR32Bit:%vreg155 [828r,836r:0)  0@828r
assigning %vreg155 to %fp: fp

selectOrSplit GR32Bit:%vreg156 [836r,844r:0)  0@836r
assigning %vreg156 to %t2: t2

selectOrSplit GR32Bit:%vreg157 [844r,852r:0)  0@844r
assigning %vreg157 to %t1: t1

selectOrSplit GR32Bit:%vreg158 [180r,188r:0)  0@180r
assigning %vreg158 to %t1: t1

selectOrSplit GR32Bit:%vreg159 [428r,436r:0)  0@428r
assigning %vreg159 to %t0: t0

selectOrSplit GR32Bit:%vreg160 [196r,204r:0)  0@196r
assigning %vreg160 to %t1: t1

selectOrSplit GR32Bit:%vreg161 [644r,652r:0)  0@644r
assigning %vreg161 to %t0: t0

selectOrSplit GR32Bit:%vreg162 [212r,220r:0)  0@212r
assigning %vreg162 to %t1: t1

selectOrSplit GR32Bit:%vreg164 [436r,444r:0)  0@436r
assigning %vreg164 to %t0: t0

selectOrSplit GR32Bit:%vreg165 [652r,660r:0)  0@652r
assigning %vreg165 to %t0: t0

selectOrSplit GR32Bit:%vreg167 [1316r,1324r:0)  0@1316r
assigning %vreg167 to %t1: t1

selectOrSplit GR32Bit:%vreg169 [1332r,1340r:0)  0@1332r
assigning %vreg169 to %t1: t1

selectOrSplit GR32Bit:%vreg171 [1348r,1356r:0)  0@1348r
assigning %vreg171 to %t1: t1

selectOrSplit GR32Bit:%vreg173 [1428r,1436r:0)  0@1428r
assigning %vreg173 to %t0: t0

selectOrSplit GR32Bit:%vreg174 [1508r,1516r:0)  0@1508r
assigning %vreg174 to %t0: t0

selectOrSplit GR32Bit:%vreg185 [2060r,2068r:0)  0@2060r
assigning %vreg185 to %t0: t0

selectOrSplit GR32Bit:%vreg186 [2148r,2156r:0)  0@2148r
assigning %vreg186 to %t0: t0

selectOrSplit GR32Bit:%vreg197 [2668r,2676r:0)  0@2668r
assigning %vreg197 to %t0: t0

selectOrSplit GR32Bit:%vreg198 [2756r,2764r:0)  0@2756r
assigning %vreg198 to %t0: t0

selectOrSplit GR32Bit:%vreg200 [3212r,3220r:0)  0@3212r
assigning %vreg200 to %t1: t1

selectOrSplit GR32Bit:%vreg202 [3228r,3236r:0)  0@3228r
assigning %vreg202 to %t1: t1

selectOrSplit GR32Bit:%vreg204 [3244r,3252r:0)  0@3244r
assigning %vreg204 to %t1: t1

selectOrSplit GR32Bit:%vreg206 [3324r,3332r:0)  0@3324r
assigning %vreg206 to %t0: t0

selectOrSplit GR32Bit:%vreg207 [3404r,3412r:0)  0@3404r
assigning %vreg207 to %t0: t0

selectOrSplit GR32Bit:%vreg209 [3804r,3812r:0)  0@3804r
assigning %vreg209 to %t1: t1

selectOrSplit GR32Bit:%vreg211 [3820r,3828r:0)  0@3820r
assigning %vreg211 to %t1: t1

selectOrSplit GR32Bit:%vreg213 [3836r,3844r:0)  0@3836r
assigning %vreg213 to %t1: t1

selectOrSplit GR32Bit:%vreg215 [3916r,3924r:0)  0@3916r
assigning %vreg215 to %t0: t0

selectOrSplit GR32Bit:%vreg216 [3996r,4004r:0)  0@3996r
assigning %vreg216 to %t0: t0

selectOrSplit GR32Bit:%vreg218 [4396r,4404r:0)  0@4396r
assigning %vreg218 to %t1: t1

selectOrSplit GR32Bit:%vreg220 [4412r,4420r:0)  0@4412r
assigning %vreg220 to %t1: t1

selectOrSplit GR32Bit:%vreg222 [4428r,4436r:0)  0@4428r
assigning %vreg222 to %t1: t1

selectOrSplit GR32Bit:%vreg224 [4508r,4516r:0)  0@4508r
assigning %vreg224 to %t0: t0

selectOrSplit GR32Bit:%vreg225 [4588r,4596r:0)  0@4588r
assigning %vreg225 to %t0: t0

selectOrSplit GR32Bit:%vreg227 [4988r,4996r:0)  0@4988r
assigning %vreg227 to %t1: t1

selectOrSplit GR32Bit:%vreg229 [5004r,5012r:0)  0@5004r
assigning %vreg229 to %t1: t1

selectOrSplit GR32Bit:%vreg231 [5020r,5028r:0)  0@5020r
assigning %vreg231 to %t1: t1

selectOrSplit GR32Bit:%vreg233 [5100r,5108r:0)  0@5100r
assigning %vreg233 to %t0: t0

selectOrSplit GR32Bit:%vreg234 [5180r,5188r:0)  0@5180r
assigning %vreg234 to %t0: t0

selectOrSplit GR32Bit:%vreg236 [5580r,5588r:0)  0@5580r
assigning %vreg236 to %t1: t1

selectOrSplit GR32Bit:%vreg238 [5596r,5604r:0)  0@5596r
assigning %vreg238 to %t1: t1

selectOrSplit GR32Bit:%vreg240 [5612r,5620r:0)  0@5612r
assigning %vreg240 to %t1: t1

selectOrSplit GR32Bit:%vreg242 [5692r,5700r:0)  0@5692r
assigning %vreg242 to %t0: t0

selectOrSplit GR32Bit:%vreg243 [5772r,5780r:0)  0@5772r
assigning %vreg243 to %t0: t0

selectOrSplit GR32Bit:%vreg245 [6172r,6180r:0)  0@6172r
assigning %vreg245 to %t1: t1

selectOrSplit GR32Bit:%vreg247 [6188r,6196r:0)  0@6188r
assigning %vreg247 to %t1: t1

selectOrSplit GR32Bit:%vreg249 [6204r,6212r:0)  0@6204r
assigning %vreg249 to %t1: t1

selectOrSplit GR32Bit:%vreg251 [6284r,6292r:0)  0@6284r
assigning %vreg251 to %t0: t0

selectOrSplit GR32Bit:%vreg252 [6364r,6372r:0)  0@6364r
assigning %vreg252 to %t0: t0

selectOrSplit GR32Bit:%vreg255 [6804r,6812r:0)  0@6804r
assigning %vreg255 to %t1: t1

selectOrSplit GR32Bit:%vreg85 [16r,20r:0)  0@16r
assigning %vreg85 to %t1: t1
********** REWRITE VIRTUAL REGISTERS **********
********** Function: AssignFunction3
********** REGISTER MAP **********
[%vreg0 -> %t1] GR32Bit
[%vreg1 -> %t0] GR32Bit
[%vreg2 -> %t0] GR32Bit
[%vreg3 -> %t1] GR32Bit
[%vreg4 -> %t0] GR32Bit
[%vreg5 -> %t0] GR32Bit
[%vreg6 -> %t1] GR32Bit
[%vreg7 -> %t1] GR32Bit
[%vreg8 -> %t0] GR32Bit
[%vreg9 -> %t0] GR32Bit
[%vreg10 -> %t0] GR32Bit
[%vreg11 -> %t1] GR32Bit
[%vreg12 -> %t0] GR32Bit
[%vreg13 -> %t0] GR32Bit
[%vreg14 -> %t1] GR32Bit
[%vreg15 -> %t1] GR32Bit
[%vreg16 -> %t1] GR32Bit
[%vreg17 -> %t1] GR32Bit
[%vreg18 -> %t1] GR32Bit
[%vreg19 -> %t0] GR32Bit
[%vreg20 -> %t1] GR32Bit
[%vreg21 -> %t1] GR32Bit
[%vreg22 -> %t1] GR32Bit
[%vreg23 -> %t0] GR32Bit
[%vreg24 -> %t1] GR32Bit
[%vreg25 -> %t0] GR32Bit
[%vreg26 -> %t0] GR32Bit
[%vreg27 -> %t1] GR32Bit
[%vreg28 -> %t1] GR32Bit
[%vreg29 -> %t0] GR32Bit
[%vreg30 -> %t0] GR32Bit
[%vreg31 -> %t0] GR32Bit
[%vreg32 -> %t1] GR32Bit
[%vreg33 -> %t0] GR32Bit
[%vreg34 -> %t0] GR32Bit
[%vreg35 -> %t1] GR32Bit
[%vreg36 -> %t1] GR32Bit
[%vreg37 -> %t0] GR32Bit
[%vreg38 -> %t0] GR32Bit
[%vreg39 -> %t0] GR32Bit
[%vreg40 -> %t1] GR32Bit
[%vreg41 -> %t0] GR32Bit
[%vreg42 -> %t0] GR32Bit
[%vreg43 -> %t1] GR32Bit
[%vreg44 -> %t1] GR32Bit
[%vreg45 -> %t0] GR32Bit
[%vreg46 -> %t0] GR32Bit
[%vreg47 -> %t0] GR32Bit
[%vreg48 -> %t1] GR32Bit
[%vreg49 -> %t0] GR32Bit
[%vreg50 -> %t0] GR32Bit
[%vreg51 -> %t1] GR32Bit
[%vreg52 -> %t1] GR32Bit
[%vreg53 -> %t0] GR32Bit
[%vreg54 -> %t0] GR32Bit
[%vreg55 -> %t0] GR32Bit
[%vreg56 -> %t1] GR32Bit
[%vreg57 -> %t0] GR32Bit
[%vreg58 -> %t0] GR32Bit
[%vreg59 -> %t1] GR32Bit
[%vreg60 -> %t1] GR32Bit
[%vreg61 -> %t0] GR32Bit
[%vreg62 -> %t0] GR32Bit
[%vreg63 -> %t0] GR32Bit
[%vreg64 -> %t1] GR32Bit
[%vreg65 -> %t0] GR32Bit
[%vreg66 -> %t0] GR32Bit
[%vreg67 -> %t1] GR32Bit
[%vreg68 -> %t1] GR32Bit
[%vreg69 -> %t0] GR32Bit
[%vreg70 -> %t0] GR32Bit
[%vreg71 -> %t0] GR32Bit
[%vreg72 -> %t1] GR32Bit
[%vreg73 -> %t0] GR32Bit
[%vreg74 -> %t0] GR32Bit
[%vreg75 -> %t1] GR32Bit
[%vreg76 -> %t1] GR32Bit
[%vreg77 -> %t1] GR32Bit
[%vreg78 -> %t2] GR32Bit
[%vreg79 -> %t1] GR32Bit
[%vreg80 -> %t1] GR32Bit
[%vreg81 -> %t0] GR32Bit
[%vreg84 -> %t0] GR32Bit
[%vreg85 -> %t1] GR32Bit
[%vreg86 -> %t1] GR32Bit
[%vreg87 -> %t0] GR32Bit
[%vreg88 -> %t1] GR32Bit
[%vreg89 -> %t2] GR32Bit
[%vreg90 -> %fp] GR32Bit
[%vreg91 -> %fp] GR32Bit
[%vreg92 -> %a0] GR32Bit
[%vreg93 -> %a0] GR32Bit
[%vreg94 -> %a1] GR32Bit
[%vreg95 -> %t2] GR32Bit
[%vreg96 -> %a1] GR32Bit
[%vreg97 -> %fp] GR32Bit
[%vreg98 -> %fp] GR32Bit
[%vreg99 -> %t2] GR32Bit
[%vreg100 -> %t1] GR32Bit
[%vreg103 -> %t0] GR32Bit
[%vreg104 -> %t1] GR32Bit
[%vreg105 -> %t1] GR32Bit
[%vreg106 -> %t0] GR32Bit
[%vreg107 -> %t1] GR32Bit
[%vreg108 -> %t2] GR32Bit
[%vreg109 -> %fp] GR32Bit
[%vreg110 -> %fp] GR32Bit
[%vreg111 -> %a0] GR32Bit
[%vreg112 -> %a0] GR32Bit
[%vreg113 -> %a1] GR32Bit
[%vreg114 -> %t2] GR32Bit
[%vreg115 -> %a1] GR32Bit
[%vreg116 -> %fp] GR32Bit
[%vreg117 -> %fp] GR32Bit
[%vreg118 -> %t2] GR32Bit
[%vreg119 -> %t1] GR32Bit
[%vreg122 -> %t0] GR32Bit
[%vreg123 -> %t1] GR32Bit
[%vreg124 -> %t1] GR32Bit
[%vreg125 -> %t0] GR32Bit
[%vreg126 -> %t1] GR32Bit
[%vreg127 -> %t2] GR32Bit
[%vreg128 -> %fp] GR32Bit
[%vreg129 -> %fp] GR32Bit
[%vreg130 -> %a0] GR32Bit
[%vreg131 -> %a0] GR32Bit
[%vreg132 -> %a1] GR32Bit
[%vreg133 -> %t2] GR32Bit
[%vreg134 -> %a1] GR32Bit
[%vreg135 -> %fp] GR32Bit
[%vreg136 -> %fp] GR32Bit
[%vreg137 -> %t2] GR32Bit
[%vreg138 -> %t1] GR32Bit
[%vreg141 -> %t0] GR32Bit
[%vreg142 -> %t1] GR32Bit
[%vreg143 -> %t1] GR32Bit
[%vreg144 -> %t0] GR32Bit
[%vreg145 -> %t1] GR32Bit
[%vreg146 -> %t2] GR32Bit
[%vreg147 -> %fp] GR32Bit
[%vreg148 -> %fp] GR32Bit
[%vreg149 -> %a0] GR32Bit
[%vreg150 -> %a0] GR32Bit
[%vreg151 -> %a1] GR32Bit
[%vreg152 -> %t2] GR32Bit
[%vreg153 -> %a1] GR32Bit
[%vreg154 -> %fp] GR32Bit
[%vreg155 -> %fp] GR32Bit
[%vreg156 -> %t2] GR32Bit
[%vreg157 -> %t1] GR32Bit
[%vreg158 -> %t1] GR32Bit
[%vreg159 -> %t0] GR32Bit
[%vreg160 -> %t1] GR32Bit
[%vreg161 -> %t0] GR32Bit
[%vreg162 -> %t1] GR32Bit
[%vreg163 -> %t0] GR32Bit
[%vreg164 -> %t0] GR32Bit
[%vreg165 -> %t0] GR32Bit
[%vreg166 -> %t0] GR32Bit
[%vreg167 -> %t1] GR32Bit
[%vreg168 -> %t0] GR32Bit
[%vreg169 -> %t1] GR32Bit
[%vreg170 -> %t0] GR32Bit
[%vreg171 -> %t1] GR32Bit
[%vreg172 -> %t0] GR32Bit
[%vreg173 -> %t0] GR32Bit
[%vreg174 -> %t0] GR32Bit
[%vreg175 -> %t0] GR32Bit
[%vreg176 -> %t2] GR32Bit
[%vreg177 -> %t0] GR32Bit
[%vreg178 -> %fp] GR32Bit
[%vreg179 -> %t0] GR32Bit
[%vreg180 -> %a0] GR32Bit
[%vreg181 -> %t1] GR32Bit
[%vreg182 -> %t1] GR32Bit
[%vreg183 -> %t1] GR32Bit
[%vreg184 -> %t0] GR32Bit
[%vreg185 -> %t0] GR32Bit
[%vreg186 -> %t0] GR32Bit
[%vreg187 -> %t1] GR32Bit
[%vreg188 -> %t2] GR32Bit
[%vreg189 -> %t0] GR32Bit
[%vreg190 -> %fp] GR32Bit
[%vreg191 -> %t0] GR32Bit
[%vreg192 -> %a0] GR32Bit
[%vreg193 -> %t1] GR32Bit
[%vreg194 -> %t1] GR32Bit
[%vreg195 -> %t1] GR32Bit
[%vreg196 -> %t0] GR32Bit
[%vreg197 -> %t0] GR32Bit
[%vreg198 -> %t0] GR32Bit
[%vreg199 -> %t1] GR32Bit
[%vreg200 -> %t1] GR32Bit
[%vreg201 -> %t0] GR32Bit
[%vreg202 -> %t1] GR32Bit
[%vreg203 -> %t0] GR32Bit
[%vreg204 -> %t1] GR32Bit
[%vreg205 -> %t0] GR32Bit
[%vreg206 -> %t0] GR32Bit
[%vreg207 -> %t0] GR32Bit
[%vreg208 -> %t0] GR32Bit
[%vreg209 -> %t1] GR32Bit
[%vreg210 -> %t0] GR32Bit
[%vreg211 -> %t1] GR32Bit
[%vreg212 -> %t0] GR32Bit
[%vreg213 -> %t1] GR32Bit
[%vreg214 -> %t0] GR32Bit
[%vreg215 -> %t0] GR32Bit
[%vreg216 -> %t0] GR32Bit
[%vreg217 -> %t0] GR32Bit
[%vreg218 -> %t1] GR32Bit
[%vreg219 -> %t0] GR32Bit
[%vreg220 -> %t1] GR32Bit
[%vreg221 -> %t0] GR32Bit
[%vreg222 -> %t1] GR32Bit
[%vreg223 -> %t0] GR32Bit
[%vreg224 -> %t0] GR32Bit
[%vreg225 -> %t0] GR32Bit
[%vreg226 -> %t0] GR32Bit
[%vreg227 -> %t1] GR32Bit
[%vreg228 -> %t0] GR32Bit
[%vreg229 -> %t1] GR32Bit
[%vreg230 -> %t0] GR32Bit
[%vreg231 -> %t1] GR32Bit
[%vreg232 -> %t0] GR32Bit
[%vreg233 -> %t0] GR32Bit
[%vreg234 -> %t0] GR32Bit
[%vreg235 -> %t0] GR32Bit
[%vreg236 -> %t1] GR32Bit
[%vreg237 -> %t0] GR32Bit
[%vreg238 -> %t1] GR32Bit
[%vreg239 -> %t0] GR32Bit
[%vreg240 -> %t1] GR32Bit
[%vreg241 -> %t0] GR32Bit
[%vreg242 -> %t0] GR32Bit
[%vreg243 -> %t0] GR32Bit
[%vreg244 -> %t0] GR32Bit
[%vreg245 -> %t1] GR32Bit
[%vreg246 -> %t0] GR32Bit
[%vreg247 -> %t1] GR32Bit
[%vreg248 -> %t0] GR32Bit
[%vreg249 -> %t1] GR32Bit
[%vreg250 -> %t0] GR32Bit
[%vreg251 -> %t0] GR32Bit
[%vreg252 -> %t0] GR32Bit
[%vreg253 -> %t0] GR32Bit
[%vreg254 -> %t0] GR32Bit
[%vreg255 -> %t1] GR32Bit

0B	BB#0: derived from LLVM BB %AssignFunction3.entry
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg84<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg84
4B		  * %vreg85<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg85
4B		  * %vreg86<def> = SRLI %vreg85<kill>, 12; GR32Bit:%vreg86,%vreg85
4B		  * %vreg87<def> = ADD %vreg84<kill>, %vreg86<kill>; GR32Bit:%vreg87,%vreg84,%vreg86
4B		  * %vreg88<def> = ADDI %zero, 12; GR32Bit:%vreg88
4B		  * %vreg89<def> = SRLI %t5, 22; GR32Bit:%vreg89
4B		  * %vreg90<def> = SRLI %t5, 12; GR32Bit:%vreg90
4B		  * %vreg91<def> = ANDI %vreg90<kill>, 15; GR32Bit:%vreg91,%vreg90
4B		  * %vreg92<def> = SRLI %t5, 6; GR32Bit:%vreg92
4B		  * %vreg93<def> = ANDI %vreg92<kill>, 63; GR32Bit:%vreg93,%vreg92
4B		  * %vreg94<def> = ADDI %zero, 832; GR32Bit:%vreg94
4B		  * %vreg95<def> = MUL %vreg89<kill>, %vreg94<kill>; GR32Bit:%vreg95,%vreg89,%vreg94
4B		  * %vreg96<def> = ADDI %zero, 52; GR32Bit:%vreg96
4B		  * %vreg97<def> = MUL %vreg91<kill>, %vreg96<kill>; GR32Bit:%vreg97,%vreg91,%vreg96
4B		  * %vreg98<def> = ADD %vreg97<kill>, %vreg93<kill>; GR32Bit:%vreg98,%vreg97,%vreg93
4B		  * %vreg99<def> = ADD %vreg98<kill>, %vreg95<kill>; GR32Bit:%vreg99,%vreg98,%vreg95
4B		  * %vreg100<def> = MUL %vreg99<kill>, %vreg88<kill>; GR32Bit:%vreg100,%vreg99,%vreg88
4B		  * %t5<def> = ADD %vreg87<kill>, %vreg100<kill>; GR32Bit:%vreg87,%vreg100
4B		  * %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
4B		  * %vreg0<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg0
4B		  * SW %vreg1, %vreg0<kill>, 0; mem:ST4[%2] GR32Bit:%vreg1,%vreg0
4B		  * %vreg2<def> = LW %vreg1<kill>, 0; mem:LD4[%4](align=16) GR32Bit:%vreg2,%vreg1
4B		  * %vreg158<def> = LUI 1; GR32Bit:%vreg158
4B		  * WRITEPM %vreg158<kill>, %vreg2, 0; GR32Bit:%vreg158,%vreg2
4B		  * %vreg160<def> = LUI 2; GR32Bit:%vreg160
4B		  * WRITEPM %vreg160<kill>, %vreg2, 0; GR32Bit:%vreg160,%vreg2
4B		  * %vreg162<def> = LUI 3; GR32Bit:%vreg162
4B		  * WRITEPM %vreg162<kill>, %vreg2, 0; GR32Bit:%vreg162,%vreg2
4B		  * BEQ <BB#2>, %vreg2<kill>, %zero; GR32Bit:%vreg2
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
4B		  * JAL <BB#1>
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
276B		%t4<def> = ADD %t5, %zero
276B		  * %vreg103<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg103
276B		  * %vreg104<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg104
276B		  * %vreg105<def> = SRLI %vreg104<kill>, 12; GR32Bit:%vreg105,%vreg104
276B		  * %vreg106<def> = ADD %vreg103<kill>, %vreg105<kill>; GR32Bit:%vreg106,%vreg103,%vreg105
276B		  * %vreg107<def> = ADDI %zero, 12; GR32Bit:%vreg107
276B		  * %vreg108<def> = SRLI %t5, 22; GR32Bit:%vreg108
276B		  * %vreg109<def> = SRLI %t5, 12; GR32Bit:%vreg109
276B		  * %vreg110<def> = ANDI %vreg109<kill>, 15; GR32Bit:%vreg110,%vreg109
276B		  * %vreg111<def> = SRLI %t5, 6; GR32Bit:%vreg111
276B		  * %vreg112<def> = ANDI %vreg111<kill>, 63; GR32Bit:%vreg112,%vreg111
276B		  * %vreg113<def> = ADDI %zero, 832; GR32Bit:%vreg113
276B		  * %vreg114<def> = MUL %vreg108<kill>, %vreg113<kill>; GR32Bit:%vreg114,%vreg108,%vreg113
276B		  * %vreg115<def> = ADDI %zero, 52; GR32Bit:%vreg115
276B		  * %vreg116<def> = MUL %vreg110<kill>, %vreg115<kill>; GR32Bit:%vreg116,%vreg110,%vreg115
276B		  * %vreg117<def> = ADD %vreg116<kill>, %vreg112<kill>; GR32Bit:%vreg117,%vreg116,%vreg112
276B		  * %vreg118<def> = ADD %vreg117<kill>, %vreg114<kill>; GR32Bit:%vreg118,%vreg117,%vreg114
276B		  * %vreg119<def> = MUL %vreg118<kill>, %vreg107<kill>; GR32Bit:%vreg119,%vreg118,%vreg107
276B		  * %t5<def> = ADD %vreg106<kill>, %vreg119<kill>; GR32Bit:%vreg106,%vreg119
276B		  * %vreg159<def> = LUI 1; GR32Bit:%vreg159
276B		  * %vreg164<def> = DREADPM %vreg159<kill>, 0; GR32Bit:%vreg164,%vreg159
276B		  * BEQ <BB#2>, %vreg164<kill>, %zero; GR32Bit:%vreg164
276B		  * %zero<def> = ADDI %zero, 0
276B		  * %zero<def> = ADDI %zero, 0
276B		  * JAL <BB#1>
276B		  * %zero<def> = ADDI %zero, 0
276B		  * %zero<def> = ADDI %zero, 0
492B		%t4<def> = ADD %t5, %zero
492B		  * %vreg122<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg122
492B		  * %vreg123<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg123
492B		  * %vreg124<def> = SRLI %vreg123<kill>, 12; GR32Bit:%vreg124,%vreg123
492B		  * %vreg125<def> = ADD %vreg122<kill>, %vreg124<kill>; GR32Bit:%vreg125,%vreg122,%vreg124
492B		  * %vreg126<def> = ADDI %zero, 12; GR32Bit:%vreg126
492B		  * %vreg127<def> = SRLI %t5, 22; GR32Bit:%vreg127
492B		  * %vreg128<def> = SRLI %t5, 12; GR32Bit:%vreg128
492B		  * %vreg129<def> = ANDI %vreg128<kill>, 15; GR32Bit:%vreg129,%vreg128
492B		  * %vreg130<def> = SRLI %t5, 6; GR32Bit:%vreg130
492B		  * %vreg131<def> = ANDI %vreg130<kill>, 63; GR32Bit:%vreg131,%vreg130
492B		  * %vreg132<def> = ADDI %zero, 832; GR32Bit:%vreg132
492B		  * %vreg133<def> = MUL %vreg127<kill>, %vreg132<kill>; GR32Bit:%vreg133,%vreg127,%vreg132
492B		  * %vreg134<def> = ADDI %zero, 52; GR32Bit:%vreg134
492B		  * %vreg135<def> = MUL %vreg129<kill>, %vreg134<kill>; GR32Bit:%vreg135,%vreg129,%vreg134
492B		  * %vreg136<def> = ADD %vreg135<kill>, %vreg131<kill>; GR32Bit:%vreg136,%vreg135,%vreg131
492B		  * %vreg137<def> = ADD %vreg136<kill>, %vreg133<kill>; GR32Bit:%vreg137,%vreg136,%vreg133
492B		  * %vreg138<def> = MUL %vreg137<kill>, %vreg126<kill>; GR32Bit:%vreg138,%vreg137,%vreg126
492B		  * %t5<def> = ADD %vreg125<kill>, %vreg138<kill>; GR32Bit:%vreg125,%vreg138
492B		  * %vreg161<def> = LUI 2; GR32Bit:%vreg161
492B		  * %vreg165<def> = DREADPM %vreg161<kill>, 0; GR32Bit:%vreg165,%vreg161
492B		  * BEQ <BB#2>, %vreg165<kill>, %zero; GR32Bit:%vreg165
492B		  * %zero<def> = ADDI %zero, 0
492B		  * %zero<def> = ADDI %zero, 0
492B		  * JAL <BB#1>
492B		  * %zero<def> = ADDI %zero, 0
492B		  * %zero<def> = ADDI %zero, 0
708B		%t4<def> = ADD %t5, %zero
708B		  * %vreg141<def> = LUI <MCSym="%hi("ga#768")">; GR32Bit:%vreg141
708B		  * %vreg142<def> = LUI <MCSym="%lo("ga#768")">; GR32Bit:%vreg142
708B		  * %vreg143<def> = SRLI %vreg142<kill>, 12; GR32Bit:%vreg143,%vreg142
708B		  * %vreg144<def> = ADD %vreg141<kill>, %vreg143<kill>; GR32Bit:%vreg144,%vreg141,%vreg143
708B		  * %vreg145<def> = ADDI %zero, 12; GR32Bit:%vreg145
708B		  * %vreg146<def> = SRLI %t5, 22; GR32Bit:%vreg146
708B		  * %vreg147<def> = SRLI %t5, 12; GR32Bit:%vreg147
708B		  * %vreg148<def> = ANDI %vreg147<kill>, 15; GR32Bit:%vreg148,%vreg147
708B		  * %vreg149<def> = SRLI %t5, 6; GR32Bit:%vreg149
708B		  * %vreg150<def> = ANDI %vreg149<kill>, 63; GR32Bit:%vreg150,%vreg149
708B		  * %vreg151<def> = ADDI %zero, 832; GR32Bit:%vreg151
708B		  * %vreg152<def> = MUL %vreg146<kill>, %vreg151<kill>; GR32Bit:%vreg152,%vreg146,%vreg151
708B		  * %vreg153<def> = ADDI %zero, 52; GR32Bit:%vreg153
708B		  * %vreg154<def> = MUL %vreg148<kill>, %vreg153<kill>; GR32Bit:%vreg154,%vreg148,%vreg153
708B		  * %vreg155<def> = ADD %vreg154<kill>, %vreg150<kill>; GR32Bit:%vreg155,%vreg154,%vreg150
708B		  * %vreg156<def> = ADD %vreg155<kill>, %vreg152<kill>; GR32Bit:%vreg156,%vreg155,%vreg152
708B		  * %vreg157<def> = MUL %vreg156<kill>, %vreg145<kill>; GR32Bit:%vreg157,%vreg156,%vreg145
708B		  * %t5<def> = ADD %vreg144<kill>, %vreg157<kill>; GR32Bit:%vreg144,%vreg157
708B		  * %vreg163<def> = LUI 3; GR32Bit:%vreg163
708B		  * %vreg166<def> = DREADPM %vreg163<kill>, 0; GR32Bit:%vreg166,%vreg163
708B		  * BEQ <BB#2>, %vreg166<kill>, %zero; GR32Bit:%vreg166
708B		  * %zero<def> = ADDI %zero, 0
708B		  * %zero<def> = ADDI %zero, 0
708B		  * JAL <BB#1>
708B		  * %zero<def> = ADDI %zero, 0
708B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#1(20) BB#2(12)
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#768")">
> %t1<def> = LUI <MCSym="%lo("ga#768")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 12
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = ADDI %t5, <fi#-1>
> %t1<def> = ADDI %t5, <fi#1>
> SW %t0, %t1<kill>, 0; mem:ST4[%2]
> %t0<def> = LW %t0<kill>, 0; mem:LD4[%4](align=16)
> %t1<def> = LUI 1
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 2
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 3
> WRITEPM %t1<kill>, %t0, 0
> BEQ <BB#2>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#1>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#768")">
> %t1<def> = LUI <MCSym="%lo("ga#768")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 12
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = LUI 1
> %t0<def> = DREADPM %t0<kill>, 0
> BEQ <BB#2>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#1>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#768")">
> %t1<def> = LUI <MCSym="%lo("ga#768")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 12
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = LUI 2
> %t0<def> = DREADPM %t0<kill>, 0
> BEQ <BB#2>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#1>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#768")">
> %t1<def> = LUI <MCSym="%lo("ga#768")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 12
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = LUI 3
> %t0<def> = DREADPM %t0<kill>, 0
> BEQ <BB#2>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#1>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
1188B	BB#1: derived from LLVM BB %AssignFunction3.if.then
	    Predecessors according to CFG: BB#0
1196B		%vreg4<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg4
1196B		  * SRLI %vreg4, %vreg4, 12; GR32Bit:%vreg4
1196B		  * %vreg3<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg3
1196B		  * %vreg5<def> = ADD %vreg4<kill>, %vreg3<kill>; GR32Bit:%vreg5,%vreg4,%vreg3
1196B		  * %vreg6<def> = LW %vreg5, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg6,%vreg5
1196B		  * %vreg7<def> = ORI %vreg6<kill>, 1; GR32Bit:%vreg7,%vreg6
1196B		  * SW %vreg7<kill>, %vreg5<kill>, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg7,%vreg5
1212B		%zero<def> = ADDI %zero, 0
1220B		%zero<def> = ADDI %zero, 0
1228B		%zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#2
> %t0<def> = LUI <MCSym="%lo("ga#0")">
> SRLI %t0, %t0, 12
> %t1<def> = LUI <ga:@eicas_discretes>[TF=2]
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = LW %t0, 0; mem:LD4[@eicas_discretes]
> %t1<def> = ORI %t1<kill>, 1
> SW %t1<kill>, %t0<kill>, 0; mem:ST4[@eicas_discretes]
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
1284B	BB#2: derived from LLVM BB %AssignFunction3.if.end
	    Predecessors according to CFG: BB#0 BB#1
1292B		%vreg8<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg8
1292B		  * %vreg9<def> = LW %vreg8<kill>, 0; mem:LD4[%2] GR32Bit:%vreg9,%vreg8
1292B		  * %vreg10<def> = LW %vreg9<kill>, 4; mem:LD4[%10] GR32Bit:%vreg10,%vreg9
1292B		  * %vreg167<def> = LUI 1; GR32Bit:%vreg167
1292B		  * WRITEPM %vreg167<kill>, %vreg10, 0; GR32Bit:%vreg167,%vreg10
1292B		  * %vreg169<def> = LUI 2; GR32Bit:%vreg169
1292B		  * WRITEPM %vreg169<kill>, %vreg10, 0; GR32Bit:%vreg169,%vreg10
1292B		  * %vreg171<def> = LUI 3; GR32Bit:%vreg171
1292B		  * WRITEPM %vreg171<kill>, %vreg10, 0; GR32Bit:%vreg171,%vreg10
1292B		  * BEQ <BB#4>, %vreg10<kill>, %zero; GR32Bit:%vreg10
1292B		  * %zero<def> = ADDI %zero, 0
1292B		  * %zero<def> = ADDI %zero, 0
1292B		  * JAL <BB#3>
1292B		  * %zero<def> = ADDI %zero, 0
1292B		  * %zero<def> = ADDI %zero, 0
1412B		%vreg168<def> = LUI 1; GR32Bit:%vreg168
1412B		  * %vreg173<def> = DREADPM %vreg168<kill>, 0; GR32Bit:%vreg173,%vreg168
1412B		  * BEQ <BB#4>, %vreg173<kill>, %zero; GR32Bit:%vreg173
1412B		  * %zero<def> = ADDI %zero, 0
1412B		  * %zero<def> = ADDI %zero, 0
1412B		  * JAL <BB#3>
1412B		  * %zero<def> = ADDI %zero, 0
1412B		  * %zero<def> = ADDI %zero, 0
1492B		%vreg170<def> = LUI 2; GR32Bit:%vreg170
1492B		  * %vreg174<def> = DREADPM %vreg170<kill>, 0; GR32Bit:%vreg174,%vreg170
1492B		  * BEQ <BB#4>, %vreg174<kill>, %zero; GR32Bit:%vreg174
1492B		  * %zero<def> = ADDI %zero, 0
1492B		  * %zero<def> = ADDI %zero, 0
1492B		  * JAL <BB#3>
1492B		  * %zero<def> = ADDI %zero, 0
1492B		  * %zero<def> = ADDI %zero, 0
1572B		%vreg172<def> = LUI 3; GR32Bit:%vreg172
1572B		  * %vreg175<def> = DREADPM %vreg172<kill>, 0; GR32Bit:%vreg175,%vreg172
1572B		  * BEQ <BB#4>, %vreg175<kill>, %zero; GR32Bit:%vreg175
1572B		  * %zero<def> = ADDI %zero, 0
1572B		  * %zero<def> = ADDI %zero, 0
1572B		  * JAL <BB#3>
1572B		  * %zero<def> = ADDI %zero, 0
1572B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#3(20) BB#4(12)
> %t0<def> = ADDI %t5, <fi#1>
> %t0<def> = LW %t0<kill>, 0; mem:LD4[%2]
> %t0<def> = LW %t0<kill>, 4; mem:LD4[%10]
> %t1<def> = LUI 1
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 2
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 3
> WRITEPM %t1<kill>, %t0, 0
> BEQ <BB#4>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#3>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 1
> %t0<def> = DREADPM %t0<kill>, 0
> BEQ <BB#4>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#3>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 2
> %t0<def> = DREADPM %t0<kill>, 0
> BEQ <BB#4>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#3>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 3
> %t0<def> = DREADPM %t0<kill>, 0
> BEQ <BB#4>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#3>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
1788B	BB#3: derived from LLVM BB %AssignFunction3.if.then3
	    Predecessors according to CFG: BB#2
1204B		%vreg12<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg12
1204B		  * SRLI %vreg12, %vreg12, 12; GR32Bit:%vreg12
1204B		  * %vreg11<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg11
1204B		  * %vreg13<def> = ADD %vreg12<kill>, %vreg11<kill>; GR32Bit:%vreg13,%vreg12,%vreg11
1204B		  * %vreg14<def> = LW %vreg13, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg14,%vreg13
1204B		  * %vreg15<def> = ORI %vreg14<kill>, 2; GR32Bit:%vreg15,%vreg14
1204B		  * SW %vreg15<kill>, %vreg13<kill>, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg15,%vreg13
1804B		%zero<def> = ADDI %zero, 0
1812B		%zero<def> = ADDI %zero, 0
1820B		%zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#4
> %t0<def> = LUI <MCSym="%lo("ga#0")">
> SRLI %t0, %t0, 12
> %t1<def> = LUI <ga:@eicas_discretes>[TF=2]
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = LW %t0, 0; mem:LD4[@eicas_discretes]
> %t1<def> = ORI %t1<kill>, 2
> SW %t1<kill>, %t0<kill>, 0; mem:ST4[@eicas_discretes]
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
1876B	BB#4: derived from LLVM BB %AssignFunction3.if.end5
	    Predecessors according to CFG: BB#2 BB#3
1884B		%vreg19<def> = ADDI %zero, 250; GR32Bit:%vreg19
1884B		  * %vreg16<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg16
1884B		  * %vreg17<def> = LW %vreg16<kill>, 0; mem:LD4[%2] GR32Bit:%vreg17,%vreg16
1884B		  * %vreg18<def> = LW %vreg17<kill>, 8; mem:LD4[%16] GR32Bit:%vreg18,%vreg17
1884B		  * %vreg176<def> = LUI 1; GR32Bit:%vreg176
1884B		  * WRITEPM %vreg176, %vreg18, 0; GR32Bit:%vreg176,%vreg18
1884B		  * %vreg178<def> = LUI 2; GR32Bit:%vreg178
1884B		  * WRITEPM %vreg178, %vreg18, 0; GR32Bit:%vreg178,%vreg18
1884B		  * %vreg180<def> = LUI 3; GR32Bit:%vreg180
1884B		  * WRITEPM %vreg180, %vreg18, 0; GR32Bit:%vreg180,%vreg18
1884B		  * WRITEPM %vreg176<kill>, %vreg19, 4; GR32Bit:%vreg176,%vreg19
1884B		  * WRITEPM %vreg178<kill>, %vreg19, 4; GR32Bit:%vreg178,%vreg19
1884B		  * WRITEPM %vreg180<kill>, %vreg19, 4; GR32Bit:%vreg180,%vreg19
1884B		  * BGT <BB#6>, %vreg18<kill>, %vreg19<kill>; GR32Bit:%vreg18,%vreg19
1884B		  * %zero<def> = ADDI %zero, 0
1884B		  * %zero<def> = ADDI %zero, 0
1884B		  * JAL <BB#5>
1884B		  * %zero<def> = ADDI %zero, 0
1884B		  * %zero<def> = ADDI %zero, 0
2036B		%vreg177<def> = LUI 1; GR32Bit:%vreg177
2036B		  * %vreg182<def> = DREADPM %vreg177, 0; GR32Bit:%vreg182,%vreg177
2036B		  * %vreg185<def> = DREADPM %vreg177<kill>, 4; GR32Bit:%vreg185,%vreg177
2036B		  * BGT <BB#6>, %vreg182<kill>, %vreg185<kill>; GR32Bit:%vreg182,%vreg185
2036B		  * %zero<def> = ADDI %zero, 0
2036B		  * %zero<def> = ADDI %zero, 0
2036B		  * JAL <BB#5>
2036B		  * %zero<def> = ADDI %zero, 0
2036B		  * %zero<def> = ADDI %zero, 0
2124B		%vreg179<def> = LUI 2; GR32Bit:%vreg179
2124B		  * %vreg183<def> = DREADPM %vreg179, 0; GR32Bit:%vreg183,%vreg179
2124B		  * %vreg186<def> = DREADPM %vreg179<kill>, 4; GR32Bit:%vreg186,%vreg179
2124B		  * BGT <BB#6>, %vreg183<kill>, %vreg186<kill>; GR32Bit:%vreg183,%vreg186
2124B		  * %zero<def> = ADDI %zero, 0
2124B		  * %zero<def> = ADDI %zero, 0
2124B		  * JAL <BB#5>
2124B		  * %zero<def> = ADDI %zero, 0
2124B		  * %zero<def> = ADDI %zero, 0
2212B		%vreg181<def> = LUI 3; GR32Bit:%vreg181
2212B		  * %vreg184<def> = DREADPM %vreg181, 0; GR32Bit:%vreg184,%vreg181
2212B		  * %vreg187<def> = DREADPM %vreg181<kill>, 4; GR32Bit:%vreg187,%vreg181
2212B		  * BGT <BB#6>, %vreg184<kill>, %vreg187<kill>; GR32Bit:%vreg184,%vreg187
2212B		  * %zero<def> = ADDI %zero, 0
2212B		  * %zero<def> = ADDI %zero, 0
2212B		  * JAL <BB#5>
2212B		  * %zero<def> = ADDI %zero, 0
2212B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#6(16) BB#5(16)
> %t0<def> = ADDI %zero, 250
> %t1<def> = ADDI %t5, <fi#1>
> %t1<def> = LW %t1<kill>, 0; mem:LD4[%2]
> %t1<def> = LW %t1<kill>, 8; mem:LD4[%16]
> %t2<def> = LUI 1
> WRITEPM %t2, %t1, 0
> %fp<def> = LUI 2
> WRITEPM %fp, %t1, 0
> %a0<def> = LUI 3
> WRITEPM %a0, %t1, 0
> WRITEPM %t2<kill>, %t0, 4
> WRITEPM %fp<kill>, %t0, 4
> WRITEPM %a0<kill>, %t0, 4
> BGT <BB#6>, %t1<kill>, %t0<kill>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#5>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 1
> %t1<def> = DREADPM %t0, 0
> %t0<def> = DREADPM %t0<kill>, 4
> BGT <BB#6>, %t1<kill>, %t0<kill>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#5>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 2
> %t1<def> = DREADPM %t0, 0
> %t0<def> = DREADPM %t0<kill>, 4
> BGT <BB#6>, %t1<kill>, %t0<kill>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#5>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t1<def> = LUI 3
> %t0<def> = DREADPM %t1, 0
> %t1<def> = DREADPM %t1<kill>, 4
> BGT <BB#6>, %t0<kill>, %t1<kill>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#5>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
2484B	BB#5: derived from LLVM BB %AssignFunction3.lor.lhs.false
	    Predecessors according to CFG: BB#4
2492B		%vreg23<def> = ADDI %zero, 251; GR32Bit:%vreg23
2492B		  * %vreg20<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg20
2492B		  * %vreg21<def> = LW %vreg20<kill>, 0; mem:LD4[%2] GR32Bit:%vreg21,%vreg20
2492B		  * %vreg22<def> = LW %vreg21<kill>, 12; mem:LD4[%20] GR32Bit:%vreg22,%vreg21
2492B		  * %vreg188<def> = LUI 1; GR32Bit:%vreg188
2492B		  * WRITEPM %vreg188, %vreg22, 0; GR32Bit:%vreg188,%vreg22
2492B		  * %vreg190<def> = LUI 2; GR32Bit:%vreg190
2492B		  * WRITEPM %vreg190, %vreg22, 0; GR32Bit:%vreg190,%vreg22
2492B		  * %vreg192<def> = LUI 3; GR32Bit:%vreg192
2492B		  * WRITEPM %vreg192, %vreg22, 0; GR32Bit:%vreg192,%vreg22
2492B		  * WRITEPM %vreg188<kill>, %vreg23, 4; GR32Bit:%vreg188,%vreg23
2492B		  * WRITEPM %vreg190<kill>, %vreg23, 4; GR32Bit:%vreg190,%vreg23
2492B		  * WRITEPM %vreg192<kill>, %vreg23, 4; GR32Bit:%vreg192,%vreg23
2492B		  * BLT <BB#7>, %vreg22<kill>, %vreg23<kill>; GR32Bit:%vreg22,%vreg23
2492B		  * %zero<def> = ADDI %zero, 0
2492B		  * %zero<def> = ADDI %zero, 0
2492B		  * JAL <BB#6>
2492B		  * %zero<def> = ADDI %zero, 0
2492B		  * %zero<def> = ADDI %zero, 0
2644B		%vreg189<def> = LUI 1; GR32Bit:%vreg189
2644B		  * %vreg194<def> = DREADPM %vreg189, 0; GR32Bit:%vreg194,%vreg189
2644B		  * %vreg197<def> = DREADPM %vreg189<kill>, 4; GR32Bit:%vreg197,%vreg189
2644B		  * BLT <BB#7>, %vreg194<kill>, %vreg197<kill>; GR32Bit:%vreg194,%vreg197
2644B		  * %zero<def> = ADDI %zero, 0
2644B		  * %zero<def> = ADDI %zero, 0
2644B		  * JAL <BB#6>
2644B		  * %zero<def> = ADDI %zero, 0
2644B		  * %zero<def> = ADDI %zero, 0
2732B		%vreg191<def> = LUI 2; GR32Bit:%vreg191
2732B		  * %vreg195<def> = DREADPM %vreg191, 0; GR32Bit:%vreg195,%vreg191
2732B		  * %vreg198<def> = DREADPM %vreg191<kill>, 4; GR32Bit:%vreg198,%vreg191
2732B		  * BLT <BB#7>, %vreg195<kill>, %vreg198<kill>; GR32Bit:%vreg195,%vreg198
2732B		  * %zero<def> = ADDI %zero, 0
2732B		  * %zero<def> = ADDI %zero, 0
2732B		  * JAL <BB#6>
2732B		  * %zero<def> = ADDI %zero, 0
2732B		  * %zero<def> = ADDI %zero, 0
2820B		%vreg193<def> = LUI 3; GR32Bit:%vreg193
2820B		  * %vreg196<def> = DREADPM %vreg193, 0; GR32Bit:%vreg196,%vreg193
2820B		  * %vreg199<def> = DREADPM %vreg193<kill>, 4; GR32Bit:%vreg199,%vreg193
2820B		  * BLT <BB#7>, %vreg196<kill>, %vreg199<kill>; GR32Bit:%vreg196,%vreg199
2820B		  * %zero<def> = ADDI %zero, 0
2820B		  * %zero<def> = ADDI %zero, 0
2820B		  * JAL <BB#6>
2820B		  * %zero<def> = ADDI %zero, 0
2820B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#6(16) BB#7(16)
> %t0<def> = ADDI %zero, 251
> %t1<def> = ADDI %t5, <fi#1>
> %t1<def> = LW %t1<kill>, 0; mem:LD4[%2]
> %t1<def> = LW %t1<kill>, 12; mem:LD4[%20]
> %t2<def> = LUI 1
> WRITEPM %t2, %t1, 0
> %fp<def> = LUI 2
> WRITEPM %fp, %t1, 0
> %a0<def> = LUI 3
> WRITEPM %a0, %t1, 0
> WRITEPM %t2<kill>, %t0, 4
> WRITEPM %fp<kill>, %t0, 4
> WRITEPM %a0<kill>, %t0, 4
> BLT <BB#7>, %t1<kill>, %t0<kill>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#6>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 1
> %t1<def> = DREADPM %t0, 0
> %t0<def> = DREADPM %t0<kill>, 4
> BLT <BB#7>, %t1<kill>, %t0<kill>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#6>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 2
> %t1<def> = DREADPM %t0, 0
> %t0<def> = DREADPM %t0<kill>, 4
> BLT <BB#7>, %t1<kill>, %t0<kill>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#6>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t1<def> = LUI 3
> %t0<def> = DREADPM %t1, 0
> %t1<def> = DREADPM %t1<kill>, 4
> BLT <BB#7>, %t0<kill>, %t1<kill>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#6>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
3092B	BB#6: derived from LLVM BB %AssignFunction3.if.then9
	    Predecessors according to CFG: BB#4 BB#5
1796B		%vreg25<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg25
1796B		  * SRLI %vreg25, %vreg25, 12; GR32Bit:%vreg25
1796B		  * %vreg24<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg24
1796B		  * %vreg26<def> = ADD %vreg25<kill>, %vreg24<kill>; GR32Bit:%vreg26,%vreg25,%vreg24
1796B		  * %vreg27<def> = LW %vreg26, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg27,%vreg26
1796B		  * %vreg28<def> = ORI %vreg27<kill>, 4; GR32Bit:%vreg28,%vreg27
1796B		  * SW %vreg28<kill>, %vreg26<kill>, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg28,%vreg26
3108B		%zero<def> = ADDI %zero, 0
3116B		%zero<def> = ADDI %zero, 0
3124B		%zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#7
> %t0<def> = LUI <MCSym="%lo("ga#0")">
> SRLI %t0, %t0, 12
> %t1<def> = LUI <ga:@eicas_discretes>[TF=2]
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = LW %t0, 0; mem:LD4[@eicas_discretes]
> %t1<def> = ORI %t1<kill>, 4
> SW %t1<kill>, %t0<kill>, 0; mem:ST4[@eicas_discretes]
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
3180B	BB#7: derived from LLVM BB %AssignFunction3.if.end11
	    Predecessors according to CFG: BB#5 BB#6
3188B		%vreg29<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg29
3188B		  * %vreg30<def> = LW %vreg29<kill>, 0; mem:LD4[%2] GR32Bit:%vreg30,%vreg29
3188B		  * %vreg31<def> = LW %vreg30<kill>, 16; mem:LD4[%26] GR32Bit:%vreg31,%vreg30
3188B		  * %vreg200<def> = LUI 1; GR32Bit:%vreg200
3188B		  * WRITEPM %vreg200<kill>, %vreg31, 0; GR32Bit:%vreg200,%vreg31
3188B		  * %vreg202<def> = LUI 2; GR32Bit:%vreg202
3188B		  * WRITEPM %vreg202<kill>, %vreg31, 0; GR32Bit:%vreg202,%vreg31
3188B		  * %vreg204<def> = LUI 3; GR32Bit:%vreg204
3188B		  * WRITEPM %vreg204<kill>, %vreg31, 0; GR32Bit:%vreg204,%vreg31
3188B		  * BEQ <BB#9>, %vreg31<kill>, %zero; GR32Bit:%vreg31
3188B		  * %zero<def> = ADDI %zero, 0
3188B		  * %zero<def> = ADDI %zero, 0
3188B		  * JAL <BB#8>
3188B		  * %zero<def> = ADDI %zero, 0
3188B		  * %zero<def> = ADDI %zero, 0
3308B		%vreg201<def> = LUI 1; GR32Bit:%vreg201
3308B		  * %vreg206<def> = DREADPM %vreg201<kill>, 0; GR32Bit:%vreg206,%vreg201
3308B		  * BEQ <BB#9>, %vreg206<kill>, %zero; GR32Bit:%vreg206
3308B		  * %zero<def> = ADDI %zero, 0
3308B		  * %zero<def> = ADDI %zero, 0
3308B		  * JAL <BB#8>
3308B		  * %zero<def> = ADDI %zero, 0
3308B		  * %zero<def> = ADDI %zero, 0
3388B		%vreg203<def> = LUI 2; GR32Bit:%vreg203
3388B		  * %vreg207<def> = DREADPM %vreg203<kill>, 0; GR32Bit:%vreg207,%vreg203
3388B		  * BEQ <BB#9>, %vreg207<kill>, %zero; GR32Bit:%vreg207
3388B		  * %zero<def> = ADDI %zero, 0
3388B		  * %zero<def> = ADDI %zero, 0
3388B		  * JAL <BB#8>
3388B		  * %zero<def> = ADDI %zero, 0
3388B		  * %zero<def> = ADDI %zero, 0
3468B		%vreg205<def> = LUI 3; GR32Bit:%vreg205
3468B		  * %vreg208<def> = DREADPM %vreg205<kill>, 0; GR32Bit:%vreg208,%vreg205
3468B		  * BEQ <BB#9>, %vreg208<kill>, %zero; GR32Bit:%vreg208
3468B		  * %zero<def> = ADDI %zero, 0
3468B		  * %zero<def> = ADDI %zero, 0
3468B		  * JAL <BB#8>
3468B		  * %zero<def> = ADDI %zero, 0
3468B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#8(20) BB#9(12)
> %t0<def> = ADDI %t5, <fi#1>
> %t0<def> = LW %t0<kill>, 0; mem:LD4[%2]
> %t0<def> = LW %t0<kill>, 16; mem:LD4[%26]
> %t1<def> = LUI 1
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 2
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 3
> WRITEPM %t1<kill>, %t0, 0
> BEQ <BB#9>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#8>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 1
> %t0<def> = DREADPM %t0<kill>, 0
> BEQ <BB#9>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#8>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 2
> %t0<def> = DREADPM %t0<kill>, 0
> BEQ <BB#9>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#8>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 3
> %t0<def> = DREADPM %t0<kill>, 0
> BEQ <BB#9>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#8>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
3684B	BB#8: derived from LLVM BB %AssignFunction3.if.then14
	    Predecessors according to CFG: BB#7
3100B		%vreg33<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg33
3100B		  * SRLI %vreg33, %vreg33, 12; GR32Bit:%vreg33
3100B		  * %vreg32<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg32
3100B		  * %vreg34<def> = ADD %vreg33<kill>, %vreg32<kill>; GR32Bit:%vreg34,%vreg33,%vreg32
3100B		  * %vreg35<def> = LW %vreg34, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg35,%vreg34
3100B		  * %vreg36<def> = ORI %vreg35<kill>, 16; GR32Bit:%vreg36,%vreg35
3100B		  * SW %vreg36<kill>, %vreg34<kill>, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg36,%vreg34
3700B		%zero<def> = ADDI %zero, 0
3708B		%zero<def> = ADDI %zero, 0
3716B		%zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#9
> %t0<def> = LUI <MCSym="%lo("ga#0")">
> SRLI %t0, %t0, 12
> %t1<def> = LUI <ga:@eicas_discretes>[TF=2]
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = LW %t0, 0; mem:LD4[@eicas_discretes]
> %t1<def> = ORI %t1<kill>, 16
> SW %t1<kill>, %t0<kill>, 0; mem:ST4[@eicas_discretes]
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
3772B	BB#9: derived from LLVM BB %AssignFunction3.if.end16
	    Predecessors according to CFG: BB#7 BB#8
3780B		%vreg37<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg37
3780B		  * %vreg38<def> = LW %vreg37<kill>, 0; mem:LD4[%2] GR32Bit:%vreg38,%vreg37
3780B		  * %vreg39<def> = LW %vreg38<kill>, 20; mem:LD4[%32] GR32Bit:%vreg39,%vreg38
3780B		  * %vreg209<def> = LUI 1; GR32Bit:%vreg209
3780B		  * WRITEPM %vreg209<kill>, %vreg39, 0; GR32Bit:%vreg209,%vreg39
3780B		  * %vreg211<def> = LUI 2; GR32Bit:%vreg211
3780B		  * WRITEPM %vreg211<kill>, %vreg39, 0; GR32Bit:%vreg211,%vreg39
3780B		  * %vreg213<def> = LUI 3; GR32Bit:%vreg213
3780B		  * WRITEPM %vreg213<kill>, %vreg39, 0; GR32Bit:%vreg213,%vreg39
3780B		  * BEQ <BB#11>, %vreg39<kill>, %zero; GR32Bit:%vreg39
3780B		  * %zero<def> = ADDI %zero, 0
3780B		  * %zero<def> = ADDI %zero, 0
3780B		  * JAL <BB#10>
3780B		  * %zero<def> = ADDI %zero, 0
3780B		  * %zero<def> = ADDI %zero, 0
3900B		%vreg210<def> = LUI 1; GR32Bit:%vreg210
3900B		  * %vreg215<def> = DREADPM %vreg210<kill>, 0; GR32Bit:%vreg215,%vreg210
3900B		  * BEQ <BB#11>, %vreg215<kill>, %zero; GR32Bit:%vreg215
3900B		  * %zero<def> = ADDI %zero, 0
3900B		  * %zero<def> = ADDI %zero, 0
3900B		  * JAL <BB#10>
3900B		  * %zero<def> = ADDI %zero, 0
3900B		  * %zero<def> = ADDI %zero, 0
3980B		%vreg212<def> = LUI 2; GR32Bit:%vreg212
3980B		  * %vreg216<def> = DREADPM %vreg212<kill>, 0; GR32Bit:%vreg216,%vreg212
3980B		  * BEQ <BB#11>, %vreg216<kill>, %zero; GR32Bit:%vreg216
3980B		  * %zero<def> = ADDI %zero, 0
3980B		  * %zero<def> = ADDI %zero, 0
3980B		  * JAL <BB#10>
3980B		  * %zero<def> = ADDI %zero, 0
3980B		  * %zero<def> = ADDI %zero, 0
4060B		%vreg214<def> = LUI 3; GR32Bit:%vreg214
4060B		  * %vreg217<def> = DREADPM %vreg214<kill>, 0; GR32Bit:%vreg217,%vreg214
4060B		  * BEQ <BB#11>, %vreg217<kill>, %zero; GR32Bit:%vreg217
4060B		  * %zero<def> = ADDI %zero, 0
4060B		  * %zero<def> = ADDI %zero, 0
4060B		  * JAL <BB#10>
4060B		  * %zero<def> = ADDI %zero, 0
4060B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#10(20) BB#11(12)
> %t0<def> = ADDI %t5, <fi#1>
> %t0<def> = LW %t0<kill>, 0; mem:LD4[%2]
> %t0<def> = LW %t0<kill>, 20; mem:LD4[%32]
> %t1<def> = LUI 1
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 2
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 3
> WRITEPM %t1<kill>, %t0, 0
> BEQ <BB#11>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#10>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 1
> %t0<def> = DREADPM %t0<kill>, 0
> BEQ <BB#11>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#10>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 2
> %t0<def> = DREADPM %t0<kill>, 0
> BEQ <BB#11>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#10>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 3
> %t0<def> = DREADPM %t0<kill>, 0
> BEQ <BB#11>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#10>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
4276B	BB#10: derived from LLVM BB %AssignFunction3.if.then19
	    Predecessors according to CFG: BB#9
3692B		%vreg41<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg41
3692B		  * SRLI %vreg41, %vreg41, 12; GR32Bit:%vreg41
3692B		  * %vreg40<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg40
3692B		  * %vreg42<def> = ADD %vreg41<kill>, %vreg40<kill>; GR32Bit:%vreg42,%vreg41,%vreg40
3692B		  * %vreg43<def> = LW %vreg42, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg43,%vreg42
3692B		  * %vreg44<def> = ORI %vreg43<kill>, 32; GR32Bit:%vreg44,%vreg43
3692B		  * SW %vreg44<kill>, %vreg42<kill>, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg44,%vreg42
4292B		%zero<def> = ADDI %zero, 0
4300B		%zero<def> = ADDI %zero, 0
4308B		%zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#11
> %t0<def> = LUI <MCSym="%lo("ga#0")">
> SRLI %t0, %t0, 12
> %t1<def> = LUI <ga:@eicas_discretes>[TF=2]
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = LW %t0, 0; mem:LD4[@eicas_discretes]
> %t1<def> = ORI %t1<kill>, 32
> SW %t1<kill>, %t0<kill>, 0; mem:ST4[@eicas_discretes]
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
4364B	BB#11: derived from LLVM BB %AssignFunction3.if.end21
	    Predecessors according to CFG: BB#9 BB#10
4372B		%vreg45<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg45
4372B		  * %vreg46<def> = LW %vreg45<kill>, 0; mem:LD4[%2] GR32Bit:%vreg46,%vreg45
4372B		  * %vreg47<def> = LW %vreg46<kill>, 24; mem:LD4[%38] GR32Bit:%vreg47,%vreg46
4372B		  * %vreg218<def> = LUI 1; GR32Bit:%vreg218
4372B		  * WRITEPM %vreg218<kill>, %vreg47, 0; GR32Bit:%vreg218,%vreg47
4372B		  * %vreg220<def> = LUI 2; GR32Bit:%vreg220
4372B		  * WRITEPM %vreg220<kill>, %vreg47, 0; GR32Bit:%vreg220,%vreg47
4372B		  * %vreg222<def> = LUI 3; GR32Bit:%vreg222
4372B		  * WRITEPM %vreg222<kill>, %vreg47, 0; GR32Bit:%vreg222,%vreg47
4372B		  * BEQ <BB#13>, %vreg47<kill>, %zero; GR32Bit:%vreg47
4372B		  * %zero<def> = ADDI %zero, 0
4372B		  * %zero<def> = ADDI %zero, 0
4372B		  * JAL <BB#12>
4372B		  * %zero<def> = ADDI %zero, 0
4372B		  * %zero<def> = ADDI %zero, 0
4492B		%vreg219<def> = LUI 1; GR32Bit:%vreg219
4492B		  * %vreg224<def> = DREADPM %vreg219<kill>, 0; GR32Bit:%vreg224,%vreg219
4492B		  * BEQ <BB#13>, %vreg224<kill>, %zero; GR32Bit:%vreg224
4492B		  * %zero<def> = ADDI %zero, 0
4492B		  * %zero<def> = ADDI %zero, 0
4492B		  * JAL <BB#12>
4492B		  * %zero<def> = ADDI %zero, 0
4492B		  * %zero<def> = ADDI %zero, 0
4572B		%vreg221<def> = LUI 2; GR32Bit:%vreg221
4572B		  * %vreg225<def> = DREADPM %vreg221<kill>, 0; GR32Bit:%vreg225,%vreg221
4572B		  * BEQ <BB#13>, %vreg225<kill>, %zero; GR32Bit:%vreg225
4572B		  * %zero<def> = ADDI %zero, 0
4572B		  * %zero<def> = ADDI %zero, 0
4572B		  * JAL <BB#12>
4572B		  * %zero<def> = ADDI %zero, 0
4572B		  * %zero<def> = ADDI %zero, 0
4652B		%vreg223<def> = LUI 3; GR32Bit:%vreg223
4652B		  * %vreg226<def> = DREADPM %vreg223<kill>, 0; GR32Bit:%vreg226,%vreg223
4652B		  * BEQ <BB#13>, %vreg226<kill>, %zero; GR32Bit:%vreg226
4652B		  * %zero<def> = ADDI %zero, 0
4652B		  * %zero<def> = ADDI %zero, 0
4652B		  * JAL <BB#12>
4652B		  * %zero<def> = ADDI %zero, 0
4652B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#12(20) BB#13(12)
> %t0<def> = ADDI %t5, <fi#1>
> %t0<def> = LW %t0<kill>, 0; mem:LD4[%2]
> %t0<def> = LW %t0<kill>, 24; mem:LD4[%38]
> %t1<def> = LUI 1
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 2
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 3
> WRITEPM %t1<kill>, %t0, 0
> BEQ <BB#13>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#12>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 1
> %t0<def> = DREADPM %t0<kill>, 0
> BEQ <BB#13>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#12>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 2
> %t0<def> = DREADPM %t0<kill>, 0
> BEQ <BB#13>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#12>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 3
> %t0<def> = DREADPM %t0<kill>, 0
> BEQ <BB#13>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#12>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
4868B	BB#12: derived from LLVM BB %AssignFunction3.if.then24
	    Predecessors according to CFG: BB#11
4284B		%vreg49<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg49
4284B		  * SRLI %vreg49, %vreg49, 12; GR32Bit:%vreg49
4284B		  * %vreg48<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg48
4284B		  * %vreg50<def> = ADD %vreg49<kill>, %vreg48<kill>; GR32Bit:%vreg50,%vreg49,%vreg48
4284B		  * %vreg51<def> = LW %vreg50, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg51,%vreg50
4284B		  * %vreg52<def> = ORI %vreg51<kill>, 64; GR32Bit:%vreg52,%vreg51
4284B		  * SW %vreg52<kill>, %vreg50<kill>, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg52,%vreg50
4884B		%zero<def> = ADDI %zero, 0
4892B		%zero<def> = ADDI %zero, 0
4900B		%zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#13
> %t0<def> = LUI <MCSym="%lo("ga#0")">
> SRLI %t0, %t0, 12
> %t1<def> = LUI <ga:@eicas_discretes>[TF=2]
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = LW %t0, 0; mem:LD4[@eicas_discretes]
> %t1<def> = ORI %t1<kill>, 64
> SW %t1<kill>, %t0<kill>, 0; mem:ST4[@eicas_discretes]
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
4956B	BB#13: derived from LLVM BB %AssignFunction3.if.end26
	    Predecessors according to CFG: BB#11 BB#12
4964B		%vreg53<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg53
4964B		  * %vreg54<def> = LW %vreg53<kill>, 0; mem:LD4[%2] GR32Bit:%vreg54,%vreg53
4964B		  * %vreg55<def> = LW %vreg54<kill>, 28; mem:LD4[%44] GR32Bit:%vreg55,%vreg54
4964B		  * %vreg227<def> = LUI 1; GR32Bit:%vreg227
4964B		  * WRITEPM %vreg227<kill>, %vreg55, 0; GR32Bit:%vreg227,%vreg55
4964B		  * %vreg229<def> = LUI 2; GR32Bit:%vreg229
4964B		  * WRITEPM %vreg229<kill>, %vreg55, 0; GR32Bit:%vreg229,%vreg55
4964B		  * %vreg231<def> = LUI 3; GR32Bit:%vreg231
4964B		  * WRITEPM %vreg231<kill>, %vreg55, 0; GR32Bit:%vreg231,%vreg55
4964B		  * BEQ <BB#15>, %vreg55<kill>, %zero; GR32Bit:%vreg55
4964B		  * %zero<def> = ADDI %zero, 0
4964B		  * %zero<def> = ADDI %zero, 0
4964B		  * JAL <BB#14>
4964B		  * %zero<def> = ADDI %zero, 0
4964B		  * %zero<def> = ADDI %zero, 0
5084B		%vreg228<def> = LUI 1; GR32Bit:%vreg228
5084B		  * %vreg233<def> = DREADPM %vreg228<kill>, 0; GR32Bit:%vreg233,%vreg228
5084B		  * BEQ <BB#15>, %vreg233<kill>, %zero; GR32Bit:%vreg233
5084B		  * %zero<def> = ADDI %zero, 0
5084B		  * %zero<def> = ADDI %zero, 0
5084B		  * JAL <BB#14>
5084B		  * %zero<def> = ADDI %zero, 0
5084B		  * %zero<def> = ADDI %zero, 0
5164B		%vreg230<def> = LUI 2; GR32Bit:%vreg230
5164B		  * %vreg234<def> = DREADPM %vreg230<kill>, 0; GR32Bit:%vreg234,%vreg230
5164B		  * BEQ <BB#15>, %vreg234<kill>, %zero; GR32Bit:%vreg234
5164B		  * %zero<def> = ADDI %zero, 0
5164B		  * %zero<def> = ADDI %zero, 0
5164B		  * JAL <BB#14>
5164B		  * %zero<def> = ADDI %zero, 0
5164B		  * %zero<def> = ADDI %zero, 0
5244B		%vreg232<def> = LUI 3; GR32Bit:%vreg232
5244B		  * %vreg235<def> = DREADPM %vreg232<kill>, 0; GR32Bit:%vreg235,%vreg232
5244B		  * BEQ <BB#15>, %vreg235<kill>, %zero; GR32Bit:%vreg235
5244B		  * %zero<def> = ADDI %zero, 0
5244B		  * %zero<def> = ADDI %zero, 0
5244B		  * JAL <BB#14>
5244B		  * %zero<def> = ADDI %zero, 0
5244B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#14(20) BB#15(12)
> %t0<def> = ADDI %t5, <fi#1>
> %t0<def> = LW %t0<kill>, 0; mem:LD4[%2]
> %t0<def> = LW %t0<kill>, 28; mem:LD4[%44]
> %t1<def> = LUI 1
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 2
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 3
> WRITEPM %t1<kill>, %t0, 0
> BEQ <BB#15>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#14>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 1
> %t0<def> = DREADPM %t0<kill>, 0
> BEQ <BB#15>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#14>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 2
> %t0<def> = DREADPM %t0<kill>, 0
> BEQ <BB#15>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#14>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 3
> %t0<def> = DREADPM %t0<kill>, 0
> BEQ <BB#15>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#14>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
5460B	BB#14: derived from LLVM BB %AssignFunction3.if.then29
	    Predecessors according to CFG: BB#13
4876B		%vreg57<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg57
4876B		  * SRLI %vreg57, %vreg57, 12; GR32Bit:%vreg57
4876B		  * %vreg56<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg56
4876B		  * %vreg58<def> = ADD %vreg57<kill>, %vreg56<kill>; GR32Bit:%vreg58,%vreg57,%vreg56
4876B		  * %vreg59<def> = LW %vreg58, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg59,%vreg58
4876B		  * %vreg60<def> = ORI %vreg59<kill>, 128; GR32Bit:%vreg60,%vreg59
4876B		  * SW %vreg60<kill>, %vreg58<kill>, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg60,%vreg58
5476B		%zero<def> = ADDI %zero, 0
5484B		%zero<def> = ADDI %zero, 0
5492B		%zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#15
> %t0<def> = LUI <MCSym="%lo("ga#0")">
> SRLI %t0, %t0, 12
> %t1<def> = LUI <ga:@eicas_discretes>[TF=2]
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = LW %t0, 0; mem:LD4[@eicas_discretes]
> %t1<def> = ORI %t1<kill>, 128
> SW %t1<kill>, %t0<kill>, 0; mem:ST4[@eicas_discretes]
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
5548B	BB#15: derived from LLVM BB %AssignFunction3.if.end31
	    Predecessors according to CFG: BB#13 BB#14
5556B		%vreg61<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg61
5556B		  * %vreg62<def> = LW %vreg61<kill>, 0; mem:LD4[%2] GR32Bit:%vreg62,%vreg61
5556B		  * %vreg63<def> = LW %vreg62<kill>, 32; mem:LD4[%50] GR32Bit:%vreg63,%vreg62
5556B		  * %vreg236<def> = LUI 1; GR32Bit:%vreg236
5556B		  * WRITEPM %vreg236<kill>, %vreg63, 0; GR32Bit:%vreg236,%vreg63
5556B		  * %vreg238<def> = LUI 2; GR32Bit:%vreg238
5556B		  * WRITEPM %vreg238<kill>, %vreg63, 0; GR32Bit:%vreg238,%vreg63
5556B		  * %vreg240<def> = LUI 3; GR32Bit:%vreg240
5556B		  * WRITEPM %vreg240<kill>, %vreg63, 0; GR32Bit:%vreg240,%vreg63
5556B		  * BEQ <BB#17>, %vreg63<kill>, %zero; GR32Bit:%vreg63
5556B		  * %zero<def> = ADDI %zero, 0
5556B		  * %zero<def> = ADDI %zero, 0
5556B		  * JAL <BB#16>
5556B		  * %zero<def> = ADDI %zero, 0
5556B		  * %zero<def> = ADDI %zero, 0
5676B		%vreg237<def> = LUI 1; GR32Bit:%vreg237
5676B		  * %vreg242<def> = DREADPM %vreg237<kill>, 0; GR32Bit:%vreg242,%vreg237
5676B		  * BEQ <BB#17>, %vreg242<kill>, %zero; GR32Bit:%vreg242
5676B		  * %zero<def> = ADDI %zero, 0
5676B		  * %zero<def> = ADDI %zero, 0
5676B		  * JAL <BB#16>
5676B		  * %zero<def> = ADDI %zero, 0
5676B		  * %zero<def> = ADDI %zero, 0
5756B		%vreg239<def> = LUI 2; GR32Bit:%vreg239
5756B		  * %vreg243<def> = DREADPM %vreg239<kill>, 0; GR32Bit:%vreg243,%vreg239
5756B		  * BEQ <BB#17>, %vreg243<kill>, %zero; GR32Bit:%vreg243
5756B		  * %zero<def> = ADDI %zero, 0
5756B		  * %zero<def> = ADDI %zero, 0
5756B		  * JAL <BB#16>
5756B		  * %zero<def> = ADDI %zero, 0
5756B		  * %zero<def> = ADDI %zero, 0
5836B		%vreg241<def> = LUI 3; GR32Bit:%vreg241
5836B		  * %vreg244<def> = DREADPM %vreg241<kill>, 0; GR32Bit:%vreg244,%vreg241
5836B		  * BEQ <BB#17>, %vreg244<kill>, %zero; GR32Bit:%vreg244
5836B		  * %zero<def> = ADDI %zero, 0
5836B		  * %zero<def> = ADDI %zero, 0
5836B		  * JAL <BB#16>
5836B		  * %zero<def> = ADDI %zero, 0
5836B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#16(20) BB#17(12)
> %t0<def> = ADDI %t5, <fi#1>
> %t0<def> = LW %t0<kill>, 0; mem:LD4[%2]
> %t0<def> = LW %t0<kill>, 32; mem:LD4[%50]
> %t1<def> = LUI 1
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 2
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 3
> WRITEPM %t1<kill>, %t0, 0
> BEQ <BB#17>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#16>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 1
> %t0<def> = DREADPM %t0<kill>, 0
> BEQ <BB#17>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#16>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 2
> %t0<def> = DREADPM %t0<kill>, 0
> BEQ <BB#17>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#16>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 3
> %t0<def> = DREADPM %t0<kill>, 0
> BEQ <BB#17>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#16>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
6052B	BB#16: derived from LLVM BB %AssignFunction3.if.then34
	    Predecessors according to CFG: BB#15
5468B		%vreg65<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg65
5468B		  * SRLI %vreg65, %vreg65, 12; GR32Bit:%vreg65
5468B		  * %vreg64<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg64
5468B		  * %vreg66<def> = ADD %vreg65<kill>, %vreg64<kill>; GR32Bit:%vreg66,%vreg65,%vreg64
5468B		  * %vreg67<def> = LW %vreg66, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg67,%vreg66
5468B		  * %vreg68<def> = ORI %vreg67<kill>, 256; GR32Bit:%vreg68,%vreg67
5468B		  * SW %vreg68<kill>, %vreg66<kill>, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg68,%vreg66
6068B		%zero<def> = ADDI %zero, 0
6076B		%zero<def> = ADDI %zero, 0
6084B		%zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#17
> %t0<def> = LUI <MCSym="%lo("ga#0")">
> SRLI %t0, %t0, 12
> %t1<def> = LUI <ga:@eicas_discretes>[TF=2]
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = LW %t0, 0; mem:LD4[@eicas_discretes]
> %t1<def> = ORI %t1<kill>, 256
> SW %t1<kill>, %t0<kill>, 0; mem:ST4[@eicas_discretes]
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
6140B	BB#17: derived from LLVM BB %AssignFunction3.if.end36
	    Predecessors according to CFG: BB#15 BB#16
6148B		%vreg69<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg69
6148B		  * %vreg70<def> = LW %vreg69<kill>, 0; mem:LD4[%2] GR32Bit:%vreg70,%vreg69
6148B		  * %vreg71<def> = LW %vreg70<kill>, 36; mem:LD4[%56] GR32Bit:%vreg71,%vreg70
6148B		  * %vreg245<def> = LUI 1; GR32Bit:%vreg245
6148B		  * WRITEPM %vreg245<kill>, %vreg71, 0; GR32Bit:%vreg245,%vreg71
6148B		  * %vreg247<def> = LUI 2; GR32Bit:%vreg247
6148B		  * WRITEPM %vreg247<kill>, %vreg71, 0; GR32Bit:%vreg247,%vreg71
6148B		  * %vreg249<def> = LUI 3; GR32Bit:%vreg249
6148B		  * WRITEPM %vreg249<kill>, %vreg71, 0; GR32Bit:%vreg249,%vreg71
6148B		  * BEQ <BB#19>, %vreg71<kill>, %zero; GR32Bit:%vreg71
6148B		  * %zero<def> = ADDI %zero, 0
6148B		  * %zero<def> = ADDI %zero, 0
6148B		  * JAL <BB#18>
6148B		  * %zero<def> = ADDI %zero, 0
6148B		  * %zero<def> = ADDI %zero, 0
6268B		%vreg246<def> = LUI 1; GR32Bit:%vreg246
6268B		  * %vreg251<def> = DREADPM %vreg246<kill>, 0; GR32Bit:%vreg251,%vreg246
6268B		  * BEQ <BB#19>, %vreg251<kill>, %zero; GR32Bit:%vreg251
6268B		  * %zero<def> = ADDI %zero, 0
6268B		  * %zero<def> = ADDI %zero, 0
6268B		  * JAL <BB#18>
6268B		  * %zero<def> = ADDI %zero, 0
6268B		  * %zero<def> = ADDI %zero, 0
6348B		%vreg248<def> = LUI 2; GR32Bit:%vreg248
6348B		  * %vreg252<def> = DREADPM %vreg248<kill>, 0; GR32Bit:%vreg252,%vreg248
6348B		  * BEQ <BB#19>, %vreg252<kill>, %zero; GR32Bit:%vreg252
6348B		  * %zero<def> = ADDI %zero, 0
6348B		  * %zero<def> = ADDI %zero, 0
6348B		  * JAL <BB#18>
6348B		  * %zero<def> = ADDI %zero, 0
6348B		  * %zero<def> = ADDI %zero, 0
6428B		%vreg250<def> = LUI 3; GR32Bit:%vreg250
6428B		  * %vreg253<def> = DREADPM %vreg250<kill>, 0; GR32Bit:%vreg253,%vreg250
6428B		  * BEQ <BB#19>, %vreg253<kill>, %zero; GR32Bit:%vreg253
6428B		  * %zero<def> = ADDI %zero, 0
6428B		  * %zero<def> = ADDI %zero, 0
6428B		  * JAL <BB#18>
6428B		  * %zero<def> = ADDI %zero, 0
6428B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#18(20) BB#19(12)
> %t0<def> = ADDI %t5, <fi#1>
> %t0<def> = LW %t0<kill>, 0; mem:LD4[%2]
> %t0<def> = LW %t0<kill>, 36; mem:LD4[%56]
> %t1<def> = LUI 1
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 2
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 3
> WRITEPM %t1<kill>, %t0, 0
> BEQ <BB#19>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#18>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 1
> %t0<def> = DREADPM %t0<kill>, 0
> BEQ <BB#19>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#18>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 2
> %t0<def> = DREADPM %t0<kill>, 0
> BEQ <BB#19>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#18>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 3
> %t0<def> = DREADPM %t0<kill>, 0
> BEQ <BB#19>, %t0<kill>, %zero
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#18>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
6644B	BB#18: derived from LLVM BB %AssignFunction3.if.then39
	    Predecessors according to CFG: BB#17
6060B		%vreg73<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg73
6060B		  * SRLI %vreg73, %vreg73, 12; GR32Bit:%vreg73
6060B		  * %vreg72<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg72
6060B		  * %vreg74<def> = ADD %vreg73<kill>, %vreg72<kill>; GR32Bit:%vreg74,%vreg73,%vreg72
6060B		  * %vreg75<def> = LW %vreg74, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg75,%vreg74
6060B		  * %vreg76<def> = ORI %vreg75<kill>, 512; GR32Bit:%vreg76,%vreg75
6060B		  * SW %vreg76<kill>, %vreg74<kill>, 0; mem:ST4[@eicas_discretes] GR32Bit:%vreg76,%vreg74
6660B		%zero<def> = ADDI %zero, 0
6668B		%zero<def> = ADDI %zero, 0
6676B		%zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#19
> %t0<def> = LUI <MCSym="%lo("ga#0")">
> SRLI %t0, %t0, 12
> %t1<def> = LUI <ga:@eicas_discretes>[TF=2]
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = LW %t0, 0; mem:LD4[@eicas_discretes]
> %t1<def> = ORI %t1<kill>, 512
> SW %t1<kill>, %t0<kill>, 0; mem:ST4[@eicas_discretes]
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
6732B	BB#19: derived from LLVM BB %AssignFunction3.return
	    Predecessors according to CFG: BB#17 BB#18
6740B		%vreg81<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg81
6740B		  * %vreg77<def> = LUI <ga:@eicas_discretes>[TF=2]; GR32Bit:%vreg77
6740B		  * %vreg78<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg78
6740B		  * SRLI %vreg78, %vreg78, 12; GR32Bit:%vreg78
6740B		  * %vreg79<def> = ADD %vreg78<kill>, %vreg77<kill>; GR32Bit:%vreg79,%vreg78,%vreg77
6740B		  * %vreg80<def> = LW %vreg79<kill>, 0; mem:LD4[@eicas_discretes] GR32Bit:%vreg80,%vreg79
6740B		  * SW %vreg80<kill>, %vreg81<kill>, 0; mem:ST4[%1] GR32Bit:%vreg80,%vreg81
6740B		  * %vreg254<def> = ADDI %zero, 128; GR32Bit:%vreg254
6740B		  * %vreg255<def> = LW %t5, <fi#0>; GR32Bit:%vreg255
6740B		  * WRITECM %vreg254<kill>, %vreg255<kill>, 0; GR32Bit:%vreg254,%vreg255
6740B		  * FDELETE %t4, 0
6740B		  * END 0
6740B		  * %zero<def> = ADDI %zero, 0
6740B		  * %zero<def> = ADDI %zero, 0
6852B		END 0
6852B		  * %zero<def> = ADDI %zero, 0
6852B		  * %zero<def> = ADDI %zero, 0
6876B		END 0
6876B		  * %zero<def> = ADDI %zero, 0
6876B		  * %zero<def> = ADDI %zero, 0
6900B		END 0
6900B		  * %zero<def> = ADDI %zero, 0
6900B		  * %zero<def> = ADDI %zero, 0
> %t0<def> = ADDI %t5, <fi#0>
> %t1<def> = LUI <ga:@eicas_discretes>[TF=2]
> %t2<def> = LUI <MCSym="%lo("ga#0")">
> SRLI %t2, %t2, 12
> %t1<def> = ADD %t2<kill>, %t1<kill>
> %t1<def> = LW %t1<kill>, 0; mem:LD4[@eicas_discretes]
> SW %t1<kill>, %t0<kill>, 0; mem:ST4[%1]
> %t0<def> = ADDI %zero, 128
> %t1<def> = LW %t5, <fi#0>
> WRITECM %t0<kill>, %t1<kill>, 0
> FDELETE %t4, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
********** EMITTING LIVE DEBUG VARIABLES **********
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: AssignFunction3
current state of mf:# Machine code for function AssignFunction3: Post SSA
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %AssignFunction3.entry
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#768")">
	  * %t1<def> = LUI <MCSym="%lo("ga#768")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 12
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = ADDI %t5, <fi#-1>
	  * %t1<def> = ADDI %t5, <fi#1>
	  * SW %t0, %t1<kill>, 0; mem:ST4[%2]
	  * %t0<def> = LW %t0<kill>, 0; mem:LD4[%4](align=16)
	  * %t1<def> = LUI 1
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 2
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 3
	  * WRITEPM %t1<kill>, %t0, 0
	  * BEQ <BB#2>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#768")">
	  * %t1<def> = LUI <MCSym="%lo("ga#768")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 12
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = LUI 1
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BEQ <BB#2>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#768")">
	  * %t1<def> = LUI <MCSym="%lo("ga#768")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 12
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = LUI 2
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BEQ <BB#2>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#768")">
	  * %t1<def> = LUI <MCSym="%lo("ga#768")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 12
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = LUI 3
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BEQ <BB#2>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#1>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %AssignFunction3.if.then
    Predecessors according to CFG: BB#0
	%t0<def> = LUI <MCSym="%lo("ga#0")">
	  * SRLI %t0, %t0, 12
	  * %t1<def> = LUI <ga:@eicas_discretes>[TF=2]
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = LW %t0, 0; mem:LD4[@eicas_discretes]
	  * %t1<def> = ORI %t1<kill>, 1
	  * SW %t1<kill>, %t0<kill>, 0; mem:ST4[@eicas_discretes]
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %AssignFunction3.if.end
    Predecessors according to CFG: BB#0 BB#1
	%t0<def> = ADDI %t5, <fi#1>
	  * %t0<def> = LW %t0<kill>, 0; mem:LD4[%2]
	  * %t0<def> = LW %t0<kill>, 4; mem:LD4[%10]
	  * %t1<def> = LUI 1
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 2
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 3
	  * WRITEPM %t1<kill>, %t0, 0
	  * BEQ <BB#4>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#3>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 1
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BEQ <BB#4>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#3>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 2
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BEQ <BB#4>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#3>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 3
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BEQ <BB#4>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#3>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#3(20) BB#4(12)

BB#3: derived from LLVM BB %AssignFunction3.if.then3
    Predecessors according to CFG: BB#2
	%t0<def> = LUI <MCSym="%lo("ga#0")">
	  * SRLI %t0, %t0, 12
	  * %t1<def> = LUI <ga:@eicas_discretes>[TF=2]
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = LW %t0, 0; mem:LD4[@eicas_discretes]
	  * %t1<def> = ORI %t1<kill>, 2
	  * SW %t1<kill>, %t0<kill>, 0; mem:ST4[@eicas_discretes]
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#4

BB#4: derived from LLVM BB %AssignFunction3.if.end5
    Predecessors according to CFG: BB#2 BB#3
	%t0<def> = ADDI %zero, 250
	  * %t1<def> = ADDI %t5, <fi#1>
	  * %t1<def> = LW %t1<kill>, 0; mem:LD4[%2]
	  * %t1<def> = LW %t1<kill>, 8; mem:LD4[%16]
	  * %t2<def> = LUI 1
	  * WRITEPM %t2, %t1, 0
	  * %fp<def> = LUI 2
	  * WRITEPM %fp, %t1, 0
	  * %a0<def> = LUI 3
	  * WRITEPM %a0, %t1, 0
	  * WRITEPM %t2<kill>, %t0, 4
	  * WRITEPM %fp<kill>, %t0, 4
	  * WRITEPM %a0<kill>, %t0, 4
	  * BGT <BB#6>, %t1<kill>, %t0<kill>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#5>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 1
	  * %t1<def> = DREADPM %t0, 0
	  * %t0<def> = DREADPM %t0<kill>, 4
	  * BGT <BB#6>, %t1<kill>, %t0<kill>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#5>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 2
	  * %t1<def> = DREADPM %t0, 0
	  * %t0<def> = DREADPM %t0<kill>, 4
	  * BGT <BB#6>, %t1<kill>, %t0<kill>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#5>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t1<def> = LUI 3
	  * %t0<def> = DREADPM %t1, 0
	  * %t1<def> = DREADPM %t1<kill>, 4
	  * BGT <BB#6>, %t0<kill>, %t1<kill>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#5>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#6(16) BB#5(16)

BB#5: derived from LLVM BB %AssignFunction3.lor.lhs.false
    Predecessors according to CFG: BB#4
	%t0<def> = ADDI %zero, 251
	  * %t1<def> = ADDI %t5, <fi#1>
	  * %t1<def> = LW %t1<kill>, 0; mem:LD4[%2]
	  * %t1<def> = LW %t1<kill>, 12; mem:LD4[%20]
	  * %t2<def> = LUI 1
	  * WRITEPM %t2, %t1, 0
	  * %fp<def> = LUI 2
	  * WRITEPM %fp, %t1, 0
	  * %a0<def> = LUI 3
	  * WRITEPM %a0, %t1, 0
	  * WRITEPM %t2<kill>, %t0, 4
	  * WRITEPM %fp<kill>, %t0, 4
	  * WRITEPM %a0<kill>, %t0, 4
	  * BLT <BB#7>, %t1<kill>, %t0<kill>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#6>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 1
	  * %t1<def> = DREADPM %t0, 0
	  * %t0<def> = DREADPM %t0<kill>, 4
	  * BLT <BB#7>, %t1<kill>, %t0<kill>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#6>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 2
	  * %t1<def> = DREADPM %t0, 0
	  * %t0<def> = DREADPM %t0<kill>, 4
	  * BLT <BB#7>, %t1<kill>, %t0<kill>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#6>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t1<def> = LUI 3
	  * %t0<def> = DREADPM %t1, 0
	  * %t1<def> = DREADPM %t1<kill>, 4
	  * BLT <BB#7>, %t0<kill>, %t1<kill>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#6>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#6(16) BB#7(16)

BB#6: derived from LLVM BB %AssignFunction3.if.then9
    Predecessors according to CFG: BB#4 BB#5
	%t0<def> = LUI <MCSym="%lo("ga#0")">
	  * SRLI %t0, %t0, 12
	  * %t1<def> = LUI <ga:@eicas_discretes>[TF=2]
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = LW %t0, 0; mem:LD4[@eicas_discretes]
	  * %t1<def> = ORI %t1<kill>, 4
	  * SW %t1<kill>, %t0<kill>, 0; mem:ST4[@eicas_discretes]
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#7

BB#7: derived from LLVM BB %AssignFunction3.if.end11
    Predecessors according to CFG: BB#5 BB#6
	%t0<def> = ADDI %t5, <fi#1>
	  * %t0<def> = LW %t0<kill>, 0; mem:LD4[%2]
	  * %t0<def> = LW %t0<kill>, 16; mem:LD4[%26]
	  * %t1<def> = LUI 1
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 2
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 3
	  * WRITEPM %t1<kill>, %t0, 0
	  * BEQ <BB#9>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#8>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 1
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BEQ <BB#9>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#8>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 2
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BEQ <BB#9>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#8>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 3
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BEQ <BB#9>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#8>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#8(20) BB#9(12)

BB#8: derived from LLVM BB %AssignFunction3.if.then14
    Predecessors according to CFG: BB#7
	%t0<def> = LUI <MCSym="%lo("ga#0")">
	  * SRLI %t0, %t0, 12
	  * %t1<def> = LUI <ga:@eicas_discretes>[TF=2]
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = LW %t0, 0; mem:LD4[@eicas_discretes]
	  * %t1<def> = ORI %t1<kill>, 16
	  * SW %t1<kill>, %t0<kill>, 0; mem:ST4[@eicas_discretes]
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#9

BB#9: derived from LLVM BB %AssignFunction3.if.end16
    Predecessors according to CFG: BB#7 BB#8
	%t0<def> = ADDI %t5, <fi#1>
	  * %t0<def> = LW %t0<kill>, 0; mem:LD4[%2]
	  * %t0<def> = LW %t0<kill>, 20; mem:LD4[%32]
	  * %t1<def> = LUI 1
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 2
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 3
	  * WRITEPM %t1<kill>, %t0, 0
	  * BEQ <BB#11>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#10>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 1
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BEQ <BB#11>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#10>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 2
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BEQ <BB#11>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#10>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 3
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BEQ <BB#11>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#10>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#10(20) BB#11(12)

BB#10: derived from LLVM BB %AssignFunction3.if.then19
    Predecessors according to CFG: BB#9
	%t0<def> = LUI <MCSym="%lo("ga#0")">
	  * SRLI %t0, %t0, 12
	  * %t1<def> = LUI <ga:@eicas_discretes>[TF=2]
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = LW %t0, 0; mem:LD4[@eicas_discretes]
	  * %t1<def> = ORI %t1<kill>, 32
	  * SW %t1<kill>, %t0<kill>, 0; mem:ST4[@eicas_discretes]
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#11

BB#11: derived from LLVM BB %AssignFunction3.if.end21
    Predecessors according to CFG: BB#9 BB#10
	%t0<def> = ADDI %t5, <fi#1>
	  * %t0<def> = LW %t0<kill>, 0; mem:LD4[%2]
	  * %t0<def> = LW %t0<kill>, 24; mem:LD4[%38]
	  * %t1<def> = LUI 1
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 2
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 3
	  * WRITEPM %t1<kill>, %t0, 0
	  * BEQ <BB#13>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#12>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 1
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BEQ <BB#13>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#12>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 2
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BEQ <BB#13>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#12>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 3
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BEQ <BB#13>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#12>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#12(20) BB#13(12)

BB#12: derived from LLVM BB %AssignFunction3.if.then24
    Predecessors according to CFG: BB#11
	%t0<def> = LUI <MCSym="%lo("ga#0")">
	  * SRLI %t0, %t0, 12
	  * %t1<def> = LUI <ga:@eicas_discretes>[TF=2]
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = LW %t0, 0; mem:LD4[@eicas_discretes]
	  * %t1<def> = ORI %t1<kill>, 64
	  * SW %t1<kill>, %t0<kill>, 0; mem:ST4[@eicas_discretes]
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#13

BB#13: derived from LLVM BB %AssignFunction3.if.end26
    Predecessors according to CFG: BB#11 BB#12
	%t0<def> = ADDI %t5, <fi#1>
	  * %t0<def> = LW %t0<kill>, 0; mem:LD4[%2]
	  * %t0<def> = LW %t0<kill>, 28; mem:LD4[%44]
	  * %t1<def> = LUI 1
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 2
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 3
	  * WRITEPM %t1<kill>, %t0, 0
	  * BEQ <BB#15>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#14>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 1
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BEQ <BB#15>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#14>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 2
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BEQ <BB#15>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#14>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 3
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BEQ <BB#15>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#14>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#14(20) BB#15(12)

BB#14: derived from LLVM BB %AssignFunction3.if.then29
    Predecessors according to CFG: BB#13
	%t0<def> = LUI <MCSym="%lo("ga#0")">
	  * SRLI %t0, %t0, 12
	  * %t1<def> = LUI <ga:@eicas_discretes>[TF=2]
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = LW %t0, 0; mem:LD4[@eicas_discretes]
	  * %t1<def> = ORI %t1<kill>, 128
	  * SW %t1<kill>, %t0<kill>, 0; mem:ST4[@eicas_discretes]
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#15

BB#15: derived from LLVM BB %AssignFunction3.if.end31
    Predecessors according to CFG: BB#13 BB#14
	%t0<def> = ADDI %t5, <fi#1>
	  * %t0<def> = LW %t0<kill>, 0; mem:LD4[%2]
	  * %t0<def> = LW %t0<kill>, 32; mem:LD4[%50]
	  * %t1<def> = LUI 1
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 2
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 3
	  * WRITEPM %t1<kill>, %t0, 0
	  * BEQ <BB#17>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#16>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 1
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BEQ <BB#17>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#16>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 2
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BEQ <BB#17>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#16>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 3
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BEQ <BB#17>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#16>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#16(20) BB#17(12)

BB#16: derived from LLVM BB %AssignFunction3.if.then34
    Predecessors according to CFG: BB#15
	%t0<def> = LUI <MCSym="%lo("ga#0")">
	  * SRLI %t0, %t0, 12
	  * %t1<def> = LUI <ga:@eicas_discretes>[TF=2]
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = LW %t0, 0; mem:LD4[@eicas_discretes]
	  * %t1<def> = ORI %t1<kill>, 256
	  * SW %t1<kill>, %t0<kill>, 0; mem:ST4[@eicas_discretes]
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#17

BB#17: derived from LLVM BB %AssignFunction3.if.end36
    Predecessors according to CFG: BB#15 BB#16
	%t0<def> = ADDI %t5, <fi#1>
	  * %t0<def> = LW %t0<kill>, 0; mem:LD4[%2]
	  * %t0<def> = LW %t0<kill>, 36; mem:LD4[%56]
	  * %t1<def> = LUI 1
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 2
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 3
	  * WRITEPM %t1<kill>, %t0, 0
	  * BEQ <BB#19>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#18>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 1
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BEQ <BB#19>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#18>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 2
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BEQ <BB#19>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#18>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 3
	  * %t0<def> = DREADPM %t0<kill>, 0
	  * BEQ <BB#19>, %t0<kill>, %zero
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#18>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#18(20) BB#19(12)

BB#18: derived from LLVM BB %AssignFunction3.if.then39
    Predecessors according to CFG: BB#17
	%t0<def> = LUI <MCSym="%lo("ga#0")">
	  * SRLI %t0, %t0, 12
	  * %t1<def> = LUI <ga:@eicas_discretes>[TF=2]
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = LW %t0, 0; mem:LD4[@eicas_discretes]
	  * %t1<def> = ORI %t1<kill>, 512
	  * SW %t1<kill>, %t0<kill>, 0; mem:ST4[@eicas_discretes]
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#19

BB#19: derived from LLVM BB %AssignFunction3.return
    Predecessors according to CFG: BB#17 BB#18
	%t0<def> = ADDI %t5, <fi#0>
	  * %t1<def> = LUI <ga:@eicas_discretes>[TF=2]
	  * %t2<def> = LUI <MCSym="%lo("ga#0")">
	  * SRLI %t2, %t2, 12
	  * %t1<def> = ADD %t2<kill>, %t1<kill>
	  * %t1<def> = LW %t1<kill>, 0; mem:LD4[@eicas_discretes]
	  * SW %t1<kill>, %t0<kill>, 0; mem:ST4[%1]
	  * %t0<def> = ADDI %zero, 128
	  * %t1<def> = LW %t5, <fi#0>
	  * WRITECM %t0<kill>, %t1<kill>, 0
	  * FDELETE %t4, 0
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0

# End machine code for function AssignFunction3.

lowering frame index for func AssignFunction3:-1 TO VAL:8
lowering frame index for func AssignFunction3:1 TO VAL:4
lowering frame index for func AssignFunction3:1 TO VAL:4
lowering frame index for func AssignFunction3:1 TO VAL:4
lowering frame index for func AssignFunction3:1 TO VAL:4
lowering frame index for func AssignFunction3:1 TO VAL:4
lowering frame index for func AssignFunction3:1 TO VAL:4
lowering frame index for func AssignFunction3:1 TO VAL:4
lowering frame index for func AssignFunction3:1 TO VAL:4
lowering frame index for func AssignFunction3:1 TO VAL:4
lowering frame index for func AssignFunction3:1 TO VAL:4
lowering frame index for func AssignFunction3:0 TO VAL:0
lowering frame index for func AssignFunction3:0 TO VAL:0
