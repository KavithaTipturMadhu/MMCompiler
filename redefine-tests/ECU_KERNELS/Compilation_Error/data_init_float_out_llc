Args: /home/arka/Workspace/work/Git_Compiler_Repo/redefine-tests/ECU_KERNELS/../../..//MM_Compiler_latest/build/Release+Asserts/bin/llc --mattr=+has4ce --mtriple redefine -debug ./Compilation_Error/data_init_float_HyOpPass.ll -o ./Compilation_Error/data_init_float.as 

Features:+has4ce
CPU:REDEFINE

CGP: Found      local addrmode: [Base:@redefine_in_placeholder]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:%1]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%0]
Computing probabilities for redefine_start1.return
Computing probabilities for redefine_start1.for.body
Computing probabilities for redefine_start1.for.cond
Computing probabilities for redefine_start1.entry
new hop:redefine_start1
new hyop#0:redefine_start1
new hop:redefine_start2
new hyop#1:redefine_start2
new hop:redefine_start3
new hyop#2:redefine_start3
new hop:data_init4
new hyop#3:data_init4
problems setting inputs?
skipping abort
source hop:redefine_start1
synced md node:!{metadata <badref>}

Added sync edge between redefine_start1 and redefine_start3
predicated md node:!{metadata <badref>, metadata !"1"}

number of operands in predicate md node:2
predicate value:1
md node on instruction:  %1 = alloca i1, align 4, !Controls !10
Added control edge between redefine_start1 and redefine_start2
predicate :1
predicated md node:!{metadata <badref>, metadata !"1"}

number of operands in predicate md node:2
predicate value:1
md node on instruction:  %1 = alloca i1, align 4, !Controls !10
Added control edge between redefine_start1 and data_init4
predicate :1
frame size for hop redefine_start1:16
source hop:redefine_start2
synced md node:!{metadata <badref>}

Added sync edge between redefine_start2 and redefine_start3
source hop:redefine_start3
source hop:data_init4
max mem frame size:16
digraph{
redefine_start1[label="Name:redefine_start1,Dom:NULL, PostDom:NULL,Map:0:0, Context frame:0,SyncCount:1"];
redefine_start1->redefine_start3[label=sync];
redefine_start1->redefine_start2[label=control10];
redefine_start1->data_init4[label=control10];
redefine_start1->redefine_start2[label=localref];
redefine_start1->data_init4[label=scalar0];
redefine_start2[label="Name:redefine_start2,Dom:NULL, PostDom:NULL,Map:0:0, Context frame:0,SyncCount:0"];
redefine_start2->redefine_start3[label=sync];
redefine_start3[label="Name:redefine_start3,Dom:NULL, PostDom:NULL,Map:0:0, Context frame:0,SyncCount:2"];
data_init4[label="Name:data_init4,Dom:NULL, PostDom:NULL,Map:0:0, Context frame:0,SyncCount:0"];
data_init4->redefine_start2[label=localref];
}
Setting domf of node redefine_start1 to size 0
Setting domf of node redefine_start2 to size 1
Setting domf of node redefine_start3 to size 0
Setting domf of node data_init4 to size 1
idom of node:redefine_start1
idom of node:redefine_start2
idom of node:data_init4

------
forwarding address to redefine_start1:

------
forwarding address to redefine_start2:redefine_start3,
edge added between redefine_start1 and redefine_start2 containing redefine_start3

------
forwarding address to redefine_start3:added for deletion:redefine_start2
added for deletion:data_init4
redefine_start2,data_init4,
edge added between redefine_start1 and redefine_start3 containing redefine_start2
edge added between redefine_start1 and redefine_start3 containing data_init4

------
forwarding address to data_init4:redefine_start2,
edge added between redefine_start1 and data_init4 containing redefine_start2

Dominant sequence computed:
redefine_start1->data_init4->redefine_start2->redefine_start3->

Dominant sequence computed:
redefine_start1->data_init4->redefine_start2->redefine_start3->

Dominant sequence computed:
redefine_start1->data_init4->redefine_start2->redefine_start3->
before merging, num of clusters:1
each cluster:
redefine_start1,data_init4,redefine_start2,redefine_start3,
Minimizing ordering edges
setting context frame id of redefine_start1 to 0
setting context frame id of data_init4 to 1
setting context frame id of redefine_start2 to 2
setting context frame id of redefine_start3 to 3
Computing whether there is a control/scalar path between a pair of HyperOps communicating via memory and adding sync edges if there is no control path
adding sync via context frame from data_init4 to redefine_start2
deleting function:redefine_start2
If the producer and consumer are mapped to different CRs, treat them as localrefs only instead of scalars to avoid reconciles
problems setting inputs?
generated cfg:Setting domf of node redefine_start1 to size 0
Setting domf of node redefine_start21 to size 1
Setting domf of node redefine_start3 to size 0
Setting domf of node data_init4 to size 1
idom of node:redefine_start1
idom of node:redefine_start21
idom of node:data_init4
Delivering reaching predicate with decrement count in case operands to be delivered are on the non taken path
finding the last predicate input to redefine_start21
computed predicate length 1
Reaching Predicate:redefine_start1 with value :  %1 = alloca i1, align 4, !Controls !10
considering parent of the HyperOp redefine_start1
considering parent of the HyperOp redefine_start1
considering parent of the HyperOp data_init4
considering parent of the HyperOp redefine_start1
considering parent of the HyperOp data_init4
decrement value of writecmp 1 for HyperOp redefine_start21
setting predicate edge decrement count to 1 and the edge is between redefine_start1 and redefine_start21
finding the last predicate input to data_init4
computed predicate length 1
Reaching Predicate:redefine_start1 with value :  %1 = alloca i1, align 4, !Controls !10
considering parent of the HyperOp redefine_start1
considering parent of the HyperOp redefine_start1
considering parent of the HyperOp redefine_start1
decrement value of writecmp 0 for HyperOp data_init4
before decrementing sync, graph:Decrementing sync count for nodes with sync edges coming from mutually exclusive paths
updating node with incoming sync edges redefine_start1
updating node with incoming sync edges redefine_start3
checking for mutual exclusion of redefine_start1 and redefine_start21
checking for mutual exclusion of redefine_start1 and redefine_start21
they are not exclusive!
after minimizing cluster and converting scalar edges to local refs, graph:digraph{
redefine_start1[label="Name:redefine_start1,Dom:NULL, PostDom:redefine_start3,Map:0:0, Context frame:0,SyncCount:1"];
redefine_start1->redefine_start3[label=frameAddress0redefine_start21];
redefine_start1->redefine_start3[label=frameAddress1data_init4];
redefine_start1->redefine_start3[label=sync];
redefine_start1->redefine_start21[label=control11];
redefine_start1->data_init4[label=control10];
redefine_start1->redefine_start21[label=localref];
redefine_start1->data_init4[label=scalar0];
redefine_start1->redefine_start21[label=frameAddress0redefine_start3];
redefine_start1->data_init4[label=frameAddress1redefine_start21];
redefine_start21[label="Name:redefine_start21,Dom:redefine_start1, PostDom:redefine_start3,Map:0:0, Context frame:2,SyncCount:0"];
redefine_start21->redefine_start3[label=sync];
redefine_start3[label="Name:redefine_start3,Dom:redefine_start1, PostDom:NULL,Map:0:0, Context frame:3,SyncCount:2"];
data_init4[label="Name:data_init4,Dom:redefine_start1, PostDom:redefine_start21,Map:0:0, Context frame:1,SyncCount:0"];
data_init4->redefine_start21[label=localref];
data_init4->redefine_start21[label=scalar0];
}
num of clusters:1
num constraints:0
setting target resource 0
setting target resource 0
setting target resource 0
setting target resource 0
digraph{
redefine_start1[label="Name:redefine_start1,Dom:NULL, PostDom:redefine_start3,Map:0:0, Context frame:0,SyncCount:1"];
redefine_start1->redefine_start3[label=frameAddress0redefine_start21];
redefine_start1->redefine_start3[label=frameAddress1data_init4];
redefine_start1->redefine_start3[label=sync];
redefine_start1->redefine_start21[label=control11];
redefine_start1->data_init4[label=control10];
redefine_start1->redefine_start21[label=localref];
redefine_start1->data_init4[label=scalar0];
redefine_start1->redefine_start21[label=frameAddress0redefine_start3];
redefine_start1->data_init4[label=frameAddress1redefine_start21];
redefine_start21[label="Name:redefine_start21,Dom:redefine_start1, PostDom:redefine_start3,Map:0:0, Context frame:2,SyncCount:0"];
redefine_start21->redefine_start3[label=sync];
redefine_start3[label="Name:redefine_start3,Dom:redefine_start1, PostDom:NULL,Map:0:0, Context frame:3,SyncCount:2"];
data_init4[label="Name:data_init4,Dom:redefine_start1, PostDom:redefine_start21,Map:0:0, Context frame:1,SyncCount:0"];
data_init4->redefine_start21[label=localref];
data_init4->redefine_start21[label=scalar0];
}



=== redefine_start1
visiting load instruction   %4 = load i32* @redefine_in_placeholder, align 4
I was here to add @redefine_in_placeholder = common global i32 0, align 4
with I type i32and sd value :0x27f0c40: i32 = GlobalAddress<i32* @redefine_in_placeholder> 0
new load?0x27f0f40: i32,ch = load 0x27d1e18, 0x27f0c40, 0x27f0e40<LD4[@redefine_in_placeholder]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x27f0d40: i32 = Constant<0>

    0x27d1e18: ch = EntryToken

    0x27f0c40: i32 = GlobalAddress<i32* @redefine_in_placeholder> 0

    0x27f0e40: i32 = undef

  0x27f0f40: i32,ch = load 0x27d1e18, 0x27f0c40, 0x27f0e40<LD4[@redefine_in_placeholder]>

  0x27d1e18: ch = EntryToken


store visit is after?  store i32 %4, i32* %3, align 4
I was here to add   %3 = alloca i32, align 4, !ConsumedBy !15
whats in dag after store?SelectionDAG has 7 nodes:
  0x27f0d40: i32 = Constant<0>

  0x27f0e40: i32 = undef [ORD=1]

    0x27d1e18: ch = EntryToken [ORD=1]

    0x27f0c40: i32 = GlobalAddress<i32* @redefine_in_placeholder> 0 [ORD=1]

    0x27f0e40: <multiple use>
  0x27f0f40: i32,ch = load 0x27d1e18, 0x27f0c40, 0x27f0e40<LD4[@redefine_in_placeholder]> [ORD=1]

    0x27f0f40: <multiple use>
    0x27f0f40: <multiple use>
    0x27f1040: i32 = FrameIndex<3> [ORD=2]

    0x27f0e40: <multiple use>
  0x27f1140: ch = store 0x27f0f40:1, 0x27f0f40, 0x27f1040, 0x27f0e40<ST4[%3]> [ORD=2]


store visit is after?  store i32 0, i32* %2, align 4
I was here to add i32 0
I was here to add   %2 = alloca i32, align 4, !ConsumedBy !13
whats in dag after store?SelectionDAG has 9 nodes:
  0x27f0e40: i32 = undef [ORD=1]

    0x27d1e18: ch = EntryToken [ORD=1]

    0x27f0c40: i32 = GlobalAddress<i32* @redefine_in_placeholder> 0 [ORD=1]

    0x27f0e40: <multiple use>
  0x27f0f40: i32,ch = load 0x27d1e18, 0x27f0c40, 0x27f0e40<LD4[@redefine_in_placeholder]> [ORD=1]

      0x27f0f40: <multiple use>
      0x27f0f40: <multiple use>
      0x27f1040: i32 = FrameIndex<3> [ORD=2]

      0x27f0e40: <multiple use>
    0x27f1140: ch = store 0x27f0f40:1, 0x27f0f40, 0x27f1040, 0x27f0e40<ST4[%3]> [ORD=2]

    0x27f0d40: i32 = Constant<0> [ORD=3]

    0x27f1240: i32 = FrameIndex<2> [ORD=3]

    0x27f0e40: <multiple use>
  0x27f1340: ch = store 0x27f1140, 0x27f0d40, 0x27f1240, 0x27f0e40<ST4[%2]> [ORD=3]


Initial selection DAG: BB#0 'redefine_start1:redefine_start1.entry'
SelectionDAG has 9 nodes:
  0x27f0e40: i32 = undef [ORD=1]

    0x27d1e18: ch = EntryToken [ORD=1]

    0x27f0c40: i32 = GlobalAddress<i32* @redefine_in_placeholder> 0 [ORD=1]

    0x27f0e40: <multiple use>
  0x27f0f40: i32,ch = load 0x27d1e18, 0x27f0c40, 0x27f0e40<LD4[@redefine_in_placeholder]> [ORD=1]

      0x27f0f40: <multiple use>
      0x27f0f40: <multiple use>
      0x27f1040: i32 = FrameIndex<3> [ORD=2]

      0x27f0e40: <multiple use>
    0x27f1140: ch = store 0x27f0f40:1, 0x27f0f40, 0x27f1040, 0x27f0e40<ST4[%3]> [ORD=2]

    0x27f0d40: i32 = Constant<0> [ORD=3]

    0x27f1240: i32 = FrameIndex<2> [ORD=3]

    0x27f0e40: <multiple use>
  0x27f1340: ch = store 0x27f1140, 0x27f0d40, 0x27f1240, 0x27f0e40<ST4[%2]> [ORD=3]


Optimized lowered selection DAG: BB#0 'redefine_start1:redefine_start1.entry'
SelectionDAG has 9 nodes:
  0x27f0e40: i32 = undef [ORD=1]

    0x27d1e18: ch = EntryToken [ORD=1]

    0x27f0c40: i32 = GlobalAddress<i32* @redefine_in_placeholder> 0 [ORD=1]

    0x27f0e40: <multiple use>
  0x27f0f40: i32,ch = load 0x27d1e18, 0x27f0c40, 0x27f0e40<LD4[@redefine_in_placeholder]> [ORD=1]

      0x27f0f40: <multiple use>
      0x27f0f40: <multiple use>
      0x27f1040: i32 = FrameIndex<3> [ORD=2]

      0x27f0e40: <multiple use>
    0x27f1140: ch = store 0x27f0f40:1, 0x27f0f40, 0x27f1040, 0x27f0e40<ST4[%3]> [ORD=2]

    0x27f0d40: i32 = Constant<0> [ORD=3]

    0x27f1240: i32 = FrameIndex<2> [ORD=3]

    0x27f0e40: <multiple use>
  0x27f1340: ch = store 0x27f1140, 0x27f0d40, 0x27f1240, 0x27f0e40<ST4[%2]> [ORD=3]


Legally typed node: 0x27f1240: i32 = FrameIndex<2> [ORD=3] [ID=0]

Legally typed node: 0x27f1040: i32 = FrameIndex<3> [ORD=2] [ID=0]

Legally typed node: 0x27f0e40: i32 = undef [ORD=1] [ID=0]

Legally typed node: 0x27f0d40: i32 = Constant<0> [ORD=3] [ID=0]

Legally typed node: 0x27f0c40: i32 = GlobalAddress<i32* @redefine_in_placeholder> 0 [ORD=1] [ID=0]

Legally typed node: 0x27d1e18: ch = EntryToken [ORD=1] [ID=0]

Legally typed node: 0x27f0f40: i32,ch = load 0x27d1e18, 0x27f0c40, 0x27f0e40<LD4[@redefine_in_placeholder]> [ORD=1] [ID=0]

Legally typed node: 0x27f1140: ch = store 0x27f0f40:1, 0x27f0f40, 0x27f1040, 0x27f0e40<ST4[%3]> [ORD=2] [ID=0]

Legally typed node: 0x27f1340: ch = store 0x27f1140, 0x27f0d40, 0x27f1240, 0x27f0e40<ST4[%2]> [ORD=3] [ID=0]

Legally typed node: 0x7fff149b9a10: ch = handlenode 0x27f1340 [ID=0]

Type-legalized selection DAG: BB#0 'redefine_start1:redefine_start1.entry'
SelectionDAG has 9 nodes:
  0x27f0e40: i32 = undef [ORD=1] [ID=-3]

    0x27d1e18: ch = EntryToken [ORD=1] [ID=-3]

    0x27f0c40: i32 = GlobalAddress<i32* @redefine_in_placeholder> 0 [ORD=1] [ID=-3]

    0x27f0e40: <multiple use>
  0x27f0f40: i32,ch = load 0x27d1e18, 0x27f0c40, 0x27f0e40<LD4[@redefine_in_placeholder]> [ORD=1] [ID=-3]

      0x27f0f40: <multiple use>
      0x27f0f40: <multiple use>
      0x27f1040: i32 = FrameIndex<3> [ORD=2] [ID=-3]

      0x27f0e40: <multiple use>
    0x27f1140: ch = store 0x27f0f40:1, 0x27f0f40, 0x27f1040, 0x27f0e40<ST4[%3]> [ORD=2] [ID=-3]

    0x27f0d40: i32 = Constant<0> [ORD=3] [ID=-3]

    0x27f1240: i32 = FrameIndex<2> [ORD=3] [ID=-3]

    0x27f0e40: <multiple use>
  0x27f1340: ch = store 0x27f1140, 0x27f0d40, 0x27f1240, 0x27f0e40<ST4[%2]> [ORD=3] [ID=-3]


Legalized selection DAG: BB#0 'redefine_start1:redefine_start1.entry'
SelectionDAG has 13 nodes:
  0x27f0e40: i32 = undef [ORD=1] [ID=3]

    0x27d1e18: ch = EntryToken [ORD=1] [ID=0]

        0x27f1440: i32 = TargetGlobalAddress<i32* @redefine_in_placeholder> 0 [TF=2]

      0x27f1640: i32 = REDEFINEISD::Hi 0x27f1440

        0x27f1540: i32 = TargetGlobalAddress<i32* @redefine_in_placeholder> 0 [TF=3]

      0x27f1740: i32 = REDEFINEISD::Lo 0x27f1540

    0x27f1840: i32 = add 0x27f1640, 0x27f1740

    0x27f0e40: <multiple use>
  0x27f0f40: i32,ch = load 0x27d1e18, 0x27f1840, 0x27f0e40<LD4[@redefine_in_placeholder]> [ORD=1] [ID=6]

      0x27f0f40: <multiple use>
      0x27f0f40: <multiple use>
      0x27f1040: i32 = FrameIndex<3> [ORD=2] [ID=4]

      0x27f0e40: <multiple use>
    0x27f1140: ch = store 0x27f0f40:1, 0x27f0f40, 0x27f1040, 0x27f0e40<ST4[%3]> [ORD=2] [ID=7]

    0x27f0d40: i32 = Constant<0> [ORD=3] [ID=2]

    0x27f1240: i32 = FrameIndex<2> [ORD=3] [ID=5]

    0x27f0e40: <multiple use>
  0x27f1340: ch = store 0x27f1140, 0x27f0d40, 0x27f1240, 0x27f0e40<ST4[%2]> [ORD=3] [ID=8]


Optimized legalized selection DAG: BB#0 'redefine_start1:redefine_start1.entry'
SelectionDAG has 13 nodes:
  0x27f0e40: i32 = undef [ORD=1] [ID=3]

    0x27d1e18: ch = EntryToken [ORD=1] [ID=0]

        0x27f1440: i32 = TargetGlobalAddress<i32* @redefine_in_placeholder> 0 [TF=2]

      0x27f1640: i32 = REDEFINEISD::Hi 0x27f1440

        0x27f1540: i32 = TargetGlobalAddress<i32* @redefine_in_placeholder> 0 [TF=3]

      0x27f1740: i32 = REDEFINEISD::Lo 0x27f1540

    0x27f1840: i32 = add 0x27f1640, 0x27f1740

    0x27f0e40: <multiple use>
  0x27f0f40: i32,ch = load 0x27d1e18, 0x27f1840, 0x27f0e40<LD4[@redefine_in_placeholder]> [ORD=1] [ID=6]

      0x27f0f40: <multiple use>
      0x27f0f40: <multiple use>
      0x27f1040: i32 = FrameIndex<3> [ORD=2] [ID=4]

      0x27f0e40: <multiple use>
    0x27f1140: ch = store 0x27f0f40:1, 0x27f0f40, 0x27f1040, 0x27f0e40<ST4[%3]> [ORD=2] [ID=7]

    0x27f0d40: i32 = Constant<0> [ORD=3] [ID=2]

    0x27f1240: i32 = FrameIndex<2> [ORD=3] [ID=5]

    0x27f0e40: <multiple use>
  0x27f1340: ch = store 0x27f1140, 0x27f0d40, 0x27f1240, 0x27f0e40<ST4[%2]> [ORD=3] [ID=8]


===== Instruction selection begins: BB#0 'redefine_start1.entry'
ISEL: Starting pattern match on root node: 0x27f1340: ch = store 0x27f1140, 0x27f0d40, 0x27f1240, 0x27f0e40<ST4[%2]> [ORD=3] [ID=12]

  Morphed node: 0x27f1340: ch = SW 0x27f0d40, 0x27f1240, 0x27f0c40, 0x27f1140<Mem:ST4[%2]> [ORD=3]

ISEL: Match complete!
=> 0x27f1340: ch = SW 0x27f0d40, 0x27f1240, 0x27f0c40, 0x27f1140<Mem:ST4[%2]> [ORD=3]

ISEL: Starting pattern match on root node: 0x27f1140: ch = store 0x27f0f40:1, 0x27f0f40, 0x27f1040, 0x27f0e40<ST4[%3]> [ORD=2] [ID=11]

  Initial Opcode index to 178
  Morphed node: 0x27f1140: ch = SW 0x27f0f40, 0x27f1040, 0x27f0c40, 0x27f0f40:1<Mem:ST4[%3]> [ORD=2]

ISEL: Match complete!
=> 0x27f1140: ch = SW 0x27f0f40, 0x27f1040, 0x27f0c40, 0x27f0f40:1<Mem:ST4[%3]> [ORD=2]

ISEL: Starting pattern match on root node: 0x27f0f40: i32,ch = load 0x27d1e18, 0x27f1840, 0x27f0e40<LD4[@redefine_in_placeholder]> [ORD=1] [ID=10]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x27f0f40: i32,ch = LW 0x27f1840, 0x27f0c40, 0x27d1e18<Mem:LD4[@redefine_in_placeholder]> [ORD=1]

ISEL: Match complete!
=> 0x27f0f40: i32,ch = LW 0x27f1840, 0x27f0c40, 0x27d1e18<Mem:LD4[@redefine_in_placeholder]> [ORD=1]

ISEL: Starting pattern match on root node: 0x27f1840: i32 = add 0x27f1640, 0x27f1740 [ID=9]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x27f1840: i32 = ADD 0x27f1740, 0x27f1640

ISEL: Match complete!
=> 0x27f1840: i32 = ADD 0x27f1740, 0x27f1640

ISEL: Starting pattern match on root node: 0x27f1740: i32 = REDEFINEISD::Lo 0x27f1540 [ID=8]

  Initial Opcode index to 1204
  Morphed node: 0x27f1740: i32 = ADDI 0x27f0e40, 0x27f1540

ISEL: Match complete!
=> 0x27f1740: i32 = ADDI 0x27f0e40, 0x27f1540

ISEL: Starting pattern match on root node: 0x27f1640: i32 = REDEFINEISD::Hi 0x27f1440 [ID=7]

  Initial Opcode index to 1186
  Morphed node: 0x27f1640: i32 = LUI 0x27f1440

ISEL: Match complete!
=> 0x27f1640: i32 = LUI 0x27f1440

=> 0x27f1540: i32 = TargetGlobalAddress<i32* @redefine_in_placeholder> 0 [TF=3]

=> 0x27f1440: i32 = TargetGlobalAddress<i32* @redefine_in_placeholder> 0 [TF=2]

ISEL: Starting pattern match on root node: 0x27f0d40: i32 = Constant<0> [ORD=3] [ID=1]

  Initial Opcode index to 1226
comparing 0 and 0 and returning value:1
ISEL: Match complete!
=> 0x27f0d40: i32 = Constant<0> [ORD=3] [ID=1]

=> 0x27d1e18: ch = EntryToken [ORD=1]

===== Instruction selection ends:
Selected selection DAG: BB#0 'redefine_start1:redefine_start1.entry'
SelectionDAG has 16 nodes:
        0x27f0e40: <multiple use>
        0x27f1540: i32 = TargetGlobalAddress<i32* @redefine_in_placeholder> 0 [TF=3]

      0x27f1740: i32 = ADDI 0x27f0e40, 0x27f1540

        0x27f1440: i32 = TargetGlobalAddress<i32* @redefine_in_placeholder> 0 [TF=2]

      0x27f1640: i32 = LUI 0x27f1440

    0x27f1840: i32 = ADD 0x27f1740, 0x27f1640

    0x27f0c40: <multiple use>
    0x27d1e18: ch = EntryToken [ORD=1]

  0x27f0f40: i32,ch = LW 0x27f1840, 0x27f0c40, 0x27d1e18<Mem:LD4[@redefine_in_placeholder]> [ORD=1]

  0x27f0c40: i32 = TargetConstant<0>

  0x27f0e40: i32 = Register %zero

  0x27f1940: i32 = Register %t5

    0x27f0e40: <multiple use>
      0x27f1940: <multiple use>
      0x27f1a40: i32 = TargetFrameIndex<2>

    0x27f1240: i32 = ADDI 0x27f1940, 0x27f1a40 [ORD=3]

    0x27f0c40: <multiple use>
      0x27f0f40: <multiple use>
        0x27f1940: <multiple use>
        0x27f3d20: i32 = TargetFrameIndex<3>

      0x27f1040: i32 = ADDI 0x27f1940, 0x27f3d20 [ORD=2]

      0x27f0c40: <multiple use>
      0x27f0f40: <multiple use>
    0x27f1140: ch = SW 0x27f0f40, 0x27f1040, 0x27f0c40, 0x27f0f40:1<Mem:ST4[%3]> [ORD=2]

  0x27f1340: ch = SW 0x27f0e40, 0x27f1240, 0x27f0c40, 0x27f1140<Mem:ST4[%2]> [ORD=3]


********** List Scheduling BB#0 'redefine_start1.entry' **********
SU(0): 0x27f1340: ch = SW 0x27f0e40, 0x27f1240, 0x27f0c40, 0x27f1140<Mem:ST4[%2]> [ORD=3] [ID=0]

  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
   val SU(7): Latency=1
   ch  SU(1): Latency=1

SU(1): 0x27f1140: ch = SW 0x27f0f40, 0x27f1040, 0x27f0c40, 0x27f0f40:1<Mem:ST4[%3]> [ORD=2] [ID=1]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
   val SU(3): Latency=1
   val SU(2): Latency=1
   ch  SU(3): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x27f1040: i32 = ADDI 0x27f1940, 0x27f3d20 [ORD=2] [ID=2]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
   val SU(1): Latency=1

SU(3): 0x27f0f40: i32,ch = LW 0x27f1840, 0x27f0c40, 0x27d1e18<Mem:LD4[@redefine_in_placeholder]> [ORD=1] [ID=3]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(4): Latency=1
  Successors:
   val SU(1): Latency=1
   ch  SU(1): Latency=1

SU(4): 0x27f1840: i32 = ADD 0x27f1740, 0x27f1640 [ID=4]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(6): Latency=1
   val SU(5): Latency=1
  Successors:
   val SU(3): Latency=1

SU(5): 0x27f1640: i32 = LUI 0x27f1440 [ID=5]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(4): Latency=1

SU(6): 0x27f1740: i32 = ADDI 0x27f0e40, 0x27f1540 [ID=6]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(4): Latency=1

SU(7): 0x27f1240: i32 = ADDI 0x27f1940, 0x27f1a40 [ORD=3] [ID=7]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
   val SU(0): Latency=1


Examining Available:
Height 0: SU(0): 0x27f1340: ch = SW 0x27f0e40, 0x27f1240, 0x27f0c40, 0x27f1140<Mem:ST4[%2]> [ORD=3] [ID=0]


*** Scheduling [0]: SU(0): 0x27f1340: ch = SW 0x27f0e40, 0x27f1240, 0x27f0c40, 0x27f1140<Mem:ST4[%2]> [ORD=3] [ID=0]


Examining Available:
Height 1: SU(7): 0x27f1240: i32 = ADDI 0x27f1940, 0x27f1a40 [ORD=3] [ID=7]

Height 1: SU(1): 0x27f1140: ch = SW 0x27f0f40, 0x27f1040, 0x27f0c40, 0x27f0f40:1<Mem:ST4[%3]> [ORD=2] [ID=1]


*** Scheduling [1]: SU(7): 0x27f1240: i32 = ADDI 0x27f1940, 0x27f1a40 [ORD=3] [ID=7]


Examining Available:
Height 1: SU(1): 0x27f1140: ch = SW 0x27f0f40, 0x27f1040, 0x27f0c40, 0x27f0f40:1<Mem:ST4[%3]> [ORD=2] [ID=1]


*** Scheduling [2]: SU(1): 0x27f1140: ch = SW 0x27f0f40, 0x27f1040, 0x27f0c40, 0x27f0f40:1<Mem:ST4[%3]> [ORD=2] [ID=1]


Examining Available:
Height 3: SU(2): 0x27f1040: i32 = ADDI 0x27f1940, 0x27f3d20 [ORD=2] [ID=2]

Height 3: SU(3): 0x27f0f40: i32,ch = LW 0x27f1840, 0x27f0c40, 0x27d1e18<Mem:LD4[@redefine_in_placeholder]> [ORD=1] [ID=3]


*** Scheduling [3]: SU(2): 0x27f1040: i32 = ADDI 0x27f1940, 0x27f3d20 [ORD=2] [ID=2]


Examining Available:
Height 3: SU(3): 0x27f0f40: i32,ch = LW 0x27f1840, 0x27f0c40, 0x27d1e18<Mem:LD4[@redefine_in_placeholder]> [ORD=1] [ID=3]


*** Scheduling [4]: SU(3): 0x27f0f40: i32,ch = LW 0x27f1840, 0x27f0c40, 0x27d1e18<Mem:LD4[@redefine_in_placeholder]> [ORD=1] [ID=3]


Examining Available:
Height 5: SU(4): 0x27f1840: i32 = ADD 0x27f1740, 0x27f1640 [ID=4]


*** Scheduling [5]: SU(4): 0x27f1840: i32 = ADD 0x27f1740, 0x27f1640 [ID=4]


Examining Available:
Height 6: SU(6): 0x27f1740: i32 = ADDI 0x27f0e40, 0x27f1540 [ID=6]

Height 6: SU(5): 0x27f1640: i32 = LUI 0x27f1440 [ID=5]


*** Scheduling [6]: SU(6): 0x27f1740: i32 = ADDI 0x27f0e40, 0x27f1540 [ID=6]


Examining Available:
Height 6: SU(5): 0x27f1640: i32 = LUI 0x27f1440 [ID=5]


*** Scheduling [7]: SU(5): 0x27f1640: i32 = LUI 0x27f1440 [ID=5]

*** Final schedule ***
SU(5): 0x27f1640: i32 = LUI 0x27f1440 [ID=5]

SU(6): 0x27f1740: i32 = ADDI 0x27f0e40, 0x27f1540 [ID=6]

SU(4): 0x27f1840: i32 = ADD 0x27f1740, 0x27f1640 [ID=4]

SU(3): 0x27f0f40: i32,ch = LW 0x27f1840, 0x27f0c40, 0x27d1e18<Mem:LD4[@redefine_in_placeholder]> [ORD=1] [ID=3]

SU(2): 0x27f1040: i32 = ADDI 0x27f1940, 0x27f3d20 [ORD=2] [ID=2]

SU(1): 0x27f1140: ch = SW 0x27f0f40, 0x27f1040, 0x27f0c40, 0x27f0f40:1<Mem:ST4[%3]> [ORD=2] [ID=1]

SU(7): 0x27f1240: i32 = ADDI 0x27f1940, 0x27f1a40 [ORD=3] [ID=7]

SU(0): 0x27f1340: ch = SW 0x27f0e40, 0x27f1240, 0x27f0c40, 0x27f1140<Mem:ST4[%2]> [ORD=3] [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %5 = load i32* %2, align 4
I was here to add   %2 = alloca i32, align 4, !ConsumedBy !13
with I type i32and sd value :0x27f3d20: i32 = FrameIndex<2>
new load?0x27f0e40: i32,ch = load 0x27d1e18, 0x27f3d20, 0x27f1940<LD4[%2]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x27f1a40: i32 = Constant<0>

    0x27d1e18: ch = EntryToken

    0x27f3d20: i32 = FrameIndex<2>

    0x27f1940: i32 = undef

  0x27f0e40: i32,ch = load 0x27d1e18, 0x27f3d20, 0x27f1940<LD4[%2]>

  0x27d1e18: ch = EntryToken


I was here to add i32 25
store visit is after?  store i1 %6, i1* %1, align 4
I was here to add   %1 = alloca i1, align 4, !Controls !10
whats in dag after store?SelectionDAG has 10 nodes:
  0x27f1a40: i32 = Constant<0>

  0x27f1940: i32 = undef [ORD=4]

    0x27d1e18: ch = EntryToken [ORD=4]

    0x27f3d20: i32 = FrameIndex<2> [ORD=4]

    0x27f1940: <multiple use>
  0x27f0e40: i32,ch = load 0x27d1e18, 0x27f3d20, 0x27f1940<LD4[%2]> [ORD=4]

    0x27f0e40: <multiple use>
      0x27f0e40: <multiple use>
      0x27f0c40: i32 = Constant<25> [ORD=5]

      0x27f1340: ch = setlt [ORD=5]

    0x27f1140: i1 = setcc 0x27f0e40, 0x27f0c40, 0x27f1340 [ORD=5]

    0x27f0f40: i32 = FrameIndex<1> [ORD=6]

    0x27f1940: <multiple use>
  0x27f1840: ch = store 0x27f0e40:1, 0x27f1140, 0x27f0f40, 0x27f1940<ST1[%1](align=4)> [ORD=6]


Initial selection DAG: BB#1 'redefine_start1:redefine_start1.for.cond'
SelectionDAG has 16 nodes:
  0x27f1a40: i32 = Constant<0>

  0x27f1940: i32 = undef [ORD=4]

    0x27d1e18: ch = EntryToken [ORD=4]

    0x27f3d20: i32 = FrameIndex<2> [ORD=4]

    0x27f1940: <multiple use>
  0x27f0e40: i32,ch = load 0x27d1e18, 0x27f3d20, 0x27f1940<LD4[%2]> [ORD=4]

    0x27f0e40: <multiple use>
    0x27f0c40: i32 = Constant<25> [ORD=5]

    0x27f1340: ch = setlt [ORD=5]

  0x27f1140: i1 = setcc 0x27f0e40, 0x27f0c40, 0x27f1340 [ORD=5]

        0x27f0e40: <multiple use>
        0x27f1140: <multiple use>
        0x27f0f40: i32 = FrameIndex<1> [ORD=6]

        0x27f1940: <multiple use>
      0x27f1840: ch = store 0x27f0e40:1, 0x27f1140, 0x27f0f40, 0x27f1940<ST1[%1](align=4)> [ORD=6]

        0x27f1140: <multiple use>
        0x27f1740: i1 = Constant<-1>

      0x27f1640: i1 = xor 0x27f1140, 0x27f1740

      0x27f1540: ch = BasicBlock<redefine_start1.return 0x27eaa40>

    0x27f1440: ch = brcond 0x27f1840, 0x27f1640, 0x27f1540

    0x27f1240: ch = BasicBlock<redefine_start1.for.body 0x27ea990>

  0x27f1040: ch = br 0x27f1440, 0x27f1240



Replacing.3 0x27f1640: i1 = xor 0x27f1140, 0x27f1740

With: 0x27f3e20: i1 = setcc 0x27f0e40, 0x27f0c40, 0x27f0d40


Replacing.3 0x27f3e20: i1 = setcc 0x27f0e40, 0x27f0c40, 0x27f0d40

With: 0x27f3f20: i1 = setcc 0x27f0e40, 0x27f1740, 0x27f1640

Optimized lowered selection DAG: BB#1 'redefine_start1:redefine_start1.for.cond'
SelectionDAG has 16 nodes:
  0x27f1940: i32 = undef [ORD=4]

    0x27d1e18: ch = EntryToken [ORD=4]

    0x27f3d20: i32 = FrameIndex<2> [ORD=4]

    0x27f1940: <multiple use>
  0x27f0e40: i32,ch = load 0x27d1e18, 0x27f3d20, 0x27f1940<LD4[%2]> [ORD=4]

        0x27f0e40: <multiple use>
          0x27f0e40: <multiple use>
          0x27f0c40: i32 = Constant<25> [ORD=5]

          0x27f1340: ch = setlt [ORD=5]

        0x27f1140: i1 = setcc 0x27f0e40, 0x27f0c40, 0x27f1340 [ORD=5]

        0x27f0f40: i32 = FrameIndex<1> [ORD=6]

        0x27f1940: <multiple use>
      0x27f1840: ch = store 0x27f0e40:1, 0x27f1140, 0x27f0f40, 0x27f1940<ST1[%1](align=4)> [ORD=6]

        0x27f0e40: <multiple use>
        0x27f1740: i32 = Constant<24>

        0x27f1640: ch = setgt

      0x27f3f20: i1 = setcc 0x27f0e40, 0x27f1740, 0x27f1640

      0x27f1540: ch = BasicBlock<redefine_start1.return 0x27eaa40>

    0x27f1440: ch = brcond 0x27f1840, 0x27f3f20, 0x27f1540

    0x27f1240: ch = BasicBlock<redefine_start1.for.body 0x27ea990>

  0x27f1040: ch = br 0x27f1440, 0x27f1240


Legally typed node: 0x27f1640: ch = setgt [ID=0]

Legally typed node: 0x27f1740: i32 = Constant<24> [ID=0]

Legally typed node: 0x27f1240: ch = BasicBlock<redefine_start1.for.body 0x27ea990> [ID=0]

Legally typed node: 0x27f1540: ch = BasicBlock<redefine_start1.return 0x27eaa40> [ID=0]

Legally typed node: 0x27f0f40: i32 = FrameIndex<1> [ORD=6] [ID=0]

Legally typed node: 0x27f1340: ch = setlt [ORD=5] [ID=0]

Legally typed node: 0x27f0c40: i32 = Constant<25> [ORD=5] [ID=0]

Legally typed node: 0x27f1940: i32 = undef [ORD=4] [ID=0]

Legally typed node: 0x27f3d20: i32 = FrameIndex<2> [ORD=4] [ID=0]

Legally typed node: 0x27d1e18: ch = EntryToken [ORD=4] [ID=0]

Legally typed node: 0x27f0e40: i32,ch = load 0x27d1e18, 0x27f3d20, 0x27f1940<LD4[%2]> [ORD=4] [ID=0]

Promote integer result: 0x27f1140: i1 = setcc 0x27f0e40, 0x27f0c40, 0x27f1340 [ORD=5] [ID=0]

Promote integer operand: 0x27f1840: ch = store 0x27f0e40:1, 0x27f1140, 0x27f0f40, 0x27f1940<ST1[%1](align=4)> [ORD=6] [ID=0]

Legally typed node: 0x27f1a40: i32 = setcc 0x27f0e40, 0x27f0c40, 0x27f1340 [ORD=5] [ID=0]

Legally typed node: 0x27f0d40: ch = store 0x27f0e40:1, 0x27f1a40, 0x27f0f40, 0x27f1940<ST1[%1](align=4), trunc to i1> [ID=0]

Promote integer result: 0x27f3f20: i1 = setcc 0x27f0e40, 0x27f1740, 0x27f1640 [ID=0]

Promote integer operand: 0x27f1440: ch = brcond 0x27f0d40, 0x27f3f20, 0x27f1540 [ID=0]

Promote integer operand: 0x27f4020: i32 = zero_extend 0x27f3f20 [ID=0]

Legally typed node: 0x27f4120: i32 = Constant<1> [ID=0]

Legally typed node: 0x27f3e20: i32 = setcc 0x27f0e40, 0x27f1740, 0x27f1640 [ID=0]

Legally typed node: 0x27f4220: i32 = and 0x27f3e20, 0x27f4120 [ID=0]

Legally typed node: 0x27f1440: ch = brcond 0x27f0d40, 0x27f4220, 0x27f1540 [ID=0]

Legally typed node: 0x27f1040: ch = br 0x27f1440, 0x27f1240 [ID=0]

Legally typed node: 0x7fff149b9a10: ch = handlenode 0x27f1040 [ID=0]

Type-legalized selection DAG: BB#1 'redefine_start1:redefine_start1.for.cond'
SelectionDAG has 18 nodes:
  0x27f1940: i32 = undef [ORD=4] [ID=-3]

    0x27d1e18: ch = EntryToken [ORD=4] [ID=-3]

    0x27f3d20: i32 = FrameIndex<2> [ORD=4] [ID=-3]

    0x27f1940: <multiple use>
  0x27f0e40: i32,ch = load 0x27d1e18, 0x27f3d20, 0x27f1940<LD4[%2]> [ORD=4] [ID=-3]

        0x27f0e40: <multiple use>
          0x27f0e40: <multiple use>
          0x27f0c40: i32 = Constant<25> [ORD=5] [ID=-3]

          0x27f1340: ch = setlt [ORD=5] [ID=-3]

        0x27f1a40: i32 = setcc 0x27f0e40, 0x27f0c40, 0x27f1340 [ORD=5] [ID=-3]

        0x27f0f40: i32 = FrameIndex<1> [ORD=6] [ID=-3]

        0x27f1940: <multiple use>
      0x27f0d40: ch = store 0x27f0e40:1, 0x27f1a40, 0x27f0f40, 0x27f1940<ST1[%1](align=4), trunc to i1> [ID=-3]

          0x27f0e40: <multiple use>
          0x27f1740: i32 = Constant<24> [ID=-3]

          0x27f1640: ch = setgt [ID=-3]

        0x27f3e20: i32 = setcc 0x27f0e40, 0x27f1740, 0x27f1640 [ID=-3]

        0x27f4120: i32 = Constant<1> [ID=-3]

      0x27f4220: i32 = and 0x27f3e20, 0x27f4120 [ID=-3]

      0x27f1540: ch = BasicBlock<redefine_start1.return 0x27eaa40> [ID=-3]

    0x27f1440: ch = brcond 0x27f0d40, 0x27f4220, 0x27f1540 [ID=-3]

    0x27f1240: ch = BasicBlock<redefine_start1.for.body 0x27ea990> [ID=-3]

  0x27f1040: ch = br 0x27f1440, 0x27f1240 [ID=-3]



Replacing.2 0x27f4220: i32 = and 0x27f3e20, 0x27f4120 [ID=-3]

With: 0x27f3e20: i32 = setcc 0x27f0e40, 0x27f1740, 0x27f1640 [ID=-3]

Optimized type-legalized selection DAG: BB#1 'redefine_start1:redefine_start1.for.cond'
SelectionDAG has 16 nodes:
  0x27f1940: i32 = undef [ORD=4] [ID=-3]

    0x27d1e18: ch = EntryToken [ORD=4] [ID=-3]

    0x27f3d20: i32 = FrameIndex<2> [ORD=4] [ID=-3]

    0x27f1940: <multiple use>
  0x27f0e40: i32,ch = load 0x27d1e18, 0x27f3d20, 0x27f1940<LD4[%2]> [ORD=4] [ID=-3]

        0x27f0e40: <multiple use>
          0x27f0e40: <multiple use>
          0x27f0c40: i32 = Constant<25> [ORD=5] [ID=-3]

          0x27f1340: ch = setlt [ORD=5] [ID=-3]

        0x27f1a40: i32 = setcc 0x27f0e40, 0x27f0c40, 0x27f1340 [ORD=5] [ID=-3]

        0x27f0f40: i32 = FrameIndex<1> [ORD=6] [ID=-3]

        0x27f1940: <multiple use>
      0x27f0d40: ch = store 0x27f0e40:1, 0x27f1a40, 0x27f0f40, 0x27f1940<ST1[%1](align=4), trunc to i1> [ID=-3]

        0x27f0e40: <multiple use>
        0x27f1740: i32 = Constant<24> [ID=-3]

        0x27f1640: ch = setgt [ID=-3]

      0x27f3e20: i32 = setcc 0x27f0e40, 0x27f1740, 0x27f1640 [ID=-3]

      0x27f1540: ch = BasicBlock<redefine_start1.return 0x27eaa40> [ID=-3]

    0x27f1440: ch = brcond 0x27f0d40, 0x27f3e20, 0x27f1540 [ID=-3]

    0x27f1240: ch = BasicBlock<redefine_start1.for.body 0x27ea990> [ID=-3]

  0x27f1040: ch = br 0x27f1440, 0x27f1240 [ID=-3]


Legalized selection DAG: BB#1 'redefine_start1:redefine_start1.for.cond'
SelectionDAG has 18 nodes:
  0x27f1940: i32 = undef [ORD=4] [ID=2]

    0x27d1e18: ch = EntryToken [ORD=4] [ID=0]

    0x27f3d20: i32 = FrameIndex<2> [ORD=4] [ID=1]

    0x27f1940: <multiple use>
  0x27f0e40: i32,ch = load 0x27d1e18, 0x27f3d20, 0x27f1940<LD4[%2]> [ORD=4] [ID=10]

        0x27f0e40: <multiple use>
            0x27f0e40: <multiple use>
            0x27f0c40: i32 = Constant<25> [ORD=5] [ID=3]

            0x27f1340: ch = setlt [ORD=5] [ID=4]

          0x27f1a40: i32 = setcc 0x27f0e40, 0x27f0c40, 0x27f1340 [ORD=5] [ID=12]

          0x27f4120: i32 = Constant<1>

        0x27f4220: i32 = and 0x27f1a40, 0x27f4120

        0x27f0f40: i32 = FrameIndex<1> [ORD=6] [ID=5]

        0x27f1940: <multiple use>
      0x27f1140: ch = store 0x27f0e40:1, 0x27f4220, 0x27f0f40, 0x27f1940<ST1[%1](align=4), trunc to i8>

        0x27f0e40: <multiple use>
        0x27f1740: i32 = Constant<24> [ID=8]

        0x27f1640: ch = setgt [ID=9]

      0x27f3e20: i32 = setcc 0x27f0e40, 0x27f1740, 0x27f1640 [ID=11]

      0x27f1540: ch = BasicBlock<redefine_start1.return 0x27eaa40> [ID=6]

    0x27f1440: ch = brcond 0x27f1140, 0x27f3e20, 0x27f1540 [ID=14]

    0x27f1240: ch = BasicBlock<redefine_start1.for.body 0x27ea990> [ID=7]

  0x27f1040: ch = br 0x27f1440, 0x27f1240 [ID=15]



Replacing.2 0x27f4220: i32 = and 0x27f1a40, 0x27f4120

With: 0x27f1a40: i32 = setcc 0x27f0e40, 0x27f0c40, 0x27f1340 [ORD=5] [ID=12]

Optimized legalized selection DAG: BB#1 'redefine_start1:redefine_start1.for.cond'
SelectionDAG has 16 nodes:
  0x27f1940: i32 = undef [ORD=4] [ID=2]

    0x27d1e18: ch = EntryToken [ORD=4] [ID=0]

    0x27f3d20: i32 = FrameIndex<2> [ORD=4] [ID=1]

    0x27f1940: <multiple use>
  0x27f0e40: i32,ch = load 0x27d1e18, 0x27f3d20, 0x27f1940<LD4[%2]> [ORD=4] [ID=10]

        0x27f0e40: <multiple use>
          0x27f0e40: <multiple use>
          0x27f0c40: i32 = Constant<25> [ORD=5] [ID=3]

          0x27f1340: ch = setlt [ORD=5] [ID=4]

        0x27f1a40: i32 = setcc 0x27f0e40, 0x27f0c40, 0x27f1340 [ORD=5] [ID=12]

        0x27f0f40: i32 = FrameIndex<1> [ORD=6] [ID=5]

        0x27f1940: <multiple use>
      0x27f1140: ch = store 0x27f0e40:1, 0x27f1a40, 0x27f0f40, 0x27f1940<ST1[%1](align=4), trunc to i8>

        0x27f0e40: <multiple use>
        0x27f1740: i32 = Constant<24> [ID=8]

        0x27f1640: ch = setgt [ID=9]

      0x27f3e20: i32 = setcc 0x27f0e40, 0x27f1740, 0x27f1640 [ID=11]

      0x27f1540: ch = BasicBlock<redefine_start1.return 0x27eaa40> [ID=6]

    0x27f1440: ch = brcond 0x27f1140, 0x27f3e20, 0x27f1540 [ID=14]

    0x27f1240: ch = BasicBlock<redefine_start1.for.body 0x27ea990> [ID=7]

  0x27f1040: ch = br 0x27f1440, 0x27f1240 [ID=15]


===== Instruction selection begins: BB#1 'redefine_start1.for.cond'
ISEL: Starting pattern match on root node: 0x27f1040: ch = br 0x27f1440, 0x27f1240 [ID=15]

  Initial Opcode index to 1938
  Morphed node: 0x27f1040: ch = JAL 0x27f1240, 0x27f1440

ISEL: Match complete!
=> 0x27f1040: ch = JAL 0x27f1240, 0x27f1440

ISEL: Starting pattern match on root node: 0x27f1440: ch = brcond 0x27f1140, 0x27f3e20, 0x27f1540 [ID=14]

  Initial Opcode index to 1439
  Skipped scope entry (due to false predicate) at index 1456, continuing at 1477
  Skipped scope entry (due to false predicate) at index 1478, continuing at 1499
  Skipped scope entry (due to false predicate) at index 1500, continuing at 1521
  Skipped scope entry (due to false predicate) at index 1522, continuing at 1543
  Skipped scope entry (due to false predicate) at index 1544, continuing at 1565
  Skipped scope entry (due to false predicate) at index 1566, continuing at 1587
  Morphed node: 0x27f1440: ch = BGT 0x27f1540, 0x27f0e40, 0x27f1740, 0x27f1140

ISEL: Match complete!
=> 0x27f1440: ch = BGT 0x27f1540, 0x27f0e40, 0x27f1740, 0x27f1140

ISEL: Starting pattern match on root node: 0x27f1140: ch = store 0x27f0e40:1, 0x27f1a40, 0x27f0f40, 0x27f1940<ST1[%1](align=4), trunc to i8> [ID=13]

  Initial Opcode index to 178
  Skipped scope entry (due to false predicate) at index 190, continuing at 205
  Skipped scope entry (due to false predicate) at index 210, continuing at 225
  Morphed node: 0x27f1140: ch = SB 0x27f1a40, 0x27f0f40, 0x27f1640, 0x27f0e40:1<Mem:ST1[%1](align=4)>

ISEL: Match complete!
=> 0x27f1140: ch = SB 0x27f1a40, 0x27f0f40, 0x27f1640, 0x27f0e40:1<Mem:ST1[%1](align=4)>

ISEL: Starting pattern match on root node: 0x27f1a40: i32 = setcc 0x27f0e40, 0x27f0c40, 0x27f1340 [ORD=5] [ID=12]

  Initial Opcode index to 642
  Morphed node: 0x27f1a40: i32 = SLTI 0x27f0e40, 0x27f3e20 [ORD=5]

ISEL: Match complete!
=> 0x27f1a40: i32 = SLTI 0x27f0e40, 0x27f3e20 [ORD=5]

ISEL: Starting pattern match on root node: 0x27f0e40: i32,ch = load 0x27d1e18, 0x27f3d20, 0x27f1940<LD4[%2]> [ORD=4] [ID=10]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x27f0e40: i32,ch = LW 0x27f3d20, 0x27f1640, 0x27d1e18<Mem:LD4[%2]> [ORD=4]

ISEL: Match complete!
=> 0x27f0e40: i32,ch = LW 0x27f3d20, 0x27f1640, 0x27d1e18<Mem:LD4[%2]> [ORD=4]

ISEL: Starting pattern match on root node: 0x27f1740: i32 = Constant<24> [ID=8]

  Initial Opcode index to 1226
comparing 0 and 24 and returning value:0
  Skipped scope entry (due to false predicate) at index 1228, continuing at 1236
  Morphed node: 0x27f1740: i32 = ADDI 0x27f1940, 0x27f0c40

ISEL: Match complete!
=> 0x27f1740: i32 = ADDI 0x27f1940, 0x27f0c40

=> 0x27f1240: ch = BasicBlock<redefine_start1.for.body 0x27ea990>

=> 0x27f1540: ch = BasicBlock<redefine_start1.return 0x27eaa40>

=> 0x27d1e18: ch = EntryToken [ORD=4]

===== Instruction selection ends:
Selected selection DAG: BB#1 'redefine_start1:redefine_start1.for.cond'
SelectionDAG has 18 nodes:
      0x27f1340: <multiple use>
      0x27f4220: i32 = TargetFrameIndex<2>

    0x27f3d20: i32 = ADDI 0x27f1340, 0x27f4220 [ORD=4]

    0x27f1640: <multiple use>
    0x27d1e18: ch = EntryToken [ORD=4]

  0x27f0e40: i32,ch = LW 0x27f3d20, 0x27f1640, 0x27d1e18<Mem:LD4[%2]> [ORD=4]

  0x27f1640: i32 = TargetConstant<0>

  0x27f1340: i32 = Register %t5

    0x27f1240: ch = BasicBlock<redefine_start1.for.body 0x27ea990>

      0x27f1540: ch = BasicBlock<redefine_start1.return 0x27eaa40>

      0x27f0e40: <multiple use>
        0x27f1940: i32 = Register %zero

        0x27f0c40: i32 = TargetConstant<24>

      0x27f1740: i32 = ADDI 0x27f1940, 0x27f0c40

          0x27f0e40: <multiple use>
          0x27f3e20: i32 = TargetConstant<25>

        0x27f1a40: i32 = SLTI 0x27f0e40, 0x27f3e20 [ORD=5]

          0x27f1340: <multiple use>
          0x27f4120: i32 = TargetFrameIndex<1>

        0x27f0f40: i32 = ADDI 0x27f1340, 0x27f4120 [ORD=6]

        0x27f1640: <multiple use>
        0x27f0e40: <multiple use>
      0x27f1140: ch = SB 0x27f1a40, 0x27f0f40, 0x27f1640, 0x27f0e40:1<Mem:ST1[%1](align=4)>

    0x27f1440: ch = BGT 0x27f1540, 0x27f0e40, 0x27f1740, 0x27f1140

  0x27f1040: ch = JAL 0x27f1240, 0x27f1440


********** List Scheduling BB#1 'redefine_start1.for.cond' **********
SU(0): 0x27f1040: ch = JAL 0x27f1240, 0x27f1440 [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x27f1440: ch = BGT 0x27f1540, 0x27f0e40, 0x27f1740, 0x27f1140 [ID=1]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
   val SU(6): Latency=1
   val SU(5): Latency=1
   ch  SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x27f1140: ch = SB 0x27f1a40, 0x27f0f40, 0x27f1640, 0x27f0e40:1<Mem:ST1[%1](align=4)> [ID=2]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 2
  Predecessors:
   val SU(4): Latency=1
   val SU(3): Latency=1
   ch  SU(6): Latency=1
  Successors:
   ch  SU(1): Latency=1

SU(3): 0x27f0f40: i32 = ADDI 0x27f1340, 0x27f4120 [ORD=6] [ID=3]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(2): Latency=1

SU(4): 0x27f1a40: i32 = SLTI 0x27f0e40, 0x27f3e20 [ORD=5] [ID=4]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 3
  Predecessors:
   val SU(6): Latency=1
  Successors:
   val SU(2): Latency=1

SU(5): 0x27f1740: i32 = ADDI 0x27f1940, 0x27f0c40 [ID=5]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
   val SU(1): Latency=1

SU(6): 0x27f0e40: i32,ch = LW 0x27f3d20, 0x27f1640, 0x27d1e18<Mem:LD4[%2]> [ORD=4] [ID=6]

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
   val SU(7): Latency=1
  Successors:
   val SU(1): Latency=1
   ch  SU(2): Latency=1
   val SU(4): Latency=1

SU(7): 0x27f3d20: i32 = ADDI 0x27f1340, 0x27f4220 [ORD=4] [ID=7]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
   val SU(6): Latency=1


Examining Available:
Height 0: SU(0): 0x27f1040: ch = JAL 0x27f1240, 0x27f1440 [ID=0]


*** Scheduling [0]: SU(0): 0x27f1040: ch = JAL 0x27f1240, 0x27f1440 [ID=0]


Examining Available:
Height 1: SU(1): 0x27f1440: ch = BGT 0x27f1540, 0x27f0e40, 0x27f1740, 0x27f1140 [ID=1]


*** Scheduling [1]: SU(1): 0x27f1440: ch = BGT 0x27f1540, 0x27f0e40, 0x27f1740, 0x27f1140 [ID=1]


Examining Available:
Height 2: SU(5): 0x27f1740: i32 = ADDI 0x27f1940, 0x27f0c40 [ID=5]

Height 2: SU(2): 0x27f1140: ch = SB 0x27f1a40, 0x27f0f40, 0x27f1640, 0x27f0e40:1<Mem:ST1[%1](align=4)> [ID=2]


*** Scheduling [2]: SU(5): 0x27f1740: i32 = ADDI 0x27f1940, 0x27f0c40 [ID=5]


Examining Available:
Height 2: SU(2): 0x27f1140: ch = SB 0x27f1a40, 0x27f0f40, 0x27f1640, 0x27f0e40:1<Mem:ST1[%1](align=4)> [ID=2]


*** Scheduling [3]: SU(2): 0x27f1140: ch = SB 0x27f1a40, 0x27f0f40, 0x27f1640, 0x27f0e40:1<Mem:ST1[%1](align=4)> [ID=2]


Examining Available:
Height 4: SU(3): 0x27f0f40: i32 = ADDI 0x27f1340, 0x27f4120 [ORD=6] [ID=3]

Height 4: SU(4): 0x27f1a40: i32 = SLTI 0x27f0e40, 0x27f3e20 [ORD=5] [ID=4]


*** Scheduling [4]: SU(3): 0x27f0f40: i32 = ADDI 0x27f1340, 0x27f4120 [ORD=6] [ID=3]


Examining Available:
Height 4: SU(4): 0x27f1a40: i32 = SLTI 0x27f0e40, 0x27f3e20 [ORD=5] [ID=4]


*** Scheduling [5]: SU(4): 0x27f1a40: i32 = SLTI 0x27f0e40, 0x27f3e20 [ORD=5] [ID=4]


Examining Available:
Height 6: SU(6): 0x27f0e40: i32,ch = LW 0x27f3d20, 0x27f1640, 0x27d1e18<Mem:LD4[%2]> [ORD=4] [ID=6]


*** Scheduling [6]: SU(6): 0x27f0e40: i32,ch = LW 0x27f3d20, 0x27f1640, 0x27d1e18<Mem:LD4[%2]> [ORD=4] [ID=6]


Examining Available:
Height 7: SU(7): 0x27f3d20: i32 = ADDI 0x27f1340, 0x27f4220 [ORD=4] [ID=7]


*** Scheduling [7]: SU(7): 0x27f3d20: i32 = ADDI 0x27f1340, 0x27f4220 [ORD=4] [ID=7]

*** Final schedule ***
SU(7): 0x27f3d20: i32 = ADDI 0x27f1340, 0x27f4220 [ORD=4] [ID=7]

SU(6): 0x27f0e40: i32,ch = LW 0x27f3d20, 0x27f1640, 0x27d1e18<Mem:LD4[%2]> [ORD=4] [ID=6]

SU(4): 0x27f1a40: i32 = SLTI 0x27f0e40, 0x27f3e20 [ORD=5] [ID=4]

SU(3): 0x27f0f40: i32 = ADDI 0x27f1340, 0x27f4120 [ORD=6] [ID=3]

SU(2): 0x27f1140: ch = SB 0x27f1a40, 0x27f0f40, 0x27f1640, 0x27f0e40:1<Mem:ST1[%1](align=4)> [ID=2]

SU(5): 0x27f1740: i32 = ADDI 0x27f1940, 0x27f0c40 [ID=5]

SU(1): 0x27f1440: ch = BGT 0x27f1540, 0x27f0e40, 0x27f1740, 0x27f1140 [ID=1]

SU(0): 0x27f1040: ch = JAL 0x27f1240, 0x27f1440 [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %7 = load i32* %3, align 4
I was here to add   %3 = alloca i32, align 4, !ConsumedBy !15
with I type i32and sd value :0x27f4220: i32 = FrameIndex<3>
new load?0x27f0c40: i32,ch = load 0x27d1e18, 0x27f4220, 0x27f1340<LD4[%3]>
dag after load is dealt with?SelectionDAG has 5 nodes:
  0x27f4120: i32 = Constant<0>

    0x27d1e18: ch = EntryToken

    0x27f4220: i32 = FrameIndex<3>

    0x27f1340: i32 = undef

  0x27f0c40: i32,ch = load 0x27d1e18, 0x27f4220, 0x27f1340<LD4[%3]>

  0x27d1e18: ch = EntryToken


Initial selection DAG: BB#2 'redefine_start1:redefine_start1.for.body'
SelectionDAG has 5 nodes:
  0x27f4120: i32 = Constant<0>

    0x27d1e18: ch = EntryToken [ORD=7]

    0x27f4220: i32 = FrameIndex<3> [ORD=7]

    0x27f1340: i32 = undef [ORD=7]

  0x27f0c40: i32,ch = load 0x27d1e18, 0x27f4220, 0x27f1340<LD4[%3]> [ORD=7]

  0x27d1e18: ch = EntryToken [ORD=7]


Optimized lowered selection DAG: BB#2 'redefine_start1:redefine_start1.for.body'
SelectionDAG has 1 nodes:
  0x27d1e18: ch = EntryToken [ORD=7]


Legally typed node: 0x27d1e18: ch = EntryToken [ORD=7] [ID=0]

Legally typed node: 0x7fff149b9a10: ch = handlenode 0x27d1e18 [ID=0]

Type-legalized selection DAG: BB#2 'redefine_start1:redefine_start1.for.body'
SelectionDAG has 1 nodes:
  0x27d1e18: ch = EntryToken [ORD=7] [ID=-3]


Legalized selection DAG: BB#2 'redefine_start1:redefine_start1.for.body'
SelectionDAG has 1 nodes:
  0x27d1e18: ch = EntryToken [ORD=7] [ID=0]


Optimized legalized selection DAG: BB#2 'redefine_start1:redefine_start1.for.body'
SelectionDAG has 1 nodes:
  0x27d1e18: ch = EntryToken [ORD=7] [ID=0]


===== Instruction selection begins: BB#2 'redefine_start1.for.body'
=> 0x27d1e18: ch = EntryToken [ORD=7]

===== Instruction selection ends:
Selected selection DAG: BB#2 'redefine_start1:redefine_start1.for.body'
SelectionDAG has 1 nodes:
  0x27d1e18: ch = EntryToken [ORD=7]


********** List Scheduling BB#2 'redefine_start1.for.body' **********
*** Final schedule ***

Total amount of phi nodes to update: 0
store visit is after?  store i1 true, i1* %0, align 4
I was here to add i1 true
I was here to add   %0 = alloca i1, align 4, !Sync !8
whats in dag after store?SelectionDAG has 6 nodes:
  0x27f1340: i32 = Constant<0>

    0x27d1e18: ch = EntryToken [ORD=8]

    0x27f4120: i1 = Constant<-1> [ORD=8]

    0x27f4220: i32 = FrameIndex<0> [ORD=8]

    0x27f0c40: i32 = undef [ORD=8]

  0x27f1940: ch = store 0x27d1e18, 0x27f4120, 0x27f4220, 0x27f0c40<ST1[%0](align=4)> [ORD=8]


Initial selection DAG: BB#3 'redefine_start1:redefine_start1.return'
SelectionDAG has 6 nodes:
  0x27f1340: i32 = Constant<0>

    0x27d1e18: ch = EntryToken [ORD=8]

    0x27f4120: i1 = Constant<-1> [ORD=8]

    0x27f4220: i32 = FrameIndex<0> [ORD=8]

    0x27f0c40: i32 = undef [ORD=8]

  0x27f1940: ch = store 0x27d1e18, 0x27f4120, 0x27f4220, 0x27f0c40<ST1[%0](align=4)> [ORD=8]


Optimized lowered selection DAG: BB#3 'redefine_start1:redefine_start1.return'
SelectionDAG has 5 nodes:
    0x27d1e18: ch = EntryToken [ORD=8]

    0x27f4120: i1 = Constant<-1> [ORD=8]

    0x27f4220: i32 = FrameIndex<0> [ORD=8]

    0x27f0c40: i32 = undef [ORD=8]

  0x27f1940: ch = store 0x27d1e18, 0x27f4120, 0x27f4220, 0x27f0c40<ST1[%0](align=4)> [ORD=8]


Legally typed node: 0x27f0c40: i32 = undef [ORD=8] [ID=0]

Legally typed node: 0x27f4220: i32 = FrameIndex<0> [ORD=8] [ID=0]

Promote integer result: 0x27f4120: i1 = Constant<-1> [ORD=8] [ID=0]

Legally typed node: 0x27f1340: i32 = Constant<1> [ORD=8] [ID=0]

Legally typed node: 0x27d1e18: ch = EntryToken [ORD=8] [ID=0]

Promote integer operand: 0x27f1940: ch = store 0x27d1e18, 0x27f4120, 0x27f4220, 0x27f0c40<ST1[%0](align=4)> [ORD=8] [ID=0]

Legally typed node: 0x27f3e20: ch = store 0x27d1e18, 0x27f1340, 0x27f4220, 0x27f0c40<ST1[%0](align=4), trunc to i1> [ID=0]

Legally typed node: 0x7fff149b9a10: ch = handlenode 0x27f3e20 [ID=0]

Type-legalized selection DAG: BB#3 'redefine_start1:redefine_start1.return'
SelectionDAG has 5 nodes:
    0x27d1e18: ch = EntryToken [ORD=8] [ID=-3]

    0x27f1340: i32 = Constant<1> [ORD=8] [ID=-3]

    0x27f4220: i32 = FrameIndex<0> [ORD=8] [ID=-3]

    0x27f0c40: i32 = undef [ORD=8] [ID=-3]

  0x27f3e20: ch = store 0x27d1e18, 0x27f1340, 0x27f4220, 0x27f0c40<ST1[%0](align=4), trunc to i1> [ID=-3]


Optimized type-legalized selection DAG: BB#3 'redefine_start1:redefine_start1.return'
SelectionDAG has 5 nodes:
    0x27d1e18: ch = EntryToken [ORD=8] [ID=-3]

    0x27f1340: i32 = Constant<1> [ORD=8] [ID=-3]

    0x27f4220: i32 = FrameIndex<0> [ORD=8] [ID=-3]

    0x27f0c40: i32 = undef [ORD=8] [ID=-3]

  0x27f3e20: ch = store 0x27d1e18, 0x27f1340, 0x27f4220, 0x27f0c40<ST1[%0](align=4), trunc to i1> [ID=-3]


Legalized selection DAG: BB#3 'redefine_start1:redefine_start1.return'
SelectionDAG has 5 nodes:
    0x27d1e18: ch = EntryToken [ORD=8] [ID=0]

    0x27f1340: i32 = Constant<1> [ORD=8] [ID=3]

    0x27f4220: i32 = FrameIndex<0> [ORD=8] [ID=1]

    0x27f0c40: i32 = undef [ORD=8] [ID=2]

  0x27f4120: ch = store 0x27d1e18, 0x27f1340, 0x27f4220, 0x27f0c40<ST1[%0](align=4), trunc to i8>


Optimized legalized selection DAG: BB#3 'redefine_start1:redefine_start1.return'
SelectionDAG has 5 nodes:
    0x27d1e18: ch = EntryToken [ORD=8] [ID=0]

    0x27f1340: i32 = Constant<1> [ORD=8] [ID=3]

    0x27f4220: i32 = FrameIndex<0> [ORD=8] [ID=1]

    0x27f0c40: i32 = undef [ORD=8] [ID=2]

  0x27f4120: ch = store 0x27d1e18, 0x27f1340, 0x27f4220, 0x27f0c40<ST1[%0](align=4), trunc to i8>


===== Instruction selection begins: BB#3 'redefine_start1.return'
ISEL: Starting pattern match on root node: 0x27f4120: ch = store 0x27d1e18, 0x27f1340, 0x27f4220, 0x27f0c40<ST1[%0](align=4), trunc to i8> [ID=4]

  Initial Opcode index to 178
  Skipped scope entry (due to false predicate) at index 190, continuing at 205
  Skipped scope entry (due to false predicate) at index 210, continuing at 225
  Morphed node: 0x27f4120: ch = SB 0x27f1340, 0x27f4220, 0x27f3e20, 0x27d1e18<Mem:ST1[%0](align=4)>

ISEL: Match complete!
=> 0x27f4120: ch = SB 0x27f1340, 0x27f4220, 0x27f3e20, 0x27d1e18<Mem:ST1[%0](align=4)>

ISEL: Starting pattern match on root node: 0x27f1340: i32 = Constant<1> [ORD=8] [ID=3]

  Initial Opcode index to 1226
comparing 0 and 1 and returning value:0
  Skipped scope entry (due to false predicate) at index 1228, continuing at 1236
  Morphed node: 0x27f1340: i32 = ADDI 0x27f0c40, 0x27f1940 [ORD=8]

ISEL: Match complete!
=> 0x27f1340: i32 = ADDI 0x27f0c40, 0x27f1940 [ORD=8]

=> 0x27d1e18: ch = EntryToken [ORD=8]

===== Instruction selection ends:
Selected selection DAG: BB#3 'redefine_start1:redefine_start1.return'
SelectionDAG has 9 nodes:
      0x27f0c40: i32 = Register %zero

      0x27f1940: i32 = TargetConstant<1>

    0x27f1340: i32 = ADDI 0x27f0c40, 0x27f1940 [ORD=8]

      0x27f1640: i32 = Register %t5

      0x27f1040: i32 = TargetFrameIndex<0>

    0x27f4220: i32 = ADDI 0x27f1640, 0x27f1040 [ORD=8]

    0x27f3e20: i32 = TargetConstant<0>

    0x27d1e18: ch = EntryToken [ORD=8]

  0x27f4120: ch = SB 0x27f1340, 0x27f4220, 0x27f3e20, 0x27d1e18<Mem:ST1[%0](align=4)>


********** List Scheduling BB#3 'redefine_start1.return' **********
SU(0): 0x27f4120: ch = SB 0x27f1340, 0x27f4220, 0x27f3e20, 0x27d1e18<Mem:ST1[%0](align=4)> [ID=0]

  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
   val SU(2): Latency=1
   val SU(1): Latency=1

SU(1): 0x27f4220: i32 = ADDI 0x27f1640, 0x27f1040 [ORD=8] [ID=1]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
   val SU(0): Latency=1

SU(2): 0x27f1340: i32 = ADDI 0x27f0c40, 0x27f1940 [ORD=8] [ID=2]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
   val SU(0): Latency=1


Examining Available:
Height 0: SU(0): 0x27f4120: ch = SB 0x27f1340, 0x27f4220, 0x27f3e20, 0x27d1e18<Mem:ST1[%0](align=4)> [ID=0]


*** Scheduling [0]: SU(0): 0x27f4120: ch = SB 0x27f1340, 0x27f4220, 0x27f3e20, 0x27d1e18<Mem:ST1[%0](align=4)> [ID=0]


Examining Available:
Height 1: SU(2): 0x27f1340: i32 = ADDI 0x27f0c40, 0x27f1940 [ORD=8] [ID=2]

Height 1: SU(1): 0x27f4220: i32 = ADDI 0x27f1640, 0x27f1040 [ORD=8] [ID=1]


*** Scheduling [1]: SU(2): 0x27f1340: i32 = ADDI 0x27f0c40, 0x27f1940 [ORD=8] [ID=2]


Examining Available:
Height 1: SU(1): 0x27f4220: i32 = ADDI 0x27f1640, 0x27f1040 [ORD=8] [ID=1]


*** Scheduling [2]: SU(1): 0x27f4220: i32 = ADDI 0x27f1640, 0x27f1040 [ORD=8] [ID=1]

*** Final schedule ***
SU(1): 0x27f4220: i32 = ADDI 0x27f1640, 0x27f1040 [ORD=8] [ID=1]

SU(2): 0x27f1340: i32 = ADDI 0x27f0c40, 0x27f1940 [ORD=8] [ID=2]

SU(0): 0x27f4120: ch = SB 0x27f1340, 0x27f4220, 0x27f3e20, 0x27d1e18<Mem:ST1[%0](align=4)> [ID=0]


Total amount of phi nodes to update: 0
# Machine code for function redefine_start1: SSA
Frame Objects:
  fi#0: size=1, align=4, at location [SP]
  fi#1: size=1, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start1.entry
16B		%vreg0<def> = LUI <ga:@redefine_in_placeholder>[TF=2]; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %zero, <ga:@redefine_in_placeholder>[TF=3]; GR32Bit:%vreg1
48B		%vreg2<def> = ADD %vreg1<kill>, %vreg0<kill>; GR32Bit:%vreg2,%vreg1,%vreg0
64B		%vreg3<def> = LW %vreg2<kill>, 0; mem:LD4[@redefine_in_placeholder] GR32Bit:%vreg3,%vreg2
80B		%vreg4<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg4
96B		SW %vreg3<kill>, %vreg4<kill>, 0; mem:ST4[%3] GR32Bit:%vreg3,%vreg4
112B		%vreg5<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg5
128B		SW %zero, %vreg5<kill>, 0; mem:ST4[%2] GR32Bit:%vreg5
	    Successors according to CFG: BB#1

144B	BB#1: derived from LLVM BB %redefine_start1.for.cond
	    Predecessors according to CFG: BB#0
160B		%vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
176B		%vreg7<def> = LW %vreg6<kill>, 0; mem:LD4[%2] GR32Bit:%vreg7,%vreg6
192B		%vreg8<def> = SLTI %vreg7, 25; GR32Bit:%vreg8,%vreg7
208B		%vreg9<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg9
224B		SB %vreg8<kill>, %vreg9<kill>, 0; mem:ST1[%1](align=4) GR32Bit:%vreg8,%vreg9
240B		%vreg10<def> = ADDI %zero, 24; GR32Bit:%vreg10
256B		BGT <BB#3>, %vreg7, %vreg10<kill>; GR32Bit:%vreg7,%vreg10
272B		JAL <BB#2>
	    Successors according to CFG: BB#2(16) BB#3(16)

288B	BB#2: derived from LLVM BB %redefine_start1.for.body
	    Predecessors according to CFG: BB#1
	    Successors according to CFG: BB#3

304B	BB#3: derived from LLVM BB %redefine_start1.return
	    Predecessors according to CFG: BB#1 BB#2
320B		%vreg11<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg11
336B		%vreg12<def> = ADDI %zero, 1; GR32Bit:%vreg12
352B		SB %vreg12<kill>, %vreg11<kill>, 0; mem:ST1[%0](align=4) GR32Bit:%vreg12,%vreg11

# End machine code for function redefine_start1.

********** Stack Coloring **********
********** Function: redefine_start1
Found 0 markers and 4 slots
Slot structure:
Slot #0 - 1 bytes.
Slot #1 - 1 bytes.
Slot #2 - 4 bytes.
Slot #3 - 4 bytes.
Total Stack size: 10 bytes

Will not try to merge slots.
Removed 0 markers.
******** Pre-regalloc Machine LICM: redefine_start1 ********
******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: redefine_start1
********** PROCESS IMPLICIT DEFS **********
********** Function: redefine_start1
********** REWRITING TWO-ADDR INSTRS **********
********** Function: redefine_start1
# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=1, align=4, at location [SP]
  fi#1: size=1, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start1.entry
16B		%vreg0<def> = LUI <ga:@redefine_in_placeholder>[TF=2]; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %zero, <ga:@redefine_in_placeholder>[TF=3]; GR32Bit:%vreg1
48B		%vreg2<def> = ADD %vreg1<kill>, %vreg0<kill>; GR32Bit:%vreg2,%vreg1,%vreg0
64B		%vreg3<def> = LW %vreg2<kill>, 0; mem:LD4[@redefine_in_placeholder] GR32Bit:%vreg3,%vreg2
80B		%vreg4<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg4
96B		SW %vreg3<kill>, %vreg4<kill>, 0; mem:ST4[%3] GR32Bit:%vreg3,%vreg4
112B		%vreg5<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg5
128B		SW %zero, %vreg5<kill>, 0; mem:ST4[%2] GR32Bit:%vreg5
	    Successors according to CFG: BB#1

144B	BB#1: derived from LLVM BB %redefine_start1.for.cond
	    Predecessors according to CFG: BB#0
160B		%vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
176B		%vreg7<def> = LW %vreg6<kill>, 0; mem:LD4[%2] GR32Bit:%vreg7,%vreg6
192B		%vreg8<def> = SLTI %vreg7, 25; GR32Bit:%vreg8,%vreg7
208B		%vreg9<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg9
224B		SB %vreg8<kill>, %vreg9<kill>, 0; mem:ST1[%1](align=4) GR32Bit:%vreg8,%vreg9
240B		%vreg10<def> = ADDI %zero, 24; GR32Bit:%vreg10
256B		BGT <BB#3>, %vreg7<kill>, %vreg10<kill>; GR32Bit:%vreg7,%vreg10
272B		JAL <BB#2>
	    Successors according to CFG: BB#2(16) BB#3(16)

288B	BB#2: derived from LLVM BB %redefine_start1.for.body
	    Predecessors according to CFG: BB#1
	    Successors according to CFG: BB#3

304B	BB#3: derived from LLVM BB %redefine_start1.return
	    Predecessors according to CFG: BB#1 BB#2
320B		%vreg11<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg11
336B		%vreg12<def> = ADDI %zero, 1; GR32Bit:%vreg12
352B		SB %vreg12<kill>, %vreg11<kill>, 0; mem:ST1[%0](align=4) GR32Bit:%vreg12,%vreg11

# End machine code for function redefine_start1.

Computing live-in reg-units in ABI blocks.
Created 0 new intervals.
********** INTERVALS **********
%vreg0 = [16r,48r:0)  0@16r
%vreg1 = [32r,48r:0)  0@32r
%vreg2 = [48r,64r:0)  0@48r
%vreg3 = [64r,96r:0)  0@64r
%vreg4 = [80r,96r:0)  0@80r
%vreg5 = [112r,128r:0)  0@112r
%vreg6 = [160r,176r:0)  0@160r
%vreg7 = [176r,256r:0)  0@176r
%vreg8 = [192r,224r:0)  0@192r
%vreg9 = [208r,224r:0)  0@208r
%vreg10 = [240r,256r:0)  0@240r
%vreg11 = [320r,352r:0)  0@320r
%vreg12 = [336r,352r:0)  0@336r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=1, align=4, at location [SP]
  fi#1: size=1, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start1.entry
16B		%vreg0<def> = LUI <ga:@redefine_in_placeholder>[TF=2]; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %zero, <ga:@redefine_in_placeholder>[TF=3]; GR32Bit:%vreg1
48B		%vreg2<def> = ADD %vreg1, %vreg0; GR32Bit:%vreg2,%vreg1,%vreg0
64B		%vreg3<def> = LW %vreg2, 0; mem:LD4[@redefine_in_placeholder] GR32Bit:%vreg3,%vreg2
80B		%vreg4<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg4
96B		SW %vreg3, %vreg4, 0; mem:ST4[%3] GR32Bit:%vreg3,%vreg4
112B		%vreg5<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg5
128B		SW %zero, %vreg5, 0; mem:ST4[%2] GR32Bit:%vreg5
	    Successors according to CFG: BB#1

144B	BB#1: derived from LLVM BB %redefine_start1.for.cond
	    Predecessors according to CFG: BB#0
160B		%vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
176B		%vreg7<def> = LW %vreg6, 0; mem:LD4[%2] GR32Bit:%vreg7,%vreg6
192B		%vreg8<def> = SLTI %vreg7, 25; GR32Bit:%vreg8,%vreg7
208B		%vreg9<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg9
224B		SB %vreg8, %vreg9, 0; mem:ST1[%1](align=4) GR32Bit:%vreg8,%vreg9
240B		%vreg10<def> = ADDI %zero, 24; GR32Bit:%vreg10
256B		BGT <BB#3>, %vreg7, %vreg10; GR32Bit:%vreg7,%vreg10
272B		JAL <BB#2>
	    Successors according to CFG: BB#2(16) BB#3(16)

288B	BB#2: derived from LLVM BB %redefine_start1.for.body
	    Predecessors according to CFG: BB#1
	    Successors according to CFG: BB#3

304B	BB#3: derived from LLVM BB %redefine_start1.return
	    Predecessors according to CFG: BB#1 BB#2
320B		%vreg11<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg11
336B		%vreg12<def> = ADDI %zero, 1; GR32Bit:%vreg12
352B		SB %vreg12, %vreg11, 0; mem:ST1[%0](align=4) GR32Bit:%vreg12,%vreg11

# End machine code for function redefine_start1.

********** SIMPLE REGISTER COALESCING **********
********** Function: redefine_start1
********** JOINING INTERVALS ***********
redefine_start1.for.cond:
redefine_start1.for.body:
redefine_start1.return:
redefine_start1.entry:
Trying to inflate 0 regs.
********** INTERVALS **********
%vreg0 = [16r,48r:0)  0@16r
%vreg1 = [32r,48r:0)  0@32r
%vreg2 = [48r,64r:0)  0@48r
%vreg3 = [64r,96r:0)  0@64r
%vreg4 = [80r,96r:0)  0@80r
%vreg5 = [112r,128r:0)  0@112r
%vreg6 = [160r,176r:0)  0@160r
%vreg7 = [176r,256r:0)  0@176r
%vreg8 = [192r,224r:0)  0@192r
%vreg9 = [208r,224r:0)  0@208r
%vreg10 = [240r,256r:0)  0@240r
%vreg11 = [320r,352r:0)  0@320r
%vreg12 = [336r,352r:0)  0@336r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=1, align=4, at location [SP]
  fi#1: size=1, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start1.entry
16B		%vreg0<def> = LUI <ga:@redefine_in_placeholder>[TF=2]; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %zero, <ga:@redefine_in_placeholder>[TF=3]; GR32Bit:%vreg1
48B		%vreg2<def> = ADD %vreg1, %vreg0; GR32Bit:%vreg2,%vreg1,%vreg0
64B		%vreg3<def> = LW %vreg2, 0; mem:LD4[@redefine_in_placeholder] GR32Bit:%vreg3,%vreg2
80B		%vreg4<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg4
96B		SW %vreg3, %vreg4, 0; mem:ST4[%3] GR32Bit:%vreg3,%vreg4
112B		%vreg5<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg5
128B		SW %zero, %vreg5, 0; mem:ST4[%2] GR32Bit:%vreg5
	    Successors according to CFG: BB#1

144B	BB#1: derived from LLVM BB %redefine_start1.for.cond
	    Predecessors according to CFG: BB#0
160B		%vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
176B		%vreg7<def> = LW %vreg6, 0; mem:LD4[%2] GR32Bit:%vreg7,%vreg6
192B		%vreg8<def> = SLTI %vreg7, 25; GR32Bit:%vreg8,%vreg7
208B		%vreg9<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg9
224B		SB %vreg8, %vreg9, 0; mem:ST1[%1](align=4) GR32Bit:%vreg8,%vreg9
240B		%vreg10<def> = ADDI %zero, 24; GR32Bit:%vreg10
256B		BGT <BB#3>, %vreg7, %vreg10; GR32Bit:%vreg7,%vreg10
272B		JAL <BB#2>
	    Successors according to CFG: BB#2(16) BB#3(16)

288B	BB#2: derived from LLVM BB %redefine_start1.for.body
	    Predecessors according to CFG: BB#1
	    Successors according to CFG: BB#3

304B	BB#3: derived from LLVM BB %redefine_start1.return
	    Predecessors according to CFG: BB#1 BB#2
320B		%vreg11<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg11
336B		%vreg12<def> = ADDI %zero, 1; GR32Bit:%vreg12
352B		SB %vreg12, %vreg11, 0; mem:ST1[%0](align=4) GR32Bit:%vreg12,%vreg11

# End machine code for function redefine_start1.

Before MISched:
# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=1, align=4, at location [SP]
  fi#1: size=1, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %redefine_start1.entry
	%vreg0<def> = LUI <ga:@redefine_in_placeholder>[TF=2]; GR32Bit:%vreg0
	%vreg1<def> = ADDI %zero, <ga:@redefine_in_placeholder>[TF=3]; GR32Bit:%vreg1
	%vreg2<def> = ADD %vreg1, %vreg0; GR32Bit:%vreg2,%vreg1,%vreg0
	%vreg3<def> = LW %vreg2, 0; mem:LD4[@redefine_in_placeholder] GR32Bit:%vreg3,%vreg2
	%vreg4<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg4
	SW %vreg3, %vreg4, 0; mem:ST4[%3] GR32Bit:%vreg3,%vreg4
	%vreg5<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg5
	SW %zero, %vreg5, 0; mem:ST4[%2] GR32Bit:%vreg5
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %redefine_start1.for.cond
    Predecessors according to CFG: BB#0
	%vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
	%vreg7<def> = LW %vreg6, 0; mem:LD4[%2] GR32Bit:%vreg7,%vreg6
	%vreg8<def> = SLTI %vreg7, 25; GR32Bit:%vreg8,%vreg7
	%vreg9<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg9
	SB %vreg8, %vreg9, 0; mem:ST1[%1](align=4) GR32Bit:%vreg8,%vreg9
	%vreg10<def> = ADDI %zero, 24; GR32Bit:%vreg10
	BGT <BB#3>, %vreg7, %vreg10; GR32Bit:%vreg7,%vreg10
	JAL <BB#2>
    Successors according to CFG: BB#2(16) BB#3(16)

BB#2: derived from LLVM BB %redefine_start1.for.body
    Predecessors according to CFG: BB#1
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %redefine_start1.return
    Predecessors according to CFG: BB#1 BB#2
	%vreg11<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg11
	%vreg12<def> = ADDI %zero, 1; GR32Bit:%vreg12
	SB %vreg12, %vreg11, 0; mem:ST1[%0](align=4) GR32Bit:%vreg12,%vreg11

# End machine code for function redefine_start1.


-------------
Starting new basic block BB#0
********** MI Scheduling **********
redefine_start1:BB#0 redefine_start1.entry
  From: %vreg0<def> = LUI <ga:@redefine_in_placeholder>[TF=2]; GR32Bit:%vreg0
    To: End Remaining: 0
Max Pressure: GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 2
Excess PSets: 
2 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 0
  SU(5) in tree 0
  SU(6) in tree 1
  SU(7) in tree 1
SU(0):   %vreg0<def> = LUI <ga:@redefine_in_placeholder>[TF=2]; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
   val SU(2): Latency=5 Reg=%vreg0

SU(1):   %vreg1<def> = ADDI %zero, <ga:@redefine_in_placeholder>[TF=3]; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
   val SU(2): Latency=5 Reg=%vreg1

SU(2):   %vreg2<def> = ADD %vreg1, %vreg0; GR32Bit:%vreg2,%vreg1,%vreg0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg1
   val SU(0): Latency=5 Reg=%vreg0
  Successors:
   val SU(3): Latency=5 Reg=%vreg2

SU(3):   %vreg3<def> = LW %vreg2, 0; mem:LD4[@redefine_in_placeholder] GR32Bit:%vreg3,%vreg2
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 2
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg2
  Successors:
   val SU(5): Latency=2 Reg=%vreg3

SU(4):   %vreg4<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(5): Latency=5 Reg=%vreg4

SU(5):   SW %vreg3, %vreg4, 0; mem:ST4[%3] GR32Bit:%vreg3,%vreg4
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 12
  Height             : 0
  Predecessors:
   val SU(3): Latency=2 Reg=%vreg3
   val SU(4): Latency=5 Reg=%vreg4
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(6):   %vreg5<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(7): Latency=5 Reg=%vreg5

SU(7):   SW %zero, %vreg5, 0; mem:ST4[%2] GR32Bit:%vreg5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 5
  Height             : 0
  Predecessors:
   val SU(6): Latency=5 Reg=%vreg5
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg0<def> = LUI <ga:@redefine_in_placeholder>[TF=2]; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
   val SU(2): Latency=5 Reg=%vreg0

SU(1):   %vreg1<def> = ADDI %zero, <ga:@redefine_in_placeholder>[TF=3]; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
   val SU(2): Latency=5 Reg=%vreg1

SU(2):   %vreg2<def> = ADD %vreg1, %vreg0; GR32Bit:%vreg2,%vreg1,%vreg0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg1
   val SU(0): Latency=5 Reg=%vreg0
  Successors:
   val SU(3): Latency=5 Reg=%vreg2

SU(3):   %vreg3<def> = LW %vreg2, 0; mem:LD4[@redefine_in_placeholder] GR32Bit:%vreg3,%vreg2
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 10
  Height             : 2
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg2
  Successors:
   val SU(5): Latency=2 Reg=%vreg3

SU(4):   %vreg4<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(5): Latency=5 Reg=%vreg4

SU(5):   SW %vreg3, %vreg4, 0; mem:ST4[%3] GR32Bit:%vreg3,%vreg4
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 12
  Height             : 0
  Predecessors:
   val SU(3): Latency=2 Reg=%vreg3
   val SU(4): Latency=5 Reg=%vreg4
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(6):   %vreg5<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(7): Latency=5 Reg=%vreg5

SU(7):   SW %zero, %vreg5, 0; mem:ST4[%2] GR32Bit:%vreg5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 5
  Height             : 0
  Predecessors:
   val SU(6): Latency=5 Reg=%vreg5
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(4)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg4<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg4
handleMove 80B -> 8B: %vreg4<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg4
     %vreg4:	[80r,96r:0)  0@80r
        -->	[8r,96r:0)  0@8r
     t5:	EMPTY
        -->	EMPTY
Pick node SU(1)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg1<def> = ADDI %zero, <ga:@redefine_in_placeholder>[TF=3]; GR32Bit:%vreg1
handleMove 32B -> 12B: %vreg1<def> = ADDI %zero, <ga:@redefine_in_placeholder>[TF=3]; GR32Bit:%vreg1
     %vreg1:	[32r,48r:0)  0@32r
        -->	[12r,48r:0)  0@12r
     zero:	EMPTY
        -->	EMPTY
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg0<def> = LUI <ga:@redefine_in_placeholder>[TF=2]; GR32Bit:%vreg0
Pick node SU(2)  ILP: 3 / 6 = 0.5 Tree: 0 @0
Scheduling %vreg2<def> = ADD %vreg1, %vreg0; GR32Bit:%vreg2,%vreg1,%vreg0
Pick node SU(3)  ILP: 4 / 11 = 0.363636 Tree: 0 @0
Scheduling %vreg3<def> = LW %vreg2, 0; mem:LD4[@redefine_in_placeholder] GR32Bit:%vreg3,%vreg2
Pick node SU(5)  ILP: 6 / 13 = 0.461538 Tree: 0 @0
Scheduling SW %vreg3, %vreg4, 0; mem:ST4[%3] GR32Bit:%vreg3,%vreg4
Pick node SU(6)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg5<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg5
Pick node SU(7)  ILP: 2 / 6 = 0.333333 Tree: 1 @0
Scheduling SW %zero, %vreg5, 0; mem:ST4[%2] GR32Bit:%vreg5
*** Final schedule for BB#0 ***
SU(4):   %vreg4<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg4
SU(1):   %vreg1<def> = ADDI %zero, <ga:@redefine_in_placeholder>[TF=3]; GR32Bit:%vreg1
SU(0):   %vreg0<def> = LUI <ga:@redefine_in_placeholder>[TF=2]; GR32Bit:%vreg0
SU(2):   %vreg2<def> = ADD %vreg1, %vreg0; GR32Bit:%vreg2,%vreg1,%vreg0
SU(3):   %vreg3<def> = LW %vreg2, 0; mem:LD4[@redefine_in_placeholder] GR32Bit:%vreg3,%vreg2
SU(5):   SW %vreg3, %vreg4, 0; mem:ST4[%3] GR32Bit:%vreg3,%vreg4
SU(6):   %vreg5<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg5
SU(7):   SW %zero, %vreg5, 0; mem:ST4[%2] GR32Bit:%vreg5


*** Renumbered SlotIndexes 4-44 ***

*** Renumbered SlotIndexes 16-72 ***

*** Renumbered SlotIndexes 28-92 ***

*** Renumbered SlotIndexes 40-120 ***

*** Renumbered SlotIndexes 52-140 ***

*** Renumbered SlotIndexes 64-168 ***

*** Renumbered SlotIndexes 76-188 ***

*** Renumbered SlotIndexes 88-216 ***

*** Renumbered SlotIndexes 100-236 ***

*** Renumbered SlotIndexes 112-264 ***

*** Renumbered SlotIndexes 124-284 ***

*** Renumbered SlotIndexes 136-312 ***

*** Renumbered SlotIndexes 148-332 ***

*** Renumbered SlotIndexes 160-360 ***

*** Renumbered SlotIndexes 172-380 ***

*** Renumbered SlotIndexes 184-392 ***

*** Renumbered SlotIndexes 196-404 ***

*** Renumbered SlotIndexes 208-416 ***

*** Renumbered SlotIndexes 220-428 ***

*** Renumbered SlotIndexes 232-440 ***

*** Renumbered SlotIndexes 244-452 ***

*** Renumbered SlotIndexes 256-464 ***

*** Renumbered SlotIndexes 268-476 ***

*** Renumbered SlotIndexes 280-488 ***

*** Renumbered SlotIndexes 292-500 ***

*** Renumbered SlotIndexes 304-512 ***

*** Renumbered SlotIndexes 316-524 ***

*** Renumbered SlotIndexes 328-536 ***

*** Renumbered SlotIndexes 340-548 ***

*** Renumbered SlotIndexes 352-560 ***

*** Renumbered SlotIndexes 364-572 ***

*** Renumbered SlotIndexes 376-584 ***

*** Renumbered SlotIndexes 388-596 ***

*** Renumbered SlotIndexes 400-608 ***
Partitioning instructions of the region into multiple CEs
instr:  %vreg4<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg4
instr:  %vreg1<def> = ADDI %zero, <ga:@redefine_in_placeholder>[TF=3]; GR32Bit:%vreg1
instr:  %vreg0<def> = LUI <ga:@redefine_in_placeholder>[TF=2]; GR32Bit:%vreg0
instr:  %vreg2<def> = ADD %vreg1, %vreg0; GR32Bit:%vreg2,%vreg1,%vreg0
instr:  %vreg3<def> = LW %vreg2, 0; mem:LD4[@redefine_in_placeholder] GR32Bit:%vreg3,%vreg2
instr:  SW %vreg3, %vreg4, 0; mem:ST4[%3] GR32Bit:%vreg3,%vreg4
instr:  %vreg5<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg5
instr:  SW %zero, %vreg5, 0; mem:ST4[%2] GR32Bit:%vreg5
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
After Shuffling regions of basic block, state of BB#0:
BB#0: derived from LLVM BB %redefine_start1.entry
	%vreg13<def> = ADD %t5, %zero; GR32Bit:%vreg13
	%vreg15<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg15
	%vreg16<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg16
	%vreg17<def> = SRLI %vreg16, 12; GR32Bit:%vreg17,%vreg16
	%vreg18<def> = ADD %vreg15, %vreg17; GR32Bit:%vreg18,%vreg15,%vreg17
	%vreg19<def> = ADDI %zero, 16; GR32Bit:%vreg19
	%vreg20<def> = SRLI %t5, 22; GR32Bit:%vreg20
	%vreg21<def> = SRLI %t5, 12; GR32Bit:%vreg21
	%vreg22<def> = ANDI %vreg21, 15; GR32Bit:%vreg22,%vreg21
	%vreg23<def> = SRLI %t5, 6; GR32Bit:%vreg23
	%vreg24<def> = ANDI %vreg23, 63; GR32Bit:%vreg24,%vreg23
	%vreg25<def> = ADDI %zero, 832; GR32Bit:%vreg25
	%vreg26<def> = MUL %vreg20, %vreg25; GR32Bit:%vreg26,%vreg20,%vreg25
	%vreg27<def> = ADDI %zero, 52; GR32Bit:%vreg27
	%vreg28<def> = MUL %vreg22, %vreg27; GR32Bit:%vreg28,%vreg22,%vreg27
	%vreg29<def> = ADD %vreg28, %vreg24; GR32Bit:%vreg29,%vreg28,%vreg24
	%vreg30<def> = ADD %vreg29, %vreg26; GR32Bit:%vreg30,%vreg29,%vreg26
	%vreg31<def> = MUL %vreg30, %vreg19; GR32Bit:%vreg31,%vreg30,%vreg19
	%vreg14<def> = ADD %vreg18, %vreg31; GR32Bit:%vreg14,%vreg18,%vreg31
	%vreg4<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg4
	%vreg1<def> = ADDI %zero, <ga:@redefine_in_placeholder>[TF=3]; GR32Bit:%vreg1
	%vreg0<def> = LUI <ga:@redefine_in_placeholder>[TF=2]; GR32Bit:%vreg0
	%vreg2<def> = ADD %vreg1, %vreg0; GR32Bit:%vreg2,%vreg1,%vreg0
	%vreg3<def> = LW %vreg2, 0; mem:LD4[@redefine_in_placeholder] GR32Bit:%vreg3,%vreg2
	SW %vreg3, %vreg4, 0; mem:ST4[%3] GR32Bit:%vreg3,%vreg4
	%vreg5<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg5
	SW %zero, %vreg5, 0; mem:ST4[%2] GR32Bit:%vreg5
	%vreg32<def> = ADD %t5, %zero; GR32Bit:%vreg32
	%vreg34<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg34
	%vreg35<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg35
	%vreg36<def> = SRLI %vreg35, 12; GR32Bit:%vreg36,%vreg35
	%vreg37<def> = ADD %vreg34, %vreg36; GR32Bit:%vreg37,%vreg34,%vreg36
	%vreg38<def> = ADDI %zero, 16; GR32Bit:%vreg38
	%vreg39<def> = SRLI %t5, 22; GR32Bit:%vreg39
	%vreg40<def> = SRLI %t5, 12; GR32Bit:%vreg40
	%vreg41<def> = ANDI %vreg40, 15; GR32Bit:%vreg41,%vreg40
	%vreg42<def> = SRLI %t5, 6; GR32Bit:%vreg42
	%vreg43<def> = ANDI %vreg42, 63; GR32Bit:%vreg43,%vreg42
	%vreg44<def> = ADDI %zero, 832; GR32Bit:%vreg44
	%vreg45<def> = MUL %vreg39, %vreg44; GR32Bit:%vreg45,%vreg39,%vreg44
	%vreg46<def> = ADDI %zero, 52; GR32Bit:%vreg46
	%vreg47<def> = MUL %vreg41, %vreg46; GR32Bit:%vreg47,%vreg41,%vreg46
	%vreg48<def> = ADD %vreg47, %vreg43; GR32Bit:%vreg48,%vreg47,%vreg43
	%vreg49<def> = ADD %vreg48, %vreg45; GR32Bit:%vreg49,%vreg48,%vreg45
	%vreg50<def> = MUL %vreg49, %vreg38; GR32Bit:%vreg50,%vreg49,%vreg38
	%vreg33<def> = ADD %vreg37, %vreg50; GR32Bit:%vreg33,%vreg37,%vreg50
	%vreg51<def> = ADD %t5, %zero; GR32Bit:%vreg51
	%vreg53<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg53
	%vreg54<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg54
	%vreg55<def> = SRLI %vreg54, 12; GR32Bit:%vreg55,%vreg54
	%vreg56<def> = ADD %vreg53, %vreg55; GR32Bit:%vreg56,%vreg53,%vreg55
	%vreg57<def> = ADDI %zero, 16; GR32Bit:%vreg57
	%vreg58<def> = SRLI %t5, 22; GR32Bit:%vreg58
	%vreg59<def> = SRLI %t5, 12; GR32Bit:%vreg59
	%vreg60<def> = ANDI %vreg59, 15; GR32Bit:%vreg60,%vreg59
	%vreg61<def> = SRLI %t5, 6; GR32Bit:%vreg61
	%vreg62<def> = ANDI %vreg61, 63; GR32Bit:%vreg62,%vreg61
	%vreg63<def> = ADDI %zero, 832; GR32Bit:%vreg63
	%vreg64<def> = MUL %vreg58, %vreg63; GR32Bit:%vreg64,%vreg58,%vreg63
	%vreg65<def> = ADDI %zero, 52; GR32Bit:%vreg65
	%vreg66<def> = MUL %vreg60, %vreg65; GR32Bit:%vreg66,%vreg60,%vreg65
	%vreg67<def> = ADD %vreg66, %vreg62; GR32Bit:%vreg67,%vreg66,%vreg62
	%vreg68<def> = ADD %vreg67, %vreg64; GR32Bit:%vreg68,%vreg67,%vreg64
	%vreg69<def> = MUL %vreg68, %vreg57; GR32Bit:%vreg69,%vreg68,%vreg57
	%vreg52<def> = ADD %vreg56, %vreg69; GR32Bit:%vreg52,%vreg56,%vreg69
	%vreg70<def> = ADD %t5, %zero; GR32Bit:%vreg70
	%vreg72<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg72
	%vreg73<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg73
	%vreg74<def> = SRLI %vreg73, 12; GR32Bit:%vreg74,%vreg73
	%vreg75<def> = ADD %vreg72, %vreg74; GR32Bit:%vreg75,%vreg72,%vreg74
	%vreg76<def> = ADDI %zero, 16; GR32Bit:%vreg76
	%vreg77<def> = SRLI %t5, 22; GR32Bit:%vreg77
	%vreg78<def> = SRLI %t5, 12; GR32Bit:%vreg78
	%vreg79<def> = ANDI %vreg78, 15; GR32Bit:%vreg79,%vreg78
	%vreg80<def> = SRLI %t5, 6; GR32Bit:%vreg80
	%vreg81<def> = ANDI %vreg80, 63; GR32Bit:%vreg81,%vreg80
	%vreg82<def> = ADDI %zero, 832; GR32Bit:%vreg82
	%vreg83<def> = MUL %vreg77, %vreg82; GR32Bit:%vreg83,%vreg77,%vreg82
	%vreg84<def> = ADDI %zero, 52; GR32Bit:%vreg84
	%vreg85<def> = MUL %vreg79, %vreg84; GR32Bit:%vreg85,%vreg79,%vreg84
	%vreg86<def> = ADD %vreg85, %vreg81; GR32Bit:%vreg86,%vreg85,%vreg81
	%vreg87<def> = ADD %vreg86, %vreg83; GR32Bit:%vreg87,%vreg86,%vreg83
	%vreg88<def> = MUL %vreg87, %vreg76; GR32Bit:%vreg88,%vreg87,%vreg76
	%vreg71<def> = ADD %vreg75, %vreg88; GR32Bit:%vreg71,%vreg75,%vreg88
    Successors according to CFG: BB#1

*** Renumbered SlotIndexes 316-652 ***

*** Renumbered SlotIndexes 216-696 ***

*** Renumbered SlotIndexes 112-752 ***

*** Renumbered SlotIndexes 100-772 ***

*** Renumbered SlotIndexes 100-788 ***

*** Renumbered SlotIndexes 100-804 ***

*** Renumbered SlotIndexes 100-820 ***

*** Renumbered SlotIndexes 12-860 ***
Creating pHyperOp bundles for CEs for bb0
  %vreg32<def> = ADD %t5, %zero; GR32Bit:%vreg32
starting at   %vreg13<def> = ADD %t5, %zero; GR32Bit:%vreg13
  %vreg51<def> = ADD %t5, %zero; GR32Bit:%vreg51
starting at   %vreg32<def> = ADD %t5, %zero; GR32Bit:%vreg32
  %vreg70<def> = ADD %t5, %zero; GR32Bit:%vreg70
starting at   %vreg51<def> = ADD %t5, %zero; GR32Bit:%vreg51
starting at   %vreg70<def> = ADD %t5, %zero; GR32Bit:%vreg70
After bundling, state of BB0:BB#0: derived from LLVM BB %redefine_start1.entry
	%vreg13<def> = ADD %t5, %zero; GR32Bit:%vreg13
	  * %vreg15<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg15
	  * %vreg16<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg16
	  * %vreg17<def> = SRLI %vreg16, 12; GR32Bit:%vreg17,%vreg16
	  * %vreg18<def> = ADD %vreg15, %vreg17; GR32Bit:%vreg18,%vreg15,%vreg17
	  * %vreg19<def> = ADDI %zero, 16; GR32Bit:%vreg19
	  * %vreg20<def> = SRLI %t5, 22; GR32Bit:%vreg20
	  * %vreg21<def> = SRLI %t5, 12; GR32Bit:%vreg21
	  * %vreg22<def> = ANDI %vreg21, 15; GR32Bit:%vreg22,%vreg21
	  * %vreg23<def> = SRLI %t5, 6; GR32Bit:%vreg23
	  * %vreg24<def> = ANDI %vreg23, 63; GR32Bit:%vreg24,%vreg23
	  * %vreg25<def> = ADDI %zero, 832; GR32Bit:%vreg25
	  * %vreg26<def> = MUL %vreg20, %vreg25; GR32Bit:%vreg26,%vreg20,%vreg25
	  * %vreg27<def> = ADDI %zero, 52; GR32Bit:%vreg27
	  * %vreg28<def> = MUL %vreg22, %vreg27; GR32Bit:%vreg28,%vreg22,%vreg27
	  * %vreg29<def> = ADD %vreg28, %vreg24; GR32Bit:%vreg29,%vreg28,%vreg24
	  * %vreg30<def> = ADD %vreg29, %vreg26; GR32Bit:%vreg30,%vreg29,%vreg26
	  * %vreg31<def> = MUL %vreg30, %vreg19; GR32Bit:%vreg31,%vreg30,%vreg19
	  * %vreg14<def> = ADD %vreg18, %vreg31; GR32Bit:%vreg14,%vreg18,%vreg31
	  * %vreg4<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg4
	  * %vreg1<def> = ADDI %zero, <ga:@redefine_in_placeholder>[TF=3]; GR32Bit:%vreg1
	  * %vreg0<def> = LUI <ga:@redefine_in_placeholder>[TF=2]; GR32Bit:%vreg0
	  * %vreg2<def> = ADD %vreg1, %vreg0; GR32Bit:%vreg2,%vreg1,%vreg0
	  * %vreg3<def> = LW %vreg2, 0; mem:LD4[@redefine_in_placeholder] GR32Bit:%vreg3,%vreg2
	  * SW %vreg3, %vreg4, 0; mem:ST4[%3] GR32Bit:%vreg3,%vreg4
	  * %vreg5<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg5
	  * SW %zero, %vreg5, 0; mem:ST4[%2] GR32Bit:%vreg5
	%vreg32<def> = ADD %t5, %zero; GR32Bit:%vreg32
	  * %vreg34<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg34
	  * %vreg35<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg35
	  * %vreg36<def> = SRLI %vreg35, 12; GR32Bit:%vreg36,%vreg35
	  * %vreg37<def> = ADD %vreg34, %vreg36; GR32Bit:%vreg37,%vreg34,%vreg36
	  * %vreg38<def> = ADDI %zero, 16; GR32Bit:%vreg38
	  * %vreg39<def> = SRLI %t5, 22; GR32Bit:%vreg39
	  * %vreg40<def> = SRLI %t5, 12; GR32Bit:%vreg40
	  * %vreg41<def> = ANDI %vreg40, 15; GR32Bit:%vreg41,%vreg40
	  * %vreg42<def> = SRLI %t5, 6; GR32Bit:%vreg42
	  * %vreg43<def> = ANDI %vreg42, 63; GR32Bit:%vreg43,%vreg42
	  * %vreg44<def> = ADDI %zero, 832; GR32Bit:%vreg44
	  * %vreg45<def> = MUL %vreg39, %vreg44; GR32Bit:%vreg45,%vreg39,%vreg44
	  * %vreg46<def> = ADDI %zero, 52; GR32Bit:%vreg46
	  * %vreg47<def> = MUL %vreg41, %vreg46; GR32Bit:%vreg47,%vreg41,%vreg46
	  * %vreg48<def> = ADD %vreg47, %vreg43; GR32Bit:%vreg48,%vreg47,%vreg43
	  * %vreg49<def> = ADD %vreg48, %vreg45; GR32Bit:%vreg49,%vreg48,%vreg45
	  * %vreg50<def> = MUL %vreg49, %vreg38; GR32Bit:%vreg50,%vreg49,%vreg38
	  * %vreg33<def> = ADD %vreg37, %vreg50; GR32Bit:%vreg33,%vreg37,%vreg50
	%vreg51<def> = ADD %t5, %zero; GR32Bit:%vreg51
	  * %vreg53<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg53
	  * %vreg54<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg54
	  * %vreg55<def> = SRLI %vreg54, 12; GR32Bit:%vreg55,%vreg54
	  * %vreg56<def> = ADD %vreg53, %vreg55; GR32Bit:%vreg56,%vreg53,%vreg55
	  * %vreg57<def> = ADDI %zero, 16; GR32Bit:%vreg57
	  * %vreg58<def> = SRLI %t5, 22; GR32Bit:%vreg58
	  * %vreg59<def> = SRLI %t5, 12; GR32Bit:%vreg59
	  * %vreg60<def> = ANDI %vreg59, 15; GR32Bit:%vreg60,%vreg59
	  * %vreg61<def> = SRLI %t5, 6; GR32Bit:%vreg61
	  * %vreg62<def> = ANDI %vreg61, 63; GR32Bit:%vreg62,%vreg61
	  * %vreg63<def> = ADDI %zero, 832; GR32Bit:%vreg63
	  * %vreg64<def> = MUL %vreg58, %vreg63; GR32Bit:%vreg64,%vreg58,%vreg63
	  * %vreg65<def> = ADDI %zero, 52; GR32Bit:%vreg65
	  * %vreg66<def> = MUL %vreg60, %vreg65; GR32Bit:%vreg66,%vreg60,%vreg65
	  * %vreg67<def> = ADD %vreg66, %vreg62; GR32Bit:%vreg67,%vreg66,%vreg62
	  * %vreg68<def> = ADD %vreg67, %vreg64; GR32Bit:%vreg68,%vreg67,%vreg64
	  * %vreg69<def> = MUL %vreg68, %vreg57; GR32Bit:%vreg69,%vreg68,%vreg57
	  * %vreg52<def> = ADD %vreg56, %vreg69; GR32Bit:%vreg52,%vreg56,%vreg69
	%vreg70<def> = ADD %t5, %zero; GR32Bit:%vreg70
	  * %vreg72<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg72
	  * %vreg73<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg73
	  * %vreg74<def> = SRLI %vreg73, 12; GR32Bit:%vreg74,%vreg73
	  * %vreg75<def> = ADD %vreg72, %vreg74; GR32Bit:%vreg75,%vreg72,%vreg74
	  * %vreg76<def> = ADDI %zero, 16; GR32Bit:%vreg76
	  * %vreg77<def> = SRLI %t5, 22; GR32Bit:%vreg77
	  * %vreg78<def> = SRLI %t5, 12; GR32Bit:%vreg78
	  * %vreg79<def> = ANDI %vreg78, 15; GR32Bit:%vreg79,%vreg78
	  * %vreg80<def> = SRLI %t5, 6; GR32Bit:%vreg80
	  * %vreg81<def> = ANDI %vreg80, 63; GR32Bit:%vreg81,%vreg80
	  * %vreg82<def> = ADDI %zero, 832; GR32Bit:%vreg82
	  * %vreg83<def> = MUL %vreg77, %vreg82; GR32Bit:%vreg83,%vreg77,%vreg82
	  * %vreg84<def> = ADDI %zero, 52; GR32Bit:%vreg84
	  * %vreg85<def> = MUL %vreg79, %vreg84; GR32Bit:%vreg85,%vreg79,%vreg84
	  * %vreg86<def> = ADD %vreg85, %vreg81; GR32Bit:%vreg86,%vreg85,%vreg81
	  * %vreg87<def> = ADD %vreg86, %vreg83; GR32Bit:%vreg87,%vreg86,%vreg83
	  * %vreg88<def> = MUL %vreg87, %vreg76; GR32Bit:%vreg88,%vreg87,%vreg76
	  * %vreg71<def> = ADD %vreg75, %vreg88; GR32Bit:%vreg71,%vreg75,%vreg88
    Successors according to CFG: BB#1

-------------
Starting new basic block BB#1
********** MI Scheduling **********
redefine_start1:BB#1 redefine_start1.for.cond
  From: JAL <BB#2>
    To: JAL <BB#2>
 Remaining: 7
Max Pressure: Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 0
Excess PSets: 
0 subtrees:
*** Final schedule for BB#1 ***

Partitioning instructions of the region into multiple CEs

*** Renumbered SlotIndexes 816-872 ***

*** Renumbered SlotIndexes 828-884 ***

*** Renumbered SlotIndexes 840-896 ***

*** Renumbered SlotIndexes 852-908 ***

*** Renumbered SlotIndexes 864-920 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
********** MI Scheduling **********
redefine_start1:BB#1 redefine_start1.for.cond
  From: %vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
    To: BGT <BB#3>, %vreg7, %vreg10; GR32Bit:%vreg7,%vreg10
 Remaining: 0
Max Pressure: GR32Bit=3
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 3
Excess PSets: 
2 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 0
  SU(5) in tree 1
SU(0):   %vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 24
  Successors:
   val SU(1): Latency=5 Reg=%vreg6

SU(1):   %vreg7<def> = LW %vreg6, 0; mem:LD4[%2] GR32Bit:%vreg7,%vreg6
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 19
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg6
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg7
   val SU(2): Latency=15 Reg=%vreg7

SU(2):   %vreg8<def> = SLTI %vreg7, 25; GR32Bit:%vreg8,%vreg7
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 4
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg7
  Successors:
   val SU(4): Latency=4 Reg=%vreg8

SU(3):   %vreg9<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(4): Latency=5 Reg=%vreg9

SU(4):   SB %vreg8, %vreg9, 0; mem:ST1[%1](align=4) GR32Bit:%vreg8,%vreg9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 24
  Height             : 0
  Predecessors:
   val SU(2): Latency=4 Reg=%vreg8
   val SU(3): Latency=5 Reg=%vreg9
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(5):   %vreg10<def> = ADDI %zero, 24; GR32Bit:%vreg10
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(4294967295): Latency=5 Reg=%vreg10

SU(0):   %vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 24
  Successors:
   val SU(1): Latency=5 Reg=%vreg6

SU(1):   %vreg7<def> = LW %vreg6, 0; mem:LD4[%2] GR32Bit:%vreg7,%vreg6
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 19
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg6
  Successors:
   val SU(4294967295): Latency=15 Reg=%vreg7
   val SU(2): Latency=15 Reg=%vreg7

SU(2):   %vreg8<def> = SLTI %vreg7, 25; GR32Bit:%vreg8,%vreg7
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 4
  Predecessors:
   val SU(1): Latency=15 Reg=%vreg7
  Successors:
   val SU(4): Latency=4 Reg=%vreg8

SU(3):   %vreg9<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(4): Latency=5 Reg=%vreg9

SU(4):   SB %vreg8, %vreg9, 0; mem:ST1[%1](align=4) GR32Bit:%vreg8,%vreg9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 24
  Height             : 0
  Predecessors:
   val SU(2): Latency=4 Reg=%vreg8
   val SU(3): Latency=5 Reg=%vreg9
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(5):   %vreg10<def> = ADDI %zero, 24; GR32Bit:%vreg10
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(4294967295): Latency=5 Reg=%vreg10

Pick node SU(5)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg10<def> = ADDI %zero, 24; GR32Bit:%vreg10
handleMove 796B -> 752B: %vreg10<def> = ADDI %zero, 24; GR32Bit:%vreg10
     %vreg10:	[796r,804r:0)  0@796r
        -->	[752r,804r:0)  0@752r
     zero:	EMPTY
        -->	EMPTY
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
Pick node SU(3)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg9<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg9
handleMove 780B -> 760B: %vreg9<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg9
     %vreg9:	[780r,788r:0)  0@780r
        -->	[760r,788r:0)  0@760r
     t5:	EMPTY
        -->	EMPTY
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg7<def> = LW %vreg6, 0; mem:LD4[%2] GR32Bit:%vreg7,%vreg6
Pick node SU(2)  ILP: 3 / 21 = 0.142857 Tree: 0 @0
Scheduling %vreg8<def> = SLTI %vreg7, 25; GR32Bit:%vreg8,%vreg7
Pick node SU(4)  ILP: 5 / 25 = 0.2 Tree: 0 @0
Scheduling SB %vreg8, %vreg9, 0; mem:ST1[%1](align=4) GR32Bit:%vreg8,%vreg9
*** Final schedule for BB#1 ***
SU(5):   %vreg10<def> = ADDI %zero, 24; GR32Bit:%vreg10
SU(0):   %vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
SU(3):   %vreg9<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg9
SU(1):   %vreg7<def> = LW %vreg6, 0; mem:LD4[%2] GR32Bit:%vreg7,%vreg6
SU(2):   %vreg8<def> = SLTI %vreg7, 25; GR32Bit:%vreg8,%vreg7
SU(4):   SB %vreg8, %vreg9, 0; mem:ST1[%1](align=4) GR32Bit:%vreg8,%vreg9

Partitioning instructions of the region into multiple CEs
instr:  %vreg10<def> = ADDI %zero, 24; GR32Bit:%vreg10
instr:  %vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
instr:  %vreg9<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg9
instr:  %vreg7<def> = LW %vreg6, 0; mem:LD4[%2] GR32Bit:%vreg7,%vreg6
instr:  %vreg8<def> = SLTI %vreg7, 25; GR32Bit:%vreg8,%vreg7
instr:  SB %vreg8, %vreg9, 0; mem:ST1[%1](align=4) GR32Bit:%vreg8,%vreg9

*** Renumbered SlotIndexes 792-960 ***

*** Renumbered SlotIndexes 804-972 ***

*** Renumbered SlotIndexes 816-984 ***

*** Renumbered SlotIndexes 828-996 ***

*** Renumbered SlotIndexes 840-1008 ***

*** Renumbered SlotIndexes 852-1020 ***

*** Renumbered SlotIndexes 864-1032 ***

*** Renumbered SlotIndexes 876-1044 ***

*** Renumbered SlotIndexes 888-1056 ***

*** Renumbered SlotIndexes 916-1068 ***

*** Renumbered SlotIndexes 928-1080 ***

*** Renumbered SlotIndexes 940-1092 ***

*** Renumbered SlotIndexes 952-1104 ***

*** Renumbered SlotIndexes 964-1116 ***
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs

renaming register of operand that belongs to ce 1 but was defined in0
%vreg7<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg7<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg7<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg10<def>creating new replacement

renaming register of operand that belongs to ce 2 but was defined in0
%vreg10<def>creating new replacement

renaming register of operand that belongs to ce 3 but was defined in0
%vreg10<def>creating new replacement

renaming register of operand that belongs to ce 1 but was defined in0
%vreg7
renaming register of operand that belongs to ce 1 but was defined in0
%vreg10
renaming register of operand that belongs to ce 2 but was defined in0
%vreg7
renaming register of operand that belongs to ce 2 but was defined in0
%vreg10
renaming register of operand that belongs to ce 3 but was defined in0
%vreg7
renaming register of operand that belongs to ce 3 but was defined in0
%vreg10After Shuffling regions of basic block, state of BB#1:
BB#1: derived from LLVM BB %redefine_start1.for.cond
    Predecessors according to CFG: BB#0
	%vreg10<def> = ADDI %zero, 24; GR32Bit:%vreg10
	%vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
	%vreg9<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg9
	%vreg7<def> = LW %vreg6, 0; mem:LD4[%2] GR32Bit:%vreg7,%vreg6
	%vreg8<def> = SLTI %vreg7, 25; GR32Bit:%vreg8,%vreg7
	SB %vreg8, %vreg9, 0; mem:ST1[%1](align=4) GR32Bit:%vreg8,%vreg9
	%vreg89<def> = LUI 1; GR32Bit:%vreg89
	WRITEPM %vreg89, %vreg7, 0; GR32Bit:%vreg89,%vreg7
	%vreg91<def> = LUI 2; GR32Bit:%vreg91
	WRITEPM %vreg91, %vreg7, 0; GR32Bit:%vreg91,%vreg7
	%vreg93<def> = LUI 3; GR32Bit:%vreg93
	WRITEPM %vreg93, %vreg7, 0; GR32Bit:%vreg93,%vreg7
	WRITEPM %vreg89, %vreg10, 4; GR32Bit:%vreg89,%vreg10
	WRITEPM %vreg91, %vreg10, 4; GR32Bit:%vreg91,%vreg10
	WRITEPM %vreg93, %vreg10, 4; GR32Bit:%vreg93,%vreg10
	BGT <BB#3>, %vreg7, %vreg10; GR32Bit:%vreg7,%vreg10
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#2>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg90<def> = LUI 1; GR32Bit:%vreg90
	%vreg95<def> = DREADPM %vreg90, 0; GR32Bit:%vreg95,%vreg90
	%vreg98<def> = DREADPM %vreg90, 4; GR32Bit:%vreg98,%vreg90
	BGT <BB#3>, %vreg95, %vreg98; GR32Bit:%vreg95,%vreg98
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#2>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg92<def> = LUI 2; GR32Bit:%vreg92
	%vreg96<def> = DREADPM %vreg92, 0; GR32Bit:%vreg96,%vreg92
	%vreg99<def> = DREADPM %vreg92, 4; GR32Bit:%vreg99,%vreg92
	BGT <BB#3>, %vreg96, %vreg99; GR32Bit:%vreg96,%vreg99
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#2>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg94<def> = LUI 3; GR32Bit:%vreg94
	%vreg97<def> = DREADPM %vreg94, 0; GR32Bit:%vreg97,%vreg94
	%vreg100<def> = DREADPM %vreg94, 4; GR32Bit:%vreg100,%vreg94
	BGT <BB#3>, %vreg97, %vreg100; GR32Bit:%vreg97,%vreg100
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	JAL <BB#2>
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#2(16) BB#3(16)

*** Renumbered SlotIndexes 836-1172 ***

*** Renumbered SlotIndexes 836-1188 ***

*** Renumbered SlotIndexes 836-1204 ***

*** Renumbered SlotIndexes 836-1220 ***

*** Renumbered SlotIndexes 812-1236 ***

*** Renumbered SlotIndexes 812-1252 ***

*** Renumbered SlotIndexes 812-1268 ***

*** Renumbered SlotIndexes 812-1284 ***

*** Renumbered SlotIndexes 792-1304 ***

*** Renumbered SlotIndexes 792-1320 ***

*** Renumbered SlotIndexes 792-1336 ***

*** Renumbered SlotIndexes 792-1352 ***

*** Renumbered SlotIndexes 792-1368 ***

*** Renumbered SlotIndexes 792-1384 ***

*** Renumbered SlotIndexes 792-1400 ***
Creating pHyperOp bundles for CEs for bb1
  %vreg90<def> = LUI 1; GR32Bit:%vreg90
starting at   %vreg10<def> = ADDI %zero, 24; GR32Bit:%vreg10
  %vreg92<def> = LUI 2; GR32Bit:%vreg92
starting at   %vreg90<def> = LUI 1; GR32Bit:%vreg90
  %vreg94<def> = LUI 3; GR32Bit:%vreg94
starting at   %vreg92<def> = LUI 2; GR32Bit:%vreg92
starting at   %vreg94<def> = LUI 3; GR32Bit:%vreg94
After bundling, state of BB1:BB#1: derived from LLVM BB %redefine_start1.for.cond
    Predecessors according to CFG: BB#0
	%vreg10<def> = ADDI %zero, 24; GR32Bit:%vreg10
	  * %vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
	  * %vreg9<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg9
	  * %vreg7<def> = LW %vreg6, 0; mem:LD4[%2] GR32Bit:%vreg7,%vreg6
	  * %vreg8<def> = SLTI %vreg7, 25; GR32Bit:%vreg8,%vreg7
	  * SB %vreg8, %vreg9, 0; mem:ST1[%1](align=4) GR32Bit:%vreg8,%vreg9
	  * %vreg89<def> = LUI 1; GR32Bit:%vreg89
	  * WRITEPM %vreg89, %vreg7, 0; GR32Bit:%vreg89,%vreg7
	  * %vreg91<def> = LUI 2; GR32Bit:%vreg91
	  * WRITEPM %vreg91, %vreg7, 0; GR32Bit:%vreg91,%vreg7
	  * %vreg93<def> = LUI 3; GR32Bit:%vreg93
	  * WRITEPM %vreg93, %vreg7, 0; GR32Bit:%vreg93,%vreg7
	  * WRITEPM %vreg89, %vreg10, 4; GR32Bit:%vreg89,%vreg10
	  * WRITEPM %vreg91, %vreg10, 4; GR32Bit:%vreg91,%vreg10
	  * WRITEPM %vreg93, %vreg10, 4; GR32Bit:%vreg93,%vreg10
	  * BGT <BB#3>, %vreg7, %vreg10; GR32Bit:%vreg7,%vreg10
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg90<def> = LUI 1; GR32Bit:%vreg90
	  * %vreg95<def> = DREADPM %vreg90, 0; GR32Bit:%vreg95,%vreg90
	  * %vreg98<def> = DREADPM %vreg90, 4; GR32Bit:%vreg98,%vreg90
	  * BGT <BB#3>, %vreg95, %vreg98; GR32Bit:%vreg95,%vreg98
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg92<def> = LUI 2; GR32Bit:%vreg92
	  * %vreg96<def> = DREADPM %vreg92, 0; GR32Bit:%vreg96,%vreg92
	  * %vreg99<def> = DREADPM %vreg92, 4; GR32Bit:%vreg99,%vreg92
	  * BGT <BB#3>, %vreg96, %vreg99; GR32Bit:%vreg96,%vreg99
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg94<def> = LUI 3; GR32Bit:%vreg94
	  * %vreg97<def> = DREADPM %vreg94, 0; GR32Bit:%vreg97,%vreg94
	  * %vreg100<def> = DREADPM %vreg94, 4; GR32Bit:%vreg100,%vreg94
	  * BGT <BB#3>, %vreg97, %vreg100; GR32Bit:%vreg97,%vreg100
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#2(16) BB#3(16)

-------------
Starting new basic block BB#2
After Shuffling regions of basic block, state of BB#2:
BB#2: derived from LLVM BB %redefine_start1.for.body
    Predecessors according to CFG: BB#1
    Successors according to CFG: BB#3
After bundling, state of BB2:BB#2: derived from LLVM BB %redefine_start1.for.body
    Predecessors according to CFG: BB#1
    Successors according to CFG: BB#3

-------------
Starting new basic block BB#3
********** MI Scheduling **********
redefine_start1:BB#3 redefine_start1.return
  From: %vreg11<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg11
    To: End Remaining: 0
Max Pressure: GR32Bit=2
Live In: 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 2
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
SU(0):   %vreg11<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg11
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(2): Latency=5 Reg=%vreg11

SU(1):   %vreg12<def> = ADDI %zero, 1; GR32Bit:%vreg12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
   val SU(2): Latency=4 Reg=%vreg12

SU(2):   SB %vreg12, %vreg11, 0; mem:ST1[%0](align=4) GR32Bit:%vreg12,%vreg11
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 5
  Height             : 0
  Predecessors:
   val SU(1): Latency=4 Reg=%vreg12
   val SU(0): Latency=5 Reg=%vreg11
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg11<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg11
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(2): Latency=5 Reg=%vreg11

SU(1):   %vreg12<def> = ADDI %zero, 1; GR32Bit:%vreg12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
   val SU(2): Latency=4 Reg=%vreg12

SU(2):   SB %vreg12, %vreg11, 0; mem:ST1[%0](align=4) GR32Bit:%vreg12,%vreg11
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 5
  Height             : 0
  Predecessors:
   val SU(1): Latency=4 Reg=%vreg12
   val SU(0): Latency=5 Reg=%vreg11
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(1)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg12<def> = ADDI %zero, 1; GR32Bit:%vreg12
handleMove 1384B -> 1372B: %vreg12<def> = ADDI %zero, 1; GR32Bit:%vreg12
     %vreg12:	[1384r,1392r:0)  0@1384r
        -->	[1372r,1392r:0)  0@1372r
     zero:	EMPTY
        -->	EMPTY
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg11<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg11
Pick node SU(2)  ILP: 3 / 6 = 0.5 Tree: 0 @0
Scheduling SB %vreg12, %vreg11, 0; mem:ST1[%0](align=4) GR32Bit:%vreg12,%vreg11
*** Final schedule for BB#3 ***
SU(1):   %vreg12<def> = ADDI %zero, 1; GR32Bit:%vreg12
SU(0):   %vreg11<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg11
SU(2):   SB %vreg12, %vreg11, 0; mem:ST1[%0](align=4) GR32Bit:%vreg12,%vreg11

Partitioning instructions of the region into multiple CEs
instr:  %vreg12<def> = ADDI %zero, 1; GR32Bit:%vreg12
instr:  %vreg11<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg11
instr:  SB %vreg12, %vreg11, 0; mem:ST1[%0](align=4) GR32Bit:%vreg12,%vreg11
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
before falloc, state of bb3:BB#3: derived from LLVM BB %redefine_start1.return
    Predecessors according to CFG: BB#1 BB#2
	%vreg12<def> = ADDI %zero, 1; GR32Bit:%vreg12
	%vreg11<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg11
	SB %vreg12, %vreg11, 0; mem:ST1[%0](align=4) GR32Bit:%vreg12,%vreg11
Adding all fallocs first to avoid stalls due to sequential fallocs and fbinds
Adding writecm(for writing sync count to context frames) and fbind instructions
live end of child is itself
Adding localref sw instructions to hyperOp redefine_start1

*** Renumbered SlotIndexes 1396-1412 ***

*** Renumbered SlotIndexes 1408-1424 ***

*** Renumbered SlotIndexes 1420-1436 ***

*** Renumbered SlotIndexes 1432-1448 ***

*** Renumbered SlotIndexes 1444-1460 ***

*** Renumbered SlotIndexes 1456-1472 ***

*** Renumbered SlotIndexes 1468-1484 ***

*** Renumbered SlotIndexes 1480-1496 ***

*** Renumbered SlotIndexes 1492-1508 ***
localref sw to redefine_start21:  SW %vreg123, %vreg122, 0; GR32Bit:%vreg123,%vreg122
Adding writecm instructions to hyperOp redefine_start1

*** Renumbered SlotIndexes 1504-1520 ***

*** Renumbered SlotIndexes 1516-1532 ***
i mustve come here
added writecm to target ce:0:  WRITECM %vreg126, %vreg101, 0; GR32Bit:%vreg126,%vreg101

*** Renumbered SlotIndexes 1528-1544 ***

*** Renumbered SlotIndexes 1540-1556 ***

*** Renumbered SlotIndexes 1552-1568 ***
i mustve come here
added writecm to target ce:2:  WRITECM %vreg129, %vreg103, 4; GR32Bit:%vreg129,%vreg103

*** Renumbered SlotIndexes 1564-1580 ***

*** Renumbered SlotIndexes 1576-1592 ***

*** Renumbered SlotIndexes 1588-1604 ***

*** Renumbered SlotIndexes 1600-1616 ***

*** Renumbered SlotIndexes 1612-1628 ***
i mustve come here
added writecm to target ce:1:  WRITECM %vreg135, %vreg102, 0; GR32Bit:%vreg135,%vreg102

*** Renumbered SlotIndexes 1624-1640 ***
i mustve come here
added writecm to target ce:0:  WRITECM %vreg136, %vreg101, 4; GR32Bit:%vreg136,%vreg101

*** Renumbered SlotIndexes 1636-1652 ***
Adding writecmp and sync instructions
problem with which child exactly?redefine_start3 with edge of type:6

*** Renumbered SlotIndexes 1648-1664 ***

*** Renumbered SlotIndexes 1660-1676 ***

*** Renumbered SlotIndexes 1672-1688 ***
problem with which child exactly?redefine_start21 with edge of type:2

*** Renumbered SlotIndexes 1684-1700 ***

*** Renumbered SlotIndexes 1696-1712 ***
problem with which child exactly?data_init4 with edge of type:2

*** Renumbered SlotIndexes 1708-1724 ***

*** Renumbered SlotIndexes 1720-1736 ***

*** Renumbered SlotIndexes 1732-1748 ***
Adding endHyperOp instructions to each pHyperOp

*** Renumbered SlotIndexes 1744-1760 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 1756-1772 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 1768-1784 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 1780-1796 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 1792-1808 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 1804-1820 ***
  %zero<def> = ADDI %zero, 0
After Shuffling regions of basic block, state of BB#3:
BB#3: derived from LLVM BB %redefine_start1.return
    Predecessors according to CFG: BB#1 BB#2
	%vreg12<def> = ADDI %zero, 1; GR32Bit:%vreg12
	%vreg11<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg11
	SB %vreg12, %vreg11, 0; mem:ST1[%0](align=4) GR32Bit:%vreg12,%vreg11
	%vreg101<def> = ADDI %zero, 128; GR32Bit:%vreg101
	%vreg105<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg105
	%vreg106<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg106
	%vreg107<def> = SRLI %vreg106, 12; GR32Bit:%vreg107,%vreg106
	%vreg108<def> = ADD %vreg105, %vreg107; GR32Bit:%vreg108,%vreg105,%vreg107
	%vreg109<def> = ADDI %zero, 16; GR32Bit:%vreg109
	%vreg110<def> = SRLI %vreg101, 22; GR32Bit:%vreg110,%vreg101
	%vreg111<def> = SRLI %vreg101, 12; GR32Bit:%vreg111,%vreg101
	%vreg112<def> = ANDI %vreg111, 15; GR32Bit:%vreg112,%vreg111
	%vreg113<def> = SRLI %vreg101, 6; GR32Bit:%vreg113,%vreg101
	%vreg114<def> = ANDI %vreg113, 63; GR32Bit:%vreg114,%vreg113
	%vreg115<def> = ADDI %zero, 832; GR32Bit:%vreg115
	%vreg116<def> = MUL %vreg110, %vreg115; GR32Bit:%vreg116,%vreg110,%vreg115
	%vreg117<def> = ADDI %zero, 52; GR32Bit:%vreg117
	%vreg118<def> = MUL %vreg112, %vreg117; GR32Bit:%vreg118,%vreg112,%vreg117
	%vreg119<def> = ADD %vreg118, %vreg114; GR32Bit:%vreg119,%vreg118,%vreg114
	%vreg120<def> = ADD %vreg119, %vreg116; GR32Bit:%vreg120,%vreg119,%vreg116
	%vreg121<def> = MUL %vreg120, %vreg109; GR32Bit:%vreg121,%vreg120,%vreg109
	%vreg122<def> = ADD %vreg121, %vreg108; GR32Bit:%vreg122,%vreg121,%vreg108
	%vreg123<def> = LW %t5, 8; GR32Bit:%vreg123
	SW %vreg123, %vreg122, 0; GR32Bit:%vreg123,%vreg122
	%vreg125<def> = LUI 0; GR32Bit:%vreg125
	%vreg126<def> = DREADPM %vreg125, 0; GR32Bit:%vreg126,%vreg125
	WRITECM %vreg126, %vreg101, 0; GR32Bit:%vreg126,%vreg101
	%vreg131<def> = DREADPM %vreg125, 4; GR32Bit:%vreg131,%vreg125
	%vreg132<def> = LW %t5, <fi#3>; GR32Bit:%vreg132
	WRITECM %vreg131, %vreg132, 0; GR32Bit:%vreg131,%vreg132
	%vreg133<def> = LUI 1; GR32Bit:%vreg133
	WRITEPM %vreg133, %vreg101, 0; GR32Bit:%vreg133,%vreg101
	%vreg136<def> = DREADPM %vreg125, 8; GR32Bit:%vreg136,%vreg125
	WRITECM %vreg136, %vreg101, 4; GR32Bit:%vreg136,%vreg101
	%vreg141<def> = LUI 3; GR32Bit:%vreg141
	WRITEPM %vreg141, %vreg101, 4; GR32Bit:%vreg141,%vreg101
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg102<def> = ADDI %zero, 192; GR32Bit:%vreg102
	%vreg104<def> = ADDI %zero, 2; GR32Bit:%vreg104
	WRITECM %vreg102, %vreg104, 60; GR32Bit:%vreg102,%vreg104
	%vreg124<def> = LUI 0; GR32Bit:%vreg124
	WRITEPM %vreg124, %vreg102, 0; GR32Bit:%vreg124,%vreg102
	%vreg127<def> = LUI 2; GR32Bit:%vreg127
	WRITEPM %vreg127, %vreg102, 0; GR32Bit:%vreg127,%vreg102
	%vreg134<def> = LUI 1; GR32Bit:%vreg134
	%vreg135<def> = DREADPM %vreg134, 0; GR32Bit:%vreg135,%vreg134
	WRITECM %vreg135, %vreg102, 0; GR32Bit:%vreg135,%vreg102
	%vreg137<def> = LUI 3; GR32Bit:%vreg137
	WRITEPM %vreg137, %vreg102, 0; GR32Bit:%vreg137,%vreg102
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg103<def> = ADDI %zero, 64; GR32Bit:%vreg103
	%vreg128<def> = LUI 2; GR32Bit:%vreg128
	%vreg129<def> = DREADPM %vreg128, 0; GR32Bit:%vreg129,%vreg128
	WRITECM %vreg129, %vreg103, 4; GR32Bit:%vreg129,%vreg103
	%vreg130<def> = LUI 0; GR32Bit:%vreg130
	WRITEPM %vreg130, %vreg103, 4; GR32Bit:%vreg130,%vreg103
	WRITEPM %vreg130, %vreg103, 8; GR32Bit:%vreg130,%vreg103
	%vreg144<def> = LUI 3; GR32Bit:%vreg144
	WRITEPM %vreg144, %vreg103, 8; GR32Bit:%vreg144,%vreg103
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg138<def> = LUI 3; GR32Bit:%vreg138
	%vreg139<def> = DREADPM %vreg138, 0; GR32Bit:%vreg139,%vreg138
	%vreg140<def> = ADDI %zero, -1; GR32Bit:%vreg140
	SYNC %vreg139, %vreg140, 60; GR32Bit:%vreg139,%vreg140
	%vreg142<def> = DREADPM %vreg138, 4; GR32Bit:%vreg142,%vreg138
	%vreg143<def> = LW %t5, <fi#1>; GR32Bit:%vreg143
	WRITECMP %vreg142, %vreg143, 1; GR32Bit:%vreg142,%vreg143
	%vreg145<def> = DREADPM %vreg138, 8; GR32Bit:%vreg145,%vreg138
	%vreg146<def> = LW %t5, <fi#1>; GR32Bit:%vreg146
	WRITECMP %vreg145, %vreg146, 0; GR32Bit:%vreg145,%vreg146
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 1632-1888 ***

*** Renumbered SlotIndexes 1632-1904 ***

*** Renumbered SlotIndexes 1632-1920 ***

*** Renumbered SlotIndexes 1548-1956 ***

*** Renumbered SlotIndexes 1548-1972 ***

*** Renumbered SlotIndexes 1548-1988 ***

*** Renumbered SlotIndexes 1548-2004 ***

*** Renumbered SlotIndexes 1548-2020 ***

*** Renumbered SlotIndexes 1392-2080 ***

*** Renumbered SlotIndexes 1392-2096 ***

*** Renumbered SlotIndexes 1392-2112 ***

*** Renumbered SlotIndexes 1392-2128 ***

*** Renumbered SlotIndexes 1392-2144 ***

*** Renumbered SlotIndexes 1392-2160 ***

*** Renumbered SlotIndexes 1392-2176 ***

*** Renumbered SlotIndexes 1392-2192 ***

*** Renumbered SlotIndexes 1392-2208 ***

*** Renumbered SlotIndexes 1392-2224 ***

*** Renumbered SlotIndexes 1392-2240 ***

*** Renumbered SlotIndexes 1392-2256 ***

*** Renumbered SlotIndexes 1392-2272 ***

*** Renumbered SlotIndexes 1392-2288 ***

*** Renumbered SlotIndexes 1392-2304 ***

*** Renumbered SlotIndexes 1392-2320 ***

*** Renumbered SlotIndexes 1392-2336 ***

*** Renumbered SlotIndexes 1392-2352 ***

*** Renumbered SlotIndexes 1392-2368 ***
Creating pHyperOp bundles for CEs for bb3
  %vreg102<def> = ADDI %zero, 192; GR32Bit:%vreg102
starting at   %vreg12<def> = ADDI %zero, 1; GR32Bit:%vreg12
  %vreg103<def> = ADDI %zero, 64; GR32Bit:%vreg103
starting at   %vreg102<def> = ADDI %zero, 192; GR32Bit:%vreg102
  %vreg138<def> = LUI 3; GR32Bit:%vreg138
starting at   %vreg103<def> = ADDI %zero, 64; GR32Bit:%vreg103
starting at   %vreg138<def> = LUI 3; GR32Bit:%vreg138
After bundling, state of BB3:BB#3: derived from LLVM BB %redefine_start1.return
    Predecessors according to CFG: BB#1 BB#2
	%vreg12<def> = ADDI %zero, 1; GR32Bit:%vreg12
	  * %vreg11<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg11
	  * SB %vreg12, %vreg11, 0; mem:ST1[%0](align=4) GR32Bit:%vreg12,%vreg11
	  * %vreg101<def> = ADDI %zero, 128; GR32Bit:%vreg101
	  * %vreg105<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg105
	  * %vreg106<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg106
	  * %vreg107<def> = SRLI %vreg106, 12; GR32Bit:%vreg107,%vreg106
	  * %vreg108<def> = ADD %vreg105, %vreg107; GR32Bit:%vreg108,%vreg105,%vreg107
	  * %vreg109<def> = ADDI %zero, 16; GR32Bit:%vreg109
	  * %vreg110<def> = SRLI %vreg101, 22; GR32Bit:%vreg110,%vreg101
	  * %vreg111<def> = SRLI %vreg101, 12; GR32Bit:%vreg111,%vreg101
	  * %vreg112<def> = ANDI %vreg111, 15; GR32Bit:%vreg112,%vreg111
	  * %vreg113<def> = SRLI %vreg101, 6; GR32Bit:%vreg113,%vreg101
	  * %vreg114<def> = ANDI %vreg113, 63; GR32Bit:%vreg114,%vreg113
	  * %vreg115<def> = ADDI %zero, 832; GR32Bit:%vreg115
	  * %vreg116<def> = MUL %vreg110, %vreg115; GR32Bit:%vreg116,%vreg110,%vreg115
	  * %vreg117<def> = ADDI %zero, 52; GR32Bit:%vreg117
	  * %vreg118<def> = MUL %vreg112, %vreg117; GR32Bit:%vreg118,%vreg112,%vreg117
	  * %vreg119<def> = ADD %vreg118, %vreg114; GR32Bit:%vreg119,%vreg118,%vreg114
	  * %vreg120<def> = ADD %vreg119, %vreg116; GR32Bit:%vreg120,%vreg119,%vreg116
	  * %vreg121<def> = MUL %vreg120, %vreg109; GR32Bit:%vreg121,%vreg120,%vreg109
	  * %vreg122<def> = ADD %vreg121, %vreg108; GR32Bit:%vreg122,%vreg121,%vreg108
	  * %vreg123<def> = LW %t5, 8; GR32Bit:%vreg123
	  * SW %vreg123, %vreg122, 0; GR32Bit:%vreg123,%vreg122
	  * %vreg125<def> = LUI 0; GR32Bit:%vreg125
	  * %vreg126<def> = DREADPM %vreg125, 0; GR32Bit:%vreg126,%vreg125
	  * WRITECM %vreg126, %vreg101, 0; GR32Bit:%vreg126,%vreg101
	  * %vreg131<def> = DREADPM %vreg125, 4; GR32Bit:%vreg131,%vreg125
	  * %vreg132<def> = LW %t5, <fi#3>; GR32Bit:%vreg132
	  * WRITECM %vreg131, %vreg132, 0; GR32Bit:%vreg131,%vreg132
	  * %vreg133<def> = LUI 1; GR32Bit:%vreg133
	  * WRITEPM %vreg133, %vreg101, 0; GR32Bit:%vreg133,%vreg101
	  * %vreg136<def> = DREADPM %vreg125, 8; GR32Bit:%vreg136,%vreg125
	  * WRITECM %vreg136, %vreg101, 4; GR32Bit:%vreg136,%vreg101
	  * %vreg141<def> = LUI 3; GR32Bit:%vreg141
	  * WRITEPM %vreg141, %vreg101, 4; GR32Bit:%vreg141,%vreg101
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg102<def> = ADDI %zero, 192; GR32Bit:%vreg102
	  * %vreg104<def> = ADDI %zero, 2; GR32Bit:%vreg104
	  * WRITECM %vreg102, %vreg104, 60; GR32Bit:%vreg102,%vreg104
	  * %vreg124<def> = LUI 0; GR32Bit:%vreg124
	  * WRITEPM %vreg124, %vreg102, 0; GR32Bit:%vreg124,%vreg102
	  * %vreg127<def> = LUI 2; GR32Bit:%vreg127
	  * WRITEPM %vreg127, %vreg102, 0; GR32Bit:%vreg127,%vreg102
	  * %vreg134<def> = LUI 1; GR32Bit:%vreg134
	  * %vreg135<def> = DREADPM %vreg134, 0; GR32Bit:%vreg135,%vreg134
	  * WRITECM %vreg135, %vreg102, 0; GR32Bit:%vreg135,%vreg102
	  * %vreg137<def> = LUI 3; GR32Bit:%vreg137
	  * WRITEPM %vreg137, %vreg102, 0; GR32Bit:%vreg137,%vreg102
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg103<def> = ADDI %zero, 64; GR32Bit:%vreg103
	  * %vreg128<def> = LUI 2; GR32Bit:%vreg128
	  * %vreg129<def> = DREADPM %vreg128, 0; GR32Bit:%vreg129,%vreg128
	  * WRITECM %vreg129, %vreg103, 4; GR32Bit:%vreg129,%vreg103
	  * %vreg130<def> = LUI 0; GR32Bit:%vreg130
	  * WRITEPM %vreg130, %vreg103, 4; GR32Bit:%vreg130,%vreg103
	  * WRITEPM %vreg130, %vreg103, 8; GR32Bit:%vreg130,%vreg103
	  * %vreg144<def> = LUI 3; GR32Bit:%vreg144
	  * WRITEPM %vreg144, %vreg103, 8; GR32Bit:%vreg144,%vreg103
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg138<def> = LUI 3; GR32Bit:%vreg138
	  * %vreg139<def> = DREADPM %vreg138, 0; GR32Bit:%vreg139,%vreg138
	  * %vreg140<def> = ADDI %zero, -1; GR32Bit:%vreg140
	  * SYNC %vreg139, %vreg140, 60; GR32Bit:%vreg139,%vreg140
	  * %vreg142<def> = DREADPM %vreg138, 4; GR32Bit:%vreg142,%vreg138
	  * %vreg143<def> = LW %t5, <fi#1>; GR32Bit:%vreg143
	  * WRITECMP %vreg142, %vreg143, 1; GR32Bit:%vreg142,%vreg143
	  * %vreg145<def> = DREADPM %vreg138, 8; GR32Bit:%vreg145,%vreg138
	  * %vreg146<def> = LW %t5, <fi#1>; GR32Bit:%vreg146
	  * WRITECMP %vreg145, %vreg146, 0; GR32Bit:%vreg145,%vreg146
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
Patching the instructions that are supposed to use the physical registers r30 and r31
Computing live-in reg-units in ABI blocks.
Created 0 new intervals.

*** Renumbered SlotIndexes 8-2424 ***

*** Renumbered SlotIndexes 180-2436 ***
********** INTERVALS **********
t5 = EMPTY
zero = EMPTY
%vreg0 = [196r,204r:0)  0@196r
%vreg1 = [176r,204r:0)  0@176r
%vreg2 = [204r,212r:0)  0@204r
%vreg3 = [212r,220r:0)  0@212r
%vreg4 = [168r,220r:0)  0@168r
%vreg5 = [228r,236r:0)  0@228r
%vreg6 = [796r,812r:0)  0@796r
%vreg7 = [812r,916r:0)  0@812r
%vreg8 = [820r,836r:0)  0@820r
%vreg9 = [804r,836r:0)  0@804r
%vreg10 = [788r,916r:0)  0@788r
%vreg11 = [1436r,1452r:0)  0@1436r
%vreg12 = [1428r,1452r:0)  0@1428r
%vreg13 = [4r,4d:0)  0@4r
%vreg14 = [160r,160d:0)  0@160r
%vreg15 = [24r,48r:0)  0@24r
%vreg16 = [32r,40r:0)  0@32r
%vreg17 = [40r,48r:0)  0@40r
%vreg18 = [48r,160r:0)  0@48r
%vreg19 = [56r,152r:0)  0@56r
%vreg20 = [64r,112r:0)  0@64r
%vreg21 = [72r,80r:0)  0@72r
%vreg22 = [80r,128r:0)  0@80r
%vreg23 = [88r,96r:0)  0@88r
%vreg24 = [96r,136r:0)  0@96r
%vreg25 = [104r,112r:0)  0@104r
%vreg26 = [112r,144r:0)  0@112r
%vreg27 = [120r,128r:0)  0@120r
%vreg28 = [128r,136r:0)  0@128r
%vreg29 = [136r,144r:0)  0@136r
%vreg30 = [144r,152r:0)  0@144r
%vreg31 = [152r,160r:0)  0@152r
%vreg32 = [244r,244d:0)  0@244r
%vreg33 = [388r,388d:0)  0@388r
%vreg34 = [252r,276r:0)  0@252r
%vreg35 = [260r,268r:0)  0@260r
%vreg36 = [268r,276r:0)  0@268r
%vreg37 = [276r,388r:0)  0@276r
%vreg38 = [284r,380r:0)  0@284r
%vreg39 = [292r,340r:0)  0@292r
%vreg40 = [300r,308r:0)  0@300r
%vreg41 = [308r,356r:0)  0@308r
%vreg42 = [316r,324r:0)  0@316r
%vreg43 = [324r,364r:0)  0@324r
%vreg44 = [332r,340r:0)  0@332r
%vreg45 = [340r,372r:0)  0@340r
%vreg46 = [348r,356r:0)  0@348r
%vreg47 = [356r,364r:0)  0@356r
%vreg48 = [364r,372r:0)  0@364r
%vreg49 = [372r,380r:0)  0@372r
%vreg50 = [380r,388r:0)  0@380r
%vreg51 = [396r,396d:0)  0@396r
%vreg52 = [540r,540d:0)  0@540r
%vreg53 = [404r,428r:0)  0@404r
%vreg54 = [412r,420r:0)  0@412r
%vreg55 = [420r,428r:0)  0@420r
%vreg56 = [428r,540r:0)  0@428r
%vreg57 = [436r,532r:0)  0@436r
%vreg58 = [444r,492r:0)  0@444r
%vreg59 = [452r,460r:0)  0@452r
%vreg60 = [460r,508r:0)  0@460r
%vreg61 = [468r,476r:0)  0@468r
%vreg62 = [476r,516r:0)  0@476r
%vreg63 = [484r,492r:0)  0@484r
%vreg64 = [492r,524r:0)  0@492r
%vreg65 = [500r,508r:0)  0@500r
%vreg66 = [508r,516r:0)  0@508r
%vreg67 = [516r,524r:0)  0@516r
%vreg68 = [524r,532r:0)  0@524r
%vreg69 = [532r,540r:0)  0@532r
%vreg70 = [548r,548d:0)  0@548r
%vreg71 = [692r,692d:0)  0@692r
%vreg72 = [556r,580r:0)  0@556r
%vreg73 = [564r,572r:0)  0@564r
%vreg74 = [572r,580r:0)  0@572r
%vreg75 = [580r,692r:0)  0@580r
%vreg76 = [588r,684r:0)  0@588r
%vreg77 = [596r,644r:0)  0@596r
%vreg78 = [604r,612r:0)  0@604r
%vreg79 = [612r,660r:0)  0@612r
%vreg80 = [620r,628r:0)  0@620r
%vreg81 = [628r,668r:0)  0@628r
%vreg82 = [636r,644r:0)  0@636r
%vreg83 = [644r,676r:0)  0@644r
%vreg84 = [652r,660r:0)  0@652r
%vreg85 = [660r,668r:0)  0@660r
%vreg86 = [668r,676r:0)  0@668r
%vreg87 = [676r,684r:0)  0@676r
%vreg88 = [684r,692r:0)  0@684r
%vreg89 = [844r,892r:0)  0@844r
%vreg90 = [964r,988r:0)  0@964r
%vreg91 = [860r,900r:0)  0@860r
%vreg92 = [1052r,1076r:0)  0@1052r
%vreg93 = [876r,908r:0)  0@876r
%vreg94 = [1140r,1204r:0)  0@1140r
%vreg95 = [980r,996r:0)  0@980r
%vreg96 = [1068r,1084r:0)  0@1068r
%vreg97 = [1156r,1244r:0)  0@1156r
%vreg98 = [988r,996r:0)  0@988r
%vreg99 = [1076r,1084r:0)  0@1076r
%vreg100 = [1204r,1244r:0)  0@1204r
%vreg101 = [1460r,1716r:0)  0@1460r
%vreg102 = [1748r,2004r:0)  0@1748r
%vreg103 = [2036r,2164r:0)  0@2036r
%vreg104 = [1756r,1764r:0)  0@1756r
%vreg105 = [1468r,1492r:0)  0@1468r
%vreg106 = [1476r,1484r:0)  0@1476r
%vreg107 = [1484r,1492r:0)  0@1484r
%vreg108 = [1492r,1604r:0)  0@1492r
%vreg109 = [1500r,1596r:0)  0@1500r
%vreg110 = [1508r,1556r:0)  0@1508r
%vreg111 = [1516r,1524r:0)  0@1516r
%vreg112 = [1524r,1572r:0)  0@1524r
%vreg113 = [1532r,1540r:0)  0@1532r
%vreg114 = [1540r,1580r:0)  0@1540r
%vreg115 = [1548r,1556r:0)  0@1548r
%vreg116 = [1556r,1588r:0)  0@1556r
%vreg117 = [1564r,1572r:0)  0@1564r
%vreg118 = [1572r,1580r:0)  0@1572r
%vreg119 = [1580r,1588r:0)  0@1580r
%vreg120 = [1588r,1596r:0)  0@1588r
%vreg121 = [1596r,1604r:0)  0@1596r
%vreg122 = [1604r,1620r:0)  0@1604r
%vreg123 = [1612r,1620r:0)  0@1612r
%vreg124 = [1916r,1924r:0)  0@1916r
%vreg125 = [1628r,1692r:0)  0@1628r
%vreg126 = [1636r,1644r:0)  0@1636r
%vreg127 = [1956r,1964r:0)  0@1956r
%vreg128 = [2044r,2052r:0)  0@2044r
%vreg129 = [2052r,2060r:0)  0@2052r
%vreg130 = [2068r,2148r:0)  0@2068r
%vreg131 = [1652r,1668r:0)  0@1652r
%vreg132 = [1660r,1668r:0)  0@1660r
%vreg133 = [1676r,1684r:0)  0@1676r
%vreg134 = [1972r,1980r:0)  0@1972r
%vreg135 = [1980r,1988r:0)  0@1980r
%vreg136 = [1692r,1700r:0)  0@1692r
%vreg137 = [1996r,2004r:0)  0@1996r
%vreg138 = [2228r,2316r:0)  0@2228r
%vreg139 = [2236r,2436B:0)  0@2236r
%vreg140 = [2244r,2252r:0)  0@2244r
%vreg141 = [1708r,1716r:0)  0@1708r
%vreg142 = [2276r,2436B:0)  0@2276r
%vreg143 = [2284r,2292r:0)  0@2284r
%vreg144 = [2156r,2164r:0)  0@2156r
%vreg145 = [2316r,2436B:0)  0@2316r
%vreg146 = [2324r,2332r:0)  0@2324r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=1, align=4, at location [SP]
  fi#1: size=1, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start1.entry
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg15<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg15
4B		  * %vreg16<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg16
4B		  * %vreg17<def> = SRLI %vreg16, 12; GR32Bit:%vreg17,%vreg16
4B		  * %vreg18<def> = ADD %vreg15, %vreg17; GR32Bit:%vreg18,%vreg15,%vreg17
4B		  * %vreg19<def> = ADDI %zero, 16; GR32Bit:%vreg19
4B		  * %vreg20<def> = SRLI %t5, 22; GR32Bit:%vreg20
4B		  * %vreg21<def> = SRLI %t5, 12; GR32Bit:%vreg21
4B		  * %vreg22<def> = ANDI %vreg21, 15; GR32Bit:%vreg22,%vreg21
4B		  * %vreg23<def> = SRLI %t5, 6; GR32Bit:%vreg23
4B		  * %vreg24<def> = ANDI %vreg23, 63; GR32Bit:%vreg24,%vreg23
4B		  * %vreg25<def> = ADDI %zero, 832; GR32Bit:%vreg25
4B		  * %vreg26<def> = MUL %vreg20, %vreg25; GR32Bit:%vreg26,%vreg20,%vreg25
4B		  * %vreg27<def> = ADDI %zero, 52; GR32Bit:%vreg27
4B		  * %vreg28<def> = MUL %vreg22, %vreg27; GR32Bit:%vreg28,%vreg22,%vreg27
4B		  * %vreg29<def> = ADD %vreg28, %vreg24; GR32Bit:%vreg29,%vreg28,%vreg24
4B		  * %vreg30<def> = ADD %vreg29, %vreg26; GR32Bit:%vreg30,%vreg29,%vreg26
4B		  * %vreg31<def> = MUL %vreg30, %vreg19; GR32Bit:%vreg31,%vreg30,%vreg19
4B		  * %t5<def> = ADD %vreg18, %vreg31; GR32Bit:%vreg18,%vreg31
4B		  * %vreg4<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg4
4B		  * %vreg1<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg1
4B		  * SRLI %vreg1, %vreg1, 12; GR32Bit:%vreg1
4B		  * %vreg0<def> = LUI <ga:@redefine_in_placeholder>[TF=2]; GR32Bit:%vreg0
4B		  * %vreg2<def> = ADD %vreg1, %vreg0; GR32Bit:%vreg2,%vreg1,%vreg0
4B		  * %vreg3<def> = LW %vreg2, 0; mem:LD4[@redefine_in_placeholder] GR32Bit:%vreg3,%vreg2
4B		  * SW %vreg3, %vreg4, 0; mem:ST4[%3] GR32Bit:%vreg3,%vreg4
4B		  * %vreg5<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg5
4B		  * SW %zero, %vreg5, 0; mem:ST4[%2] GR32Bit:%vreg5
244B		%t4<def> = ADD %t5, %zero
244B		  * %vreg34<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg34
244B		  * %vreg35<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg35
244B		  * %vreg36<def> = SRLI %vreg35, 12; GR32Bit:%vreg36,%vreg35
244B		  * %vreg37<def> = ADD %vreg34, %vreg36; GR32Bit:%vreg37,%vreg34,%vreg36
244B		  * %vreg38<def> = ADDI %zero, 16; GR32Bit:%vreg38
244B		  * %vreg39<def> = SRLI %t5, 22; GR32Bit:%vreg39
244B		  * %vreg40<def> = SRLI %t5, 12; GR32Bit:%vreg40
244B		  * %vreg41<def> = ANDI %vreg40, 15; GR32Bit:%vreg41,%vreg40
244B		  * %vreg42<def> = SRLI %t5, 6; GR32Bit:%vreg42
244B		  * %vreg43<def> = ANDI %vreg42, 63; GR32Bit:%vreg43,%vreg42
244B		  * %vreg44<def> = ADDI %zero, 832; GR32Bit:%vreg44
244B		  * %vreg45<def> = MUL %vreg39, %vreg44; GR32Bit:%vreg45,%vreg39,%vreg44
244B		  * %vreg46<def> = ADDI %zero, 52; GR32Bit:%vreg46
244B		  * %vreg47<def> = MUL %vreg41, %vreg46; GR32Bit:%vreg47,%vreg41,%vreg46
244B		  * %vreg48<def> = ADD %vreg47, %vreg43; GR32Bit:%vreg48,%vreg47,%vreg43
244B		  * %vreg49<def> = ADD %vreg48, %vreg45; GR32Bit:%vreg49,%vreg48,%vreg45
244B		  * %vreg50<def> = MUL %vreg49, %vreg38; GR32Bit:%vreg50,%vreg49,%vreg38
244B		  * %t5<def> = ADD %vreg37, %vreg50; GR32Bit:%vreg37,%vreg50
396B		%t4<def> = ADD %t5, %zero
396B		  * %vreg53<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg53
396B		  * %vreg54<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg54
396B		  * %vreg55<def> = SRLI %vreg54, 12; GR32Bit:%vreg55,%vreg54
396B		  * %vreg56<def> = ADD %vreg53, %vreg55; GR32Bit:%vreg56,%vreg53,%vreg55
396B		  * %vreg57<def> = ADDI %zero, 16; GR32Bit:%vreg57
396B		  * %vreg58<def> = SRLI %t5, 22; GR32Bit:%vreg58
396B		  * %vreg59<def> = SRLI %t5, 12; GR32Bit:%vreg59
396B		  * %vreg60<def> = ANDI %vreg59, 15; GR32Bit:%vreg60,%vreg59
396B		  * %vreg61<def> = SRLI %t5, 6; GR32Bit:%vreg61
396B		  * %vreg62<def> = ANDI %vreg61, 63; GR32Bit:%vreg62,%vreg61
396B		  * %vreg63<def> = ADDI %zero, 832; GR32Bit:%vreg63
396B		  * %vreg64<def> = MUL %vreg58, %vreg63; GR32Bit:%vreg64,%vreg58,%vreg63
396B		  * %vreg65<def> = ADDI %zero, 52; GR32Bit:%vreg65
396B		  * %vreg66<def> = MUL %vreg60, %vreg65; GR32Bit:%vreg66,%vreg60,%vreg65
396B		  * %vreg67<def> = ADD %vreg66, %vreg62; GR32Bit:%vreg67,%vreg66,%vreg62
396B		  * %vreg68<def> = ADD %vreg67, %vreg64; GR32Bit:%vreg68,%vreg67,%vreg64
396B		  * %vreg69<def> = MUL %vreg68, %vreg57; GR32Bit:%vreg69,%vreg68,%vreg57
396B		  * %t5<def> = ADD %vreg56, %vreg69; GR32Bit:%vreg56,%vreg69
548B		%t4<def> = ADD %t5, %zero
548B		  * %vreg72<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg72
548B		  * %vreg73<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg73
548B		  * %vreg74<def> = SRLI %vreg73, 12; GR32Bit:%vreg74,%vreg73
548B		  * %vreg75<def> = ADD %vreg72, %vreg74; GR32Bit:%vreg75,%vreg72,%vreg74
548B		  * %vreg76<def> = ADDI %zero, 16; GR32Bit:%vreg76
548B		  * %vreg77<def> = SRLI %t5, 22; GR32Bit:%vreg77
548B		  * %vreg78<def> = SRLI %t5, 12; GR32Bit:%vreg78
548B		  * %vreg79<def> = ANDI %vreg78, 15; GR32Bit:%vreg79,%vreg78
548B		  * %vreg80<def> = SRLI %t5, 6; GR32Bit:%vreg80
548B		  * %vreg81<def> = ANDI %vreg80, 63; GR32Bit:%vreg81,%vreg80
548B		  * %vreg82<def> = ADDI %zero, 832; GR32Bit:%vreg82
548B		  * %vreg83<def> = MUL %vreg77, %vreg82; GR32Bit:%vreg83,%vreg77,%vreg82
548B		  * %vreg84<def> = ADDI %zero, 52; GR32Bit:%vreg84
548B		  * %vreg85<def> = MUL %vreg79, %vreg84; GR32Bit:%vreg85,%vreg79,%vreg84
548B		  * %vreg86<def> = ADD %vreg85, %vreg81; GR32Bit:%vreg86,%vreg85,%vreg81
548B		  * %vreg87<def> = ADD %vreg86, %vreg83; GR32Bit:%vreg87,%vreg86,%vreg83
548B		  * %vreg88<def> = MUL %vreg87, %vreg76; GR32Bit:%vreg88,%vreg87,%vreg76
548B		  * %t5<def> = ADD %vreg75, %vreg88; GR32Bit:%vreg75,%vreg88
	    Successors according to CFG: BB#1

780B	BB#1: derived from LLVM BB %redefine_start1.for.cond
	    Predecessors according to CFG: BB#0
788B		%vreg10<def> = ADDI %zero, 24; GR32Bit:%vreg10
788B		  * %vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
788B		  * %vreg9<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg9
788B		  * %vreg7<def> = LW %vreg6, 0; mem:LD4[%2] GR32Bit:%vreg7,%vreg6
788B		  * %vreg8<def> = SLTI %vreg7, 25; GR32Bit:%vreg8,%vreg7
788B		  * SB %vreg8, %vreg9, 0; mem:ST1[%1](align=4) GR32Bit:%vreg8,%vreg9
788B		  * %vreg89<def> = LUI 1; GR32Bit:%vreg89
788B		  * WRITEPM %vreg89, %vreg7, 0; GR32Bit:%vreg89,%vreg7
788B		  * %vreg91<def> = LUI 2; GR32Bit:%vreg91
788B		  * WRITEPM %vreg91, %vreg7, 0; GR32Bit:%vreg91,%vreg7
788B		  * %vreg93<def> = LUI 3; GR32Bit:%vreg93
788B		  * WRITEPM %vreg93, %vreg7, 0; GR32Bit:%vreg93,%vreg7
788B		  * WRITEPM %vreg89, %vreg10, 4; GR32Bit:%vreg89,%vreg10
788B		  * WRITEPM %vreg91, %vreg10, 4; GR32Bit:%vreg91,%vreg10
788B		  * WRITEPM %vreg93, %vreg10, 4; GR32Bit:%vreg93,%vreg10
788B		  * BGT <BB#3>, %vreg7, %vreg10; GR32Bit:%vreg7,%vreg10
788B		  * %zero<def> = ADDI %zero, 0
788B		  * %zero<def> = ADDI %zero, 0
788B		  * JAL <BB#2>
788B		  * %zero<def> = ADDI %zero, 0
788B		  * %zero<def> = ADDI %zero, 0
964B		%vreg90<def> = LUI 1; GR32Bit:%vreg90
964B		  * %vreg95<def> = DREADPM %vreg90, 0; GR32Bit:%vreg95,%vreg90
964B		  * %vreg98<def> = DREADPM %vreg90, 4; GR32Bit:%vreg98,%vreg90
964B		  * BGT <BB#3>, %vreg95, %vreg98; GR32Bit:%vreg95,%vreg98
964B		  * %zero<def> = ADDI %zero, 0
964B		  * %zero<def> = ADDI %zero, 0
964B		  * JAL <BB#2>
964B		  * %zero<def> = ADDI %zero, 0
964B		  * %zero<def> = ADDI %zero, 0
1052B		%vreg92<def> = LUI 2; GR32Bit:%vreg92
1052B		  * %vreg96<def> = DREADPM %vreg92, 0; GR32Bit:%vreg96,%vreg92
1052B		  * %vreg99<def> = DREADPM %vreg92, 4; GR32Bit:%vreg99,%vreg92
1052B		  * BGT <BB#3>, %vreg96, %vreg99; GR32Bit:%vreg96,%vreg99
1052B		  * %zero<def> = ADDI %zero, 0
1052B		  * %zero<def> = ADDI %zero, 0
1052B		  * JAL <BB#2>
1052B		  * %zero<def> = ADDI %zero, 0
1052B		  * %zero<def> = ADDI %zero, 0
1140B		%vreg94<def> = LUI 3; GR32Bit:%vreg94
1140B		  * %vreg97<def> = DREADPM %vreg94, 0; GR32Bit:%vreg97,%vreg94
1140B		  * %vreg100<def> = DREADPM %vreg94, 4; GR32Bit:%vreg100,%vreg94
1140B		  * BGT <BB#3>, %vreg97, %vreg100; GR32Bit:%vreg97,%vreg100
1140B		  * %zero<def> = ADDI %zero, 0
1140B		  * %zero<def> = ADDI %zero, 0
1140B		  * JAL <BB#2>
1140B		  * %zero<def> = ADDI %zero, 0
1140B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#2(16) BB#3(16)

1412B	BB#2: derived from LLVM BB %redefine_start1.for.body
	    Predecessors according to CFG: BB#1
	    Successors according to CFG: BB#3

1420B	BB#3: derived from LLVM BB %redefine_start1.return
	    Predecessors according to CFG: BB#1 BB#2
1428B		%vreg12<def> = ADDI %zero, 1; GR32Bit:%vreg12
1428B		  * %vreg11<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg11
1428B		  * SB %vreg12, %vreg11, 0; mem:ST1[%0](align=4) GR32Bit:%vreg12,%vreg11
1428B		  * %vreg101<def> = ADDI %zero, 128; GR32Bit:%vreg101
1428B		  * %vreg105<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg105
1428B		  * %vreg106<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg106
1428B		  * %vreg107<def> = SRLI %vreg106, 12; GR32Bit:%vreg107,%vreg106
1428B		  * %vreg108<def> = ADD %vreg105, %vreg107; GR32Bit:%vreg108,%vreg105,%vreg107
1428B		  * %vreg109<def> = ADDI %zero, 16; GR32Bit:%vreg109
1428B		  * %vreg110<def> = SRLI %vreg101, 22; GR32Bit:%vreg110,%vreg101
1428B		  * %vreg111<def> = SRLI %vreg101, 12; GR32Bit:%vreg111,%vreg101
1428B		  * %vreg112<def> = ANDI %vreg111, 15; GR32Bit:%vreg112,%vreg111
1428B		  * %vreg113<def> = SRLI %vreg101, 6; GR32Bit:%vreg113,%vreg101
1428B		  * %vreg114<def> = ANDI %vreg113, 63; GR32Bit:%vreg114,%vreg113
1428B		  * %vreg115<def> = ADDI %zero, 832; GR32Bit:%vreg115
1428B		  * %vreg116<def> = MUL %vreg110, %vreg115; GR32Bit:%vreg116,%vreg110,%vreg115
1428B		  * %vreg117<def> = ADDI %zero, 52; GR32Bit:%vreg117
1428B		  * %vreg118<def> = MUL %vreg112, %vreg117; GR32Bit:%vreg118,%vreg112,%vreg117
1428B		  * %vreg119<def> = ADD %vreg118, %vreg114; GR32Bit:%vreg119,%vreg118,%vreg114
1428B		  * %vreg120<def> = ADD %vreg119, %vreg116; GR32Bit:%vreg120,%vreg119,%vreg116
1428B		  * %vreg121<def> = MUL %vreg120, %vreg109; GR32Bit:%vreg121,%vreg120,%vreg109
1428B		  * %vreg122<def> = ADD %vreg121, %vreg108; GR32Bit:%vreg122,%vreg121,%vreg108
1428B		  * %vreg123<def> = LW %t5, 8; GR32Bit:%vreg123
1428B		  * SW %vreg123, %vreg122, 0; GR32Bit:%vreg123,%vreg122
1428B		  * %vreg125<def> = LUI 0; GR32Bit:%vreg125
1428B		  * %vreg126<def> = DREADPM %vreg125, 0; GR32Bit:%vreg126,%vreg125
1428B		  * WRITECM %vreg126, %vreg101, 0; GR32Bit:%vreg126,%vreg101
1428B		  * %vreg131<def> = DREADPM %vreg125, 4; GR32Bit:%vreg131,%vreg125
1428B		  * %vreg132<def> = LW %t5, <fi#3>; GR32Bit:%vreg132
1428B		  * WRITECM %vreg131, %vreg132, 0; GR32Bit:%vreg131,%vreg132
1428B		  * %vreg133<def> = LUI 1; GR32Bit:%vreg133
1428B		  * WRITEPM %vreg133, %vreg101, 0; GR32Bit:%vreg133,%vreg101
1428B		  * %vreg136<def> = DREADPM %vreg125, 8; GR32Bit:%vreg136,%vreg125
1428B		  * WRITECM %vreg136, %vreg101, 4; GR32Bit:%vreg136,%vreg101
1428B		  * %vreg141<def> = LUI 3; GR32Bit:%vreg141
1428B		  * WRITEPM %vreg141, %vreg101, 4; GR32Bit:%vreg141,%vreg101
1428B		  * END 0
1428B		  * %zero<def> = ADDI %zero, 0
1428B		  * %zero<def> = ADDI %zero, 0
1748B		%vreg102<def> = ADDI %zero, 192; GR32Bit:%vreg102
1748B		  * %vreg104<def> = ADDI %zero, 2; GR32Bit:%vreg104
1748B		  * WRITECM %vreg102, %vreg104, 60; GR32Bit:%vreg102,%vreg104
1748B		  * %vreg124<def> = LUI 0; GR32Bit:%vreg124
1748B		  * WRITEPM %vreg124, %vreg102, 0; GR32Bit:%vreg124,%vreg102
1748B		  * %vreg127<def> = LUI 2; GR32Bit:%vreg127
1748B		  * WRITEPM %vreg127, %vreg102, 0; GR32Bit:%vreg127,%vreg102
1748B		  * %vreg134<def> = LUI 1; GR32Bit:%vreg134
1748B		  * %vreg135<def> = DREADPM %vreg134, 0; GR32Bit:%vreg135,%vreg134
1748B		  * WRITECM %vreg135, %vreg102, 0; GR32Bit:%vreg135,%vreg102
1748B		  * %vreg137<def> = LUI 3; GR32Bit:%vreg137
1748B		  * WRITEPM %vreg137, %vreg102, 0; GR32Bit:%vreg137,%vreg102
1748B		  * END 0
1748B		  * %zero<def> = ADDI %zero, 0
1748B		  * %zero<def> = ADDI %zero, 0
2036B		%vreg103<def> = ADDI %zero, 64; GR32Bit:%vreg103
2036B		  * %vreg128<def> = LUI 2; GR32Bit:%vreg128
2036B		  * %vreg129<def> = DREADPM %vreg128, 0; GR32Bit:%vreg129,%vreg128
2036B		  * WRITECM %vreg129, %vreg103, 4; GR32Bit:%vreg129,%vreg103
2036B		  * %vreg130<def> = LUI 0; GR32Bit:%vreg130
2036B		  * WRITEPM %vreg130, %vreg103, 4; GR32Bit:%vreg130,%vreg103
2036B		  * WRITEPM %vreg130, %vreg103, 8; GR32Bit:%vreg130,%vreg103
2036B		  * %vreg144<def> = LUI 3; GR32Bit:%vreg144
2036B		  * WRITEPM %vreg144, %vreg103, 8; GR32Bit:%vreg144,%vreg103
2036B		  * END 0
2036B		  * %zero<def> = ADDI %zero, 0
2036B		  * %zero<def> = ADDI %zero, 0
2228B		%vreg138<def> = LUI 3; GR32Bit:%vreg138
2228B		  * %vreg139<def> = DREADPM %vreg138, 0; GR32Bit:%vreg139,%vreg138
2228B		  * %vreg140<def> = LUI 1048575; GR32Bit:%vreg140
2228B		  * %a5<def> = LUI 4095
2228B		  * %a5<def> = SRLI %a5<internal>, 12
2228B		  * ADD %vreg140, %vreg140, %a5; GR32Bit:%vreg140
2228B		  * SYNC %vreg139, %vreg140, 60; GR32Bit:%vreg139,%vreg140
2228B		  * %vreg142<def> = DREADPM %vreg138, 4; GR32Bit:%vreg142,%vreg138
2228B		  * %vreg143<def> = LW %t5, <fi#1>; GR32Bit:%vreg143
2228B		  * WRITECMP %vreg142, %vreg143, 1; GR32Bit:%vreg142,%vreg143
2228B		  * %vreg145<def> = DREADPM %vreg138, 8; GR32Bit:%vreg145,%vreg138
2228B		  * %vreg146<def> = LW %t5, <fi#1>; GR32Bit:%vreg146
2228B		  * WRITECMP %vreg145, %vreg146, 0; GR32Bit:%vreg145,%vreg146
2228B		  * END 0
2228B		  * %zero<def> = ADDI %zero, 0
2228B		  * %zero<def> = ADDI %zero, 0

# End machine code for function redefine_start1.

********** COMPUTING LIVE DEBUG VARIABLES: redefine_start1 **********
********** DEBUG VARIABLES **********
********** Compute Spill Weights **********
********** Function: redefine_start1
********** GREEDY REGISTER ALLOCATION **********
********** Function: redefine_start1

selectOrSplit GR32Bit:%vreg101 [1460r,1716r:0)  0@1460r
AllocationOrder(GR32Bit) = [ %t0 %t1 %t2 %fp %a0 %a1 %a2 %a3 %a4 %a6 %a7 %t3 %ra %sp %gp %tp %s0 %s1 %s2 %s3 %s4 %s5 %s6 %s7 %s8 %s9 %s10 %s11 ]
assigning %vreg101 to %t0: t0

selectOrSplit GR32Bit:%vreg102 [1748r,2004r:0)  0@1748r
assigning %vreg102 to %t0: t0

selectOrSplit GR32Bit:%vreg139 [2236r,2436B:0)  0@2236r
assigning %vreg139 to %t0: t0

selectOrSplit GR32Bit:%vreg142 [2276r,2436B:0)  0@2276r
assigning %vreg142 to %t1: t1

selectOrSplit GR32Bit:%vreg10 [788r,916r:0)  0@788r
assigning %vreg10 to %t0: t0

selectOrSplit GR32Bit:%vreg103 [2036r,2164r:0)  0@2036r
assigning %vreg103 to %t0: t0

selectOrSplit GR32Bit:%vreg145 [2316r,2436B:0)  0@2316r
assigning %vreg145 to %t2: t2

selectOrSplit GR32Bit:%vreg18 [48r,160r:0)  0@48r
assigning %vreg18 to %t0: t0

selectOrSplit GR32Bit:%vreg37 [276r,388r:0)  0@276r
assigning %vreg37 to %t0: t0

selectOrSplit GR32Bit:%vreg56 [428r,540r:0)  0@428r
assigning %vreg56 to %t0: t0

selectOrSplit GR32Bit:%vreg75 [580r,692r:0)  0@580r
assigning %vreg75 to %t0: t0

selectOrSplit GR32Bit:%vreg108 [1492r,1604r:0)  0@1492r
assigning %vreg108 to %t1: t1

selectOrSplit GR32Bit:%vreg7 [812r,916r:0)  0@812r
assigning %vreg7 to %t1: t1

selectOrSplit GR32Bit:%vreg19 [56r,152r:0)  0@56r
assigning %vreg19 to %t1: t1

selectOrSplit GR32Bit:%vreg38 [284r,380r:0)  0@284r
assigning %vreg38 to %t1: t1

selectOrSplit GR32Bit:%vreg57 [436r,532r:0)  0@436r
assigning %vreg57 to %t1: t1

selectOrSplit GR32Bit:%vreg76 [588r,684r:0)  0@588r
assigning %vreg76 to %t1: t1

selectOrSplit GR32Bit:%vreg109 [1500r,1596r:0)  0@1500r
assigning %vreg109 to %t2: t2

selectOrSplit GR32Bit:%vreg97 [1156r,1244r:0)  0@1156r
assigning %vreg97 to %t0: t0

selectOrSplit GR32Bit:%vreg138 [2228r,2316r:0)  0@2228r
assigning %vreg138 to %t2: t2

selectOrSplit GR32Bit:%vreg130 [2068r,2148r:0)  0@2068r
assigning %vreg130 to %t1: t1

selectOrSplit GR32Bit:%vreg94 [1140r,1204r:0)  0@1140r
assigning %vreg94 to %t1: t1

selectOrSplit GR32Bit:%vreg125 [1628r,1692r:0)  0@1628r
assigning %vreg125 to %t1: t1

selectOrSplit GR32Bit:%vreg4 [168r,220r:0)  0@168r
assigning %vreg4 to %t0: t0

selectOrSplit GR32Bit:%vreg20 [64r,112r:0)  0@64r
assigning %vreg20 to %t2: t2

selectOrSplit GR32Bit:%vreg22 [80r,128r:0)  0@80r
assigning %vreg22 to %fp: fp

selectOrSplit GR32Bit:%vreg39 [292r,340r:0)  0@292r
assigning %vreg39 to %t2: t2

selectOrSplit GR32Bit:%vreg41 [308r,356r:0)  0@308r
assigning %vreg41 to %fp: fp

selectOrSplit GR32Bit:%vreg58 [444r,492r:0)  0@444r
assigning %vreg58 to %t2: t2

selectOrSplit GR32Bit:%vreg60 [460r,508r:0)  0@460r
assigning %vreg60 to %fp: fp

selectOrSplit GR32Bit:%vreg77 [596r,644r:0)  0@596r
assigning %vreg77 to %t2: t2

selectOrSplit GR32Bit:%vreg79 [612r,660r:0)  0@612r
assigning %vreg79 to %fp: fp

selectOrSplit GR32Bit:%vreg89 [844r,892r:0)  0@844r
assigning %vreg89 to %t2: t2

selectOrSplit GR32Bit:%vreg110 [1508r,1556r:0)  0@1508r
assigning %vreg110 to %fp: fp

selectOrSplit GR32Bit:%vreg112 [1524r,1572r:0)  0@1524r
assigning %vreg112 to %a0: a0

selectOrSplit GR32Bit:%vreg24 [96r,136r:0)  0@96r
assigning %vreg24 to %a0: a0

selectOrSplit GR32Bit:%vreg43 [324r,364r:0)  0@324r
assigning %vreg43 to %a0: a0

selectOrSplit GR32Bit:%vreg62 [476r,516r:0)  0@476r
assigning %vreg62 to %a0: a0

selectOrSplit GR32Bit:%vreg81 [628r,668r:0)  0@628r
assigning %vreg81 to %a0: a0

selectOrSplit GR32Bit:%vreg91 [860r,900r:0)  0@860r
assigning %vreg91 to %fp: fp

selectOrSplit GR32Bit:%vreg100 [1204r,1244r:0)  0@1204r
assigning %vreg100 to %t1: t1

selectOrSplit GR32Bit:%vreg114 [1540r,1580r:0)  0@1540r
assigning %vreg114 to %a1: a1

selectOrSplit GR32Bit:%vreg9 [804r,836r:0)  0@804r
assigning %vreg9 to %t2: t2

selectOrSplit GR32Bit:%vreg26 [112r,144r:0)  0@112r
assigning %vreg26 to %t2: t2

selectOrSplit GR32Bit:%vreg45 [340r,372r:0)  0@340r
assigning %vreg45 to %t2: t2

selectOrSplit GR32Bit:%vreg64 [492r,524r:0)  0@492r
assigning %vreg64 to %t2: t2

selectOrSplit GR32Bit:%vreg83 [644r,676r:0)  0@644r
assigning %vreg83 to %t2: t2

selectOrSplit GR32Bit:%vreg93 [876r,908r:0)  0@876r
assigning %vreg93 to %a0: a0

selectOrSplit GR32Bit:%vreg116 [1556r,1588r:0)  0@1556r
assigning %vreg116 to %fp: fp

selectOrSplit GR32Bit:%vreg1 [176r,204r:0)  0@176r
assigning %vreg1 to %t1: t1

selectOrSplit GR32Bit:%vreg12 [1428r,1452r:0)  0@1428r
assigning %vreg12 to %t0: t0

selectOrSplit GR32Bit:%vreg15 [24r,48r:0)  0@24r
assigning %vreg15 to %t0: t0

selectOrSplit GR32Bit:%vreg34 [252r,276r:0)  0@252r
assigning %vreg34 to %t0: t0

selectOrSplit GR32Bit:%vreg53 [404r,428r:0)  0@404r
assigning %vreg53 to %t0: t0

selectOrSplit GR32Bit:%vreg72 [556r,580r:0)  0@556r
assigning %vreg72 to %t0: t0

selectOrSplit GR32Bit:%vreg90 [964r,988r:0)  0@964r
assigning %vreg90 to %t0: t0

selectOrSplit GR32Bit:%vreg92 [1052r,1076r:0)  0@1052r
assigning %vreg92 to %t0: t0

selectOrSplit GR32Bit:%vreg105 [1468r,1492r:0)  0@1468r
assigning %vreg105 to %t1: t1

selectOrSplit GR32Bit:%vreg6 [796r,812r:0)  0@796r
assigning %vreg6 to %t1: t1

selectOrSplit GR32Bit:%vreg8 [820r,836r:0)  0@820r
assigning %vreg8 to %fp: fp

selectOrSplit GR32Bit:%vreg11 [1436r,1452r:0)  0@1436r
assigning %vreg11 to %t1: t1

selectOrSplit GR32Bit:%vreg95 [980r,996r:0)  0@980r
assigning %vreg95 to %t1: t1

selectOrSplit GR32Bit:%vreg96 [1068r,1084r:0)  0@1068r
assigning %vreg96 to %t1: t1

selectOrSplit GR32Bit:%vreg122 [1604r,1620r:0)  0@1604r
assigning %vreg122 to %t1: t1

selectOrSplit GR32Bit:%vreg131 [1652r,1668r:0)  0@1652r
assigning %vreg131 to %t2: t2

selectOrSplit GR32Bit:%vreg0 [196r,204r:0)  0@196r
assigning %vreg0 to %t2: t2

selectOrSplit GR32Bit:%vreg2 [204r,212r:0)  0@204r
assigning %vreg2 to %t1: t1

selectOrSplit GR32Bit:%vreg3 [212r,220r:0)  0@212r
assigning %vreg3 to %t1: t1

selectOrSplit GR32Bit:%vreg5 [228r,236r:0)  0@228r
assigning %vreg5 to %t0: t0

selectOrSplit GR32Bit:%vreg16 [32r,40r:0)  0@32r
assigning %vreg16 to %t1: t1

selectOrSplit GR32Bit:%vreg17 [40r,48r:0)  0@40r
assigning %vreg17 to %t1: t1

selectOrSplit GR32Bit:%vreg21 [72r,80r:0)  0@72r
assigning %vreg21 to %fp: fp

selectOrSplit GR32Bit:%vreg23 [88r,96r:0)  0@88r
assigning %vreg23 to %a0: a0

selectOrSplit GR32Bit:%vreg25 [104r,112r:0)  0@104r
assigning %vreg25 to %a1: a1

selectOrSplit GR32Bit:%vreg27 [120r,128r:0)  0@120r
assigning %vreg27 to %a1: a1

selectOrSplit GR32Bit:%vreg28 [128r,136r:0)  0@128r
assigning %vreg28 to %fp: fp

selectOrSplit GR32Bit:%vreg29 [136r,144r:0)  0@136r
assigning %vreg29 to %fp: fp

selectOrSplit GR32Bit:%vreg30 [144r,152r:0)  0@144r
assigning %vreg30 to %t2: t2

selectOrSplit GR32Bit:%vreg31 [152r,160r:0)  0@152r
assigning %vreg31 to %t1: t1

selectOrSplit GR32Bit:%vreg35 [260r,268r:0)  0@260r
assigning %vreg35 to %t1: t1

selectOrSplit GR32Bit:%vreg36 [268r,276r:0)  0@268r
assigning %vreg36 to %t1: t1

selectOrSplit GR32Bit:%vreg40 [300r,308r:0)  0@300r
assigning %vreg40 to %fp: fp

selectOrSplit GR32Bit:%vreg42 [316r,324r:0)  0@316r
assigning %vreg42 to %a0: a0

selectOrSplit GR32Bit:%vreg44 [332r,340r:0)  0@332r
assigning %vreg44 to %a1: a1

selectOrSplit GR32Bit:%vreg46 [348r,356r:0)  0@348r
assigning %vreg46 to %a1: a1

selectOrSplit GR32Bit:%vreg47 [356r,364r:0)  0@356r
assigning %vreg47 to %fp: fp

selectOrSplit GR32Bit:%vreg48 [364r,372r:0)  0@364r
assigning %vreg48 to %fp: fp

selectOrSplit GR32Bit:%vreg49 [372r,380r:0)  0@372r
assigning %vreg49 to %t2: t2

selectOrSplit GR32Bit:%vreg50 [380r,388r:0)  0@380r
assigning %vreg50 to %t1: t1

selectOrSplit GR32Bit:%vreg54 [412r,420r:0)  0@412r
assigning %vreg54 to %t1: t1

selectOrSplit GR32Bit:%vreg55 [420r,428r:0)  0@420r
assigning %vreg55 to %t1: t1

selectOrSplit GR32Bit:%vreg59 [452r,460r:0)  0@452r
assigning %vreg59 to %fp: fp

selectOrSplit GR32Bit:%vreg61 [468r,476r:0)  0@468r
assigning %vreg61 to %a0: a0

selectOrSplit GR32Bit:%vreg63 [484r,492r:0)  0@484r
assigning %vreg63 to %a1: a1

selectOrSplit GR32Bit:%vreg65 [500r,508r:0)  0@500r
assigning %vreg65 to %a1: a1

selectOrSplit GR32Bit:%vreg66 [508r,516r:0)  0@508r
assigning %vreg66 to %fp: fp

selectOrSplit GR32Bit:%vreg67 [516r,524r:0)  0@516r
assigning %vreg67 to %fp: fp

selectOrSplit GR32Bit:%vreg68 [524r,532r:0)  0@524r
assigning %vreg68 to %t2: t2

selectOrSplit GR32Bit:%vreg69 [532r,540r:0)  0@532r
assigning %vreg69 to %t1: t1

selectOrSplit GR32Bit:%vreg73 [564r,572r:0)  0@564r
assigning %vreg73 to %t1: t1

selectOrSplit GR32Bit:%vreg74 [572r,580r:0)  0@572r
assigning %vreg74 to %t1: t1

selectOrSplit GR32Bit:%vreg78 [604r,612r:0)  0@604r
assigning %vreg78 to %fp: fp

selectOrSplit GR32Bit:%vreg80 [620r,628r:0)  0@620r
assigning %vreg80 to %a0: a0

selectOrSplit GR32Bit:%vreg82 [636r,644r:0)  0@636r
assigning %vreg82 to %a1: a1

selectOrSplit GR32Bit:%vreg84 [652r,660r:0)  0@652r
assigning %vreg84 to %a1: a1

selectOrSplit GR32Bit:%vreg85 [660r,668r:0)  0@660r
assigning %vreg85 to %fp: fp

selectOrSplit GR32Bit:%vreg86 [668r,676r:0)  0@668r
assigning %vreg86 to %fp: fp

selectOrSplit GR32Bit:%vreg87 [676r,684r:0)  0@676r
assigning %vreg87 to %t2: t2

selectOrSplit GR32Bit:%vreg88 [684r,692r:0)  0@684r
assigning %vreg88 to %t1: t1

selectOrSplit GR32Bit:%vreg98 [988r,996r:0)  0@988r
assigning %vreg98 to %t0: t0

selectOrSplit GR32Bit:%vreg99 [1076r,1084r:0)  0@1076r
assigning %vreg99 to %t0: t0

selectOrSplit GR32Bit:%vreg104 [1756r,1764r:0)  0@1756r
assigning %vreg104 to %t1: t1

selectOrSplit GR32Bit:%vreg106 [1476r,1484r:0)  0@1476r
assigning %vreg106 to %t2: t2

selectOrSplit GR32Bit:%vreg107 [1484r,1492r:0)  0@1484r
assigning %vreg107 to %t2: t2

selectOrSplit GR32Bit:%vreg111 [1516r,1524r:0)  0@1516r
assigning %vreg111 to %a0: a0

selectOrSplit GR32Bit:%vreg113 [1532r,1540r:0)  0@1532r
assigning %vreg113 to %a1: a1

selectOrSplit GR32Bit:%vreg115 [1548r,1556r:0)  0@1548r
assigning %vreg115 to %a2: a2

selectOrSplit GR32Bit:%vreg117 [1564r,1572r:0)  0@1564r
assigning %vreg117 to %a2: a2

selectOrSplit GR32Bit:%vreg118 [1572r,1580r:0)  0@1572r
assigning %vreg118 to %a0: a0

selectOrSplit GR32Bit:%vreg119 [1580r,1588r:0)  0@1580r
assigning %vreg119 to %a0: a0

selectOrSplit GR32Bit:%vreg120 [1588r,1596r:0)  0@1588r
assigning %vreg120 to %fp: fp

selectOrSplit GR32Bit:%vreg121 [1596r,1604r:0)  0@1596r
assigning %vreg121 to %t2: t2

selectOrSplit GR32Bit:%vreg123 [1612r,1620r:0)  0@1612r
assigning %vreg123 to %t2: t2

selectOrSplit GR32Bit:%vreg124 [1916r,1924r:0)  0@1916r
assigning %vreg124 to %t1: t1

selectOrSplit GR32Bit:%vreg126 [1636r,1644r:0)  0@1636r
assigning %vreg126 to %t2: t2

selectOrSplit GR32Bit:%vreg127 [1956r,1964r:0)  0@1956r
assigning %vreg127 to %t1: t1

selectOrSplit GR32Bit:%vreg128 [2044r,2052r:0)  0@2044r
assigning %vreg128 to %t1: t1

selectOrSplit GR32Bit:%vreg129 [2052r,2060r:0)  0@2052r
assigning %vreg129 to %t1: t1

selectOrSplit GR32Bit:%vreg132 [1660r,1668r:0)  0@1660r
assigning %vreg132 to %fp: fp

selectOrSplit GR32Bit:%vreg133 [1676r,1684r:0)  0@1676r
assigning %vreg133 to %t2: t2

selectOrSplit GR32Bit:%vreg134 [1972r,1980r:0)  0@1972r
assigning %vreg134 to %t1: t1

selectOrSplit GR32Bit:%vreg135 [1980r,1988r:0)  0@1980r
assigning %vreg135 to %t1: t1

selectOrSplit GR32Bit:%vreg136 [1692r,1700r:0)  0@1692r
assigning %vreg136 to %t1: t1

selectOrSplit GR32Bit:%vreg137 [1996r,2004r:0)  0@1996r
assigning %vreg137 to %t1: t1

selectOrSplit GR32Bit:%vreg140 [2244r,2252r:0)  0@2244r
assigning %vreg140 to %t1: t1

selectOrSplit GR32Bit:%vreg141 [1708r,1716r:0)  0@1708r
assigning %vreg141 to %t1: t1

selectOrSplit GR32Bit:%vreg143 [2284r,2292r:0)  0@2284r
assigning %vreg143 to %fp: fp

selectOrSplit GR32Bit:%vreg144 [2156r,2164r:0)  0@2156r
assigning %vreg144 to %t1: t1

selectOrSplit GR32Bit:%vreg146 [2324r,2332r:0)  0@2324r
assigning %vreg146 to %fp: fp
********** REWRITE VIRTUAL REGISTERS **********
********** Function: redefine_start1
********** REGISTER MAP **********
[%vreg0 -> %t2] GR32Bit
[%vreg1 -> %t1] GR32Bit
[%vreg2 -> %t1] GR32Bit
[%vreg3 -> %t1] GR32Bit
[%vreg4 -> %t0] GR32Bit
[%vreg5 -> %t0] GR32Bit
[%vreg6 -> %t1] GR32Bit
[%vreg7 -> %t1] GR32Bit
[%vreg8 -> %fp] GR32Bit
[%vreg9 -> %t2] GR32Bit
[%vreg10 -> %t0] GR32Bit
[%vreg11 -> %t1] GR32Bit
[%vreg12 -> %t0] GR32Bit
[%vreg15 -> %t0] GR32Bit
[%vreg16 -> %t1] GR32Bit
[%vreg17 -> %t1] GR32Bit
[%vreg18 -> %t0] GR32Bit
[%vreg19 -> %t1] GR32Bit
[%vreg20 -> %t2] GR32Bit
[%vreg21 -> %fp] GR32Bit
[%vreg22 -> %fp] GR32Bit
[%vreg23 -> %a0] GR32Bit
[%vreg24 -> %a0] GR32Bit
[%vreg25 -> %a1] GR32Bit
[%vreg26 -> %t2] GR32Bit
[%vreg27 -> %a1] GR32Bit
[%vreg28 -> %fp] GR32Bit
[%vreg29 -> %fp] GR32Bit
[%vreg30 -> %t2] GR32Bit
[%vreg31 -> %t1] GR32Bit
[%vreg34 -> %t0] GR32Bit
[%vreg35 -> %t1] GR32Bit
[%vreg36 -> %t1] GR32Bit
[%vreg37 -> %t0] GR32Bit
[%vreg38 -> %t1] GR32Bit
[%vreg39 -> %t2] GR32Bit
[%vreg40 -> %fp] GR32Bit
[%vreg41 -> %fp] GR32Bit
[%vreg42 -> %a0] GR32Bit
[%vreg43 -> %a0] GR32Bit
[%vreg44 -> %a1] GR32Bit
[%vreg45 -> %t2] GR32Bit
[%vreg46 -> %a1] GR32Bit
[%vreg47 -> %fp] GR32Bit
[%vreg48 -> %fp] GR32Bit
[%vreg49 -> %t2] GR32Bit
[%vreg50 -> %t1] GR32Bit
[%vreg53 -> %t0] GR32Bit
[%vreg54 -> %t1] GR32Bit
[%vreg55 -> %t1] GR32Bit
[%vreg56 -> %t0] GR32Bit
[%vreg57 -> %t1] GR32Bit
[%vreg58 -> %t2] GR32Bit
[%vreg59 -> %fp] GR32Bit
[%vreg60 -> %fp] GR32Bit
[%vreg61 -> %a0] GR32Bit
[%vreg62 -> %a0] GR32Bit
[%vreg63 -> %a1] GR32Bit
[%vreg64 -> %t2] GR32Bit
[%vreg65 -> %a1] GR32Bit
[%vreg66 -> %fp] GR32Bit
[%vreg67 -> %fp] GR32Bit
[%vreg68 -> %t2] GR32Bit
[%vreg69 -> %t1] GR32Bit
[%vreg72 -> %t0] GR32Bit
[%vreg73 -> %t1] GR32Bit
[%vreg74 -> %t1] GR32Bit
[%vreg75 -> %t0] GR32Bit
[%vreg76 -> %t1] GR32Bit
[%vreg77 -> %t2] GR32Bit
[%vreg78 -> %fp] GR32Bit
[%vreg79 -> %fp] GR32Bit
[%vreg80 -> %a0] GR32Bit
[%vreg81 -> %a0] GR32Bit
[%vreg82 -> %a1] GR32Bit
[%vreg83 -> %t2] GR32Bit
[%vreg84 -> %a1] GR32Bit
[%vreg85 -> %fp] GR32Bit
[%vreg86 -> %fp] GR32Bit
[%vreg87 -> %t2] GR32Bit
[%vreg88 -> %t1] GR32Bit
[%vreg89 -> %t2] GR32Bit
[%vreg90 -> %t0] GR32Bit
[%vreg91 -> %fp] GR32Bit
[%vreg92 -> %t0] GR32Bit
[%vreg93 -> %a0] GR32Bit
[%vreg94 -> %t1] GR32Bit
[%vreg95 -> %t1] GR32Bit
[%vreg96 -> %t1] GR32Bit
[%vreg97 -> %t0] GR32Bit
[%vreg98 -> %t0] GR32Bit
[%vreg99 -> %t0] GR32Bit
[%vreg100 -> %t1] GR32Bit
[%vreg101 -> %t0] GR32Bit
[%vreg102 -> %t0] GR32Bit
[%vreg103 -> %t0] GR32Bit
[%vreg104 -> %t1] GR32Bit
[%vreg105 -> %t1] GR32Bit
[%vreg106 -> %t2] GR32Bit
[%vreg107 -> %t2] GR32Bit
[%vreg108 -> %t1] GR32Bit
[%vreg109 -> %t2] GR32Bit
[%vreg110 -> %fp] GR32Bit
[%vreg111 -> %a0] GR32Bit
[%vreg112 -> %a0] GR32Bit
[%vreg113 -> %a1] GR32Bit
[%vreg114 -> %a1] GR32Bit
[%vreg115 -> %a2] GR32Bit
[%vreg116 -> %fp] GR32Bit
[%vreg117 -> %a2] GR32Bit
[%vreg118 -> %a0] GR32Bit
[%vreg119 -> %a0] GR32Bit
[%vreg120 -> %fp] GR32Bit
[%vreg121 -> %t2] GR32Bit
[%vreg122 -> %t1] GR32Bit
[%vreg123 -> %t2] GR32Bit
[%vreg124 -> %t1] GR32Bit
[%vreg125 -> %t1] GR32Bit
[%vreg126 -> %t2] GR32Bit
[%vreg127 -> %t1] GR32Bit
[%vreg128 -> %t1] GR32Bit
[%vreg129 -> %t1] GR32Bit
[%vreg130 -> %t1] GR32Bit
[%vreg131 -> %t2] GR32Bit
[%vreg132 -> %fp] GR32Bit
[%vreg133 -> %t2] GR32Bit
[%vreg134 -> %t1] GR32Bit
[%vreg135 -> %t1] GR32Bit
[%vreg136 -> %t1] GR32Bit
[%vreg137 -> %t1] GR32Bit
[%vreg138 -> %t2] GR32Bit
[%vreg139 -> %t0] GR32Bit
[%vreg140 -> %t1] GR32Bit
[%vreg141 -> %t1] GR32Bit
[%vreg142 -> %t1] GR32Bit
[%vreg143 -> %fp] GR32Bit
[%vreg144 -> %t1] GR32Bit
[%vreg145 -> %t2] GR32Bit
[%vreg146 -> %fp] GR32Bit

0B	BB#0: derived from LLVM BB %redefine_start1.entry
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg15<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg15
4B		  * %vreg16<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg16
4B		  * %vreg17<def> = SRLI %vreg16<kill>, 12; GR32Bit:%vreg17,%vreg16
4B		  * %vreg18<def> = ADD %vreg15<kill>, %vreg17<kill>; GR32Bit:%vreg18,%vreg15,%vreg17
4B		  * %vreg19<def> = ADDI %zero, 16; GR32Bit:%vreg19
4B		  * %vreg20<def> = SRLI %t5, 22; GR32Bit:%vreg20
4B		  * %vreg21<def> = SRLI %t5, 12; GR32Bit:%vreg21
4B		  * %vreg22<def> = ANDI %vreg21<kill>, 15; GR32Bit:%vreg22,%vreg21
4B		  * %vreg23<def> = SRLI %t5, 6; GR32Bit:%vreg23
4B		  * %vreg24<def> = ANDI %vreg23<kill>, 63; GR32Bit:%vreg24,%vreg23
4B		  * %vreg25<def> = ADDI %zero, 832; GR32Bit:%vreg25
4B		  * %vreg26<def> = MUL %vreg20<kill>, %vreg25<kill>; GR32Bit:%vreg26,%vreg20,%vreg25
4B		  * %vreg27<def> = ADDI %zero, 52; GR32Bit:%vreg27
4B		  * %vreg28<def> = MUL %vreg22<kill>, %vreg27<kill>; GR32Bit:%vreg28,%vreg22,%vreg27
4B		  * %vreg29<def> = ADD %vreg28<kill>, %vreg24<kill>; GR32Bit:%vreg29,%vreg28,%vreg24
4B		  * %vreg30<def> = ADD %vreg29<kill>, %vreg26<kill>; GR32Bit:%vreg30,%vreg29,%vreg26
4B		  * %vreg31<def> = MUL %vreg30<kill>, %vreg19<kill>; GR32Bit:%vreg31,%vreg30,%vreg19
4B		  * %t5<def> = ADD %vreg18<kill>, %vreg31<kill>; GR32Bit:%vreg18,%vreg31
4B		  * %vreg4<def> = ADDI %t5, <fi#3>; GR32Bit:%vreg4
4B		  * %vreg1<def> = LUI <MCSym="%lo("ga#0")">; GR32Bit:%vreg1
4B		  * SRLI %vreg1, %vreg1, 12; GR32Bit:%vreg1
4B		  * %vreg0<def> = LUI <ga:@redefine_in_placeholder>[TF=2]; GR32Bit:%vreg0
4B		  * %vreg2<def> = ADD %vreg1<kill>, %vreg0<kill>; GR32Bit:%vreg2,%vreg1,%vreg0
4B		  * %vreg3<def> = LW %vreg2<kill>, 0; mem:LD4[@redefine_in_placeholder] GR32Bit:%vreg3,%vreg2
4B		  * SW %vreg3<kill>, %vreg4<kill>, 0; mem:ST4[%3] GR32Bit:%vreg3,%vreg4
4B		  * %vreg5<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg5
4B		  * SW %zero, %vreg5<kill>, 0; mem:ST4[%2] GR32Bit:%vreg5
244B		%t4<def> = ADD %t5, %zero
244B		  * %vreg34<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg34
244B		  * %vreg35<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg35
244B		  * %vreg36<def> = SRLI %vreg35<kill>, 12; GR32Bit:%vreg36,%vreg35
244B		  * %vreg37<def> = ADD %vreg34<kill>, %vreg36<kill>; GR32Bit:%vreg37,%vreg34,%vreg36
244B		  * %vreg38<def> = ADDI %zero, 16; GR32Bit:%vreg38
244B		  * %vreg39<def> = SRLI %t5, 22; GR32Bit:%vreg39
244B		  * %vreg40<def> = SRLI %t5, 12; GR32Bit:%vreg40
244B		  * %vreg41<def> = ANDI %vreg40<kill>, 15; GR32Bit:%vreg41,%vreg40
244B		  * %vreg42<def> = SRLI %t5, 6; GR32Bit:%vreg42
244B		  * %vreg43<def> = ANDI %vreg42<kill>, 63; GR32Bit:%vreg43,%vreg42
244B		  * %vreg44<def> = ADDI %zero, 832; GR32Bit:%vreg44
244B		  * %vreg45<def> = MUL %vreg39<kill>, %vreg44<kill>; GR32Bit:%vreg45,%vreg39,%vreg44
244B		  * %vreg46<def> = ADDI %zero, 52; GR32Bit:%vreg46
244B		  * %vreg47<def> = MUL %vreg41<kill>, %vreg46<kill>; GR32Bit:%vreg47,%vreg41,%vreg46
244B		  * %vreg48<def> = ADD %vreg47<kill>, %vreg43<kill>; GR32Bit:%vreg48,%vreg47,%vreg43
244B		  * %vreg49<def> = ADD %vreg48<kill>, %vreg45<kill>; GR32Bit:%vreg49,%vreg48,%vreg45
244B		  * %vreg50<def> = MUL %vreg49<kill>, %vreg38<kill>; GR32Bit:%vreg50,%vreg49,%vreg38
244B		  * %t5<def> = ADD %vreg37<kill>, %vreg50<kill>; GR32Bit:%vreg37,%vreg50
396B		%t4<def> = ADD %t5, %zero
396B		  * %vreg53<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg53
396B		  * %vreg54<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg54
396B		  * %vreg55<def> = SRLI %vreg54<kill>, 12; GR32Bit:%vreg55,%vreg54
396B		  * %vreg56<def> = ADD %vreg53<kill>, %vreg55<kill>; GR32Bit:%vreg56,%vreg53,%vreg55
396B		  * %vreg57<def> = ADDI %zero, 16; GR32Bit:%vreg57
396B		  * %vreg58<def> = SRLI %t5, 22; GR32Bit:%vreg58
396B		  * %vreg59<def> = SRLI %t5, 12; GR32Bit:%vreg59
396B		  * %vreg60<def> = ANDI %vreg59<kill>, 15; GR32Bit:%vreg60,%vreg59
396B		  * %vreg61<def> = SRLI %t5, 6; GR32Bit:%vreg61
396B		  * %vreg62<def> = ANDI %vreg61<kill>, 63; GR32Bit:%vreg62,%vreg61
396B		  * %vreg63<def> = ADDI %zero, 832; GR32Bit:%vreg63
396B		  * %vreg64<def> = MUL %vreg58<kill>, %vreg63<kill>; GR32Bit:%vreg64,%vreg58,%vreg63
396B		  * %vreg65<def> = ADDI %zero, 52; GR32Bit:%vreg65
396B		  * %vreg66<def> = MUL %vreg60<kill>, %vreg65<kill>; GR32Bit:%vreg66,%vreg60,%vreg65
396B		  * %vreg67<def> = ADD %vreg66<kill>, %vreg62<kill>; GR32Bit:%vreg67,%vreg66,%vreg62
396B		  * %vreg68<def> = ADD %vreg67<kill>, %vreg64<kill>; GR32Bit:%vreg68,%vreg67,%vreg64
396B		  * %vreg69<def> = MUL %vreg68<kill>, %vreg57<kill>; GR32Bit:%vreg69,%vreg68,%vreg57
396B		  * %t5<def> = ADD %vreg56<kill>, %vreg69<kill>; GR32Bit:%vreg56,%vreg69
548B		%t4<def> = ADD %t5, %zero
548B		  * %vreg72<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg72
548B		  * %vreg73<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg73
548B		  * %vreg74<def> = SRLI %vreg73<kill>, 12; GR32Bit:%vreg74,%vreg73
548B		  * %vreg75<def> = ADD %vreg72<kill>, %vreg74<kill>; GR32Bit:%vreg75,%vreg72,%vreg74
548B		  * %vreg76<def> = ADDI %zero, 16; GR32Bit:%vreg76
548B		  * %vreg77<def> = SRLI %t5, 22; GR32Bit:%vreg77
548B		  * %vreg78<def> = SRLI %t5, 12; GR32Bit:%vreg78
548B		  * %vreg79<def> = ANDI %vreg78<kill>, 15; GR32Bit:%vreg79,%vreg78
548B		  * %vreg80<def> = SRLI %t5, 6; GR32Bit:%vreg80
548B		  * %vreg81<def> = ANDI %vreg80<kill>, 63; GR32Bit:%vreg81,%vreg80
548B		  * %vreg82<def> = ADDI %zero, 832; GR32Bit:%vreg82
548B		  * %vreg83<def> = MUL %vreg77<kill>, %vreg82<kill>; GR32Bit:%vreg83,%vreg77,%vreg82
548B		  * %vreg84<def> = ADDI %zero, 52; GR32Bit:%vreg84
548B		  * %vreg85<def> = MUL %vreg79<kill>, %vreg84<kill>; GR32Bit:%vreg85,%vreg79,%vreg84
548B		  * %vreg86<def> = ADD %vreg85<kill>, %vreg81<kill>; GR32Bit:%vreg86,%vreg85,%vreg81
548B		  * %vreg87<def> = ADD %vreg86<kill>, %vreg83<kill>; GR32Bit:%vreg87,%vreg86,%vreg83
548B		  * %vreg88<def> = MUL %vreg87<kill>, %vreg76<kill>; GR32Bit:%vreg88,%vreg87,%vreg76
548B		  * %t5<def> = ADD %vreg75<kill>, %vreg88<kill>; GR32Bit:%vreg75,%vreg88
	    Successors according to CFG: BB#1
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 16
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = ADDI %t5, <fi#3>
> %t1<def> = LUI <MCSym="%lo("ga#0")">
> SRLI %t1, %t1, 12
> %t2<def> = LUI <ga:@redefine_in_placeholder>[TF=2]
> %t1<def> = ADD %t1<kill>, %t2<kill>
> %t1<def> = LW %t1<kill>, 0; mem:LD4[@redefine_in_placeholder]
> SW %t1<kill>, %t0<kill>, 0; mem:ST4[%3]
> %t0<def> = ADDI %t5, <fi#2>
> SW %zero, %t0<kill>, 0; mem:ST4[%2]
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 16
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 16
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 16
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
780B	BB#1: derived from LLVM BB %redefine_start1.for.cond
	    Predecessors according to CFG: BB#0
788B		%vreg10<def> = ADDI %zero, 24; GR32Bit:%vreg10
788B		  * %vreg6<def> = ADDI %t5, <fi#2>; GR32Bit:%vreg6
788B		  * %vreg9<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg9
788B		  * %vreg7<def> = LW %vreg6<kill>, 0; mem:LD4[%2] GR32Bit:%vreg7,%vreg6
788B		  * %vreg8<def> = SLTI %vreg7, 25; GR32Bit:%vreg8,%vreg7
788B		  * SB %vreg8<kill>, %vreg9<kill>, 0; mem:ST1[%1](align=4) GR32Bit:%vreg8,%vreg9
788B		  * %vreg89<def> = LUI 1; GR32Bit:%vreg89
788B		  * WRITEPM %vreg89, %vreg7, 0; GR32Bit:%vreg89,%vreg7
788B		  * %vreg91<def> = LUI 2; GR32Bit:%vreg91
788B		  * WRITEPM %vreg91, %vreg7, 0; GR32Bit:%vreg91,%vreg7
788B		  * %vreg93<def> = LUI 3; GR32Bit:%vreg93
788B		  * WRITEPM %vreg93, %vreg7, 0; GR32Bit:%vreg93,%vreg7
788B		  * WRITEPM %vreg89<kill>, %vreg10, 4; GR32Bit:%vreg89,%vreg10
788B		  * WRITEPM %vreg91<kill>, %vreg10, 4; GR32Bit:%vreg91,%vreg10
788B		  * WRITEPM %vreg93<kill>, %vreg10, 4; GR32Bit:%vreg93,%vreg10
788B		  * BGT <BB#3>, %vreg7<kill>, %vreg10<kill>; GR32Bit:%vreg7,%vreg10
788B		  * %zero<def> = ADDI %zero, 0
788B		  * %zero<def> = ADDI %zero, 0
788B		  * JAL <BB#2>
788B		  * %zero<def> = ADDI %zero, 0
788B		  * %zero<def> = ADDI %zero, 0
964B		%vreg90<def> = LUI 1; GR32Bit:%vreg90
964B		  * %vreg95<def> = DREADPM %vreg90, 0; GR32Bit:%vreg95,%vreg90
964B		  * %vreg98<def> = DREADPM %vreg90<kill>, 4; GR32Bit:%vreg98,%vreg90
964B		  * BGT <BB#3>, %vreg95<kill>, %vreg98<kill>; GR32Bit:%vreg95,%vreg98
964B		  * %zero<def> = ADDI %zero, 0
964B		  * %zero<def> = ADDI %zero, 0
964B		  * JAL <BB#2>
964B		  * %zero<def> = ADDI %zero, 0
964B		  * %zero<def> = ADDI %zero, 0
1052B		%vreg92<def> = LUI 2; GR32Bit:%vreg92
1052B		  * %vreg96<def> = DREADPM %vreg92, 0; GR32Bit:%vreg96,%vreg92
1052B		  * %vreg99<def> = DREADPM %vreg92<kill>, 4; GR32Bit:%vreg99,%vreg92
1052B		  * BGT <BB#3>, %vreg96<kill>, %vreg99<kill>; GR32Bit:%vreg96,%vreg99
1052B		  * %zero<def> = ADDI %zero, 0
1052B		  * %zero<def> = ADDI %zero, 0
1052B		  * JAL <BB#2>
1052B		  * %zero<def> = ADDI %zero, 0
1052B		  * %zero<def> = ADDI %zero, 0
1140B		%vreg94<def> = LUI 3; GR32Bit:%vreg94
1140B		  * %vreg97<def> = DREADPM %vreg94, 0; GR32Bit:%vreg97,%vreg94
1140B		  * %vreg100<def> = DREADPM %vreg94<kill>, 4; GR32Bit:%vreg100,%vreg94
1140B		  * BGT <BB#3>, %vreg97<kill>, %vreg100<kill>; GR32Bit:%vreg97,%vreg100
1140B		  * %zero<def> = ADDI %zero, 0
1140B		  * %zero<def> = ADDI %zero, 0
1140B		  * JAL <BB#2>
1140B		  * %zero<def> = ADDI %zero, 0
1140B		  * %zero<def> = ADDI %zero, 0
	    Successors according to CFG: BB#2(16) BB#3(16)
> %t0<def> = ADDI %zero, 24
> %t1<def> = ADDI %t5, <fi#2>
> %t2<def> = ADDI %t5, <fi#1>
> %t1<def> = LW %t1<kill>, 0; mem:LD4[%2]
> %fp<def> = SLTI %t1, 25
> SB %fp<kill>, %t2<kill>, 0; mem:ST1[%1](align=4)
> %t2<def> = LUI 1
> WRITEPM %t2, %t1, 0
> %fp<def> = LUI 2
> WRITEPM %fp, %t1, 0
> %a0<def> = LUI 3
> WRITEPM %a0, %t1, 0
> WRITEPM %t2<kill>, %t0, 4
> WRITEPM %fp<kill>, %t0, 4
> WRITEPM %a0<kill>, %t0, 4
> BGT <BB#3>, %t1<kill>, %t0<kill>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#2>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 1
> %t1<def> = DREADPM %t0, 0
> %t0<def> = DREADPM %t0<kill>, 4
> BGT <BB#3>, %t1<kill>, %t0<kill>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#2>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = LUI 2
> %t1<def> = DREADPM %t0, 0
> %t0<def> = DREADPM %t0<kill>, 4
> BGT <BB#3>, %t1<kill>, %t0<kill>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#2>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t1<def> = LUI 3
> %t0<def> = DREADPM %t1, 0
> %t1<def> = DREADPM %t1<kill>, 4
> BGT <BB#3>, %t0<kill>, %t1<kill>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> JAL <BB#2>
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
1412B	BB#2: derived from LLVM BB %redefine_start1.for.body
	    Predecessors according to CFG: BB#1
	    Successors according to CFG: BB#3
1420B	BB#3: derived from LLVM BB %redefine_start1.return
	    Predecessors according to CFG: BB#1 BB#2
1428B		%vreg12<def> = ADDI %zero, 1; GR32Bit:%vreg12
1428B		  * %vreg11<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg11
1428B		  * SB %vreg12<kill>, %vreg11<kill>, 0; mem:ST1[%0](align=4) GR32Bit:%vreg12,%vreg11
1428B		  * %vreg101<def> = ADDI %zero, 128; GR32Bit:%vreg101
1428B		  * %vreg105<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg105
1428B		  * %vreg106<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg106
1428B		  * %vreg107<def> = SRLI %vreg106<kill>, 12; GR32Bit:%vreg107,%vreg106
1428B		  * %vreg108<def> = ADD %vreg105<kill>, %vreg107<kill>; GR32Bit:%vreg108,%vreg105,%vreg107
1428B		  * %vreg109<def> = ADDI %zero, 16; GR32Bit:%vreg109
1428B		  * %vreg110<def> = SRLI %vreg101, 22; GR32Bit:%vreg110,%vreg101
1428B		  * %vreg111<def> = SRLI %vreg101, 12; GR32Bit:%vreg111,%vreg101
1428B		  * %vreg112<def> = ANDI %vreg111<kill>, 15; GR32Bit:%vreg112,%vreg111
1428B		  * %vreg113<def> = SRLI %vreg101, 6; GR32Bit:%vreg113,%vreg101
1428B		  * %vreg114<def> = ANDI %vreg113<kill>, 63; GR32Bit:%vreg114,%vreg113
1428B		  * %vreg115<def> = ADDI %zero, 832; GR32Bit:%vreg115
1428B		  * %vreg116<def> = MUL %vreg110<kill>, %vreg115<kill>; GR32Bit:%vreg116,%vreg110,%vreg115
1428B		  * %vreg117<def> = ADDI %zero, 52; GR32Bit:%vreg117
1428B		  * %vreg118<def> = MUL %vreg112<kill>, %vreg117<kill>; GR32Bit:%vreg118,%vreg112,%vreg117
1428B		  * %vreg119<def> = ADD %vreg118<kill>, %vreg114<kill>; GR32Bit:%vreg119,%vreg118,%vreg114
1428B		  * %vreg120<def> = ADD %vreg119<kill>, %vreg116<kill>; GR32Bit:%vreg120,%vreg119,%vreg116
1428B		  * %vreg121<def> = MUL %vreg120<kill>, %vreg109<kill>; GR32Bit:%vreg121,%vreg120,%vreg109
1428B		  * %vreg122<def> = ADD %vreg121<kill>, %vreg108<kill>; GR32Bit:%vreg122,%vreg121,%vreg108
1428B		  * %vreg123<def> = LW %t5, 8; GR32Bit:%vreg123
1428B		  * SW %vreg123<kill>, %vreg122<kill>, 0; GR32Bit:%vreg123,%vreg122
1428B		  * %vreg125<def> = LUI 0; GR32Bit:%vreg125
1428B		  * %vreg126<def> = DREADPM %vreg125, 0; GR32Bit:%vreg126,%vreg125
1428B		  * WRITECM %vreg126<kill>, %vreg101, 0; GR32Bit:%vreg126,%vreg101
1428B		  * %vreg131<def> = DREADPM %vreg125, 4; GR32Bit:%vreg131,%vreg125
1428B		  * %vreg132<def> = LW %t5, <fi#3>; GR32Bit:%vreg132
1428B		  * WRITECM %vreg131<kill>, %vreg132<kill>, 0; GR32Bit:%vreg131,%vreg132
1428B		  * %vreg133<def> = LUI 1; GR32Bit:%vreg133
1428B		  * WRITEPM %vreg133<kill>, %vreg101, 0; GR32Bit:%vreg133,%vreg101
1428B		  * %vreg136<def> = DREADPM %vreg125<kill>, 8; GR32Bit:%vreg136,%vreg125
1428B		  * WRITECM %vreg136<kill>, %vreg101, 4; GR32Bit:%vreg136,%vreg101
1428B		  * %vreg141<def> = LUI 3; GR32Bit:%vreg141
1428B		  * WRITEPM %vreg141<kill>, %vreg101<kill>, 4; GR32Bit:%vreg141,%vreg101
1428B		  * END 0
1428B		  * %zero<def> = ADDI %zero, 0
1428B		  * %zero<def> = ADDI %zero, 0
1748B		%vreg102<def> = ADDI %zero, 192; GR32Bit:%vreg102
1748B		  * %vreg104<def> = ADDI %zero, 2; GR32Bit:%vreg104
1748B		  * WRITECM %vreg102, %vreg104<kill>, 60; GR32Bit:%vreg102,%vreg104
1748B		  * %vreg124<def> = LUI 0; GR32Bit:%vreg124
1748B		  * WRITEPM %vreg124<kill>, %vreg102, 0; GR32Bit:%vreg124,%vreg102
1748B		  * %vreg127<def> = LUI 2; GR32Bit:%vreg127
1748B		  * WRITEPM %vreg127<kill>, %vreg102, 0; GR32Bit:%vreg127,%vreg102
1748B		  * %vreg134<def> = LUI 1; GR32Bit:%vreg134
1748B		  * %vreg135<def> = DREADPM %vreg134<kill>, 0; GR32Bit:%vreg135,%vreg134
1748B		  * WRITECM %vreg135<kill>, %vreg102, 0; GR32Bit:%vreg135,%vreg102
1748B		  * %vreg137<def> = LUI 3; GR32Bit:%vreg137
1748B		  * WRITEPM %vreg137<kill>, %vreg102<kill>, 0; GR32Bit:%vreg137,%vreg102
1748B		  * END 0
1748B		  * %zero<def> = ADDI %zero, 0
1748B		  * %zero<def> = ADDI %zero, 0
2036B		%vreg103<def> = ADDI %zero, 64; GR32Bit:%vreg103
2036B		  * %vreg128<def> = LUI 2; GR32Bit:%vreg128
2036B		  * %vreg129<def> = DREADPM %vreg128<kill>, 0; GR32Bit:%vreg129,%vreg128
2036B		  * WRITECM %vreg129<kill>, %vreg103, 4; GR32Bit:%vreg129,%vreg103
2036B		  * %vreg130<def> = LUI 0; GR32Bit:%vreg130
2036B		  * WRITEPM %vreg130, %vreg103, 4; GR32Bit:%vreg130,%vreg103
2036B		  * WRITEPM %vreg130<kill>, %vreg103, 8; GR32Bit:%vreg130,%vreg103
2036B		  * %vreg144<def> = LUI 3; GR32Bit:%vreg144
2036B		  * WRITEPM %vreg144<kill>, %vreg103<kill>, 8; GR32Bit:%vreg144,%vreg103
2036B		  * END 0
2036B		  * %zero<def> = ADDI %zero, 0
2036B		  * %zero<def> = ADDI %zero, 0
2228B		%vreg138<def> = LUI 3; GR32Bit:%vreg138
2228B		  * %vreg139<def> = DREADPM %vreg138, 0; GR32Bit:%vreg139,%vreg138
2228B		  * %vreg140<def> = LUI 1048575; GR32Bit:%vreg140
2228B		  * %a5<def> = LUI 4095
2228B		  * %a5<def> = SRLI %a5<internal>, 12
2228B		  * ADD %vreg140, %vreg140, %a5; GR32Bit:%vreg140
2228B		  * SYNC %vreg139, %vreg140<kill>, 60; GR32Bit:%vreg139,%vreg140
2228B		  * %vreg142<def> = DREADPM %vreg138, 4; GR32Bit:%vreg142,%vreg138
2228B		  * %vreg143<def> = LW %t5, <fi#1>; GR32Bit:%vreg143
2228B		  * WRITECMP %vreg142, %vreg143<kill>, 1; GR32Bit:%vreg142,%vreg143
2228B		  * %vreg145<def> = DREADPM %vreg138<kill>, 8; GR32Bit:%vreg145,%vreg138
2228B		  * %vreg146<def> = LW %t5, <fi#1>; GR32Bit:%vreg146
2228B		  * WRITECMP %vreg145, %vreg146<kill>, 0; GR32Bit:%vreg145,%vreg146
2228B		  * END 0
2228B		  * %zero<def> = ADDI %zero, 0
2228B		  * %zero<def> = ADDI %zero, 0
> %t0<def> = ADDI %zero, 1
> %t1<def> = ADDI %t5, <fi#0>
> SB %t0<kill>, %t1<kill>, 0; mem:ST1[%0](align=4)
> %t0<def> = ADDI %zero, 128
> %t1<def> = LUI <MCSym="%hi("ga#512")">
> %t2<def> = LUI <MCSym="%lo("ga#512")">
> %t2<def> = SRLI %t2<kill>, 12
> %t1<def> = ADD %t1<kill>, %t2<kill>
> %t2<def> = ADDI %zero, 16
> %fp<def> = SRLI %t0, 22
> %a0<def> = SRLI %t0, 12
> %a0<def> = ANDI %a0<kill>, 15
> %a1<def> = SRLI %t0, 6
> %a1<def> = ANDI %a1<kill>, 63
> %a2<def> = ADDI %zero, 832
> %fp<def> = MUL %fp<kill>, %a2<kill>
> %a2<def> = ADDI %zero, 52
> %a0<def> = MUL %a0<kill>, %a2<kill>
> %a0<def> = ADD %a0<kill>, %a1<kill>
> %fp<def> = ADD %a0<kill>, %fp<kill>
> %t2<def> = MUL %fp<kill>, %t2<kill>
> %t1<def> = ADD %t2<kill>, %t1<kill>
> %t2<def> = LW %t5, 8
> SW %t2<kill>, %t1<kill>, 0
> %t1<def> = LUI 0
> %t2<def> = DREADPM %t1, 0
> WRITECM %t2<kill>, %t0, 0
> %t2<def> = DREADPM %t1, 4
> %fp<def> = LW %t5, <fi#3>
> WRITECM %t2<kill>, %fp<kill>, 0
> %t2<def> = LUI 1
> WRITEPM %t2<kill>, %t0, 0
> %t1<def> = DREADPM %t1<kill>, 8
> WRITECM %t1<kill>, %t0, 4
> %t1<def> = LUI 3
> WRITEPM %t1<kill>, %t0<kill>, 4
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = ADDI %zero, 192
> %t1<def> = ADDI %zero, 2
> WRITECM %t0, %t1<kill>, 60
> %t1<def> = LUI 0
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 2
> WRITEPM %t1<kill>, %t0, 0
> %t1<def> = LUI 1
> %t1<def> = DREADPM %t1<kill>, 0
> WRITECM %t1<kill>, %t0, 0
> %t1<def> = LUI 3
> WRITEPM %t1<kill>, %t0<kill>, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t0<def> = ADDI %zero, 64
> %t1<def> = LUI 2
> %t1<def> = DREADPM %t1<kill>, 0
> WRITECM %t1<kill>, %t0, 4
> %t1<def> = LUI 0
> WRITEPM %t1, %t0, 4
> WRITEPM %t1<kill>, %t0, 8
> %t1<def> = LUI 3
> WRITEPM %t1<kill>, %t0<kill>, 8
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t2<def> = LUI 3
> %t0<def> = DREADPM %t2, 0
> %t1<def> = LUI 1048575
> %a5<def> = LUI 4095
> %a5<def> = SRLI %a5<internal>, 12
> ADD %t1, %t1, %a5
> SYNC %t0, %t1<kill>, 60
> %t1<def> = DREADPM %t2, 4
> %fp<def> = LW %t5, <fi#1>
> WRITECMP %t1, %fp<kill>, 1
> %t2<def> = DREADPM %t2<kill>, 8
> %fp<def> = LW %t5, <fi#1>
> WRITECMP %t2, %fp<kill>, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
********** EMITTING LIVE DEBUG VARIABLES **********
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: redefine_start1
max x:0, min x:0
max y:0, min y:0
current state of mf:# Machine code for function redefine_start1: Post SSA
Frame Objects:
  fi#0: size=1, align=4, at location [SP]
  fi#1: size=1, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %redefine_start1.entry
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 16
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = ADDI %t5, <fi#3>
	  * %t1<def> = LUI <MCSym="%lo("ga#0")">
	  * SRLI %t1, %t1, 12
	  * %t2<def> = LUI <ga:@redefine_in_placeholder>[TF=2]
	  * %t1<def> = ADD %t1<kill>, %t2<kill>
	  * %t1<def> = LW %t1<kill>, 0; mem:LD4[@redefine_in_placeholder]
	  * SW %t1<kill>, %t0<kill>, 0; mem:ST4[%3]
	  * %t0<def> = ADDI %t5, <fi#2>
	  * SW %zero, %t0<kill>, 0; mem:ST4[%2]
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 16
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 16
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 16
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %redefine_start1.for.cond
    Predecessors according to CFG: BB#0
	%t0<def> = ADDI %zero, 24
	  * %t1<def> = ADDI %t5, <fi#2>
	  * %t2<def> = ADDI %t5, <fi#1>
	  * %t1<def> = LW %t1<kill>, 0; mem:LD4[%2]
	  * %fp<def> = SLTI %t1, 25
	  * SB %fp<kill>, %t2<kill>, 0; mem:ST1[%1](align=4)
	  * %t2<def> = LUI 1
	  * WRITEPM %t2, %t1, 0
	  * %fp<def> = LUI 2
	  * WRITEPM %fp, %t1, 0
	  * %a0<def> = LUI 3
	  * WRITEPM %a0, %t1, 0
	  * WRITEPM %t2<kill>, %t0, 4
	  * WRITEPM %fp<kill>, %t0, 4
	  * WRITEPM %a0<kill>, %t0, 4
	  * BGT <BB#3>, %t1<kill>, %t0<kill>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 1
	  * %t1<def> = DREADPM %t0, 0
	  * %t0<def> = DREADPM %t0<kill>, 4
	  * BGT <BB#3>, %t1<kill>, %t0<kill>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = LUI 2
	  * %t1<def> = DREADPM %t0, 0
	  * %t0<def> = DREADPM %t0<kill>, 4
	  * BGT <BB#3>, %t1<kill>, %t0<kill>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t1<def> = LUI 3
	  * %t0<def> = DREADPM %t1, 0
	  * %t1<def> = DREADPM %t1<kill>, 4
	  * BGT <BB#3>, %t0<kill>, %t1<kill>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	  * JAL <BB#2>
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
    Successors according to CFG: BB#2(16) BB#3(16)

BB#2: derived from LLVM BB %redefine_start1.for.body
    Predecessors according to CFG: BB#1
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %redefine_start1.return
    Predecessors according to CFG: BB#1 BB#2
	%t0<def> = ADDI %zero, 1
	  * %t1<def> = ADDI %t5, <fi#0>
	  * SB %t0<kill>, %t1<kill>, 0; mem:ST1[%0](align=4)
	  * %t0<def> = ADDI %zero, 128
	  * %t1<def> = LUI <MCSym="%hi("ga#512")">
	  * %t2<def> = LUI <MCSym="%lo("ga#512")">
	  * %t2<def> = SRLI %t2<kill>, 12
	  * %t1<def> = ADD %t1<kill>, %t2<kill>
	  * %t2<def> = ADDI %zero, 16
	  * %fp<def> = SRLI %t0, 22
	  * %a0<def> = SRLI %t0, 12
	  * %a0<def> = ANDI %a0<kill>, 15
	  * %a1<def> = SRLI %t0, 6
	  * %a1<def> = ANDI %a1<kill>, 63
	  * %a2<def> = ADDI %zero, 832
	  * %fp<def> = MUL %fp<kill>, %a2<kill>
	  * %a2<def> = ADDI %zero, 52
	  * %a0<def> = MUL %a0<kill>, %a2<kill>
	  * %a0<def> = ADD %a0<kill>, %a1<kill>
	  * %fp<def> = ADD %a0<kill>, %fp<kill>
	  * %t2<def> = MUL %fp<kill>, %t2<kill>
	  * %t1<def> = ADD %t2<kill>, %t1<kill>
	  * %t2<def> = LW %t5, 8
	  * SW %t2<kill>, %t1<kill>, 0
	  * %t1<def> = LUI 0
	  * %t2<def> = DREADPM %t1, 0
	  * WRITECM %t2<kill>, %t0, 0
	  * %t2<def> = DREADPM %t1, 4
	  * %fp<def> = LW %t5, <fi#3>
	  * WRITECM %t2<kill>, %fp<kill>, 0
	  * %t2<def> = LUI 1
	  * WRITEPM %t2<kill>, %t0, 0
	  * %t1<def> = DREADPM %t1<kill>, 8
	  * WRITECM %t1<kill>, %t0, 4
	  * %t1<def> = LUI 3
	  * WRITEPM %t1<kill>, %t0<kill>, 4
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = ADDI %zero, 192
	  * %t1<def> = ADDI %zero, 2
	  * WRITECM %t0, %t1<kill>, 60
	  * %t1<def> = LUI 0
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 2
	  * WRITEPM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 1
	  * %t1<def> = DREADPM %t1<kill>, 0
	  * WRITECM %t1<kill>, %t0, 0
	  * %t1<def> = LUI 3
	  * WRITEPM %t1<kill>, %t0<kill>, 0
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t0<def> = ADDI %zero, 64
	  * %t1<def> = LUI 2
	  * %t1<def> = DREADPM %t1<kill>, 0
	  * WRITECM %t1<kill>, %t0, 4
	  * %t1<def> = LUI 0
	  * WRITEPM %t1, %t0, 4
	  * WRITEPM %t1<kill>, %t0, 8
	  * %t1<def> = LUI 3
	  * WRITEPM %t1<kill>, %t0<kill>, 8
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t2<def> = LUI 3
	  * %t0<def> = DREADPM %t2, 0
	  * %t1<def> = LUI 1048575
	  * %a5<def> = LUI 4095
	  * %a5<def> = SRLI %a5<internal>, 12
	  * ADD %t1, %t1, %a5
	  * SYNC %t0, %t1<kill>, 60
	  * %t1<def> = DREADPM %t2, 4
	  * %fp<def> = LW %t5, <fi#1>
	  * WRITECMP %t1, %fp<kill>, 1
	  * %t2<def> = DREADPM %t2<kill>, 8
	  * %fp<def> = LW %t5, <fi#1>
	  * WRITECMP %t2, %fp<kill>, 0
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0

# End machine code for function redefine_start1.

lowering frame index for func redefine_start1:3 TO VAL:12
lowering frame index for func redefine_start1:2 TO VAL:8
lowering frame index for func redefine_start1:2 TO VAL:8
lowering frame index for func redefine_start1:1 TO VAL:4
lowering frame index for func redefine_start1:0 TO VAL:0
lowering frame index for func redefine_start1:3 TO VAL:12
lowering frame index for func redefine_start1:1 TO VAL:4
lowering frame index for func redefine_start1:1 TO VAL:4
Computing probabilities for redefine_start3.return
Computing probabilities for redefine_start3.for.end



=== redefine_start3
Initial selection DAG: BB#0 'redefine_start3:redefine_start3.for.end'
SelectionDAG has 1 nodes:
  0x27d1e18: ch = EntryToken


Optimized lowered selection DAG: BB#0 'redefine_start3:redefine_start3.for.end'
SelectionDAG has 1 nodes:
  0x27d1e18: ch = EntryToken


Legally typed node: 0x27d1e18: ch = EntryToken [ID=0]

Legally typed node: 0x7fff149b9a10: ch = handlenode 0x27d1e18 [ID=0]

Type-legalized selection DAG: BB#0 'redefine_start3:redefine_start3.for.end'
SelectionDAG has 1 nodes:
  0x27d1e18: ch = EntryToken [ID=-3]


Legalized selection DAG: BB#0 'redefine_start3:redefine_start3.for.end'
SelectionDAG has 1 nodes:
  0x27d1e18: ch = EntryToken [ID=0]


Optimized legalized selection DAG: BB#0 'redefine_start3:redefine_start3.for.end'
SelectionDAG has 1 nodes:
  0x27d1e18: ch = EntryToken [ID=0]


===== Instruction selection begins: BB#0 'redefine_start3.for.end'
=> 0x27d1e18: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: BB#0 'redefine_start3:redefine_start3.for.end'
SelectionDAG has 1 nodes:
  0x27d1e18: ch = EntryToken


********** List Scheduling BB#0 'redefine_start3.for.end' **********
*** Final schedule ***

Total amount of phi nodes to update: 0
Initial selection DAG: BB#1 'redefine_start3:redefine_start3.return'
SelectionDAG has 1 nodes:
  0x27d1e18: ch = EntryToken


Optimized lowered selection DAG: BB#1 'redefine_start3:redefine_start3.return'
SelectionDAG has 1 nodes:
  0x27d1e18: ch = EntryToken


Legally typed node: 0x27d1e18: ch = EntryToken [ID=0]

Legally typed node: 0x7fff149b9a10: ch = handlenode 0x27d1e18 [ID=0]

Type-legalized selection DAG: BB#1 'redefine_start3:redefine_start3.return'
SelectionDAG has 1 nodes:
  0x27d1e18: ch = EntryToken [ID=-3]


Legalized selection DAG: BB#1 'redefine_start3:redefine_start3.return'
SelectionDAG has 1 nodes:
  0x27d1e18: ch = EntryToken [ID=0]


Optimized legalized selection DAG: BB#1 'redefine_start3:redefine_start3.return'
SelectionDAG has 1 nodes:
  0x27d1e18: ch = EntryToken [ID=0]


===== Instruction selection begins: BB#1 'redefine_start3.return'
=> 0x27d1e18: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: BB#1 'redefine_start3:redefine_start3.return'
SelectionDAG has 1 nodes:
  0x27d1e18: ch = EntryToken


********** List Scheduling BB#1 'redefine_start3.return' **********
*** Final schedule ***

Total amount of phi nodes to update: 0

*** Tail-duplicating BB#1

Merging into block: BB#0: derived from LLVM BB %redefine_start3.for.end
    Successors according to CFG: BB#1
From MBB: BB#1: derived from LLVM BB %redefine_start3.return
    Predecessors according to CFG: BB#0

Removing MBB: BB#1: derived from LLVM BB %redefine_start3.return
# Machine code for function redefine_start3: SSA

0B	BB#0: derived from LLVM BB %redefine_start3.for.end

# End machine code for function redefine_start3.

********** Stack Coloring **********
********** Function: redefine_start3
******** Pre-regalloc Machine LICM: redefine_start3 ********
******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: redefine_start3
********** PROCESS IMPLICIT DEFS **********
********** Function: redefine_start3
********** REWRITING TWO-ADDR INSTRS **********
********** Function: redefine_start3
# Machine code for function redefine_start3: Post SSA

0B	BB#0: derived from LLVM BB %redefine_start3.for.end

# End machine code for function redefine_start3.

Computing live-in reg-units in ABI blocks.
Created 0 new intervals.
********** INTERVALS **********
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start3: Post SSA

0B	BB#0: derived from LLVM BB %redefine_start3.for.end

# End machine code for function redefine_start3.

********** SIMPLE REGISTER COALESCING **********
********** Function: redefine_start3
********** JOINING INTERVALS ***********
redefine_start3.for.end:
Trying to inflate 0 regs.
********** INTERVALS **********
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start3: Post SSA

0B	BB#0: derived from LLVM BB %redefine_start3.for.end

# End machine code for function redefine_start3.

Before MISched:
# Machine code for function redefine_start3: Post SSA

BB#0: derived from LLVM BB %redefine_start3.for.end

# End machine code for function redefine_start3.


-------------
Starting new basic block BB#0

*** Renumbered SlotIndexes 12-28 ***

*** Renumbered SlotIndexes 24-40 ***

*** Renumbered SlotIndexes 36-52 ***

*** Renumbered SlotIndexes 48-64 ***

*** Renumbered SlotIndexes 60-76 ***

*** Renumbered SlotIndexes 72-88 ***

*** Renumbered SlotIndexes 84-100 ***

*** Renumbered SlotIndexes 96-112 ***

*** Renumbered SlotIndexes 108-124 ***

*** Renumbered SlotIndexes 120-136 ***

*** Renumbered SlotIndexes 132-148 ***

*** Renumbered SlotIndexes 144-160 ***

*** Renumbered SlotIndexes 156-172 ***

*** Renumbered SlotIndexes 168-184 ***

*** Renumbered SlotIndexes 180-196 ***

*** Renumbered SlotIndexes 192-208 ***

*** Renumbered SlotIndexes 204-220 ***

*** Renumbered SlotIndexes 216-232 ***

*** Renumbered SlotIndexes 228-244 ***

*** Renumbered SlotIndexes 240-256 ***

*** Renumbered SlotIndexes 252-268 ***

*** Renumbered SlotIndexes 264-280 ***

*** Renumbered SlotIndexes 276-292 ***

*** Renumbered SlotIndexes 288-304 ***

*** Renumbered SlotIndexes 300-316 ***

*** Renumbered SlotIndexes 312-328 ***

*** Renumbered SlotIndexes 324-340 ***

*** Renumbered SlotIndexes 336-352 ***

*** Renumbered SlotIndexes 348-364 ***

*** Renumbered SlotIndexes 360-376 ***

*** Renumbered SlotIndexes 372-388 ***

*** Renumbered SlotIndexes 384-400 ***

*** Renumbered SlotIndexes 396-412 ***
before falloc, state of bb0:BB#0: derived from LLVM BB %redefine_start3.for.end
	%vreg0<def> = ADD %t5, %zero; GR32Bit:%vreg0
	%vreg2<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg2
	%vreg3<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg3
	%vreg4<def> = SRLI %vreg3, 12; GR32Bit:%vreg4,%vreg3
	%vreg5<def> = ADD %vreg2, %vreg4; GR32Bit:%vreg5,%vreg2,%vreg4
	%vreg6<def> = ADDI %zero, 16; GR32Bit:%vreg6
	%vreg7<def> = SRLI %t5, 22; GR32Bit:%vreg7
	%vreg8<def> = SRLI %t5, 12; GR32Bit:%vreg8
	%vreg9<def> = ANDI %vreg8, 15; GR32Bit:%vreg9,%vreg8
	%vreg10<def> = SRLI %t5, 6; GR32Bit:%vreg10
	%vreg11<def> = ANDI %vreg10, 63; GR32Bit:%vreg11,%vreg10
	%vreg12<def> = ADDI %zero, 832; GR32Bit:%vreg12
	%vreg13<def> = MUL %vreg7, %vreg12; GR32Bit:%vreg13,%vreg7,%vreg12
	%vreg14<def> = ADDI %zero, 52; GR32Bit:%vreg14
	%vreg15<def> = MUL %vreg9, %vreg14; GR32Bit:%vreg15,%vreg9,%vreg14
	%vreg16<def> = ADD %vreg15, %vreg11; GR32Bit:%vreg16,%vreg15,%vreg11
	%vreg17<def> = ADD %vreg16, %vreg13; GR32Bit:%vreg17,%vreg16,%vreg13
	%vreg18<def> = MUL %vreg17, %vreg6; GR32Bit:%vreg18,%vreg17,%vreg6
	%vreg1<def> = ADD %vreg5, %vreg18; GR32Bit:%vreg1,%vreg5,%vreg18
	%vreg19<def> = ADD %t5, %zero; GR32Bit:%vreg19
	%vreg21<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg21
	%vreg22<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg22
	%vreg23<def> = SRLI %vreg22, 12; GR32Bit:%vreg23,%vreg22
	%vreg24<def> = ADD %vreg21, %vreg23; GR32Bit:%vreg24,%vreg21,%vreg23
	%vreg25<def> = ADDI %zero, 16; GR32Bit:%vreg25
	%vreg26<def> = SRLI %t5, 22; GR32Bit:%vreg26
	%vreg27<def> = SRLI %t5, 12; GR32Bit:%vreg27
	%vreg28<def> = ANDI %vreg27, 15; GR32Bit:%vreg28,%vreg27
	%vreg29<def> = SRLI %t5, 6; GR32Bit:%vreg29
	%vreg30<def> = ANDI %vreg29, 63; GR32Bit:%vreg30,%vreg29
	%vreg31<def> = ADDI %zero, 832; GR32Bit:%vreg31
	%vreg32<def> = MUL %vreg26, %vreg31; GR32Bit:%vreg32,%vreg26,%vreg31
	%vreg33<def> = ADDI %zero, 52; GR32Bit:%vreg33
	%vreg34<def> = MUL %vreg28, %vreg33; GR32Bit:%vreg34,%vreg28,%vreg33
	%vreg35<def> = ADD %vreg34, %vreg30; GR32Bit:%vreg35,%vreg34,%vreg30
	%vreg36<def> = ADD %vreg35, %vreg32; GR32Bit:%vreg36,%vreg35,%vreg32
	%vreg37<def> = MUL %vreg36, %vreg25; GR32Bit:%vreg37,%vreg36,%vreg25
	%vreg20<def> = ADD %vreg24, %vreg37; GR32Bit:%vreg20,%vreg24,%vreg37
	%vreg38<def> = ADD %t5, %zero; GR32Bit:%vreg38
	%vreg40<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg40
	%vreg41<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg41
	%vreg42<def> = SRLI %vreg41, 12; GR32Bit:%vreg42,%vreg41
	%vreg43<def> = ADD %vreg40, %vreg42; GR32Bit:%vreg43,%vreg40,%vreg42
	%vreg44<def> = ADDI %zero, 16; GR32Bit:%vreg44
	%vreg45<def> = SRLI %t5, 22; GR32Bit:%vreg45
	%vreg46<def> = SRLI %t5, 12; GR32Bit:%vreg46
	%vreg47<def> = ANDI %vreg46, 15; GR32Bit:%vreg47,%vreg46
	%vreg48<def> = SRLI %t5, 6; GR32Bit:%vreg48
	%vreg49<def> = ANDI %vreg48, 63; GR32Bit:%vreg49,%vreg48
	%vreg50<def> = ADDI %zero, 832; GR32Bit:%vreg50
	%vreg51<def> = MUL %vreg45, %vreg50; GR32Bit:%vreg51,%vreg45,%vreg50
	%vreg52<def> = ADDI %zero, 52; GR32Bit:%vreg52
	%vreg53<def> = MUL %vreg47, %vreg52; GR32Bit:%vreg53,%vreg47,%vreg52
	%vreg54<def> = ADD %vreg53, %vreg49; GR32Bit:%vreg54,%vreg53,%vreg49
	%vreg55<def> = ADD %vreg54, %vreg51; GR32Bit:%vreg55,%vreg54,%vreg51
	%vreg56<def> = MUL %vreg55, %vreg44; GR32Bit:%vreg56,%vreg55,%vreg44
	%vreg39<def> = ADD %vreg43, %vreg56; GR32Bit:%vreg39,%vreg43,%vreg56
	%vreg57<def> = ADD %t5, %zero; GR32Bit:%vreg57
	%vreg59<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg59
	%vreg60<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg60
	%vreg61<def> = SRLI %vreg60, 12; GR32Bit:%vreg61,%vreg60
	%vreg62<def> = ADD %vreg59, %vreg61; GR32Bit:%vreg62,%vreg59,%vreg61
	%vreg63<def> = ADDI %zero, 16; GR32Bit:%vreg63
	%vreg64<def> = SRLI %t5, 22; GR32Bit:%vreg64
	%vreg65<def> = SRLI %t5, 12; GR32Bit:%vreg65
	%vreg66<def> = ANDI %vreg65, 15; GR32Bit:%vreg66,%vreg65
	%vreg67<def> = SRLI %t5, 6; GR32Bit:%vreg67
	%vreg68<def> = ANDI %vreg67, 63; GR32Bit:%vreg68,%vreg67
	%vreg69<def> = ADDI %zero, 832; GR32Bit:%vreg69
	%vreg70<def> = MUL %vreg64, %vreg69; GR32Bit:%vreg70,%vreg64,%vreg69
	%vreg71<def> = ADDI %zero, 52; GR32Bit:%vreg71
	%vreg72<def> = MUL %vreg66, %vreg71; GR32Bit:%vreg72,%vreg66,%vreg71
	%vreg73<def> = ADD %vreg72, %vreg68; GR32Bit:%vreg73,%vreg72,%vreg68
	%vreg74<def> = ADD %vreg73, %vreg70; GR32Bit:%vreg74,%vreg73,%vreg70
	%vreg75<def> = MUL %vreg74, %vreg63; GR32Bit:%vreg75,%vreg74,%vreg63
	%vreg58<def> = ADD %vreg62, %vreg75; GR32Bit:%vreg58,%vreg62,%vreg75
Adding all fallocs first to avoid stalls due to sequential fallocs and fbinds
Adding writecm(for writing sync count to context frames) and fbind instructions

*** Renumbered SlotIndexes 408-424 ***
Computing live-in reg-units in ABI blocks.
0B	BB#0 ra#0
Created 1 new intervals.
live end of child is itself

*** Renumbered SlotIndexes 420-436 ***
Computing live-in reg-units in ABI blocks.
0B	BB#0 ra#0 sp#0
Created 1 new intervals.
Adding localref sw instructions to hyperOp redefine_start3
Adding writecm instructions to hyperOp redefine_start3
Adding writecmp and sync instructions

*** Renumbered SlotIndexes 432-448 ***
Adding endHyperOp instructions to each pHyperOp

*** Renumbered SlotIndexes 412-468 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 424-480 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 436-492 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 448-504 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 460-516 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 472-528 ***
  %zero<def> = ADDI %zero, 0
After Shuffling regions of basic block, state of BB#0:
BB#0: derived from LLVM BB %redefine_start3.for.end
    Live Ins: %ra %sp
	%vreg0<def> = ADD %t5, %zero; GR32Bit:%vreg0
	%vreg2<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg2
	%vreg3<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg3
	%vreg4<def> = SRLI %vreg3, 12; GR32Bit:%vreg4,%vreg3
	%vreg5<def> = ADD %vreg2, %vreg4; GR32Bit:%vreg5,%vreg2,%vreg4
	%vreg6<def> = ADDI %zero, 16; GR32Bit:%vreg6
	%vreg7<def> = SRLI %t5, 22; GR32Bit:%vreg7
	%vreg8<def> = SRLI %t5, 12; GR32Bit:%vreg8
	%vreg9<def> = ANDI %vreg8, 15; GR32Bit:%vreg9,%vreg8
	%vreg10<def> = SRLI %t5, 6; GR32Bit:%vreg10
	%vreg11<def> = ANDI %vreg10, 63; GR32Bit:%vreg11,%vreg10
	%vreg12<def> = ADDI %zero, 832; GR32Bit:%vreg12
	%vreg13<def> = MUL %vreg7, %vreg12; GR32Bit:%vreg13,%vreg7,%vreg12
	%vreg14<def> = ADDI %zero, 52; GR32Bit:%vreg14
	%vreg15<def> = MUL %vreg9, %vreg14; GR32Bit:%vreg15,%vreg9,%vreg14
	%vreg16<def> = ADD %vreg15, %vreg11; GR32Bit:%vreg16,%vreg15,%vreg11
	%vreg17<def> = ADD %vreg16, %vreg13; GR32Bit:%vreg17,%vreg16,%vreg13
	%vreg18<def> = MUL %vreg17, %vreg6; GR32Bit:%vreg18,%vreg17,%vreg6
	%vreg1<def> = ADD %vreg5, %vreg18; GR32Bit:%vreg1,%vreg5,%vreg18
	%vreg76<def> = COPY %ra; GR32Bit:%vreg76
	FDELETE %vreg76, 0; GR32Bit:%vreg76
	%vreg77<def> = COPY %sp; GR32Bit:%vreg77
	FDELETE %vreg77, 0; GR32Bit:%vreg77
	FDELETE %t4, 0
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg19<def> = ADD %t5, %zero; GR32Bit:%vreg19
	%vreg21<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg21
	%vreg22<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg22
	%vreg23<def> = SRLI %vreg22, 12; GR32Bit:%vreg23,%vreg22
	%vreg24<def> = ADD %vreg21, %vreg23; GR32Bit:%vreg24,%vreg21,%vreg23
	%vreg25<def> = ADDI %zero, 16; GR32Bit:%vreg25
	%vreg26<def> = SRLI %t5, 22; GR32Bit:%vreg26
	%vreg27<def> = SRLI %t5, 12; GR32Bit:%vreg27
	%vreg28<def> = ANDI %vreg27, 15; GR32Bit:%vreg28,%vreg27
	%vreg29<def> = SRLI %t5, 6; GR32Bit:%vreg29
	%vreg30<def> = ANDI %vreg29, 63; GR32Bit:%vreg30,%vreg29
	%vreg31<def> = ADDI %zero, 832; GR32Bit:%vreg31
	%vreg32<def> = MUL %vreg26, %vreg31; GR32Bit:%vreg32,%vreg26,%vreg31
	%vreg33<def> = ADDI %zero, 52; GR32Bit:%vreg33
	%vreg34<def> = MUL %vreg28, %vreg33; GR32Bit:%vreg34,%vreg28,%vreg33
	%vreg35<def> = ADD %vreg34, %vreg30; GR32Bit:%vreg35,%vreg34,%vreg30
	%vreg36<def> = ADD %vreg35, %vreg32; GR32Bit:%vreg36,%vreg35,%vreg32
	%vreg37<def> = MUL %vreg36, %vreg25; GR32Bit:%vreg37,%vreg36,%vreg25
	%vreg20<def> = ADD %vreg24, %vreg37; GR32Bit:%vreg20,%vreg24,%vreg37
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg38<def> = ADD %t5, %zero; GR32Bit:%vreg38
	%vreg40<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg40
	%vreg41<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg41
	%vreg42<def> = SRLI %vreg41, 12; GR32Bit:%vreg42,%vreg41
	%vreg43<def> = ADD %vreg40, %vreg42; GR32Bit:%vreg43,%vreg40,%vreg42
	%vreg44<def> = ADDI %zero, 16; GR32Bit:%vreg44
	%vreg45<def> = SRLI %t5, 22; GR32Bit:%vreg45
	%vreg46<def> = SRLI %t5, 12; GR32Bit:%vreg46
	%vreg47<def> = ANDI %vreg46, 15; GR32Bit:%vreg47,%vreg46
	%vreg48<def> = SRLI %t5, 6; GR32Bit:%vreg48
	%vreg49<def> = ANDI %vreg48, 63; GR32Bit:%vreg49,%vreg48
	%vreg50<def> = ADDI %zero, 832; GR32Bit:%vreg50
	%vreg51<def> = MUL %vreg45, %vreg50; GR32Bit:%vreg51,%vreg45,%vreg50
	%vreg52<def> = ADDI %zero, 52; GR32Bit:%vreg52
	%vreg53<def> = MUL %vreg47, %vreg52; GR32Bit:%vreg53,%vreg47,%vreg52
	%vreg54<def> = ADD %vreg53, %vreg49; GR32Bit:%vreg54,%vreg53,%vreg49
	%vreg55<def> = ADD %vreg54, %vreg51; GR32Bit:%vreg55,%vreg54,%vreg51
	%vreg56<def> = MUL %vreg55, %vreg44; GR32Bit:%vreg56,%vreg55,%vreg44
	%vreg39<def> = ADD %vreg43, %vreg56; GR32Bit:%vreg39,%vreg43,%vreg56
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg57<def> = ADD %t5, %zero; GR32Bit:%vreg57
	%vreg59<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg59
	%vreg60<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg60
	%vreg61<def> = SRLI %vreg60, 12; GR32Bit:%vreg61,%vreg60
	%vreg62<def> = ADD %vreg59, %vreg61; GR32Bit:%vreg62,%vreg59,%vreg61
	%vreg63<def> = ADDI %zero, 16; GR32Bit:%vreg63
	%vreg64<def> = SRLI %t5, 22; GR32Bit:%vreg64
	%vreg65<def> = SRLI %t5, 12; GR32Bit:%vreg65
	%vreg66<def> = ANDI %vreg65, 15; GR32Bit:%vreg66,%vreg65
	%vreg67<def> = SRLI %t5, 6; GR32Bit:%vreg67
	%vreg68<def> = ANDI %vreg67, 63; GR32Bit:%vreg68,%vreg67
	%vreg69<def> = ADDI %zero, 832; GR32Bit:%vreg69
	%vreg70<def> = MUL %vreg64, %vreg69; GR32Bit:%vreg70,%vreg64,%vreg69
	%vreg71<def> = ADDI %zero, 52; GR32Bit:%vreg71
	%vreg72<def> = MUL %vreg66, %vreg71; GR32Bit:%vreg72,%vreg66,%vreg71
	%vreg73<def> = ADD %vreg72, %vreg68; GR32Bit:%vreg73,%vreg72,%vreg68
	%vreg74<def> = ADD %vreg73, %vreg70; GR32Bit:%vreg74,%vreg73,%vreg70
	%vreg75<def> = MUL %vreg74, %vreg63; GR32Bit:%vreg75,%vreg74,%vreg63
	%vreg58<def> = ADD %vreg62, %vreg75; GR32Bit:%vreg58,%vreg62,%vreg75
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 320-592 ***

*** Renumbered SlotIndexes 308-612 ***

*** Renumbered SlotIndexes 308-628 ***

*** Renumbered SlotIndexes 216-672 ***

*** Renumbered SlotIndexes 204-692 ***

*** Renumbered SlotIndexes 116-740 ***

*** Renumbered SlotIndexes 104-760 ***

*** Renumbered SlotIndexes 104-776 ***

*** Renumbered SlotIndexes 104-792 ***

*** Renumbered SlotIndexes 104-808 ***

*** Renumbered SlotIndexes 12-860 ***
Creating pHyperOp bundles for CEs for bb0
  %vreg19<def> = ADD %t5, %zero; GR32Bit:%vreg19
starting at   %vreg0<def> = ADD %t5, %zero; GR32Bit:%vreg0
  %vreg38<def> = ADD %t5, %zero; GR32Bit:%vreg38
starting at   %vreg19<def> = ADD %t5, %zero; GR32Bit:%vreg19
  %vreg57<def> = ADD %t5, %zero; GR32Bit:%vreg57
starting at   %vreg38<def> = ADD %t5, %zero; GR32Bit:%vreg38
starting at   %vreg57<def> = ADD %t5, %zero; GR32Bit:%vreg57
After bundling, state of BB0:BB#0: derived from LLVM BB %redefine_start3.for.end
    Live Ins: %ra %sp
	%vreg0<def> = ADD %t5, %zero; GR32Bit:%vreg0
	  * %vreg2<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg2
	  * %vreg3<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg3
	  * %vreg4<def> = SRLI %vreg3, 12; GR32Bit:%vreg4,%vreg3
	  * %vreg5<def> = ADD %vreg2, %vreg4; GR32Bit:%vreg5,%vreg2,%vreg4
	  * %vreg6<def> = ADDI %zero, 16; GR32Bit:%vreg6
	  * %vreg7<def> = SRLI %t5, 22; GR32Bit:%vreg7
	  * %vreg8<def> = SRLI %t5, 12; GR32Bit:%vreg8
	  * %vreg9<def> = ANDI %vreg8, 15; GR32Bit:%vreg9,%vreg8
	  * %vreg10<def> = SRLI %t5, 6; GR32Bit:%vreg10
	  * %vreg11<def> = ANDI %vreg10, 63; GR32Bit:%vreg11,%vreg10
	  * %vreg12<def> = ADDI %zero, 832; GR32Bit:%vreg12
	  * %vreg13<def> = MUL %vreg7, %vreg12; GR32Bit:%vreg13,%vreg7,%vreg12
	  * %vreg14<def> = ADDI %zero, 52; GR32Bit:%vreg14
	  * %vreg15<def> = MUL %vreg9, %vreg14; GR32Bit:%vreg15,%vreg9,%vreg14
	  * %vreg16<def> = ADD %vreg15, %vreg11; GR32Bit:%vreg16,%vreg15,%vreg11
	  * %vreg17<def> = ADD %vreg16, %vreg13; GR32Bit:%vreg17,%vreg16,%vreg13
	  * %vreg18<def> = MUL %vreg17, %vreg6; GR32Bit:%vreg18,%vreg17,%vreg6
	  * %vreg1<def> = ADD %vreg5, %vreg18; GR32Bit:%vreg1,%vreg5,%vreg18
	  * %vreg76<def> = COPY %ra; GR32Bit:%vreg76
	  * FDELETE %vreg76, 0; GR32Bit:%vreg76
	  * %vreg77<def> = COPY %sp; GR32Bit:%vreg77
	  * FDELETE %vreg77, 0; GR32Bit:%vreg77
	  * FDELETE %t4, 0
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg19<def> = ADD %t5, %zero; GR32Bit:%vreg19
	  * %vreg21<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg21
	  * %vreg22<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg22
	  * %vreg23<def> = SRLI %vreg22, 12; GR32Bit:%vreg23,%vreg22
	  * %vreg24<def> = ADD %vreg21, %vreg23; GR32Bit:%vreg24,%vreg21,%vreg23
	  * %vreg25<def> = ADDI %zero, 16; GR32Bit:%vreg25
	  * %vreg26<def> = SRLI %t5, 22; GR32Bit:%vreg26
	  * %vreg27<def> = SRLI %t5, 12; GR32Bit:%vreg27
	  * %vreg28<def> = ANDI %vreg27, 15; GR32Bit:%vreg28,%vreg27
	  * %vreg29<def> = SRLI %t5, 6; GR32Bit:%vreg29
	  * %vreg30<def> = ANDI %vreg29, 63; GR32Bit:%vreg30,%vreg29
	  * %vreg31<def> = ADDI %zero, 832; GR32Bit:%vreg31
	  * %vreg32<def> = MUL %vreg26, %vreg31; GR32Bit:%vreg32,%vreg26,%vreg31
	  * %vreg33<def> = ADDI %zero, 52; GR32Bit:%vreg33
	  * %vreg34<def> = MUL %vreg28, %vreg33; GR32Bit:%vreg34,%vreg28,%vreg33
	  * %vreg35<def> = ADD %vreg34, %vreg30; GR32Bit:%vreg35,%vreg34,%vreg30
	  * %vreg36<def> = ADD %vreg35, %vreg32; GR32Bit:%vreg36,%vreg35,%vreg32
	  * %vreg37<def> = MUL %vreg36, %vreg25; GR32Bit:%vreg37,%vreg36,%vreg25
	  * %vreg20<def> = ADD %vreg24, %vreg37; GR32Bit:%vreg20,%vreg24,%vreg37
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg38<def> = ADD %t5, %zero; GR32Bit:%vreg38
	  * %vreg40<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg40
	  * %vreg41<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg41
	  * %vreg42<def> = SRLI %vreg41, 12; GR32Bit:%vreg42,%vreg41
	  * %vreg43<def> = ADD %vreg40, %vreg42; GR32Bit:%vreg43,%vreg40,%vreg42
	  * %vreg44<def> = ADDI %zero, 16; GR32Bit:%vreg44
	  * %vreg45<def> = SRLI %t5, 22; GR32Bit:%vreg45
	  * %vreg46<def> = SRLI %t5, 12; GR32Bit:%vreg46
	  * %vreg47<def> = ANDI %vreg46, 15; GR32Bit:%vreg47,%vreg46
	  * %vreg48<def> = SRLI %t5, 6; GR32Bit:%vreg48
	  * %vreg49<def> = ANDI %vreg48, 63; GR32Bit:%vreg49,%vreg48
	  * %vreg50<def> = ADDI %zero, 832; GR32Bit:%vreg50
	  * %vreg51<def> = MUL %vreg45, %vreg50; GR32Bit:%vreg51,%vreg45,%vreg50
	  * %vreg52<def> = ADDI %zero, 52; GR32Bit:%vreg52
	  * %vreg53<def> = MUL %vreg47, %vreg52; GR32Bit:%vreg53,%vreg47,%vreg52
	  * %vreg54<def> = ADD %vreg53, %vreg49; GR32Bit:%vreg54,%vreg53,%vreg49
	  * %vreg55<def> = ADD %vreg54, %vreg51; GR32Bit:%vreg55,%vreg54,%vreg51
	  * %vreg56<def> = MUL %vreg55, %vreg44; GR32Bit:%vreg56,%vreg55,%vreg44
	  * %vreg39<def> = ADD %vreg43, %vreg56; GR32Bit:%vreg39,%vreg43,%vreg56
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg57<def> = ADD %t5, %zero; GR32Bit:%vreg57
	  * %vreg59<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg59
	  * %vreg60<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg60
	  * %vreg61<def> = SRLI %vreg60, 12; GR32Bit:%vreg61,%vreg60
	  * %vreg62<def> = ADD %vreg59, %vreg61; GR32Bit:%vreg62,%vreg59,%vreg61
	  * %vreg63<def> = ADDI %zero, 16; GR32Bit:%vreg63
	  * %vreg64<def> = SRLI %t5, 22; GR32Bit:%vreg64
	  * %vreg65<def> = SRLI %t5, 12; GR32Bit:%vreg65
	  * %vreg66<def> = ANDI %vreg65, 15; GR32Bit:%vreg66,%vreg65
	  * %vreg67<def> = SRLI %t5, 6; GR32Bit:%vreg67
	  * %vreg68<def> = ANDI %vreg67, 63; GR32Bit:%vreg68,%vreg67
	  * %vreg69<def> = ADDI %zero, 832; GR32Bit:%vreg69
	  * %vreg70<def> = MUL %vreg64, %vreg69; GR32Bit:%vreg70,%vreg64,%vreg69
	  * %vreg71<def> = ADDI %zero, 52; GR32Bit:%vreg71
	  * %vreg72<def> = MUL %vreg66, %vreg71; GR32Bit:%vreg72,%vreg66,%vreg71
	  * %vreg73<def> = ADD %vreg72, %vreg68; GR32Bit:%vreg73,%vreg72,%vreg68
	  * %vreg74<def> = ADD %vreg73, %vreg70; GR32Bit:%vreg74,%vreg73,%vreg70
	  * %vreg75<def> = MUL %vreg74, %vreg63; GR32Bit:%vreg75,%vreg74,%vreg63
	  * %vreg58<def> = ADD %vreg62, %vreg75; GR32Bit:%vreg58,%vreg62,%vreg75
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
%physreg43,%physreg56,Patching the instructions that are supposed to use the physical registers r30 and r31
Computing live-in reg-units in ABI blocks.
0B	BB#0 ra#0 sp#0
Created 0 new intervals.
********** INTERVALS **********
ra = [0B,820r:0)  0@0B-phi
sp = [0B,836r:0)  0@0B-phi
%vreg0 = [8r,8d:0)  0@8r
%vreg1 = [148r,148d:0)  0@148r
%vreg2 = [12r,36r:0)  0@12r
%vreg3 = [20r,28r:0)  0@20r
%vreg4 = [28r,36r:0)  0@28r
%vreg5 = [36r,148r:0)  0@36r
%vreg6 = [44r,140r:0)  0@44r
%vreg7 = [52r,100r:0)  0@52r
%vreg8 = [60r,68r:0)  0@60r
%vreg9 = [68r,116r:0)  0@68r
%vreg10 = [76r,84r:0)  0@76r
%vreg11 = [84r,124r:0)  0@84r
%vreg12 = [92r,100r:0)  0@92r
%vreg13 = [100r,132r:0)  0@100r
%vreg14 = [108r,116r:0)  0@108r
%vreg15 = [116r,124r:0)  0@116r
%vreg16 = [124r,132r:0)  0@124r
%vreg17 = [132r,140r:0)  0@132r
%vreg18 = [140r,148r:0)  0@140r
%vreg19 = [220r,220d:0)  0@220r
%vreg20 = [364r,364d:0)  0@364r
%vreg21 = [228r,252r:0)  0@228r
%vreg22 = [236r,244r:0)  0@236r
%vreg23 = [244r,252r:0)  0@244r
%vreg24 = [252r,364r:0)  0@252r
%vreg25 = [260r,356r:0)  0@260r
%vreg26 = [268r,316r:0)  0@268r
%vreg27 = [276r,284r:0)  0@276r
%vreg28 = [284r,332r:0)  0@284r
%vreg29 = [292r,300r:0)  0@292r
%vreg30 = [300r,340r:0)  0@300r
%vreg31 = [308r,316r:0)  0@308r
%vreg32 = [316r,348r:0)  0@316r
%vreg33 = [324r,332r:0)  0@324r
%vreg34 = [332r,340r:0)  0@332r
%vreg35 = [340r,348r:0)  0@340r
%vreg36 = [348r,356r:0)  0@348r
%vreg37 = [356r,364r:0)  0@356r
%vreg38 = [396r,396d:0)  0@396r
%vreg39 = [540r,540d:0)  0@540r
%vreg40 = [404r,428r:0)  0@404r
%vreg41 = [412r,420r:0)  0@412r
%vreg42 = [420r,428r:0)  0@420r
%vreg43 = [428r,540r:0)  0@428r
%vreg44 = [436r,532r:0)  0@436r
%vreg45 = [444r,492r:0)  0@444r
%vreg46 = [452r,460r:0)  0@452r
%vreg47 = [460r,508r:0)  0@460r
%vreg48 = [468r,476r:0)  0@468r
%vreg49 = [476r,516r:0)  0@476r
%vreg50 = [484r,492r:0)  0@484r
%vreg51 = [492r,524r:0)  0@492r
%vreg52 = [500r,508r:0)  0@500r
%vreg53 = [508r,516r:0)  0@508r
%vreg54 = [516r,524r:0)  0@516r
%vreg55 = [524r,532r:0)  0@524r
%vreg56 = [532r,540r:0)  0@532r
%vreg57 = [572r,572d:0)  0@572r
%vreg58 = [716r,716d:0)  0@716r
%vreg59 = [580r,604r:0)  0@580r
%vreg60 = [588r,596r:0)  0@588r
%vreg61 = [596r,604r:0)  0@596r
%vreg62 = [604r,716r:0)  0@604r
%vreg63 = [612r,708r:0)  0@612r
%vreg64 = [620r,668r:0)  0@620r
%vreg65 = [628r,636r:0)  0@628r
%vreg66 = [636r,684r:0)  0@636r
%vreg67 = [644r,652r:0)  0@644r
%vreg68 = [652r,692r:0)  0@652r
%vreg69 = [660r,668r:0)  0@660r
%vreg70 = [668r,700r:0)  0@668r
%vreg71 = [676r,684r:0)  0@676r
%vreg72 = [684r,692r:0)  0@684r
%vreg73 = [692r,700r:0)  0@692r
%vreg74 = [700r,708r:0)  0@700r
%vreg75 = [708r,716r:0)  0@708r
%vreg76 = [156r,164r:0)  0@156r
%vreg77 = [172r,180r:0)  0@172r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start3: Post SSA
Function Live Ins: %ra in %vreg76, %sp in %vreg77

0B	BB#0: derived from LLVM BB %redefine_start3.for.end
	    Live Ins: %ra %sp
8B		%t4<def> = ADD %t5, %zero
8B		  * %vreg2<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg2
8B		  * %vreg3<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg3
8B		  * %vreg4<def> = SRLI %vreg3, 12; GR32Bit:%vreg4,%vreg3
8B		  * %vreg5<def> = ADD %vreg2, %vreg4; GR32Bit:%vreg5,%vreg2,%vreg4
8B		  * %vreg6<def> = ADDI %zero, 16; GR32Bit:%vreg6
8B		  * %vreg7<def> = SRLI %t5, 22; GR32Bit:%vreg7
8B		  * %vreg8<def> = SRLI %t5, 12; GR32Bit:%vreg8
8B		  * %vreg9<def> = ANDI %vreg8, 15; GR32Bit:%vreg9,%vreg8
8B		  * %vreg10<def> = SRLI %t5, 6; GR32Bit:%vreg10
8B		  * %vreg11<def> = ANDI %vreg10, 63; GR32Bit:%vreg11,%vreg10
8B		  * %vreg12<def> = ADDI %zero, 832; GR32Bit:%vreg12
8B		  * %vreg13<def> = MUL %vreg7, %vreg12; GR32Bit:%vreg13,%vreg7,%vreg12
8B		  * %vreg14<def> = ADDI %zero, 52; GR32Bit:%vreg14
8B		  * %vreg15<def> = MUL %vreg9, %vreg14; GR32Bit:%vreg15,%vreg9,%vreg14
8B		  * %vreg16<def> = ADD %vreg15, %vreg11; GR32Bit:%vreg16,%vreg15,%vreg11
8B		  * %vreg17<def> = ADD %vreg16, %vreg13; GR32Bit:%vreg17,%vreg16,%vreg13
8B		  * %vreg18<def> = MUL %vreg17, %vreg6; GR32Bit:%vreg18,%vreg17,%vreg6
8B		  * %t5<def> = ADD %vreg5, %vreg18; GR32Bit:%vreg5,%vreg18
8B		  * %vreg76<def> = COPY %ra; GR32Bit:%vreg76
8B		  * FDELETE %vreg76, 0; GR32Bit:%vreg76
8B		  * %vreg77<def> = COPY %sp; GR32Bit:%vreg77
8B		  * FDELETE %vreg77, 0; GR32Bit:%vreg77
8B		  * FDELETE %t4, 0
8B		  * END 0
8B		  * %zero<def> = ADDI %zero, 0
8B		  * %zero<def> = ADDI %zero, 0
220B		%t4<def> = ADD %t5, %zero
220B		  * %vreg21<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg21
220B		  * %vreg22<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg22
220B		  * %vreg23<def> = SRLI %vreg22, 12; GR32Bit:%vreg23,%vreg22
220B		  * %vreg24<def> = ADD %vreg21, %vreg23; GR32Bit:%vreg24,%vreg21,%vreg23
220B		  * %vreg25<def> = ADDI %zero, 16; GR32Bit:%vreg25
220B		  * %vreg26<def> = SRLI %t5, 22; GR32Bit:%vreg26
220B		  * %vreg27<def> = SRLI %t5, 12; GR32Bit:%vreg27
220B		  * %vreg28<def> = ANDI %vreg27, 15; GR32Bit:%vreg28,%vreg27
220B		  * %vreg29<def> = SRLI %t5, 6; GR32Bit:%vreg29
220B		  * %vreg30<def> = ANDI %vreg29, 63; GR32Bit:%vreg30,%vreg29
220B		  * %vreg31<def> = ADDI %zero, 832; GR32Bit:%vreg31
220B		  * %vreg32<def> = MUL %vreg26, %vreg31; GR32Bit:%vreg32,%vreg26,%vreg31
220B		  * %vreg33<def> = ADDI %zero, 52; GR32Bit:%vreg33
220B		  * %vreg34<def> = MUL %vreg28, %vreg33; GR32Bit:%vreg34,%vreg28,%vreg33
220B		  * %vreg35<def> = ADD %vreg34, %vreg30; GR32Bit:%vreg35,%vreg34,%vreg30
220B		  * %vreg36<def> = ADD %vreg35, %vreg32; GR32Bit:%vreg36,%vreg35,%vreg32
220B		  * %vreg37<def> = MUL %vreg36, %vreg25; GR32Bit:%vreg37,%vreg36,%vreg25
220B		  * %t5<def> = ADD %vreg24, %vreg37; GR32Bit:%vreg24,%vreg37
220B		  * END 0
220B		  * %zero<def> = ADDI %zero, 0
220B		  * %zero<def> = ADDI %zero, 0
396B		%t4<def> = ADD %t5, %zero
396B		  * %vreg40<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg40
396B		  * %vreg41<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg41
396B		  * %vreg42<def> = SRLI %vreg41, 12; GR32Bit:%vreg42,%vreg41
396B		  * %vreg43<def> = ADD %vreg40, %vreg42; GR32Bit:%vreg43,%vreg40,%vreg42
396B		  * %vreg44<def> = ADDI %zero, 16; GR32Bit:%vreg44
396B		  * %vreg45<def> = SRLI %t5, 22; GR32Bit:%vreg45
396B		  * %vreg46<def> = SRLI %t5, 12; GR32Bit:%vreg46
396B		  * %vreg47<def> = ANDI %vreg46, 15; GR32Bit:%vreg47,%vreg46
396B		  * %vreg48<def> = SRLI %t5, 6; GR32Bit:%vreg48
396B		  * %vreg49<def> = ANDI %vreg48, 63; GR32Bit:%vreg49,%vreg48
396B		  * %vreg50<def> = ADDI %zero, 832; GR32Bit:%vreg50
396B		  * %vreg51<def> = MUL %vreg45, %vreg50; GR32Bit:%vreg51,%vreg45,%vreg50
396B		  * %vreg52<def> = ADDI %zero, 52; GR32Bit:%vreg52
396B		  * %vreg53<def> = MUL %vreg47, %vreg52; GR32Bit:%vreg53,%vreg47,%vreg52
396B		  * %vreg54<def> = ADD %vreg53, %vreg49; GR32Bit:%vreg54,%vreg53,%vreg49
396B		  * %vreg55<def> = ADD %vreg54, %vreg51; GR32Bit:%vreg55,%vreg54,%vreg51
396B		  * %vreg56<def> = MUL %vreg55, %vreg44; GR32Bit:%vreg56,%vreg55,%vreg44
396B		  * %t5<def> = ADD %vreg43, %vreg56; GR32Bit:%vreg43,%vreg56
396B		  * END 0
396B		  * %zero<def> = ADDI %zero, 0
396B		  * %zero<def> = ADDI %zero, 0
572B		%t4<def> = ADD %t5, %zero
572B		  * %vreg59<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg59
572B		  * %vreg60<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg60
572B		  * %vreg61<def> = SRLI %vreg60, 12; GR32Bit:%vreg61,%vreg60
572B		  * %vreg62<def> = ADD %vreg59, %vreg61; GR32Bit:%vreg62,%vreg59,%vreg61
572B		  * %vreg63<def> = ADDI %zero, 16; GR32Bit:%vreg63
572B		  * %vreg64<def> = SRLI %t5, 22; GR32Bit:%vreg64
572B		  * %vreg65<def> = SRLI %t5, 12; GR32Bit:%vreg65
572B		  * %vreg66<def> = ANDI %vreg65, 15; GR32Bit:%vreg66,%vreg65
572B		  * %vreg67<def> = SRLI %t5, 6; GR32Bit:%vreg67
572B		  * %vreg68<def> = ANDI %vreg67, 63; GR32Bit:%vreg68,%vreg67
572B		  * %vreg69<def> = ADDI %zero, 832; GR32Bit:%vreg69
572B		  * %vreg70<def> = MUL %vreg64, %vreg69; GR32Bit:%vreg70,%vreg64,%vreg69
572B		  * %vreg71<def> = ADDI %zero, 52; GR32Bit:%vreg71
572B		  * %vreg72<def> = MUL %vreg66, %vreg71; GR32Bit:%vreg72,%vreg66,%vreg71
572B		  * %vreg73<def> = ADD %vreg72, %vreg68; GR32Bit:%vreg73,%vreg72,%vreg68
572B		  * %vreg74<def> = ADD %vreg73, %vreg70; GR32Bit:%vreg74,%vreg73,%vreg70
572B		  * %vreg75<def> = MUL %vreg74, %vreg63; GR32Bit:%vreg75,%vreg74,%vreg63
572B		  * %t5<def> = ADD %vreg62, %vreg75; GR32Bit:%vreg62,%vreg75
572B		  * END 0
572B		  * %zero<def> = ADDI %zero, 0
572B		  * %zero<def> = ADDI %zero, 0

# End machine code for function redefine_start3.

********** COMPUTING LIVE DEBUG VARIABLES: redefine_start3 **********
********** DEBUG VARIABLES **********
********** Compute Spill Weights **********
********** Function: redefine_start3
********** GREEDY REGISTER ALLOCATION **********
********** Function: redefine_start3
Replacing 43 with 43 for instruction%vreg76<def> = COPY %ra; GR32Bit:%vreg76
Replacing 56 with 56 for instruction%vreg77<def> = COPY %sp; GR32Bit:%vreg77

selectOrSplit GR32Bit:%vreg76 [156r,164r:0)  0@156r
hints: %ra
reg 2147483724 that was live-in gets phys reg:43 instead of phys reg:43
assigning %vreg76 to %ra: ra

selectOrSplit GR32Bit:%vreg77 [172r,180r:0)  0@172r
hints: %sp
reg 2147483725 that was live-in gets phys reg:56 instead of phys reg:56
assigning %vreg77 to %sp: sp

selectOrSplit GR32Bit:%vreg5 [36r,148r:0)  0@36r
assigning %vreg5 to %t0: t0

selectOrSplit GR32Bit:%vreg24 [252r,364r:0)  0@252r
assigning %vreg24 to %t0: t0

selectOrSplit GR32Bit:%vreg43 [428r,540r:0)  0@428r
assigning %vreg43 to %t0: t0

selectOrSplit GR32Bit:%vreg62 [604r,716r:0)  0@604r
assigning %vreg62 to %t0: t0

selectOrSplit GR32Bit:%vreg6 [44r,140r:0)  0@44r
assigning %vreg6 to %t1: t1

selectOrSplit GR32Bit:%vreg25 [260r,356r:0)  0@260r
assigning %vreg25 to %t1: t1

selectOrSplit GR32Bit:%vreg44 [436r,532r:0)  0@436r
assigning %vreg44 to %t1: t1

selectOrSplit GR32Bit:%vreg63 [612r,708r:0)  0@612r
assigning %vreg63 to %t1: t1

selectOrSplit GR32Bit:%vreg7 [52r,100r:0)  0@52r
assigning %vreg7 to %t2: t2

selectOrSplit GR32Bit:%vreg9 [68r,116r:0)  0@68r
assigning %vreg9 to %fp: fp

selectOrSplit GR32Bit:%vreg26 [268r,316r:0)  0@268r
assigning %vreg26 to %t2: t2

selectOrSplit GR32Bit:%vreg28 [284r,332r:0)  0@284r
assigning %vreg28 to %fp: fp

selectOrSplit GR32Bit:%vreg45 [444r,492r:0)  0@444r
assigning %vreg45 to %t2: t2

selectOrSplit GR32Bit:%vreg47 [460r,508r:0)  0@460r
assigning %vreg47 to %fp: fp

selectOrSplit GR32Bit:%vreg64 [620r,668r:0)  0@620r
assigning %vreg64 to %t2: t2

selectOrSplit GR32Bit:%vreg66 [636r,684r:0)  0@636r
assigning %vreg66 to %fp: fp

selectOrSplit GR32Bit:%vreg11 [84r,124r:0)  0@84r
assigning %vreg11 to %a0: a0

selectOrSplit GR32Bit:%vreg30 [300r,340r:0)  0@300r
assigning %vreg30 to %a0: a0

selectOrSplit GR32Bit:%vreg49 [476r,516r:0)  0@476r
assigning %vreg49 to %a0: a0

selectOrSplit GR32Bit:%vreg68 [652r,692r:0)  0@652r
assigning %vreg68 to %a0: a0

selectOrSplit GR32Bit:%vreg13 [100r,132r:0)  0@100r
assigning %vreg13 to %t2: t2

selectOrSplit GR32Bit:%vreg32 [316r,348r:0)  0@316r
assigning %vreg32 to %t2: t2

selectOrSplit GR32Bit:%vreg51 [492r,524r:0)  0@492r
assigning %vreg51 to %t2: t2

selectOrSplit GR32Bit:%vreg70 [668r,700r:0)  0@668r
assigning %vreg70 to %t2: t2

selectOrSplit GR32Bit:%vreg2 [12r,36r:0)  0@12r
assigning %vreg2 to %t0: t0

selectOrSplit GR32Bit:%vreg21 [228r,252r:0)  0@228r
assigning %vreg21 to %t0: t0

selectOrSplit GR32Bit:%vreg40 [404r,428r:0)  0@404r
assigning %vreg40 to %t0: t0

selectOrSplit GR32Bit:%vreg59 [580r,604r:0)  0@580r
assigning %vreg59 to %t0: t0

selectOrSplit GR32Bit:%vreg3 [20r,28r:0)  0@20r
assigning %vreg3 to %t1: t1

selectOrSplit GR32Bit:%vreg4 [28r,36r:0)  0@28r
assigning %vreg4 to %t1: t1

selectOrSplit GR32Bit:%vreg8 [60r,68r:0)  0@60r
assigning %vreg8 to %fp: fp

selectOrSplit GR32Bit:%vreg10 [76r,84r:0)  0@76r
assigning %vreg10 to %a0: a0

selectOrSplit GR32Bit:%vreg12 [92r,100r:0)  0@92r
assigning %vreg12 to %a1: a1

selectOrSplit GR32Bit:%vreg14 [108r,116r:0)  0@108r
assigning %vreg14 to %a1: a1

selectOrSplit GR32Bit:%vreg15 [116r,124r:0)  0@116r
assigning %vreg15 to %fp: fp

selectOrSplit GR32Bit:%vreg16 [124r,132r:0)  0@124r
assigning %vreg16 to %fp: fp

selectOrSplit GR32Bit:%vreg17 [132r,140r:0)  0@132r
assigning %vreg17 to %t2: t2

selectOrSplit GR32Bit:%vreg18 [140r,148r:0)  0@140r
assigning %vreg18 to %t1: t1

selectOrSplit GR32Bit:%vreg22 [236r,244r:0)  0@236r
assigning %vreg22 to %t1: t1

selectOrSplit GR32Bit:%vreg23 [244r,252r:0)  0@244r
assigning %vreg23 to %t1: t1

selectOrSplit GR32Bit:%vreg27 [276r,284r:0)  0@276r
assigning %vreg27 to %fp: fp

selectOrSplit GR32Bit:%vreg29 [292r,300r:0)  0@292r
assigning %vreg29 to %a0: a0

selectOrSplit GR32Bit:%vreg31 [308r,316r:0)  0@308r
assigning %vreg31 to %a1: a1

selectOrSplit GR32Bit:%vreg33 [324r,332r:0)  0@324r
assigning %vreg33 to %a1: a1

selectOrSplit GR32Bit:%vreg34 [332r,340r:0)  0@332r
assigning %vreg34 to %fp: fp

selectOrSplit GR32Bit:%vreg35 [340r,348r:0)  0@340r
assigning %vreg35 to %fp: fp

selectOrSplit GR32Bit:%vreg36 [348r,356r:0)  0@348r
assigning %vreg36 to %t2: t2

selectOrSplit GR32Bit:%vreg37 [356r,364r:0)  0@356r
assigning %vreg37 to %t1: t1

selectOrSplit GR32Bit:%vreg41 [412r,420r:0)  0@412r
assigning %vreg41 to %t1: t1

selectOrSplit GR32Bit:%vreg42 [420r,428r:0)  0@420r
assigning %vreg42 to %t1: t1

selectOrSplit GR32Bit:%vreg46 [452r,460r:0)  0@452r
assigning %vreg46 to %fp: fp

selectOrSplit GR32Bit:%vreg48 [468r,476r:0)  0@468r
assigning %vreg48 to %a0: a0

selectOrSplit GR32Bit:%vreg50 [484r,492r:0)  0@484r
assigning %vreg50 to %a1: a1

selectOrSplit GR32Bit:%vreg52 [500r,508r:0)  0@500r
assigning %vreg52 to %a1: a1

selectOrSplit GR32Bit:%vreg53 [508r,516r:0)  0@508r
assigning %vreg53 to %fp: fp

selectOrSplit GR32Bit:%vreg54 [516r,524r:0)  0@516r
assigning %vreg54 to %fp: fp

selectOrSplit GR32Bit:%vreg55 [524r,532r:0)  0@524r
assigning %vreg55 to %t2: t2

selectOrSplit GR32Bit:%vreg56 [532r,540r:0)  0@532r
assigning %vreg56 to %t1: t1

selectOrSplit GR32Bit:%vreg60 [588r,596r:0)  0@588r
assigning %vreg60 to %t1: t1

selectOrSplit GR32Bit:%vreg61 [596r,604r:0)  0@596r
assigning %vreg61 to %t1: t1

selectOrSplit GR32Bit:%vreg65 [628r,636r:0)  0@628r
assigning %vreg65 to %fp: fp

selectOrSplit GR32Bit:%vreg67 [644r,652r:0)  0@644r
assigning %vreg67 to %a0: a0

selectOrSplit GR32Bit:%vreg69 [660r,668r:0)  0@660r
assigning %vreg69 to %a1: a1

selectOrSplit GR32Bit:%vreg71 [676r,684r:0)  0@676r
assigning %vreg71 to %a1: a1

selectOrSplit GR32Bit:%vreg72 [684r,692r:0)  0@684r
assigning %vreg72 to %fp: fp

selectOrSplit GR32Bit:%vreg73 [692r,700r:0)  0@692r
assigning %vreg73 to %fp: fp

selectOrSplit GR32Bit:%vreg74 [700r,708r:0)  0@700r
assigning %vreg74 to %t2: t2

selectOrSplit GR32Bit:%vreg75 [708r,716r:0)  0@708r
assigning %vreg75 to %t1: t1
********** REWRITE VIRTUAL REGISTERS **********
********** Function: redefine_start3
********** REGISTER MAP **********
[%vreg2 -> %t0] GR32Bit
[%vreg3 -> %t1] GR32Bit
[%vreg4 -> %t1] GR32Bit
[%vreg5 -> %t0] GR32Bit
[%vreg6 -> %t1] GR32Bit
[%vreg7 -> %t2] GR32Bit
[%vreg8 -> %fp] GR32Bit
[%vreg9 -> %fp] GR32Bit
[%vreg10 -> %a0] GR32Bit
[%vreg11 -> %a0] GR32Bit
[%vreg12 -> %a1] GR32Bit
[%vreg13 -> %t2] GR32Bit
[%vreg14 -> %a1] GR32Bit
[%vreg15 -> %fp] GR32Bit
[%vreg16 -> %fp] GR32Bit
[%vreg17 -> %t2] GR32Bit
[%vreg18 -> %t1] GR32Bit
[%vreg21 -> %t0] GR32Bit
[%vreg22 -> %t1] GR32Bit
[%vreg23 -> %t1] GR32Bit
[%vreg24 -> %t0] GR32Bit
[%vreg25 -> %t1] GR32Bit
[%vreg26 -> %t2] GR32Bit
[%vreg27 -> %fp] GR32Bit
[%vreg28 -> %fp] GR32Bit
[%vreg29 -> %a0] GR32Bit
[%vreg30 -> %a0] GR32Bit
[%vreg31 -> %a1] GR32Bit
[%vreg32 -> %t2] GR32Bit
[%vreg33 -> %a1] GR32Bit
[%vreg34 -> %fp] GR32Bit
[%vreg35 -> %fp] GR32Bit
[%vreg36 -> %t2] GR32Bit
[%vreg37 -> %t1] GR32Bit
[%vreg40 -> %t0] GR32Bit
[%vreg41 -> %t1] GR32Bit
[%vreg42 -> %t1] GR32Bit
[%vreg43 -> %t0] GR32Bit
[%vreg44 -> %t1] GR32Bit
[%vreg45 -> %t2] GR32Bit
[%vreg46 -> %fp] GR32Bit
[%vreg47 -> %fp] GR32Bit
[%vreg48 -> %a0] GR32Bit
[%vreg49 -> %a0] GR32Bit
[%vreg50 -> %a1] GR32Bit
[%vreg51 -> %t2] GR32Bit
[%vreg52 -> %a1] GR32Bit
[%vreg53 -> %fp] GR32Bit
[%vreg54 -> %fp] GR32Bit
[%vreg55 -> %t2] GR32Bit
[%vreg56 -> %t1] GR32Bit
[%vreg59 -> %t0] GR32Bit
[%vreg60 -> %t1] GR32Bit
[%vreg61 -> %t1] GR32Bit
[%vreg62 -> %t0] GR32Bit
[%vreg63 -> %t1] GR32Bit
[%vreg64 -> %t2] GR32Bit
[%vreg65 -> %fp] GR32Bit
[%vreg66 -> %fp] GR32Bit
[%vreg67 -> %a0] GR32Bit
[%vreg68 -> %a0] GR32Bit
[%vreg69 -> %a1] GR32Bit
[%vreg70 -> %t2] GR32Bit
[%vreg71 -> %a1] GR32Bit
[%vreg72 -> %fp] GR32Bit
[%vreg73 -> %fp] GR32Bit
[%vreg74 -> %t2] GR32Bit
[%vreg75 -> %t1] GR32Bit
[%vreg76 -> %ra] GR32Bit
[%vreg77 -> %sp] GR32Bit

0B	BB#0: derived from LLVM BB %redefine_start3.for.end
	    Live Ins: %ra %sp
8B		%t4<def> = ADD %t5, %zero
8B		  * %vreg2<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg2
8B		  * %vreg3<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg3
8B		  * %vreg4<def> = SRLI %vreg3<kill>, 12; GR32Bit:%vreg4,%vreg3
8B		  * %vreg5<def> = ADD %vreg2<kill>, %vreg4<kill>; GR32Bit:%vreg5,%vreg2,%vreg4
8B		  * %vreg6<def> = ADDI %zero, 16; GR32Bit:%vreg6
8B		  * %vreg7<def> = SRLI %t5, 22; GR32Bit:%vreg7
8B		  * %vreg8<def> = SRLI %t5, 12; GR32Bit:%vreg8
8B		  * %vreg9<def> = ANDI %vreg8<kill>, 15; GR32Bit:%vreg9,%vreg8
8B		  * %vreg10<def> = SRLI %t5, 6; GR32Bit:%vreg10
8B		  * %vreg11<def> = ANDI %vreg10<kill>, 63; GR32Bit:%vreg11,%vreg10
8B		  * %vreg12<def> = ADDI %zero, 832; GR32Bit:%vreg12
8B		  * %vreg13<def> = MUL %vreg7<kill>, %vreg12<kill>; GR32Bit:%vreg13,%vreg7,%vreg12
8B		  * %vreg14<def> = ADDI %zero, 52; GR32Bit:%vreg14
8B		  * %vreg15<def> = MUL %vreg9<kill>, %vreg14<kill>; GR32Bit:%vreg15,%vreg9,%vreg14
8B		  * %vreg16<def> = ADD %vreg15<kill>, %vreg11<kill>; GR32Bit:%vreg16,%vreg15,%vreg11
8B		  * %vreg17<def> = ADD %vreg16<kill>, %vreg13<kill>; GR32Bit:%vreg17,%vreg16,%vreg13
8B		  * %vreg18<def> = MUL %vreg17<kill>, %vreg6<kill>; GR32Bit:%vreg18,%vreg17,%vreg6
8B		  * %t5<def> = ADD %vreg5<kill>, %vreg18<kill>; GR32Bit:%vreg5,%vreg18
8B		  * %vreg76<def> = COPY %ra; GR32Bit:%vreg76
8B		  * FDELETE %vreg76, 0; GR32Bit:%vreg76
8B		  * %vreg77<def> = COPY %sp; GR32Bit:%vreg77
8B		  * FDELETE %vreg77, 0; GR32Bit:%vreg77
8B		  * FDELETE %t4, 0
8B		  * END 0
8B		  * %zero<def> = ADDI %zero, 0
8B		  * %zero<def> = ADDI %zero, 0
220B		%t4<def> = ADD %t5, %zero
220B		  * %vreg21<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg21
220B		  * %vreg22<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg22
220B		  * %vreg23<def> = SRLI %vreg22<kill>, 12; GR32Bit:%vreg23,%vreg22
220B		  * %vreg24<def> = ADD %vreg21<kill>, %vreg23<kill>; GR32Bit:%vreg24,%vreg21,%vreg23
220B		  * %vreg25<def> = ADDI %zero, 16; GR32Bit:%vreg25
220B		  * %vreg26<def> = SRLI %t5, 22; GR32Bit:%vreg26
220B		  * %vreg27<def> = SRLI %t5, 12; GR32Bit:%vreg27
220B		  * %vreg28<def> = ANDI %vreg27<kill>, 15; GR32Bit:%vreg28,%vreg27
220B		  * %vreg29<def> = SRLI %t5, 6; GR32Bit:%vreg29
220B		  * %vreg30<def> = ANDI %vreg29<kill>, 63; GR32Bit:%vreg30,%vreg29
220B		  * %vreg31<def> = ADDI %zero, 832; GR32Bit:%vreg31
220B		  * %vreg32<def> = MUL %vreg26<kill>, %vreg31<kill>; GR32Bit:%vreg32,%vreg26,%vreg31
220B		  * %vreg33<def> = ADDI %zero, 52; GR32Bit:%vreg33
220B		  * %vreg34<def> = MUL %vreg28<kill>, %vreg33<kill>; GR32Bit:%vreg34,%vreg28,%vreg33
220B		  * %vreg35<def> = ADD %vreg34<kill>, %vreg30<kill>; GR32Bit:%vreg35,%vreg34,%vreg30
220B		  * %vreg36<def> = ADD %vreg35<kill>, %vreg32<kill>; GR32Bit:%vreg36,%vreg35,%vreg32
220B		  * %vreg37<def> = MUL %vreg36<kill>, %vreg25<kill>; GR32Bit:%vreg37,%vreg36,%vreg25
220B		  * %t5<def> = ADD %vreg24<kill>, %vreg37<kill>; GR32Bit:%vreg24,%vreg37
220B		  * END 0
220B		  * %zero<def> = ADDI %zero, 0
220B		  * %zero<def> = ADDI %zero, 0
396B		%t4<def> = ADD %t5, %zero
396B		  * %vreg40<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg40
396B		  * %vreg41<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg41
396B		  * %vreg42<def> = SRLI %vreg41<kill>, 12; GR32Bit:%vreg42,%vreg41
396B		  * %vreg43<def> = ADD %vreg40<kill>, %vreg42<kill>; GR32Bit:%vreg43,%vreg40,%vreg42
396B		  * %vreg44<def> = ADDI %zero, 16; GR32Bit:%vreg44
396B		  * %vreg45<def> = SRLI %t5, 22; GR32Bit:%vreg45
396B		  * %vreg46<def> = SRLI %t5, 12; GR32Bit:%vreg46
396B		  * %vreg47<def> = ANDI %vreg46<kill>, 15; GR32Bit:%vreg47,%vreg46
396B		  * %vreg48<def> = SRLI %t5, 6; GR32Bit:%vreg48
396B		  * %vreg49<def> = ANDI %vreg48<kill>, 63; GR32Bit:%vreg49,%vreg48
396B		  * %vreg50<def> = ADDI %zero, 832; GR32Bit:%vreg50
396B		  * %vreg51<def> = MUL %vreg45<kill>, %vreg50<kill>; GR32Bit:%vreg51,%vreg45,%vreg50
396B		  * %vreg52<def> = ADDI %zero, 52; GR32Bit:%vreg52
396B		  * %vreg53<def> = MUL %vreg47<kill>, %vreg52<kill>; GR32Bit:%vreg53,%vreg47,%vreg52
396B		  * %vreg54<def> = ADD %vreg53<kill>, %vreg49<kill>; GR32Bit:%vreg54,%vreg53,%vreg49
396B		  * %vreg55<def> = ADD %vreg54<kill>, %vreg51<kill>; GR32Bit:%vreg55,%vreg54,%vreg51
396B		  * %vreg56<def> = MUL %vreg55<kill>, %vreg44<kill>; GR32Bit:%vreg56,%vreg55,%vreg44
396B		  * %t5<def> = ADD %vreg43<kill>, %vreg56<kill>; GR32Bit:%vreg43,%vreg56
396B		  * END 0
396B		  * %zero<def> = ADDI %zero, 0
396B		  * %zero<def> = ADDI %zero, 0
572B		%t4<def> = ADD %t5, %zero
572B		  * %vreg59<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg59
572B		  * %vreg60<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg60
572B		  * %vreg61<def> = SRLI %vreg60<kill>, 12; GR32Bit:%vreg61,%vreg60
572B		  * %vreg62<def> = ADD %vreg59<kill>, %vreg61<kill>; GR32Bit:%vreg62,%vreg59,%vreg61
572B		  * %vreg63<def> = ADDI %zero, 16; GR32Bit:%vreg63
572B		  * %vreg64<def> = SRLI %t5, 22; GR32Bit:%vreg64
572B		  * %vreg65<def> = SRLI %t5, 12; GR32Bit:%vreg65
572B		  * %vreg66<def> = ANDI %vreg65<kill>, 15; GR32Bit:%vreg66,%vreg65
572B		  * %vreg67<def> = SRLI %t5, 6; GR32Bit:%vreg67
572B		  * %vreg68<def> = ANDI %vreg67<kill>, 63; GR32Bit:%vreg68,%vreg67
572B		  * %vreg69<def> = ADDI %zero, 832; GR32Bit:%vreg69
572B		  * %vreg70<def> = MUL %vreg64<kill>, %vreg69<kill>; GR32Bit:%vreg70,%vreg64,%vreg69
572B		  * %vreg71<def> = ADDI %zero, 52; GR32Bit:%vreg71
572B		  * %vreg72<def> = MUL %vreg66<kill>, %vreg71<kill>; GR32Bit:%vreg72,%vreg66,%vreg71
572B		  * %vreg73<def> = ADD %vreg72<kill>, %vreg68<kill>; GR32Bit:%vreg73,%vreg72,%vreg68
572B		  * %vreg74<def> = ADD %vreg73<kill>, %vreg70<kill>; GR32Bit:%vreg74,%vreg73,%vreg70
572B		  * %vreg75<def> = MUL %vreg74<kill>, %vreg63<kill>; GR32Bit:%vreg75,%vreg74,%vreg63
572B		  * %t5<def> = ADD %vreg62<kill>, %vreg75<kill>; GR32Bit:%vreg62,%vreg75
572B		  * END 0
572B		  * %zero<def> = ADDI %zero, 0
572B		  * %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 16
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %ra<def> = COPY %ra
Deleting identity copy.
> FDELETE %ra, 0
> %sp<def> = COPY %sp
Deleting identity copy.
> FDELETE %sp, 0
> FDELETE %t4, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 16
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 16
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 16
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
********** EMITTING LIVE DEBUG VARIABLES **********
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: redefine_start3
current state of mf:# Machine code for function redefine_start3: Post SSA
Function Live Ins: %ra in %vreg76, %sp in %vreg77

BB#0: derived from LLVM BB %redefine_start3.for.end
    Live Ins: %ra %sp
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 16
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * FDELETE %ra, 0
	  * FDELETE %sp, 0
	  * FDELETE %t4, 0
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 16
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 16
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 16
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0

# End machine code for function redefine_start3.

CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:%1]
Computing probabilities for data_init4.return
Computing probabilities for data_init4.entry



=== data_init4
store visit is after?  store i32 %0, i32* %2, align 4
I was here to add   %2 = alloca i32, align 4
whats in dag after store?SelectionDAG has 7 nodes:
  0x27d1e18: ch = EntryToken [ORD=9]

  0x27f0c40: i32 = Constant<0>

    0x27d1e18: <multiple use>
      0x27d1e18: <multiple use>
      0x27f1040: i32 = Register %vreg0 [ORD=9]

    0x27f1640: i32,ch = CopyFromReg 0x27d1e18, 0x27f1040 [ORD=9]

    0x27f1940: i32 = FrameIndex<1> [ORD=9]

    0x27f3e20: i32 = undef [ORD=9]

  0x27f4120: ch = store 0x27d1e18, 0x27f1640, 0x27f1940, 0x27f3e20<ST4[%2]> [ORD=9]


visiting load instruction   %4 = load float* %3, align 4
with I type floatand sd value :0x27f1940: i32 = FrameIndex<1>
new load?0x27f1340: f32,ch = load 0x27f4120, 0x27f1940, 0x27f3e20<LD4[%3]>
dag after load is dealt with?SelectionDAG has 8 nodes:
  0x27d1e18: ch = EntryToken [ORD=9]

  0x27f1940: i32 = FrameIndex<1> [ORD=9]

  0x27f0c40: i32 = Constant<0>

  0x27f3e20: i32 = undef [ORD=9]

      0x27d1e18: <multiple use>
        0x27d1e18: <multiple use>
        0x27f1040: i32 = Register %vreg0 [ORD=9]

      0x27f1640: i32,ch = CopyFromReg 0x27d1e18, 0x27f1040 [ORD=9]

      0x27f1940: <multiple use>
      0x27f3e20: <multiple use>
    0x27f4120: ch = store 0x27d1e18, 0x27f1640, 0x27f1940, 0x27f3e20<ST4[%2]> [ORD=9]

    0x27f1940: <multiple use>
    0x27f3e20: <multiple use>
  0x27f1340: f32,ch = load 0x27f4120, 0x27f1940, 0x27f3e20<LD4[%3]>

    0x27d1e18: <multiple use>
      0x27d1e18: <multiple use>
      0x27f1040: i32 = Register %vreg0 [ORD=9]

    0x27f1640: i32,ch = CopyFromReg 0x27d1e18, 0x27f1040 [ORD=9]

    0x27f1940: <multiple use>
    0x27f3e20: <multiple use>
  0x27f4120: ch = store 0x27d1e18, 0x27f1640, 0x27f1940, 0x27f3e20<ST4[%2]> [ORD=9]


store visit is after?  store float %4, float* %1, align 4
I was here to add   %1 = alloca float, align 4, !ConsumedBy !8
whats in dag after store?SelectionDAG has 10 nodes:
  0x27d1e18: ch = EntryToken [ORD=9]

  0x27f1940: i32 = FrameIndex<1> [ORD=9]

  0x27f0c40: i32 = Constant<0>

  0x27f3e20: i32 = undef [ORD=9]

      0x27d1e18: <multiple use>
        0x27d1e18: <multiple use>
        0x27f1040: i32 = Register %vreg0 [ORD=9]

      0x27f1640: i32,ch = CopyFromReg 0x27d1e18, 0x27f1040 [ORD=9]

      0x27f1940: <multiple use>
      0x27f3e20: <multiple use>
    0x27f4120: ch = store 0x27d1e18, 0x27f1640, 0x27f1940, 0x27f3e20<ST4[%2]> [ORD=9]

    0x27f1940: <multiple use>
    0x27f3e20: <multiple use>
  0x27f1340: f32,ch = load 0x27f4120, 0x27f1940, 0x27f3e20<LD4[%3]> [ORD=11]

    0x27f1340: <multiple use>
    0x27f1340: <multiple use>
    0x27f4220: i32 = FrameIndex<0> [ORD=12]

    0x27f3e20: <multiple use>
  0x27f1440: ch = store 0x27f1340:1, 0x27f1340, 0x27f4220, 0x27f3e20<ST4[%1]> [ORD=12]


Initial selection DAG: BB#0 'data_init4:data_init4.entry'
SelectionDAG has 10 nodes:
  0x27d1e18: ch = EntryToken [ORD=9]

  0x27f1940: i32 = FrameIndex<1> [ORD=9]

  0x27f0c40: i32 = Constant<0>

  0x27f3e20: i32 = undef [ORD=9]

      0x27d1e18: <multiple use>
        0x27d1e18: <multiple use>
        0x27f1040: i32 = Register %vreg0 [ORD=9]

      0x27f1640: i32,ch = CopyFromReg 0x27d1e18, 0x27f1040 [ORD=9]

      0x27f1940: <multiple use>
      0x27f3e20: <multiple use>
    0x27f4120: ch = store 0x27d1e18, 0x27f1640, 0x27f1940, 0x27f3e20<ST4[%2]> [ORD=9]

    0x27f1940: <multiple use>
    0x27f3e20: <multiple use>
  0x27f1340: f32,ch = load 0x27f4120, 0x27f1940, 0x27f3e20<LD4[%3]> [ORD=11]

    0x27f1340: <multiple use>
    0x27f1340: <multiple use>
    0x27f4220: i32 = FrameIndex<0> [ORD=12]

    0x27f3e20: <multiple use>
  0x27f1440: ch = store 0x27f1340:1, 0x27f1340, 0x27f4220, 0x27f3e20<ST4[%1]> [ORD=12]


Optimized lowered selection DAG: BB#0 'data_init4:data_init4.entry'
SelectionDAG has 9 nodes:
  0x27d1e18: ch = EntryToken [ORD=9]

  0x27f1940: i32 = FrameIndex<1> [ORD=9]

  0x27f3e20: i32 = undef [ORD=9]

      0x27d1e18: <multiple use>
        0x27d1e18: <multiple use>
        0x27f1040: i32 = Register %vreg0 [ORD=9]

      0x27f1640: i32,ch = CopyFromReg 0x27d1e18, 0x27f1040 [ORD=9]

      0x27f1940: <multiple use>
      0x27f3e20: <multiple use>
    0x27f4120: ch = store 0x27d1e18, 0x27f1640, 0x27f1940, 0x27f3e20<ST4[%2]> [ORD=9]

    0x27f1940: <multiple use>
    0x27f3e20: <multiple use>
  0x27f1340: f32,ch = load 0x27f4120, 0x27f1940, 0x27f3e20<LD4[%3]> [ORD=11]

    0x27f1340: <multiple use>
    0x27f1340: <multiple use>
    0x27f4220: i32 = FrameIndex<0> [ORD=12]

    0x27f3e20: <multiple use>
  0x27f1440: ch = store 0x27f1340:1, 0x27f1340, 0x27f4220, 0x27f3e20<ST4[%1]> [ORD=12]


Legally typed node: 0x27f4220: i32 = FrameIndex<0> [ORD=12] [ID=0]

Legally typed node: 0x27f3e20: i32 = undef [ORD=9] [ID=0]

Legally typed node: 0x27f1940: i32 = FrameIndex<1> [ORD=9] [ID=0]

Legally typed node: 0x27f1040: i32 = Register %vreg0 [ORD=9] [ID=0]

Legally typed node: 0x27d1e18: ch = EntryToken [ORD=9] [ID=0]

Legally typed node: 0x27f1640: i32,ch = CopyFromReg 0x27d1e18, 0x27f1040 [ORD=9] [ID=0]

Legally typed node: 0x27f4120: ch = store 0x27d1e18, 0x27f1640, 0x27f1940, 0x27f3e20<ST4[%2]> [ORD=9] [ID=0]

Legally typed node: 0x27f1340: f32,ch = load 0x27f4120, 0x27f1940, 0x27f3e20<LD4[%3]> [ORD=11] [ID=0]

Legally typed node: 0x27f1440: ch = store 0x27f1340:1, 0x27f1340, 0x27f4220, 0x27f3e20<ST4[%1]> [ORD=12] [ID=0]

Legally typed node: 0x7fff149b9a10: ch = handlenode 0x27f1440 [ID=0]

Type-legalized selection DAG: BB#0 'data_init4:data_init4.entry'
SelectionDAG has 9 nodes:
  0x27d1e18: ch = EntryToken [ORD=9] [ID=-3]

  0x27f1940: i32 = FrameIndex<1> [ORD=9] [ID=-3]

  0x27f3e20: i32 = undef [ORD=9] [ID=-3]

      0x27d1e18: <multiple use>
        0x27d1e18: <multiple use>
        0x27f1040: i32 = Register %vreg0 [ORD=9] [ID=-3]

      0x27f1640: i32,ch = CopyFromReg 0x27d1e18, 0x27f1040 [ORD=9] [ID=-3]

      0x27f1940: <multiple use>
      0x27f3e20: <multiple use>
    0x27f4120: ch = store 0x27d1e18, 0x27f1640, 0x27f1940, 0x27f3e20<ST4[%2]> [ORD=9] [ID=-3]

    0x27f1940: <multiple use>
    0x27f3e20: <multiple use>
  0x27f1340: f32,ch = load 0x27f4120, 0x27f1940, 0x27f3e20<LD4[%3]> [ORD=11] [ID=-3]

    0x27f1340: <multiple use>
    0x27f1340: <multiple use>
    0x27f4220: i32 = FrameIndex<0> [ORD=12] [ID=-3]

    0x27f3e20: <multiple use>
  0x27f1440: ch = store 0x27f1340:1, 0x27f1340, 0x27f4220, 0x27f3e20<ST4[%1]> [ORD=12] [ID=-3]


Legalized selection DAG: BB#0 'data_init4:data_init4.entry'
SelectionDAG has 9 nodes:
  0x27d1e18: ch = EntryToken [ORD=9] [ID=0]

  0x27f1940: i32 = FrameIndex<1> [ORD=9] [ID=2]

  0x27f3e20: i32 = undef [ORD=9] [ID=3]

      0x27d1e18: <multiple use>
        0x27d1e18: <multiple use>
        0x27f1040: i32 = Register %vreg0 [ORD=9] [ID=1]

      0x27f1640: i32,ch = CopyFromReg 0x27d1e18, 0x27f1040 [ORD=9] [ID=5]

      0x27f1940: <multiple use>
      0x27f3e20: <multiple use>
    0x27f4120: ch = store 0x27d1e18, 0x27f1640, 0x27f1940, 0x27f3e20<ST4[%2]> [ORD=9] [ID=6]

    0x27f1940: <multiple use>
    0x27f3e20: <multiple use>
  0x27f1340: f32,ch = load 0x27f4120, 0x27f1940, 0x27f3e20<LD4[%3]> [ORD=11] [ID=7]

    0x27f1340: <multiple use>
    0x27f1340: <multiple use>
    0x27f4220: i32 = FrameIndex<0> [ORD=12] [ID=4]

    0x27f3e20: <multiple use>
  0x27f1440: ch = store 0x27f1340:1, 0x27f1340, 0x27f4220, 0x27f3e20<ST4[%1]> [ORD=12] [ID=8]


Optimized legalized selection DAG: BB#0 'data_init4:data_init4.entry'
SelectionDAG has 9 nodes:
  0x27d1e18: ch = EntryToken [ORD=9] [ID=0]

  0x27f1940: i32 = FrameIndex<1> [ORD=9] [ID=2]

  0x27f3e20: i32 = undef [ORD=9] [ID=3]

      0x27d1e18: <multiple use>
        0x27d1e18: <multiple use>
        0x27f1040: i32 = Register %vreg0 [ORD=9] [ID=1]

      0x27f1640: i32,ch = CopyFromReg 0x27d1e18, 0x27f1040 [ORD=9] [ID=5]

      0x27f1940: <multiple use>
      0x27f3e20: <multiple use>
    0x27f4120: ch = store 0x27d1e18, 0x27f1640, 0x27f1940, 0x27f3e20<ST4[%2]> [ORD=9] [ID=6]

    0x27f1940: <multiple use>
    0x27f3e20: <multiple use>
  0x27f1340: f32,ch = load 0x27f4120, 0x27f1940, 0x27f3e20<LD4[%3]> [ORD=11] [ID=7]

    0x27f1340: <multiple use>
    0x27f1340: <multiple use>
    0x27f4220: i32 = FrameIndex<0> [ORD=12] [ID=4]

    0x27f3e20: <multiple use>
  0x27f1440: ch = store 0x27f1340:1, 0x27f1340, 0x27f4220, 0x27f3e20<ST4[%1]> [ORD=12] [ID=8]


===== Instruction selection begins: BB#0 'data_init4.entry'
ISEL: Starting pattern match on root node: 0x27f1440: ch = store 0x27f1340:1, 0x27f1340, 0x27f4220, 0x27f3e20<ST4[%1]> [ORD=12] [ID=8]

  Initial Opcode index to 178
  Skipped scope entry (due to false predicate) at index 183, continuing at 243
  Morphed node: 0x27f1440: ch = FSW 0x27f1340, 0x27f4220, 0x27f0c40, 0x27f1340:1<Mem:ST4[%1]> [ORD=12]

ISEL: Match complete!
=> 0x27f1440: ch = FSW 0x27f1340, 0x27f4220, 0x27f0c40, 0x27f1340:1<Mem:ST4[%1]> [ORD=12]

ISEL: Starting pattern match on root node: 0x27f1340: f32,ch = load 0x27f4120, 0x27f1940, 0x27f3e20<LD4[%3]> [ORD=11] [ID=7]

  Initial Opcode index to 5
  TypeSwitch[f32] from 10 to 159
  Morphed node: 0x27f1340: f32,ch = FLW 0x27f1940, 0x27f0c40, 0x27f4120<Mem:LD4[%3]> [ORD=11]

ISEL: Match complete!
=> 0x27f1340: f32,ch = FLW 0x27f1940, 0x27f0c40, 0x27f4120<Mem:LD4[%3]> [ORD=11]

ISEL: Starting pattern match on root node: 0x27f4120: ch = store 0x27d1e18, 0x27f1640, 0x27f1940, 0x27f3e20<ST4[%2]> [ORD=9] [ID=6]

  Initial Opcode index to 178
  Morphed node: 0x27f4120: ch = SW 0x27f1640, 0x27f1940, 0x27f0c40, 0x27d1e18<Mem:ST4[%2]> [ORD=9]

ISEL: Match complete!
=> 0x27f4120: ch = SW 0x27f1640, 0x27f1940, 0x27f0c40, 0x27d1e18<Mem:ST4[%2]> [ORD=9]

=> 0x27f1640: i32,ch = CopyFromReg 0x27d1e18, 0x27f1040 [ORD=9]

=> 0x27f1040: i32 = Register %vreg0 [ORD=9]

=> 0x27d1e18: ch = EntryToken [ORD=9]

===== Instruction selection ends:
Selected selection DAG: BB#0 'data_init4:data_init4.entry'
SelectionDAG has 12 nodes:
  0x27d1e18: ch = EntryToken [ORD=9]

    0x27f0e40: <multiple use>
    0x27f0c40: <multiple use>
        0x27d1e18: <multiple use>
        0x27f1040: i32 = Register %vreg0 [ORD=9]

      0x27f1640: i32,ch = CopyFromReg 0x27d1e18, 0x27f1040 [ORD=9]

      0x27f0e40: <multiple use>
      0x27f0c40: <multiple use>
      0x27d1e18: <multiple use>
    0x27f4120: ch = SW 0x27f1640, 0x27f0e40, 0x27f0c40, 0x27d1e18<Mem:ST4[%2]> [ORD=9]

  0x27f1340: f32,ch = FLW 0x27f0e40, 0x27f0c40, 0x27f4120<Mem:LD4[%3]> [ORD=11]

  0x27f0c40: i32 = TargetConstant<0>

  0x27f3e20: i32 = Register %t5

    0x27f3e20: <multiple use>
    0x27f1a40: i32 = TargetFrameIndex<1>

  0x27f0e40: i32 = ADDI 0x27f3e20, 0x27f1a40 [ORD=9]

    0x27f1340: <multiple use>
      0x27f3e20: <multiple use>
      0x27f1140: i32 = TargetFrameIndex<0>

    0x27f4220: i32 = ADDI 0x27f3e20, 0x27f1140 [ORD=12]

    0x27f0c40: <multiple use>
    0x27f1340: <multiple use>
  0x27f1440: ch = FSW 0x27f1340, 0x27f4220, 0x27f0c40, 0x27f1340:1<Mem:ST4[%1]> [ORD=12]


********** List Scheduling BB#0 'data_init4.entry' **********
SU(0): 0x27f1440: ch = FSW 0x27f1340, 0x27f4220, 0x27f0c40, 0x27f1340:1<Mem:ST4[%1]> [ORD=12] [ID=0]

  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 0
  Predecessors:
   val SU(2): Latency=1
   val SU(1): Latency=1
   ch  SU(2): Latency=1

SU(1): 0x27f4220: i32 = ADDI 0x27f3e20, 0x27f1140 [ORD=12] [ID=1]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
   val SU(0): Latency=1

SU(2): 0x27f1340: f32,ch = FLW 0x27f0e40, 0x27f0c40, 0x27f4120<Mem:LD4[%3]> [ORD=11] [ID=2]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
   val SU(5): Latency=1
   ch  SU(3): Latency=1
  Successors:
   val SU(0): Latency=1
   ch  SU(0): Latency=1

SU(3): 0x27f4120: ch = SW 0x27f1640, 0x27f0e40, 0x27f0c40, 0x27d1e18<Mem:ST4[%2]> [ORD=9] [ID=3]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
   val SU(4): Latency=1
   val SU(5): Latency=1
  Successors:
   ch  SU(2): Latency=1

SU(4): 0x27f1640: i32,ch = CopyFromReg 0x27d1e18, 0x27f1040 [ORD=9] [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(3): Latency=1

SU(5): 0x27f0e40: i32 = ADDI 0x27f3e20, 0x27f1a40 [ORD=9] [ID=5]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(2): Latency=1
   val SU(3): Latency=1


Examining Available:
Height 0: SU(0): 0x27f1440: ch = FSW 0x27f1340, 0x27f4220, 0x27f0c40, 0x27f1340:1<Mem:ST4[%1]> [ORD=12] [ID=0]


*** Scheduling [0]: SU(0): 0x27f1440: ch = FSW 0x27f1340, 0x27f4220, 0x27f0c40, 0x27f1340:1<Mem:ST4[%1]> [ORD=12] [ID=0]


Examining Available:
Height 1: SU(1): 0x27f4220: i32 = ADDI 0x27f3e20, 0x27f1140 [ORD=12] [ID=1]

Height 1: SU(2): 0x27f1340: f32,ch = FLW 0x27f0e40, 0x27f0c40, 0x27f4120<Mem:LD4[%3]> [ORD=11] [ID=2]


*** Scheduling [1]: SU(1): 0x27f4220: i32 = ADDI 0x27f3e20, 0x27f1140 [ORD=12] [ID=1]


Examining Available:
Height 1: SU(2): 0x27f1340: f32,ch = FLW 0x27f0e40, 0x27f0c40, 0x27f4120<Mem:LD4[%3]> [ORD=11] [ID=2]


*** Scheduling [2]: SU(2): 0x27f1340: f32,ch = FLW 0x27f0e40, 0x27f0c40, 0x27f4120<Mem:LD4[%3]> [ORD=11] [ID=2]


Examining Available:
Height 3: SU(3): 0x27f4120: ch = SW 0x27f1640, 0x27f0e40, 0x27f0c40, 0x27d1e18<Mem:ST4[%2]> [ORD=9] [ID=3]


*** Scheduling [3]: SU(3): 0x27f4120: ch = SW 0x27f1640, 0x27f0e40, 0x27f0c40, 0x27d1e18<Mem:ST4[%2]> [ORD=9] [ID=3]


Examining Available:
Height 4: SU(4): 0x27f1640: i32,ch = CopyFromReg 0x27d1e18, 0x27f1040 [ORD=9] [ID=4]

Height 4: SU(5): 0x27f0e40: i32 = ADDI 0x27f3e20, 0x27f1a40 [ORD=9] [ID=5]


*** Scheduling [4]: SU(4): 0x27f1640: i32,ch = CopyFromReg 0x27d1e18, 0x27f1040 [ORD=9] [ID=4]


Examining Available:
Height 4: SU(5): 0x27f0e40: i32 = ADDI 0x27f3e20, 0x27f1a40 [ORD=9] [ID=5]


*** Scheduling [5]: SU(5): 0x27f0e40: i32 = ADDI 0x27f3e20, 0x27f1a40 [ORD=9] [ID=5]

*** Final schedule ***
SU(5): 0x27f0e40: i32 = ADDI 0x27f3e20, 0x27f1a40 [ORD=9] [ID=5]

SU(4): 0x27f1640: i32,ch = CopyFromReg 0x27d1e18, 0x27f1040 [ORD=9] [ID=4]

SU(3): 0x27f4120: ch = SW 0x27f1640, 0x27f0e40, 0x27f0c40, 0x27d1e18<Mem:ST4[%2]> [ORD=9] [ID=3]

SU(2): 0x27f1340: f32,ch = FLW 0x27f0e40, 0x27f0c40, 0x27f4120<Mem:LD4[%3]> [ORD=11] [ID=2]

SU(1): 0x27f4220: i32 = ADDI 0x27f3e20, 0x27f1140 [ORD=12] [ID=1]

SU(0): 0x27f1440: ch = FSW 0x27f1340, 0x27f4220, 0x27f0c40, 0x27f1340:1<Mem:ST4[%1]> [ORD=12] [ID=0]


Total amount of phi nodes to update: 0
Initial selection DAG: BB#1 'data_init4:data_init4.return'
SelectionDAG has 1 nodes:
  0x27d1e18: ch = EntryToken


Optimized lowered selection DAG: BB#1 'data_init4:data_init4.return'
SelectionDAG has 1 nodes:
  0x27d1e18: ch = EntryToken


Legally typed node: 0x27d1e18: ch = EntryToken [ID=0]

Legally typed node: 0x7fff149b9a10: ch = handlenode 0x27d1e18 [ID=0]

Type-legalized selection DAG: BB#1 'data_init4:data_init4.return'
SelectionDAG has 1 nodes:
  0x27d1e18: ch = EntryToken [ID=-3]


Legalized selection DAG: BB#1 'data_init4:data_init4.return'
SelectionDAG has 1 nodes:
  0x27d1e18: ch = EntryToken [ID=0]


Optimized legalized selection DAG: BB#1 'data_init4:data_init4.return'
SelectionDAG has 1 nodes:
  0x27d1e18: ch = EntryToken [ID=0]


===== Instruction selection begins: BB#1 'data_init4.return'
=> 0x27d1e18: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: BB#1 'data_init4:data_init4.return'
SelectionDAG has 1 nodes:
  0x27d1e18: ch = EntryToken


********** List Scheduling BB#1 'data_init4.return' **********
*** Final schedule ***

Total amount of phi nodes to update: 0

*** Tail-duplicating BB#1

Merging into block: BB#0: derived from LLVM BB %data_init4.entry
    Live Ins: %ra
	%vreg0<def> = COPY %ra; GR32Bit:%vreg0
	%vreg1<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg1
	SW %vreg0, %vreg1, 0; mem:ST4[%2] GR32Bit:%vreg0,%vreg1
	%vreg2<def> = FLW %vreg1, 0; mem:LD4[%3] FP32Bit:%vreg2 GR32Bit:%vreg1
	%vreg3<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg3
	FSW %vreg2<kill>, %vreg3<kill>, 0; mem:ST4[%1] FP32Bit:%vreg2 GR32Bit:%vreg3
    Successors according to CFG: BB#1
From MBB: BB#1: derived from LLVM BB %data_init4.return
    Predecessors according to CFG: BB#0

Removing MBB: BB#1: derived from LLVM BB %data_init4.return
# Machine code for function data_init4: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %ra in %vreg0

0B	BB#0: derived from LLVM BB %data_init4.entry
	    Live Ins: %ra
16B		%vreg0<def> = COPY %ra; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg1
48B		SW %vreg0, %vreg1, 0; mem:ST4[%2] GR32Bit:%vreg0,%vreg1
64B		%vreg2<def> = FLW %vreg1, 0; mem:LD4[%3] FP32Bit:%vreg2 GR32Bit:%vreg1
80B		%vreg3<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg3
96B		FSW %vreg2<kill>, %vreg3<kill>, 0; mem:ST4[%1] FP32Bit:%vreg2 GR32Bit:%vreg3

# End machine code for function data_init4.

********** Stack Coloring **********
********** Function: data_init4
Found 0 markers and 2 slots
Slot structure:
Slot #0 - 4 bytes.
Slot #1 - 4 bytes.
Total Stack size: 8 bytes

Will not try to merge slots.
Removed 0 markers.
******** Pre-regalloc Machine LICM: data_init4 ********
******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: data_init4
********** PROCESS IMPLICIT DEFS **********
********** Function: data_init4
********** REWRITING TWO-ADDR INSTRS **********
********** Function: data_init4
# Machine code for function data_init4: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %ra in %vreg0

0B	BB#0: derived from LLVM BB %data_init4.entry
	    Live Ins: %ra
16B		%vreg0<def> = COPY %ra<kill>; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg1
48B		SW %vreg0<kill>, %vreg1, 0; mem:ST4[%2] GR32Bit:%vreg0,%vreg1
64B		%vreg2<def> = FLW %vreg1<kill>, 0; mem:LD4[%3] FP32Bit:%vreg2 GR32Bit:%vreg1
80B		%vreg3<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg3
96B		FSW %vreg2<kill>, %vreg3<kill>, 0; mem:ST4[%1] FP32Bit:%vreg2 GR32Bit:%vreg3

# End machine code for function data_init4.

Computing live-in reg-units in ABI blocks.
0B	BB#0 ra#0
Created 1 new intervals.
********** INTERVALS **********
ra = [0B,16r:0)  0@0B-phi
%vreg0 = [16r,48r:0)  0@16r
%vreg1 = [32r,64r:0)  0@32r
%vreg2 = [64r,96r:0)  0@64r
%vreg3 = [80r,96r:0)  0@80r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function data_init4: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %ra in %vreg0

0B	BB#0: derived from LLVM BB %data_init4.entry
	    Live Ins: %ra
16B		%vreg0<def> = COPY %ra; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg1
48B		SW %vreg0, %vreg1, 0; mem:ST4[%2] GR32Bit:%vreg0,%vreg1
64B		%vreg2<def> = FLW %vreg1, 0; mem:LD4[%3] FP32Bit:%vreg2 GR32Bit:%vreg1
80B		%vreg3<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg3
96B		FSW %vreg2, %vreg3, 0; mem:ST4[%1] FP32Bit:%vreg2 GR32Bit:%vreg3

# End machine code for function data_init4.

********** SIMPLE REGISTER COALESCING **********
********** Function: data_init4
********** JOINING INTERVALS ***********
data_init4.entry:
16B	%vreg0<def> = COPY %ra; GR32Bit:%vreg0
	Considering merging %vreg0 with %ra
	Can only merge into reserved registers.
Trying to inflate 0 regs.
********** INTERVALS **********
ra = [0B,16r:0)  0@0B-phi
%vreg0 = [16r,48r:0)  0@16r
%vreg1 = [32r,64r:0)  0@32r
%vreg2 = [64r,96r:0)  0@64r
%vreg3 = [80r,96r:0)  0@80r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function data_init4: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %ra in %vreg0

0B	BB#0: derived from LLVM BB %data_init4.entry
	    Live Ins: %ra
16B		%vreg0<def> = COPY %ra; GR32Bit:%vreg0
32B		%vreg1<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg1
48B		SW %vreg0, %vreg1, 0; mem:ST4[%2] GR32Bit:%vreg0,%vreg1
64B		%vreg2<def> = FLW %vreg1, 0; mem:LD4[%3] FP32Bit:%vreg2 GR32Bit:%vreg1
80B		%vreg3<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg3
96B		FSW %vreg2, %vreg3, 0; mem:ST4[%1] FP32Bit:%vreg2 GR32Bit:%vreg3

# End machine code for function data_init4.

Before MISched:
# Machine code for function data_init4: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %ra in %vreg0

BB#0: derived from LLVM BB %data_init4.entry
    Live Ins: %ra
	%vreg0<def> = COPY %ra; GR32Bit:%vreg0
	%vreg1<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg1
	SW %vreg0, %vreg1, 0; mem:ST4[%2] GR32Bit:%vreg0,%vreg1
	%vreg2<def> = FLW %vreg1, 0; mem:LD4[%3] FP32Bit:%vreg2 GR32Bit:%vreg1
	%vreg3<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg3
	FSW %vreg2, %vreg3, 0; mem:ST4[%1] FP32Bit:%vreg2 GR32Bit:%vreg3

# End machine code for function data_init4.


-------------
Starting new basic block BB#0
********** MI Scheduling **********
data_init4:BB#0 data_init4.entry
  From: %vreg0<def> = COPY %ra; GR32Bit:%vreg0
    To: End Remaining: 0
Max Pressure: FP32Bit=1
GR32Bit=2
Live In: %gp 
Live Out: 
FP32BitLimit 32 Actual 1
GR32BitLimit 32 Actual 2
Excess PSets: 
2 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 1
  SU(4) in tree 1
  SU(5) in tree 1
SU(0):   %vreg0<def> = COPY %ra; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 3
  Successors:
   val SU(2): Latency=0 Reg=%vreg0

SU(1):   %vreg1<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
   val SU(3): Latency=5 Reg=%vreg1
   val SU(2): Latency=5 Reg=%vreg1

SU(2):   SW %vreg0, %vreg1, 0; mem:ST4[%2] GR32Bit:%vreg0,%vreg1
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 13
  Depth              : 5
  Height             : 3
  Predecessors:
   val SU(0): Latency=0 Reg=%vreg0
   val SU(1): Latency=5 Reg=%vreg1
  Successors:
   ch  SU(3): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(3):   %vreg2<def> = FLW %vreg1, 0; mem:LD4[%3] FP32Bit:%vreg2 GR32Bit:%vreg1
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 6
  Height             : 2
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg1
   ch  SU(2): Latency=1
  Successors:
   val SU(5): Latency=2 Reg=%vreg2

SU(4):   %vreg3<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(5): Latency=5 Reg=%vreg3

SU(5):   FSW %vreg2, %vreg3, 0; mem:ST4[%1] FP32Bit:%vreg2 GR32Bit:%vreg3
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 8
  Height             : 0
  Predecessors:
   val SU(3): Latency=2 Reg=%vreg2
   val SU(4): Latency=5 Reg=%vreg3
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg0<def> = COPY %ra; GR32Bit:%vreg0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 3
  Successors:
   val SU(2): Latency=0 Reg=%vreg0

SU(1):   %vreg1<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
   val SU(3): Latency=5 Reg=%vreg1
   val SU(2): Latency=5 Reg=%vreg1

SU(2):   SW %vreg0, %vreg1, 0; mem:ST4[%2] GR32Bit:%vreg0,%vreg1
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 5
  Height             : 3
  Predecessors:
   val SU(0): Latency=0 Reg=%vreg0
   val SU(1): Latency=5 Reg=%vreg1
  Successors:
   ch  SU(3): Latency=1
   ch  SU(4294967295) *: Latency=0

SU(3):   %vreg2<def> = FLW %vreg1, 0; mem:LD4[%3] FP32Bit:%vreg2 GR32Bit:%vreg1
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 6
  Height             : 2
  Predecessors:
   val SU(1): Latency=5 Reg=%vreg1
   ch  SU(2): Latency=1
  Successors:
   val SU(5): Latency=2 Reg=%vreg2

SU(4):   %vreg3<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
   val SU(5): Latency=5 Reg=%vreg3

SU(5):   FSW %vreg2, %vreg3, 0; mem:ST4[%1] FP32Bit:%vreg2 GR32Bit:%vreg3
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 8
  Height             : 0
  Predecessors:
   val SU(3): Latency=2 Reg=%vreg2
   val SU(4): Latency=5 Reg=%vreg3
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(4)  ILP: 1 / 1 = 1 Tree: 1 @0
Scheduling %vreg3<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg3
handleMove 80B -> 8B: %vreg3<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg3
     %vreg3:	[80r,96r:0)  0@80r
        -->	[8r,96r:0)  0@8r
     t5:	EMPTY
        -->	EMPTY
Pick node SU(1)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg1<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg1
handleMove 32B -> 12B: %vreg1<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg1
     %vreg1:	[32r,64r:0)  0@32r
        -->	[12r,64r:0)  0@12r
     t5:	EMPTY
        -->	EMPTY
Pick node SU(0)  ILP: 0 / 1 = 0 Tree: 0 @0
Scheduling %vreg0<def> = COPY %ra; GR32Bit:%vreg0
Pick node SU(2)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling SW %vreg0, %vreg1, 0; mem:ST4[%2] GR32Bit:%vreg0,%vreg1
Pick node SU(3)  ILP: 1 / 7 = 0.142857 Tree: 1 @0
Scheduling %vreg2<def> = FLW %vreg1, 0; mem:LD4[%3] FP32Bit:%vreg2 GR32Bit:%vreg1
Pick node SU(5)  ILP: 3 / 9 = 0.333333 Tree: 1 @0
Scheduling FSW %vreg2, %vreg3, 0; mem:ST4[%1] FP32Bit:%vreg2 GR32Bit:%vreg3
*** Final schedule for BB#0 ***
SU(4):   %vreg3<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg3
SU(1):   %vreg1<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg1
SU(0):   %vreg0<def> = COPY %ra; GR32Bit:%vreg0
SU(2):   SW %vreg0, %vreg1, 0; mem:ST4[%2] GR32Bit:%vreg0,%vreg1
SU(3):   %vreg2<def> = FLW %vreg1, 0; mem:LD4[%3] FP32Bit:%vreg2 GR32Bit:%vreg1
SU(5):   FSW %vreg2, %vreg3, 0; mem:ST4[%1] FP32Bit:%vreg2 GR32Bit:%vreg3


*** Renumbered SlotIndexes 4-44 ***

*** Renumbered SlotIndexes 16-72 ***

*** Renumbered SlotIndexes 28-92 ***

*** Renumbered SlotIndexes 40-120 ***

*** Renumbered SlotIndexes 52-132 ***

*** Renumbered SlotIndexes 64-144 ***

*** Renumbered SlotIndexes 76-156 ***

*** Renumbered SlotIndexes 88-168 ***

*** Renumbered SlotIndexes 100-180 ***

*** Renumbered SlotIndexes 112-192 ***

*** Renumbered SlotIndexes 124-204 ***

*** Renumbered SlotIndexes 136-216 ***

*** Renumbered SlotIndexes 148-228 ***

*** Renumbered SlotIndexes 160-240 ***

*** Renumbered SlotIndexes 172-252 ***

*** Renumbered SlotIndexes 184-264 ***

*** Renumbered SlotIndexes 196-276 ***

*** Renumbered SlotIndexes 208-288 ***

*** Renumbered SlotIndexes 220-300 ***

*** Renumbered SlotIndexes 232-312 ***

*** Renumbered SlotIndexes 244-324 ***

*** Renumbered SlotIndexes 256-336 ***

*** Renumbered SlotIndexes 268-348 ***

*** Renumbered SlotIndexes 280-360 ***

*** Renumbered SlotIndexes 292-372 ***

*** Renumbered SlotIndexes 304-384 ***

*** Renumbered SlotIndexes 316-396 ***

*** Renumbered SlotIndexes 328-408 ***

*** Renumbered SlotIndexes 340-420 ***

*** Renumbered SlotIndexes 352-432 ***

*** Renumbered SlotIndexes 364-444 ***

*** Renumbered SlotIndexes 376-456 ***

*** Renumbered SlotIndexes 388-468 ***

*** Renumbered SlotIndexes 400-480 ***
Partitioning instructions of the region into multiple CEs
instr:  %vreg3<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg3
instr:  %vreg1<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg1
instr:  %vreg0<def> = COPY %ra; GR32Bit:%vreg0
instr:  SW %vreg0, %vreg1, 0; mem:ST4[%2] GR32Bit:%vreg0,%vreg1
instr:  %vreg2<def> = FLW %vreg1, 0; mem:LD4[%3] FP32Bit:%vreg2 GR32Bit:%vreg1
instr:  FSW %vreg2, %vreg3, 0; mem:ST4[%1] FP32Bit:%vreg2 GR32Bit:%vreg3
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
before falloc, state of bb0:BB#0: derived from LLVM BB %data_init4.entry
    Live Ins: %ra
	%vreg4<def> = ADD %t5, %zero; GR32Bit:%vreg4
	%vreg6<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg6
	%vreg7<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg7
	%vreg8<def> = SRLI %vreg7, 12; GR32Bit:%vreg8,%vreg7
	%vreg9<def> = ADD %vreg6, %vreg8; GR32Bit:%vreg9,%vreg6,%vreg8
	%vreg10<def> = ADDI %zero, 16; GR32Bit:%vreg10
	%vreg11<def> = SRLI %t5, 22; GR32Bit:%vreg11
	%vreg12<def> = SRLI %t5, 12; GR32Bit:%vreg12
	%vreg13<def> = ANDI %vreg12, 15; GR32Bit:%vreg13,%vreg12
	%vreg14<def> = SRLI %t5, 6; GR32Bit:%vreg14
	%vreg15<def> = ANDI %vreg14, 63; GR32Bit:%vreg15,%vreg14
	%vreg16<def> = ADDI %zero, 832; GR32Bit:%vreg16
	%vreg17<def> = MUL %vreg11, %vreg16; GR32Bit:%vreg17,%vreg11,%vreg16
	%vreg18<def> = ADDI %zero, 52; GR32Bit:%vreg18
	%vreg19<def> = MUL %vreg13, %vreg18; GR32Bit:%vreg19,%vreg13,%vreg18
	%vreg20<def> = ADD %vreg19, %vreg15; GR32Bit:%vreg20,%vreg19,%vreg15
	%vreg21<def> = ADD %vreg20, %vreg17; GR32Bit:%vreg21,%vreg20,%vreg17
	%vreg22<def> = MUL %vreg21, %vreg10; GR32Bit:%vreg22,%vreg21,%vreg10
	%vreg5<def> = ADD %vreg9, %vreg22; GR32Bit:%vreg5,%vreg9,%vreg22
	%vreg3<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg3
	%vreg1<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg1
	%vreg0<def> = COPY %ra; GR32Bit:%vreg0
	SW %vreg0, %vreg1, 0; mem:ST4[%2] GR32Bit:%vreg0,%vreg1
	%vreg2<def> = FLW %vreg1, 0; mem:LD4[%3] FP32Bit:%vreg2 GR32Bit:%vreg1
	FSW %vreg2, %vreg3, 0; mem:ST4[%1] FP32Bit:%vreg2 GR32Bit:%vreg3
	%vreg23<def> = ADD %t5, %zero; GR32Bit:%vreg23
	%vreg25<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg25
	%vreg26<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg26
	%vreg27<def> = SRLI %vreg26, 12; GR32Bit:%vreg27,%vreg26
	%vreg28<def> = ADD %vreg25, %vreg27; GR32Bit:%vreg28,%vreg25,%vreg27
	%vreg29<def> = ADDI %zero, 16; GR32Bit:%vreg29
	%vreg30<def> = SRLI %t5, 22; GR32Bit:%vreg30
	%vreg31<def> = SRLI %t5, 12; GR32Bit:%vreg31
	%vreg32<def> = ANDI %vreg31, 15; GR32Bit:%vreg32,%vreg31
	%vreg33<def> = SRLI %t5, 6; GR32Bit:%vreg33
	%vreg34<def> = ANDI %vreg33, 63; GR32Bit:%vreg34,%vreg33
	%vreg35<def> = ADDI %zero, 832; GR32Bit:%vreg35
	%vreg36<def> = MUL %vreg30, %vreg35; GR32Bit:%vreg36,%vreg30,%vreg35
	%vreg37<def> = ADDI %zero, 52; GR32Bit:%vreg37
	%vreg38<def> = MUL %vreg32, %vreg37; GR32Bit:%vreg38,%vreg32,%vreg37
	%vreg39<def> = ADD %vreg38, %vreg34; GR32Bit:%vreg39,%vreg38,%vreg34
	%vreg40<def> = ADD %vreg39, %vreg36; GR32Bit:%vreg40,%vreg39,%vreg36
	%vreg41<def> = MUL %vreg40, %vreg29; GR32Bit:%vreg41,%vreg40,%vreg29
	%vreg24<def> = ADD %vreg28, %vreg41; GR32Bit:%vreg24,%vreg28,%vreg41
	%vreg42<def> = ADD %t5, %zero; GR32Bit:%vreg42
	%vreg44<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg44
	%vreg45<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg45
	%vreg46<def> = SRLI %vreg45, 12; GR32Bit:%vreg46,%vreg45
	%vreg47<def> = ADD %vreg44, %vreg46; GR32Bit:%vreg47,%vreg44,%vreg46
	%vreg48<def> = ADDI %zero, 16; GR32Bit:%vreg48
	%vreg49<def> = SRLI %t5, 22; GR32Bit:%vreg49
	%vreg50<def> = SRLI %t5, 12; GR32Bit:%vreg50
	%vreg51<def> = ANDI %vreg50, 15; GR32Bit:%vreg51,%vreg50
	%vreg52<def> = SRLI %t5, 6; GR32Bit:%vreg52
	%vreg53<def> = ANDI %vreg52, 63; GR32Bit:%vreg53,%vreg52
	%vreg54<def> = ADDI %zero, 832; GR32Bit:%vreg54
	%vreg55<def> = MUL %vreg49, %vreg54; GR32Bit:%vreg55,%vreg49,%vreg54
	%vreg56<def> = ADDI %zero, 52; GR32Bit:%vreg56
	%vreg57<def> = MUL %vreg51, %vreg56; GR32Bit:%vreg57,%vreg51,%vreg56
	%vreg58<def> = ADD %vreg57, %vreg53; GR32Bit:%vreg58,%vreg57,%vreg53
	%vreg59<def> = ADD %vreg58, %vreg55; GR32Bit:%vreg59,%vreg58,%vreg55
	%vreg60<def> = MUL %vreg59, %vreg48; GR32Bit:%vreg60,%vreg59,%vreg48
	%vreg43<def> = ADD %vreg47, %vreg60; GR32Bit:%vreg43,%vreg47,%vreg60
	%vreg61<def> = ADD %t5, %zero; GR32Bit:%vreg61
	%vreg63<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg63
	%vreg64<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg64
	%vreg65<def> = SRLI %vreg64, 12; GR32Bit:%vreg65,%vreg64
	%vreg66<def> = ADD %vreg63, %vreg65; GR32Bit:%vreg66,%vreg63,%vreg65
	%vreg67<def> = ADDI %zero, 16; GR32Bit:%vreg67
	%vreg68<def> = SRLI %t5, 22; GR32Bit:%vreg68
	%vreg69<def> = SRLI %t5, 12; GR32Bit:%vreg69
	%vreg70<def> = ANDI %vreg69, 15; GR32Bit:%vreg70,%vreg69
	%vreg71<def> = SRLI %t5, 6; GR32Bit:%vreg71
	%vreg72<def> = ANDI %vreg71, 63; GR32Bit:%vreg72,%vreg71
	%vreg73<def> = ADDI %zero, 832; GR32Bit:%vreg73
	%vreg74<def> = MUL %vreg68, %vreg73; GR32Bit:%vreg74,%vreg68,%vreg73
	%vreg75<def> = ADDI %zero, 52; GR32Bit:%vreg75
	%vreg76<def> = MUL %vreg70, %vreg75; GR32Bit:%vreg76,%vreg70,%vreg75
	%vreg77<def> = ADD %vreg76, %vreg72; GR32Bit:%vreg77,%vreg76,%vreg72
	%vreg78<def> = ADD %vreg77, %vreg74; GR32Bit:%vreg78,%vreg77,%vreg74
	%vreg79<def> = MUL %vreg78, %vreg67; GR32Bit:%vreg79,%vreg78,%vreg67
	%vreg62<def> = ADD %vreg66, %vreg79; GR32Bit:%vreg62,%vreg66,%vreg79
Adding all fallocs first to avoid stalls due to sequential fallocs and fbinds
Adding writecm(for writing sync count to context frames) and fbind instructions
live end of child is itself
Adding localref sw instructions to hyperOp data_init4
Computing live-in reg-units in ABI blocks.
0B	BB#0 ra#0 sp#0
Created 1 new intervals.

*** Renumbered SlotIndexes 412-492 ***

*** Renumbered SlotIndexes 424-504 ***

*** Renumbered SlotIndexes 436-516 ***

*** Renumbered SlotIndexes 448-528 ***

*** Renumbered SlotIndexes 460-540 ***

*** Renumbered SlotIndexes 472-552 ***

*** Renumbered SlotIndexes 484-564 ***

*** Renumbered SlotIndexes 496-576 ***

*** Renumbered SlotIndexes 508-588 ***
Adding writecm instructions to hyperOp data_init4

*** Renumbered SlotIndexes 520-600 ***
Adding writecmp and sync instructions
Adding endHyperOp instructions to each pHyperOp

*** Renumbered SlotIndexes 532-612 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 544-624 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 556-636 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 568-648 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 580-660 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 592-672 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0
After Shuffling regions of basic block, state of BB#0:
BB#0: derived from LLVM BB %data_init4.entry
    Live Ins: %ra %sp
	%vreg4<def> = ADD %t5, %zero; GR32Bit:%vreg4
	%vreg6<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg6
	%vreg7<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg7
	%vreg8<def> = SRLI %vreg7, 12; GR32Bit:%vreg8,%vreg7
	%vreg9<def> = ADD %vreg6, %vreg8; GR32Bit:%vreg9,%vreg6,%vreg8
	%vreg10<def> = ADDI %zero, 16; GR32Bit:%vreg10
	%vreg11<def> = SRLI %t5, 22; GR32Bit:%vreg11
	%vreg12<def> = SRLI %t5, 12; GR32Bit:%vreg12
	%vreg13<def> = ANDI %vreg12, 15; GR32Bit:%vreg13,%vreg12
	%vreg14<def> = SRLI %t5, 6; GR32Bit:%vreg14
	%vreg15<def> = ANDI %vreg14, 63; GR32Bit:%vreg15,%vreg14
	%vreg16<def> = ADDI %zero, 832; GR32Bit:%vreg16
	%vreg17<def> = MUL %vreg11, %vreg16; GR32Bit:%vreg17,%vreg11,%vreg16
	%vreg18<def> = ADDI %zero, 52; GR32Bit:%vreg18
	%vreg19<def> = MUL %vreg13, %vreg18; GR32Bit:%vreg19,%vreg13,%vreg18
	%vreg20<def> = ADD %vreg19, %vreg15; GR32Bit:%vreg20,%vreg19,%vreg15
	%vreg21<def> = ADD %vreg20, %vreg17; GR32Bit:%vreg21,%vreg20,%vreg17
	%vreg22<def> = MUL %vreg21, %vreg10; GR32Bit:%vreg22,%vreg21,%vreg10
	%vreg5<def> = ADD %vreg9, %vreg22; GR32Bit:%vreg5,%vreg9,%vreg22
	%vreg3<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg3
	%vreg1<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg1
	%vreg0<def> = COPY %ra; GR32Bit:%vreg0
	SW %vreg0, %vreg1, 0; mem:ST4[%2] GR32Bit:%vreg0,%vreg1
	%vreg2<def> = FLW %vreg1, 0; mem:LD4[%3] FP32Bit:%vreg2 GR32Bit:%vreg1
	FSW %vreg2, %vreg3, 0; mem:ST4[%1] FP32Bit:%vreg2 GR32Bit:%vreg3
	%vreg80<def> = COPY %sp; GR32Bit:%vreg80
	%vreg81<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg81
	%vreg82<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg82
	%vreg83<def> = SRLI %vreg82, 12; GR32Bit:%vreg83,%vreg82
	%vreg84<def> = ADD %vreg81, %vreg83; GR32Bit:%vreg84,%vreg81,%vreg83
	%vreg85<def> = ADDI %zero, 16; GR32Bit:%vreg85
	%vreg86<def> = SRLI %vreg80, 22; GR32Bit:%vreg86,%vreg80
	%vreg87<def> = SRLI %vreg80, 12; GR32Bit:%vreg87,%vreg80
	%vreg88<def> = ANDI %vreg87, 15; GR32Bit:%vreg88,%vreg87
	%vreg89<def> = SRLI %vreg80, 6; GR32Bit:%vreg89,%vreg80
	%vreg90<def> = ANDI %vreg89, 63; GR32Bit:%vreg90,%vreg89
	%vreg91<def> = ADDI %zero, 832; GR32Bit:%vreg91
	%vreg92<def> = MUL %vreg86, %vreg91; GR32Bit:%vreg92,%vreg86,%vreg91
	%vreg93<def> = ADDI %zero, 52; GR32Bit:%vreg93
	%vreg94<def> = MUL %vreg88, %vreg93; GR32Bit:%vreg94,%vreg88,%vreg93
	%vreg95<def> = ADD %vreg94, %vreg90; GR32Bit:%vreg95,%vreg94,%vreg90
	%vreg96<def> = ADD %vreg95, %vreg92; GR32Bit:%vreg96,%vreg95,%vreg92
	%vreg97<def> = MUL %vreg96, %vreg85; GR32Bit:%vreg97,%vreg96,%vreg85
	%vreg98<def> = ADD %vreg97, %vreg84; GR32Bit:%vreg98,%vreg97,%vreg84
	%vreg99<def> = FLW %vreg5, 0; FP32Bit:%vreg99 GR32Bit:%vreg5
	FSW %vreg99, %vreg98, 0; FP32Bit:%vreg99 GR32Bit:%vreg98
	%vreg100<def> = LW %t5, <fi#-1>; GR32Bit:%vreg100
	WRITECM %vreg80, %vreg100, 0; GR32Bit:%vreg80,%vreg100
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg23<def> = ADD %t5, %zero; GR32Bit:%vreg23
	%vreg25<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg25
	%vreg26<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg26
	%vreg27<def> = SRLI %vreg26, 12; GR32Bit:%vreg27,%vreg26
	%vreg28<def> = ADD %vreg25, %vreg27; GR32Bit:%vreg28,%vreg25,%vreg27
	%vreg29<def> = ADDI %zero, 16; GR32Bit:%vreg29
	%vreg30<def> = SRLI %t5, 22; GR32Bit:%vreg30
	%vreg31<def> = SRLI %t5, 12; GR32Bit:%vreg31
	%vreg32<def> = ANDI %vreg31, 15; GR32Bit:%vreg32,%vreg31
	%vreg33<def> = SRLI %t5, 6; GR32Bit:%vreg33
	%vreg34<def> = ANDI %vreg33, 63; GR32Bit:%vreg34,%vreg33
	%vreg35<def> = ADDI %zero, 832; GR32Bit:%vreg35
	%vreg36<def> = MUL %vreg30, %vreg35; GR32Bit:%vreg36,%vreg30,%vreg35
	%vreg37<def> = ADDI %zero, 52; GR32Bit:%vreg37
	%vreg38<def> = MUL %vreg32, %vreg37; GR32Bit:%vreg38,%vreg32,%vreg37
	%vreg39<def> = ADD %vreg38, %vreg34; GR32Bit:%vreg39,%vreg38,%vreg34
	%vreg40<def> = ADD %vreg39, %vreg36; GR32Bit:%vreg40,%vreg39,%vreg36
	%vreg41<def> = MUL %vreg40, %vreg29; GR32Bit:%vreg41,%vreg40,%vreg29
	%vreg24<def> = ADD %vreg28, %vreg41; GR32Bit:%vreg24,%vreg28,%vreg41
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg42<def> = ADD %t5, %zero; GR32Bit:%vreg42
	%vreg44<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg44
	%vreg45<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg45
	%vreg46<def> = SRLI %vreg45, 12; GR32Bit:%vreg46,%vreg45
	%vreg47<def> = ADD %vreg44, %vreg46; GR32Bit:%vreg47,%vreg44,%vreg46
	%vreg48<def> = ADDI %zero, 16; GR32Bit:%vreg48
	%vreg49<def> = SRLI %t5, 22; GR32Bit:%vreg49
	%vreg50<def> = SRLI %t5, 12; GR32Bit:%vreg50
	%vreg51<def> = ANDI %vreg50, 15; GR32Bit:%vreg51,%vreg50
	%vreg52<def> = SRLI %t5, 6; GR32Bit:%vreg52
	%vreg53<def> = ANDI %vreg52, 63; GR32Bit:%vreg53,%vreg52
	%vreg54<def> = ADDI %zero, 832; GR32Bit:%vreg54
	%vreg55<def> = MUL %vreg49, %vreg54; GR32Bit:%vreg55,%vreg49,%vreg54
	%vreg56<def> = ADDI %zero, 52; GR32Bit:%vreg56
	%vreg57<def> = MUL %vreg51, %vreg56; GR32Bit:%vreg57,%vreg51,%vreg56
	%vreg58<def> = ADD %vreg57, %vreg53; GR32Bit:%vreg58,%vreg57,%vreg53
	%vreg59<def> = ADD %vreg58, %vreg55; GR32Bit:%vreg59,%vreg58,%vreg55
	%vreg60<def> = MUL %vreg59, %vreg48; GR32Bit:%vreg60,%vreg59,%vreg48
	%vreg43<def> = ADD %vreg47, %vreg60; GR32Bit:%vreg43,%vreg47,%vreg60
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	%vreg61<def> = ADD %t5, %zero; GR32Bit:%vreg61
	%vreg63<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg63
	%vreg64<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg64
	%vreg65<def> = SRLI %vreg64, 12; GR32Bit:%vreg65,%vreg64
	%vreg66<def> = ADD %vreg63, %vreg65; GR32Bit:%vreg66,%vreg63,%vreg65
	%vreg67<def> = ADDI %zero, 16; GR32Bit:%vreg67
	%vreg68<def> = SRLI %t5, 22; GR32Bit:%vreg68
	%vreg69<def> = SRLI %t5, 12; GR32Bit:%vreg69
	%vreg70<def> = ANDI %vreg69, 15; GR32Bit:%vreg70,%vreg69
	%vreg71<def> = SRLI %t5, 6; GR32Bit:%vreg71
	%vreg72<def> = ANDI %vreg71, 63; GR32Bit:%vreg72,%vreg71
	%vreg73<def> = ADDI %zero, 832; GR32Bit:%vreg73
	%vreg74<def> = MUL %vreg68, %vreg73; GR32Bit:%vreg74,%vreg68,%vreg73
	%vreg75<def> = ADDI %zero, 52; GR32Bit:%vreg75
	%vreg76<def> = MUL %vreg70, %vreg75; GR32Bit:%vreg76,%vreg70,%vreg75
	%vreg77<def> = ADD %vreg76, %vreg72; GR32Bit:%vreg77,%vreg76,%vreg72
	%vreg78<def> = ADD %vreg77, %vreg74; GR32Bit:%vreg78,%vreg77,%vreg74
	%vreg79<def> = MUL %vreg78, %vreg67; GR32Bit:%vreg79,%vreg78,%vreg67
	%vreg62<def> = ADD %vreg66, %vreg79; GR32Bit:%vreg62,%vreg66,%vreg79
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 316-788 ***

*** Renumbered SlotIndexes 304-808 ***

*** Renumbered SlotIndexes 216-856 ***

*** Renumbered SlotIndexes 204-876 ***

*** Renumbered SlotIndexes 204-892 ***

*** Renumbered SlotIndexes 112-936 ***

*** Renumbered SlotIndexes 100-956 ***

*** Renumbered SlotIndexes 100-972 ***

*** Renumbered SlotIndexes 100-988 ***

*** Renumbered SlotIndexes 100-1004 ***

*** Renumbered SlotIndexes 100-1020 ***

*** Renumbered SlotIndexes 100-1036 ***

*** Renumbered SlotIndexes 100-1052 ***

*** Renumbered SlotIndexes 100-1068 ***

*** Renumbered SlotIndexes 100-1084 ***

*** Renumbered SlotIndexes 100-1100 ***

*** Renumbered SlotIndexes 100-1116 ***

*** Renumbered SlotIndexes 100-1132 ***

*** Renumbered SlotIndexes 100-1148 ***

*** Renumbered SlotIndexes 100-1164 ***

*** Renumbered SlotIndexes 100-1180 ***

*** Renumbered SlotIndexes 100-1196 ***

*** Renumbered SlotIndexes 12-1236 ***
Creating pHyperOp bundles for CEs for bb0
  %vreg23<def> = ADD %t5, %zero; GR32Bit:%vreg23
starting at   %vreg4<def> = ADD %t5, %zero; GR32Bit:%vreg4
  %vreg42<def> = ADD %t5, %zero; GR32Bit:%vreg42
starting at   %vreg23<def> = ADD %t5, %zero; GR32Bit:%vreg23
  %vreg61<def> = ADD %t5, %zero; GR32Bit:%vreg61
starting at   %vreg42<def> = ADD %t5, %zero; GR32Bit:%vreg42
starting at   %vreg61<def> = ADD %t5, %zero; GR32Bit:%vreg61
After bundling, state of BB0:BB#0: derived from LLVM BB %data_init4.entry
    Live Ins: %ra %sp
	%vreg4<def> = ADD %t5, %zero; GR32Bit:%vreg4
	  * %vreg6<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg6
	  * %vreg7<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg7
	  * %vreg8<def> = SRLI %vreg7, 12; GR32Bit:%vreg8,%vreg7
	  * %vreg9<def> = ADD %vreg6, %vreg8; GR32Bit:%vreg9,%vreg6,%vreg8
	  * %vreg10<def> = ADDI %zero, 16; GR32Bit:%vreg10
	  * %vreg11<def> = SRLI %t5, 22; GR32Bit:%vreg11
	  * %vreg12<def> = SRLI %t5, 12; GR32Bit:%vreg12
	  * %vreg13<def> = ANDI %vreg12, 15; GR32Bit:%vreg13,%vreg12
	  * %vreg14<def> = SRLI %t5, 6; GR32Bit:%vreg14
	  * %vreg15<def> = ANDI %vreg14, 63; GR32Bit:%vreg15,%vreg14
	  * %vreg16<def> = ADDI %zero, 832; GR32Bit:%vreg16
	  * %vreg17<def> = MUL %vreg11, %vreg16; GR32Bit:%vreg17,%vreg11,%vreg16
	  * %vreg18<def> = ADDI %zero, 52; GR32Bit:%vreg18
	  * %vreg19<def> = MUL %vreg13, %vreg18; GR32Bit:%vreg19,%vreg13,%vreg18
	  * %vreg20<def> = ADD %vreg19, %vreg15; GR32Bit:%vreg20,%vreg19,%vreg15
	  * %vreg21<def> = ADD %vreg20, %vreg17; GR32Bit:%vreg21,%vreg20,%vreg17
	  * %vreg22<def> = MUL %vreg21, %vreg10; GR32Bit:%vreg22,%vreg21,%vreg10
	  * %vreg5<def> = ADD %vreg9, %vreg22; GR32Bit:%vreg5,%vreg9,%vreg22
	  * %vreg3<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg3
	  * %vreg1<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg1
	  * %vreg0<def> = COPY %ra; GR32Bit:%vreg0
	  * SW %vreg0, %vreg1, 0; mem:ST4[%2] GR32Bit:%vreg0,%vreg1
	  * %vreg2<def> = FLW %vreg1, 0; mem:LD4[%3] FP32Bit:%vreg2 GR32Bit:%vreg1
	  * FSW %vreg2, %vreg3, 0; mem:ST4[%1] FP32Bit:%vreg2 GR32Bit:%vreg3
	  * %vreg80<def> = COPY %sp; GR32Bit:%vreg80
	  * %vreg81<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg81
	  * %vreg82<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg82
	  * %vreg83<def> = SRLI %vreg82, 12; GR32Bit:%vreg83,%vreg82
	  * %vreg84<def> = ADD %vreg81, %vreg83; GR32Bit:%vreg84,%vreg81,%vreg83
	  * %vreg85<def> = ADDI %zero, 16; GR32Bit:%vreg85
	  * %vreg86<def> = SRLI %vreg80, 22; GR32Bit:%vreg86,%vreg80
	  * %vreg87<def> = SRLI %vreg80, 12; GR32Bit:%vreg87,%vreg80
	  * %vreg88<def> = ANDI %vreg87, 15; GR32Bit:%vreg88,%vreg87
	  * %vreg89<def> = SRLI %vreg80, 6; GR32Bit:%vreg89,%vreg80
	  * %vreg90<def> = ANDI %vreg89, 63; GR32Bit:%vreg90,%vreg89
	  * %vreg91<def> = ADDI %zero, 832; GR32Bit:%vreg91
	  * %vreg92<def> = MUL %vreg86, %vreg91; GR32Bit:%vreg92,%vreg86,%vreg91
	  * %vreg93<def> = ADDI %zero, 52; GR32Bit:%vreg93
	  * %vreg94<def> = MUL %vreg88, %vreg93; GR32Bit:%vreg94,%vreg88,%vreg93
	  * %vreg95<def> = ADD %vreg94, %vreg90; GR32Bit:%vreg95,%vreg94,%vreg90
	  * %vreg96<def> = ADD %vreg95, %vreg92; GR32Bit:%vreg96,%vreg95,%vreg92
	  * %vreg97<def> = MUL %vreg96, %vreg85; GR32Bit:%vreg97,%vreg96,%vreg85
	  * %vreg98<def> = ADD %vreg97, %vreg84; GR32Bit:%vreg98,%vreg97,%vreg84
	  * %vreg99<def> = FLW %vreg5, 0; FP32Bit:%vreg99 GR32Bit:%vreg5
	  * FSW %vreg99, %vreg98, 0; FP32Bit:%vreg99 GR32Bit:%vreg98
	  * %vreg100<def> = LW %t5, <fi#-1>; GR32Bit:%vreg100
	  * WRITECM %vreg80, %vreg100, 0; GR32Bit:%vreg80,%vreg100
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg23<def> = ADD %t5, %zero; GR32Bit:%vreg23
	  * %vreg25<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg25
	  * %vreg26<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg26
	  * %vreg27<def> = SRLI %vreg26, 12; GR32Bit:%vreg27,%vreg26
	  * %vreg28<def> = ADD %vreg25, %vreg27; GR32Bit:%vreg28,%vreg25,%vreg27
	  * %vreg29<def> = ADDI %zero, 16; GR32Bit:%vreg29
	  * %vreg30<def> = SRLI %t5, 22; GR32Bit:%vreg30
	  * %vreg31<def> = SRLI %t5, 12; GR32Bit:%vreg31
	  * %vreg32<def> = ANDI %vreg31, 15; GR32Bit:%vreg32,%vreg31
	  * %vreg33<def> = SRLI %t5, 6; GR32Bit:%vreg33
	  * %vreg34<def> = ANDI %vreg33, 63; GR32Bit:%vreg34,%vreg33
	  * %vreg35<def> = ADDI %zero, 832; GR32Bit:%vreg35
	  * %vreg36<def> = MUL %vreg30, %vreg35; GR32Bit:%vreg36,%vreg30,%vreg35
	  * %vreg37<def> = ADDI %zero, 52; GR32Bit:%vreg37
	  * %vreg38<def> = MUL %vreg32, %vreg37; GR32Bit:%vreg38,%vreg32,%vreg37
	  * %vreg39<def> = ADD %vreg38, %vreg34; GR32Bit:%vreg39,%vreg38,%vreg34
	  * %vreg40<def> = ADD %vreg39, %vreg36; GR32Bit:%vreg40,%vreg39,%vreg36
	  * %vreg41<def> = MUL %vreg40, %vreg29; GR32Bit:%vreg41,%vreg40,%vreg29
	  * %vreg24<def> = ADD %vreg28, %vreg41; GR32Bit:%vreg24,%vreg28,%vreg41
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg42<def> = ADD %t5, %zero; GR32Bit:%vreg42
	  * %vreg44<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg44
	  * %vreg45<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg45
	  * %vreg46<def> = SRLI %vreg45, 12; GR32Bit:%vreg46,%vreg45
	  * %vreg47<def> = ADD %vreg44, %vreg46; GR32Bit:%vreg47,%vreg44,%vreg46
	  * %vreg48<def> = ADDI %zero, 16; GR32Bit:%vreg48
	  * %vreg49<def> = SRLI %t5, 22; GR32Bit:%vreg49
	  * %vreg50<def> = SRLI %t5, 12; GR32Bit:%vreg50
	  * %vreg51<def> = ANDI %vreg50, 15; GR32Bit:%vreg51,%vreg50
	  * %vreg52<def> = SRLI %t5, 6; GR32Bit:%vreg52
	  * %vreg53<def> = ANDI %vreg52, 63; GR32Bit:%vreg53,%vreg52
	  * %vreg54<def> = ADDI %zero, 832; GR32Bit:%vreg54
	  * %vreg55<def> = MUL %vreg49, %vreg54; GR32Bit:%vreg55,%vreg49,%vreg54
	  * %vreg56<def> = ADDI %zero, 52; GR32Bit:%vreg56
	  * %vreg57<def> = MUL %vreg51, %vreg56; GR32Bit:%vreg57,%vreg51,%vreg56
	  * %vreg58<def> = ADD %vreg57, %vreg53; GR32Bit:%vreg58,%vreg57,%vreg53
	  * %vreg59<def> = ADD %vreg58, %vreg55; GR32Bit:%vreg59,%vreg58,%vreg55
	  * %vreg60<def> = MUL %vreg59, %vreg48; GR32Bit:%vreg60,%vreg59,%vreg48
	  * %vreg43<def> = ADD %vreg47, %vreg60; GR32Bit:%vreg43,%vreg47,%vreg60
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%vreg61<def> = ADD %t5, %zero; GR32Bit:%vreg61
	  * %vreg63<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg63
	  * %vreg64<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg64
	  * %vreg65<def> = SRLI %vreg64, 12; GR32Bit:%vreg65,%vreg64
	  * %vreg66<def> = ADD %vreg63, %vreg65; GR32Bit:%vreg66,%vreg63,%vreg65
	  * %vreg67<def> = ADDI %zero, 16; GR32Bit:%vreg67
	  * %vreg68<def> = SRLI %t5, 22; GR32Bit:%vreg68
	  * %vreg69<def> = SRLI %t5, 12; GR32Bit:%vreg69
	  * %vreg70<def> = ANDI %vreg69, 15; GR32Bit:%vreg70,%vreg69
	  * %vreg71<def> = SRLI %t5, 6; GR32Bit:%vreg71
	  * %vreg72<def> = ANDI %vreg71, 63; GR32Bit:%vreg72,%vreg71
	  * %vreg73<def> = ADDI %zero, 832; GR32Bit:%vreg73
	  * %vreg74<def> = MUL %vreg68, %vreg73; GR32Bit:%vreg74,%vreg68,%vreg73
	  * %vreg75<def> = ADDI %zero, 52; GR32Bit:%vreg75
	  * %vreg76<def> = MUL %vreg70, %vreg75; GR32Bit:%vreg76,%vreg70,%vreg75
	  * %vreg77<def> = ADD %vreg76, %vreg72; GR32Bit:%vreg77,%vreg76,%vreg72
	  * %vreg78<def> = ADD %vreg77, %vreg74; GR32Bit:%vreg78,%vreg77,%vreg74
	  * %vreg79<def> = MUL %vreg78, %vreg67; GR32Bit:%vreg79,%vreg78,%vreg67
	  * %vreg62<def> = ADD %vreg66, %vreg79; GR32Bit:%vreg62,%vreg66,%vreg79
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
%physreg43,%physreg56,Patching the instructions that are supposed to use the physical registers r30 and r31
Computing live-in reg-units in ABI blocks.
0B	BB#0 ra#0 sp#0
Created 0 new intervals.
********** INTERVALS **********
ra = [0B,1188r:0)  0@0B-phi
sp = [0B,908r:0)  0@0B-phi
t5 = EMPTY
%vreg0 = [164r,172r:0)  0@164r
%vreg1 = [156r,180r:0)  0@156r
%vreg2 = [180r,188r:0)  0@180r
%vreg3 = [148r,188r:0)  0@148r
%vreg4 = [4r,4d:0)  0@4r
%vreg5 = [140r,348r:0)  0@140r
%vreg6 = [12r,28r:0)  0@12r
%vreg7 = [16r,20r:0)  0@16r
%vreg8 = [20r,28r:0)  0@20r
%vreg9 = [28r,140r:0)  0@28r
%vreg10 = [36r,132r:0)  0@36r
%vreg11 = [44r,92r:0)  0@44r
%vreg12 = [52r,60r:0)  0@52r
%vreg13 = [60r,108r:0)  0@60r
%vreg14 = [68r,76r:0)  0@68r
%vreg15 = [76r,116r:0)  0@76r
%vreg16 = [84r,92r:0)  0@84r
%vreg17 = [92r,124r:0)  0@92r
%vreg18 = [100r,108r:0)  0@100r
%vreg19 = [108r,116r:0)  0@108r
%vreg20 = [116r,124r:0)  0@116r
%vreg21 = [124r,132r:0)  0@124r
%vreg22 = [132r,140r:0)  0@132r
%vreg23 = [404r,404d:0)  0@404r
%vreg24 = [548r,548d:0)  0@548r
%vreg25 = [412r,436r:0)  0@412r
%vreg26 = [420r,428r:0)  0@420r
%vreg27 = [428r,436r:0)  0@428r
%vreg28 = [436r,548r:0)  0@436r
%vreg29 = [444r,540r:0)  0@444r
%vreg30 = [452r,500r:0)  0@452r
%vreg31 = [460r,468r:0)  0@460r
%vreg32 = [468r,516r:0)  0@468r
%vreg33 = [476r,484r:0)  0@476r
%vreg34 = [484r,524r:0)  0@484r
%vreg35 = [492r,500r:0)  0@492r
%vreg36 = [500r,532r:0)  0@500r
%vreg37 = [508r,516r:0)  0@508r
%vreg38 = [516r,524r:0)  0@516r
%vreg39 = [524r,532r:0)  0@524r
%vreg40 = [532r,540r:0)  0@532r
%vreg41 = [540r,548r:0)  0@540r
%vreg42 = [580r,580d:0)  0@580r
%vreg43 = [724r,724d:0)  0@724r
%vreg44 = [588r,612r:0)  0@588r
%vreg45 = [596r,604r:0)  0@596r
%vreg46 = [604r,612r:0)  0@604r
%vreg47 = [612r,724r:0)  0@612r
%vreg48 = [620r,716r:0)  0@620r
%vreg49 = [628r,676r:0)  0@628r
%vreg50 = [636r,644r:0)  0@636r
%vreg51 = [644r,692r:0)  0@644r
%vreg52 = [652r,660r:0)  0@652r
%vreg53 = [660r,700r:0)  0@660r
%vreg54 = [668r,676r:0)  0@668r
%vreg55 = [676r,708r:0)  0@676r
%vreg56 = [684r,692r:0)  0@684r
%vreg57 = [692r,700r:0)  0@692r
%vreg58 = [700r,708r:0)  0@700r
%vreg59 = [708r,716r:0)  0@708r
%vreg60 = [716r,724r:0)  0@716r
%vreg61 = [756r,756d:0)  0@756r
%vreg62 = [900r,900d:0)  0@900r
%vreg63 = [764r,788r:0)  0@764r
%vreg64 = [772r,780r:0)  0@772r
%vreg65 = [780r,788r:0)  0@780r
%vreg66 = [788r,900r:0)  0@788r
%vreg67 = [796r,892r:0)  0@796r
%vreg68 = [804r,852r:0)  0@804r
%vreg69 = [812r,820r:0)  0@812r
%vreg70 = [820r,868r:0)  0@820r
%vreg71 = [828r,836r:0)  0@828r
%vreg72 = [836r,876r:0)  0@836r
%vreg73 = [844r,852r:0)  0@844r
%vreg74 = [852r,884r:0)  0@852r
%vreg75 = [860r,868r:0)  0@860r
%vreg76 = [868r,876r:0)  0@868r
%vreg77 = [876r,884r:0)  0@876r
%vreg78 = [884r,892r:0)  0@884r
%vreg79 = [892r,900r:0)  0@892r
%vreg80 = [196r,372r:0)  0@196r
%vreg81 = [204r,228r:0)  0@204r
%vreg82 = [212r,220r:0)  0@212r
%vreg83 = [220r,228r:0)  0@220r
%vreg84 = [228r,340r:0)  0@228r
%vreg85 = [236r,332r:0)  0@236r
%vreg86 = [244r,292r:0)  0@244r
%vreg87 = [252r,260r:0)  0@252r
%vreg88 = [260r,308r:0)  0@260r
%vreg89 = [268r,276r:0)  0@268r
%vreg90 = [276r,316r:0)  0@276r
%vreg91 = [284r,292r:0)  0@284r
%vreg92 = [292r,324r:0)  0@292r
%vreg93 = [300r,308r:0)  0@300r
%vreg94 = [308r,316r:0)  0@308r
%vreg95 = [316r,324r:0)  0@316r
%vreg96 = [324r,332r:0)  0@324r
%vreg97 = [332r,340r:0)  0@332r
%vreg98 = [340r,356r:0)  0@340r
%vreg99 = [348r,356r:0)  0@348r
%vreg100 = [364r,372r:0)  0@364r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function data_init4: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %ra in %vreg0, %sp in %vreg80

0B	BB#0: derived from LLVM BB %data_init4.entry
	    Live Ins: %ra %sp
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg6<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg6
4B		  * %vreg7<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg7
4B		  * %vreg8<def> = SRLI %vreg7, 12; GR32Bit:%vreg8,%vreg7
4B		  * %vreg9<def> = ADD %vreg6, %vreg8; GR32Bit:%vreg9,%vreg6,%vreg8
4B		  * %vreg10<def> = ADDI %zero, 16; GR32Bit:%vreg10
4B		  * %vreg11<def> = SRLI %t5, 22; GR32Bit:%vreg11
4B		  * %vreg12<def> = SRLI %t5, 12; GR32Bit:%vreg12
4B		  * %vreg13<def> = ANDI %vreg12, 15; GR32Bit:%vreg13,%vreg12
4B		  * %vreg14<def> = SRLI %t5, 6; GR32Bit:%vreg14
4B		  * %vreg15<def> = ANDI %vreg14, 63; GR32Bit:%vreg15,%vreg14
4B		  * %vreg16<def> = ADDI %zero, 832; GR32Bit:%vreg16
4B		  * %vreg17<def> = MUL %vreg11, %vreg16; GR32Bit:%vreg17,%vreg11,%vreg16
4B		  * %vreg18<def> = ADDI %zero, 52; GR32Bit:%vreg18
4B		  * %vreg19<def> = MUL %vreg13, %vreg18; GR32Bit:%vreg19,%vreg13,%vreg18
4B		  * %vreg20<def> = ADD %vreg19, %vreg15; GR32Bit:%vreg20,%vreg19,%vreg15
4B		  * %vreg21<def> = ADD %vreg20, %vreg17; GR32Bit:%vreg21,%vreg20,%vreg17
4B		  * %vreg22<def> = MUL %vreg21, %vreg10; GR32Bit:%vreg22,%vreg21,%vreg10
4B		  * %t5<def> = ADD %vreg9, %vreg22; GR32Bit:%vreg9,%vreg22
4B		  * %vreg3<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg3
4B		  * %vreg1<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg1
4B		  * %vreg0<def> = COPY %ra; GR32Bit:%vreg0
4B		  * SW %vreg0, %vreg1, 0; mem:ST4[%2] GR32Bit:%vreg0,%vreg1
4B		  * %vreg2<def> = FLW %vreg1, 0; mem:LD4[%3] FP32Bit:%vreg2 GR32Bit:%vreg1
4B		  * FSW %vreg2, %vreg3, 0; mem:ST4[%1] FP32Bit:%vreg2 GR32Bit:%vreg3
4B		  * %vreg80<def> = COPY %sp; GR32Bit:%vreg80
4B		  * %vreg81<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg81
4B		  * %vreg82<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg82
4B		  * %vreg83<def> = SRLI %vreg82, 12; GR32Bit:%vreg83,%vreg82
4B		  * %vreg84<def> = ADD %vreg81, %vreg83; GR32Bit:%vreg84,%vreg81,%vreg83
4B		  * %vreg85<def> = ADDI %zero, 16; GR32Bit:%vreg85
4B		  * %vreg86<def> = SRLI %vreg80, 22; GR32Bit:%vreg86,%vreg80
4B		  * %vreg87<def> = SRLI %vreg80, 12; GR32Bit:%vreg87,%vreg80
4B		  * %vreg88<def> = ANDI %vreg87, 15; GR32Bit:%vreg88,%vreg87
4B		  * %vreg89<def> = SRLI %vreg80, 6; GR32Bit:%vreg89,%vreg80
4B		  * %vreg90<def> = ANDI %vreg89, 63; GR32Bit:%vreg90,%vreg89
4B		  * %vreg91<def> = ADDI %zero, 832; GR32Bit:%vreg91
4B		  * %vreg92<def> = MUL %vreg86, %vreg91; GR32Bit:%vreg92,%vreg86,%vreg91
4B		  * %vreg93<def> = ADDI %zero, 52; GR32Bit:%vreg93
4B		  * %vreg94<def> = MUL %vreg88, %vreg93; GR32Bit:%vreg94,%vreg88,%vreg93
4B		  * %vreg95<def> = ADD %vreg94, %vreg90; GR32Bit:%vreg95,%vreg94,%vreg90
4B		  * %vreg96<def> = ADD %vreg95, %vreg92; GR32Bit:%vreg96,%vreg95,%vreg92
4B		  * %vreg97<def> = MUL %vreg96, %vreg85; GR32Bit:%vreg97,%vreg96,%vreg85
4B		  * %vreg98<def> = ADD %vreg97, %vreg84; GR32Bit:%vreg98,%vreg97,%vreg84
4B		  * %vreg99<def> = FLW %t5, 0; FP32Bit:%vreg99
4B		  * FSW %vreg99, %vreg98, 0; FP32Bit:%vreg99 GR32Bit:%vreg98
4B		  * %vreg100<def> = LW %t5, <fi#-1>; GR32Bit:%vreg100
4B		  * WRITECM %vreg80, %vreg100, 0; GR32Bit:%vreg80,%vreg100
4B		  * END 0
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
404B		%t4<def> = ADD %t5, %zero
404B		  * %vreg25<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg25
404B		  * %vreg26<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg26
404B		  * %vreg27<def> = SRLI %vreg26, 12; GR32Bit:%vreg27,%vreg26
404B		  * %vreg28<def> = ADD %vreg25, %vreg27; GR32Bit:%vreg28,%vreg25,%vreg27
404B		  * %vreg29<def> = ADDI %zero, 16; GR32Bit:%vreg29
404B		  * %vreg30<def> = SRLI %t5, 22; GR32Bit:%vreg30
404B		  * %vreg31<def> = SRLI %t5, 12; GR32Bit:%vreg31
404B		  * %vreg32<def> = ANDI %vreg31, 15; GR32Bit:%vreg32,%vreg31
404B		  * %vreg33<def> = SRLI %t5, 6; GR32Bit:%vreg33
404B		  * %vreg34<def> = ANDI %vreg33, 63; GR32Bit:%vreg34,%vreg33
404B		  * %vreg35<def> = ADDI %zero, 832; GR32Bit:%vreg35
404B		  * %vreg36<def> = MUL %vreg30, %vreg35; GR32Bit:%vreg36,%vreg30,%vreg35
404B		  * %vreg37<def> = ADDI %zero, 52; GR32Bit:%vreg37
404B		  * %vreg38<def> = MUL %vreg32, %vreg37; GR32Bit:%vreg38,%vreg32,%vreg37
404B		  * %vreg39<def> = ADD %vreg38, %vreg34; GR32Bit:%vreg39,%vreg38,%vreg34
404B		  * %vreg40<def> = ADD %vreg39, %vreg36; GR32Bit:%vreg40,%vreg39,%vreg36
404B		  * %vreg41<def> = MUL %vreg40, %vreg29; GR32Bit:%vreg41,%vreg40,%vreg29
404B		  * %t5<def> = ADD %vreg28, %vreg41; GR32Bit:%vreg28,%vreg41
404B		  * END 0
404B		  * %zero<def> = ADDI %zero, 0
404B		  * %zero<def> = ADDI %zero, 0
580B		%t4<def> = ADD %t5, %zero
580B		  * %vreg44<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg44
580B		  * %vreg45<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg45
580B		  * %vreg46<def> = SRLI %vreg45, 12; GR32Bit:%vreg46,%vreg45
580B		  * %vreg47<def> = ADD %vreg44, %vreg46; GR32Bit:%vreg47,%vreg44,%vreg46
580B		  * %vreg48<def> = ADDI %zero, 16; GR32Bit:%vreg48
580B		  * %vreg49<def> = SRLI %t5, 22; GR32Bit:%vreg49
580B		  * %vreg50<def> = SRLI %t5, 12; GR32Bit:%vreg50
580B		  * %vreg51<def> = ANDI %vreg50, 15; GR32Bit:%vreg51,%vreg50
580B		  * %vreg52<def> = SRLI %t5, 6; GR32Bit:%vreg52
580B		  * %vreg53<def> = ANDI %vreg52, 63; GR32Bit:%vreg53,%vreg52
580B		  * %vreg54<def> = ADDI %zero, 832; GR32Bit:%vreg54
580B		  * %vreg55<def> = MUL %vreg49, %vreg54; GR32Bit:%vreg55,%vreg49,%vreg54
580B		  * %vreg56<def> = ADDI %zero, 52; GR32Bit:%vreg56
580B		  * %vreg57<def> = MUL %vreg51, %vreg56; GR32Bit:%vreg57,%vreg51,%vreg56
580B		  * %vreg58<def> = ADD %vreg57, %vreg53; GR32Bit:%vreg58,%vreg57,%vreg53
580B		  * %vreg59<def> = ADD %vreg58, %vreg55; GR32Bit:%vreg59,%vreg58,%vreg55
580B		  * %vreg60<def> = MUL %vreg59, %vreg48; GR32Bit:%vreg60,%vreg59,%vreg48
580B		  * %t5<def> = ADD %vreg47, %vreg60; GR32Bit:%vreg47,%vreg60
580B		  * END 0
580B		  * %zero<def> = ADDI %zero, 0
580B		  * %zero<def> = ADDI %zero, 0
756B		%t4<def> = ADD %t5, %zero
756B		  * %vreg63<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg63
756B		  * %vreg64<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg64
756B		  * %vreg65<def> = SRLI %vreg64, 12; GR32Bit:%vreg65,%vreg64
756B		  * %vreg66<def> = ADD %vreg63, %vreg65; GR32Bit:%vreg66,%vreg63,%vreg65
756B		  * %vreg67<def> = ADDI %zero, 16; GR32Bit:%vreg67
756B		  * %vreg68<def> = SRLI %t5, 22; GR32Bit:%vreg68
756B		  * %vreg69<def> = SRLI %t5, 12; GR32Bit:%vreg69
756B		  * %vreg70<def> = ANDI %vreg69, 15; GR32Bit:%vreg70,%vreg69
756B		  * %vreg71<def> = SRLI %t5, 6; GR32Bit:%vreg71
756B		  * %vreg72<def> = ANDI %vreg71, 63; GR32Bit:%vreg72,%vreg71
756B		  * %vreg73<def> = ADDI %zero, 832; GR32Bit:%vreg73
756B		  * %vreg74<def> = MUL %vreg68, %vreg73; GR32Bit:%vreg74,%vreg68,%vreg73
756B		  * %vreg75<def> = ADDI %zero, 52; GR32Bit:%vreg75
756B		  * %vreg76<def> = MUL %vreg70, %vreg75; GR32Bit:%vreg76,%vreg70,%vreg75
756B		  * %vreg77<def> = ADD %vreg76, %vreg72; GR32Bit:%vreg77,%vreg76,%vreg72
756B		  * %vreg78<def> = ADD %vreg77, %vreg74; GR32Bit:%vreg78,%vreg77,%vreg74
756B		  * %vreg79<def> = MUL %vreg78, %vreg67; GR32Bit:%vreg79,%vreg78,%vreg67
756B		  * %t5<def> = ADD %vreg66, %vreg79; GR32Bit:%vreg66,%vreg79
756B		  * END 0
756B		  * %zero<def> = ADDI %zero, 0
756B		  * %zero<def> = ADDI %zero, 0

# End machine code for function data_init4.

********** COMPUTING LIVE DEBUG VARIABLES: data_init4 **********
********** DEBUG VARIABLES **********
********** Compute Spill Weights **********
********** Function: data_init4
********** GREEDY REGISTER ALLOCATION **********
********** Function: data_init4
Replacing 43 with 43 for instruction%vreg0<def> = COPY %ra; GR32Bit:%vreg0
Replacing 56 with 56 for instruction%vreg80<def> = COPY %sp; GR32Bit:%vreg80

selectOrSplit GR32Bit:%vreg80 [196r,372r:0)  0@196r
hints: %sp
reg 2147483728 that was live-in gets phys reg:56 instead of phys reg:56
assigning %vreg80 to %sp: sp

selectOrSplit GR32Bit:%vreg0 [164r,172r:0)  0@164r
hints: %ra
reg 2147483648 that was live-in gets phys reg:43 instead of phys reg:43
assigning %vreg0 to %ra: ra

selectOrSplit GR32Bit:%vreg9 [28r,140r:0)  0@28r
assigning %vreg9 to %t0: t0

selectOrSplit GR32Bit:%vreg28 [436r,548r:0)  0@436r
assigning %vreg28 to %t0: t0

selectOrSplit GR32Bit:%vreg47 [612r,724r:0)  0@612r
assigning %vreg47 to %t0: t0

selectOrSplit GR32Bit:%vreg66 [788r,900r:0)  0@788r
assigning %vreg66 to %t0: t0

selectOrSplit GR32Bit:%vreg84 [228r,340r:0)  0@228r
assigning %vreg84 to %t0: t0

selectOrSplit GR32Bit:%vreg10 [36r,132r:0)  0@36r
assigning %vreg10 to %t1: t1

selectOrSplit GR32Bit:%vreg29 [444r,540r:0)  0@444r
assigning %vreg29 to %t1: t1

selectOrSplit GR32Bit:%vreg48 [620r,716r:0)  0@620r
assigning %vreg48 to %t1: t1

selectOrSplit GR32Bit:%vreg67 [796r,892r:0)  0@796r
assigning %vreg67 to %t1: t1

selectOrSplit GR32Bit:%vreg85 [236r,332r:0)  0@236r
assigning %vreg85 to %t1: t1

selectOrSplit GR32Bit:%vreg11 [44r,92r:0)  0@44r
assigning %vreg11 to %t2: t2

selectOrSplit GR32Bit:%vreg13 [60r,108r:0)  0@60r
assigning %vreg13 to %fp: fp

selectOrSplit GR32Bit:%vreg30 [452r,500r:0)  0@452r
assigning %vreg30 to %t2: t2

selectOrSplit GR32Bit:%vreg32 [468r,516r:0)  0@468r
assigning %vreg32 to %fp: fp

selectOrSplit GR32Bit:%vreg49 [628r,676r:0)  0@628r
assigning %vreg49 to %t2: t2

selectOrSplit GR32Bit:%vreg51 [644r,692r:0)  0@644r
assigning %vreg51 to %fp: fp

selectOrSplit GR32Bit:%vreg68 [804r,852r:0)  0@804r
assigning %vreg68 to %t2: t2

selectOrSplit GR32Bit:%vreg70 [820r,868r:0)  0@820r
assigning %vreg70 to %fp: fp

selectOrSplit GR32Bit:%vreg86 [244r,292r:0)  0@244r
assigning %vreg86 to %t2: t2

selectOrSplit GR32Bit:%vreg88 [260r,308r:0)  0@260r
assigning %vreg88 to %fp: fp

selectOrSplit GR32Bit:%vreg3 [148r,188r:0)  0@148r
assigning %vreg3 to %t0: t0

selectOrSplit GR32Bit:%vreg15 [76r,116r:0)  0@76r
assigning %vreg15 to %a0: a0

selectOrSplit GR32Bit:%vreg34 [484r,524r:0)  0@484r
assigning %vreg34 to %a0: a0

selectOrSplit GR32Bit:%vreg53 [660r,700r:0)  0@660r
assigning %vreg53 to %a0: a0

selectOrSplit GR32Bit:%vreg72 [836r,876r:0)  0@836r
assigning %vreg72 to %a0: a0

selectOrSplit GR32Bit:%vreg90 [276r,316r:0)  0@276r
assigning %vreg90 to %a0: a0

selectOrSplit GR32Bit:%vreg17 [92r,124r:0)  0@92r
assigning %vreg17 to %t2: t2

selectOrSplit GR32Bit:%vreg36 [500r,532r:0)  0@500r
assigning %vreg36 to %t2: t2

selectOrSplit GR32Bit:%vreg55 [676r,708r:0)  0@676r
assigning %vreg55 to %t2: t2

selectOrSplit GR32Bit:%vreg74 [852r,884r:0)  0@852r
assigning %vreg74 to %t2: t2

selectOrSplit GR32Bit:%vreg92 [292r,324r:0)  0@292r
assigning %vreg92 to %t2: t2

selectOrSplit GR32Bit:%vreg1 [156r,180r:0)  0@156r
assigning %vreg1 to %t1: t1

selectOrSplit GR32Bit:%vreg25 [412r,436r:0)  0@412r
assigning %vreg25 to %t0: t0

selectOrSplit GR32Bit:%vreg44 [588r,612r:0)  0@588r
assigning %vreg44 to %t0: t0

selectOrSplit GR32Bit:%vreg63 [764r,788r:0)  0@764r
assigning %vreg63 to %t0: t0

selectOrSplit GR32Bit:%vreg81 [204r,228r:0)  0@204r
assigning %vreg81 to %t0: t0

selectOrSplit GR32Bit:%vreg6 [12r,28r:0)  0@12r
assigning %vreg6 to %t0: t0

selectOrSplit GR32Bit:%vreg98 [340r,356r:0)  0@340r
assigning %vreg98 to %t0: t0

selectOrSplit FP32Bit:%vreg2 [180r,188r:0)  0@180r
AllocationOrder(FP32Bit) = [ %ft1 %ft2 %ft3 %ft4 %ft5 %ft6 %ft7 %fs0 %fs1 %fa0 %fa1 %fa2 %fa3 %fa4 %fa5 %fa6 %fa7 %fs2 %fs3 %fs4 %fs5 %fs6 %fs7 %fs8 %fs9 %fs10 %fs11 %ft8 %ft9 %ft10 %ft11 ]
assigning %vreg2 to %ft1: ft1

selectOrSplit GR32Bit:%vreg8 [20r,28r:0)  0@20r
assigning %vreg8 to %t1: t1

selectOrSplit GR32Bit:%vreg12 [52r,60r:0)  0@52r
assigning %vreg12 to %fp: fp

selectOrSplit GR32Bit:%vreg14 [68r,76r:0)  0@68r
assigning %vreg14 to %a0: a0

selectOrSplit GR32Bit:%vreg16 [84r,92r:0)  0@84r
assigning %vreg16 to %a1: a1

selectOrSplit GR32Bit:%vreg18 [100r,108r:0)  0@100r
assigning %vreg18 to %a1: a1

selectOrSplit GR32Bit:%vreg19 [108r,116r:0)  0@108r
assigning %vreg19 to %fp: fp

selectOrSplit GR32Bit:%vreg20 [116r,124r:0)  0@116r
assigning %vreg20 to %fp: fp

selectOrSplit GR32Bit:%vreg21 [124r,132r:0)  0@124r
assigning %vreg21 to %t2: t2

selectOrSplit GR32Bit:%vreg22 [132r,140r:0)  0@132r
assigning %vreg22 to %t1: t1

selectOrSplit GR32Bit:%vreg26 [420r,428r:0)  0@420r
assigning %vreg26 to %t1: t1

selectOrSplit GR32Bit:%vreg27 [428r,436r:0)  0@428r
assigning %vreg27 to %t1: t1

selectOrSplit GR32Bit:%vreg31 [460r,468r:0)  0@460r
assigning %vreg31 to %fp: fp

selectOrSplit GR32Bit:%vreg33 [476r,484r:0)  0@476r
assigning %vreg33 to %a0: a0

selectOrSplit GR32Bit:%vreg35 [492r,500r:0)  0@492r
assigning %vreg35 to %a1: a1

selectOrSplit GR32Bit:%vreg37 [508r,516r:0)  0@508r
assigning %vreg37 to %a1: a1

selectOrSplit GR32Bit:%vreg38 [516r,524r:0)  0@516r
assigning %vreg38 to %fp: fp

selectOrSplit GR32Bit:%vreg39 [524r,532r:0)  0@524r
assigning %vreg39 to %fp: fp

selectOrSplit GR32Bit:%vreg40 [532r,540r:0)  0@532r
assigning %vreg40 to %t2: t2

selectOrSplit GR32Bit:%vreg41 [540r,548r:0)  0@540r
assigning %vreg41 to %t1: t1

selectOrSplit GR32Bit:%vreg45 [596r,604r:0)  0@596r
assigning %vreg45 to %t1: t1

selectOrSplit GR32Bit:%vreg46 [604r,612r:0)  0@604r
assigning %vreg46 to %t1: t1

selectOrSplit GR32Bit:%vreg50 [636r,644r:0)  0@636r
assigning %vreg50 to %fp: fp

selectOrSplit GR32Bit:%vreg52 [652r,660r:0)  0@652r
assigning %vreg52 to %a0: a0

selectOrSplit GR32Bit:%vreg54 [668r,676r:0)  0@668r
assigning %vreg54 to %a1: a1

selectOrSplit GR32Bit:%vreg56 [684r,692r:0)  0@684r
assigning %vreg56 to %a1: a1

selectOrSplit GR32Bit:%vreg57 [692r,700r:0)  0@692r
assigning %vreg57 to %fp: fp

selectOrSplit GR32Bit:%vreg58 [700r,708r:0)  0@700r
assigning %vreg58 to %fp: fp

selectOrSplit GR32Bit:%vreg59 [708r,716r:0)  0@708r
assigning %vreg59 to %t2: t2

selectOrSplit GR32Bit:%vreg60 [716r,724r:0)  0@716r
assigning %vreg60 to %t1: t1

selectOrSplit GR32Bit:%vreg64 [772r,780r:0)  0@772r
assigning %vreg64 to %t1: t1

selectOrSplit GR32Bit:%vreg65 [780r,788r:0)  0@780r
assigning %vreg65 to %t1: t1

selectOrSplit GR32Bit:%vreg69 [812r,820r:0)  0@812r
assigning %vreg69 to %fp: fp

selectOrSplit GR32Bit:%vreg71 [828r,836r:0)  0@828r
assigning %vreg71 to %a0: a0

selectOrSplit GR32Bit:%vreg73 [844r,852r:0)  0@844r
assigning %vreg73 to %a1: a1

selectOrSplit GR32Bit:%vreg75 [860r,868r:0)  0@860r
assigning %vreg75 to %a1: a1

selectOrSplit GR32Bit:%vreg76 [868r,876r:0)  0@868r
assigning %vreg76 to %fp: fp

selectOrSplit GR32Bit:%vreg77 [876r,884r:0)  0@876r
assigning %vreg77 to %fp: fp

selectOrSplit GR32Bit:%vreg78 [884r,892r:0)  0@884r
assigning %vreg78 to %t2: t2

selectOrSplit GR32Bit:%vreg79 [892r,900r:0)  0@892r
assigning %vreg79 to %t1: t1

selectOrSplit GR32Bit:%vreg82 [212r,220r:0)  0@212r
assigning %vreg82 to %t1: t1

selectOrSplit GR32Bit:%vreg83 [220r,228r:0)  0@220r
assigning %vreg83 to %t1: t1

selectOrSplit GR32Bit:%vreg87 [252r,260r:0)  0@252r
assigning %vreg87 to %fp: fp

selectOrSplit GR32Bit:%vreg89 [268r,276r:0)  0@268r
assigning %vreg89 to %a0: a0

selectOrSplit GR32Bit:%vreg91 [284r,292r:0)  0@284r
assigning %vreg91 to %a1: a1

selectOrSplit GR32Bit:%vreg93 [300r,308r:0)  0@300r
assigning %vreg93 to %a1: a1

selectOrSplit GR32Bit:%vreg94 [308r,316r:0)  0@308r
assigning %vreg94 to %fp: fp

selectOrSplit GR32Bit:%vreg95 [316r,324r:0)  0@316r
assigning %vreg95 to %fp: fp

selectOrSplit GR32Bit:%vreg96 [324r,332r:0)  0@324r
assigning %vreg96 to %t2: t2

selectOrSplit GR32Bit:%vreg97 [332r,340r:0)  0@332r
assigning %vreg97 to %t1: t1

selectOrSplit FP32Bit:%vreg99 [348r,356r:0)  0@348r
assigning %vreg99 to %ft1: ft1

selectOrSplit GR32Bit:%vreg100 [364r,372r:0)  0@364r
assigning %vreg100 to %t0: t0

selectOrSplit GR32Bit:%vreg7 [16r,20r:0)  0@16r
assigning %vreg7 to %t1: t1
********** REWRITE VIRTUAL REGISTERS **********
********** Function: data_init4
********** REGISTER MAP **********
[%vreg0 -> %ra] GR32Bit
[%vreg1 -> %t1] GR32Bit
[%vreg2 -> %ft1] FP32Bit
[%vreg3 -> %t0] GR32Bit
[%vreg6 -> %t0] GR32Bit
[%vreg7 -> %t1] GR32Bit
[%vreg8 -> %t1] GR32Bit
[%vreg9 -> %t0] GR32Bit
[%vreg10 -> %t1] GR32Bit
[%vreg11 -> %t2] GR32Bit
[%vreg12 -> %fp] GR32Bit
[%vreg13 -> %fp] GR32Bit
[%vreg14 -> %a0] GR32Bit
[%vreg15 -> %a0] GR32Bit
[%vreg16 -> %a1] GR32Bit
[%vreg17 -> %t2] GR32Bit
[%vreg18 -> %a1] GR32Bit
[%vreg19 -> %fp] GR32Bit
[%vreg20 -> %fp] GR32Bit
[%vreg21 -> %t2] GR32Bit
[%vreg22 -> %t1] GR32Bit
[%vreg25 -> %t0] GR32Bit
[%vreg26 -> %t1] GR32Bit
[%vreg27 -> %t1] GR32Bit
[%vreg28 -> %t0] GR32Bit
[%vreg29 -> %t1] GR32Bit
[%vreg30 -> %t2] GR32Bit
[%vreg31 -> %fp] GR32Bit
[%vreg32 -> %fp] GR32Bit
[%vreg33 -> %a0] GR32Bit
[%vreg34 -> %a0] GR32Bit
[%vreg35 -> %a1] GR32Bit
[%vreg36 -> %t2] GR32Bit
[%vreg37 -> %a1] GR32Bit
[%vreg38 -> %fp] GR32Bit
[%vreg39 -> %fp] GR32Bit
[%vreg40 -> %t2] GR32Bit
[%vreg41 -> %t1] GR32Bit
[%vreg44 -> %t0] GR32Bit
[%vreg45 -> %t1] GR32Bit
[%vreg46 -> %t1] GR32Bit
[%vreg47 -> %t0] GR32Bit
[%vreg48 -> %t1] GR32Bit
[%vreg49 -> %t2] GR32Bit
[%vreg50 -> %fp] GR32Bit
[%vreg51 -> %fp] GR32Bit
[%vreg52 -> %a0] GR32Bit
[%vreg53 -> %a0] GR32Bit
[%vreg54 -> %a1] GR32Bit
[%vreg55 -> %t2] GR32Bit
[%vreg56 -> %a1] GR32Bit
[%vreg57 -> %fp] GR32Bit
[%vreg58 -> %fp] GR32Bit
[%vreg59 -> %t2] GR32Bit
[%vreg60 -> %t1] GR32Bit
[%vreg63 -> %t0] GR32Bit
[%vreg64 -> %t1] GR32Bit
[%vreg65 -> %t1] GR32Bit
[%vreg66 -> %t0] GR32Bit
[%vreg67 -> %t1] GR32Bit
[%vreg68 -> %t2] GR32Bit
[%vreg69 -> %fp] GR32Bit
[%vreg70 -> %fp] GR32Bit
[%vreg71 -> %a0] GR32Bit
[%vreg72 -> %a0] GR32Bit
[%vreg73 -> %a1] GR32Bit
[%vreg74 -> %t2] GR32Bit
[%vreg75 -> %a1] GR32Bit
[%vreg76 -> %fp] GR32Bit
[%vreg77 -> %fp] GR32Bit
[%vreg78 -> %t2] GR32Bit
[%vreg79 -> %t1] GR32Bit
[%vreg80 -> %sp] GR32Bit
[%vreg81 -> %t0] GR32Bit
[%vreg82 -> %t1] GR32Bit
[%vreg83 -> %t1] GR32Bit
[%vreg84 -> %t0] GR32Bit
[%vreg85 -> %t1] GR32Bit
[%vreg86 -> %t2] GR32Bit
[%vreg87 -> %fp] GR32Bit
[%vreg88 -> %fp] GR32Bit
[%vreg89 -> %a0] GR32Bit
[%vreg90 -> %a0] GR32Bit
[%vreg91 -> %a1] GR32Bit
[%vreg92 -> %t2] GR32Bit
[%vreg93 -> %a1] GR32Bit
[%vreg94 -> %fp] GR32Bit
[%vreg95 -> %fp] GR32Bit
[%vreg96 -> %t2] GR32Bit
[%vreg97 -> %t1] GR32Bit
[%vreg98 -> %t0] GR32Bit
[%vreg99 -> %ft1] FP32Bit
[%vreg100 -> %t0] GR32Bit

0B	BB#0: derived from LLVM BB %data_init4.entry
	    Live Ins: %ra %sp
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg6<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg6
4B		  * %vreg7<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg7
4B		  * %vreg8<def> = SRLI %vreg7<kill>, 12; GR32Bit:%vreg8,%vreg7
4B		  * %vreg9<def> = ADD %vreg6<kill>, %vreg8<kill>; GR32Bit:%vreg9,%vreg6,%vreg8
4B		  * %vreg10<def> = ADDI %zero, 16; GR32Bit:%vreg10
4B		  * %vreg11<def> = SRLI %t5, 22; GR32Bit:%vreg11
4B		  * %vreg12<def> = SRLI %t5, 12; GR32Bit:%vreg12
4B		  * %vreg13<def> = ANDI %vreg12<kill>, 15; GR32Bit:%vreg13,%vreg12
4B		  * %vreg14<def> = SRLI %t5, 6; GR32Bit:%vreg14
4B		  * %vreg15<def> = ANDI %vreg14<kill>, 63; GR32Bit:%vreg15,%vreg14
4B		  * %vreg16<def> = ADDI %zero, 832; GR32Bit:%vreg16
4B		  * %vreg17<def> = MUL %vreg11<kill>, %vreg16<kill>; GR32Bit:%vreg17,%vreg11,%vreg16
4B		  * %vreg18<def> = ADDI %zero, 52; GR32Bit:%vreg18
4B		  * %vreg19<def> = MUL %vreg13<kill>, %vreg18<kill>; GR32Bit:%vreg19,%vreg13,%vreg18
4B		  * %vreg20<def> = ADD %vreg19<kill>, %vreg15<kill>; GR32Bit:%vreg20,%vreg19,%vreg15
4B		  * %vreg21<def> = ADD %vreg20<kill>, %vreg17<kill>; GR32Bit:%vreg21,%vreg20,%vreg17
4B		  * %vreg22<def> = MUL %vreg21<kill>, %vreg10<kill>; GR32Bit:%vreg22,%vreg21,%vreg10
4B		  * %t5<def> = ADD %vreg9<kill>, %vreg22<kill>; GR32Bit:%vreg9,%vreg22
4B		  * %vreg3<def> = ADDI %t5, <fi#0>; GR32Bit:%vreg3
4B		  * %vreg1<def> = ADDI %t5, <fi#1>; GR32Bit:%vreg1
4B		  * %vreg0<def> = COPY %ra; GR32Bit:%vreg0
4B		  * SW %vreg0, %vreg1, 0; mem:ST4[%2] GR32Bit:%vreg0,%vreg1
4B		  * %vreg2<def> = FLW %vreg1<kill>, 0; mem:LD4[%3] FP32Bit:%vreg2 GR32Bit:%vreg1
4B		  * FSW %vreg2<kill>, %vreg3<kill>, 0; mem:ST4[%1] FP32Bit:%vreg2 GR32Bit:%vreg3
4B		  * %vreg80<def> = COPY %sp; GR32Bit:%vreg80
4B		  * %vreg81<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg81
4B		  * %vreg82<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg82
4B		  * %vreg83<def> = SRLI %vreg82<kill>, 12; GR32Bit:%vreg83,%vreg82
4B		  * %vreg84<def> = ADD %vreg81<kill>, %vreg83<kill>; GR32Bit:%vreg84,%vreg81,%vreg83
4B		  * %vreg85<def> = ADDI %zero, 16; GR32Bit:%vreg85
4B		  * %vreg86<def> = SRLI %vreg80, 22; GR32Bit:%vreg86,%vreg80
4B		  * %vreg87<def> = SRLI %vreg80, 12; GR32Bit:%vreg87,%vreg80
4B		  * %vreg88<def> = ANDI %vreg87<kill>, 15; GR32Bit:%vreg88,%vreg87
4B		  * %vreg89<def> = SRLI %vreg80, 6; GR32Bit:%vreg89,%vreg80
4B		  * %vreg90<def> = ANDI %vreg89<kill>, 63; GR32Bit:%vreg90,%vreg89
4B		  * %vreg91<def> = ADDI %zero, 832; GR32Bit:%vreg91
4B		  * %vreg92<def> = MUL %vreg86<kill>, %vreg91<kill>; GR32Bit:%vreg92,%vreg86,%vreg91
4B		  * %vreg93<def> = ADDI %zero, 52; GR32Bit:%vreg93
4B		  * %vreg94<def> = MUL %vreg88<kill>, %vreg93<kill>; GR32Bit:%vreg94,%vreg88,%vreg93
4B		  * %vreg95<def> = ADD %vreg94<kill>, %vreg90<kill>; GR32Bit:%vreg95,%vreg94,%vreg90
4B		  * %vreg96<def> = ADD %vreg95<kill>, %vreg92<kill>; GR32Bit:%vreg96,%vreg95,%vreg92
4B		  * %vreg97<def> = MUL %vreg96<kill>, %vreg85<kill>; GR32Bit:%vreg97,%vreg96,%vreg85
4B		  * %vreg98<def> = ADD %vreg97<kill>, %vreg84<kill>; GR32Bit:%vreg98,%vreg97,%vreg84
4B		  * %vreg99<def> = FLW %t5, 0; FP32Bit:%vreg99
4B		  * FSW %vreg99<kill>, %vreg98<kill>, 0; FP32Bit:%vreg99 GR32Bit:%vreg98
4B		  * %vreg100<def> = LW %t5, <fi#-1>; GR32Bit:%vreg100
4B		  * WRITECM %vreg80, %vreg100<kill>, 0; GR32Bit:%vreg80,%vreg100
4B		  * END 0
4B		  * %zero<def> = ADDI %zero, 0
4B		  * %zero<def> = ADDI %zero, 0
404B		%t4<def> = ADD %t5, %zero
404B		  * %vreg25<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg25
404B		  * %vreg26<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg26
404B		  * %vreg27<def> = SRLI %vreg26<kill>, 12; GR32Bit:%vreg27,%vreg26
404B		  * %vreg28<def> = ADD %vreg25<kill>, %vreg27<kill>; GR32Bit:%vreg28,%vreg25,%vreg27
404B		  * %vreg29<def> = ADDI %zero, 16; GR32Bit:%vreg29
404B		  * %vreg30<def> = SRLI %t5, 22; GR32Bit:%vreg30
404B		  * %vreg31<def> = SRLI %t5, 12; GR32Bit:%vreg31
404B		  * %vreg32<def> = ANDI %vreg31<kill>, 15; GR32Bit:%vreg32,%vreg31
404B		  * %vreg33<def> = SRLI %t5, 6; GR32Bit:%vreg33
404B		  * %vreg34<def> = ANDI %vreg33<kill>, 63; GR32Bit:%vreg34,%vreg33
404B		  * %vreg35<def> = ADDI %zero, 832; GR32Bit:%vreg35
404B		  * %vreg36<def> = MUL %vreg30<kill>, %vreg35<kill>; GR32Bit:%vreg36,%vreg30,%vreg35
404B		  * %vreg37<def> = ADDI %zero, 52; GR32Bit:%vreg37
404B		  * %vreg38<def> = MUL %vreg32<kill>, %vreg37<kill>; GR32Bit:%vreg38,%vreg32,%vreg37
404B		  * %vreg39<def> = ADD %vreg38<kill>, %vreg34<kill>; GR32Bit:%vreg39,%vreg38,%vreg34
404B		  * %vreg40<def> = ADD %vreg39<kill>, %vreg36<kill>; GR32Bit:%vreg40,%vreg39,%vreg36
404B		  * %vreg41<def> = MUL %vreg40<kill>, %vreg29<kill>; GR32Bit:%vreg41,%vreg40,%vreg29
404B		  * %t5<def> = ADD %vreg28<kill>, %vreg41<kill>; GR32Bit:%vreg28,%vreg41
404B		  * END 0
404B		  * %zero<def> = ADDI %zero, 0
404B		  * %zero<def> = ADDI %zero, 0
580B		%t4<def> = ADD %t5, %zero
580B		  * %vreg44<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg44
580B		  * %vreg45<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg45
580B		  * %vreg46<def> = SRLI %vreg45<kill>, 12; GR32Bit:%vreg46,%vreg45
580B		  * %vreg47<def> = ADD %vreg44<kill>, %vreg46<kill>; GR32Bit:%vreg47,%vreg44,%vreg46
580B		  * %vreg48<def> = ADDI %zero, 16; GR32Bit:%vreg48
580B		  * %vreg49<def> = SRLI %t5, 22; GR32Bit:%vreg49
580B		  * %vreg50<def> = SRLI %t5, 12; GR32Bit:%vreg50
580B		  * %vreg51<def> = ANDI %vreg50<kill>, 15; GR32Bit:%vreg51,%vreg50
580B		  * %vreg52<def> = SRLI %t5, 6; GR32Bit:%vreg52
580B		  * %vreg53<def> = ANDI %vreg52<kill>, 63; GR32Bit:%vreg53,%vreg52
580B		  * %vreg54<def> = ADDI %zero, 832; GR32Bit:%vreg54
580B		  * %vreg55<def> = MUL %vreg49<kill>, %vreg54<kill>; GR32Bit:%vreg55,%vreg49,%vreg54
580B		  * %vreg56<def> = ADDI %zero, 52; GR32Bit:%vreg56
580B		  * %vreg57<def> = MUL %vreg51<kill>, %vreg56<kill>; GR32Bit:%vreg57,%vreg51,%vreg56
580B		  * %vreg58<def> = ADD %vreg57<kill>, %vreg53<kill>; GR32Bit:%vreg58,%vreg57,%vreg53
580B		  * %vreg59<def> = ADD %vreg58<kill>, %vreg55<kill>; GR32Bit:%vreg59,%vreg58,%vreg55
580B		  * %vreg60<def> = MUL %vreg59<kill>, %vreg48<kill>; GR32Bit:%vreg60,%vreg59,%vreg48
580B		  * %t5<def> = ADD %vreg47<kill>, %vreg60<kill>; GR32Bit:%vreg47,%vreg60
580B		  * END 0
580B		  * %zero<def> = ADDI %zero, 0
580B		  * %zero<def> = ADDI %zero, 0
756B		%t4<def> = ADD %t5, %zero
756B		  * %vreg63<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg63
756B		  * %vreg64<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg64
756B		  * %vreg65<def> = SRLI %vreg64<kill>, 12; GR32Bit:%vreg65,%vreg64
756B		  * %vreg66<def> = ADD %vreg63<kill>, %vreg65<kill>; GR32Bit:%vreg66,%vreg63,%vreg65
756B		  * %vreg67<def> = ADDI %zero, 16; GR32Bit:%vreg67
756B		  * %vreg68<def> = SRLI %t5, 22; GR32Bit:%vreg68
756B		  * %vreg69<def> = SRLI %t5, 12; GR32Bit:%vreg69
756B		  * %vreg70<def> = ANDI %vreg69<kill>, 15; GR32Bit:%vreg70,%vreg69
756B		  * %vreg71<def> = SRLI %t5, 6; GR32Bit:%vreg71
756B		  * %vreg72<def> = ANDI %vreg71<kill>, 63; GR32Bit:%vreg72,%vreg71
756B		  * %vreg73<def> = ADDI %zero, 832; GR32Bit:%vreg73
756B		  * %vreg74<def> = MUL %vreg68<kill>, %vreg73<kill>; GR32Bit:%vreg74,%vreg68,%vreg73
756B		  * %vreg75<def> = ADDI %zero, 52; GR32Bit:%vreg75
756B		  * %vreg76<def> = MUL %vreg70<kill>, %vreg75<kill>; GR32Bit:%vreg76,%vreg70,%vreg75
756B		  * %vreg77<def> = ADD %vreg76<kill>, %vreg72<kill>; GR32Bit:%vreg77,%vreg76,%vreg72
756B		  * %vreg78<def> = ADD %vreg77<kill>, %vreg74<kill>; GR32Bit:%vreg78,%vreg77,%vreg74
756B		  * %vreg79<def> = MUL %vreg78<kill>, %vreg67<kill>; GR32Bit:%vreg79,%vreg78,%vreg67
756B		  * %t5<def> = ADD %vreg66<kill>, %vreg79<kill>; GR32Bit:%vreg66,%vreg79
756B		  * END 0
756B		  * %zero<def> = ADDI %zero, 0
756B		  * %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 16
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t0<def> = ADDI %t5, <fi#0>
> %t1<def> = ADDI %t5, <fi#1>
> %ra<def> = COPY %ra
Deleting identity copy.
> SW %ra, %t1, 0; mem:ST4[%2]
> %ft1<def> = FLW %t1<kill>, 0; mem:LD4[%3]
> FSW %ft1<kill>, %t0<kill>, 0; mem:ST4[%1]
> %sp<def> = COPY %sp
Deleting identity copy.
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 16
> %t2<def> = SRLI %sp, 22
> %fp<def> = SRLI %sp, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %sp, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t0<def> = ADD %t1<kill>, %t0<kill>
> %ft1<def> = FLW %t5, 0
> FSW %ft1<kill>, %t0<kill>, 0
> %t0<def> = LW %t5, <fi#-1>
> WRITECM %sp, %t0<kill>, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 16
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 16
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 16
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
********** EMITTING LIVE DEBUG VARIABLES **********
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: data_init4
current state of mf:# Machine code for function data_init4: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %ra in %vreg0, %sp in %vreg80

BB#0: derived from LLVM BB %data_init4.entry
    Live Ins: %ra %sp
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 16
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t0<def> = ADDI %t5, <fi#0>
	  * %t1<def> = ADDI %t5, <fi#1>
	  * SW %ra, %t1, 0; mem:ST4[%2]
	  * %ft1<def> = FLW %t1<kill>, 0; mem:LD4[%3]
	  * FSW %ft1<kill>, %t0<kill>, 0; mem:ST4[%1]
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 16
	  * %t2<def> = SRLI %sp, 22
	  * %fp<def> = SRLI %sp, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %sp, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t0<def> = ADD %t1<kill>, %t0<kill>
	  * %ft1<def> = FLW %t5, 0
	  * FSW %ft1<kill>, %t0<kill>, 0
	  * %t0<def> = LW %t5, <fi#-1>
	  * WRITECM %sp, %t0<kill>, 0
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 16
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 16
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 16
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0

# End machine code for function data_init4.

lowering frame index for func data_init4:0 TO VAL:0
lowering frame index for func data_init4:1 TO VAL:4
lowering frame index for func data_init4:-1 TO VAL:8
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:%1]
CGP: Found      local addrmode: [Base:@redefine_out_array + 4*%4]
CGP: Found      local addrmode: [Base:%1]
CGP: Found      local addrmode: [Base:%1]
Computing probabilities for redefine_start21redefine_start2.return
Computing probabilities for redefine_start21redefine_start2.for.inc
Computing probabilities for redefine_start21redefine_start2.newName01



=== redefine_start21
arg match found with argIndex:-1
Argument does not have assigned frame index!
The value is an argument for which I am here to get arg frame index as:0
whats the index?-1
visiting load instruction   %3 = load float* %2, !Sync !8
I was here to add float* %2
in regarg match found with argIndex:-2
Argument does not have assigned frame index!
The value is an argument for which I am here to get arg frame index as:0
whats the index?-2
with I type floatand sd value :0x27f1440: i32 = FrameIndex<-2>
new load?0x27f1040: f32,ch = load 0x27d1e18, 0x27f1440, 0x27f3e20<LD4[%2]>
dag after load is dealt with?SelectionDAG has 12 nodes:
    0x27d1e18: <multiple use>
    0x27f0e40: i32 = Register %vreg0

  0x27f1a40: i32,ch = CopyFromReg 0x27d1e18, 0x27f0e40

  0x27f1140: i32 = FrameIndex<-1>

  0x27f3e20: i32 = undef

    0x27d1e18: <multiple use>
    0x27f1140: <multiple use>
    0x27f3e20: <multiple use>
  0x27f0c40: i32,ch = load 0x27d1e18, 0x27f1140, 0x27f3e20<LD4[FixedStack-1]>

  0x27f1440: i32 = FrameIndex<-2>

    0x27d1e18: <multiple use>
    0x27f1440: <multiple use>
    0x27f3e20: <multiple use>
  0x27f1340: i32,ch = load 0x27d1e18, 0x27f1440, 0x27f3e20<LD4[FixedStack-2]>

    0x27d1e18: <multiple use>
    0x27f4120: i32 = Register %vreg1

    0x27f1140: <multiple use>
  0x27f1640: ch = CopyToReg 0x27d1e18, 0x27f4120, 0x27f1140

  0x27f4220: i32 = Constant<0>

    0x27d1e18: <multiple use>
    0x27f1440: <multiple use>
    0x27f3e20: <multiple use>
  0x27f1040: f32,ch = load 0x27d1e18, 0x27f1440, 0x27f3e20<LD4[%2]>

  0x27d1e18: ch = EntryToken


visiting load instruction   %4 = load i32* %1, align 4
with I type i32and sd value :0x27f1140: i32 = FrameIndex<-1>
new load?0x27f0c40: i32,ch = load 0x27d1e18, 0x27f1140, 0x27f3e20<LD4[%1]>
dag after load is dealt with?SelectionDAG has 12 nodes:
    0x27d1e18: <multiple use>
    0x27f0e40: i32 = Register %vreg0

  0x27f1a40: i32,ch = CopyFromReg 0x27d1e18, 0x27f0e40

  0x27f1140: i32 = FrameIndex<-1>

  0x27f3e20: i32 = undef [ORD=13]

    0x27d1e18: <multiple use>
    0x27f1140: <multiple use>
    0x27f3e20: <multiple use>
  0x27f0c40: i32,ch = load 0x27d1e18, 0x27f1140, 0x27f3e20<LD4[%1]>

  0x27f1440: i32 = FrameIndex<-2> [ORD=13]

    0x27d1e18: <multiple use>
    0x27f1440: <multiple use>
    0x27f3e20: <multiple use>
  0x27f1340: i32,ch = load 0x27d1e18, 0x27f1440, 0x27f3e20<LD4[FixedStack-2]>

    0x27d1e18: <multiple use>
    0x27f4120: i32 = Register %vreg1

    0x27f1140: <multiple use>
  0x27f1640: ch = CopyToReg 0x27d1e18, 0x27f4120, 0x27f1140

  0x27f4220: i32 = Constant<0>

    0x27d1e18: <multiple use>
    0x27f1440: <multiple use>
    0x27f3e20: <multiple use>
  0x27f1040: f32,ch = load 0x27d1e18, 0x27f1440, 0x27f3e20<LD4[%2]> [ORD=13]

  0x27d1e18: ch = EntryToken [ORD=13]


I was here to add @redefine_out_array = common global [25 x float] zeroinitializer, align 4
store visit is after?  store float %3, float* %5, align 4
whats in dag after store?SelectionDAG has 17 nodes:
  0x27d1e18: ch = EntryToken [ORD=13]

    0x27d1e18: <multiple use>
    0x27f0e40: i32 = Register %vreg0

  0x27f1a40: i32,ch = CopyFromReg 0x27d1e18, 0x27f0e40

  0x27f1140: i32 = FrameIndex<-1> [ORD=14]

  0x27f3e20: i32 = undef [ORD=13]

  0x27f1440: i32 = FrameIndex<-2> [ORD=13]

    0x27d1e18: <multiple use>
    0x27f1440: <multiple use>
    0x27f3e20: <multiple use>
  0x27f1340: i32,ch = load 0x27d1e18, 0x27f1440, 0x27f3e20<LD4[FixedStack-2]>

    0x27d1e18: <multiple use>
    0x27f4120: i32 = Register %vreg1

    0x27f1140: <multiple use>
  0x27f1640: ch = CopyToReg 0x27d1e18, 0x27f4120, 0x27f1140

  0x27f4220: i32 = Constant<0>

    0x27d1e18: <multiple use>
      0x27d1e18: <multiple use>
      0x27f1440: <multiple use>
      0x27f3e20: <multiple use>
    0x27f1040: f32,ch = load 0x27d1e18, 0x27f1440, 0x27f3e20<LD4[%2]> [ORD=13]

      0x27f1940: i32 = GlobalAddress<[25 x float]* @redefine_out_array> 0 [ORD=15]

          0x27d1e18: <multiple use>
          0x27f1140: <multiple use>
          0x27f3e20: <multiple use>
        0x27f0c40: i32,ch = load 0x27d1e18, 0x27f1140, 0x27f3e20<LD4[%1]> [ORD=14]

        0x27f1740: i32 = Constant<2> [ORD=15]

      0x27f1240: i32 = shl 0x27f0c40, 0x27f1740 [ORD=15]

    0x27f1540: i32 = add 0x27f1940, 0x27f1240 [ORD=15]

    0x27f3e20: <multiple use>
  0x27f0f40: ch = store 0x27d1e18, 0x27f1040, 0x27f1540, 0x27f3e20<ST4[%5]> [ORD=16]


Initial selection DAG: BB#0 'redefine_start21:redefine_start21redefine_start2.newName01'
SelectionDAG has 18 nodes:
  0x27d1e18: ch = EntryToken [ORD=13]

    0x27d1e18: <multiple use>
    0x27f0e40: i32 = Register %vreg0

  0x27f1a40: i32,ch = CopyFromReg 0x27d1e18, 0x27f0e40

  0x27f1140: i32 = FrameIndex<-1> [ORD=14]

  0x27f3e20: i32 = undef [ORD=13]

  0x27f1440: i32 = FrameIndex<-2> [ORD=13]

    0x27d1e18: <multiple use>
    0x27f1440: <multiple use>
    0x27f3e20: <multiple use>
  0x27f1340: i32,ch = load 0x27d1e18, 0x27f1440, 0x27f3e20<LD4[FixedStack-2]>

  0x27f4220: i32 = Constant<0>

      0x27d1e18: <multiple use>
      0x27f4120: i32 = Register %vreg1

      0x27f1140: <multiple use>
    0x27f1640: ch = CopyToReg 0x27d1e18, 0x27f4120, 0x27f1140

      0x27d1e18: <multiple use>
        0x27d1e18: <multiple use>
        0x27f1440: <multiple use>
        0x27f3e20: <multiple use>
      0x27f1040: f32,ch = load 0x27d1e18, 0x27f1440, 0x27f3e20<LD4[%2]> [ORD=13]

        0x27f1940: i32 = GlobalAddress<[25 x float]* @redefine_out_array> 0 [ORD=15]

            0x27d1e18: <multiple use>
            0x27f1140: <multiple use>
            0x27f3e20: <multiple use>
          0x27f0c40: i32,ch = load 0x27d1e18, 0x27f1140, 0x27f3e20<LD4[%1]> [ORD=14]

          0x27f1740: i32 = Constant<2> [ORD=15]

        0x27f1240: i32 = shl 0x27f0c40, 0x27f1740 [ORD=15]

      0x27f1540: i32 = add 0x27f1940, 0x27f1240 [ORD=15]

      0x27f3e20: <multiple use>
    0x27f0f40: ch = store 0x27d1e18, 0x27f1040, 0x27f1540, 0x27f3e20<ST4[%5]> [ORD=16]

  0x27f3d20: ch = TokenFactor 0x27f1640, 0x27f0f40



Replacing.1 0x27f1040: f32,ch = load 0x27d1e18, 0x27f1440, 0x27f3e20<LD4[%2](align=8)> [ORD=13]

With: 0x27f1040: f32,ch = load 0x27d1e18, 0x27f1440, 0x27f3e20<LD4[%2](align=8)> [ORD=13]
 and 1 other values

Replacing.1 0x27f0c40: i32,ch = load 0x27d1e18, 0x27f1140, 0x27f3e20<LD4[%1](align=16)> [ORD=14]

With: 0x27f0c40: i32,ch = load 0x27d1e18, 0x27f1140, 0x27f3e20<LD4[%1](align=16)> [ORD=14]
 and 1 other values
Optimized lowered selection DAG: BB#0 'redefine_start21:redefine_start21redefine_start2.newName01'
SelectionDAG has 14 nodes:
  0x27d1e18: ch = EntryToken [ORD=13]

  0x27f1140: i32 = FrameIndex<-1> [ORD=14]

  0x27f3e20: i32 = undef [ORD=13]

      0x27d1e18: <multiple use>
      0x27f4120: i32 = Register %vreg1

      0x27f1140: <multiple use>
    0x27f1640: ch = CopyToReg 0x27d1e18, 0x27f4120, 0x27f1140

      0x27d1e18: <multiple use>
        0x27d1e18: <multiple use>
        0x27f1440: i32 = FrameIndex<-2> [ORD=13]

        0x27f3e20: <multiple use>
      0x27f1040: f32,ch = load 0x27d1e18, 0x27f1440, 0x27f3e20<LD4[%2](align=8)> [ORD=13]

        0x27f1940: i32 = GlobalAddress<[25 x float]* @redefine_out_array> 0 [ORD=15]

            0x27d1e18: <multiple use>
            0x27f1140: <multiple use>
            0x27f3e20: <multiple use>
          0x27f0c40: i32,ch = load 0x27d1e18, 0x27f1140, 0x27f3e20<LD4[%1](align=16)> [ORD=14]

          0x27f1740: i32 = Constant<2> [ORD=15]

        0x27f1240: i32 = shl 0x27f0c40, 0x27f1740 [ORD=15]

      0x27f1540: i32 = add 0x27f1940, 0x27f1240 [ORD=15]

      0x27f3e20: <multiple use>
    0x27f0f40: ch = store 0x27d1e18, 0x27f1040, 0x27f1540, 0x27f3e20<ST4[%5]> [ORD=16]

  0x27f3d20: ch = TokenFactor 0x27f1640, 0x27f0f40


Legally typed node: 0x27f1740: i32 = Constant<2> [ORD=15] [ID=0]

Legally typed node: 0x27f1940: i32 = GlobalAddress<[25 x float]* @redefine_out_array> 0 [ORD=15] [ID=0]

Legally typed node: 0x27f4120: i32 = Register %vreg1 [ID=0]

Legally typed node: 0x27f1440: i32 = FrameIndex<-2> [ORD=13] [ID=0]

Legally typed node: 0x27f3e20: i32 = undef [ORD=13] [ID=0]

Legally typed node: 0x27f1140: i32 = FrameIndex<-1> [ORD=14] [ID=0]

Legally typed node: 0x27d1e18: ch = EntryToken [ORD=13] [ID=0]

Legally typed node: 0x27f0c40: i32,ch = load 0x27d1e18, 0x27f1140, 0x27f3e20<LD4[%1](align=16)> [ORD=14] [ID=0]

Legally typed node: 0x27f1240: i32 = shl 0x27f0c40, 0x27f1740 [ORD=15] [ID=0]

Legally typed node: 0x27f1540: i32 = add 0x27f1940, 0x27f1240 [ORD=15] [ID=0]

Legally typed node: 0x27f1640: ch = CopyToReg 0x27d1e18, 0x27f4120, 0x27f1140 [ID=0]

Legally typed node: 0x27f1040: f32,ch = load 0x27d1e18, 0x27f1440, 0x27f3e20<LD4[%2](align=8)> [ORD=13] [ID=0]

Legally typed node: 0x27f0f40: ch = store 0x27d1e18, 0x27f1040, 0x27f1540, 0x27f3e20<ST4[%5]> [ORD=16] [ID=0]

Legally typed node: 0x27f3d20: ch = TokenFactor 0x27f1640, 0x27f0f40 [ID=0]

Legally typed node: 0x7fff149b9a10: ch = handlenode 0x27f3d20 [ID=0]

Type-legalized selection DAG: BB#0 'redefine_start21:redefine_start21redefine_start2.newName01'
SelectionDAG has 14 nodes:
  0x27d1e18: ch = EntryToken [ORD=13] [ID=-3]

  0x27f1140: i32 = FrameIndex<-1> [ORD=14] [ID=-3]

  0x27f3e20: i32 = undef [ORD=13] [ID=-3]

      0x27d1e18: <multiple use>
      0x27f4120: i32 = Register %vreg1 [ID=-3]

      0x27f1140: <multiple use>
    0x27f1640: ch = CopyToReg 0x27d1e18, 0x27f4120, 0x27f1140 [ID=-3]

      0x27d1e18: <multiple use>
        0x27d1e18: <multiple use>
        0x27f1440: i32 = FrameIndex<-2> [ORD=13] [ID=-3]

        0x27f3e20: <multiple use>
      0x27f1040: f32,ch = load 0x27d1e18, 0x27f1440, 0x27f3e20<LD4[%2](align=8)> [ORD=13] [ID=-3]

        0x27f1940: i32 = GlobalAddress<[25 x float]* @redefine_out_array> 0 [ORD=15] [ID=-3]

            0x27d1e18: <multiple use>
            0x27f1140: <multiple use>
            0x27f3e20: <multiple use>
          0x27f0c40: i32,ch = load 0x27d1e18, 0x27f1140, 0x27f3e20<LD4[%1](align=16)> [ORD=14] [ID=-3]

          0x27f1740: i32 = Constant<2> [ORD=15] [ID=-3]

        0x27f1240: i32 = shl 0x27f0c40, 0x27f1740 [ORD=15] [ID=-3]

      0x27f1540: i32 = add 0x27f1940, 0x27f1240 [ORD=15] [ID=-3]

      0x27f3e20: <multiple use>
    0x27f0f40: ch = store 0x27d1e18, 0x27f1040, 0x27f1540, 0x27f3e20<ST4[%5]> [ORD=16] [ID=-3]

  0x27f3d20: ch = TokenFactor 0x27f1640, 0x27f0f40 [ID=-3]


Legalized selection DAG: BB#0 'redefine_start21:redefine_start21redefine_start2.newName01'
SelectionDAG has 18 nodes:
  0x27d1e18: ch = EntryToken [ORD=13] [ID=0]

  0x27f1140: i32 = FrameIndex<-1> [ORD=14] [ID=1]

  0x27f3e20: i32 = undef [ORD=13] [ID=2]

      0x27d1e18: <multiple use>
      0x27f4120: i32 = Register %vreg1 [ID=4]

      0x27f1140: <multiple use>
    0x27f1640: ch = CopyToReg 0x27d1e18, 0x27f4120, 0x27f1140 [ID=9]

      0x27d1e18: <multiple use>
        0x27d1e18: <multiple use>
        0x27f1440: i32 = FrameIndex<-2> [ORD=13] [ID=3]

        0x27f3e20: <multiple use>
      0x27f1040: f32,ch = load 0x27d1e18, 0x27f1440, 0x27f3e20<LD4[%2](align=8)> [ORD=13] [ID=8]

            0x27f0e40: i32 = TargetGlobalAddress<[25 x float]* @redefine_out_array> 0 [TF=2]

          0x27f1340: i32 = REDEFINEISD::Hi 0x27f0e40

            0x27f1a40: i32 = TargetGlobalAddress<[25 x float]* @redefine_out_array> 0 [TF=3]

          0x27f4220: i32 = REDEFINEISD::Lo 0x27f1a40

        0x27f0d40: i32 = add 0x27f1340, 0x27f4220

            0x27d1e18: <multiple use>
            0x27f1140: <multiple use>
            0x27f3e20: <multiple use>
          0x27f0c40: i32,ch = load 0x27d1e18, 0x27f1140, 0x27f3e20<LD4[%1](align=16)> [ORD=14] [ID=7]

          0x27f1740: i32 = Constant<2> [ORD=15] [ID=6]

        0x27f1240: i32 = shl 0x27f0c40, 0x27f1740 [ORD=15] [ID=10]

      0x27f1540: i32 = add 0x27f0d40, 0x27f1240 [ORD=15] [ID=11]

      0x27f3e20: <multiple use>
    0x27f0f40: ch = store 0x27d1e18, 0x27f1040, 0x27f1540, 0x27f3e20<ST4[%5]> [ORD=16] [ID=12]

  0x27f3d20: ch = TokenFactor 0x27f1640, 0x27f0f40 [ID=13]


Optimized legalized selection DAG: BB#0 'redefine_start21:redefine_start21redefine_start2.newName01'
SelectionDAG has 18 nodes:
  0x27d1e18: ch = EntryToken [ORD=13] [ID=0]

  0x27f1140: i32 = FrameIndex<-1> [ORD=14] [ID=1]

  0x27f3e20: i32 = undef [ORD=13] [ID=2]

      0x27d1e18: <multiple use>
      0x27f4120: i32 = Register %vreg1 [ID=4]

      0x27f1140: <multiple use>
    0x27f1640: ch = CopyToReg 0x27d1e18, 0x27f4120, 0x27f1140 [ID=9]

      0x27d1e18: <multiple use>
        0x27d1e18: <multiple use>
        0x27f1440: i32 = FrameIndex<-2> [ORD=13] [ID=3]

        0x27f3e20: <multiple use>
      0x27f1040: f32,ch = load 0x27d1e18, 0x27f1440, 0x27f3e20<LD4[%2](align=8)> [ORD=13] [ID=8]

            0x27f0e40: i32 = TargetGlobalAddress<[25 x float]* @redefine_out_array> 0 [TF=2]

          0x27f1340: i32 = REDEFINEISD::Hi 0x27f0e40

            0x27f1a40: i32 = TargetGlobalAddress<[25 x float]* @redefine_out_array> 0 [TF=3]

          0x27f4220: i32 = REDEFINEISD::Lo 0x27f1a40

        0x27f0d40: i32 = add 0x27f1340, 0x27f4220

            0x27d1e18: <multiple use>
            0x27f1140: <multiple use>
            0x27f3e20: <multiple use>
          0x27f0c40: i32,ch = load 0x27d1e18, 0x27f1140, 0x27f3e20<LD4[%1](align=16)> [ORD=14] [ID=7]

          0x27f1740: i32 = Constant<2> [ORD=15] [ID=6]

        0x27f1240: i32 = shl 0x27f0c40, 0x27f1740 [ORD=15] [ID=10]

      0x27f1540: i32 = add 0x27f0d40, 0x27f1240 [ORD=15] [ID=11]

      0x27f3e20: <multiple use>
    0x27f0f40: ch = store 0x27d1e18, 0x27f1040, 0x27f1540, 0x27f3e20<ST4[%5]> [ORD=16] [ID=12]

  0x27f3d20: ch = TokenFactor 0x27f1640, 0x27f0f40 [ID=13]


===== Instruction selection begins: BB#0 'redefine_start21redefine_start2.newName01'
=> 0x27f3d20: ch = TokenFactor 0x27f1640, 0x27f0f40

ISEL: Starting pattern match on root node: 0x27f0f40: ch = store 0x27d1e18, 0x27f1040, 0x27f1540, 0x27f3e20<ST4[%5]> [ORD=16] [ID=16]

  Initial Opcode index to 178
  Skipped scope entry (due to false predicate) at index 183, continuing at 243
  Morphed node: 0x27f0f40: ch = FSW 0x27f1040, 0x27f1540, 0x27f1940, 0x27d1e18<Mem:ST4[%5]> [ORD=16]

ISEL: Match complete!
=> 0x27f0f40: ch = FSW 0x27f1040, 0x27f1540, 0x27f1940, 0x27d1e18<Mem:ST4[%5]> [ORD=16]

ISEL: Starting pattern match on root node: 0x27f1540: i32 = add 0x27f0d40, 0x27f1240 [ORD=15] [ID=15]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x27f1540: i32 = ADD 0x27f1240, 0x27f0d40 [ORD=15]

ISEL: Match complete!
=> 0x27f1540: i32 = ADD 0x27f1240, 0x27f0d40 [ORD=15]

ISEL: Starting pattern match on root node: 0x27f0d40: i32 = add 0x27f1340, 0x27f4220 [ID=14]

  Initial Opcode index to 493
  Match failed at index 499
  Continuing at 516
  Morphed node: 0x27f0d40: i32 = ADD 0x27f4220, 0x27f1340

ISEL: Match complete!
=> 0x27f0d40: i32 = ADD 0x27f4220, 0x27f1340

ISEL: Starting pattern match on root node: 0x27f1240: i32 = shl 0x27f0c40, 0x27f1740 [ORD=15] [ID=13]

  Initial Opcode index to 268
  Match failed at index 273
  Continuing at 294
  Morphed node: 0x27f1240: i32 = SLLI 0x27f0c40, 0x27f1840 [ORD=15]

ISEL: Match complete!
=> 0x27f1240: i32 = SLLI 0x27f0c40, 0x27f1840 [ORD=15]

ISEL: Starting pattern match on root node: 0x27f4220: i32 = REDEFINEISD::Lo 0x27f1a40 [ID=12]

  Initial Opcode index to 1204
  Morphed node: 0x27f4220: i32 = ADDI 0x27f1740, 0x27f1a40

ISEL: Match complete!
=> 0x27f4220: i32 = ADDI 0x27f1740, 0x27f1a40

ISEL: Starting pattern match on root node: 0x27f1340: i32 = REDEFINEISD::Hi 0x27f0e40 [ID=11]

  Initial Opcode index to 1186
  Morphed node: 0x27f1340: i32 = LUI 0x27f0e40

ISEL: Match complete!
=> 0x27f1340: i32 = LUI 0x27f0e40

=> 0x27f1640: ch = CopyToReg 0x27d1e18, 0x27f4120, 0x27f1140

ISEL: Starting pattern match on root node: 0x27f1040: f32,ch = load 0x27d1e18, 0x27f1440, 0x27f3e20<LD4[%2](align=8)> [ORD=13] [ID=9]

  Initial Opcode index to 5
  TypeSwitch[f32] from 10 to 159
  Morphed node: 0x27f1040: f32,ch = FLW 0x27f1440, 0x27f1940, 0x27d1e18<Mem:LD4[%2](align=8)> [ORD=13]

ISEL: Match complete!
=> 0x27f1040: f32,ch = FLW 0x27f1440, 0x27f1940, 0x27d1e18<Mem:LD4[%2](align=8)> [ORD=13]

ISEL: Starting pattern match on root node: 0x27f0c40: i32,ch = load 0x27d1e18, 0x27f1140, 0x27f3e20<LD4[%1](align=16)> [ORD=14] [ID=8]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x27f0c40: i32,ch = LW 0x27f1140, 0x27f1940, 0x27d1e18<Mem:LD4[%1](align=16)> [ORD=14]

ISEL: Match complete!
=> 0x27f0c40: i32,ch = LW 0x27f1140, 0x27f1940, 0x27d1e18<Mem:LD4[%1](align=16)> [ORD=14]

=> 0x27f1a40: i32 = TargetGlobalAddress<[25 x float]* @redefine_out_array> 0 [TF=3]

=> 0x27f0e40: i32 = TargetGlobalAddress<[25 x float]* @redefine_out_array> 0 [TF=2]

=> 0x27f4120: i32 = Register %vreg1

=> 0x27d1e18: ch = EntryToken [ORD=13]

===== Instruction selection ends:
Selected selection DAG: BB#0 'redefine_start21:redefine_start21redefine_start2.newName01'
SelectionDAG has 22 nodes:
  0x27d1e18: ch = EntryToken [ORD=13]

  0x27f1940: i32 = TargetConstant<0>

  0x27f3e20: i32 = Register %t5

    0x27f3e20: <multiple use>
    0x27f4020: i32 = TargetFrameIndex<-1>

  0x27f4320: i32 = ADDI 0x27f3e20, 0x27f4020 [ORD=14]

      0x27d1e18: <multiple use>
      0x27f4120: i32 = Register %vreg1

      0x27f4320: <multiple use>
    0x27f1640: ch = CopyToReg 0x27d1e18, 0x27f4120, 0x27f4320

          0x27f3e20: <multiple use>
          0x27f3f20: i32 = TargetFrameIndex<-2>

        0x27f1440: i32 = ADDI 0x27f3e20, 0x27f3f20 [ORD=13]

        0x27f1940: <multiple use>
        0x27d1e18: <multiple use>
      0x27f1040: f32,ch = FLW 0x27f1440, 0x27f1940, 0x27d1e18<Mem:LD4[%2](align=8)> [ORD=13]

            0x27f4320: <multiple use>
            0x27f1940: <multiple use>
            0x27d1e18: <multiple use>
          0x27f0c40: i32,ch = LW 0x27f4320, 0x27f1940, 0x27d1e18<Mem:LD4[%1](align=16)> [ORD=14]

          0x27f1840: i32 = TargetConstant<2>

        0x27f1240: i32 = SLLI 0x27f0c40, 0x27f1840 [ORD=15]

            0x27f1740: i32 = Register %zero

            0x27f1a40: i32 = TargetGlobalAddress<[25 x float]* @redefine_out_array> 0 [TF=3]

          0x27f4220: i32 = ADDI 0x27f1740, 0x27f1a40

            0x27f0e40: i32 = TargetGlobalAddress<[25 x float]* @redefine_out_array> 0 [TF=2]

          0x27f1340: i32 = LUI 0x27f0e40

        0x27f0d40: i32 = ADD 0x27f4220, 0x27f1340

      0x27f1540: i32 = ADD 0x27f1240, 0x27f0d40 [ORD=15]

      0x27f1940: <multiple use>
      0x27d1e18: <multiple use>
    0x27f0f40: ch = FSW 0x27f1040, 0x27f1540, 0x27f1940, 0x27d1e18<Mem:ST4[%5]> [ORD=16]

  0x27f3d20: ch = TokenFactor 0x27f1640, 0x27f0f40


********** List Scheduling BB#0 'redefine_start21redefine_start2.newName01' **********
SU(0): 0x27f3d20: ch = TokenFactor 0x27f1640, 0x27f0f40 [ID=0]

  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
   ch  SU(11): Latency=1
   ch  SU(1): Latency=1

SU(1): 0x27f0f40: ch = FSW 0x27f1040, 0x27f1540, 0x27f1940, 0x27d1e18<Mem:ST4[%5]> [ORD=16] [ID=1]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
   val SU(9): Latency=1
   val SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x27f1540: i32 = ADD 0x27f1240, 0x27f0d40 [ORD=15] [ID=2]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 3
  Height             : 2
  Predecessors:
   val SU(6): Latency=1
   val SU(3): Latency=1
  Successors:
   val SU(1): Latency=1

SU(3): 0x27f0d40: i32 = ADD 0x27f4220, 0x27f1340 [ID=3]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(5): Latency=1
   val SU(4): Latency=1
  Successors:
   val SU(2): Latency=1

SU(4): 0x27f1340: i32 = LUI 0x27f0e40 [ID=4]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(3): Latency=1

SU(5): 0x27f4220: i32 = ADDI 0x27f1740, 0x27f1a40 [ID=5]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(3): Latency=1

SU(6): 0x27f1240: i32 = SLLI 0x27f0c40, 0x27f1840 [ORD=15] [ID=6]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 3
  Predecessors:
   val SU(7): Latency=1
  Successors:
   val SU(2): Latency=1

SU(7): 0x27f0c40: i32,ch = LW 0x27f4320, 0x27f1940, 0x27d1e18<Mem:LD4[%1](align=16)> [ORD=14] [ID=7]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
   val SU(8): Latency=1
  Successors:
   val SU(6): Latency=1

SU(8): 0x27f4320: i32 = ADDI 0x27f3e20, 0x27f4020 [ORD=14] [ID=8]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
   val SU(7): Latency=1
   val SU(11): Latency=1

SU(9): 0x27f1040: f32,ch = FLW 0x27f1440, 0x27f1940, 0x27d1e18<Mem:LD4[%2](align=8)> [ORD=13] [ID=9]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
   val SU(10): Latency=1
  Successors:
   val SU(1): Latency=1

SU(10): 0x27f1440: i32 = ADDI 0x27f3e20, 0x27f3f20 [ORD=13] [ID=10]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(9): Latency=1

SU(11): 0x27f1640: ch = CopyToReg 0x27d1e18, 0x27f4120, 0x27f4320 [ID=11]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
   val SU(8): Latency=1
  Successors:
   ch  SU(0): Latency=1


Examining Available:
Height 0: SU(0): 0x27f3d20: ch = TokenFactor 0x27f1640, 0x27f0f40 [ID=0]


*** Scheduling [0]: SU(0): 0x27f3d20: ch = TokenFactor 0x27f1640, 0x27f0f40 [ID=0]


Examining Available:
Height 1: SU(11): 0x27f1640: ch = CopyToReg 0x27d1e18, 0x27f4120, 0x27f4320 [ID=11]

Height 1: SU(1): 0x27f0f40: ch = FSW 0x27f1040, 0x27f1540, 0x27f1940, 0x27d1e18<Mem:ST4[%5]> [ORD=16] [ID=1]


*** Scheduling [1]: SU(11): 0x27f1640: ch = CopyToReg 0x27d1e18, 0x27f4120, 0x27f4320 [ID=11]


Examining Available:
Height 1: SU(1): 0x27f0f40: ch = FSW 0x27f1040, 0x27f1540, 0x27f1940, 0x27d1e18<Mem:ST4[%5]> [ORD=16] [ID=1]


*** Scheduling [2]: SU(1): 0x27f0f40: ch = FSW 0x27f1040, 0x27f1540, 0x27f1940, 0x27d1e18<Mem:ST4[%5]> [ORD=16] [ID=1]


Examining Available:
Height 3: SU(2): 0x27f1540: i32 = ADD 0x27f1240, 0x27f0d40 [ORD=15] [ID=2]

Height 3: SU(9): 0x27f1040: f32,ch = FLW 0x27f1440, 0x27f1940, 0x27d1e18<Mem:LD4[%2](align=8)> [ORD=13] [ID=9]


*** Scheduling [3]: SU(2): 0x27f1540: i32 = ADD 0x27f1240, 0x27f0d40 [ORD=15] [ID=2]


Examining Available:
Height 4: SU(3): 0x27f0d40: i32 = ADD 0x27f4220, 0x27f1340 [ID=3]

Height 4: SU(6): 0x27f1240: i32 = SLLI 0x27f0c40, 0x27f1840 [ORD=15] [ID=6]

Height 3: SU(9): 0x27f1040: f32,ch = FLW 0x27f1440, 0x27f1940, 0x27d1e18<Mem:LD4[%2](align=8)> [ORD=13] [ID=9]


*** Scheduling [4]: SU(3): 0x27f0d40: i32 = ADD 0x27f4220, 0x27f1340 [ID=3]


Examining Available:
Height 5: SU(5): 0x27f4220: i32 = ADDI 0x27f1740, 0x27f1a40 [ID=5]

Height 5: SU(4): 0x27f1340: i32 = LUI 0x27f0e40 [ID=4]

Height 4: SU(6): 0x27f1240: i32 = SLLI 0x27f0c40, 0x27f1840 [ORD=15] [ID=6]

Height 3: SU(9): 0x27f1040: f32,ch = FLW 0x27f1440, 0x27f1940, 0x27d1e18<Mem:LD4[%2](align=8)> [ORD=13] [ID=9]


*** Scheduling [5]: SU(5): 0x27f4220: i32 = ADDI 0x27f1740, 0x27f1a40 [ID=5]


Examining Available:
Height 5: SU(4): 0x27f1340: i32 = LUI 0x27f0e40 [ID=4]

Height 4: SU(6): 0x27f1240: i32 = SLLI 0x27f0c40, 0x27f1840 [ORD=15] [ID=6]

Height 3: SU(9): 0x27f1040: f32,ch = FLW 0x27f1440, 0x27f1940, 0x27d1e18<Mem:LD4[%2](align=8)> [ORD=13] [ID=9]


*** Scheduling [6]: SU(4): 0x27f1340: i32 = LUI 0x27f0e40 [ID=4]


Examining Available:
Height 4: SU(6): 0x27f1240: i32 = SLLI 0x27f0c40, 0x27f1840 [ORD=15] [ID=6]

Height 3: SU(9): 0x27f1040: f32,ch = FLW 0x27f1440, 0x27f1940, 0x27d1e18<Mem:LD4[%2](align=8)> [ORD=13] [ID=9]


*** Scheduling [7]: SU(6): 0x27f1240: i32 = SLLI 0x27f0c40, 0x27f1840 [ORD=15] [ID=6]


Examining Available:
Height 8: SU(7): 0x27f0c40: i32,ch = LW 0x27f4320, 0x27f1940, 0x27d1e18<Mem:LD4[%1](align=16)> [ORD=14] [ID=7]

Height 3: SU(9): 0x27f1040: f32,ch = FLW 0x27f1440, 0x27f1940, 0x27d1e18<Mem:LD4[%2](align=8)> [ORD=13] [ID=9]


*** Scheduling [8]: SU(7): 0x27f0c40: i32,ch = LW 0x27f4320, 0x27f1940, 0x27d1e18<Mem:LD4[%1](align=16)> [ORD=14] [ID=7]


Examining Available:
Height 9: SU(8): 0x27f4320: i32 = ADDI 0x27f3e20, 0x27f4020 [ORD=14] [ID=8]

Height 3: SU(9): 0x27f1040: f32,ch = FLW 0x27f1440, 0x27f1940, 0x27d1e18<Mem:LD4[%2](align=8)> [ORD=13] [ID=9]


*** Scheduling [9]: SU(8): 0x27f4320: i32 = ADDI 0x27f3e20, 0x27f4020 [ORD=14] [ID=8]


Examining Available:
Height 3: SU(9): 0x27f1040: f32,ch = FLW 0x27f1440, 0x27f1940, 0x27d1e18<Mem:LD4[%2](align=8)> [ORD=13] [ID=9]


*** Scheduling [10]: SU(9): 0x27f1040: f32,ch = FLW 0x27f1440, 0x27f1940, 0x27d1e18<Mem:LD4[%2](align=8)> [ORD=13] [ID=9]


Examining Available:
Height 11: SU(10): 0x27f1440: i32 = ADDI 0x27f3e20, 0x27f3f20 [ORD=13] [ID=10]


*** Scheduling [11]: SU(10): 0x27f1440: i32 = ADDI 0x27f3e20, 0x27f3f20 [ORD=13] [ID=10]

*** Final schedule ***
SU(10): 0x27f1440: i32 = ADDI 0x27f3e20, 0x27f3f20 [ORD=13] [ID=10]

SU(9): 0x27f1040: f32,ch = FLW 0x27f1440, 0x27f1940, 0x27d1e18<Mem:LD4[%2](align=8)> [ORD=13] [ID=9]

SU(8): 0x27f4320: i32 = ADDI 0x27f3e20, 0x27f4020 [ORD=14] [ID=8]

SU(7): 0x27f0c40: i32,ch = LW 0x27f4320, 0x27f1940, 0x27d1e18<Mem:LD4[%1](align=16)> [ORD=14] [ID=7]

SU(6): 0x27f1240: i32 = SLLI 0x27f0c40, 0x27f1840 [ORD=15] [ID=6]

SU(4): 0x27f1340: i32 = LUI 0x27f0e40 [ID=4]

SU(5): 0x27f4220: i32 = ADDI 0x27f1740, 0x27f1a40 [ID=5]

SU(3): 0x27f0d40: i32 = ADD 0x27f4220, 0x27f1340 [ID=3]

SU(2): 0x27f1540: i32 = ADD 0x27f1240, 0x27f0d40 [ORD=15] [ID=2]

SU(1): 0x27f0f40: ch = FSW 0x27f1040, 0x27f1540, 0x27f1940, 0x27d1e18<Mem:ST4[%5]> [ORD=16] [ID=1]

SU(11): 0x27f1640: ch = CopyToReg 0x27d1e18, 0x27f4120, 0x27f4320 [ID=11]

SU(0): 0x27f3d20: ch = TokenFactor 0x27f1640, 0x27f0f40 [ID=0]


Total amount of phi nodes to update: 0
visiting load instruction   %6 = load i32* %1, align 4
with I type i32and sd value :0x27f4020: i32,ch = CopyFromReg 0x27d1e18, 0x27f4320
new load?0x27f1840: i32,ch = load 0x27d1e18, 0x27f4020, 0x27f1740<LD4[%1]>
dag after load is dealt with?SelectionDAG has 7 nodes:
  0x27f3f20: ch = ValueType:i32

  0x27f3e20: i32 = Constant<0>

    0x27d1e18: <multiple use>
      0x27d1e18: <multiple use>
      0x27f4320: i32 = Register %vreg1

    0x27f4020: i32,ch = CopyFromReg 0x27d1e18, 0x27f4320

    0x27f1740: i32 = undef

  0x27f1840: i32,ch = load 0x27d1e18, 0x27f4020, 0x27f1740<LD4[%1]>

  0x27d1e18: ch = EntryToken


I was here to add i32 1
store visit is after?  store i32 %7, i32* %1, align 4
whats in dag after store?SelectionDAG has 10 nodes:
  0x27d1e18: ch = EntryToken [ORD=17]

    0x27d1e18: <multiple use>
    0x27f4320: i32 = Register %vreg1 [ORD=17]

  0x27f4020: i32,ch = CopyFromReg 0x27d1e18, 0x27f4320 [ORD=17]

  0x27f3f20: ch = ValueType:i32

  0x27f3e20: i32 = Constant<0>

  0x27f1740: i32 = undef [ORD=17]

    0x27d1e18: <multiple use>
        0x27d1e18: <multiple use>
        0x27f4020: <multiple use>
        0x27f1740: <multiple use>
      0x27f1840: i32,ch = load 0x27d1e18, 0x27f4020, 0x27f1740<LD4[%1]> [ORD=17]

      0x27f1940: i32 = Constant<1> [ORD=18]

    0x27f3d20: i32 = add 0x27f1840, 0x27f1940 [ORD=18]

    0x27f4020: <multiple use>
    0x27f1740: <multiple use>
  0x27f0f40: ch = store 0x27d1e18, 0x27f3d20, 0x27f4020, 0x27f1740<ST4[%1]> [ORD=19]


Initial selection DAG: BB#1 'redefine_start21:redefine_start21redefine_start2.for.inc'
SelectionDAG has 10 nodes:
  0x27d1e18: ch = EntryToken [ORD=17]

    0x27d1e18: <multiple use>
    0x27f4320: i32 = Register %vreg1 [ORD=17]

  0x27f4020: i32,ch = CopyFromReg 0x27d1e18, 0x27f4320 [ORD=17]

  0x27f3f20: ch = ValueType:i32

  0x27f3e20: i32 = Constant<0>

  0x27f1740: i32 = undef [ORD=17]

    0x27d1e18: <multiple use>
        0x27d1e18: <multiple use>
        0x27f4020: <multiple use>
        0x27f1740: <multiple use>
      0x27f1840: i32,ch = load 0x27d1e18, 0x27f4020, 0x27f1740<LD4[%1]> [ORD=17]

      0x27f1940: i32 = Constant<1> [ORD=18]

    0x27f3d20: i32 = add 0x27f1840, 0x27f1940 [ORD=18]

    0x27f4020: <multiple use>
    0x27f1740: <multiple use>
  0x27f0f40: ch = store 0x27d1e18, 0x27f3d20, 0x27f4020, 0x27f1740<ST4[%1]> [ORD=19]


Optimized lowered selection DAG: BB#1 'redefine_start21:redefine_start21redefine_start2.for.inc'
SelectionDAG has 8 nodes:
  0x27d1e18: ch = EntryToken [ORD=17]

    0x27d1e18: <multiple use>
    0x27f4320: i32 = Register %vreg1 [ORD=17]

  0x27f4020: i32,ch = CopyFromReg 0x27d1e18, 0x27f4320 [ORD=17]

  0x27f1740: i32 = undef [ORD=17]

    0x27d1e18: <multiple use>
        0x27d1e18: <multiple use>
        0x27f4020: <multiple use>
        0x27f1740: <multiple use>
      0x27f1840: i32,ch = load 0x27d1e18, 0x27f4020, 0x27f1740<LD4[%1]> [ORD=17]

      0x27f1940: i32 = Constant<1> [ORD=18]

    0x27f3d20: i32 = add 0x27f1840, 0x27f1940 [ORD=18]

    0x27f4020: <multiple use>
    0x27f1740: <multiple use>
  0x27f0f40: ch = store 0x27d1e18, 0x27f3d20, 0x27f4020, 0x27f1740<ST4[%1]> [ORD=19]


Legally typed node: 0x27f1940: i32 = Constant<1> [ORD=18] [ID=0]

Legally typed node: 0x27f1740: i32 = undef [ORD=17] [ID=0]

Legally typed node: 0x27f4320: i32 = Register %vreg1 [ORD=17] [ID=0]

Legally typed node: 0x27d1e18: ch = EntryToken [ORD=17] [ID=0]

Legally typed node: 0x27f4020: i32,ch = CopyFromReg 0x27d1e18, 0x27f4320 [ORD=17] [ID=0]

Legally typed node: 0x27f1840: i32,ch = load 0x27d1e18, 0x27f4020, 0x27f1740<LD4[%1]> [ORD=17] [ID=0]

Legally typed node: 0x27f3d20: i32 = add 0x27f1840, 0x27f1940 [ORD=18] [ID=0]

Legally typed node: 0x27f0f40: ch = store 0x27d1e18, 0x27f3d20, 0x27f4020, 0x27f1740<ST4[%1]> [ORD=19] [ID=0]

Legally typed node: 0x7fff149b9a10: ch = handlenode 0x27f0f40 [ID=0]

Type-legalized selection DAG: BB#1 'redefine_start21:redefine_start21redefine_start2.for.inc'
SelectionDAG has 8 nodes:
  0x27d1e18: ch = EntryToken [ORD=17] [ID=-3]

    0x27d1e18: <multiple use>
    0x27f4320: i32 = Register %vreg1 [ORD=17] [ID=-3]

  0x27f4020: i32,ch = CopyFromReg 0x27d1e18, 0x27f4320 [ORD=17] [ID=-3]

  0x27f1740: i32 = undef [ORD=17] [ID=-3]

    0x27d1e18: <multiple use>
        0x27d1e18: <multiple use>
        0x27f4020: <multiple use>
        0x27f1740: <multiple use>
      0x27f1840: i32,ch = load 0x27d1e18, 0x27f4020, 0x27f1740<LD4[%1]> [ORD=17] [ID=-3]

      0x27f1940: i32 = Constant<1> [ORD=18] [ID=-3]

    0x27f3d20: i32 = add 0x27f1840, 0x27f1940 [ORD=18] [ID=-3]

    0x27f4020: <multiple use>
    0x27f1740: <multiple use>
  0x27f0f40: ch = store 0x27d1e18, 0x27f3d20, 0x27f4020, 0x27f1740<ST4[%1]> [ORD=19] [ID=-3]


Legalized selection DAG: BB#1 'redefine_start21:redefine_start21redefine_start2.for.inc'
SelectionDAG has 8 nodes:
  0x27d1e18: ch = EntryToken [ORD=17] [ID=0]

  0x27f1740: i32 = undef [ORD=17] [ID=2]

    0x27d1e18: <multiple use>
    0x27f4320: i32 = Register %vreg1 [ORD=17] [ID=1]

  0x27f4020: i32,ch = CopyFromReg 0x27d1e18, 0x27f4320 [ORD=17] [ID=4]

    0x27d1e18: <multiple use>
        0x27d1e18: <multiple use>
        0x27f4020: <multiple use>
        0x27f1740: <multiple use>
      0x27f1840: i32,ch = load 0x27d1e18, 0x27f4020, 0x27f1740<LD4[%1]> [ORD=17] [ID=5]

      0x27f1940: i32 = Constant<1> [ORD=18] [ID=3]

    0x27f3d20: i32 = add 0x27f1840, 0x27f1940 [ORD=18] [ID=6]

    0x27f4020: <multiple use>
    0x27f1740: <multiple use>
  0x27f0f40: ch = store 0x27d1e18, 0x27f3d20, 0x27f4020, 0x27f1740<ST4[%1]> [ORD=19] [ID=7]


Optimized legalized selection DAG: BB#1 'redefine_start21:redefine_start21redefine_start2.for.inc'
SelectionDAG has 8 nodes:
  0x27d1e18: ch = EntryToken [ORD=17] [ID=0]

  0x27f1740: i32 = undef [ORD=17] [ID=2]

    0x27d1e18: <multiple use>
    0x27f4320: i32 = Register %vreg1 [ORD=17] [ID=1]

  0x27f4020: i32,ch = CopyFromReg 0x27d1e18, 0x27f4320 [ORD=17] [ID=4]

    0x27d1e18: <multiple use>
        0x27d1e18: <multiple use>
        0x27f4020: <multiple use>
        0x27f1740: <multiple use>
      0x27f1840: i32,ch = load 0x27d1e18, 0x27f4020, 0x27f1740<LD4[%1]> [ORD=17] [ID=5]

      0x27f1940: i32 = Constant<1> [ORD=18] [ID=3]

    0x27f3d20: i32 = add 0x27f1840, 0x27f1940 [ORD=18] [ID=6]

    0x27f4020: <multiple use>
    0x27f1740: <multiple use>
  0x27f0f40: ch = store 0x27d1e18, 0x27f3d20, 0x27f4020, 0x27f1740<ST4[%1]> [ORD=19] [ID=7]


===== Instruction selection begins: BB#1 'redefine_start21redefine_start2.for.inc'
ISEL: Starting pattern match on root node: 0x27f0f40: ch = store 0x27d1e18, 0x27f3d20, 0x27f4020, 0x27f1740<ST4[%1]> [ORD=19] [ID=7]

  Initial Opcode index to 178
  Morphed node: 0x27f0f40: ch = SW 0x27f3d20, 0x27f4020, 0x27f3f20, 0x27d1e18<Mem:ST4[%1]> [ORD=19]

ISEL: Match complete!
=> 0x27f0f40: ch = SW 0x27f3d20, 0x27f4020, 0x27f3f20, 0x27d1e18<Mem:ST4[%1]> [ORD=19]

ISEL: Starting pattern match on root node: 0x27f3d20: i32 = add 0x27f1840, 0x27f1940 [ORD=18] [ID=6]

  Initial Opcode index to 493
  Morphed node: 0x27f3d20: i32 = ADDI 0x27f1840, 0x27f3e20 [ORD=18]

ISEL: Match complete!
=> 0x27f3d20: i32 = ADDI 0x27f1840, 0x27f3e20 [ORD=18]

ISEL: Starting pattern match on root node: 0x27f1840: i32,ch = load 0x27d1e18, 0x27f4020, 0x27f1740<LD4[%1]> [ORD=17] [ID=5]

  Initial Opcode index to 5
  TypeSwitch[i32] from 10 to 14
  Morphed node: 0x27f1840: i32,ch = LW 0x27f4020, 0x27f3f20, 0x27d1e18<Mem:LD4[%1]> [ORD=17]

ISEL: Match complete!
=> 0x27f1840: i32,ch = LW 0x27f4020, 0x27f3f20, 0x27d1e18<Mem:LD4[%1]> [ORD=17]

=> 0x27f4020: i32,ch = CopyFromReg 0x27d1e18, 0x27f4320 [ORD=17]

=> 0x27f4320: i32 = Register %vreg1 [ORD=17]

=> 0x27d1e18: ch = EntryToken [ORD=17]

===== Instruction selection ends:
Selected selection DAG: BB#1 'redefine_start21:redefine_start21redefine_start2.for.inc'
SelectionDAG has 8 nodes:
  0x27d1e18: ch = EntryToken [ORD=17]

    0x27d1e18: <multiple use>
    0x27f4320: i32 = Register %vreg1 [ORD=17]

  0x27f4020: i32,ch = CopyFromReg 0x27d1e18, 0x27f4320 [ORD=17]

  0x27f3f20: i32 = TargetConstant<0>

        0x27f4020: <multiple use>
        0x27f3f20: <multiple use>
        0x27d1e18: <multiple use>
      0x27f1840: i32,ch = LW 0x27f4020, 0x27f3f20, 0x27d1e18<Mem:LD4[%1]> [ORD=17]

      0x27f3e20: i32 = TargetConstant<1>

    0x27f3d20: i32 = ADDI 0x27f1840, 0x27f3e20 [ORD=18]

    0x27f4020: <multiple use>
    0x27f3f20: <multiple use>
    0x27d1e18: <multiple use>
  0x27f0f40: ch = SW 0x27f3d20, 0x27f4020, 0x27f3f20, 0x27d1e18<Mem:ST4[%1]> [ORD=19]


********** List Scheduling BB#1 'redefine_start21redefine_start2.for.inc' **********
SU(0): 0x27f0f40: ch = SW 0x27f3d20, 0x27f4020, 0x27f3f20, 0x27d1e18<Mem:ST4[%1]> [ORD=19] [ID=0]

  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 0
  Predecessors:
   val SU(2): Latency=1
   val SU(1): Latency=1

SU(1): 0x27f4020: i32,ch = CopyFromReg 0x27d1e18, 0x27f4320 [ORD=17] [ID=1]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
   val SU(0): Latency=1
   val SU(3): Latency=1

SU(2): 0x27f3d20: i32 = ADDI 0x27f1840, 0x27f3e20 [ORD=18] [ID=2]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
   val SU(3): Latency=1
  Successors:
   val SU(0): Latency=1

SU(3): 0x27f1840: i32,ch = LW 0x27f4020, 0x27f3f20, 0x27d1e18<Mem:LD4[%1]> [ORD=17] [ID=3]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
   val SU(1): Latency=1
  Successors:
   val SU(2): Latency=1


Examining Available:
Height 0: SU(0): 0x27f0f40: ch = SW 0x27f3d20, 0x27f4020, 0x27f3f20, 0x27d1e18<Mem:ST4[%1]> [ORD=19] [ID=0]


*** Scheduling [0]: SU(0): 0x27f0f40: ch = SW 0x27f3d20, 0x27f4020, 0x27f3f20, 0x27d1e18<Mem:ST4[%1]> [ORD=19] [ID=0]


Examining Available:
Height 1: SU(2): 0x27f3d20: i32 = ADDI 0x27f1840, 0x27f3e20 [ORD=18] [ID=2]


*** Scheduling [1]: SU(2): 0x27f3d20: i32 = ADDI 0x27f1840, 0x27f3e20 [ORD=18] [ID=2]


Examining Available:
Height 2: SU(3): 0x27f1840: i32,ch = LW 0x27f4020, 0x27f3f20, 0x27d1e18<Mem:LD4[%1]> [ORD=17] [ID=3]


*** Scheduling [2]: SU(3): 0x27f1840: i32,ch = LW 0x27f4020, 0x27f3f20, 0x27d1e18<Mem:LD4[%1]> [ORD=17] [ID=3]


Examining Available:
Height 3: SU(1): 0x27f4020: i32,ch = CopyFromReg 0x27d1e18, 0x27f4320 [ORD=17] [ID=1]


*** Scheduling [3]: SU(1): 0x27f4020: i32,ch = CopyFromReg 0x27d1e18, 0x27f4320 [ORD=17] [ID=1]

*** Final schedule ***
SU(1): 0x27f4020: i32,ch = CopyFromReg 0x27d1e18, 0x27f4320 [ORD=17] [ID=1]

SU(3): 0x27f1840: i32,ch = LW 0x27f4020, 0x27f3f20, 0x27d1e18<Mem:LD4[%1]> [ORD=17] [ID=3]

SU(2): 0x27f3d20: i32 = ADDI 0x27f1840, 0x27f3e20 [ORD=18] [ID=2]

SU(0): 0x27f0f40: ch = SW 0x27f3d20, 0x27f4020, 0x27f3f20, 0x27d1e18<Mem:ST4[%1]> [ORD=19] [ID=0]


Total amount of phi nodes to update: 0
Initial selection DAG: BB#2 'redefine_start21:redefine_start21redefine_start2.return'
SelectionDAG has 1 nodes:
  0x27d1e18: ch = EntryToken


Optimized lowered selection DAG: BB#2 'redefine_start21:redefine_start21redefine_start2.return'
SelectionDAG has 1 nodes:
  0x27d1e18: ch = EntryToken


Legally typed node: 0x27d1e18: ch = EntryToken [ID=0]

Legally typed node: 0x7fff149b9a10: ch = handlenode 0x27d1e18 [ID=0]

Type-legalized selection DAG: BB#2 'redefine_start21:redefine_start21redefine_start2.return'
SelectionDAG has 1 nodes:
  0x27d1e18: ch = EntryToken [ID=-3]


Legalized selection DAG: BB#2 'redefine_start21:redefine_start21redefine_start2.return'
SelectionDAG has 1 nodes:
  0x27d1e18: ch = EntryToken [ID=0]


Optimized legalized selection DAG: BB#2 'redefine_start21:redefine_start21redefine_start2.return'
SelectionDAG has 1 nodes:
  0x27d1e18: ch = EntryToken [ID=0]


===== Instruction selection begins: BB#2 'redefine_start21redefine_start2.return'
=> 0x27d1e18: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: BB#2 'redefine_start21:redefine_start21redefine_start2.return'
SelectionDAG has 1 nodes:
  0x27d1e18: ch = EntryToken


********** List Scheduling BB#2 'redefine_start21redefine_start2.return' **********
*** Final schedule ***

Total amount of phi nodes to update: 0

*** Tail-duplicating BB#2

Merging into block: BB#1: derived from LLVM BB %redefine_start21redefine_start2.for.inc
    Predecessors according to CFG: BB#0
	%vreg10<def> = LW %vreg1, 0; mem:LD4[%1] GR32Bit:%vreg10,%vreg1
	%vreg11<def> = ADDI %vreg10<kill>, 1; GR32Bit:%vreg11,%vreg10
	SW %vreg11<kill>, %vreg1, 0; mem:ST4[%1] GR32Bit:%vreg11,%vreg1
    Successors according to CFG: BB#2
From MBB: BB#2: derived from LLVM BB %redefine_start21redefine_start2.return
    Predecessors according to CFG: BB#1

Removing MBB: BB#2: derived from LLVM BB %redefine_start21redefine_start2.return
# Machine code for function redefine_start21: SSA
Frame Objects:
  fi#-2: size=4, align=8, fixed, at location [SP+8]
  fi#-1: size=4, align=16, fixed, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start21redefine_start2.newName01
16B		%vreg2<def> = ADDI %t5, <fi#-2>; GR32Bit:%vreg2
32B		%vreg3<def> = FLW %vreg2<kill>, 0; mem:LD4[%2](align=8) FP32Bit:%vreg3 GR32Bit:%vreg2
48B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
64B		%vreg4<def> = LW %vreg1, 0; mem:LD4[%1](align=16) GR32Bit:%vreg4,%vreg1
80B		%vreg5<def> = SLLI %vreg4<kill>, 2; GR32Bit:%vreg5,%vreg4
96B		%vreg6<def> = LUI <ga:@redefine_out_array>[TF=2]; GR32Bit:%vreg6
112B		%vreg7<def> = ADDI %zero, <ga:@redefine_out_array>[TF=3]; GR32Bit:%vreg7
128B		%vreg8<def> = ADD %vreg7<kill>, %vreg6<kill>; GR32Bit:%vreg8,%vreg7,%vreg6
144B		%vreg9<def> = ADD %vreg5<kill>, %vreg8<kill>; GR32Bit:%vreg9,%vreg5,%vreg8
160B		FSW %vreg3<kill>, %vreg9<kill>, 0; mem:ST4[%5] FP32Bit:%vreg3 GR32Bit:%vreg9
	    Successors according to CFG: BB#1

176B	BB#1: derived from LLVM BB %redefine_start21redefine_start2.for.inc
	    Predecessors according to CFG: BB#0
192B		%vreg10<def> = LW %vreg1, 0; mem:LD4[%1] GR32Bit:%vreg10,%vreg1
208B		%vreg11<def> = ADDI %vreg10<kill>, 1; GR32Bit:%vreg11,%vreg10
224B		SW %vreg11<kill>, %vreg1, 0; mem:ST4[%1] GR32Bit:%vreg11,%vreg1

# End machine code for function redefine_start21.

********** Stack Coloring **********
********** Function: redefine_start21
******** Pre-regalloc Machine LICM: redefine_start21 ********
******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: redefine_start21
********** PROCESS IMPLICIT DEFS **********
********** Function: redefine_start21
********** REWRITING TWO-ADDR INSTRS **********
********** Function: redefine_start21
# Machine code for function redefine_start21: Post SSA
Frame Objects:
  fi#-2: size=4, align=8, fixed, at location [SP+8]
  fi#-1: size=4, align=16, fixed, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start21redefine_start2.newName01
16B		%vreg2<def> = ADDI %t5, <fi#-2>; GR32Bit:%vreg2
32B		%vreg3<def> = FLW %vreg2<kill>, 0; mem:LD4[%2](align=8) FP32Bit:%vreg3 GR32Bit:%vreg2
48B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
64B		%vreg4<def> = LW %vreg1, 0; mem:LD4[%1](align=16) GR32Bit:%vreg4,%vreg1
80B		%vreg5<def> = SLLI %vreg4<kill>, 2; GR32Bit:%vreg5,%vreg4
96B		%vreg6<def> = LUI <ga:@redefine_out_array>[TF=2]; GR32Bit:%vreg6
112B		%vreg7<def> = ADDI %zero, <ga:@redefine_out_array>[TF=3]; GR32Bit:%vreg7
128B		%vreg8<def> = ADD %vreg7<kill>, %vreg6<kill>; GR32Bit:%vreg8,%vreg7,%vreg6
144B		%vreg9<def> = ADD %vreg5<kill>, %vreg8<kill>; GR32Bit:%vreg9,%vreg5,%vreg8
160B		FSW %vreg3<kill>, %vreg9<kill>, 0; mem:ST4[%5] FP32Bit:%vreg3 GR32Bit:%vreg9
	    Successors according to CFG: BB#1

176B	BB#1: derived from LLVM BB %redefine_start21redefine_start2.for.inc
	    Predecessors according to CFG: BB#0
192B		%vreg10<def> = LW %vreg1, 0; mem:LD4[%1] GR32Bit:%vreg10,%vreg1
208B		%vreg11<def> = ADDI %vreg10<kill>, 1; GR32Bit:%vreg11,%vreg10
224B		SW %vreg11<kill>, %vreg1<kill>, 0; mem:ST4[%1] GR32Bit:%vreg11,%vreg1

# End machine code for function redefine_start21.

Computing live-in reg-units in ABI blocks.
Created 0 new intervals.
********** INTERVALS **********
%vreg1 = [48r,224r:0)  0@48r
%vreg2 = [16r,32r:0)  0@16r
%vreg3 = [32r,160r:0)  0@32r
%vreg4 = [64r,80r:0)  0@64r
%vreg5 = [80r,144r:0)  0@80r
%vreg6 = [96r,128r:0)  0@96r
%vreg7 = [112r,128r:0)  0@112r
%vreg8 = [128r,144r:0)  0@128r
%vreg9 = [144r,160r:0)  0@144r
%vreg10 = [192r,208r:0)  0@192r
%vreg11 = [208r,224r:0)  0@208r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start21: Post SSA
Frame Objects:
  fi#-2: size=4, align=8, fixed, at location [SP+8]
  fi#-1: size=4, align=16, fixed, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start21redefine_start2.newName01
16B		%vreg2<def> = ADDI %t5, <fi#-2>; GR32Bit:%vreg2
32B		%vreg3<def> = FLW %vreg2, 0; mem:LD4[%2](align=8) FP32Bit:%vreg3 GR32Bit:%vreg2
48B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
64B		%vreg4<def> = LW %vreg1, 0; mem:LD4[%1](align=16) GR32Bit:%vreg4,%vreg1
80B		%vreg5<def> = SLLI %vreg4, 2; GR32Bit:%vreg5,%vreg4
96B		%vreg6<def> = LUI <ga:@redefine_out_array>[TF=2]; GR32Bit:%vreg6
112B		%vreg7<def> = ADDI %zero, <ga:@redefine_out_array>[TF=3]; GR32Bit:%vreg7
128B		%vreg8<def> = ADD %vreg7, %vreg6; GR32Bit:%vreg8,%vreg7,%vreg6
144B		%vreg9<def> = ADD %vreg5, %vreg8; GR32Bit:%vreg9,%vreg5,%vreg8
160B		FSW %vreg3, %vreg9, 0; mem:ST4[%5] FP32Bit:%vreg3 GR32Bit:%vreg9
	    Successors according to CFG: BB#1

176B	BB#1: derived from LLVM BB %redefine_start21redefine_start2.for.inc
	    Predecessors according to CFG: BB#0
192B		%vreg10<def> = LW %vreg1, 0; mem:LD4[%1] GR32Bit:%vreg10,%vreg1
208B		%vreg11<def> = ADDI %vreg10, 1; GR32Bit:%vreg11,%vreg10
224B		SW %vreg11, %vreg1, 0; mem:ST4[%1] GR32Bit:%vreg11,%vreg1

# End machine code for function redefine_start21.

********** SIMPLE REGISTER COALESCING **********
********** Function: redefine_start21
********** JOINING INTERVALS ***********
redefine_start21redefine_start2.newName01:
redefine_start21redefine_start2.for.inc:
Trying to inflate 0 regs.
********** INTERVALS **********
%vreg1 = [48r,224r:0)  0@48r
%vreg2 = [16r,32r:0)  0@16r
%vreg3 = [32r,160r:0)  0@32r
%vreg4 = [64r,80r:0)  0@64r
%vreg5 = [80r,144r:0)  0@80r
%vreg6 = [96r,128r:0)  0@96r
%vreg7 = [112r,128r:0)  0@112r
%vreg8 = [128r,144r:0)  0@128r
%vreg9 = [144r,160r:0)  0@144r
%vreg10 = [192r,208r:0)  0@192r
%vreg11 = [208r,224r:0)  0@208r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start21: Post SSA
Frame Objects:
  fi#-2: size=4, align=8, fixed, at location [SP+8]
  fi#-1: size=4, align=16, fixed, at location [SP]

0B	BB#0: derived from LLVM BB %redefine_start21redefine_start2.newName01
16B		%vreg2<def> = ADDI %t5, <fi#-2>; GR32Bit:%vreg2
32B		%vreg3<def> = FLW %vreg2, 0; mem:LD4[%2](align=8) FP32Bit:%vreg3 GR32Bit:%vreg2
48B		%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
64B		%vreg4<def> = LW %vreg1, 0; mem:LD4[%1](align=16) GR32Bit:%vreg4,%vreg1
80B		%vreg5<def> = SLLI %vreg4, 2; GR32Bit:%vreg5,%vreg4
96B		%vreg6<def> = LUI <ga:@redefine_out_array>[TF=2]; GR32Bit:%vreg6
112B		%vreg7<def> = ADDI %zero, <ga:@redefine_out_array>[TF=3]; GR32Bit:%vreg7
128B		%vreg8<def> = ADD %vreg7, %vreg6; GR32Bit:%vreg8,%vreg7,%vreg6
144B		%vreg9<def> = ADD %vreg5, %vreg8; GR32Bit:%vreg9,%vreg5,%vreg8
160B		FSW %vreg3, %vreg9, 0; mem:ST4[%5] FP32Bit:%vreg3 GR32Bit:%vreg9
	    Successors according to CFG: BB#1

176B	BB#1: derived from LLVM BB %redefine_start21redefine_start2.for.inc
	    Predecessors according to CFG: BB#0
192B		%vreg10<def> = LW %vreg1, 0; mem:LD4[%1] GR32Bit:%vreg10,%vreg1
208B		%vreg11<def> = ADDI %vreg10, 1; GR32Bit:%vreg11,%vreg10
224B		SW %vreg11, %vreg1, 0; mem:ST4[%1] GR32Bit:%vreg11,%vreg1

# End machine code for function redefine_start21.

Before MISched:
# Machine code for function redefine_start21: Post SSA
Frame Objects:
  fi#-2: size=4, align=8, fixed, at location [SP+8]
  fi#-1: size=4, align=16, fixed, at location [SP]

BB#0: derived from LLVM BB %redefine_start21redefine_start2.newName01
	%vreg2<def> = ADDI %t5, <fi#-2>; GR32Bit:%vreg2
	%vreg3<def> = FLW %vreg2, 0; mem:LD4[%2](align=8) FP32Bit:%vreg3 GR32Bit:%vreg2
	%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
	%vreg4<def> = LW %vreg1, 0; mem:LD4[%1](align=16) GR32Bit:%vreg4,%vreg1
	%vreg5<def> = SLLI %vreg4, 2; GR32Bit:%vreg5,%vreg4
	%vreg6<def> = LUI <ga:@redefine_out_array>[TF=2]; GR32Bit:%vreg6
	%vreg7<def> = ADDI %zero, <ga:@redefine_out_array>[TF=3]; GR32Bit:%vreg7
	%vreg8<def> = ADD %vreg7, %vreg6; GR32Bit:%vreg8,%vreg7,%vreg6
	%vreg9<def> = ADD %vreg5, %vreg8; GR32Bit:%vreg9,%vreg5,%vreg8
	FSW %vreg3, %vreg9, 0; mem:ST4[%5] FP32Bit:%vreg3 GR32Bit:%vreg9
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %redefine_start21redefine_start2.for.inc
    Predecessors according to CFG: BB#0
	%vreg10<def> = LW %vreg1, 0; mem:LD4[%1] GR32Bit:%vreg10,%vreg1
	%vreg11<def> = ADDI %vreg10, 1; GR32Bit:%vreg11,%vreg10
	SW %vreg11, %vreg1, 0; mem:ST4[%1] GR32Bit:%vreg11,%vreg1

# End machine code for function redefine_start21.


-------------
Starting new basic block BB#0
********** MI Scheduling **********
redefine_start21:BB#0 redefine_start21redefine_start2.newName01
  From: %vreg2<def> = ADDI %t5, <fi#-2>; GR32Bit:%vreg2
    To: End Remaining: 0
Max Pressure: FP32Bit=1
GR32Bit=4
Live In: 
Live Out: %vreg1 
FP32BitLimit 32 Actual 1
GR32BitLimit 32 Actual 4
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
  SU(3) in tree 0
  SU(4) in tree 0
  SU(5) in tree 0
  SU(6) in tree 0
  SU(7) in tree 0
  SU(8) in tree 0
  SU(9) in tree 0
SU(0):   %vreg2<def> = ADDI %t5, <fi#-2>; GR32Bit:%vreg2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
   val SU(1): Latency=5 Reg=%vreg2

SU(1):   %vreg3<def> = FLW %vreg2, 0; mem:LD4[%2](align=8) FP32Bit:%vreg3 GR32Bit:%vreg2
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 2
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg2
  Successors:
   val SU(9): Latency=2 Reg=%vreg3

SU(2):   %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 30
  Successors:
   val SU(3): Latency=5 Reg=%vreg1

SU(3):   %vreg4<def> = LW %vreg1, 0; mem:LD4[%1](align=16) GR32Bit:%vreg4,%vreg1
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 25
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg1
  Successors:
   val SU(4): Latency=15 Reg=%vreg4

SU(4):   %vreg5<def> = SLLI %vreg4, 2; GR32Bit:%vreg5,%vreg4
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 10
  Predecessors:
   val SU(3): Latency=15 Reg=%vreg4
  Successors:
   val SU(8): Latency=5 Reg=%vreg5

SU(5):   %vreg6<def> = LUI <ga:@redefine_out_array>[TF=2]; GR32Bit:%vreg6
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
   val SU(7): Latency=5 Reg=%vreg6

SU(6):   %vreg7<def> = ADDI %zero, <ga:@redefine_out_array>[TF=3]; GR32Bit:%vreg7
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
   val SU(7): Latency=5 Reg=%vreg7

SU(7):   %vreg8<def> = ADD %vreg7, %vreg6; GR32Bit:%vreg8,%vreg7,%vreg6
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 10
  Predecessors:
   val SU(6): Latency=5 Reg=%vreg7
   val SU(5): Latency=5 Reg=%vreg6
  Successors:
   val SU(8): Latency=5 Reg=%vreg8

SU(8):   %vreg9<def> = ADD %vreg5, %vreg8; GR32Bit:%vreg9,%vreg5,%vreg8
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 5
  Predecessors:
   val SU(4): Latency=5 Reg=%vreg5
   val SU(7): Latency=5 Reg=%vreg8
  Successors:
   val SU(9): Latency=5 Reg=%vreg9

SU(9):   FSW %vreg3, %vreg9, 0; mem:ST4[%5] FP32Bit:%vreg3 GR32Bit:%vreg9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 13
  Depth              : 30
  Height             : 0
  Predecessors:
   val SU(8): Latency=5 Reg=%vreg9
   val SU(1): Latency=2 Reg=%vreg3
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(0):   %vreg2<def> = ADDI %t5, <fi#-2>; GR32Bit:%vreg2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
   val SU(1): Latency=5 Reg=%vreg2

SU(1):   %vreg3<def> = FLW %vreg2, 0; mem:LD4[%2](align=8) FP32Bit:%vreg3 GR32Bit:%vreg2
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 2
  Predecessors:
   val SU(0): Latency=5 Reg=%vreg2
  Successors:
   val SU(9): Latency=2 Reg=%vreg3

SU(2):   %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 30
  Successors:
   val SU(3): Latency=5 Reg=%vreg1

SU(3):   %vreg4<def> = LW %vreg1, 0; mem:LD4[%1](align=16) GR32Bit:%vreg4,%vreg1
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 5
  Height             : 25
  Predecessors:
   val SU(2): Latency=5 Reg=%vreg1
  Successors:
   val SU(4): Latency=15 Reg=%vreg4

SU(4):   %vreg5<def> = SLLI %vreg4, 2; GR32Bit:%vreg5,%vreg4
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 10
  Predecessors:
   val SU(3): Latency=15 Reg=%vreg4
  Successors:
   val SU(8): Latency=5 Reg=%vreg5

SU(5):   %vreg6<def> = LUI <ga:@redefine_out_array>[TF=2]; GR32Bit:%vreg6
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
   val SU(7): Latency=5 Reg=%vreg6

SU(6):   %vreg7<def> = ADDI %zero, <ga:@redefine_out_array>[TF=3]; GR32Bit:%vreg7
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
   val SU(7): Latency=5 Reg=%vreg7

SU(7):   %vreg8<def> = ADD %vreg7, %vreg6; GR32Bit:%vreg8,%vreg7,%vreg6
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 10
  Predecessors:
   val SU(6): Latency=5 Reg=%vreg7
   val SU(5): Latency=5 Reg=%vreg6
  Successors:
   val SU(8): Latency=5 Reg=%vreg8

SU(8):   %vreg9<def> = ADD %vreg5, %vreg8; GR32Bit:%vreg9,%vreg5,%vreg8
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 5
  Predecessors:
   val SU(4): Latency=5 Reg=%vreg5
   val SU(7): Latency=5 Reg=%vreg8
  Successors:
   val SU(9): Latency=5 Reg=%vreg9

SU(9):   FSW %vreg3, %vreg9, 0; mem:ST4[%5] FP32Bit:%vreg3 GR32Bit:%vreg9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 30
  Height             : 0
  Predecessors:
   val SU(8): Latency=5 Reg=%vreg9
   val SU(1): Latency=2 Reg=%vreg3
  Successors:
   ch  SU(4294967295) *: Latency=0

Pick node SU(5)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg6<def> = LUI <ga:@redefine_out_array>[TF=2]; GR32Bit:%vreg6
handleMove 96B -> 8B: %vreg6<def> = LUI <ga:@redefine_out_array>[TF=2]; GR32Bit:%vreg6
     %vreg6:	[96r,128r:0)  0@96r
        -->	[8r,128r:0)  0@8r
Pick node SU(2)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
handleMove 48B -> 12B: %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
     %vreg1:	[48r,224r:0)  0@48r
        -->	[12r,224r:0)  0@12r
     t5:	EMPTY
        -->	EMPTY
Pick node SU(6)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg7<def> = ADDI %zero, <ga:@redefine_out_array>[TF=3]; GR32Bit:%vreg7

*** Renumbered SlotIndexes 12-28 ***
handleMove 112B -> 20B: %vreg7<def> = ADDI %zero, <ga:@redefine_out_array>[TF=3]; GR32Bit:%vreg7
     %vreg7:	[112r,128r:0)  0@112r
        -->	[20r,128r:0)  0@20r
     zero:	EMPTY
        -->	EMPTY
Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg2<def> = ADDI %t5, <fi#-2>; GR32Bit:%vreg2
Pick node SU(7)  ILP: 3 / 6 = 0.5 Tree: 0 @0
Scheduling %vreg8<def> = ADD %vreg7, %vreg6; GR32Bit:%vreg8,%vreg7,%vreg6

*** Renumbered SlotIndexes 28-44 ***
handleMove 128B -> 36B: %vreg8<def> = ADD %vreg7, %vreg6; GR32Bit:%vreg8,%vreg7,%vreg6
     %vreg8:	[128r,144r:0)  0@128r
        -->	[36r,144r:0)  0@36r
     %vreg7:	[20r,128r:0)  0@20r
        -->	[20r,36r:0)  0@20r
     %vreg6:	[8r,128r:0)  0@8r
        -->	[8r,36r:0)  0@8r
Pick node SU(3)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg4<def> = LW %vreg1, 0; mem:LD4[%1](align=16) GR32Bit:%vreg4,%vreg1
handleMove 64B -> 40B: %vreg4<def> = LW %vreg1, 0; mem:LD4[%1](align=16) GR32Bit:%vreg4,%vreg1
     %vreg4:	[64r,80r:0)  0@64r
        -->	[40r,80r:0)  0@40r
     %vreg1:	[12r,224r:0)  0@12r
        -->	[12r,224r:0)  0@12r
Pick node SU(1)  ILP: 2 / 6 = 0.333333 Tree: 0 @0
Scheduling %vreg3<def> = FLW %vreg2, 0; mem:LD4[%2](align=8) FP32Bit:%vreg3 GR32Bit:%vreg2
Pick node SU(4)  ILP: 3 / 21 = 0.142857 Tree: 0 @0
Scheduling %vreg5<def> = SLLI %vreg4, 2; GR32Bit:%vreg5,%vreg4
Pick node SU(8)  ILP: 7 / 26 = 0.269231 Tree: 0 @0
Scheduling %vreg9<def> = ADD %vreg5, %vreg8; GR32Bit:%vreg9,%vreg5,%vreg8
Pick node SU(9)  ILP: 10 / 31 = 0.322581 Tree: 0 @0
Scheduling FSW %vreg3, %vreg9, 0; mem:ST4[%5] FP32Bit:%vreg3 GR32Bit:%vreg9
*** Final schedule for BB#0 ***
SU(5):   %vreg6<def> = LUI <ga:@redefine_out_array>[TF=2]; GR32Bit:%vreg6
SU(2):   %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
SU(6):   %vreg7<def> = ADDI %zero, <ga:@redefine_out_array>[TF=3]; GR32Bit:%vreg7
SU(0):   %vreg2<def> = ADDI %t5, <fi#-2>; GR32Bit:%vreg2
SU(7):   %vreg8<def> = ADD %vreg7, %vreg6; GR32Bit:%vreg8,%vreg7,%vreg6
SU(3):   %vreg4<def> = LW %vreg1, 0; mem:LD4[%1](align=16) GR32Bit:%vreg4,%vreg1
SU(1):   %vreg3<def> = FLW %vreg2, 0; mem:LD4[%2](align=8) FP32Bit:%vreg3 GR32Bit:%vreg2
SU(4):   %vreg5<def> = SLLI %vreg4, 2; GR32Bit:%vreg5,%vreg4
SU(8):   %vreg9<def> = ADD %vreg5, %vreg8; GR32Bit:%vreg9,%vreg5,%vreg8
SU(9):   FSW %vreg3, %vreg9, 0; mem:ST4[%5] FP32Bit:%vreg3 GR32Bit:%vreg9


*** Renumbered SlotIndexes 4-92 ***

*** Renumbered SlotIndexes 16-120 ***

*** Renumbered SlotIndexes 28-140 ***

*** Renumbered SlotIndexes 40-168 ***

*** Renumbered SlotIndexes 52-188 ***

*** Renumbered SlotIndexes 64-216 ***

*** Renumbered SlotIndexes 76-236 ***

*** Renumbered SlotIndexes 88-256 ***

*** Renumbered SlotIndexes 100-268 ***

*** Renumbered SlotIndexes 112-280 ***

*** Renumbered SlotIndexes 124-292 ***

*** Renumbered SlotIndexes 136-304 ***

*** Renumbered SlotIndexes 148-316 ***

*** Renumbered SlotIndexes 160-328 ***

*** Renumbered SlotIndexes 172-340 ***

*** Renumbered SlotIndexes 184-352 ***

*** Renumbered SlotIndexes 196-364 ***

*** Renumbered SlotIndexes 208-376 ***

*** Renumbered SlotIndexes 220-388 ***

*** Renumbered SlotIndexes 232-400 ***

*** Renumbered SlotIndexes 244-412 ***

*** Renumbered SlotIndexes 256-424 ***

*** Renumbered SlotIndexes 268-436 ***

*** Renumbered SlotIndexes 280-448 ***

*** Renumbered SlotIndexes 292-460 ***

*** Renumbered SlotIndexes 304-472 ***

*** Renumbered SlotIndexes 316-484 ***

*** Renumbered SlotIndexes 328-496 ***

*** Renumbered SlotIndexes 340-508 ***

*** Renumbered SlotIndexes 352-520 ***

*** Renumbered SlotIndexes 364-532 ***

*** Renumbered SlotIndexes 376-544 ***

*** Renumbered SlotIndexes 388-556 ***

*** Renumbered SlotIndexes 400-568 ***
Partitioning instructions of the region into multiple CEs
instr:  %vreg6<def> = LUI <ga:@redefine_out_array>[TF=2]; GR32Bit:%vreg6
instr:  %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
instr:  %vreg7<def> = ADDI %zero, <ga:@redefine_out_array>[TF=3]; GR32Bit:%vreg7
instr:  %vreg2<def> = ADDI %t5, <fi#-2>; GR32Bit:%vreg2
instr:  %vreg8<def> = ADD %vreg7, %vreg6; GR32Bit:%vreg8,%vreg7,%vreg6
instr:  %vreg4<def> = LW %vreg1, 0; mem:LD4[%1](align=16) GR32Bit:%vreg4,%vreg1
instr:  %vreg3<def> = FLW %vreg2, 0; mem:LD4[%2](align=8) FP32Bit:%vreg3 GR32Bit:%vreg2
instr:  %vreg5<def> = SLLI %vreg4, 2; GR32Bit:%vreg5,%vreg4
instr:  %vreg9<def> = ADD %vreg5, %vreg8; GR32Bit:%vreg9,%vreg5,%vreg8
instr:  FSW %vreg3, %vreg9, 0; mem:ST4[%5] FP32Bit:%vreg3 GR32Bit:%vreg9
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
After Shuffling regions of basic block, state of BB#0:
BB#0: derived from LLVM BB %redefine_start21redefine_start2.newName01
	%vreg12<def> = ADD %t5, %zero; GR32Bit:%vreg12
	%vreg14<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg14
	%vreg15<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg15
	%vreg16<def> = SRLI %vreg15, 12; GR32Bit:%vreg16,%vreg15
	%vreg17<def> = ADD %vreg14, %vreg16; GR32Bit:%vreg17,%vreg14,%vreg16
	%vreg18<def> = ADDI %zero, 16; GR32Bit:%vreg18
	%vreg19<def> = SRLI %t5, 22; GR32Bit:%vreg19
	%vreg20<def> = SRLI %t5, 12; GR32Bit:%vreg20
	%vreg21<def> = ANDI %vreg20, 15; GR32Bit:%vreg21,%vreg20
	%vreg22<def> = SRLI %t5, 6; GR32Bit:%vreg22
	%vreg23<def> = ANDI %vreg22, 63; GR32Bit:%vreg23,%vreg22
	%vreg24<def> = ADDI %zero, 832; GR32Bit:%vreg24
	%vreg25<def> = MUL %vreg19, %vreg24; GR32Bit:%vreg25,%vreg19,%vreg24
	%vreg26<def> = ADDI %zero, 52; GR32Bit:%vreg26
	%vreg27<def> = MUL %vreg21, %vreg26; GR32Bit:%vreg27,%vreg21,%vreg26
	%vreg28<def> = ADD %vreg27, %vreg23; GR32Bit:%vreg28,%vreg27,%vreg23
	%vreg29<def> = ADD %vreg28, %vreg25; GR32Bit:%vreg29,%vreg28,%vreg25
	%vreg30<def> = MUL %vreg29, %vreg18; GR32Bit:%vreg30,%vreg29,%vreg18
	%vreg13<def> = ADD %vreg17, %vreg30; GR32Bit:%vreg13,%vreg17,%vreg30
	%vreg6<def> = LUI <ga:@redefine_out_array>[TF=2]; GR32Bit:%vreg6
	%vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
	%vreg7<def> = ADDI %zero, <ga:@redefine_out_array>[TF=3]; GR32Bit:%vreg7
	%vreg2<def> = ADDI %t5, <fi#-2>; GR32Bit:%vreg2
	%vreg8<def> = ADD %vreg7, %vreg6; GR32Bit:%vreg8,%vreg7,%vreg6
	%vreg4<def> = LW %vreg1, 0; mem:LD4[%1](align=16) GR32Bit:%vreg4,%vreg1
	%vreg3<def> = FLW %vreg2, 0; mem:LD4[%2](align=8) FP32Bit:%vreg3 GR32Bit:%vreg2
	%vreg5<def> = SLLI %vreg4, 2; GR32Bit:%vreg5,%vreg4
	%vreg9<def> = ADD %vreg5, %vreg8; GR32Bit:%vreg9,%vreg5,%vreg8
	FSW %vreg3, %vreg9, 0; mem:ST4[%5] FP32Bit:%vreg3 GR32Bit:%vreg9
	%vreg31<def> = ADD %t5, %zero; GR32Bit:%vreg31
	%vreg33<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg33
	%vreg34<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg34
	%vreg35<def> = SRLI %vreg34, 12; GR32Bit:%vreg35,%vreg34
	%vreg36<def> = ADD %vreg33, %vreg35; GR32Bit:%vreg36,%vreg33,%vreg35
	%vreg37<def> = ADDI %zero, 16; GR32Bit:%vreg37
	%vreg38<def> = SRLI %t5, 22; GR32Bit:%vreg38
	%vreg39<def> = SRLI %t5, 12; GR32Bit:%vreg39
	%vreg40<def> = ANDI %vreg39, 15; GR32Bit:%vreg40,%vreg39
	%vreg41<def> = SRLI %t5, 6; GR32Bit:%vreg41
	%vreg42<def> = ANDI %vreg41, 63; GR32Bit:%vreg42,%vreg41
	%vreg43<def> = ADDI %zero, 832; GR32Bit:%vreg43
	%vreg44<def> = MUL %vreg38, %vreg43; GR32Bit:%vreg44,%vreg38,%vreg43
	%vreg45<def> = ADDI %zero, 52; GR32Bit:%vreg45
	%vreg46<def> = MUL %vreg40, %vreg45; GR32Bit:%vreg46,%vreg40,%vreg45
	%vreg47<def> = ADD %vreg46, %vreg42; GR32Bit:%vreg47,%vreg46,%vreg42
	%vreg48<def> = ADD %vreg47, %vreg44; GR32Bit:%vreg48,%vreg47,%vreg44
	%vreg49<def> = MUL %vreg48, %vreg37; GR32Bit:%vreg49,%vreg48,%vreg37
	%vreg32<def> = ADD %vreg36, %vreg49; GR32Bit:%vreg32,%vreg36,%vreg49
	%vreg50<def> = ADD %t5, %zero; GR32Bit:%vreg50
	%vreg52<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg52
	%vreg53<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg53
	%vreg54<def> = SRLI %vreg53, 12; GR32Bit:%vreg54,%vreg53
	%vreg55<def> = ADD %vreg52, %vreg54; GR32Bit:%vreg55,%vreg52,%vreg54
	%vreg56<def> = ADDI %zero, 16; GR32Bit:%vreg56
	%vreg57<def> = SRLI %t5, 22; GR32Bit:%vreg57
	%vreg58<def> = SRLI %t5, 12; GR32Bit:%vreg58
	%vreg59<def> = ANDI %vreg58, 15; GR32Bit:%vreg59,%vreg58
	%vreg60<def> = SRLI %t5, 6; GR32Bit:%vreg60
	%vreg61<def> = ANDI %vreg60, 63; GR32Bit:%vreg61,%vreg60
	%vreg62<def> = ADDI %zero, 832; GR32Bit:%vreg62
	%vreg63<def> = MUL %vreg57, %vreg62; GR32Bit:%vreg63,%vreg57,%vreg62
	%vreg64<def> = ADDI %zero, 52; GR32Bit:%vreg64
	%vreg65<def> = MUL %vreg59, %vreg64; GR32Bit:%vreg65,%vreg59,%vreg64
	%vreg66<def> = ADD %vreg65, %vreg61; GR32Bit:%vreg66,%vreg65,%vreg61
	%vreg67<def> = ADD %vreg66, %vreg63; GR32Bit:%vreg67,%vreg66,%vreg63
	%vreg68<def> = MUL %vreg67, %vreg56; GR32Bit:%vreg68,%vreg67,%vreg56
	%vreg51<def> = ADD %vreg55, %vreg68; GR32Bit:%vreg51,%vreg55,%vreg68
	%vreg69<def> = ADD %t5, %zero; GR32Bit:%vreg69
	%vreg71<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg71
	%vreg72<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg72
	%vreg73<def> = SRLI %vreg72, 12; GR32Bit:%vreg73,%vreg72
	%vreg74<def> = ADD %vreg71, %vreg73; GR32Bit:%vreg74,%vreg71,%vreg73
	%vreg75<def> = ADDI %zero, 16; GR32Bit:%vreg75
	%vreg76<def> = SRLI %t5, 22; GR32Bit:%vreg76
	%vreg77<def> = SRLI %t5, 12; GR32Bit:%vreg77
	%vreg78<def> = ANDI %vreg77, 15; GR32Bit:%vreg78,%vreg77
	%vreg79<def> = SRLI %t5, 6; GR32Bit:%vreg79
	%vreg80<def> = ANDI %vreg79, 63; GR32Bit:%vreg80,%vreg79
	%vreg81<def> = ADDI %zero, 832; GR32Bit:%vreg81
	%vreg82<def> = MUL %vreg76, %vreg81; GR32Bit:%vreg82,%vreg76,%vreg81
	%vreg83<def> = ADDI %zero, 52; GR32Bit:%vreg83
	%vreg84<def> = MUL %vreg78, %vreg83; GR32Bit:%vreg84,%vreg78,%vreg83
	%vreg85<def> = ADD %vreg84, %vreg80; GR32Bit:%vreg85,%vreg84,%vreg80
	%vreg86<def> = ADD %vreg85, %vreg82; GR32Bit:%vreg86,%vreg85,%vreg82
	%vreg87<def> = MUL %vreg86, %vreg75; GR32Bit:%vreg87,%vreg86,%vreg75
	%vreg70<def> = ADD %vreg74, %vreg87; GR32Bit:%vreg70,%vreg74,%vreg87
    Successors according to CFG: BB#1

*** Renumbered SlotIndexes 316-612 ***

*** Renumbered SlotIndexes 216-656 ***

*** Renumbered SlotIndexes 112-712 ***

*** Renumbered SlotIndexes 100-732 ***

*** Renumbered SlotIndexes 100-748 ***

*** Renumbered SlotIndexes 100-764 ***

*** Renumbered SlotIndexes 100-780 ***

*** Renumbered SlotIndexes 100-796 ***

*** Renumbered SlotIndexes 12-836 ***
Creating pHyperOp bundles for CEs for bb0
  %vreg31<def> = ADD %t5, %zero; GR32Bit:%vreg31
starting at   %vreg12<def> = ADD %t5, %zero; GR32Bit:%vreg12
  %vreg50<def> = ADD %t5, %zero; GR32Bit:%vreg50
starting at   %vreg31<def> = ADD %t5, %zero; GR32Bit:%vreg31
  %vreg69<def> = ADD %t5, %zero; GR32Bit:%vreg69
starting at   %vreg50<def> = ADD %t5, %zero; GR32Bit:%vreg50
starting at   %vreg69<def> = ADD %t5, %zero; GR32Bit:%vreg69
After bundling, state of BB0:BB#0: derived from LLVM BB %redefine_start21redefine_start2.newName01
	%vreg12<def> = ADD %t5, %zero; GR32Bit:%vreg12
	  * %vreg14<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg14
	  * %vreg15<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg15
	  * %vreg16<def> = SRLI %vreg15, 12; GR32Bit:%vreg16,%vreg15
	  * %vreg17<def> = ADD %vreg14, %vreg16; GR32Bit:%vreg17,%vreg14,%vreg16
	  * %vreg18<def> = ADDI %zero, 16; GR32Bit:%vreg18
	  * %vreg19<def> = SRLI %t5, 22; GR32Bit:%vreg19
	  * %vreg20<def> = SRLI %t5, 12; GR32Bit:%vreg20
	  * %vreg21<def> = ANDI %vreg20, 15; GR32Bit:%vreg21,%vreg20
	  * %vreg22<def> = SRLI %t5, 6; GR32Bit:%vreg22
	  * %vreg23<def> = ANDI %vreg22, 63; GR32Bit:%vreg23,%vreg22
	  * %vreg24<def> = ADDI %zero, 832; GR32Bit:%vreg24
	  * %vreg25<def> = MUL %vreg19, %vreg24; GR32Bit:%vreg25,%vreg19,%vreg24
	  * %vreg26<def> = ADDI %zero, 52; GR32Bit:%vreg26
	  * %vreg27<def> = MUL %vreg21, %vreg26; GR32Bit:%vreg27,%vreg21,%vreg26
	  * %vreg28<def> = ADD %vreg27, %vreg23; GR32Bit:%vreg28,%vreg27,%vreg23
	  * %vreg29<def> = ADD %vreg28, %vreg25; GR32Bit:%vreg29,%vreg28,%vreg25
	  * %vreg30<def> = MUL %vreg29, %vreg18; GR32Bit:%vreg30,%vreg29,%vreg18
	  * %vreg13<def> = ADD %vreg17, %vreg30; GR32Bit:%vreg13,%vreg17,%vreg30
	  * %vreg6<def> = LUI <ga:@redefine_out_array>[TF=2]; GR32Bit:%vreg6
	  * %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
	  * %vreg7<def> = ADDI %zero, <ga:@redefine_out_array>[TF=3]; GR32Bit:%vreg7
	  * %vreg2<def> = ADDI %t5, <fi#-2>; GR32Bit:%vreg2
	  * %vreg8<def> = ADD %vreg7, %vreg6; GR32Bit:%vreg8,%vreg7,%vreg6
	  * %vreg4<def> = LW %vreg1, 0; mem:LD4[%1](align=16) GR32Bit:%vreg4,%vreg1
	  * %vreg3<def> = FLW %vreg2, 0; mem:LD4[%2](align=8) FP32Bit:%vreg3 GR32Bit:%vreg2
	  * %vreg5<def> = SLLI %vreg4, 2; GR32Bit:%vreg5,%vreg4
	  * %vreg9<def> = ADD %vreg5, %vreg8; GR32Bit:%vreg9,%vreg5,%vreg8
	  * FSW %vreg3, %vreg9, 0; mem:ST4[%5] FP32Bit:%vreg3 GR32Bit:%vreg9
	%vreg31<def> = ADD %t5, %zero; GR32Bit:%vreg31
	  * %vreg33<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg33
	  * %vreg34<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg34
	  * %vreg35<def> = SRLI %vreg34, 12; GR32Bit:%vreg35,%vreg34
	  * %vreg36<def> = ADD %vreg33, %vreg35; GR32Bit:%vreg36,%vreg33,%vreg35
	  * %vreg37<def> = ADDI %zero, 16; GR32Bit:%vreg37
	  * %vreg38<def> = SRLI %t5, 22; GR32Bit:%vreg38
	  * %vreg39<def> = SRLI %t5, 12; GR32Bit:%vreg39
	  * %vreg40<def> = ANDI %vreg39, 15; GR32Bit:%vreg40,%vreg39
	  * %vreg41<def> = SRLI %t5, 6; GR32Bit:%vreg41
	  * %vreg42<def> = ANDI %vreg41, 63; GR32Bit:%vreg42,%vreg41
	  * %vreg43<def> = ADDI %zero, 832; GR32Bit:%vreg43
	  * %vreg44<def> = MUL %vreg38, %vreg43; GR32Bit:%vreg44,%vreg38,%vreg43
	  * %vreg45<def> = ADDI %zero, 52; GR32Bit:%vreg45
	  * %vreg46<def> = MUL %vreg40, %vreg45; GR32Bit:%vreg46,%vreg40,%vreg45
	  * %vreg47<def> = ADD %vreg46, %vreg42; GR32Bit:%vreg47,%vreg46,%vreg42
	  * %vreg48<def> = ADD %vreg47, %vreg44; GR32Bit:%vreg48,%vreg47,%vreg44
	  * %vreg49<def> = MUL %vreg48, %vreg37; GR32Bit:%vreg49,%vreg48,%vreg37
	  * %vreg32<def> = ADD %vreg36, %vreg49; GR32Bit:%vreg32,%vreg36,%vreg49
	%vreg50<def> = ADD %t5, %zero; GR32Bit:%vreg50
	  * %vreg52<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg52
	  * %vreg53<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg53
	  * %vreg54<def> = SRLI %vreg53, 12; GR32Bit:%vreg54,%vreg53
	  * %vreg55<def> = ADD %vreg52, %vreg54; GR32Bit:%vreg55,%vreg52,%vreg54
	  * %vreg56<def> = ADDI %zero, 16; GR32Bit:%vreg56
	  * %vreg57<def> = SRLI %t5, 22; GR32Bit:%vreg57
	  * %vreg58<def> = SRLI %t5, 12; GR32Bit:%vreg58
	  * %vreg59<def> = ANDI %vreg58, 15; GR32Bit:%vreg59,%vreg58
	  * %vreg60<def> = SRLI %t5, 6; GR32Bit:%vreg60
	  * %vreg61<def> = ANDI %vreg60, 63; GR32Bit:%vreg61,%vreg60
	  * %vreg62<def> = ADDI %zero, 832; GR32Bit:%vreg62
	  * %vreg63<def> = MUL %vreg57, %vreg62; GR32Bit:%vreg63,%vreg57,%vreg62
	  * %vreg64<def> = ADDI %zero, 52; GR32Bit:%vreg64
	  * %vreg65<def> = MUL %vreg59, %vreg64; GR32Bit:%vreg65,%vreg59,%vreg64
	  * %vreg66<def> = ADD %vreg65, %vreg61; GR32Bit:%vreg66,%vreg65,%vreg61
	  * %vreg67<def> = ADD %vreg66, %vreg63; GR32Bit:%vreg67,%vreg66,%vreg63
	  * %vreg68<def> = MUL %vreg67, %vreg56; GR32Bit:%vreg68,%vreg67,%vreg56
	  * %vreg51<def> = ADD %vreg55, %vreg68; GR32Bit:%vreg51,%vreg55,%vreg68
	%vreg69<def> = ADD %t5, %zero; GR32Bit:%vreg69
	  * %vreg71<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg71
	  * %vreg72<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg72
	  * %vreg73<def> = SRLI %vreg72, 12; GR32Bit:%vreg73,%vreg72
	  * %vreg74<def> = ADD %vreg71, %vreg73; GR32Bit:%vreg74,%vreg71,%vreg73
	  * %vreg75<def> = ADDI %zero, 16; GR32Bit:%vreg75
	  * %vreg76<def> = SRLI %t5, 22; GR32Bit:%vreg76
	  * %vreg77<def> = SRLI %t5, 12; GR32Bit:%vreg77
	  * %vreg78<def> = ANDI %vreg77, 15; GR32Bit:%vreg78,%vreg77
	  * %vreg79<def> = SRLI %t5, 6; GR32Bit:%vreg79
	  * %vreg80<def> = ANDI %vreg79, 63; GR32Bit:%vreg80,%vreg79
	  * %vreg81<def> = ADDI %zero, 832; GR32Bit:%vreg81
	  * %vreg82<def> = MUL %vreg76, %vreg81; GR32Bit:%vreg82,%vreg76,%vreg81
	  * %vreg83<def> = ADDI %zero, 52; GR32Bit:%vreg83
	  * %vreg84<def> = MUL %vreg78, %vreg83; GR32Bit:%vreg84,%vreg78,%vreg83
	  * %vreg85<def> = ADD %vreg84, %vreg80; GR32Bit:%vreg85,%vreg84,%vreg80
	  * %vreg86<def> = ADD %vreg85, %vreg82; GR32Bit:%vreg86,%vreg85,%vreg82
	  * %vreg87<def> = MUL %vreg86, %vreg75; GR32Bit:%vreg87,%vreg86,%vreg75
	  * %vreg70<def> = ADD %vreg74, %vreg87; GR32Bit:%vreg70,%vreg74,%vreg87
    Successors according to CFG: BB#1

-------------
Starting new basic block BB#1
********** MI Scheduling **********
redefine_start21:BB#1 redefine_start21redefine_start2.for.inc
  From: %vreg10<def> = LW %vreg1, 0; mem:LD4[%1] GR32Bit:%vreg10,%vreg1
    To: End Remaining: 0
Max Pressure: GR32Bit=2
Live In: %vreg1 
Live Out: 
FP32BitLimit 32 Actual 0
GR32BitLimit 32 Actual 2
Excess PSets: 
1 subtrees:
  SU(0) in tree 0
  SU(1) in tree 0
  SU(2) in tree 0
SU(0):   %vreg10<def> = LW %vreg1, 0; mem:LD4[%1] GR32Bit:%vreg10,%vreg1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 0
  Height             : 19
  Successors:
   val SU(1): Latency=15 Reg=%vreg10

SU(1):   %vreg11<def> = ADDI %vreg10, 1; GR32Bit:%vreg11,%vreg10
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 15
  Height             : 4
  Predecessors:
   val SU(0): Latency=15 Reg=%vreg10
  Successors:
   val SU(2): Latency=4 Reg=%vreg11

SU(2):   SW %vreg11, %vreg1, 0; mem:ST4[%1] GR32Bit:%vreg11,%vreg1
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 19
  Height             : 0
  Predecessors:
   val SU(1): Latency=4 Reg=%vreg11

SU(0):   %vreg10<def> = LW %vreg1, 0; mem:LD4[%1] GR32Bit:%vreg10,%vreg1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 14
  Depth              : 0
  Height             : 19
  Successors:
   val SU(1): Latency=15 Reg=%vreg10

SU(1):   %vreg11<def> = ADDI %vreg10, 1; GR32Bit:%vreg11,%vreg10
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 15
  Height             : 4
  Predecessors:
   val SU(0): Latency=15 Reg=%vreg10
  Successors:
   val SU(2): Latency=4 Reg=%vreg11

SU(2):   SW %vreg11, %vreg1, 0; mem:ST4[%1] GR32Bit:%vreg11,%vreg1
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 13
  Depth              : 19
  Height             : 0
  Predecessors:
   val SU(1): Latency=4 Reg=%vreg11

Pick node SU(0)  ILP: 1 / 1 = 1 Tree: 0 @0
Scheduling %vreg10<def> = LW %vreg1, 0; mem:LD4[%1] GR32Bit:%vreg10,%vreg1
Pick node SU(1)  ILP: 2 / 16 = 0.125 Tree: 0 @0
Scheduling %vreg11<def> = ADDI %vreg10, 1; GR32Bit:%vreg11,%vreg10
Pick node SU(2)  ILP: 3 / 20 = 0.15 Tree: 0 @0
Scheduling SW %vreg11, %vreg1, 0; mem:ST4[%1] GR32Bit:%vreg11,%vreg1
*** Final schedule for BB#1 ***
SU(0):   %vreg10<def> = LW %vreg1, 0; mem:LD4[%1] GR32Bit:%vreg10,%vreg1
SU(1):   %vreg11<def> = ADDI %vreg10, 1; GR32Bit:%vreg11,%vreg10
SU(2):   SW %vreg11, %vreg1, 0; mem:ST4[%1] GR32Bit:%vreg11,%vreg1

Partitioning instructions of the region into multiple CEs
instr:  %vreg10<def> = LW %vreg1, 0; mem:LD4[%1] GR32Bit:%vreg10,%vreg1
instr:  %vreg11<def> = ADDI %vreg10, 1; GR32Bit:%vreg11,%vreg10
instr:  SW %vreg11, %vreg1, 0; mem:ST4[%1] GR32Bit:%vreg11,%vreg1
Shuffling instructions within the region such that successive instructions belong to the same pHyperOp to ease bundle creation
Renaming registers used across CEs
before falloc, state of bb1:BB#1: derived from LLVM BB %redefine_start21redefine_start2.for.inc
    Predecessors according to CFG: BB#0
	%vreg10<def> = LW %vreg1, 0; mem:LD4[%1] GR32Bit:%vreg10,%vreg1
	%vreg11<def> = ADDI %vreg10, 1; GR32Bit:%vreg11,%vreg10
	SW %vreg11, %vreg1, 0; mem:ST4[%1] GR32Bit:%vreg11,%vreg1
Adding all fallocs first to avoid stalls due to sequential fallocs and fbinds
Adding writecm(for writing sync count to context frames) and fbind instructions
live end of child is itself
Adding localref sw instructions to hyperOp redefine_start21
Adding writecm instructions to hyperOp redefine_start21
Adding writecmp and sync instructions
problem with which child exactly?redefine_start3 with edge of type:6
Adding as livein the predicate consumer address:%physreg43
Computing live-in reg-units in ABI blocks.
0B	BB#0 ra#0
Created 1 new intervals.

*** Renumbered SlotIndexes 832-848 ***
Adding endHyperOp instructions to each pHyperOp

*** Renumbered SlotIndexes 844-860 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 856-872 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 868-884 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 880-896 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 892-908 ***
  %zero<def> = ADDI %zero, 0

*** Renumbered SlotIndexes 904-920 ***
  %zero<def> = ADDI %zero, 0
  %zero<def> = ADDI %zero, 0
After Shuffling regions of basic block, state of BB#1:
BB#1: derived from LLVM BB %redefine_start21redefine_start2.for.inc
    Live Ins: %ra
    Predecessors according to CFG: BB#0
	%vreg10<def> = LW %vreg1, 0; mem:LD4[%1] GR32Bit:%vreg10,%vreg1
	%vreg11<def> = ADDI %vreg10, 1; GR32Bit:%vreg11,%vreg10
	SW %vreg11, %vreg1, 0; mem:ST4[%1] GR32Bit:%vreg11,%vreg1
	%vreg88<def> = COPY %ra; GR32Bit:%vreg88
	%vreg89<def> = ADDI %zero, -1; GR32Bit:%vreg89
	SYNC %vreg88, %vreg89, 60; GR32Bit:%vreg88,%vreg89
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
	END 0
	%zero<def> = ADDI %zero, 0
	%zero<def> = ADDI %zero, 0
Creating pHyperOp bundles for CEs for bb1
  END 0
starting at   %vreg10<def> = LW %vreg1, 0; mem:LD4[%1] GR32Bit:%vreg10,%vreg1
  END 0
starting at   END 0
  END 0
starting at   END 0
starting at   END 0
After bundling, state of BB1:BB#1: derived from LLVM BB %redefine_start21redefine_start2.for.inc
    Live Ins: %ra
    Predecessors according to CFG: BB#0
	%vreg10<def> = LW %vreg1, 0; mem:LD4[%1] GR32Bit:%vreg10,%vreg1
	  * %vreg11<def> = ADDI %vreg10, 1; GR32Bit:%vreg11,%vreg10
	  * SW %vreg11, %vreg1, 0; mem:ST4[%1] GR32Bit:%vreg11,%vreg1
	  * %vreg88<def> = COPY %ra; GR32Bit:%vreg88
	  * %vreg89<def> = ADDI %zero, -1; GR32Bit:%vreg89
	  * SYNC %vreg88, %vreg89, 60; GR32Bit:%vreg88,%vreg89
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
%physreg43,Patching the instructions that are supposed to use the physical registers r30 and r31
Computing live-in reg-units in ABI blocks.
0B	BB#0 ra#0
Created 0 new intervals.

*** Renumbered SlotIndexes 8-976 ***

*** Renumbered SlotIndexes 188-988 ***
********** INTERVALS **********
ra = [0B,868r:0)  0@0B-phi
t5 = EMPTY
zero = EMPTY
%vreg1 = [176r,860r:0)  0@176r
%vreg2 = [204r,228r:0)  0@204r
%vreg3 = [228r,252r:0)  0@228r
%vreg4 = [220r,236r:0)  0@220r
%vreg5 = [236r,244r:0)  0@236r
%vreg6 = [168r,212r:0)  0@168r
%vreg7 = [184r,212r:0)  0@184r
%vreg8 = [212r,244r:0)  0@212r
%vreg9 = [244r,252r:0)  0@244r
%vreg10 = [844r,852r:0)  0@844r
%vreg11 = [852r,860r:0)  0@852r
%vreg12 = [4r,4d:0)  0@4r
%vreg13 = [160r,160d:0)  0@160r
%vreg14 = [24r,48r:0)  0@24r
%vreg15 = [32r,40r:0)  0@32r
%vreg16 = [40r,48r:0)  0@40r
%vreg17 = [48r,160r:0)  0@48r
%vreg18 = [56r,152r:0)  0@56r
%vreg19 = [64r,112r:0)  0@64r
%vreg20 = [72r,80r:0)  0@72r
%vreg21 = [80r,128r:0)  0@80r
%vreg22 = [88r,96r:0)  0@88r
%vreg23 = [96r,136r:0)  0@96r
%vreg24 = [104r,112r:0)  0@104r
%vreg25 = [112r,144r:0)  0@112r
%vreg26 = [120r,128r:0)  0@120r
%vreg27 = [128r,136r:0)  0@128r
%vreg28 = [136r,144r:0)  0@136r
%vreg29 = [144r,152r:0)  0@144r
%vreg30 = [152r,160r:0)  0@152r
%vreg31 = [260r,260d:0)  0@260r
%vreg32 = [404r,404d:0)  0@404r
%vreg33 = [268r,292r:0)  0@268r
%vreg34 = [276r,284r:0)  0@276r
%vreg35 = [284r,292r:0)  0@284r
%vreg36 = [292r,404r:0)  0@292r
%vreg37 = [300r,396r:0)  0@300r
%vreg38 = [308r,356r:0)  0@308r
%vreg39 = [316r,324r:0)  0@316r
%vreg40 = [324r,372r:0)  0@324r
%vreg41 = [332r,340r:0)  0@332r
%vreg42 = [340r,380r:0)  0@340r
%vreg43 = [348r,356r:0)  0@348r
%vreg44 = [356r,388r:0)  0@356r
%vreg45 = [364r,372r:0)  0@364r
%vreg46 = [372r,380r:0)  0@372r
%vreg47 = [380r,388r:0)  0@380r
%vreg48 = [388r,396r:0)  0@388r
%vreg49 = [396r,404r:0)  0@396r
%vreg50 = [412r,412d:0)  0@412r
%vreg51 = [556r,556d:0)  0@556r
%vreg52 = [420r,444r:0)  0@420r
%vreg53 = [428r,436r:0)  0@428r
%vreg54 = [436r,444r:0)  0@436r
%vreg55 = [444r,556r:0)  0@444r
%vreg56 = [452r,548r:0)  0@452r
%vreg57 = [460r,508r:0)  0@460r
%vreg58 = [468r,476r:0)  0@468r
%vreg59 = [476r,524r:0)  0@476r
%vreg60 = [484r,492r:0)  0@484r
%vreg61 = [492r,532r:0)  0@492r
%vreg62 = [500r,508r:0)  0@500r
%vreg63 = [508r,540r:0)  0@508r
%vreg64 = [516r,524r:0)  0@516r
%vreg65 = [524r,532r:0)  0@524r
%vreg66 = [532r,540r:0)  0@532r
%vreg67 = [540r,548r:0)  0@540r
%vreg68 = [548r,556r:0)  0@548r
%vreg69 = [564r,564d:0)  0@564r
%vreg70 = [708r,708d:0)  0@708r
%vreg71 = [572r,596r:0)  0@572r
%vreg72 = [580r,588r:0)  0@580r
%vreg73 = [588r,596r:0)  0@588r
%vreg74 = [596r,708r:0)  0@596r
%vreg75 = [604r,700r:0)  0@604r
%vreg76 = [612r,660r:0)  0@612r
%vreg77 = [620r,628r:0)  0@620r
%vreg78 = [628r,676r:0)  0@628r
%vreg79 = [636r,644r:0)  0@636r
%vreg80 = [644r,684r:0)  0@644r
%vreg81 = [652r,660r:0)  0@652r
%vreg82 = [660r,692r:0)  0@660r
%vreg83 = [668r,676r:0)  0@668r
%vreg84 = [676r,684r:0)  0@676r
%vreg85 = [684r,692r:0)  0@684r
%vreg86 = [692r,700r:0)  0@692r
%vreg87 = [700r,708r:0)  0@700r
%vreg88 = [868r,884r:0)  0@868r
%vreg89 = [876r,884r:0)  0@876r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function redefine_start21: Post SSA
Frame Objects:
  fi#-2: size=4, align=8, fixed, at location [SP+8]
  fi#-1: size=4, align=16, fixed, at location [SP]
Function Live Ins: %ra in %vreg88

0B	BB#0: derived from LLVM BB %redefine_start21redefine_start2.newName01
	    Live Ins: %ra
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg14<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg14
4B		  * %vreg15<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg15
4B		  * %vreg16<def> = SRLI %vreg15, 12; GR32Bit:%vreg16,%vreg15
4B		  * %vreg17<def> = ADD %vreg14, %vreg16; GR32Bit:%vreg17,%vreg14,%vreg16
4B		  * %vreg18<def> = ADDI %zero, 16; GR32Bit:%vreg18
4B		  * %vreg19<def> = SRLI %t5, 22; GR32Bit:%vreg19
4B		  * %vreg20<def> = SRLI %t5, 12; GR32Bit:%vreg20
4B		  * %vreg21<def> = ANDI %vreg20, 15; GR32Bit:%vreg21,%vreg20
4B		  * %vreg22<def> = SRLI %t5, 6; GR32Bit:%vreg22
4B		  * %vreg23<def> = ANDI %vreg22, 63; GR32Bit:%vreg23,%vreg22
4B		  * %vreg24<def> = ADDI %zero, 832; GR32Bit:%vreg24
4B		  * %vreg25<def> = MUL %vreg19, %vreg24; GR32Bit:%vreg25,%vreg19,%vreg24
4B		  * %vreg26<def> = ADDI %zero, 52; GR32Bit:%vreg26
4B		  * %vreg27<def> = MUL %vreg21, %vreg26; GR32Bit:%vreg27,%vreg21,%vreg26
4B		  * %vreg28<def> = ADD %vreg27, %vreg23; GR32Bit:%vreg28,%vreg27,%vreg23
4B		  * %vreg29<def> = ADD %vreg28, %vreg25; GR32Bit:%vreg29,%vreg28,%vreg25
4B		  * %vreg30<def> = MUL %vreg29, %vreg18; GR32Bit:%vreg30,%vreg29,%vreg18
4B		  * %t5<def> = ADD %vreg17, %vreg30; GR32Bit:%vreg17,%vreg30
4B		  * %vreg6<def> = LUI <ga:@redefine_out_array>[TF=2]; GR32Bit:%vreg6
4B		  * %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
4B		  * %vreg7<def> = LUI <MCSym="%lo("ga#256")">; GR32Bit:%vreg7
4B		  * SRLI %vreg7, %vreg7, 12; GR32Bit:%vreg7
4B		  * %vreg2<def> = ADDI %t5, <fi#-2>; GR32Bit:%vreg2
4B		  * %vreg8<def> = ADD %vreg7, %vreg6; GR32Bit:%vreg8,%vreg7,%vreg6
4B		  * %vreg4<def> = LW %vreg1, 0; mem:LD4[%1](align=16) GR32Bit:%vreg4,%vreg1
4B		  * %vreg3<def> = FLW %vreg2, 0; mem:LD4[%2](align=8) FP32Bit:%vreg3 GR32Bit:%vreg2
4B		  * %vreg5<def> = SLLI %vreg4, 2; GR32Bit:%vreg5,%vreg4
4B		  * %vreg9<def> = ADD %vreg5, %vreg8; GR32Bit:%vreg9,%vreg5,%vreg8
4B		  * FSW %vreg3, %vreg9, 0; mem:ST4[%5] FP32Bit:%vreg3 GR32Bit:%vreg9
260B		%t4<def> = ADD %t5, %zero
260B		  * %vreg33<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg33
260B		  * %vreg34<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg34
260B		  * %vreg35<def> = SRLI %vreg34, 12; GR32Bit:%vreg35,%vreg34
260B		  * %vreg36<def> = ADD %vreg33, %vreg35; GR32Bit:%vreg36,%vreg33,%vreg35
260B		  * %vreg37<def> = ADDI %zero, 16; GR32Bit:%vreg37
260B		  * %vreg38<def> = SRLI %t5, 22; GR32Bit:%vreg38
260B		  * %vreg39<def> = SRLI %t5, 12; GR32Bit:%vreg39
260B		  * %vreg40<def> = ANDI %vreg39, 15; GR32Bit:%vreg40,%vreg39
260B		  * %vreg41<def> = SRLI %t5, 6; GR32Bit:%vreg41
260B		  * %vreg42<def> = ANDI %vreg41, 63; GR32Bit:%vreg42,%vreg41
260B		  * %vreg43<def> = ADDI %zero, 832; GR32Bit:%vreg43
260B		  * %vreg44<def> = MUL %vreg38, %vreg43; GR32Bit:%vreg44,%vreg38,%vreg43
260B		  * %vreg45<def> = ADDI %zero, 52; GR32Bit:%vreg45
260B		  * %vreg46<def> = MUL %vreg40, %vreg45; GR32Bit:%vreg46,%vreg40,%vreg45
260B		  * %vreg47<def> = ADD %vreg46, %vreg42; GR32Bit:%vreg47,%vreg46,%vreg42
260B		  * %vreg48<def> = ADD %vreg47, %vreg44; GR32Bit:%vreg48,%vreg47,%vreg44
260B		  * %vreg49<def> = MUL %vreg48, %vreg37; GR32Bit:%vreg49,%vreg48,%vreg37
260B		  * %t5<def> = ADD %vreg36, %vreg49; GR32Bit:%vreg36,%vreg49
412B		%t4<def> = ADD %t5, %zero
412B		  * %vreg52<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg52
412B		  * %vreg53<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg53
412B		  * %vreg54<def> = SRLI %vreg53, 12; GR32Bit:%vreg54,%vreg53
412B		  * %vreg55<def> = ADD %vreg52, %vreg54; GR32Bit:%vreg55,%vreg52,%vreg54
412B		  * %vreg56<def> = ADDI %zero, 16; GR32Bit:%vreg56
412B		  * %vreg57<def> = SRLI %t5, 22; GR32Bit:%vreg57
412B		  * %vreg58<def> = SRLI %t5, 12; GR32Bit:%vreg58
412B		  * %vreg59<def> = ANDI %vreg58, 15; GR32Bit:%vreg59,%vreg58
412B		  * %vreg60<def> = SRLI %t5, 6; GR32Bit:%vreg60
412B		  * %vreg61<def> = ANDI %vreg60, 63; GR32Bit:%vreg61,%vreg60
412B		  * %vreg62<def> = ADDI %zero, 832; GR32Bit:%vreg62
412B		  * %vreg63<def> = MUL %vreg57, %vreg62; GR32Bit:%vreg63,%vreg57,%vreg62
412B		  * %vreg64<def> = ADDI %zero, 52; GR32Bit:%vreg64
412B		  * %vreg65<def> = MUL %vreg59, %vreg64; GR32Bit:%vreg65,%vreg59,%vreg64
412B		  * %vreg66<def> = ADD %vreg65, %vreg61; GR32Bit:%vreg66,%vreg65,%vreg61
412B		  * %vreg67<def> = ADD %vreg66, %vreg63; GR32Bit:%vreg67,%vreg66,%vreg63
412B		  * %vreg68<def> = MUL %vreg67, %vreg56; GR32Bit:%vreg68,%vreg67,%vreg56
412B		  * %t5<def> = ADD %vreg55, %vreg68; GR32Bit:%vreg55,%vreg68
564B		%t4<def> = ADD %t5, %zero
564B		  * %vreg71<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg71
564B		  * %vreg72<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg72
564B		  * %vreg73<def> = SRLI %vreg72, 12; GR32Bit:%vreg73,%vreg72
564B		  * %vreg74<def> = ADD %vreg71, %vreg73; GR32Bit:%vreg74,%vreg71,%vreg73
564B		  * %vreg75<def> = ADDI %zero, 16; GR32Bit:%vreg75
564B		  * %vreg76<def> = SRLI %t5, 22; GR32Bit:%vreg76
564B		  * %vreg77<def> = SRLI %t5, 12; GR32Bit:%vreg77
564B		  * %vreg78<def> = ANDI %vreg77, 15; GR32Bit:%vreg78,%vreg77
564B		  * %vreg79<def> = SRLI %t5, 6; GR32Bit:%vreg79
564B		  * %vreg80<def> = ANDI %vreg79, 63; GR32Bit:%vreg80,%vreg79
564B		  * %vreg81<def> = ADDI %zero, 832; GR32Bit:%vreg81
564B		  * %vreg82<def> = MUL %vreg76, %vreg81; GR32Bit:%vreg82,%vreg76,%vreg81
564B		  * %vreg83<def> = ADDI %zero, 52; GR32Bit:%vreg83
564B		  * %vreg84<def> = MUL %vreg78, %vreg83; GR32Bit:%vreg84,%vreg78,%vreg83
564B		  * %vreg85<def> = ADD %vreg84, %vreg80; GR32Bit:%vreg85,%vreg84,%vreg80
564B		  * %vreg86<def> = ADD %vreg85, %vreg82; GR32Bit:%vreg86,%vreg85,%vreg82
564B		  * %vreg87<def> = MUL %vreg86, %vreg75; GR32Bit:%vreg87,%vreg86,%vreg75
564B		  * %t5<def> = ADD %vreg74, %vreg87; GR32Bit:%vreg74,%vreg87
	    Successors according to CFG: BB#1

836B	BB#1: derived from LLVM BB %redefine_start21redefine_start2.for.inc
	    Live Ins: %ra
	    Predecessors according to CFG: BB#0
844B		%vreg10<def> = LW %vreg1, 0; mem:LD4[%1] GR32Bit:%vreg10,%vreg1
844B		  * %vreg11<def> = ADDI %vreg10, 1; GR32Bit:%vreg11,%vreg10
844B		  * SW %vreg11, %vreg1, 0; mem:ST4[%1] GR32Bit:%vreg11,%vreg1
844B		  * %vreg88<def> = COPY %ra; GR32Bit:%vreg88
844B		  * %vreg89<def> = LUI 1048575; GR32Bit:%vreg89
844B		  * %a5<def> = LUI 4095
844B		  * %a5<def> = SRLI %a5<internal>, 12
844B		  * ADD %vreg89, %vreg89, %a5; GR32Bit:%vreg89
844B		  * SYNC %vreg88, %vreg89, 60; GR32Bit:%vreg88,%vreg89
844B		  * END 0
844B		  * %zero<def> = ADDI %zero, 0
844B		  * %zero<def> = ADDI %zero, 0
916B		END 0
916B		  * %zero<def> = ADDI %zero, 0
916B		  * %zero<def> = ADDI %zero, 0
940B		END 0
940B		  * %zero<def> = ADDI %zero, 0
940B		  * %zero<def> = ADDI %zero, 0
964B		END 0
964B		  * %zero<def> = ADDI %zero, 0
964B		  * %zero<def> = ADDI %zero, 0

# End machine code for function redefine_start21.

********** COMPUTING LIVE DEBUG VARIABLES: redefine_start21 **********
********** DEBUG VARIABLES **********
********** Compute Spill Weights **********
********** Function: redefine_start21
********** GREEDY REGISTER ALLOCATION **********
********** Function: redefine_start21
Replacing 43 with 43 for instruction%vreg88<def> = COPY %ra; GR32Bit:%vreg88

selectOrSplit GR32Bit:%vreg88 [868r,884r:0)  0@868r
hints: %ra
reg 2147483736 that was live-in gets phys reg:43 instead of phys reg:43
assigning %vreg88 to %ra: ra

selectOrSplit GR32Bit:%vreg1 [176r,860r:0)  0@176r
assigning %vreg1 to %t0: t0

selectOrSplit GR32Bit:%vreg17 [48r,160r:0)  0@48r
assigning %vreg17 to %t0: t0

selectOrSplit GR32Bit:%vreg36 [292r,404r:0)  0@292r
assigning %vreg36 to %t1: t1

selectOrSplit GR32Bit:%vreg55 [444r,556r:0)  0@444r
assigning %vreg55 to %t1: t1

selectOrSplit GR32Bit:%vreg74 [596r,708r:0)  0@596r
assigning %vreg74 to %t1: t1

selectOrSplit GR32Bit:%vreg18 [56r,152r:0)  0@56r
assigning %vreg18 to %t1: t1

selectOrSplit GR32Bit:%vreg37 [300r,396r:0)  0@300r
assigning %vreg37 to %t2: t2

selectOrSplit GR32Bit:%vreg56 [452r,548r:0)  0@452r
assigning %vreg56 to %t2: t2

selectOrSplit GR32Bit:%vreg75 [604r,700r:0)  0@604r
assigning %vreg75 to %t2: t2

selectOrSplit GR32Bit:%vreg19 [64r,112r:0)  0@64r
assigning %vreg19 to %t2: t2

selectOrSplit GR32Bit:%vreg21 [80r,128r:0)  0@80r
assigning %vreg21 to %fp: fp

selectOrSplit GR32Bit:%vreg38 [308r,356r:0)  0@308r
assigning %vreg38 to %fp: fp

selectOrSplit GR32Bit:%vreg40 [324r,372r:0)  0@324r
assigning %vreg40 to %a0: a0

selectOrSplit GR32Bit:%vreg57 [460r,508r:0)  0@460r
assigning %vreg57 to %fp: fp

selectOrSplit GR32Bit:%vreg59 [476r,524r:0)  0@476r
assigning %vreg59 to %a0: a0

selectOrSplit GR32Bit:%vreg76 [612r,660r:0)  0@612r
assigning %vreg76 to %fp: fp

selectOrSplit GR32Bit:%vreg78 [628r,676r:0)  0@628r
assigning %vreg78 to %a0: a0

selectOrSplit GR32Bit:%vreg6 [168r,212r:0)  0@168r
assigning %vreg6 to %t1: t1

selectOrSplit GR32Bit:%vreg23 [96r,136r:0)  0@96r
assigning %vreg23 to %a0: a0

selectOrSplit GR32Bit:%vreg42 [340r,380r:0)  0@340r
assigning %vreg42 to %a1: a1

selectOrSplit GR32Bit:%vreg61 [492r,532r:0)  0@492r
assigning %vreg61 to %a1: a1

selectOrSplit GR32Bit:%vreg80 [644r,684r:0)  0@644r
assigning %vreg80 to %a1: a1

selectOrSplit GR32Bit:%vreg8 [212r,244r:0)  0@212r
assigning %vreg8 to %t1: t1

selectOrSplit GR32Bit:%vreg25 [112r,144r:0)  0@112r
assigning %vreg25 to %t2: t2

selectOrSplit GR32Bit:%vreg44 [356r,388r:0)  0@356r
assigning %vreg44 to %fp: fp

selectOrSplit GR32Bit:%vreg63 [508r,540r:0)  0@508r
assigning %vreg63 to %fp: fp

selectOrSplit GR32Bit:%vreg82 [660r,692r:0)  0@660r
assigning %vreg82 to %fp: fp

selectOrSplit GR32Bit:%vreg7 [184r,212r:0)  0@184r
assigning %vreg7 to %t2: t2

selectOrSplit GR32Bit:%vreg2 [204r,228r:0)  0@204r
assigning %vreg2 to %fp: fp

selectOrSplit FP32Bit:%vreg3 [228r,252r:0)  0@228r
assigning %vreg3 to %ft1: ft1

selectOrSplit GR32Bit:%vreg14 [24r,48r:0)  0@24r
assigning %vreg14 to %t0: t0

selectOrSplit GR32Bit:%vreg33 [268r,292r:0)  0@268r
assigning %vreg33 to %t1: t1

selectOrSplit GR32Bit:%vreg52 [420r,444r:0)  0@420r
assigning %vreg52 to %t1: t1

selectOrSplit GR32Bit:%vreg71 [572r,596r:0)  0@572r
assigning %vreg71 to %t1: t1

selectOrSplit GR32Bit:%vreg4 [220r,236r:0)  0@220r
assigning %vreg4 to %t2: t2

selectOrSplit GR32Bit:%vreg5 [236r,244r:0)  0@236r
assigning %vreg5 to %t2: t2

selectOrSplit GR32Bit:%vreg9 [244r,252r:0)  0@244r
assigning %vreg9 to %t1: t1

selectOrSplit GR32Bit:%vreg10 [844r,852r:0)  0@844r
assigning %vreg10 to %t1: t1

selectOrSplit GR32Bit:%vreg11 [852r,860r:0)  0@852r
assigning %vreg11 to %t1: t1

selectOrSplit GR32Bit:%vreg15 [32r,40r:0)  0@32r
assigning %vreg15 to %t1: t1

selectOrSplit GR32Bit:%vreg16 [40r,48r:0)  0@40r
assigning %vreg16 to %t1: t1

selectOrSplit GR32Bit:%vreg20 [72r,80r:0)  0@72r
assigning %vreg20 to %fp: fp

selectOrSplit GR32Bit:%vreg22 [88r,96r:0)  0@88r
assigning %vreg22 to %a0: a0

selectOrSplit GR32Bit:%vreg24 [104r,112r:0)  0@104r
assigning %vreg24 to %a1: a1

selectOrSplit GR32Bit:%vreg26 [120r,128r:0)  0@120r
assigning %vreg26 to %a1: a1

selectOrSplit GR32Bit:%vreg27 [128r,136r:0)  0@128r
assigning %vreg27 to %fp: fp

selectOrSplit GR32Bit:%vreg28 [136r,144r:0)  0@136r
assigning %vreg28 to %fp: fp

selectOrSplit GR32Bit:%vreg29 [144r,152r:0)  0@144r
assigning %vreg29 to %t2: t2

selectOrSplit GR32Bit:%vreg30 [152r,160r:0)  0@152r
assigning %vreg30 to %t1: t1

selectOrSplit GR32Bit:%vreg34 [276r,284r:0)  0@276r
assigning %vreg34 to %t2: t2

selectOrSplit GR32Bit:%vreg35 [284r,292r:0)  0@284r
assigning %vreg35 to %t2: t2

selectOrSplit GR32Bit:%vreg39 [316r,324r:0)  0@316r
assigning %vreg39 to %a0: a0

selectOrSplit GR32Bit:%vreg41 [332r,340r:0)  0@332r
assigning %vreg41 to %a1: a1

selectOrSplit GR32Bit:%vreg43 [348r,356r:0)  0@348r
assigning %vreg43 to %a2: a2

selectOrSplit GR32Bit:%vreg45 [364r,372r:0)  0@364r
assigning %vreg45 to %a2: a2

selectOrSplit GR32Bit:%vreg46 [372r,380r:0)  0@372r
assigning %vreg46 to %a0: a0

selectOrSplit GR32Bit:%vreg47 [380r,388r:0)  0@380r
assigning %vreg47 to %a0: a0

selectOrSplit GR32Bit:%vreg48 [388r,396r:0)  0@388r
assigning %vreg48 to %fp: fp

selectOrSplit GR32Bit:%vreg49 [396r,404r:0)  0@396r
assigning %vreg49 to %t2: t2

selectOrSplit GR32Bit:%vreg53 [428r,436r:0)  0@428r
assigning %vreg53 to %t2: t2

selectOrSplit GR32Bit:%vreg54 [436r,444r:0)  0@436r
assigning %vreg54 to %t2: t2

selectOrSplit GR32Bit:%vreg58 [468r,476r:0)  0@468r
assigning %vreg58 to %a0: a0

selectOrSplit GR32Bit:%vreg60 [484r,492r:0)  0@484r
assigning %vreg60 to %a1: a1

selectOrSplit GR32Bit:%vreg62 [500r,508r:0)  0@500r
assigning %vreg62 to %a2: a2

selectOrSplit GR32Bit:%vreg64 [516r,524r:0)  0@516r
assigning %vreg64 to %a2: a2

selectOrSplit GR32Bit:%vreg65 [524r,532r:0)  0@524r
assigning %vreg65 to %a0: a0

selectOrSplit GR32Bit:%vreg66 [532r,540r:0)  0@532r
assigning %vreg66 to %a0: a0

selectOrSplit GR32Bit:%vreg67 [540r,548r:0)  0@540r
assigning %vreg67 to %fp: fp

selectOrSplit GR32Bit:%vreg68 [548r,556r:0)  0@548r
assigning %vreg68 to %t2: t2

selectOrSplit GR32Bit:%vreg72 [580r,588r:0)  0@580r
assigning %vreg72 to %t2: t2

selectOrSplit GR32Bit:%vreg73 [588r,596r:0)  0@588r
assigning %vreg73 to %t2: t2

selectOrSplit GR32Bit:%vreg77 [620r,628r:0)  0@620r
assigning %vreg77 to %a0: a0

selectOrSplit GR32Bit:%vreg79 [636r,644r:0)  0@636r
assigning %vreg79 to %a1: a1

selectOrSplit GR32Bit:%vreg81 [652r,660r:0)  0@652r
assigning %vreg81 to %a2: a2

selectOrSplit GR32Bit:%vreg83 [668r,676r:0)  0@668r
assigning %vreg83 to %a2: a2

selectOrSplit GR32Bit:%vreg84 [676r,684r:0)  0@676r
assigning %vreg84 to %a0: a0

selectOrSplit GR32Bit:%vreg85 [684r,692r:0)  0@684r
assigning %vreg85 to %a0: a0

selectOrSplit GR32Bit:%vreg86 [692r,700r:0)  0@692r
assigning %vreg86 to %fp: fp

selectOrSplit GR32Bit:%vreg87 [700r,708r:0)  0@700r
assigning %vreg87 to %t2: t2

selectOrSplit GR32Bit:%vreg89 [876r,884r:0)  0@876r
assigning %vreg89 to %t0: t0
********** REWRITE VIRTUAL REGISTERS **********
********** Function: redefine_start21
********** REGISTER MAP **********
[%vreg1 -> %t0] GR32Bit
[%vreg2 -> %fp] GR32Bit
[%vreg3 -> %ft1] FP32Bit
[%vreg4 -> %t2] GR32Bit
[%vreg5 -> %t2] GR32Bit
[%vreg6 -> %t1] GR32Bit
[%vreg7 -> %t2] GR32Bit
[%vreg8 -> %t1] GR32Bit
[%vreg9 -> %t1] GR32Bit
[%vreg10 -> %t1] GR32Bit
[%vreg11 -> %t1] GR32Bit
[%vreg14 -> %t0] GR32Bit
[%vreg15 -> %t1] GR32Bit
[%vreg16 -> %t1] GR32Bit
[%vreg17 -> %t0] GR32Bit
[%vreg18 -> %t1] GR32Bit
[%vreg19 -> %t2] GR32Bit
[%vreg20 -> %fp] GR32Bit
[%vreg21 -> %fp] GR32Bit
[%vreg22 -> %a0] GR32Bit
[%vreg23 -> %a0] GR32Bit
[%vreg24 -> %a1] GR32Bit
[%vreg25 -> %t2] GR32Bit
[%vreg26 -> %a1] GR32Bit
[%vreg27 -> %fp] GR32Bit
[%vreg28 -> %fp] GR32Bit
[%vreg29 -> %t2] GR32Bit
[%vreg30 -> %t1] GR32Bit
[%vreg33 -> %t1] GR32Bit
[%vreg34 -> %t2] GR32Bit
[%vreg35 -> %t2] GR32Bit
[%vreg36 -> %t1] GR32Bit
[%vreg37 -> %t2] GR32Bit
[%vreg38 -> %fp] GR32Bit
[%vreg39 -> %a0] GR32Bit
[%vreg40 -> %a0] GR32Bit
[%vreg41 -> %a1] GR32Bit
[%vreg42 -> %a1] GR32Bit
[%vreg43 -> %a2] GR32Bit
[%vreg44 -> %fp] GR32Bit
[%vreg45 -> %a2] GR32Bit
[%vreg46 -> %a0] GR32Bit
[%vreg47 -> %a0] GR32Bit
[%vreg48 -> %fp] GR32Bit
[%vreg49 -> %t2] GR32Bit
[%vreg52 -> %t1] GR32Bit
[%vreg53 -> %t2] GR32Bit
[%vreg54 -> %t2] GR32Bit
[%vreg55 -> %t1] GR32Bit
[%vreg56 -> %t2] GR32Bit
[%vreg57 -> %fp] GR32Bit
[%vreg58 -> %a0] GR32Bit
[%vreg59 -> %a0] GR32Bit
[%vreg60 -> %a1] GR32Bit
[%vreg61 -> %a1] GR32Bit
[%vreg62 -> %a2] GR32Bit
[%vreg63 -> %fp] GR32Bit
[%vreg64 -> %a2] GR32Bit
[%vreg65 -> %a0] GR32Bit
[%vreg66 -> %a0] GR32Bit
[%vreg67 -> %fp] GR32Bit
[%vreg68 -> %t2] GR32Bit
[%vreg71 -> %t1] GR32Bit
[%vreg72 -> %t2] GR32Bit
[%vreg73 -> %t2] GR32Bit
[%vreg74 -> %t1] GR32Bit
[%vreg75 -> %t2] GR32Bit
[%vreg76 -> %fp] GR32Bit
[%vreg77 -> %a0] GR32Bit
[%vreg78 -> %a0] GR32Bit
[%vreg79 -> %a1] GR32Bit
[%vreg80 -> %a1] GR32Bit
[%vreg81 -> %a2] GR32Bit
[%vreg82 -> %fp] GR32Bit
[%vreg83 -> %a2] GR32Bit
[%vreg84 -> %a0] GR32Bit
[%vreg85 -> %a0] GR32Bit
[%vreg86 -> %fp] GR32Bit
[%vreg87 -> %t2] GR32Bit
[%vreg88 -> %ra] GR32Bit
[%vreg89 -> %t0] GR32Bit

0B	BB#0: derived from LLVM BB %redefine_start21redefine_start2.newName01
	    Live Ins: %ra
4B		%t4<def> = ADD %t5, %zero
4B		  * %vreg14<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg14
4B		  * %vreg15<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg15
4B		  * %vreg16<def> = SRLI %vreg15<kill>, 12; GR32Bit:%vreg16,%vreg15
4B		  * %vreg17<def> = ADD %vreg14<kill>, %vreg16<kill>; GR32Bit:%vreg17,%vreg14,%vreg16
4B		  * %vreg18<def> = ADDI %zero, 16; GR32Bit:%vreg18
4B		  * %vreg19<def> = SRLI %t5, 22; GR32Bit:%vreg19
4B		  * %vreg20<def> = SRLI %t5, 12; GR32Bit:%vreg20
4B		  * %vreg21<def> = ANDI %vreg20<kill>, 15; GR32Bit:%vreg21,%vreg20
4B		  * %vreg22<def> = SRLI %t5, 6; GR32Bit:%vreg22
4B		  * %vreg23<def> = ANDI %vreg22<kill>, 63; GR32Bit:%vreg23,%vreg22
4B		  * %vreg24<def> = ADDI %zero, 832; GR32Bit:%vreg24
4B		  * %vreg25<def> = MUL %vreg19<kill>, %vreg24<kill>; GR32Bit:%vreg25,%vreg19,%vreg24
4B		  * %vreg26<def> = ADDI %zero, 52; GR32Bit:%vreg26
4B		  * %vreg27<def> = MUL %vreg21<kill>, %vreg26<kill>; GR32Bit:%vreg27,%vreg21,%vreg26
4B		  * %vreg28<def> = ADD %vreg27<kill>, %vreg23<kill>; GR32Bit:%vreg28,%vreg27,%vreg23
4B		  * %vreg29<def> = ADD %vreg28<kill>, %vreg25<kill>; GR32Bit:%vreg29,%vreg28,%vreg25
4B		  * %vreg30<def> = MUL %vreg29<kill>, %vreg18<kill>; GR32Bit:%vreg30,%vreg29,%vreg18
4B		  * %t5<def> = ADD %vreg17<kill>, %vreg30<kill>; GR32Bit:%vreg17,%vreg30
4B		  * %vreg6<def> = LUI <ga:@redefine_out_array>[TF=2]; GR32Bit:%vreg6
4B		  * %vreg1<def> = ADDI %t5, <fi#-1>; GR32Bit:%vreg1
4B		  * %vreg7<def> = LUI <MCSym="%lo("ga#256")">; GR32Bit:%vreg7
4B		  * SRLI %vreg7, %vreg7, 12; GR32Bit:%vreg7
4B		  * %vreg2<def> = ADDI %t5, <fi#-2>; GR32Bit:%vreg2
4B		  * %vreg8<def> = ADD %vreg7<kill>, %vreg6<kill>; GR32Bit:%vreg8,%vreg7,%vreg6
4B		  * %vreg4<def> = LW %vreg1, 0; mem:LD4[%1](align=16) GR32Bit:%vreg4,%vreg1
4B		  * %vreg3<def> = FLW %vreg2<kill>, 0; mem:LD4[%2](align=8) FP32Bit:%vreg3 GR32Bit:%vreg2
4B		  * %vreg5<def> = SLLI %vreg4<kill>, 2; GR32Bit:%vreg5,%vreg4
4B		  * %vreg9<def> = ADD %vreg5<kill>, %vreg8<kill>; GR32Bit:%vreg9,%vreg5,%vreg8
4B		  * FSW %vreg3<kill>, %vreg9<kill>, 0; mem:ST4[%5] FP32Bit:%vreg3 GR32Bit:%vreg9
260B		%t4<def> = ADD %t5, %zero
260B		  * %vreg33<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg33
260B		  * %vreg34<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg34
260B		  * %vreg35<def> = SRLI %vreg34<kill>, 12; GR32Bit:%vreg35,%vreg34
260B		  * %vreg36<def> = ADD %vreg33<kill>, %vreg35<kill>; GR32Bit:%vreg36,%vreg33,%vreg35
260B		  * %vreg37<def> = ADDI %zero, 16; GR32Bit:%vreg37
260B		  * %vreg38<def> = SRLI %t5, 22; GR32Bit:%vreg38
260B		  * %vreg39<def> = SRLI %t5, 12; GR32Bit:%vreg39
260B		  * %vreg40<def> = ANDI %vreg39<kill>, 15; GR32Bit:%vreg40,%vreg39
260B		  * %vreg41<def> = SRLI %t5, 6; GR32Bit:%vreg41
260B		  * %vreg42<def> = ANDI %vreg41<kill>, 63; GR32Bit:%vreg42,%vreg41
260B		  * %vreg43<def> = ADDI %zero, 832; GR32Bit:%vreg43
260B		  * %vreg44<def> = MUL %vreg38<kill>, %vreg43<kill>; GR32Bit:%vreg44,%vreg38,%vreg43
260B		  * %vreg45<def> = ADDI %zero, 52; GR32Bit:%vreg45
260B		  * %vreg46<def> = MUL %vreg40<kill>, %vreg45<kill>; GR32Bit:%vreg46,%vreg40,%vreg45
260B		  * %vreg47<def> = ADD %vreg46<kill>, %vreg42<kill>; GR32Bit:%vreg47,%vreg46,%vreg42
260B		  * %vreg48<def> = ADD %vreg47<kill>, %vreg44<kill>; GR32Bit:%vreg48,%vreg47,%vreg44
260B		  * %vreg49<def> = MUL %vreg48<kill>, %vreg37<kill>; GR32Bit:%vreg49,%vreg48,%vreg37
260B		  * %t5<def> = ADD %vreg36<kill>, %vreg49<kill>; GR32Bit:%vreg36,%vreg49
412B		%t4<def> = ADD %t5, %zero
412B		  * %vreg52<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg52
412B		  * %vreg53<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg53
412B		  * %vreg54<def> = SRLI %vreg53<kill>, 12; GR32Bit:%vreg54,%vreg53
412B		  * %vreg55<def> = ADD %vreg52<kill>, %vreg54<kill>; GR32Bit:%vreg55,%vreg52,%vreg54
412B		  * %vreg56<def> = ADDI %zero, 16; GR32Bit:%vreg56
412B		  * %vreg57<def> = SRLI %t5, 22; GR32Bit:%vreg57
412B		  * %vreg58<def> = SRLI %t5, 12; GR32Bit:%vreg58
412B		  * %vreg59<def> = ANDI %vreg58<kill>, 15; GR32Bit:%vreg59,%vreg58
412B		  * %vreg60<def> = SRLI %t5, 6; GR32Bit:%vreg60
412B		  * %vreg61<def> = ANDI %vreg60<kill>, 63; GR32Bit:%vreg61,%vreg60
412B		  * %vreg62<def> = ADDI %zero, 832; GR32Bit:%vreg62
412B		  * %vreg63<def> = MUL %vreg57<kill>, %vreg62<kill>; GR32Bit:%vreg63,%vreg57,%vreg62
412B		  * %vreg64<def> = ADDI %zero, 52; GR32Bit:%vreg64
412B		  * %vreg65<def> = MUL %vreg59<kill>, %vreg64<kill>; GR32Bit:%vreg65,%vreg59,%vreg64
412B		  * %vreg66<def> = ADD %vreg65<kill>, %vreg61<kill>; GR32Bit:%vreg66,%vreg65,%vreg61
412B		  * %vreg67<def> = ADD %vreg66<kill>, %vreg63<kill>; GR32Bit:%vreg67,%vreg66,%vreg63
412B		  * %vreg68<def> = MUL %vreg67<kill>, %vreg56<kill>; GR32Bit:%vreg68,%vreg67,%vreg56
412B		  * %t5<def> = ADD %vreg55<kill>, %vreg68<kill>; GR32Bit:%vreg55,%vreg68
564B		%t4<def> = ADD %t5, %zero
564B		  * %vreg71<def> = LUI <MCSym="%hi("ga#512")">; GR32Bit:%vreg71
564B		  * %vreg72<def> = LUI <MCSym="%lo("ga#512")">; GR32Bit:%vreg72
564B		  * %vreg73<def> = SRLI %vreg72<kill>, 12; GR32Bit:%vreg73,%vreg72
564B		  * %vreg74<def> = ADD %vreg71<kill>, %vreg73<kill>; GR32Bit:%vreg74,%vreg71,%vreg73
564B		  * %vreg75<def> = ADDI %zero, 16; GR32Bit:%vreg75
564B		  * %vreg76<def> = SRLI %t5, 22; GR32Bit:%vreg76
564B		  * %vreg77<def> = SRLI %t5, 12; GR32Bit:%vreg77
564B		  * %vreg78<def> = ANDI %vreg77<kill>, 15; GR32Bit:%vreg78,%vreg77
564B		  * %vreg79<def> = SRLI %t5, 6; GR32Bit:%vreg79
564B		  * %vreg80<def> = ANDI %vreg79<kill>, 63; GR32Bit:%vreg80,%vreg79
564B		  * %vreg81<def> = ADDI %zero, 832; GR32Bit:%vreg81
564B		  * %vreg82<def> = MUL %vreg76<kill>, %vreg81<kill>; GR32Bit:%vreg82,%vreg76,%vreg81
564B		  * %vreg83<def> = ADDI %zero, 52; GR32Bit:%vreg83
564B		  * %vreg84<def> = MUL %vreg78<kill>, %vreg83<kill>; GR32Bit:%vreg84,%vreg78,%vreg83
564B		  * %vreg85<def> = ADD %vreg84<kill>, %vreg80<kill>; GR32Bit:%vreg85,%vreg84,%vreg80
564B		  * %vreg86<def> = ADD %vreg85<kill>, %vreg82<kill>; GR32Bit:%vreg86,%vreg85,%vreg82
564B		  * %vreg87<def> = MUL %vreg86<kill>, %vreg75<kill>; GR32Bit:%vreg87,%vreg86,%vreg75
564B		  * %t5<def> = ADD %vreg74<kill>, %vreg87<kill>; GR32Bit:%vreg74,%vreg87
	    Successors according to CFG: BB#1
> %t4<def> = ADD %t5, %zero
> %t0<def> = LUI <MCSym="%hi("ga#512")">
> %t1<def> = LUI <MCSym="%lo("ga#512")">
> %t1<def> = SRLI %t1<kill>, 12
> %t0<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = ADDI %zero, 16
> %t2<def> = SRLI %t5, 22
> %fp<def> = SRLI %t5, 12
> %fp<def> = ANDI %fp<kill>, 15
> %a0<def> = SRLI %t5, 6
> %a0<def> = ANDI %a0<kill>, 63
> %a1<def> = ADDI %zero, 832
> %t2<def> = MUL %t2<kill>, %a1<kill>
> %a1<def> = ADDI %zero, 52
> %fp<def> = MUL %fp<kill>, %a1<kill>
> %fp<def> = ADD %fp<kill>, %a0<kill>
> %t2<def> = ADD %fp<kill>, %t2<kill>
> %t1<def> = MUL %t2<kill>, %t1<kill>
> %t5<def> = ADD %t0<kill>, %t1<kill>
> %t1<def> = LUI <ga:@redefine_out_array>[TF=2]
> %t0<def> = ADDI %t5, <fi#-1>
> %t2<def> = LUI <MCSym="%lo("ga#256")">
> SRLI %t2, %t2, 12
> %fp<def> = ADDI %t5, <fi#-2>
> %t1<def> = ADD %t2<kill>, %t1<kill>
> %t2<def> = LW %t0, 0; mem:LD4[%1](align=16)
> %ft1<def> = FLW %fp<kill>, 0; mem:LD4[%2](align=8)
> %t2<def> = SLLI %t2<kill>, 2
> %t1<def> = ADD %t2<kill>, %t1<kill>
> FSW %ft1<kill>, %t1<kill>, 0; mem:ST4[%5]
> %t4<def> = ADD %t5, %zero
> %t1<def> = LUI <MCSym="%hi("ga#512")">
> %t2<def> = LUI <MCSym="%lo("ga#512")">
> %t2<def> = SRLI %t2<kill>, 12
> %t1<def> = ADD %t1<kill>, %t2<kill>
> %t2<def> = ADDI %zero, 16
> %fp<def> = SRLI %t5, 22
> %a0<def> = SRLI %t5, 12
> %a0<def> = ANDI %a0<kill>, 15
> %a1<def> = SRLI %t5, 6
> %a1<def> = ANDI %a1<kill>, 63
> %a2<def> = ADDI %zero, 832
> %fp<def> = MUL %fp<kill>, %a2<kill>
> %a2<def> = ADDI %zero, 52
> %a0<def> = MUL %a0<kill>, %a2<kill>
> %a0<def> = ADD %a0<kill>, %a1<kill>
> %fp<def> = ADD %a0<kill>, %fp<kill>
> %t2<def> = MUL %fp<kill>, %t2<kill>
> %t5<def> = ADD %t1<kill>, %t2<kill>
> %t4<def> = ADD %t5, %zero
> %t1<def> = LUI <MCSym="%hi("ga#512")">
> %t2<def> = LUI <MCSym="%lo("ga#512")">
> %t2<def> = SRLI %t2<kill>, 12
> %t1<def> = ADD %t1<kill>, %t2<kill>
> %t2<def> = ADDI %zero, 16
> %fp<def> = SRLI %t5, 22
> %a0<def> = SRLI %t5, 12
> %a0<def> = ANDI %a0<kill>, 15
> %a1<def> = SRLI %t5, 6
> %a1<def> = ANDI %a1<kill>, 63
> %a2<def> = ADDI %zero, 832
> %fp<def> = MUL %fp<kill>, %a2<kill>
> %a2<def> = ADDI %zero, 52
> %a0<def> = MUL %a0<kill>, %a2<kill>
> %a0<def> = ADD %a0<kill>, %a1<kill>
> %fp<def> = ADD %a0<kill>, %fp<kill>
> %t2<def> = MUL %fp<kill>, %t2<kill>
> %t5<def> = ADD %t1<kill>, %t2<kill>
> %t4<def> = ADD %t5, %zero
> %t1<def> = LUI <MCSym="%hi("ga#512")">
> %t2<def> = LUI <MCSym="%lo("ga#512")">
> %t2<def> = SRLI %t2<kill>, 12
> %t1<def> = ADD %t1<kill>, %t2<kill>
> %t2<def> = ADDI %zero, 16
> %fp<def> = SRLI %t5, 22
> %a0<def> = SRLI %t5, 12
> %a0<def> = ANDI %a0<kill>, 15
> %a1<def> = SRLI %t5, 6
> %a1<def> = ANDI %a1<kill>, 63
> %a2<def> = ADDI %zero, 832
> %fp<def> = MUL %fp<kill>, %a2<kill>
> %a2<def> = ADDI %zero, 52
> %a0<def> = MUL %a0<kill>, %a2<kill>
> %a0<def> = ADD %a0<kill>, %a1<kill>
> %fp<def> = ADD %a0<kill>, %fp<kill>
> %t2<def> = MUL %fp<kill>, %t2<kill>
> %t5<def> = ADD %t1<kill>, %t2<kill>
836B	BB#1: derived from LLVM BB %redefine_start21redefine_start2.for.inc
	    Live Ins: %ra %t0
	    Predecessors according to CFG: BB#0
844B		%vreg10<def> = LW %vreg1, 0; mem:LD4[%1] GR32Bit:%vreg10,%vreg1
844B		  * %vreg11<def> = ADDI %vreg10<kill>, 1; GR32Bit:%vreg11,%vreg10
844B		  * SW %vreg11<kill>, %vreg1<kill>, 0; mem:ST4[%1] GR32Bit:%vreg11,%vreg1
844B		  * %vreg88<def> = COPY %ra; GR32Bit:%vreg88
844B		  * %vreg89<def> = LUI 1048575; GR32Bit:%vreg89
844B		  * %a5<def> = LUI 4095
844B		  * %a5<def> = SRLI %a5<internal>, 12
844B		  * ADD %vreg89, %vreg89, %a5; GR32Bit:%vreg89
844B		  * SYNC %vreg88<kill>, %vreg89<kill>, 60; GR32Bit:%vreg88,%vreg89
844B		  * END 0
844B		  * %zero<def> = ADDI %zero, 0
844B		  * %zero<def> = ADDI %zero, 0
916B		END 0
916B		  * %zero<def> = ADDI %zero, 0
916B		  * %zero<def> = ADDI %zero, 0
940B		END 0
940B		  * %zero<def> = ADDI %zero, 0
940B		  * %zero<def> = ADDI %zero, 0
964B		END 0
964B		  * %zero<def> = ADDI %zero, 0
964B		  * %zero<def> = ADDI %zero, 0
> %t1<def> = LW %t0, 0; mem:LD4[%1]
> %t1<def> = ADDI %t1<kill>, 1
> SW %t1<kill>, %t0<kill>, 0; mem:ST4[%1]
> %ra<def> = COPY %ra
Deleting identity copy.
> %t0<def> = LUI 1048575
> %a5<def> = LUI 4095
> %a5<def> = SRLI %a5<internal>, 12
> ADD %t0, %t0, %a5
> SYNC %ra<kill>, %t0<kill>, 60
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
> END 0
> %zero<def> = ADDI %zero, 0
> %zero<def> = ADDI %zero, 0
********** EMITTING LIVE DEBUG VARIABLES **********
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: redefine_start21
current state of mf:# Machine code for function redefine_start21: Post SSA
Frame Objects:
  fi#-2: size=4, align=8, fixed, at location [SP+8]
  fi#-1: size=4, align=16, fixed, at location [SP]
Function Live Ins: %ra in %vreg88

BB#0: derived from LLVM BB %redefine_start21redefine_start2.newName01
    Live Ins: %ra
	%t4<def> = ADD %t5, %zero
	  * %t0<def> = LUI <MCSym="%hi("ga#512")">
	  * %t1<def> = LUI <MCSym="%lo("ga#512")">
	  * %t1<def> = SRLI %t1<kill>, 12
	  * %t0<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = ADDI %zero, 16
	  * %t2<def> = SRLI %t5, 22
	  * %fp<def> = SRLI %t5, 12
	  * %fp<def> = ANDI %fp<kill>, 15
	  * %a0<def> = SRLI %t5, 6
	  * %a0<def> = ANDI %a0<kill>, 63
	  * %a1<def> = ADDI %zero, 832
	  * %t2<def> = MUL %t2<kill>, %a1<kill>
	  * %a1<def> = ADDI %zero, 52
	  * %fp<def> = MUL %fp<kill>, %a1<kill>
	  * %fp<def> = ADD %fp<kill>, %a0<kill>
	  * %t2<def> = ADD %fp<kill>, %t2<kill>
	  * %t1<def> = MUL %t2<kill>, %t1<kill>
	  * %t5<def> = ADD %t0<kill>, %t1<kill>
	  * %t1<def> = LUI <ga:@redefine_out_array>[TF=2]
	  * %t0<def> = ADDI %t5, <fi#-1>
	  * %t2<def> = LUI <MCSym="%lo("ga#256")">
	  * SRLI %t2, %t2, 12
	  * %fp<def> = ADDI %t5, <fi#-2>
	  * %t1<def> = ADD %t2<kill>, %t1<kill>
	  * %t2<def> = LW %t0, 0; mem:LD4[%1](align=16)
	  * %ft1<def> = FLW %fp<kill>, 0; mem:LD4[%2](align=8)
	  * %t2<def> = SLLI %t2<kill>, 2
	  * %t1<def> = ADD %t2<kill>, %t1<kill>
	  * FSW %ft1<kill>, %t1<kill>, 0; mem:ST4[%5]
	%t4<def> = ADD %t5, %zero
	  * %t1<def> = LUI <MCSym="%hi("ga#512")">
	  * %t2<def> = LUI <MCSym="%lo("ga#512")">
	  * %t2<def> = SRLI %t2<kill>, 12
	  * %t1<def> = ADD %t1<kill>, %t2<kill>
	  * %t2<def> = ADDI %zero, 16
	  * %fp<def> = SRLI %t5, 22
	  * %a0<def> = SRLI %t5, 12
	  * %a0<def> = ANDI %a0<kill>, 15
	  * %a1<def> = SRLI %t5, 6
	  * %a1<def> = ANDI %a1<kill>, 63
	  * %a2<def> = ADDI %zero, 832
	  * %fp<def> = MUL %fp<kill>, %a2<kill>
	  * %a2<def> = ADDI %zero, 52
	  * %a0<def> = MUL %a0<kill>, %a2<kill>
	  * %a0<def> = ADD %a0<kill>, %a1<kill>
	  * %fp<def> = ADD %a0<kill>, %fp<kill>
	  * %t2<def> = MUL %fp<kill>, %t2<kill>
	  * %t5<def> = ADD %t1<kill>, %t2<kill>
	%t4<def> = ADD %t5, %zero
	  * %t1<def> = LUI <MCSym="%hi("ga#512")">
	  * %t2<def> = LUI <MCSym="%lo("ga#512")">
	  * %t2<def> = SRLI %t2<kill>, 12
	  * %t1<def> = ADD %t1<kill>, %t2<kill>
	  * %t2<def> = ADDI %zero, 16
	  * %fp<def> = SRLI %t5, 22
	  * %a0<def> = SRLI %t5, 12
	  * %a0<def> = ANDI %a0<kill>, 15
	  * %a1<def> = SRLI %t5, 6
	  * %a1<def> = ANDI %a1<kill>, 63
	  * %a2<def> = ADDI %zero, 832
	  * %fp<def> = MUL %fp<kill>, %a2<kill>
	  * %a2<def> = ADDI %zero, 52
	  * %a0<def> = MUL %a0<kill>, %a2<kill>
	  * %a0<def> = ADD %a0<kill>, %a1<kill>
	  * %fp<def> = ADD %a0<kill>, %fp<kill>
	  * %t2<def> = MUL %fp<kill>, %t2<kill>
	  * %t5<def> = ADD %t1<kill>, %t2<kill>
	%t4<def> = ADD %t5, %zero
	  * %t1<def> = LUI <MCSym="%hi("ga#512")">
	  * %t2<def> = LUI <MCSym="%lo("ga#512")">
	  * %t2<def> = SRLI %t2<kill>, 12
	  * %t1<def> = ADD %t1<kill>, %t2<kill>
	  * %t2<def> = ADDI %zero, 16
	  * %fp<def> = SRLI %t5, 22
	  * %a0<def> = SRLI %t5, 12
	  * %a0<def> = ANDI %a0<kill>, 15
	  * %a1<def> = SRLI %t5, 6
	  * %a1<def> = ANDI %a1<kill>, 63
	  * %a2<def> = ADDI %zero, 832
	  * %fp<def> = MUL %fp<kill>, %a2<kill>
	  * %a2<def> = ADDI %zero, 52
	  * %a0<def> = MUL %a0<kill>, %a2<kill>
	  * %a0<def> = ADD %a0<kill>, %a1<kill>
	  * %fp<def> = ADD %a0<kill>, %fp<kill>
	  * %t2<def> = MUL %fp<kill>, %t2<kill>
	  * %t5<def> = ADD %t1<kill>, %t2<kill>
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %redefine_start21redefine_start2.for.inc
    Live Ins: %ra %t0
    Predecessors according to CFG: BB#0
	%t1<def> = LW %t0, 0; mem:LD4[%1]
	  * %t1<def> = ADDI %t1<kill>, 1
	  * SW %t1<kill>, %t0<kill>, 0; mem:ST4[%1]
	  * %t0<def> = LUI 1048575
	  * %a5<def> = LUI 4095
	  * %a5<def> = SRLI %a5<internal>, 12
	  * ADD %t0, %t0, %a5
	  * SYNC %ra<kill>, %t0<kill>, 60
	  * END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0
	END 0
	  * %zero<def> = ADDI %zero, 0
	  * %zero<def> = ADDI %zero, 0

# End machine code for function redefine_start21.

lowering frame index for func redefine_start21:-1 TO VAL:0
lowering frame index for func redefine_start21:-2 TO VAL:0
