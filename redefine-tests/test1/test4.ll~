; ModuleID = 'tests/test1/test1.c'
target datalayout = "E-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-n32"
target triple = "redefine"

; Function Attrs: nounwind
define i32 @test(i32 %a, i32 %b, i32 %c, i32 %d) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %d.addr = alloca i32, align 4
  %e = alloca i32, align 4
  %f = alloca i32, align 4
  %g = alloca i32, align 4
  %h = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  store i32 %d, i32* %d.addr, align 4
  %0 = load i32* %a.addr, align 4
  %1 = load i32* %b.addr, align 4
  %add = add nsw i32 %0, %1
  store i32 %add, i32* %e, align 4
  %2 = load i32* %c.addr, align 4
  %3 = load i32* %d.addr, align 4
  %add1 = add nsw i32 %2, %3
  store i32 %add1, i32* %f, align 4
  %4 = load i32* %e, align 4
  %5 = load i32* %f, align 4
  %add2 = add nsw i32 %4, %5
  store i32 %add2, i32* %g, align 4
  %6 = load i32* %g, align 4
  %7 = load i32* %e, align 4
  %mul = mul nsw i32 %6, %7
  store i32 %mul, i32* %h, align 4
  %8 = load i32* %h, align 4
  %9 = load i32* %e, align 4
  %cmp = icmp slt i32 %8, %9
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %10 = load i32* %h, align 4
  store i32 %10, i32* %retval
  br label %return

if.else:                                          ; preds = %entry
  %11 = load i32* %e, align 4
  store i32 %11, i32* %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %12 = load i32* %retval
  ret i32 %12
}

attributes #0 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf"="true" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "unsafe-fp-math"="false" "use-soft-float"="false" }
